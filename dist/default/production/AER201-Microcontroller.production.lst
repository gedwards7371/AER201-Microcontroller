

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 25 13:21:02 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  004A64                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3226
   152  004A64  4D                 	db	77
   153  004A65  4D                 	db	77
   154  004A66  4D                 	db	77
   155  004A67  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3217
   158  004A68  4D                 	db	77
   159  004A69  4D                 	db	77
   160  004A6A  4D                 	db	77
   161  004A6B  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FB00                     __pmediumconst:
   165                           	opt stack 0
   166  00FB00  00                 	db	0
   167  00FB01                     _keys:
   168                           	opt stack 0
   169  00FB01  31                 	db	49
   170  00FB02  32                 	db	50
   171  00FB03  33                 	db	51
   172  00FB04  41                 	db	65
   173  00FB05  34                 	db	52
   174  00FB06  35                 	db	53
   175  00FB07  36                 	db	54
   176  00FB08  42                 	db	66
   177  00FB09  37                 	db	55
   178  00FB0A  38                 	db	56
   179  00FB0B  39                 	db	57
   180  00FB0C  43                 	db	67
   181  00FB0D  2A                 	db	42
   182  00FB0E  30                 	db	48
   183  00FB0F  23                 	db	35
   184  00FB10  44                 	db	68
   185  00FB11  00                 	db	0
   186  00FB12                     __end_of_keys:
   187                           	opt stack 0
   188  00FB12                     _dpowers:
   189                           	opt stack 0
   190  00FB12  0001               	dw	1
   191  00FB14  000A               	dw	10
   192  00FB16  0064               	dw	100
   193  00FB18  03E8               	dw	1000
   194  00FB1A  2710               	dw	10000
   195  00FB1C                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB1C                     STR_21:
   269  00FB1C  25                 	db	37
   270  00FB1D  30                 	db	48	;'0'
   271  00FB1E  32                 	db	50	;'2'
   272  00FB1F  64                 	db	100	;'d'
   273  00FB20  25                 	db	37
   274  00FB21  73                 	db	115	;'s'
   275  00FB22  20                 	db	32
   276  00FB23  7C                 	db	124
   277  00FB24  20                 	db	32
   278  00FB25  25                 	db	37
   279  00FB26  30                 	db	48	;'0'
   280  00FB27  32                 	db	50	;'2'
   281  00FB28  64                 	db	100	;'d'
   282  00FB29  3A                 	db	58	;':'
   283  00FB2A  25                 	db	37
   284  00FB2B  30                 	db	48	;'0'
   285  00FB2C  32                 	db	50	;'2'
   286  00FB2D  64                 	db	100	;'d'
   287  00FB2E  3A                 	db	58	;':'
   288  00FB2F  25                 	db	37
   289  00FB30  30                 	db	48	;'0'
   290  00FB31  32                 	db	50	;'2'
   291  00FB32  64                 	db	100	;'d'
   292  00FB33  00                 	db	0
   293  00FB34                     STR_66:
   294  00FB34  28                 	db	40
   295  00FB35  64                 	db	100	;'d'
   296  00FB36  61                 	db	97	;'a'
   297  00FB37  74                 	db	116	;'t'
   298  00FB38  61                 	db	97	;'a'
   299  00FB39  3A                 	db	58	;':'
   300  00FB3A  20                 	db	32
   301  00FB3B  25                 	db	37
   302  00FB3C  75                 	db	117	;'u'
   303  00FB3D  2C                 	db	44
   304  00FB3E  20                 	db	32
   305  00FB3F  61                 	db	97	;'a'
   306  00FB40  64                 	db	100	;'d'
   307  00FB41  64                 	db	100	;'d'
   308  00FB42  72                 	db	114	;'r'
   309  00FB43  3A                 	db	58	;':'
   310  00FB44  20                 	db	32
   311  00FB45  25                 	db	37
   312  00FB46  75                 	db	117	;'u'
   313  00FB47  29                 	db	41
   314  00FB48  00                 	db	0
   315  00FB49                     STR_111:
   316  00FB49  44                 	db	68	;'D'
   317  00FB4A  20                 	db	32
   318  00FB4B  57                 	db	87	;'W'
   319  00FB4C  49                 	db	73	;'I'
   320  00FB4D  4C                 	db	76	;'L'
   321  00FB4E  4C                 	db	76	;'L'
   322  00FB4F  20                 	db	32
   323  00FB50  52                 	db	82	;'R'
   324  00FB51  45                 	db	69	;'E'
   325  00FB52  54                 	db	84	;'T'
   326  00FB53  55                 	db	85	;'U'
   327  00FB54  52                 	db	82	;'R'
   328  00FB55  4E                 	db	78	;'N'
   329  00FB56  20                 	db	32
   330  00FB57  20                 	db	32
   331  00FB58  20                 	db	32
   332  00FB59  20                 	db	32
   333  00FB5A  00                 	db	0
   334  00FB5B                     STR_112:
   335  00FB5B  4F                 	db	79	;'O'
   336  00FB5C  54                 	db	84	;'T'
   337  00FB5D  48                 	db	72	;'H'
   338  00FB5E  45                 	db	69	;'E'
   339  00FB5F  52                 	db	82	;'R'
   340  00FB60  20                 	db	32
   341  00FB61  53                 	db	83	;'S'
   342  00FB62  45                 	db	69	;'E'
   343  00FB63  54                 	db	84	;'T'
   344  00FB64  53                 	db	83	;'S'
   345  00FB65  20                 	db	32
   346  00FB66  52                 	db	82	;'R'
   347  00FB67  41                 	db	65	;'A'
   348  00FB68  35                 	db	53	;'5'
   349  00FB69  20                 	db	32
   350  00FB6A  20                 	db	32
   351  00FB6B  20                 	db	32
   352  00FB6C  00                 	db	0
   353  00FB6D                     STR_116:
   354  00FB6D  53                 	db	83	;'S'
   355  00FB6E  3A                 	db	58	;':'
   356  00FB6F  20                 	db	32
   357  00FB70  44                 	db	68	;'D'
   358  00FB71  20                 	db	32
   359  00FB72  57                 	db	87	;'W'
   360  00FB73  49                 	db	73	;'I'
   361  00FB74  4C                 	db	76	;'L'
   362  00FB75  4C                 	db	76	;'L'
   363  00FB76  20                 	db	32
   364  00FB77  52                 	db	82	;'R'
   365  00FB78  45                 	db	69	;'E'
   366  00FB79  54                 	db	84	;'T'
   367  00FB7A  55                 	db	85	;'U'
   368  00FB7B  52                 	db	82	;'R'
   369  00FB7C  4E                 	db	78	;'N'
   370  00FB7D  20                 	db	32
   371  00FB7E  00                 	db	0
   372  00FB7F                     STR_119:
   373  00FB7F  4F                 	db	79	;'O'
   374  00FB80  54                 	db	84	;'T'
   375  00FB81  48                 	db	72	;'H'
   376  00FB82  45                 	db	69	;'E'
   377  00FB83  52                 	db	82	;'R'
   378  00FB84  20                 	db	32
   379  00FB85  54                 	db	84	;'T'
   380  00FB86  4F                 	db	79	;'O'
   381  00FB87  47                 	db	71	;'G'
   382  00FB88  47                 	db	71	;'G'
   383  00FB89  4C                 	db	76	;'L'
   384  00FB8A  45                 	db	69	;'E'
   385  00FB8B  53                 	db	83	;'S'
   386  00FB8C  20                 	db	32
   387  00FB8D  43                 	db	67	;'C'
   388  00FB8E  41                 	db	65	;'A'
   389  00FB8F  4D                 	db	77	;'M'
   390  00FB90  00                 	db	0
   391  00FB91                     STR_3:
   392  00FB91  2D                 	db	45
   393  00FB92  2D                 	db	45
   394  00FB93  20                 	db	32
   395  00FB94  4C                 	db	76	;'L'
   396  00FB95  4F                 	db	79	;'O'
   397  00FB96  47                 	db	71	;'G'
   398  00FB97  20                 	db	32
   399  00FB98  25                 	db	37
   400  00FB99  32                 	db	50	;'2'
   401  00FB9A  64                 	db	100	;'d'
   402  00FB9B  20                 	db	32
   403  00FB9C  48                 	db	72	;'H'
   404  00FB9D  45                 	db	69	;'E'
   405  00FB9E  52                 	db	82	;'R'
   406  00FB9F  45                 	db	69	;'E'
   407  00FBA0  2D                 	db	45
   408  00FBA1  2D                 	db	45
   409  00FBA2  00                 	db	0
   410  00FBA3                     STR_1:
   411  00FBA3  52                 	db	82	;'R'
   412  00FBA4  45                 	db	69	;'E'
   413  00FBA5  53                 	db	83	;'S'
   414  00FBA6  55                 	db	85	;'U'
   415  00FBA7  4C                 	db	76	;'L'
   416  00FBA8  54                 	db	84	;'T'
   417  00FBA9  53                 	db	83	;'S'
   418  00FBAA  20                 	db	32
   419  00FBAB  49                 	db	73	;'I'
   420  00FBAC  4E                 	db	78	;'N'
   421  00FBAD  20                 	db	32
   422  00FBAE  4C                 	db	76	;'L'
   423  00FBAF  4F                 	db	79	;'O'
   424  00FBB0  47                 	db	71	;'G'
   425  00FBB1  20                 	db	32
   426  00FBB2  25                 	db	37
   427  00FBB3  64                 	db	100	;'d'
   428  00FBB4  00                 	db	0
   429  00FBB5                     STR_102:
   430  00FBB5  4D                 	db	77	;'M'
   431  00FBB6  49                 	db	73	;'I'
   432  00FBB7  44                 	db	68	;'D'
   433  00FBB8  20                 	db	32
   434  00FBB9  2D                 	db	45
   435  00FBBA  2D                 	db	45
   436  00FBBB  20                 	db	32
   437  00FBBC  32                 	db	50	;'2'
   438  00FBBD  73                 	db	115	;'s'
   439  00FBBE  20                 	db	32
   440  00FBBF  20                 	db	32
   441  00FBC0  20                 	db	32
   442  00FBC1  20                 	db	32
   443  00FBC2  20                 	db	32
   444  00FBC3  20                 	db	32
   445  00FBC4  20                 	db	32
   446  00FBC5  00                 	db	0
   447  00FBC6                     STR_105:
   448  00FBC6  44                 	db	68	;'D'
   449  00FBC7  52                 	db	82	;'R'
   450  00FBC8  4F                 	db	79	;'O'
   451  00FBC9  50                 	db	80	;'P'
   452  00FBCA  20                 	db	32
   453  00FBCB  2D                 	db	45
   454  00FBCC  2D                 	db	45
   455  00FBCD  20                 	db	32
   456  00FBCE  32                 	db	50	;'2'
   457  00FBCF  73                 	db	115	;'s'
   458  00FBD0  20                 	db	32
   459  00FBD1  20                 	db	32
   460  00FBD2  20                 	db	32
   461  00FBD3  20                 	db	32
   462  00FBD4  20                 	db	32
   463  00FBD5  20                 	db	32
   464  00FBD6  00                 	db	0
   465  00FBD7                     STR_99:
   466  00FBD7  4C                 	db	76	;'L'
   467  00FBD8  45                 	db	69	;'E'
   468  00FBD9  46                 	db	70	;'F'
   469  00FBDA  54                 	db	84	;'T'
   470  00FBDB  20                 	db	32
   471  00FBDC  2D                 	db	45
   472  00FBDD  2D                 	db	45
   473  00FBDE  20                 	db	32
   474  00FBDF  32                 	db	50	;'2'
   475  00FBE0  73                 	db	115	;'s'
   476  00FBE1  20                 	db	32
   477  00FBE2  20                 	db	32
   478  00FBE3  20                 	db	32
   479  00FBE4  20                 	db	32
   480  00FBE5  20                 	db	32
   481  00FBE6  20                 	db	32
   482  00FBE7  00                 	db	0
   483  00FBE8                     STR_104:
   484  00FBE8  4C                 	db	76	;'L'
   485  00FBE9  45                 	db	69	;'E'
   486  00FBEA  56                 	db	86	;'V'
   487  00FBEB  45                 	db	69	;'E'
   488  00FBEC  4C                 	db	76	;'L'
   489  00FBED  20                 	db	32
   490  00FBEE  2D                 	db	45
   491  00FBEF  2D                 	db	45
   492  00FBF0  20                 	db	32
   493  00FBF1  32                 	db	50	;'2'
   494  00FBF2  73                 	db	115	;'s'
   495  00FBF3  20                 	db	32
   496  00FBF4  20                 	db	32
   497  00FBF5  20                 	db	32
   498  00FBF6  20                 	db	32
   499  00FBF7  20                 	db	32
   500  00FBF8  00                 	db	0
   501  00FBF9                     STR_98:
   502  00FBF9  52                 	db	82	;'R'
   503  00FBFA  49                 	db	73	;'I'
   504  00FBFB  47                 	db	71	;'G'
   505  00FBFC  48                 	db	72	;'H'
   506  00FBFD  54                 	db	84	;'T'
   507  00FBFE  20                 	db	32
   508  00FBFF  2D                 	db	45
   509  00FC00  2D                 	db	45
   510  00FC01  20                 	db	32
   511  00FC02  32                 	db	50	;'2'
   512  00FC03  73                 	db	115	;'s'
   513  00FC04  20                 	db	32
   514  00FC05  20                 	db	32
   515  00FC06  20                 	db	32
   516  00FC07  20                 	db	32
   517  00FC08  20                 	db	32
   518  00FC09  00                 	db	0
   519  00FC0A                     STR_97:
   520  00FC0A  4D                 	db	77	;'M'
   521  00FC0B  49                 	db	73	;'I'
   522  00FC0C  44                 	db	68	;'D'
   523  00FC0D  44                 	db	68	;'D'
   524  00FC0E  4C                 	db	76	;'L'
   525  00FC0F  45                 	db	69	;'E'
   526  00FC10  20                 	db	32
   527  00FC11  2D                 	db	45
   528  00FC12  2D                 	db	45
   529  00FC13  20                 	db	32
   530  00FC14  32                 	db	50	;'2'
   531  00FC15  73                 	db	115	;'s'
   532  00FC16  20                 	db	32
   533  00FC17  20                 	db	32
   534  00FC18  20                 	db	32
   535  00FC19  20                 	db	32
   536  00FC1A  00                 	db	0
   537  00FC1B  44                 	db	68	;'D'
   538  00FC1C  20                 	db	32
   539  00FC1D  57                 	db	87	;'W'
   540  00FC1E  49                 	db	73	;'I'
   541  00FC1F  4C                 	db	76	;'L'
   542  00FC20  4C                 	db	76	;'L'
   543  00FC21  20                 	db	32
   544  00FC22  52                 	db	82	;'R'
   545  00FC23  45                 	db	69	;'E'
   546  00FC24  54                 	db	84	;'T'
   547  00FC25  55                 	db	85	;'U'
   548  00FC26  52                 	db	82	;'R'
   549  00FC27  4E                 	db	78	;'N'
   550  00FC28  20                 	db	32
   551  00FC29  20                 	db	32
   552  00FC2A  20                 	db	32
   553  00FC2B  00                 	db	0
   554  00FC2C                     STR_100:
   555  00FC2C  4D                 	db	77	;'M'
   556  00FC2D  49                 	db	73	;'I'
   557  00FC2E  44                 	db	68	;'D'
   558  00FC2F  2D                 	db	45
   559  00FC30  4C                 	db	76	;'L'
   560  00FC31  45                 	db	69	;'E'
   561  00FC32  46                 	db	70	;'F'
   562  00FC33  54                 	db	84	;'T'
   563  00FC34  20                 	db	32
   564  00FC35  2D                 	db	45
   565  00FC36  2D                 	db	45
   566  00FC37  20                 	db	32
   567  00FC38  32                 	db	50	;'2'
   568  00FC39  73                 	db	115	;'s'
   569  00FC3A  20                 	db	32
   570  00FC3B  20                 	db	32
   571  00FC3C  00                 	db	0
   572  00FC3D                     STR_101:
   573  00FC3D  4D                 	db	77	;'M'
   574  00FC3E  49                 	db	73	;'I'
   575  00FC3F  44                 	db	68	;'D'
   576  00FC40  2D                 	db	45
   577  00FC41  52                 	db	82	;'R'
   578  00FC42  49                 	db	73	;'I'
   579  00FC43  47                 	db	71	;'G'
   580  00FC44  48                 	db	72	;'H'
   581  00FC45  54                 	db	84	;'T'
   582  00FC46  20                 	db	32
   583  00FC47  2D                 	db	45
   584  00FC48  2D                 	db	45
   585  00FC49  20                 	db	32
   586  00FC4A  32                 	db	50	;'2'
   587  00FC4B  73                 	db	115	;'s'
   588  00FC4C  20                 	db	32
   589  00FC4D  00                 	db	0
   590  00FC4E  45                 	db	69	;'E'
   591  00FC4F  4C                 	db	76	;'L'
   592  00FC50  53                 	db	83	;'S'
   593  00FC51  45                 	db	69	;'E'
   594  00FC52  20                 	db	32
   595  00FC53  54                 	db	84	;'T'
   596  00FC54  4F                 	db	79	;'O'
   597  00FC55  47                 	db	71	;'G'
   598  00FC56  47                 	db	71	;'G'
   599  00FC57  4C                 	db	76	;'L'
   600  00FC58  45                 	db	69	;'E'
   601  00FC59  53                 	db	83	;'S'
   602  00FC5A  20                 	db	32
   603  00FC5B  52                 	db	82	;'R'
   604  00FC5C  41                 	db	65	;'A'
   605  00FC5D  35                 	db	53	;'5'
   606  00FC5E  00                 	db	0
   607  00FC5F                     STR_72:
   608  00FC5F  41                 	db	65	;'A'
   609  00FC60  4C                 	db	76	;'L'
   610  00FC61  47                 	db	71	;'G'
   611  00FC62  31                 	db	49	;'1'
   612  00FC63  3A                 	db	58	;':'
   613  00FC64  20                 	db	32
   614  00FC65  39                 	db	57	;'9'
   615  00FC66  20                 	db	32
   616  00FC67  50                 	db	80	;'P'
   617  00FC68  4F                 	db	79	;'O'
   618  00FC69  50                 	db	80	;'P'
   619  00FC6A  4E                 	db	78	;'N'
   620  00FC6B  4F                 	db	79	;'O'
   621  00FC6C  54                 	db	84	;'T'
   622  00FC6D  41                 	db	65	;'A'
   623  00FC6E  42                 	db	66	;'B'
   624  00FC6F  00                 	db	0
   625  00FC70                     STR_68:
   626  00FC70  31                 	db	49	;'1'
   627  00FC71  2E                 	db	46
   628  00FC72  41                 	db	65	;'A'
   629  00FC73  4C                 	db	76	;'L'
   630  00FC74  47                 	db	71	;'G'
   631  00FC75  7C                 	db	124
   632  00FC76  32                 	db	50	;'2'
   633  00FC77  2E                 	db	46
   634  00FC78  53                 	db	83	;'S'
   635  00FC79  4E                 	db	78	;'N'
   636  00FC7A  52                 	db	82	;'R'
   637  00FC7B  7C                 	db	124
   638  00FC7C  33                 	db	51	;'3'
   639  00FC7D  2E                 	db	46
   640  00FC7E  41                 	db	65	;'A'
   641  00FC7F  43                 	db	67	;'C'
   642  00FC80  00                 	db	0
   643  00FC81                     STR_92:
   644  00FC81  54                 	db	84	;'T'
   645  00FC82  53                 	db	83	;'S'
   646  00FC83  54                 	db	84	;'T'
   647  00FC84  3A                 	db	58	;':'
   648  00FC85  20                 	db	32
   649  00FC86  43                 	db	67	;'C'
   650  00FC87  4F                 	db	79	;'O'
   651  00FC88  4E                 	db	78	;'N'
   652  00FC89  44                 	db	68	;'D'
   653  00FC8A  20                 	db	32
   654  00FC8B  53                 	db	83	;'S'
   655  00FC8C  4F                 	db	79	;'O'
   656  00FC8D  4C                 	db	76	;'L'
   657  00FC8E  4E                 	db	78	;'N'
   658  00FC8F  27                 	db	39
   659  00FC90  44                 	db	68	;'D'
   660  00FC91  00                 	db	0
   661  00FC92                     STR_94:
   662  00FC92  54                 	db	84	;'T'
   663  00FC93  53                 	db	83	;'S'
   664  00FC94  54                 	db	84	;'T'
   665  00FC95  3A                 	db	58	;':'
   666  00FC96  20                 	db	32
   667  00FC97  50                 	db	80	;'P'
   668  00FC98  55                 	db	85	;'U'
   669  00FC99  53                 	db	83	;'S'
   670  00FC9A  48                 	db	72	;'H'
   671  00FC9B  20                 	db	32
   672  00FC9C  53                 	db	83	;'S'
   673  00FC9D  4F                 	db	79	;'O'
   674  00FC9E  4C                 	db	76	;'L'
   675  00FC9F  4E                 	db	78	;'N'
   676  00FCA0  27                 	db	39
   677  00FCA1  44                 	db	68	;'D'
   678  00FCA2  00                 	db	0
   679  00FCA3                     STR_69:
   680  00FCA3  34                 	db	52	;'4'
   681  00FCA4  2E                 	db	46
   682  00FCA5  48                 	db	72	;'H'
   683  00FCA6  49                 	db	73	;'I'
   684  00FCA7  7C                 	db	124
   685  00FCA8  35                 	db	53	;'5'
   686  00FCA9  2E                 	db	46
   687  00FCAA  54                 	db	84	;'T'
   688  00FCAB  4F                 	db	79	;'O'
   689  00FCAC  47                 	db	71	;'G'
   690  00FCAD  7C                 	db	124
   691  00FCAE  36                 	db	54	;'6'
   692  00FCAF  2E                 	db	46
   693  00FCB0  45                 	db	69	;'E'
   694  00FCB1  45                 	db	69	;'E'
   695  00FCB2  50                 	db	80	;'P'
   696  00FCB3  00                 	db	0
   697  00FCB4                     STR_110:
   698  00FCB4  54                 	db	84	;'T'
   699  00FCB5  53                 	db	83	;'S'
   700  00FCB6  54                 	db	84	;'T'
   701  00FCB7  3A                 	db	58	;':'
   702  00FCB8  20                 	db	32
   703  00FCB9  42                 	db	66	;'B'
   704  00FCBA  4F                 	db	79	;'O'
   705  00FCBB  54                 	db	84	;'T'
   706  00FCBC  48                 	db	72	;'H'
   707  00FCBD  20                 	db	32
   708  00FCBE  53                 	db	83	;'S'
   709  00FCBF  45                 	db	69	;'E'
   710  00FCC0  52                 	db	82	;'R'
   711  00FCC1  56                 	db	86	;'V'
   712  00FCC2  4F                 	db	79	;'O'
   713  00FCC3  53                 	db	83	;'S'
   714  00FCC4  00                 	db	0
   715  00FCC5                     STR_41:
   716  00FCC5  4C                 	db	76	;'L'
   717  00FCC6  4F                 	db	79	;'O'
   718  00FCC7  47                 	db	71	;'G'
   719  00FCC8  20                 	db	32
   720  00FCC9  31                 	db	49	;'1'
   721  00FCCA  20                 	db	32
   722  00FCCB  20                 	db	32
   723  00FCCC  20                 	db	32
   724  00FCCD  20                 	db	32
   725  00FCCE  20                 	db	32
   726  00FCCF  20                 	db	32
   727  00FCD0  20                 	db	32
   728  00FCD1  20                 	db	32
   729  00FCD2  20                 	db	32
   730  00FCD3  20                 	db	32
   731  00FCD4  20                 	db	32
   732  00FCD5  00                 	db	0
   733  00FCD6                     STR_40:
   734  00FCD6  4C                 	db	76	;'L'
   735  00FCD7  4F                 	db	79	;'O'
   736  00FCD8  47                 	db	71	;'G'
   737  00FCD9  20                 	db	32
   738  00FCDA  32                 	db	50	;'2'
   739  00FCDB  20                 	db	32
   740  00FCDC  20                 	db	32
   741  00FCDD  20                 	db	32
   742  00FCDE  20                 	db	32
   743  00FCDF  20                 	db	32
   744  00FCE0  20                 	db	32
   745  00FCE1  20                 	db	32
   746  00FCE2  20                 	db	32
   747  00FCE3  20                 	db	32
   748  00FCE4  20                 	db	32
   749  00FCE5  20                 	db	32
   750  00FCE6  00                 	db	0
   751  00FCE7                     STR_44:
   752  00FCE7  4C                 	db	76	;'L'
   753  00FCE8  4F                 	db	79	;'O'
   754  00FCE9  47                 	db	71	;'G'
   755  00FCEA  20                 	db	32
   756  00FCEB  33                 	db	51	;'3'
   757  00FCEC  20                 	db	32
   758  00FCED  20                 	db	32
   759  00FCEE  20                 	db	32
   760  00FCEF  20                 	db	32
   761  00FCF0  20                 	db	32
   762  00FCF1  20                 	db	32
   763  00FCF2  20                 	db	32
   764  00FCF3  20                 	db	32
   765  00FCF4  20                 	db	32
   766  00FCF5  20                 	db	32
   767  00FCF6  20                 	db	32
   768  00FCF7  00                 	db	0
   769  00FCF8                     STR_48:
   770  00FCF8  4C                 	db	76	;'L'
   771  00FCF9  4F                 	db	79	;'O'
   772  00FCFA  47                 	db	71	;'G'
   773  00FCFB  20                 	db	32
   774  00FCFC  34                 	db	52	;'4'
   775  00FCFD  20                 	db	32
   776  00FCFE  20                 	db	32
   777  00FCFF  20                 	db	32
   778  00FD00  20                 	db	32
   779  00FD01  20                 	db	32
   780  00FD02  20                 	db	32
   781  00FD03  20                 	db	32
   782  00FD04  20                 	db	32
   783  00FD05  20                 	db	32
   784  00FD06  20                 	db	32
   785  00FD07  20                 	db	32
   786  00FD08  00                 	db	0
   787  00FD09                     STR_36:
   788  00FD09  33                 	db	51	;'3'
   789  00FD0A  2E                 	db	46
   790  00FD0B  20                 	db	32
   791  00FD0C  4C                 	db	76	;'L'
   792  00FD0D  4F                 	db	79	;'O'
   793  00FD0E  47                 	db	71	;'G'
   794  00FD0F  53                 	db	83	;'S'
   795  00FD10  20                 	db	32
   796  00FD11  20                 	db	32
   797  00FD12  20                 	db	32
   798  00FD13  20                 	db	32
   799  00FD14  20                 	db	32
   800  00FD15  20                 	db	32
   801  00FD16  20                 	db	32
   802  00FD17  20                 	db	32
   803  00FD18  20                 	db	32
   804  00FD19  00                 	db	0
   805  00FD1A                     STR_32:
   806  00FD1A  32                 	db	50	;'2'
   807  00FD1B  2E                 	db	46
   808  00FD1C  20                 	db	32
   809  00FD1D  53                 	db	83	;'S'
   810  00FD1E  4F                 	db	79	;'O'
   811  00FD1F  52                 	db	82	;'R'
   812  00FD20  54                 	db	84	;'T'
   813  00FD21  20                 	db	32
   814  00FD22  20                 	db	32
   815  00FD23  20                 	db	32
   816  00FD24  20                 	db	32
   817  00FD25  20                 	db	32
   818  00FD26  20                 	db	32
   819  00FD27  20                 	db	32
   820  00FD28  20                 	db	32
   821  00FD29  20                 	db	32
   822  00FD2A  00                 	db	0
   823  00FD2B                     STR_33:
   824  00FD2B  31                 	db	49	;'1'
   825  00FD2C  2E                 	db	46
   826  00FD2D  20                 	db	32
   827  00FD2E  44                 	db	68	;'D'
   828  00FD2F  41                 	db	65	;'A'
   829  00FD30  54                 	db	84	;'T'
   830  00FD31  45                 	db	69	;'E'
   831  00FD32  2F                 	db	47
   832  00FD33  54                 	db	84	;'T'
   833  00FD34  49                 	db	73	;'I'
   834  00FD35  4D                 	db	77	;'M'
   835  00FD36  45                 	db	69	;'E'
   836  00FD37  20                 	db	32
   837  00FD38  20                 	db	32
   838  00FD39  20                 	db	32
   839  00FD3A  20                 	db	32
   840  00FD3B  00                 	db	0
   841  00FD3C                     STR_24:
   842  00FD3C  20                 	db	32
   843  00FD3D  2D                 	db	45
   844  00FD3E  2D                 	db	45
   845  00FD3F  20                 	db	32
   846  00FD40  50                 	db	80	;'P'
   847  00FD41  4F                 	db	79	;'O'
   848  00FD42  50                 	db	80	;'P'
   849  00FD43  20                 	db	32
   850  00FD44  20                 	db	32
   851  00FD45  43                 	db	67	;'C'
   852  00FD46  41                 	db	65	;'A'
   853  00FD47  4E                 	db	78	;'N'
   854  00FD48  20                 	db	32
   855  00FD49  2D                 	db	45
   856  00FD4A  2D                 	db	45
   857  00FD4B  20                 	db	32
   858  00FD4C  00                 	db	0
   859  00FD4D                     STR_26:
   860  00FD4D  20                 	db	32
   861  00FD4E  2D                 	db	45
   862  00FD4F  2D                 	db	45
   863  00FD50  20                 	db	32
   864  00FD51  53                 	db	83	;'S'
   865  00FD52  4F                 	db	79	;'O'
   866  00FD53  55                 	db	85	;'U'
   867  00FD54  50                 	db	80	;'P'
   868  00FD55  20                 	db	32
   869  00FD56  43                 	db	67	;'C'
   870  00FD57  41                 	db	65	;'A'
   871  00FD58  4E                 	db	78	;'N'
   872  00FD59  20                 	db	32
   873  00FD5A  2D                 	db	45
   874  00FD5B  2D                 	db	45
   875  00FD5C  20                 	db	32
   876  00FD5D  00                 	db	0
   877  00FD5E                     STR_28:
   878  00FD5E  2D                 	db	45
   879  00FD5F  2D                 	db	45
   880  00FD60  20                 	db	32
   881  00FD61  54                 	db	84	;'T'
   882  00FD62  4F                 	db	79	;'O'
   883  00FD63  54                 	db	84	;'T'
   884  00FD64  41                 	db	65	;'A'
   885  00FD65  4C                 	db	76	;'L'
   886  00FD66  20                 	db	32
   887  00FD67  43                 	db	67	;'C'
   888  00FD68  41                 	db	65	;'A'
   889  00FD69  4E                 	db	78	;'N'
   890  00FD6A  53                 	db	83	;'S'
   891  00FD6B  20                 	db	32
   892  00FD6C  2D                 	db	45
   893  00FD6D  2D                 	db	45
   894  00FD6E  00                 	db	0
   895  00FD6F                     STR_39:
   896  00FD6F  4C                 	db	76	;'L'
   897  00FD70  4F                 	db	79	;'O'
   898  00FD71  47                 	db	71	;'G'
   899  00FD72  20                 	db	32
   900  00FD73  31                 	db	49	;'1'
   901  00FD74  20                 	db	32
   902  00FD75  20                 	db	32
   903  00FD76  20                 	db	32
   904  00FD77  20                 	db	32
   905  00FD78  20                 	db	32
   906  00FD79  20                 	db	32
   907  00FD7A  20                 	db	32
   908  00FD7B  20                 	db	32
   909  00FD7C  20                 	db	32
   910  00FD7D  20                 	db	32
   911  00FD7E  3C                 	db	60	;'<'
   912  00FD7F  00                 	db	0
   913  00FD80                     STR_42:
   914  00FD80  4C                 	db	76	;'L'
   915  00FD81  4F                 	db	79	;'O'
   916  00FD82  47                 	db	71	;'G'
   917  00FD83  20                 	db	32
   918  00FD84  32                 	db	50	;'2'
   919  00FD85  20                 	db	32
   920  00FD86  20                 	db	32
   921  00FD87  20                 	db	32
   922  00FD88  20                 	db	32
   923  00FD89  20                 	db	32
   924  00FD8A  20                 	db	32
   925  00FD8B  20                 	db	32
   926  00FD8C  20                 	db	32
   927  00FD8D  20                 	db	32
   928  00FD8E  20                 	db	32
   929  00FD8F  3C                 	db	60	;'<'
   930  00FD90  00                 	db	0
   931  00FD91                     STR_46:
   932  00FD91  4C                 	db	76	;'L'
   933  00FD92  4F                 	db	79	;'O'
   934  00FD93  47                 	db	71	;'G'
   935  00FD94  20                 	db	32
   936  00FD95  33                 	db	51	;'3'
   937  00FD96  20                 	db	32
   938  00FD97  20                 	db	32
   939  00FD98  20                 	db	32
   940  00FD99  20                 	db	32
   941  00FD9A  20                 	db	32
   942  00FD9B  20                 	db	32
   943  00FD9C  20                 	db	32
   944  00FD9D  20                 	db	32
   945  00FD9E  20                 	db	32
   946  00FD9F  20                 	db	32
   947  00FDA0  3C                 	db	60	;'<'
   948  00FDA1  00                 	db	0
   949  00FDA2                     STR_50:
   950  00FDA2  4C                 	db	76	;'L'
   951  00FDA3  4F                 	db	79	;'O'
   952  00FDA4  47                 	db	71	;'G'
   953  00FDA5  20                 	db	32
   954  00FDA6  34                 	db	52	;'4'
   955  00FDA7  20                 	db	32
   956  00FDA8  20                 	db	32
   957  00FDA9  20                 	db	32
   958  00FDAA  20                 	db	32
   959  00FDAB  20                 	db	32
   960  00FDAC  20                 	db	32
   961  00FDAD  20                 	db	32
   962  00FDAE  20                 	db	32
   963  00FDAF  20                 	db	32
   964  00FDB0  20                 	db	32
   965  00FDB1  3C                 	db	60	;'<'
   966  00FDB2  00                 	db	0
   967  00FDB3                     STR_38:
   968  00FDB3  33                 	db	51	;'3'
   969  00FDB4  2E                 	db	46
   970  00FDB5  20                 	db	32
   971  00FDB6  4C                 	db	76	;'L'
   972  00FDB7  4F                 	db	79	;'O'
   973  00FDB8  47                 	db	71	;'G'
   974  00FDB9  53                 	db	83	;'S'
   975  00FDBA  20                 	db	32
   976  00FDBB  20                 	db	32
   977  00FDBC  20                 	db	32
   978  00FDBD  20                 	db	32
   979  00FDBE  20                 	db	32
   980  00FDBF  20                 	db	32
   981  00FDC0  20                 	db	32
   982  00FDC1  20                 	db	32
   983  00FDC2  3C                 	db	60	;'<'
   984  00FDC3  00                 	db	0
   985  00FDC4                     STR_34:
   986  00FDC4  32                 	db	50	;'2'
   987  00FDC5  2E                 	db	46
   988  00FDC6  20                 	db	32
   989  00FDC7  53                 	db	83	;'S'
   990  00FDC8  4F                 	db	79	;'O'
   991  00FDC9  52                 	db	82	;'R'
   992  00FDCA  54                 	db	84	;'T'
   993  00FDCB  20                 	db	32
   994  00FDCC  20                 	db	32
   995  00FDCD  20                 	db	32
   996  00FDCE  20                 	db	32
   997  00FDCF  20                 	db	32
   998  00FDD0  20                 	db	32
   999  00FDD1  20                 	db	32
  1000  00FDD2  20                 	db	32
  1001  00FDD3  3C                 	db	60	;'<'
  1002  00FDD4  00                 	db	0
  1003  00FDD5                     STR_31:
  1004  00FDD5  31                 	db	49	;'1'
  1005  00FDD6  2E                 	db	46
  1006  00FDD7  20                 	db	32
  1007  00FDD8  44                 	db	68	;'D'
  1008  00FDD9  41                 	db	65	;'A'
  1009  00FDDA  54                 	db	84	;'T'
  1010  00FDDB  45                 	db	69	;'E'
  1011  00FDDC  2F                 	db	47
  1012  00FDDD  54                 	db	84	;'T'
  1013  00FDDE  49                 	db	73	;'I'
  1014  00FDDF  4D                 	db	77	;'M'
  1015  00FDE0  45                 	db	69	;'E'
  1016  00FDE1  20                 	db	32
  1017  00FDE2  20                 	db	32
  1018  00FDE3  20                 	db	32
  1019  00FDE4  3C                 	db	60	;'<'
  1020  00FDE5  00                 	db	0
  1021  00FDE6                     STR_6:
  1022  00FDE6  50                 	db	80	;'P'
  1023  00FDE7  41                 	db	65	;'A'
  1024  00FDE8  55                 	db	85	;'U'
  1025  00FDE9  53                 	db	83	;'S'
  1026  00FDEA  45                 	db	69	;'E'
  1027  00FDEB  20                 	db	32
  1028  00FDEC  3C                 	db	60	;'<'
  1029  00FDED  20                 	db	32
  1030  00FDEE  7C                 	db	124
  1031  00FDEF  20                 	db	32
  1032  00FDF0  42                 	db	66	;'B'
  1033  00FDF1  41                 	db	65	;'A'
  1034  00FDF2  43                 	db	67	;'C'
  1035  00FDF3  4B                 	db	75	;'K'
  1036  00FDF4  20                 	db	32
  1037  00FDF5  3E                 	db	62	;'>'
  1038  00FDF6  00                 	db	0
  1039  00FDF7                     STR_30:
  1040  00FDF7  50                 	db	80	;'P'
  1041  00FDF8  55                 	db	85	;'U'
  1042  00FDF9  53                 	db	83	;'S'
  1043  00FDFA  48                 	db	72	;'H'
  1044  00FDFB  20                 	db	32
  1045  00FDFC  54                 	db	84	;'T'
  1046  00FDFD  4F                 	db	79	;'O'
  1047  00FDFE  20                 	db	32
  1048  00FDFF  43                 	db	67	;'C'
  1049  00FE00  4F                 	db	79	;'O'
  1050  00FE01  4E                 	db	78	;'N'
  1051  00FE02  54                 	db	84	;'T'
  1052  00FE03  49                 	db	73	;'I'
  1053  00FE04  4E                 	db	78	;'N'
  1054  00FE05  55                 	db	85	;'U'
  1055  00FE06  45                 	db	69	;'E'
  1056  00FE07  00                 	db	0
  1057  00FE08                     STR_27:
  1058  00FE08  4E                 	db	78	;'N'
  1059  00FE09  4C                 	db	76	;'L'
  1060  00FE0A  41                 	db	65	;'A'
  1061  00FE0B  42                 	db	66	;'B'
  1062  00FE0C  3A                 	db	58	;':'
  1063  00FE0D  20                 	db	32
  1064  00FE0E  25                 	db	37
  1065  00FE0F  64                 	db	100	;'d'
  1066  00FE10  7C                 	db	124
  1067  00FE11  4C                 	db	76	;'L'
  1068  00FE12  41                 	db	65	;'A'
  1069  00FE13  42                 	db	66	;'B'
  1070  00FE14  3A                 	db	58	;':'
  1071  00FE15  20                 	db	32
  1072  00FE16  25                 	db	37
  1073  00FE17  64                 	db	100	;'d'
  1074  00FE18  00                 	db	0
  1075  00FE19                     STR_25:
  1076  00FE19  4E                 	db	78	;'N'
  1077  00FE1A  54                 	db	84	;'T'
  1078  00FE1B  41                 	db	65	;'A'
  1079  00FE1C  42                 	db	66	;'B'
  1080  00FE1D  3A                 	db	58	;':'
  1081  00FE1E  20                 	db	32
  1082  00FE1F  25                 	db	37
  1083  00FE20  64                 	db	100	;'d'
  1084  00FE21  7C                 	db	124
  1085  00FE22  54                 	db	84	;'T'
  1086  00FE23  41                 	db	65	;'A'
  1087  00FE24  42                 	db	66	;'B'
  1088  00FE25  3A                 	db	58	;':'
  1089  00FE26  20                 	db	32
  1090  00FE27  25                 	db	37
  1091  00FE28  64                 	db	100	;'d'
  1092  00FE29  00                 	db	0
  1093  00FE2A                     STR_83:
  1094  00FE2A  4D                 	db	77	;'M'
  1095  00FE2B  41                 	db	65	;'A'
  1096  00FE2C  47                 	db	71	;'G'
  1097  00FE2D  5F                 	db	95	;'_'
  1098  00FE2E  73                 	db	115	;'s'
  1099  00FE2F  69                 	db	105	;'i'
  1100  00FE30  67                 	db	103	;'g'
  1101  00FE31  6E                 	db	110	;'n'
  1102  00FE32  61                 	db	97	;'a'
  1103  00FE33  6C                 	db	108	;'l'
  1104  00FE34  3A                 	db	58	;':'
  1105  00FE35  20                 	db	32
  1106  00FE36  25                 	db	37
  1107  00FE37  64                 	db	100	;'d'
  1108  00FE38  20                 	db	32
  1109  00FE39  00                 	db	0
  1110  00FE3A                     STR_103:
  1111  00FE3A  54                 	db	84	;'T'
  1112  00FE3B  53                 	db	83	;'S'
  1113  00FE3C  54                 	db	84	;'T'
  1114  00FE3D  3A                 	db	58	;':'
  1115  00FE3E  20                 	db	32
  1116  00FE3F  54                 	db	84	;'T'
  1117  00FE40  49                 	db	73	;'I'
  1118  00FE41  4C                 	db	76	;'L'
  1119  00FE42  54                 	db	84	;'T'
  1120  00FE43  20                 	db	32
  1121  00FE44  53                 	db	83	;'S'
  1122  00FE45  45                 	db	69	;'E'
  1123  00FE46  52                 	db	82	;'R'
  1124  00FE47  56                 	db	86	;'V'
  1125  00FE48  4F                 	db	79	;'O'
  1126  00FE49  00                 	db	0
  1127  00FE4A                     STR_4:
  1128  00FE4A  44                 	db	68	;'D'
  1129  00FE4B  49                 	db	73	;'I'
  1130  00FE4C  44                 	db	68	;'D'
  1131  00FE4D  4E                 	db	78	;'N'
  1132  00FE4E  27                 	db	39
  1133  00FE4F  54                 	db	84	;'T'
  1134  00FE50  20                 	db	32
  1135  00FE51  43                 	db	67	;'C'
  1136  00FE52  4F                 	db	79	;'O'
  1137  00FE53  4D                 	db	77	;'M'
  1138  00FE54  50                 	db	80	;'P'
  1139  00FE55  4C                 	db	76	;'L'
  1140  00FE56  45                 	db	69	;'E'
  1141  00FE57  54                 	db	84	;'T'
  1142  00FE58  45                 	db	69	;'E'
  1143  00FE59  00                 	db	0
  1144  00FE5A                     STR_80:
  1145  00FE5A  49                 	db	73	;'I'
  1146  00FE5B  52                 	db	82	;'R'
  1147  00FE5C  5F                 	db	95	;'_'
  1148  00FE5D  73                 	db	115	;'s'
  1149  00FE5E  69                 	db	105	;'i'
  1150  00FE5F  67                 	db	103	;'g'
  1151  00FE60  6E                 	db	110	;'n'
  1152  00FE61  61                 	db	97	;'a'
  1153  00FE62  6C                 	db	108	;'l'
  1154  00FE63  3A                 	db	58	;':'
  1155  00FE64  20                 	db	32
  1156  00FE65  25                 	db	37
  1157  00FE66  64                 	db	100	;'d'
  1158  00FE67  20                 	db	32
  1159  00FE68  00                 	db	0
  1160  00FE69                     STR_109:
  1161  00FE69  43                 	db	67	;'C'
  1162  00FE6A  41                 	db	65	;'A'
  1163  00FE6B  4D                 	db	77	;'M'
  1164  00FE6C  20                 	db	32
  1165  00FE6D  44                 	db	68	;'D'
  1166  00FE6E  57                 	db	87	;'W'
  1167  00FE6F  4E                 	db	78	;'N'
  1168  00FE70  20                 	db	32
  1169  00FE71  7C                 	db	124
  1170  00FE72  52                 	db	82	;'R'
  1171  00FE73  43                 	db	67	;'C'
  1172  00FE74  30                 	db	48	;'0'
  1173  00FE75  3D                 	db	61	;'='
  1174  00FE76  30                 	db	48	;'0'
  1175  00FE77  00                 	db	0
  1176  00FE78                     STR_108:
  1177  00FE78  43                 	db	67	;'C'
  1178  00FE79  41                 	db	65	;'A'
  1179  00FE7A  4D                 	db	77	;'M'
  1180  00FE7B  20                 	db	32
  1181  00FE7C  55                 	db	85	;'U'
  1182  00FE7D  50                 	db	80	;'P'
  1183  00FE7E  20                 	db	32
  1184  00FE7F  20                 	db	32
  1185  00FE80  7C                 	db	124
  1186  00FE81  52                 	db	82	;'R'
  1187  00FE82  43                 	db	67	;'C'
  1188  00FE83  30                 	db	48	;'0'
  1189  00FE84  3D                 	db	61	;'='
  1190  00FE85  31                 	db	49	;'1'
  1191  00FE86  00                 	db	0
  1192  00FE87                     STR_82:
  1193  00FE87  54                 	db	84	;'T'
  1194  00FE88  53                 	db	83	;'S'
  1195  00FE89  54                 	db	84	;'T'
  1196  00FE8A  3A                 	db	58	;':'
  1197  00FE8B  20                 	db	32
  1198  00FE8C  4D                 	db	77	;'M'
  1199  00FE8D  41                 	db	65	;'A'
  1200  00FE8E  47                 	db	71	;'G'
  1201  00FE8F  4E                 	db	78	;'N'
  1202  00FE90  45                 	db	69	;'E'
  1203  00FE91  54                 	db	84	;'T'
  1204  00FE92  49                 	db	73	;'I'
  1205  00FE93  53                 	db	83	;'S'
  1206  00FE94  4D                 	db	77	;'M'
  1207  00FE95  00                 	db	0
  1208  00FE96                     STR_107:
  1209  00FE96  54                 	db	84	;'T'
  1210  00FE97  53                 	db	83	;'S'
  1211  00FE98  54                 	db	84	;'T'
  1212  00FE99  3A                 	db	58	;':'
  1213  00FE9A  20                 	db	32
  1214  00FE9B  43                 	db	67	;'C'
  1215  00FE9C  41                 	db	65	;'A'
  1216  00FE9D  4D                 	db	77	;'M'
  1217  00FE9E  20                 	db	32
  1218  00FE9F  53                 	db	83	;'S'
  1219  00FEA0  45                 	db	69	;'E'
  1220  00FEA1  52                 	db	82	;'R'
  1221  00FEA2  56                 	db	86	;'V'
  1222  00FEA3  4F                 	db	79	;'O'
  1223  00FEA4  00                 	db	0
  1224  00FEA5                     STR_96:
  1225  00FEA5  54                 	db	84	;'T'
  1226  00FEA6  53                 	db	83	;'S'
  1227  00FEA7  54                 	db	84	;'T'
  1228  00FEA8  3A                 	db	58	;':'
  1229  00FEA9  20                 	db	32
  1230  00FEAA  50                 	db	80	;'P'
  1231  00FEAB  41                 	db	65	;'A'
  1232  00FEAC  4E                 	db	78	;'N'
  1233  00FEAD  20                 	db	32
  1234  00FEAE  53                 	db	83	;'S'
  1235  00FEAF  45                 	db	69	;'E'
  1236  00FEB0  52                 	db	82	;'R'
  1237  00FEB1  56                 	db	86	;'V'
  1238  00FEB2  4F                 	db	79	;'O'
  1239  00FEB3  00                 	db	0
  1240  00FEB4                     STR_75:
  1241  00FEB4  41                 	db	65	;'A'
  1242  00FEB5  4C                 	db	76	;'L'
  1243  00FEB6  47                 	db	71	;'G'
  1244  00FEB7  34                 	db	52	;'4'
  1245  00FEB8  3A                 	db	58	;':'
  1246  00FEB9  20                 	db	32
  1247  00FEBA  41                 	db	65	;'A'
  1248  00FEBB  4C                 	db	76	;'L'
  1249  00FEBC  4C                 	db	76	;'L'
  1250  00FEBD  20                 	db	32
  1251  00FEBE  43                 	db	67	;'C'
  1252  00FEBF  41                 	db	65	;'A'
  1253  00FEC0  4E                 	db	78	;'N'
  1254  00FEC1  53                 	db	83	;'S'
  1255  00FEC2  00                 	db	0
  1256  00FEC3                     STR_90:
  1257  00FEC3  54                 	db	84	;'T'
  1258  00FEC4  53                 	db	83	;'S'
  1259  00FEC5  54                 	db	84	;'T'
  1260  00FEC6  3A                 	db	58	;':'
  1261  00FEC7  20                 	db	32
  1262  00FEC8  44                 	db	68	;'D'
  1263  00FEC9  43                 	db	67	;'C'
  1264  00FECA  20                 	db	32
  1265  00FECB  4D                 	db	77	;'M'
  1266  00FECC  4F                 	db	79	;'O'
  1267  00FECD  54                 	db	84	;'T'
  1268  00FECE  4F                 	db	79	;'O'
  1269  00FECF  52                 	db	82	;'R'
  1270  00FED0  53                 	db	83	;'S'
  1271  00FED1  00                 	db	0
  1272  00FED2                     STR_70:
  1273  00FED2  41                 	db	65	;'A'
  1274  00FED3  4C                 	db	76	;'L'
  1275  00FED4  47                 	db	71	;'G'
  1276  00FED5  4F                 	db	79	;'O'
  1277  00FED6  52                 	db	82	;'R'
  1278  00FED7  49                 	db	73	;'I'
  1279  00FED8  54                 	db	84	;'T'
  1280  00FED9  48                 	db	72	;'H'
  1281  00FEDA  4D                 	db	77	;'M'
  1282  00FEDB  20                 	db	32
  1283  00FEDC  54                 	db	84	;'T'
  1284  00FEDD  45                 	db	69	;'E'
  1285  00FEDE  53                 	db	83	;'S'
  1286  00FEDF  54                 	db	84	;'T'
  1287  00FEE0  00                 	db	0
  1288  00FEE1                     STR_91:
  1289  00FEE1  50                 	db	80	;'P'
  1290  00FEE2  49                 	db	73	;'I'
  1291  00FEE3  4E                 	db	78	;'N'
  1292  00FEE4  20                 	db	32
  1293  00FEE5  52                 	db	82	;'R'
  1294  00FEE6  41                 	db	65	;'A'
  1295  00FEE7  35                 	db	53	;'5'
  1296  00FEE8  20                 	db	32
  1297  00FEE9  48                 	db	72	;'H'
  1298  00FEEA  49                 	db	73	;'I'
  1299  00FEEB  47                 	db	71	;'G'
  1300  00FEEC  48                 	db	72	;'H'
  1301  00FEED  2E                 	db	46
  1302  00FEEE  00                 	db	0
  1303  00FEEF                     STR_73:
  1304  00FEEF  41                 	db	65	;'A'
  1305  00FEF0  4C                 	db	76	;'L'
  1306  00FEF1  47                 	db	71	;'G'
  1307  00FEF2  32                 	db	50	;'2'
  1308  00FEF3  3A                 	db	58	;':'
  1309  00FEF4  20                 	db	32
  1310  00FEF5  31                 	db	49	;'1'
  1311  00FEF6  32                 	db	50	;'2'
  1312  00FEF7  20                 	db	32
  1313  00FEF8  43                 	db	67	;'C'
  1314  00FEF9  41                 	db	65	;'A'
  1315  00FEFA  4E                 	db	78	;'N'
  1316  00FEFB  53                 	db	83	;'S'
  1317  00FEFC  00                 	db	0
  1318  00FEFD                     STR_76:
  1319  00FEFD  41                 	db	65	;'A'
  1320  00FEFE  4C                 	db	76	;'L'
  1321  00FEFF  47                 	db	71	;'G'
  1322  00FF00  35                 	db	53	;'5'
  1323  00FF01  3A                 	db	58	;':'
  1324  00FF02  20                 	db	32
  1325  00FF03  4E                 	db	78	;'N'
  1326  00FF04  4F                 	db	79	;'O'
  1327  00FF05  20                 	db	32
  1328  00FF06  43                 	db	67	;'C'
  1329  00FF07  41                 	db	65	;'A'
  1330  00FF08  4E                 	db	78	;'N'
  1331  00FF09  53                 	db	83	;'S'
  1332  00FF0A  00                 	db	0
  1333  00FF0B                     STR_71:
  1334  00FF0B  50                 	db	80	;'P'
  1335  00FF0C  55                 	db	85	;'U'
  1336  00FF0D  53                 	db	83	;'S'
  1337  00FF0E  48                 	db	72	;'H'
  1338  00FF0F  20                 	db	32
  1339  00FF10  54                 	db	84	;'T'
  1340  00FF11  4F                 	db	79	;'O'
  1341  00FF12  20                 	db	32
  1342  00FF13  53                 	db	83	;'S'
  1343  00FF14  54                 	db	84	;'T'
  1344  00FF15  41                 	db	65	;'A'
  1345  00FF16  52                 	db	82	;'R'
  1346  00FF17  54                 	db	84	;'T'
  1347  00FF18  00                 	db	0
  1348  00FF19                     STR_23:
  1349  00FF19  25                 	db	37
  1350  00FF1A  64                 	db	100	;'d'
  1351  00FF1B  20                 	db	32
  1352  00FF1C  4D                 	db	77	;'M'
  1353  00FF1D  49                 	db	73	;'I'
  1354  00FF1E  4E                 	db	78	;'N'
  1355  00FF1F  20                 	db	32
  1356  00FF20  25                 	db	37
  1357  00FF21  64                 	db	100	;'d'
  1358  00FF22  20                 	db	32
  1359  00FF23  53                 	db	83	;'S'
  1360  00FF24  45                 	db	69	;'E'
  1361  00FF25  43                 	db	67	;'C'
  1362  00FF26  00                 	db	0
  1363  00FF27                     STR_2:
  1364  00FF27  54                 	db	84	;'T'
  1365  00FF28  49                 	db	73	;'I'
  1366  00FF29  4D                 	db	77	;'M'
  1367  00FF2A  45                 	db	69	;'E'
  1368  00FF2B  3A                 	db	58	;':'
  1369  00FF2C  20                 	db	32
  1370  00FF2D  25                 	db	37
  1371  00FF2E  64                 	db	100	;'d'
  1372  00FF2F  3A                 	db	58	;':'
  1373  00FF30  25                 	db	37
  1374  00FF31  30                 	db	48	;'0'
  1375  00FF32  32                 	db	50	;'2'
  1376  00FF33  64                 	db	100	;'d'
  1377  00FF34  00                 	db	0
  1378  00FF35                     STR_79:
  1379  00FF35  54                 	db	84	;'T'
  1380  00FF36  53                 	db	83	;'S'
  1381  00FF37  54                 	db	84	;'T'
  1382  00FF38  3A                 	db	58	;':'
  1383  00FF39  20                 	db	32
  1384  00FF3A  49                 	db	73	;'I'
  1385  00FF3B  52                 	db	82	;'R'
  1386  00FF3C  20                 	db	32
  1387  00FF3D  53                 	db	83	;'S'
  1388  00FF3E  4E                 	db	78	;'N'
  1389  00FF3F  53                 	db	83	;'S'
  1390  00FF40  52                 	db	82	;'R'
  1391  00FF41  00                 	db	0
  1392  00FF42                     STR_65:
  1393  00FF42  54                 	db	84	;'T'
  1394  00FF43  49                 	db	73	;'I'
  1395  00FF44  4D                 	db	77	;'M'
  1396  00FF45  45                 	db	69	;'E'
  1397  00FF46  20                 	db	32
  1398  00FF47  25                 	db	37
  1399  00FF48  64                 	db	100	;'d'
  1400  00FF49  3A                 	db	58	;':'
  1401  00FF4A  25                 	db	37
  1402  00FF4B  30                 	db	48	;'0'
  1403  00FF4C  32                 	db	50	;'2'
  1404  00FF4D  64                 	db	100	;'d'
  1405  00FF4E  00                 	db	0
  1406  00FF4F                     STR_74:
  1407  00FF4F  41                 	db	65	;'A'
  1408  00FF50  4C                 	db	76	;'L'
  1409  00FF51  47                 	db	71	;'G'
  1410  00FF52  33                 	db	51	;'3'
  1411  00FF53  3A                 	db	58	;':'
  1412  00FF54  20                 	db	32
  1413  00FF55  31                 	db	49	;'1'
  1414  00FF56  20                 	db	32
  1415  00FF57  43                 	db	67	;'C'
  1416  00FF58  41                 	db	65	;'A'
  1417  00FF59  4E                 	db	78	;'N'
  1418  00FF5A  00                 	db	0
  1419  00FF5B                     STR_93:
  1420  00FF5B  50                 	db	80	;'P'
  1421  00FF5C  49                 	db	73	;'I'
  1422  00FF5D  4E                 	db	78	;'N'
  1423  00FF5E  20                 	db	32
  1424  00FF5F  52                 	db	82	;'R'
  1425  00FF60  41                 	db	65	;'A'
  1426  00FF61  33                 	db	51	;'3'
  1427  00FF62  2E                 	db	46
  1428  00FF63  2E                 	db	46
  1429  00FF64  2E                 	db	46
  1430  00FF65  00                 	db	0
  1431  00FF66                     STR_95:
  1432  00FF66  50                 	db	80	;'P'
  1433  00FF67  49                 	db	73	;'I'
  1434  00FF68  4E                 	db	78	;'N'
  1435  00FF69  20                 	db	32
  1436  00FF6A  52                 	db	82	;'R'
  1437  00FF6B  41                 	db	65	;'A'
  1438  00FF6C  34                 	db	52	;'4'
  1439  00FF6D  2E                 	db	46
  1440  00FF6E  2E                 	db	46
  1441  00FF6F  2E                 	db	46
  1442  00FF70  00                 	db	0
  1443  00FF71                     STR_113:
  1444  00FF71  50                 	db	80	;'P'
  1445  00FF72  55                 	db	85	;'U'
  1446  00FF73  53                 	db	83	;'S'
  1447  00FF74  48                 	db	72	;'H'
  1448  00FF75  45                 	db	69	;'E'
  1449  00FF76  52                 	db	82	;'R'
  1450  00FF77  20                 	db	32
  1451  00FF78  54                 	db	84	;'T'
  1452  00FF79  53                 	db	83	;'S'
  1453  00FF7A  54                 	db	84	;'T'
  1454  00FF7B  00                 	db	0
  1455  00FF7C                     STR_64:
  1456  00FF7C  53                 	db	83	;'S'
  1457  00FF7D  4F                 	db	79	;'O'
  1458  00FF7E  52                 	db	82	;'R'
  1459  00FF7F  54                 	db	84	;'T'
  1460  00FF80  49                 	db	73	;'I'
  1461  00FF81  4E                 	db	78	;'N'
  1462  00FF82  47                 	db	71	;'G'
  1463  00FF83  2E                 	db	46
  1464  00FF84  2E                 	db	46
  1465  00FF85  2E                 	db	46
  1466  00FF86  00                 	db	0
  1467  00FF87                     STR_84:
  1468  00FF87  54                 	db	84	;'T'
  1469  00FF88  53                 	db	83	;'S'
  1470  00FF89  54                 	db	84	;'T'
  1471  00FF8A  3A                 	db	58	;':'
  1472  00FF8B  20                 	db	32
  1473  00FF8C  43                 	db	67	;'C'
  1474  00FF8D  4F                 	db	79	;'O'
  1475  00FF8E  4E                 	db	78	;'N'
  1476  00FF8F  44                 	db	68	;'D'
  1477  00FF90  00                 	db	0
  1478  00FF91                     STR_88:
  1479  00FF91  41                 	db	65	;'A'
  1480  00FF92  43                 	db	67	;'C'
  1481  00FF93  54                 	db	84	;'T'
  1482  00FF94  55                 	db	85	;'U'
  1483  00FF95  41                 	db	65	;'A'
  1484  00FF96  54                 	db	84	;'T'
  1485  00FF97  4F                 	db	79	;'O'
  1486  00FF98  52                 	db	82	;'R'
  1487  00FF99  53                 	db	83	;'S'
  1488  00FF9A  00                 	db	0
  1489  00FF9B                     STR_22:
  1490  00FF9B  44                 	db	68	;'D'
  1491  00FF9C  55                 	db	85	;'U'
  1492  00FF9D  52                 	db	82	;'R'
  1493  00FF9E  41                 	db	65	;'A'
  1494  00FF9F  54                 	db	84	;'T'
  1495  00FFA0  49                 	db	73	;'I'
  1496  00FFA1  4F                 	db	79	;'O'
  1497  00FFA2  4E                 	db	78	;'N'
  1498  00FFA3  3A                 	db	58	;':'
  1499  00FFA4  00                 	db	0
  1500  00FFA5                     STR_86:
  1501  00FFA5  43                 	db	67	;'C'
  1502  00FFA6  4F                 	db	79	;'O'
  1503  00FFA7  4E                 	db	78	;'N'
  1504  00FFA8  44                 	db	68	;'D'
  1505  00FFA9  3A                 	db	58	;':'
  1506  00FFAA  20                 	db	32
  1507  00FFAB  25                 	db	37
  1508  00FFAC  64                 	db	100	;'d'
  1509  00FFAD  00                 	db	0
  1510  00FFAE                     STR_77:
  1511  00FFAE  53                 	db	83	;'S'
  1512  00FFAF  45                 	db	69	;'E'
  1513  00FFB0  4E                 	db	78	;'N'
  1514  00FFB1  53                 	db	83	;'S'
  1515  00FFB2  4F                 	db	79	;'O'
  1516  00FFB3  52                 	db	82	;'R'
  1517  00FFB4  53                 	db	83	;'S'
  1518  00FFB5  00                 	db	0
  1519  00FFB6                     STR_120:
  1520  00FFB6  28                 	db	40
  1521  00FFB7  6E                 	db	110	;'n'
  1522  00FFB8  75                 	db	117	;'u'
  1523  00FFB9  6C                 	db	108	;'l'
  1524  00FFBA  6C                 	db	108	;'l'
  1525  00FFBB  29                 	db	41
  1526  00FFBC  00                 	db	0
  1527  00FFBD                     STR_67:
  1528  00FFBD  46                 	db	70	;'F'
  1529  00FFBE  41                 	db	65	;'A'
  1530  00FFBF  49                 	db	73	;'I'
  1531  00FFC0  4C                 	db	76	;'L'
  1532  00FFC1  45                 	db	69	;'E'
  1533  00FFC2  44                 	db	68	;'D'
  1534  00FFC3  00                 	db	0
  1535  00FFC4                     STR_7:
  1536  00FFC4  53                 	db	83	;'S'
  1537  00FFC5  54                 	db	84	;'T'
  1538  00FFC6  41                 	db	65	;'A'
  1539  00FFC7  52                 	db	82	;'R'
  1540  00FFC8  54                 	db	84	;'T'
  1541  00FFC9  3A                 	db	58	;':'
  1542  00FFCA  00                 	db	0
  1543  00FFCB                     STR_9:
  1544  00FFCB  46                 	db	70	;'F'
  1545  00FFCC  45                 	db	69	;'E'
  1546  00FFCD  42                 	db	66	;'B'
  1547  00FFCE  00                 	db	0
  1548  00FFCF                     STR_19:
  1549  00FFCF  44                 	db	68	;'D'
  1550  00FFD0  45                 	db	69	;'E'
  1551  00FFD1  43                 	db	67	;'C'
  1552  00FFD2  00                 	db	0
  1553  00FFD3                     STR_15:
  1554  00FFD3  41                 	db	65	;'A'
  1555  00FFD4  55                 	db	85	;'U'
  1556  00FFD5  47                 	db	71	;'G'
  1557  00FFD6  00                 	db	0
  1558  00FFD7                     STR_14:
  1559  00FFD7  4A                 	db	74	;'J'
  1560  00FFD8  55                 	db	85	;'U'
  1561  00FFD9  4C                 	db	76	;'L'
  1562  00FFDA  00                 	db	0
  1563  00FFDB                     STR_8:
  1564  00FFDB  4A                 	db	74	;'J'
  1565  00FFDC  41                 	db	65	;'A'
  1566  00FFDD  4E                 	db	78	;'N'
  1567  00FFDE  00                 	db	0
  1568  00FFDF                     STR_13:
  1569  00FFDF  4A                 	db	74	;'J'
  1570  00FFE0  55                 	db	85	;'U'
  1571  00FFE1  4E                 	db	78	;'N'
  1572  00FFE2  00                 	db	0
  1573  00FFE3                     STR_16:
  1574  00FFE3  53                 	db	83	;'S'
  1575  00FFE4  45                 	db	69	;'E'
  1576  00FFE5  50                 	db	80	;'P'
  1577  00FFE6  00                 	db	0
  1578  00FFE7                     STR_10:
  1579  00FFE7  4D                 	db	77	;'M'
  1580  00FFE8  41                 	db	65	;'A'
  1581  00FFE9  52                 	db	82	;'R'
  1582  00FFEA  00                 	db	0
  1583  00FFEB                     STR_11:
  1584  00FFEB  41                 	db	65	;'A'
  1585  00FFEC  50                 	db	80	;'P'
  1586  00FFED  52                 	db	82	;'R'
  1587  00FFEE  00                 	db	0
  1588  00FFEF                     STR_20:
  1589  00FFEF  45                 	db	69	;'E'
  1590  00FFF0  52                 	db	82	;'R'
  1591  00FFF1  52                 	db	82	;'R'
  1592  00FFF2  00                 	db	0
  1593  00FFF3                     STR_17:
  1594  00FFF3  4F                 	db	79	;'O'
  1595  00FFF4  43                 	db	67	;'C'
  1596  00FFF5  54                 	db	84	;'T'
  1597  00FFF6  00                 	db	0
  1598  00FFF7                     STR_18:
  1599  00FFF7  4E                 	db	78	;'N'
  1600  00FFF8  4F                 	db	79	;'O'
  1601  00FFF9  56                 	db	86	;'V'
  1602  00FFFA  00                 	db	0
  1603  00FFFB                     STR_12:
  1604  00FFFB  4D                 	db	77	;'M'
  1605  00FFFC  41                 	db	65	;'A'
  1606  00FFFD  59                 	db	89	;'Y'
  1607  00FFFE  00                 	db	0
  1608  0000                     
  1609                           ; #config settings
  1610  00FFFF  00                 	db	0	; dummy byte at the end
  1611  0000                     
  1612                           	psect	cinit
  1613  004322                     __pcinit:
  1614                           	opt stack 0
  1615  004322                     start_initialization:
  1616                           	opt stack 0
  1617  004322                     __initialization:
  1618                           	opt stack 0
  1619                           
  1620                           ; Initialize objects allocated to BANK1 (8 bytes)
  1621                           ; load TBLPTR registers with __pidataBANK1
  1622  004322  0E64               	movlw	low __pidataBANK1
  1623  004324  6EF6               	movwf	tblptrl,c
  1624  004326  0E4A               	movlw	high __pidataBANK1
  1625  004328  6EF7               	movwf	tblptrh,c
  1626  00432A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1627  00432C  6EF8               	movwf	tblptru,c
  1628  00432E  EE01  F033         	lfsr	0,__pdataBANK1
  1629  004332  EE10 F008          	lfsr	1,8
  1630  004336                     copy_data0:
  1631  004336  0009               	tblrd		*+
  1632  004338  CFF5 FFEE          	movff	tablat,postinc0
  1633  00433C  50E5               	movf	postdec1,w,c
  1634  00433E  50E1               	movf	fsr1l,w,c
  1635  004340  E1FA               	bnz	copy_data0
  1636                           
  1637                           ; Clear objects allocated to BANK1 (51 bytes)
  1638  004342  EE01  F000         	lfsr	0,__pbssBANK1
  1639  004346  0E33               	movlw	51
  1640  004348                     clear_0:
  1641  004348  6AEE               	clrf	postinc0,c
  1642  00434A  06E8               	decf	wreg,f,c
  1643  00434C  E1FD               	bnz	clear_0
  1644                           
  1645                           ; Clear objects allocated to BANK0 (38 bytes)
  1646  00434E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1647  004352  0E26               	movlw	38
  1648  004354                     clear_1:
  1649  004354  6AEE               	clrf	postinc0,c
  1650  004356  06E8               	decf	wreg,f,c
  1651  004358  E1FD               	bnz	clear_1
  1652                           
  1653                           ; Clear objects allocated to COMRAM (35 bytes)
  1654  00435A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1655  00435E  0E23               	movlw	35
  1656  004360                     clear_2:
  1657  004360  6AEE               	clrf	postinc0,c
  1658  004362  06E8               	decf	wreg,f,c
  1659  004364  E1FD               	bnz	clear_2
  1660  004366                     end_of_initialization:
  1661                           	opt stack 0
  1662  004366                     __end_of__initialization:
  1663                           	opt stack 0
  1664  004366  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1665  004368  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1666  00436A  0100               	movlb	0
  1667  00436C  EF3F  F01C         	goto	_main	;jump to C main() function
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           
  1677                           	psect	bssCOMRAM
  1678  00005B                     __pbssCOMRAM:
  1679                           	opt stack 0
  1680  00005B                     _back:
  1681                           	opt stack 0
  1682  00005B                     	ds	2
  1683  00005D                     _count_pop_no_tab:
  1684                           	opt stack 0
  1685  00005D                     	ds	2
  1686  00005F                     _count_pop_w_tab:
  1687                           	opt stack 0
  1688  00005F                     	ds	2
  1689  000061                     _debug:
  1690                           	opt stack 0
  1691  000061                     	ds	2
  1692  000063                     _down:
  1693                           	opt stack 0
  1694  000063                     	ds	2
  1695  000065                     _enter:
  1696                           	opt stack 0
  1697  000065                     	ds	2
  1698  000067                     _f_ID_receive:
  1699                           	opt stack 0
  1700  000067                     	ds	2
  1701  000069                     _f_can_coming_to_ID:
  1702                           	opt stack 0
  1703  000069                     	ds	2
  1704  00006B                     _f_can_coming_to_distribution:
  1705                           	opt stack 0
  1706  00006B                     	ds	2
  1707  00006D                     _f_lastCan:
  1708                           	opt stack 0
  1709  00006D                     	ds	2
  1710  00006F                     _first:
  1711                           	opt stack 0
  1712  00006F                     	ds	2
  1713  000071                     _firstboot:
  1714                           	opt stack 0
  1715  000071                     	ds	2
  1716  000073                     _log_count_can_w_lab:
  1717                           	opt stack 0
  1718  000073                     	ds	2
  1719  000075                     _log_count_total:
  1720                           	opt stack 0
  1721  000075                     	ds	2
  1722  000077                     _up:
  1723                           	opt stack 0
  1724  000077                     	ds	2
  1725  000079                     _was_low_1:
  1726                           	opt stack 0
  1727  000079                     	ds	2
  1728  00007B                     _was_low_3:
  1729                           	opt stack 0
  1730  00007B                     	ds	2
  1731  00007D                     _input:
  1732                           	opt stack 0
  1733  00007D                     	ds	1
  1734                           tblptru	equ	0xFF8
  1735                           tblptrh	equ	0xFF7
  1736                           tblptrl	equ	0xFF6
  1737                           tablat	equ	0xFF5
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           postdec1	equ	0xFE5
  1741                           fsr1l	equ	0xFE1
  1742                           
  1743                           	psect	bssBANK0
  1744  0000DA                     __pbssBANK0:
  1745                           	opt stack 0
  1746  0000DA                     _sensor_outputs:
  1747                           	opt stack 0
  1748  0000DA                     	ds	4
  1749  0000DE                     _IR_signal:
  1750                           	opt stack 0
  1751  0000DE                     	ds	2
  1752  0000E0                     _MAG_signal:
  1753                           	opt stack 0
  1754  0000E0                     	ds	2
  1755  0000E2                     _RTCflag:
  1756                           	opt stack 0
  1757  0000E2                     	ds	2
  1758  0000E4                     _cur_can:
  1759                           	opt stack 0
  1760  0000E4                     	ds	2
  1761  0000E6                     _cur_state:
  1762                           	opt stack 0
  1763  0000E6                     	ds	2
  1764  0000E8                     _f_loadingNewCan:
  1765                           	opt stack 0
  1766  0000E8                     	ds	2
  1767  0000EA                     _log:
  1768                           	opt stack 0
  1769  0000EA                     	ds	2
  1770  0000EC                     _log_completion:
  1771                           	opt stack 0
  1772  0000EC                     	ds	2
  1773  0000EE                     _log_count_can_no_lab:
  1774                           	opt stack 0
  1775  0000EE                     	ds	2
  1776  0000F0                     _log_count_pop_no_tab:
  1777                           	opt stack 0
  1778  0000F0                     	ds	2
  1779  0000F2                     _log_count_pop_w_tab:
  1780                           	opt stack 0
  1781  0000F2                     	ds	2
  1782  0000F4                     _log_total_time:
  1783                           	opt stack 0
  1784  0000F4                     	ds	2
  1785  0000F6                     _logstate:
  1786                           	opt stack 0
  1787  0000F6                     	ds	2
  1788  0000F8                     _total_time:
  1789                           	opt stack 0
  1790  0000F8                     	ds	2
  1791  0000FA                     _var:
  1792                           	opt stack 0
  1793  0000FA                     	ds	2
  1794  0000FC                     _machine_state:
  1795                           	opt stack 0
  1796  0000FC                     	ds	1
  1797  0000FD                     _sel:
  1798                           	opt stack 0
  1799  0000FD                     	ds	1
  1800  0000FE                     _count_total:
  1801                           	opt stack 0
  1802  0000FE                     	ds	2
  1803                           tblptru	equ	0xFF8
  1804                           tblptrh	equ	0xFF7
  1805                           tblptrl	equ	0xFF6
  1806                           tablat	equ	0xFF5
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           postdec1	equ	0xFE5
  1810                           fsr1l	equ	0xFE1
  1811                           
  1812                           	psect	bssBANK1
  1813  000100                     __pbssBANK1:
  1814                           	opt stack 0
  1815  000100                     _log_startTime:
  1816                           	opt stack 0
  1817  000100                     	ds	14
  1818  00010E                     _startTime:
  1819                           	opt stack 0
  1820  00010E                     	ds	14
  1821  00011C                     _servoTimes:
  1822                           	opt stack 0
  1823  00011C                     	ds	8
  1824  000124                     _time:
  1825                           	opt stack 0
  1826  000124                     	ds	7
  1827  00012B                     _count_can_no_lab:
  1828                           	opt stack 0
  1829  00012B                     	ds	2
  1830  00012D                     _count_can_w_lab:
  1831                           	opt stack 0
  1832  00012D                     	ds	2
  1833  00012F                     _f_can_distributed:
  1834                           	opt stack 0
  1835  00012F                     	ds	2
  1836  000131                     _i:
  1837                           	opt stack 0
  1838  000131                     	ds	2
  1839                           tblptru	equ	0xFF8
  1840                           tblptrh	equ	0xFF7
  1841                           tblptrl	equ	0xFF6
  1842                           tablat	equ	0xFF5
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           postdec1	equ	0xFE5
  1846                           fsr1l	equ	0xFE1
  1847                           
  1848                           	psect	dataBANK1
  1849  000133                     __pdataBANK1:
  1850                           	opt stack 0
  1851  000133                     UI@F3226:
  1852                           	opt stack 0
  1853  000133                     	ds	4
  1854  000137                     printRTC@F3217:
  1855                           	opt stack 0
  1856  000137                     	ds	4
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1l	equ	0xFE1
  1865                           
  1866                           	psect	cstackBANK0
  1867  000080                     __pcstackBANK0:
  1868                           	opt stack 0
  1869  000080                     ??_ID:
  1870  000080                     ??_delay_ms:
  1871  000080                     ??_PortTests:
  1872  000080                     ??_isdigit:
  1873  000080                     ??_readADC:
  1874  000080                     ??_I2C_Master_Wait:
  1875  000080                     ?___wmul:
  1876                           	opt stack 0
  1877  000080                     ?___awmod:
  1878                           	opt stack 0
  1879  000080                     ?___lwdiv:
  1880                           	opt stack 0
  1881  000080                     ?___lldiv:
  1882                           	opt stack 0
  1883  000080                     lcdNibble@temp:
  1884                           	opt stack 0
  1885  000080                     initTime@m:
  1886                           	opt stack 0
  1887  000080                     updateServoPosition@time_us:
  1888                           	opt stack 0
  1889  000080                     EEPROM_read@address:
  1890                           	opt stack 0
  1891  000080                     ___wmul@multiplier:
  1892                           	opt stack 0
  1893  000080                     ___awmod@dividend:
  1894                           	opt stack 0
  1895  000080                     ___lwdiv@dividend:
  1896                           	opt stack 0
  1897  000080                     strcpy@to:
  1898                           	opt stack 0
  1899  000080                     ___lldiv@dividend:
  1900                           	opt stack 0
  1901                           
  1902                           ; 4 bytes @ 0x0
  1903  000080                     	ds	1
  1904  000081                     readADC@channel:
  1905                           	opt stack 0
  1906  000081                     I2C_Master_Read@a:
  1907                           	opt stack 0
  1908  000081                     lcdNibble@data:
  1909                           	opt stack 0
  1910  000081                     initTime@h:
  1911                           	opt stack 0
  1912  000081                     delay_ms@milliseconds:
  1913                           	opt stack 0
  1914  000081                     _isdigit$1959:
  1915                           	opt stack 0
  1916  000081                     I2C_Master_Write@d:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x1
  1920  000081                     	ds	1
  1921  000082                     ??_readIR:
  1922  000082                     ??_readMAG:
  1923  000082                     I2C_Master_Read@temp:
  1924                           	opt stack 0
  1925  000082                     lcdInst@data:
  1926                           	opt stack 0
  1927  000082                     putch@data:
  1928                           	opt stack 0
  1929  000082                     initTime@w:
  1930                           	opt stack 0
  1931  000082                     isdigit@c:
  1932                           	opt stack 0
  1933  000082                     ID@i:
  1934                           	opt stack 0
  1935  000082                     updateServoPosition@timer:
  1936                           	opt stack 0
  1937  000082                     ___wmul@multiplicand:
  1938                           	opt stack 0
  1939  000082                     ___awmod@divisor:
  1940                           	opt stack 0
  1941  000082                     ___lwdiv@divisor:
  1942                           	opt stack 0
  1943  000082                     strcpy@from:
  1944                           	opt stack 0
  1945                           
  1946                           ; 2 bytes @ 0x2
  1947  000082                     	ds	1
  1948  000083                     ??_initLCD:
  1949  000083                     initTime@DD:
  1950                           	opt stack 0
  1951  000083                     getRTC@i:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x3
  1955  000083                     	ds	1
  1956  000084                     ??_updateServoPosition:
  1957  000084                     initTime@MM:
  1958                           	opt stack 0
  1959  000084                     ___awmod@counter:
  1960                           	opt stack 0
  1961  000084                     readIR@res:
  1962                           	opt stack 0
  1963  000084                     readMAG@res:
  1964                           	opt stack 0
  1965  000084                     ___wmul@product:
  1966                           	opt stack 0
  1967  000084                     ___lwdiv@quotient:
  1968                           	opt stack 0
  1969  000084                     strcpy@cp:
  1970                           	opt stack 0
  1971  000084                     ___lldiv@divisor:
  1972                           	opt stack 0
  1973                           
  1974                           ; 4 bytes @ 0x4
  1975  000084                     	ds	1
  1976  000085                     ??_initSortTimer:
  1977  000085                     initTime@YY:
  1978                           	opt stack 0
  1979  000085                     ___awmod@sign:
  1980                           	opt stack 0
  1981                           
  1982                           ; 1 bytes @ 0x5
  1983  000085                     	ds	1
  1984  000086                     ??_getIR:
  1985  000086                     ??_getMAG:
  1986  000086                     ?___awdiv:
  1987                           	opt stack 0
  1988  000086                     initTime@s:
  1989                           	opt stack 0
  1990  000086                     ___lwdiv@counter:
  1991                           	opt stack 0
  1992  000086                     updateServoPosition@my_time:
  1993                           	opt stack 0
  1994  000086                     ___awdiv@dividend:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x6
  1998  000086                     	ds	1
  1999  000087                     ?___lwmod:
  2000                           	opt stack 0
  2001  000087                     ___lwmod@dividend:
  2002                           	opt stack 0
  2003                           
  2004                           ; 2 bytes @ 0x7
  2005  000087                     	ds	1
  2006  000088                     ??_Distribution:
  2007  000088                     ??_initServos:
  2008  000088                     initSortTimer@i:
  2009                           	opt stack 0
  2010  000088                     ___awdiv@divisor:
  2011                           	opt stack 0
  2012  000088                     ___lldiv@quotient:
  2013                           	opt stack 0
  2014                           
  2015                           ; 4 bytes @ 0x8
  2016  000088                     	ds	1
  2017  000089                     ___lwmod@divisor:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x9
  2021  000089                     	ds	1
  2022  00008A                     ___awdiv@counter:
  2023                           	opt stack 0
  2024                           
  2025                           ; 1 bytes @ 0xA
  2026  00008A                     	ds	1
  2027  00008B                     ___awdiv@sign:
  2028                           	opt stack 0
  2029  00008B                     ___lwmod@counter:
  2030                           	opt stack 0
  2031                           
  2032                           ; 1 bytes @ 0xB
  2033  00008B                     	ds	1
  2034  00008C                     ___lldiv@counter:
  2035                           	opt stack 0
  2036  00008C                     ___awdiv@quotient:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0xC
  2040  00008C                     	ds	1
  2041  00008D                     I2C_Master_Init@c:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0xD
  2045  00008D                     	ds	1
  2046  00008E                     ?_printf:
  2047                           	opt stack 0
  2048  00008E                     printf@f:
  2049                           	opt stack 0
  2050                           
  2051                           ; 2 bytes @ 0xE
  2052  00008E                     	ds	3
  2053  000091                     ??_I2C_Master_Init:
  2054                           
  2055                           ; 1 bytes @ 0x11
  2056  000091                     	ds	4
  2057  000095                     ??_loadRTC:
  2058                           
  2059                           ; 1 bytes @ 0x15
  2060  000095                     	ds	1
  2061  000096                     loadRTC@i:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x16
  2065  000096                     	ds	4
  2066  00009A                     ??_printf:
  2067                           
  2068                           ; 1 bytes @ 0x1A
  2069  00009A                     	ds	4
  2070  00009E                     printf@prec:
  2071                           	opt stack 0
  2072                           
  2073                           ; 1 bytes @ 0x1E
  2074  00009E                     	ds	1
  2075  00009F                     printf@cp:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x1F
  2079  00009F                     	ds	2
  2080  0000A1                     printf@ap:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x21
  2084  0000A1                     	ds	2
  2085  0000A3                     printf@len:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x23
  2089  0000A3                     	ds	2
  2090  0000A5                     printf@val:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x25
  2094  0000A5                     	ds	2
  2095  0000A7                     printf@flag:
  2096                           	opt stack 0
  2097                           
  2098                           ; 1 bytes @ 0x27
  2099  0000A7                     	ds	1
  2100  0000A8                     printf@c:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x28
  2104  0000A8                     	ds	1
  2105  0000A9                     printf@width:
  2106                           	opt stack 0
  2107                           
  2108                           ; 2 bytes @ 0x29
  2109  0000A9                     	ds	2
  2110  0000AB                     ??_printRTC:
  2111  0000AB                     ??_algorithmTest:
  2112  0000AB                     ??_sensorTest:
  2113  0000AB                     ??_actuatorTest:
  2114  0000AB                     ??_PortTestA5:
  2115  0000AB                     ??_SpeedTest:
  2116  0000AB                     ??_PusherTest:
  2117  0000AB                     ??_BothServos:
  2118  0000AB                     ??_BlockerTest:
  2119  0000AB                     EEPROM_write@address:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x2B
  2123  0000AB                     	ds	1
  2124  0000AC                     PusherTest@i:
  2125                           	opt stack 0
  2126  0000AC                     BlockerTest@i:
  2127                           	opt stack 0
  2128                           
  2129                           ; 2 bytes @ 0x2C
  2130  0000AC                     	ds	1
  2131  0000AD                     EEPROM_write@data:
  2132                           	opt stack 0
  2133  0000AD                     actuatorTest@i_1644:
  2134                           	opt stack 0
  2135  0000AD                     sensorTest@res:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x2D
  2139  0000AD                     	ds	1
  2140  0000AE                     ??_EEPROM_write:
  2141  0000AE                     actuatorTest@i_1651:
  2142                           	opt stack 0
  2143  0000AE                     PusherTest@i_1697:
  2144                           	opt stack 0
  2145  0000AE                     BlockerTest@flag:
  2146                           	opt stack 0
  2147  0000AE                     printRTC@INT_time:
  2148                           	opt stack 0
  2149                           
  2150                           ; 14 bytes @ 0x2E
  2151  0000AE                     	ds	1
  2152  0000AF                     EEPROM_write@i:
  2153                           	opt stack 0
  2154  0000AF                     actuatorTest@i_1652:
  2155                           	opt stack 0
  2156                           
  2157                           ; 1 bytes @ 0x2F
  2158  0000AF                     	ds	1
  2159  0000B0                     EEPROM_write@i_1330:
  2160                           	opt stack 0
  2161  0000B0                     actuatorTest@i_1654:
  2162                           	opt stack 0
  2163                           
  2164                           ; 1 bytes @ 0x30
  2165  0000B0                     	ds	1
  2166  0000B1                     ??_Loading:
  2167  0000B1                     logRun@num:
  2168                           	opt stack 0
  2169  0000B1                     actuatorTest@i_1655:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x31
  2173  0000B1                     	ds	1
  2174  0000B2                     logRun@byte1:
  2175                           	opt stack 0
  2176  0000B2                     actuatorTest@i_1657:
  2177                           	opt stack 0
  2178                           
  2179                           ; 1 bytes @ 0x32
  2180  0000B2                     	ds	1
  2181  0000B3                     logRun@byte2:
  2182                           	opt stack 0
  2183  0000B3                     actuatorTest@i_1658:
  2184                           	opt stack 0
  2185  0000B3                     Loading@addr:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x33
  2189  0000B3                     	ds	1
  2190  0000B4                     logRun@byte3:
  2191                           	opt stack 0
  2192  0000B4                     actuatorTest@i_1660:
  2193                           	opt stack 0
  2194                           
  2195                           ; 1 bytes @ 0x34
  2196  0000B4                     	ds	1
  2197  0000B5                     Loading@byte1:
  2198                           	opt stack 0
  2199  0000B5                     logRun@byte_i:
  2200                           	opt stack 0
  2201  0000B5                     actuatorTest@i_1661:
  2202                           	opt stack 0
  2203                           
  2204                           ; 1 bytes @ 0x35
  2205  0000B5                     	ds	1
  2206  0000B6                     logRun@byte11:
  2207                           	opt stack 0
  2208  0000B6                     actuatorTest@i_1663:
  2209                           	opt stack 0
  2210  0000B6                     Loading@i_1099:
  2211                           	opt stack 0
  2212                           
  2213                           ; 2 bytes @ 0x36
  2214  0000B6                     	ds	1
  2215  0000B7                     actuatorTest@i_1664:
  2216                           	opt stack 0
  2217  0000B7                     logRun@i:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x37
  2221  0000B7                     	ds	1
  2222  0000B8                     actuatorTest@i_1666:
  2223                           	opt stack 0
  2224  0000B8                     Loading@i_1100:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x38
  2228  0000B8                     	ds	1
  2229  0000B9                     actuatorTest@i_1667:
  2230                           	opt stack 0
  2231  0000B9                     logRun@addr:
  2232                           	opt stack 0
  2233                           
  2234                           ; 2 bytes @ 0x39
  2235  0000B9                     	ds	1
  2236  0000BA                     actuatorTest@i_1670:
  2237                           	opt stack 0
  2238  0000BA                     Loading@i:
  2239                           	opt stack 0
  2240                           
  2241                           ; 2 bytes @ 0x3A
  2242  0000BA                     	ds	1
  2243  0000BB                     actuatorTest@i_1671:
  2244                           	opt stack 0
  2245                           
  2246                           ; 1 bytes @ 0x3B
  2247  0000BB                     	ds	1
  2248  0000BC                     actuatorTest@i_1673:
  2249                           	opt stack 0
  2250  0000BC                     printRTC@RTC_month:
  2251                           	opt stack 0
  2252                           
  2253                           ; 2 bytes @ 0x3C
  2254  0000BC                     	ds	1
  2255  0000BD                     actuatorTest@i_1674:
  2256                           	opt stack 0
  2257                           
  2258                           ; 1 bytes @ 0x3D
  2259  0000BD                     	ds	1
  2260  0000BE                     actuatorTest@i_1676:
  2261                           	opt stack 0
  2262  0000BE                     printRTC@month:
  2263                           	opt stack 0
  2264                           
  2265                           ; 4 bytes @ 0x3E
  2266  0000BE                     	ds	1
  2267  0000BF                     actuatorTest@i_1677:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x3F
  2271  0000BF                     	ds	1
  2272  0000C0                     actuatorTest@i_1680:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x40
  2276  0000C0                     	ds	1
  2277  0000C1                     actuatorTest@i_1681:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x41
  2281  0000C1                     	ds	1
  2282  0000C2                     actuatorTest@i_1683:
  2283                           	opt stack 0
  2284  0000C2                     printRTC@i:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x42
  2288  0000C2                     	ds	1
  2289  0000C3                     actuatorTest@i_1684:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x43
  2293  0000C3                     	ds	1
  2294  0000C4                     ??_UI:
  2295  0000C4                     actuatorTest@i:
  2296                           	opt stack 0
  2297                           
  2298                           ; 2 bytes @ 0x44
  2299  0000C4                     	ds	2
  2300  0000C6                     ??_Test:
  2301  0000C6                     _UI$2315:
  2302                           	opt stack 0
  2303                           
  2304                           ; 2 bytes @ 0x46
  2305  0000C6                     	ds	2
  2306  0000C8                     UI@i:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x48
  2310  0000C8                     	ds	1
  2311  0000C9                     UI@i_409:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x49
  2315  0000C9                     	ds	1
  2316  0000CA                     UI@i_412:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x4A
  2320  0000CA                     	ds	1
  2321  0000CB                     UI@i_413:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x4B
  2325  0000CB                     	ds	1
  2326  0000CC                     UI@i_431:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x4C
  2330  0000CC                     	ds	1
  2331  0000CD                     UI@i_432:
  2332                           	opt stack 0
  2333                           
  2334                           ; 1 bytes @ 0x4D
  2335  0000CD                     	ds	1
  2336  0000CE                     UI@i_435:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x4E
  2340  0000CE                     	ds	1
  2341  0000CF                     UI@i_436:
  2342                           	opt stack 0
  2343                           
  2344                           ; 1 bytes @ 0x4F
  2345  0000CF                     	ds	1
  2346  0000D0                     UI@i_439:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x50
  2350  0000D0                     	ds	1
  2351  0000D1                     UI@i_440:
  2352                           	opt stack 0
  2353                           
  2354                           ; 1 bytes @ 0x51
  2355  0000D1                     	ds	1
  2356  0000D2                     UI@i_443:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x52
  2360  0000D2                     	ds	1
  2361  0000D3                     UI@i_444:
  2362                           	opt stack 0
  2363                           
  2364                           ; 1 bytes @ 0x53
  2365  0000D3                     	ds	1
  2366  0000D4                     UI@i_447:
  2367                           	opt stack 0
  2368                           
  2369                           ; 1 bytes @ 0x54
  2370  0000D4                     	ds	1
  2371  0000D5                     UI@i_448:
  2372                           	opt stack 0
  2373                           
  2374                           ; 1 bytes @ 0x55
  2375  0000D5                     	ds	1
  2376  0000D6                     UI@month:
  2377                           	opt stack 0
  2378                           
  2379                           ; 4 bytes @ 0x56
  2380  0000D6                     	ds	4
  2381  0000DA                     tblptru	equ	0xFF8
  2382                           tblptrh	equ	0xFF7
  2383                           tblptrl	equ	0xFF6
  2384                           tablat	equ	0xFF5
  2385                           postinc0	equ	0xFEE
  2386                           wreg	equ	0xFE8
  2387                           postdec1	equ	0xFE5
  2388                           fsr1l	equ	0xFE1
  2389                           
  2390                           ; 1 bytes @ 0x5A
  2391                           
  2392                           	psect	cstackCOMRAM
  2393  000001                     __pcstackCOMRAM:
  2394                           	opt stack 0
  2395  000001                     ??i2_I2C_Master_Wait:
  2396  000001                     ??i2_isdigit:
  2397  000001                     ?i2___wmul:
  2398                           	opt stack 0
  2399  000001                     ?i2___lwmod:
  2400                           	opt stack 0
  2401  000001                     i2lcdNibble@temp:
  2402                           	opt stack 0
  2403  000001                     i2EEPROM_read@address:
  2404                           	opt stack 0
  2405  000001                     i2___wmul@multiplier:
  2406                           	opt stack 0
  2407  000001                     i2___lwmod@dividend:
  2408                           	opt stack 0
  2409  000001                     i2strcpy@to:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x0
  2413  000001                     	ds	1
  2414  000002                     i2I2C_Master_Read@a:
  2415                           	opt stack 0
  2416  000002                     i2lcdNibble@data:
  2417                           	opt stack 0
  2418  000002                     i2_isdigit$1959:
  2419                           	opt stack 0
  2420  000002                     i2I2C_Master_Write@d:
  2421                           	opt stack 0
  2422                           
  2423                           ; 2 bytes @ 0x1
  2424  000002                     	ds	1
  2425  000003                     i2I2C_Master_Read@temp:
  2426                           	opt stack 0
  2427  000003                     i2lcdInst@data:
  2428                           	opt stack 0
  2429  000003                     i2putch@data:
  2430                           	opt stack 0
  2431  000003                     i2isdigit@c:
  2432                           	opt stack 0
  2433  000003                     i2___wmul@multiplicand:
  2434                           	opt stack 0
  2435  000003                     i2___lwmod@divisor:
  2436                           	opt stack 0
  2437  000003                     i2strcpy@from:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x2
  2441  000003                     	ds	1
  2442  000004                     i2getRTC@i:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x3
  2446  000004                     	ds	1
  2447  000005                     i2___lwmod@counter:
  2448                           	opt stack 0
  2449  000005                     i2___wmul@product:
  2450                           	opt stack 0
  2451  000005                     i2strcpy@cp:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x4
  2455  000005                     	ds	1
  2456  000006                     ?i2___lwdiv:
  2457                           	opt stack 0
  2458  000006                     i2___lwdiv@dividend:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0x5
  2462  000006                     	ds	1
  2463  000007                     retrieveLog@logNum:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x6
  2467  000007                     	ds	1
  2468  000008                     i2___lwdiv@divisor:
  2469                           	opt stack 0
  2470                           
  2471                           ; 2 bytes @ 0x7
  2472  000008                     	ds	1
  2473  000009                     ??_retrieveLog:
  2474                           
  2475                           ; 1 bytes @ 0x8
  2476  000009                     	ds	1
  2477  00000A                     i2___lwdiv@quotient:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0x9
  2481  00000A                     	ds	1
  2482  00000B                     retrieveLog@byte1:
  2483                           	opt stack 0
  2484                           
  2485                           ; 1 bytes @ 0xA
  2486  00000B                     	ds	1
  2487  00000C                     retrieveLog@byte2:
  2488                           	opt stack 0
  2489  00000C                     i2___lwdiv@counter:
  2490                           	opt stack 0
  2491                           
  2492                           ; 1 bytes @ 0xB
  2493  00000C                     	ds	1
  2494  00000D                     ?i2_printf:
  2495                           	opt stack 0
  2496  00000D                     retrieveLog@byte3:
  2497                           	opt stack 0
  2498  00000D                     i2printf@f:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0xC
  2502  00000D                     	ds	1
  2503  00000E                     retrieveLog@i:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0xD
  2507  00000E                     	ds	2
  2508  000010                     retrieveLog@addr:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0xF
  2512  000010                     	ds	2
  2513  000012                     dispLogs@myLog:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x11
  2517  000012                     	ds	2
  2518  000014                     
  2519                           ; 1 bytes @ 0x13
  2520  000014                     	ds	5
  2521  000019                     ??i2_printf:
  2522                           
  2523                           ; 1 bytes @ 0x18
  2524  000019                     	ds	4
  2525  00001D                     i2printf@prec:
  2526                           	opt stack 0
  2527                           
  2528                           ; 1 bytes @ 0x1C
  2529  00001D                     	ds	1
  2530  00001E                     i2printf@cp:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x1D
  2534  00001E                     	ds	2
  2535  000020                     i2printf@ap:
  2536                           	opt stack 0
  2537                           
  2538                           ; 2 bytes @ 0x1F
  2539  000020                     	ds	2
  2540  000022                     i2printf@len:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x21
  2544  000022                     	ds	2
  2545  000024                     i2printf@val:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x23
  2549  000024                     	ds	2
  2550  000026                     i2printf@flag:
  2551                           	opt stack 0
  2552                           
  2553                           ; 1 bytes @ 0x25
  2554  000026                     	ds	1
  2555  000027                     i2printf@c:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0x26
  2559  000027                     	ds	1
  2560  000028                     i2printf@width:
  2561                           	opt stack 0
  2562                           
  2563                           ; 2 bytes @ 0x27
  2564  000028                     	ds	2
  2565  00002A                     ??_printSortTimer:
  2566  00002A                     ??i2_printRTC:
  2567  00002A                     ?_inputHandler:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x29
  2571  00002A                     	ds	2
  2572  00002C                     ??_inputHandler:
  2573                           
  2574                           ; 1 bytes @ 0x2B
  2575  00002C                     	ds	1
  2576  00002D                     printSortTimer@hour:
  2577                           	opt stack 0
  2578  00002D                     i2printRTC@INT_time:
  2579                           	opt stack 0
  2580                           
  2581                           ; 14 bytes @ 0x2C
  2582  00002D                     	ds	2
  2583  00002F                     printSortTimer@curTime:
  2584                           	opt stack 0
  2585                           
  2586                           ; 14 bytes @ 0x2E
  2587  00002F                     	ds	12
  2588  00003B                     i2printRTC@RTC_month:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x3A
  2592  00003B                     	ds	2
  2593  00003D                     printSortTimer@start_sec:
  2594                           	opt stack 0
  2595  00003D                     i2printRTC@month:
  2596                           	opt stack 0
  2597                           
  2598                           ; 4 bytes @ 0x3C
  2599  00003D                     	ds	2
  2600  00003F                     printSortTimer@cur_sec:
  2601                           	opt stack 0
  2602                           
  2603                           ; 2 bytes @ 0x3E
  2604  00003F                     	ds	2
  2605  000041                     printSortTimer@min:
  2606                           	opt stack 0
  2607  000041                     i2printRTC@i:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x40
  2611  000041                     	ds	2
  2612  000043                     ??_updateMenu:
  2613  000043                     printSortTimer@sec:
  2614                           	opt stack 0
  2615                           
  2616                           ; 2 bytes @ 0x42
  2617  000043                     	ds	2
  2618  000045                     _printSortTimer$2435:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x44
  2622  000045                     	ds	2
  2623  000047                     printSortTimer@timeDiff:
  2624                           	opt stack 0
  2625                           
  2626                           ; 2 bytes @ 0x46
  2627  000047                     	ds	2
  2628  000049                     printSortTimer@i:
  2629                           	opt stack 0
  2630                           
  2631                           ; 2 bytes @ 0x48
  2632  000049                     	ds	2
  2633  00004B                     ??_handler:
  2634                           
  2635                           ; 1 bytes @ 0x4A
  2636  00004B                     	ds	16
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           postinc0	equ	0xFEE
  2642                           wreg	equ	0xFE8
  2643                           postdec1	equ	0xFE5
  2644                           fsr1l	equ	0xFE1
  2645                           
  2646 ;;
  2647 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2648 ;;
  2649 ;; *************** function _main *****************
  2650 ;; Defined at:
  2651 ;;		line 19 in file "main.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;Total ram usage:        0 bytes
  2670 ;; Hardware stack levels required when called:   13
  2671 ;; This function calls:
  2672 ;;		_I2C_Master_Init
  2673 ;;		_Test
  2674 ;;		_UI
  2675 ;;		_initLCD
  2676 ;;		_initTime
  2677 ;;		_initUI
  2678 ;;		_logRun
  2679 ;;		_machineConfig
  2680 ;;		_sort
  2681 ;;		_stopSignals
  2682 ;; This function is called by:
  2683 ;;		Startup code after reset
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text0
  2688  00387E                     __ptext0:
  2689                           	opt stack 0
  2690  00387E                     _main:
  2691                           	opt stack 18
  2692                           
  2693                           ;main.c: 20: machineConfig();
  2694                           
  2695                           ;incstack = 0
  2696  00387E  EC8A  F020         	call	_machineConfig	;wreg free
  2697                           
  2698                           ;main.c: 21: initLCD();
  2699  003882  EC04  F022         	call	_initLCD	;wreg free
  2700                           
  2701                           ;main.c: 24: RTCflag = 0;
  2702  003886  0E00               	movlw	0
  2703  003888  0100               	movlb	0	; () banked
  2704  00388A  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2705  00388C  0E00               	movlw	0
  2706  00388E  6FE2               	movwf	_RTCflag& (0+255),b
  2707                           
  2708                           ;main.c: 25: if(RTCflag){
  2709  003890  0100               	movlb	0	; () banked
  2710  003892  51E2               	movf	_RTCflag& (0+255),w,b
  2711  003894  0100               	movlb	0	; () banked
  2712  003896  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2713  003898  B4D8               	btfsc	status,2,c
  2714  00389A  D016               	goto	l8370
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2718  00389C  0E20               	movlw	32
  2719  00389E  0100               	movlb	0	; () banked
  2720  0038A0  6F80               	movwf	initTime@m& (0+255),b
  2721  0038A2  0E15               	movlw	21
  2722  0038A4  0100               	movlb	0	; () banked
  2723  0038A6  6F81               	movwf	initTime@h& (0+255),b
  2724  0038A8  0E04               	movlw	4
  2725  0038AA  0100               	movlb	0	; () banked
  2726  0038AC  6F82               	movwf	initTime@w& (0+255),b
  2727  0038AE  0E15               	movlw	21
  2728  0038B0  0100               	movlb	0	; () banked
  2729  0038B2  6F83               	movwf	initTime@DD& (0+255),b
  2730  0038B4  0E03               	movlw	3
  2731  0038B6  0100               	movlb	0	; () banked
  2732  0038B8  6F84               	movwf	initTime@MM& (0+255),b
  2733  0038BA  0E17               	movlw	23
  2734  0038BC  0100               	movlb	0	; () banked
  2735  0038BE  6F85               	movwf	initTime@YY& (0+255),b
  2736  0038C0  0E42               	movlw	66
  2737  0038C2  ECB7  F024         	call	_initTime
  2738                           
  2739                           ;main.c: 27: }
  2740  0038C6  D00B               	goto	l8372
  2741  0038C8                     l8370:
  2742                           
  2743                           ;main.c: 28: else{
  2744                           ;main.c: 29: I2C_Master_Init(10000);
  2745  0038C8  0E10               	movlw	16
  2746  0038CA  0100               	movlb	0	; () banked
  2747  0038CC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2748  0038CE  0E27               	movlw	39
  2749  0038D0  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2750  0038D2  0E00               	movlw	0
  2751  0038D4  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2752  0038D6  0E00               	movlw	0
  2753  0038D8  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2754  0038DA  EC5A  F020         	call	_I2C_Master_Init	;wreg free
  2755  0038DE                     l8372:
  2756                           
  2757                           ;main.c: 30: }
  2758                           ;main.c: 32: initUI();
  2759  0038DE  ECC0  F023         	call	_initUI	;wreg free
  2760                           
  2761                           ;main.c: 33: first = 1;
  2762  0038E2  0E00               	movlw	0
  2763  0038E4  6E70               	movwf	_first+1,c
  2764  0038E6  0E01               	movlw	1
  2765  0038E8  6E6F               	movwf	_first,c
  2766                           
  2767                           ;main.c: 44: switch(machine_state){
  2768                           
  2769                           ;main.c: 43: while(1){
  2770  0038EA  D017               	goto	l8394
  2771  0038EC                     l8376:
  2772                           
  2773                           ;main.c: 46: UI();
  2774  0038EC  EC65  F004         	call	_UI	;wreg free
  2775                           
  2776                           ;main.c: 47: break;
  2777  0038F0  D014               	goto	l8394
  2778  0038F2                     l8378:
  2779                           
  2780                           ;main.c: 49: sort();
  2781  0038F2  ECA6  F024         	call	_sort	;wreg free
  2782                           
  2783                           ;main.c: 50: break;
  2784  0038F6  D011               	goto	l8394
  2785  0038F8                     l8380:
  2786                           
  2787                           ;main.c: 52: stopSignals();
  2788  0038F8  ECE3  F024         	call	_stopSignals	;wreg free
  2789                           
  2790                           ;main.c: 53: logRun();
  2791  0038FC  EC51  F018         	call	_logRun	;wreg free
  2792                           
  2793                           ;main.c: 54: first = 1;
  2794  003900  0E00               	movlw	0
  2795  003902  6E70               	movwf	_first+1,c
  2796  003904  0E01               	movlw	1
  2797  003906  6E6F               	movwf	_first,c
  2798                           
  2799                           ;main.c: 55: UI();
  2800  003908  EC65  F004         	call	_UI	;wreg free
  2801                           
  2802                           ;main.c: 56: break;
  2803  00390C  D006               	goto	l8394
  2804  00390E                     l8388:
  2805                           
  2806                           ;main.c: 58: Test();
  2807  00390E  EC0F  F01A         	call	_Test	;wreg free
  2808                           
  2809                           ;main.c: 59: break;
  2810  003912  D003               	goto	l8394
  2811  003914                     l8390:
  2812                           
  2813                           ;main.c: 61: stopSignals();
  2814  003914  ECE3  F024         	call	_stopSignals	;wreg free
  2815  003918                     l487:
  2816  003918  D7FF               	goto	l487
  2817  00391A                     l8394:
  2818  00391A  0100               	movlb	0	; () banked
  2819  00391C  51FC               	movf	_machine_state& (0+255),w,b
  2820                           
  2821                           ; Switch size 1, requested type "space"
  2822                           ; Number of cases is 5, Range of values is 0 to 4
  2823                           ; switch strategies available:
  2824                           ; Name         Instructions Cycles
  2825                           ; simple_byte           16     9 (average)
  2826                           ;	Chosen strategy is simple_byte
  2827  00391E  0A00               	xorlw	0	; case 0
  2828  003920  B4D8               	btfsc	status,2,c
  2829  003922  D7E4               	goto	l8376
  2830  003924  0A01               	xorlw	1	; case 1
  2831  003926  B4D8               	btfsc	status,2,c
  2832  003928  D7E4               	goto	l8378
  2833  00392A  0A03               	xorlw	3	; case 2
  2834  00392C  B4D8               	btfsc	status,2,c
  2835  00392E  D7E4               	goto	l8380
  2836  003930  0A01               	xorlw	1	; case 3
  2837  003932  B4D8               	btfsc	status,2,c
  2838  003934  D7EC               	goto	l8388
  2839  003936  0A07               	xorlw	7	; case 4
  2840  003938  B4D8               	btfsc	status,2,c
  2841  00393A  D7EC               	goto	l8390
  2842                           
  2843                           ; BSR set to: 0
  2844                           
  2845                           ; BSR set to: 0
  2846  00393C  D7EE               	goto	l8394
  2847  00393E                     __end_of_main:
  2848                           	opt stack 0
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           postdec1	equ	0xFE5
  2856                           fsr1l	equ	0xFE1
  2857                           status	equ	0xFD8
  2858                           
  2859 ;; *************** function _stopSignals *****************
  2860 ;; Defined at:
  2861 ;;		line 70 in file "main.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;		None
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;		None
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      void 
  2868 ;; Registers used:
  2869 ;;		wreg, status,2
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;Total ram usage:        0 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    7
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_main
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text1
  2890  0049C6                     __ptext1:
  2891                           	opt stack 0
  2892  0049C6                     _stopSignals:
  2893                           	opt stack 23
  2894                           
  2895                           ;main.c: 71: LATA = 0x00;
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;incstack = 0
  2899  0049C6  0E00               	movlw	0
  2900  0049C8  6E89               	movwf	3977,c	;volatile
  2901                           
  2902                           ;main.c: 72: LATB = 0x00;
  2903  0049CA  0E00               	movlw	0
  2904  0049CC  6E8A               	movwf	3978,c	;volatile
  2905                           
  2906                           ;main.c: 73: LATC = 0x00;
  2907  0049CE  0E00               	movlw	0
  2908  0049D0  6E8B               	movwf	3979,c	;volatile
  2909                           
  2910                           ;main.c: 74: LATD = 0x00;
  2911  0049D2  0E00               	movlw	0
  2912  0049D4  6E8C               	movwf	3980,c	;volatile
  2913                           
  2914                           ;main.c: 75: LATE = 0x00;
  2915  0049D6  0E00               	movlw	0
  2916  0049D8  6E8D               	movwf	3981,c	;volatile
  2917  0049DA  0012               	return		;funcret
  2918  0049DC                     __end_of_stopSignals:
  2919                           	opt stack 0
  2920                           tblptru	equ	0xFF8
  2921                           tblptrh	equ	0xFF7
  2922                           tblptrl	equ	0xFF6
  2923                           tablat	equ	0xFF5
  2924                           postinc0	equ	0xFEE
  2925                           wreg	equ	0xFE8
  2926                           postdec1	equ	0xFE5
  2927                           fsr1l	equ	0xFE1
  2928                           status	equ	0xFD8
  2929                           
  2930 ;; *************** function _sort *****************
  2931 ;; Defined at:
  2932 ;;		line 56 in file "sort.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;		None
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;		None
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;Total ram usage:        0 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:   12
  2953 ;; This function calls:
  2954 ;;		_Distribution
  2955 ;;		_ID
  2956 ;;		_Loading
  2957 ;; This function is called by:
  2958 ;;		_main
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text2
  2963  00494C                     __ptext2:
  2964                           	opt stack 0
  2965  00494C                     _sort:
  2966                           	opt stack 18
  2967                           
  2968                           ;sort.c: 57: if(machine_state == Sorting_state){
  2969                           
  2970                           ;incstack = 0
  2971  00494C  0100               	movlb	0	; () banked
  2972  00494E  05FC               	decf	_machine_state& (0+255),w,b
  2973  004950  B4D8               	btfsc	status,2,c
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;sort.c: 58: Loading();
  2977  004952  ECB2  F014         	call	_Loading	;wreg free
  2978                           
  2979                           ;sort.c: 59: }
  2980                           ;sort.c: 60: if(machine_state == Sorting_state){
  2981  004956  0100               	movlb	0	; () banked
  2982  004958  05FC               	decf	_machine_state& (0+255),w,b
  2983  00495A  B4D8               	btfsc	status,2,c
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;sort.c: 61: ID();
  2987  00495C  EC82  F019         	call	_ID	;wreg free
  2988                           
  2989                           ;sort.c: 62: }
  2990                           ;sort.c: 63: if(machine_state == Sorting_state){
  2991  004960  0100               	movlb	0	; () banked
  2992  004962  05FC               	decf	_machine_state& (0+255),w,b
  2993  004964  A4D8               	btfss	status,2,c
  2994  004966  0012               	return	
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;sort.c: 64: Distribution();
  2998  004968  ECAC  F013         	call	_Distribution	;wreg free
  2999  00496C  0012               	return	
  3000  00496E                     __end_of_sort:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postdec1	equ	0xFE5
  3009                           fsr1l	equ	0xFE1
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _Loading *****************
  3013 ;; Defined at:
  3014 ;;		line 68 in file "sort.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;		None
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  i               2   56[BANK0 ] int 
  3019 ;;  i               2   54[BANK0 ] int 
  3020 ;;  i               2   58[BANK0 ] int 
  3021 ;;  addr            2   51[BANK0 ] unsigned short 
  3022 ;;  byte1           1   53[BANK0 ] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;Total ram usage:       11 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:   11
  3039 ;; This function calls:
  3040 ;;		_EEPROM_read
  3041 ;;		_EEPROM_write
  3042 ;;		_delay_ms
  3043 ;;		_getIR
  3044 ;;		_getMAG
  3045 ;;		_initGlobalVars
  3046 ;;		_initServos
  3047 ;;		_initSortTimer
  3048 ;;		_lcdInst
  3049 ;; This function is called by:
  3050 ;;		_sort
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text3
  3055  002964                     __ptext3:
  3056                           	opt stack 0
  3057  002964                     _Loading:
  3058                           	opt stack 18
  3059                           
  3060                           ;sort.c: 69: if(first){
  3061                           
  3062                           ;incstack = 0
  3063  002964  506F               	movf	_first,w,c
  3064  002966  1070               	iorwf	_first+1,w,c
  3065  002968  B4D8               	btfsc	status,2,c
  3066  00296A  D074               	goto	l6594
  3067                           
  3068                           ;sort.c: 70: initGlobalVars();
  3069  00296C  ECBF  F01F         	call	_initGlobalVars	;wreg free
  3070                           
  3071                           ;sort.c: 71: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3072  002970  0E01               	movlw	1
  3073  002972  EC14  F025         	call	_lcdInst
  3074  002976  0E68               	movlw	104
  3075  002978  0100               	movlb	0	; () banked
  3076  00297A  6FB1               	movwf	??_Loading& (0+255),b
  3077  00297C  0EE4               	movlw	228
  3078  00297E                     u7417:
  3079  00297E  2EE8               	decfsz	wreg,f,c
  3080  002980  D7FE               	bra	u7417
  3081  002982  2FB1               	decfsz	??_Loading& (0+255),f,b
  3082  002984  D7FC               	bra	u7417
  3083  002986  F000               	nop	
  3084                           
  3085                           ;sort.c: 72: initSortTimer();
  3086  002988  EC5C  F01D         	call	_initSortTimer	;wreg free
  3087                           
  3088                           ;sort.c: 73: LATCbits.LATC5 = 1;
  3089  00298C  8A8B               	bsf	3979,5,c	;volatile
  3090                           
  3091                           ;sort.c: 78: sel = EEPROM_read(0);
  3092  00298E  0E00               	movlw	0
  3093  002990  0100               	movlb	0	; () banked
  3094  002992  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3095  002994  0E00               	movlw	0
  3096  002996  6F80               	movwf	EEPROM_read@address& (0+255),b
  3097  002998  ECD7  F024         	call	_EEPROM_read	;wreg free
  3098  00299C  0100               	movlb	0	; () banked
  3099  00299E  6FFD               	movwf	_sel& (0+255),b
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;sort.c: 79: unsigned short addr = 1 + 11 * sel;
  3103  0029A0  0100               	movlb	0	; () banked
  3104  0029A2  51FD               	movf	_sel& (0+255),w,b
  3105  0029A4  0D0B               	mullw	11
  3106  0029A6  0E01               	movlw	1
  3107  0029A8  24F3               	addwf	prodl,w,c
  3108  0029AA  0100               	movlb	0	; () banked
  3109  0029AC  6FB3               	movwf	Loading@addr& (0+255),b
  3110  0029AE  0E00               	movlw	0
  3111  0029B0  20F4               	addwfc	prodh,w,c
  3112  0029B2  0100               	movlb	0	; () banked
  3113  0029B4  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;sort.c: 80: unsigned char byte1 = 0b01111111;
  3117  0029B6  0E7F               	movlw	127
  3118  0029B8  0100               	movlb	0	; () banked
  3119  0029BA  6FB5               	movwf	Loading@byte1& (0+255),b
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;sort.c: 81: EEPROM_write(addr, byte1);
  3123  0029BC  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3124  0029C0  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3125  0029C4  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3126  0029C8  EC99  F01A         	call	_EEPROM_write	;wreg free
  3127                           
  3128                           ;sort.c: 84: LATAbits.LATA5 = 0;
  3129  0029CC  9A89               	bcf	3977,5,c	;volatile
  3130                           
  3131                           ;sort.c: 86: for(int i=0; i<46; i++){
  3132  0029CE  0E00               	movlw	0
  3133  0029D0  0100               	movlb	0	; () banked
  3134  0029D2  6FBB               	movwf	(Loading@i+1)& (0+255),b
  3135  0029D4  0E00               	movlw	0
  3136  0029D6  6FBA               	movwf	Loading@i& (0+255),b
  3137                           
  3138                           ; BSR set to: 0
  3139  0029D8  0100               	movlb	0	; () banked
  3140  0029DA  BFBB               	btfsc	(Loading@i+1)& (0+255),7,b
  3141  0029DC  D008               	goto	l6582
  3142  0029DE  0100               	movlb	0	; () banked
  3143  0029E0  51BB               	movf	(Loading@i+1)& (0+255),w,b
  3144  0029E2  E126               	bnz	l732
  3145  0029E4  0E2E               	movlw	46
  3146  0029E6  0100               	movlb	0	; () banked
  3147  0029E8  5DBA               	subwf	Loading@i& (0+255),w,b
  3148  0029EA  B0D8               	btfsc	status,0,c
  3149  0029EC  D021               	goto	l732
  3150  0029EE                     l6582:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;sort.c: 87: LATAbits.LATA5 = !LATAbits.LATA5;
  3154  0029EE  BA89               	btfsc	3977,5,c	;volatile
  3155  0029F0  D004               	goto	u5000
  3156  0029F2  0100               	movlb	0	; () banked
  3157  0029F4  6BB1               	clrf	??_Loading& (0+255),b
  3158  0029F6  2BB1               	incf	??_Loading& (0+255),f,b
  3159  0029F8  D002               	goto	u5018
  3160  0029FA                     u5000:
  3161  0029FA  0100               	movlb	0	; () banked
  3162  0029FC  6BB1               	clrf	??_Loading& (0+255),b
  3163  0029FE                     u5018:
  3164  0029FE  0100               	movlb	0	; () banked
  3165  002A00  3BB1               	swapf	??_Loading& (0+255),f,b
  3166  002A02  47B1               	rlncf	??_Loading& (0+255),f,b
  3167  002A04  5089               	movf	3977,w,c	;volatile
  3168  002A06  0100               	movlb	0	; () banked
  3169  002A08  19B1               	xorwf	??_Loading& (0+255),w,b
  3170  002A0A  0BDF               	andlw	-33
  3171  002A0C  19B1               	xorwf	??_Loading& (0+255),w,b
  3172  002A0E  6E89               	movwf	3977,c	;volatile
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;sort.c: 88: delay_ms(45-i);
  3176  002A10  0100               	movlb	0	; () banked
  3177  002A12  51BA               	movf	Loading@i& (0+255),w,b
  3178  002A14  0800               	sublw	0
  3179  002A16  0F2D               	addlw	45
  3180  002A18  EC46  F024         	call	_delay_ms
  3181  002A1C  0100               	movlb	0	; () banked
  3182  002A1E  4BBA               	infsnz	Loading@i& (0+255),f,b
  3183  002A20  2BBB               	incf	(Loading@i+1)& (0+255),f,b
  3184                           
  3185                           ; BSR set to: 0
  3186  002A22  0100               	movlb	0	; () banked
  3187  002A24  BFBB               	btfsc	(Loading@i+1)& (0+255),7,b
  3188  002A26  D7E3               	goto	l6582
  3189  002A28  0100               	movlb	0	; () banked
  3190  002A2A  51BB               	movf	(Loading@i+1)& (0+255),w,b
  3191  002A2C  E101               	bnz	u5020
  3192  002A2E  D7DA               	goto	L1
  3193  002A30                     u5020:
  3194  002A30                     l732:
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;sort.c: 89: }
  3198                           ;sort.c: 90: LATAbits.LATA5 = 1;
  3199  002A30  8A89               	bsf	3977,5,c	;volatile
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;sort.c: 93: initServos();
  3203  002A32  ECE6  F020         	call	_initServos	;wreg free
  3204                           
  3205                           ;sort.c: 94: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3206  002A36  0ECB               	movlw	203
  3207  002A38  0100               	movlb	0	; () banked
  3208  002A3A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3209  002A3C  0EEC               	movlw	236
  3210  002A3E  0100               	movlb	0	; () banked
  3211  002A40  6FB1               	movwf	??_Loading& (0+255),b
  3212  002A42  0E84               	movlw	132
  3213  002A44                     u7427:
  3214  002A44  2EE8               	decfsz	wreg,f,c
  3215  002A46  D7FE               	bra	u7427
  3216  002A48  2FB1               	decfsz	??_Loading& (0+255),f,b
  3217  002A4A  D7FC               	bra	u7427
  3218  002A4C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3219  002A4E  D7FA               	bra	u7427
  3220  002A50  F000               	nop	
  3221                           
  3222                           ;sort.c: 95: }
  3223  002A52  0012               	return	
  3224  002A54                     l6594:
  3225                           
  3226                           ;sort.c: 96: else{
  3227                           ;sort.c: 99: if(!f_loadingNewCan){
  3228  002A54  0100               	movlb	0	; () banked
  3229  002A56  51E8               	movf	_f_loadingNewCan& (0+255),w,b
  3230  002A58  0100               	movlb	0	; () banked
  3231  002A5A  11E9               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3232  002A5C  A4D8               	btfss	status,2,c
  3233  002A5E  D017               	goto	l6610
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;sort.c: 101: getIR();
  3237  002A60  EC3E  F021         	call	_getIR	;wreg free
  3238                           
  3239                           ;sort.c: 103: if(!f_loadingNewCan){
  3240  002A64  0100               	movlb	0	; () banked
  3241  002A66  51E8               	movf	_f_loadingNewCan& (0+255),w,b
  3242  002A68  0100               	movlb	0	; () banked
  3243  002A6A  11E9               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3244  002A6C  B4D8               	btfsc	status,2,c
  3245  002A6E  0012               	return	
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;sort.c: 107: else{
  3249                           ;sort.c: 108: count_total++;
  3250                           
  3251                           ; BSR set to: 0
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;sort.c: 105: }
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;sort.c: 104: return;
  3258  002A70  0100               	movlb	0	; () banked
  3259  002A72  4BFE               	infsnz	_count_total& (0+255),f,b
  3260  002A74  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;sort.c: 109: if(count_total == 12){
  3264  002A76  0E0C               	movlw	12
  3265  002A78  0100               	movlb	0	; () banked
  3266  002A7A  19FE               	xorwf	_count_total& (0+255),w,b
  3267  002A7C  0100               	movlb	0	; () banked
  3268  002A7E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3269  002A80  A4D8               	btfss	status,2,c
  3270  002A82  0012               	return	
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;sort.c: 110: f_lastCan = 1;
  3274  002A84  0E00               	movlw	0
  3275  002A86  6E6E               	movwf	_f_lastCan+1,c
  3276  002A88  0E01               	movlw	1
  3277  002A8A  6E6D               	movwf	_f_lastCan,c
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;sort.c: 111: }
  3281                           ;sort.c: 112: }
  3282                           ;sort.c: 113: }
  3283                           
  3284                           ; BSR set to: 0
  3285  002A8C  0012               	return	
  3286  002A8E                     l6610:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;sort.c: 116: else if(f_ID_receive){
  3290  002A8E  5067               	movf	_f_ID_receive,w,c
  3291  002A90  1068               	iorwf	_f_ID_receive+1,w,c
  3292  002A92  B4D8               	btfsc	status,2,c
  3293  002A94  0012               	return	
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;sort.c: 117: f_loadingNewCan = 0;
  3297  002A96  0E00               	movlw	0
  3298  002A98  0100               	movlb	0	; () banked
  3299  002A9A  6FE9               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3300  002A9C  0E00               	movlw	0
  3301  002A9E  6FE8               	movwf	_f_loadingNewCan& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;sort.c: 118: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3305  002AA0  0E3D               	movlw	61
  3306  002AA2  0100               	movlb	0	; () banked
  3307  002AA4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3308  002AA6  0EE1               	movlw	225
  3309  002AA8  0100               	movlb	0	; () banked
  3310  002AAA  6FB1               	movwf	??_Loading& (0+255),b
  3311  002AAC  0E3F               	movlw	63
  3312  002AAE                     u7437:
  3313  002AAE  2EE8               	decfsz	wreg,f,c
  3314  002AB0  D7FE               	bra	u7437
  3315  002AB2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3316  002AB4  D7FC               	bra	u7437
  3317  002AB6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3318  002AB8  D7FA               	bra	u7437
  3319  002ABA  D000               	nop2	
  3320                           
  3321                           ;sort.c: 121: getMAG();
  3322  002ABC  ECB6  F022         	call	_getMAG	;wreg free
  3323                           
  3324                           ;sort.c: 122: sensor_outputs[0] = MAG_signal;
  3325  002AC0  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3326  002AC4  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3327                           
  3328                           ;sort.c: 124: if(sensor_outputs[0]){
  3329  002AC8  0100               	movlb	0	; () banked
  3330  002ACA  51DA               	movf	_sensor_outputs& (0+255),w,b
  3331  002ACC  0100               	movlb	0	; () banked
  3332  002ACE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3333  002AD0  B4D8               	btfsc	status,2,c
  3334  002AD2  D01D               	goto	l6634
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;sort.c: 125: for(int i = 0; i<2500; i++){
  3338  002AD4  0E00               	movlw	0
  3339  002AD6  0100               	movlb	0	; () banked
  3340  002AD8  6FB7               	movwf	(Loading@i_1099+1)& (0+255),b
  3341  002ADA  0E00               	movlw	0
  3342  002ADC  6FB6               	movwf	Loading@i_1099& (0+255),b
  3343  002ADE                     l6624:
  3344                           
  3345                           ; BSR set to: 0
  3346  002ADE  0100               	movlb	0	; () banked
  3347  002AE0  BFB7               	btfsc	(Loading@i_1099+1)& (0+255),7,b
  3348  002AE2  D008               	goto	l742
  3349  002AE4  0EC4               	movlw	196
  3350  002AE6  0100               	movlb	0	; () banked
  3351  002AE8  5DB6               	subwf	Loading@i_1099& (0+255),w,b
  3352  002AEA  0E09               	movlw	9
  3353  002AEC  0100               	movlb	0	; () banked
  3354  002AEE  59B7               	subwfb	(Loading@i_1099+1)& (0+255),w,b
  3355  002AF0  B0D8               	btfsc	status,0,c
  3356  002AF2  D02A               	goto	l6646
  3357  002AF4                     l742:
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;sort.c: 126: LATAbits.LATA4 = 1;
  3361  002AF4  8889               	bsf	3977,4,c	;volatile
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;sort.c: 127: _delay((unsigned long)((70)*(32000000/4000000.0)));
  3365  002AF6  0EBA               	movlw	186
  3366  002AF8                     u7447:
  3367  002AF8  2EE8               	decfsz	wreg,f,c
  3368  002AFA  D7FE               	bra	u7447
  3369  002AFC  D000               	nop2	
  3370                           
  3371                           ;sort.c: 128: LATAbits.LATA4 = 0;
  3372  002AFE  9889               	bcf	3977,4,c	;volatile
  3373                           
  3374                           ;sort.c: 129: _delay((unsigned long)((30)*(32000000/4000000.0)));
  3375  002B00  0E50               	movlw	80
  3376  002B02                     u7457:
  3377  002B02  2EE8               	decfsz	wreg,f,c
  3378  002B04  D7FE               	bra	u7457
  3379  002B06  0100               	movlb	0	; () banked
  3380  002B08  4BB6               	infsnz	Loading@i_1099& (0+255),f,b
  3381  002B0A  2BB7               	incf	(Loading@i_1099+1)& (0+255),f,b
  3382  002B0C  D7E8               	goto	l6624
  3383  002B0E                     l6634:
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;sort.c: 132: else{
  3387                           ;sort.c: 133: for(int i = 0; i<2500; i++){
  3388  002B0E  0E00               	movlw	0
  3389  002B10  0100               	movlb	0	; () banked
  3390  002B12  6FB9               	movwf	(Loading@i_1100+1)& (0+255),b
  3391  002B14  0E00               	movlw	0
  3392  002B16  6FB8               	movwf	Loading@i_1100& (0+255),b
  3393  002B18                     l6636:
  3394                           
  3395                           ; BSR set to: 0
  3396  002B18  0100               	movlb	0	; () banked
  3397  002B1A  BFB9               	btfsc	(Loading@i_1100+1)& (0+255),7,b
  3398  002B1C  D008               	goto	l745
  3399  002B1E  0EC4               	movlw	196
  3400  002B20  0100               	movlb	0	; () banked
  3401  002B22  5DB8               	subwf	Loading@i_1100& (0+255),w,b
  3402  002B24  0E09               	movlw	9
  3403  002B26  0100               	movlb	0	; () banked
  3404  002B28  59B9               	subwfb	(Loading@i_1100+1)& (0+255),w,b
  3405  002B2A  B0D8               	btfsc	status,0,c
  3406  002B2C  D00D               	goto	l6646
  3407  002B2E                     l745:
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;sort.c: 134: LATAbits.LATA4 = 1;
  3411  002B2E  8889               	bsf	3977,4,c	;volatile
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;sort.c: 135: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3415  002B30  0E9A               	movlw	154
  3416  002B32                     u7467:
  3417  002B32  2EE8               	decfsz	wreg,f,c
  3418  002B34  D7FE               	bra	u7467
  3419  002B36  D000               	nop2	
  3420                           
  3421                           ;sort.c: 136: LATAbits.LATA4 = 0;
  3422  002B38  9889               	bcf	3977,4,c	;volatile
  3423                           
  3424                           ;sort.c: 137: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3425  002B3A  0E70               	movlw	112
  3426  002B3C                     u7477:
  3427  002B3C  2EE8               	decfsz	wreg,f,c
  3428  002B3E  D7FE               	bra	u7477
  3429  002B40  0100               	movlb	0	; () banked
  3430  002B42  4BB8               	infsnz	Loading@i_1100& (0+255),f,b
  3431  002B44  2BB9               	incf	(Loading@i_1100+1)& (0+255),f,b
  3432  002B46  D7E8               	goto	l6636
  3433  002B48                     l6646:
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;sort.c: 138: }
  3437                           ;sort.c: 139: }
  3438                           ;sort.c: 141: f_can_coming_to_ID = 1;
  3439  002B48  0E00               	movlw	0
  3440  002B4A  6E6A               	movwf	_f_can_coming_to_ID+1,c
  3441  002B4C  0E01               	movlw	1
  3442  002B4E  6E69               	movwf	_f_can_coming_to_ID,c
  3443                           
  3444                           ;sort.c: 142: f_loadingNewCan = 0;
  3445  002B50  0E00               	movlw	0
  3446  002B52  0100               	movlb	0	; () banked
  3447  002B54  6FE9               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3448  002B56  0E00               	movlw	0
  3449  002B58  6FE8               	movwf	_f_loadingNewCan& (0+255),b
  3450                           
  3451                           ; BSR set to: 0
  3452                           
  3453                           ; BSR set to: 0
  3454  002B5A  0012               	return	
  3455  002B5C                     __end_of_Loading:
  3456                           	opt stack 0
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           prodh	equ	0xFF4
  3462                           prodl	equ	0xFF3
  3463                           postinc0	equ	0xFEE
  3464                           wreg	equ	0xFE8
  3465                           postdec1	equ	0xFE5
  3466                           fsr1l	equ	0xFE1
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _initSortTimer *****************
  3470 ;; Defined at:
  3471 ;;		line 289 in file "sort.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  i               2    8[BANK0 ] int 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;Total ram usage:        5 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:   10
  3492 ;; This function calls:
  3493 ;;		_getRTC
  3494 ;; This function is called by:
  3495 ;;		_Loading
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text4
  3500  003AB8                     __ptext4:
  3501                           	opt stack 0
  3502  003AB8                     _initSortTimer:
  3503                           	opt stack 18
  3504                           
  3505                           ;sort.c: 291: getRTC();
  3506                           
  3507                           ;incstack = 0
  3508  003AB8  EC48  F01E         	call	_getRTC	;wreg free
  3509                           
  3510                           ;sort.c: 292: for(int i = 0; i < 7; i++){
  3511  003ABC  0E00               	movlw	0
  3512  003ABE  0100               	movlb	0	; () banked
  3513  003AC0  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3514  003AC2  0E00               	movlw	0
  3515  003AC4  6F88               	movwf	initSortTimer@i& (0+255),b
  3516  003AC6                     l6178:
  3517                           
  3518                           ; BSR set to: 0
  3519  003AC6  0100               	movlb	0	; () banked
  3520  003AC8  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3521  003ACA  D008               	goto	l6182
  3522  003ACC  0100               	movlb	0	; () banked
  3523  003ACE  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3524  003AD0  E140               	bnz	l6188
  3525  003AD2  0E07               	movlw	7
  3526  003AD4  0100               	movlb	0	; () banked
  3527  003AD6  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3528  003AD8  B0D8               	btfsc	status,0,c
  3529  003ADA  D03B               	goto	l6188
  3530  003ADC                     l6182:
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;sort.c: 293: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3534  003ADC  0E24               	movlw	low _time
  3535  003ADE  0100               	movlb	0	; () banked
  3536  003AE0  2588               	addwf	initSortTimer@i& (0+255),w,b
  3537  003AE2  6ED9               	movwf	fsr2l,c
  3538  003AE4  0E01               	movlw	high _time
  3539  003AE6  0100               	movlb	0	; () banked
  3540  003AE8  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3541  003AEA  6EDA               	movwf	fsr2h,c
  3542  003AEC  50DF               	movf	indf2,w,c
  3543  003AEE  0100               	movlb	0	; () banked
  3544  003AF0  6F85               	movwf	??_initSortTimer& (0+255),b
  3545  003AF2  0100               	movlb	0	; () banked
  3546  003AF4  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3547  003AF6  0E0F               	movlw	15
  3548  003AF8  1785               	andwf	??_initSortTimer& (0+255),f,b
  3549  003AFA  0E0F               	movlw	15
  3550  003AFC  0100               	movlb	0	; () banked
  3551  003AFE  1785               	andwf	??_initSortTimer& (0+255),f,b
  3552  003B00  0100               	movlb	0	; () banked
  3553  003B02  5185               	movf	??_initSortTimer& (0+255),w,b
  3554  003B04  0D0A               	mullw	10
  3555  003B06  0E24               	movlw	low _time
  3556  003B08  0100               	movlb	0	; () banked
  3557  003B0A  2588               	addwf	initSortTimer@i& (0+255),w,b
  3558  003B0C  6ED9               	movwf	fsr2l,c
  3559  003B0E  0E01               	movlw	high _time
  3560  003B10  0100               	movlb	0	; () banked
  3561  003B12  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3562  003B14  6EDA               	movwf	fsr2h,c
  3563  003B16  50DF               	movf	indf2,w,c
  3564  003B18  0B0F               	andlw	15
  3565  003B1A  0100               	movlb	0	; () banked
  3566  003B1C  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3567  003B1E  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3568  003B20  50F3               	movf	prodl,w,c
  3569  003B22  0100               	movlb	0	; () banked
  3570  003B24  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3571  003B26  50F4               	movf	prodh,w,c
  3572  003B28  0100               	movlb	0	; () banked
  3573  003B2A  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3574  003B2C  90D8               	bcf	status,0,c
  3575  003B2E  0100               	movlb	0	; () banked
  3576  003B30  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3577  003B32  6ED9               	movwf	fsr2l,c
  3578  003B34  0100               	movlb	0	; () banked
  3579  003B36  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3580  003B38  6EDA               	movwf	fsr2h,c
  3581  003B3A  0E0E               	movlw	low _startTime
  3582  003B3C  26D9               	addwf	fsr2l,f,c
  3583  003B3E  0E01               	movlw	high _startTime
  3584  003B40  22DA               	addwfc	fsr2h,f,c
  3585  003B42  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3586  003B46  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3587                           
  3588                           ; BSR set to: 0
  3589  003B4A  0100               	movlb	0	; () banked
  3590  003B4C  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3591  003B4E  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3592  003B50  D7BA               	goto	l6178
  3593  003B52                     l6188:
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;sort.c: 294: }
  3597                           ;sort.c: 296: T0CON = 0b00010111;
  3598  003B52  0E17               	movlw	23
  3599  003B54  6ED5               	movwf	4053,c	;volatile
  3600                           
  3601                           ;sort.c: 305: TMR0H = 0b10000101;
  3602  003B56  0E85               	movlw	133
  3603  003B58  6ED7               	movwf	4055,c	;volatile
  3604                           
  3605                           ;sort.c: 306: TMR0L = 0b11101110;
  3606  003B5A  0EEE               	movlw	238
  3607  003B5C  6ED6               	movwf	4054,c	;volatile
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;sort.c: 307: TMR0ON = 1;
  3611  003B5E  8ED5               	bsf	4053,7,c	;volatile
  3612                           
  3613                           ; BSR set to: 0
  3614  003B60  0012               	return		;funcret
  3615  003B62                     __end_of_initSortTimer:
  3616                           	opt stack 0
  3617                           tblptru	equ	0xFF8
  3618                           tblptrh	equ	0xFF7
  3619                           tblptrl	equ	0xFF6
  3620                           tablat	equ	0xFF5
  3621                           prodh	equ	0xFF4
  3622                           prodl	equ	0xFF3
  3623                           postinc0	equ	0xFEE
  3624                           wreg	equ	0xFE8
  3625                           postdec1	equ	0xFE5
  3626                           fsr1l	equ	0xFE1
  3627                           indf2	equ	0xFDF
  3628                           postinc2	equ	0xFDE
  3629                           postdec2	equ	0xFDD
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function _initGlobalVars *****************
  3635 ;; Defined at:
  3636 ;;		line 270 in file "sort.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		wreg, status,2
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    7
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_Loading
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text5
  3665  003F7E                     __ptext5:
  3666                           	opt stack 0
  3667  003F7E                     _initGlobalVars:
  3668                           	opt stack 21
  3669                           
  3670                           ;sort.c: 272: first = 0;
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;incstack = 0
  3674  003F7E  0E00               	movlw	0
  3675  003F80  6E70               	movwf	_first+1,c
  3676  003F82  0E00               	movlw	0
  3677  003F84  6E6F               	movwf	_first,c
  3678                           
  3679                           ;sort.c: 275: f_loadingNewCan = 0;
  3680  003F86  0E00               	movlw	0
  3681  003F88  0100               	movlb	0	; () banked
  3682  003F8A  6FE9               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3683  003F8C  0E00               	movlw	0
  3684  003F8E  6FE8               	movwf	_f_loadingNewCan& (0+255),b
  3685                           
  3686                           ;sort.c: 276: f_lastCan = 0;
  3687  003F90  0E00               	movlw	0
  3688  003F92  6E6E               	movwf	_f_lastCan+1,c
  3689  003F94  0E00               	movlw	0
  3690  003F96  6E6D               	movwf	_f_lastCan,c
  3691                           
  3692                           ;sort.c: 277: f_ID_receive = 1;
  3693  003F98  0E00               	movlw	0
  3694  003F9A  6E68               	movwf	_f_ID_receive+1,c
  3695  003F9C  0E01               	movlw	1
  3696  003F9E  6E67               	movwf	_f_ID_receive,c
  3697                           
  3698                           ;sort.c: 278: f_can_coming_to_ID = 0;
  3699  003FA0  0E00               	movlw	0
  3700  003FA2  6E6A               	movwf	_f_can_coming_to_ID+1,c
  3701  003FA4  0E00               	movlw	0
  3702  003FA6  6E69               	movwf	_f_can_coming_to_ID,c
  3703                           
  3704                           ;sort.c: 279: f_can_coming_to_distribution = 0;
  3705  003FA8  0E00               	movlw	0
  3706  003FAA  6E6C               	movwf	_f_can_coming_to_distribution+1,c
  3707  003FAC  0E00               	movlw	0
  3708  003FAE  6E6B               	movwf	_f_can_coming_to_distribution,c
  3709                           
  3710                           ;sort.c: 280: f_can_distributed = 0;
  3711  003FB0  0E00               	movlw	0
  3712  003FB2  0101               	movlb	1	; () banked
  3713  003FB4  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  3714  003FB6  0E00               	movlw	0
  3715  003FB8  6F2F               	movwf	_f_can_distributed& (0+255),b
  3716                           
  3717                           ;sort.c: 283: count_total = 0;
  3718  003FBA  0E00               	movlw	0
  3719  003FBC  0100               	movlb	0	; () banked
  3720  003FBE  6FFF               	movwf	(_count_total+1)& (0+255),b
  3721  003FC0  0E00               	movlw	0
  3722  003FC2  6FFE               	movwf	_count_total& (0+255),b
  3723                           
  3724                           ;sort.c: 284: count_pop_no_tab = 0;
  3725  003FC4  0E00               	movlw	0
  3726  003FC6  6E5E               	movwf	_count_pop_no_tab+1,c
  3727  003FC8  0E00               	movlw	0
  3728  003FCA  6E5D               	movwf	_count_pop_no_tab,c
  3729                           
  3730                           ;sort.c: 285: count_pop_w_tab = 0;
  3731  003FCC  0E00               	movlw	0
  3732  003FCE  6E60               	movwf	_count_pop_w_tab+1,c
  3733  003FD0  0E00               	movlw	0
  3734  003FD2  6E5F               	movwf	_count_pop_w_tab,c
  3735                           
  3736                           ;sort.c: 286: count_can_w_lab = 0;
  3737  003FD4  0E00               	movlw	0
  3738  003FD6  0101               	movlb	1	; () banked
  3739  003FD8  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  3740  003FDA  0E00               	movlw	0
  3741  003FDC  6F2D               	movwf	_count_can_w_lab& (0+255),b
  3742                           
  3743                           ;sort.c: 287: count_can_no_lab = 0;
  3744  003FDE  0E00               	movlw	0
  3745  003FE0  0101               	movlb	1	; () banked
  3746  003FE2  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  3747  003FE4  0E00               	movlw	0
  3748  003FE6  6F2B               	movwf	_count_can_no_lab& (0+255),b
  3749                           
  3750                           ; BSR set to: 1
  3751  003FE8  0012               	return		;funcret
  3752  003FEA                     __end_of_initGlobalVars:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           postinc0	equ	0xFEE
  3761                           wreg	equ	0xFE8
  3762                           postdec1	equ	0xFE5
  3763                           fsr1l	equ	0xFE1
  3764                           indf2	equ	0xFDF
  3765                           postinc2	equ	0xFDE
  3766                           postdec2	equ	0xFDD
  3767                           fsr2h	equ	0xFDA
  3768                           fsr2l	equ	0xFD9
  3769                           status	equ	0xFD8
  3770                           
  3771 ;; *************** function _getMAG *****************
  3772 ;; Defined at:
  3773 ;;		line 360 in file "sort.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;		None
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;		None
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;Total ram usage:        2 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    9
  3794 ;; This function calls:
  3795 ;;		_readMAG
  3796 ;; This function is called by:
  3797 ;;		_Loading
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text6
  3802  00456C                     __ptext6:
  3803                           	opt stack 0
  3804  00456C                     _getMAG:
  3805                           	opt stack 19
  3806                           
  3807                           ;sort.c: 361: readMAG();
  3808                           
  3809                           ; BSR set to: 1
  3810                           ;incstack = 0
  3811  00456C  ECDE  F021         	call	_readMAG	;wreg free
  3812                           
  3813                           ;sort.c: 363: if(MAG_signal==1){
  3814  004570  0100               	movlb	0	; () banked
  3815  004572  05E0               	decf	_MAG_signal& (0+255),w,b
  3816  004574  0100               	movlb	0	; () banked
  3817  004576  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  3818  004578  A4D8               	btfss	status,2,c
  3819  00457A  0012               	return	
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;sort.c: 364: _delay((unsigned long)((500)*(32000000/4000.0)));
  3823  00457C  0E15               	movlw	21
  3824  00457E  0100               	movlb	0	; () banked
  3825  004580  6F87               	movwf	(??_getMAG+1)& (0+255),b
  3826  004582  0E4B               	movlw	75
  3827  004584  0100               	movlb	0	; () banked
  3828  004586  6F86               	movwf	??_getMAG& (0+255),b
  3829  004588  0EBE               	movlw	190
  3830  00458A                     u7487:
  3831  00458A  2EE8               	decfsz	wreg,f,c
  3832  00458C  D7FE               	bra	u7487
  3833  00458E  2F86               	decfsz	??_getMAG& (0+255),f,b
  3834  004590  D7FC               	bra	u7487
  3835  004592  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  3836  004594  D7FA               	bra	u7487
  3837  004596  F000               	nop	
  3838                           
  3839                           ;sort.c: 365: readMAG();
  3840  004598  ECDE  F021         	call	_readMAG	;wreg free
  3841  00459C  0012               	return	
  3842  00459E                     __end_of_getMAG:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           postinc0	equ	0xFEE
  3851                           wreg	equ	0xFE8
  3852                           postdec1	equ	0xFE5
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _getIR *****************
  3862 ;; Defined at:
  3863 ;;		line 347 in file "sort.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      void 
  3870 ;; Registers used:
  3871 ;;		wreg, status,2, status,0, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;Total ram usage:        2 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    9
  3884 ;; This function calls:
  3885 ;;		_readIR
  3886 ;; This function is called by:
  3887 ;;		_Loading
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text7
  3892  00427C                     __ptext7:
  3893                           	opt stack 0
  3894  00427C                     _getIR:
  3895                           	opt stack 19
  3896                           
  3897                           ;sort.c: 348: readIR();
  3898                           
  3899                           ;incstack = 0
  3900  00427C  ECB8  F021         	call	_readIR	;wreg free
  3901                           
  3902                           ;sort.c: 349: if(IR_signal==1){
  3903  004280  0100               	movlb	0	; () banked
  3904  004282  05DE               	decf	_IR_signal& (0+255),w,b
  3905  004284  0100               	movlb	0	; () banked
  3906  004286  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3907  004288  A4D8               	btfss	status,2,c
  3908  00428A  0012               	return	
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;sort.c: 350: _delay((unsigned long)((500)*(32000000/4000.0)));
  3912  00428C  0E15               	movlw	21
  3913  00428E  0100               	movlb	0	; () banked
  3914  004290  6F87               	movwf	(??_getIR+1)& (0+255),b
  3915  004292  0E4B               	movlw	75
  3916  004294  0100               	movlb	0	; () banked
  3917  004296  6F86               	movwf	??_getIR& (0+255),b
  3918  004298  0EBE               	movlw	190
  3919  00429A                     u7497:
  3920  00429A  2EE8               	decfsz	wreg,f,c
  3921  00429C  D7FE               	bra	u7497
  3922  00429E  2F86               	decfsz	??_getIR& (0+255),f,b
  3923  0042A0  D7FC               	bra	u7497
  3924  0042A2  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3925  0042A4  D7FA               	bra	u7497
  3926  0042A6  F000               	nop	
  3927                           
  3928                           ;sort.c: 351: readIR();
  3929  0042A8  ECB8  F021         	call	_readIR	;wreg free
  3930                           
  3931                           ;sort.c: 352: if(IR_signal==1){
  3932  0042AC  0100               	movlb	0	; () banked
  3933  0042AE  05DE               	decf	_IR_signal& (0+255),w,b
  3934  0042B0  0100               	movlb	0	; () banked
  3935  0042B2  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3936  0042B4  A4D8               	btfss	status,2,c
  3937  0042B6  D006               	goto	l6278
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;sort.c: 353: f_loadingNewCan = 1;
  3941  0042B8  0E00               	movlw	0
  3942  0042BA  0100               	movlb	0	; () banked
  3943  0042BC  6FE9               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3944  0042BE  0E01               	movlw	1
  3945  0042C0  6FE8               	movwf	_f_loadingNewCan& (0+255),b
  3946                           
  3947                           ;sort.c: 354: }
  3948  0042C2  0012               	return	
  3949  0042C4                     l6278:
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;sort.c: 355: else{
  3953                           ;sort.c: 356: f_loadingNewCan = 0;
  3954  0042C4  0E00               	movlw	0
  3955  0042C6  0100               	movlb	0	; () banked
  3956  0042C8  6FE9               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3957  0042CA  0E00               	movlw	0
  3958  0042CC  6FE8               	movwf	_f_loadingNewCan& (0+255),b
  3959                           
  3960                           ; BSR set to: 0
  3961  0042CE  0012               	return	
  3962  0042D0                     __end_of_getIR:
  3963                           	opt stack 0
  3964                           tblptru	equ	0xFF8
  3965                           tblptrh	equ	0xFF7
  3966                           tblptrl	equ	0xFF6
  3967                           tablat	equ	0xFF5
  3968                           prodh	equ	0xFF4
  3969                           prodl	equ	0xFF3
  3970                           postinc0	equ	0xFEE
  3971                           wreg	equ	0xFE8
  3972                           postdec1	equ	0xFE5
  3973                           fsr1l	equ	0xFE1
  3974                           indf2	equ	0xFDF
  3975                           postinc2	equ	0xFDE
  3976                           postdec2	equ	0xFDD
  3977                           fsr2h	equ	0xFDA
  3978                           fsr2l	equ	0xFD9
  3979                           status	equ	0xFD8
  3980                           
  3981 ;; *************** function _readIR *****************
  3982 ;; Defined at:
  3983 ;;		line 23 in file "ADCFunctionality.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;		None
  3986 ;; Auto vars:     Size  Location     Type
  3987 ;;  res             2    4[BANK0 ] int 
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  1    wreg      void 
  3990 ;; Registers used:
  3991 ;;		wreg, status,2, status,0, cstack
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;Total ram usage:        4 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    8
  4004 ;; This function calls:
  4005 ;;		_readADC
  4006 ;; This function is called by:
  4007 ;;		_getIR
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text8
  4012  004370                     __ptext8:
  4013                           	opt stack 0
  4014  004370                     _readIR:
  4015                           	opt stack 19
  4016                           
  4017                           ;ADCFunctionality.c: 24: readADC(0);
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;incstack = 0
  4021  004370  0E00               	movlw	0
  4022  004372  EC1B  F024         	call	_readADC
  4023                           
  4024                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4025  004376  50C3               	movf	4035,w,c	;volatile
  4026  004378  CFC4 F082          	movff	4036,??_readIR	;volatile
  4027  00437C  0100               	movlb	0	; () banked
  4028  00437E  6B83               	clrf	(??_readIR+1)& (0+255),b
  4029  004380  C082  F083         	movff	??_readIR,??_readIR+1
  4030  004384  0100               	movlb	0	; () banked
  4031  004386  6B82               	clrf	??_readIR& (0+255),b
  4032  004388  0100               	movlb	0	; () banked
  4033  00438A  1182               	iorwf	??_readIR& (0+255),w,b
  4034  00438C  0100               	movlb	0	; () banked
  4035  00438E  6F84               	movwf	readIR@res& (0+255),b
  4036  004390  0100               	movlb	0	; () banked
  4037  004392  5183               	movf	(??_readIR+1)& (0+255),w,b
  4038  004394  0100               	movlb	0	; () banked
  4039  004396  6F85               	movwf	(readIR@res+1)& (0+255),b
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  4043  004398  0100               	movlb	0	; () banked
  4044  00439A  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4045  00439C  D00A               	goto	u3960
  4046  00439E  0EE9               	movlw	233
  4047  0043A0  0100               	movlb	0	; () banked
  4048  0043A2  5D84               	subwf	readIR@res& (0+255),w,b
  4049  0043A4  0E03               	movlw	3
  4050  0043A6  0100               	movlb	0	; () banked
  4051  0043A8  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4052  0043AA  A0D8               	btfss	status,0,c
  4053  0043AC  D002               	goto	u3960
  4054  0043AE  0E01               	movlw	1
  4055  0043B0  D001               	goto	u3970
  4056  0043B2                     u3960:
  4057  0043B2  0E00               	movlw	0
  4058  0043B4                     u3970:
  4059  0043B4  0100               	movlb	0	; () banked
  4060  0043B6  6FDE               	movwf	_IR_signal& (0+255),b
  4061  0043B8  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4062                           
  4063                           ; BSR set to: 0
  4064  0043BA  0012               	return		;funcret
  4065  0043BC                     __end_of_readIR:
  4066                           	opt stack 0
  4067                           tblptru	equ	0xFF8
  4068                           tblptrh	equ	0xFF7
  4069                           tblptrl	equ	0xFF6
  4070                           tablat	equ	0xFF5
  4071                           prodh	equ	0xFF4
  4072                           prodl	equ	0xFF3
  4073                           postinc0	equ	0xFEE
  4074                           wreg	equ	0xFE8
  4075                           postdec1	equ	0xFE5
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           fsr2h	equ	0xFDA
  4081                           fsr2l	equ	0xFD9
  4082                           status	equ	0xFD8
  4083                           
  4084 ;; *************** function _delay_ms *****************
  4085 ;; Defined at:
  4086 ;;		line 381 in file "sort.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;  milliseconds    1    wreg     unsigned char 
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      void 
  4093 ;; Registers used:
  4094 ;;		wreg, status,2, status,0, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;Total ram usage:        2 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:    7
  4107 ;; This function calls:
  4108 ;;		Nothing
  4109 ;; This function is called by:
  4110 ;;		_Loading
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114                           	psect	text9
  4115  00488C                     __ptext9:
  4116                           	opt stack 0
  4117  00488C                     _delay_ms:
  4118                           	opt stack 21
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;incstack = 0
  4122                           ;delay_ms@milliseconds stored from wreg
  4123  00488C  0100               	movlb	0	; () banked
  4124  00488E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  4125                           
  4126                           ;sort.c: 382: while(milliseconds > 0)
  4127  004890  D00B               	goto	l6250
  4128  004892                     l6246:
  4129                           
  4130                           ;sort.c: 383: {
  4131                           ;sort.c: 384: milliseconds--;
  4132  004892  0100               	movlb	0	; () banked
  4133  004894  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;sort.c: 385: _delay((unsigned long)((990)*(32000000/4000000.0)));
  4137  004896  0E0B               	movlw	11
  4138  004898  0100               	movlb	0	; () banked
  4139  00489A  6F80               	movwf	??_delay_ms& (0+255),b
  4140  00489C  0E47               	movlw	71
  4141  00489E                     u7507:
  4142  00489E  2EE8               	decfsz	wreg,f,c
  4143  0048A0  D7FE               	bra	u7507
  4144  0048A2  2F80               	decfsz	??_delay_ms& (0+255),f,b
  4145  0048A4  D7FC               	bra	u7507
  4146  0048A6  D000               	nop2	
  4147  0048A8                     l6250:
  4148  0048A8  0100               	movlb	0	; () banked
  4149  0048AA  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  4150  0048AC  0100               	movlb	0	; () banked
  4151  0048AE  B4D8               	btfsc	status,2,c
  4152  0048B0  0012               	return	
  4153  0048B2  D7EF               	goto	l6246
  4154  0048B4                     __end_of_delay_ms:
  4155                           	opt stack 0
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           postdec1	equ	0xFE5
  4165                           fsr1l	equ	0xFE1
  4166                           indf2	equ	0xFDF
  4167                           postinc2	equ	0xFDE
  4168                           postdec2	equ	0xFDD
  4169                           fsr2h	equ	0xFDA
  4170                           fsr2l	equ	0xFD9
  4171                           status	equ	0xFD8
  4172                           
  4173 ;; *************** function _ID *****************
  4174 ;; Defined at:
  4175 ;;		line 146 in file "sort.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;		None
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;  i               2    2[BANK0 ] int 
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  1    wreg      void 
  4182 ;; Registers used:
  4183 ;;		wreg, status,2, status,0
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;Total ram usage:        4 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; Hardware stack levels required when called:    7
  4196 ;; This function calls:
  4197 ;;		Nothing
  4198 ;; This function is called by:
  4199 ;;		_sort
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text10
  4204  003304                     __ptext10:
  4205                           	opt stack 0
  4206  003304                     _ID:
  4207                           	opt stack 22
  4208                           
  4209                           ;sort.c: 147: if(f_can_coming_to_ID){
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;incstack = 0
  4213  003304  5069               	movf	_f_can_coming_to_ID,w,c
  4214  003306  106A               	iorwf	_f_can_coming_to_ID+1,w,c
  4215  003308  B4D8               	btfsc	status,2,c
  4216  00330A  0012               	return	
  4217                           
  4218                           ;sort.c: 149: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4219  00330C  0E3D               	movlw	61
  4220  00330E  0100               	movlb	0	; () banked
  4221  003310  6F81               	movwf	(??_ID+1)& (0+255),b
  4222  003312  0EE1               	movlw	225
  4223  003314  0100               	movlb	0	; () banked
  4224  003316  6F80               	movwf	??_ID& (0+255),b
  4225  003318  0E3F               	movlw	63
  4226  00331A                     u7517:
  4227  00331A  2EE8               	decfsz	wreg,f,c
  4228  00331C  D7FE               	bra	u7517
  4229  00331E  2F80               	decfsz	??_ID& (0+255),f,b
  4230  003320  D7FC               	bra	u7517
  4231  003322  2F81               	decfsz	(??_ID+1)& (0+255),f,b
  4232  003324  D7FA               	bra	u7517
  4233  003326  D000               	nop2	
  4234                           
  4235                           ;sort.c: 151: LATAbits.LATA3 = 1;
  4236  003328  8689               	bsf	3977,3,c	;volatile
  4237                           
  4238                           ;sort.c: 153: sensor_outputs[1] = PORTAbits.RA2;
  4239  00332A  A480               	btfss	3968,2,c	;volatile
  4240  00332C  D004               	goto	u5130
  4241  00332E  0100               	movlb	0	; () banked
  4242  003330  6B80               	clrf	??_ID& (0+255),b
  4243  003332  2B80               	incf	??_ID& (0+255),f,b
  4244  003334  D002               	goto	u5138
  4245  003336                     u5130:
  4246  003336  0100               	movlb	0	; () banked
  4247  003338  6B80               	clrf	??_ID& (0+255),b
  4248  00333A                     u5138:
  4249  00333A  0100               	movlb	0	; () banked
  4250  00333C  5180               	movf	??_ID& (0+255),w,b
  4251  00333E  0100               	movlb	0	; () banked
  4252  003340  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4253  003342  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;sort.c: 161: if(!sensor_outputs[0]){
  4257  003344  0100               	movlb	0	; () banked
  4258  003346  51DA               	movf	_sensor_outputs& (0+255),w,b
  4259  003348  0100               	movlb	0	; () banked
  4260  00334A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4261  00334C  A4D8               	btfss	status,2,c
  4262  00334E  D014               	goto	l6668
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;sort.c: 162: if(!sensor_outputs[1]){
  4266  003350  0100               	movlb	0	; () banked
  4267  003352  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4268  003354  0100               	movlb	0	; () banked
  4269  003356  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4270  003358  A4D8               	btfss	status,2,c
  4271  00335A  D007               	goto	l6664
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;sort.c: 163: count_pop_no_tab++;
  4275  00335C  4A5D               	infsnz	_count_pop_no_tab,f,c
  4276  00335E  2A5E               	incf	_count_pop_no_tab+1,f,c
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;sort.c: 164: cur_can = 0;
  4280  003360  0E00               	movlw	0
  4281  003362  0100               	movlb	0	; () banked
  4282  003364  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4283  003366  0E00               	movlw	0
  4284  003368  D006               	goto	L2
  4285  00336A                     l6664:
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;sort.c: 166: else{
  4289                           ;sort.c: 167: count_pop_w_tab++;
  4290  00336A  4A5F               	infsnz	_count_pop_w_tab,f,c
  4291  00336C  2A60               	incf	_count_pop_w_tab+1,f,c
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;sort.c: 168: cur_can = 1;
  4295  00336E  0E00               	movlw	0
  4296  003370  0100               	movlb	0	; () banked
  4297  003372  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4298  003374  0E01               	movlw	1
  4299  003376                     L2:
  4300  003376  6FE4               	movwf	_cur_can& (0+255),b
  4301  003378                     l6668:
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;sort.c: 169: }
  4305                           ;sort.c: 170: }
  4306                           ;sort.c: 171: if(sensor_outputs[0]){
  4307  003378  0100               	movlb	0	; () banked
  4308  00337A  51DA               	movf	_sensor_outputs& (0+255),w,b
  4309  00337C  0100               	movlb	0	; () banked
  4310  00337E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4311  003380  B4D8               	btfsc	status,2,c
  4312  003382  D016               	goto	l6680
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;sort.c: 172: if(!sensor_outputs[1]){
  4316  003384  0100               	movlb	0	; () banked
  4317  003386  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4318  003388  0100               	movlb	0	; () banked
  4319  00338A  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4320  00338C  A4D8               	btfss	status,2,c
  4321  00338E  D008               	goto	l6676
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;sort.c: 173: count_can_w_lab++;
  4325  003390  0101               	movlb	1	; () banked
  4326  003392  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4327  003394  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4328                           
  4329                           ; BSR set to: 1
  4330                           ;sort.c: 174: cur_can = 2;
  4331  003396  0E00               	movlw	0
  4332  003398  0100               	movlb	0	; () banked
  4333  00339A  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4334  00339C  0E02               	movlw	2
  4335  00339E  D007               	goto	L3
  4336  0033A0                     l6676:
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;sort.c: 176: else{
  4340                           ;sort.c: 177: count_can_no_lab++;
  4341  0033A0  0101               	movlb	1	; () banked
  4342  0033A2  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4343  0033A4  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4344                           
  4345                           ; BSR set to: 1
  4346                           ;sort.c: 178: cur_can = 3;
  4347  0033A6  0E00               	movlw	0
  4348  0033A8  0100               	movlb	0	; () banked
  4349  0033AA  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4350  0033AC  0E03               	movlw	3
  4351  0033AE                     L3:
  4352  0033AE  6FE4               	movwf	_cur_can& (0+255),b
  4353  0033B0                     l6680:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;sort.c: 179: }
  4357                           ;sort.c: 180: }
  4358                           ;sort.c: 184: for(int i=0;i<10000;i++)
  4359  0033B0  0E00               	movlw	0
  4360  0033B2  0100               	movlb	0	; () banked
  4361  0033B4  6F83               	movwf	(ID@i+1)& (0+255),b
  4362  0033B6  0E00               	movlw	0
  4363  0033B8  6F82               	movwf	ID@i& (0+255),b
  4364  0033BA                     l6682:
  4365                           
  4366                           ; BSR set to: 0
  4367  0033BA  0100               	movlb	0	; () banked
  4368  0033BC  BF83               	btfsc	(ID@i+1)& (0+255),7,b
  4369  0033BE  D008               	goto	l756
  4370  0033C0  0E10               	movlw	16
  4371  0033C2  0100               	movlb	0	; () banked
  4372  0033C4  5D82               	subwf	ID@i& (0+255),w,b
  4373  0033C6  0E27               	movlw	39
  4374  0033C8  0100               	movlb	0	; () banked
  4375  0033CA  5983               	subwfb	(ID@i+1)& (0+255),w,b
  4376  0033CC  B0D8               	btfsc	status,0,c
  4377  0033CE  D00D               	goto	l757
  4378  0033D0                     l756:
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;sort.c: 185: {
  4382                           ;sort.c: 186: LATCbits.LATC0 = 1;
  4383  0033D0  808B               	bsf	3979,0,c	;volatile
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;sort.c: 187: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4387  0033D2  0E1A               	movlw	26
  4388  0033D4                     u7527:
  4389  0033D4  2EE8               	decfsz	wreg,f,c
  4390  0033D6  D7FE               	bra	u7527
  4391  0033D8  D000               	nop2	
  4392                           
  4393                           ;sort.c: 188: LATCbits.LATC0 = 0;
  4394  0033DA  908B               	bcf	3979,0,c	;volatile
  4395                           
  4396                           ;sort.c: 189: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4397  0033DC  0EF0               	movlw	240
  4398  0033DE                     u7537:
  4399  0033DE  2EE8               	decfsz	wreg,f,c
  4400  0033E0  D7FE               	bra	u7537
  4401  0033E2  0100               	movlb	0	; () banked
  4402  0033E4  4B82               	infsnz	ID@i& (0+255),f,b
  4403  0033E6  2B83               	incf	(ID@i+1)& (0+255),f,b
  4404  0033E8  D7E8               	goto	l6682
  4405  0033EA                     l757:
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;sort.c: 190: }
  4409                           ;sort.c: 191: LATCbits.LATC0 = 0;
  4410  0033EA  908B               	bcf	3979,0,c	;volatile
  4411                           
  4412                           ;sort.c: 193: LATAbits.LATA3 = 0;
  4413  0033EC  9689               	bcf	3977,3,c	;volatile
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;sort.c: 197: f_can_coming_to_distribution = 1;
  4417  0033EE  0E00               	movlw	0
  4418  0033F0  6E6C               	movwf	_f_can_coming_to_distribution+1,c
  4419  0033F2  0E01               	movlw	1
  4420  0033F4  6E6B               	movwf	_f_can_coming_to_distribution,c
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;sort.c: 198: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4424  0033F6  0E3D               	movlw	61
  4425  0033F8  0100               	movlb	0	; () banked
  4426  0033FA  6F81               	movwf	(??_ID+1)& (0+255),b
  4427  0033FC  0EE1               	movlw	225
  4428  0033FE  0100               	movlb	0	; () banked
  4429  003400  6F80               	movwf	??_ID& (0+255),b
  4430  003402  0E3F               	movlw	63
  4431  003404                     u7547:
  4432  003404  2EE8               	decfsz	wreg,f,c
  4433  003406  D7FE               	bra	u7547
  4434  003408  2F80               	decfsz	??_ID& (0+255),f,b
  4435  00340A  D7FC               	bra	u7547
  4436  00340C  2F81               	decfsz	(??_ID+1)& (0+255),f,b
  4437  00340E  D7FA               	bra	u7547
  4438  003410  D000               	nop2	
  4439                           
  4440                           ;sort.c: 199: LATCbits.LATC0 = 1;
  4441  003412  808B               	bsf	3979,0,c	;volatile
  4442                           
  4443                           ;sort.c: 201: f_can_coming_to_ID = 0;
  4444  003414  0E00               	movlw	0
  4445  003416  6E6A               	movwf	_f_can_coming_to_ID+1,c
  4446  003418  0E00               	movlw	0
  4447  00341A  6E69               	movwf	_f_can_coming_to_ID,c
  4448  00341C  0012               	return	
  4449  00341E                     __end_of_ID:
  4450                           	opt stack 0
  4451                           tblptru	equ	0xFF8
  4452                           tblptrh	equ	0xFF7
  4453                           tblptrl	equ	0xFF6
  4454                           tablat	equ	0xFF5
  4455                           prodh	equ	0xFF4
  4456                           prodl	equ	0xFF3
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           postdec1	equ	0xFE5
  4460                           fsr1l	equ	0xFE1
  4461                           indf2	equ	0xFDF
  4462                           postinc2	equ	0xFDE
  4463                           postdec2	equ	0xFDD
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function _Distribution *****************
  4469 ;; Defined at:
  4470 ;;		line 204 in file "sort.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;		None
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;		None
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg, status,2, status,0, cstack
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;Total ram usage:        2 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    8
  4491 ;; This function calls:
  4492 ;;		_updateServoPosition
  4493 ;; This function is called by:
  4494 ;;		_sort
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text11
  4499  002758                     __ptext11:
  4500                           	opt stack 0
  4501  002758                     _Distribution:
  4502                           	opt stack 21
  4503                           
  4504                           ;sort.c: 205: if(f_can_coming_to_distribution){
  4505                           
  4506                           ;incstack = 0
  4507  002758  506B               	movf	_f_can_coming_to_distribution,w,c
  4508  00275A  106C               	iorwf	_f_can_coming_to_distribution+1,w,c
  4509  00275C  B4D8               	btfsc	status,2,c
  4510  00275E  0012               	return	
  4511  002760  D034               	goto	l6714
  4512  002762                     l6704:
  4513                           
  4514                           ;sort.c: 215: updateServoPosition(500, 1);
  4515  002762  0E01               	movlw	1
  4516  002764  0100               	movlb	0	; () banked
  4517  002766  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4518  002768  0EF4               	movlw	244
  4519  00276A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4520  00276C  0E00               	movlw	0
  4521  00276E  0100               	movlb	0	; () banked
  4522  002770  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4523  002772  0E01               	movlw	1
  4524  002774  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4525  002776  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4526                           
  4527                           ;sort.c: 216: break;
  4528  00277A  D03E               	goto	l6716
  4529  00277C                     l6706:
  4530                           
  4531                           ;sort.c: 218: updateServoPosition(850, 1);
  4532  00277C  0E03               	movlw	3
  4533  00277E  0100               	movlb	0	; () banked
  4534  002780  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4535  002782  0E52               	movlw	82
  4536  002784  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4537  002786  0E00               	movlw	0
  4538  002788  0100               	movlb	0	; () banked
  4539  00278A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4540  00278C  0E01               	movlw	1
  4541  00278E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4542  002790  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4543                           
  4544                           ;sort.c: 219: break;
  4545  002794  D031               	goto	l6716
  4546  002796                     l6708:
  4547                           
  4548                           ;sort.c: 221: updateServoPosition(1670, 1);
  4549  002796  0E06               	movlw	6
  4550  002798  0100               	movlb	0	; () banked
  4551  00279A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4552  00279C  0E86               	movlw	134
  4553  00279E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4554  0027A0  0E00               	movlw	0
  4555  0027A2  0100               	movlb	0	; () banked
  4556  0027A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4557  0027A6  0E01               	movlw	1
  4558  0027A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4559  0027AA  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4560                           
  4561                           ;sort.c: 222: break;
  4562  0027AE  D024               	goto	l6716
  4563  0027B0                     l6710:
  4564                           
  4565                           ;sort.c: 224: updateServoPosition(2200, 1);
  4566  0027B0  0E08               	movlw	8
  4567  0027B2  0100               	movlb	0	; () banked
  4568  0027B4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4569  0027B6  0E98               	movlw	152
  4570  0027B8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4571  0027BA  0E00               	movlw	0
  4572  0027BC  0100               	movlb	0	; () banked
  4573  0027BE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4574  0027C0  0E01               	movlw	1
  4575  0027C2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4576  0027C4  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4577                           
  4578                           ;sort.c: 228: }
  4579                           
  4580                           ;sort.c: 227: break;
  4581                           
  4582                           ;sort.c: 226: default:
  4583                           
  4584                           ;sort.c: 225: break;
  4585  0027C8  D017               	goto	l6716
  4586  0027CA                     l6714:
  4587  0027CA  C0E4  F088         	movff	_cur_can,??_Distribution
  4588  0027CE  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  4589                           
  4590                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4591                           ; Switch size 1, requested type "space"
  4592                           ; Number of cases is 1, Range of values is 0 to 0
  4593                           ; switch strategies available:
  4594                           ; Name         Instructions Cycles
  4595                           ; simple_byte            4     3 (average)
  4596                           ;	Chosen strategy is simple_byte
  4597  0027D2  0100               	movlb	0	; () banked
  4598  0027D4  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4599  0027D6  0A00               	xorlw	0	; case 0
  4600  0027D8  A4D8               	btfss	status,2,c
  4601  0027DA  D00E               	goto	l6716
  4602                           
  4603                           ; BSR set to: 0
  4604                           ; Switch size 1, requested type "space"
  4605                           ; Number of cases is 4, Range of values is 0 to 3
  4606                           ; switch strategies available:
  4607                           ; Name         Instructions Cycles
  4608                           ; simple_byte           13     7 (average)
  4609                           ;	Chosen strategy is simple_byte
  4610  0027DC  0100               	movlb	0	; () banked
  4611  0027DE  5188               	movf	??_Distribution& (0+255),w,b
  4612  0027E0  0A00               	xorlw	0	; case 0
  4613  0027E2  B4D8               	btfsc	status,2,c
  4614  0027E4  D7BE               	goto	l6704
  4615  0027E6  0A01               	xorlw	1	; case 1
  4616  0027E8  B4D8               	btfsc	status,2,c
  4617  0027EA  D7C8               	goto	l6706
  4618  0027EC  0A03               	xorlw	3	; case 2
  4619  0027EE  B4D8               	btfsc	status,2,c
  4620  0027F0  D7D2               	goto	l6708
  4621  0027F2  0A01               	xorlw	1	; case 3
  4622  0027F4  B4D8               	btfsc	status,2,c
  4623  0027F6  D7DC               	goto	l6710
  4624  0027F8                     l6716:
  4625                           
  4626                           ;sort.c: 229: updateServoPosition(1150, 3);
  4627  0027F8  0E04               	movlw	4
  4628  0027FA  0100               	movlb	0	; () banked
  4629  0027FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4630  0027FE  0E7E               	movlw	126
  4631  002800  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4632  002802  0E00               	movlw	0
  4633  002804  0100               	movlb	0	; () banked
  4634  002806  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4635  002808  0E03               	movlw	3
  4636  00280A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4637  00280C  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4638                           
  4639                           ;sort.c: 230: _delay((unsigned long)((750)*(32000000/4000.0)));
  4640  002810  0E1F               	movlw	31
  4641  002812  0100               	movlb	0	; () banked
  4642  002814  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4643  002816  0E71               	movlw	113
  4644  002818  0100               	movlb	0	; () banked
  4645  00281A  6F88               	movwf	??_Distribution& (0+255),b
  4646  00281C  0E1E               	movlw	30
  4647  00281E                     u7557:
  4648  00281E  2EE8               	decfsz	wreg,f,c
  4649  002820  D7FE               	bra	u7557
  4650  002822  2F88               	decfsz	??_Distribution& (0+255),f,b
  4651  002824  D7FC               	bra	u7557
  4652  002826  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4653  002828  D7FA               	bra	u7557
  4654  00282A  F000               	nop	
  4655                           
  4656                           ;sort.c: 238: switch(cur_can){
  4657  00282C  D034               	goto	l6730
  4658  00282E                     l6720:
  4659                           
  4660                           ;sort.c: 240: updateServoPosition(1200, 3);
  4661  00282E  0E04               	movlw	4
  4662  002830  0100               	movlb	0	; () banked
  4663  002832  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4664  002834  0EB0               	movlw	176
  4665  002836  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4666  002838  0E00               	movlw	0
  4667  00283A  0100               	movlb	0	; () banked
  4668  00283C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4669  00283E  0E03               	movlw	3
  4670  002840  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4671  002842  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4672                           
  4673                           ;sort.c: 241: break;
  4674  002846  D03E               	goto	l6732
  4675  002848                     l6722:
  4676                           
  4677                           ;sort.c: 243: updateServoPosition(1200, 3);
  4678  002848  0E04               	movlw	4
  4679  00284A  0100               	movlb	0	; () banked
  4680  00284C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4681  00284E  0EB0               	movlw	176
  4682  002850  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4683  002852  0E00               	movlw	0
  4684  002854  0100               	movlb	0	; () banked
  4685  002856  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4686  002858  0E03               	movlw	3
  4687  00285A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4688  00285C  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4689                           
  4690                           ;sort.c: 244: break;
  4691  002860  D031               	goto	l6732
  4692  002862                     l6724:
  4693                           
  4694                           ;sort.c: 246: updateServoPosition(1300, 3);
  4695  002862  0E05               	movlw	5
  4696  002864  0100               	movlb	0	; () banked
  4697  002866  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4698  002868  0E14               	movlw	20
  4699  00286A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4700  00286C  0E00               	movlw	0
  4701  00286E  0100               	movlb	0	; () banked
  4702  002870  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4703  002872  0E03               	movlw	3
  4704  002874  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4705  002876  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4706                           
  4707                           ;sort.c: 247: break;
  4708  00287A  D024               	goto	l6732
  4709  00287C                     l6726:
  4710                           
  4711                           ;sort.c: 249: updateServoPosition(1300, 3);
  4712  00287C  0E05               	movlw	5
  4713  00287E  0100               	movlb	0	; () banked
  4714  002880  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4715  002882  0E14               	movlw	20
  4716  002884  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4717  002886  0E00               	movlw	0
  4718  002888  0100               	movlb	0	; () banked
  4719  00288A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4720  00288C  0E03               	movlw	3
  4721  00288E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4722  002890  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4723                           
  4724                           ;sort.c: 253: }
  4725                           
  4726                           ;sort.c: 252: break;
  4727                           
  4728                           ;sort.c: 251: default:
  4729                           
  4730                           ;sort.c: 250: break;
  4731  002894  D017               	goto	l6732
  4732  002896                     l6730:
  4733  002896  C0E4  F088         	movff	_cur_can,??_Distribution
  4734  00289A  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  4735                           
  4736                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4737                           ; Switch size 1, requested type "space"
  4738                           ; Number of cases is 1, Range of values is 0 to 0
  4739                           ; switch strategies available:
  4740                           ; Name         Instructions Cycles
  4741                           ; simple_byte            4     3 (average)
  4742                           ;	Chosen strategy is simple_byte
  4743  00289E  0100               	movlb	0	; () banked
  4744  0028A0  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4745  0028A2  0A00               	xorlw	0	; case 0
  4746  0028A4  A4D8               	btfss	status,2,c
  4747  0028A6  D00E               	goto	l6732
  4748                           
  4749                           ; BSR set to: 0
  4750                           ; Switch size 1, requested type "space"
  4751                           ; Number of cases is 4, Range of values is 0 to 3
  4752                           ; switch strategies available:
  4753                           ; Name         Instructions Cycles
  4754                           ; simple_byte           13     7 (average)
  4755                           ;	Chosen strategy is simple_byte
  4756  0028A8  0100               	movlb	0	; () banked
  4757  0028AA  5188               	movf	??_Distribution& (0+255),w,b
  4758  0028AC  0A00               	xorlw	0	; case 0
  4759  0028AE  B4D8               	btfsc	status,2,c
  4760  0028B0  D7BE               	goto	l6720
  4761  0028B2  0A01               	xorlw	1	; case 1
  4762  0028B4  B4D8               	btfsc	status,2,c
  4763  0028B6  D7C8               	goto	l6722
  4764  0028B8  0A03               	xorlw	3	; case 2
  4765  0028BA  B4D8               	btfsc	status,2,c
  4766  0028BC  D7D2               	goto	l6724
  4767  0028BE  0A01               	xorlw	1	; case 3
  4768  0028C0  B4D8               	btfsc	status,2,c
  4769  0028C2  D7DC               	goto	l6726
  4770  0028C4                     l6732:
  4771                           
  4772                           ;sort.c: 254: _delay((unsigned long)((2500)*(32000000/4000.0)));
  4773  0028C4  0E66               	movlw	102
  4774  0028C6  0100               	movlb	0	; () banked
  4775  0028C8  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4776  0028CA  0E76               	movlw	118
  4777  0028CC  0100               	movlb	0	; () banked
  4778  0028CE  6F88               	movwf	??_Distribution& (0+255),b
  4779  0028D0  0EC1               	movlw	193
  4780  0028D2                     u7567:
  4781  0028D2  2EE8               	decfsz	wreg,f,c
  4782  0028D4  D7FE               	bra	u7567
  4783  0028D6  2F88               	decfsz	??_Distribution& (0+255),f,b
  4784  0028D8  D7FC               	bra	u7567
  4785  0028DA  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4786  0028DC  D7FA               	bra	u7567
  4787                           
  4788                           ;sort.c: 257: updateServoPosition(1150, 3);
  4789  0028DE  0E04               	movlw	4
  4790  0028E0  0100               	movlb	0	; () banked
  4791  0028E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4792  0028E4  0E7E               	movlw	126
  4793  0028E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4794  0028E8  0E00               	movlw	0
  4795  0028EA  0100               	movlb	0	; () banked
  4796  0028EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4797  0028EE  0E03               	movlw	3
  4798  0028F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4799  0028F2  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4800                           
  4801                           ;sort.c: 258: _delay((unsigned long)((750)*(32000000/4000.0)));
  4802  0028F6  0E1F               	movlw	31
  4803  0028F8  0100               	movlb	0	; () banked
  4804  0028FA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4805  0028FC  0E71               	movlw	113
  4806  0028FE  0100               	movlb	0	; () banked
  4807  002900  6F88               	movwf	??_Distribution& (0+255),b
  4808  002902  0E1E               	movlw	30
  4809  002904                     u7577:
  4810  002904  2EE8               	decfsz	wreg,f,c
  4811  002906  D7FE               	bra	u7577
  4812  002908  2F88               	decfsz	??_Distribution& (0+255),f,b
  4813  00290A  D7FC               	bra	u7577
  4814  00290C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4815  00290E  D7FA               	bra	u7577
  4816  002910  F000               	nop	
  4817                           
  4818                           ;sort.c: 259: updateServoPosition(1200, 1);
  4819  002912  0E04               	movlw	4
  4820  002914  0100               	movlb	0	; () banked
  4821  002916  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4822  002918  0EB0               	movlw	176
  4823  00291A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4824  00291C  0E00               	movlw	0
  4825  00291E  0100               	movlb	0	; () banked
  4826  002920  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4827  002922  0E01               	movlw	1
  4828  002924  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4829  002926  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4830                           
  4831                           ;sort.c: 260: updateServoPosition(1150, 3);
  4832  00292A  0E04               	movlw	4
  4833  00292C  0100               	movlb	0	; () banked
  4834  00292E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4835  002930  0E7E               	movlw	126
  4836  002932  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4837  002934  0E00               	movlw	0
  4838  002936  0100               	movlb	0	; () banked
  4839  002938  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4840  00293A  0E03               	movlw	3
  4841  00293C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4842  00293E  EC4B  F01F         	call	_updateServoPosition	;wreg free
  4843                           
  4844                           ;sort.c: 262: f_can_coming_to_distribution = 0;
  4845  002942  0E00               	movlw	0
  4846  002944  6E6C               	movwf	_f_can_coming_to_distribution+1,c
  4847  002946  0E00               	movlw	0
  4848  002948  6E6B               	movwf	_f_can_coming_to_distribution,c
  4849                           
  4850                           ;sort.c: 263: f_can_distributed = 1;
  4851  00294A  0E00               	movlw	0
  4852  00294C  0101               	movlb	1	; () banked
  4853  00294E  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  4854  002950  0E01               	movlw	1
  4855  002952  6F2F               	movwf	_f_can_distributed& (0+255),b
  4856                           
  4857                           ; BSR set to: 1
  4858                           ;sort.c: 264: if(f_lastCan == 1){
  4859  002954  046D               	decf	_f_lastCan,w,c
  4860  002956  106E               	iorwf	_f_lastCan+1,w,c
  4861  002958  A4D8               	btfss	status,2,c
  4862  00295A  0012               	return	
  4863                           
  4864                           ; BSR set to: 1
  4865                           ;sort.c: 265: machine_state = DoneSorting_state;
  4866  00295C  0E02               	movlw	2
  4867  00295E  0100               	movlb	0	; () banked
  4868  002960  6FFC               	movwf	_machine_state& (0+255),b
  4869                           
  4870                           ; BSR set to: 0
  4871  002962  0012               	return	
  4872  002964                     __end_of_Distribution:
  4873                           	opt stack 0
  4874                           tblptru	equ	0xFF8
  4875                           tblptrh	equ	0xFF7
  4876                           tblptrl	equ	0xFF6
  4877                           tablat	equ	0xFF5
  4878                           prodh	equ	0xFF4
  4879                           prodl	equ	0xFF3
  4880                           postinc0	equ	0xFEE
  4881                           wreg	equ	0xFE8
  4882                           postdec1	equ	0xFE5
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8
  4890                           
  4891 ;; *************** function _machineConfig *****************
  4892 ;; Defined at:
  4893 ;;		line 15 in file "MachineConfig.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      void 
  4900 ;; Registers used:
  4901 ;;		wreg, status,2
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;Total ram usage:        0 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    7
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_main
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           	psect	text12
  4922  004114                     __ptext12:
  4923                           	opt stack 0
  4924  004114                     _machineConfig:
  4925                           	opt stack 23
  4926                           
  4927                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4928                           
  4929                           ;incstack = 0
  4930  004114  0EF0               	movlw	240
  4931  004116  6ED3               	movwf	4051,c	;volatile
  4932                           
  4933                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4934  004118  8C9B               	bsf	3995,6,c	;volatile
  4935                           
  4936                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4937  00411A  0E07               	movlw	7
  4938  00411C  6E92               	movwf	3986,c	;volatile
  4939                           
  4940                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4941  00411E  0EF2               	movlw	242
  4942  004120  6E93               	movwf	3987,c	;volatile
  4943                           
  4944                           ;MachineConfig.c: 27: TRISC = 0x00;
  4945  004122  0E00               	movlw	0
  4946  004124  6E94               	movwf	3988,c	;volatile
  4947                           
  4948                           ;MachineConfig.c: 31: TRISD = 0x00;
  4949  004126  0E00               	movlw	0
  4950  004128  6E95               	movwf	3989,c	;volatile
  4951                           
  4952                           ;MachineConfig.c: 34: TRISE = 0x00;
  4953  00412A  0E00               	movlw	0
  4954  00412C  6E96               	movwf	3990,c	;volatile
  4955                           
  4956                           ;MachineConfig.c: 37: LATA = 0x00;
  4957  00412E  0E00               	movlw	0
  4958  004130  6E89               	movwf	3977,c	;volatile
  4959                           
  4960                           ;MachineConfig.c: 38: LATB = 0x00;
  4961  004132  0E00               	movlw	0
  4962  004134  6E8A               	movwf	3978,c	;volatile
  4963                           
  4964                           ;MachineConfig.c: 39: LATC = 0x00;
  4965  004136  0E00               	movlw	0
  4966  004138  6E8B               	movwf	3979,c	;volatile
  4967                           
  4968                           ;MachineConfig.c: 40: LATD = 0x00;
  4969  00413A  0E00               	movlw	0
  4970  00413C  6E8C               	movwf	3980,c	;volatile
  4971                           
  4972                           ;MachineConfig.c: 41: LATE = 0x00;
  4973  00413E  0E00               	movlw	0
  4974  004140  6E8D               	movwf	3981,c	;volatile
  4975                           
  4976                           ;MachineConfig.c: 43: nRBPU = 0;
  4977  004142  9EF1               	bcf	intcon2,7,c	;volatile
  4978                           
  4979                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4980  004144  0E00               	movlw	0
  4981  004146  6EC2               	movwf	4034,c	;volatile
  4982                           
  4983                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4984  004148  0E0D               	movlw	13
  4985  00414A  6EC1               	movwf	4033,c	;volatile
  4986                           
  4987                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4988  00414C  0E00               	movlw	0
  4989  00414E  6EB5               	movwf	4021,c	;volatile
  4990                           
  4991                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4992  004150  96B4               	bcf	4020,3,c	;volatile
  4993                           
  4994                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4995  004152  0EB1               	movlw	177
  4996  004154  6EC0               	movwf	4032,c	;volatile
  4997                           
  4998                           ;MachineConfig.c: 55: INT1IE = 1;
  4999  004156  86F0               	bsf	intcon3,3,c	;volatile
  5000                           
  5001                           ;MachineConfig.c: 57: TMR0IE = 1;
  5002  004158  8AF2               	bsf	intcon,5,c	;volatile
  5003                           
  5004                           ;MachineConfig.c: 58: TMR1IE = 1;
  5005  00415A  809D               	bsf	3997,0,c	;volatile
  5006                           
  5007                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5008  00415C  0EB0               	movlw	176
  5009  00415E  6ECD               	movwf	4045,c	;volatile
  5010                           
  5011                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5012  004160  0EB0               	movlw	176
  5013  004162  6EB1               	movwf	4017,c	;volatile
  5014                           
  5015                           ;MachineConfig.c: 61: TMR2IE = 1;
  5016  004164  829D               	bsf	3997,1,c	;volatile
  5017                           
  5018                           ;MachineConfig.c: 62: TMR3IE = 1;
  5019  004166  82A0               	bsf	4000,1,c	;volatile
  5020                           
  5021                           ;MachineConfig.c: 63: PEIE = 1;
  5022  004168  8CF2               	bsf	intcon,6,c	;volatile
  5023                           
  5024                           ;MachineConfig.c: 64: ADIE = 0;
  5025  00416A  9C9D               	bcf	3997,6,c	;volatile
  5026                           
  5027                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5028  00416C  9EF2               	bcf	intcon,7,c	;volatile
  5029  00416E  0012               	return		;funcret
  5030  004170                     __end_of_machineConfig:
  5031                           	opt stack 0
  5032                           tblptru	equ	0xFF8
  5033                           tblptrh	equ	0xFF7
  5034                           tblptrl	equ	0xFF6
  5035                           tablat	equ	0xFF5
  5036                           prodh	equ	0xFF4
  5037                           prodl	equ	0xFF3
  5038                           intcon	equ	0xFF2
  5039                           intcon2	equ	0xFF1
  5040                           intcon3	equ	0xFF0
  5041                           postinc0	equ	0xFEE
  5042                           wreg	equ	0xFE8
  5043                           postdec1	equ	0xFE5
  5044                           fsr1l	equ	0xFE1
  5045                           indf2	equ	0xFDF
  5046                           postinc2	equ	0xFDE
  5047                           postdec2	equ	0xFDD
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function _logRun *****************
  5053 ;; Defined at:
  5054 ;;		line 84 in file "EEPROM.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5059 ;;  i               2   55[BANK0 ] int 
  5060 ;;  num             1   49[BANK0 ] unsigned char 
  5061 ;;  addr            2   57[BANK0 ] unsigned short 
  5062 ;;  byte11          1   54[BANK0 ] unsigned char 
  5063 ;;  byte3           1   52[BANK0 ] unsigned char 
  5064 ;;  byte2           1   51[BANK0 ] unsigned char 
  5065 ;;  byte1           1   50[BANK0 ] unsigned char 
  5066 ;; Return value:  Size  Location     Type
  5067 ;;                  1    wreg      void 
  5068 ;; Registers used:
  5069 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;Total ram usage:       10 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:   11
  5082 ;; This function calls:
  5083 ;;		_EEPROM_read
  5084 ;;		_EEPROM_write
  5085 ;; This function is called by:
  5086 ;;		_main
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text13
  5091  0030A2                     __ptext13:
  5092                           	opt stack 0
  5093  0030A2                     _logRun:
  5094                           	opt stack 19
  5095                           
  5096                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5097                           
  5098                           ;incstack = 0
  5099  0030A2  0E00               	movlw	0
  5100  0030A4  0100               	movlb	0	; () banked
  5101  0030A6  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5102  0030A8  0E00               	movlw	0
  5103  0030AA  6F80               	movwf	EEPROM_read@address& (0+255),b
  5104  0030AC  ECD7  F024         	call	_EEPROM_read	;wreg free
  5105  0030B0  0100               	movlb	0	; () banked
  5106  0030B2  6FFD               	movwf	_sel& (0+255),b
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5110  0030B4  0100               	movlb	0	; () banked
  5111  0030B6  51FD               	movf	_sel& (0+255),w,b
  5112  0030B8  0D0B               	mullw	11
  5113  0030BA  0E01               	movlw	1
  5114  0030BC  24F3               	addwf	prodl,w,c
  5115  0030BE  0100               	movlb	0	; () banked
  5116  0030C0  6FB9               	movwf	logRun@addr& (0+255),b
  5117  0030C2  0E00               	movlw	0
  5118  0030C4  20F4               	addwfc	prodh,w,c
  5119  0030C6  0100               	movlb	0	; () banked
  5120  0030C8  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;EEPROM.c: 101: if (sel < 3){
  5124  0030CA  0E03               	movlw	3
  5125  0030CC  0100               	movlb	0	; () banked
  5126  0030CE  61FD               	cpfslt	_sel& (0+255),b
  5127  0030D0  D00E               	goto	l8234
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5131  0030D2  0100               	movlb	0	; () banked
  5132  0030D4  29FD               	incf	_sel& (0+255),w,b
  5133  0030D6  0100               	movlb	0	; () banked
  5134  0030D8  6FB1               	movwf	logRun@num& (0+255),b
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5138  0030DA  0E00               	movlw	0
  5139  0030DC  0100               	movlb	0	; () banked
  5140  0030DE  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5141  0030E0  0E00               	movlw	0
  5142  0030E2  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5143  0030E4  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5144  0030E8  EC99  F01A         	call	_EEPROM_write	;wreg free
  5145                           
  5146                           ;EEPROM.c: 104: }
  5147  0030EC  D00A               	goto	l8236
  5148  0030EE                     l8234:
  5149                           
  5150                           ;EEPROM.c: 105: else{
  5151                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5152  0030EE  0E00               	movlw	0
  5153  0030F0  0100               	movlb	0	; () banked
  5154  0030F2  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5155  0030F4  0E00               	movlw	0
  5156  0030F6  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5157  0030F8  0E00               	movlw	0
  5158  0030FA  0100               	movlb	0	; () banked
  5159  0030FC  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5160  0030FE  EC99  F01A         	call	_EEPROM_write	;wreg free
  5161  003102                     l8236:
  5162                           
  5163                           ;EEPROM.c: 107: }
  5164                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5165  003102  0100               	movlb	0	; () banked
  5166  003104  51FE               	movf	_count_total& (0+255),w,b
  5167  003106  0980               	iorlw	128
  5168  003108  0100               	movlb	0	; () banked
  5169  00310A  6FB2               	movwf	logRun@byte1& (0+255),b
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5173  00310C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5174  003110  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5175  003114  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5176  003118  EC99  F01A         	call	_EEPROM_write	;wreg free
  5177                           
  5178                           ;EEPROM.c: 112: addr++;
  5179  00311C  0100               	movlb	0	; () banked
  5180  00311E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5181  003120  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5185  003122  385D               	swapf	_count_pop_no_tab,w,c
  5186  003124  0BF0               	andlw	240
  5187  003126  105F               	iorwf	_count_pop_w_tab,w,c
  5188  003128  0100               	movlb	0	; () banked
  5189  00312A  6FB3               	movwf	logRun@byte2& (0+255),b
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5193  00312C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5194  003130  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5195  003134  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5196  003138  EC99  F01A         	call	_EEPROM_write	;wreg free
  5197                           
  5198                           ;EEPROM.c: 117: addr++;
  5199  00313C  0100               	movlb	0	; () banked
  5200  00313E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5201  003140  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5205  003142  0101               	movlb	1	; () banked
  5206  003144  392D               	swapf	_count_can_w_lab& (0+255),w,b
  5207  003146  0BF0               	andlw	240
  5208  003148  0101               	movlb	1	; () banked
  5209  00314A  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  5210  00314C  0100               	movlb	0	; () banked
  5211  00314E  6FB4               	movwf	logRun@byte3& (0+255),b
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5215  003150  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5216  003154  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5217  003158  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5218  00315C  EC99  F01A         	call	_EEPROM_write	;wreg free
  5219                           
  5220                           ;EEPROM.c: 120: addr++;
  5221  003160  0100               	movlb	0	; () banked
  5222  003162  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5223  003164  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5227  003166  0E00               	movlw	0
  5228  003168  0100               	movlb	0	; () banked
  5229  00316A  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5230  00316C  0E00               	movlw	0
  5231  00316E  6FB7               	movwf	logRun@i& (0+255),b
  5232                           
  5233                           ; BSR set to: 0
  5234  003170  0100               	movlb	0	; () banked
  5235  003172  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5236  003174  D008               	goto	l8260
  5237  003176  0100               	movlb	0	; () banked
  5238  003178  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5239  00317A  E128               	bnz	l965
  5240  00317C  0E07               	movlw	7
  5241  00317E  0100               	movlb	0	; () banked
  5242  003180  5DB7               	subwf	logRun@i& (0+255),w,b
  5243  003182  B0D8               	btfsc	status,0,c
  5244  003184  D023               	goto	l965
  5245  003186                     l8260:
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5249  003186  90D8               	bcf	status,0,c
  5250  003188  0100               	movlb	0	; () banked
  5251  00318A  35B7               	rlcf	logRun@i& (0+255),w,b
  5252  00318C  6ED9               	movwf	fsr2l,c
  5253  00318E  0100               	movlb	0	; () banked
  5254  003190  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5255  003192  6EDA               	movwf	fsr2h,c
  5256  003194  0E0E               	movlw	low _startTime
  5257  003196  26D9               	addwf	fsr2l,f,c
  5258  003198  0E01               	movlw	high _startTime
  5259  00319A  22DA               	addwfc	fsr2h,f,c
  5260  00319C  50DF               	movf	indf2,w,c
  5261  00319E  0100               	movlb	0	; () banked
  5262  0031A0  6FB5               	movwf	logRun@byte_i& (0+255),b
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5266  0031A2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5267  0031A6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5268  0031AA  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5269  0031AE  EC99  F01A         	call	_EEPROM_write	;wreg free
  5270                           
  5271                           ;EEPROM.c: 126: addr++;
  5272  0031B2  0100               	movlb	0	; () banked
  5273  0031B4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5274  0031B6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5275                           
  5276                           ; BSR set to: 0
  5277  0031B8  0100               	movlb	0	; () banked
  5278  0031BA  4BB7               	infsnz	logRun@i& (0+255),f,b
  5279  0031BC  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5280                           
  5281                           ; BSR set to: 0
  5282  0031BE  0100               	movlb	0	; () banked
  5283  0031C0  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5284  0031C2  D7E1               	goto	l8260
  5285  0031C4  0100               	movlb	0	; () banked
  5286  0031C6  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5287  0031C8  E101               	bnz	u7210
  5288  0031CA  D7D8               	goto	L4
  5289  0031CC                     u7210:
  5290  0031CC                     l965:
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;EEPROM.c: 127: }
  5294                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5295  0031CC  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5299  0031D0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5300  0031D4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5301  0031D8  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5302  0031DC  EC99  F01A         	call	_EEPROM_write	;wreg free
  5303  0031E0  0012               	return		;funcret
  5304  0031E2                     __end_of_logRun:
  5305                           	opt stack 0
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           intcon2	equ	0xFF1
  5314                           intcon3	equ	0xFF0
  5315                           postinc0	equ	0xFEE
  5316                           wreg	equ	0xFE8
  5317                           postdec1	equ	0xFE5
  5318                           fsr1l	equ	0xFE1
  5319                           indf2	equ	0xFDF
  5320                           postinc2	equ	0xFDE
  5321                           postdec2	equ	0xFDD
  5322                           fsr2h	equ	0xFDA
  5323                           fsr2l	equ	0xFD9
  5324                           status	equ	0xFD8
  5325                           
  5326 ;; *************** function _EEPROM_write *****************
  5327 ;; Defined at:
  5328 ;;		line 32 in file "EEPROM.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  address         2   43[BANK0 ] unsigned short 
  5331 ;;  data            1   45[BANK0 ] unsigned char 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  i               1   48[BANK0 ] unsigned char 
  5334 ;;  i               1   47[BANK0 ] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      void 
  5337 ;; Registers used:
  5338 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5344 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;Total ram usage:        6 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:   10
  5351 ;; This function calls:
  5352 ;;		_EEPROM_read
  5353 ;;		_lcdInst
  5354 ;;		_printf
  5355 ;; This function is called by:
  5356 ;;		_Loading
  5357 ;;		_logRun
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           	psect	text14
  5362  003532                     __ptext14:
  5363                           	opt stack 0
  5364  003532                     _EEPROM_write:
  5365                           	opt stack 18
  5366                           
  5367                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5368                           
  5369                           ;incstack = 0
  5370  003532  84A6               	bsf	4006,2,c	;volatile
  5371                           
  5372                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5373  003534  0100               	movlb	0	; () banked
  5374  003536  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5375  003538  6EAA               	movwf	4010,c	;volatile
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5379  00353A  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;EEPROM.c: 39: EEDATA = data;
  5383  00353E  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5387  003542  9EA6               	bcf	4006,7,c	;volatile
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5391  003544  9CA6               	bcf	4006,6,c	;volatile
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5395  003546  9EF2               	bcf	intcon,7,c	;volatile
  5396                           
  5397                           ;EEPROM.c: 45: EECON2 = 0x55;
  5398  003548  0E55               	movlw	85
  5399  00354A  6EA7               	movwf	4007,c	;volatile
  5400                           
  5401                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5402  00354C  0EAA               	movlw	170
  5403  00354E  6EA7               	movwf	4007,c	;volatile
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5407  003550  82A6               	bsf	4006,1,c	;volatile
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5411  003552  8EF2               	bsf	intcon,7,c	;volatile
  5412  003554                     l943:
  5413  003554  A8A1               	btfss	4001,4,c	;volatile
  5414  003556  D7FE               	goto	l943
  5415                           
  5416                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5417  003558  98A1               	bcf	4001,4,c	;volatile
  5418                           
  5419                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5420  00355A  94A6               	bcf	4006,2,c	;volatile
  5421                           
  5422                           ;EEPROM.c: 57: if(debug){
  5423  00355C  5061               	movf	_debug,w,c
  5424  00355E  1062               	iorwf	_debug+1,w,c
  5425  003560  B4D8               	btfsc	status,2,c
  5426  003562  0012               	return	
  5427                           
  5428                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5429  003564  0E01               	movlw	1
  5430  003566  EC14  F025         	call	_lcdInst
  5431  00356A  0E68               	movlw	104
  5432  00356C  0100               	movlb	0	; () banked
  5433  00356E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5434  003570  0EE4               	movlw	228
  5435  003572                     u7587:
  5436  003572  2EE8               	decfsz	wreg,f,c
  5437  003574  D7FE               	bra	u7587
  5438  003576  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5439  003578  D7FC               	bra	u7587
  5440  00357A  F000               	nop	
  5441                           
  5442                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5443  00357C  0E80               	movlw	128
  5444  00357E  EC14  F025         	call	_lcdInst
  5445                           
  5446                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5447  003582  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5448  003586  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5449  00358A  ECD7  F024         	call	_EEPROM_read	;wreg free
  5450  00358E  0100               	movlb	0	; () banked
  5451  003590  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5452  003592  A4D8               	btfss	status,2,c
  5453  003594  D024               	goto	l6232
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5457  003596  0E34               	movlw	low STR_66
  5458  003598  0100               	movlb	0	; () banked
  5459  00359A  6F8E               	movwf	printf@f& (0+255),b
  5460  00359C  0EFB               	movlw	high STR_66
  5461  00359E  0100               	movlb	0	; () banked
  5462  0035A0  6F8F               	movwf	(printf@f+1)& (0+255),b
  5463  0035A2  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5464  0035A6  0100               	movlb	0	; () banked
  5465  0035A8  6B91               	clrf	(?_printf+3)& (0+255),b
  5466  0035AA  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5467  0035AE  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5468  0035B2  ECB8  F008         	call	_printf	;wreg free
  5469                           
  5470                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5471  0035B6  0E00               	movlw	0
  5472  0035B8  0100               	movlb	0	; () banked
  5473  0035BA  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5474  0035BC                     l6224:
  5475                           
  5476                           ; BSR set to: 0
  5477  0035BC  0E63               	movlw	99
  5478  0035BE  0100               	movlb	0	; () banked
  5479  0035C0  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5480  0035C2  D001               	goto	l6228
  5481  0035C4  0012               	return	
  5482  0035C6                     l6228:
  5483                           
  5484                           ; BSR set to: 0
  5485  0035C6  0E68               	movlw	104
  5486  0035C8  0100               	movlb	0	; () banked
  5487  0035CA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5488  0035CC  0EE4               	movlw	228
  5489  0035CE                     u7597:
  5490  0035CE  2EE8               	decfsz	wreg,f,c
  5491  0035D0  D7FE               	bra	u7597
  5492  0035D2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5493  0035D4  D7FC               	bra	u7597
  5494  0035D6  F000               	nop	
  5495  0035D8  0100               	movlb	0	; () banked
  5496  0035DA  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5497  0035DC  D7EF               	goto	l6224
  5498  0035DE                     l6232:
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5502  0035DE  0EBD               	movlw	low STR_67
  5503  0035E0  0100               	movlb	0	; () banked
  5504  0035E2  6F8E               	movwf	printf@f& (0+255),b
  5505  0035E4  0EFF               	movlw	high STR_67
  5506  0035E6  0100               	movlb	0	; () banked
  5507  0035E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5508  0035EA  ECB8  F008         	call	_printf	;wreg free
  5509  0035EE  0E00               	movlw	0
  5510  0035F0  0100               	movlb	0	; () banked
  5511  0035F2  6FB0               	movwf	EEPROM_write@i_1330& (0+255),b
  5512  0035F4                     l6236:
  5513                           
  5514                           ; BSR set to: 0
  5515  0035F4  0E63               	movlw	99
  5516  0035F6  0100               	movlb	0	; () banked
  5517  0035F8  65B0               	cpfsgt	EEPROM_write@i_1330& (0+255),b
  5518  0035FA  D001               	goto	l6240
  5519  0035FC  0012               	return	
  5520  0035FE                     l6240:
  5521                           
  5522                           ; BSR set to: 0
  5523  0035FE  0E68               	movlw	104
  5524  003600  0100               	movlb	0	; () banked
  5525  003602  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5526  003604  0EE4               	movlw	228
  5527  003606                     u7607:
  5528  003606  2EE8               	decfsz	wreg,f,c
  5529  003608  D7FE               	bra	u7607
  5530  00360A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5531  00360C  D7FC               	bra	u7607
  5532  00360E  F000               	nop	
  5533  003610  0100               	movlb	0	; () banked
  5534  003612  2BB0               	incf	EEPROM_write@i_1330& (0+255),f,b
  5535  003614  D7EF               	goto	l6236
  5536  003616                     __end_of_EEPROM_write:
  5537                           	opt stack 0
  5538                           tblptru	equ	0xFF8
  5539                           tblptrh	equ	0xFF7
  5540                           tblptrl	equ	0xFF6
  5541                           tablat	equ	0xFF5
  5542                           prodh	equ	0xFF4
  5543                           prodl	equ	0xFF3
  5544                           intcon	equ	0xFF2
  5545                           intcon2	equ	0xFF1
  5546                           intcon3	equ	0xFF0
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1l	equ	0xFE1
  5551                           indf2	equ	0xFDF
  5552                           postinc2	equ	0xFDE
  5553                           postdec2	equ	0xFDD
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _EEPROM_read *****************
  5559 ;; Defined at:
  5560 ;;		line 68 in file "EEPROM.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  address         2    0[BANK0 ] unsigned short 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      unsigned char 
  5567 ;; Registers used:
  5568 ;;		wreg, status,2
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5574 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;Total ram usage:        2 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    7
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_Loading
  5585 ;;		_EEPROM_write
  5586 ;;		_logRun
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text15
  5591  0049AE                     __ptext15:
  5592                           	opt stack 0
  5593  0049AE                     _EEPROM_read:
  5594                           	opt stack 20
  5595                           
  5596                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5597                           
  5598                           ;incstack = 0
  5599  0049AE  0100               	movlb	0	; () banked
  5600  0049B0  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5601  0049B2  6EAA               	movwf	4010,c	;volatile
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5605  0049B4  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5609  0049B8  9EA6               	bcf	4006,7,c	;volatile
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5613  0049BA  9CA6               	bcf	4006,6,c	;volatile
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5617  0049BC  80A6               	bsf	4006,0,c	;volatile
  5618  0049BE                     l956:
  5619  0049BE  B0A6               	btfsc	4006,0,c	;volatile
  5620  0049C0  D7FE               	goto	l956
  5621                           
  5622                           ;EEPROM.c: 81: return EEDATA;
  5623  0049C2  50A8               	movf	4008,w,c	;volatile
  5624  0049C4  0012               	return	
  5625  0049C6                     __end_of_EEPROM_read:
  5626                           	opt stack 0
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           prodh	equ	0xFF4
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           intcon2	equ	0xFF1
  5635                           intcon3	equ	0xFF0
  5636                           postinc0	equ	0xFEE
  5637                           wreg	equ	0xFE8
  5638                           postdec1	equ	0xFE5
  5639                           fsr1l	equ	0xFE1
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           postdec2	equ	0xFDD
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function _initUI *****************
  5648 ;; Defined at:
  5649 ;;		line 62 in file "UI.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;		None
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;		None
  5654 ;; Return value:  Size  Location     Type
  5655 ;;                  1    wreg      void 
  5656 ;; Registers used:
  5657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5667 ;;Total ram usage:        0 bytes
  5668 ;; Hardware stack levels used:    1
  5669 ;; Hardware stack levels required when called:   12
  5670 ;; This function calls:
  5671 ;;		_change_state_to_menu_start
  5672 ;;		_loadRTC
  5673 ;; This function is called by:
  5674 ;;		_main
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text16
  5679  004780                     __ptext16:
  5680                           	opt stack 0
  5681  004780                     _initUI:
  5682                           	opt stack 18
  5683                           
  5684                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5685                           
  5686                           ;incstack = 0
  5687  004780  8EF2               	bsf	intcon,7,c	;volatile
  5688                           
  5689                           ;UI.c: 64: machine_state = UI_state;
  5690  004782  0E00               	movlw	0
  5691  004784  0100               	movlb	0	; () banked
  5692  004786  6FFC               	movwf	_machine_state& (0+255),b
  5693                           
  5694                           ;UI.c: 65: logstate = 0;
  5695  004788  0E00               	movlw	0
  5696  00478A  0100               	movlb	0	; () banked
  5697  00478C  6FF7               	movwf	(_logstate+1)& (0+255),b
  5698  00478E  0E00               	movlw	0
  5699  004790  6FF6               	movwf	_logstate& (0+255),b
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;UI.c: 67: if(RTCflag){
  5703  004792  0100               	movlb	0	; () banked
  5704  004794  51E2               	movf	_RTCflag& (0+255),w,b
  5705  004796  0100               	movlb	0	; () banked
  5706  004798  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  5707  00479A  A4D8               	btfss	status,2,c
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;UI.c: 68: loadRTC();
  5711  00479C  EC02  F01E         	call	_loadRTC	;wreg free
  5712                           
  5713                           ;UI.c: 69: }
  5714                           ;UI.c: 71: change_state_to_menu_start();
  5715  0047A0  EC05  F024         	call	_change_state_to_menu_start	;wreg free
  5716                           
  5717                           ;UI.c: 72: firstboot = 1;
  5718  0047A4  0E00               	movlw	0
  5719  0047A6  6E72               	movwf	_firstboot+1,c
  5720  0047A8  0E01               	movlw	1
  5721  0047AA  6E71               	movwf	_firstboot,c
  5722  0047AC  0012               	return		;funcret
  5723  0047AE                     __end_of_initUI:
  5724                           	opt stack 0
  5725                           tblptru	equ	0xFF8
  5726                           tblptrh	equ	0xFF7
  5727                           tblptrl	equ	0xFF6
  5728                           tablat	equ	0xFF5
  5729                           prodh	equ	0xFF4
  5730                           prodl	equ	0xFF3
  5731                           intcon	equ	0xFF2
  5732                           intcon2	equ	0xFF1
  5733                           intcon3	equ	0xFF0
  5734                           postinc0	equ	0xFEE
  5735                           wreg	equ	0xFE8
  5736                           postdec1	equ	0xFE5
  5737                           fsr1l	equ	0xFE1
  5738                           indf2	equ	0xFDF
  5739                           postinc2	equ	0xFDE
  5740                           postdec2	equ	0xFDD
  5741                           fsr2h	equ	0xFDA
  5742                           fsr2l	equ	0xFD9
  5743                           status	equ	0xFD8
  5744                           
  5745 ;; *************** function _loadRTC *****************
  5746 ;; Defined at:
  5747 ;;		line 28 in file "RTC.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;		None
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;  i               2   22[BANK0 ] int 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5764 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5765 ;;Total ram usage:        3 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    9
  5768 ;; This function calls:
  5769 ;;		_I2C_Master_Init
  5770 ;;		_I2C_Master_Start
  5771 ;;		_I2C_Master_Stop
  5772 ;;		_I2C_Master_Write
  5773 ;; This function is called by:
  5774 ;;		_initUI
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           	psect	text17
  5779  003C04                     __ptext17:
  5780                           	opt stack 0
  5781  003C04                     _loadRTC:
  5782                           	opt stack 20
  5783                           
  5784                           ;RTC.c: 30: I2C_Master_Init(10000);
  5785                           
  5786                           ;incstack = 0
  5787  003C04  0E10               	movlw	16
  5788  003C06  0100               	movlb	0	; () banked
  5789  003C08  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5790  003C0A  0E27               	movlw	39
  5791  003C0C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5792  003C0E  0E00               	movlw	0
  5793  003C10  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5794  003C12  0E00               	movlw	0
  5795  003C14  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5796  003C16  EC5A  F020         	call	_I2C_Master_Init	;wreg free
  5797                           
  5798                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5799  003C1A  9EF2               	bcf	intcon,7,c	;volatile
  5800                           
  5801                           ;RTC.c: 34: I2C_Master_Start();
  5802  003C1C  EC3A  F025         	call	_I2C_Master_Start	;wreg free
  5803                           
  5804                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5805  003C20  0E00               	movlw	0
  5806  003C22  0100               	movlb	0	; () banked
  5807  003C24  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5808  003C26  0ED0               	movlw	208
  5809  003C28  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5810  003C2A  EC28  F025         	call	_I2C_Master_Write	;wreg free
  5811                           
  5812                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5813  003C2E  0E00               	movlw	0
  5814  003C30  0100               	movlb	0	; () banked
  5815  003C32  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5816  003C34  0E00               	movlw	0
  5817  003C36  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5818  003C38  EC28  F025         	call	_I2C_Master_Write	;wreg free
  5819                           
  5820                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5821  003C3C  0E00               	movlw	0
  5822  003C3E  0100               	movlb	0	; () banked
  5823  003C40  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5824  003C42  0E00               	movlw	0
  5825  003C44  6F96               	movwf	loadRTC@i& (0+255),b
  5826  003C46                     l6366:
  5827                           
  5828                           ; BSR set to: 0
  5829  003C46  0100               	movlb	0	; () banked
  5830  003C48  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5831  003C4A  D008               	goto	l6370
  5832  003C4C  0100               	movlb	0	; () banked
  5833  003C4E  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5834  003C50  E11B               	bnz	l6376
  5835  003C52  0E07               	movlw	7
  5836  003C54  0100               	movlb	0	; () banked
  5837  003C56  5D96               	subwf	loadRTC@i& (0+255),w,b
  5838  003C58  B0D8               	btfsc	status,0,c
  5839  003C5A  D016               	goto	l6376
  5840  003C5C                     l6370:
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5844  003C5C  0E24               	movlw	low _time
  5845  003C5E  0100               	movlb	0	; () banked
  5846  003C60  2596               	addwf	loadRTC@i& (0+255),w,b
  5847  003C62  6ED9               	movwf	fsr2l,c
  5848  003C64  0E01               	movlw	high _time
  5849  003C66  0100               	movlb	0	; () banked
  5850  003C68  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5851  003C6A  6EDA               	movwf	fsr2h,c
  5852  003C6C  50DF               	movf	indf2,w,c
  5853  003C6E  0100               	movlb	0	; () banked
  5854  003C70  6F95               	movwf	??_loadRTC& (0+255),b
  5855  003C72  0100               	movlb	0	; () banked
  5856  003C74  5195               	movf	??_loadRTC& (0+255),w,b
  5857  003C76  0100               	movlb	0	; () banked
  5858  003C78  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5859  003C7A  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5860  003C7C  EC28  F025         	call	_I2C_Master_Write	;wreg free
  5861  003C80  0100               	movlb	0	; () banked
  5862  003C82  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5863  003C84  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5864  003C86  D7DF               	goto	l6366
  5865  003C88                     l6376:
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;RTC.c: 39: }
  5869                           ;RTC.c: 40: I2C_Master_Stop();
  5870  003C88  EC36  F025         	call	_I2C_Master_Stop	;wreg free
  5871                           
  5872                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5873  003C8C  8EF2               	bsf	intcon,7,c	;volatile
  5874  003C8E  0012               	return		;funcret
  5875  003C90                     __end_of_loadRTC:
  5876                           	opt stack 0
  5877                           tblptru	equ	0xFF8
  5878                           tblptrh	equ	0xFF7
  5879                           tblptrl	equ	0xFF6
  5880                           tablat	equ	0xFF5
  5881                           prodh	equ	0xFF4
  5882                           prodl	equ	0xFF3
  5883                           intcon	equ	0xFF2
  5884                           intcon2	equ	0xFF1
  5885                           intcon3	equ	0xFF0
  5886                           postinc0	equ	0xFEE
  5887                           wreg	equ	0xFE8
  5888                           postdec1	equ	0xFE5
  5889                           fsr1l	equ	0xFE1
  5890                           indf2	equ	0xFDF
  5891                           postinc2	equ	0xFDE
  5892                           postdec2	equ	0xFDD
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function _I2C_Master_Init *****************
  5898 ;; Defined at:
  5899 ;;		line 15 in file "I2C.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  c               4   13[BANK0 ] const unsigned long 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;		None
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  1    wreg      void 
  5906 ;; Registers used:
  5907 ;;		wreg, status,2, status,0, cstack
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5913 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;Total ram usage:        8 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    8
  5920 ;; This function calls:
  5921 ;;		___lldiv
  5922 ;; This function is called by:
  5923 ;;		_main
  5924 ;;		_loadRTC
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text18
  5929  0040B4                     __ptext18:
  5930                           	opt stack 0
  5931  0040B4                     _I2C_Master_Init:
  5932                           	opt stack 20
  5933                           
  5934                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5935                           
  5936                           ;incstack = 0
  5937  0040B4  0E00               	movlw	0
  5938  0040B6  6EC7               	movwf	4039,c	;volatile
  5939                           
  5940                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5941  0040B8  0E28               	movlw	40
  5942  0040BA  6EC6               	movwf	4038,c	;volatile
  5943                           
  5944                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5945  0040BC  0E00               	movlw	0
  5946  0040BE  6EC5               	movwf	4037,c	;volatile
  5947                           
  5948                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5949  0040C0  0E00               	movlw	0
  5950  0040C2  0100               	movlb	0	; () banked
  5951  0040C4  6F80               	movwf	___lldiv@dividend& (0+255),b
  5952  0040C6  0E48               	movlw	72
  5953  0040C8  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5954  0040CA  0EE8               	movlw	232
  5955  0040CC  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5956  0040CE  0E01               	movlw	1
  5957  0040D0  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5958  0040D2  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5959  0040D6  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5960  0040DA  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5961  0040DE  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5962  0040E2  0E02               	movlw	2
  5963  0040E4                     u4655:
  5964  0040E4  90D8               	bcf	status,0,c
  5965  0040E6  0100               	movlb	0	; () banked
  5966  0040E8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5967  0040EA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5968  0040EC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5969  0040EE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5970  0040F0  2EE8               	decfsz	wreg,f,c
  5971  0040F2  D7F8               	goto	u4655
  5972  0040F4  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5973  0040F8  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5974  0040FC  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5975  004100  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5976  004104  ECFE  F01C         	call	___lldiv	;wreg free
  5977  004108  0100               	movlb	0	; () banked
  5978  00410A  0580               	decf	?___lldiv& (0+255),w,b
  5979  00410C  6EC8               	movwf	4040,c	;volatile
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;I2C.c: 22: TRISC3 = 1;
  5983  00410E  8694               	bsf	3988,3,c	;volatile
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;I2C.c: 23: TRISC4 = 1;
  5987  004110  8894               	bsf	3988,4,c	;volatile
  5988                           
  5989                           ; BSR set to: 0
  5990  004112  0012               	return		;funcret
  5991  004114                     __end_of_I2C_Master_Init:
  5992                           	opt stack 0
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           intcon	equ	0xFF2
  6000                           intcon2	equ	0xFF1
  6001                           intcon3	equ	0xFF0
  6002                           postinc0	equ	0xFEE
  6003                           wreg	equ	0xFE8
  6004                           postdec1	equ	0xFE5
  6005                           fsr1l	equ	0xFE1
  6006                           indf2	equ	0xFDF
  6007                           postinc2	equ	0xFDE
  6008                           postdec2	equ	0xFDD
  6009                           fsr2h	equ	0xFDA
  6010                           fsr2l	equ	0xFD9
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function ___lldiv *****************
  6014 ;; Defined at:
  6015 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  dividend        4    0[BANK0 ] unsigned long 
  6018 ;;  divisor         4    4[BANK0 ] unsigned long 
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  quotient        4    8[BANK0 ] unsigned long 
  6021 ;;  counter         1   12[BANK0 ] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  4    0[BANK0 ] unsigned long 
  6024 ;; Registers used:
  6025 ;;		wreg, status,2, status,0
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6031 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;Total ram usage:       13 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    7
  6038 ;; This function calls:
  6039 ;;		Nothing
  6040 ;; This function is called by:
  6041 ;;		_I2C_Master_Init
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           	psect	text19
  6046  0039FC                     __ptext19:
  6047                           	opt stack 0
  6048  0039FC                     ___lldiv:
  6049                           	opt stack 20
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;incstack = 0
  6053  0039FC  0E00               	movlw	0
  6054  0039FE  0100               	movlb	0	; () banked
  6055  003A00  6F88               	movwf	___lldiv@quotient& (0+255),b
  6056  003A02  0E00               	movlw	0
  6057  003A04  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6058  003A06  0E00               	movlw	0
  6059  003A08  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6060  003A0A  0E00               	movlw	0
  6061  003A0C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6062                           
  6063                           ; BSR set to: 0
  6064  003A0E  0100               	movlb	0	; () banked
  6065  003A10  5184               	movf	___lldiv@divisor& (0+255),w,b
  6066  003A12  0100               	movlb	0	; () banked
  6067  003A14  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6068  003A16  0100               	movlb	0	; () banked
  6069  003A18  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6070  003A1A  0100               	movlb	0	; () banked
  6071  003A1C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6072  003A1E  B4D8               	btfsc	status,2,c
  6073  003A20  D042               	goto	l1708
  6074                           
  6075                           ; BSR set to: 0
  6076  003A22  0E01               	movlw	1
  6077  003A24  0100               	movlb	0	; () banked
  6078  003A26  6F8C               	movwf	___lldiv@counter& (0+255),b
  6079  003A28  D008               	goto	l5802
  6080  003A2A                     l5800:
  6081                           
  6082                           ; BSR set to: 0
  6083  003A2A  0100               	movlb	0	; () banked
  6084  003A2C  90D8               	bcf	status,0,c
  6085  003A2E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6086  003A30  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6087  003A32  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6088  003A34  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6089  003A36  0100               	movlb	0	; () banked
  6090  003A38  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6091  003A3A                     l5802:
  6092                           
  6093                           ; BSR set to: 0
  6094  003A3A  0100               	movlb	0	; () banked
  6095  003A3C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6096  003A3E  D7F5               	goto	l5800
  6097  003A40                     l5804:
  6098                           
  6099                           ; BSR set to: 0
  6100  003A40  0100               	movlb	0	; () banked
  6101  003A42  90D8               	bcf	status,0,c
  6102  003A44  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6103  003A46  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6104  003A48  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6105  003A4A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6106                           
  6107                           ; BSR set to: 0
  6108  003A4C  0100               	movlb	0	; () banked
  6109  003A4E  5184               	movf	___lldiv@divisor& (0+255),w,b
  6110  003A50  0100               	movlb	0	; () banked
  6111  003A52  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6112  003A54  0100               	movlb	0	; () banked
  6113  003A56  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6114  003A58  0100               	movlb	0	; () banked
  6115  003A5A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6116  003A5C  0100               	movlb	0	; () banked
  6117  003A5E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6118  003A60  0100               	movlb	0	; () banked
  6119  003A62  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6120  003A64  0100               	movlb	0	; () banked
  6121  003A66  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6122  003A68  0100               	movlb	0	; () banked
  6123  003A6A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6124  003A6C  A0D8               	btfss	status,0,c
  6125  003A6E  D012               	goto	l5812
  6126                           
  6127                           ; BSR set to: 0
  6128  003A70  0100               	movlb	0	; () banked
  6129  003A72  5184               	movf	___lldiv@divisor& (0+255),w,b
  6130  003A74  0100               	movlb	0	; () banked
  6131  003A76  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6132  003A78  0100               	movlb	0	; () banked
  6133  003A7A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6134  003A7C  0100               	movlb	0	; () banked
  6135  003A7E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6136  003A80  0100               	movlb	0	; () banked
  6137  003A82  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6138  003A84  0100               	movlb	0	; () banked
  6139  003A86  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6140  003A88  0100               	movlb	0	; () banked
  6141  003A8A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6142  003A8C  0100               	movlb	0	; () banked
  6143  003A8E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6144                           
  6145                           ; BSR set to: 0
  6146  003A90  0100               	movlb	0	; () banked
  6147  003A92  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6148  003A94                     l5812:
  6149                           
  6150                           ; BSR set to: 0
  6151  003A94  0100               	movlb	0	; () banked
  6152  003A96  90D8               	bcf	status,0,c
  6153  003A98  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6154  003A9A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6155  003A9C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6156  003A9E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6157                           
  6158                           ; BSR set to: 0
  6159  003AA0  0100               	movlb	0	; () banked
  6160  003AA2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6161  003AA4  D7CD               	goto	l5804
  6162  003AA6                     l1708:
  6163                           
  6164                           ; BSR set to: 0
  6165  003AA6  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6166  003AAA  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6167  003AAE  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6168  003AB2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6169                           
  6170                           ; BSR set to: 0
  6171  003AB6  0012               	return		;funcret
  6172  003AB8                     __end_of___lldiv:
  6173                           	opt stack 0
  6174                           tblptru	equ	0xFF8
  6175                           tblptrh	equ	0xFF7
  6176                           tblptrl	equ	0xFF6
  6177                           tablat	equ	0xFF5
  6178                           prodh	equ	0xFF4
  6179                           prodl	equ	0xFF3
  6180                           intcon	equ	0xFF2
  6181                           intcon2	equ	0xFF1
  6182                           intcon3	equ	0xFF0
  6183                           postinc0	equ	0xFEE
  6184                           wreg	equ	0xFE8
  6185                           postdec1	equ	0xFE5
  6186                           fsr1l	equ	0xFE1
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _change_state_to_menu_start *****************
  6195 ;; Defined at:
  6196 ;;		line 474 in file "UI.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;		None
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;Total ram usage:        0 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:   11
  6217 ;; This function calls:
  6218 ;;		_lcdInst
  6219 ;;		_printRTC
  6220 ;;		_printf
  6221 ;; This function is called by:
  6222 ;;		_initUI
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text20
  6227  00480A                     __ptext20:
  6228                           	opt stack 0
  6229  00480A                     _change_state_to_menu_start:
  6230                           	opt stack 18
  6231                           
  6232                           ;UI.c: 475: cur_state = 0;
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;incstack = 0
  6236  00480A  0E00               	movlw	0
  6237  00480C  0100               	movlb	0	; () banked
  6238  00480E  6FE7               	movwf	(_cur_state+1)& (0+255),b
  6239  004810  0E00               	movlw	0
  6240  004812  6FE6               	movwf	_cur_state& (0+255),b
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;UI.c: 477: lcdInst(0b10000000);;
  6244  004814  0E80               	movlw	128
  6245  004816  EC14  F025         	call	_lcdInst
  6246                           
  6247                           ;UI.c: 478: printRTC();
  6248  00481A  ECCC  F00F         	call	_printRTC	;wreg free
  6249                           
  6250                           ;UI.c: 479: lcdInst(0b11000000);;
  6251  00481E  0EC0               	movlw	192
  6252  004820  EC14  F025         	call	_lcdInst
  6253                           
  6254                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6255  004824  0EF7               	movlw	low STR_30
  6256  004826  0100               	movlb	0	; () banked
  6257  004828  6F8E               	movwf	printf@f& (0+255),b
  6258  00482A  0EFD               	movlw	high STR_30
  6259  00482C  0100               	movlb	0	; () banked
  6260  00482E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6261  004830  ECB8  F008         	call	_printf	;wreg free
  6262  004834  0012               	return		;funcret
  6263  004836                     __end_of_change_state_to_menu_start:
  6264                           	opt stack 0
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           intcon	equ	0xFF2
  6272                           intcon2	equ	0xFF1
  6273                           intcon3	equ	0xFF0
  6274                           postinc0	equ	0xFEE
  6275                           wreg	equ	0xFE8
  6276                           postdec1	equ	0xFE5
  6277                           fsr1l	equ	0xFE1
  6278                           indf2	equ	0xFDF
  6279                           postinc2	equ	0xFDE
  6280                           postdec2	equ	0xFDD
  6281                           fsr2h	equ	0xFDA
  6282                           fsr2l	equ	0xFD9
  6283                           status	equ	0xFD8
  6284                           
  6285 ;; *************** function _initTime *****************
  6286 ;; Defined at:
  6287 ;;		line 17 in file "RTC.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;  s               1    wreg     unsigned char 
  6290 ;;  m               1    0[BANK0 ] unsigned char 
  6291 ;;  h               1    1[BANK0 ] unsigned char 
  6292 ;;  w               1    2[BANK0 ] unsigned char 
  6293 ;;  DD              1    3[BANK0 ] unsigned char 
  6294 ;;  MM              1    4[BANK0 ] unsigned char 
  6295 ;;  YY              1    5[BANK0 ] unsigned char 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  s               1    6[BANK0 ] unsigned char 
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      void 
  6300 ;; Registers used:
  6301 ;;		wreg
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6307 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;Total ram usage:        7 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; Hardware stack levels required when called:    7
  6314 ;; This function calls:
  6315 ;;		Nothing
  6316 ;; This function is called by:
  6317 ;;		_main
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321                           	psect	text21
  6322  00496E                     __ptext21:
  6323                           	opt stack 0
  6324  00496E                     _initTime:
  6325                           	opt stack 23
  6326                           
  6327                           ;incstack = 0
  6328                           ;initTime@s stored from wreg
  6329  00496E  0100               	movlb	0	; () banked
  6330  004970  6F86               	movwf	initTime@s& (0+255),b
  6331                           
  6332                           ;RTC.c: 19: time[0] = s;
  6333  004972  C086  F124         	movff	initTime@s,_time
  6334                           
  6335                           ;RTC.c: 20: time[1] = m;
  6336  004976  C080  F125         	movff	initTime@m,_time+1
  6337                           
  6338                           ;RTC.c: 21: time[2] = h;
  6339  00497A  C081  F126         	movff	initTime@h,_time+2
  6340                           
  6341                           ;RTC.c: 22: time[3] = w;
  6342  00497E  C082  F127         	movff	initTime@w,_time+3
  6343                           
  6344                           ;RTC.c: 23: time[4] = DD;
  6345  004982  C083  F128         	movff	initTime@DD,_time+4
  6346                           
  6347                           ;RTC.c: 24: time[5] = MM;
  6348  004986  C084  F129         	movff	initTime@MM,_time+5
  6349                           
  6350                           ;RTC.c: 25: time[6] = YY;
  6351  00498A  C085  F12A         	movff	initTime@YY,_time+6
  6352  00498E  0012               	return		;funcret
  6353  004990                     __end_of_initTime:
  6354                           	opt stack 0
  6355                           tblptru	equ	0xFF8
  6356                           tblptrh	equ	0xFF7
  6357                           tblptrl	equ	0xFF6
  6358                           tablat	equ	0xFF5
  6359                           prodh	equ	0xFF4
  6360                           prodl	equ	0xFF3
  6361                           intcon	equ	0xFF2
  6362                           intcon2	equ	0xFF1
  6363                           intcon3	equ	0xFF0
  6364                           postinc0	equ	0xFEE
  6365                           wreg	equ	0xFE8
  6366                           postdec1	equ	0xFE5
  6367                           fsr1l	equ	0xFE1
  6368                           indf2	equ	0xFDF
  6369                           postinc2	equ	0xFDE
  6370                           postdec2	equ	0xFDD
  6371                           fsr2h	equ	0xFDA
  6372                           fsr2l	equ	0xFD9
  6373                           status	equ	0xFD8
  6374                           
  6375 ;; *************** function _initLCD *****************
  6376 ;; Defined at:
  6377 ;;		line 48 in file "lcd.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;		None
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;		None
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  1    wreg      void 
  6384 ;; Registers used:
  6385 ;;		wreg, status,2, status,0, cstack
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;Total ram usage:        1 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    9
  6398 ;; This function calls:
  6399 ;;		_lcdInst
  6400 ;; This function is called by:
  6401 ;;		_main
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text22
  6406  004408                     __ptext22:
  6407                           	opt stack 0
  6408  004408                     _initLCD:
  6409                           	opt stack 21
  6410                           
  6411                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6412                           
  6413                           ;incstack = 0
  6414  004408  0E9C               	movlw	156
  6415  00440A  0100               	movlb	0	; () banked
  6416  00440C  6F83               	movwf	??_initLCD& (0+255),b
  6417  00440E  0ED7               	movlw	215
  6418  004410                     u7617:
  6419  004410  2EE8               	decfsz	wreg,f,c
  6420  004412  D7FE               	bra	u7617
  6421  004414  2F83               	decfsz	??_initLCD& (0+255),f,b
  6422  004416  D7FC               	bra	u7617
  6423                           
  6424                           ;lcd.c: 50: lcdInst(0b00110011);
  6425  004418  0E33               	movlw	51
  6426  00441A  EC14  F025         	call	_lcdInst
  6427                           
  6428                           ;lcd.c: 51: lcdInst(0b00110010);
  6429  00441E  0E32               	movlw	50
  6430  004420  EC14  F025         	call	_lcdInst
  6431                           
  6432                           ;lcd.c: 53: lcdInst(0b00101000);
  6433  004424  0E28               	movlw	40
  6434  004426  EC14  F025         	call	_lcdInst
  6435                           
  6436                           ;lcd.c: 54: lcdInst(0b00001100);
  6437  00442A  0E0C               	movlw	12
  6438  00442C  EC14  F025         	call	_lcdInst
  6439                           
  6440                           ;lcd.c: 55: lcdInst(0b00000110);
  6441  004430  0E06               	movlw	6
  6442  004432  EC14  F025         	call	_lcdInst
  6443                           
  6444                           ;lcd.c: 56: lcdInst(0b00000001);
  6445  004436  0E01               	movlw	1
  6446  004438  EC14  F025         	call	_lcdInst
  6447                           
  6448                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6449  00443C  0E9C               	movlw	156
  6450  00443E  0100               	movlb	0	; () banked
  6451  004440  6F83               	movwf	??_initLCD& (0+255),b
  6452  004442  0ED7               	movlw	215
  6453  004444                     u7627:
  6454  004444  2EE8               	decfsz	wreg,f,c
  6455  004446  D7FE               	bra	u7627
  6456  004448  2F83               	decfsz	??_initLCD& (0+255),f,b
  6457  00444A  D7FC               	bra	u7627
  6458  00444C  0012               	return		;funcret
  6459  00444E                     __end_of_initLCD:
  6460                           	opt stack 0
  6461                           tblptru	equ	0xFF8
  6462                           tblptrh	equ	0xFF7
  6463                           tblptrl	equ	0xFF6
  6464                           tablat	equ	0xFF5
  6465                           prodh	equ	0xFF4
  6466                           prodl	equ	0xFF3
  6467                           intcon	equ	0xFF2
  6468                           intcon2	equ	0xFF1
  6469                           intcon3	equ	0xFF0
  6470                           postinc0	equ	0xFEE
  6471                           wreg	equ	0xFE8
  6472                           postdec1	equ	0xFE5
  6473                           fsr1l	equ	0xFE1
  6474                           indf2	equ	0xFDF
  6475                           postinc2	equ	0xFDE
  6476                           postdec2	equ	0xFDD
  6477                           fsr2h	equ	0xFDA
  6478                           fsr2l	equ	0xFD9
  6479                           status	equ	0xFD8
  6480                           
  6481 ;; *************** function _UI *****************
  6482 ;; Defined at:
  6483 ;;		line 76 in file "UI.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;		None
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;  i               1   73[BANK0 ] unsigned char 
  6488 ;;  i               1   85[BANK0 ] unsigned char 
  6489 ;;  i               1   84[BANK0 ] unsigned char 
  6490 ;;  i               1   83[BANK0 ] unsigned char 
  6491 ;;  i               1   82[BANK0 ] unsigned char 
  6492 ;;  i               1   81[BANK0 ] unsigned char 
  6493 ;;  i               1   80[BANK0 ] unsigned char 
  6494 ;;  i               1   79[BANK0 ] unsigned char 
  6495 ;;  i               1   78[BANK0 ] unsigned char 
  6496 ;;  i               1   77[BANK0 ] unsigned char 
  6497 ;;  i               1   76[BANK0 ] unsigned char 
  6498 ;;  i               1   75[BANK0 ] unsigned char 
  6499 ;;  i               1   74[BANK0 ] unsigned char 
  6500 ;;  month           4   86[BANK0 ] unsigned char [4]
  6501 ;;  i               1   72[BANK0 ] unsigned char 
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  1    wreg      void 
  6504 ;; Registers used:
  6505 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6512 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6515 ;;Total ram usage:       22 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:   11
  6518 ;; This function calls:
  6519 ;;		___awdiv
  6520 ;;		___awmod
  6521 ;;		_change_state_to_menu_12
  6522 ;;		_change_state_to_menu_22
  6523 ;;		_lcdInst
  6524 ;;		_printRTC
  6525 ;;		_printf
  6526 ;;		_strcpy
  6527 ;; This function is called by:
  6528 ;;		_main
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text23
  6533  0008CA                     __ptext23:
  6534                           	opt stack 0
  6535  0008CA                     _UI:
  6536                           	opt stack 19
  6537                           
  6538                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6539                           
  6540                           ;incstack = 0
  6541  0008CA  0E02               	movlw	2
  6542  0008CC  0100               	movlb	0	; () banked
  6543  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6544  0008D0  A4D8               	btfss	status,2,c
  6545  0008D2  D075               	goto	l7662
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6549  0008D4  0E01               	movlw	1
  6550  0008D6  EC14  F025         	call	_lcdInst
  6551  0008DA  0E68               	movlw	104
  6552  0008DC  0100               	movlb	0	; () banked
  6553  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6554  0008E0  0EE4               	movlw	228
  6555  0008E2                     u7637:
  6556  0008E2  2EE8               	decfsz	wreg,f,c
  6557  0008E4  D7FE               	bra	u7637
  6558  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6559  0008E8  D7FC               	bra	u7637
  6560  0008EA  F000               	nop	
  6561                           
  6562                           ;UI.c: 79: lcdInst(0b10000000);;
  6563  0008EC  0E80               	movlw	128
  6564  0008EE  EC14  F025         	call	_lcdInst
  6565                           
  6566                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6567  0008F2  0EA3               	movlw	low STR_1
  6568  0008F4  0100               	movlb	0	; () banked
  6569  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6570  0008F8  0EFB               	movlw	high STR_1
  6571  0008FA  0100               	movlb	0	; () banked
  6572  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6573  0008FE  0E01               	movlw	1
  6574  000900  0100               	movlb	0	; () banked
  6575  000902  25FD               	addwf	_sel& (0+255),w,b
  6576  000904  0100               	movlb	0	; () banked
  6577  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6578  000908  0100               	movlb	0	; () banked
  6579  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6580  00090C  0E00               	movlw	0
  6581  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6582  000910  ECB8  F008         	call	_printf	;wreg free
  6583                           
  6584                           ;UI.c: 81: lcdInst(0b11000000);;
  6585  000914  0EC0               	movlw	192
  6586  000916  EC14  F025         	call	_lcdInst
  6587                           
  6588                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6589  00091A  0E0E               	movlw	14
  6590  00091C  0100               	movlb	0	; () banked
  6591  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6592  000920  0E10               	movlw	16
  6593  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6594  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6595  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6596  00092C  ECB1  F01D         	call	___awmod	;wreg free
  6597  000930  C080  F0C6         	movff	?___awmod,_UI$2315
  6598  000934  C081  F0C7         	movff	?___awmod+1,_UI$2315+1
  6599                           
  6600                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6601  000938  0E27               	movlw	low STR_2
  6602  00093A  0100               	movlb	0	; () banked
  6603  00093C  6F8E               	movwf	printf@f& (0+255),b
  6604  00093E  0EFF               	movlw	high STR_2
  6605  000940  0100               	movlb	0	; () banked
  6606  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6607  000944  0E0E               	movlw	14
  6608  000946  0100               	movlb	0	; () banked
  6609  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6610  00094A  0E10               	movlw	16
  6611  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6612  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6613  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6614  000956  ECB1  F01D         	call	___awmod	;wreg free
  6615  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6616  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6617  000962  0E00               	movlw	0
  6618  000964  0100               	movlb	0	; () banked
  6619  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6620  000968  0E3C               	movlw	60
  6621  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6622  00096C  EC9F  F01C         	call	___awdiv	;wreg free
  6623  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6624  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6625  000978  C0C6  F080         	movff	_UI$2315,___awmod@dividend
  6626  00097C  C0C7  F081         	movff	_UI$2315+1,___awmod@dividend+1
  6627  000980  0E00               	movlw	0
  6628  000982  0100               	movlb	0	; () banked
  6629  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6630  000986  0E3C               	movlw	60
  6631  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6632  00098A  ECB1  F01D         	call	___awmod	;wreg free
  6633  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6634  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6635  000996  ECB8  F008         	call	_printf	;wreg free
  6636                           
  6637                           ;UI.c: 83: machine_state = UI_state;
  6638  00099A  0E00               	movlw	0
  6639  00099C  0100               	movlb	0	; () banked
  6640  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6641  0009A0                     l180:
  6642  0009A0  A281               	btfss	3969,1,c	;volatile
  6643  0009A2  D7FE               	goto	l180
  6644                           
  6645                           ;UI.c: 86: }
  6646                           ;UI.c: 87: if(cur_state==12){
  6647  0009A4  0E0C               	movlw	12
  6648  0009A6  0100               	movlb	0	; () banked
  6649  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  6650  0009AA  0100               	movlb	0	; () banked
  6651  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6652  0009AE  A4D8               	btfss	status,2,c
  6653  0009B0  D003               	goto	l7660
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;UI.c: 88: change_state_to_menu_12();
  6657  0009B2  EC64  F022         	call	_change_state_to_menu_12	;wreg free
  6658                           
  6659                           ;UI.c: 89: }
  6660  0009B6  D3D5               	goto	l7982
  6661  0009B8                     l7660:
  6662                           
  6663                           ;UI.c: 90: else{
  6664                           ;UI.c: 91: change_state_to_menu_22();
  6665  0009B8  EC48  F022         	call	_change_state_to_menu_22	;wreg free
  6666                           
  6667                           ;UI.c: 92: }
  6668                           ;UI.c: 93: }
  6669  0009BC  D3D2               	goto	l7982
  6670  0009BE                     l7662:
  6671                           
  6672                           ;UI.c: 94: else if(cur_state == 0){
  6673  0009BE  0100               	movlb	0	; () banked
  6674  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  6675  0009C2  0100               	movlb	0	; () banked
  6676  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6677  0009C6  A4D8               	btfss	status,2,c
  6678  0009C8  D3CC               	goto	l7982
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6682  0009CA  0E00               	movlw	0
  6683  0009CC  0100               	movlb	0	; () banked
  6684  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6685  0009D0                     l7666:
  6686                           
  6687                           ; BSR set to: 0
  6688  0009D0  0E63               	movlw	99
  6689  0009D2  0100               	movlb	0	; () banked
  6690  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6691  0009D6  D001               	goto	l7670
  6692  0009D8  D00C               	goto	l7674
  6693  0009DA                     l7670:
  6694                           
  6695                           ; BSR set to: 0
  6696  0009DA  0E68               	movlw	104
  6697  0009DC  0100               	movlb	0	; () banked
  6698  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6699  0009E0  0EE4               	movlw	228
  6700  0009E2                     u7647:
  6701  0009E2  2EE8               	decfsz	wreg,f,c
  6702  0009E4  D7FE               	bra	u7647
  6703  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6704  0009E8  D7FC               	bra	u7647
  6705  0009EA  F000               	nop	
  6706  0009EC  0100               	movlb	0	; () banked
  6707  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6708  0009F0  D7EF               	goto	l7666
  6709  0009F2                     l7674:
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;UI.c: 96: if(cur_state == 0){
  6713  0009F2  0100               	movlb	0	; () banked
  6714  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  6715  0009F6  0100               	movlb	0	; () banked
  6716  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6717  0009FA  A4D8               	btfss	status,2,c
  6718  0009FC  D3B2               	goto	l7982
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;UI.c: 97: printRTC();
  6722  0009FE  ECCC  F00F         	call	_printRTC	;wreg free
  6723                           
  6724                           ;UI.c: 98: }
  6725                           ;UI.c: 99: }
  6726                           ;UI.c: 100: while(logstate){
  6727  000A02  D3AF               	goto	l7982
  6728  000A04                     l7678:
  6729                           
  6730                           ;UI.c: 102: if(!log_completion){
  6731  000A04  0100               	movlb	0	; () banked
  6732  000A06  51EC               	movf	_log_completion& (0+255),w,b
  6733  000A08  0100               	movlb	0	; () banked
  6734  000A0A  11ED               	iorwf	(_log_completion+1)& (0+255),w,b
  6735  000A0C  A4D8               	btfss	status,2,c
  6736  000A0E  D041               	goto	l7708
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6740  000A10  0E01               	movlw	1
  6741  000A12  EC14  F025         	call	_lcdInst
  6742  000A16  0E68               	movlw	104
  6743  000A18  0100               	movlb	0	; () banked
  6744  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6745  000A1C  0EE4               	movlw	228
  6746  000A1E                     u7657:
  6747  000A1E  2EE8               	decfsz	wreg,f,c
  6748  000A20  D7FE               	bra	u7657
  6749  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6750  000A24  D7FC               	bra	u7657
  6751  000A26  F000               	nop	
  6752                           
  6753                           ;UI.c: 104: lcdInst(0b10000000);;
  6754  000A28  0E80               	movlw	128
  6755  000A2A  EC14  F025         	call	_lcdInst
  6756                           
  6757                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6758  000A2E  0E91               	movlw	low STR_3
  6759  000A30  0100               	movlb	0	; () banked
  6760  000A32  6F8E               	movwf	printf@f& (0+255),b
  6761  000A34  0EFB               	movlw	high STR_3
  6762  000A36  0100               	movlb	0	; () banked
  6763  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6764  000A3A  C0EA  F090         	movff	_log,?_printf+2
  6765  000A3E  C0EB  F091         	movff	_log+1,?_printf+3
  6766  000A42  ECB8  F008         	call	_printf	;wreg free
  6767                           
  6768                           ;UI.c: 106: lcdInst(0b11000000);;
  6769  000A46  0EC0               	movlw	192
  6770  000A48  EC14  F025         	call	_lcdInst
  6771                           
  6772                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6773  000A4C  0E4A               	movlw	low STR_4
  6774  000A4E  0100               	movlb	0	; () banked
  6775  000A50  6F8E               	movwf	printf@f& (0+255),b
  6776  000A52  0EFE               	movlw	high STR_4
  6777  000A54  0100               	movlb	0	; () banked
  6778  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6779  000A58  ECB8  F008         	call	_printf	;wreg free
  6780  000A5C                     l7692:
  6781  000A5C  0E00               	movlw	0
  6782  000A5E  0100               	movlb	0	; () banked
  6783  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6784  000A62                     l7694:
  6785                           
  6786                           ; BSR set to: 0
  6787  000A62  0E63               	movlw	99
  6788  000A64  0100               	movlb	0	; () banked
  6789  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6790  000A68  D001               	goto	l7698
  6791  000A6A  D00C               	goto	l7702
  6792  000A6C                     l7698:
  6793                           
  6794                           ; BSR set to: 0
  6795  000A6C  0E68               	movlw	104
  6796  000A6E  0100               	movlb	0	; () banked
  6797  000A70  6FC4               	movwf	??_UI& (0+255),b
  6798  000A72  0EE4               	movlw	228
  6799  000A74                     u7667:
  6800  000A74  2EE8               	decfsz	wreg,f,c
  6801  000A76  D7FE               	bra	u7667
  6802  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6803  000A7A  D7FC               	bra	u7667
  6804  000A7C  F000               	nop	
  6805  000A7E  0100               	movlb	0	; () banked
  6806  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6807  000A82  D7EF               	goto	l7694
  6808  000A84                     l7702:
  6809                           
  6810                           ; BSR set to: 0
  6811  000A84  0100               	movlb	0	; () banked
  6812  000A86  51F6               	movf	_logstate& (0+255),w,b
  6813  000A88  0100               	movlb	0	; () banked
  6814  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6815  000A8C  B4D8               	btfsc	status,2,c
  6816  000A8E  0012               	return	
  6817  000A90  D7E5               	goto	l7692
  6818  000A92                     l7708:
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;UI.c: 111: else{
  6822                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6823  000A92  0E01               	movlw	1
  6824  000A94  EC14  F025         	call	_lcdInst
  6825  000A98  0E68               	movlw	104
  6826  000A9A  0100               	movlb	0	; () banked
  6827  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6828  000A9E  0EE4               	movlw	228
  6829  000AA0                     u7677:
  6830  000AA0  2EE8               	decfsz	wreg,f,c
  6831  000AA2  D7FE               	bra	u7677
  6832  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6833  000AA6  D7FC               	bra	u7677
  6834  000AA8  F000               	nop	
  6835                           
  6836                           ;UI.c: 113: lcdInst(0b10000000);;
  6837  000AAA  0E80               	movlw	128
  6838  000AAC  EC14  F025         	call	_lcdInst
  6839                           
  6840                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6841  000AB0  0E91               	movlw	low STR_3
  6842  000AB2  0100               	movlb	0	; () banked
  6843  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6844  000AB6  0EFB               	movlw	high STR_3
  6845  000AB8  0100               	movlb	0	; () banked
  6846  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6847  000ABC  C0EA  F090         	movff	_log,?_printf+2
  6848  000AC0  C0EB  F091         	movff	_log+1,?_printf+3
  6849  000AC4  ECB8  F008         	call	_printf	;wreg free
  6850                           
  6851                           ;UI.c: 115: lcdInst(0b11000000);;
  6852  000AC8  0EC0               	movlw	192
  6853  000ACA  EC14  F025         	call	_lcdInst
  6854                           
  6855                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6856  000ACE  0EE6               	movlw	low STR_6
  6857  000AD0  0100               	movlb	0	; () banked
  6858  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6859  000AD4  0EFD               	movlw	high STR_6
  6860  000AD6  0100               	movlb	0	; () banked
  6861  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6862  000ADA  ECB8  F008         	call	_printf	;wreg free
  6863                           
  6864                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6865  000ADE  0E00               	movlw	0
  6866  000AE0  0100               	movlb	0	; () banked
  6867  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6868  000AE4                     l7722:
  6869                           
  6870                           ; BSR set to: 0
  6871  000AE4  0E63               	movlw	99
  6872  000AE6  0100               	movlb	0	; () banked
  6873  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6874  000AEA  D001               	goto	l7726
  6875  000AEC  D00C               	goto	l7730
  6876  000AEE                     l7726:
  6877                           
  6878                           ; BSR set to: 0
  6879  000AEE  0E68               	movlw	104
  6880  000AF0  0100               	movlb	0	; () banked
  6881  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6882  000AF4  0EE4               	movlw	228
  6883  000AF6                     u7687:
  6884  000AF6  2EE8               	decfsz	wreg,f,c
  6885  000AF8  D7FE               	bra	u7687
  6886  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6887  000AFC  D7FC               	bra	u7687
  6888  000AFE  F000               	nop	
  6889  000B00  0100               	movlb	0	; () banked
  6890  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6891  000B04  D7EF               	goto	l7722
  6892  000B06                     l7730:
  6893                           
  6894                           ; BSR set to: 0
  6895  000B06  0100               	movlb	0	; () banked
  6896  000B08  51F6               	movf	_logstate& (0+255),w,b
  6897  000B0A  0100               	movlb	0	; () banked
  6898  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6899  000B0E  B4D8               	btfsc	status,2,c
  6900  000B10  0012               	return	
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6904                           
  6905                           ; BSR set to: 0
  6906                           
  6907                           ; BSR set to: 0
  6908  000B12  0E00               	movlw	0
  6909  000B14  0100               	movlb	0	; () banked
  6910  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6911  000B18                     l7736:
  6912                           
  6913                           ; BSR set to: 0
  6914  000B18  0E63               	movlw	99
  6915  000B1A  0100               	movlb	0	; () banked
  6916  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6917  000B1E  D001               	goto	l7740
  6918  000B20  D00C               	goto	l7744
  6919  000B22                     l7740:
  6920                           
  6921                           ; BSR set to: 0
  6922  000B22  0E68               	movlw	104
  6923  000B24  0100               	movlb	0	; () banked
  6924  000B26  6FC4               	movwf	??_UI& (0+255),b
  6925  000B28  0EE4               	movlw	228
  6926  000B2A                     u7697:
  6927  000B2A  2EE8               	decfsz	wreg,f,c
  6928  000B2C  D7FE               	bra	u7697
  6929  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6930  000B30  D7FC               	bra	u7697
  6931  000B32  F000               	nop	
  6932  000B34  0100               	movlb	0	; () banked
  6933  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6934  000B38  D7EF               	goto	l7736
  6935  000B3A                     l7744:
  6936                           
  6937                           ; BSR set to: 0
  6938  000B3A  0100               	movlb	0	; () banked
  6939  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6940  000B3E  0100               	movlb	0	; () banked
  6941  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6942  000B42  B4D8               	btfsc	status,2,c
  6943  000B44  0012               	return	
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6947                           
  6948                           ; BSR set to: 0
  6949                           
  6950                           ; BSR set to: 0
  6951  000B46  0E01               	movlw	1
  6952  000B48  EC14  F025         	call	_lcdInst
  6953  000B4C  0E68               	movlw	104
  6954  000B4E  0100               	movlb	0	; () banked
  6955  000B50  6FC4               	movwf	??_UI& (0+255),b
  6956  000B52  0EE4               	movlw	228
  6957  000B54                     u7707:
  6958  000B54  2EE8               	decfsz	wreg,f,c
  6959  000B56  D7FE               	bra	u7707
  6960  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6961  000B5A  D7FC               	bra	u7707
  6962  000B5C  F000               	nop	
  6963                           
  6964                           ;UI.c: 122: lcdInst(0b10000000);;
  6965  000B5E  0E80               	movlw	128
  6966  000B60  EC14  F025         	call	_lcdInst
  6967                           
  6968                           ;UI.c: 123: printf("START:");
  6969  000B64  0EC4               	movlw	low STR_7
  6970  000B66  0100               	movlb	0	; () banked
  6971  000B68  6F8E               	movwf	printf@f& (0+255),b
  6972  000B6A  0EFF               	movlw	high STR_7
  6973  000B6C  0100               	movlb	0	; () banked
  6974  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6975  000B70  ECB8  F008         	call	_printf	;wreg free
  6976                           
  6977                           ;UI.c: 124: lcdInst(0b11000000);;
  6978  000B74  0EC0               	movlw	192
  6979  000B76  EC14  F025         	call	_lcdInst
  6980                           
  6981                           ;UI.c: 125: char month[] = "MMM";
  6982  000B7A  C133  F0D6         	movff	UI@F3226,UI@month
  6983  000B7E  C134  F0D7         	movff	UI@F3226+1,UI@month+1
  6984  000B82  C135  F0D8         	movff	UI@F3226+2,UI@month+2
  6985  000B86  C136  F0D9         	movff	UI@F3226+3,UI@month+3
  6986                           
  6987                           ;UI.c: 126: switch(log_startTime[5]){
  6988  000B8A  D0C3               	goto	l7788
  6989  000B8C                     l7760:
  6990                           
  6991                           ;UI.c: 128: strcpy(month, "JAN");
  6992  000B8C  0ED6               	movlw	low UI@month
  6993  000B8E  0100               	movlb	0	; () banked
  6994  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6995  000B92  0E00               	movlw	high UI@month
  6996  000B94  0100               	movlb	0	; () banked
  6997  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6998  000B98  0EDB               	movlw	low STR_8
  6999  000B9A  0100               	movlb	0	; () banked
  7000  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7001  000B9E  0EFF               	movlw	high STR_8
  7002  000BA0  0100               	movlb	0	; () banked
  7003  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7004  000BA4  EC80  F022         	call	_strcpy	;wreg free
  7005                           
  7006                           ;UI.c: 129: break;
  7007  000BA8  D0E6               	goto	l7790
  7008  000BAA                     l7762:
  7009                           
  7010                           ;UI.c: 131: strcpy(month, "FEB");
  7011  000BAA  0ED6               	movlw	low UI@month
  7012  000BAC  0100               	movlb	0	; () banked
  7013  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7014  000BB0  0E00               	movlw	high UI@month
  7015  000BB2  0100               	movlb	0	; () banked
  7016  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7017  000BB6  0ECB               	movlw	low STR_9
  7018  000BB8  0100               	movlb	0	; () banked
  7019  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7020  000BBC  0EFF               	movlw	high STR_9
  7021  000BBE  0100               	movlb	0	; () banked
  7022  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7023  000BC2  EC80  F022         	call	_strcpy	;wreg free
  7024                           
  7025                           ;UI.c: 132: break;
  7026  000BC6  D0D7               	goto	l7790
  7027  000BC8                     l7764:
  7028                           
  7029                           ;UI.c: 134: strcpy(month, "MAR");
  7030  000BC8  0ED6               	movlw	low UI@month
  7031  000BCA  0100               	movlb	0	; () banked
  7032  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7033  000BCE  0E00               	movlw	high UI@month
  7034  000BD0  0100               	movlb	0	; () banked
  7035  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7036  000BD4  0EE7               	movlw	low STR_10
  7037  000BD6  0100               	movlb	0	; () banked
  7038  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7039  000BDA  0EFF               	movlw	high STR_10
  7040  000BDC  0100               	movlb	0	; () banked
  7041  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7042  000BE0  EC80  F022         	call	_strcpy	;wreg free
  7043                           
  7044                           ;UI.c: 135: break;
  7045  000BE4  D0C8               	goto	l7790
  7046  000BE6                     l7766:
  7047                           
  7048                           ;UI.c: 137: strcpy(month, "APR");
  7049  000BE6  0ED6               	movlw	low UI@month
  7050  000BE8  0100               	movlb	0	; () banked
  7051  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7052  000BEC  0E00               	movlw	high UI@month
  7053  000BEE  0100               	movlb	0	; () banked
  7054  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7055  000BF2  0EEB               	movlw	low STR_11
  7056  000BF4  0100               	movlb	0	; () banked
  7057  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7058  000BF8  0EFF               	movlw	high STR_11
  7059  000BFA  0100               	movlb	0	; () banked
  7060  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7061  000BFE  EC80  F022         	call	_strcpy	;wreg free
  7062                           
  7063                           ;UI.c: 138: break;
  7064  000C02  D0B9               	goto	l7790
  7065  000C04                     l7768:
  7066                           
  7067                           ;UI.c: 140: strcpy(month, "MAY");
  7068  000C04  0ED6               	movlw	low UI@month
  7069  000C06  0100               	movlb	0	; () banked
  7070  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7071  000C0A  0E00               	movlw	high UI@month
  7072  000C0C  0100               	movlb	0	; () banked
  7073  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7074  000C10  0EFB               	movlw	low STR_12
  7075  000C12  0100               	movlb	0	; () banked
  7076  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7077  000C16  0EFF               	movlw	high STR_12
  7078  000C18  0100               	movlb	0	; () banked
  7079  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7080  000C1C  EC80  F022         	call	_strcpy	;wreg free
  7081                           
  7082                           ;UI.c: 141: break;
  7083  000C20  D0AA               	goto	l7790
  7084  000C22                     l7770:
  7085                           
  7086                           ;UI.c: 143: strcpy(month, "JUN");
  7087  000C22  0ED6               	movlw	low UI@month
  7088  000C24  0100               	movlb	0	; () banked
  7089  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7090  000C28  0E00               	movlw	high UI@month
  7091  000C2A  0100               	movlb	0	; () banked
  7092  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7093  000C2E  0EDF               	movlw	low STR_13
  7094  000C30  0100               	movlb	0	; () banked
  7095  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7096  000C34  0EFF               	movlw	high STR_13
  7097  000C36  0100               	movlb	0	; () banked
  7098  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7099  000C3A  EC80  F022         	call	_strcpy	;wreg free
  7100                           
  7101                           ;UI.c: 144: break;
  7102  000C3E  D09B               	goto	l7790
  7103  000C40                     l7772:
  7104                           
  7105                           ;UI.c: 146: strcpy(month, "JUL");
  7106  000C40  0ED6               	movlw	low UI@month
  7107  000C42  0100               	movlb	0	; () banked
  7108  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7109  000C46  0E00               	movlw	high UI@month
  7110  000C48  0100               	movlb	0	; () banked
  7111  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7112  000C4C  0ED7               	movlw	low STR_14
  7113  000C4E  0100               	movlb	0	; () banked
  7114  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7115  000C52  0EFF               	movlw	high STR_14
  7116  000C54  0100               	movlb	0	; () banked
  7117  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7118  000C58  EC80  F022         	call	_strcpy	;wreg free
  7119                           
  7120                           ;UI.c: 147: break;
  7121  000C5C  D08C               	goto	l7790
  7122  000C5E                     l7774:
  7123                           
  7124                           ;UI.c: 149: strcpy(month, "AUG");
  7125  000C5E  0ED6               	movlw	low UI@month
  7126  000C60  0100               	movlb	0	; () banked
  7127  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7128  000C64  0E00               	movlw	high UI@month
  7129  000C66  0100               	movlb	0	; () banked
  7130  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7131  000C6A  0ED3               	movlw	low STR_15
  7132  000C6C  0100               	movlb	0	; () banked
  7133  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7134  000C70  0EFF               	movlw	high STR_15
  7135  000C72  0100               	movlb	0	; () banked
  7136  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7137  000C76  EC80  F022         	call	_strcpy	;wreg free
  7138                           
  7139                           ;UI.c: 150: break;
  7140  000C7A  D07D               	goto	l7790
  7141  000C7C                     l7776:
  7142                           
  7143                           ;UI.c: 152: strcpy(month, "SEP");
  7144  000C7C  0ED6               	movlw	low UI@month
  7145  000C7E  0100               	movlb	0	; () banked
  7146  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7147  000C82  0E00               	movlw	high UI@month
  7148  000C84  0100               	movlb	0	; () banked
  7149  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7150  000C88  0EE3               	movlw	low STR_16
  7151  000C8A  0100               	movlb	0	; () banked
  7152  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7153  000C8E  0EFF               	movlw	high STR_16
  7154  000C90  0100               	movlb	0	; () banked
  7155  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7156  000C94  EC80  F022         	call	_strcpy	;wreg free
  7157                           
  7158                           ;UI.c: 153: break;
  7159  000C98  D06E               	goto	l7790
  7160  000C9A                     l7778:
  7161                           
  7162                           ;UI.c: 155: strcpy(month, "OCT");
  7163  000C9A  0ED6               	movlw	low UI@month
  7164  000C9C  0100               	movlb	0	; () banked
  7165  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7166  000CA0  0E00               	movlw	high UI@month
  7167  000CA2  0100               	movlb	0	; () banked
  7168  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7169  000CA6  0EF3               	movlw	low STR_17
  7170  000CA8  0100               	movlb	0	; () banked
  7171  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7172  000CAC  0EFF               	movlw	high STR_17
  7173  000CAE  0100               	movlb	0	; () banked
  7174  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7175  000CB2  EC80  F022         	call	_strcpy	;wreg free
  7176                           
  7177                           ;UI.c: 156: break;
  7178  000CB6  D05F               	goto	l7790
  7179  000CB8                     l7780:
  7180                           
  7181                           ;UI.c: 158: strcpy(month, "NOV");
  7182  000CB8  0ED6               	movlw	low UI@month
  7183  000CBA  0100               	movlb	0	; () banked
  7184  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7185  000CBE  0E00               	movlw	high UI@month
  7186  000CC0  0100               	movlb	0	; () banked
  7187  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7188  000CC4  0EF7               	movlw	low STR_18
  7189  000CC6  0100               	movlb	0	; () banked
  7190  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7191  000CCA  0EFF               	movlw	high STR_18
  7192  000CCC  0100               	movlb	0	; () banked
  7193  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7194  000CD0  EC80  F022         	call	_strcpy	;wreg free
  7195                           
  7196                           ;UI.c: 159: break;
  7197  000CD4  D050               	goto	l7790
  7198  000CD6                     l7782:
  7199                           
  7200                           ;UI.c: 161: strcpy(month, "DEC");
  7201  000CD6  0ED6               	movlw	low UI@month
  7202  000CD8  0100               	movlb	0	; () banked
  7203  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7204  000CDC  0E00               	movlw	high UI@month
  7205  000CDE  0100               	movlb	0	; () banked
  7206  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7207  000CE2  0ECF               	movlw	low STR_19
  7208  000CE4  0100               	movlb	0	; () banked
  7209  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7210  000CE8  0EFF               	movlw	high STR_19
  7211  000CEA  0100               	movlb	0	; () banked
  7212  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7213  000CEE  EC80  F022         	call	_strcpy	;wreg free
  7214                           
  7215                           ;UI.c: 162: break;
  7216  000CF2  D041               	goto	l7790
  7217  000CF4                     l7784:
  7218                           
  7219                           ;UI.c: 164: strcpy(month, "ERR");
  7220  000CF4  0ED6               	movlw	low UI@month
  7221  000CF6  0100               	movlb	0	; () banked
  7222  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7223  000CFA  0E00               	movlw	high UI@month
  7224  000CFC  0100               	movlb	0	; () banked
  7225  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7226  000D00  0EEF               	movlw	low STR_20
  7227  000D02  0100               	movlb	0	; () banked
  7228  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7229  000D06  0EFF               	movlw	high STR_20
  7230  000D08  0100               	movlb	0	; () banked
  7231  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7232  000D0C  EC80  F022         	call	_strcpy	;wreg free
  7233                           
  7234                           ;UI.c: 166: }
  7235                           
  7236                           ;UI.c: 165: break;
  7237  000D10  D032               	goto	l7790
  7238  000D12                     l7788:
  7239  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7240  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7241  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7242                           
  7243                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7244                           ; Switch size 1, requested type "space"
  7245                           ; Number of cases is 1, Range of values is 0 to 0
  7246                           ; switch strategies available:
  7247                           ; Name         Instructions Cycles
  7248                           ; simple_byte            4     3 (average)
  7249                           ;	Chosen strategy is simple_byte
  7250  000D1E  0100               	movlb	0	; () banked
  7251  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7252  000D22  0A00               	xorlw	0	; case 0
  7253  000D24  A4D8               	btfss	status,2,c
  7254  000D26  D7E6               	goto	l7784
  7255                           
  7256                           ; BSR set to: 0
  7257                           ; Switch size 1, requested type "space"
  7258                           ; Number of cases is 12, Range of values is 1 to 12
  7259                           ; switch strategies available:
  7260                           ; Name         Instructions Cycles
  7261                           ; simple_byte           37    19 (average)
  7262                           ;	Chosen strategy is simple_byte
  7263  000D28  0100               	movlb	0	; () banked
  7264  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7265  000D2C  0A01               	xorlw	1	; case 1
  7266  000D2E  B4D8               	btfsc	status,2,c
  7267  000D30  D72D               	goto	l7760
  7268  000D32  0A03               	xorlw	3	; case 2
  7269  000D34  B4D8               	btfsc	status,2,c
  7270  000D36  D739               	goto	l7762
  7271  000D38  0A01               	xorlw	1	; case 3
  7272  000D3A  B4D8               	btfsc	status,2,c
  7273  000D3C  D745               	goto	l7764
  7274  000D3E  0A07               	xorlw	7	; case 4
  7275  000D40  B4D8               	btfsc	status,2,c
  7276  000D42  D751               	goto	l7766
  7277  000D44  0A01               	xorlw	1	; case 5
  7278  000D46  B4D8               	btfsc	status,2,c
  7279  000D48  D75D               	goto	l7768
  7280  000D4A  0A03               	xorlw	3	; case 6
  7281  000D4C  B4D8               	btfsc	status,2,c
  7282  000D4E  D769               	goto	l7770
  7283  000D50  0A01               	xorlw	1	; case 7
  7284  000D52  B4D8               	btfsc	status,2,c
  7285  000D54  D775               	goto	l7772
  7286  000D56  0A0F               	xorlw	15	; case 8
  7287  000D58  B4D8               	btfsc	status,2,c
  7288  000D5A  D781               	goto	l7774
  7289  000D5C  0A01               	xorlw	1	; case 9
  7290  000D5E  B4D8               	btfsc	status,2,c
  7291  000D60  D78D               	goto	l7776
  7292  000D62  0A03               	xorlw	3	; case 10
  7293  000D64  B4D8               	btfsc	status,2,c
  7294  000D66  D799               	goto	l7778
  7295  000D68  0A01               	xorlw	1	; case 11
  7296  000D6A  B4D8               	btfsc	status,2,c
  7297  000D6C  D7A5               	goto	l7780
  7298  000D6E  0A07               	xorlw	7	; case 12
  7299  000D70  B4D8               	btfsc	status,2,c
  7300  000D72  D7B1               	goto	l7782
  7301  000D74  D7BF               	goto	l7784
  7302  000D76                     l7790:
  7303                           
  7304                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7305  000D76  0E1C               	movlw	low STR_21
  7306  000D78  0100               	movlb	0	; () banked
  7307  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7308  000D7C  0EFB               	movlw	high STR_21
  7309  000D7E  0100               	movlb	0	; () banked
  7310  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7311  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7312  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7313  000D8A  0ED6               	movlw	low UI@month
  7314  000D8C  0100               	movlb	0	; () banked
  7315  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7316  000D90  0E00               	movlw	high UI@month
  7317  000D92  0100               	movlb	0	; () banked
  7318  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7319  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7320  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7321  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7322  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7323  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7324  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7325  000DAE  ECB8  F008         	call	_printf	;wreg free
  7326                           
  7327                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7328  000DB2  0E00               	movlw	0
  7329  000DB4  0100               	movlb	0	; () banked
  7330  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7331  000DB8                     l7794:
  7332                           
  7333                           ; BSR set to: 0
  7334  000DB8  0E63               	movlw	99
  7335  000DBA  0100               	movlb	0	; () banked
  7336  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7337  000DBE  D001               	goto	l7798
  7338  000DC0  D00C               	goto	l7802
  7339  000DC2                     l7798:
  7340                           
  7341                           ; BSR set to: 0
  7342  000DC2  0E68               	movlw	104
  7343  000DC4  0100               	movlb	0	; () banked
  7344  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7345  000DC8  0EE4               	movlw	228
  7346  000DCA                     u7717:
  7347  000DCA  2EE8               	decfsz	wreg,f,c
  7348  000DCC  D7FE               	bra	u7717
  7349  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7350  000DD0  D7FC               	bra	u7717
  7351  000DD2  F000               	nop	
  7352  000DD4  0100               	movlb	0	; () banked
  7353  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7354  000DD8  D7EF               	goto	l7794
  7355  000DDA                     l7802:
  7356                           
  7357                           ; BSR set to: 0
  7358  000DDA  0100               	movlb	0	; () banked
  7359  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7360  000DDE  0100               	movlb	0	; () banked
  7361  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7362  000DE2  B4D8               	btfsc	status,2,c
  7363  000DE4  0012               	return	
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7367                           
  7368                           ; BSR set to: 0
  7369                           
  7370                           ; BSR set to: 0
  7371  000DE6  0E00               	movlw	0
  7372  000DE8  0100               	movlb	0	; () banked
  7373  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7374  000DEC                     l7808:
  7375                           
  7376                           ; BSR set to: 0
  7377  000DEC  0E63               	movlw	99
  7378  000DEE  0100               	movlb	0	; () banked
  7379  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7380  000DF2  D001               	goto	l7812
  7381  000DF4  D00C               	goto	l7816
  7382  000DF6                     l7812:
  7383                           
  7384                           ; BSR set to: 0
  7385  000DF6  0E68               	movlw	104
  7386  000DF8  0100               	movlb	0	; () banked
  7387  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7388  000DFC  0EE4               	movlw	228
  7389  000DFE                     u7727:
  7390  000DFE  2EE8               	decfsz	wreg,f,c
  7391  000E00  D7FE               	bra	u7727
  7392  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7393  000E04  D7FC               	bra	u7727
  7394  000E06  F000               	nop	
  7395  000E08  0100               	movlb	0	; () banked
  7396  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7397  000E0C  D7EF               	goto	l7808
  7398  000E0E                     l7816:
  7399                           
  7400                           ; BSR set to: 0
  7401  000E0E  0100               	movlb	0	; () banked
  7402  000E10  51F6               	movf	_logstate& (0+255),w,b
  7403  000E12  0100               	movlb	0	; () banked
  7404  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7405  000E16  B4D8               	btfsc	status,2,c
  7406  000E18  0012               	return	
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7410                           
  7411                           ; BSR set to: 0
  7412                           
  7413                           ; BSR set to: 0
  7414  000E1A  0E01               	movlw	1
  7415  000E1C  EC14  F025         	call	_lcdInst
  7416  000E20  0E68               	movlw	104
  7417  000E22  0100               	movlb	0	; () banked
  7418  000E24  6FC4               	movwf	??_UI& (0+255),b
  7419  000E26  0EE4               	movlw	228
  7420  000E28                     u7737:
  7421  000E28  2EE8               	decfsz	wreg,f,c
  7422  000E2A  D7FE               	bra	u7737
  7423  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7424  000E2E  D7FC               	bra	u7737
  7425  000E30  F000               	nop	
  7426                           
  7427                           ;UI.c: 173: lcdInst(0b10000000);;
  7428  000E32  0E80               	movlw	128
  7429  000E34  EC14  F025         	call	_lcdInst
  7430                           
  7431                           ;UI.c: 174: printf("DURATION:");
  7432  000E38  0E9B               	movlw	low STR_22
  7433  000E3A  0100               	movlb	0	; () banked
  7434  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7435  000E3E  0EFF               	movlw	high STR_22
  7436  000E40  0100               	movlb	0	; () banked
  7437  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7438  000E44  ECB8  F008         	call	_printf	;wreg free
  7439                           
  7440                           ;UI.c: 175: lcdInst(0b11000000);;
  7441  000E48  0EC0               	movlw	192
  7442  000E4A  EC14  F025         	call	_lcdInst
  7443                           
  7444                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7445  000E4E  0E0E               	movlw	14
  7446  000E50  0100               	movlb	0	; () banked
  7447  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7448  000E54  0E10               	movlw	16
  7449  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7450  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7451  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7452  000E60  ECB1  F01D         	call	___awmod	;wreg free
  7453  000E64  C080  F0C6         	movff	?___awmod,_UI$2315
  7454  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2315+1
  7455                           
  7456                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7457  000E6C  0E19               	movlw	low STR_23
  7458  000E6E  0100               	movlb	0	; () banked
  7459  000E70  6F8E               	movwf	printf@f& (0+255),b
  7460  000E72  0EFF               	movlw	high STR_23
  7461  000E74  0100               	movlb	0	; () banked
  7462  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7463  000E78  0E0E               	movlw	14
  7464  000E7A  0100               	movlb	0	; () banked
  7465  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7466  000E7E  0E10               	movlw	16
  7467  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7468  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7469  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7470  000E8A  ECB1  F01D         	call	___awmod	;wreg free
  7471  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7472  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7473  000E96  0E00               	movlw	0
  7474  000E98  0100               	movlb	0	; () banked
  7475  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7476  000E9C  0E3C               	movlw	60
  7477  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7478  000EA0  EC9F  F01C         	call	___awdiv	;wreg free
  7479  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7480  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7481  000EAC  C0C6  F080         	movff	_UI$2315,___awmod@dividend
  7482  000EB0  C0C7  F081         	movff	_UI$2315+1,___awmod@dividend+1
  7483  000EB4  0E00               	movlw	0
  7484  000EB6  0100               	movlb	0	; () banked
  7485  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7486  000EBA  0E3C               	movlw	60
  7487  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7488  000EBE  ECB1  F01D         	call	___awmod	;wreg free
  7489  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7490  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7491  000ECA  ECB8  F008         	call	_printf	;wreg free
  7492                           
  7493                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7494  000ECE  0E00               	movlw	0
  7495  000ED0  0100               	movlb	0	; () banked
  7496  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7497  000ED4                     l7836:
  7498                           
  7499                           ; BSR set to: 0
  7500  000ED4  0E63               	movlw	99
  7501  000ED6  0100               	movlb	0	; () banked
  7502  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7503  000EDA  D001               	goto	l7840
  7504  000EDC  D00C               	goto	l7844
  7505  000EDE                     l7840:
  7506                           
  7507                           ; BSR set to: 0
  7508  000EDE  0E68               	movlw	104
  7509  000EE0  0100               	movlb	0	; () banked
  7510  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7511  000EE4  0EE4               	movlw	228
  7512  000EE6                     u7747:
  7513  000EE6  2EE8               	decfsz	wreg,f,c
  7514  000EE8  D7FE               	bra	u7747
  7515  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7516  000EEC  D7FC               	bra	u7747
  7517  000EEE  F000               	nop	
  7518  000EF0  0100               	movlb	0	; () banked
  7519  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7520  000EF4  D7EF               	goto	l7836
  7521  000EF6                     l7844:
  7522                           
  7523                           ; BSR set to: 0
  7524  000EF6  0100               	movlb	0	; () banked
  7525  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7526  000EFA  0100               	movlb	0	; () banked
  7527  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7528  000EFE  B4D8               	btfsc	status,2,c
  7529  000F00  0012               	return	
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7533                           
  7534                           ; BSR set to: 0
  7535                           
  7536                           ; BSR set to: 0
  7537  000F02  0E00               	movlw	0
  7538  000F04  0100               	movlb	0	; () banked
  7539  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7540  000F08                     l7850:
  7541                           
  7542                           ; BSR set to: 0
  7543  000F08  0E63               	movlw	99
  7544  000F0A  0100               	movlb	0	; () banked
  7545  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7546  000F0E  D001               	goto	l7854
  7547  000F10  D00C               	goto	l7858
  7548  000F12                     l7854:
  7549                           
  7550                           ; BSR set to: 0
  7551  000F12  0E68               	movlw	104
  7552  000F14  0100               	movlb	0	; () banked
  7553  000F16  6FC4               	movwf	??_UI& (0+255),b
  7554  000F18  0EE4               	movlw	228
  7555  000F1A                     u7757:
  7556  000F1A  2EE8               	decfsz	wreg,f,c
  7557  000F1C  D7FE               	bra	u7757
  7558  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7559  000F20  D7FC               	bra	u7757
  7560  000F22  F000               	nop	
  7561  000F24  0100               	movlb	0	; () banked
  7562  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7563  000F28  D7EF               	goto	l7850
  7564  000F2A                     l7858:
  7565                           
  7566                           ; BSR set to: 0
  7567  000F2A  0100               	movlb	0	; () banked
  7568  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7569  000F2E  0100               	movlb	0	; () banked
  7570  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7571  000F32  B4D8               	btfsc	status,2,c
  7572  000F34  0012               	return	
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7576                           
  7577                           ; BSR set to: 0
  7578                           
  7579                           ; BSR set to: 0
  7580  000F36  0E01               	movlw	1
  7581  000F38  EC14  F025         	call	_lcdInst
  7582  000F3C  0E68               	movlw	104
  7583  000F3E  0100               	movlb	0	; () banked
  7584  000F40  6FC4               	movwf	??_UI& (0+255),b
  7585  000F42  0EE4               	movlw	228
  7586  000F44                     u7767:
  7587  000F44  2EE8               	decfsz	wreg,f,c
  7588  000F46  D7FE               	bra	u7767
  7589  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7590  000F4A  D7FC               	bra	u7767
  7591  000F4C  F000               	nop	
  7592                           
  7593                           ;UI.c: 182: lcdInst(0b10000000);;
  7594  000F4E  0E80               	movlw	128
  7595  000F50  EC14  F025         	call	_lcdInst
  7596                           
  7597                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7598  000F54  0E3C               	movlw	low STR_24
  7599  000F56  0100               	movlb	0	; () banked
  7600  000F58  6F8E               	movwf	printf@f& (0+255),b
  7601  000F5A  0EFD               	movlw	high STR_24
  7602  000F5C  0100               	movlb	0	; () banked
  7603  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7604  000F60  ECB8  F008         	call	_printf	;wreg free
  7605                           
  7606                           ;UI.c: 184: lcdInst(0b11000000);;
  7607  000F64  0EC0               	movlw	192
  7608  000F66  EC14  F025         	call	_lcdInst
  7609                           
  7610                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7611  000F6A  0E19               	movlw	low STR_25
  7612  000F6C  0100               	movlb	0	; () banked
  7613  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7614  000F70  0EFE               	movlw	high STR_25
  7615  000F72  0100               	movlb	0	; () banked
  7616  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7617  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7618  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7619  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7620  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7621  000F86  ECB8  F008         	call	_printf	;wreg free
  7622                           
  7623                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7624  000F8A  0E00               	movlw	0
  7625  000F8C  0100               	movlb	0	; () banked
  7626  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7627  000F90                     l7876:
  7628                           
  7629                           ; BSR set to: 0
  7630  000F90  0E63               	movlw	99
  7631  000F92  0100               	movlb	0	; () banked
  7632  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7633  000F96  D001               	goto	l7880
  7634  000F98  D00C               	goto	l7884
  7635  000F9A                     l7880:
  7636                           
  7637                           ; BSR set to: 0
  7638  000F9A  0E68               	movlw	104
  7639  000F9C  0100               	movlb	0	; () banked
  7640  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7641  000FA0  0EE4               	movlw	228
  7642  000FA2                     u7777:
  7643  000FA2  2EE8               	decfsz	wreg,f,c
  7644  000FA4  D7FE               	bra	u7777
  7645  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7646  000FA8  D7FC               	bra	u7777
  7647  000FAA  F000               	nop	
  7648  000FAC  0100               	movlb	0	; () banked
  7649  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7650  000FB0  D7EF               	goto	l7876
  7651  000FB2                     l7884:
  7652                           
  7653                           ; BSR set to: 0
  7654  000FB2  0100               	movlb	0	; () banked
  7655  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7656  000FB6  0100               	movlb	0	; () banked
  7657  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7658  000FBA  B4D8               	btfsc	status,2,c
  7659  000FBC  0012               	return	
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7663                           
  7664                           ; BSR set to: 0
  7665                           
  7666                           ; BSR set to: 0
  7667  000FBE  0E00               	movlw	0
  7668  000FC0  0100               	movlb	0	; () banked
  7669  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7670  000FC4                     l7890:
  7671                           
  7672                           ; BSR set to: 0
  7673  000FC4  0E63               	movlw	99
  7674  000FC6  0100               	movlb	0	; () banked
  7675  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7676  000FCA  D001               	goto	l7894
  7677  000FCC  D00C               	goto	l7898
  7678  000FCE                     l7894:
  7679                           
  7680                           ; BSR set to: 0
  7681  000FCE  0E68               	movlw	104
  7682  000FD0  0100               	movlb	0	; () banked
  7683  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7684  000FD4  0EE4               	movlw	228
  7685  000FD6                     u7787:
  7686  000FD6  2EE8               	decfsz	wreg,f,c
  7687  000FD8  D7FE               	bra	u7787
  7688  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7689  000FDC  D7FC               	bra	u7787
  7690  000FDE  F000               	nop	
  7691  000FE0  0100               	movlb	0	; () banked
  7692  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7693  000FE4  D7EF               	goto	l7890
  7694  000FE6                     l7898:
  7695                           
  7696                           ; BSR set to: 0
  7697  000FE6  0100               	movlb	0	; () banked
  7698  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7699  000FEA  0100               	movlb	0	; () banked
  7700  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7701  000FEE  B4D8               	btfsc	status,2,c
  7702  000FF0  0012               	return	
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7706                           
  7707                           ; BSR set to: 0
  7708                           
  7709                           ; BSR set to: 0
  7710  000FF2  0E01               	movlw	1
  7711  000FF4  EC14  F025         	call	_lcdInst
  7712  000FF8  0E68               	movlw	104
  7713  000FFA  0100               	movlb	0	; () banked
  7714  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7715  000FFE  0EE4               	movlw	228
  7716  001000                     u7797:
  7717  001000  2EE8               	decfsz	wreg,f,c
  7718  001002  D7FE               	bra	u7797
  7719  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7720  001006  D7FC               	bra	u7797
  7721  001008  F000               	nop	
  7722                           
  7723                           ;UI.c: 191: lcdInst(0b10000000);;
  7724  00100A  0E80               	movlw	128
  7725  00100C  EC14  F025         	call	_lcdInst
  7726                           
  7727                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7728  001010  0E4D               	movlw	low STR_26
  7729  001012  0100               	movlb	0	; () banked
  7730  001014  6F8E               	movwf	printf@f& (0+255),b
  7731  001016  0EFD               	movlw	high STR_26
  7732  001018  0100               	movlb	0	; () banked
  7733  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7734  00101C  ECB8  F008         	call	_printf	;wreg free
  7735                           
  7736                           ;UI.c: 193: lcdInst(0b11000000);;
  7737  001020  0EC0               	movlw	192
  7738  001022  EC14  F025         	call	_lcdInst
  7739                           
  7740                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7741  001026  0E08               	movlw	low STR_27
  7742  001028  0100               	movlb	0	; () banked
  7743  00102A  6F8E               	movwf	printf@f& (0+255),b
  7744  00102C  0EFE               	movlw	high STR_27
  7745  00102E  0100               	movlb	0	; () banked
  7746  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7747  001032  C0EE  F090         	movff	_log_count_can_no_lab,?_printf+2
  7748  001036  C0EF  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7749  00103A  C073  F092         	movff	_log_count_can_w_lab,?_printf+4
  7750  00103E  C074  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7751  001042  ECB8  F008         	call	_printf	;wreg free
  7752                           
  7753                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7754  001046  0E00               	movlw	0
  7755  001048  0100               	movlb	0	; () banked
  7756  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7757  00104C                     l7916:
  7758                           
  7759                           ; BSR set to: 0
  7760  00104C  0E63               	movlw	99
  7761  00104E  0100               	movlb	0	; () banked
  7762  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7763  001052  D001               	goto	l7920
  7764  001054  D00C               	goto	l7924
  7765  001056                     l7920:
  7766                           
  7767                           ; BSR set to: 0
  7768  001056  0E68               	movlw	104
  7769  001058  0100               	movlb	0	; () banked
  7770  00105A  6FC4               	movwf	??_UI& (0+255),b
  7771  00105C  0EE4               	movlw	228
  7772  00105E                     u7807:
  7773  00105E  2EE8               	decfsz	wreg,f,c
  7774  001060  D7FE               	bra	u7807
  7775  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7776  001064  D7FC               	bra	u7807
  7777  001066  F000               	nop	
  7778  001068  0100               	movlb	0	; () banked
  7779  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7780  00106C  D7EF               	goto	l7916
  7781  00106E                     l7924:
  7782                           
  7783                           ; BSR set to: 0
  7784  00106E  0100               	movlb	0	; () banked
  7785  001070  51F6               	movf	_logstate& (0+255),w,b
  7786  001072  0100               	movlb	0	; () banked
  7787  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7788  001076  B4D8               	btfsc	status,2,c
  7789  001078  0012               	return	
  7790                           
  7791                           ; BSR set to: 0
  7792                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7793                           
  7794                           ; BSR set to: 0
  7795                           
  7796                           ; BSR set to: 0
  7797  00107A  0E00               	movlw	0
  7798  00107C  0100               	movlb	0	; () banked
  7799  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7800  001080                     l7930:
  7801                           
  7802                           ; BSR set to: 0
  7803  001080  0E63               	movlw	99
  7804  001082  0100               	movlb	0	; () banked
  7805  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7806  001086  D001               	goto	l7934
  7807  001088  D00C               	goto	l7938
  7808  00108A                     l7934:
  7809                           
  7810                           ; BSR set to: 0
  7811  00108A  0E68               	movlw	104
  7812  00108C  0100               	movlb	0	; () banked
  7813  00108E  6FC4               	movwf	??_UI& (0+255),b
  7814  001090  0EE4               	movlw	228
  7815  001092                     u7817:
  7816  001092  2EE8               	decfsz	wreg,f,c
  7817  001094  D7FE               	bra	u7817
  7818  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7819  001098  D7FC               	bra	u7817
  7820  00109A  F000               	nop	
  7821  00109C  0100               	movlb	0	; () banked
  7822  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7823  0010A0  D7EF               	goto	l7930
  7824  0010A2                     l7938:
  7825                           
  7826                           ; BSR set to: 0
  7827  0010A2  0100               	movlb	0	; () banked
  7828  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7829  0010A6  0100               	movlb	0	; () banked
  7830  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7831  0010AA  B4D8               	btfsc	status,2,c
  7832  0010AC  0012               	return	
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7836                           
  7837                           ; BSR set to: 0
  7838                           
  7839                           ; BSR set to: 0
  7840  0010AE  0E01               	movlw	1
  7841  0010B0  EC14  F025         	call	_lcdInst
  7842  0010B4  0E68               	movlw	104
  7843  0010B6  0100               	movlb	0	; () banked
  7844  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7845  0010BA  0EE4               	movlw	228
  7846  0010BC                     u7827:
  7847  0010BC  2EE8               	decfsz	wreg,f,c
  7848  0010BE  D7FE               	bra	u7827
  7849  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7850  0010C2  D7FC               	bra	u7827
  7851  0010C4  F000               	nop	
  7852                           
  7853                           ;UI.c: 200: lcdInst(0b10000000);;
  7854  0010C6  0E80               	movlw	128
  7855  0010C8  EC14  F025         	call	_lcdInst
  7856                           
  7857                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7858  0010CC  0E5E               	movlw	low STR_28
  7859  0010CE  0100               	movlb	0	; () banked
  7860  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7861  0010D2  0EFD               	movlw	high STR_28
  7862  0010D4  0100               	movlb	0	; () banked
  7863  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7864  0010D8  ECB8  F008         	call	_printf	;wreg free
  7865                           
  7866                           ;UI.c: 202: lcdInst(0b11000000);;
  7867  0010DC  0EC0               	movlw	192
  7868  0010DE  EC14  F025         	call	_lcdInst
  7869                           
  7870                           ;UI.c: 203: printf("%d", log_count_total);
  7871  0010E2  0E16               	movlw	low (STR_27+14)
  7872  0010E4  0100               	movlb	0	; () banked
  7873  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7874  0010E8  0EFE               	movlw	high (STR_27+14)
  7875  0010EA  0100               	movlb	0	; () banked
  7876  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7877  0010EE  C075  F090         	movff	_log_count_total,?_printf+2
  7878  0010F2  C076  F091         	movff	_log_count_total+1,?_printf+3
  7879  0010F6  ECB8  F008         	call	_printf	;wreg free
  7880                           
  7881                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7882  0010FA  0E00               	movlw	0
  7883  0010FC  0100               	movlb	0	; () banked
  7884  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7885  001100                     l7956:
  7886                           
  7887                           ; BSR set to: 0
  7888  001100  0E63               	movlw	99
  7889  001102  0100               	movlb	0	; () banked
  7890  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7891  001106  D001               	goto	l7960
  7892  001108  D00C               	goto	l7964
  7893  00110A                     l7960:
  7894                           
  7895                           ; BSR set to: 0
  7896  00110A  0E68               	movlw	104
  7897  00110C  0100               	movlb	0	; () banked
  7898  00110E  6FC4               	movwf	??_UI& (0+255),b
  7899  001110  0EE4               	movlw	228
  7900  001112                     u7837:
  7901  001112  2EE8               	decfsz	wreg,f,c
  7902  001114  D7FE               	bra	u7837
  7903  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7904  001118  D7FC               	bra	u7837
  7905  00111A  F000               	nop	
  7906  00111C  0100               	movlb	0	; () banked
  7907  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7908  001120  D7EF               	goto	l7956
  7909  001122                     l7964:
  7910                           
  7911                           ; BSR set to: 0
  7912  001122  0100               	movlb	0	; () banked
  7913  001124  51F6               	movf	_logstate& (0+255),w,b
  7914  001126  0100               	movlb	0	; () banked
  7915  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7916  00112A  B4D8               	btfsc	status,2,c
  7917  00112C  0012               	return	
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7921                           
  7922                           ; BSR set to: 0
  7923                           
  7924                           ; BSR set to: 0
  7925  00112E  0E00               	movlw	0
  7926  001130  0100               	movlb	0	; () banked
  7927  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7928  001134                     l7970:
  7929                           
  7930                           ; BSR set to: 0
  7931  001134  0E63               	movlw	99
  7932  001136  0100               	movlb	0	; () banked
  7933  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7934  00113A  D001               	goto	l7974
  7935  00113C  D00C               	goto	l7978
  7936  00113E                     l7974:
  7937                           
  7938                           ; BSR set to: 0
  7939  00113E  0E68               	movlw	104
  7940  001140  0100               	movlb	0	; () banked
  7941  001142  6FC4               	movwf	??_UI& (0+255),b
  7942  001144  0EE4               	movlw	228
  7943  001146                     u7847:
  7944  001146  2EE8               	decfsz	wreg,f,c
  7945  001148  D7FE               	bra	u7847
  7946  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7947  00114C  D7FC               	bra	u7847
  7948  00114E  F000               	nop	
  7949  001150  0100               	movlb	0	; () banked
  7950  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7951  001154  D7EF               	goto	l7970
  7952  001156                     l7978:
  7953                           
  7954                           ; BSR set to: 0
  7955  001156  0100               	movlb	0	; () banked
  7956  001158  51F6               	movf	_logstate& (0+255),w,b
  7957  00115A  0100               	movlb	0	; () banked
  7958  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7959  00115E  B4D8               	btfsc	status,2,c
  7960  001160  0012               	return	
  7961  001162                     l7982:
  7962  001162  0100               	movlb	0	; () banked
  7963  001164  51F6               	movf	_logstate& (0+255),w,b
  7964  001166  0100               	movlb	0	; () banked
  7965  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7966  00116A  B4D8               	btfsc	status,2,c
  7967  00116C  0012               	return	
  7968  00116E  D44A               	goto	l7678
  7969  001170                     __end_of_UI:
  7970                           	opt stack 0
  7971                           tblptru	equ	0xFF8
  7972                           tblptrh	equ	0xFF7
  7973                           tblptrl	equ	0xFF6
  7974                           tablat	equ	0xFF5
  7975                           prodh	equ	0xFF4
  7976                           prodl	equ	0xFF3
  7977                           intcon	equ	0xFF2
  7978                           intcon2	equ	0xFF1
  7979                           intcon3	equ	0xFF0
  7980                           postinc0	equ	0xFEE
  7981                           wreg	equ	0xFE8
  7982                           postdec1	equ	0xFE5
  7983                           fsr1l	equ	0xFE1
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           postdec2	equ	0xFDD
  7987                           fsr2h	equ	0xFDA
  7988                           fsr2l	equ	0xFD9
  7989                           status	equ	0xFD8
  7990                           
  7991 ;; *************** function _printRTC *****************
  7992 ;; Defined at:
  7993 ;;		line 63 in file "RTC.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;		None
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  i               2   66[BANK0 ] int 
  7998 ;;  INT_time       14   46[BANK0 ] int [7]
  7999 ;;  month           4   62[BANK0 ] unsigned char [4]
  8000 ;;  RTC_month       2   60[BANK0 ] int 
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  1    wreg      void 
  8003 ;; Registers used:
  8004 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;Total ram usage:       25 bytes
  8015 ;; Hardware stack levels used:    1
  8016 ;; Hardware stack levels required when called:   10
  8017 ;; This function calls:
  8018 ;;		_getRTC
  8019 ;;		_lcdInst
  8020 ;;		_printf
  8021 ;;		_strcpy
  8022 ;; This function is called by:
  8023 ;;		_UI
  8024 ;;		_change_state_to_menu_start
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           	psect	text24
  8029  001F98                     __ptext24:
  8030                           	opt stack 0
  8031  001F98                     _printRTC:
  8032                           	opt stack 18
  8033                           
  8034                           ;RTC.c: 64: getRTC();
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;incstack = 0
  8038  001F98  EC48  F01E         	call	_getRTC	;wreg free
  8039                           
  8040                           ;RTC.c: 65: char month[] = "MMM";
  8041  001F9C  C137  F0BE         	movff	printRTC@F3217,printRTC@month
  8042  001FA0  C138  F0BF         	movff	printRTC@F3217+1,printRTC@month+1
  8043  001FA4  C139  F0C0         	movff	printRTC@F3217+2,printRTC@month+2
  8044  001FA8  C13A  F0C1         	movff	printRTC@F3217+3,printRTC@month+3
  8045                           
  8046                           ;RTC.c: 66: int INT_time[7];
  8047                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8048  001FAC  0E00               	movlw	0
  8049  001FAE  0100               	movlb	0	; () banked
  8050  001FB0  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8051  001FB2  0E00               	movlw	0
  8052  001FB4  6FC2               	movwf	printRTC@i& (0+255),b
  8053                           
  8054                           ; BSR set to: 0
  8055  001FB6  0100               	movlb	0	; () banked
  8056  001FB8  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8057  001FBA  D008               	goto	l6008
  8058  001FBC  0100               	movlb	0	; () banked
  8059  001FBE  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8060  001FC0  E146               	bnz	l602
  8061  001FC2  0E07               	movlw	7
  8062  001FC4  0100               	movlb	0	; () banked
  8063  001FC6  5DC2               	subwf	printRTC@i& (0+255),w,b
  8064  001FC8  B0D8               	btfsc	status,0,c
  8065  001FCA  D041               	goto	l602
  8066  001FCC                     l6008:
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8070  001FCC  0E24               	movlw	low _time
  8071  001FCE  0100               	movlb	0	; () banked
  8072  001FD0  25C2               	addwf	printRTC@i& (0+255),w,b
  8073  001FD2  6ED9               	movwf	fsr2l,c
  8074  001FD4  0E01               	movlw	high _time
  8075  001FD6  0100               	movlb	0	; () banked
  8076  001FD8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8077  001FDA  6EDA               	movwf	fsr2h,c
  8078  001FDC  50DF               	movf	indf2,w,c
  8079  001FDE  0100               	movlb	0	; () banked
  8080  001FE0  6FAB               	movwf	??_printRTC& (0+255),b
  8081  001FE2  0100               	movlb	0	; () banked
  8082  001FE4  3BAB               	swapf	??_printRTC& (0+255),f,b
  8083  001FE6  0E0F               	movlw	15
  8084  001FE8  17AB               	andwf	??_printRTC& (0+255),f,b
  8085  001FEA  0E0F               	movlw	15
  8086  001FEC  0100               	movlb	0	; () banked
  8087  001FEE  17AB               	andwf	??_printRTC& (0+255),f,b
  8088  001FF0  0100               	movlb	0	; () banked
  8089  001FF2  51AB               	movf	??_printRTC& (0+255),w,b
  8090  001FF4  0D0A               	mullw	10
  8091  001FF6  0E24               	movlw	low _time
  8092  001FF8  0100               	movlb	0	; () banked
  8093  001FFA  25C2               	addwf	printRTC@i& (0+255),w,b
  8094  001FFC  6ED9               	movwf	fsr2l,c
  8095  001FFE  0E01               	movlw	high _time
  8096  002000  0100               	movlb	0	; () banked
  8097  002002  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8098  002004  6EDA               	movwf	fsr2h,c
  8099  002006  50DF               	movf	indf2,w,c
  8100  002008  0B0F               	andlw	15
  8101  00200A  0100               	movlb	0	; () banked
  8102  00200C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8103  00200E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8104  002010  50F3               	movf	prodl,w,c
  8105  002012  0100               	movlb	0	; () banked
  8106  002014  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8107  002016  50F4               	movf	prodh,w,c
  8108  002018  0100               	movlb	0	; () banked
  8109  00201A  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8110  00201C  90D8               	bcf	status,0,c
  8111  00201E  0100               	movlb	0	; () banked
  8112  002020  35C2               	rlcf	printRTC@i& (0+255),w,b
  8113  002022  6ED9               	movwf	fsr2l,c
  8114  002024  0100               	movlb	0	; () banked
  8115  002026  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8116  002028  6EDA               	movwf	fsr2h,c
  8117  00202A  0EAE               	movlw	low printRTC@INT_time
  8118  00202C  26D9               	addwf	fsr2l,f,c
  8119  00202E  0E00               	movlw	high printRTC@INT_time
  8120  002030  22DA               	addwfc	fsr2h,f,c
  8121  002032  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8122  002036  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8123                           
  8124                           ; BSR set to: 0
  8125  00203A  0100               	movlb	0	; () banked
  8126  00203C  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8127  00203E  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8128                           
  8129                           ; BSR set to: 0
  8130  002040  0100               	movlb	0	; () banked
  8131  002042  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8132  002044  D7C3               	goto	l6008
  8133  002046  0100               	movlb	0	; () banked
  8134  002048  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8135  00204A  E101               	bnz	u4670
  8136  00204C  D7BA               	goto	L5
  8137  00204E                     u4670:
  8138  00204E                     l602:
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;RTC.c: 69: }
  8142                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8143  00204E  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8144  002052  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8145                           
  8146                           ;RTC.c: 71: switch(RTC_month){
  8147  002056  D0B4               	goto	l6040
  8148  002058                     l6014:
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;RTC.c: 73: strcpy(month, "JAN");
  8152  002058  0EBE               	movlw	low printRTC@month
  8153  00205A  0100               	movlb	0	; () banked
  8154  00205C  6F80               	movwf	strcpy@to& (0+255),b
  8155  00205E  0E00               	movlw	high printRTC@month
  8156  002060  0100               	movlb	0	; () banked
  8157  002062  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8158  002064  0EDB               	movlw	low STR_8
  8159  002066  0100               	movlb	0	; () banked
  8160  002068  6F82               	movwf	strcpy@from& (0+255),b
  8161  00206A  0EFF               	movlw	high STR_8
  8162  00206C  0100               	movlb	0	; () banked
  8163  00206E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8164  002070  EC80  F022         	call	_strcpy	;wreg free
  8165                           
  8166                           ;RTC.c: 74: break;
  8167  002074  D0D4               	goto	l6042
  8168  002076                     l6016:
  8169                           
  8170                           ;RTC.c: 76: strcpy(month, "FEB");
  8171  002076  0EBE               	movlw	low printRTC@month
  8172  002078  0100               	movlb	0	; () banked
  8173  00207A  6F80               	movwf	strcpy@to& (0+255),b
  8174  00207C  0E00               	movlw	high printRTC@month
  8175  00207E  0100               	movlb	0	; () banked
  8176  002080  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8177  002082  0ECB               	movlw	low STR_9
  8178  002084  0100               	movlb	0	; () banked
  8179  002086  6F82               	movwf	strcpy@from& (0+255),b
  8180  002088  0EFF               	movlw	high STR_9
  8181  00208A  0100               	movlb	0	; () banked
  8182  00208C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8183  00208E  EC80  F022         	call	_strcpy	;wreg free
  8184                           
  8185                           ;RTC.c: 77: break;
  8186  002092  D0C5               	goto	l6042
  8187  002094                     l6018:
  8188                           
  8189                           ;RTC.c: 79: strcpy(month, "MAR");
  8190  002094  0EBE               	movlw	low printRTC@month
  8191  002096  0100               	movlb	0	; () banked
  8192  002098  6F80               	movwf	strcpy@to& (0+255),b
  8193  00209A  0E00               	movlw	high printRTC@month
  8194  00209C  0100               	movlb	0	; () banked
  8195  00209E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8196  0020A0  0EE7               	movlw	low STR_10
  8197  0020A2  0100               	movlb	0	; () banked
  8198  0020A4  6F82               	movwf	strcpy@from& (0+255),b
  8199  0020A6  0EFF               	movlw	high STR_10
  8200  0020A8  0100               	movlb	0	; () banked
  8201  0020AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8202  0020AC  EC80  F022         	call	_strcpy	;wreg free
  8203                           
  8204                           ;RTC.c: 80: break;
  8205  0020B0  D0B6               	goto	l6042
  8206  0020B2                     l6020:
  8207                           
  8208                           ;RTC.c: 82: strcpy(month, "APR");
  8209  0020B2  0EBE               	movlw	low printRTC@month
  8210  0020B4  0100               	movlb	0	; () banked
  8211  0020B6  6F80               	movwf	strcpy@to& (0+255),b
  8212  0020B8  0E00               	movlw	high printRTC@month
  8213  0020BA  0100               	movlb	0	; () banked
  8214  0020BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8215  0020BE  0EEB               	movlw	low STR_11
  8216  0020C0  0100               	movlb	0	; () banked
  8217  0020C2  6F82               	movwf	strcpy@from& (0+255),b
  8218  0020C4  0EFF               	movlw	high STR_11
  8219  0020C6  0100               	movlb	0	; () banked
  8220  0020C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8221  0020CA  EC80  F022         	call	_strcpy	;wreg free
  8222                           
  8223                           ;RTC.c: 83: break;
  8224  0020CE  D0A7               	goto	l6042
  8225  0020D0                     l6022:
  8226                           
  8227                           ;RTC.c: 85: strcpy(month, "MAY");
  8228  0020D0  0EBE               	movlw	low printRTC@month
  8229  0020D2  0100               	movlb	0	; () banked
  8230  0020D4  6F80               	movwf	strcpy@to& (0+255),b
  8231  0020D6  0E00               	movlw	high printRTC@month
  8232  0020D8  0100               	movlb	0	; () banked
  8233  0020DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8234  0020DC  0EFB               	movlw	low STR_12
  8235  0020DE  0100               	movlb	0	; () banked
  8236  0020E0  6F82               	movwf	strcpy@from& (0+255),b
  8237  0020E2  0EFF               	movlw	high STR_12
  8238  0020E4  0100               	movlb	0	; () banked
  8239  0020E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8240  0020E8  EC80  F022         	call	_strcpy	;wreg free
  8241                           
  8242                           ;RTC.c: 86: break;
  8243  0020EC  D098               	goto	l6042
  8244  0020EE                     l6024:
  8245                           
  8246                           ;RTC.c: 88: strcpy(month, "JUN");
  8247  0020EE  0EBE               	movlw	low printRTC@month
  8248  0020F0  0100               	movlb	0	; () banked
  8249  0020F2  6F80               	movwf	strcpy@to& (0+255),b
  8250  0020F4  0E00               	movlw	high printRTC@month
  8251  0020F6  0100               	movlb	0	; () banked
  8252  0020F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8253  0020FA  0EDF               	movlw	low STR_13
  8254  0020FC  0100               	movlb	0	; () banked
  8255  0020FE  6F82               	movwf	strcpy@from& (0+255),b
  8256  002100  0EFF               	movlw	high STR_13
  8257  002102  0100               	movlb	0	; () banked
  8258  002104  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8259  002106  EC80  F022         	call	_strcpy	;wreg free
  8260                           
  8261                           ;RTC.c: 89: break;
  8262  00210A  D089               	goto	l6042
  8263  00210C                     l6026:
  8264                           
  8265                           ;RTC.c: 91: strcpy(month, "JUL");
  8266  00210C  0EBE               	movlw	low printRTC@month
  8267  00210E  0100               	movlb	0	; () banked
  8268  002110  6F80               	movwf	strcpy@to& (0+255),b
  8269  002112  0E00               	movlw	high printRTC@month
  8270  002114  0100               	movlb	0	; () banked
  8271  002116  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8272  002118  0ED7               	movlw	low STR_14
  8273  00211A  0100               	movlb	0	; () banked
  8274  00211C  6F82               	movwf	strcpy@from& (0+255),b
  8275  00211E  0EFF               	movlw	high STR_14
  8276  002120  0100               	movlb	0	; () banked
  8277  002122  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8278  002124  EC80  F022         	call	_strcpy	;wreg free
  8279                           
  8280                           ;RTC.c: 92: break;
  8281  002128  D07A               	goto	l6042
  8282  00212A                     l6028:
  8283                           
  8284                           ;RTC.c: 94: strcpy(month, "AUG");
  8285  00212A  0EBE               	movlw	low printRTC@month
  8286  00212C  0100               	movlb	0	; () banked
  8287  00212E  6F80               	movwf	strcpy@to& (0+255),b
  8288  002130  0E00               	movlw	high printRTC@month
  8289  002132  0100               	movlb	0	; () banked
  8290  002134  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8291  002136  0ED3               	movlw	low STR_15
  8292  002138  0100               	movlb	0	; () banked
  8293  00213A  6F82               	movwf	strcpy@from& (0+255),b
  8294  00213C  0EFF               	movlw	high STR_15
  8295  00213E  0100               	movlb	0	; () banked
  8296  002140  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8297  002142  EC80  F022         	call	_strcpy	;wreg free
  8298                           
  8299                           ;RTC.c: 95: break;
  8300  002146  D06B               	goto	l6042
  8301  002148                     l6030:
  8302                           
  8303                           ;RTC.c: 97: strcpy(month, "SEP");
  8304  002148  0EBE               	movlw	low printRTC@month
  8305  00214A  0100               	movlb	0	; () banked
  8306  00214C  6F80               	movwf	strcpy@to& (0+255),b
  8307  00214E  0E00               	movlw	high printRTC@month
  8308  002150  0100               	movlb	0	; () banked
  8309  002152  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8310  002154  0EE3               	movlw	low STR_16
  8311  002156  0100               	movlb	0	; () banked
  8312  002158  6F82               	movwf	strcpy@from& (0+255),b
  8313  00215A  0EFF               	movlw	high STR_16
  8314  00215C  0100               	movlb	0	; () banked
  8315  00215E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8316  002160  EC80  F022         	call	_strcpy	;wreg free
  8317                           
  8318                           ;RTC.c: 98: break;
  8319  002164  D05C               	goto	l6042
  8320  002166                     l6032:
  8321                           
  8322                           ;RTC.c: 100: strcpy(month, "OCT");
  8323  002166  0EBE               	movlw	low printRTC@month
  8324  002168  0100               	movlb	0	; () banked
  8325  00216A  6F80               	movwf	strcpy@to& (0+255),b
  8326  00216C  0E00               	movlw	high printRTC@month
  8327  00216E  0100               	movlb	0	; () banked
  8328  002170  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8329  002172  0EF3               	movlw	low STR_17
  8330  002174  0100               	movlb	0	; () banked
  8331  002176  6F82               	movwf	strcpy@from& (0+255),b
  8332  002178  0EFF               	movlw	high STR_17
  8333  00217A  0100               	movlb	0	; () banked
  8334  00217C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8335  00217E  EC80  F022         	call	_strcpy	;wreg free
  8336                           
  8337                           ;RTC.c: 101: break;
  8338  002182  D04D               	goto	l6042
  8339  002184                     l6034:
  8340                           
  8341                           ;RTC.c: 103: strcpy(month, "NOV");
  8342  002184  0EBE               	movlw	low printRTC@month
  8343  002186  0100               	movlb	0	; () banked
  8344  002188  6F80               	movwf	strcpy@to& (0+255),b
  8345  00218A  0E00               	movlw	high printRTC@month
  8346  00218C  0100               	movlb	0	; () banked
  8347  00218E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8348  002190  0EF7               	movlw	low STR_18
  8349  002192  0100               	movlb	0	; () banked
  8350  002194  6F82               	movwf	strcpy@from& (0+255),b
  8351  002196  0EFF               	movlw	high STR_18
  8352  002198  0100               	movlb	0	; () banked
  8353  00219A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8354  00219C  EC80  F022         	call	_strcpy	;wreg free
  8355                           
  8356                           ;RTC.c: 104: break;
  8357  0021A0  D03E               	goto	l6042
  8358  0021A2                     l6036:
  8359                           
  8360                           ;RTC.c: 106: strcpy(month, "DEC");
  8361  0021A2  0EBE               	movlw	low printRTC@month
  8362  0021A4  0100               	movlb	0	; () banked
  8363  0021A6  6F80               	movwf	strcpy@to& (0+255),b
  8364  0021A8  0E00               	movlw	high printRTC@month
  8365  0021AA  0100               	movlb	0	; () banked
  8366  0021AC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8367  0021AE  0ECF               	movlw	low STR_19
  8368  0021B0  0100               	movlb	0	; () banked
  8369  0021B2  6F82               	movwf	strcpy@from& (0+255),b
  8370  0021B4  0EFF               	movlw	high STR_19
  8371  0021B6  0100               	movlb	0	; () banked
  8372  0021B8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8373  0021BA  EC80  F022         	call	_strcpy	;wreg free
  8374                           
  8375                           ;RTC.c: 108: }
  8376                           
  8377                           ;RTC.c: 107: break;
  8378  0021BE  D02F               	goto	l6042
  8379  0021C0                     l6040:
  8380  0021C0  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8381  0021C4  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8382                           
  8383                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8384                           ; Switch size 1, requested type "space"
  8385                           ; Number of cases is 1, Range of values is 0 to 0
  8386                           ; switch strategies available:
  8387                           ; Name         Instructions Cycles
  8388                           ; simple_byte            4     3 (average)
  8389                           ;	Chosen strategy is simple_byte
  8390  0021C8  0100               	movlb	0	; () banked
  8391  0021CA  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8392  0021CC  0A00               	xorlw	0	; case 0
  8393  0021CE  A4D8               	btfss	status,2,c
  8394  0021D0  D026               	goto	l6042
  8395                           
  8396                           ; BSR set to: 0
  8397                           ; Switch size 1, requested type "space"
  8398                           ; Number of cases is 12, Range of values is 1 to 12
  8399                           ; switch strategies available:
  8400                           ; Name         Instructions Cycles
  8401                           ; simple_byte           37    19 (average)
  8402                           ;	Chosen strategy is simple_byte
  8403  0021D2  0100               	movlb	0	; () banked
  8404  0021D4  51AB               	movf	??_printRTC& (0+255),w,b
  8405  0021D6  0A01               	xorlw	1	; case 1
  8406  0021D8  B4D8               	btfsc	status,2,c
  8407  0021DA  D73E               	goto	l6014
  8408  0021DC  0A03               	xorlw	3	; case 2
  8409  0021DE  B4D8               	btfsc	status,2,c
  8410  0021E0  D74A               	goto	l6016
  8411  0021E2  0A01               	xorlw	1	; case 3
  8412  0021E4  B4D8               	btfsc	status,2,c
  8413  0021E6  D756               	goto	l6018
  8414  0021E8  0A07               	xorlw	7	; case 4
  8415  0021EA  B4D8               	btfsc	status,2,c
  8416  0021EC  D762               	goto	l6020
  8417  0021EE  0A01               	xorlw	1	; case 5
  8418  0021F0  B4D8               	btfsc	status,2,c
  8419  0021F2  D76E               	goto	l6022
  8420  0021F4  0A03               	xorlw	3	; case 6
  8421  0021F6  B4D8               	btfsc	status,2,c
  8422  0021F8  D77A               	goto	l6024
  8423  0021FA  0A01               	xorlw	1	; case 7
  8424  0021FC  B4D8               	btfsc	status,2,c
  8425  0021FE  D786               	goto	l6026
  8426  002200  0A0F               	xorlw	15	; case 8
  8427  002202  B4D8               	btfsc	status,2,c
  8428  002204  D792               	goto	l6028
  8429  002206  0A01               	xorlw	1	; case 9
  8430  002208  B4D8               	btfsc	status,2,c
  8431  00220A  D79E               	goto	l6030
  8432  00220C  0A03               	xorlw	3	; case 10
  8433  00220E  B4D8               	btfsc	status,2,c
  8434  002210  D7AA               	goto	l6032
  8435  002212  0A01               	xorlw	1	; case 11
  8436  002214  B4D8               	btfsc	status,2,c
  8437  002216  D7B6               	goto	l6034
  8438  002218  0A07               	xorlw	7	; case 12
  8439  00221A  B4D8               	btfsc	status,2,c
  8440  00221C  D7C2               	goto	l6036
  8441  00221E                     l6042:
  8442                           
  8443                           ;RTC.c: 109: lcdInst(0b10000000);;
  8444  00221E  0E80               	movlw	128
  8445  002220  EC14  F025         	call	_lcdInst
  8446                           
  8447                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8448  002224  0E1C               	movlw	low STR_21
  8449  002226  0100               	movlb	0	; () banked
  8450  002228  6F8E               	movwf	printf@f& (0+255),b
  8451  00222A  0EFB               	movlw	high STR_21
  8452  00222C  0100               	movlb	0	; () banked
  8453  00222E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8454  002230  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8455  002234  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8456  002238  0EBE               	movlw	low printRTC@month
  8457  00223A  0100               	movlb	0	; () banked
  8458  00223C  6F92               	movwf	(?_printf+4)& (0+255),b
  8459  00223E  0E00               	movlw	high printRTC@month
  8460  002240  0100               	movlb	0	; () banked
  8461  002242  6F93               	movwf	(?_printf+5)& (0+255),b
  8462  002244  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8463  002248  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8464  00224C  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8465  002250  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8466  002254  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8467  002258  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8468  00225C  ECB8  F008         	call	_printf	;wreg free
  8469  002260  0012               	return		;funcret
  8470  002262                     __end_of_printRTC:
  8471                           	opt stack 0
  8472                           tblptru	equ	0xFF8
  8473                           tblptrh	equ	0xFF7
  8474                           tblptrl	equ	0xFF6
  8475                           tablat	equ	0xFF5
  8476                           prodh	equ	0xFF4
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           intcon2	equ	0xFF1
  8480                           intcon3	equ	0xFF0
  8481                           postinc0	equ	0xFEE
  8482                           wreg	equ	0xFE8
  8483                           postdec1	equ	0xFE5
  8484                           fsr1l	equ	0xFE1
  8485                           indf2	equ	0xFDF
  8486                           postinc2	equ	0xFDE
  8487                           postdec2	equ	0xFDD
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492 ;; *************** function _strcpy *****************
  8493 ;; Defined at:
  8494 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8497 ;;		 -> printRTC@month(4), UI@month(4), 
  8498 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8499 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8500 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8501 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8502 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8503 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8504 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8505 ;;		 -> STR_8(4), 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8508 ;;		 -> printRTC@month(4), UI@month(4), 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;                  2    0[BANK0 ] PTR unsigned char 
  8511 ;; Registers used:
  8512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8518 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;Total ram usage:        6 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    7
  8525 ;; This function calls:
  8526 ;;		Nothing
  8527 ;; This function is called by:
  8528 ;;		_UI
  8529 ;;		_printRTC
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           	psect	text25
  8534  004500                     __ptext25:
  8535                           	opt stack 0
  8536  004500                     _strcpy:
  8537                           	opt stack 20
  8538                           
  8539                           ;incstack = 0
  8540  004500  C080  F084         	movff	strcpy@to,strcpy@cp
  8541  004504  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8542  004508  D006               	goto	l5752
  8543  00450A                     l5750:
  8544  00450A  0100               	movlb	0	; () banked
  8545  00450C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8546  00450E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8547  004510  0100               	movlb	0	; () banked
  8548  004512  4B82               	infsnz	strcpy@from& (0+255),f,b
  8549  004514  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8550  004516                     l5752:
  8551  004516  C082  FFF6         	movff	strcpy@from,tblptrl
  8552  00451A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8553  00451E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8554  00451E  6AF8               	clrf	tblptru,c
  8555  004520                     	endif
  8556  004520                     	if	0	;tblptru may be non-zero
  8557  004520                     	endif
  8558  004520  C084  FFD9         	movff	strcpy@cp,fsr2l
  8559  004524  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8560  004528  0008               	tblrd		*
  8561  00452A  CFF5 FFDF          	movff	tablat,indf2
  8562  00452E  50DF               	movf	indf2,w,c
  8563  004530  B4D8               	btfsc	status,2,c
  8564  004532  0012               	return	
  8565  004534  D7EA               	goto	l5750
  8566  004536                     __end_of_strcpy:
  8567                           	opt stack 0
  8568                           tblptru	equ	0xFF8
  8569                           tblptrh	equ	0xFF7
  8570                           tblptrl	equ	0xFF6
  8571                           tablat	equ	0xFF5
  8572                           prodh	equ	0xFF4
  8573                           prodl	equ	0xFF3
  8574                           intcon	equ	0xFF2
  8575                           intcon2	equ	0xFF1
  8576                           intcon3	equ	0xFF0
  8577                           postinc0	equ	0xFEE
  8578                           wreg	equ	0xFE8
  8579                           postdec1	equ	0xFE5
  8580                           fsr1l	equ	0xFE1
  8581                           indf2	equ	0xFDF
  8582                           postinc2	equ	0xFDE
  8583                           postdec2	equ	0xFDD
  8584                           fsr2h	equ	0xFDA
  8585                           fsr2l	equ	0xFD9
  8586                           status	equ	0xFD8
  8587                           
  8588 ;; *************** function _getRTC *****************
  8589 ;; Defined at:
  8590 ;;		line 44 in file "RTC.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;		None
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;  i               2    3[BANK0 ] int 
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  1    wreg      void 
  8597 ;; Registers used:
  8598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;Total ram usage:        2 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    9
  8611 ;; This function calls:
  8612 ;;		_I2C_Master_Read
  8613 ;;		_I2C_Master_Start
  8614 ;;		_I2C_Master_Stop
  8615 ;;		_I2C_Master_Write
  8616 ;; This function is called by:
  8617 ;;		_printRTC
  8618 ;;		_initSortTimer
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           	psect	text26
  8623  003C90                     __ptext26:
  8624                           	opt stack 0
  8625  003C90                     _getRTC:
  8626                           	opt stack 18
  8627                           
  8628                           ;RTC.c: 48: I2C_Master_Start();
  8629                           
  8630                           ;incstack = 0
  8631  003C90  EC3A  F025         	call	_I2C_Master_Start	;wreg free
  8632                           
  8633                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8634  003C94  0E00               	movlw	0
  8635  003C96  0100               	movlb	0	; () banked
  8636  003C98  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8637  003C9A  0ED0               	movlw	208
  8638  003C9C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8639  003C9E  EC28  F025         	call	_I2C_Master_Write	;wreg free
  8640                           
  8641                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8642  003CA2  0E00               	movlw	0
  8643  003CA4  0100               	movlb	0	; () banked
  8644  003CA6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8645  003CA8  0E00               	movlw	0
  8646  003CAA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8647  003CAC  EC28  F025         	call	_I2C_Master_Write	;wreg free
  8648                           
  8649                           ;RTC.c: 51: I2C_Master_Stop();
  8650  003CB0  EC36  F025         	call	_I2C_Master_Stop	;wreg free
  8651                           
  8652                           ;RTC.c: 54: I2C_Master_Start();
  8653  003CB4  EC3A  F025         	call	_I2C_Master_Start	;wreg free
  8654                           
  8655                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8656  003CB8  0E00               	movlw	0
  8657  003CBA  0100               	movlb	0	; () banked
  8658  003CBC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8659  003CBE  0ED1               	movlw	209
  8660  003CC0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8661  003CC2  EC28  F025         	call	_I2C_Master_Write	;wreg free
  8662                           
  8663                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8664  003CC6  0E00               	movlw	0
  8665  003CC8  0100               	movlb	0	; () banked
  8666  003CCA  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8667  003CCC  0E00               	movlw	0
  8668  003CCE  6F83               	movwf	getRTC@i& (0+255),b
  8669  003CD0                     l5758:
  8670                           
  8671                           ; BSR set to: 0
  8672  003CD0  0100               	movlb	0	; () banked
  8673  003CD2  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8674  003CD4  D008               	goto	l5762
  8675  003CD6  0100               	movlb	0	; () banked
  8676  003CD8  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8677  003CDA  E115               	bnz	l5768
  8678  003CDC  0E06               	movlw	6
  8679  003CDE  0100               	movlb	0	; () banked
  8680  003CE0  5D83               	subwf	getRTC@i& (0+255),w,b
  8681  003CE2  B0D8               	btfsc	status,0,c
  8682  003CE4  D010               	goto	l5768
  8683  003CE6                     l5762:
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8687  003CE6  0E24               	movlw	low _time
  8688  003CE8  0100               	movlb	0	; () banked
  8689  003CEA  2583               	addwf	getRTC@i& (0+255),w,b
  8690  003CEC  6ED9               	movwf	fsr2l,c
  8691  003CEE  0E01               	movlw	high _time
  8692  003CF0  0100               	movlb	0	; () banked
  8693  003CF2  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8694  003CF4  6EDA               	movwf	fsr2h,c
  8695  003CF6  0E01               	movlw	1
  8696  003CF8  ECD7  F023         	call	_I2C_Master_Read
  8697  003CFC  6EDF               	movwf	indf2,c
  8698  003CFE  0100               	movlb	0	; () banked
  8699  003D00  4B83               	infsnz	getRTC@i& (0+255),f,b
  8700  003D02  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8701  003D04  D7E5               	goto	l5758
  8702  003D06                     l5768:
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;RTC.c: 58: }
  8706                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8707  003D06  0E00               	movlw	0
  8708  003D08  ECD7  F023         	call	_I2C_Master_Read
  8709  003D0C  0101               	movlb	1	; () banked
  8710  003D0E  6F2A               	movwf	(_time+6)& (0+255),b
  8711                           
  8712                           ;RTC.c: 60: I2C_Master_Stop();
  8713  003D10  EC36  F025         	call	_I2C_Master_Stop	;wreg free
  8714  003D14  0012               	return		;funcret
  8715  003D16                     __end_of_getRTC:
  8716                           	opt stack 0
  8717                           tblptru	equ	0xFF8
  8718                           tblptrh	equ	0xFF7
  8719                           tblptrl	equ	0xFF6
  8720                           tablat	equ	0xFF5
  8721                           prodh	equ	0xFF4
  8722                           prodl	equ	0xFF3
  8723                           intcon	equ	0xFF2
  8724                           intcon2	equ	0xFF1
  8725                           intcon3	equ	0xFF0
  8726                           postinc0	equ	0xFEE
  8727                           wreg	equ	0xFE8
  8728                           postdec1	equ	0xFE5
  8729                           fsr1l	equ	0xFE1
  8730                           indf2	equ	0xFDF
  8731                           postinc2	equ	0xFDE
  8732                           postdec2	equ	0xFDD
  8733                           fsr2h	equ	0xFDA
  8734                           fsr2l	equ	0xFD9
  8735                           status	equ	0xFD8
  8736                           
  8737 ;; *************** function _I2C_Master_Write *****************
  8738 ;; Defined at:
  8739 ;;		line 49 in file "I2C.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;  d               2    1[BANK0 ] unsigned int 
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;		None
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  1    wreg      void 
  8746 ;; Registers used:
  8747 ;;		wreg, status,2, status,0, cstack
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8753 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8756 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8757 ;;Total ram usage:        2 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    8
  8760 ;; This function calls:
  8761 ;;		_I2C_Master_Wait
  8762 ;; This function is called by:
  8763 ;;		_loadRTC
  8764 ;;		_getRTC
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text27
  8769  004A50                     __ptext27:
  8770                           	opt stack 0
  8771  004A50                     _I2C_Master_Write:
  8772                           	opt stack 18
  8773                           
  8774                           ;I2C.c: 51: I2C_Master_Wait();
  8775                           
  8776                           ;incstack = 0
  8777  004A50  ECF9  F024         	call	_I2C_Master_Wait	;wreg free
  8778                           
  8779                           ;I2C.c: 52: SSPBUF = d;
  8780  004A54  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8781  004A58  0012               	return		;funcret
  8782  004A5A                     __end_of_I2C_Master_Write:
  8783                           	opt stack 0
  8784                           tblptru	equ	0xFF8
  8785                           tblptrh	equ	0xFF7
  8786                           tblptrl	equ	0xFF6
  8787                           tablat	equ	0xFF5
  8788                           prodh	equ	0xFF4
  8789                           prodl	equ	0xFF3
  8790                           intcon	equ	0xFF2
  8791                           intcon2	equ	0xFF1
  8792                           intcon3	equ	0xFF0
  8793                           postinc0	equ	0xFEE
  8794                           wreg	equ	0xFE8
  8795                           postdec1	equ	0xFE5
  8796                           fsr1l	equ	0xFE1
  8797                           indf2	equ	0xFDF
  8798                           postinc2	equ	0xFDE
  8799                           postdec2	equ	0xFDD
  8800                           fsr2h	equ	0xFDA
  8801                           fsr2l	equ	0xFD9
  8802                           status	equ	0xFD8
  8803                           
  8804 ;; *************** function _I2C_Master_Stop *****************
  8805 ;; Defined at:
  8806 ;;		line 43 in file "I2C.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;		None
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;		None
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      void 
  8813 ;; Registers used:
  8814 ;;		wreg, status,2, status,0, cstack
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;Total ram usage:        0 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    8
  8827 ;; This function calls:
  8828 ;;		_I2C_Master_Wait
  8829 ;; This function is called by:
  8830 ;;		_loadRTC
  8831 ;;		_getRTC
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           	psect	text28
  8836  004A6C                     __ptext28:
  8837                           	opt stack 0
  8838  004A6C                     _I2C_Master_Stop:
  8839                           	opt stack 18
  8840                           
  8841                           ;I2C.c: 45: I2C_Master_Wait();
  8842                           
  8843                           ;incstack = 0
  8844  004A6C  ECF9  F024         	call	_I2C_Master_Wait	;wreg free
  8845                           
  8846                           ;I2C.c: 46: PEN = 1;
  8847  004A70  84C5               	bsf	4037,2,c	;volatile
  8848  004A72  0012               	return		;funcret
  8849  004A74                     __end_of_I2C_Master_Stop:
  8850                           	opt stack 0
  8851                           tblptru	equ	0xFF8
  8852                           tblptrh	equ	0xFF7
  8853                           tblptrl	equ	0xFF6
  8854                           tablat	equ	0xFF5
  8855                           prodh	equ	0xFF4
  8856                           prodl	equ	0xFF3
  8857                           intcon	equ	0xFF2
  8858                           intcon2	equ	0xFF1
  8859                           intcon3	equ	0xFF0
  8860                           postinc0	equ	0xFEE
  8861                           wreg	equ	0xFE8
  8862                           postdec1	equ	0xFE5
  8863                           fsr1l	equ	0xFE1
  8864                           indf2	equ	0xFDF
  8865                           postinc2	equ	0xFDE
  8866                           postdec2	equ	0xFDD
  8867                           fsr2h	equ	0xFDA
  8868                           fsr2l	equ	0xFD9
  8869                           status	equ	0xFD8
  8870                           
  8871 ;; *************** function _I2C_Master_Start *****************
  8872 ;; Defined at:
  8873 ;;		line 31 in file "I2C.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, status,2, status,0, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;Total ram usage:        0 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    8
  8894 ;; This function calls:
  8895 ;;		_I2C_Master_Wait
  8896 ;; This function is called by:
  8897 ;;		_loadRTC
  8898 ;;		_getRTC
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           	psect	text29
  8903  004A74                     __ptext29:
  8904                           	opt stack 0
  8905  004A74                     _I2C_Master_Start:
  8906                           	opt stack 18
  8907                           
  8908                           ;I2C.c: 33: I2C_Master_Wait();
  8909                           
  8910                           ;incstack = 0
  8911  004A74  ECF9  F024         	call	_I2C_Master_Wait	;wreg free
  8912                           
  8913                           ;I2C.c: 34: SEN = 1;
  8914  004A78  80C5               	bsf	4037,0,c	;volatile
  8915  004A7A  0012               	return		;funcret
  8916  004A7C                     __end_of_I2C_Master_Start:
  8917                           	opt stack 0
  8918                           tblptru	equ	0xFF8
  8919                           tblptrh	equ	0xFF7
  8920                           tblptrl	equ	0xFF6
  8921                           tablat	equ	0xFF5
  8922                           prodh	equ	0xFF4
  8923                           prodl	equ	0xFF3
  8924                           intcon	equ	0xFF2
  8925                           intcon2	equ	0xFF1
  8926                           intcon3	equ	0xFF0
  8927                           postinc0	equ	0xFEE
  8928                           wreg	equ	0xFE8
  8929                           postdec1	equ	0xFE5
  8930                           fsr1l	equ	0xFE1
  8931                           indf2	equ	0xFDF
  8932                           postinc2	equ	0xFDE
  8933                           postdec2	equ	0xFDD
  8934                           fsr2h	equ	0xFDA
  8935                           fsr2l	equ	0xFD9
  8936                           status	equ	0xFD8
  8937                           
  8938 ;; *************** function _I2C_Master_Read *****************
  8939 ;; Defined at:
  8940 ;;		line 55 in file "I2C.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;  a               1    wreg     unsigned char 
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;  a               1    1[BANK0 ] unsigned char 
  8945 ;;  temp            1    2[BANK0 ] unsigned char 
  8946 ;; Return value:  Size  Location     Type
  8947 ;;                  1    wreg      unsigned char 
  8948 ;; Registers used:
  8949 ;;		wreg, status,2, status,0, cstack
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;Total ram usage:        2 bytes
  8960 ;; Hardware stack levels used:    1
  8961 ;; Hardware stack levels required when called:    8
  8962 ;; This function calls:
  8963 ;;		_I2C_Master_Wait
  8964 ;; This function is called by:
  8965 ;;		_getRTC
  8966 ;; This function uses a non-reentrant model
  8967 ;;
  8968                           
  8969                           	psect	text30
  8970  0047AE                     __ptext30:
  8971                           	opt stack 0
  8972  0047AE                     _I2C_Master_Read:
  8973                           	opt stack 18
  8974                           
  8975                           ;incstack = 0
  8976                           ;I2C_Master_Read@a stored from wreg
  8977  0047AE  0100               	movlb	0	; () banked
  8978  0047B0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8979                           
  8980                           ;I2C.c: 57: unsigned char temp;
  8981                           ;I2C.c: 58: I2C_Master_Wait();
  8982  0047B2  ECF9  F024         	call	_I2C_Master_Wait	;wreg free
  8983                           
  8984                           ;I2C.c: 59: RCEN = 1;
  8985  0047B6  86C5               	bsf	4037,3,c	;volatile
  8986                           
  8987                           ;I2C.c: 60: I2C_Master_Wait();
  8988  0047B8  ECF9  F024         	call	_I2C_Master_Wait	;wreg free
  8989                           
  8990                           ;I2C.c: 61: temp = SSPBUF;
  8991  0047BC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8992                           
  8993                           ;I2C.c: 62: I2C_Master_Wait();
  8994  0047C0  ECF9  F024         	call	_I2C_Master_Wait	;wreg free
  8995                           
  8996                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8997  0047C4  0100               	movlb	0	; () banked
  8998  0047C6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8999  0047C8  0100               	movlb	0	; () banked
  9000  0047CA  A4D8               	btfss	status,2,c
  9001  0047CC  D002               	goto	u3760
  9002  0047CE  8AC5               	bsf	4037,5,c	;volatile
  9003  0047D0  D001               	goto	l5446
  9004  0047D2                     u3760:
  9005  0047D2  9AC5               	bcf	4037,5,c	;volatile
  9006  0047D4                     l5446:
  9007                           
  9008                           ;I2C.c: 64: ACKEN = 1;
  9009  0047D4  88C5               	bsf	4037,4,c	;volatile
  9010                           
  9011                           ;I2C.c: 65: return temp;
  9012  0047D6  0100               	movlb	0	; () banked
  9013  0047D8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9014  0047DA  0012               	return	
  9015  0047DC                     __end_of_I2C_Master_Read:
  9016                           	opt stack 0
  9017                           tblptru	equ	0xFF8
  9018                           tblptrh	equ	0xFF7
  9019                           tblptrl	equ	0xFF6
  9020                           tablat	equ	0xFF5
  9021                           prodh	equ	0xFF4
  9022                           prodl	equ	0xFF3
  9023                           intcon	equ	0xFF2
  9024                           intcon2	equ	0xFF1
  9025                           intcon3	equ	0xFF0
  9026                           postinc0	equ	0xFEE
  9027                           wreg	equ	0xFE8
  9028                           postdec1	equ	0xFE5
  9029                           fsr1l	equ	0xFE1
  9030                           indf2	equ	0xFDF
  9031                           postinc2	equ	0xFDE
  9032                           postdec2	equ	0xFDD
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function _I2C_Master_Wait *****************
  9038 ;; Defined at:
  9039 ;;		line 26 in file "I2C.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;		None
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;		None
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  1    wreg      void 
  9046 ;; Registers used:
  9047 ;;		wreg, status,2, status,0
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;Total ram usage:        1 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    7
  9060 ;; This function calls:
  9061 ;;		Nothing
  9062 ;; This function is called by:
  9063 ;;		_I2C_Master_Start
  9064 ;;		_I2C_Master_Stop
  9065 ;;		_I2C_Master_Write
  9066 ;;		_I2C_Master_Read
  9067 ;;		_I2C_Master_RepeatedStart
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           	psect	text31
  9072  0049F2                     __ptext31:
  9073                           	opt stack 0
  9074  0049F2                     _I2C_Master_Wait:
  9075                           	opt stack 18
  9076  0049F2                     l66:
  9077  0049F2  B4C7               	btfsc	4039,2,c	;volatile
  9078  0049F4  D7FE               	goto	l66
  9079  0049F6  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9080  0049FA  0E1F               	movlw	31
  9081  0049FC  0100               	movlb	0	; () banked
  9082  0049FE  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9083  004A00  B4D8               	btfsc	status,2,c
  9084  004A02  0012               	return	
  9085  004A04  D7F6               	goto	l66
  9086  004A06                     __end_of_I2C_Master_Wait:
  9087                           	opt stack 0
  9088                           tblptru	equ	0xFF8
  9089                           tblptrh	equ	0xFF7
  9090                           tblptrl	equ	0xFF6
  9091                           tablat	equ	0xFF5
  9092                           prodh	equ	0xFF4
  9093                           prodl	equ	0xFF3
  9094                           intcon	equ	0xFF2
  9095                           intcon2	equ	0xFF1
  9096                           intcon3	equ	0xFF0
  9097                           postinc0	equ	0xFEE
  9098                           wreg	equ	0xFE8
  9099                           postdec1	equ	0xFE5
  9100                           fsr1l	equ	0xFE1
  9101                           indf2	equ	0xFDF
  9102                           postinc2	equ	0xFDE
  9103                           postdec2	equ	0xFDD
  9104                           fsr2h	equ	0xFDA
  9105                           fsr2l	equ	0xFD9
  9106                           status	equ	0xFD8
  9107                           
  9108 ;; *************** function _change_state_to_menu_22 *****************
  9109 ;; Defined at:
  9110 ;;		line 498 in file "UI.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;		None
  9113 ;; Auto vars:     Size  Location     Type
  9114 ;;		None
  9115 ;; Return value:  Size  Location     Type
  9116 ;;                  1    wreg      void 
  9117 ;; Registers used:
  9118 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;Total ram usage:        0 bytes
  9129 ;; Hardware stack levels used:    1
  9130 ;; Hardware stack levels required when called:   10
  9131 ;; This function calls:
  9132 ;;		_lcdInst
  9133 ;;		_printf
  9134 ;; This function is called by:
  9135 ;;		_UI
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           	psect	text32
  9140  004490                     __ptext32:
  9141                           	opt stack 0
  9142  004490                     _change_state_to_menu_22:
  9143                           	opt stack 19
  9144                           
  9145                           ;UI.c: 499: cur_state = 22;
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;incstack = 0
  9149  004490  0E00               	movlw	0
  9150  004492  0100               	movlb	0	; () banked
  9151  004494  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9152  004496  0E16               	movlw	22
  9153  004498  6FE6               	movwf	_cur_state& (0+255),b
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;UI.c: 501: lcdInst(0b10000000);;
  9157  00449A  0E80               	movlw	128
  9158  00449C  EC14  F025         	call	_lcdInst
  9159                           
  9160                           ;UI.c: 502: printf("2. SORT        <");
  9161  0044A0  0EC4               	movlw	low STR_34
  9162  0044A2  0100               	movlb	0	; () banked
  9163  0044A4  6F8E               	movwf	printf@f& (0+255),b
  9164  0044A6  0EFD               	movlw	high STR_34
  9165  0044A8  0100               	movlb	0	; () banked
  9166  0044AA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9167  0044AC  ECB8  F008         	call	_printf	;wreg free
  9168                           
  9169                           ;UI.c: 503: lcdInst(0b11000000);;
  9170  0044B0  0EC0               	movlw	192
  9171  0044B2  EC14  F025         	call	_lcdInst
  9172                           
  9173                           ;UI.c: 504: printf("3. LOGS         ");
  9174  0044B6  0E09               	movlw	low STR_36
  9175  0044B8  0100               	movlb	0	; () banked
  9176  0044BA  6F8E               	movwf	printf@f& (0+255),b
  9177  0044BC  0EFD               	movlw	high STR_36
  9178  0044BE  0100               	movlb	0	; () banked
  9179  0044C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9180  0044C2  ECB8  F008         	call	_printf	;wreg free
  9181  0044C6  0012               	return		;funcret
  9182  0044C8                     __end_of_change_state_to_menu_22:
  9183                           	opt stack 0
  9184                           tblptru	equ	0xFF8
  9185                           tblptrh	equ	0xFF7
  9186                           tblptrl	equ	0xFF6
  9187                           tablat	equ	0xFF5
  9188                           prodh	equ	0xFF4
  9189                           prodl	equ	0xFF3
  9190                           intcon	equ	0xFF2
  9191                           intcon2	equ	0xFF1
  9192                           intcon3	equ	0xFF0
  9193                           postinc0	equ	0xFEE
  9194                           wreg	equ	0xFE8
  9195                           postdec1	equ	0xFE5
  9196                           fsr1l	equ	0xFE1
  9197                           indf2	equ	0xFDF
  9198                           postinc2	equ	0xFDE
  9199                           postdec2	equ	0xFDD
  9200                           fsr2h	equ	0xFDA
  9201                           fsr2l	equ	0xFD9
  9202                           status	equ	0xFD8
  9203                           
  9204 ;; *************** function _change_state_to_menu_12 *****************
  9205 ;; Defined at:
  9206 ;;		line 490 in file "UI.c"
  9207 ;; Parameters:    Size  Location     Type
  9208 ;;		None
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;		None
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  1    wreg      void 
  9213 ;; Registers used:
  9214 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;Total ram usage:        0 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:   10
  9227 ;; This function calls:
  9228 ;;		_lcdInst
  9229 ;;		_printf
  9230 ;; This function is called by:
  9231 ;;		_UI
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           	psect	text33
  9236  0044C8                     __ptext33:
  9237                           	opt stack 0
  9238  0044C8                     _change_state_to_menu_12:
  9239                           	opt stack 19
  9240                           
  9241                           ;UI.c: 491: cur_state = 12;
  9242                           
  9243                           ;incstack = 0
  9244  0044C8  0E00               	movlw	0
  9245  0044CA  0100               	movlb	0	; () banked
  9246  0044CC  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9247  0044CE  0E0C               	movlw	12
  9248  0044D0  6FE6               	movwf	_cur_state& (0+255),b
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;UI.c: 493: lcdInst(0b10000000);;
  9252  0044D2  0E80               	movlw	128
  9253  0044D4  EC14  F025         	call	_lcdInst
  9254                           
  9255                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9256  0044D8  0E2B               	movlw	low STR_33
  9257  0044DA  0100               	movlb	0	; () banked
  9258  0044DC  6F8E               	movwf	printf@f& (0+255),b
  9259  0044DE  0EFD               	movlw	high STR_33
  9260  0044E0  0100               	movlb	0	; () banked
  9261  0044E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9262  0044E4  ECB8  F008         	call	_printf	;wreg free
  9263                           
  9264                           ;UI.c: 495: lcdInst(0b11000000);;
  9265  0044E8  0EC0               	movlw	192
  9266  0044EA  EC14  F025         	call	_lcdInst
  9267                           
  9268                           ;UI.c: 496: printf("2. SORT        <");
  9269  0044EE  0EC4               	movlw	low STR_34
  9270  0044F0  0100               	movlb	0	; () banked
  9271  0044F2  6F8E               	movwf	printf@f& (0+255),b
  9272  0044F4  0EFD               	movlw	high STR_34
  9273  0044F6  0100               	movlb	0	; () banked
  9274  0044F8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9275  0044FA  ECB8  F008         	call	_printf	;wreg free
  9276  0044FE  0012               	return		;funcret
  9277  004500                     __end_of_change_state_to_menu_12:
  9278                           	opt stack 0
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           intcon2	equ	0xFF1
  9287                           intcon3	equ	0xFF0
  9288                           postinc0	equ	0xFEE
  9289                           wreg	equ	0xFE8
  9290                           postdec1	equ	0xFE5
  9291                           fsr1l	equ	0xFE1
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function ___awmod *****************
  9300 ;; Defined at:
  9301 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;  dividend        2    0[BANK0 ] int 
  9304 ;;  divisor         2    2[BANK0 ] int 
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  sign            1    5[BANK0 ] unsigned char 
  9307 ;;  counter         1    4[BANK0 ] unsigned char 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;                  2    0[BANK0 ] int 
  9310 ;; Registers used:
  9311 ;;		wreg, status,2, status,0
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9317 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;Total ram usage:        6 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    7
  9324 ;; This function calls:
  9325 ;;		Nothing
  9326 ;; This function is called by:
  9327 ;;		_UI
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           	psect	text34
  9332  003B62                     __ptext34:
  9333                           	opt stack 0
  9334  003B62                     ___awmod:
  9335                           	opt stack 22
  9336                           
  9337                           ;incstack = 0
  9338  003B62  0E00               	movlw	0
  9339  003B64  0100               	movlb	0	; () banked
  9340  003B66  6F85               	movwf	___awmod@sign& (0+255),b
  9341                           
  9342                           ; BSR set to: 0
  9343  003B68  0100               	movlb	0	; () banked
  9344  003B6A  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9345  003B6C  D008               	goto	l7588
  9346                           
  9347                           ; BSR set to: 0
  9348  003B6E  0100               	movlb	0	; () banked
  9349  003B70  6D80               	negf	___awmod@dividend& (0+255),b
  9350  003B72  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9351  003B74  B0D8               	btfsc	status,0,c
  9352  003B76  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9353                           
  9354                           ; BSR set to: 0
  9355  003B78  0E01               	movlw	1
  9356  003B7A  0100               	movlb	0	; () banked
  9357  003B7C  6F85               	movwf	___awmod@sign& (0+255),b
  9358  003B7E                     l7588:
  9359                           
  9360                           ; BSR set to: 0
  9361  003B7E  0100               	movlb	0	; () banked
  9362  003B80  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9363  003B82  D005               	goto	l7592
  9364                           
  9365                           ; BSR set to: 0
  9366  003B84  0100               	movlb	0	; () banked
  9367  003B86  6D82               	negf	___awmod@divisor& (0+255),b
  9368  003B88  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9369  003B8A  B0D8               	btfsc	status,0,c
  9370  003B8C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9371  003B8E                     l7592:
  9372                           
  9373                           ; BSR set to: 0
  9374  003B8E  0100               	movlb	0	; () banked
  9375  003B90  5182               	movf	___awmod@divisor& (0+255),w,b
  9376  003B92  0100               	movlb	0	; () banked
  9377  003B94  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9378  003B96  B4D8               	btfsc	status,2,c
  9379  003B98  D026               	goto	l7608
  9380                           
  9381                           ; BSR set to: 0
  9382  003B9A  0E01               	movlw	1
  9383  003B9C  0100               	movlb	0	; () banked
  9384  003B9E  6F84               	movwf	___awmod@counter& (0+255),b
  9385  003BA0  D006               	goto	l7598
  9386  003BA2                     l7596:
  9387                           
  9388                           ; BSR set to: 0
  9389  003BA2  0100               	movlb	0	; () banked
  9390  003BA4  90D8               	bcf	status,0,c
  9391  003BA6  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9392  003BA8  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9393  003BAA  0100               	movlb	0	; () banked
  9394  003BAC  2B84               	incf	___awmod@counter& (0+255),f,b
  9395  003BAE                     l7598:
  9396                           
  9397                           ; BSR set to: 0
  9398  003BAE  0100               	movlb	0	; () banked
  9399  003BB0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9400  003BB2  D7F7               	goto	l7596
  9401  003BB4                     l7600:
  9402                           
  9403                           ; BSR set to: 0
  9404  003BB4  0100               	movlb	0	; () banked
  9405  003BB6  5182               	movf	___awmod@divisor& (0+255),w,b
  9406  003BB8  0100               	movlb	0	; () banked
  9407  003BBA  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9408  003BBC  0100               	movlb	0	; () banked
  9409  003BBE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9410  003BC0  0100               	movlb	0	; () banked
  9411  003BC2  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9412  003BC4  A0D8               	btfss	status,0,c
  9413  003BC6  D008               	goto	l7604
  9414                           
  9415                           ; BSR set to: 0
  9416  003BC8  0100               	movlb	0	; () banked
  9417  003BCA  5182               	movf	___awmod@divisor& (0+255),w,b
  9418  003BCC  0100               	movlb	0	; () banked
  9419  003BCE  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9420  003BD0  0100               	movlb	0	; () banked
  9421  003BD2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9422  003BD4  0100               	movlb	0	; () banked
  9423  003BD6  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9424  003BD8                     l7604:
  9425                           
  9426                           ; BSR set to: 0
  9427  003BD8  0100               	movlb	0	; () banked
  9428  003BDA  90D8               	bcf	status,0,c
  9429  003BDC  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9430  003BDE  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9431                           
  9432                           ; BSR set to: 0
  9433  003BE0  0100               	movlb	0	; () banked
  9434  003BE2  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9435  003BE4  D7E7               	goto	l7600
  9436  003BE6                     l7608:
  9437                           
  9438                           ; BSR set to: 0
  9439  003BE6  0100               	movlb	0	; () banked
  9440  003BE8  5185               	movf	___awmod@sign& (0+255),w,b
  9441  003BEA  0100               	movlb	0	; () banked
  9442  003BEC  B4D8               	btfsc	status,2,c
  9443  003BEE  D005               	goto	l7612
  9444                           
  9445                           ; BSR set to: 0
  9446  003BF0  0100               	movlb	0	; () banked
  9447  003BF2  6D80               	negf	___awmod@dividend& (0+255),b
  9448  003BF4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9449  003BF6  B0D8               	btfsc	status,0,c
  9450  003BF8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9451  003BFA                     l7612:
  9452                           
  9453                           ; BSR set to: 0
  9454  003BFA  C080  F080         	movff	___awmod@dividend,?___awmod
  9455  003BFE  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9456  003C02  0012               	return	
  9457  003C04                     __end_of___awmod:
  9458                           	opt stack 0
  9459                           tblptru	equ	0xFF8
  9460                           tblptrh	equ	0xFF7
  9461                           tblptrl	equ	0xFF6
  9462                           tablat	equ	0xFF5
  9463                           prodh	equ	0xFF4
  9464                           prodl	equ	0xFF3
  9465                           intcon	equ	0xFF2
  9466                           intcon2	equ	0xFF1
  9467                           intcon3	equ	0xFF0
  9468                           postinc0	equ	0xFEE
  9469                           wreg	equ	0xFE8
  9470                           postdec1	equ	0xFE5
  9471                           fsr1l	equ	0xFE1
  9472                           indf2	equ	0xFDF
  9473                           postinc2	equ	0xFDE
  9474                           postdec2	equ	0xFDD
  9475                           fsr2h	equ	0xFDA
  9476                           fsr2l	equ	0xFD9
  9477                           status	equ	0xFD8
  9478                           
  9479 ;; *************** function ___awdiv *****************
  9480 ;; Defined at:
  9481 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9482 ;; Parameters:    Size  Location     Type
  9483 ;;  dividend        2    6[BANK0 ] int 
  9484 ;;  divisor         2    8[BANK0 ] int 
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;  quotient        2   12[BANK0 ] int 
  9487 ;;  sign            1   11[BANK0 ] unsigned char 
  9488 ;;  counter         1   10[BANK0 ] unsigned char 
  9489 ;; Return value:  Size  Location     Type
  9490 ;;                  2    6[BANK0 ] int 
  9491 ;; Registers used:
  9492 ;;		wreg, status,2, status,0
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9498 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9499 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9501 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9502 ;;Total ram usage:        8 bytes
  9503 ;; Hardware stack levels used:    1
  9504 ;; Hardware stack levels required when called:    7
  9505 ;; This function calls:
  9506 ;;		Nothing
  9507 ;; This function is called by:
  9508 ;;		_UI
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           	psect	text35
  9513  00393E                     __ptext35:
  9514                           	opt stack 0
  9515  00393E                     ___awdiv:
  9516                           	opt stack 22
  9517                           
  9518                           ; BSR set to: 0
  9519                           ;incstack = 0
  9520  00393E  0E00               	movlw	0
  9521  003940  0100               	movlb	0	; () banked
  9522  003942  6F8B               	movwf	___awdiv@sign& (0+255),b
  9523                           
  9524                           ; BSR set to: 0
  9525  003944  0100               	movlb	0	; () banked
  9526  003946  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9527  003948  D008               	goto	l7544
  9528                           
  9529                           ; BSR set to: 0
  9530  00394A  0100               	movlb	0	; () banked
  9531  00394C  6D88               	negf	___awdiv@divisor& (0+255),b
  9532  00394E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9533  003950  B0D8               	btfsc	status,0,c
  9534  003952  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9535                           
  9536                           ; BSR set to: 0
  9537  003954  0E01               	movlw	1
  9538  003956  0100               	movlb	0	; () banked
  9539  003958  6F8B               	movwf	___awdiv@sign& (0+255),b
  9540  00395A                     l7544:
  9541                           
  9542                           ; BSR set to: 0
  9543  00395A  0100               	movlb	0	; () banked
  9544  00395C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9545  00395E  D008               	goto	l7550
  9546                           
  9547                           ; BSR set to: 0
  9548  003960  0100               	movlb	0	; () banked
  9549  003962  6D86               	negf	___awdiv@dividend& (0+255),b
  9550  003964  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9551  003966  B0D8               	btfsc	status,0,c
  9552  003968  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9553                           
  9554                           ; BSR set to: 0
  9555  00396A  0E01               	movlw	1
  9556  00396C  0100               	movlb	0	; () banked
  9557  00396E  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9558  003970                     l7550:
  9559                           
  9560                           ; BSR set to: 0
  9561  003970  0E00               	movlw	0
  9562  003972  0100               	movlb	0	; () banked
  9563  003974  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9564  003976  0E00               	movlw	0
  9565  003978  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9566                           
  9567                           ; BSR set to: 0
  9568  00397A  0100               	movlb	0	; () banked
  9569  00397C  5188               	movf	___awdiv@divisor& (0+255),w,b
  9570  00397E  0100               	movlb	0	; () banked
  9571  003980  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9572  003982  B4D8               	btfsc	status,2,c
  9573  003984  D02C               	goto	l7572
  9574                           
  9575                           ; BSR set to: 0
  9576  003986  0E01               	movlw	1
  9577  003988  0100               	movlb	0	; () banked
  9578  00398A  6F8A               	movwf	___awdiv@counter& (0+255),b
  9579  00398C  D006               	goto	l7558
  9580  00398E                     l7556:
  9581                           
  9582                           ; BSR set to: 0
  9583  00398E  0100               	movlb	0	; () banked
  9584  003990  90D8               	bcf	status,0,c
  9585  003992  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9586  003994  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9587  003996  0100               	movlb	0	; () banked
  9588  003998  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9589  00399A                     l7558:
  9590                           
  9591                           ; BSR set to: 0
  9592  00399A  0100               	movlb	0	; () banked
  9593  00399C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9594  00399E  D7F7               	goto	l7556
  9595  0039A0                     l7560:
  9596                           
  9597                           ; BSR set to: 0
  9598  0039A0  0100               	movlb	0	; () banked
  9599  0039A2  90D8               	bcf	status,0,c
  9600  0039A4  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9601  0039A6  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9602                           
  9603                           ; BSR set to: 0
  9604  0039A8  0100               	movlb	0	; () banked
  9605  0039AA  5188               	movf	___awdiv@divisor& (0+255),w,b
  9606  0039AC  0100               	movlb	0	; () banked
  9607  0039AE  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9608  0039B0  0100               	movlb	0	; () banked
  9609  0039B2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9610  0039B4  0100               	movlb	0	; () banked
  9611  0039B6  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9612  0039B8  A0D8               	btfss	status,0,c
  9613  0039BA  D00A               	goto	l7568
  9614                           
  9615                           ; BSR set to: 0
  9616  0039BC  0100               	movlb	0	; () banked
  9617  0039BE  5188               	movf	___awdiv@divisor& (0+255),w,b
  9618  0039C0  0100               	movlb	0	; () banked
  9619  0039C2  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9620  0039C4  0100               	movlb	0	; () banked
  9621  0039C6  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9622  0039C8  0100               	movlb	0	; () banked
  9623  0039CA  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9624                           
  9625                           ; BSR set to: 0
  9626  0039CC  0100               	movlb	0	; () banked
  9627  0039CE  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9628  0039D0                     l7568:
  9629                           
  9630                           ; BSR set to: 0
  9631  0039D0  0100               	movlb	0	; () banked
  9632  0039D2  90D8               	bcf	status,0,c
  9633  0039D4  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9634  0039D6  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9635                           
  9636                           ; BSR set to: 0
  9637  0039D8  0100               	movlb	0	; () banked
  9638  0039DA  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9639  0039DC  D7E1               	goto	l7560
  9640  0039DE                     l7572:
  9641                           
  9642                           ; BSR set to: 0
  9643  0039DE  0100               	movlb	0	; () banked
  9644  0039E0  518B               	movf	___awdiv@sign& (0+255),w,b
  9645  0039E2  0100               	movlb	0	; () banked
  9646  0039E4  B4D8               	btfsc	status,2,c
  9647  0039E6  D005               	goto	l7576
  9648                           
  9649                           ; BSR set to: 0
  9650  0039E8  0100               	movlb	0	; () banked
  9651  0039EA  6D8C               	negf	___awdiv@quotient& (0+255),b
  9652  0039EC  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9653  0039EE  B0D8               	btfsc	status,0,c
  9654  0039F0  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9655  0039F2                     l7576:
  9656                           
  9657                           ; BSR set to: 0
  9658  0039F2  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9659  0039F6  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9660  0039FA  0012               	return	
  9661  0039FC                     __end_of___awdiv:
  9662                           	opt stack 0
  9663                           tblptru	equ	0xFF8
  9664                           tblptrh	equ	0xFF7
  9665                           tblptrl	equ	0xFF6
  9666                           tablat	equ	0xFF5
  9667                           prodh	equ	0xFF4
  9668                           prodl	equ	0xFF3
  9669                           intcon	equ	0xFF2
  9670                           intcon2	equ	0xFF1
  9671                           intcon3	equ	0xFF0
  9672                           postinc0	equ	0xFEE
  9673                           wreg	equ	0xFE8
  9674                           postdec1	equ	0xFE5
  9675                           fsr1l	equ	0xFE1
  9676                           indf2	equ	0xFDF
  9677                           postinc2	equ	0xFDE
  9678                           postdec2	equ	0xFDD
  9679                           fsr2h	equ	0xFDA
  9680                           fsr2l	equ	0xFD9
  9681                           status	equ	0xFD8
  9682                           
  9683 ;; *************** function _Test *****************
  9684 ;; Defined at:
  9685 ;;		line 30 in file "Test.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;		None
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  1    wreg      void 
  9692 ;; Registers used:
  9693 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9701 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;Total ram usage:        2 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:   11
  9706 ;; This function calls:
  9707 ;;		_BlockerTest
  9708 ;;		_BothServos
  9709 ;;		_EEPROMTest
  9710 ;;		_PortTestA5
  9711 ;;		_PortTests
  9712 ;;		_PusherTest
  9713 ;;		_SpeedTest
  9714 ;;		_actuatorTest
  9715 ;;		_algorithmTest
  9716 ;;		_lcdInst
  9717 ;;		_printf
  9718 ;;		_sensorTest
  9719 ;; This function is called by:
  9720 ;;		_main
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text36
  9725  00341E                     __ptext36:
  9726                           	opt stack 0
  9727  00341E                     _Test:
  9728                           	opt stack 19
  9729  00341E                     
  9730                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9731  00341E  0E01               	movlw	1
  9732  003420  EC14  F025         	call	_lcdInst
  9733  003424  0E68               	movlw	104
  9734  003426  0100               	movlb	0	; () banked
  9735  003428  6FC6               	movwf	??_Test& (0+255),b
  9736  00342A  0EE4               	movlw	228
  9737  00342C                     u7857:
  9738  00342C  2EE8               	decfsz	wreg,f,c
  9739  00342E  D7FE               	bra	u7857
  9740  003430  2FC6               	decfsz	??_Test& (0+255),f,b
  9741  003432  D7FC               	bra	u7857
  9742  003434  F000               	nop	
  9743  003436  0E80               	movlw	128
  9744  003438  EC14  F025         	call	_lcdInst
  9745                           
  9746                           ;Test.c: 34: printf("1.ALG|2.SNR|3.AC");
  9747  00343C  0E70               	movlw	low STR_68
  9748  00343E  0100               	movlb	0	; () banked
  9749  003440  6F8E               	movwf	printf@f& (0+255),b
  9750  003442  0EFC               	movlw	high STR_68
  9751  003444  0100               	movlb	0	; () banked
  9752  003446  6F8F               	movwf	(printf@f+1)& (0+255),b
  9753  003448  ECB8  F008         	call	_printf	;wreg free
  9754                           
  9755                           ;Test.c: 35: lcdInst(0b11000000);;
  9756  00344C  0EC0               	movlw	192
  9757  00344E  EC14  F025         	call	_lcdInst
  9758                           
  9759                           ;Test.c: 36: printf("4.HI|5.TOG|6.EEP");
  9760  003452  0EA3               	movlw	low STR_69
  9761  003454  0100               	movlb	0	; () banked
  9762  003456  6F8E               	movwf	printf@f& (0+255),b
  9763  003458  0EFC               	movlw	high STR_69
  9764  00345A  0100               	movlb	0	; () banked
  9765  00345C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9766  00345E  ECB8  F008         	call	_printf	;wreg free
  9767                           
  9768                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
  9769  003462  0E05               	movlw	5
  9770  003464  0100               	movlb	0	; () banked
  9771  003466  6FC7               	movwf	(??_Test+1)& (0+255),b
  9772  003468  0E0F               	movlw	15
  9773  00346A  0100               	movlb	0	; () banked
  9774  00346C  6FC6               	movwf	??_Test& (0+255),b
  9775  00346E  0EF1               	movlw	241
  9776  003470                     u7867:
  9777  003470  2EE8               	decfsz	wreg,f,c
  9778  003472  D7FE               	bra	u7867
  9779  003474  2FC6               	decfsz	??_Test& (0+255),f,b
  9780  003476  D7FC               	bra	u7867
  9781  003478  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9782  00347A  D7FA               	bra	u7867
  9783  00347C                     l1057:
  9784  00347C  A281               	btfss	3969,1,c	;volatile
  9785  00347E  D7FE               	goto	l1057
  9786                           
  9787                           ;Test.c: 39: var = PORTB >> 4;
  9788  003480  CF81 F0C6          	movff	3969,??_Test	;volatile
  9789  003484  0100               	movlb	0	; () banked
  9790  003486  3BC6               	swapf	??_Test& (0+255),f,b
  9791  003488  0E0F               	movlw	15
  9792  00348A  17C6               	andwf	??_Test& (0+255),f,b
  9793  00348C  0100               	movlb	0	; () banked
  9794  00348E  51C6               	movf	??_Test& (0+255),w,b
  9795  003490  0100               	movlb	0	; () banked
  9796  003492  6FFA               	movwf	_var& (0+255),b
  9797  003494  6BFB               	clrf	(_var+1)& (0+255),b
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;Test.c: 40: var++;
  9801  003496  0100               	movlb	0	; () banked
  9802  003498  4BFA               	infsnz	_var& (0+255),f,b
  9803  00349A  2BFB               	incf	(_var+1)& (0+255),f,b
  9804  00349C                     l1060:
  9805  00349C  A281               	btfss	3969,1,c	;volatile
  9806  00349E  D01F               	goto	l8312
  9807  0034A0  D7FD               	goto	l1060
  9808  0034A2                     l8290:
  9809                           
  9810                           ;Test.c: 44: algorithmTest();
  9811  0034A2  EC0B  F01B         	call	_algorithmTest	;wreg free
  9812                           
  9813                           ;Test.c: 45: break;
  9814  0034A6  D7BB               	goto	l8272
  9815  0034A8                     l8292:
  9816                           
  9817                           ;Test.c: 47: sensorTest();
  9818  0034A8  EC4D  F00E         	call	_sensorTest	;wreg free
  9819                           
  9820                           ;Test.c: 48: break;
  9821  0034AC  D7B8               	goto	l8272
  9822  0034AE                     l8294:
  9823                           
  9824                           ;Test.c: 50: actuatorTest();
  9825  0034AE  EC09  F000         	call	_actuatorTest	;wreg free
  9826                           
  9827                           ;Test.c: 51: break;
  9828  0034B2  D7B5               	goto	l8272
  9829  0034B4                     l8296:
  9830                           
  9831                           ;Test.c: 53: PortTestA5();
  9832  0034B4  ECB8  F020         	call	_PortTestA5	;wreg free
  9833                           
  9834                           ;Test.c: 54: break;
  9835  0034B8  D7B2               	goto	l8272
  9836  0034BA                     l8298:
  9837                           
  9838                           ;Test.c: 57: SpeedTest();
  9839  0034BA  EC8B  F01E         	call	_SpeedTest	;wreg free
  9840                           
  9841                           ;Test.c: 58: break;
  9842  0034BE  D7AF               	goto	l8272
  9843  0034C0                     l8300:
  9844                           
  9845                           ;Test.c: 60: EEPROMTest();
  9846  0034C0  EC46  F025         	call	_EEPROMTest	;wreg free
  9847                           
  9848                           ;Test.c: 61: break;
  9849  0034C4  D7AC               	goto	l8272
  9850  0034C6                     l8302:
  9851                           
  9852                           ;Test.c: 63: PusherTest();
  9853  0034C6  EC76  F01B         	call	_PusherTest	;wreg free
  9854                           
  9855                           ;Test.c: 64: break;
  9856  0034CA  D7A9               	goto	l8272
  9857  0034CC                     l8304:
  9858                           
  9859                           ;Test.c: 66: PortTests();
  9860  0034CC  ECCD  F01E         	call	_PortTests	;wreg free
  9861                           
  9862                           ;Test.c: 67: break;
  9863  0034D0  D7A6               	goto	l8272
  9864  0034D2                     l8306:
  9865                           
  9866                           ;Test.c: 69: BothServos();
  9867  0034D2  ECD4  F00A         	call	_BothServos	;wreg free
  9868                           
  9869                           ;Test.c: 70: break;
  9870  0034D6  D7A3               	goto	l8272
  9871  0034D8                     l8308:
  9872                           
  9873                           ;Test.c: 72: BlockerTest();
  9874  0034D8  ECDB  F01B         	call	_BlockerTest	;wreg free
  9875                           
  9876                           ;Test.c: 76: }
  9877                           
  9878                           ;Test.c: 75: break;
  9879                           
  9880                           ;Test.c: 74: default:
  9881                           
  9882                           ;Test.c: 73: break;
  9883  0034DC  D7A0               	goto	l8272
  9884  0034DE                     l8312:
  9885  0034DE  C0FA  F0C6         	movff	_var,??_Test
  9886  0034E2  C0FB  F0C7         	movff	_var+1,??_Test+1
  9887                           
  9888                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9889                           ; Switch size 1, requested type "space"
  9890                           ; Number of cases is 1, Range of values is 0 to 0
  9891                           ; switch strategies available:
  9892                           ; Name         Instructions Cycles
  9893                           ; simple_byte            4     3 (average)
  9894                           ;	Chosen strategy is simple_byte
  9895  0034E6  0100               	movlb	0	; () banked
  9896  0034E8  51C7               	movf	(??_Test+1)& (0+255),w,b
  9897  0034EA  0A00               	xorlw	0	; case 0
  9898  0034EC  A4D8               	btfss	status,2,c
  9899  0034EE  D797               	goto	l8272
  9900                           
  9901                           ; BSR set to: 0
  9902                           ; Switch size 1, requested type "space"
  9903                           ; Number of cases is 10, Range of values is 1 to 11
  9904                           ; switch strategies available:
  9905                           ; Name         Instructions Cycles
  9906                           ; simple_byte           31    16 (average)
  9907                           ;	Chosen strategy is simple_byte
  9908  0034F0  0100               	movlb	0	; () banked
  9909  0034F2  51C6               	movf	??_Test& (0+255),w,b
  9910  0034F4  0A01               	xorlw	1	; case 1
  9911  0034F6  B4D8               	btfsc	status,2,c
  9912  0034F8  D7D4               	goto	l8290
  9913  0034FA  0A03               	xorlw	3	; case 2
  9914  0034FC  B4D8               	btfsc	status,2,c
  9915  0034FE  D7D4               	goto	l8292
  9916  003500  0A01               	xorlw	1	; case 3
  9917  003502  B4D8               	btfsc	status,2,c
  9918  003504  D7D4               	goto	l8294
  9919  003506  0A06               	xorlw	6	; case 5
  9920  003508  B4D8               	btfsc	status,2,c
  9921  00350A  D7D4               	goto	l8296
  9922  00350C  0A03               	xorlw	3	; case 6
  9923  00350E  B4D8               	btfsc	status,2,c
  9924  003510  D7D4               	goto	l8298
  9925  003512  0A01               	xorlw	1	; case 7
  9926  003514  B4D8               	btfsc	status,2,c
  9927  003516  D7D4               	goto	l8300
  9928  003518  0A0F               	xorlw	15	; case 8
  9929  00351A  B4D8               	btfsc	status,2,c
  9930  00351C  D7D4               	goto	l8302
  9931  00351E  0A01               	xorlw	1	; case 9
  9932  003520  B4D8               	btfsc	status,2,c
  9933  003522  D7D4               	goto	l8304
  9934  003524  0A03               	xorlw	3	; case 10
  9935  003526  B4D8               	btfsc	status,2,c
  9936  003528  D7D4               	goto	l8306
  9937  00352A  0A01               	xorlw	1	; case 11
  9938  00352C  B4D8               	btfsc	status,2,c
  9939  00352E  D7D4               	goto	l8308
  9940                           
  9941                           ; BSR set to: 0
  9942                           
  9943                           ; BSR set to: 0
  9944  003530  D776               	goto	l8272
  9945  003532                     __end_of_Test:
  9946                           	opt stack 0
  9947                           tblptru	equ	0xFF8
  9948                           tblptrh	equ	0xFF7
  9949                           tblptrl	equ	0xFF6
  9950                           tablat	equ	0xFF5
  9951                           prodh	equ	0xFF4
  9952                           prodl	equ	0xFF3
  9953                           intcon	equ	0xFF2
  9954                           intcon2	equ	0xFF1
  9955                           intcon3	equ	0xFF0
  9956                           postinc0	equ	0xFEE
  9957                           wreg	equ	0xFE8
  9958                           postdec1	equ	0xFE5
  9959                           fsr1l	equ	0xFE1
  9960                           indf2	equ	0xFDF
  9961                           postinc2	equ	0xFDE
  9962                           postdec2	equ	0xFDD
  9963                           fsr2h	equ	0xFDA
  9964                           fsr2l	equ	0xFD9
  9965                           status	equ	0xFD8
  9966                           
  9967 ;; *************** function _sensorTest *****************
  9968 ;; Defined at:
  9969 ;;		line 124 in file "Test.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;		None
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;  res             2   45[BANK0 ] int 
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  1    wreg      void 
  9976 ;; Registers used:
  9977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;Total ram usage:        4 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; Hardware stack levels required when called:   10
  9990 ;; This function calls:
  9991 ;;		_lcdInst
  9992 ;;		_printf
  9993 ;;		_readADC
  9994 ;;		_readMAG
  9995 ;; This function is called by:
  9996 ;;		_Test
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           	psect	text37
 10001  001C9A                     __ptext37:
 10002                           	opt stack 0
 10003  001C9A                     _sensorTest:
 10004                           	opt stack 19
 10005                           
 10006                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10007                           
 10008                           ; BSR set to: 0
 10009                           ;incstack = 0
 10010  001C9A  0E01               	movlw	1
 10011  001C9C  EC14  F025         	call	_lcdInst
 10012  001CA0  0E68               	movlw	104
 10013  001CA2  0100               	movlb	0	; () banked
 10014  001CA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10015  001CA6  0EE4               	movlw	228
 10016  001CA8                     u7877:
 10017  001CA8  2EE8               	decfsz	wreg,f,c
 10018  001CAA  D7FE               	bra	u7877
 10019  001CAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10020  001CAE  D7FC               	bra	u7877
 10021  001CB0  F000               	nop	
 10022  001CB2  0E80               	movlw	128
 10023  001CB4  EC14  F025         	call	_lcdInst
 10024                           
 10025                           ;Test.c: 127: printf("SENSORS");
 10026  001CB8  0EAE               	movlw	low STR_77
 10027  001CBA  0100               	movlb	0	; () banked
 10028  001CBC  6F8E               	movwf	printf@f& (0+255),b
 10029  001CBE  0EFF               	movlw	high STR_77
 10030  001CC0  0100               	movlb	0	; () banked
 10031  001CC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10032  001CC4  ECB8  F008         	call	_printf	;wreg free
 10033                           
 10034                           ;Test.c: 128: lcdInst(0b11000000);;
 10035  001CC8  0EC0               	movlw	192
 10036  001CCA  EC14  F025         	call	_lcdInst
 10037                           
 10038                           ;Test.c: 129: printf("PUSH TO START");
 10039  001CCE  0E0B               	movlw	low STR_71
 10040  001CD0  0100               	movlb	0	; () banked
 10041  001CD2  6F8E               	movwf	printf@f& (0+255),b
 10042  001CD4  0EFF               	movlw	high STR_71
 10043  001CD6  0100               	movlb	0	; () banked
 10044  001CD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10045  001CDA  ECB8  F008         	call	_printf	;wreg free
 10046                           
 10047                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10048  001CDE  0E05               	movlw	5
 10049  001CE0  0100               	movlb	0	; () banked
 10050  001CE2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10051  001CE4  0E0F               	movlw	15
 10052  001CE6  0100               	movlb	0	; () banked
 10053  001CE8  6FAB               	movwf	??_sensorTest& (0+255),b
 10054  001CEA  0EF1               	movlw	241
 10055  001CEC                     u7887:
 10056  001CEC  2EE8               	decfsz	wreg,f,c
 10057  001CEE  D7FE               	bra	u7887
 10058  001CF0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10059  001CF2  D7FC               	bra	u7887
 10060  001CF4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10061  001CF6  D7FA               	bra	u7887
 10062  001CF8                     l1090:
 10063  001CF8  A281               	btfss	3969,1,c	;volatile
 10064  001CFA  D7FE               	goto	l1090
 10065  001CFC                     l1093:
 10066  001CFC  B281               	btfsc	3969,1,c	;volatile
 10067  001CFE  D7FE               	goto	l1093
 10068                           
 10069                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10070  001D00  0E01               	movlw	1
 10071  001D02  EC14  F025         	call	_lcdInst
 10072  001D06  0E68               	movlw	104
 10073  001D08  0100               	movlb	0	; () banked
 10074  001D0A  6FAB               	movwf	??_sensorTest& (0+255),b
 10075  001D0C  0EE4               	movlw	228
 10076  001D0E                     u7897:
 10077  001D0E  2EE8               	decfsz	wreg,f,c
 10078  001D10  D7FE               	bra	u7897
 10079  001D12  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10080  001D14  D7FC               	bra	u7897
 10081  001D16  F000               	nop	
 10082  001D18  0E80               	movlw	128
 10083  001D1A  EC14  F025         	call	_lcdInst
 10084                           
 10085                           ;Test.c: 138: printf("TST: IR SNSR");
 10086  001D1E  0E35               	movlw	low STR_79
 10087  001D20  0100               	movlb	0	; () banked
 10088  001D22  6F8E               	movwf	printf@f& (0+255),b
 10089  001D24  0EFF               	movlw	high STR_79
 10090  001D26  0100               	movlb	0	; () banked
 10091  001D28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10092  001D2A  ECB8  F008         	call	_printf	;wreg free
 10093                           
 10094                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10095  001D2E  0E05               	movlw	5
 10096  001D30  0100               	movlb	0	; () banked
 10097  001D32  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10098  001D34  0E0F               	movlw	15
 10099  001D36  0100               	movlb	0	; () banked
 10100  001D38  6FAB               	movwf	??_sensorTest& (0+255),b
 10101  001D3A  0EF1               	movlw	241
 10102  001D3C                     u7907:
 10103  001D3C  2EE8               	decfsz	wreg,f,c
 10104  001D3E  D7FE               	bra	u7907
 10105  001D40  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10106  001D42  D7FC               	bra	u7907
 10107  001D44  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10108  001D46  D7FA               	bra	u7907
 10109                           
 10110                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10111  001D48  8A8B               	bsf	3979,5,c	;volatile
 10112                           
 10113                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 10114  001D4A  D05C               	goto	l6828
 10115  001D4C                     l6810:
 10116                           
 10117                           ;Test.c: 142: readADC(0);
 10118  001D4C  0E00               	movlw	0
 10119  001D4E  EC1B  F024         	call	_readADC
 10120                           
 10121                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 10122  001D52  50C3               	movf	4035,w,c	;volatile
 10123  001D54  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10124  001D58  0100               	movlb	0	; () banked
 10125  001D5A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10126  001D5C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10127  001D60  0100               	movlb	0	; () banked
 10128  001D62  6BAB               	clrf	??_sensorTest& (0+255),b
 10129  001D64  0100               	movlb	0	; () banked
 10130  001D66  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10131  001D68  0100               	movlb	0	; () banked
 10132  001D6A  6FAD               	movwf	sensorTest@res& (0+255),b
 10133  001D6C  0100               	movlb	0	; () banked
 10134  001D6E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10135  001D70  0100               	movlb	0	; () banked
 10136  001D72  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10137                           
 10138                           ; BSR set to: 0
 10139                           ;Test.c: 144: IR_signal = (res > 1000) ? 1 : 0;
 10140  001D74  0100               	movlb	0	; () banked
 10141  001D76  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10142  001D78  D00A               	goto	u5260
 10143  001D7A  0EE9               	movlw	233
 10144  001D7C  0100               	movlb	0	; () banked
 10145  001D7E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10146  001D80  0E03               	movlw	3
 10147  001D82  0100               	movlb	0	; () banked
 10148  001D84  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10149  001D86  A0D8               	btfss	status,0,c
 10150  001D88  D002               	goto	u5260
 10151  001D8A  0E01               	movlw	1
 10152  001D8C  D001               	goto	u5270
 10153  001D8E                     u5260:
 10154  001D8E  0E00               	movlw	0
 10155  001D90                     u5270:
 10156  001D90  0100               	movlb	0	; () banked
 10157  001D92  6FDE               	movwf	_IR_signal& (0+255),b
 10158  001D94  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10159                           
 10160                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10161  001D96  0E01               	movlw	1
 10162  001D98  EC14  F025         	call	_lcdInst
 10163  001D9C  0E68               	movlw	104
 10164  001D9E  0100               	movlb	0	; () banked
 10165  001DA0  6FAB               	movwf	??_sensorTest& (0+255),b
 10166  001DA2  0EE4               	movlw	228
 10167  001DA4                     u7917:
 10168  001DA4  2EE8               	decfsz	wreg,f,c
 10169  001DA6  D7FE               	bra	u7917
 10170  001DA8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10171  001DAA  D7FC               	bra	u7917
 10172  001DAC  F000               	nop	
 10173  001DAE  0E80               	movlw	128
 10174  001DB0  EC14  F025         	call	_lcdInst
 10175                           
 10176                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 10177  001DB4  0E5A               	movlw	low STR_80
 10178  001DB6  0100               	movlb	0	; () banked
 10179  001DB8  6F8E               	movwf	printf@f& (0+255),b
 10180  001DBA  0EFE               	movlw	high STR_80
 10181  001DBC  0100               	movlb	0	; () banked
 10182  001DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10183  001DC0  C0DE  F090         	movff	_IR_signal,?_printf+2
 10184  001DC4  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 10185  001DC8  ECB8  F008         	call	_printf	;wreg free
 10186                           
 10187                           ;Test.c: 148: lcdInst(0b11000000);;
 10188  001DCC  0EC0               	movlw	192
 10189  001DCE  EC14  F025         	call	_lcdInst
 10190                           
 10191                           ;Test.c: 149: printf("%d", res);
 10192  001DD2  0E16               	movlw	low (STR_27+14)
 10193  001DD4  0100               	movlb	0	; () banked
 10194  001DD6  6F8E               	movwf	printf@f& (0+255),b
 10195  001DD8  0EFE               	movlw	high (STR_27+14)
 10196  001DDA  0100               	movlb	0	; () banked
 10197  001DDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10198  001DDE  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10199  001DE2  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10200  001DE6  ECB8  F008         	call	_printf	;wreg free
 10201                           
 10202                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 10203  001DEA  0E05               	movlw	5
 10204  001DEC  0100               	movlb	0	; () banked
 10205  001DEE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10206  001DF0  0E0F               	movlw	15
 10207  001DF2  0100               	movlb	0	; () banked
 10208  001DF4  6FAB               	movwf	??_sensorTest& (0+255),b
 10209  001DF6  0EF1               	movlw	241
 10210  001DF8                     u7927:
 10211  001DF8  2EE8               	decfsz	wreg,f,c
 10212  001DFA  D7FE               	bra	u7927
 10213  001DFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10214  001DFE  D7FC               	bra	u7927
 10215  001E00  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10216  001E02  D7FA               	bra	u7927
 10217  001E04                     l6828:
 10218  001E04  A281               	btfss	3969,1,c	;volatile
 10219  001E06  D7A2               	goto	l6810
 10220                           
 10221                           ;Test.c: 151: }
 10222                           ;Test.c: 152: LATCbits.LATC5 = 0;
 10223  001E08  9A8B               	bcf	3979,5,c	;volatile
 10224                           
 10225                           ;Test.c: 159: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10226  001E0A  0E01               	movlw	1
 10227  001E0C  EC14  F025         	call	_lcdInst
 10228  001E10  0E68               	movlw	104
 10229  001E12  0100               	movlb	0	; () banked
 10230  001E14  6FAB               	movwf	??_sensorTest& (0+255),b
 10231  001E16  0EE4               	movlw	228
 10232  001E18                     u7937:
 10233  001E18  2EE8               	decfsz	wreg,f,c
 10234  001E1A  D7FE               	bra	u7937
 10235  001E1C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10236  001E1E  D7FC               	bra	u7937
 10237  001E20  F000               	nop	
 10238  001E22  0E80               	movlw	128
 10239  001E24  EC14  F025         	call	_lcdInst
 10240                           
 10241                           ;Test.c: 160: printf("TST: MAGNETISM");
 10242  001E28  0E87               	movlw	low STR_82
 10243  001E2A  0100               	movlb	0	; () banked
 10244  001E2C  6F8E               	movwf	printf@f& (0+255),b
 10245  001E2E  0EFE               	movlw	high STR_82
 10246  001E30  0100               	movlb	0	; () banked
 10247  001E32  6F8F               	movwf	(printf@f+1)& (0+255),b
 10248  001E34  ECB8  F008         	call	_printf	;wreg free
 10249                           
 10250                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10251  001E38  0E05               	movlw	5
 10252  001E3A  0100               	movlb	0	; () banked
 10253  001E3C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10254  001E3E  0E0F               	movlw	15
 10255  001E40  0100               	movlb	0	; () banked
 10256  001E42  6FAB               	movwf	??_sensorTest& (0+255),b
 10257  001E44  0EF1               	movlw	241
 10258  001E46                     u7947:
 10259  001E46  2EE8               	decfsz	wreg,f,c
 10260  001E48  D7FE               	bra	u7947
 10261  001E4A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10262  001E4C  D7FC               	bra	u7947
 10263  001E4E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10264  001E50  D7FA               	bra	u7947
 10265                           
 10266                           ;Test.c: 162: while(PORTBbits.RB1 == 0){
 10267  001E52  D021               	goto	l6846
 10268  001E54                     l6840:
 10269                           
 10270                           ;Test.c: 163: readMAG();
 10271  001E54  ECDE  F021         	call	_readMAG	;wreg free
 10272                           
 10273                           ;Test.c: 164: lcdInst(0b10000000);;
 10274  001E58  0E80               	movlw	128
 10275  001E5A  EC14  F025         	call	_lcdInst
 10276                           
 10277                           ;Test.c: 165: lcdInst(0b11000000);;
 10278  001E5E  0EC0               	movlw	192
 10279  001E60  EC14  F025         	call	_lcdInst
 10280                           
 10281                           ;Test.c: 166: printf("MAG_signal: %d ", MAG_signal);
 10282  001E64  0E2A               	movlw	low STR_83
 10283  001E66  0100               	movlb	0	; () banked
 10284  001E68  6F8E               	movwf	printf@f& (0+255),b
 10285  001E6A  0EFE               	movlw	high STR_83
 10286  001E6C  0100               	movlb	0	; () banked
 10287  001E6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10288  001E70  C0E0  F090         	movff	_MAG_signal,?_printf+2
 10289  001E74  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 10290  001E78  ECB8  F008         	call	_printf	;wreg free
 10291                           
 10292                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 10293  001E7C  0E05               	movlw	5
 10294  001E7E  0100               	movlb	0	; () banked
 10295  001E80  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10296  001E82  0E0F               	movlw	15
 10297  001E84  0100               	movlb	0	; () banked
 10298  001E86  6FAB               	movwf	??_sensorTest& (0+255),b
 10299  001E88  0EF1               	movlw	241
 10300  001E8A                     u7957:
 10301  001E8A  2EE8               	decfsz	wreg,f,c
 10302  001E8C  D7FE               	bra	u7957
 10303  001E8E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10304  001E90  D7FC               	bra	u7957
 10305  001E92  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10306  001E94  D7FA               	bra	u7957
 10307  001E96                     l6846:
 10308  001E96  A281               	btfss	3969,1,c	;volatile
 10309  001E98  D7DD               	goto	l6840
 10310                           
 10311                           ;Test.c: 168: }
 10312                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10313  001E9A  0E01               	movlw	1
 10314  001E9C  EC14  F025         	call	_lcdInst
 10315  001EA0  0E68               	movlw	104
 10316  001EA2  0100               	movlb	0	; () banked
 10317  001EA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10318  001EA6  0EE4               	movlw	228
 10319  001EA8                     u7967:
 10320  001EA8  2EE8               	decfsz	wreg,f,c
 10321  001EAA  D7FE               	bra	u7967
 10322  001EAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10323  001EAE  D7FC               	bra	u7967
 10324  001EB0  F000               	nop	
 10325  001EB2  0E80               	movlw	128
 10326  001EB4  EC14  F025         	call	_lcdInst
 10327                           
 10328                           ;Test.c: 174: printf("TST: COND");
 10329  001EB8  0E87               	movlw	low STR_84
 10330  001EBA  0100               	movlb	0	; () banked
 10331  001EBC  6F8E               	movwf	printf@f& (0+255),b
 10332  001EBE  0EFF               	movlw	high STR_84
 10333  001EC0  0100               	movlb	0	; () banked
 10334  001EC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10335  001EC4  ECB8  F008         	call	_printf	;wreg free
 10336                           
 10337                           ;Test.c: 175: _delay((unsigned long)((100)*(32000000/4000.0)));
 10338  001EC8  0E05               	movlw	5
 10339  001ECA  0100               	movlb	0	; () banked
 10340  001ECC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10341  001ECE  0E0F               	movlw	15
 10342  001ED0  0100               	movlb	0	; () banked
 10343  001ED2  6FAB               	movwf	??_sensorTest& (0+255),b
 10344  001ED4  0EF1               	movlw	241
 10345  001ED6                     u7977:
 10346  001ED6  2EE8               	decfsz	wreg,f,c
 10347  001ED8  D7FE               	bra	u7977
 10348  001EDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10349  001EDC  D7FC               	bra	u7977
 10350  001EDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10351  001EE0  D7FA               	bra	u7977
 10352  001EE2                     l6858:
 10353                           
 10354                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10355  001EE2  0E01               	movlw	1
 10356  001EE4  EC14  F025         	call	_lcdInst
 10357  001EE8  0E68               	movlw	104
 10358  001EEA  0100               	movlb	0	; () banked
 10359  001EEC  6FAB               	movwf	??_sensorTest& (0+255),b
 10360  001EEE  0EE4               	movlw	228
 10361  001EF0                     u7987:
 10362  001EF0  2EE8               	decfsz	wreg,f,c
 10363  001EF2  D7FE               	bra	u7987
 10364  001EF4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10365  001EF6  D7FC               	bra	u7987
 10366  001EF8  F000               	nop	
 10367  001EFA  0E80               	movlw	128
 10368  001EFC  EC14  F025         	call	_lcdInst
 10369                           
 10370                           ;Test.c: 178: printf("TST: COND");
 10371  001F00  0E87               	movlw	low STR_84
 10372  001F02  0100               	movlb	0	; () banked
 10373  001F04  6F8E               	movwf	printf@f& (0+255),b
 10374  001F06  0EFF               	movlw	high STR_84
 10375  001F08  0100               	movlb	0	; () banked
 10376  001F0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10377  001F0C  ECB8  F008         	call	_printf	;wreg free
 10378                           
 10379                           ;Test.c: 179: while(PORTBbits.RB1 == 0){
 10380  001F10  D01B               	goto	l6870
 10381  001F12                     l6866:
 10382                           
 10383                           ;Test.c: 183: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10384  001F12  0E80               	movlw	128
 10385  001F14  EC14  F025         	call	_lcdInst
 10386  001F18  0EC0               	movlw	192
 10387  001F1A  EC14  F025         	call	_lcdInst
 10388                           
 10389                           ;Test.c: 184: printf("COND: %d", PORTAbits.RA2);
 10390  001F1E  0EA5               	movlw	low STR_86
 10391  001F20  0100               	movlb	0	; () banked
 10392  001F22  6F8E               	movwf	printf@f& (0+255),b
 10393  001F24  0EFF               	movlw	high STR_86
 10394  001F26  0100               	movlb	0	; () banked
 10395  001F28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10396  001F2A  A480               	btfss	3968,2,c	;volatile
 10397  001F2C  D004               	goto	u5300
 10398  001F2E  0100               	movlb	0	; () banked
 10399  001F30  6BAB               	clrf	??_sensorTest& (0+255),b
 10400  001F32  2BAB               	incf	??_sensorTest& (0+255),f,b
 10401  001F34  D002               	goto	u5308
 10402  001F36                     u5300:
 10403  001F36  0100               	movlb	0	; () banked
 10404  001F38  6BAB               	clrf	??_sensorTest& (0+255),b
 10405  001F3A                     u5308:
 10406  001F3A  0100               	movlb	0	; () banked
 10407  001F3C  51AB               	movf	??_sensorTest& (0+255),w,b
 10408  001F3E  0100               	movlb	0	; () banked
 10409  001F40  6F90               	movwf	(?_printf+2)& (0+255),b
 10410  001F42  6B91               	clrf	(?_printf+3)& (0+255),b
 10411  001F44  ECB8  F008         	call	_printf	;wreg free
 10412  001F48                     l6870:
 10413  001F48  A281               	btfss	3969,1,c	;volatile
 10414  001F4A  D7E3               	goto	l6866
 10415                           
 10416                           ;Test.c: 185: }
 10417                           ;Test.c: 186: if(PORTB >> 4 == 0b1111){
 10418  001F4C  3881               	swapf	3969,w,c	;volatile
 10419  001F4E  0B0F               	andlw	15
 10420  001F50  0A0F               	xorlw	15
 10421  001F52  B4D8               	btfsc	status,2,c
 10422  001F54  0012               	return	
 10423                           
 10424                           ;Test.c: 189: else{
 10425                           ;Test.c: 190: LATAbits.LATA3 = 1;
 10426                           
 10427                           ;Test.c: 188: }
 10428                           
 10429                           ;Test.c: 187: break;
 10430  001F56  8689               	bsf	3977,3,c	;volatile
 10431                           
 10432                           ;Test.c: 191: while(PORTBbits.RB1 == 1){
 10433  001F58  D01B               	goto	l6882
 10434  001F5A                     l6878:
 10435                           
 10436                           ;Test.c: 193: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10437  001F5A  0E80               	movlw	128
 10438  001F5C  EC14  F025         	call	_lcdInst
 10439  001F60  0EC0               	movlw	192
 10440  001F62  EC14  F025         	call	_lcdInst
 10441                           
 10442                           ;Test.c: 194: printf("COND: %d", PORTAbits.RA2);
 10443  001F66  0EA5               	movlw	low STR_86
 10444  001F68  0100               	movlb	0	; () banked
 10445  001F6A  6F8E               	movwf	printf@f& (0+255),b
 10446  001F6C  0EFF               	movlw	high STR_86
 10447  001F6E  0100               	movlb	0	; () banked
 10448  001F70  6F8F               	movwf	(printf@f+1)& (0+255),b
 10449  001F72  A480               	btfss	3968,2,c	;volatile
 10450  001F74  D004               	goto	u5330
 10451  001F76  0100               	movlb	0	; () banked
 10452  001F78  6BAB               	clrf	??_sensorTest& (0+255),b
 10453  001F7A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10454  001F7C  D002               	goto	u5338
 10455  001F7E                     u5330:
 10456  001F7E  0100               	movlb	0	; () banked
 10457  001F80  6BAB               	clrf	??_sensorTest& (0+255),b
 10458  001F82                     u5338:
 10459  001F82  0100               	movlb	0	; () banked
 10460  001F84  51AB               	movf	??_sensorTest& (0+255),w,b
 10461  001F86  0100               	movlb	0	; () banked
 10462  001F88  6F90               	movwf	(?_printf+2)& (0+255),b
 10463  001F8A  6B91               	clrf	(?_printf+3)& (0+255),b
 10464  001F8C  ECB8  F008         	call	_printf	;wreg free
 10465  001F90                     l6882:
 10466  001F90  B281               	btfsc	3969,1,c	;volatile
 10467  001F92  D7E3               	goto	l6878
 10468                           
 10469                           ;Test.c: 195: }
 10470                           ;Test.c: 196: LATAbits.LATA3 = ~1;
 10471  001F94  9689               	bcf	3977,3,c	;volatile
 10472  001F96  D7A5               	goto	l6858
 10473  001F98                     __end_of_sensorTest:
 10474                           	opt stack 0
 10475                           tblptru	equ	0xFF8
 10476                           tblptrh	equ	0xFF7
 10477                           tblptrl	equ	0xFF6
 10478                           tablat	equ	0xFF5
 10479                           prodh	equ	0xFF4
 10480                           prodl	equ	0xFF3
 10481                           intcon	equ	0xFF2
 10482                           intcon2	equ	0xFF1
 10483                           intcon3	equ	0xFF0
 10484                           postinc0	equ	0xFEE
 10485                           wreg	equ	0xFE8
 10486                           postdec1	equ	0xFE5
 10487                           fsr1l	equ	0xFE1
 10488                           indf2	equ	0xFDF
 10489                           postinc2	equ	0xFDE
 10490                           postdec2	equ	0xFDD
 10491                           fsr2h	equ	0xFDA
 10492                           fsr2l	equ	0xFD9
 10493                           status	equ	0xFD8
 10494                           
 10495 ;; *************** function _readMAG *****************
 10496 ;; Defined at:
 10497 ;;		line 29 in file "ADCFunctionality.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;		None
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;  res             2    4[BANK0 ] int 
 10502 ;; Return value:  Size  Location     Type
 10503 ;;                  1    wreg      void 
 10504 ;; Registers used:
 10505 ;;		wreg, status,2, status,0, cstack
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;Total ram usage:        4 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:    8
 10518 ;; This function calls:
 10519 ;;		_readADC
 10520 ;; This function is called by:
 10521 ;;		_getMAG
 10522 ;;		_sensorTest
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text38
 10527  0043BC                     __ptext38:
 10528                           	opt stack 0
 10529  0043BC                     _readMAG:
 10530                           	opt stack 19
 10531                           
 10532                           ;ADCFunctionality.c: 30: readADC(1);
 10533                           
 10534                           ;incstack = 0
 10535  0043BC  0E01               	movlw	1
 10536  0043BE  EC1B  F024         	call	_readADC
 10537                           
 10538                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10539  0043C2  50C3               	movf	4035,w,c	;volatile
 10540  0043C4  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10541  0043C8  0100               	movlb	0	; () banked
 10542  0043CA  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10543  0043CC  C082  F083         	movff	??_readMAG,??_readMAG+1
 10544  0043D0  0100               	movlb	0	; () banked
 10545  0043D2  6B82               	clrf	??_readMAG& (0+255),b
 10546  0043D4  0100               	movlb	0	; () banked
 10547  0043D6  1182               	iorwf	??_readMAG& (0+255),w,b
 10548  0043D8  0100               	movlb	0	; () banked
 10549  0043DA  6F84               	movwf	readMAG@res& (0+255),b
 10550  0043DC  0100               	movlb	0	; () banked
 10551  0043DE  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10552  0043E0  0100               	movlb	0	; () banked
 10553  0043E2  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10554                           
 10555                           ; BSR set to: 0
 10556                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10557  0043E4  0100               	movlb	0	; () banked
 10558  0043E6  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10559  0043E8  D008               	goto	u3981
 10560  0043EA  0100               	movlb	0	; () banked
 10561  0043EC  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10562  0043EE  E107               	bnz	u3980
 10563  0043F0  0E96               	movlw	150
 10564  0043F2  0100               	movlb	0	; () banked
 10565  0043F4  5D84               	subwf	readMAG@res& (0+255),w,b
 10566  0043F6  B0D8               	btfsc	status,0,c
 10567  0043F8  D002               	goto	u3980
 10568  0043FA                     u3981:
 10569  0043FA  0E01               	movlw	1
 10570  0043FC  D001               	goto	u3990
 10571  0043FE                     u3980:
 10572  0043FE  0E00               	movlw	0
 10573  004400                     u3990:
 10574  004400  0100               	movlb	0	; () banked
 10575  004402  6FE0               	movwf	_MAG_signal& (0+255),b
 10576  004404  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 10577                           
 10578                           ; BSR set to: 0
 10579  004406  0012               	return		;funcret
 10580  004408                     __end_of_readMAG:
 10581                           	opt stack 0
 10582                           tblptru	equ	0xFF8
 10583                           tblptrh	equ	0xFF7
 10584                           tblptrl	equ	0xFF6
 10585                           tablat	equ	0xFF5
 10586                           prodh	equ	0xFF4
 10587                           prodl	equ	0xFF3
 10588                           intcon	equ	0xFF2
 10589                           intcon2	equ	0xFF1
 10590                           intcon3	equ	0xFF0
 10591                           postinc0	equ	0xFEE
 10592                           wreg	equ	0xFE8
 10593                           postdec1	equ	0xFE5
 10594                           fsr1l	equ	0xFE1
 10595                           indf2	equ	0xFDF
 10596                           postinc2	equ	0xFDE
 10597                           postdec2	equ	0xFDD
 10598                           fsr2h	equ	0xFDA
 10599                           fsr2l	equ	0xFD9
 10600                           status	equ	0xFD8
 10601                           
 10602 ;; *************** function _readADC *****************
 10603 ;; Defined at:
 10604 ;;		line 15 in file "ADCFunctionality.c"
 10605 ;; Parameters:    Size  Location     Type
 10606 ;;  channel         1    wreg     unsigned char 
 10607 ;; Auto vars:     Size  Location     Type
 10608 ;;  channel         1    1[BANK0 ] unsigned char 
 10609 ;; Return value:  Size  Location     Type
 10610 ;;                  1    wreg      void 
 10611 ;; Registers used:
 10612 ;;		wreg, status,2, status,0, cstack
 10613 ;; Tracked objects:
 10614 ;;		On entry : 0/0
 10615 ;;		On exit  : 0/0
 10616 ;;		Unchanged: 0/0
 10617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10621 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10622 ;;Total ram usage:        2 bytes
 10623 ;; Hardware stack levels used:    1
 10624 ;; Hardware stack levels required when called:    7
 10625 ;; This function calls:
 10626 ;;		Nothing
 10627 ;; This function is called by:
 10628 ;;		_readIR
 10629 ;;		_readMAG
 10630 ;;		_sensorTest
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           	psect	text39
 10635  004836                     __ptext39:
 10636                           	opt stack 0
 10637  004836                     _readADC:
 10638                           	opt stack 19
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;incstack = 0
 10642                           ;readADC@channel stored from wreg
 10643  004836  0100               	movlb	0	; () banked
 10644  004838  6F81               	movwf	readADC@channel& (0+255),b
 10645                           
 10646                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10647  00483A  0100               	movlb	0	; () banked
 10648  00483C  4581               	rlncf	readADC@channel& (0+255),w,b
 10649  00483E  46E8               	rlncf	wreg,f,c
 10650  004840  0BFC               	andlw	252
 10651  004842  6EC2               	movwf	4034,c	;volatile
 10652                           
 10653                           ; BSR set to: 0
 10654                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10655  004844  80C2               	bsf	4034,0,c	;volatile
 10656                           
 10657                           ; BSR set to: 0
 10658                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10659  004846  82C2               	bsf	4034,1,c	;volatile
 10660                           
 10661                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10662  004848  D009               	goto	l5424
 10663  00484A                     l5422:
 10664  00484A  0E34               	movlw	52
 10665  00484C  0100               	movlb	0	; () banked
 10666  00484E  6F80               	movwf	??_readADC& (0+255),b
 10667  004850  0EF1               	movlw	241
 10668  004852                     u7997:
 10669  004852  2EE8               	decfsz	wreg,f,c
 10670  004854  D7FE               	bra	u7997
 10671  004856  2F80               	decfsz	??_readADC& (0+255),f,b
 10672  004858  D7FC               	bra	u7997
 10673  00485A  D000               	nop2	
 10674  00485C                     l5424:
 10675  00485C  A2C2               	btfss	4034,1,c	;volatile
 10676  00485E  0012               	return	
 10677  004860  D7F4               	goto	l5422
 10678  004862                     __end_of_readADC:
 10679                           	opt stack 0
 10680                           tblptru	equ	0xFF8
 10681                           tblptrh	equ	0xFF7
 10682                           tblptrl	equ	0xFF6
 10683                           tablat	equ	0xFF5
 10684                           prodh	equ	0xFF4
 10685                           prodl	equ	0xFF3
 10686                           intcon	equ	0xFF2
 10687                           intcon2	equ	0xFF1
 10688                           intcon3	equ	0xFF0
 10689                           postinc0	equ	0xFEE
 10690                           wreg	equ	0xFE8
 10691                           postdec1	equ	0xFE5
 10692                           fsr1l	equ	0xFE1
 10693                           indf2	equ	0xFDF
 10694                           postinc2	equ	0xFDE
 10695                           postdec2	equ	0xFDD
 10696                           fsr2h	equ	0xFDA
 10697                           fsr2l	equ	0xFD9
 10698                           status	equ	0xFD8
 10699                           
 10700 ;; *************** function _algorithmTest *****************
 10701 ;; Defined at:
 10702 ;;		line 80 in file "Test.c"
 10703 ;; Parameters:    Size  Location     Type
 10704 ;;		None
 10705 ;; Auto vars:     Size  Location     Type
 10706 ;;		None
 10707 ;; Return value:  Size  Location     Type
 10708 ;;                  1    wreg      void 
 10709 ;; Registers used:
 10710 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10711 ;; Tracked objects:
 10712 ;;		On entry : 0/0
 10713 ;;		On exit  : 0/0
 10714 ;;		Unchanged: 0/0
 10715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;Total ram usage:        2 bytes
 10721 ;; Hardware stack levels used:    1
 10722 ;; Hardware stack levels required when called:   10
 10723 ;; This function calls:
 10724 ;;		_lcdInst
 10725 ;;		_printf
 10726 ;; This function is called by:
 10727 ;;		_Test
 10728 ;; This function uses a non-reentrant model
 10729 ;;
 10730                           
 10731                           	psect	text40
 10732  003616                     __ptext40:
 10733                           	opt stack 0
 10734  003616                     _algorithmTest:
 10735                           	opt stack 19
 10736                           
 10737                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10738                           
 10739                           ;incstack = 0
 10740  003616  0E01               	movlw	1
 10741  003618  EC14  F025         	call	_lcdInst
 10742  00361C  0E68               	movlw	104
 10743  00361E  0100               	movlb	0	; () banked
 10744  003620  6FAB               	movwf	??_algorithmTest& (0+255),b
 10745  003622  0EE4               	movlw	228
 10746  003624                     u8007:
 10747  003624  2EE8               	decfsz	wreg,f,c
 10748  003626  D7FE               	bra	u8007
 10749  003628  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10750  00362A  D7FC               	bra	u8007
 10751  00362C  F000               	nop	
 10752  00362E  0E80               	movlw	128
 10753  003630  EC14  F025         	call	_lcdInst
 10754                           
 10755                           ;Test.c: 83: printf("ALGORITHM TEST");
 10756  003634  0ED2               	movlw	low STR_70
 10757  003636  0100               	movlb	0	; () banked
 10758  003638  6F8E               	movwf	printf@f& (0+255),b
 10759  00363A  0EFE               	movlw	high STR_70
 10760  00363C  0100               	movlb	0	; () banked
 10761  00363E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10762  003640  ECB8  F008         	call	_printf	;wreg free
 10763                           
 10764                           ;Test.c: 84: lcdInst(0b11000000);;
 10765  003644  0EC0               	movlw	192
 10766  003646  EC14  F025         	call	_lcdInst
 10767                           
 10768                           ;Test.c: 85: printf("PUSH TO START");
 10769  00364A  0E0B               	movlw	low STR_71
 10770  00364C  0100               	movlb	0	; () banked
 10771  00364E  6F8E               	movwf	printf@f& (0+255),b
 10772  003650  0EFF               	movlw	high STR_71
 10773  003652  0100               	movlb	0	; () banked
 10774  003654  6F8F               	movwf	(printf@f+1)& (0+255),b
 10775  003656  ECB8  F008         	call	_printf	;wreg free
 10776                           
 10777                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 10778  00365A  0E05               	movlw	5
 10779  00365C  0100               	movlb	0	; () banked
 10780  00365E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10781  003660  0E0F               	movlw	15
 10782  003662  0100               	movlb	0	; () banked
 10783  003664  6FAB               	movwf	??_algorithmTest& (0+255),b
 10784  003666  0EF1               	movlw	241
 10785  003668                     u8017:
 10786  003668  2EE8               	decfsz	wreg,f,c
 10787  00366A  D7FE               	bra	u8017
 10788  00366C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10789  00366E  D7FC               	bra	u8017
 10790  003670  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10791  003672  D7FA               	bra	u8017
 10792  003674                     l1081:
 10793  003674  A281               	btfss	3969,1,c	;volatile
 10794  003676  D7FE               	goto	l1081
 10795  003678                     l1084:
 10796  003678  B281               	btfsc	3969,1,c	;volatile
 10797  00367A  D7FE               	goto	l1084
 10798                           
 10799                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10800  00367C  0E01               	movlw	1
 10801  00367E  EC14  F025         	call	_lcdInst
 10802  003682  0E68               	movlw	104
 10803  003684  0100               	movlb	0	; () banked
 10804  003686  6FAB               	movwf	??_algorithmTest& (0+255),b
 10805  003688  0EE4               	movlw	228
 10806  00368A                     u8027:
 10807  00368A  2EE8               	decfsz	wreg,f,c
 10808  00368C  D7FE               	bra	u8027
 10809  00368E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10810  003690  D7FC               	bra	u8027
 10811  003692  F000               	nop	
 10812  003694  0E80               	movlw	128
 10813  003696  EC14  F025         	call	_lcdInst
 10814                           
 10815                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 10816  00369A  0E5F               	movlw	low STR_72
 10817  00369C  0100               	movlb	0	; () banked
 10818  00369E  6F8E               	movwf	printf@f& (0+255),b
 10819  0036A0  0EFC               	movlw	high STR_72
 10820  0036A2  0100               	movlb	0	; () banked
 10821  0036A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10822  0036A6  ECB8  F008         	call	_printf	;wreg free
 10823                           
 10824                           ;Test.c: 101: printf("ALG2: 12 CANS");
 10825  0036AA  0EEF               	movlw	low STR_73
 10826  0036AC  0100               	movlb	0	; () banked
 10827  0036AE  6F8E               	movwf	printf@f& (0+255),b
 10828  0036B0  0EFE               	movlw	high STR_73
 10829  0036B2  0100               	movlb	0	; () banked
 10830  0036B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10831  0036B6  ECB8  F008         	call	_printf	;wreg free
 10832                           
 10833                           ;Test.c: 110: printf("ALG3: 1 CAN");
 10834  0036BA  0E4F               	movlw	low STR_74
 10835  0036BC  0100               	movlb	0	; () banked
 10836  0036BE  6F8E               	movwf	printf@f& (0+255),b
 10837  0036C0  0EFF               	movlw	high STR_74
 10838  0036C2  0100               	movlb	0	; () banked
 10839  0036C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10840  0036C6  ECB8  F008         	call	_printf	;wreg free
 10841                           
 10842                           ;Test.c: 116: printf("ALG4: ALL CANS");
 10843  0036CA  0EB4               	movlw	low STR_75
 10844  0036CC  0100               	movlb	0	; () banked
 10845  0036CE  6F8E               	movwf	printf@f& (0+255),b
 10846  0036D0  0EFE               	movlw	high STR_75
 10847  0036D2  0100               	movlb	0	; () banked
 10848  0036D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10849  0036D6  ECB8  F008         	call	_printf	;wreg free
 10850                           
 10851                           ;Test.c: 121: printf("ALG5: NO CANS");
 10852  0036DA  0EFD               	movlw	low STR_76
 10853  0036DC  0100               	movlb	0	; () banked
 10854  0036DE  6F8E               	movwf	printf@f& (0+255),b
 10855  0036E0  0EFE               	movlw	high STR_76
 10856  0036E2  0100               	movlb	0	; () banked
 10857  0036E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10858  0036E6  ECB8  F008         	call	_printf	;wreg free
 10859  0036EA  0012               	return		;funcret
 10860  0036EC                     __end_of_algorithmTest:
 10861                           	opt stack 0
 10862                           tblptru	equ	0xFF8
 10863                           tblptrh	equ	0xFF7
 10864                           tblptrl	equ	0xFF6
 10865                           tablat	equ	0xFF5
 10866                           prodh	equ	0xFF4
 10867                           prodl	equ	0xFF3
 10868                           intcon	equ	0xFF2
 10869                           intcon2	equ	0xFF1
 10870                           intcon3	equ	0xFF0
 10871                           postinc0	equ	0xFEE
 10872                           wreg	equ	0xFE8
 10873                           postdec1	equ	0xFE5
 10874                           fsr1l	equ	0xFE1
 10875                           indf2	equ	0xFDF
 10876                           postinc2	equ	0xFDE
 10877                           postdec2	equ	0xFDD
 10878                           fsr2h	equ	0xFDA
 10879                           fsr2l	equ	0xFD9
 10880                           status	equ	0xFD8
 10881                           
 10882 ;; *************** function _actuatorTest *****************
 10883 ;; Defined at:
 10884 ;;		line 201 in file "Test.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;		None
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;  i               1   45[BANK0 ] unsigned char 
 10889 ;;  i               1   67[BANK0 ] unsigned char 
 10890 ;;  i               1   66[BANK0 ] unsigned char 
 10891 ;;  i               1   65[BANK0 ] unsigned char 
 10892 ;;  i               1   64[BANK0 ] unsigned char 
 10893 ;;  i               1   63[BANK0 ] unsigned char 
 10894 ;;  i               1   62[BANK0 ] unsigned char 
 10895 ;;  i               1   61[BANK0 ] unsigned char 
 10896 ;;  i               1   60[BANK0 ] unsigned char 
 10897 ;;  i               1   59[BANK0 ] unsigned char 
 10898 ;;  i               1   58[BANK0 ] unsigned char 
 10899 ;;  i               1   57[BANK0 ] unsigned char 
 10900 ;;  i               1   56[BANK0 ] unsigned char 
 10901 ;;  i               1   55[BANK0 ] unsigned char 
 10902 ;;  i               1   54[BANK0 ] unsigned char 
 10903 ;;  i               1   53[BANK0 ] unsigned char 
 10904 ;;  i               1   52[BANK0 ] unsigned char 
 10905 ;;  i               1   51[BANK0 ] unsigned char 
 10906 ;;  i               1   50[BANK0 ] unsigned char 
 10907 ;;  i               1   49[BANK0 ] unsigned char 
 10908 ;;  i               1   48[BANK0 ] unsigned char 
 10909 ;;  i               1   47[BANK0 ] unsigned char 
 10910 ;;  i               1   46[BANK0 ] unsigned char 
 10911 ;;  i               2   68[BANK0 ] int 
 10912 ;; Return value:  Size  Location     Type
 10913 ;;                  1    wreg      void 
 10914 ;; Registers used:
 10915 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10916 ;; Tracked objects:
 10917 ;;		On entry : 0/0
 10918 ;;		On exit  : 0/0
 10919 ;;		Unchanged: 0/0
 10920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10922 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;Total ram usage:       27 bytes
 10926 ;; Hardware stack levels used:    1
 10927 ;; Hardware stack levels required when called:   10
 10928 ;; This function calls:
 10929 ;;		_lcdInst
 10930 ;;		_printf
 10931 ;;		_updateServoPosition
 10932 ;; This function is called by:
 10933 ;;		_Test
 10934 ;; This function uses a non-reentrant model
 10935 ;;
 10936                           
 10937                           	psect	text41
 10938  000012                     __ptext41:
 10939                           	opt stack 0
 10940  000012                     _actuatorTest:
 10941                           	opt stack 19
 10942                           
 10943                           ;Test.c: 203: int i = 0;
 10944                           
 10945                           ;incstack = 0
 10946  000012  0E00               	movlw	0
 10947  000014  0100               	movlb	0	; () banked
 10948  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10949  000018  0E00               	movlw	0
 10950  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10951                           
 10952                           ; BSR set to: 0
 10953                           ;Test.c: 205: (INTCONbits.GIE = 1);
 10954  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10958  00001E  0E01               	movlw	1
 10959  000020  EC14  F025         	call	_lcdInst
 10960  000024  0E68               	movlw	104
 10961  000026  0100               	movlb	0	; () banked
 10962  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10963  00002A  0EE4               	movlw	228
 10964  00002C                     u8037:
 10965  00002C  2EE8               	decfsz	wreg,f,c
 10966  00002E  D7FE               	bra	u8037
 10967  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10968  000032  D7FC               	bra	u8037
 10969  000034  F000               	nop	
 10970  000036  0E80               	movlw	128
 10971  000038  EC14  F025         	call	_lcdInst
 10972                           
 10973                           ;Test.c: 207: printf("ACTUATORS");
 10974  00003C  0E91               	movlw	low STR_88
 10975  00003E  0100               	movlb	0	; () banked
 10976  000040  6F8E               	movwf	printf@f& (0+255),b
 10977  000042  0EFF               	movlw	high STR_88
 10978  000044  0100               	movlb	0	; () banked
 10979  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10980  000048  ECB8  F008         	call	_printf	;wreg free
 10981                           
 10982                           ;Test.c: 208: lcdInst(0b11000000);;
 10983  00004C  0EC0               	movlw	192
 10984  00004E  EC14  F025         	call	_lcdInst
 10985                           
 10986                           ;Test.c: 209: printf("PUSH TO START");
 10987  000052  0E0B               	movlw	low STR_71
 10988  000054  0100               	movlb	0	; () banked
 10989  000056  6F8E               	movwf	printf@f& (0+255),b
 10990  000058  0EFF               	movlw	high STR_71
 10991  00005A  0100               	movlb	0	; () banked
 10992  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10993  00005E  ECB8  F008         	call	_printf	;wreg free
 10994                           
 10995                           ;Test.c: 210: _delay((unsigned long)((100)*(32000000/4000.0)));
 10996  000062  0E05               	movlw	5
 10997  000064  0100               	movlb	0	; () banked
 10998  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10999  000068  0E0F               	movlw	15
 11000  00006A  0100               	movlb	0	; () banked
 11001  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11002  00006E  0EF1               	movlw	241
 11003  000070                     u8047:
 11004  000070  2EE8               	decfsz	wreg,f,c
 11005  000072  D7FE               	bra	u8047
 11006  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11007  000076  D7FC               	bra	u8047
 11008  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11009  00007A  D7FA               	bra	u8047
 11010  00007C                     l1116:
 11011  00007C  A281               	btfss	3969,1,c	;volatile
 11012  00007E  D7FE               	goto	l1116
 11013  000080                     l1119:
 11014  000080  B281               	btfsc	3969,1,c	;volatile
 11015  000082  D7FE               	goto	l1119
 11016                           
 11017                           ;Test.c: 213: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11018  000084  0E01               	movlw	1
 11019  000086  EC14  F025         	call	_lcdInst
 11020  00008A  0E68               	movlw	104
 11021  00008C  0100               	movlb	0	; () banked
 11022  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11023  000090  0EE4               	movlw	228
 11024  000092                     u8057:
 11025  000092  2EE8               	decfsz	wreg,f,c
 11026  000094  D7FE               	bra	u8057
 11027  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11028  000098  D7FC               	bra	u8057
 11029  00009A  F000               	nop	
 11030  00009C  0E80               	movlw	128
 11031  00009E  EC14  F025         	call	_lcdInst
 11032                           
 11033                           ;Test.c: 218: printf("TST: DC MOTORS");
 11034  0000A2  0EC3               	movlw	low STR_90
 11035  0000A4  0100               	movlb	0	; () banked
 11036  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11037  0000A8  0EFE               	movlw	high STR_90
 11038  0000AA  0100               	movlb	0	; () banked
 11039  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11040  0000AE  ECB8  F008         	call	_printf	;wreg free
 11041                           
 11042                           ;Test.c: 219: lcdInst(0b11000000);;
 11043  0000B2  0EC0               	movlw	192
 11044  0000B4  EC14  F025         	call	_lcdInst
 11045                           
 11046                           ;Test.c: 220: printf("PIN RA5 HIGH.");
 11047  0000B8  0EE1               	movlw	low STR_91
 11048  0000BA  0100               	movlb	0	; () banked
 11049  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11050  0000BE  0EFE               	movlw	high STR_91
 11051  0000C0  0100               	movlb	0	; () banked
 11052  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11053  0000C4  ECB8  F008         	call	_printf	;wreg free
 11054                           
 11055                           ;Test.c: 221: LATAbits.LATA5 = 1;
 11056  0000C8  8A89               	bsf	3977,5,c	;volatile
 11057                           
 11058                           ;Test.c: 222: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11059  0000CA  0E00               	movlw	0
 11060  0000CC  0100               	movlb	0	; () banked
 11061  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11062  0000D0  0E00               	movlw	0
 11063  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11064                           
 11065                           ; BSR set to: 0
 11066  0000D4  0100               	movlb	0	; () banked
 11067  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11068  0000D8  D008               	goto	l6922
 11069  0000DA  0100               	movlb	0	; () banked
 11070  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11071  0000DE  E123               	bnz	l1123
 11072  0000E0  0E05               	movlw	5
 11073  0000E2  0100               	movlb	0	; () banked
 11074  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11075  0000E6  B0D8               	btfsc	status,0,c
 11076  0000E8  D01E               	goto	l1123
 11077  0000EA                     l6922:
 11078                           
 11079                           ; BSR set to: 0
 11080  0000EA  0E00               	movlw	0
 11081  0000EC  0100               	movlb	0	; () banked
 11082  0000EE  6FAD               	movwf	actuatorTest@i_1644& (0+255),b
 11083  0000F0                     l6924:
 11084                           
 11085                           ; BSR set to: 0
 11086  0000F0  0E63               	movlw	99
 11087  0000F2  0100               	movlb	0	; () banked
 11088  0000F4  65AD               	cpfsgt	actuatorTest@i_1644& (0+255),b
 11089  0000F6  D001               	goto	l6928
 11090  0000F8  D00C               	goto	l6932
 11091  0000FA                     l6928:
 11092                           
 11093                           ; BSR set to: 0
 11094  0000FA  0E68               	movlw	104
 11095  0000FC  0100               	movlb	0	; () banked
 11096  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11097  000100  0EE4               	movlw	228
 11098  000102                     u8067:
 11099  000102  2EE8               	decfsz	wreg,f,c
 11100  000104  D7FE               	bra	u8067
 11101  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11102  000108  D7FC               	bra	u8067
 11103  00010A  F000               	nop	
 11104  00010C  0100               	movlb	0	; () banked
 11105  00010E  2BAD               	incf	actuatorTest@i_1644& (0+255),f,b
 11106  000110  D7EF               	goto	l6924
 11107  000112                     l6932:
 11108                           
 11109                           ; BSR set to: 0
 11110  000112  0100               	movlb	0	; () banked
 11111  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11112  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11113                           
 11114                           ; BSR set to: 0
 11115  000118  0100               	movlb	0	; () banked
 11116  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11117  00011C  D7E6               	goto	l6922
 11118  00011E  0100               	movlb	0	; () banked
 11119  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11120  000122  E101               	bnz	u5400
 11121  000124  D7DD               	goto	L6
 11122  000126                     u5400:
 11123  000126                     l1123:
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;Test.c: 223: LATAbits.LATA5 = 0;
 11127  000126  9A89               	bcf	3977,5,c	;volatile
 11128                           
 11129                           ; BSR set to: 0
 11130                           ;Test.c: 224: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11131  000128  0E01               	movlw	1
 11132  00012A  EC14  F025         	call	_lcdInst
 11133  00012E  0E68               	movlw	104
 11134  000130  0100               	movlb	0	; () banked
 11135  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11136  000134  0EE4               	movlw	228
 11137  000136                     u8077:
 11138  000136  2EE8               	decfsz	wreg,f,c
 11139  000138  D7FE               	bra	u8077
 11140  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11141  00013C  D7FC               	bra	u8077
 11142  00013E  F000               	nop	
 11143  000140  0E80               	movlw	128
 11144  000142  EC14  F025         	call	_lcdInst
 11145                           
 11146                           ;Test.c: 230: printf("TST: COND SOLN'D");
 11147  000146  0E81               	movlw	low STR_92
 11148  000148  0100               	movlb	0	; () banked
 11149  00014A  6F8E               	movwf	printf@f& (0+255),b
 11150  00014C  0EFC               	movlw	high STR_92
 11151  00014E  0100               	movlb	0	; () banked
 11152  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11153  000152  ECB8  F008         	call	_printf	;wreg free
 11154                           
 11155                           ;Test.c: 231: lcdInst(0b11000000);;
 11156  000156  0EC0               	movlw	192
 11157  000158  EC14  F025         	call	_lcdInst
 11158                           
 11159                           ;Test.c: 232: printf("PIN RA3...");
 11160  00015C  0E5B               	movlw	low STR_93
 11161  00015E  0100               	movlb	0	; () banked
 11162  000160  6F8E               	movwf	printf@f& (0+255),b
 11163  000162  0EFF               	movlw	high STR_93
 11164  000164  0100               	movlb	0	; () banked
 11165  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11166  000168  ECB8  F008         	call	_printf	;wreg free
 11167                           
 11168                           ;Test.c: 233: for(i=0;i<5;i++){
 11169  00016C  0E00               	movlw	0
 11170  00016E  0100               	movlb	0	; () banked
 11171  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11172  000172  0E00               	movlw	0
 11173  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11174                           
 11175                           ; BSR set to: 0
 11176  000176  0100               	movlb	0	; () banked
 11177  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11178  00017A  D008               	goto	l1126
 11179  00017C  0100               	movlb	0	; () banked
 11180  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11181  000180  E12C               	bnz	l1127
 11182  000182  0E05               	movlw	5
 11183  000184  0100               	movlb	0	; () banked
 11184  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11185  000188  B0D8               	btfsc	status,0,c
 11186  00018A  D027               	goto	l1127
 11187  00018C                     l1126:
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;Test.c: 234: LATAbits.LATA3 = 1;
 11191  00018C  8689               	bsf	3977,3,c	;volatile
 11192                           
 11193                           ; BSR set to: 0
 11194                           ;Test.c: 235: _delay((unsigned long)((300)*(32000000/4000.0)));
 11195  00018E  0E0D               	movlw	13
 11196  000190  0100               	movlb	0	; () banked
 11197  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11198  000194  0E2D               	movlw	45
 11199  000196  0100               	movlb	0	; () banked
 11200  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11201  00019A  0ED7               	movlw	215
 11202  00019C                     u8087:
 11203  00019C  2EE8               	decfsz	wreg,f,c
 11204  00019E  D7FE               	bra	u8087
 11205  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11206  0001A2  D7FC               	bra	u8087
 11207  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11208  0001A6  D7FA               	bra	u8087
 11209  0001A8  D000               	nop2	
 11210                           
 11211                           ;Test.c: 236: LATAbits.LATA3 = ~1;
 11212  0001AA  9689               	bcf	3977,3,c	;volatile
 11213                           
 11214                           ;Test.c: 237: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11215  0001AC  0E1D               	movlw	29
 11216  0001AE  0100               	movlb	0	; () banked
 11217  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11218  0001B2  0E69               	movlw	105
 11219  0001B4  0100               	movlb	0	; () banked
 11220  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11221  0001B8  0EA5               	movlw	165
 11222  0001BA                     u8097:
 11223  0001BA  2EE8               	decfsz	wreg,f,c
 11224  0001BC  D7FE               	bra	u8097
 11225  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11226  0001C0  D7FC               	bra	u8097
 11227  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11228  0001C4  D7FA               	bra	u8097
 11229  0001C6  0100               	movlb	0	; () banked
 11230  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11231  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11232  0001CC  0100               	movlb	0	; () banked
 11233  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11234  0001D0  D7DD               	goto	l1126
 11235  0001D2  0100               	movlb	0	; () banked
 11236  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11237  0001D6  E101               	bnz	u5420
 11238  0001D8  D7D4               	goto	L7
 11239  0001DA                     u5420:
 11240  0001DA                     l1127:
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;Test.c: 238: }
 11244                           ;Test.c: 239: LATAbits.LATA3 = ~1;
 11245  0001DA  9689               	bcf	3977,3,c	;volatile
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;Test.c: 240: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11249  0001DC  0E01               	movlw	1
 11250  0001DE  EC14  F025         	call	_lcdInst
 11251  0001E2  0E68               	movlw	104
 11252  0001E4  0100               	movlb	0	; () banked
 11253  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11254  0001E8  0EE4               	movlw	228
 11255  0001EA                     u8107:
 11256  0001EA  2EE8               	decfsz	wreg,f,c
 11257  0001EC  D7FE               	bra	u8107
 11258  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11259  0001F0  D7FC               	bra	u8107
 11260  0001F2  F000               	nop	
 11261  0001F4  0E80               	movlw	128
 11262  0001F6  EC14  F025         	call	_lcdInst
 11263                           
 11264                           ;Test.c: 246: printf("TST: PUSH SOLN'D");
 11265  0001FA  0E92               	movlw	low STR_94
 11266  0001FC  0100               	movlb	0	; () banked
 11267  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11268  000200  0EFC               	movlw	high STR_94
 11269  000202  0100               	movlb	0	; () banked
 11270  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11271  000206  ECB8  F008         	call	_printf	;wreg free
 11272                           
 11273                           ;Test.c: 247: lcdInst(0b11000000);;
 11274  00020A  0EC0               	movlw	192
 11275  00020C  EC14  F025         	call	_lcdInst
 11276                           
 11277                           ;Test.c: 248: printf("PIN RA4...");
 11278  000210  0E66               	movlw	low STR_95
 11279  000212  0100               	movlb	0	; () banked
 11280  000214  6F8E               	movwf	printf@f& (0+255),b
 11281  000216  0EFF               	movlw	high STR_95
 11282  000218  0100               	movlb	0	; () banked
 11283  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11284  00021C  ECB8  F008         	call	_printf	;wreg free
 11285                           
 11286                           ;Test.c: 249: for(i=0;i<5;i++){
 11287  000220  0E00               	movlw	0
 11288  000222  0100               	movlb	0	; () banked
 11289  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11290  000226  0E00               	movlw	0
 11291  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11292                           
 11293                           ; BSR set to: 0
 11294  00022A  0100               	movlb	0	; () banked
 11295  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11296  00022E  D008               	goto	l1128
 11297  000230  0100               	movlb	0	; () banked
 11298  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11299  000234  E12C               	bnz	l1129
 11300  000236  0E05               	movlw	5
 11301  000238  0100               	movlb	0	; () banked
 11302  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11303  00023C  B0D8               	btfsc	status,0,c
 11304  00023E  D027               	goto	l1129
 11305  000240                     l1128:
 11306                           
 11307                           ; BSR set to: 0
 11308                           ;Test.c: 250: LATAbits.LATA4 = 1;
 11309  000240  8889               	bsf	3977,4,c	;volatile
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;Test.c: 251: _delay((unsigned long)((300)*(32000000/4000.0)));
 11313  000242  0E0D               	movlw	13
 11314  000244  0100               	movlb	0	; () banked
 11315  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11316  000248  0E2D               	movlw	45
 11317  00024A  0100               	movlb	0	; () banked
 11318  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11319  00024E  0ED7               	movlw	215
 11320  000250                     u8117:
 11321  000250  2EE8               	decfsz	wreg,f,c
 11322  000252  D7FE               	bra	u8117
 11323  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11324  000256  D7FC               	bra	u8117
 11325  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11326  00025A  D7FA               	bra	u8117
 11327  00025C  D000               	nop2	
 11328                           
 11329                           ;Test.c: 252: LATAbits.LATA4 = ~1;
 11330  00025E  9889               	bcf	3977,4,c	;volatile
 11331                           
 11332                           ;Test.c: 253: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11333  000260  0E1D               	movlw	29
 11334  000262  0100               	movlb	0	; () banked
 11335  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11336  000266  0E69               	movlw	105
 11337  000268  0100               	movlb	0	; () banked
 11338  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11339  00026C  0EA5               	movlw	165
 11340  00026E                     u8127:
 11341  00026E  2EE8               	decfsz	wreg,f,c
 11342  000270  D7FE               	bra	u8127
 11343  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11344  000274  D7FC               	bra	u8127
 11345  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11346  000278  D7FA               	bra	u8127
 11347  00027A  0100               	movlb	0	; () banked
 11348  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11349  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11350  000280  0100               	movlb	0	; () banked
 11351  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11352  000284  D7DD               	goto	l1128
 11353  000286  0100               	movlb	0	; () banked
 11354  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11355  00028A  E101               	bnz	u5440
 11356  00028C  D7D4               	goto	L8
 11357  00028E                     u5440:
 11358  00028E                     l1129:
 11359                           
 11360                           ; BSR set to: 0
 11361                           ;Test.c: 254: }
 11362                           ;Test.c: 255: LATAbits.LATA4 = ~1;
 11363  00028E  9889               	bcf	3977,4,c	;volatile
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;Test.c: 256: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11367  000290  0E01               	movlw	1
 11368  000292  EC14  F025         	call	_lcdInst
 11369  000296  0E68               	movlw	104
 11370  000298  0100               	movlb	0	; () banked
 11371  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11372  00029C  0EE4               	movlw	228
 11373  00029E                     u8137:
 11374  00029E  2EE8               	decfsz	wreg,f,c
 11375  0002A0  D7FE               	bra	u8137
 11376  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11377  0002A4  D7FC               	bra	u8137
 11378  0002A6  F000               	nop	
 11379  0002A8  0E80               	movlw	128
 11380  0002AA  EC14  F025         	call	_lcdInst
 11381                           
 11382                           ;Test.c: 259: machine_state = Sorting_state;
 11383  0002AE  0E01               	movlw	1
 11384  0002B0  0100               	movlb	0	; () banked
 11385  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;Test.c: 260: was_low_1 = 0;
 11389  0002B4  0E00               	movlw	0
 11390  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11391  0002B8  0E00               	movlw	0
 11392  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;Test.c: 261: was_low_1 = 0;
 11396  0002BC  0E00               	movlw	0
 11397  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11398  0002C0  0E00               	movlw	0
 11399  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;Test.c: 268: printf("TST: PAN SERVO");
 11403  0002C4  0EA5               	movlw	low STR_96
 11404  0002C6  0100               	movlb	0	; () banked
 11405  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11406  0002CA  0EFE               	movlw	high STR_96
 11407  0002CC  0100               	movlb	0	; () banked
 11408  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11409  0002D0  ECB8  F008         	call	_printf	;wreg free
 11410                           
 11411                           ;Test.c: 269: lcdInst(0b11000000);;
 11412  0002D4  0EC0               	movlw	192
 11413  0002D6  EC14  F025         	call	_lcdInst
 11414                           
 11415                           ;Test.c: 270: printf("MIDDLE -- 2s    ");
 11416  0002DA  0E0A               	movlw	low STR_97
 11417  0002DC  0100               	movlb	0	; () banked
 11418  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11419  0002E0  0EFC               	movlw	high STR_97
 11420  0002E2  0100               	movlb	0	; () banked
 11421  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11422  0002E6  ECB8  F008         	call	_printf	;wreg free
 11423                           
 11424                           ;Test.c: 271: updateServoPosition(1200, 1);
 11425  0002EA  0E04               	movlw	4
 11426  0002EC  0100               	movlb	0	; () banked
 11427  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11428  0002F0  0EB0               	movlw	176
 11429  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11430  0002F4  0E00               	movlw	0
 11431  0002F6  0100               	movlb	0	; () banked
 11432  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11433  0002FA  0E01               	movlw	1
 11434  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11435  0002FE  EC4B  F01F         	call	_updateServoPosition	;wreg free
 11436                           
 11437                           ;Test.c: 272: TMR1ON = 1;
 11438  000302  80CD               	bsf	4045,0,c	;volatile
 11439                           
 11440                           ;Test.c: 273: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11441  000304  0E00               	movlw	0
 11442  000306  0100               	movlb	0	; () banked
 11443  000308  6FAE               	movwf	actuatorTest@i_1651& (0+255),b
 11444  00030A                     l7008:
 11445                           
 11446                           ; BSR set to: 0
 11447  00030A  0E63               	movlw	99
 11448  00030C  0100               	movlb	0	; () banked
 11449  00030E  65AE               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11450  000310  D001               	goto	l7012
 11451  000312  D00C               	goto	l7016
 11452  000314                     l7012:
 11453                           
 11454                           ; BSR set to: 0
 11455  000314  0E68               	movlw	104
 11456  000316  0100               	movlb	0	; () banked
 11457  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11458  00031A  0EE4               	movlw	228
 11459  00031C                     u8147:
 11460  00031C  2EE8               	decfsz	wreg,f,c
 11461  00031E  D7FE               	bra	u8147
 11462  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11463  000322  D7FC               	bra	u8147
 11464  000324  F000               	nop	
 11465  000326  0100               	movlb	0	; () banked
 11466  000328  2BAE               	incf	actuatorTest@i_1651& (0+255),f,b
 11467  00032A  D7EF               	goto	l7008
 11468  00032C                     l7016:
 11469                           
 11470                           ; BSR set to: 0
 11471  00032C  0E00               	movlw	0
 11472  00032E  0100               	movlb	0	; () banked
 11473  000330  6FAF               	movwf	actuatorTest@i_1652& (0+255),b
 11474  000332                     l7018:
 11475                           
 11476                           ; BSR set to: 0
 11477  000332  0E63               	movlw	99
 11478  000334  0100               	movlb	0	; () banked
 11479  000336  65AF               	cpfsgt	actuatorTest@i_1652& (0+255),b
 11480  000338  D001               	goto	l7022
 11481  00033A  D00C               	goto	l7026
 11482  00033C                     l7022:
 11483                           
 11484                           ; BSR set to: 0
 11485  00033C  0E68               	movlw	104
 11486  00033E  0100               	movlb	0	; () banked
 11487  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11488  000342  0EE4               	movlw	228
 11489  000344                     u8157:
 11490  000344  2EE8               	decfsz	wreg,f,c
 11491  000346  D7FE               	bra	u8157
 11492  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11493  00034A  D7FC               	bra	u8157
 11494  00034C  F000               	nop	
 11495  00034E  0100               	movlb	0	; () banked
 11496  000350  2BAF               	incf	actuatorTest@i_1652& (0+255),f,b
 11497  000352  D7EF               	goto	l7018
 11498  000354                     l7026:
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;Test.c: 275: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11502  000354  0E80               	movlw	128
 11503  000356  EC14  F025         	call	_lcdInst
 11504  00035A  0EC0               	movlw	192
 11505  00035C  EC14  F025         	call	_lcdInst
 11506                           
 11507                           ;Test.c: 276: printf("RIGHT -- 2s     ");
 11508  000360  0EF9               	movlw	low STR_98
 11509  000362  0100               	movlb	0	; () banked
 11510  000364  6F8E               	movwf	printf@f& (0+255),b
 11511  000366  0EFB               	movlw	high STR_98
 11512  000368  0100               	movlb	0	; () banked
 11513  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11514  00036C  ECB8  F008         	call	_printf	;wreg free
 11515                           
 11516                           ;Test.c: 277: updateServoPosition(500, 1);
 11517  000370  0E01               	movlw	1
 11518  000372  0100               	movlb	0	; () banked
 11519  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11520  000376  0EF4               	movlw	244
 11521  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11522  00037A  0E00               	movlw	0
 11523  00037C  0100               	movlb	0	; () banked
 11524  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11525  000380  0E01               	movlw	1
 11526  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11527  000384  EC4B  F01F         	call	_updateServoPosition	;wreg free
 11528                           
 11529                           ;Test.c: 278: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11530  000388  0E00               	movlw	0
 11531  00038A  0100               	movlb	0	; () banked
 11532  00038C  6FB0               	movwf	actuatorTest@i_1654& (0+255),b
 11533  00038E                     l7034:
 11534                           
 11535                           ; BSR set to: 0
 11536  00038E  0E63               	movlw	99
 11537  000390  0100               	movlb	0	; () banked
 11538  000392  65B0               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11539  000394  D001               	goto	l7038
 11540  000396  D00C               	goto	l7042
 11541  000398                     l7038:
 11542                           
 11543                           ; BSR set to: 0
 11544  000398  0E68               	movlw	104
 11545  00039A  0100               	movlb	0	; () banked
 11546  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11547  00039E  0EE4               	movlw	228
 11548  0003A0                     u8167:
 11549  0003A0  2EE8               	decfsz	wreg,f,c
 11550  0003A2  D7FE               	bra	u8167
 11551  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11552  0003A6  D7FC               	bra	u8167
 11553  0003A8  F000               	nop	
 11554  0003AA  0100               	movlb	0	; () banked
 11555  0003AC  2BB0               	incf	actuatorTest@i_1654& (0+255),f,b
 11556  0003AE  D7EF               	goto	l7034
 11557  0003B0                     l7042:
 11558                           
 11559                           ; BSR set to: 0
 11560  0003B0  0E00               	movlw	0
 11561  0003B2  0100               	movlb	0	; () banked
 11562  0003B4  6FB1               	movwf	actuatorTest@i_1655& (0+255),b
 11563  0003B6                     l7044:
 11564                           
 11565                           ; BSR set to: 0
 11566  0003B6  0E63               	movlw	99
 11567  0003B8  0100               	movlb	0	; () banked
 11568  0003BA  65B1               	cpfsgt	actuatorTest@i_1655& (0+255),b
 11569  0003BC  D001               	goto	l7048
 11570  0003BE  D00C               	goto	l7052
 11571  0003C0                     l7048:
 11572                           
 11573                           ; BSR set to: 0
 11574  0003C0  0E68               	movlw	104
 11575  0003C2  0100               	movlb	0	; () banked
 11576  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11577  0003C6  0EE4               	movlw	228
 11578  0003C8                     u8177:
 11579  0003C8  2EE8               	decfsz	wreg,f,c
 11580  0003CA  D7FE               	bra	u8177
 11581  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11582  0003CE  D7FC               	bra	u8177
 11583  0003D0  F000               	nop	
 11584  0003D2  0100               	movlb	0	; () banked
 11585  0003D4  2BB1               	incf	actuatorTest@i_1655& (0+255),f,b
 11586  0003D6  D7EF               	goto	l7044
 11587  0003D8                     l7052:
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;Test.c: 280: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11591  0003D8  0E80               	movlw	128
 11592  0003DA  EC14  F025         	call	_lcdInst
 11593  0003DE  0EC0               	movlw	192
 11594  0003E0  EC14  F025         	call	_lcdInst
 11595                           
 11596                           ;Test.c: 281: printf("LEFT -- 2s      ");
 11597  0003E4  0ED7               	movlw	low STR_99
 11598  0003E6  0100               	movlb	0	; () banked
 11599  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11600  0003EA  0EFB               	movlw	high STR_99
 11601  0003EC  0100               	movlb	0	; () banked
 11602  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11603  0003F0  ECB8  F008         	call	_printf	;wreg free
 11604                           
 11605                           ;Test.c: 282: updateServoPosition(2200, 1);
 11606  0003F4  0E08               	movlw	8
 11607  0003F6  0100               	movlb	0	; () banked
 11608  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11609  0003FA  0E98               	movlw	152
 11610  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11611  0003FE  0E00               	movlw	0
 11612  000400  0100               	movlb	0	; () banked
 11613  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11614  000404  0E01               	movlw	1
 11615  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11616  000408  EC4B  F01F         	call	_updateServoPosition	;wreg free
 11617                           
 11618                           ;Test.c: 283: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11619  00040C  0E00               	movlw	0
 11620  00040E  0100               	movlb	0	; () banked
 11621  000410  6FB2               	movwf	actuatorTest@i_1657& (0+255),b
 11622  000412                     l7060:
 11623                           
 11624                           ; BSR set to: 0
 11625  000412  0E63               	movlw	99
 11626  000414  0100               	movlb	0	; () banked
 11627  000416  65B2               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11628  000418  D001               	goto	l7064
 11629  00041A  D00C               	goto	l7068
 11630  00041C                     l7064:
 11631                           
 11632                           ; BSR set to: 0
 11633  00041C  0E68               	movlw	104
 11634  00041E  0100               	movlb	0	; () banked
 11635  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11636  000422  0EE4               	movlw	228
 11637  000424                     u8187:
 11638  000424  2EE8               	decfsz	wreg,f,c
 11639  000426  D7FE               	bra	u8187
 11640  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11641  00042A  D7FC               	bra	u8187
 11642  00042C  F000               	nop	
 11643  00042E  0100               	movlb	0	; () banked
 11644  000430  2BB2               	incf	actuatorTest@i_1657& (0+255),f,b
 11645  000432  D7EF               	goto	l7060
 11646  000434                     l7068:
 11647                           
 11648                           ; BSR set to: 0
 11649  000434  0E00               	movlw	0
 11650  000436  0100               	movlb	0	; () banked
 11651  000438  6FB3               	movwf	actuatorTest@i_1658& (0+255),b
 11652  00043A                     l7070:
 11653                           
 11654                           ; BSR set to: 0
 11655  00043A  0E63               	movlw	99
 11656  00043C  0100               	movlb	0	; () banked
 11657  00043E  65B3               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11658  000440  D001               	goto	l7074
 11659  000442  D00C               	goto	l7078
 11660  000444                     l7074:
 11661                           
 11662                           ; BSR set to: 0
 11663  000444  0E68               	movlw	104
 11664  000446  0100               	movlb	0	; () banked
 11665  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11666  00044A  0EE4               	movlw	228
 11667  00044C                     u8197:
 11668  00044C  2EE8               	decfsz	wreg,f,c
 11669  00044E  D7FE               	bra	u8197
 11670  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11671  000452  D7FC               	bra	u8197
 11672  000454  F000               	nop	
 11673  000456  0100               	movlb	0	; () banked
 11674  000458  2BB3               	incf	actuatorTest@i_1658& (0+255),f,b
 11675  00045A  D7EF               	goto	l7070
 11676  00045C                     l7078:
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;Test.c: 285: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11680  00045C  0E80               	movlw	128
 11681  00045E  EC14  F025         	call	_lcdInst
 11682  000462  0EC0               	movlw	192
 11683  000464  EC14  F025         	call	_lcdInst
 11684                           
 11685                           ;Test.c: 286: printf("MID-LEFT -- 2s  ");
 11686  000468  0E2C               	movlw	low STR_100
 11687  00046A  0100               	movlb	0	; () banked
 11688  00046C  6F8E               	movwf	printf@f& (0+255),b
 11689  00046E  0EFC               	movlw	high STR_100
 11690  000470  0100               	movlb	0	; () banked
 11691  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11692  000474  ECB8  F008         	call	_printf	;wreg free
 11693                           
 11694                           ;Test.c: 287: updateServoPosition(1670, 1);
 11695  000478  0E06               	movlw	6
 11696  00047A  0100               	movlb	0	; () banked
 11697  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11698  00047E  0E86               	movlw	134
 11699  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11700  000482  0E00               	movlw	0
 11701  000484  0100               	movlb	0	; () banked
 11702  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11703  000488  0E01               	movlw	1
 11704  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11705  00048C  EC4B  F01F         	call	_updateServoPosition	;wreg free
 11706                           
 11707                           ;Test.c: 288: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11708  000490  0E00               	movlw	0
 11709  000492  0100               	movlb	0	; () banked
 11710  000494  6FB4               	movwf	actuatorTest@i_1660& (0+255),b
 11711  000496                     l7086:
 11712                           
 11713                           ; BSR set to: 0
 11714  000496  0E63               	movlw	99
 11715  000498  0100               	movlb	0	; () banked
 11716  00049A  65B4               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11717  00049C  D001               	goto	l7090
 11718  00049E  D00C               	goto	l7094
 11719  0004A0                     l7090:
 11720                           
 11721                           ; BSR set to: 0
 11722  0004A0  0E68               	movlw	104
 11723  0004A2  0100               	movlb	0	; () banked
 11724  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11725  0004A6  0EE4               	movlw	228
 11726  0004A8                     u8207:
 11727  0004A8  2EE8               	decfsz	wreg,f,c
 11728  0004AA  D7FE               	bra	u8207
 11729  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11730  0004AE  D7FC               	bra	u8207
 11731  0004B0  F000               	nop	
 11732  0004B2  0100               	movlb	0	; () banked
 11733  0004B4  2BB4               	incf	actuatorTest@i_1660& (0+255),f,b
 11734  0004B6  D7EF               	goto	l7086
 11735  0004B8                     l7094:
 11736                           
 11737                           ; BSR set to: 0
 11738  0004B8  0E00               	movlw	0
 11739  0004BA  0100               	movlb	0	; () banked
 11740  0004BC  6FB5               	movwf	actuatorTest@i_1661& (0+255),b
 11741  0004BE                     l7096:
 11742                           
 11743                           ; BSR set to: 0
 11744  0004BE  0E63               	movlw	99
 11745  0004C0  0100               	movlb	0	; () banked
 11746  0004C2  65B5               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11747  0004C4  D001               	goto	l7100
 11748  0004C6  D00C               	goto	l7104
 11749  0004C8                     l7100:
 11750                           
 11751                           ; BSR set to: 0
 11752  0004C8  0E68               	movlw	104
 11753  0004CA  0100               	movlb	0	; () banked
 11754  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11755  0004CE  0EE4               	movlw	228
 11756  0004D0                     u8217:
 11757  0004D0  2EE8               	decfsz	wreg,f,c
 11758  0004D2  D7FE               	bra	u8217
 11759  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11760  0004D6  D7FC               	bra	u8217
 11761  0004D8  F000               	nop	
 11762  0004DA  0100               	movlb	0	; () banked
 11763  0004DC  2BB5               	incf	actuatorTest@i_1661& (0+255),f,b
 11764  0004DE  D7EF               	goto	l7096
 11765  0004E0                     l7104:
 11766                           
 11767                           ; BSR set to: 0
 11768                           ;Test.c: 290: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11769  0004E0  0E80               	movlw	128
 11770  0004E2  EC14  F025         	call	_lcdInst
 11771  0004E6  0EC0               	movlw	192
 11772  0004E8  EC14  F025         	call	_lcdInst
 11773                           
 11774                           ;Test.c: 291: printf("MID-RIGHT -- 2s ");
 11775  0004EC  0E3D               	movlw	low STR_101
 11776  0004EE  0100               	movlb	0	; () banked
 11777  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11778  0004F2  0EFC               	movlw	high STR_101
 11779  0004F4  0100               	movlb	0	; () banked
 11780  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11781  0004F8  ECB8  F008         	call	_printf	;wreg free
 11782                           
 11783                           ;Test.c: 292: updateServoPosition(850, 1);
 11784  0004FC  0E03               	movlw	3
 11785  0004FE  0100               	movlb	0	; () banked
 11786  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11787  000502  0E52               	movlw	82
 11788  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11789  000506  0E00               	movlw	0
 11790  000508  0100               	movlb	0	; () banked
 11791  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11792  00050C  0E01               	movlw	1
 11793  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11794  000510  EC4B  F01F         	call	_updateServoPosition	;wreg free
 11795                           
 11796                           ;Test.c: 293: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11797  000514  0E00               	movlw	0
 11798  000516  0100               	movlb	0	; () banked
 11799  000518  6FB6               	movwf	actuatorTest@i_1663& (0+255),b
 11800  00051A                     l7112:
 11801                           
 11802                           ; BSR set to: 0
 11803  00051A  0E63               	movlw	99
 11804  00051C  0100               	movlb	0	; () banked
 11805  00051E  65B6               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11806  000520  D001               	goto	l7116
 11807  000522  D00C               	goto	l7120
 11808  000524                     l7116:
 11809                           
 11810                           ; BSR set to: 0
 11811  000524  0E68               	movlw	104
 11812  000526  0100               	movlb	0	; () banked
 11813  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11814  00052A  0EE4               	movlw	228
 11815  00052C                     u8227:
 11816  00052C  2EE8               	decfsz	wreg,f,c
 11817  00052E  D7FE               	bra	u8227
 11818  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11819  000532  D7FC               	bra	u8227
 11820  000534  F000               	nop	
 11821  000536  0100               	movlb	0	; () banked
 11822  000538  2BB6               	incf	actuatorTest@i_1663& (0+255),f,b
 11823  00053A  D7EF               	goto	l7112
 11824  00053C                     l7120:
 11825                           
 11826                           ; BSR set to: 0
 11827  00053C  0E00               	movlw	0
 11828  00053E  0100               	movlb	0	; () banked
 11829  000540  6FB7               	movwf	actuatorTest@i_1664& (0+255),b
 11830  000542                     l7122:
 11831                           
 11832                           ; BSR set to: 0
 11833  000542  0E63               	movlw	99
 11834  000544  0100               	movlb	0	; () banked
 11835  000546  65B7               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11836  000548  D001               	goto	l7126
 11837  00054A  D00C               	goto	l7130
 11838  00054C                     l7126:
 11839                           
 11840                           ; BSR set to: 0
 11841  00054C  0E68               	movlw	104
 11842  00054E  0100               	movlb	0	; () banked
 11843  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11844  000552  0EE4               	movlw	228
 11845  000554                     u8237:
 11846  000554  2EE8               	decfsz	wreg,f,c
 11847  000556  D7FE               	bra	u8237
 11848  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11849  00055A  D7FC               	bra	u8237
 11850  00055C  F000               	nop	
 11851  00055E  0100               	movlb	0	; () banked
 11852  000560  2BB7               	incf	actuatorTest@i_1664& (0+255),f,b
 11853  000562  D7EF               	goto	l7122
 11854  000564                     l7130:
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;Test.c: 295: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11858  000564  0E80               	movlw	128
 11859  000566  EC14  F025         	call	_lcdInst
 11860  00056A  0EC0               	movlw	192
 11861  00056C  EC14  F025         	call	_lcdInst
 11862                           
 11863                           ;Test.c: 296: printf("MID -- 2s       ");
 11864  000570  0EB5               	movlw	low STR_102
 11865  000572  0100               	movlb	0	; () banked
 11866  000574  6F8E               	movwf	printf@f& (0+255),b
 11867  000576  0EFB               	movlw	high STR_102
 11868  000578  0100               	movlb	0	; () banked
 11869  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11870  00057C  ECB8  F008         	call	_printf	;wreg free
 11871                           
 11872                           ;Test.c: 297: updateServoPosition(1200, 1);
 11873  000580  0E04               	movlw	4
 11874  000582  0100               	movlb	0	; () banked
 11875  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11876  000586  0EB0               	movlw	176
 11877  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11878  00058A  0E00               	movlw	0
 11879  00058C  0100               	movlb	0	; () banked
 11880  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11881  000590  0E01               	movlw	1
 11882  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11883  000594  EC4B  F01F         	call	_updateServoPosition	;wreg free
 11884                           
 11885                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11886  000598  0E00               	movlw	0
 11887  00059A  0100               	movlb	0	; () banked
 11888  00059C  6FB8               	movwf	actuatorTest@i_1666& (0+255),b
 11889  00059E                     l7138:
 11890                           
 11891                           ; BSR set to: 0
 11892  00059E  0E63               	movlw	99
 11893  0005A0  0100               	movlb	0	; () banked
 11894  0005A2  65B8               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11895  0005A4  D001               	goto	l7142
 11896  0005A6  D00C               	goto	l7146
 11897  0005A8                     l7142:
 11898                           
 11899                           ; BSR set to: 0
 11900  0005A8  0E68               	movlw	104
 11901  0005AA  0100               	movlb	0	; () banked
 11902  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11903  0005AE  0EE4               	movlw	228
 11904  0005B0                     u8247:
 11905  0005B0  2EE8               	decfsz	wreg,f,c
 11906  0005B2  D7FE               	bra	u8247
 11907  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11908  0005B6  D7FC               	bra	u8247
 11909  0005B8  F000               	nop	
 11910  0005BA  0100               	movlb	0	; () banked
 11911  0005BC  2BB8               	incf	actuatorTest@i_1666& (0+255),f,b
 11912  0005BE  D7EF               	goto	l7138
 11913  0005C0                     l7146:
 11914                           
 11915                           ; BSR set to: 0
 11916  0005C0  0E00               	movlw	0
 11917  0005C2  0100               	movlb	0	; () banked
 11918  0005C4  6FB9               	movwf	actuatorTest@i_1667& (0+255),b
 11919  0005C6                     l7148:
 11920                           
 11921                           ; BSR set to: 0
 11922  0005C6  0E63               	movlw	99
 11923  0005C8  0100               	movlb	0	; () banked
 11924  0005CA  65B9               	cpfsgt	actuatorTest@i_1667& (0+255),b
 11925  0005CC  D001               	goto	l7152
 11926  0005CE  D00C               	goto	l1153
 11927  0005D0                     l7152:
 11928                           
 11929                           ; BSR set to: 0
 11930  0005D0  0E68               	movlw	104
 11931  0005D2  0100               	movlb	0	; () banked
 11932  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11933  0005D6  0EE4               	movlw	228
 11934  0005D8                     u8257:
 11935  0005D8  2EE8               	decfsz	wreg,f,c
 11936  0005DA  D7FE               	bra	u8257
 11937  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11938  0005DE  D7FC               	bra	u8257
 11939  0005E0  F000               	nop	
 11940  0005E2  0100               	movlb	0	; () banked
 11941  0005E4  2BB9               	incf	actuatorTest@i_1667& (0+255),f,b
 11942  0005E6  D7EF               	goto	l7148
 11943  0005E8                     l1153:
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;Test.c: 299: TMR1ON = 0;
 11947  0005E8  90CD               	bcf	4045,0,c	;volatile
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;Test.c: 306: printf("TST: TILT SERVO");
 11951  0005EA  0E3A               	movlw	low STR_103
 11952  0005EC  0100               	movlb	0	; () banked
 11953  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11954  0005F0  0EFE               	movlw	high STR_103
 11955  0005F2  0100               	movlb	0	; () banked
 11956  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11957  0005F6  ECB8  F008         	call	_printf	;wreg free
 11958                           
 11959                           ;Test.c: 307: lcdInst(0b11000000);;
 11960  0005FA  0EC0               	movlw	192
 11961  0005FC  EC14  F025         	call	_lcdInst
 11962                           
 11963                           ;Test.c: 308: printf("LEVEL -- 2s     ");
 11964  000600  0EE8               	movlw	low STR_104
 11965  000602  0100               	movlb	0	; () banked
 11966  000604  6F8E               	movwf	printf@f& (0+255),b
 11967  000606  0EFB               	movlw	high STR_104
 11968  000608  0100               	movlb	0	; () banked
 11969  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11970  00060C  ECB8  F008         	call	_printf	;wreg free
 11971                           
 11972                           ;Test.c: 309: updateServoPosition(1150, 3);
 11973  000610  0E04               	movlw	4
 11974  000612  0100               	movlb	0	; () banked
 11975  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11976  000616  0E7E               	movlw	126
 11977  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11978  00061A  0E00               	movlw	0
 11979  00061C  0100               	movlb	0	; () banked
 11980  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11981  000620  0E03               	movlw	3
 11982  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11983  000624  EC4B  F01F         	call	_updateServoPosition	;wreg free
 11984                           
 11985                           ;Test.c: 310: TMR3ON = 1;
 11986  000628  80B1               	bsf	4017,0,c	;volatile
 11987                           
 11988                           ;Test.c: 311: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11989  00062A  0E00               	movlw	0
 11990  00062C  0100               	movlb	0	; () banked
 11991  00062E  6FBA               	movwf	actuatorTest@i_1670& (0+255),b
 11992  000630                     l7166:
 11993                           
 11994                           ; BSR set to: 0
 11995  000630  0E63               	movlw	99
 11996  000632  0100               	movlb	0	; () banked
 11997  000634  65BA               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11998  000636  D001               	goto	l7170
 11999  000638  D00C               	goto	l7174
 12000  00063A                     l7170:
 12001                           
 12002                           ; BSR set to: 0
 12003  00063A  0E68               	movlw	104
 12004  00063C  0100               	movlb	0	; () banked
 12005  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12006  000640  0EE4               	movlw	228
 12007  000642                     u8267:
 12008  000642  2EE8               	decfsz	wreg,f,c
 12009  000644  D7FE               	bra	u8267
 12010  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12011  000648  D7FC               	bra	u8267
 12012  00064A  F000               	nop	
 12013  00064C  0100               	movlb	0	; () banked
 12014  00064E  2BBA               	incf	actuatorTest@i_1670& (0+255),f,b
 12015  000650  D7EF               	goto	l7166
 12016  000652                     l7174:
 12017                           
 12018                           ; BSR set to: 0
 12019  000652  0E00               	movlw	0
 12020  000654  0100               	movlb	0	; () banked
 12021  000656  6FBB               	movwf	actuatorTest@i_1671& (0+255),b
 12022  000658                     l7176:
 12023                           
 12024                           ; BSR set to: 0
 12025  000658  0E63               	movlw	99
 12026  00065A  0100               	movlb	0	; () banked
 12027  00065C  65BB               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12028  00065E  D001               	goto	l7180
 12029  000660  D00C               	goto	l7184
 12030  000662                     l7180:
 12031                           
 12032                           ; BSR set to: 0
 12033  000662  0E68               	movlw	104
 12034  000664  0100               	movlb	0	; () banked
 12035  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12036  000668  0EE4               	movlw	228
 12037  00066A                     u8277:
 12038  00066A  2EE8               	decfsz	wreg,f,c
 12039  00066C  D7FE               	bra	u8277
 12040  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12041  000670  D7FC               	bra	u8277
 12042  000672  F000               	nop	
 12043  000674  0100               	movlb	0	; () banked
 12044  000676  2BBB               	incf	actuatorTest@i_1671& (0+255),f,b
 12045  000678  D7EF               	goto	l7176
 12046  00067A                     l7184:
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;Test.c: 313: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12050  00067A  0E80               	movlw	128
 12051  00067C  EC14  F025         	call	_lcdInst
 12052  000680  0EC0               	movlw	192
 12053  000682  EC14  F025         	call	_lcdInst
 12054                           
 12055                           ;Test.c: 314: printf("DROP -- 2s      ");
 12056  000686  0EC6               	movlw	low STR_105
 12057  000688  0100               	movlb	0	; () banked
 12058  00068A  6F8E               	movwf	printf@f& (0+255),b
 12059  00068C  0EFB               	movlw	high STR_105
 12060  00068E  0100               	movlb	0	; () banked
 12061  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12062  000692  ECB8  F008         	call	_printf	;wreg free
 12063                           
 12064                           ;Test.c: 315: updateServoPosition(1200, 3);
 12065  000696  0E04               	movlw	4
 12066  000698  0100               	movlb	0	; () banked
 12067  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12068  00069C  0EB0               	movlw	176
 12069  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12070  0006A0  0E00               	movlw	0
 12071  0006A2  0100               	movlb	0	; () banked
 12072  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12073  0006A6  0E03               	movlw	3
 12074  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12075  0006AA  EC4B  F01F         	call	_updateServoPosition	;wreg free
 12076                           
 12077                           ;Test.c: 316: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12078  0006AE  0E00               	movlw	0
 12079  0006B0  0100               	movlb	0	; () banked
 12080  0006B2  6FBC               	movwf	actuatorTest@i_1673& (0+255),b
 12081  0006B4                     l7192:
 12082                           
 12083                           ; BSR set to: 0
 12084  0006B4  0E63               	movlw	99
 12085  0006B6  0100               	movlb	0	; () banked
 12086  0006B8  65BC               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12087  0006BA  D001               	goto	l7196
 12088  0006BC  D00C               	goto	l7200
 12089  0006BE                     l7196:
 12090                           
 12091                           ; BSR set to: 0
 12092  0006BE  0E68               	movlw	104
 12093  0006C0  0100               	movlb	0	; () banked
 12094  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12095  0006C4  0EE4               	movlw	228
 12096  0006C6                     u8287:
 12097  0006C6  2EE8               	decfsz	wreg,f,c
 12098  0006C8  D7FE               	bra	u8287
 12099  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12100  0006CC  D7FC               	bra	u8287
 12101  0006CE  F000               	nop	
 12102  0006D0  0100               	movlb	0	; () banked
 12103  0006D2  2BBC               	incf	actuatorTest@i_1673& (0+255),f,b
 12104  0006D4  D7EF               	goto	l7192
 12105  0006D6                     l7200:
 12106                           
 12107                           ; BSR set to: 0
 12108  0006D6  0E00               	movlw	0
 12109  0006D8  0100               	movlb	0	; () banked
 12110  0006DA  6FBD               	movwf	actuatorTest@i_1674& (0+255),b
 12111  0006DC                     l7202:
 12112                           
 12113                           ; BSR set to: 0
 12114  0006DC  0E63               	movlw	99
 12115  0006DE  0100               	movlb	0	; () banked
 12116  0006E0  65BD               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12117  0006E2  D001               	goto	l7206
 12118  0006E4  D00C               	goto	l7210
 12119  0006E6                     l7206:
 12120                           
 12121                           ; BSR set to: 0
 12122  0006E6  0E68               	movlw	104
 12123  0006E8  0100               	movlb	0	; () banked
 12124  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12125  0006EC  0EE4               	movlw	228
 12126  0006EE                     u8297:
 12127  0006EE  2EE8               	decfsz	wreg,f,c
 12128  0006F0  D7FE               	bra	u8297
 12129  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12130  0006F4  D7FC               	bra	u8297
 12131  0006F6  F000               	nop	
 12132  0006F8  0100               	movlb	0	; () banked
 12133  0006FA  2BBD               	incf	actuatorTest@i_1674& (0+255),f,b
 12134  0006FC  D7EF               	goto	l7202
 12135  0006FE                     l7210:
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;Test.c: 318: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12139  0006FE  0E80               	movlw	128
 12140  000700  EC14  F025         	call	_lcdInst
 12141  000704  0EC0               	movlw	192
 12142  000706  EC14  F025         	call	_lcdInst
 12143                           
 12144                           ;Test.c: 319: printf("LEVEL -- 2s     ");
 12145  00070A  0EE8               	movlw	low STR_104
 12146  00070C  0100               	movlb	0	; () banked
 12147  00070E  6F8E               	movwf	printf@f& (0+255),b
 12148  000710  0EFB               	movlw	high STR_104
 12149  000712  0100               	movlb	0	; () banked
 12150  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12151  000716  ECB8  F008         	call	_printf	;wreg free
 12152                           
 12153                           ;Test.c: 320: updateServoPosition(1150, 3);
 12154  00071A  0E04               	movlw	4
 12155  00071C  0100               	movlb	0	; () banked
 12156  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12157  000720  0E7E               	movlw	126
 12158  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12159  000724  0E00               	movlw	0
 12160  000726  0100               	movlb	0	; () banked
 12161  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12162  00072A  0E03               	movlw	3
 12163  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12164  00072E  EC4B  F01F         	call	_updateServoPosition	;wreg free
 12165                           
 12166                           ;Test.c: 321: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12167  000732  0E00               	movlw	0
 12168  000734  0100               	movlb	0	; () banked
 12169  000736  6FBE               	movwf	actuatorTest@i_1676& (0+255),b
 12170  000738                     l7218:
 12171                           
 12172                           ; BSR set to: 0
 12173  000738  0E63               	movlw	99
 12174  00073A  0100               	movlb	0	; () banked
 12175  00073C  65BE               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12176  00073E  D001               	goto	l7222
 12177  000740  D00C               	goto	l7226
 12178  000742                     l7222:
 12179                           
 12180                           ; BSR set to: 0
 12181  000742  0E68               	movlw	104
 12182  000744  0100               	movlb	0	; () banked
 12183  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12184  000748  0EE4               	movlw	228
 12185  00074A                     u8307:
 12186  00074A  2EE8               	decfsz	wreg,f,c
 12187  00074C  D7FE               	bra	u8307
 12188  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12189  000750  D7FC               	bra	u8307
 12190  000752  F000               	nop	
 12191  000754  0100               	movlb	0	; () banked
 12192  000756  2BBE               	incf	actuatorTest@i_1676& (0+255),f,b
 12193  000758  D7EF               	goto	l7218
 12194  00075A                     l7226:
 12195                           
 12196                           ; BSR set to: 0
 12197  00075A  0E00               	movlw	0
 12198  00075C  0100               	movlb	0	; () banked
 12199  00075E  6FBF               	movwf	actuatorTest@i_1677& (0+255),b
 12200  000760                     l7228:
 12201                           
 12202                           ; BSR set to: 0
 12203  000760  0E63               	movlw	99
 12204  000762  0100               	movlb	0	; () banked
 12205  000764  65BF               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12206  000766  D001               	goto	l7232
 12207  000768  D00C               	goto	l1165
 12208  00076A                     l7232:
 12209                           
 12210                           ; BSR set to: 0
 12211  00076A  0E68               	movlw	104
 12212  00076C  0100               	movlb	0	; () banked
 12213  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12214  000770  0EE4               	movlw	228
 12215  000772                     u8317:
 12216  000772  2EE8               	decfsz	wreg,f,c
 12217  000774  D7FE               	bra	u8317
 12218  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12219  000778  D7FC               	bra	u8317
 12220  00077A  F000               	nop	
 12221  00077C  0100               	movlb	0	; () banked
 12222  00077E  2BBF               	incf	actuatorTest@i_1677& (0+255),f,b
 12223  000780  D7EF               	goto	l7228
 12224  000782                     l1165:
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;Test.c: 322: TMR3ON = 0;
 12228  000782  90B1               	bcf	4017,0,c	;volatile
 12229                           
 12230                           ;Test.c: 323: (INTCONbits.GIE = 0);
 12231  000784  9EF2               	bcf	intcon,7,c	;volatile
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;Test.c: 328: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12235  000786  0E01               	movlw	1
 12236  000788  EC14  F025         	call	_lcdInst
 12237  00078C  0E68               	movlw	104
 12238  00078E  0100               	movlb	0	; () banked
 12239  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12240  000792  0EE4               	movlw	228
 12241  000794                     u8327:
 12242  000794  2EE8               	decfsz	wreg,f,c
 12243  000796  D7FE               	bra	u8327
 12244  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12245  00079A  D7FC               	bra	u8327
 12246  00079C  F000               	nop	
 12247  00079E  0E80               	movlw	128
 12248  0007A0  EC14  F025         	call	_lcdInst
 12249                           
 12250                           ;Test.c: 329: printf("TST: CAM SERVO");
 12251  0007A4  0E96               	movlw	low STR_107
 12252  0007A6  0100               	movlb	0	; () banked
 12253  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12254  0007AA  0EFE               	movlw	high STR_107
 12255  0007AC  0100               	movlb	0	; () banked
 12256  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12257  0007B0  ECB8  F008         	call	_printf	;wreg free
 12258                           
 12259                           ;Test.c: 330: lcdInst(0b11000000);;
 12260  0007B4  0EC0               	movlw	192
 12261  0007B6  EC14  F025         	call	_lcdInst
 12262                           
 12263                           ;Test.c: 331: printf("CAM UP  |RC0=1");
 12264  0007BA  0E78               	movlw	low STR_108
 12265  0007BC  0100               	movlb	0	; () banked
 12266  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12267  0007C0  0EFE               	movlw	high STR_108
 12268  0007C2  0100               	movlb	0	; () banked
 12269  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12270  0007C6  ECB8  F008         	call	_printf	;wreg free
 12271                           
 12272                           ;Test.c: 332: LATCbits.LATC0 = 1;
 12273  0007CA  808B               	bsf	3979,0,c	;volatile
 12274                           
 12275                           ;Test.c: 333: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12276  0007CC  0E00               	movlw	0
 12277  0007CE  0100               	movlb	0	; () banked
 12278  0007D0  6FC0               	movwf	actuatorTest@i_1680& (0+255),b
 12279  0007D2                     l7252:
 12280                           
 12281                           ; BSR set to: 0
 12282  0007D2  0E63               	movlw	99
 12283  0007D4  0100               	movlb	0	; () banked
 12284  0007D6  65C0               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12285  0007D8  D001               	goto	l7256
 12286  0007DA  D00C               	goto	l7260
 12287  0007DC                     l7256:
 12288                           
 12289                           ; BSR set to: 0
 12290  0007DC  0E68               	movlw	104
 12291  0007DE  0100               	movlb	0	; () banked
 12292  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12293  0007E2  0EE4               	movlw	228
 12294  0007E4                     u8337:
 12295  0007E4  2EE8               	decfsz	wreg,f,c
 12296  0007E6  D7FE               	bra	u8337
 12297  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12298  0007EA  D7FC               	bra	u8337
 12299  0007EC  F000               	nop	
 12300  0007EE  0100               	movlb	0	; () banked
 12301  0007F0  2BC0               	incf	actuatorTest@i_1680& (0+255),f,b
 12302  0007F2  D7EF               	goto	l7252
 12303  0007F4                     l7260:
 12304                           
 12305                           ; BSR set to: 0
 12306  0007F4  0E00               	movlw	0
 12307  0007F6  0100               	movlb	0	; () banked
 12308  0007F8  6FC1               	movwf	actuatorTest@i_1681& (0+255),b
 12309  0007FA                     l7262:
 12310                           
 12311                           ; BSR set to: 0
 12312  0007FA  0E63               	movlw	99
 12313  0007FC  0100               	movlb	0	; () banked
 12314  0007FE  65C1               	cpfsgt	actuatorTest@i_1681& (0+255),b
 12315  000800  D001               	goto	l7266
 12316  000802  D00C               	goto	l7270
 12317  000804                     l7266:
 12318                           
 12319                           ; BSR set to: 0
 12320  000804  0E68               	movlw	104
 12321  000806  0100               	movlb	0	; () banked
 12322  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12323  00080A  0EE4               	movlw	228
 12324  00080C                     u8347:
 12325  00080C  2EE8               	decfsz	wreg,f,c
 12326  00080E  D7FE               	bra	u8347
 12327  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12328  000812  D7FC               	bra	u8347
 12329  000814  F000               	nop	
 12330  000816  0100               	movlb	0	; () banked
 12331  000818  2BC1               	incf	actuatorTest@i_1681& (0+255),f,b
 12332  00081A  D7EF               	goto	l7262
 12333  00081C                     l7270:
 12334                           
 12335                           ; BSR set to: 0
 12336                           ;Test.c: 334: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12337  00081C  0E80               	movlw	128
 12338  00081E  EC14  F025         	call	_lcdInst
 12339  000822  0EC0               	movlw	192
 12340  000824  EC14  F025         	call	_lcdInst
 12341                           
 12342                           ;Test.c: 335: printf("CAM DWN |RC0=0");
 12343  000828  0E69               	movlw	low STR_109
 12344  00082A  0100               	movlb	0	; () banked
 12345  00082C  6F8E               	movwf	printf@f& (0+255),b
 12346  00082E  0EFE               	movlw	high STR_109
 12347  000830  0100               	movlb	0	; () banked
 12348  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12349  000834  ECB8  F008         	call	_printf	;wreg free
 12350                           
 12351                           ;Test.c: 338: for(i=0;i<10000;i++)
 12352  000838  0E00               	movlw	0
 12353  00083A  0100               	movlb	0	; () banked
 12354  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12355  00083E  0E00               	movlw	0
 12356  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12357  000842                     l7276:
 12358                           
 12359                           ; BSR set to: 0
 12360  000842  0100               	movlb	0	; () banked
 12361  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12362  000846  D008               	goto	l1170
 12363  000848  0E10               	movlw	16
 12364  00084A  0100               	movlb	0	; () banked
 12365  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12366  00084E  0E27               	movlw	39
 12367  000850  0100               	movlb	0	; () banked
 12368  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12369  000854  B0D8               	btfsc	status,0,c
 12370  000856  D00D               	goto	l7286
 12371  000858                     l1170:
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;Test.c: 339: {
 12375                           ;Test.c: 340: LATCbits.LATC0 = 1;
 12376  000858  808B               	bsf	3979,0,c	;volatile
 12377                           
 12378                           ; BSR set to: 0
 12379                           ;Test.c: 341: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12380  00085A  0E1A               	movlw	26
 12381  00085C                     u8357:
 12382  00085C  2EE8               	decfsz	wreg,f,c
 12383  00085E  D7FE               	bra	u8357
 12384  000860  D000               	nop2	
 12385                           
 12386                           ;Test.c: 342: LATCbits.LATC0 = 0;
 12387  000862  908B               	bcf	3979,0,c	;volatile
 12388                           
 12389                           ;Test.c: 343: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12390  000864  0EF0               	movlw	240
 12391  000866                     u8367:
 12392  000866  2EE8               	decfsz	wreg,f,c
 12393  000868  D7FE               	bra	u8367
 12394  00086A  0100               	movlb	0	; () banked
 12395  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12396  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12397  000870  D7E8               	goto	l7276
 12398  000872                     l7286:
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;Test.c: 344: }
 12402                           ;Test.c: 346: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12403  000872  0E00               	movlw	0
 12404  000874  0100               	movlb	0	; () banked
 12405  000876  6FC2               	movwf	actuatorTest@i_1683& (0+255),b
 12406  000878                     l7288:
 12407                           
 12408                           ; BSR set to: 0
 12409  000878  0E63               	movlw	99
 12410  00087A  0100               	movlb	0	; () banked
 12411  00087C  65C2               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12412  00087E  D001               	goto	l7292
 12413  000880  D00C               	goto	l7296
 12414  000882                     l7292:
 12415                           
 12416                           ; BSR set to: 0
 12417  000882  0E68               	movlw	104
 12418  000884  0100               	movlb	0	; () banked
 12419  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12420  000888  0EE4               	movlw	228
 12421  00088A                     u8377:
 12422  00088A  2EE8               	decfsz	wreg,f,c
 12423  00088C  D7FE               	bra	u8377
 12424  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12425  000890  D7FC               	bra	u8377
 12426  000892  F000               	nop	
 12427  000894  0100               	movlb	0	; () banked
 12428  000896  2BC2               	incf	actuatorTest@i_1683& (0+255),f,b
 12429  000898  D7EF               	goto	l7288
 12430  00089A                     l7296:
 12431                           
 12432                           ; BSR set to: 0
 12433  00089A  0E00               	movlw	0
 12434  00089C  0100               	movlb	0	; () banked
 12435  00089E  6FC3               	movwf	actuatorTest@i_1684& (0+255),b
 12436  0008A0                     l7298:
 12437                           
 12438                           ; BSR set to: 0
 12439  0008A0  0E63               	movlw	99
 12440  0008A2  0100               	movlb	0	; () banked
 12441  0008A4  65C3               	cpfsgt	actuatorTest@i_1684& (0+255),b
 12442  0008A6  D001               	goto	l7302
 12443  0008A8  D00C               	goto	l7306
 12444  0008AA                     l7302:
 12445                           
 12446                           ; BSR set to: 0
 12447  0008AA  0E68               	movlw	104
 12448  0008AC  0100               	movlb	0	; () banked
 12449  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12450  0008B0  0EE4               	movlw	228
 12451  0008B2                     u8387:
 12452  0008B2  2EE8               	decfsz	wreg,f,c
 12453  0008B4  D7FE               	bra	u8387
 12454  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12455  0008B8  D7FC               	bra	u8387
 12456  0008BA  F000               	nop	
 12457  0008BC  0100               	movlb	0	; () banked
 12458  0008BE  2BC3               	incf	actuatorTest@i_1684& (0+255),f,b
 12459  0008C0  D7EF               	goto	l7298
 12460  0008C2                     l7306:
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;Test.c: 347: machine_state = Testing_state;
 12464  0008C2  0E03               	movlw	3
 12465  0008C4  0100               	movlb	0	; () banked
 12466  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12467                           
 12468                           ; BSR set to: 0
 12469  0008C8  0012               	return		;funcret
 12470  0008CA                     __end_of_actuatorTest:
 12471                           	opt stack 0
 12472                           tblptru	equ	0xFF8
 12473                           tblptrh	equ	0xFF7
 12474                           tblptrl	equ	0xFF6
 12475                           tablat	equ	0xFF5
 12476                           prodh	equ	0xFF4
 12477                           prodl	equ	0xFF3
 12478                           intcon	equ	0xFF2
 12479                           intcon2	equ	0xFF1
 12480                           intcon3	equ	0xFF0
 12481                           postinc0	equ	0xFEE
 12482                           wreg	equ	0xFE8
 12483                           postdec1	equ	0xFE5
 12484                           fsr1l	equ	0xFE1
 12485                           indf2	equ	0xFDF
 12486                           postinc2	equ	0xFDE
 12487                           postdec2	equ	0xFDD
 12488                           fsr2h	equ	0xFDA
 12489                           fsr2l	equ	0xFD9
 12490                           status	equ	0xFD8
 12491                           
 12492 ;; *************** function _SpeedTest *****************
 12493 ;; Defined at:
 12494 ;;		line 526 in file "Test.c"
 12495 ;; Parameters:    Size  Location     Type
 12496 ;;		None
 12497 ;; Auto vars:     Size  Location     Type
 12498 ;;		None
 12499 ;; Return value:  Size  Location     Type
 12500 ;;                  1    wreg      void 
 12501 ;; Registers used:
 12502 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12503 ;; Tracked objects:
 12504 ;;		On entry : 0/0
 12505 ;;		On exit  : 0/0
 12506 ;;		Unchanged: 0/0
 12507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12512 ;;Total ram usage:        1 bytes
 12513 ;; Hardware stack levels used:    1
 12514 ;; Hardware stack levels required when called:   10
 12515 ;; This function calls:
 12516 ;;		_lcdInst
 12517 ;;		_printf
 12518 ;; This function is called by:
 12519 ;;		_Test
 12520 ;; This function uses a non-reentrant model
 12521 ;;
 12522                           
 12523                           	psect	text42
 12524  003D16                     __ptext42:
 12525                           	opt stack 0
 12526  003D16                     _SpeedTest:
 12527                           	opt stack 19
 12528                           
 12529                           ;Test.c: 528: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;incstack = 0
 12533  003D16  0E01               	movlw	1
 12534  003D18  EC14  F025         	call	_lcdInst
 12535  003D1C  0E68               	movlw	104
 12536  003D1E  0100               	movlb	0	; () banked
 12537  003D20  6FAB               	movwf	??_SpeedTest& (0+255),b
 12538  003D22  0EE4               	movlw	228
 12539  003D24                     u8397:
 12540  003D24  2EE8               	decfsz	wreg,f,c
 12541  003D26  D7FE               	bra	u8397
 12542  003D28  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12543  003D2A  D7FC               	bra	u8397
 12544  003D2C  F000               	nop	
 12545  003D2E  0E80               	movlw	128
 12546  003D30  EC14  F025         	call	_lcdInst
 12547                           
 12548                           ;Test.c: 529: printf("S: D WILL RETURN ");
 12549  003D34  0E6D               	movlw	low STR_116
 12550  003D36  0100               	movlb	0	; () banked
 12551  003D38  6F8E               	movwf	printf@f& (0+255),b
 12552  003D3A  0EFB               	movlw	high STR_116
 12553  003D3C  0100               	movlb	0	; () banked
 12554  003D3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12555  003D40  ECB8  F008         	call	_printf	;wreg free
 12556                           
 12557                           ;Test.c: 530: lcdInst(0b11000000);;
 12558  003D44  0EC0               	movlw	192
 12559  003D46  EC14  F025         	call	_lcdInst
 12560                           
 12561                           ;Test.c: 531: printf("OTHER SETS RA5   ");
 12562  003D4A  0E5B               	movlw	low STR_112
 12563  003D4C  0100               	movlb	0	; () banked
 12564  003D4E  6F8E               	movwf	printf@f& (0+255),b
 12565  003D50  0EFB               	movlw	high STR_112
 12566  003D52  0100               	movlb	0	; () banked
 12567  003D54  6F8F               	movwf	(printf@f+1)& (0+255),b
 12568  003D56  ECB8  F008         	call	_printf	;wreg free
 12569  003D5A                     l1253:
 12570  003D5A  A281               	btfss	3969,1,c	;volatile
 12571  003D5C  D7FE               	goto	l1253
 12572                           
 12573                           ;Test.c: 536: }
 12574                           ;Test.c: 537: if(PORTB >> 4 == 0b1111){
 12575  003D5E  3881               	swapf	3969,w,c	;volatile
 12576  003D60  0B0F               	andlw	15
 12577  003D62  0A0F               	xorlw	15
 12578  003D64  B4D8               	btfsc	status,2,c
 12579  003D66  0012               	return	
 12580  003D68  D014               	goto	l7348
 12581  003D6A                     l1260:
 12582                           
 12583                           ;Test.c: 542: LATAbits.LATA5 = 1;
 12584  003D6A  8A89               	bsf	3977,5,c	;volatile
 12585                           
 12586                           ;Test.c: 543: _delay((unsigned long)((5)*(32000000/4000.0)));
 12587  003D6C  0E34               	movlw	52
 12588  003D6E  0100               	movlb	0	; () banked
 12589  003D70  6FAB               	movwf	??_SpeedTest& (0+255),b
 12590  003D72  0EF1               	movlw	241
 12591  003D74                     u8407:
 12592  003D74  2EE8               	decfsz	wreg,f,c
 12593  003D76  D7FE               	bra	u8407
 12594  003D78  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12595  003D7A  D7FC               	bra	u8407
 12596  003D7C  D000               	nop2	
 12597                           
 12598                           ;Test.c: 544: LATAbits.LATA5 = 0;
 12599  003D7E  9A89               	bcf	3977,5,c	;volatile
 12600                           
 12601                           ;Test.c: 545: _delay((unsigned long)((5)*(32000000/4000.0)));
 12602  003D80  0E34               	movlw	52
 12603  003D82  0100               	movlb	0	; () banked
 12604  003D84  6FAB               	movwf	??_SpeedTest& (0+255),b
 12605  003D86  0EF1               	movlw	241
 12606  003D88                     u8417:
 12607  003D88  2EE8               	decfsz	wreg,f,c
 12608  003D8A  D7FE               	bra	u8417
 12609  003D8C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12610  003D8E  D7FC               	bra	u8417
 12611  003D90  D000               	nop2	
 12612  003D92                     l7348:
 12613  003D92  B281               	btfsc	3969,1,c	;volatile
 12614  003D94  D7EA               	goto	l1260
 12615                           
 12616                           ;Test.c: 548: }
 12617                           ;Test.c: 549: LATAbits.LATA5 = 0;
 12618  003D96  9A89               	bcf	3977,5,c	;volatile
 12619  003D98  D7E0               	goto	l1253
 12620  003D9A                     __end_of_SpeedTest:
 12621                           	opt stack 0
 12622                           tblptru	equ	0xFF8
 12623                           tblptrh	equ	0xFF7
 12624                           tblptrl	equ	0xFF6
 12625                           tablat	equ	0xFF5
 12626                           prodh	equ	0xFF4
 12627                           prodl	equ	0xFF3
 12628                           intcon	equ	0xFF2
 12629                           intcon2	equ	0xFF1
 12630                           intcon3	equ	0xFF0
 12631                           postinc0	equ	0xFEE
 12632                           wreg	equ	0xFE8
 12633                           postdec1	equ	0xFE5
 12634                           fsr1l	equ	0xFE1
 12635                           indf2	equ	0xFDF
 12636                           postinc2	equ	0xFDE
 12637                           postdec2	equ	0xFDD
 12638                           fsr2h	equ	0xFDA
 12639                           fsr2l	equ	0xFD9
 12640                           status	equ	0xFD8
 12641                           
 12642 ;; *************** function _PusherTest *****************
 12643 ;; Defined at:
 12644 ;;		line 465 in file "Test.c"
 12645 ;; Parameters:    Size  Location     Type
 12646 ;;		None
 12647 ;; Auto vars:     Size  Location     Type
 12648 ;;  i               2   46[BANK0 ] int 
 12649 ;;  i               2   44[BANK0 ] int 
 12650 ;; Return value:  Size  Location     Type
 12651 ;;                  1    wreg      void 
 12652 ;; Registers used:
 12653 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12654 ;; Tracked objects:
 12655 ;;		On entry : 0/0
 12656 ;;		On exit  : 0/0
 12657 ;;		Unchanged: 0/0
 12658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12662 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12663 ;;Total ram usage:        5 bytes
 12664 ;; Hardware stack levels used:    1
 12665 ;; Hardware stack levels required when called:   10
 12666 ;; This function calls:
 12667 ;;		_lcdInst
 12668 ;;		_printf
 12669 ;; This function is called by:
 12670 ;;		_Test
 12671 ;; This function uses a non-reentrant model
 12672 ;;
 12673                           
 12674                           	psect	text43
 12675  0036EC                     __ptext43:
 12676                           	opt stack 0
 12677  0036EC                     _PusherTest:
 12678                           	opt stack 19
 12679                           
 12680                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12681                           
 12682                           ;incstack = 0
 12683  0036EC  0E01               	movlw	1
 12684  0036EE  EC14  F025         	call	_lcdInst
 12685  0036F2  0E68               	movlw	104
 12686  0036F4  0100               	movlb	0	; () banked
 12687  0036F6  6FAB               	movwf	??_PusherTest& (0+255),b
 12688  0036F8  0EE4               	movlw	228
 12689  0036FA                     u8427:
 12690  0036FA  2EE8               	decfsz	wreg,f,c
 12691  0036FC  D7FE               	bra	u8427
 12692  0036FE  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 12693  003700  D7FC               	bra	u8427
 12694  003702  F000               	nop	
 12695  003704  0E80               	movlw	128
 12696  003706  EC14  F025         	call	_lcdInst
 12697                           
 12698                           ;Test.c: 467: printf("PUSHER TST");
 12699  00370A  0E71               	movlw	low STR_113
 12700  00370C  0100               	movlb	0	; () banked
 12701  00370E  6F8E               	movwf	printf@f& (0+255),b
 12702  003710  0EFF               	movlw	high STR_113
 12703  003712  0100               	movlb	0	; () banked
 12704  003714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12705  003716  ECB8  F008         	call	_printf	;wreg free
 12706  00371A                     l1218:
 12707  00371A  A281               	btfss	3969,1,c	;volatile
 12708  00371C  D7FE               	goto	l1218
 12709                           
 12710                           ;Test.c: 473: }
 12711                           ;Test.c: 474: if(PORTB >> 4 == 0b1111){
 12712  00371E  3881               	swapf	3969,w,c	;volatile
 12713  003720  0B0F               	andlw	15
 12714  003722  0A0F               	xorlw	15
 12715  003724  B4D8               	btfsc	status,2,c
 12716  003726  0012               	return	
 12717                           
 12718                           ;Test.c: 479: else if(PORTB >> 4 == 0b0101){
 12719                           
 12720                           ;Test.c: 476: }
 12721                           
 12722                           ;Test.c: 475: break;
 12723  003728  3881               	swapf	3969,w,c	;volatile
 12724  00372A  0B0F               	andlw	15
 12725  00372C  0A05               	xorlw	5
 12726  00372E  A4D8               	btfss	status,2,c
 12727  003730  D01D               	goto	l7378
 12728                           
 12729                           ;Test.c: 480: for(int i = 0; i<3000; i++){
 12730  003732  0E00               	movlw	0
 12731  003734  0100               	movlb	0	; () banked
 12732  003736  6FAD               	movwf	(PusherTest@i+1)& (0+255),b
 12733  003738  0E00               	movlw	0
 12734  00373A  6FAC               	movwf	PusherTest@i& (0+255),b
 12735  00373C                     l7368:
 12736                           
 12737                           ; BSR set to: 0
 12738  00373C  0100               	movlb	0	; () banked
 12739  00373E  BFAD               	btfsc	(PusherTest@i+1)& (0+255),7,b
 12740  003740  D008               	goto	l1225
 12741  003742  0EB8               	movlw	184
 12742  003744  0100               	movlb	0	; () banked
 12743  003746  5DAC               	subwf	PusherTest@i& (0+255),w,b
 12744  003748  0E0B               	movlw	11
 12745  00374A  0100               	movlb	0	; () banked
 12746  00374C  59AD               	subwfb	(PusherTest@i+1)& (0+255),w,b
 12747  00374E  B0D8               	btfsc	status,0,c
 12748  003750  D02F               	goto	l1231
 12749  003752                     l1225:
 12750                           
 12751                           ; BSR set to: 0
 12752                           ;Test.c: 481: LATAbits.LATA4 = 1;
 12753  003752  8889               	bsf	3977,4,c	;volatile
 12754                           
 12755                           ; BSR set to: 0
 12756                           ;Test.c: 482: _delay((unsigned long)((75)*(32000000/4000000.0)));
 12757  003754  0EC8               	movlw	200
 12758  003756                     u8437:
 12759  003756  2EE8               	decfsz	wreg,f,c
 12760  003758  D7FE               	bra	u8437
 12761                           
 12762                           ;Test.c: 483: LATAbits.LATA4 = 0;
 12763  00375A  9889               	bcf	3977,4,c	;volatile
 12764                           
 12765                           ;Test.c: 484: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12766  00375C  0E42               	movlw	66
 12767  00375E                     u8447:
 12768  00375E  2EE8               	decfsz	wreg,f,c
 12769  003760  D7FE               	bra	u8447
 12770  003762  D000               	nop2	
 12771  003764  0100               	movlb	0	; () banked
 12772  003766  4BAC               	infsnz	PusherTest@i& (0+255),f,b
 12773  003768  2BAD               	incf	(PusherTest@i+1)& (0+255),f,b
 12774  00376A  D7E8               	goto	l7368
 12775  00376C                     l7378:
 12776                           
 12777                           ;Test.c: 487: else if (PORTB >> 4 == 0b110){
 12778  00376C  3881               	swapf	3969,w,c	;volatile
 12779  00376E  0B0F               	andlw	15
 12780  003770  0A06               	xorlw	6
 12781  003772  A4D8               	btfss	status,2,c
 12782  003774  D01D               	goto	l1231
 12783                           
 12784                           ;Test.c: 488: for(int i = 0; i<3000; i++){
 12785  003776  0E00               	movlw	0
 12786  003778  0100               	movlb	0	; () banked
 12787  00377A  6FAF               	movwf	(PusherTest@i_1697+1)& (0+255),b
 12788  00377C  0E00               	movlw	0
 12789  00377E  6FAE               	movwf	PusherTest@i_1697& (0+255),b
 12790  003780                     l7382:
 12791                           
 12792                           ; BSR set to: 0
 12793  003780  0100               	movlb	0	; () banked
 12794  003782  BFAF               	btfsc	(PusherTest@i_1697+1)& (0+255),7,b
 12795  003784  D008               	goto	l1229
 12796  003786  0EB8               	movlw	184
 12797  003788  0100               	movlb	0	; () banked
 12798  00378A  5DAE               	subwf	PusherTest@i_1697& (0+255),w,b
 12799  00378C  0E0B               	movlw	11
 12800  00378E  0100               	movlb	0	; () banked
 12801  003790  59AF               	subwfb	(PusherTest@i_1697+1)& (0+255),w,b
 12802  003792  B0D8               	btfsc	status,0,c
 12803  003794  D00D               	goto	l1231
 12804  003796                     l1229:
 12805                           
 12806                           ; BSR set to: 0
 12807                           ;Test.c: 489: LATAbits.LATA4 = 1;
 12808  003796  8889               	bsf	3977,4,c	;volatile
 12809                           
 12810                           ; BSR set to: 0
 12811                           ;Test.c: 490: _delay((unsigned long)((58)*(32000000/4000000.0)));
 12812  003798  0E9A               	movlw	154
 12813  00379A                     u8457:
 12814  00379A  2EE8               	decfsz	wreg,f,c
 12815  00379C  D7FE               	bra	u8457
 12816  00379E  D000               	nop2	
 12817                           
 12818                           ;Test.c: 491: LATAbits.LATA4 = 0;
 12819  0037A0  9889               	bcf	3977,4,c	;volatile
 12820                           
 12821                           ;Test.c: 492: _delay((unsigned long)((42)*(32000000/4000000.0)));
 12822  0037A2  0E70               	movlw	112
 12823  0037A4                     u8467:
 12824  0037A4  2EE8               	decfsz	wreg,f,c
 12825  0037A6  D7FE               	bra	u8467
 12826  0037A8  0100               	movlb	0	; () banked
 12827  0037AA  4BAE               	infsnz	PusherTest@i_1697& (0+255),f,b
 12828  0037AC  2BAF               	incf	(PusherTest@i_1697+1)& (0+255),f,b
 12829  0037AE  D7E8               	goto	l7382
 12830  0037B0                     l1231:
 12831  0037B0  A281               	btfss	3969,1,c	;volatile
 12832  0037B2  D7B3               	goto	l1218
 12833  0037B4  D7FD               	goto	l1231
 12834  0037B6                     __end_of_PusherTest:
 12835                           	opt stack 0
 12836                           tblptru	equ	0xFF8
 12837                           tblptrh	equ	0xFF7
 12838                           tblptrl	equ	0xFF6
 12839                           tablat	equ	0xFF5
 12840                           prodh	equ	0xFF4
 12841                           prodl	equ	0xFF3
 12842                           intcon	equ	0xFF2
 12843                           intcon2	equ	0xFF1
 12844                           intcon3	equ	0xFF0
 12845                           postinc0	equ	0xFEE
 12846                           wreg	equ	0xFE8
 12847                           postdec1	equ	0xFE5
 12848                           fsr1l	equ	0xFE1
 12849                           indf2	equ	0xFDF
 12850                           postinc2	equ	0xFDE
 12851                           postdec2	equ	0xFDD
 12852                           fsr2h	equ	0xFDA
 12853                           fsr2l	equ	0xFD9
 12854                           status	equ	0xFD8
 12855                           
 12856 ;; *************** function _PortTests *****************
 12857 ;; Defined at:
 12858 ;;		line 407 in file "Test.c"
 12859 ;; Parameters:    Size  Location     Type
 12860 ;;		None
 12861 ;; Auto vars:     Size  Location     Type
 12862 ;;		None
 12863 ;; Return value:  Size  Location     Type
 12864 ;;                  1    wreg      void 
 12865 ;; Registers used:
 12866 ;;		wreg, status,2, status,0
 12867 ;; Tracked objects:
 12868 ;;		On entry : 0/0
 12869 ;;		On exit  : 0/0
 12870 ;;		Unchanged: 0/0
 12871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12875 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12876 ;;Total ram usage:        2 bytes
 12877 ;; Hardware stack levels used:    1
 12878 ;; Hardware stack levels required when called:    7
 12879 ;; This function calls:
 12880 ;;		Nothing
 12881 ;; This function is called by:
 12882 ;;		_Test
 12883 ;; This function uses a non-reentrant model
 12884 ;;
 12885                           
 12886                           	psect	text44
 12887  003D9A                     __ptext44:
 12888                           	opt stack 0
 12889  003D9A                     _PortTests:
 12890                           	opt stack 22
 12891  003D9A                     l1183:
 12892  003D9A  A281               	btfss	3969,1,c	;volatile
 12893  003D9C  D7FE               	goto	l1183
 12894                           
 12895                           ;Test.c: 411: var = PORTB >> 4;
 12896  003D9E  CF81 F080          	movff	3969,??_PortTests	;volatile
 12897  003DA2  0100               	movlb	0	; () banked
 12898  003DA4  3B80               	swapf	??_PortTests& (0+255),f,b
 12899  003DA6  0E0F               	movlw	15
 12900  003DA8  1780               	andwf	??_PortTests& (0+255),f,b
 12901  003DAA  0100               	movlb	0	; () banked
 12902  003DAC  5180               	movf	??_PortTests& (0+255),w,b
 12903  003DAE  0100               	movlb	0	; () banked
 12904  003DB0  6FFA               	movwf	_var& (0+255),b
 12905  003DB2  6BFB               	clrf	(_var+1)& (0+255),b
 12906                           
 12907                           ;Test.c: 412: switch(var){
 12908  003DB4  D00C               	goto	l7396
 12909  003DB6                     l1187:
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;Test.c: 414: LATEbits.LATE0 = 1;
 12913  003DB6  808D               	bsf	3981,0,c	;volatile
 12914                           
 12915                           ;Test.c: 415: break;
 12916  003DB8  D027               	goto	l1195
 12917  003DBA                     l1189:
 12918                           
 12919                           ; BSR set to: 0
 12920                           ;Test.c: 417: LATEbits.LATE1 = 1;
 12921  003DBA  828D               	bsf	3981,1,c	;volatile
 12922                           
 12923                           ;Test.c: 418: break;
 12924  003DBC  D025               	goto	l1195
 12925  003DBE                     l1190:
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;Test.c: 420: LATDbits.LATD0 = 1;
 12929  003DBE  808C               	bsf	3980,0,c	;volatile
 12930                           
 12931                           ;Test.c: 421: break;
 12932  003DC0  D023               	goto	l1195
 12933  003DC2                     l1191:
 12934                           
 12935                           ; BSR set to: 0
 12936                           ;Test.c: 423: LATAbits.LATA3 = 1;
 12937  003DC2  8689               	bsf	3977,3,c	;volatile
 12938                           
 12939                           ;Test.c: 424: break;
 12940  003DC4  D021               	goto	l1195
 12941  003DC6                     l1192:
 12942                           
 12943                           ; BSR set to: 0
 12944                           ;Test.c: 426: LATAbits.LATA4 = 1;
 12945  003DC6  8889               	bsf	3977,4,c	;volatile
 12946                           
 12947                           ;Test.c: 427: break;
 12948  003DC8  D01F               	goto	l1195
 12949  003DCA                     l1193:
 12950                           
 12951                           ; BSR set to: 0
 12952                           ;Test.c: 429: LATAbits.LATA5 = 1;
 12953  003DCA  8A89               	bsf	3977,5,c	;volatile
 12954                           
 12955                           ; BSR set to: 0
 12956                           ;Test.c: 433: }
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;Test.c: 432: break;
 12960                           
 12961                           ;Test.c: 431: default:
 12962                           
 12963                           ;Test.c: 430: break;
 12964  003DCC  D01D               	goto	l1195
 12965  003DCE                     l7396:
 12966                           
 12967                           ; BSR set to: 0
 12968  003DCE  C0FA  F080         	movff	_var,??_PortTests
 12969  003DD2  C0FB  F081         	movff	_var+1,??_PortTests+1
 12970                           
 12971                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12972                           ; Switch size 1, requested type "space"
 12973                           ; Number of cases is 1, Range of values is 0 to 0
 12974                           ; switch strategies available:
 12975                           ; Name         Instructions Cycles
 12976                           ; simple_byte            4     3 (average)
 12977                           ;	Chosen strategy is simple_byte
 12978  003DD6  0100               	movlb	0	; () banked
 12979  003DD8  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12980  003DDA  0A00               	xorlw	0	; case 0
 12981  003DDC  A4D8               	btfss	status,2,c
 12982  003DDE  D014               	goto	l1195
 12983                           
 12984                           ; BSR set to: 0
 12985                           ; Switch size 1, requested type "space"
 12986                           ; Number of cases is 6, Range of values is 0 to 5
 12987                           ; switch strategies available:
 12988                           ; Name         Instructions Cycles
 12989                           ; simple_byte           19    10 (average)
 12990                           ;	Chosen strategy is simple_byte
 12991  003DE0  0100               	movlb	0	; () banked
 12992  003DE2  5180               	movf	??_PortTests& (0+255),w,b
 12993  003DE4  0A00               	xorlw	0	; case 0
 12994  003DE6  B4D8               	btfsc	status,2,c
 12995  003DE8  D7E6               	goto	l1187
 12996  003DEA  0A01               	xorlw	1	; case 1
 12997  003DEC  B4D8               	btfsc	status,2,c
 12998  003DEE  D7E5               	goto	l1189
 12999  003DF0  0A03               	xorlw	3	; case 2
 13000  003DF2  B4D8               	btfsc	status,2,c
 13001  003DF4  D7E4               	goto	l1190
 13002  003DF6  0A01               	xorlw	1	; case 3
 13003  003DF8  B4D8               	btfsc	status,2,c
 13004  003DFA  D7E3               	goto	l1191
 13005  003DFC  0A07               	xorlw	7	; case 4
 13006  003DFE  B4D8               	btfsc	status,2,c
 13007  003E00  D7E2               	goto	l1192
 13008  003E02  0A01               	xorlw	1	; case 5
 13009  003E04  B4D8               	btfsc	status,2,c
 13010  003E06  D7E1               	goto	l1193
 13011  003E08                     l1195:
 13012  003E08  B281               	btfsc	3969,1,c	;volatile
 13013  003E0A  D7FE               	goto	l1195
 13014                           
 13015                           ;Test.c: 435: __nop();
 13016  003E0C  F000               	nop	
 13017                           
 13018                           ;Test.c: 436: __nop();
 13019  003E0E  F000               	nop	
 13020                           
 13021                           ;Test.c: 437: LATA = 0x00;
 13022  003E10  0E00               	movlw	0
 13023  003E12  6E89               	movwf	3977,c	;volatile
 13024                           
 13025                           ;Test.c: 438: LATE = 0x00;
 13026  003E14  0E00               	movlw	0
 13027  003E16  6E8D               	movwf	3981,c	;volatile
 13028                           
 13029                           ;Test.c: 439: LATD = 0x00; }
 13030  003E18  0E00               	movlw	0
 13031  003E1A  6E8C               	movwf	3980,c	;volatile
 13032  003E1C  D7BE               	goto	l1183
 13033  003E1E                     __end_of_PortTests:
 13034                           	opt stack 0
 13035                           tblptru	equ	0xFF8
 13036                           tblptrh	equ	0xFF7
 13037                           tblptrl	equ	0xFF6
 13038                           tablat	equ	0xFF5
 13039                           prodh	equ	0xFF4
 13040                           prodl	equ	0xFF3
 13041                           intcon	equ	0xFF2
 13042                           intcon2	equ	0xFF1
 13043                           intcon3	equ	0xFF0
 13044                           postinc0	equ	0xFEE
 13045                           wreg	equ	0xFE8
 13046                           postdec1	equ	0xFE5
 13047                           fsr1l	equ	0xFE1
 13048                           indf2	equ	0xFDF
 13049                           postinc2	equ	0xFDE
 13050                           postdec2	equ	0xFDD
 13051                           fsr2h	equ	0xFDA
 13052                           fsr2l	equ	0xFD9
 13053                           status	equ	0xFD8
 13054                           
 13055 ;; *************** function _PortTestA5 *****************
 13056 ;; Defined at:
 13057 ;;		line 442 in file "Test.c"
 13058 ;; Parameters:    Size  Location     Type
 13059 ;;		None
 13060 ;; Auto vars:     Size  Location     Type
 13061 ;;		None
 13062 ;; Return value:  Size  Location     Type
 13063 ;;                  1    wreg      void 
 13064 ;; Registers used:
 13065 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13066 ;; Tracked objects:
 13067 ;;		On entry : 0/0
 13068 ;;		On exit  : 0/0
 13069 ;;		Unchanged: 0/0
 13070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13074 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13075 ;;Total ram usage:        1 bytes
 13076 ;; Hardware stack levels used:    1
 13077 ;; Hardware stack levels required when called:   10
 13078 ;; This function calls:
 13079 ;;		_lcdInst
 13080 ;;		_printf
 13081 ;; This function is called by:
 13082 ;;		_Test
 13083 ;; This function uses a non-reentrant model
 13084 ;;
 13085                           
 13086                           	psect	text45
 13087  004170                     __ptext45:
 13088                           	opt stack 0
 13089  004170                     _PortTestA5:
 13090                           	opt stack 19
 13091                           
 13092                           ;Test.c: 443: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13093                           
 13094                           ;incstack = 0
 13095  004170  0E01               	movlw	1
 13096  004172  EC14  F025         	call	_lcdInst
 13097  004176  0E68               	movlw	104
 13098  004178  0100               	movlb	0	; () banked
 13099  00417A  6FAB               	movwf	??_PortTestA5& (0+255),b
 13100  00417C  0EE4               	movlw	228
 13101  00417E                     u8477:
 13102  00417E  2EE8               	decfsz	wreg,f,c
 13103  004180  D7FE               	bra	u8477
 13104  004182  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13105  004184  D7FC               	bra	u8477
 13106  004186  F000               	nop	
 13107  004188  0E80               	movlw	128
 13108  00418A  EC14  F025         	call	_lcdInst
 13109                           
 13110                           ;Test.c: 444: printf("D WILL RETURN    ");
 13111  00418E  0E49               	movlw	low STR_111
 13112  004190  0100               	movlb	0	; () banked
 13113  004192  6F8E               	movwf	printf@f& (0+255),b
 13114  004194  0EFB               	movlw	high STR_111
 13115  004196  0100               	movlb	0	; () banked
 13116  004198  6F8F               	movwf	(printf@f+1)& (0+255),b
 13117  00419A  ECB8  F008         	call	_printf	;wreg free
 13118                           
 13119                           ;Test.c: 445: lcdInst(0b11000000);;
 13120  00419E  0EC0               	movlw	192
 13121  0041A0  EC14  F025         	call	_lcdInst
 13122                           
 13123                           ;Test.c: 446: printf("OTHER SETS RA5   ");
 13124  0041A4  0E5B               	movlw	low STR_112
 13125  0041A6  0100               	movlb	0	; () banked
 13126  0041A8  6F8E               	movwf	printf@f& (0+255),b
 13127  0041AA  0EFB               	movlw	high STR_112
 13128  0041AC  0100               	movlb	0	; () banked
 13129  0041AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13130  0041B0  ECB8  F008         	call	_printf	;wreg free
 13131  0041B4                     l1204:
 13132  0041B4  A281               	btfss	3969,1,c	;volatile
 13133  0041B6  D7FE               	goto	l1204
 13134                           
 13135                           ;Test.c: 451: }
 13136                           ;Test.c: 452: if(PORTB >> 4 == 0b1111){
 13137  0041B8  3881               	swapf	3969,w,c	;volatile
 13138  0041BA  0B0F               	andlw	15
 13139  0041BC  0A0F               	xorlw	15
 13140  0041BE  B4D8               	btfsc	status,2,c
 13141  0041C0  0012               	return	
 13142                           
 13143                           ;Test.c: 455: else{
 13144                           ;Test.c: 456: LATAbits.LATA5 = 1;
 13145                           
 13146                           ;Test.c: 454: }
 13147                           
 13148                           ;Test.c: 453: break;
 13149  0041C2  8A89               	bsf	3977,5,c	;volatile
 13150  0041C4                     l1210:
 13151  0041C4  B281               	btfsc	3969,1,c	;volatile
 13152  0041C6  D7FE               	goto	l1210
 13153                           
 13154                           ;Test.c: 459: }
 13155                           ;Test.c: 460: LATAbits.LATA5 = 0;
 13156  0041C8  9A89               	bcf	3977,5,c	;volatile
 13157  0041CA  D7F4               	goto	l1204
 13158  0041CC                     __end_of_PortTestA5:
 13159                           	opt stack 0
 13160                           tblptru	equ	0xFF8
 13161                           tblptrh	equ	0xFF7
 13162                           tblptrl	equ	0xFF6
 13163                           tablat	equ	0xFF5
 13164                           prodh	equ	0xFF4
 13165                           prodl	equ	0xFF3
 13166                           intcon	equ	0xFF2
 13167                           intcon2	equ	0xFF1
 13168                           intcon3	equ	0xFF0
 13169                           postinc0	equ	0xFEE
 13170                           wreg	equ	0xFE8
 13171                           postdec1	equ	0xFE5
 13172                           fsr1l	equ	0xFE1
 13173                           indf2	equ	0xFDF
 13174                           postinc2	equ	0xFDE
 13175                           postdec2	equ	0xFDD
 13176                           fsr2h	equ	0xFDA
 13177                           fsr2l	equ	0xFD9
 13178                           status	equ	0xFD8
 13179                           
 13180 ;; *************** function _EEPROMTest *****************
 13181 ;; Defined at:
 13182 ;;		line 554 in file "Test.c"
 13183 ;; Parameters:    Size  Location     Type
 13184 ;;		None
 13185 ;; Auto vars:     Size  Location     Type
 13186 ;;		None
 13187 ;; Return value:  Size  Location     Type
 13188 ;;                  1    wreg      void 
 13189 ;; Registers used:
 13190 ;;		None
 13191 ;; Tracked objects:
 13192 ;;		On entry : 0/0
 13193 ;;		On exit  : 0/0
 13194 ;;		Unchanged: 0/0
 13195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13200 ;;Total ram usage:        0 bytes
 13201 ;; Hardware stack levels used:    1
 13202 ;; Hardware stack levels required when called:    7
 13203 ;; This function calls:
 13204 ;;		Nothing
 13205 ;; This function is called by:
 13206 ;;		_Test
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           	psect	text46
 13211  004A8C                     __ptext46:
 13212                           	opt stack 0
 13213  004A8C                     _EEPROMTest:
 13214                           	opt stack 22
 13215                           
 13216                           ;incstack = 0
 13217  004A8C  0012               	return		;funcret
 13218  004A8E                     __end_of_EEPROMTest:
 13219                           	opt stack 0
 13220                           tblptru	equ	0xFF8
 13221                           tblptrh	equ	0xFF7
 13222                           tblptrl	equ	0xFF6
 13223                           tablat	equ	0xFF5
 13224                           prodh	equ	0xFF4
 13225                           prodl	equ	0xFF3
 13226                           intcon	equ	0xFF2
 13227                           intcon2	equ	0xFF1
 13228                           intcon3	equ	0xFF0
 13229                           postinc0	equ	0xFEE
 13230                           wreg	equ	0xFE8
 13231                           postdec1	equ	0xFE5
 13232                           fsr1l	equ	0xFE1
 13233                           indf2	equ	0xFDF
 13234                           postinc2	equ	0xFDE
 13235                           postdec2	equ	0xFDD
 13236                           fsr2h	equ	0xFDA
 13237                           fsr2l	equ	0xFD9
 13238                           status	equ	0xFD8
 13239                           
 13240 ;; *************** function _BothServos *****************
 13241 ;; Defined at:
 13242 ;;		line 350 in file "Test.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;		None
 13245 ;; Auto vars:     Size  Location     Type
 13246 ;;		None
 13247 ;; Return value:  Size  Location     Type
 13248 ;;                  1    wreg      void 
 13249 ;; Registers used:
 13250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13251 ;; Tracked objects:
 13252 ;;		On entry : 0/0
 13253 ;;		On exit  : 0/0
 13254 ;;		Unchanged: 0/0
 13255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13260 ;;Total ram usage:        2 bytes
 13261 ;; Hardware stack levels used:    1
 13262 ;; Hardware stack levels required when called:   10
 13263 ;; This function calls:
 13264 ;;		_initServos
 13265 ;;		_lcdInst
 13266 ;;		_printf
 13267 ;;		_updateServoPosition
 13268 ;; This function is called by:
 13269 ;;		_Test
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273                           	psect	text47
 13274  0015A8                     __ptext47:
 13275                           	opt stack 0
 13276  0015A8                     _BothServos:
 13277                           	opt stack 19
 13278                           
 13279                           ;Test.c: 351: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13280                           
 13281                           ;incstack = 0
 13282  0015A8  0E01               	movlw	1
 13283  0015AA  EC14  F025         	call	_lcdInst
 13284  0015AE  0E68               	movlw	104
 13285  0015B0  0100               	movlb	0	; () banked
 13286  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13287  0015B4  0EE4               	movlw	228
 13288  0015B6                     u8487:
 13289  0015B6  2EE8               	decfsz	wreg,f,c
 13290  0015B8  D7FE               	bra	u8487
 13291  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13292  0015BC  D7FC               	bra	u8487
 13293  0015BE  F000               	nop	
 13294  0015C0  0E80               	movlw	128
 13295  0015C2  EC14  F025         	call	_lcdInst
 13296                           
 13297                           ;Test.c: 352: printf("TST: BOTH SERVOS");
 13298  0015C6  0EB4               	movlw	low STR_110
 13299  0015C8  0100               	movlb	0	; () banked
 13300  0015CA  6F8E               	movwf	printf@f& (0+255),b
 13301  0015CC  0EFC               	movlw	high STR_110
 13302  0015CE  0100               	movlb	0	; () banked
 13303  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13304  0015D2  ECB8  F008         	call	_printf	;wreg free
 13305                           
 13306                           ;Test.c: 353: TMR1ON = 1;
 13307  0015D6  80CD               	bsf	4045,0,c	;volatile
 13308                           
 13309                           ;Test.c: 354: TMR3ON = 1;
 13310  0015D8  80B1               	bsf	4017,0,c	;volatile
 13311                           
 13312                           ;Test.c: 355: machine_state = Sorting_state;
 13313  0015DA  0E01               	movlw	1
 13314  0015DC  0100               	movlb	0	; () banked
 13315  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 13316                           
 13317                           ; BSR set to: 0
 13318                           ;Test.c: 356: was_low_1 = 0;
 13319  0015E0  0E00               	movlw	0
 13320  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13321  0015E4  0E00               	movlw	0
 13322  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 13323                           
 13324                           ; BSR set to: 0
 13325                           ;Test.c: 357: was_low_3 = 0;
 13326  0015E8  0E00               	movlw	0
 13327  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 13328  0015EC  0E00               	movlw	0
 13329  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 13330                           
 13331                           ; BSR set to: 0
 13332                           ;Test.c: 363: initServos();
 13333  0015F0  ECE6  F020         	call	_initServos	;wreg free
 13334                           
 13335                           ;Test.c: 364: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13336  0015F4  0E3D               	movlw	61
 13337  0015F6  0100               	movlb	0	; () banked
 13338  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13339  0015FA  0EE1               	movlw	225
 13340  0015FC  0100               	movlb	0	; () banked
 13341  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 13342  001600  0E3F               	movlw	63
 13343  001602                     u8497:
 13344  001602  2EE8               	decfsz	wreg,f,c
 13345  001604  D7FE               	bra	u8497
 13346  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13347  001608  D7FC               	bra	u8497
 13348  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13349  00160C  D7FA               	bra	u8497
 13350  00160E  D000               	nop2	
 13351                           
 13352                           ;Test.c: 366: updateServoPosition(500, 1);
 13353  001610  0E01               	movlw	1
 13354  001612  0100               	movlb	0	; () banked
 13355  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13356  001616  0EF4               	movlw	244
 13357  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13358  00161A  0E00               	movlw	0
 13359  00161C  0100               	movlb	0	; () banked
 13360  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13361  001620  0E01               	movlw	1
 13362  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13363  001624  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13364                           
 13365                           ;Test.c: 367: updateServoPosition(1150, 3);
 13366  001628  0E04               	movlw	4
 13367  00162A  0100               	movlb	0	; () banked
 13368  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13369  00162E  0E7E               	movlw	126
 13370  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13371  001632  0E00               	movlw	0
 13372  001634  0100               	movlb	0	; () banked
 13373  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13374  001638  0E03               	movlw	3
 13375  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13376  00163C  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13377                           
 13378                           ;Test.c: 368: _delay((unsigned long)((750)*(32000000/4000.0)));
 13379  001640  0E1F               	movlw	31
 13380  001642  0100               	movlb	0	; () banked
 13381  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13382  001646  0E71               	movlw	113
 13383  001648  0100               	movlb	0	; () banked
 13384  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 13385  00164C  0E1E               	movlw	30
 13386  00164E                     u8507:
 13387  00164E  2EE8               	decfsz	wreg,f,c
 13388  001650  D7FE               	bra	u8507
 13389  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13390  001654  D7FC               	bra	u8507
 13391  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13392  001658  D7FA               	bra	u8507
 13393  00165A  F000               	nop	
 13394                           
 13395                           ;Test.c: 369: updateServoPosition(1200, 3);
 13396  00165C  0E04               	movlw	4
 13397  00165E  0100               	movlb	0	; () banked
 13398  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13399  001662  0EB0               	movlw	176
 13400  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13401  001666  0E00               	movlw	0
 13402  001668  0100               	movlb	0	; () banked
 13403  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13404  00166C  0E03               	movlw	3
 13405  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13406  001670  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13407                           
 13408                           ;Test.c: 370: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13409  001674  0E66               	movlw	102
 13410  001676  0100               	movlb	0	; () banked
 13411  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13412  00167A  0E76               	movlw	118
 13413  00167C  0100               	movlb	0	; () banked
 13414  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 13415  001680  0EC1               	movlw	193
 13416  001682                     u8517:
 13417  001682  2EE8               	decfsz	wreg,f,c
 13418  001684  D7FE               	bra	u8517
 13419  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13420  001688  D7FC               	bra	u8517
 13421  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13422  00168C  D7FA               	bra	u8517
 13423                           
 13424                           ;Test.c: 371: updateServoPosition(1150, 3);
 13425  00168E  0E04               	movlw	4
 13426  001690  0100               	movlb	0	; () banked
 13427  001692  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13428  001694  0E7E               	movlw	126
 13429  001696  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13430  001698  0E00               	movlw	0
 13431  00169A  0100               	movlb	0	; () banked
 13432  00169C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13433  00169E  0E03               	movlw	3
 13434  0016A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13435  0016A2  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13436                           
 13437                           ;Test.c: 372: _delay((unsigned long)((750)*(32000000/4000.0)));
 13438  0016A6  0E1F               	movlw	31
 13439  0016A8  0100               	movlb	0	; () banked
 13440  0016AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13441  0016AC  0E71               	movlw	113
 13442  0016AE  0100               	movlb	0	; () banked
 13443  0016B0  6FAB               	movwf	??_BothServos& (0+255),b
 13444  0016B2  0E1E               	movlw	30
 13445  0016B4                     u8527:
 13446  0016B4  2EE8               	decfsz	wreg,f,c
 13447  0016B6  D7FE               	bra	u8527
 13448  0016B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13449  0016BA  D7FC               	bra	u8527
 13450  0016BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13451  0016BE  D7FA               	bra	u8527
 13452  0016C0  F000               	nop	
 13453                           
 13454                           ;Test.c: 374: updateServoPosition(850, 1);
 13455  0016C2  0E03               	movlw	3
 13456  0016C4  0100               	movlb	0	; () banked
 13457  0016C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13458  0016C8  0E52               	movlw	82
 13459  0016CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13460  0016CC  0E00               	movlw	0
 13461  0016CE  0100               	movlb	0	; () banked
 13462  0016D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13463  0016D2  0E01               	movlw	1
 13464  0016D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13465  0016D6  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13466                           
 13467                           ;Test.c: 375: updateServoPosition(1150, 3);
 13468  0016DA  0E04               	movlw	4
 13469  0016DC  0100               	movlb	0	; () banked
 13470  0016DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13471  0016E0  0E7E               	movlw	126
 13472  0016E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13473  0016E4  0E00               	movlw	0
 13474  0016E6  0100               	movlb	0	; () banked
 13475  0016E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13476  0016EA  0E03               	movlw	3
 13477  0016EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13478  0016EE  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13479                           
 13480                           ;Test.c: 376: _delay((unsigned long)((750)*(32000000/4000.0)));
 13481  0016F2  0E1F               	movlw	31
 13482  0016F4  0100               	movlb	0	; () banked
 13483  0016F6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13484  0016F8  0E71               	movlw	113
 13485  0016FA  0100               	movlb	0	; () banked
 13486  0016FC  6FAB               	movwf	??_BothServos& (0+255),b
 13487  0016FE  0E1E               	movlw	30
 13488  001700                     u8537:
 13489  001700  2EE8               	decfsz	wreg,f,c
 13490  001702  D7FE               	bra	u8537
 13491  001704  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13492  001706  D7FC               	bra	u8537
 13493  001708  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13494  00170A  D7FA               	bra	u8537
 13495  00170C  F000               	nop	
 13496                           
 13497                           ;Test.c: 377: updateServoPosition(1200, 3);
 13498  00170E  0E04               	movlw	4
 13499  001710  0100               	movlb	0	; () banked
 13500  001712  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13501  001714  0EB0               	movlw	176
 13502  001716  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13503  001718  0E00               	movlw	0
 13504  00171A  0100               	movlb	0	; () banked
 13505  00171C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13506  00171E  0E03               	movlw	3
 13507  001720  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13508  001722  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13509                           
 13510                           ;Test.c: 378: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13511  001726  0E66               	movlw	102
 13512  001728  0100               	movlb	0	; () banked
 13513  00172A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13514  00172C  0E76               	movlw	118
 13515  00172E  0100               	movlb	0	; () banked
 13516  001730  6FAB               	movwf	??_BothServos& (0+255),b
 13517  001732  0EC1               	movlw	193
 13518  001734                     u8547:
 13519  001734  2EE8               	decfsz	wreg,f,c
 13520  001736  D7FE               	bra	u8547
 13521  001738  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13522  00173A  D7FC               	bra	u8547
 13523  00173C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13524  00173E  D7FA               	bra	u8547
 13525                           
 13526                           ;Test.c: 379: updateServoPosition(1150, 3);
 13527  001740  0E04               	movlw	4
 13528  001742  0100               	movlb	0	; () banked
 13529  001744  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13530  001746  0E7E               	movlw	126
 13531  001748  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13532  00174A  0E00               	movlw	0
 13533  00174C  0100               	movlb	0	; () banked
 13534  00174E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13535  001750  0E03               	movlw	3
 13536  001752  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13537  001754  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13538                           
 13539                           ;Test.c: 380: _delay((unsigned long)((750)*(32000000/4000.0)));
 13540  001758  0E1F               	movlw	31
 13541  00175A  0100               	movlb	0	; () banked
 13542  00175C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13543  00175E  0E71               	movlw	113
 13544  001760  0100               	movlb	0	; () banked
 13545  001762  6FAB               	movwf	??_BothServos& (0+255),b
 13546  001764  0E1E               	movlw	30
 13547  001766                     u8557:
 13548  001766  2EE8               	decfsz	wreg,f,c
 13549  001768  D7FE               	bra	u8557
 13550  00176A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13551  00176C  D7FC               	bra	u8557
 13552  00176E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13553  001770  D7FA               	bra	u8557
 13554  001772  F000               	nop	
 13555                           
 13556                           ;Test.c: 382: updateServoPosition(1200, 1);
 13557  001774  0E04               	movlw	4
 13558  001776  0100               	movlb	0	; () banked
 13559  001778  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13560  00177A  0EB0               	movlw	176
 13561  00177C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13562  00177E  0E00               	movlw	0
 13563  001780  0100               	movlb	0	; () banked
 13564  001782  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13565  001784  0E01               	movlw	1
 13566  001786  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13567  001788  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13568                           
 13569                           ;Test.c: 383: updateServoPosition(1150, 3);
 13570  00178C  0E04               	movlw	4
 13571  00178E  0100               	movlb	0	; () banked
 13572  001790  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13573  001792  0E7E               	movlw	126
 13574  001794  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13575  001796  0E00               	movlw	0
 13576  001798  0100               	movlb	0	; () banked
 13577  00179A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13578  00179C  0E03               	movlw	3
 13579  00179E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13580  0017A0  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13581                           
 13582                           ;Test.c: 384: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13583  0017A4  0E3D               	movlw	61
 13584  0017A6  0100               	movlb	0	; () banked
 13585  0017A8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13586  0017AA  0EE1               	movlw	225
 13587  0017AC  0100               	movlb	0	; () banked
 13588  0017AE  6FAB               	movwf	??_BothServos& (0+255),b
 13589  0017B0  0E3F               	movlw	63
 13590  0017B2                     u8567:
 13591  0017B2  2EE8               	decfsz	wreg,f,c
 13592  0017B4  D7FE               	bra	u8567
 13593  0017B6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13594  0017B8  D7FC               	bra	u8567
 13595  0017BA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13596  0017BC  D7FA               	bra	u8567
 13597  0017BE  D000               	nop2	
 13598                           
 13599                           ;Test.c: 386: updateServoPosition(1670, 1);
 13600  0017C0  0E06               	movlw	6
 13601  0017C2  0100               	movlb	0	; () banked
 13602  0017C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13603  0017C6  0E86               	movlw	134
 13604  0017C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13605  0017CA  0E00               	movlw	0
 13606  0017CC  0100               	movlb	0	; () banked
 13607  0017CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13608  0017D0  0E01               	movlw	1
 13609  0017D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13610  0017D4  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13611                           
 13612                           ;Test.c: 387: updateServoPosition(1150, 3);
 13613  0017D8  0E04               	movlw	4
 13614  0017DA  0100               	movlb	0	; () banked
 13615  0017DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13616  0017DE  0E7E               	movlw	126
 13617  0017E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13618  0017E2  0E00               	movlw	0
 13619  0017E4  0100               	movlb	0	; () banked
 13620  0017E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13621  0017E8  0E03               	movlw	3
 13622  0017EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13623  0017EC  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13624                           
 13625                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13626  0017F0  0E1F               	movlw	31
 13627  0017F2  0100               	movlb	0	; () banked
 13628  0017F4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13629  0017F6  0E71               	movlw	113
 13630  0017F8  0100               	movlb	0	; () banked
 13631  0017FA  6FAB               	movwf	??_BothServos& (0+255),b
 13632  0017FC  0E1E               	movlw	30
 13633  0017FE                     u8577:
 13634  0017FE  2EE8               	decfsz	wreg,f,c
 13635  001800  D7FE               	bra	u8577
 13636  001802  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13637  001804  D7FC               	bra	u8577
 13638  001806  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13639  001808  D7FA               	bra	u8577
 13640  00180A  F000               	nop	
 13641                           
 13642                           ;Test.c: 389: updateServoPosition(1300, 3);
 13643  00180C  0E05               	movlw	5
 13644  00180E  0100               	movlb	0	; () banked
 13645  001810  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13646  001812  0E14               	movlw	20
 13647  001814  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13648  001816  0E00               	movlw	0
 13649  001818  0100               	movlb	0	; () banked
 13650  00181A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13651  00181C  0E03               	movlw	3
 13652  00181E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13653  001820  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13654                           
 13655                           ;Test.c: 390: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13656  001824  0E66               	movlw	102
 13657  001826  0100               	movlb	0	; () banked
 13658  001828  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13659  00182A  0E76               	movlw	118
 13660  00182C  0100               	movlb	0	; () banked
 13661  00182E  6FAB               	movwf	??_BothServos& (0+255),b
 13662  001830  0EC1               	movlw	193
 13663  001832                     u8587:
 13664  001832  2EE8               	decfsz	wreg,f,c
 13665  001834  D7FE               	bra	u8587
 13666  001836  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13667  001838  D7FC               	bra	u8587
 13668  00183A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13669  00183C  D7FA               	bra	u8587
 13670                           
 13671                           ;Test.c: 391: updateServoPosition(1150, 3);
 13672  00183E  0E04               	movlw	4
 13673  001840  0100               	movlb	0	; () banked
 13674  001842  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13675  001844  0E7E               	movlw	126
 13676  001846  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13677  001848  0E00               	movlw	0
 13678  00184A  0100               	movlb	0	; () banked
 13679  00184C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13680  00184E  0E03               	movlw	3
 13681  001850  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13682  001852  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13683                           
 13684                           ;Test.c: 392: _delay((unsigned long)((750)*(32000000/4000.0)));
 13685  001856  0E1F               	movlw	31
 13686  001858  0100               	movlb	0	; () banked
 13687  00185A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13688  00185C  0E71               	movlw	113
 13689  00185E  0100               	movlb	0	; () banked
 13690  001860  6FAB               	movwf	??_BothServos& (0+255),b
 13691  001862  0E1E               	movlw	30
 13692  001864                     u8597:
 13693  001864  2EE8               	decfsz	wreg,f,c
 13694  001866  D7FE               	bra	u8597
 13695  001868  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13696  00186A  D7FC               	bra	u8597
 13697  00186C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13698  00186E  D7FA               	bra	u8597
 13699  001870  F000               	nop	
 13700                           
 13701                           ;Test.c: 394: updateServoPosition(2200, 1);
 13702  001872  0E08               	movlw	8
 13703  001874  0100               	movlb	0	; () banked
 13704  001876  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13705  001878  0E98               	movlw	152
 13706  00187A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13707  00187C  0E00               	movlw	0
 13708  00187E  0100               	movlb	0	; () banked
 13709  001880  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13710  001882  0E01               	movlw	1
 13711  001884  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13712  001886  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13713                           
 13714                           ;Test.c: 395: updateServoPosition(1150, 3);
 13715  00188A  0E04               	movlw	4
 13716  00188C  0100               	movlb	0	; () banked
 13717  00188E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13718  001890  0E7E               	movlw	126
 13719  001892  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13720  001894  0E00               	movlw	0
 13721  001896  0100               	movlb	0	; () banked
 13722  001898  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13723  00189A  0E03               	movlw	3
 13724  00189C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13725  00189E  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13726                           
 13727                           ;Test.c: 396: _delay((unsigned long)((750)*(32000000/4000.0)));
 13728  0018A2  0E1F               	movlw	31
 13729  0018A4  0100               	movlb	0	; () banked
 13730  0018A6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13731  0018A8  0E71               	movlw	113
 13732  0018AA  0100               	movlb	0	; () banked
 13733  0018AC  6FAB               	movwf	??_BothServos& (0+255),b
 13734  0018AE  0E1E               	movlw	30
 13735  0018B0                     u8607:
 13736  0018B0  2EE8               	decfsz	wreg,f,c
 13737  0018B2  D7FE               	bra	u8607
 13738  0018B4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13739  0018B6  D7FC               	bra	u8607
 13740  0018B8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13741  0018BA  D7FA               	bra	u8607
 13742  0018BC  F000               	nop	
 13743                           
 13744                           ;Test.c: 397: updateServoPosition(1300, 3);
 13745  0018BE  0E05               	movlw	5
 13746  0018C0  0100               	movlb	0	; () banked
 13747  0018C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13748  0018C4  0E14               	movlw	20
 13749  0018C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13750  0018C8  0E00               	movlw	0
 13751  0018CA  0100               	movlb	0	; () banked
 13752  0018CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13753  0018CE  0E03               	movlw	3
 13754  0018D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13755  0018D2  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13756                           
 13757                           ;Test.c: 398: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13758  0018D6  0E66               	movlw	102
 13759  0018D8  0100               	movlb	0	; () banked
 13760  0018DA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13761  0018DC  0E76               	movlw	118
 13762  0018DE  0100               	movlb	0	; () banked
 13763  0018E0  6FAB               	movwf	??_BothServos& (0+255),b
 13764  0018E2  0EC1               	movlw	193
 13765  0018E4                     u8617:
 13766  0018E4  2EE8               	decfsz	wreg,f,c
 13767  0018E6  D7FE               	bra	u8617
 13768  0018E8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13769  0018EA  D7FC               	bra	u8617
 13770  0018EC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13771  0018EE  D7FA               	bra	u8617
 13772                           
 13773                           ;Test.c: 399: updateServoPosition(1150, 3);
 13774  0018F0  0E04               	movlw	4
 13775  0018F2  0100               	movlb	0	; () banked
 13776  0018F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13777  0018F6  0E7E               	movlw	126
 13778  0018F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13779  0018FA  0E00               	movlw	0
 13780  0018FC  0100               	movlb	0	; () banked
 13781  0018FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13782  001900  0E03               	movlw	3
 13783  001902  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13784  001904  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13785                           
 13786                           ;Test.c: 400: _delay((unsigned long)((750)*(32000000/4000.0)));
 13787  001908  0E1F               	movlw	31
 13788  00190A  0100               	movlb	0	; () banked
 13789  00190C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13790  00190E  0E71               	movlw	113
 13791  001910  0100               	movlb	0	; () banked
 13792  001912  6FAB               	movwf	??_BothServos& (0+255),b
 13793  001914  0E1E               	movlw	30
 13794  001916                     u8627:
 13795  001916  2EE8               	decfsz	wreg,f,c
 13796  001918  D7FE               	bra	u8627
 13797  00191A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13798  00191C  D7FC               	bra	u8627
 13799  00191E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13800  001920  D7FA               	bra	u8627
 13801  001922  F000               	nop	
 13802                           
 13803                           ;Test.c: 402: TMR1ON = 0;
 13804  001924  90CD               	bcf	4045,0,c	;volatile
 13805                           
 13806                           ;Test.c: 403: TMR3ON = 0;
 13807  001926  90B1               	bcf	4017,0,c	;volatile
 13808                           
 13809                           ;Test.c: 404: (INTCONbits.GIE = 0);
 13810  001928  9EF2               	bcf	intcon,7,c	;volatile
 13811  00192A  0012               	return		;funcret
 13812  00192C                     __end_of_BothServos:
 13813                           	opt stack 0
 13814                           tblptru	equ	0xFF8
 13815                           tblptrh	equ	0xFF7
 13816                           tblptrl	equ	0xFF6
 13817                           tablat	equ	0xFF5
 13818                           prodh	equ	0xFF4
 13819                           prodl	equ	0xFF3
 13820                           intcon	equ	0xFF2
 13821                           intcon2	equ	0xFF1
 13822                           intcon3	equ	0xFF0
 13823                           postinc0	equ	0xFEE
 13824                           wreg	equ	0xFE8
 13825                           postdec1	equ	0xFE5
 13826                           fsr1l	equ	0xFE1
 13827                           indf2	equ	0xFDF
 13828                           postinc2	equ	0xFDE
 13829                           postdec2	equ	0xFDD
 13830                           fsr2h	equ	0xFDA
 13831                           fsr2l	equ	0xFD9
 13832                           status	equ	0xFD8
 13833                           
 13834 ;; *************** function _initServos *****************
 13835 ;; Defined at:
 13836 ;;		line 309 in file "sort.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;		None
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;		None
 13841 ;; Return value:  Size  Location     Type
 13842 ;;                  1    wreg      void 
 13843 ;; Registers used:
 13844 ;;		wreg, status,2, status,0, cstack
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13854 ;;Total ram usage:        1 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    8
 13857 ;; This function calls:
 13858 ;;		_updateServoPosition
 13859 ;; This function is called by:
 13860 ;;		_Loading
 13861 ;;		_BothServos
 13862 ;; This function uses a non-reentrant model
 13863 ;;
 13864                           
 13865                           	psect	text48
 13866  0041CC                     __ptext48:
 13867                           	opt stack 0
 13868  0041CC                     _initServos:
 13869                           	opt stack 20
 13870                           
 13871                           ;sort.c: 310: updateServoPosition(1200, 1);
 13872                           
 13873                           ;incstack = 0
 13874  0041CC  0E04               	movlw	4
 13875  0041CE  0100               	movlb	0	; () banked
 13876  0041D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13877  0041D2  0EB0               	movlw	176
 13878  0041D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13879  0041D6  0E00               	movlw	0
 13880  0041D8  0100               	movlb	0	; () banked
 13881  0041DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13882  0041DC  0E01               	movlw	1
 13883  0041DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13884  0041E0  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13885                           
 13886                           ;sort.c: 311: updateServoPosition(1150, 3);
 13887  0041E4  0E04               	movlw	4
 13888  0041E6  0100               	movlb	0	; () banked
 13889  0041E8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13890  0041EA  0E7E               	movlw	126
 13891  0041EC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13892  0041EE  0E00               	movlw	0
 13893  0041F0  0100               	movlb	0	; () banked
 13894  0041F2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13895  0041F4  0E03               	movlw	3
 13896  0041F6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13897  0041F8  EC4B  F01F         	call	_updateServoPosition	;wreg free
 13898                           
 13899                           ;sort.c: 312: TMR1ON = 1;
 13900  0041FC  80CD               	bsf	4045,0,c	;volatile
 13901                           
 13902                           ;sort.c: 313: was_low_1 = 0;
 13903  0041FE  0E00               	movlw	0
 13904  004200  6E7A               	movwf	_was_low_1+1,c	;volatile
 13905  004202  0E00               	movlw	0
 13906  004204  6E79               	movwf	_was_low_1,c	;volatile
 13907                           
 13908                           ;sort.c: 314: _delay((unsigned long)((5)*(32000000/4000.0)));
 13909  004206  0E34               	movlw	52
 13910  004208  0100               	movlb	0	; () banked
 13911  00420A  6F88               	movwf	??_initServos& (0+255),b
 13912  00420C  0EF1               	movlw	241
 13913  00420E                     u8637:
 13914  00420E  2EE8               	decfsz	wreg,f,c
 13915  004210  D7FE               	bra	u8637
 13916  004212  2F88               	decfsz	??_initServos& (0+255),f,b
 13917  004214  D7FC               	bra	u8637
 13918  004216  D000               	nop2	
 13919                           
 13920                           ;sort.c: 315: TMR3ON = 1;
 13921  004218  80B1               	bsf	4017,0,c	;volatile
 13922                           
 13923                           ;sort.c: 316: was_low_3 = 0;
 13924  00421A  0E00               	movlw	0
 13925  00421C  6E7C               	movwf	_was_low_3+1,c	;volatile
 13926  00421E  0E00               	movlw	0
 13927  004220  6E7B               	movwf	_was_low_3,c	;volatile
 13928                           
 13929                           ;sort.c: 318: LATCbits.LATC0 = 1;
 13930  004222  808B               	bsf	3979,0,c	;volatile
 13931  004224  0012               	return		;funcret
 13932  004226                     __end_of_initServos:
 13933                           	opt stack 0
 13934                           tblptru	equ	0xFF8
 13935                           tblptrh	equ	0xFF7
 13936                           tblptrl	equ	0xFF6
 13937                           tablat	equ	0xFF5
 13938                           prodh	equ	0xFF4
 13939                           prodl	equ	0xFF3
 13940                           intcon	equ	0xFF2
 13941                           intcon2	equ	0xFF1
 13942                           intcon3	equ	0xFF0
 13943                           postinc0	equ	0xFEE
 13944                           wreg	equ	0xFE8
 13945                           postdec1	equ	0xFE5
 13946                           fsr1l	equ	0xFE1
 13947                           indf2	equ	0xFDF
 13948                           postinc2	equ	0xFDE
 13949                           postdec2	equ	0xFDD
 13950                           fsr2h	equ	0xFDA
 13951                           fsr2l	equ	0xFD9
 13952                           status	equ	0xFD8
 13953                           
 13954 ;; *************** function _updateServoPosition *****************
 13955 ;; Defined at:
 13956 ;;		line 369 in file "sort.c"
 13957 ;; Parameters:    Size  Location     Type
 13958 ;;  time_us         2    0[BANK0 ] int 
 13959 ;;  timer           2    2[BANK0 ] int 
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  my_time         2    6[BANK0 ] unsigned int 
 13962 ;; Return value:  Size  Location     Type
 13963 ;;                  1    wreg      void 
 13964 ;; Registers used:
 13965 ;;		wreg, status,2, status,0
 13966 ;; Tracked objects:
 13967 ;;		On entry : 0/0
 13968 ;;		On exit  : 0/0
 13969 ;;		Unchanged: 0/0
 13970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13971 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13972 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13973 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13974 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13975 ;;Total ram usage:        8 bytes
 13976 ;; Hardware stack levels used:    1
 13977 ;; Hardware stack levels required when called:    7
 13978 ;; This function calls:
 13979 ;;		Nothing
 13980 ;; This function is called by:
 13981 ;;		_Distribution
 13982 ;;		_initServos
 13983 ;;		_actuatorTest
 13984 ;;		_BothServos
 13985 ;; This function uses a non-reentrant model
 13986 ;;
 13987                           
 13988                           	psect	text49
 13989  003E96                     __ptext49:
 13990                           	opt stack 0
 13991  003E96                     _updateServoPosition:
 13992                           	opt stack 20
 13993                           
 13994                           ;sort.c: 370: unsigned int my_time = 65535 - time_us;
 13995                           
 13996                           ;incstack = 0
 13997  003E96  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 13998  003E9A  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 13999  003E9E  0100               	movlb	0	; () banked
 14000  003EA0  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14001  003EA2  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14002  003EA4  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14003  003EA6  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14004  003EA8  0EFF               	movlw	255
 14005  003EAA  0100               	movlb	0	; () banked
 14006  003EAC  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14007  003EAE  0100               	movlb	0	; () banked
 14008  003EB0  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14009  003EB2  0EFF               	movlw	255
 14010  003EB4  0100               	movlb	0	; () banked
 14011  003EB6  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14012  003EB8  0100               	movlb	0	; () banked
 14013  003EBA  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14014                           
 14015                           ;sort.c: 371: switch(timer){
 14016  003EBC  D015               	goto	l5788
 14017  003EBE                     l5786:
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;sort.c: 373: servoTimes[0] = my_time >> 8;
 14021  003EBE  0100               	movlb	0	; () banked
 14022  003EC0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14023  003EC2  0101               	movlb	1	; () banked
 14024  003EC4  6F1C               	movwf	_servoTimes& (0+255),b
 14025  003EC6  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14026                           
 14027                           ;sort.c: 374: servoTimes[1] = my_time & 0xFF;
 14028  003EC8  0100               	movlb	0	; () banked
 14029  003ECA  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14030  003ECC  0101               	movlb	1	; () banked
 14031  003ECE  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14032  003ED0  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14033  003ED2                     l809:
 14034                           
 14035                           ;sort.c: 376: servoTimes[2] = my_time >> 8;
 14036  003ED2  0100               	movlb	0	; () banked
 14037  003ED4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14038  003ED6  0101               	movlb	1	; () banked
 14039  003ED8  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14040  003EDA  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14041                           
 14042                           ;sort.c: 377: servoTimes[3] = my_time & 0xFF;
 14043  003EDC  0100               	movlb	0	; () banked
 14044  003EDE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14045  003EE0  0101               	movlb	1	; () banked
 14046  003EE2  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14047  003EE4  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14048                           
 14049                           ;sort.c: 378: }
 14050  003EE6  0012               	return	
 14051  003EE8                     l5788:
 14052  003EE8  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14053  003EEC  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14054                           
 14055                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14056                           ; Switch size 1, requested type "space"
 14057                           ; Number of cases is 1, Range of values is 0 to 0
 14058                           ; switch strategies available:
 14059                           ; Name         Instructions Cycles
 14060                           ; simple_byte            4     3 (average)
 14061                           ;	Chosen strategy is simple_byte
 14062  003EF0  0100               	movlb	0	; () banked
 14063  003EF2  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14064  003EF4  0A00               	xorlw	0	; case 0
 14065  003EF6  A4D8               	btfss	status,2,c
 14066  003EF8  0012               	return	
 14067                           
 14068                           ; BSR set to: 0
 14069                           ; Switch size 1, requested type "space"
 14070                           ; Number of cases is 2, Range of values is 1 to 3
 14071                           ; switch strategies available:
 14072                           ; Name         Instructions Cycles
 14073                           ; simple_byte            7     4 (average)
 14074                           ;	Chosen strategy is simple_byte
 14075  003EFA  0100               	movlb	0	; () banked
 14076  003EFC  5184               	movf	??_updateServoPosition& (0+255),w,b
 14077  003EFE  0A01               	xorlw	1	; case 1
 14078  003F00  B4D8               	btfsc	status,2,c
 14079  003F02  D7DD               	goto	l5786
 14080  003F04  0A02               	xorlw	2	; case 3
 14081  003F06  A4D8               	btfss	status,2,c
 14082  003F08  0012               	return	
 14083  003F0A  D7E3               	goto	l809
 14084  003F0C                     __end_of_updateServoPosition:
 14085                           	opt stack 0
 14086                           tblptru	equ	0xFF8
 14087                           tblptrh	equ	0xFF7
 14088                           tblptrl	equ	0xFF6
 14089                           tablat	equ	0xFF5
 14090                           prodh	equ	0xFF4
 14091                           prodl	equ	0xFF3
 14092                           intcon	equ	0xFF2
 14093                           intcon2	equ	0xFF1
 14094                           intcon3	equ	0xFF0
 14095                           postinc0	equ	0xFEE
 14096                           wreg	equ	0xFE8
 14097                           postdec1	equ	0xFE5
 14098                           fsr1l	equ	0xFE1
 14099                           indf2	equ	0xFDF
 14100                           postinc2	equ	0xFDE
 14101                           postdec2	equ	0xFDD
 14102                           fsr2h	equ	0xFDA
 14103                           fsr2l	equ	0xFD9
 14104                           status	equ	0xFD8
 14105                           
 14106 ;; *************** function _BlockerTest *****************
 14107 ;; Defined at:
 14108 ;;		line 566 in file "Test.c"
 14109 ;; Parameters:    Size  Location     Type
 14110 ;;		None
 14111 ;; Auto vars:     Size  Location     Type
 14112 ;;  i               2   44[BANK0 ] int 
 14113 ;;  flag            2   46[BANK0 ] int 
 14114 ;; Return value:  Size  Location     Type
 14115 ;;                  1    wreg      void 
 14116 ;; Registers used:
 14117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14118 ;; Tracked objects:
 14119 ;;		On entry : 0/0
 14120 ;;		On exit  : 0/0
 14121 ;;		Unchanged: 0/0
 14122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14124 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14126 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14127 ;;Total ram usage:        5 bytes
 14128 ;; Hardware stack levels used:    1
 14129 ;; Hardware stack levels required when called:   10
 14130 ;; This function calls:
 14131 ;;		_lcdInst
 14132 ;;		_printf
 14133 ;; This function is called by:
 14134 ;;		_Test
 14135 ;; This function uses a non-reentrant model
 14136 ;;
 14137                           
 14138                           	psect	text50
 14139  0037B6                     __ptext50:
 14140                           	opt stack 0
 14141  0037B6                     _BlockerTest:
 14142                           	opt stack 19
 14143                           
 14144                           ;Test.c: 567: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14145                           
 14146                           ;incstack = 0
 14147  0037B6  0E01               	movlw	1
 14148  0037B8  EC14  F025         	call	_lcdInst
 14149  0037BC  0E68               	movlw	104
 14150  0037BE  0100               	movlb	0	; () banked
 14151  0037C0  6FAB               	movwf	??_BlockerTest& (0+255),b
 14152  0037C2  0EE4               	movlw	228
 14153  0037C4                     u8647:
 14154  0037C4  2EE8               	decfsz	wreg,f,c
 14155  0037C6  D7FE               	bra	u8647
 14156  0037C8  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 14157  0037CA  D7FC               	bra	u8647
 14158  0037CC  F000               	nop	
 14159  0037CE  0E80               	movlw	128
 14160  0037D0  EC14  F025         	call	_lcdInst
 14161                           
 14162                           ;Test.c: 568: printf("D WILL RETURN    ");
 14163  0037D4  0E49               	movlw	low STR_111
 14164  0037D6  0100               	movlb	0	; () banked
 14165  0037D8  6F8E               	movwf	printf@f& (0+255),b
 14166  0037DA  0EFB               	movlw	high STR_111
 14167  0037DC  0100               	movlb	0	; () banked
 14168  0037DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14169  0037E0  ECB8  F008         	call	_printf	;wreg free
 14170                           
 14171                           ;Test.c: 569: lcdInst(0b11000000);;
 14172  0037E4  0EC0               	movlw	192
 14173  0037E6  EC14  F025         	call	_lcdInst
 14174                           
 14175                           ;Test.c: 570: printf("OTHER TOGGLES CAM");
 14176  0037EA  0E7F               	movlw	low STR_119
 14177  0037EC  0100               	movlb	0	; () banked
 14178  0037EE  6F8E               	movwf	printf@f& (0+255),b
 14179  0037F0  0EFB               	movlw	high STR_119
 14180  0037F2  0100               	movlb	0	; () banked
 14181  0037F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 14182  0037F6  ECB8  F008         	call	_printf	;wreg free
 14183                           
 14184                           ;Test.c: 571: int flag = 1;
 14185  0037FA  0E00               	movlw	0
 14186  0037FC  0100               	movlb	0	; () banked
 14187  0037FE  6FAF               	movwf	(BlockerTest@flag+1)& (0+255),b
 14188  003800  0E01               	movlw	1
 14189  003802  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14190  003804                     l1270:
 14191  003804  A281               	btfss	3969,1,c	;volatile
 14192  003806  D7FE               	goto	l1270
 14193                           
 14194                           ;Test.c: 574: if(PORTB >> 4 == 0b1111){
 14195  003808  3881               	swapf	3969,w,c	;volatile
 14196  00380A  0B0F               	andlw	15
 14197  00380C  0A0F               	xorlw	15
 14198  00380E  B4D8               	btfsc	status,2,c
 14199  003810  0012               	return	
 14200                           
 14201                           ;Test.c: 577: else{
 14202                           ;Test.c: 578: if(flag){
 14203                           
 14204                           ;Test.c: 576: }
 14205                           
 14206                           ;Test.c: 575: break;
 14207  003812  0100               	movlb	0	; () banked
 14208  003814  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14209  003816  0100               	movlb	0	; () banked
 14210  003818  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14211  00381A  B4D8               	btfsc	status,2,c
 14212  00381C  D007               	goto	l7522
 14213                           
 14214                           ; BSR set to: 0
 14215                           ;Test.c: 579: LATCbits.LATC0 = 1;
 14216  00381E  808B               	bsf	3979,0,c	;volatile
 14217  003820  D023               	goto	l7534
 14218  003822                     u6111:
 14219  003822  0E01               	movlw	1
 14220  003824                     u6120:
 14221  003824  0100               	movlb	0	; () banked
 14222  003826  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14223  003828  6BAF               	clrf	(BlockerTest@flag+1)& (0+255),b
 14224                           
 14225                           ;Test.c: 581: }
 14226  00382A  D026               	goto	l1280
 14227  00382C                     l7522:
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;Test.c: 582: else{
 14231                           ;Test.c: 583: for(int i=0;i<5000;i++)
 14232  00382C  0E00               	movlw	0
 14233  00382E  0100               	movlb	0	; () banked
 14234  003830  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 14235  003832  0E00               	movlw	0
 14236  003834  6FAC               	movwf	BlockerTest@i& (0+255),b
 14237  003836                     l7524:
 14238                           
 14239                           ; BSR set to: 0
 14240  003836  0100               	movlb	0	; () banked
 14241  003838  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 14242  00383A  D008               	goto	l1278
 14243  00383C  0E88               	movlw	136
 14244  00383E  0100               	movlb	0	; () banked
 14245  003840  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 14246  003842  0E13               	movlw	19
 14247  003844  0100               	movlb	0	; () banked
 14248  003846  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 14249  003848  B0D8               	btfsc	status,0,c
 14250  00384A  D00D               	goto	l1279
 14251  00384C                     l1278:
 14252                           
 14253                           ; BSR set to: 0
 14254                           ;Test.c: 584: {
 14255                           ;Test.c: 585: LATCbits.LATC0 = 1;
 14256  00384C  808B               	bsf	3979,0,c	;volatile
 14257                           
 14258                           ; BSR set to: 0
 14259                           ;Test.c: 586: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14260  00384E  0E1A               	movlw	26
 14261  003850                     u8657:
 14262  003850  2EE8               	decfsz	wreg,f,c
 14263  003852  D7FE               	bra	u8657
 14264  003854  D000               	nop2	
 14265                           
 14266                           ;Test.c: 587: LATCbits.LATC0 = 0;
 14267  003856  908B               	bcf	3979,0,c	;volatile
 14268                           
 14269                           ;Test.c: 588: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14270  003858  0EF0               	movlw	240
 14271  00385A                     u8667:
 14272  00385A  2EE8               	decfsz	wreg,f,c
 14273  00385C  D7FE               	bra	u8667
 14274  00385E  0100               	movlb	0	; () banked
 14275  003860  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 14276  003862  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 14277  003864  D7E8               	goto	l7524
 14278  003866                     l1279:
 14279                           
 14280                           ; BSR set to: 0
 14281                           ;Test.c: 589: }
 14282                           ;Test.c: 590: LATCbits.LATC0 = 0;
 14283  003866  908B               	bcf	3979,0,c	;volatile
 14284  003868                     l7534:
 14285                           
 14286                           ; BSR set to: 0
 14287                           ;Test.c: 591: flag = !flag;
 14288  003868  0100               	movlb	0	; () banked
 14289  00386A  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14290  00386C  0100               	movlb	0	; () banked
 14291  00386E  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14292  003870  B4D8               	btfsc	status,2,c
 14293  003872  D7D7               	goto	u6111
 14294  003874  0E00               	movlw	0
 14295  003876  D7D6               	goto	u6120
 14296  003878                     l1280:
 14297  003878  A281               	btfss	3969,1,c	;volatile
 14298  00387A  D7C4               	goto	l1270
 14299  00387C  D7FD               	goto	l1280
 14300  00387E                     __end_of_BlockerTest:
 14301                           	opt stack 0
 14302                           tblptru	equ	0xFF8
 14303                           tblptrh	equ	0xFF7
 14304                           tblptrl	equ	0xFF6
 14305                           tablat	equ	0xFF5
 14306                           prodh	equ	0xFF4
 14307                           prodl	equ	0xFF3
 14308                           intcon	equ	0xFF2
 14309                           intcon2	equ	0xFF1
 14310                           intcon3	equ	0xFF0
 14311                           postinc0	equ	0xFEE
 14312                           wreg	equ	0xFE8
 14313                           postdec1	equ	0xFE5
 14314                           fsr1l	equ	0xFE1
 14315                           indf2	equ	0xFDF
 14316                           postinc2	equ	0xFDE
 14317                           postdec2	equ	0xFDD
 14318                           fsr2h	equ	0xFDA
 14319                           fsr2l	equ	0xFD9
 14320                           status	equ	0xFD8
 14321                           
 14322 ;; *************** function _printf *****************
 14323 ;; Defined at:
 14324 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14325 ;; Parameters:    Size  Location     Type
 14326 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 14327 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 14328 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 14329 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 14330 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 14331 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 14332 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 14333 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 14334 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 14335 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 14336 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 14337 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 14338 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 14339 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 14340 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 14341 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 14342 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 14343 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 14344 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 14345 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 14346 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 14347 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 14348 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 14349 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 14350 ;;		 -> STR_2(14), STR_1(18), 
 14351 ;; Auto vars:     Size  Location     Type
 14352 ;;  tmpval          4    0        struct .
 14353 ;;  width           2   41[BANK0 ] int 
 14354 ;;  val             2   37[BANK0 ] unsigned int 
 14355 ;;  len             2   35[BANK0 ] unsigned int 
 14356 ;;  ap              2   33[BANK0 ] PTR void [1]
 14357 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14358 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 14359 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 14360 ;;  c               1   40[BANK0 ] char 
 14361 ;;  flag            1   39[BANK0 ] unsigned char 
 14362 ;;  prec            1   30[BANK0 ] char 
 14363 ;; Return value:  Size  Location     Type
 14364 ;;                  2   14[BANK0 ] int 
 14365 ;; Registers used:
 14366 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14367 ;; Tracked objects:
 14368 ;;		On entry : 0/0
 14369 ;;		On exit  : 0/0
 14370 ;;		Unchanged: 0/0
 14371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14372 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14373 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14374 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14375 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14376 ;;Total ram usage:       29 bytes
 14377 ;; Hardware stack levels used:    1
 14378 ;; Hardware stack levels required when called:    9
 14379 ;; This function calls:
 14380 ;;		___lwdiv
 14381 ;;		___lwmod
 14382 ;;		___wmul
 14383 ;;		_isdigit
 14384 ;;		_putch
 14385 ;; This function is called by:
 14386 ;;		_UI
 14387 ;;		_change_state_to_menu_start
 14388 ;;		_change_state_to_menu_12
 14389 ;;		_change_state_to_menu_22
 14390 ;;		_printRTC
 14391 ;;		_EEPROM_write
 14392 ;;		_Test
 14393 ;;		_algorithmTest
 14394 ;;		_sensorTest
 14395 ;;		_actuatorTest
 14396 ;;		_BothServos
 14397 ;;		_PortTestA5
 14398 ;;		_PusherTest
 14399 ;;		_SpeedTest
 14400 ;;		_BlockerTest
 14401 ;;		_ToggleTestA5
 14402 ;; This function uses a non-reentrant model
 14403 ;;
 14404                           
 14405                           	psect	text51
 14406  001170                     __ptext51:
 14407                           	opt stack 0
 14408  001170                     _printf:
 14409                           	opt stack 18
 14410                           
 14411                           ;doprnt.c: 466: va_list ap;
 14412                           ;doprnt.c: 499: signed char c;
 14413                           ;doprnt.c: 501: int width;
 14414                           ;doprnt.c: 506: signed char prec;
 14415                           ;doprnt.c: 508: unsigned char flag;
 14416                           ;doprnt.c: 523: union {
 14417                           ;doprnt.c: 524: unsigned long vd;
 14418                           ;doprnt.c: 525: double integ;
 14419                           ;doprnt.c: 526: } tmpval;
 14420                           ;doprnt.c: 528: unsigned int val;
 14421                           ;doprnt.c: 529: unsigned len;
 14422                           ;doprnt.c: 530: const char * cp;
 14423                           ;doprnt.c: 533: *ap = __va_start();
 14424                           
 14425                           ;incstack = 0
 14426  001170  0E90               	movlw	low (?_printf+2)
 14427  001172  0100               	movlb	0	; () banked
 14428  001174  6FA1               	movwf	printf@ap& (0+255),b
 14429  001176  0E00               	movlw	high (?_printf+2)
 14430  001178  0100               	movlb	0	; () banked
 14431  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 14432                           
 14433                           ;doprnt.c: 536: while(c = *f++) {
 14434  00117C  D205               	goto	l5746
 14435  00117E                     l5616:
 14436                           
 14437                           ; BSR set to: 0
 14438                           ;doprnt.c: 538: if(c != '%')
 14439  00117E  0E25               	movlw	37
 14440  001180  0100               	movlb	0	; () banked
 14441  001182  19A8               	xorwf	printf@c& (0+255),w,b
 14442  001184  B4D8               	btfsc	status,2,c
 14443  001186  D005               	goto	l5620
 14444                           
 14445                           ; BSR set to: 0
 14446                           ;doprnt.c: 540: {
 14447                           ;doprnt.c: 541: (putch(c) );
 14448  001188  0100               	movlb	0	; () banked
 14449  00118A  51A8               	movf	printf@c& (0+255),w,b
 14450  00118C  EC0C  F025         	call	_putch
 14451                           
 14452                           ;doprnt.c: 542: continue;
 14453  001190  D1FB               	goto	l5746
 14454  001192                     l5620:
 14455                           
 14456                           ;doprnt.c: 543: }
 14457                           ;doprnt.c: 546: width = 0;
 14458  001192  0E00               	movlw	0
 14459  001194  0100               	movlb	0	; () banked
 14460  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 14461  001198  0E00               	movlw	0
 14462  00119A  6FA9               	movwf	printf@width& (0+255),b
 14463                           
 14464                           ;doprnt.c: 548: flag = 0;
 14465  00119C  0E00               	movlw	0
 14466  00119E  0100               	movlb	0	; () banked
 14467  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 14468                           
 14469                           ; BSR set to: 0
 14470                           ;doprnt.c: 551: switch(*f) {
 14471                           
 14472                           ;doprnt.c: 550: for(;;) {
 14473  0011A2  D005               	goto	l5626
 14474  0011A4                     l5622:
 14475                           
 14476                           ;doprnt.c: 580: flag |= 0x04;
 14477  0011A4  0100               	movlb	0	; () banked
 14478  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 14479                           
 14480                           ;doprnt.c: 581: f++;
 14481  0011A8  0100               	movlb	0	; () banked
 14482  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 14483  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14484  0011AE                     l5626:
 14485  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 14486  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 14487  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14488  0011B6  6AF8               	clrf	tblptru,c
 14489  0011B8                     	endif
 14490  0011B8                     	if	0	;tblptru may be non-zero
 14491  0011B8                     	endif
 14492  0011B8  0008               	tblrd		*
 14493  0011BA  50F5               	movf	tablat,w,c
 14494                           
 14495                           ; Switch size 1, requested type "space"
 14496                           ; Number of cases is 1, Range of values is 48 to 48
 14497                           ; switch strategies available:
 14498                           ; Name         Instructions Cycles
 14499                           ; simple_byte            4     3 (average)
 14500                           ;	Chosen strategy is simple_byte
 14501  0011BC  0A30               	xorlw	48	; case 48
 14502  0011BE  B4D8               	btfsc	status,2,c
 14503  0011C0  D7F1               	goto	l5622
 14504                           
 14505                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14506                           
 14507                           ;doprnt.c: 586: }
 14508                           
 14509                           ;doprnt.c: 585: break;
 14510  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 14511  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 14512  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14513  0011CA  6AF8               	clrf	tblptru,c
 14514  0011CC                     	endif
 14515  0011CC                     	if	0	;tblptru may be non-zero
 14516  0011CC                     	endif
 14517  0011CC  0008               	tblrd		*
 14518  0011CE  50F5               	movf	tablat,w,c
 14519  0011D0  EC31  F024         	call	_isdigit
 14520  0011D4  A0D8               	btfss	status,0,c
 14521  0011D6  D0D2               	goto	l5674
 14522                           
 14523                           ;doprnt.c: 598: width = 0;
 14524  0011D8  0E00               	movlw	0
 14525  0011DA  0100               	movlb	0	; () banked
 14526  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 14527  0011DE  0E00               	movlw	0
 14528  0011E0  6FA9               	movwf	printf@width& (0+255),b
 14529  0011E2                     l5632:
 14530                           
 14531                           ;doprnt.c: 600: width *= 10;
 14532  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 14533  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 14534  0011EA  0E00               	movlw	0
 14535  0011EC  0100               	movlb	0	; () banked
 14536  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14537  0011F0  0E0A               	movlw	10
 14538  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 14539  0011F4  EC9B  F022         	call	___wmul	;wreg free
 14540  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 14541  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 14542                           
 14543                           ;doprnt.c: 601: width += *f++ - '0';
 14544  001200  0ED0               	movlw	208
 14545  001202  0100               	movlb	0	; () banked
 14546  001204  6F9A               	movwf	??_printf& (0+255),b
 14547  001206  0EFF               	movlw	255
 14548  001208  0100               	movlb	0	; () banked
 14549  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 14550  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 14551  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 14552  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14553  001214  6AF8               	clrf	tblptru,c
 14554  001216                     	endif
 14555  001216                     	if	0	;tblptru may be non-zero
 14556  001216                     	endif
 14557  001216  0008               	tblrd		*
 14558  001218  50F5               	movf	tablat,w,c
 14559  00121A  0100               	movlb	0	; () banked
 14560  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 14561  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 14562  001220  0100               	movlb	0	; () banked
 14563  001222  519A               	movf	??_printf& (0+255),w,b
 14564  001224  0100               	movlb	0	; () banked
 14565  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 14566  001228  0100               	movlb	0	; () banked
 14567  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 14568  00122C  0100               	movlb	0	; () banked
 14569  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 14570  001230  0100               	movlb	0	; () banked
 14571  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 14572  001234  0100               	movlb	0	; () banked
 14573  001236  27A9               	addwf	printf@width& (0+255),f,b
 14574  001238  0100               	movlb	0	; () banked
 14575  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 14576  00123C  0100               	movlb	0	; () banked
 14577  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 14578                           
 14579                           ; BSR set to: 0
 14580  001240  0100               	movlb	0	; () banked
 14581  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 14582  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14583                           
 14584                           ; BSR set to: 0
 14585                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14586  001246  C08E  FFF6         	movff	printf@f,tblptrl
 14587  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 14588  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14589  00124E  6AF8               	clrf	tblptru,c
 14590  001250                     	endif
 14591  001250                     	if	0	;tblptru may be non-zero
 14592  001250                     	endif
 14593  001250  0008               	tblrd		*
 14594  001252  50F5               	movf	tablat,w,c
 14595  001254  EC31  F024         	call	_isdigit
 14596  001258  A0D8               	btfss	status,0,c
 14597  00125A  D090               	goto	l5674
 14598  00125C  D7C2               	goto	l5632
 14599  00125E                     l5640:
 14600                           
 14601                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14602  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 14603  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14604  001266  CFDE F09F          	movff	postinc2,printf@cp
 14605  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 14606  00126E  0E02               	movlw	2
 14607  001270  0100               	movlb	0	; () banked
 14608  001272  27A1               	addwf	printf@ap& (0+255),f,b
 14609  001274  0E00               	movlw	0
 14610  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;doprnt.c: 740: if(!cp)
 14614  001278  0100               	movlb	0	; () banked
 14615  00127A  519F               	movf	printf@cp& (0+255),w,b
 14616  00127C  0100               	movlb	0	; () banked
 14617  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 14618  001280  A4D8               	btfss	status,2,c
 14619  001282  D006               	goto	l5648
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;doprnt.c: 741: cp = "(null)";
 14623  001284  0EB6               	movlw	low STR_120
 14624  001286  0100               	movlb	0	; () banked
 14625  001288  6F9F               	movwf	printf@cp& (0+255),b
 14626  00128A  0EFF               	movlw	high STR_120
 14627  00128C  0100               	movlb	0	; () banked
 14628  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 14629  001290                     l5648:
 14630                           
 14631                           ; BSR set to: 0
 14632                           ;doprnt.c: 745: len = 0;
 14633  001290  0E00               	movlw	0
 14634  001292  0100               	movlb	0	; () banked
 14635  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 14636  001296  0E00               	movlw	0
 14637  001298  6FA3               	movwf	printf@len& (0+255),b
 14638                           
 14639                           ;doprnt.c: 746: while(cp[len])
 14640  00129A  D003               	goto	l5652
 14641  00129C                     l5650:
 14642                           
 14643                           ;doprnt.c: 747: len++;
 14644  00129C  0100               	movlb	0	; () banked
 14645  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 14646  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 14647  0012A2                     l5652:
 14648                           
 14649                           ; BSR set to: 0
 14650  0012A2  0100               	movlb	0	; () banked
 14651  0012A4  51A3               	movf	printf@len& (0+255),w,b
 14652  0012A6  0100               	movlb	0	; () banked
 14653  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 14654  0012AA  0100               	movlb	0	; () banked
 14655  0012AC  6F9A               	movwf	??_printf& (0+255),b
 14656  0012AE  0100               	movlb	0	; () banked
 14657  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 14658  0012B2  0100               	movlb	0	; () banked
 14659  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 14660  0012B6  0100               	movlb	0	; () banked
 14661  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 14662  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 14663  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 14664  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 14665  0012C4  6EF8               	movwf	tblptru,c
 14666  0012C6  0E0F               	movlw	(high __ramtop+-1)
 14667  0012C8  64F7               	cpfsgt	tblptrh,c
 14668  0012CA  D003               	bra	u4047
 14669  0012CC  0008               	tblrd		*
 14670  0012CE  50F5               	movf	tablat,w,c
 14671  0012D0  D005               	bra	u4040
 14672  0012D2                     u4047:
 14673  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 14674  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 14675  0012DA  50EF               	movf	indf0,w,c
 14676  0012DC                     u4040:
 14677  0012DC  0900               	iorlw	0
 14678  0012DE  A4D8               	btfss	status,2,c
 14679  0012E0  D7DD               	goto	l5650
 14680                           
 14681                           ;doprnt.c: 757: if(width > len)
 14682  0012E2  0100               	movlb	0	; () banked
 14683  0012E4  51A9               	movf	printf@width& (0+255),w,b
 14684  0012E6  0100               	movlb	0	; () banked
 14685  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 14686  0012EA  0100               	movlb	0	; () banked
 14687  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 14688  0012EE  0100               	movlb	0	; () banked
 14689  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 14690  0012F2  B0D8               	btfsc	status,0,c
 14691  0012F4  D009               	goto	l5658
 14692                           
 14693                           ; BSR set to: 0
 14694                           ;doprnt.c: 758: width -= len;
 14695  0012F6  0100               	movlb	0	; () banked
 14696  0012F8  51A3               	movf	printf@len& (0+255),w,b
 14697  0012FA  0100               	movlb	0	; () banked
 14698  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 14699  0012FE  0100               	movlb	0	; () banked
 14700  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 14701  001302  0100               	movlb	0	; () banked
 14702  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14703  001306  D009               	goto	l5662
 14704  001308                     l5658:
 14705                           
 14706                           ; BSR set to: 0
 14707                           ;doprnt.c: 759: else
 14708                           ;doprnt.c: 760: width = 0;
 14709  001308  0E00               	movlw	0
 14710  00130A  0100               	movlb	0	; () banked
 14711  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 14712  00130E  0E00               	movlw	0
 14713  001310  6FA9               	movwf	printf@width& (0+255),b
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;doprnt.c: 764: while(width--)
 14717  001312  D003               	goto	l5662
 14718  001314                     l5660:
 14719                           
 14720                           ; BSR set to: 0
 14721                           ;doprnt.c: 765: (putch(' ') );
 14722  001314  0E20               	movlw	32
 14723  001316  EC0C  F025         	call	_putch
 14724  00131A                     l5662:
 14725  00131A  0100               	movlb	0	; () banked
 14726  00131C  07A9               	decf	printf@width& (0+255),f,b
 14727  00131E  A0D8               	btfss	status,0,c
 14728  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 14729  001322  0100               	movlb	0	; () banked
 14730  001324  29A9               	incf	printf@width& (0+255),w,b
 14731  001326  E1F6               	bnz	l5660
 14732  001328  0100               	movlb	0	; () banked
 14733  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 14734  00132C  B4D8               	btfsc	status,2,c
 14735  00132E  D017               	goto	l5668
 14736  001330  D7F1               	goto	l5660
 14737  001332                     l5664:
 14738                           
 14739                           ; BSR set to: 0
 14740                           ;doprnt.c: 768: (putch(*cp++) );
 14741  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 14742  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 14743  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 14744  00133C  6EF8               	movwf	tblptru,c
 14745  00133E  0E0F               	movlw	(high __ramtop+-1)
 14746  001340  64F7               	cpfsgt	tblptrh,c
 14747  001342  D003               	bra	u4087
 14748  001344  0008               	tblrd		*
 14749  001346  50F5               	movf	tablat,w,c
 14750  001348  D005               	bra	u4080
 14751  00134A                     u4087:
 14752  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14753  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14754  001352  50EF               	movf	indf0,w,c
 14755  001354                     u4080:
 14756  001354  EC0C  F025         	call	_putch
 14757  001358  0100               	movlb	0	; () banked
 14758  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 14759  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 14760  00135E                     l5668:
 14761                           
 14762                           ; BSR set to: 0
 14763  00135E  0100               	movlb	0	; () banked
 14764  001360  07A3               	decf	printf@len& (0+255),f,b
 14765  001362  A0D8               	btfss	status,0,c
 14766  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 14767  001366  0100               	movlb	0	; () banked
 14768  001368  29A3               	incf	printf@len& (0+255),w,b
 14769  00136A  E1E3               	bnz	l5664
 14770  00136C  0100               	movlb	0	; () banked
 14771  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 14772  001370  B4D8               	btfsc	status,2,c
 14773  001372  D10A               	goto	l5746
 14774  001374  D7DE               	goto	l5664
 14775  001376                     l5670:
 14776                           
 14777                           ; BSR set to: 0
 14778                           ;doprnt.c: 818: flag |= 0x40;
 14779  001376  0100               	movlb	0	; () banked
 14780  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 14781                           
 14782                           ; BSR set to: 0
 14783                           ;doprnt.c: 822: }
 14784                           
 14785                           ;doprnt.c: 819: break;
 14786  00137A  D01D               	goto	l1314
 14787  00137C                     l5674:
 14788  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 14789  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 14790  001384  0100               	movlb	0	; () banked
 14791  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 14792  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14793  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14794  00138A  6AF8               	clrf	tblptru,c
 14795  00138C                     	endif
 14796  00138C                     	if	0	;tblptru may be non-zero
 14797  00138C                     	endif
 14798  00138C  0008               	tblrd		*
 14799  00138E  CFF5 F0A8          	movff	tablat,printf@c
 14800  001392  0100               	movlb	0	; () banked
 14801  001394  51A8               	movf	printf@c& (0+255),w,b
 14802                           
 14803                           ; Switch size 1, requested type "space"
 14804                           ; Number of cases is 5, Range of values is 0 to 117
 14805                           ; switch strategies available:
 14806                           ; Name         Instructions Cycles
 14807                           ; simple_byte           16     9 (average)
 14808                           ;	Chosen strategy is simple_byte
 14809  001396  0A00               	xorlw	0	; case 0
 14810  001398  B4D8               	btfsc	status,2,c
 14811  00139A  0012               	return	
 14812  00139C  0A64               	xorlw	100	; case 100
 14813  00139E  B4D8               	btfsc	status,2,c
 14814  0013A0  D00A               	goto	l1314
 14815  0013A2  0A0D               	xorlw	13	; case 105
 14816  0013A4  B4D8               	btfsc	status,2,c
 14817  0013A6  D007               	goto	l1314
 14818  0013A8  0A1A               	xorlw	26	; case 115
 14819  0013AA  B4D8               	btfsc	status,2,c
 14820  0013AC  D758               	goto	l5640
 14821  0013AE  0A06               	xorlw	6	; case 117
 14822  0013B0  B4D8               	btfsc	status,2,c
 14823  0013B2  D7E1               	goto	l5670
 14824  0013B4  D0E9               	goto	l5746
 14825  0013B6                     l1314:
 14826                           
 14827                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14828  0013B6  0100               	movlb	0	; () banked
 14829  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 14830  0013BA  D019               	goto	l5686
 14831                           
 14832                           ; BSR set to: 0
 14833                           ;doprnt.c: 1253: {
 14834                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14835  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14836  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14837  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14838  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14839                           
 14840                           ; BSR set to: 0
 14841  0013CC  0E02               	movlw	2
 14842  0013CE  0100               	movlb	0	; () banked
 14843  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14844  0013D2  0E00               	movlw	0
 14845  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14846                           
 14847                           ; BSR set to: 0
 14848                           ;doprnt.c: 1261: if((int)val < 0) {
 14849  0013D6  0100               	movlb	0	; () banked
 14850  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14851  0013DA  D016               	goto	l5690
 14852                           
 14853                           ; BSR set to: 0
 14854                           ;doprnt.c: 1262: flag |= 0x03;
 14855  0013DC  0E03               	movlw	3
 14856  0013DE  0100               	movlb	0	; () banked
 14857  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14858                           
 14859                           ; BSR set to: 0
 14860                           ;doprnt.c: 1263: val = -val;
 14861  0013E2  0100               	movlb	0	; () banked
 14862  0013E4  6DA5               	negf	printf@val& (0+255),b
 14863  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14864  0013E8  B0D8               	btfsc	status,0,c
 14865  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14866                           
 14867                           ; BSR set to: 0
 14868                           ;doprnt.c: 1264: }
 14869                           ;doprnt.c: 1266: }
 14870  0013EC  D00D               	goto	l5690
 14871  0013EE                     l5686:
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;doprnt.c: 1268: else
 14875                           ;doprnt.c: 1273: {
 14876                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14877  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14878  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14879  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14880  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14881                           
 14882                           ; BSR set to: 0
 14883  0013FE  0E02               	movlw	2
 14884  001400  0100               	movlb	0	; () banked
 14885  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14886  001404  0E00               	movlw	0
 14887  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14888  001408                     l5690:
 14889                           
 14890                           ; BSR set to: 0
 14891                           ;doprnt.c: 1287: }
 14892                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14893  001408  0E01               	movlw	1
 14894  00140A  0100               	movlb	0	; () banked
 14895  00140C  6FA8               	movwf	printf@c& (0+255),b
 14896  00140E                     l5692:
 14897                           
 14898                           ; BSR set to: 0
 14899  00140E  0E05               	movlw	5
 14900  001410  0100               	movlb	0	; () banked
 14901  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14902  001414  B4D8               	btfsc	status,2,c
 14903  001416  D019               	goto	l5704
 14904                           
 14905                           ; BSR set to: 0
 14906                           ;doprnt.c: 1306: if(val < dpowers[c])
 14907                           
 14908                           ; BSR set to: 0
 14909                           
 14910                           ; BSR set to: 0
 14911  001418  0100               	movlb	0	; () banked
 14912  00141A  51A8               	movf	printf@c& (0+255),w,b
 14913  00141C  0D02               	mullw	2
 14914  00141E  0E12               	movlw	low _dpowers
 14915  001420  24F3               	addwf	prodl,w,c
 14916  001422  6EF6               	movwf	tblptrl,c
 14917  001424  0EFB               	movlw	high _dpowers
 14918  001426  20F4               	addwfc	prodh,w,c
 14919  001428  6EF7               	movwf	tblptrh,c
 14920  00142A                     	if	1	;There are 3 active tblptr bytes
 14921  00142A  6AF8               	clrf	tblptru,c
 14922  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14923  00142E  22F8               	addwfc	tblptru,f,c
 14924  001430                     	endif
 14925  001430  0009               	tblrd		*+
 14926  001432  50F5               	movf	tablat,w,c
 14927  001434  0100               	movlb	0	; () banked
 14928  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14929  001438  0009               	tblrd		*+
 14930  00143A  50F5               	movf	tablat,w,c
 14931  00143C  0100               	movlb	0	; () banked
 14932  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14933  001440  A0D8               	btfss	status,0,c
 14934  001442  D003               	goto	l5704
 14935                           
 14936                           ; BSR set to: 0
 14937                           
 14938                           ; BSR set to: 0
 14939                           
 14940                           ; BSR set to: 0
 14941                           ;doprnt.c: 1307: break;
 14942  001444  0100               	movlb	0	; () banked
 14943  001446  2BA8               	incf	printf@c& (0+255),f,b
 14944  001448  D7E2               	goto	l5692
 14945  00144A                     l5704:
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14949  00144A  0100               	movlb	0	; () banked
 14950  00144C  51A9               	movf	printf@width& (0+255),w,b
 14951  00144E  0100               	movlb	0	; () banked
 14952  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14953  001452  B4D8               	btfsc	status,2,c
 14954  001454  D00B               	goto	l5710
 14955                           
 14956                           ; BSR set to: 0
 14957  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14958  00145A  0E03               	movlw	3
 14959  00145C  0100               	movlb	0	; () banked
 14960  00145E  179A               	andwf	??_printf& (0+255),f,b
 14961  001460  B4D8               	btfsc	status,2,c
 14962  001462  D004               	goto	l5710
 14963                           
 14964                           ; BSR set to: 0
 14965                           ;doprnt.c: 1346: width--;
 14966  001464  0100               	movlb	0	; () banked
 14967  001466  07A9               	decf	printf@width& (0+255),f,b
 14968  001468  A0D8               	btfss	status,0,c
 14969  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14970  00146C                     l5710:
 14971                           
 14972                           ; BSR set to: 0
 14973                           ;doprnt.c: 1381: if(width > c)
 14974  00146C  0E80               	movlw	128
 14975  00146E  0100               	movlb	0	; () banked
 14976  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14977  001472  0E7F               	movlw	127
 14978  001474  0100               	movlb	0	; () banked
 14979  001476  6F9A               	movwf	??_printf& (0+255),b
 14980  001478  0100               	movlb	0	; () banked
 14981  00147A  51A9               	movf	printf@width& (0+255),w,b
 14982  00147C  0100               	movlb	0	; () banked
 14983  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14984  001480  0100               	movlb	0	; () banked
 14985  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14986  001484  0A80               	xorlw	128
 14987  001486  0100               	movlb	0	; () banked
 14988  001488  599A               	subwfb	??_printf& (0+255),w,b
 14989  00148A  B0D8               	btfsc	status,0,c
 14990  00148C  D00B               	goto	l5714
 14991                           
 14992                           ; BSR set to: 0
 14993                           ;doprnt.c: 1382: width -= c;
 14994  00148E  0100               	movlb	0	; () banked
 14995  001490  51A8               	movf	printf@c& (0+255),w,b
 14996  001492  0100               	movlb	0	; () banked
 14997  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14998  001496  0E00               	movlw	0
 14999  001498  0100               	movlb	0	; () banked
 15000  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 15001  00149C  0EFF               	movlw	255
 15002  00149E  0100               	movlb	0	; () banked
 15003  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15004  0014A2  D005               	goto	l5716
 15005  0014A4                     l5714:
 15006                           
 15007                           ; BSR set to: 0
 15008                           ;doprnt.c: 1383: else
 15009                           ;doprnt.c: 1384: width = 0;
 15010  0014A4  0E00               	movlw	0
 15011  0014A6  0100               	movlb	0	; () banked
 15012  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 15013  0014AA  0E00               	movlw	0
 15014  0014AC  6FA9               	movwf	printf@width& (0+255),b
 15015  0014AE                     l5716:
 15016                           
 15017                           ; BSR set to: 0
 15018                           ;doprnt.c: 1387: if(flag & 0x04) {
 15019  0014AE  0100               	movlb	0	; () banked
 15020  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 15021  0014B2  D018               	goto	l5728
 15022                           
 15023                           ; BSR set to: 0
 15024                           ;doprnt.c: 1392: if(flag & 0x03)
 15025  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 15026  0014B8  0E03               	movlw	3
 15027  0014BA  0100               	movlb	0	; () banked
 15028  0014BC  179A               	andwf	??_printf& (0+255),f,b
 15029  0014BE  B4D8               	btfsc	status,2,c
 15030  0014C0  D003               	goto	l5722
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;doprnt.c: 1393: (putch('-') );
 15034  0014C2  0E2D               	movlw	45
 15035  0014C4  EC0C  F025         	call	_putch
 15036  0014C8                     l5722:
 15037                           
 15038                           ;doprnt.c: 1415: if(width)
 15039  0014C8  0100               	movlb	0	; () banked
 15040  0014CA  51A9               	movf	printf@width& (0+255),w,b
 15041  0014CC  0100               	movlb	0	; () banked
 15042  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15043  0014D0  B4D8               	btfsc	status,2,c
 15044  0014D2  D025               	goto	l5738
 15045                           
 15046                           ; BSR set to: 0
 15047                           ;doprnt.c: 1417: (putch('0') );
 15048                           
 15049                           ; BSR set to: 0
 15050                           
 15051                           ;doprnt.c: 1416: do
 15052  0014D4  0E30               	movlw	48
 15053  0014D6  EC0C  F025         	call	_putch
 15054                           
 15055                           ;doprnt.c: 1418: while(--width);
 15056  0014DA  0100               	movlb	0	; () banked
 15057  0014DC  07A9               	decf	printf@width& (0+255),f,b
 15058  0014DE  A0D8               	btfss	status,0,c
 15059  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 15060  0014E2  D7F2               	goto	l5722
 15061  0014E4                     l5728:
 15062                           
 15063                           ; BSR set to: 0
 15064                           ;doprnt.c: 1422: {
 15065                           ;doprnt.c: 1424: if(width
 15066                           ;doprnt.c: 1428: )
 15067  0014E4  0100               	movlb	0	; () banked
 15068  0014E6  51A9               	movf	printf@width& (0+255),w,b
 15069  0014E8  0100               	movlb	0	; () banked
 15070  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15071  0014EC  B4D8               	btfsc	status,2,c
 15072  0014EE  D00D               	goto	l5734
 15073  0014F0                     l5730:
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;doprnt.c: 1430: (putch(' ') );
 15077  0014F0  0E20               	movlw	32
 15078  0014F2  EC0C  F025         	call	_putch
 15079                           
 15080                           ;doprnt.c: 1431: while(--width);
 15081  0014F6  0100               	movlb	0	; () banked
 15082  0014F8  07A9               	decf	printf@width& (0+255),f,b
 15083  0014FA  A0D8               	btfss	status,0,c
 15084  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 15085  0014FE  0100               	movlb	0	; () banked
 15086  001500  51A9               	movf	printf@width& (0+255),w,b
 15087  001502  0100               	movlb	0	; () banked
 15088  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15089  001506  A4D8               	btfss	status,2,c
 15090  001508  D7F3               	goto	l5730
 15091  00150A                     l5734:
 15092                           
 15093                           ; BSR set to: 0
 15094                           ;doprnt.c: 1438: if(flag & 0x03)
 15095  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 15096  00150E  0E03               	movlw	3
 15097  001510  0100               	movlb	0	; () banked
 15098  001512  179A               	andwf	??_printf& (0+255),f,b
 15099  001514  B4D8               	btfsc	status,2,c
 15100  001516  D003               	goto	l5738
 15101                           
 15102                           ; BSR set to: 0
 15103                           ;doprnt.c: 1439: (putch('-') );
 15104  001518  0E2D               	movlw	45
 15105  00151A  EC0C  F025         	call	_putch
 15106  00151E                     l5738:
 15107                           
 15108                           ;doprnt.c: 1469: }
 15109                           ;doprnt.c: 1472: prec = c;
 15110  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 15111                           
 15112                           ;doprnt.c: 1474: while(prec--) {
 15113  001522  D02C               	goto	l5744
 15114  001524                     l5740:
 15115                           
 15116                           ;doprnt.c: 1478: {
 15117                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15118  001524  0100               	movlb	0	; () banked
 15119  001526  519E               	movf	printf@prec& (0+255),w,b
 15120  001528  0D02               	mullw	2
 15121  00152A  0E12               	movlw	low _dpowers
 15122  00152C  24F3               	addwf	prodl,w,c
 15123  00152E  6EF6               	movwf	tblptrl,c
 15124  001530  0EFB               	movlw	high _dpowers
 15125  001532  20F4               	addwfc	prodh,w,c
 15126  001534  6EF7               	movwf	tblptrh,c
 15127  001536                     	if	1	;There are 3 active tblptr bytes
 15128  001536  6AF8               	clrf	tblptru,c
 15129  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 15130  00153A  22F8               	addwfc	tblptru,f,c
 15131  00153C                     	endif
 15132  00153C  0009               	tblrd		*+
 15133  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 15134  001542  000A               	tblrd		*-
 15135  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 15136  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 15137  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 15138  001550  EC0F  F01F         	call	___lwdiv	;wreg free
 15139  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 15140  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 15141  00155C  0E00               	movlw	0
 15142  00155E  0100               	movlb	0	; () banked
 15143  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 15144  001562  0E0A               	movlw	10
 15145  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 15146  001566  EC29  F020         	call	___lwmod	;wreg free
 15147  00156A  0100               	movlb	0	; () banked
 15148  00156C  5187               	movf	?___lwmod& (0+255),w,b
 15149  00156E  0F30               	addlw	48
 15150  001570  0100               	movlb	0	; () banked
 15151  001572  6FA8               	movwf	printf@c& (0+255),b
 15152                           
 15153                           ; BSR set to: 0
 15154                           ;doprnt.c: 1523: }
 15155                           ;doprnt.c: 1524: (putch(c) );
 15156  001574  0100               	movlb	0	; () banked
 15157  001576  51A8               	movf	printf@c& (0+255),w,b
 15158  001578  EC0C  F025         	call	_putch
 15159  00157C                     l5744:
 15160  00157C  0100               	movlb	0	; () banked
 15161  00157E  079E               	decf	printf@prec& (0+255),f,b
 15162  001580  0100               	movlb	0	; () banked
 15163  001582  299E               	incf	printf@prec& (0+255),w,b
 15164  001584  A4D8               	btfss	status,2,c
 15165  001586  D7CE               	goto	l5740
 15166  001588                     l5746:
 15167  001588  C08E  FFF6         	movff	printf@f,tblptrl
 15168  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 15169  001590  0100               	movlb	0	; () banked
 15170  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 15171  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15172  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15173  001596  6AF8               	clrf	tblptru,c
 15174  001598                     	endif
 15175  001598                     	if	0	;tblptru may be non-zero
 15176  001598                     	endif
 15177  001598  0008               	tblrd		*
 15178  00159A  CFF5 F0A8          	movff	tablat,printf@c
 15179  00159E  0100               	movlb	0	; () banked
 15180  0015A0  51A8               	movf	printf@c& (0+255),w,b
 15181  0015A2  B4D8               	btfsc	status,2,c
 15182  0015A4  0012               	return	
 15183  0015A6  D5EB               	goto	l5616
 15184  0015A8                     __end_of_printf:
 15185                           	opt stack 0
 15186                           tblptru	equ	0xFF8
 15187                           tblptrh	equ	0xFF7
 15188                           tblptrl	equ	0xFF6
 15189                           tablat	equ	0xFF5
 15190                           prodh	equ	0xFF4
 15191                           prodl	equ	0xFF3
 15192                           intcon	equ	0xFF2
 15193                           intcon2	equ	0xFF1
 15194                           intcon3	equ	0xFF0
 15195                           indf0	equ	0xFEF
 15196                           postinc0	equ	0xFEE
 15197                           fsr0h	equ	0xFEA
 15198                           fsr0l	equ	0xFE9
 15199                           wreg	equ	0xFE8
 15200                           postdec1	equ	0xFE5
 15201                           fsr1l	equ	0xFE1
 15202                           indf2	equ	0xFDF
 15203                           postinc2	equ	0xFDE
 15204                           postdec2	equ	0xFDD
 15205                           fsr2h	equ	0xFDA
 15206                           fsr2l	equ	0xFD9
 15207                           status	equ	0xFD8
 15208                           
 15209 ;; *************** function _putch *****************
 15210 ;; Defined at:
 15211 ;;		line 20 in file "lcd.c"
 15212 ;; Parameters:    Size  Location     Type
 15213 ;;  data            1    wreg     unsigned char 
 15214 ;; Auto vars:     Size  Location     Type
 15215 ;;  data            1    2[BANK0 ] unsigned char 
 15216 ;; Return value:  Size  Location     Type
 15217 ;;                  1    wreg      void 
 15218 ;; Registers used:
 15219 ;;		wreg, status,2, status,0, cstack
 15220 ;; Tracked objects:
 15221 ;;		On entry : 0/0
 15222 ;;		On exit  : 0/0
 15223 ;;		Unchanged: 0/0
 15224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15228 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15229 ;;Total ram usage:        1 bytes
 15230 ;; Hardware stack levels used:    1
 15231 ;; Hardware stack levels required when called:    8
 15232 ;; This function calls:
 15233 ;;		_lcdNibble
 15234 ;; This function is called by:
 15235 ;;		_printf
 15236 ;; This function uses a non-reentrant model
 15237 ;;
 15238                           
 15239                           	psect	text52
 15240  004A18                     __ptext52:
 15241                           	opt stack 0
 15242  004A18                     _putch:
 15243                           	opt stack 18
 15244                           
 15245                           ;incstack = 0
 15246                           ;putch@data stored from wreg
 15247  004A18  0100               	movlb	0	; () banked
 15248  004A1A  6F82               	movwf	putch@data& (0+255),b
 15249                           
 15250                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 15251  004A1C  848C               	bsf	3980,2,c	;volatile
 15252                           
 15253                           ;lcd.c: 22: lcdNibble(data);
 15254  004A1E  0100               	movlb	0	; () banked
 15255  004A20  5182               	movf	putch@data& (0+255),w,b
 15256  004A22  ECF5  F01F         	call	_lcdNibble
 15257  004A26  0012               	return		;funcret
 15258  004A28                     __end_of_putch:
 15259                           	opt stack 0
 15260                           tblptru	equ	0xFF8
 15261                           tblptrh	equ	0xFF7
 15262                           tblptrl	equ	0xFF6
 15263                           tablat	equ	0xFF5
 15264                           prodh	equ	0xFF4
 15265                           prodl	equ	0xFF3
 15266                           intcon	equ	0xFF2
 15267                           intcon2	equ	0xFF1
 15268                           intcon3	equ	0xFF0
 15269                           indf0	equ	0xFEF
 15270                           postinc0	equ	0xFEE
 15271                           fsr0h	equ	0xFEA
 15272                           fsr0l	equ	0xFE9
 15273                           wreg	equ	0xFE8
 15274                           postdec1	equ	0xFE5
 15275                           fsr1l	equ	0xFE1
 15276                           indf2	equ	0xFDF
 15277                           postinc2	equ	0xFDE
 15278                           postdec2	equ	0xFDD
 15279                           fsr2h	equ	0xFDA
 15280                           fsr2l	equ	0xFD9
 15281                           status	equ	0xFD8
 15282                           
 15283 ;; *************** function _isdigit *****************
 15284 ;; Defined at:
 15285 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15286 ;; Parameters:    Size  Location     Type
 15287 ;;  c               1    wreg     unsigned char 
 15288 ;; Auto vars:     Size  Location     Type
 15289 ;;  c               1    2[BANK0 ] unsigned char 
 15290 ;; Return value:  Size  Location     Type
 15291 ;;		None               void
 15292 ;; Registers used:
 15293 ;;		wreg, status,2, status,0
 15294 ;; Tracked objects:
 15295 ;;		On entry : 0/0
 15296 ;;		On exit  : 0/0
 15297 ;;		Unchanged: 0/0
 15298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15302 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15303 ;;Total ram usage:        3 bytes
 15304 ;; Hardware stack levels used:    1
 15305 ;; Hardware stack levels required when called:    7
 15306 ;; This function calls:
 15307 ;;		Nothing
 15308 ;; This function is called by:
 15309 ;;		_printf
 15310 ;; This function uses a non-reentrant model
 15311 ;;
 15312                           
 15313                           	psect	text53
 15314  004862                     __ptext53:
 15315                           	opt stack 0
 15316  004862                     _isdigit:
 15317                           	opt stack 19
 15318                           
 15319                           ;incstack = 0
 15320                           ;isdigit@c stored from wreg
 15321  004862  0100               	movlb	0	; () banked
 15322  004864  6F82               	movwf	isdigit@c& (0+255),b
 15323  004866  0E00               	movlw	0
 15324  004868  0100               	movlb	0	; () banked
 15325  00486A  6F81               	movwf	_isdigit$1959& (0+255),b
 15326                           
 15327                           ; BSR set to: 0
 15328  00486C  0E3A               	movlw	58
 15329  00486E  0100               	movlb	0	; () banked
 15330  004870  6182               	cpfslt	isdigit@c& (0+255),b
 15331  004872  D007               	goto	l5464
 15332                           
 15333                           ; BSR set to: 0
 15334  004874  0E2F               	movlw	47
 15335  004876  0100               	movlb	0	; () banked
 15336  004878  6582               	cpfsgt	isdigit@c& (0+255),b
 15337  00487A  D003               	goto	l5464
 15338                           
 15339                           ; BSR set to: 0
 15340  00487C  0E01               	movlw	1
 15341  00487E  0100               	movlb	0	; () banked
 15342  004880  6F81               	movwf	_isdigit$1959& (0+255),b
 15343  004882                     l5464:
 15344                           
 15345                           ; BSR set to: 0
 15346  004882  C081  F080         	movff	_isdigit$1959,??_isdigit
 15347  004886  0100               	movlb	0	; () banked
 15348  004888  3180               	rrcf	??_isdigit& (0+255),w,b
 15349  00488A  0012               	return	
 15350  00488C                     __end_of_isdigit:
 15351                           	opt stack 0
 15352                           tblptru	equ	0xFF8
 15353                           tblptrh	equ	0xFF7
 15354                           tblptrl	equ	0xFF6
 15355                           tablat	equ	0xFF5
 15356                           prodh	equ	0xFF4
 15357                           prodl	equ	0xFF3
 15358                           intcon	equ	0xFF2
 15359                           intcon2	equ	0xFF1
 15360                           intcon3	equ	0xFF0
 15361                           indf0	equ	0xFEF
 15362                           postinc0	equ	0xFEE
 15363                           fsr0h	equ	0xFEA
 15364                           fsr0l	equ	0xFE9
 15365                           wreg	equ	0xFE8
 15366                           postdec1	equ	0xFE5
 15367                           fsr1l	equ	0xFE1
 15368                           indf2	equ	0xFDF
 15369                           postinc2	equ	0xFDE
 15370                           postdec2	equ	0xFDD
 15371                           fsr2h	equ	0xFDA
 15372                           fsr2l	equ	0xFD9
 15373                           status	equ	0xFD8
 15374                           
 15375 ;; *************** function ___wmul *****************
 15376 ;; Defined at:
 15377 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15378 ;; Parameters:    Size  Location     Type
 15379 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15380 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15381 ;; Auto vars:     Size  Location     Type
 15382 ;;  product         2    4[BANK0 ] unsigned int 
 15383 ;; Return value:  Size  Location     Type
 15384 ;;                  2    0[BANK0 ] unsigned int 
 15385 ;; Registers used:
 15386 ;;		wreg, status,2, status,0, prodl, prodh
 15387 ;; Tracked objects:
 15388 ;;		On entry : 0/0
 15389 ;;		On exit  : 0/0
 15390 ;;		Unchanged: 0/0
 15391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15392 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15393 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15395 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15396 ;;Total ram usage:        6 bytes
 15397 ;; Hardware stack levels used:    1
 15398 ;; Hardware stack levels required when called:    7
 15399 ;; This function calls:
 15400 ;;		Nothing
 15401 ;; This function is called by:
 15402 ;;		_printf
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           	psect	text54
 15407  004536                     __ptext54:
 15408                           	opt stack 0
 15409  004536                     ___wmul:
 15410                           	opt stack 19
 15411                           
 15412                           ; BSR set to: 0
 15413                           ;incstack = 0
 15414  004536  0100               	movlb	0	; () banked
 15415  004538  5180               	movf	___wmul@multiplier& (0+255),w,b
 15416  00453A  0100               	movlb	0	; () banked
 15417  00453C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15418  00453E  CFF3 F084          	movff	prodl,___wmul@product
 15419  004542  CFF4 F085          	movff	prodh,___wmul@product+1
 15420  004546  0100               	movlb	0	; () banked
 15421  004548  5180               	movf	___wmul@multiplier& (0+255),w,b
 15422  00454A  0100               	movlb	0	; () banked
 15423  00454C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15424  00454E  50F3               	movf	prodl,w,c
 15425  004550  0100               	movlb	0	; () banked
 15426  004552  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15427  004554  0100               	movlb	0	; () banked
 15428  004556  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15429  004558  0100               	movlb	0	; () banked
 15430  00455A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15431  00455C  50F3               	movf	prodl,w,c
 15432  00455E  0100               	movlb	0	; () banked
 15433  004560  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15434                           
 15435                           ; BSR set to: 0
 15436  004562  C084  F080         	movff	___wmul@product,?___wmul
 15437  004566  C085  F081         	movff	___wmul@product+1,?___wmul+1
 15438  00456A  0012               	return	
 15439  00456C                     __end_of___wmul:
 15440                           	opt stack 0
 15441                           tblptru	equ	0xFF8
 15442                           tblptrh	equ	0xFF7
 15443                           tblptrl	equ	0xFF6
 15444                           tablat	equ	0xFF5
 15445                           prodh	equ	0xFF4
 15446                           prodl	equ	0xFF3
 15447                           intcon	equ	0xFF2
 15448                           intcon2	equ	0xFF1
 15449                           intcon3	equ	0xFF0
 15450                           indf0	equ	0xFEF
 15451                           postinc0	equ	0xFEE
 15452                           fsr0h	equ	0xFEA
 15453                           fsr0l	equ	0xFE9
 15454                           wreg	equ	0xFE8
 15455                           postdec1	equ	0xFE5
 15456                           fsr1l	equ	0xFE1
 15457                           indf2	equ	0xFDF
 15458                           postinc2	equ	0xFDE
 15459                           postdec2	equ	0xFDD
 15460                           fsr2h	equ	0xFDA
 15461                           fsr2l	equ	0xFD9
 15462                           status	equ	0xFD8
 15463                           
 15464 ;; *************** function ___lwmod *****************
 15465 ;; Defined at:
 15466 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 15467 ;; Parameters:    Size  Location     Type
 15468 ;;  dividend        2    7[BANK0 ] unsigned int 
 15469 ;;  divisor         2    9[BANK0 ] unsigned int 
 15470 ;; Auto vars:     Size  Location     Type
 15471 ;;  counter         1   11[BANK0 ] unsigned char 
 15472 ;; Return value:  Size  Location     Type
 15473 ;;                  2    7[BANK0 ] unsigned int 
 15474 ;; Registers used:
 15475 ;;		wreg, status,2, status,0
 15476 ;; Tracked objects:
 15477 ;;		On entry : 0/0
 15478 ;;		On exit  : 0/0
 15479 ;;		Unchanged: 0/0
 15480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15481 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15484 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15485 ;;Total ram usage:        5 bytes
 15486 ;; Hardware stack levels used:    1
 15487 ;; Hardware stack levels required when called:    7
 15488 ;; This function calls:
 15489 ;;		Nothing
 15490 ;; This function is called by:
 15491 ;;		_printf
 15492 ;; This function uses a non-reentrant model
 15493 ;;
 15494                           
 15495                           	psect	text55
 15496  004052                     __ptext55:
 15497                           	opt stack 0
 15498  004052                     ___lwmod:
 15499                           	opt stack 19
 15500                           
 15501                           ; BSR set to: 0
 15502                           ;incstack = 0
 15503  004052  0100               	movlb	0	; () banked
 15504  004054  5189               	movf	___lwmod@divisor& (0+255),w,b
 15505  004056  0100               	movlb	0	; () banked
 15506  004058  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15507  00405A  B4D8               	btfsc	status,2,c
 15508  00405C  D026               	goto	l1771
 15509                           
 15510                           ; BSR set to: 0
 15511  00405E  0E01               	movlw	1
 15512  004060  0100               	movlb	0	; () banked
 15513  004062  6F8B               	movwf	___lwmod@counter& (0+255),b
 15514  004064  D006               	goto	l5502
 15515  004066                     l5500:
 15516                           
 15517                           ; BSR set to: 0
 15518  004066  0100               	movlb	0	; () banked
 15519  004068  90D8               	bcf	status,0,c
 15520  00406A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 15521  00406C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15522  00406E  0100               	movlb	0	; () banked
 15523  004070  2B8B               	incf	___lwmod@counter& (0+255),f,b
 15524  004072                     l5502:
 15525                           
 15526                           ; BSR set to: 0
 15527  004072  0100               	movlb	0	; () banked
 15528  004074  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15529  004076  D7F7               	goto	l5500
 15530  004078                     l5504:
 15531                           
 15532                           ; BSR set to: 0
 15533  004078  0100               	movlb	0	; () banked
 15534  00407A  5189               	movf	___lwmod@divisor& (0+255),w,b
 15535  00407C  0100               	movlb	0	; () banked
 15536  00407E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 15537  004080  0100               	movlb	0	; () banked
 15538  004082  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15539  004084  0100               	movlb	0	; () banked
 15540  004086  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15541  004088  A0D8               	btfss	status,0,c
 15542  00408A  D008               	goto	l5508
 15543                           
 15544                           ; BSR set to: 0
 15545  00408C  0100               	movlb	0	; () banked
 15546  00408E  5189               	movf	___lwmod@divisor& (0+255),w,b
 15547  004090  0100               	movlb	0	; () banked
 15548  004092  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 15549  004094  0100               	movlb	0	; () banked
 15550  004096  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15551  004098  0100               	movlb	0	; () banked
 15552  00409A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15553  00409C                     l5508:
 15554                           
 15555                           ; BSR set to: 0
 15556  00409C  0100               	movlb	0	; () banked
 15557  00409E  90D8               	bcf	status,0,c
 15558  0040A0  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15559  0040A2  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 15560                           
 15561                           ; BSR set to: 0
 15562  0040A4  0100               	movlb	0	; () banked
 15563  0040A6  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 15564  0040A8  D7E7               	goto	l5504
 15565  0040AA                     l1771:
 15566                           
 15567                           ; BSR set to: 0
 15568  0040AA  C087  F087         	movff	___lwmod@dividend,?___lwmod
 15569  0040AE  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 15570                           
 15571                           ; BSR set to: 0
 15572  0040B2  0012               	return		;funcret
 15573  0040B4                     __end_of___lwmod:
 15574                           	opt stack 0
 15575                           tblptru	equ	0xFF8
 15576                           tblptrh	equ	0xFF7
 15577                           tblptrl	equ	0xFF6
 15578                           tablat	equ	0xFF5
 15579                           prodh	equ	0xFF4
 15580                           prodl	equ	0xFF3
 15581                           intcon	equ	0xFF2
 15582                           intcon2	equ	0xFF1
 15583                           intcon3	equ	0xFF0
 15584                           indf0	equ	0xFEF
 15585                           postinc0	equ	0xFEE
 15586                           fsr0h	equ	0xFEA
 15587                           fsr0l	equ	0xFE9
 15588                           wreg	equ	0xFE8
 15589                           postdec1	equ	0xFE5
 15590                           fsr1l	equ	0xFE1
 15591                           indf2	equ	0xFDF
 15592                           postinc2	equ	0xFDE
 15593                           postdec2	equ	0xFDD
 15594                           fsr2h	equ	0xFDA
 15595                           fsr2l	equ	0xFD9
 15596                           status	equ	0xFD8
 15597                           
 15598 ;; *************** function ___lwdiv *****************
 15599 ;; Defined at:
 15600 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15601 ;; Parameters:    Size  Location     Type
 15602 ;;  dividend        2    0[BANK0 ] unsigned int 
 15603 ;;  divisor         2    2[BANK0 ] unsigned int 
 15604 ;; Auto vars:     Size  Location     Type
 15605 ;;  quotient        2    4[BANK0 ] unsigned int 
 15606 ;;  counter         1    6[BANK0 ] unsigned char 
 15607 ;; Return value:  Size  Location     Type
 15608 ;;                  2    0[BANK0 ] unsigned int 
 15609 ;; Registers used:
 15610 ;;		wreg, status,2, status,0
 15611 ;; Tracked objects:
 15612 ;;		On entry : 0/0
 15613 ;;		On exit  : 0/0
 15614 ;;		Unchanged: 0/0
 15615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15616 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15617 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15619 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15620 ;;Total ram usage:        7 bytes
 15621 ;; Hardware stack levels used:    1
 15622 ;; Hardware stack levels required when called:    7
 15623 ;; This function calls:
 15624 ;;		Nothing
 15625 ;; This function is called by:
 15626 ;;		_printf
 15627 ;; This function uses a non-reentrant model
 15628 ;;
 15629                           
 15630                           	psect	text56
 15631  003E1E                     __ptext56:
 15632                           	opt stack 0
 15633  003E1E                     ___lwdiv:
 15634                           	opt stack 19
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;incstack = 0
 15638  003E1E  0E00               	movlw	0
 15639  003E20  0100               	movlb	0	; () banked
 15640  003E22  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 15641  003E24  0E00               	movlw	0
 15642  003E26  6F84               	movwf	___lwdiv@quotient& (0+255),b
 15643                           
 15644                           ; BSR set to: 0
 15645  003E28  0100               	movlb	0	; () banked
 15646  003E2A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15647  003E2C  0100               	movlb	0	; () banked
 15648  003E2E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 15649  003E30  B4D8               	btfsc	status,2,c
 15650  003E32  D02C               	goto	l1761
 15651                           
 15652                           ; BSR set to: 0
 15653  003E34  0E01               	movlw	1
 15654  003E36  0100               	movlb	0	; () banked
 15655  003E38  6F86               	movwf	___lwdiv@counter& (0+255),b
 15656  003E3A  D006               	goto	l5482
 15657  003E3C                     l5480:
 15658                           
 15659                           ; BSR set to: 0
 15660  003E3C  0100               	movlb	0	; () banked
 15661  003E3E  90D8               	bcf	status,0,c
 15662  003E40  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 15663  003E42  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 15664  003E44  0100               	movlb	0	; () banked
 15665  003E46  2B86               	incf	___lwdiv@counter& (0+255),f,b
 15666  003E48                     l5482:
 15667                           
 15668                           ; BSR set to: 0
 15669  003E48  0100               	movlb	0	; () banked
 15670  003E4A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 15671  003E4C  D7F7               	goto	l5480
 15672  003E4E                     l5484:
 15673                           
 15674                           ; BSR set to: 0
 15675  003E4E  0100               	movlb	0	; () banked
 15676  003E50  90D8               	bcf	status,0,c
 15677  003E52  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 15678  003E54  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 15679                           
 15680                           ; BSR set to: 0
 15681  003E56  0100               	movlb	0	; () banked
 15682  003E58  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15683  003E5A  0100               	movlb	0	; () banked
 15684  003E5C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 15685  003E5E  0100               	movlb	0	; () banked
 15686  003E60  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15687  003E62  0100               	movlb	0	; () banked
 15688  003E64  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 15689  003E66  A0D8               	btfss	status,0,c
 15690  003E68  D00A               	goto	l5492
 15691                           
 15692                           ; BSR set to: 0
 15693  003E6A  0100               	movlb	0	; () banked
 15694  003E6C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15695  003E6E  0100               	movlb	0	; () banked
 15696  003E70  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 15697  003E72  0100               	movlb	0	; () banked
 15698  003E74  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15699  003E76  0100               	movlb	0	; () banked
 15700  003E78  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 15701                           
 15702                           ; BSR set to: 0
 15703  003E7A  0100               	movlb	0	; () banked
 15704  003E7C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 15705  003E7E                     l5492:
 15706                           
 15707                           ; BSR set to: 0
 15708  003E7E  0100               	movlb	0	; () banked
 15709  003E80  90D8               	bcf	status,0,c
 15710  003E82  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 15711  003E84  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 15712                           
 15713                           ; BSR set to: 0
 15714  003E86  0100               	movlb	0	; () banked
 15715  003E88  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 15716  003E8A  D7E1               	goto	l5484
 15717  003E8C                     l1761:
 15718                           
 15719                           ; BSR set to: 0
 15720  003E8C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 15721  003E90  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15722                           
 15723                           ; BSR set to: 0
 15724  003E94  0012               	return		;funcret
 15725  003E96                     __end_of___lwdiv:
 15726                           	opt stack 0
 15727                           tblptru	equ	0xFF8
 15728                           tblptrh	equ	0xFF7
 15729                           tblptrl	equ	0xFF6
 15730                           tablat	equ	0xFF5
 15731                           prodh	equ	0xFF4
 15732                           prodl	equ	0xFF3
 15733                           intcon	equ	0xFF2
 15734                           intcon2	equ	0xFF1
 15735                           intcon3	equ	0xFF0
 15736                           indf0	equ	0xFEF
 15737                           postinc0	equ	0xFEE
 15738                           fsr0h	equ	0xFEA
 15739                           fsr0l	equ	0xFE9
 15740                           wreg	equ	0xFE8
 15741                           postdec1	equ	0xFE5
 15742                           fsr1l	equ	0xFE1
 15743                           indf2	equ	0xFDF
 15744                           postinc2	equ	0xFDE
 15745                           postdec2	equ	0xFDD
 15746                           fsr2h	equ	0xFDA
 15747                           fsr2l	equ	0xFD9
 15748                           status	equ	0xFD8
 15749                           
 15750 ;; *************** function _lcdInst *****************
 15751 ;; Defined at:
 15752 ;;		line 15 in file "lcd.c"
 15753 ;; Parameters:    Size  Location     Type
 15754 ;;  data            1    wreg     unsigned char 
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;  data            1    2[BANK0 ] unsigned char 
 15757 ;; Return value:  Size  Location     Type
 15758 ;;                  1    wreg      void 
 15759 ;; Registers used:
 15760 ;;		wreg, status,2, status,0, cstack
 15761 ;; Tracked objects:
 15762 ;;		On entry : 0/0
 15763 ;;		On exit  : 0/0
 15764 ;;		Unchanged: 0/0
 15765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15769 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15770 ;;Total ram usage:        1 bytes
 15771 ;; Hardware stack levels used:    1
 15772 ;; Hardware stack levels required when called:    8
 15773 ;; This function calls:
 15774 ;;		_lcdNibble
 15775 ;; This function is called by:
 15776 ;;		_UI
 15777 ;;		_change_state_to_menu_start
 15778 ;;		_change_state_to_menu_12
 15779 ;;		_change_state_to_menu_22
 15780 ;;		_initLCD
 15781 ;;		_printRTC
 15782 ;;		_Loading
 15783 ;;		_EEPROM_write
 15784 ;;		_Test
 15785 ;;		_algorithmTest
 15786 ;;		_sensorTest
 15787 ;;		_actuatorTest
 15788 ;;		_BothServos
 15789 ;;		_PortTestA5
 15790 ;;		_PusherTest
 15791 ;;		_SpeedTest
 15792 ;;		_BlockerTest
 15793 ;;		_ToggleTestA5
 15794 ;; This function uses a non-reentrant model
 15795 ;;
 15796                           
 15797                           	psect	text57
 15798  004A28                     __ptext57:
 15799                           	opt stack 0
 15800  004A28                     _lcdInst:
 15801                           	opt stack 20
 15802                           
 15803                           ; BSR set to: 0
 15804                           ;incstack = 0
 15805                           ;lcdInst@data stored from wreg
 15806  004A28  0100               	movlb	0	; () banked
 15807  004A2A  6F82               	movwf	lcdInst@data& (0+255),b
 15808                           
 15809                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15810  004A2C  948C               	bcf	3980,2,c	;volatile
 15811                           
 15812                           ;lcd.c: 17: lcdNibble(data);
 15813  004A2E  0100               	movlb	0	; () banked
 15814  004A30  5182               	movf	lcdInst@data& (0+255),w,b
 15815  004A32  ECF5  F01F         	call	_lcdNibble
 15816  004A36  0012               	return		;funcret
 15817  004A38                     __end_of_lcdInst:
 15818                           	opt stack 0
 15819                           tblptru	equ	0xFF8
 15820                           tblptrh	equ	0xFF7
 15821                           tblptrl	equ	0xFF6
 15822                           tablat	equ	0xFF5
 15823                           prodh	equ	0xFF4
 15824                           prodl	equ	0xFF3
 15825                           intcon	equ	0xFF2
 15826                           intcon2	equ	0xFF1
 15827                           intcon3	equ	0xFF0
 15828                           indf0	equ	0xFEF
 15829                           postinc0	equ	0xFEE
 15830                           fsr0h	equ	0xFEA
 15831                           fsr0l	equ	0xFE9
 15832                           wreg	equ	0xFE8
 15833                           postdec1	equ	0xFE5
 15834                           fsr1l	equ	0xFE1
 15835                           indf2	equ	0xFDF
 15836                           postinc2	equ	0xFDE
 15837                           postdec2	equ	0xFDD
 15838                           fsr2h	equ	0xFDA
 15839                           fsr2l	equ	0xFD9
 15840                           status	equ	0xFD8
 15841                           
 15842 ;; *************** function _lcdNibble *****************
 15843 ;; Defined at:
 15844 ;;		line 25 in file "lcd.c"
 15845 ;; Parameters:    Size  Location     Type
 15846 ;;  data            1    wreg     unsigned char 
 15847 ;; Auto vars:     Size  Location     Type
 15848 ;;  data            1    1[BANK0 ] unsigned char 
 15849 ;;  temp            1    0[BANK0 ] unsigned char 
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  1    wreg      void 
 15852 ;; Registers used:
 15853 ;;		wreg, status,2, status,0
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15863 ;;Total ram usage:        2 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; Hardware stack levels required when called:    7
 15866 ;; This function calls:
 15867 ;;		Nothing
 15868 ;; This function is called by:
 15869 ;;		_lcdInst
 15870 ;;		_putch
 15871 ;; This function uses a non-reentrant model
 15872 ;;
 15873                           
 15874                           	psect	text58
 15875  003FEA                     __ptext58:
 15876                           	opt stack 0
 15877  003FEA                     _lcdNibble:
 15878                           	opt stack 20
 15879                           
 15880                           ;incstack = 0
 15881                           ;lcdNibble@data stored from wreg
 15882  003FEA  0100               	movlb	0	; () banked
 15883  003FEC  6F81               	movwf	lcdNibble@data& (0+255),b
 15884                           
 15885                           ;lcd.c: 27: char temp = data & 0xF0;
 15886  003FEE  0100               	movlb	0	; () banked
 15887  003FF0  5181               	movf	lcdNibble@data& (0+255),w,b
 15888  003FF2  0BF0               	andlw	240
 15889  003FF4  0100               	movlb	0	; () banked
 15890  003FF6  6F80               	movwf	lcdNibble@temp& (0+255),b
 15891                           
 15892                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15893  003FF8  508C               	movf	3980,w,c	;volatile
 15894  003FFA  0B0F               	andlw	15
 15895  003FFC  6E8C               	movwf	3980,c	;volatile
 15896                           
 15897                           ;lcd.c: 29: LATD = temp | LATD;
 15898  003FFE  0100               	movlb	0	; () banked
 15899  004000  5180               	movf	lcdNibble@temp& (0+255),w,b
 15900  004002  108C               	iorwf	3980,w,c	;volatile
 15901  004004  6E8C               	movwf	3980,c	;volatile
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15905  004006  868C               	bsf	3980,3,c	;volatile
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15909  004008  0E42               	movlw	66
 15910  00400A                     u8677:
 15911  00400A  2EE8               	decfsz	wreg,f,c
 15912  00400C  D7FE               	bra	u8677
 15913  00400E  D000               	nop2	
 15914                           
 15915                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15916  004010  968C               	bcf	3980,3,c	;volatile
 15917                           
 15918                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15919  004012  0E42               	movlw	66
 15920  004014                     u8687:
 15921  004014  2EE8               	decfsz	wreg,f,c
 15922  004016  D7FE               	bra	u8687
 15923  004018  D000               	nop2	
 15924                           
 15925                           ;lcd.c: 36: data = data << 4;
 15926  00401A  0100               	movlb	0	; () banked
 15927  00401C  3981               	swapf	lcdNibble@data& (0+255),w,b
 15928  00401E  0BF0               	andlw	240
 15929  004020  0100               	movlb	0	; () banked
 15930  004022  6F81               	movwf	lcdNibble@data& (0+255),b
 15931                           
 15932                           ;lcd.c: 38: temp = data & 0xF0;
 15933  004024  0100               	movlb	0	; () banked
 15934  004026  5181               	movf	lcdNibble@data& (0+255),w,b
 15935  004028  0BF0               	andlw	240
 15936  00402A  0100               	movlb	0	; () banked
 15937  00402C  6F80               	movwf	lcdNibble@temp& (0+255),b
 15938                           
 15939                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15940  00402E  508C               	movf	3980,w,c	;volatile
 15941  004030  0B0F               	andlw	15
 15942  004032  6E8C               	movwf	3980,c	;volatile
 15943                           
 15944                           ;lcd.c: 40: LATD = temp | LATD;
 15945  004034  0100               	movlb	0	; () banked
 15946  004036  5180               	movf	lcdNibble@temp& (0+255),w,b
 15947  004038  108C               	iorwf	3980,w,c	;volatile
 15948  00403A  6E8C               	movwf	3980,c	;volatile
 15949                           
 15950                           ; BSR set to: 0
 15951                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15952  00403C  868C               	bsf	3980,3,c	;volatile
 15953                           
 15954                           ; BSR set to: 0
 15955                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15956  00403E  0E42               	movlw	66
 15957  004040                     u8697:
 15958  004040  2EE8               	decfsz	wreg,f,c
 15959  004042  D7FE               	bra	u8697
 15960  004044  D000               	nop2	
 15961                           
 15962                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15963  004046  968C               	bcf	3980,3,c	;volatile
 15964                           
 15965                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15966  004048  0E42               	movlw	66
 15967  00404A                     u8707:
 15968  00404A  2EE8               	decfsz	wreg,f,c
 15969  00404C  D7FE               	bra	u8707
 15970  00404E  D000               	nop2	
 15971  004050  0012               	return		;funcret
 15972  004052                     __end_of_lcdNibble:
 15973                           	opt stack 0
 15974                           tblptru	equ	0xFF8
 15975                           tblptrh	equ	0xFF7
 15976                           tblptrl	equ	0xFF6
 15977                           tablat	equ	0xFF5
 15978                           prodh	equ	0xFF4
 15979                           prodl	equ	0xFF3
 15980                           intcon	equ	0xFF2
 15981                           intcon2	equ	0xFF1
 15982                           intcon3	equ	0xFF0
 15983                           indf0	equ	0xFEF
 15984                           postinc0	equ	0xFEE
 15985                           fsr0h	equ	0xFEA
 15986                           fsr0l	equ	0xFE9
 15987                           wreg	equ	0xFE8
 15988                           postdec1	equ	0xFE5
 15989                           fsr1l	equ	0xFE1
 15990                           indf2	equ	0xFDF
 15991                           postinc2	equ	0xFDE
 15992                           postdec2	equ	0xFDD
 15993                           fsr2h	equ	0xFDA
 15994                           fsr2l	equ	0xFD9
 15995                           status	equ	0xFD8
 15996                           
 15997 ;; *************** function _handler *****************
 15998 ;; Defined at:
 15999 ;;		line 16 in file "interruptHandler.c"
 16000 ;; Parameters:    Size  Location     Type
 16001 ;;		None
 16002 ;; Auto vars:     Size  Location     Type
 16003 ;;		None
 16004 ;; Return value:  Size  Location     Type
 16005 ;;                  1    wreg      void 
 16006 ;; Registers used:
 16007 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16008 ;; Tracked objects:
 16009 ;;		On entry : 0/0
 16010 ;;		On exit  : 0/0
 16011 ;;		Unchanged: 0/0
 16012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16015 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16016 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16017 ;;Total ram usage:       16 bytes
 16018 ;; Hardware stack levels used:    1
 16019 ;; Hardware stack levels required when called:    6
 16020 ;; This function calls:
 16021 ;;		_printSortTimer
 16022 ;;		_updateMenu
 16023 ;; This function is called by:
 16024 ;;		Interrupt level 2
 16025 ;; This function uses a non-reentrant model
 16026 ;;
 16027                           
 16028                           	psect	intcode
 16029  000008                     __pintcode:
 16030                           	opt stack 0
 16031  000008                     _handler:
 16032                           	opt stack 18
 16033                           
 16034                           ;incstack = 0
 16035  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16036  00000A  ED9A  F017         	call	int_func,f	;refresh shadow registers
 16037                           tblptru	equ	0xFF8
 16038                           tblptrh	equ	0xFF7
 16039                           tblptrl	equ	0xFF6
 16040                           tablat	equ	0xFF5
 16041                           prodh	equ	0xFF4
 16042                           prodl	equ	0xFF3
 16043                           intcon	equ	0xFF2
 16044                           intcon2	equ	0xFF1
 16045                           intcon3	equ	0xFF0
 16046                           indf0	equ	0xFEF
 16047                           postinc0	equ	0xFEE
 16048                           fsr0h	equ	0xFEA
 16049                           fsr0l	equ	0xFE9
 16050                           wreg	equ	0xFE8
 16051                           postdec1	equ	0xFE5
 16052                           fsr1l	equ	0xFE1
 16053                           indf2	equ	0xFDF
 16054                           postinc2	equ	0xFDE
 16055                           postdec2	equ	0xFDD
 16056                           fsr2h	equ	0xFDA
 16057                           fsr2l	equ	0xFD9
 16058                           status	equ	0xFD8
 16059                           
 16060                           	psect	intcode_body
 16061  002F34                     __pintcode_body:
 16062                           	opt stack 18
 16063  002F34                     int_func:
 16064                           	opt stack 18
 16065  002F34  0006               	pop		; remove dummy address from shadow register refresh
 16066  002F36  CFFA F04D          	movff	pclath,??_handler+2
 16067  002F3A  CFFB F04E          	movff	pclatu,??_handler+3
 16068  002F3E  CFE9 F04F          	movff	fsr0l,??_handler+4
 16069  002F42  CFEA F050          	movff	fsr0h,??_handler+5
 16070  002F46  CFE1 F051          	movff	fsr1l,??_handler+6
 16071  002F4A  CFE2 F052          	movff	fsr1h,??_handler+7
 16072  002F4E  CFD9 F053          	movff	fsr2l,??_handler+8
 16073  002F52  CFDA F054          	movff	fsr2h,??_handler+9
 16074  002F56  CFF3 F055          	movff	prodl,??_handler+10
 16075  002F5A  CFF4 F056          	movff	prodh,??_handler+11
 16076  002F5E  CFF6 F057          	movff	tblptrl,??_handler+12
 16077  002F62  CFF7 F058          	movff	tblptrh,??_handler+13
 16078  002F66  CFF8 F059          	movff	tblptru,??_handler+14
 16079  002F6A  CFF5 F05A          	movff	tablat,??_handler+15
 16080                           
 16081                           ;interruptHandler.c: 18: if(INT1IF){
 16082  002F6E  A0F0               	btfss	intcon3,0,c	;volatile
 16083  002F70  D020               	goto	i2l8410
 16084                           
 16085                           ;interruptHandler.c: 19: INT1IF = 0;
 16086  002F72  90F0               	bcf	intcon3,0,c	;volatile
 16087                           
 16088                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 16089  002F74  0100               	movlb	0	; () banked
 16090  002F76  51FC               	movf	_machine_state& (0+255),w,b
 16091  002F78  A4D8               	btfss	status,2,c
 16092  002F7A  D01B               	goto	i2l8410
 16093                           
 16094                           ; BSR set to: 0
 16095                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 16096  002F7C  3881               	swapf	3969,w,c	;volatile
 16097  002F7E  0B0F               	andlw	15
 16098  002F80  0B0F               	andlw	15
 16099  002F82  6E4B               	movwf	??_handler& (0+255),c
 16100  002F84  6A4C               	clrf	(??_handler+1)& (0+255),c
 16101  002F86  0E01               	movlw	low _keys
 16102  002F88  244B               	addwf	??_handler,w,c
 16103  002F8A  6EF6               	movwf	tblptrl,c
 16104  002F8C  0EFB               	movlw	high _keys
 16105  002F8E  204C               	addwfc	??_handler+1,w,c
 16106  002F90  6EF7               	movwf	tblptrh,c
 16107  002F92                     	if	1	;There are 3 active tblptr bytes
 16108  002F92  6AF8               	clrf	tblptru,c
 16109  002F94  0E00               	movlw	low (__mediumconst shr (0+16))
 16110  002F96  22F8               	addwfc	tblptru,f,c
 16111  002F98                     	endif
 16112  002F98  0008               	tblrd		*
 16113  002F9A  CFF5 F07D          	movff	tablat,_input	;volatile
 16114                           
 16115                           ; BSR set to: 0
 16116                           ;interruptHandler.c: 23: if(input == '*'){
 16117  002F9E  0E2A               	movlw	42
 16118  002FA0  187D               	xorwf	_input,w,c	;volatile
 16119  002FA2  A4D8               	btfss	status,2,c
 16120  002FA4  D004               	goto	i2l8408
 16121                           
 16122                           ; BSR set to: 0
 16123                           ;interruptHandler.c: 24: machine_state = Testing_state;
 16124  002FA6  0E03               	movlw	3
 16125  002FA8  0100               	movlb	0	; () banked
 16126  002FAA  6FFC               	movwf	_machine_state& (0+255),b
 16127                           
 16128                           ;interruptHandler.c: 25: }
 16129  002FAC  D002               	goto	i2l8410
 16130  002FAE                     i2l8408:
 16131                           
 16132                           ; BSR set to: 0
 16133                           ;interruptHandler.c: 26: else{
 16134                           ;interruptHandler.c: 27: updateMenu();
 16135  002FAE  EC31  F011         	call	_updateMenu	;wreg free
 16136  002FB2                     i2l8410:
 16137                           
 16138                           ;interruptHandler.c: 28: }
 16139                           ;interruptHandler.c: 29: }
 16140                           ;interruptHandler.c: 30: }
 16141                           ;interruptHandler.c: 33: if(TMR0IF){
 16142  002FB2  A4F2               	btfss	intcon,2,c	;volatile
 16143  002FB4  D00C               	goto	i2l8424
 16144                           
 16145                           ;interruptHandler.c: 34: TMR0IF = 0;
 16146  002FB6  94F2               	bcf	intcon,2,c	;volatile
 16147                           
 16148                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 16149  002FB8  0100               	movlb	0	; () banked
 16150  002FBA  05FC               	decf	_machine_state& (0+255),w,b
 16151  002FBC  A4D8               	btfss	status,2,c
 16152  002FBE  D007               	goto	i2l8424
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;interruptHandler.c: 36: printSortTimer();
 16156  002FC0  ECAE  F015         	call	_printSortTimer	;wreg free
 16157                           
 16158                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 16159  002FC4  0E85               	movlw	133
 16160  002FC6  6ED7               	movwf	4055,c	;volatile
 16161                           
 16162                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 16163  002FC8  0EEE               	movlw	238
 16164  002FCA  6ED6               	movwf	4054,c	;volatile
 16165                           
 16166                           ;interruptHandler.c: 40: TMR0ON = 1;
 16167  002FCC  8ED5               	bsf	4053,7,c	;volatile
 16168  002FCE                     i2l8424:
 16169                           
 16170                           ;interruptHandler.c: 41: }
 16171                           ;interruptHandler.c: 42: }
 16172                           ;interruptHandler.c: 45: if(TMR1IF){
 16173  002FCE  A09E               	btfss	3998,0,c	;volatile
 16174  002FD0  D024               	goto	i2l8448
 16175                           
 16176                           ;interruptHandler.c: 46: TMR1IF = 0;
 16177  002FD2  909E               	bcf	3998,0,c	;volatile
 16178                           
 16179                           ;interruptHandler.c: 47: TMR1ON = 0;
 16180  002FD4  90CD               	bcf	4045,0,c	;volatile
 16181                           
 16182                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 16183  002FD6  0100               	movlb	0	; () banked
 16184  002FD8  05FC               	decf	_machine_state& (0+255),w,b
 16185  002FDA  A4D8               	btfss	status,2,c
 16186  002FDC  D01E               	goto	i2l8448
 16187                           
 16188                           ; BSR set to: 0
 16189                           ;interruptHandler.c: 49: if(was_low_1){
 16190  002FDE  5079               	movf	_was_low_1,w,c	;volatile
 16191  002FE0  107A               	iorwf	_was_low_1+1,w,c	;volatile
 16192  002FE2  B4D8               	btfsc	status,2,c
 16193  002FE4  D00A               	goto	i2l874
 16194                           
 16195                           ; BSR set to: 0
 16196                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 16197  002FE6  828B               	bsf	3979,1,c	;volatile
 16198                           
 16199                           ; BSR set to: 0
 16200                           ;interruptHandler.c: 51: was_low_1 = 0;
 16201  002FE8  0E00               	movlw	0
 16202  002FEA  6E7A               	movwf	_was_low_1+1,c	;volatile
 16203  002FEC  0E00               	movlw	0
 16204  002FEE  6E79               	movwf	_was_low_1,c	;volatile
 16205                           
 16206                           ; BSR set to: 0
 16207                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 16208  002FF0  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 16212  002FF4  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 16213                           
 16214                           ;interruptHandler.c: 54: }
 16215  002FF8  D00F               	goto	i2l8446
 16216  002FFA                     i2l874:
 16217                           
 16218                           ; BSR set to: 0
 16219                           ;interruptHandler.c: 55: else{
 16220                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 16221  002FFA  928B               	bcf	3979,1,c	;volatile
 16222                           
 16223                           ; BSR set to: 0
 16224                           ;interruptHandler.c: 57: was_low_1 = 1;
 16225  002FFC  0E00               	movlw	0
 16226  002FFE  6E7A               	movwf	_was_low_1+1,c	;volatile
 16227  003000  0E01               	movlw	1
 16228  003002  6E79               	movwf	_was_low_1,c	;volatile
 16229                           
 16230                           ; BSR set to: 0
 16231                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 16232  003004  0101               	movlb	1	; () banked
 16233  003006  511C               	movf	_servoTimes& (0+255),w,b
 16234  003008  0800               	sublw	0
 16235  00300A  0F20               	addlw	32
 16236  00300C  6ECF               	movwf	4047,c	;volatile
 16237                           
 16238                           ; BSR set to: 1
 16239                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 16240  00300E  0101               	movlb	1	; () banked
 16241  003010  511E               	movf	(_servoTimes+2)& (0+255),w,b
 16242  003012  0800               	sublw	0
 16243  003014  0F20               	addlw	32
 16244  003016  6ECE               	movwf	4046,c	;volatile
 16245  003018                     i2l8446:
 16246                           
 16247                           ;interruptHandler.c: 60: }
 16248                           ;interruptHandler.c: 61: TMR1ON = 1;
 16249  003018  80CD               	bsf	4045,0,c	;volatile
 16250  00301A                     i2l8448:
 16251                           
 16252                           ;interruptHandler.c: 62: }
 16253                           ;interruptHandler.c: 63: }
 16254                           ;interruptHandler.c: 65: if(TMR3IF){
 16255  00301A  A2A1               	btfss	4001,1,c	;volatile
 16256  00301C  D024               	goto	i2l880
 16257                           
 16258                           ;interruptHandler.c: 66: TMR3IF = 0;
 16259  00301E  92A1               	bcf	4001,1,c	;volatile
 16260                           
 16261                           ;interruptHandler.c: 67: TMR3ON = 0;
 16262  003020  90B1               	bcf	4017,0,c	;volatile
 16263                           
 16264                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 16265  003022  0100               	movlb	0	; () banked
 16266  003024  05FC               	decf	_machine_state& (0+255),w,b
 16267  003026  A4D8               	btfss	status,2,c
 16268  003028  D01E               	goto	i2l880
 16269                           
 16270                           ; BSR set to: 0
 16271                           ;interruptHandler.c: 69: if(was_low_3){
 16272  00302A  507B               	movf	_was_low_3,w,c	;volatile
 16273  00302C  107C               	iorwf	_was_low_3+1,w,c	;volatile
 16274  00302E  B4D8               	btfsc	status,2,c
 16275  003030  D00A               	goto	i2l878
 16276                           
 16277                           ; BSR set to: 0
 16278                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 16279  003032  848B               	bsf	3979,2,c	;volatile
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;interruptHandler.c: 71: was_low_3 = 0;
 16283  003034  0E00               	movlw	0
 16284  003036  6E7C               	movwf	_was_low_3+1,c	;volatile
 16285  003038  0E00               	movlw	0
 16286  00303A  6E7B               	movwf	_was_low_3,c	;volatile
 16287                           
 16288                           ; BSR set to: 0
 16289                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 16290  00303C  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 16291                           
 16292                           ; BSR set to: 0
 16293                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 16294  003040  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 16295                           
 16296                           ;interruptHandler.c: 74: }
 16297  003044  D00F               	goto	i2l8470
 16298  003046                     i2l878:
 16299                           
 16300                           ; BSR set to: 0
 16301                           ;interruptHandler.c: 75: else{
 16302                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 16303  003046  948B               	bcf	3979,2,c	;volatile
 16304                           
 16305                           ; BSR set to: 0
 16306                           ;interruptHandler.c: 77: was_low_3 = 1;
 16307  003048  0E00               	movlw	0
 16308  00304A  6E7C               	movwf	_was_low_3+1,c	;volatile
 16309  00304C  0E01               	movlw	1
 16310  00304E  6E7B               	movwf	_was_low_3,c	;volatile
 16311                           
 16312                           ; BSR set to: 0
 16313                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 16314  003050  0101               	movlb	1	; () banked
 16315  003052  5120               	movf	(_servoTimes+4)& (0+255),w,b
 16316  003054  0800               	sublw	0
 16317  003056  0F20               	addlw	32
 16318  003058  6EB3               	movwf	4019,c	;volatile
 16319                           
 16320                           ; BSR set to: 1
 16321                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 16322  00305A  0101               	movlb	1	; () banked
 16323  00305C  5122               	movf	(_servoTimes+6)& (0+255),w,b
 16324  00305E  0800               	sublw	0
 16325  003060  0F20               	addlw	32
 16326  003062  6EB2               	movwf	4018,c	;volatile
 16327  003064                     i2l8470:
 16328                           
 16329                           ;interruptHandler.c: 80: }
 16330                           ;interruptHandler.c: 81: TMR3ON = 1;
 16331  003064  80B1               	bsf	4017,0,c	;volatile
 16332  003066                     i2l880:
 16333  003066  C05A  FFF5         	movff	??_handler+15,tablat
 16334  00306A  C059  FFF8         	movff	??_handler+14,tblptru
 16335  00306E  C058  FFF7         	movff	??_handler+13,tblptrh
 16336  003072  C057  FFF6         	movff	??_handler+12,tblptrl
 16337  003076  C056  FFF4         	movff	??_handler+11,prodh
 16338  00307A  C055  FFF3         	movff	??_handler+10,prodl
 16339  00307E  C054  FFDA         	movff	??_handler+9,fsr2h
 16340  003082  C053  FFD9         	movff	??_handler+8,fsr2l
 16341  003086  C052  FFE2         	movff	??_handler+7,fsr1h
 16342  00308A  C051  FFE1         	movff	??_handler+6,fsr1l
 16343  00308E  C050  FFEA         	movff	??_handler+5,fsr0h
 16344  003092  C04F  FFE9         	movff	??_handler+4,fsr0l
 16345  003096  C04E  FFFB         	movff	??_handler+3,pclatu
 16346  00309A  C04D  FFFA         	movff	??_handler+2,pclath
 16347  00309E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16348  0030A0  0011               	retfie		f
 16349  0030A2                     __end_of_handler:
 16350                           	opt stack 0
 16351                           pclatu	equ	0xFFB
 16352                           pclath	equ	0xFFA
 16353                           tblptru	equ	0xFF8
 16354                           tblptrh	equ	0xFF7
 16355                           tblptrl	equ	0xFF6
 16356                           tablat	equ	0xFF5
 16357                           prodh	equ	0xFF4
 16358                           prodl	equ	0xFF3
 16359                           intcon	equ	0xFF2
 16360                           intcon2	equ	0xFF1
 16361                           intcon3	equ	0xFF0
 16362                           indf0	equ	0xFEF
 16363                           postinc0	equ	0xFEE
 16364                           fsr0h	equ	0xFEA
 16365                           fsr0l	equ	0xFE9
 16366                           wreg	equ	0xFE8
 16367                           postdec1	equ	0xFE5
 16368                           fsr1h	equ	0xFE2
 16369                           fsr1l	equ	0xFE1
 16370                           indf2	equ	0xFDF
 16371                           postinc2	equ	0xFDE
 16372                           postdec2	equ	0xFDD
 16373                           fsr2h	equ	0xFDA
 16374                           fsr2l	equ	0xFD9
 16375                           status	equ	0xFD8
 16376                           
 16377 ;; *************** function _updateMenu *****************
 16378 ;; Defined at:
 16379 ;;		line 213 in file "UI.c"
 16380 ;; Parameters:    Size  Location     Type
 16381 ;;		None
 16382 ;; Auto vars:     Size  Location     Type
 16383 ;;		None
 16384 ;; Return value:  Size  Location     Type
 16385 ;;                  1    wreg      void 
 16386 ;; Registers used:
 16387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16388 ;; Tracked objects:
 16389 ;;		On entry : 0/0
 16390 ;;		On exit  : 0/0
 16391 ;;		Unchanged: 0/0
 16392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16396 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16397 ;;Total ram usage:        2 bytes
 16398 ;; Hardware stack levels used:    1
 16399 ;; Hardware stack levels required when called:    5
 16400 ;; This function calls:
 16401 ;;		_change_state_to_logs_11
 16402 ;;		_change_state_to_logs_12
 16403 ;;		_change_state_to_logs_22
 16404 ;;		_change_state_to_logs_23
 16405 ;;		_change_state_to_logs_33
 16406 ;;		_change_state_to_logs_34
 16407 ;;		_change_state_to_menu_11
 16408 ;;		_change_state_to_menu_23
 16409 ;;		_dispLogs
 16410 ;;		_inputHandler
 16411 ;;		i2_change_state_to_menu_12
 16412 ;;		i2_change_state_to_menu_22
 16413 ;;		i2_change_state_to_menu_start
 16414 ;; This function is called by:
 16415 ;;		_handler
 16416 ;; This function uses a non-reentrant model
 16417 ;;
 16418                           
 16419                           	psect	text60
 16420  002262                     __ptext60:
 16421                           	opt stack 0
 16422  002262                     _updateMenu:
 16423                           	opt stack 18
 16424                           
 16425                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 16426                           
 16427                           ;incstack = 0
 16428  002262  0E00               	movlw	0
 16429  002264  6E78               	movwf	_up+1,c
 16430  002266  0E00               	movlw	0
 16431  002268  6E77               	movwf	_up,c
 16432  00226A  0E00               	movlw	0
 16433  00226C  6E64               	movwf	_down+1,c
 16434  00226E  0E00               	movlw	0
 16435  002270  6E63               	movwf	_down,c
 16436  002272  0E00               	movlw	0
 16437  002274  6E66               	movwf	_enter+1,c
 16438  002276  0E00               	movlw	0
 16439  002278  6E65               	movwf	_enter,c
 16440  00227A  0E00               	movlw	0
 16441  00227C  6E5C               	movwf	_back+1,c
 16442  00227E  0E00               	movlw	0
 16443  002280  6E5B               	movwf	_back,c
 16444                           
 16445                           ;UI.c: 215: (INTCONbits.GIE = 0);
 16446  002282  9EF2               	bcf	intcon,7,c	;volatile
 16447                           
 16448                           ;UI.c: 217: if (inputHandler()
 16449                           ;UI.c: 220: ){
 16450  002284  ECA7  F016         	call	_inputHandler	;wreg free
 16451  002288  502A               	movf	?_inputHandler,w,c
 16452  00228A  102B               	iorwf	?_inputHandler+1,w,c
 16453  00228C  A4D8               	btfss	status,2,c
 16454  00228E  D112               	goto	i2l8144
 16455  002290  D146               	goto	i2l257
 16456  002292                     i2l7996:
 16457                           
 16458                           ;UI.c: 224: change_state_to_menu_11();
 16459  002292  EC30  F023         	call	_change_state_to_menu_11	;wreg free
 16460                           
 16461                           ;UI.c: 225: break;
 16462  002296  D143               	goto	i2l257
 16463  002298                     i2l7998:
 16464                           
 16465                           ;UI.c: 228: if(up){
 16466  002298  5077               	movf	_up,w,c
 16467  00229A  1078               	iorwf	_up+1,w,c
 16468  00229C  B4D8               	btfsc	status,2,c
 16469  00229E  D003               	goto	i2l8002
 16470                           
 16471                           ;UI.c: 229: change_state_to_menu_23();
 16472  0022A0  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 16473                           
 16474                           ;UI.c: 230: }
 16475  0022A4  D13C               	goto	i2l257
 16476  0022A6                     i2l8002:
 16477                           
 16478                           ;UI.c: 231: else if(down){
 16479  0022A6  5063               	movf	_down,w,c
 16480  0022A8  1064               	iorwf	_down+1,w,c
 16481  0022AA  B4D8               	btfsc	status,2,c
 16482  0022AC  D003               	goto	i2l8006
 16483                           
 16484                           ;UI.c: 232: change_state_to_menu_12();
 16485  0022AE  EC00  F023         	call	i2_change_state_to_menu_12	;wreg free
 16486                           
 16487                           ;UI.c: 233: }
 16488  0022B2  D135               	goto	i2l257
 16489  0022B4                     i2l8006:
 16490                           
 16491                           ;UI.c: 234: else if(enter){
 16492  0022B4  5065               	movf	_enter,w,c
 16493  0022B6  1066               	iorwf	_enter+1,w,c
 16494  0022B8  B4D8               	btfsc	status,2,c
 16495  0022BA  D131               	goto	i2l257
 16496                           
 16497                           ;UI.c: 235: change_state_to_menu_start();
 16498  0022BC  EC5A  F024         	call	i2_change_state_to_menu_start	;wreg free
 16499                           
 16500                           ;UI.c: 236: }
 16501                           ;UI.c: 237: break;
 16502  0022C0  D12E               	goto	i2l257
 16503  0022C2                     i2l8010:
 16504                           
 16505                           ;UI.c: 240: if(up){
 16506  0022C2  5077               	movf	_up,w,c
 16507  0022C4  1078               	iorwf	_up+1,w,c
 16508  0022C6  B4D8               	btfsc	status,2,c
 16509  0022C8  D003               	goto	i2l8014
 16510                           
 16511                           ;UI.c: 241: change_state_to_menu_11();
 16512  0022CA  EC30  F023         	call	_change_state_to_menu_11	;wreg free
 16513                           
 16514                           ;UI.c: 242: }
 16515  0022CE  D127               	goto	i2l257
 16516  0022D0                     i2l8014:
 16517                           
 16518                           ;UI.c: 243: else if(down){
 16519  0022D0  5063               	movf	_down,w,c
 16520  0022D2  1064               	iorwf	_down+1,w,c
 16521  0022D4  B4D8               	btfsc	status,2,c
 16522  0022D6  D011               	goto	i2l8030
 16523                           
 16524                           ;UI.c: 244: change_state_to_menu_23();
 16525  0022D8  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 16526                           
 16527                           ;UI.c: 245: }
 16528  0022DC  D120               	goto	i2l257
 16529  0022DE                     i2l8022:
 16530                           
 16531                           ;UI.c: 252: if(up){
 16532  0022DE  5077               	movf	_up,w,c
 16533  0022E0  1078               	iorwf	_up+1,w,c
 16534  0022E2  B4D8               	btfsc	status,2,c
 16535  0022E4  D003               	goto	i2l8026
 16536                           
 16537                           ;UI.c: 253: change_state_to_menu_11();
 16538  0022E6  EC30  F023         	call	_change_state_to_menu_11	;wreg free
 16539                           
 16540                           ;UI.c: 254: }
 16541  0022EA  D119               	goto	i2l257
 16542  0022EC                     i2l8026:
 16543                           
 16544                           ;UI.c: 255: else if(down){
 16545  0022EC  5063               	movf	_down,w,c
 16546  0022EE  1064               	iorwf	_down+1,w,c
 16547  0022F0  B4D8               	btfsc	status,2,c
 16548  0022F2  D003               	goto	i2l8030
 16549                           
 16550                           ;UI.c: 256: change_state_to_menu_23();
 16551  0022F4  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 16552                           
 16553                           ;UI.c: 257: }
 16554  0022F8  D112               	goto	i2l257
 16555  0022FA                     i2l8030:
 16556                           
 16557                           ;UI.c: 258: else if(enter){
 16558  0022FA  5065               	movf	_enter,w,c
 16559  0022FC  1066               	iorwf	_enter+1,w,c
 16560  0022FE  B4D8               	btfsc	status,2,c
 16561  002300  D10E               	goto	i2l257
 16562                           
 16563                           ;UI.c: 259: machine_state = Sorting_state;
 16564  002302  0E01               	movlw	1
 16565  002304  0100               	movlb	0	; () banked
 16566  002306  6FFC               	movwf	_machine_state& (0+255),b
 16567                           
 16568                           ; BSR set to: 0
 16569                           ;UI.c: 260: }
 16570                           ;UI.c: 261: break;
 16571                           
 16572                           ; BSR set to: 0
 16573                           
 16574                           ; BSR set to: 0
 16575  002308  D10A               	goto	i2l257
 16576  00230A                     i2l8034:
 16577                           
 16578                           ;UI.c: 264: if(up){
 16579  00230A  5077               	movf	_up,w,c
 16580  00230C  1078               	iorwf	_up+1,w,c
 16581  00230E  B4D8               	btfsc	status,2,c
 16582  002310  D003               	goto	i2l8038
 16583                           
 16584                           ;UI.c: 265: change_state_to_menu_22();
 16585  002312  ECE8  F022         	call	i2_change_state_to_menu_22	;wreg free
 16586                           
 16587                           ;UI.c: 266: }
 16588  002316  D103               	goto	i2l257
 16589  002318                     i2l8038:
 16590                           
 16591                           ;UI.c: 267: else if(down){
 16592  002318  5063               	movf	_down,w,c
 16593  00231A  1064               	iorwf	_down+1,w,c
 16594  00231C  B4D8               	btfsc	status,2,c
 16595  00231E  D003               	goto	i2l8042
 16596                           
 16597                           ;UI.c: 268: change_state_to_menu_11();
 16598  002320  EC30  F023         	call	_change_state_to_menu_11	;wreg free
 16599                           
 16600                           ;UI.c: 269: }
 16601  002324  D0FC               	goto	i2l257
 16602  002326                     i2l8042:
 16603                           
 16604                           ;UI.c: 270: else if(enter){
 16605  002326  5065               	movf	_enter,w,c
 16606  002328  1066               	iorwf	_enter+1,w,c
 16607  00232A  B4D8               	btfsc	status,2,c
 16608  00232C  D0F8               	goto	i2l257
 16609                           
 16610                           ;UI.c: 271: change_state_to_logs_11();
 16611  00232E  ECA8  F023         	call	_change_state_to_logs_11	;wreg free
 16612                           
 16613                           ;UI.c: 272: }
 16614                           ;UI.c: 273: break;
 16615  002332  D0F5               	goto	i2l257
 16616  002334                     i2l8046:
 16617                           
 16618                           ;UI.c: 276: if(up){
 16619  002334  5077               	movf	_up,w,c
 16620  002336  1078               	iorwf	_up+1,w,c
 16621  002338  B4D8               	btfsc	status,2,c
 16622  00233A  D003               	goto	i2l8050
 16623                           
 16624                           ;UI.c: 277: change_state_to_logs_34();
 16625  00233C  EC48  F023         	call	_change_state_to_logs_34	;wreg free
 16626                           
 16627                           ;UI.c: 278: }
 16628  002340  D0EE               	goto	i2l257
 16629  002342                     i2l8050:
 16630                           
 16631                           ;UI.c: 279: else if(down){
 16632  002342  5063               	movf	_down,w,c
 16633  002344  1064               	iorwf	_down+1,w,c
 16634  002346  B4D8               	btfsc	status,2,c
 16635  002348  D003               	goto	i2l8054
 16636                           
 16637                           ;UI.c: 280: change_state_to_logs_12();
 16638  00234A  EC90  F023         	call	_change_state_to_logs_12	;wreg free
 16639                           
 16640                           ;UI.c: 281: }
 16641  00234E  D0E7               	goto	i2l257
 16642  002350                     i2l8054:
 16643                           
 16644                           ;UI.c: 282: else if(enter){
 16645  002350  5065               	movf	_enter,w,c
 16646  002352  1066               	iorwf	_enter+1,w,c
 16647  002354  B4D8               	btfsc	status,2,c
 16648  002356  D007               	goto	i2l8058
 16649                           
 16650                           ;UI.c: 283: dispLogs(1);
 16651  002358  0E00               	movlw	0
 16652  00235A  6E13               	movwf	dispLogs@myLog+1,c
 16653  00235C  0E01               	movlw	1
 16654  00235E  6E12               	movwf	dispLogs@myLog,c
 16655  002360  EC94  F024         	call	_dispLogs	;wreg free
 16656                           
 16657                           ;UI.c: 284: }
 16658  002364  D0DC               	goto	i2l257
 16659  002366                     i2l8058:
 16660                           
 16661                           ;UI.c: 285: else if(back){
 16662  002366  505B               	movf	_back,w,c
 16663  002368  105C               	iorwf	_back+1,w,c
 16664  00236A  B4D8               	btfsc	status,2,c
 16665  00236C  D0D8               	goto	i2l257
 16666                           
 16667                           ;UI.c: 286: change_state_to_menu_23();
 16668  00236E  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 16669                           
 16670                           ;UI.c: 287: }
 16671                           ;UI.c: 288: break;
 16672  002372  D0D5               	goto	i2l257
 16673  002374                     i2l8062:
 16674                           
 16675                           ;UI.c: 291: if(up){
 16676  002374  5077               	movf	_up,w,c
 16677  002376  1078               	iorwf	_up+1,w,c
 16678  002378  B4D8               	btfsc	status,2,c
 16679  00237A  D003               	goto	i2l8066
 16680                           
 16681                           ;UI.c: 292: change_state_to_logs_11();
 16682  00237C  ECA8  F023         	call	_change_state_to_logs_11	;wreg free
 16683                           
 16684                           ;UI.c: 293: }
 16685  002380  D0CE               	goto	i2l257
 16686  002382                     i2l8066:
 16687                           
 16688                           ;UI.c: 294: else if(down){
 16689  002382  5063               	movf	_down,w,c
 16690  002384  1064               	iorwf	_down+1,w,c
 16691  002386  B4D8               	btfsc	status,2,c
 16692  002388  D003               	goto	i2l8070
 16693                           
 16694                           ;UI.c: 295: change_state_to_logs_23();
 16695  00238A  ECEE  F023         	call	_change_state_to_logs_23	;wreg free
 16696                           
 16697                           ;UI.c: 296: }
 16698  00238E  D0C7               	goto	i2l257
 16699  002390                     i2l8070:
 16700                           
 16701                           ;UI.c: 297: else if(enter){
 16702  002390  5065               	movf	_enter,w,c
 16703  002392  1066               	iorwf	_enter+1,w,c
 16704  002394  B4D8               	btfsc	status,2,c
 16705  002396  D007               	goto	i2l8074
 16706                           
 16707                           ;UI.c: 298: dispLogs(2);
 16708  002398  0E00               	movlw	0
 16709  00239A  6E13               	movwf	dispLogs@myLog+1,c
 16710  00239C  0E02               	movlw	2
 16711  00239E  6E12               	movwf	dispLogs@myLog,c
 16712  0023A0  EC94  F024         	call	_dispLogs	;wreg free
 16713                           
 16714                           ;UI.c: 299: }
 16715  0023A4  D0BC               	goto	i2l257
 16716  0023A6                     i2l8074:
 16717                           
 16718                           ;UI.c: 300: else if(back){
 16719  0023A6  505B               	movf	_back,w,c
 16720  0023A8  105C               	iorwf	_back+1,w,c
 16721  0023AA  B4D8               	btfsc	status,2,c
 16722  0023AC  D0B8               	goto	i2l257
 16723                           
 16724                           ;UI.c: 301: change_state_to_menu_23();
 16725  0023AE  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 16726                           
 16727                           ;UI.c: 302: }
 16728                           ;UI.c: 303: break;
 16729  0023B2  D0B5               	goto	i2l257
 16730  0023B4                     i2l8078:
 16731                           
 16732                           ;UI.c: 306: if(up){
 16733  0023B4  5077               	movf	_up,w,c
 16734  0023B6  1078               	iorwf	_up+1,w,c
 16735  0023B8  B4D8               	btfsc	status,2,c
 16736  0023BA  D003               	goto	i2l8082
 16737                           
 16738                           ;UI.c: 307: change_state_to_logs_11();
 16739  0023BC  ECA8  F023         	call	_change_state_to_logs_11	;wreg free
 16740                           
 16741                           ;UI.c: 308: }
 16742  0023C0  D0AE               	goto	i2l257
 16743  0023C2                     i2l8082:
 16744                           
 16745                           ;UI.c: 309: else if(down){
 16746  0023C2  5063               	movf	_down,w,c
 16747  0023C4  1064               	iorwf	_down+1,w,c
 16748  0023C6  B4D8               	btfsc	status,2,c
 16749  0023C8  D003               	goto	i2l8086
 16750                           
 16751                           ;UI.c: 310: change_state_to_logs_23();
 16752  0023CA  ECEE  F023         	call	_change_state_to_logs_23	;wreg free
 16753                           
 16754                           ;UI.c: 311: }
 16755  0023CE  D0A7               	goto	i2l257
 16756  0023D0                     i2l8086:
 16757                           
 16758                           ;UI.c: 312: else if(enter){
 16759  0023D0  5065               	movf	_enter,w,c
 16760  0023D2  1066               	iorwf	_enter+1,w,c
 16761  0023D4  B4D8               	btfsc	status,2,c
 16762  0023D6  D007               	goto	i2l8090
 16763                           
 16764                           ;UI.c: 313: dispLogs(2);
 16765  0023D8  0E00               	movlw	0
 16766  0023DA  6E13               	movwf	dispLogs@myLog+1,c
 16767  0023DC  0E02               	movlw	2
 16768  0023DE  6E12               	movwf	dispLogs@myLog,c
 16769  0023E0  EC94  F024         	call	_dispLogs	;wreg free
 16770                           
 16771                           ;UI.c: 314: }
 16772  0023E4  D09C               	goto	i2l257
 16773  0023E6                     i2l8090:
 16774                           
 16775                           ;UI.c: 315: else if(back){
 16776  0023E6  505B               	movf	_back,w,c
 16777  0023E8  105C               	iorwf	_back+1,w,c
 16778  0023EA  B4D8               	btfsc	status,2,c
 16779  0023EC  D098               	goto	i2l257
 16780                           
 16781                           ;UI.c: 316: change_state_to_menu_23();
 16782  0023EE  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 16783                           
 16784                           ;UI.c: 317: }
 16785                           ;UI.c: 318: break;
 16786  0023F2  D095               	goto	i2l257
 16787  0023F4                     i2l8094:
 16788                           
 16789                           ;UI.c: 321: if(up){
 16790  0023F4  5077               	movf	_up,w,c
 16791  0023F6  1078               	iorwf	_up+1,w,c
 16792  0023F8  B4D8               	btfsc	status,2,c
 16793  0023FA  D003               	goto	i2l8098
 16794                           
 16795                           ;UI.c: 322: change_state_to_logs_22();
 16796  0023FC  EC78  F023         	call	_change_state_to_logs_22	;wreg free
 16797                           
 16798                           ;UI.c: 323: }
 16799  002400  D08E               	goto	i2l257
 16800  002402                     i2l8098:
 16801                           
 16802                           ;UI.c: 324: else if(down){
 16803  002402  5063               	movf	_down,w,c
 16804  002404  1064               	iorwf	_down+1,w,c
 16805  002406  B4D8               	btfsc	status,2,c
 16806  002408  D003               	goto	i2l8102
 16807                           
 16808                           ;UI.c: 325: change_state_to_logs_34();
 16809  00240A  EC48  F023         	call	_change_state_to_logs_34	;wreg free
 16810                           
 16811                           ;UI.c: 326: }
 16812  00240E  D087               	goto	i2l257
 16813  002410                     i2l8102:
 16814                           
 16815                           ;UI.c: 327: else if(enter){
 16816  002410  5065               	movf	_enter,w,c
 16817  002412  1066               	iorwf	_enter+1,w,c
 16818  002414  B4D8               	btfsc	status,2,c
 16819  002416  D007               	goto	i2l8106
 16820                           
 16821                           ;UI.c: 328: dispLogs(3);
 16822  002418  0E00               	movlw	0
 16823  00241A  6E13               	movwf	dispLogs@myLog+1,c
 16824  00241C  0E03               	movlw	3
 16825  00241E  6E12               	movwf	dispLogs@myLog,c
 16826  002420  EC94  F024         	call	_dispLogs	;wreg free
 16827                           
 16828                           ;UI.c: 329: }
 16829  002424  D07C               	goto	i2l257
 16830  002426                     i2l8106:
 16831                           
 16832                           ;UI.c: 330: else if(back){
 16833  002426  505B               	movf	_back,w,c
 16834  002428  105C               	iorwf	_back+1,w,c
 16835  00242A  B4D8               	btfsc	status,2,c
 16836  00242C  D078               	goto	i2l257
 16837                           
 16838                           ;UI.c: 331: change_state_to_menu_23();
 16839  00242E  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 16840                           
 16841                           ;UI.c: 332: }
 16842                           ;UI.c: 333: break;
 16843  002432  D075               	goto	i2l257
 16844  002434                     i2l8110:
 16845                           
 16846                           ;UI.c: 336: if(up){
 16847  002434  5077               	movf	_up,w,c
 16848  002436  1078               	iorwf	_up+1,w,c
 16849  002438  B4D8               	btfsc	status,2,c
 16850  00243A  D003               	goto	i2l8114
 16851                           
 16852                           ;UI.c: 337: change_state_to_logs_22();
 16853  00243C  EC78  F023         	call	_change_state_to_logs_22	;wreg free
 16854                           
 16855                           ;UI.c: 338: }
 16856  002440  D06E               	goto	i2l257
 16857  002442                     i2l8114:
 16858                           
 16859                           ;UI.c: 339: else if(down){
 16860  002442  5063               	movf	_down,w,c
 16861  002444  1064               	iorwf	_down+1,w,c
 16862  002446  B4D8               	btfsc	status,2,c
 16863  002448  D003               	goto	i2l8118
 16864                           
 16865                           ;UI.c: 340: change_state_to_logs_34();
 16866  00244A  EC48  F023         	call	_change_state_to_logs_34	;wreg free
 16867                           
 16868                           ;UI.c: 341: }
 16869  00244E  D067               	goto	i2l257
 16870  002450                     i2l8118:
 16871                           
 16872                           ;UI.c: 342: else if(enter){
 16873  002450  5065               	movf	_enter,w,c
 16874  002452  1066               	iorwf	_enter+1,w,c
 16875  002454  B4D8               	btfsc	status,2,c
 16876  002456  D007               	goto	i2l8122
 16877                           
 16878                           ;UI.c: 343: dispLogs(3);
 16879  002458  0E00               	movlw	0
 16880  00245A  6E13               	movwf	dispLogs@myLog+1,c
 16881  00245C  0E03               	movlw	3
 16882  00245E  6E12               	movwf	dispLogs@myLog,c
 16883  002460  EC94  F024         	call	_dispLogs	;wreg free
 16884                           
 16885                           ;UI.c: 344: }
 16886  002464  D05C               	goto	i2l257
 16887  002466                     i2l8122:
 16888                           
 16889                           ;UI.c: 345: else if(back){
 16890  002466  505B               	movf	_back,w,c
 16891  002468  105C               	iorwf	_back+1,w,c
 16892  00246A  B4D8               	btfsc	status,2,c
 16893  00246C  D058               	goto	i2l257
 16894                           
 16895                           ;UI.c: 346: change_state_to_menu_23();
 16896  00246E  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 16897                           
 16898                           ;UI.c: 347: }
 16899                           ;UI.c: 348: break;
 16900  002472  D055               	goto	i2l257
 16901  002474                     i2l8126:
 16902                           
 16903                           ;UI.c: 351: if(up){
 16904  002474  5077               	movf	_up,w,c
 16905  002476  1078               	iorwf	_up+1,w,c
 16906  002478  B4D8               	btfsc	status,2,c
 16907  00247A  D003               	goto	i2l8130
 16908                           
 16909                           ;UI.c: 352: change_state_to_logs_33();
 16910  00247C  EC60  F023         	call	_change_state_to_logs_33	;wreg free
 16911                           
 16912                           ;UI.c: 353: }
 16913  002480  D04E               	goto	i2l257
 16914  002482                     i2l8130:
 16915                           
 16916                           ;UI.c: 354: else if(down){
 16917  002482  5063               	movf	_down,w,c
 16918  002484  1064               	iorwf	_down+1,w,c
 16919  002486  B4D8               	btfsc	status,2,c
 16920  002488  D003               	goto	i2l8134
 16921                           
 16922                           ;UI.c: 355: change_state_to_logs_11();
 16923  00248A  ECA8  F023         	call	_change_state_to_logs_11	;wreg free
 16924                           
 16925                           ;UI.c: 356: }
 16926  00248E  D047               	goto	i2l257
 16927  002490                     i2l8134:
 16928                           
 16929                           ;UI.c: 357: else if(enter){
 16930  002490  5065               	movf	_enter,w,c
 16931  002492  1066               	iorwf	_enter+1,w,c
 16932  002494  B4D8               	btfsc	status,2,c
 16933  002496  D007               	goto	i2l8138
 16934                           
 16935                           ;UI.c: 358: dispLogs(4);
 16936  002498  0E00               	movlw	0
 16937  00249A  6E13               	movwf	dispLogs@myLog+1,c
 16938  00249C  0E04               	movlw	4
 16939  00249E  6E12               	movwf	dispLogs@myLog,c
 16940  0024A0  EC94  F024         	call	_dispLogs	;wreg free
 16941                           
 16942                           ;UI.c: 359: }
 16943  0024A4  D03C               	goto	i2l257
 16944  0024A6                     i2l8138:
 16945                           
 16946                           ;UI.c: 360: else if(back){
 16947  0024A6  505B               	movf	_back,w,c
 16948  0024A8  105C               	iorwf	_back+1,w,c
 16949  0024AA  B4D8               	btfsc	status,2,c
 16950  0024AC  D038               	goto	i2l257
 16951                           
 16952                           ;UI.c: 361: change_state_to_menu_23();
 16953  0024AE  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 16954                           
 16955                           ;UI.c: 367: }
 16956                           
 16957                           ;UI.c: 366: break;
 16958                           
 16959                           ;UI.c: 365: default:
 16960                           
 16961                           ;UI.c: 362: }
 16962                           ;UI.c: 363: break;
 16963  0024B2  D035               	goto	i2l257
 16964  0024B4                     i2l8144:
 16965  0024B4  C0E6  F043         	movff	_cur_state,??_updateMenu
 16966  0024B8  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 16967                           
 16968                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16969                           ; Switch size 1, requested type "space"
 16970                           ; Number of cases is 3, Range of values is 0 to 4
 16971                           ; switch strategies available:
 16972                           ; Name         Instructions Cycles
 16973                           ; simple_byte           10     6 (average)
 16974                           ;	Chosen strategy is simple_byte
 16975  0024BC  5044               	movf	??_updateMenu+1,w,c
 16976  0024BE  0A00               	xorlw	0	; case 0
 16977  0024C0  B4D8               	btfsc	status,2,c
 16978  0024C2  D007               	goto	i2l8780
 16979  0024C4  0A03               	xorlw	3	; case 3
 16980  0024C6  B4D8               	btfsc	status,2,c
 16981  0024C8  D015               	goto	i2l8782
 16982  0024CA  0A07               	xorlw	7	; case 4
 16983  0024CC  B4D8               	btfsc	status,2,c
 16984  0024CE  D020               	goto	i2l8784
 16985  0024D0  D026               	goto	i2l257
 16986  0024D2                     i2l8780:
 16987                           
 16988                           ; Switch size 1, requested type "space"
 16989                           ; Number of cases is 5, Range of values is 0 to 23
 16990                           ; switch strategies available:
 16991                           ; Name         Instructions Cycles
 16992                           ; simple_byte           16     9 (average)
 16993                           ;	Chosen strategy is simple_byte
 16994  0024D2  5043               	movf	??_updateMenu,w,c
 16995  0024D4  0A00               	xorlw	0	; case 0
 16996  0024D6  B4D8               	btfsc	status,2,c
 16997  0024D8  D6DC               	goto	i2l7996
 16998  0024DA  0A0B               	xorlw	11	; case 11
 16999  0024DC  B4D8               	btfsc	status,2,c
 17000  0024DE  D6DC               	goto	i2l7998
 17001  0024E0  0A07               	xorlw	7	; case 12
 17002  0024E2  B4D8               	btfsc	status,2,c
 17003  0024E4  D6EE               	goto	i2l8010
 17004  0024E6  0A1A               	xorlw	26	; case 22
 17005  0024E8  B4D8               	btfsc	status,2,c
 17006  0024EA  D6F9               	goto	i2l8022
 17007  0024EC  0A01               	xorlw	1	; case 23
 17008  0024EE  B4D8               	btfsc	status,2,c
 17009  0024F0  D70C               	goto	i2l8034
 17010  0024F2  D015               	goto	i2l257
 17011  0024F4                     i2l8782:
 17012                           
 17013                           ; Switch size 1, requested type "space"
 17014                           ; Number of cases is 4, Range of values is 243 to 255
 17015                           ; switch strategies available:
 17016                           ; Name         Instructions Cycles
 17017                           ; simple_byte           13     7 (average)
 17018                           ;	Chosen strategy is simple_byte
 17019  0024F4  5043               	movf	??_updateMenu,w,c
 17020  0024F6  0AF3               	xorlw	243	; case 243
 17021  0024F8  B4D8               	btfsc	status,2,c
 17022  0024FA  D71C               	goto	i2l8046
 17023  0024FC  0A07               	xorlw	7	; case 244
 17024  0024FE  B4D8               	btfsc	status,2,c
 17025  002500  D739               	goto	i2l8062
 17026  002502  0A0A               	xorlw	10	; case 254
 17027  002504  B4D8               	btfsc	status,2,c
 17028  002506  D756               	goto	i2l8078
 17029  002508  0A01               	xorlw	1	; case 255
 17030  00250A  B4D8               	btfsc	status,2,c
 17031  00250C  D773               	goto	i2l8094
 17032  00250E  D007               	goto	i2l257
 17033  002510                     i2l8784:
 17034                           
 17035                           ; Switch size 1, requested type "space"
 17036                           ; Number of cases is 2, Range of values is 9 to 10
 17037                           ; switch strategies available:
 17038                           ; Name         Instructions Cycles
 17039                           ; simple_byte            7     4 (average)
 17040                           ;	Chosen strategy is simple_byte
 17041  002510  5043               	movf	??_updateMenu,w,c
 17042  002512  0A09               	xorlw	9	; case 9
 17043  002514  B4D8               	btfsc	status,2,c
 17044  002516  D78E               	goto	i2l8110
 17045  002518  0A03               	xorlw	3	; case 10
 17046  00251A  B4D8               	btfsc	status,2,c
 17047  00251C  D7AB               	goto	i2l8126
 17048  00251E                     i2l257:
 17049                           
 17050                           ;UI.c: 368: }
 17051                           ;UI.c: 369: (INTCONbits.GIE = 1);
 17052  00251E  8EF2               	bsf	intcon,7,c	;volatile
 17053  002520  0012               	return		;funcret
 17054  002522                     __end_of_updateMenu:
 17055                           	opt stack 0
 17056                           pclatu	equ	0xFFB
 17057                           pclath	equ	0xFFA
 17058                           tblptru	equ	0xFF8
 17059                           tblptrh	equ	0xFF7
 17060                           tblptrl	equ	0xFF6
 17061                           tablat	equ	0xFF5
 17062                           prodh	equ	0xFF4
 17063                           prodl	equ	0xFF3
 17064                           intcon	equ	0xFF2
 17065                           intcon2	equ	0xFF1
 17066                           intcon3	equ	0xFF0
 17067                           indf0	equ	0xFEF
 17068                           postinc0	equ	0xFEE
 17069                           fsr0h	equ	0xFEA
 17070                           fsr0l	equ	0xFE9
 17071                           wreg	equ	0xFE8
 17072                           postdec1	equ	0xFE5
 17073                           fsr1h	equ	0xFE2
 17074                           fsr1l	equ	0xFE1
 17075                           indf2	equ	0xFDF
 17076                           postinc2	equ	0xFDE
 17077                           postdec2	equ	0xFDD
 17078                           fsr2h	equ	0xFDA
 17079                           fsr2l	equ	0xFD9
 17080                           status	equ	0xFD8
 17081                           
 17082 ;; *************** function i2_change_state_to_menu_start *****************
 17083 ;; Defined at:
 17084 ;;		line 474 in file "UI.c"
 17085 ;; Parameters:    Size  Location     Type
 17086 ;;		None
 17087 ;; Auto vars:     Size  Location     Type
 17088 ;;		None
 17089 ;; Return value:  Size  Location     Type
 17090 ;;                  1    wreg      void 
 17091 ;; Registers used:
 17092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17093 ;; Tracked objects:
 17094 ;;		On entry : 0/0
 17095 ;;		On exit  : 0/0
 17096 ;;		Unchanged: 0/0
 17097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17102 ;;Total ram usage:        0 bytes
 17103 ;; Hardware stack levels used:    1
 17104 ;; Hardware stack levels required when called:    4
 17105 ;; This function calls:
 17106 ;;		i2_lcdInst
 17107 ;;		i2_printRTC
 17108 ;;		i2_printf
 17109 ;; This function is called by:
 17110 ;;		_updateMenu
 17111 ;; This function uses a non-reentrant model
 17112 ;;
 17113                           
 17114                           	psect	text61
 17115  0048B4                     __ptext61:
 17116                           	opt stack 0
 17117  0048B4                     i2_change_state_to_menu_start:
 17118                           	opt stack 18
 17119                           
 17120                           ;UI.c: 475: cur_state = 0;
 17121                           
 17122                           ;incstack = 0
 17123  0048B4  0E00               	movlw	0
 17124  0048B6  0100               	movlb	0	; () banked
 17125  0048B8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 17126  0048BA  0E00               	movlw	0
 17127  0048BC  6FE6               	movwf	_cur_state& (0+255),b
 17128                           
 17129                           ; BSR set to: 0
 17130                           ;UI.c: 477: lcdInst(0b10000000);;
 17131  0048BE  0E80               	movlw	128
 17132  0048C0  EC22  F025         	call	i2_lcdInst
 17133                           
 17134                           ;UI.c: 478: printRTC();
 17135  0048C4  EC91  F012         	call	i2_printRTC	;wreg free
 17136                           
 17137                           ;UI.c: 479: lcdInst(0b11000000);;
 17138  0048C8  0EC0               	movlw	192
 17139  0048CA  EC22  F025         	call	i2_lcdInst
 17140                           
 17141                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 17142  0048CE  0EF7               	movlw	low STR_30
 17143  0048D0  6E0D               	movwf	i2printf@f,c
 17144  0048D2  0EFD               	movlw	high STR_30
 17145  0048D4  6E0E               	movwf	i2printf@f+1,c
 17146  0048D6  EC96  F00C         	call	i2_printf	;wreg free
 17147  0048DA  0012               	return		;funcret
 17148  0048DC                     __end_ofi2_change_state_to_menu_start:
 17149                           	opt stack 0
 17150                           pclatu	equ	0xFFB
 17151                           pclath	equ	0xFFA
 17152                           tblptru	equ	0xFF8
 17153                           tblptrh	equ	0xFF7
 17154                           tblptrl	equ	0xFF6
 17155                           tablat	equ	0xFF5
 17156                           prodh	equ	0xFF4
 17157                           prodl	equ	0xFF3
 17158                           intcon	equ	0xFF2
 17159                           intcon2	equ	0xFF1
 17160                           intcon3	equ	0xFF0
 17161                           indf0	equ	0xFEF
 17162                           postinc0	equ	0xFEE
 17163                           fsr0h	equ	0xFEA
 17164                           fsr0l	equ	0xFE9
 17165                           wreg	equ	0xFE8
 17166                           postdec1	equ	0xFE5
 17167                           fsr1h	equ	0xFE2
 17168                           fsr1l	equ	0xFE1
 17169                           indf2	equ	0xFDF
 17170                           postinc2	equ	0xFDE
 17171                           postdec2	equ	0xFDD
 17172                           fsr2h	equ	0xFDA
 17173                           fsr2l	equ	0xFD9
 17174                           status	equ	0xFD8
 17175                           
 17176 ;; *************** function i2_printRTC *****************
 17177 ;; Defined at:
 17178 ;;		line 63 in file "RTC.c"
 17179 ;; Parameters:    Size  Location     Type
 17180 ;;		None
 17181 ;; Auto vars:     Size  Location     Type
 17182 ;;  printRTC       14   44[COMRAM] int [7]
 17183 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 17184 ;;  printRTC        2   64[COMRAM] int 
 17185 ;;  printRTC        2   58[COMRAM] int 
 17186 ;; Return value:  Size  Location     Type
 17187 ;;                  1    wreg      void 
 17188 ;; Registers used:
 17189 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17190 ;; Tracked objects:
 17191 ;;		On entry : 0/0
 17192 ;;		On exit  : 0/0
 17193 ;;		Unchanged: 0/0
 17194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17196 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17197 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17198 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17199 ;;Total ram usage:       25 bytes
 17200 ;; Hardware stack levels used:    1
 17201 ;; Hardware stack levels required when called:    3
 17202 ;; This function calls:
 17203 ;;		i2_getRTC
 17204 ;;		i2_lcdInst
 17205 ;;		i2_printf
 17206 ;;		i2_strcpy
 17207 ;; This function is called by:
 17208 ;;		i2_change_state_to_menu_start
 17209 ;; This function uses a non-reentrant model
 17210 ;;
 17211                           
 17212                           	psect	text62
 17213  002522                     __ptext62:
 17214                           	opt stack 0
 17215  002522                     i2_printRTC:
 17216                           	opt stack 18
 17217                           
 17218                           ;RTC.c: 64: getRTC();
 17219                           
 17220                           ;incstack = 0
 17221  002522  EC86  F01F         	call	i2_getRTC	;wreg free
 17222                           
 17223                           ;RTC.c: 65: char month[] = "MMM";
 17224  002526  C137  F03D         	movff	printRTC@F3217,i2printRTC@month
 17225  00252A  C138  F03E         	movff	printRTC@F3217+1,i2printRTC@month+1
 17226  00252E  C139  F03F         	movff	printRTC@F3217+2,i2printRTC@month+2
 17227  002532  C13A  F040         	movff	printRTC@F3217+3,i2printRTC@month+3
 17228                           
 17229                           ;RTC.c: 66: int INT_time[7];
 17230                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 17231  002536  0E00               	movlw	0
 17232  002538  6E42               	movwf	i2printRTC@i+1,c
 17233  00253A  0E00               	movlw	0
 17234  00253C  6E41               	movwf	i2printRTC@i,c
 17235  00253E  BE42               	btfsc	i2printRTC@i+1,7,c
 17236  002540  D006               	goto	i2l6318
 17237  002542  5042               	movf	i2printRTC@i+1,w,c
 17238  002544  E135               	bnz	i2l602
 17239  002546  0E07               	movlw	7
 17240  002548  5C41               	subwf	i2printRTC@i,w,c
 17241  00254A  B0D8               	btfsc	status,0,c
 17242  00254C  D031               	goto	i2l602
 17243  00254E                     i2l6318:
 17244                           
 17245                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17246  00254E  0E24               	movlw	low _time
 17247  002550  2441               	addwf	i2printRTC@i,w,c
 17248  002552  6ED9               	movwf	fsr2l,c
 17249  002554  0E01               	movlw	high _time
 17250  002556  2042               	addwfc	i2printRTC@i+1,w,c
 17251  002558  6EDA               	movwf	fsr2h,c
 17252  00255A  50DF               	movf	indf2,w,c
 17253  00255C  6E2A               	movwf	??i2_printRTC& (0+255),c
 17254  00255E  3A2A               	swapf	??i2_printRTC,f,c
 17255  002560  0E0F               	movlw	15
 17256  002562  162A               	andwf	??i2_printRTC,f,c
 17257  002564  0E0F               	movlw	15
 17258  002566  162A               	andwf	??i2_printRTC,f,c
 17259  002568  502A               	movf	??i2_printRTC,w,c
 17260  00256A  0D0A               	mullw	10
 17261  00256C  0E24               	movlw	low _time
 17262  00256E  2441               	addwf	i2printRTC@i,w,c
 17263  002570  6ED9               	movwf	fsr2l,c
 17264  002572  0E01               	movlw	high _time
 17265  002574  2042               	addwfc	i2printRTC@i+1,w,c
 17266  002576  6EDA               	movwf	fsr2h,c
 17267  002578  50DF               	movf	indf2,w,c
 17268  00257A  0B0F               	andlw	15
 17269  00257C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 17270  00257E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 17271  002580  50F3               	movf	prodl,w,c
 17272  002582  262B               	addwf	??i2_printRTC+1,f,c
 17273  002584  50F4               	movf	prodh,w,c
 17274  002586  222C               	addwfc	??i2_printRTC+2,f,c
 17275  002588  90D8               	bcf	status,0,c
 17276  00258A  3441               	rlcf	i2printRTC@i,w,c
 17277  00258C  6ED9               	movwf	fsr2l,c
 17278  00258E  3442               	rlcf	i2printRTC@i+1,w,c
 17279  002590  6EDA               	movwf	fsr2h,c
 17280  002592  0E2D               	movlw	low i2printRTC@INT_time
 17281  002594  26D9               	addwf	fsr2l,f,c
 17282  002596  0E00               	movlw	high i2printRTC@INT_time
 17283  002598  22DA               	addwfc	fsr2h,f,c
 17284  00259A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 17285  00259E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 17286  0025A2  4A41               	infsnz	i2printRTC@i,f,c
 17287  0025A4  2A42               	incf	i2printRTC@i+1,f,c
 17288  0025A6  BE42               	btfsc	i2printRTC@i+1,7,c
 17289  0025A8  D7D2               	goto	i2l6318
 17290  0025AA  5042               	movf	i2printRTC@i+1,w,c
 17291  0025AC  E101               	bnz	i2u484_40
 17292  0025AE  D7CB               	goto	L9
 17293  0025B0                     i2u484_40:
 17294  0025B0                     i2l602:
 17295                           
 17296                           ;RTC.c: 69: }
 17297                           ;RTC.c: 70: int RTC_month = INT_time[5];
 17298  0025B0  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 17299  0025B4  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 17300                           
 17301                           ;RTC.c: 71: switch(RTC_month){
 17302  0025B8  D084               	goto	i2l6350
 17303  0025BA                     i2l6324:
 17304                           
 17305                           ;RTC.c: 73: strcpy(month, "JAN");
 17306  0025BA  0E3D               	movlw	low i2printRTC@month
 17307  0025BC  6E01               	movwf	i2strcpy@to,c
 17308  0025BE  0E00               	movlw	high i2printRTC@month
 17309  0025C0  6E02               	movwf	i2strcpy@to+1,c
 17310  0025C2  0EDB               	movlw	low STR_8
 17311  0025C4  6E03               	movwf	i2strcpy@from,c
 17312  0025C6  0EFF               	movlw	high STR_8
 17313  0025C8  6E04               	movwf	i2strcpy@from+1,c
 17314  0025CA  ECCF  F022         	call	i2_strcpy	;wreg free
 17315                           
 17316                           ;RTC.c: 74: break;
 17317  0025CE  D0A6               	goto	i2l6352
 17318  0025D0                     i2l6326:
 17319                           
 17320                           ;RTC.c: 76: strcpy(month, "FEB");
 17321  0025D0  0E3D               	movlw	low i2printRTC@month
 17322  0025D2  6E01               	movwf	i2strcpy@to,c
 17323  0025D4  0E00               	movlw	high i2printRTC@month
 17324  0025D6  6E02               	movwf	i2strcpy@to+1,c
 17325  0025D8  0ECB               	movlw	low STR_9
 17326  0025DA  6E03               	movwf	i2strcpy@from,c
 17327  0025DC  0EFF               	movlw	high STR_9
 17328  0025DE  6E04               	movwf	i2strcpy@from+1,c
 17329  0025E0  ECCF  F022         	call	i2_strcpy	;wreg free
 17330                           
 17331                           ;RTC.c: 77: break;
 17332  0025E4  D09B               	goto	i2l6352
 17333  0025E6                     i2l6328:
 17334                           
 17335                           ;RTC.c: 79: strcpy(month, "MAR");
 17336  0025E6  0E3D               	movlw	low i2printRTC@month
 17337  0025E8  6E01               	movwf	i2strcpy@to,c
 17338  0025EA  0E00               	movlw	high i2printRTC@month
 17339  0025EC  6E02               	movwf	i2strcpy@to+1,c
 17340  0025EE  0EE7               	movlw	low STR_10
 17341  0025F0  6E03               	movwf	i2strcpy@from,c
 17342  0025F2  0EFF               	movlw	high STR_10
 17343  0025F4  6E04               	movwf	i2strcpy@from+1,c
 17344  0025F6  ECCF  F022         	call	i2_strcpy	;wreg free
 17345                           
 17346                           ;RTC.c: 80: break;
 17347  0025FA  D090               	goto	i2l6352
 17348  0025FC                     i2l6330:
 17349                           
 17350                           ;RTC.c: 82: strcpy(month, "APR");
 17351  0025FC  0E3D               	movlw	low i2printRTC@month
 17352  0025FE  6E01               	movwf	i2strcpy@to,c
 17353  002600  0E00               	movlw	high i2printRTC@month
 17354  002602  6E02               	movwf	i2strcpy@to+1,c
 17355  002604  0EEB               	movlw	low STR_11
 17356  002606  6E03               	movwf	i2strcpy@from,c
 17357  002608  0EFF               	movlw	high STR_11
 17358  00260A  6E04               	movwf	i2strcpy@from+1,c
 17359  00260C  ECCF  F022         	call	i2_strcpy	;wreg free
 17360                           
 17361                           ;RTC.c: 83: break;
 17362  002610  D085               	goto	i2l6352
 17363  002612                     i2l6332:
 17364                           
 17365                           ;RTC.c: 85: strcpy(month, "MAY");
 17366  002612  0E3D               	movlw	low i2printRTC@month
 17367  002614  6E01               	movwf	i2strcpy@to,c
 17368  002616  0E00               	movlw	high i2printRTC@month
 17369  002618  6E02               	movwf	i2strcpy@to+1,c
 17370  00261A  0EFB               	movlw	low STR_12
 17371  00261C  6E03               	movwf	i2strcpy@from,c
 17372  00261E  0EFF               	movlw	high STR_12
 17373  002620  6E04               	movwf	i2strcpy@from+1,c
 17374  002622  ECCF  F022         	call	i2_strcpy	;wreg free
 17375                           
 17376                           ;RTC.c: 86: break;
 17377  002626  D07A               	goto	i2l6352
 17378  002628                     i2l6334:
 17379                           
 17380                           ;RTC.c: 88: strcpy(month, "JUN");
 17381  002628  0E3D               	movlw	low i2printRTC@month
 17382  00262A  6E01               	movwf	i2strcpy@to,c
 17383  00262C  0E00               	movlw	high i2printRTC@month
 17384  00262E  6E02               	movwf	i2strcpy@to+1,c
 17385  002630  0EDF               	movlw	low STR_13
 17386  002632  6E03               	movwf	i2strcpy@from,c
 17387  002634  0EFF               	movlw	high STR_13
 17388  002636  6E04               	movwf	i2strcpy@from+1,c
 17389  002638  ECCF  F022         	call	i2_strcpy	;wreg free
 17390                           
 17391                           ;RTC.c: 89: break;
 17392  00263C  D06F               	goto	i2l6352
 17393  00263E                     i2l6336:
 17394                           
 17395                           ;RTC.c: 91: strcpy(month, "JUL");
 17396  00263E  0E3D               	movlw	low i2printRTC@month
 17397  002640  6E01               	movwf	i2strcpy@to,c
 17398  002642  0E00               	movlw	high i2printRTC@month
 17399  002644  6E02               	movwf	i2strcpy@to+1,c
 17400  002646  0ED7               	movlw	low STR_14
 17401  002648  6E03               	movwf	i2strcpy@from,c
 17402  00264A  0EFF               	movlw	high STR_14
 17403  00264C  6E04               	movwf	i2strcpy@from+1,c
 17404  00264E  ECCF  F022         	call	i2_strcpy	;wreg free
 17405                           
 17406                           ;RTC.c: 92: break;
 17407  002652  D064               	goto	i2l6352
 17408  002654                     i2l6338:
 17409                           
 17410                           ;RTC.c: 94: strcpy(month, "AUG");
 17411  002654  0E3D               	movlw	low i2printRTC@month
 17412  002656  6E01               	movwf	i2strcpy@to,c
 17413  002658  0E00               	movlw	high i2printRTC@month
 17414  00265A  6E02               	movwf	i2strcpy@to+1,c
 17415  00265C  0ED3               	movlw	low STR_15
 17416  00265E  6E03               	movwf	i2strcpy@from,c
 17417  002660  0EFF               	movlw	high STR_15
 17418  002662  6E04               	movwf	i2strcpy@from+1,c
 17419  002664  ECCF  F022         	call	i2_strcpy	;wreg free
 17420                           
 17421                           ;RTC.c: 95: break;
 17422  002668  D059               	goto	i2l6352
 17423  00266A                     i2l6340:
 17424                           
 17425                           ;RTC.c: 97: strcpy(month, "SEP");
 17426  00266A  0E3D               	movlw	low i2printRTC@month
 17427  00266C  6E01               	movwf	i2strcpy@to,c
 17428  00266E  0E00               	movlw	high i2printRTC@month
 17429  002670  6E02               	movwf	i2strcpy@to+1,c
 17430  002672  0EE3               	movlw	low STR_16
 17431  002674  6E03               	movwf	i2strcpy@from,c
 17432  002676  0EFF               	movlw	high STR_16
 17433  002678  6E04               	movwf	i2strcpy@from+1,c
 17434  00267A  ECCF  F022         	call	i2_strcpy	;wreg free
 17435                           
 17436                           ;RTC.c: 98: break;
 17437  00267E  D04E               	goto	i2l6352
 17438  002680                     i2l6342:
 17439                           
 17440                           ;RTC.c: 100: strcpy(month, "OCT");
 17441  002680  0E3D               	movlw	low i2printRTC@month
 17442  002682  6E01               	movwf	i2strcpy@to,c
 17443  002684  0E00               	movlw	high i2printRTC@month
 17444  002686  6E02               	movwf	i2strcpy@to+1,c
 17445  002688  0EF3               	movlw	low STR_17
 17446  00268A  6E03               	movwf	i2strcpy@from,c
 17447  00268C  0EFF               	movlw	high STR_17
 17448  00268E  6E04               	movwf	i2strcpy@from+1,c
 17449  002690  ECCF  F022         	call	i2_strcpy	;wreg free
 17450                           
 17451                           ;RTC.c: 101: break;
 17452  002694  D043               	goto	i2l6352
 17453  002696                     i2l6344:
 17454                           
 17455                           ;RTC.c: 103: strcpy(month, "NOV");
 17456  002696  0E3D               	movlw	low i2printRTC@month
 17457  002698  6E01               	movwf	i2strcpy@to,c
 17458  00269A  0E00               	movlw	high i2printRTC@month
 17459  00269C  6E02               	movwf	i2strcpy@to+1,c
 17460  00269E  0EF7               	movlw	low STR_18
 17461  0026A0  6E03               	movwf	i2strcpy@from,c
 17462  0026A2  0EFF               	movlw	high STR_18
 17463  0026A4  6E04               	movwf	i2strcpy@from+1,c
 17464  0026A6  ECCF  F022         	call	i2_strcpy	;wreg free
 17465                           
 17466                           ;RTC.c: 104: break;
 17467  0026AA  D038               	goto	i2l6352
 17468  0026AC                     i2l6346:
 17469                           
 17470                           ;RTC.c: 106: strcpy(month, "DEC");
 17471  0026AC  0E3D               	movlw	low i2printRTC@month
 17472  0026AE  6E01               	movwf	i2strcpy@to,c
 17473  0026B0  0E00               	movlw	high i2printRTC@month
 17474  0026B2  6E02               	movwf	i2strcpy@to+1,c
 17475  0026B4  0ECF               	movlw	low STR_19
 17476  0026B6  6E03               	movwf	i2strcpy@from,c
 17477  0026B8  0EFF               	movlw	high STR_19
 17478  0026BA  6E04               	movwf	i2strcpy@from+1,c
 17479  0026BC  ECCF  F022         	call	i2_strcpy	;wreg free
 17480                           
 17481                           ;RTC.c: 108: }
 17482                           
 17483                           ;RTC.c: 107: break;
 17484  0026C0  D02D               	goto	i2l6352
 17485  0026C2                     i2l6350:
 17486  0026C2  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 17487  0026C6  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 17488                           
 17489                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17490                           ; Switch size 1, requested type "space"
 17491                           ; Number of cases is 1, Range of values is 0 to 0
 17492                           ; switch strategies available:
 17493                           ; Name         Instructions Cycles
 17494                           ; simple_byte            4     3 (average)
 17495                           ;	Chosen strategy is simple_byte
 17496  0026CA  502B               	movf	??i2_printRTC+1,w,c
 17497  0026CC  0A00               	xorlw	0	; case 0
 17498  0026CE  A4D8               	btfss	status,2,c
 17499  0026D0  D025               	goto	i2l6352
 17500                           
 17501                           ; Switch size 1, requested type "space"
 17502                           ; Number of cases is 12, Range of values is 1 to 12
 17503                           ; switch strategies available:
 17504                           ; Name         Instructions Cycles
 17505                           ; simple_byte           37    19 (average)
 17506                           ;	Chosen strategy is simple_byte
 17507  0026D2  502A               	movf	??i2_printRTC,w,c
 17508  0026D4  0A01               	xorlw	1	; case 1
 17509  0026D6  B4D8               	btfsc	status,2,c
 17510  0026D8  D770               	goto	i2l6324
 17511  0026DA  0A03               	xorlw	3	; case 2
 17512  0026DC  B4D8               	btfsc	status,2,c
 17513  0026DE  D778               	goto	i2l6326
 17514  0026E0  0A01               	xorlw	1	; case 3
 17515  0026E2  B4D8               	btfsc	status,2,c
 17516  0026E4  D780               	goto	i2l6328
 17517  0026E6  0A07               	xorlw	7	; case 4
 17518  0026E8  B4D8               	btfsc	status,2,c
 17519  0026EA  D788               	goto	i2l6330
 17520  0026EC  0A01               	xorlw	1	; case 5
 17521  0026EE  B4D8               	btfsc	status,2,c
 17522  0026F0  D790               	goto	i2l6332
 17523  0026F2  0A03               	xorlw	3	; case 6
 17524  0026F4  B4D8               	btfsc	status,2,c
 17525  0026F6  D798               	goto	i2l6334
 17526  0026F8  0A01               	xorlw	1	; case 7
 17527  0026FA  B4D8               	btfsc	status,2,c
 17528  0026FC  D7A0               	goto	i2l6336
 17529  0026FE  0A0F               	xorlw	15	; case 8
 17530  002700  B4D8               	btfsc	status,2,c
 17531  002702  D7A8               	goto	i2l6338
 17532  002704  0A01               	xorlw	1	; case 9
 17533  002706  B4D8               	btfsc	status,2,c
 17534  002708  D7B0               	goto	i2l6340
 17535  00270A  0A03               	xorlw	3	; case 10
 17536  00270C  B4D8               	btfsc	status,2,c
 17537  00270E  D7B8               	goto	i2l6342
 17538  002710  0A01               	xorlw	1	; case 11
 17539  002712  B4D8               	btfsc	status,2,c
 17540  002714  D7C0               	goto	i2l6344
 17541  002716  0A07               	xorlw	7	; case 12
 17542  002718  B4D8               	btfsc	status,2,c
 17543  00271A  D7C8               	goto	i2l6346
 17544  00271C                     i2l6352:
 17545                           
 17546                           ;RTC.c: 109: lcdInst(0b10000000);;
 17547  00271C  0E80               	movlw	128
 17548  00271E  EC22  F025         	call	i2_lcdInst
 17549                           
 17550                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17551  002722  0E1C               	movlw	low STR_21
 17552  002724  6E0D               	movwf	i2printf@f,c
 17553  002726  0EFB               	movlw	high STR_21
 17554  002728  6E0E               	movwf	i2printf@f+1,c
 17555  00272A  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17556  00272E  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17557  002732  0E3D               	movlw	low i2printRTC@month
 17558  002734  6E11               	movwf	?i2_printf+4,c
 17559  002736  0E00               	movlw	high i2printRTC@month
 17560  002738  6E12               	movwf	?i2_printf+5,c
 17561  00273A  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17562  00273E  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17563  002742  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17564  002746  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17565  00274A  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17566  00274E  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17567  002752  EC96  F00C         	call	i2_printf	;wreg free
 17568  002756  0012               	return		;funcret
 17569  002758                     __end_ofi2_printRTC:
 17570                           	opt stack 0
 17571                           pclatu	equ	0xFFB
 17572                           pclath	equ	0xFFA
 17573                           tblptru	equ	0xFF8
 17574                           tblptrh	equ	0xFF7
 17575                           tblptrl	equ	0xFF6
 17576                           tablat	equ	0xFF5
 17577                           prodh	equ	0xFF4
 17578                           prodl	equ	0xFF3
 17579                           intcon	equ	0xFF2
 17580                           intcon2	equ	0xFF1
 17581                           intcon3	equ	0xFF0
 17582                           indf0	equ	0xFEF
 17583                           postinc0	equ	0xFEE
 17584                           fsr0h	equ	0xFEA
 17585                           fsr0l	equ	0xFE9
 17586                           wreg	equ	0xFE8
 17587                           postdec1	equ	0xFE5
 17588                           fsr1h	equ	0xFE2
 17589                           fsr1l	equ	0xFE1
 17590                           indf2	equ	0xFDF
 17591                           postinc2	equ	0xFDE
 17592                           postdec2	equ	0xFDD
 17593                           fsr2h	equ	0xFDA
 17594                           fsr2l	equ	0xFD9
 17595                           status	equ	0xFD8
 17596                           
 17597 ;; *************** function i2_strcpy *****************
 17598 ;; Defined at:
 17599 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17600 ;; Parameters:    Size  Location     Type
 17601 ;;  to              2    0[COMRAM] PTR unsigned char 
 17602 ;;		 -> printRTC@month(4), UI@month(4), 
 17603 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17604 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17605 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17606 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17607 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17608 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17609 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17610 ;;		 -> STR_8(4), 
 17611 ;; Auto vars:     Size  Location     Type
 17612 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17613 ;;		 -> printRTC@month(4), UI@month(4), 
 17614 ;; Return value:  Size  Location     Type
 17615 ;;                  2    0[COMRAM] PTR unsigned char 
 17616 ;; Registers used:
 17617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17618 ;; Tracked objects:
 17619 ;;		On entry : 0/0
 17620 ;;		On exit  : 0/0
 17621 ;;		Unchanged: 0/0
 17622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17623 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17624 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17626 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17627 ;;Total ram usage:        6 bytes
 17628 ;; Hardware stack levels used:    1
 17629 ;; This function calls:
 17630 ;;		Nothing
 17631 ;; This function is called by:
 17632 ;;		i2_printRTC
 17633 ;; This function uses a non-reentrant model
 17634 ;;
 17635                           
 17636                           	psect	text63
 17637  00459E                     __ptext63:
 17638                           	opt stack 0
 17639  00459E                     i2_strcpy:
 17640                           	opt stack 20
 17641                           
 17642                           ;incstack = 0
 17643  00459E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17644  0045A2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17645  0045A6  D004               	goto	i2l5988
 17646  0045A8                     i2l5986:
 17647  0045A8  4A05               	infsnz	i2strcpy@cp,f,c
 17648  0045AA  2A06               	incf	i2strcpy@cp+1,f,c
 17649  0045AC  4A03               	infsnz	i2strcpy@from,f,c
 17650  0045AE  2A04               	incf	i2strcpy@from+1,f,c
 17651  0045B0                     i2l5988:
 17652  0045B0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17653  0045B4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17654  0045B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17655  0045B8  6AF8               	clrf	tblptru,c
 17656  0045BA                     	endif
 17657  0045BA                     	if	0	;tblptru may be non-zero
 17658  0045BA                     	endif
 17659  0045BA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17660  0045BE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17661  0045C2  0008               	tblrd		*
 17662  0045C4  CFF5 FFDF          	movff	tablat,indf2
 17663  0045C8  50DF               	movf	indf2,w,c
 17664  0045CA  B4D8               	btfsc	status,2,c
 17665  0045CC  0012               	return	
 17666  0045CE  D7EC               	goto	i2l5986
 17667  0045D0                     __end_ofi2_strcpy:
 17668                           	opt stack 0
 17669                           pclatu	equ	0xFFB
 17670                           pclath	equ	0xFFA
 17671                           tblptru	equ	0xFF8
 17672                           tblptrh	equ	0xFF7
 17673                           tblptrl	equ	0xFF6
 17674                           tablat	equ	0xFF5
 17675                           prodh	equ	0xFF4
 17676                           prodl	equ	0xFF3
 17677                           intcon	equ	0xFF2
 17678                           intcon2	equ	0xFF1
 17679                           intcon3	equ	0xFF0
 17680                           indf0	equ	0xFEF
 17681                           postinc0	equ	0xFEE
 17682                           fsr0h	equ	0xFEA
 17683                           fsr0l	equ	0xFE9
 17684                           wreg	equ	0xFE8
 17685                           postdec1	equ	0xFE5
 17686                           fsr1h	equ	0xFE2
 17687                           fsr1l	equ	0xFE1
 17688                           indf2	equ	0xFDF
 17689                           postinc2	equ	0xFDE
 17690                           postdec2	equ	0xFDD
 17691                           fsr2h	equ	0xFDA
 17692                           fsr2l	equ	0xFD9
 17693                           status	equ	0xFD8
 17694                           
 17695 ;; *************** function _inputHandler *****************
 17696 ;; Defined at:
 17697 ;;		line 372 in file "UI.c"
 17698 ;; Parameters:    Size  Location     Type
 17699 ;;		None
 17700 ;; Auto vars:     Size  Location     Type
 17701 ;;		None
 17702 ;; Return value:  Size  Location     Type
 17703 ;;                  2   41[COMRAM] int 
 17704 ;; Registers used:
 17705 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17706 ;; Tracked objects:
 17707 ;;		On entry : 0/0
 17708 ;;		On exit  : 0/0
 17709 ;;		Unchanged: 0/0
 17710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17711 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17714 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17715 ;;Total ram usage:        4 bytes
 17716 ;; Hardware stack levels used:    1
 17717 ;; Hardware stack levels required when called:    4
 17718 ;; This function calls:
 17719 ;;		_change_state_to_logs_11
 17720 ;;		_change_state_to_logs_12
 17721 ;;		_change_state_to_logs_22
 17722 ;;		_change_state_to_logs_23
 17723 ;;		_change_state_to_logs_33
 17724 ;;		_change_state_to_logs_34
 17725 ;;		_change_state_to_menu_11
 17726 ;;		_change_state_to_menu_23
 17727 ;;		i2_change_state_to_menu_12
 17728 ;;		i2_change_state_to_menu_22
 17729 ;; This function is called by:
 17730 ;;		_updateMenu
 17731 ;; This function uses a non-reentrant model
 17732 ;;
 17733                           
 17734                           	psect	text64
 17735  002D4E                     __ptext64:
 17736                           	opt stack 0
 17737  002D4E                     _inputHandler:
 17738                           	opt stack 18
 17739                           
 17740                           ;UI.c: 377: if(firstboot){
 17741                           
 17742                           ;incstack = 0
 17743  002D4E  5071               	movf	_firstboot,w,c
 17744  002D50  1072               	iorwf	_firstboot+1,w,c
 17745  002D52  B4D8               	btfsc	status,2,c
 17746  002D54  D00B               	goto	i2l6420
 17747                           
 17748                           ;UI.c: 378: change_state_to_menu_11();
 17749  002D56  EC30  F023         	call	_change_state_to_menu_11	;wreg free
 17750                           
 17751                           ;UI.c: 379: firstboot = 0;
 17752  002D5A  0E00               	movlw	0
 17753  002D5C  6E72               	movwf	_firstboot+1,c
 17754  002D5E  0E00               	movlw	0
 17755  002D60  6E71               	movwf	_firstboot,c
 17756                           
 17757                           ;UI.c: 380: return 0;
 17758  002D62  0E00               	movlw	0
 17759  002D64  6E2B               	movwf	?_inputHandler+1,c
 17760  002D66  0E00               	movlw	0
 17761  002D68  6E2A               	movwf	?_inputHandler,c
 17762  002D6A  0012               	return	
 17763  002D6C                     i2l6420:
 17764                           
 17765                           ;UI.c: 381: }
 17766                           ;UI.c: 382: if (logstate){
 17767  002D6C  0100               	movlb	0	; () banked
 17768  002D6E  51F6               	movf	_logstate& (0+255),w,b
 17769  002D70  0100               	movlb	0	; () banked
 17770  002D72  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17771  002D74  B4D8               	btfsc	status,2,c
 17772  002D76  D0C7               	goto	i2l6538
 17773                           
 17774                           ; BSR set to: 0
 17775                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17776  002D78  0E43               	movlw	67
 17777  002D7A  187D               	xorwf	_input,w,c	;volatile
 17778  002D7C  A4D8               	btfss	status,2,c
 17779  002D7E  D012               	goto	i2l6438
 17780                           
 17781                           ; BSR set to: 0
 17782  002D80  B281               	btfsc	3969,1,c	;volatile
 17783  002D82  D009               	goto	i2l6430
 17784  002D84  D00F               	goto	i2l6438
 17785  002D86                     i2l6428:
 17786                           
 17787                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17788  002D86  0E68               	movlw	104
 17789  002D88  6E2C               	movwf	??_inputHandler& (0+255),c
 17790  002D8A  0EE4               	movlw	228
 17791  002D8C                     i2u871_47:
 17792  002D8C  2EE8               	decfsz	wreg,f,c
 17793  002D8E  D7FE               	bra	i2u871_47
 17794  002D90  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17795  002D92  D7FC               	bra	i2u871_47
 17796  002D94  D000               	nop2	
 17797  002D96                     i2l6430:
 17798  002D96  B281               	btfsc	3969,1,c	;volatile
 17799  002D98  D7F6               	goto	i2l6428
 17800  002D9A                     i2l6432:
 17801                           
 17802                           ;UI.c: 387: }
 17803                           ;UI.c: 388: return 0;
 17804  002D9A  0E00               	movlw	0
 17805  002D9C  6E2B               	movwf	?_inputHandler+1,c
 17806  002D9E  0E00               	movlw	0
 17807  002DA0  6E2A               	movwf	?_inputHandler,c
 17808  002DA2  0012               	return	
 17809  002DA4                     i2l6438:
 17810                           
 17811                           ;UI.c: 390: else if (input == 'D'){
 17812  002DA4  0E44               	movlw	68
 17813  002DA6  187D               	xorwf	_input,w,c	;volatile
 17814  002DA8  A4D8               	btfss	status,2,c
 17815  002DAA  D7F7               	goto	i2l6432
 17816                           
 17817                           ;UI.c: 392: logstate = 0;
 17818  002DAC  0E00               	movlw	0
 17819  002DAE  0100               	movlb	0	; () banked
 17820  002DB0  6FF7               	movwf	(_logstate+1)& (0+255),b
 17821  002DB2  0E00               	movlw	0
 17822  002DB4  6FF6               	movwf	_logstate& (0+255),b
 17823                           
 17824                           ;UI.c: 393: switch(cur_state){
 17825  002DB6  D012               	goto	i2l6456
 17826  002DB8                     i2l6442:
 17827                           
 17828                           ;UI.c: 395: change_state_to_logs_11();
 17829  002DB8  ECA8  F023         	call	_change_state_to_logs_11	;wreg free
 17830                           
 17831                           ;UI.c: 396: break;
 17832  002DBC  D7EE               	goto	i2l6432
 17833  002DBE                     i2l6444:
 17834                           
 17835                           ;UI.c: 398: change_state_to_logs_12();
 17836  002DBE  EC90  F023         	call	_change_state_to_logs_12	;wreg free
 17837                           
 17838                           ;UI.c: 399: break;
 17839  002DC2  D7EB               	goto	i2l6432
 17840  002DC4                     i2l6446:
 17841                           
 17842                           ;UI.c: 401: change_state_to_logs_22();
 17843  002DC4  EC78  F023         	call	_change_state_to_logs_22	;wreg free
 17844                           
 17845                           ;UI.c: 402: break;
 17846  002DC8  D7E8               	goto	i2l6432
 17847  002DCA                     i2l6448:
 17848                           
 17849                           ;UI.c: 404: change_state_to_logs_23();
 17850  002DCA  ECEE  F023         	call	_change_state_to_logs_23	;wreg free
 17851                           
 17852                           ;UI.c: 405: break;
 17853  002DCE  D7E5               	goto	i2l6432
 17854  002DD0                     i2l6450:
 17855                           
 17856                           ;UI.c: 407: change_state_to_logs_33();
 17857  002DD0  EC60  F023         	call	_change_state_to_logs_33	;wreg free
 17858                           
 17859                           ;UI.c: 408: break;
 17860  002DD4  D7E2               	goto	i2l6432
 17861  002DD6                     i2l6452:
 17862                           
 17863                           ;UI.c: 410: change_state_to_logs_34();
 17864  002DD6  EC48  F023         	call	_change_state_to_logs_34	;wreg free
 17865                           
 17866                           ;UI.c: 412: }
 17867                           
 17868                           ;UI.c: 411: break;
 17869  002DDA  D7DF               	goto	i2l6432
 17870  002DDC                     i2l6456:
 17871  002DDC  C0E6  F02C         	movff	_cur_state,??_inputHandler
 17872  002DE0  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 17873                           
 17874                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17875                           ; Switch size 1, requested type "space"
 17876                           ; Number of cases is 2, Range of values is 3 to 4
 17877                           ; switch strategies available:
 17878                           ; Name         Instructions Cycles
 17879                           ; simple_byte            7     4 (average)
 17880                           ;	Chosen strategy is simple_byte
 17881  002DE4  502D               	movf	??_inputHandler+1,w,c
 17882  002DE6  0A03               	xorlw	3	; case 3
 17883  002DE8  B4D8               	btfsc	status,2,c
 17884  002DEA  D004               	goto	i2l8788
 17885  002DEC  0A07               	xorlw	7	; case 4
 17886  002DEE  B4D8               	btfsc	status,2,c
 17887  002DF0  D00F               	goto	i2l8790
 17888  002DF2  D7D3               	goto	i2l6432
 17889  002DF4                     i2l8788:
 17890                           
 17891                           ; Switch size 1, requested type "space"
 17892                           ; Number of cases is 4, Range of values is 243 to 255
 17893                           ; switch strategies available:
 17894                           ; Name         Instructions Cycles
 17895                           ; simple_byte           13     7 (average)
 17896                           ;	Chosen strategy is simple_byte
 17897  002DF4  502C               	movf	??_inputHandler,w,c
 17898  002DF6  0AF3               	xorlw	243	; case 243
 17899  002DF8  B4D8               	btfsc	status,2,c
 17900  002DFA  D7DE               	goto	i2l6442
 17901  002DFC  0A07               	xorlw	7	; case 244
 17902  002DFE  B4D8               	btfsc	status,2,c
 17903  002E00  D7DE               	goto	i2l6444
 17904  002E02  0A0A               	xorlw	10	; case 254
 17905  002E04  B4D8               	btfsc	status,2,c
 17906  002E06  D7DE               	goto	i2l6446
 17907  002E08  0A01               	xorlw	1	; case 255
 17908  002E0A  B4D8               	btfsc	status,2,c
 17909  002E0C  D7DE               	goto	i2l6448
 17910  002E0E  D7C5               	goto	i2l6432
 17911  002E10                     i2l8790:
 17912                           
 17913                           ; Switch size 1, requested type "space"
 17914                           ; Number of cases is 2, Range of values is 9 to 10
 17915                           ; switch strategies available:
 17916                           ; Name         Instructions Cycles
 17917                           ; simple_byte            7     4 (average)
 17918                           ;	Chosen strategy is simple_byte
 17919  002E10  502C               	movf	??_inputHandler,w,c
 17920  002E12  0A09               	xorlw	9	; case 9
 17921  002E14  B4D8               	btfsc	status,2,c
 17922  002E16  D7DC               	goto	i2l6450
 17923  002E18  0A03               	xorlw	3	; case 10
 17924  002E1A  B4D8               	btfsc	status,2,c
 17925  002E1C  D7DC               	goto	i2l6452
 17926  002E1E  D7BD               	goto	i2l6432
 17927  002E20                     i2l6468:
 17928                           
 17929                           ;UI.c: 422: if(cur_state == 11){
 17930  002E20  0E0B               	movlw	11
 17931  002E22  0100               	movlb	0	; () banked
 17932  002E24  19E6               	xorwf	_cur_state& (0+255),w,b
 17933  002E26  0100               	movlb	0	; () banked
 17934  002E28  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 17935  002E2A  A4D8               	btfss	status,2,c
 17936  002E2C  D005               	goto	i2l6476
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;UI.c: 423: return 0;
 17940  002E2E  0E00               	movlw	0
 17941  002E30  6E2B               	movwf	?_inputHandler+1,c
 17942  002E32  0E00               	movlw	0
 17943  002E34  6E2A               	movwf	?_inputHandler,c
 17944                           
 17945                           ; BSR set to: 0
 17946  002E36  0012               	return	
 17947  002E38                     i2l6476:
 17948                           
 17949                           ; BSR set to: 0
 17950                           ;UI.c: 425: else{
 17951                           ;UI.c: 426: change_state_to_menu_11();
 17952  002E38  EC30  F023         	call	_change_state_to_menu_11	;wreg free
 17953                           
 17954                           ;UI.c: 427: }
 17955                           ;UI.c: 428: return 0;
 17956  002E3C  0E00               	movlw	0
 17957  002E3E  6E2B               	movwf	?_inputHandler+1,c
 17958  002E40  0E00               	movlw	0
 17959  002E42  6E2A               	movwf	?_inputHandler,c
 17960  002E44  0012               	return	
 17961  002E46                     i2l6482:
 17962                           
 17963                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17964  002E46  0E16               	movlw	22
 17965  002E48  0100               	movlb	0	; () banked
 17966  002E4A  19E6               	xorwf	_cur_state& (0+255),w,b
 17967  002E4C  0100               	movlb	0	; () banked
 17968  002E4E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 17969  002E50  B4D8               	btfsc	status,2,c
 17970  002E52  D007               	goto	i2l6486
 17971                           
 17972                           ; BSR set to: 0
 17973  002E54  0E0C               	movlw	12
 17974  002E56  0100               	movlb	0	; () banked
 17975  002E58  19E6               	xorwf	_cur_state& (0+255),w,b
 17976  002E5A  0100               	movlb	0	; () banked
 17977  002E5C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 17978  002E5E  A4D8               	btfss	status,2,c
 17979  002E60  D005               	goto	i2l6492
 17980  002E62                     i2l6486:
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;UI.c: 431: return 0;
 17984  002E62  0E00               	movlw	0
 17985  002E64  6E2B               	movwf	?_inputHandler+1,c
 17986  002E66  0E00               	movlw	0
 17987  002E68  6E2A               	movwf	?_inputHandler,c
 17988                           
 17989                           ; BSR set to: 0
 17990  002E6A  0012               	return	
 17991  002E6C                     i2l6492:
 17992                           
 17993                           ; BSR set to: 0
 17994                           ;UI.c: 433: else if(cur_state == 23){
 17995  002E6C  0E17               	movlw	23
 17996  002E6E  0100               	movlb	0	; () banked
 17997  002E70  19E6               	xorwf	_cur_state& (0+255),w,b
 17998  002E72  0100               	movlb	0	; () banked
 17999  002E74  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18000  002E76  A4D8               	btfss	status,2,c
 18001  002E78  D003               	goto	i2l6496
 18002                           
 18003                           ; BSR set to: 0
 18004                           ;UI.c: 434: change_state_to_menu_22();
 18005  002E7A  ECE8  F022         	call	i2_change_state_to_menu_22	;wreg free
 18006                           
 18007                           ;UI.c: 435: }
 18008  002E7E  D002               	goto	i2l6498
 18009  002E80                     i2l6496:
 18010                           
 18011                           ;UI.c: 436: else{
 18012                           ;UI.c: 437: change_state_to_menu_12();
 18013  002E80  EC00  F023         	call	i2_change_state_to_menu_12	;wreg free
 18014  002E84                     i2l6498:
 18015                           
 18016                           ;UI.c: 438: }
 18017                           ;UI.c: 439: return 0;
 18018  002E84  0E00               	movlw	0
 18019  002E86  6E2B               	movwf	?_inputHandler+1,c
 18020  002E88  0E00               	movlw	0
 18021  002E8A  6E2A               	movwf	?_inputHandler,c
 18022  002E8C  0012               	return	
 18023  002E8E                     i2l6502:
 18024                           
 18025                           ;UI.c: 441: if(cur_state == 23){
 18026  002E8E  0E17               	movlw	23
 18027  002E90  0100               	movlb	0	; () banked
 18028  002E92  19E6               	xorwf	_cur_state& (0+255),w,b
 18029  002E94  0100               	movlb	0	; () banked
 18030  002E96  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18031  002E98  A4D8               	btfss	status,2,c
 18032  002E9A  D005               	goto	i2l6510
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;UI.c: 442: return 0;
 18036  002E9C  0E00               	movlw	0
 18037  002E9E  6E2B               	movwf	?_inputHandler+1,c
 18038  002EA0  0E00               	movlw	0
 18039  002EA2  6E2A               	movwf	?_inputHandler,c
 18040                           
 18041                           ; BSR set to: 0
 18042  002EA4  0012               	return	
 18043  002EA6                     i2l6510:
 18044                           
 18045                           ; BSR set to: 0
 18046                           ;UI.c: 444: else{
 18047                           ;UI.c: 445: change_state_to_menu_23();
 18048  002EA6  EC18  F023         	call	_change_state_to_menu_23	;wreg free
 18049                           
 18050                           ;UI.c: 446: }
 18051                           ;UI.c: 447: return 0;
 18052  002EAA  0E00               	movlw	0
 18053  002EAC  6E2B               	movwf	?_inputHandler+1,c
 18054  002EAE  0E00               	movlw	0
 18055  002EB0  6E2A               	movwf	?_inputHandler,c
 18056  002EB2  0012               	return	
 18057  002EB4                     i2l6516:
 18058                           
 18059                           ;UI.c: 450: up = 1;
 18060  002EB4  0E00               	movlw	0
 18061  002EB6  6E78               	movwf	_up+1,c
 18062  002EB8  0E01               	movlw	1
 18063  002EBA  6E77               	movwf	_up,c
 18064                           
 18065                           ;UI.c: 451: return 1;
 18066  002EBC  0E00               	movlw	0
 18067  002EBE  6E2B               	movwf	?_inputHandler+1,c
 18068  002EC0  0E01               	movlw	1
 18069  002EC2  6E2A               	movwf	?_inputHandler,c
 18070  002EC4  0012               	return	
 18071  002EC6                     i2l6520:
 18072                           
 18073                           ;UI.c: 453: down = 1;
 18074  002EC6  0E00               	movlw	0
 18075  002EC8  6E64               	movwf	_down+1,c
 18076  002ECA  0E01               	movlw	1
 18077  002ECC  6E63               	movwf	_down,c
 18078                           
 18079                           ;UI.c: 454: return 1;
 18080  002ECE  0E00               	movlw	0
 18081  002ED0  6E2B               	movwf	?_inputHandler+1,c
 18082  002ED2  0E01               	movlw	1
 18083  002ED4  6E2A               	movwf	?_inputHandler,c
 18084  002ED6  0012               	return	
 18085  002ED8                     i2l6524:
 18086                           
 18087                           ;UI.c: 456: enter = 1;
 18088  002ED8  0E00               	movlw	0
 18089  002EDA  6E66               	movwf	_enter+1,c
 18090  002EDC  0E01               	movlw	1
 18091  002EDE  6E65               	movwf	_enter,c
 18092                           
 18093                           ;UI.c: 457: return 1;
 18094  002EE0  0E00               	movlw	0
 18095  002EE2  6E2B               	movwf	?_inputHandler+1,c
 18096  002EE4  0E01               	movlw	1
 18097  002EE6  6E2A               	movwf	?_inputHandler,c
 18098  002EE8  0012               	return	
 18099  002EEA                     i2l6528:
 18100                           
 18101                           ;UI.c: 459: back = 1;
 18102  002EEA  0E00               	movlw	0
 18103  002EEC  6E5C               	movwf	_back+1,c
 18104  002EEE  0E01               	movlw	1
 18105  002EF0  6E5B               	movwf	_back,c
 18106                           
 18107                           ;UI.c: 460: return 1;
 18108  002EF2  0E00               	movlw	0
 18109  002EF4  6E2B               	movwf	?_inputHandler+1,c
 18110  002EF6  0E01               	movlw	1
 18111  002EF8  6E2A               	movwf	?_inputHandler,c
 18112  002EFA  0012               	return	
 18113  002EFC                     i2l6532:
 18114                           
 18115                           ;UI.c: 463: return 1;
 18116  002EFC  0E00               	movlw	0
 18117  002EFE  6E2B               	movwf	?_inputHandler+1,c
 18118  002F00  0E01               	movlw	1
 18119  002F02  6E2A               	movwf	?_inputHandler,c
 18120                           
 18121                           ;UI.c: 464: }
 18122  002F04  0012               	return	
 18123  002F06                     i2l6538:
 18124  002F06  507D               	movf	_input,w,c	;volatile
 18125                           
 18126                           ; Switch size 1, requested type "space"
 18127                           ; Number of cases is 7, Range of values is 49 to 68
 18128                           ; switch strategies available:
 18129                           ; Name         Instructions Cycles
 18130                           ; simple_byte           22    12 (average)
 18131                           ;	Chosen strategy is simple_byte
 18132  002F08  0A31               	xorlw	49	; case 49
 18133  002F0A  B4D8               	btfsc	status,2,c
 18134  002F0C  D789               	goto	i2l6468
 18135  002F0E  0A03               	xorlw	3	; case 50
 18136  002F10  B4D8               	btfsc	status,2,c
 18137  002F12  D799               	goto	i2l6482
 18138  002F14  0A01               	xorlw	1	; case 51
 18139  002F16  B4D8               	btfsc	status,2,c
 18140  002F18  D7BA               	goto	i2l6502
 18141  002F1A  0A72               	xorlw	114	; case 65
 18142  002F1C  B4D8               	btfsc	status,2,c
 18143  002F1E  D7CA               	goto	i2l6516
 18144  002F20  0A03               	xorlw	3	; case 66
 18145  002F22  B4D8               	btfsc	status,2,c
 18146  002F24  D7D0               	goto	i2l6520
 18147  002F26  0A01               	xorlw	1	; case 67
 18148  002F28  B4D8               	btfsc	status,2,c
 18149  002F2A  D7D6               	goto	i2l6524
 18150  002F2C  0A07               	xorlw	7	; case 68
 18151  002F2E  B4D8               	btfsc	status,2,c
 18152  002F30  D7DC               	goto	i2l6528
 18153  002F32  D7E4               	goto	i2l6532
 18154  002F34                     __end_of_inputHandler:
 18155                           	opt stack 0
 18156                           pclatu	equ	0xFFB
 18157                           pclath	equ	0xFFA
 18158                           tblptru	equ	0xFF8
 18159                           tblptrh	equ	0xFF7
 18160                           tblptrl	equ	0xFF6
 18161                           tablat	equ	0xFF5
 18162                           prodh	equ	0xFF4
 18163                           prodl	equ	0xFF3
 18164                           intcon	equ	0xFF2
 18165                           intcon2	equ	0xFF1
 18166                           intcon3	equ	0xFF0
 18167                           indf0	equ	0xFEF
 18168                           postinc0	equ	0xFEE
 18169                           fsr0h	equ	0xFEA
 18170                           fsr0l	equ	0xFE9
 18171                           wreg	equ	0xFE8
 18172                           postdec1	equ	0xFE5
 18173                           fsr1h	equ	0xFE2
 18174                           fsr1l	equ	0xFE1
 18175                           indf2	equ	0xFDF
 18176                           postinc2	equ	0xFDE
 18177                           postdec2	equ	0xFDD
 18178                           fsr2h	equ	0xFDA
 18179                           fsr2l	equ	0xFD9
 18180                           status	equ	0xFD8
 18181                           
 18182 ;; *************** function i2_change_state_to_menu_22 *****************
 18183 ;; Defined at:
 18184 ;;		line 498 in file "UI.c"
 18185 ;; Parameters:    Size  Location     Type
 18186 ;;		None
 18187 ;; Auto vars:     Size  Location     Type
 18188 ;;		None
 18189 ;; Return value:  Size  Location     Type
 18190 ;;                  1    wreg      void 
 18191 ;; Registers used:
 18192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18193 ;; Tracked objects:
 18194 ;;		On entry : 0/0
 18195 ;;		On exit  : 0/0
 18196 ;;		Unchanged: 0/0
 18197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18202 ;;Total ram usage:        0 bytes
 18203 ;; Hardware stack levels used:    1
 18204 ;; Hardware stack levels required when called:    3
 18205 ;; This function calls:
 18206 ;;		i2_lcdInst
 18207 ;;		i2_printf
 18208 ;; This function is called by:
 18209 ;;		_updateMenu
 18210 ;;		_inputHandler
 18211 ;; This function uses a non-reentrant model
 18212 ;;
 18213                           
 18214                           	psect	text65
 18215  0045D0                     __ptext65:
 18216                           	opt stack 0
 18217  0045D0                     i2_change_state_to_menu_22:
 18218                           	opt stack 19
 18219                           
 18220                           ;UI.c: 499: cur_state = 22;
 18221                           
 18222                           ;incstack = 0
 18223  0045D0  0E00               	movlw	0
 18224  0045D2  0100               	movlb	0	; () banked
 18225  0045D4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18226  0045D6  0E16               	movlw	22
 18227  0045D8  6FE6               	movwf	_cur_state& (0+255),b
 18228                           
 18229                           ; BSR set to: 0
 18230                           ;UI.c: 501: lcdInst(0b10000000);;
 18231  0045DA  0E80               	movlw	128
 18232  0045DC  EC22  F025         	call	i2_lcdInst
 18233                           
 18234                           ;UI.c: 502: printf("2. SORT        <");
 18235  0045E0  0EC4               	movlw	low STR_34
 18236  0045E2  6E0D               	movwf	i2printf@f,c
 18237  0045E4  0EFD               	movlw	high STR_34
 18238  0045E6  6E0E               	movwf	i2printf@f+1,c
 18239  0045E8  EC96  F00C         	call	i2_printf	;wreg free
 18240                           
 18241                           ;UI.c: 503: lcdInst(0b11000000);;
 18242  0045EC  0EC0               	movlw	192
 18243  0045EE  EC22  F025         	call	i2_lcdInst
 18244                           
 18245                           ;UI.c: 504: printf("3. LOGS         ");
 18246  0045F2  0E09               	movlw	low STR_36
 18247  0045F4  6E0D               	movwf	i2printf@f,c
 18248  0045F6  0EFD               	movlw	high STR_36
 18249  0045F8  6E0E               	movwf	i2printf@f+1,c
 18250  0045FA  EC96  F00C         	call	i2_printf	;wreg free
 18251  0045FE  0012               	return		;funcret
 18252  004600                     __end_ofi2_change_state_to_menu_22:
 18253                           	opt stack 0
 18254                           pclatu	equ	0xFFB
 18255                           pclath	equ	0xFFA
 18256                           tblptru	equ	0xFF8
 18257                           tblptrh	equ	0xFF7
 18258                           tblptrl	equ	0xFF6
 18259                           tablat	equ	0xFF5
 18260                           prodh	equ	0xFF4
 18261                           prodl	equ	0xFF3
 18262                           intcon	equ	0xFF2
 18263                           intcon2	equ	0xFF1
 18264                           intcon3	equ	0xFF0
 18265                           indf0	equ	0xFEF
 18266                           postinc0	equ	0xFEE
 18267                           fsr0h	equ	0xFEA
 18268                           fsr0l	equ	0xFE9
 18269                           wreg	equ	0xFE8
 18270                           postdec1	equ	0xFE5
 18271                           fsr1h	equ	0xFE2
 18272                           fsr1l	equ	0xFE1
 18273                           indf2	equ	0xFDF
 18274                           postinc2	equ	0xFDE
 18275                           postdec2	equ	0xFDD
 18276                           fsr2h	equ	0xFDA
 18277                           fsr2l	equ	0xFD9
 18278                           status	equ	0xFD8
 18279                           
 18280 ;; *************** function i2_change_state_to_menu_12 *****************
 18281 ;; Defined at:
 18282 ;;		line 490 in file "UI.c"
 18283 ;; Parameters:    Size  Location     Type
 18284 ;;		None
 18285 ;; Auto vars:     Size  Location     Type
 18286 ;;		None
 18287 ;; Return value:  Size  Location     Type
 18288 ;;                  1    wreg      void 
 18289 ;; Registers used:
 18290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18291 ;; Tracked objects:
 18292 ;;		On entry : 0/0
 18293 ;;		On exit  : 0/0
 18294 ;;		Unchanged: 0/0
 18295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18300 ;;Total ram usage:        0 bytes
 18301 ;; Hardware stack levels used:    1
 18302 ;; Hardware stack levels required when called:    3
 18303 ;; This function calls:
 18304 ;;		i2_lcdInst
 18305 ;;		i2_printf
 18306 ;; This function is called by:
 18307 ;;		_updateMenu
 18308 ;;		_inputHandler
 18309 ;; This function uses a non-reentrant model
 18310 ;;
 18311                           
 18312                           	psect	text66
 18313  004600                     __ptext66:
 18314                           	opt stack 0
 18315  004600                     i2_change_state_to_menu_12:
 18316                           	opt stack 19
 18317                           
 18318                           ;UI.c: 491: cur_state = 12;
 18319                           
 18320                           ;incstack = 0
 18321  004600  0E00               	movlw	0
 18322  004602  0100               	movlb	0	; () banked
 18323  004604  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18324  004606  0E0C               	movlw	12
 18325  004608  6FE6               	movwf	_cur_state& (0+255),b
 18326                           
 18327                           ; BSR set to: 0
 18328                           ;UI.c: 493: lcdInst(0b10000000);;
 18329  00460A  0E80               	movlw	128
 18330  00460C  EC22  F025         	call	i2_lcdInst
 18331                           
 18332                           ;UI.c: 494: printf("1. DATE/TIME    ");
 18333  004610  0E2B               	movlw	low STR_33
 18334  004612  6E0D               	movwf	i2printf@f,c
 18335  004614  0EFD               	movlw	high STR_33
 18336  004616  6E0E               	movwf	i2printf@f+1,c
 18337  004618  EC96  F00C         	call	i2_printf	;wreg free
 18338                           
 18339                           ;UI.c: 495: lcdInst(0b11000000);;
 18340  00461C  0EC0               	movlw	192
 18341  00461E  EC22  F025         	call	i2_lcdInst
 18342                           
 18343                           ;UI.c: 496: printf("2. SORT        <");
 18344  004622  0EC4               	movlw	low STR_34
 18345  004624  6E0D               	movwf	i2printf@f,c
 18346  004626  0EFD               	movlw	high STR_34
 18347  004628  6E0E               	movwf	i2printf@f+1,c
 18348  00462A  EC96  F00C         	call	i2_printf	;wreg free
 18349  00462E  0012               	return		;funcret
 18350  004630                     __end_ofi2_change_state_to_menu_12:
 18351                           	opt stack 0
 18352                           pclatu	equ	0xFFB
 18353                           pclath	equ	0xFFA
 18354                           tblptru	equ	0xFF8
 18355                           tblptrh	equ	0xFF7
 18356                           tblptrl	equ	0xFF6
 18357                           tablat	equ	0xFF5
 18358                           prodh	equ	0xFF4
 18359                           prodl	equ	0xFF3
 18360                           intcon	equ	0xFF2
 18361                           intcon2	equ	0xFF1
 18362                           intcon3	equ	0xFF0
 18363                           indf0	equ	0xFEF
 18364                           postinc0	equ	0xFEE
 18365                           fsr0h	equ	0xFEA
 18366                           fsr0l	equ	0xFE9
 18367                           wreg	equ	0xFE8
 18368                           postdec1	equ	0xFE5
 18369                           fsr1h	equ	0xFE2
 18370                           fsr1l	equ	0xFE1
 18371                           indf2	equ	0xFDF
 18372                           postinc2	equ	0xFDE
 18373                           postdec2	equ	0xFDD
 18374                           fsr2h	equ	0xFDA
 18375                           fsr2l	equ	0xFD9
 18376                           status	equ	0xFD8
 18377                           
 18378 ;; *************** function _change_state_to_menu_23 *****************
 18379 ;; Defined at:
 18380 ;;		line 506 in file "UI.c"
 18381 ;; Parameters:    Size  Location     Type
 18382 ;;		None
 18383 ;; Auto vars:     Size  Location     Type
 18384 ;;		None
 18385 ;; Return value:  Size  Location     Type
 18386 ;;                  1    wreg      void 
 18387 ;; Registers used:
 18388 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18389 ;; Tracked objects:
 18390 ;;		On entry : 0/0
 18391 ;;		On exit  : 0/0
 18392 ;;		Unchanged: 0/0
 18393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18398 ;;Total ram usage:        0 bytes
 18399 ;; Hardware stack levels used:    1
 18400 ;; Hardware stack levels required when called:    3
 18401 ;; This function calls:
 18402 ;;		i2_lcdInst
 18403 ;;		i2_printf
 18404 ;; This function is called by:
 18405 ;;		_updateMenu
 18406 ;;		_inputHandler
 18407 ;; This function uses a non-reentrant model
 18408 ;;
 18409                           
 18410                           	psect	text67
 18411  004630                     __ptext67:
 18412                           	opt stack 0
 18413  004630                     _change_state_to_menu_23:
 18414                           	opt stack 18
 18415                           
 18416                           ;UI.c: 507: cur_state = 23;
 18417                           
 18418                           ;incstack = 0
 18419  004630  0E00               	movlw	0
 18420  004632  0100               	movlb	0	; () banked
 18421  004634  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18422  004636  0E17               	movlw	23
 18423  004638  6FE6               	movwf	_cur_state& (0+255),b
 18424                           
 18425                           ; BSR set to: 0
 18426                           ;UI.c: 509: lcdInst(0b10000000);;
 18427  00463A  0E80               	movlw	128
 18428  00463C  EC22  F025         	call	i2_lcdInst
 18429                           
 18430                           ;UI.c: 510: printf("2. SORT         ");
 18431  004640  0E1A               	movlw	low STR_32
 18432  004642  6E0D               	movwf	i2printf@f,c
 18433  004644  0EFD               	movlw	high STR_32
 18434  004646  6E0E               	movwf	i2printf@f+1,c
 18435  004648  EC96  F00C         	call	i2_printf	;wreg free
 18436                           
 18437                           ;UI.c: 511: lcdInst(0b11000000);;
 18438  00464C  0EC0               	movlw	192
 18439  00464E  EC22  F025         	call	i2_lcdInst
 18440                           
 18441                           ;UI.c: 512: printf("3. LOGS        <");
 18442  004652  0EB3               	movlw	low STR_38
 18443  004654  6E0D               	movwf	i2printf@f,c
 18444  004656  0EFD               	movlw	high STR_38
 18445  004658  6E0E               	movwf	i2printf@f+1,c
 18446  00465A  EC96  F00C         	call	i2_printf	;wreg free
 18447  00465E  0012               	return		;funcret
 18448  004660                     __end_of_change_state_to_menu_23:
 18449                           	opt stack 0
 18450                           pclatu	equ	0xFFB
 18451                           pclath	equ	0xFFA
 18452                           tblptru	equ	0xFF8
 18453                           tblptrh	equ	0xFF7
 18454                           tblptrl	equ	0xFF6
 18455                           tablat	equ	0xFF5
 18456                           prodh	equ	0xFF4
 18457                           prodl	equ	0xFF3
 18458                           intcon	equ	0xFF2
 18459                           intcon2	equ	0xFF1
 18460                           intcon3	equ	0xFF0
 18461                           indf0	equ	0xFEF
 18462                           postinc0	equ	0xFEE
 18463                           fsr0h	equ	0xFEA
 18464                           fsr0l	equ	0xFE9
 18465                           wreg	equ	0xFE8
 18466                           postdec1	equ	0xFE5
 18467                           fsr1h	equ	0xFE2
 18468                           fsr1l	equ	0xFE1
 18469                           indf2	equ	0xFDF
 18470                           postinc2	equ	0xFDE
 18471                           postdec2	equ	0xFDD
 18472                           fsr2h	equ	0xFDA
 18473                           fsr2l	equ	0xFD9
 18474                           status	equ	0xFD8
 18475                           
 18476 ;; *************** function _change_state_to_menu_11 *****************
 18477 ;; Defined at:
 18478 ;;		line 482 in file "UI.c"
 18479 ;; Parameters:    Size  Location     Type
 18480 ;;		None
 18481 ;; Auto vars:     Size  Location     Type
 18482 ;;		None
 18483 ;; Return value:  Size  Location     Type
 18484 ;;                  1    wreg      void 
 18485 ;; Registers used:
 18486 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18487 ;; Tracked objects:
 18488 ;;		On entry : 0/0
 18489 ;;		On exit  : 0/0
 18490 ;;		Unchanged: 0/0
 18491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18496 ;;Total ram usage:        0 bytes
 18497 ;; Hardware stack levels used:    1
 18498 ;; Hardware stack levels required when called:    3
 18499 ;; This function calls:
 18500 ;;		i2_lcdInst
 18501 ;;		i2_printf
 18502 ;; This function is called by:
 18503 ;;		_updateMenu
 18504 ;;		_inputHandler
 18505 ;; This function uses a non-reentrant model
 18506 ;;
 18507                           
 18508                           	psect	text68
 18509  004660                     __ptext68:
 18510                           	opt stack 0
 18511  004660                     _change_state_to_menu_11:
 18512                           	opt stack 18
 18513                           
 18514                           ;UI.c: 483: cur_state = 11;
 18515                           
 18516                           ;incstack = 0
 18517  004660  0E00               	movlw	0
 18518  004662  0100               	movlb	0	; () banked
 18519  004664  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18520  004666  0E0B               	movlw	11
 18521  004668  6FE6               	movwf	_cur_state& (0+255),b
 18522                           
 18523                           ; BSR set to: 0
 18524                           ;UI.c: 485: lcdInst(0b10000000);;
 18525  00466A  0E80               	movlw	128
 18526  00466C  EC22  F025         	call	i2_lcdInst
 18527                           
 18528                           ;UI.c: 486: printf("1. DATE/TIME   <");
 18529  004670  0ED5               	movlw	low STR_31
 18530  004672  6E0D               	movwf	i2printf@f,c
 18531  004674  0EFD               	movlw	high STR_31
 18532  004676  6E0E               	movwf	i2printf@f+1,c
 18533  004678  EC96  F00C         	call	i2_printf	;wreg free
 18534                           
 18535                           ;UI.c: 487: lcdInst(0b11000000);;
 18536  00467C  0EC0               	movlw	192
 18537  00467E  EC22  F025         	call	i2_lcdInst
 18538                           
 18539                           ;UI.c: 488: printf("2. SORT         ");
 18540  004682  0E1A               	movlw	low STR_32
 18541  004684  6E0D               	movwf	i2printf@f,c
 18542  004686  0EFD               	movlw	high STR_32
 18543  004688  6E0E               	movwf	i2printf@f+1,c
 18544  00468A  EC96  F00C         	call	i2_printf	;wreg free
 18545  00468E  0012               	return		;funcret
 18546  004690                     __end_of_change_state_to_menu_11:
 18547                           	opt stack 0
 18548                           pclatu	equ	0xFFB
 18549                           pclath	equ	0xFFA
 18550                           tblptru	equ	0xFF8
 18551                           tblptrh	equ	0xFF7
 18552                           tblptrl	equ	0xFF6
 18553                           tablat	equ	0xFF5
 18554                           prodh	equ	0xFF4
 18555                           prodl	equ	0xFF3
 18556                           intcon	equ	0xFF2
 18557                           intcon2	equ	0xFF1
 18558                           intcon3	equ	0xFF0
 18559                           indf0	equ	0xFEF
 18560                           postinc0	equ	0xFEE
 18561                           fsr0h	equ	0xFEA
 18562                           fsr0l	equ	0xFE9
 18563                           wreg	equ	0xFE8
 18564                           postdec1	equ	0xFE5
 18565                           fsr1h	equ	0xFE2
 18566                           fsr1l	equ	0xFE1
 18567                           indf2	equ	0xFDF
 18568                           postinc2	equ	0xFDE
 18569                           postdec2	equ	0xFDD
 18570                           fsr2h	equ	0xFDA
 18571                           fsr2l	equ	0xFD9
 18572                           status	equ	0xFD8
 18573                           
 18574 ;; *************** function _change_state_to_logs_34 *****************
 18575 ;; Defined at:
 18576 ;;		line 549 in file "UI.c"
 18577 ;; Parameters:    Size  Location     Type
 18578 ;;		None
 18579 ;; Auto vars:     Size  Location     Type
 18580 ;;		None
 18581 ;; Return value:  Size  Location     Type
 18582 ;;                  1    wreg      void 
 18583 ;; Registers used:
 18584 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18585 ;; Tracked objects:
 18586 ;;		On entry : 0/0
 18587 ;;		On exit  : 0/0
 18588 ;;		Unchanged: 0/0
 18589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18594 ;;Total ram usage:        0 bytes
 18595 ;; Hardware stack levels used:    1
 18596 ;; Hardware stack levels required when called:    3
 18597 ;; This function calls:
 18598 ;;		i2_lcdInst
 18599 ;;		i2_printf
 18600 ;; This function is called by:
 18601 ;;		_updateMenu
 18602 ;;		_inputHandler
 18603 ;; This function uses a non-reentrant model
 18604 ;;
 18605                           
 18606                           	psect	text69
 18607  004690                     __ptext69:
 18608                           	opt stack 0
 18609  004690                     _change_state_to_logs_34:
 18610                           	opt stack 18
 18611                           
 18612                           ;UI.c: 550: cur_state = 1034;
 18613                           
 18614                           ;incstack = 0
 18615  004690  0E04               	movlw	4
 18616  004692  0100               	movlb	0	; () banked
 18617  004694  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18618  004696  0E0A               	movlw	10
 18619  004698  6FE6               	movwf	_cur_state& (0+255),b
 18620                           
 18621                           ; BSR set to: 0
 18622                           ;UI.c: 551: lcdInst(0b10000000);;
 18623  00469A  0E80               	movlw	128
 18624  00469C  EC22  F025         	call	i2_lcdInst
 18625                           
 18626                           ;UI.c: 552: printf("LOG 3           ");
 18627  0046A0  0EE7               	movlw	low STR_44
 18628  0046A2  6E0D               	movwf	i2printf@f,c
 18629  0046A4  0EFC               	movlw	high STR_44
 18630  0046A6  6E0E               	movwf	i2printf@f+1,c
 18631  0046A8  EC96  F00C         	call	i2_printf	;wreg free
 18632                           
 18633                           ;UI.c: 553: lcdInst(0b11000000);;
 18634  0046AC  0EC0               	movlw	192
 18635  0046AE  EC22  F025         	call	i2_lcdInst
 18636                           
 18637                           ;UI.c: 554: printf("LOG 4          <");
 18638  0046B2  0EA2               	movlw	low STR_50
 18639  0046B4  6E0D               	movwf	i2printf@f,c
 18640  0046B6  0EFD               	movlw	high STR_50
 18641  0046B8  6E0E               	movwf	i2printf@f+1,c
 18642  0046BA  EC96  F00C         	call	i2_printf	;wreg free
 18643  0046BE  0012               	return		;funcret
 18644  0046C0                     __end_of_change_state_to_logs_34:
 18645                           	opt stack 0
 18646                           pclatu	equ	0xFFB
 18647                           pclath	equ	0xFFA
 18648                           tblptru	equ	0xFF8
 18649                           tblptrh	equ	0xFF7
 18650                           tblptrl	equ	0xFF6
 18651                           tablat	equ	0xFF5
 18652                           prodh	equ	0xFF4
 18653                           prodl	equ	0xFF3
 18654                           intcon	equ	0xFF2
 18655                           intcon2	equ	0xFF1
 18656                           intcon3	equ	0xFF0
 18657                           indf0	equ	0xFEF
 18658                           postinc0	equ	0xFEE
 18659                           fsr0h	equ	0xFEA
 18660                           fsr0l	equ	0xFE9
 18661                           wreg	equ	0xFE8
 18662                           postdec1	equ	0xFE5
 18663                           fsr1h	equ	0xFE2
 18664                           fsr1l	equ	0xFE1
 18665                           indf2	equ	0xFDF
 18666                           postinc2	equ	0xFDE
 18667                           postdec2	equ	0xFDD
 18668                           fsr2h	equ	0xFDA
 18669                           fsr2l	equ	0xFD9
 18670                           status	equ	0xFD8
 18671                           
 18672 ;; *************** function _change_state_to_logs_33 *****************
 18673 ;; Defined at:
 18674 ;;		line 542 in file "UI.c"
 18675 ;; Parameters:    Size  Location     Type
 18676 ;;		None
 18677 ;; Auto vars:     Size  Location     Type
 18678 ;;		None
 18679 ;; Return value:  Size  Location     Type
 18680 ;;                  1    wreg      void 
 18681 ;; Registers used:
 18682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18683 ;; Tracked objects:
 18684 ;;		On entry : 0/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18692 ;;Total ram usage:        0 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    3
 18695 ;; This function calls:
 18696 ;;		i2_lcdInst
 18697 ;;		i2_printf
 18698 ;; This function is called by:
 18699 ;;		_updateMenu
 18700 ;;		_inputHandler
 18701 ;; This function uses a non-reentrant model
 18702 ;;
 18703                           
 18704                           	psect	text70
 18705  0046C0                     __ptext70:
 18706                           	opt stack 0
 18707  0046C0                     _change_state_to_logs_33:
 18708                           	opt stack 18
 18709                           
 18710                           ;UI.c: 543: cur_state = 1033;
 18711                           
 18712                           ;incstack = 0
 18713  0046C0  0E04               	movlw	4
 18714  0046C2  0100               	movlb	0	; () banked
 18715  0046C4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18716  0046C6  0E09               	movlw	9
 18717  0046C8  6FE6               	movwf	_cur_state& (0+255),b
 18718                           
 18719                           ; BSR set to: 0
 18720                           ;UI.c: 544: lcdInst(0b10000000);;
 18721  0046CA  0E80               	movlw	128
 18722  0046CC  EC22  F025         	call	i2_lcdInst
 18723                           
 18724                           ;UI.c: 545: printf("LOG 3          <");
 18725  0046D0  0E91               	movlw	low STR_46
 18726  0046D2  6E0D               	movwf	i2printf@f,c
 18727  0046D4  0EFD               	movlw	high STR_46
 18728  0046D6  6E0E               	movwf	i2printf@f+1,c
 18729  0046D8  EC96  F00C         	call	i2_printf	;wreg free
 18730                           
 18731                           ;UI.c: 546: lcdInst(0b11000000);;
 18732  0046DC  0EC0               	movlw	192
 18733  0046DE  EC22  F025         	call	i2_lcdInst
 18734                           
 18735                           ;UI.c: 547: printf("LOG 4           ");
 18736  0046E2  0EF8               	movlw	low STR_48
 18737  0046E4  6E0D               	movwf	i2printf@f,c
 18738  0046E6  0EFC               	movlw	high STR_48
 18739  0046E8  6E0E               	movwf	i2printf@f+1,c
 18740  0046EA  EC96  F00C         	call	i2_printf	;wreg free
 18741  0046EE  0012               	return		;funcret
 18742  0046F0                     __end_of_change_state_to_logs_33:
 18743                           	opt stack 0
 18744                           pclatu	equ	0xFFB
 18745                           pclath	equ	0xFFA
 18746                           tblptru	equ	0xFF8
 18747                           tblptrh	equ	0xFF7
 18748                           tblptrl	equ	0xFF6
 18749                           tablat	equ	0xFF5
 18750                           prodh	equ	0xFF4
 18751                           prodl	equ	0xFF3
 18752                           intcon	equ	0xFF2
 18753                           intcon2	equ	0xFF1
 18754                           intcon3	equ	0xFF0
 18755                           indf0	equ	0xFEF
 18756                           postinc0	equ	0xFEE
 18757                           fsr0h	equ	0xFEA
 18758                           fsr0l	equ	0xFE9
 18759                           wreg	equ	0xFE8
 18760                           postdec1	equ	0xFE5
 18761                           fsr1h	equ	0xFE2
 18762                           fsr1l	equ	0xFE1
 18763                           indf2	equ	0xFDF
 18764                           postinc2	equ	0xFDE
 18765                           postdec2	equ	0xFDD
 18766                           fsr2h	equ	0xFDA
 18767                           fsr2l	equ	0xFD9
 18768                           status	equ	0xFD8
 18769                           
 18770 ;; *************** function _change_state_to_logs_23 *****************
 18771 ;; Defined at:
 18772 ;;		line 535 in file "UI.c"
 18773 ;; Parameters:    Size  Location     Type
 18774 ;;		None
 18775 ;; Auto vars:     Size  Location     Type
 18776 ;;		None
 18777 ;; Return value:  Size  Location     Type
 18778 ;;                  1    wreg      void 
 18779 ;; Registers used:
 18780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18781 ;; Tracked objects:
 18782 ;;		On entry : 0/0
 18783 ;;		On exit  : 0/0
 18784 ;;		Unchanged: 0/0
 18785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18790 ;;Total ram usage:        0 bytes
 18791 ;; Hardware stack levels used:    1
 18792 ;; Hardware stack levels required when called:    3
 18793 ;; This function calls:
 18794 ;;		i2_lcdInst
 18795 ;;		i2_printf
 18796 ;; This function is called by:
 18797 ;;		_updateMenu
 18798 ;;		_inputHandler
 18799 ;; This function uses a non-reentrant model
 18800 ;;
 18801                           
 18802                           	psect	text71
 18803  0047DC                     __ptext71:
 18804                           	opt stack 0
 18805  0047DC                     _change_state_to_logs_23:
 18806                           	opt stack 18
 18807                           
 18808                           ;UI.c: 536: cur_state = 1023;
 18809                           
 18810                           ;incstack = 0
 18811  0047DC  0E03               	movlw	3
 18812  0047DE  0100               	movlb	0	; () banked
 18813  0047E0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18814  0047E2  69E6               	setf	_cur_state& (0+255),b
 18815                           
 18816                           ; BSR set to: 0
 18817                           ;UI.c: 537: lcdInst(0b10000000);;
 18818  0047E4  0E80               	movlw	128
 18819  0047E6  EC22  F025         	call	i2_lcdInst
 18820                           
 18821                           ;UI.c: 538: printf("LOG 2           ");
 18822  0047EA  0ED6               	movlw	low STR_40
 18823  0047EC  6E0D               	movwf	i2printf@f,c
 18824  0047EE  0EFC               	movlw	high STR_40
 18825  0047F0  6E0E               	movwf	i2printf@f+1,c
 18826  0047F2  EC96  F00C         	call	i2_printf	;wreg free
 18827                           
 18828                           ;UI.c: 539: lcdInst(0b11000000);;
 18829  0047F6  0EC0               	movlw	192
 18830  0047F8  EC22  F025         	call	i2_lcdInst
 18831                           
 18832                           ;UI.c: 540: printf("LOG 3          <");
 18833  0047FC  0E91               	movlw	low STR_46
 18834  0047FE  6E0D               	movwf	i2printf@f,c
 18835  004800  0EFD               	movlw	high STR_46
 18836  004802  6E0E               	movwf	i2printf@f+1,c
 18837  004804  EC96  F00C         	call	i2_printf	;wreg free
 18838  004808  0012               	return		;funcret
 18839  00480A                     __end_of_change_state_to_logs_23:
 18840                           	opt stack 0
 18841                           pclatu	equ	0xFFB
 18842                           pclath	equ	0xFFA
 18843                           tblptru	equ	0xFF8
 18844                           tblptrh	equ	0xFF7
 18845                           tblptrl	equ	0xFF6
 18846                           tablat	equ	0xFF5
 18847                           prodh	equ	0xFF4
 18848                           prodl	equ	0xFF3
 18849                           intcon	equ	0xFF2
 18850                           intcon2	equ	0xFF1
 18851                           intcon3	equ	0xFF0
 18852                           indf0	equ	0xFEF
 18853                           postinc0	equ	0xFEE
 18854                           fsr0h	equ	0xFEA
 18855                           fsr0l	equ	0xFE9
 18856                           wreg	equ	0xFE8
 18857                           postdec1	equ	0xFE5
 18858                           fsr1h	equ	0xFE2
 18859                           fsr1l	equ	0xFE1
 18860                           indf2	equ	0xFDF
 18861                           postinc2	equ	0xFDE
 18862                           postdec2	equ	0xFDD
 18863                           fsr2h	equ	0xFDA
 18864                           fsr2l	equ	0xFD9
 18865                           status	equ	0xFD8
 18866                           
 18867 ;; *************** function _change_state_to_logs_22 *****************
 18868 ;; Defined at:
 18869 ;;		line 528 in file "UI.c"
 18870 ;; Parameters:    Size  Location     Type
 18871 ;;		None
 18872 ;; Auto vars:     Size  Location     Type
 18873 ;;		None
 18874 ;; Return value:  Size  Location     Type
 18875 ;;                  1    wreg      void 
 18876 ;; Registers used:
 18877 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18878 ;; Tracked objects:
 18879 ;;		On entry : 0/0
 18880 ;;		On exit  : 0/0
 18881 ;;		Unchanged: 0/0
 18882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18887 ;;Total ram usage:        0 bytes
 18888 ;; Hardware stack levels used:    1
 18889 ;; Hardware stack levels required when called:    3
 18890 ;; This function calls:
 18891 ;;		i2_lcdInst
 18892 ;;		i2_printf
 18893 ;; This function is called by:
 18894 ;;		_updateMenu
 18895 ;;		_inputHandler
 18896 ;; This function uses a non-reentrant model
 18897 ;;
 18898                           
 18899                           	psect	text72
 18900  0046F0                     __ptext72:
 18901                           	opt stack 0
 18902  0046F0                     _change_state_to_logs_22:
 18903                           	opt stack 18
 18904                           
 18905                           ;UI.c: 529: cur_state = 1022;
 18906                           
 18907                           ;incstack = 0
 18908  0046F0  0E03               	movlw	3
 18909  0046F2  0100               	movlb	0	; () banked
 18910  0046F4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18911  0046F6  0EFE               	movlw	254
 18912  0046F8  6FE6               	movwf	_cur_state& (0+255),b
 18913                           
 18914                           ; BSR set to: 0
 18915                           ;UI.c: 530: lcdInst(0b10000000);;
 18916  0046FA  0E80               	movlw	128
 18917  0046FC  EC22  F025         	call	i2_lcdInst
 18918                           
 18919                           ;UI.c: 531: printf("LOG 2          <");
 18920  004700  0E80               	movlw	low STR_42
 18921  004702  6E0D               	movwf	i2printf@f,c
 18922  004704  0EFD               	movlw	high STR_42
 18923  004706  6E0E               	movwf	i2printf@f+1,c
 18924  004708  EC96  F00C         	call	i2_printf	;wreg free
 18925                           
 18926                           ;UI.c: 532: lcdInst(0b11000000);;
 18927  00470C  0EC0               	movlw	192
 18928  00470E  EC22  F025         	call	i2_lcdInst
 18929                           
 18930                           ;UI.c: 533: printf("LOG 3           ");
 18931  004712  0EE7               	movlw	low STR_44
 18932  004714  6E0D               	movwf	i2printf@f,c
 18933  004716  0EFC               	movlw	high STR_44
 18934  004718  6E0E               	movwf	i2printf@f+1,c
 18935  00471A  EC96  F00C         	call	i2_printf	;wreg free
 18936  00471E  0012               	return		;funcret
 18937  004720                     __end_of_change_state_to_logs_22:
 18938                           	opt stack 0
 18939                           pclatu	equ	0xFFB
 18940                           pclath	equ	0xFFA
 18941                           tblptru	equ	0xFF8
 18942                           tblptrh	equ	0xFF7
 18943                           tblptrl	equ	0xFF6
 18944                           tablat	equ	0xFF5
 18945                           prodh	equ	0xFF4
 18946                           prodl	equ	0xFF3
 18947                           intcon	equ	0xFF2
 18948                           intcon2	equ	0xFF1
 18949                           intcon3	equ	0xFF0
 18950                           indf0	equ	0xFEF
 18951                           postinc0	equ	0xFEE
 18952                           fsr0h	equ	0xFEA
 18953                           fsr0l	equ	0xFE9
 18954                           wreg	equ	0xFE8
 18955                           postdec1	equ	0xFE5
 18956                           fsr1h	equ	0xFE2
 18957                           fsr1l	equ	0xFE1
 18958                           indf2	equ	0xFDF
 18959                           postinc2	equ	0xFDE
 18960                           postdec2	equ	0xFDD
 18961                           fsr2h	equ	0xFDA
 18962                           fsr2l	equ	0xFD9
 18963                           status	equ	0xFD8
 18964                           
 18965 ;; *************** function _change_state_to_logs_12 *****************
 18966 ;; Defined at:
 18967 ;;		line 521 in file "UI.c"
 18968 ;; Parameters:    Size  Location     Type
 18969 ;;		None
 18970 ;; Auto vars:     Size  Location     Type
 18971 ;;		None
 18972 ;; Return value:  Size  Location     Type
 18973 ;;                  1    wreg      void 
 18974 ;; Registers used:
 18975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18976 ;; Tracked objects:
 18977 ;;		On entry : 0/0
 18978 ;;		On exit  : 0/0
 18979 ;;		Unchanged: 0/0
 18980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18985 ;;Total ram usage:        0 bytes
 18986 ;; Hardware stack levels used:    1
 18987 ;; Hardware stack levels required when called:    3
 18988 ;; This function calls:
 18989 ;;		i2_lcdInst
 18990 ;;		i2_printf
 18991 ;; This function is called by:
 18992 ;;		_updateMenu
 18993 ;;		_inputHandler
 18994 ;; This function uses a non-reentrant model
 18995 ;;
 18996                           
 18997                           	psect	text73
 18998  004720                     __ptext73:
 18999                           	opt stack 0
 19000  004720                     _change_state_to_logs_12:
 19001                           	opt stack 18
 19002                           
 19003                           ;UI.c: 522: cur_state = 1012;
 19004                           
 19005                           ;incstack = 0
 19006  004720  0E03               	movlw	3
 19007  004722  0100               	movlb	0	; () banked
 19008  004724  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19009  004726  0EF4               	movlw	244
 19010  004728  6FE6               	movwf	_cur_state& (0+255),b
 19011                           
 19012                           ; BSR set to: 0
 19013                           ;UI.c: 523: lcdInst(0b10000000);;
 19014  00472A  0E80               	movlw	128
 19015  00472C  EC22  F025         	call	i2_lcdInst
 19016                           
 19017                           ;UI.c: 524: printf("LOG 1           ");
 19018  004730  0EC5               	movlw	low STR_41
 19019  004732  6E0D               	movwf	i2printf@f,c
 19020  004734  0EFC               	movlw	high STR_41
 19021  004736  6E0E               	movwf	i2printf@f+1,c
 19022  004738  EC96  F00C         	call	i2_printf	;wreg free
 19023                           
 19024                           ;UI.c: 525: lcdInst(0b11000000);;
 19025  00473C  0EC0               	movlw	192
 19026  00473E  EC22  F025         	call	i2_lcdInst
 19027                           
 19028                           ;UI.c: 526: printf("LOG 2          <");
 19029  004742  0E80               	movlw	low STR_42
 19030  004744  6E0D               	movwf	i2printf@f,c
 19031  004746  0EFD               	movlw	high STR_42
 19032  004748  6E0E               	movwf	i2printf@f+1,c
 19033  00474A  EC96  F00C         	call	i2_printf	;wreg free
 19034  00474E  0012               	return		;funcret
 19035  004750                     __end_of_change_state_to_logs_12:
 19036                           	opt stack 0
 19037                           pclatu	equ	0xFFB
 19038                           pclath	equ	0xFFA
 19039                           tblptru	equ	0xFF8
 19040                           tblptrh	equ	0xFF7
 19041                           tblptrl	equ	0xFF6
 19042                           tablat	equ	0xFF5
 19043                           prodh	equ	0xFF4
 19044                           prodl	equ	0xFF3
 19045                           intcon	equ	0xFF2
 19046                           intcon2	equ	0xFF1
 19047                           intcon3	equ	0xFF0
 19048                           indf0	equ	0xFEF
 19049                           postinc0	equ	0xFEE
 19050                           fsr0h	equ	0xFEA
 19051                           fsr0l	equ	0xFE9
 19052                           wreg	equ	0xFE8
 19053                           postdec1	equ	0xFE5
 19054                           fsr1h	equ	0xFE2
 19055                           fsr1l	equ	0xFE1
 19056                           indf2	equ	0xFDF
 19057                           postinc2	equ	0xFDE
 19058                           postdec2	equ	0xFDD
 19059                           fsr2h	equ	0xFDA
 19060                           fsr2l	equ	0xFD9
 19061                           status	equ	0xFD8
 19062                           
 19063 ;; *************** function _change_state_to_logs_11 *****************
 19064 ;; Defined at:
 19065 ;;		line 514 in file "UI.c"
 19066 ;; Parameters:    Size  Location     Type
 19067 ;;		None
 19068 ;; Auto vars:     Size  Location     Type
 19069 ;;		None
 19070 ;; Return value:  Size  Location     Type
 19071 ;;                  1    wreg      void 
 19072 ;; Registers used:
 19073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19074 ;; Tracked objects:
 19075 ;;		On entry : 0/0
 19076 ;;		On exit  : 0/0
 19077 ;;		Unchanged: 0/0
 19078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19083 ;;Total ram usage:        0 bytes
 19084 ;; Hardware stack levels used:    1
 19085 ;; Hardware stack levels required when called:    3
 19086 ;; This function calls:
 19087 ;;		i2_lcdInst
 19088 ;;		i2_printf
 19089 ;; This function is called by:
 19090 ;;		_updateMenu
 19091 ;;		_inputHandler
 19092 ;; This function uses a non-reentrant model
 19093 ;;
 19094                           
 19095                           	psect	text74
 19096  004750                     __ptext74:
 19097                           	opt stack 0
 19098  004750                     _change_state_to_logs_11:
 19099                           	opt stack 18
 19100                           
 19101                           ;UI.c: 515: cur_state = 1011;
 19102                           
 19103                           ;incstack = 0
 19104  004750  0E03               	movlw	3
 19105  004752  0100               	movlb	0	; () banked
 19106  004754  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19107  004756  0EF3               	movlw	243
 19108  004758  6FE6               	movwf	_cur_state& (0+255),b
 19109                           
 19110                           ; BSR set to: 0
 19111                           ;UI.c: 516: lcdInst(0b10000000);;
 19112  00475A  0E80               	movlw	128
 19113  00475C  EC22  F025         	call	i2_lcdInst
 19114                           
 19115                           ;UI.c: 517: printf("LOG 1          <");
 19116  004760  0E6F               	movlw	low STR_39
 19117  004762  6E0D               	movwf	i2printf@f,c
 19118  004764  0EFD               	movlw	high STR_39
 19119  004766  6E0E               	movwf	i2printf@f+1,c
 19120  004768  EC96  F00C         	call	i2_printf	;wreg free
 19121                           
 19122                           ;UI.c: 518: lcdInst(0b11000000);;
 19123  00476C  0EC0               	movlw	192
 19124  00476E  EC22  F025         	call	i2_lcdInst
 19125                           
 19126                           ;UI.c: 519: printf("LOG 2           ");
 19127  004772  0ED6               	movlw	low STR_40
 19128  004774  6E0D               	movwf	i2printf@f,c
 19129  004776  0EFC               	movlw	high STR_40
 19130  004778  6E0E               	movwf	i2printf@f+1,c
 19131  00477A  EC96  F00C         	call	i2_printf	;wreg free
 19132  00477E  0012               	return		;funcret
 19133  004780                     __end_of_change_state_to_logs_11:
 19134                           	opt stack 0
 19135                           pclatu	equ	0xFFB
 19136                           pclath	equ	0xFFA
 19137                           tblptru	equ	0xFF8
 19138                           tblptrh	equ	0xFF7
 19139                           tblptrl	equ	0xFF6
 19140                           tablat	equ	0xFF5
 19141                           prodh	equ	0xFF4
 19142                           prodl	equ	0xFF3
 19143                           intcon	equ	0xFF2
 19144                           intcon2	equ	0xFF1
 19145                           intcon3	equ	0xFF0
 19146                           indf0	equ	0xFEF
 19147                           postinc0	equ	0xFEE
 19148                           fsr0h	equ	0xFEA
 19149                           fsr0l	equ	0xFE9
 19150                           wreg	equ	0xFE8
 19151                           postdec1	equ	0xFE5
 19152                           fsr1h	equ	0xFE2
 19153                           fsr1l	equ	0xFE1
 19154                           indf2	equ	0xFDF
 19155                           postinc2	equ	0xFDE
 19156                           postdec2	equ	0xFDD
 19157                           fsr2h	equ	0xFDA
 19158                           fsr2l	equ	0xFD9
 19159                           status	equ	0xFD8
 19160                           
 19161 ;; *************** function _dispLogs *****************
 19162 ;; Defined at:
 19163 ;;		line 467 in file "UI.c"
 19164 ;; Parameters:    Size  Location     Type
 19165 ;;  myLog           2   17[COMRAM] int 
 19166 ;; Auto vars:     Size  Location     Type
 19167 ;;		None
 19168 ;; Return value:  Size  Location     Type
 19169 ;;                  1    wreg      void 
 19170 ;; Registers used:
 19171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19172 ;; Tracked objects:
 19173 ;;		On entry : 0/0
 19174 ;;		On exit  : 0/0
 19175 ;;		Unchanged: 0/0
 19176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19177 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;Total ram usage:        2 bytes
 19182 ;; Hardware stack levels used:    1
 19183 ;; Hardware stack levels required when called:    2
 19184 ;; This function calls:
 19185 ;;		_retrieveLog
 19186 ;; This function is called by:
 19187 ;;		_updateMenu
 19188 ;; This function uses a non-reentrant model
 19189 ;;
 19190                           
 19191                           	psect	text75
 19192  004928                     __ptext75:
 19193                           	opt stack 0
 19194  004928                     _dispLogs:
 19195                           	opt stack 20
 19196                           
 19197                           ;UI.c: 468: logstate = 1;
 19198                           
 19199                           ;incstack = 0
 19200  004928  0E00               	movlw	0
 19201  00492A  0100               	movlb	0	; () banked
 19202  00492C  6FF7               	movwf	(_logstate+1)& (0+255),b
 19203  00492E  0E01               	movlw	1
 19204  004930  6FF6               	movwf	_logstate& (0+255),b
 19205                           
 19206                           ; BSR set to: 0
 19207                           ;UI.c: 469: log = myLog;
 19208  004932  C012  F0EA         	movff	dispLogs@myLog,_log
 19209  004936  C013  F0EB         	movff	dispLogs@myLog+1,_log+1
 19210                           
 19211                           ; BSR set to: 0
 19212                           ;UI.c: 470: retrieveLog(myLog - 1);
 19213  00493A  0EFF               	movlw	255
 19214  00493C  2412               	addwf	dispLogs@myLog,w,c
 19215  00493E  6E07               	movwf	retrieveLog@logNum,c
 19216  004940  0EFF               	movlw	255
 19217  004942  2013               	addwfc	dispLogs@myLog+1,w,c
 19218  004944  6E08               	movwf	retrieveLog@logNum+1,c
 19219  004946  ECF1  F018         	call	_retrieveLog	;wreg free
 19220  00494A  0012               	return		;funcret
 19221  00494C                     __end_of_dispLogs:
 19222                           	opt stack 0
 19223                           pclatu	equ	0xFFB
 19224                           pclath	equ	0xFFA
 19225                           tblptru	equ	0xFF8
 19226                           tblptrh	equ	0xFF7
 19227                           tblptrl	equ	0xFF6
 19228                           tablat	equ	0xFF5
 19229                           prodh	equ	0xFF4
 19230                           prodl	equ	0xFF3
 19231                           intcon	equ	0xFF2
 19232                           intcon2	equ	0xFF1
 19233                           intcon3	equ	0xFF0
 19234                           indf0	equ	0xFEF
 19235                           postinc0	equ	0xFEE
 19236                           fsr0h	equ	0xFEA
 19237                           fsr0l	equ	0xFE9
 19238                           wreg	equ	0xFE8
 19239                           postdec1	equ	0xFE5
 19240                           fsr1h	equ	0xFE2
 19241                           fsr1l	equ	0xFE1
 19242                           indf2	equ	0xFDF
 19243                           postinc2	equ	0xFDE
 19244                           postdec2	equ	0xFDD
 19245                           fsr2h	equ	0xFDA
 19246                           fsr2l	equ	0xFD9
 19247                           status	equ	0xFD8
 19248                           
 19249 ;; *************** function _retrieveLog *****************
 19250 ;; Defined at:
 19251 ;;		line 134 in file "EEPROM.c"
 19252 ;; Parameters:    Size  Location     Type
 19253 ;;  logNum          2    6[COMRAM] int 
 19254 ;; Auto vars:     Size  Location     Type
 19255 ;;  i               2   13[COMRAM] int 
 19256 ;;  addr            2   15[COMRAM] unsigned short 
 19257 ;;  byte3           1   12[COMRAM] unsigned char 
 19258 ;;  byte2           1   11[COMRAM] unsigned char 
 19259 ;;  byte1           1   10[COMRAM] unsigned char 
 19260 ;; Return value:  Size  Location     Type
 19261 ;;                  1    wreg      void 
 19262 ;; Registers used:
 19263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19264 ;; Tracked objects:
 19265 ;;		On entry : 0/0
 19266 ;;		On exit  : 0/0
 19267 ;;		Unchanged: 0/0
 19268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19269 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19270 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19271 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19272 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19273 ;;Total ram usage:       11 bytes
 19274 ;; Hardware stack levels used:    1
 19275 ;; Hardware stack levels required when called:    1
 19276 ;; This function calls:
 19277 ;;		i2_EEPROM_read
 19278 ;;		i2___wmul
 19279 ;; This function is called by:
 19280 ;;		_dispLogs
 19281 ;; This function uses a non-reentrant model
 19282 ;;
 19283                           
 19284                           	psect	text76
 19285  0031E2                     __ptext76:
 19286                           	opt stack 0
 19287  0031E2                     _retrieveLog:
 19288                           	opt stack 20
 19289                           
 19290                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 19291                           
 19292                           ;incstack = 0
 19293  0031E2  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 19294  0031E6  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 19295  0031EA  0E00               	movlw	0
 19296  0031EC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19297  0031EE  0E0B               	movlw	11
 19298  0031F0  6E03               	movwf	i2___wmul@multiplicand,c
 19299  0031F2  EC6E  F024         	call	i2___wmul	;wreg free
 19300  0031F6  0E01               	movlw	1
 19301  0031F8  2401               	addwf	?i2___wmul,w,c
 19302  0031FA  6E10               	movwf	retrieveLog@addr,c
 19303  0031FC  0E00               	movlw	0
 19304  0031FE  2002               	addwfc	?i2___wmul+1,w,c
 19305  003200  6E11               	movwf	retrieveLog@addr+1,c
 19306                           
 19307                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 19308  003202  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19309  003206  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19310  00320A  ECEE  F024         	call	i2_EEPROM_read	;wreg free
 19311  00320E  6E0B               	movwf	retrieveLog@byte1,c
 19312                           
 19313                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 19314  003210  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19315  003214  0E80               	movlw	128
 19316  003216  1609               	andwf	??_retrieveLog,f,c
 19317  003218  5009               	movf	??_retrieveLog,w,c
 19318  00321A  0100               	movlb	0	; () banked
 19319  00321C  6FEC               	movwf	_log_completion& (0+255),b
 19320  00321E  6BED               	clrf	(_log_completion+1)& (0+255),b
 19321                           
 19322                           ; BSR set to: 0
 19323                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 19324  003220  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19325  003224  0E0F               	movlw	15
 19326  003226  1609               	andwf	??_retrieveLog,f,c
 19327  003228  5009               	movf	??_retrieveLog,w,c
 19328  00322A  6E75               	movwf	_log_count_total,c
 19329  00322C  6A76               	clrf	_log_count_total+1,c
 19330                           
 19331                           ; BSR set to: 0
 19332                           ;EEPROM.c: 146: addr++;
 19333  00322E  4A10               	infsnz	retrieveLog@addr,f,c
 19334  003230  2A11               	incf	retrieveLog@addr+1,f,c
 19335                           
 19336                           ; BSR set to: 0
 19337                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 19338  003232  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19339  003236  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19340  00323A  ECEE  F024         	call	i2_EEPROM_read	;wreg free
 19341  00323E  6E0C               	movwf	retrieveLog@byte2,c
 19342                           
 19343                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 19344  003240  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19345  003244  3A09               	swapf	??_retrieveLog,f,c
 19346  003246  0E0F               	movlw	15
 19347  003248  1609               	andwf	??_retrieveLog,f,c
 19348  00324A  0E0F               	movlw	15
 19349  00324C  1609               	andwf	??_retrieveLog,f,c
 19350  00324E  5009               	movf	??_retrieveLog,w,c
 19351  003250  0100               	movlb	0	; () banked
 19352  003252  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 19353  003254  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 19354                           
 19355                           ; BSR set to: 0
 19356                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 19357  003256  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19358  00325A  0E0F               	movlw	15
 19359  00325C  1609               	andwf	??_retrieveLog,f,c
 19360  00325E  5009               	movf	??_retrieveLog,w,c
 19361  003260  0100               	movlb	0	; () banked
 19362  003262  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 19363  003264  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;EEPROM.c: 152: addr++;
 19367  003266  4A10               	infsnz	retrieveLog@addr,f,c
 19368  003268  2A11               	incf	retrieveLog@addr+1,f,c
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 19372  00326A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19373  00326E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19374  003272  ECEE  F024         	call	i2_EEPROM_read	;wreg free
 19375  003276  6E0D               	movwf	retrieveLog@byte3,c
 19376                           
 19377                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 19378  003278  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19379  00327C  3A09               	swapf	??_retrieveLog,f,c
 19380  00327E  0E0F               	movlw	15
 19381  003280  1609               	andwf	??_retrieveLog,f,c
 19382  003282  0E0F               	movlw	15
 19383  003284  1609               	andwf	??_retrieveLog,f,c
 19384  003286  5009               	movf	??_retrieveLog,w,c
 19385  003288  6E73               	movwf	_log_count_can_w_lab,c
 19386  00328A  6A74               	clrf	_log_count_can_w_lab+1,c
 19387                           
 19388                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 19389  00328C  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19390  003290  0E0F               	movlw	15
 19391  003292  1609               	andwf	??_retrieveLog,f,c
 19392  003294  5009               	movf	??_retrieveLog,w,c
 19393  003296  0100               	movlb	0	; () banked
 19394  003298  6FEE               	movwf	_log_count_can_no_lab& (0+255),b
 19395  00329A  6BEF               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 19396                           
 19397                           ; BSR set to: 0
 19398                           ;EEPROM.c: 156: addr++;
 19399  00329C  4A10               	infsnz	retrieveLog@addr,f,c
 19400  00329E  2A11               	incf	retrieveLog@addr+1,f,c
 19401                           
 19402                           ; BSR set to: 0
 19403                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 19404  0032A0  0E00               	movlw	0
 19405  0032A2  6E0F               	movwf	retrieveLog@i+1,c
 19406  0032A4  0E00               	movlw	0
 19407  0032A6  6E0E               	movwf	retrieveLog@i,c
 19408  0032A8                     i2l6158:
 19409                           
 19410                           ; BSR set to: 0
 19411  0032A8  BE0F               	btfsc	retrieveLog@i+1,7,c
 19412  0032AA  D006               	goto	i2l6162
 19413  0032AC  500F               	movf	retrieveLog@i+1,w,c
 19414  0032AE  E11E               	bnz	i2l6170
 19415  0032B0  0E07               	movlw	7
 19416  0032B2  5C0E               	subwf	retrieveLog@i,w,c
 19417  0032B4  B0D8               	btfsc	status,0,c
 19418  0032B6  D01A               	goto	i2l6170
 19419  0032B8                     i2l6162:
 19420                           
 19421                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 19422  0032B8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19423  0032BC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19424  0032C0  ECEE  F024         	call	i2_EEPROM_read	;wreg free
 19425  0032C4  6E09               	movwf	??_retrieveLog& (0+255),c
 19426  0032C6  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 19427  0032C8  90D8               	bcf	status,0,c
 19428  0032CA  340E               	rlcf	retrieveLog@i,w,c
 19429  0032CC  6ED9               	movwf	fsr2l,c
 19430  0032CE  340F               	rlcf	retrieveLog@i+1,w,c
 19431  0032D0  6EDA               	movwf	fsr2h,c
 19432  0032D2  0E00               	movlw	low _log_startTime
 19433  0032D4  26D9               	addwf	fsr2l,f,c
 19434  0032D6  0E01               	movlw	high _log_startTime
 19435  0032D8  22DA               	addwfc	fsr2h,f,c
 19436  0032DA  C009  FFDE         	movff	??_retrieveLog,postinc2
 19437  0032DE  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 19438                           
 19439                           ;EEPROM.c: 161: addr++;
 19440  0032E2  4A10               	infsnz	retrieveLog@addr,f,c
 19441  0032E4  2A11               	incf	retrieveLog@addr+1,f,c
 19442  0032E6  4A0E               	infsnz	retrieveLog@i,f,c
 19443  0032E8  2A0F               	incf	retrieveLog@i+1,f,c
 19444  0032EA  D7DE               	goto	i2l6158
 19445  0032EC                     i2l6170:
 19446                           
 19447                           ;EEPROM.c: 162: }
 19448                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 19449  0032EC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19450  0032F0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19451  0032F4  ECEE  F024         	call	i2_EEPROM_read	;wreg free
 19452  0032F8  6E09               	movwf	??_retrieveLog& (0+255),c
 19453  0032FA  5009               	movf	??_retrieveLog,w,c
 19454  0032FC  0100               	movlb	0	; () banked
 19455  0032FE  6FF4               	movwf	_log_total_time& (0+255),b
 19456  003300  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 19457                           
 19458                           ; BSR set to: 0
 19459  003302  0012               	return		;funcret
 19460  003304                     __end_of_retrieveLog:
 19461                           	opt stack 0
 19462                           pclatu	equ	0xFFB
 19463                           pclath	equ	0xFFA
 19464                           tblptru	equ	0xFF8
 19465                           tblptrh	equ	0xFF7
 19466                           tblptrl	equ	0xFF6
 19467                           tablat	equ	0xFF5
 19468                           prodh	equ	0xFF4
 19469                           prodl	equ	0xFF3
 19470                           intcon	equ	0xFF2
 19471                           intcon2	equ	0xFF1
 19472                           intcon3	equ	0xFF0
 19473                           indf0	equ	0xFEF
 19474                           postinc0	equ	0xFEE
 19475                           fsr0h	equ	0xFEA
 19476                           fsr0l	equ	0xFE9
 19477                           wreg	equ	0xFE8
 19478                           postdec1	equ	0xFE5
 19479                           fsr1h	equ	0xFE2
 19480                           fsr1l	equ	0xFE1
 19481                           indf2	equ	0xFDF
 19482                           postinc2	equ	0xFDE
 19483                           postdec2	equ	0xFDD
 19484                           fsr2h	equ	0xFDA
 19485                           fsr2l	equ	0xFD9
 19486                           status	equ	0xFD8
 19487                           
 19488 ;; *************** function i2_EEPROM_read *****************
 19489 ;; Defined at:
 19490 ;;		line 68 in file "EEPROM.c"
 19491 ;; Parameters:    Size  Location     Type
 19492 ;;  address         2    0[COMRAM] unsigned short 
 19493 ;; Auto vars:     Size  Location     Type
 19494 ;;		None
 19495 ;; Return value:  Size  Location     Type
 19496 ;;                  1    wreg      unsigned char 
 19497 ;; Registers used:
 19498 ;;		wreg, status,2
 19499 ;; Tracked objects:
 19500 ;;		On entry : 0/0
 19501 ;;		On exit  : 0/0
 19502 ;;		Unchanged: 0/0
 19503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19507 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19508 ;;Total ram usage:        2 bytes
 19509 ;; Hardware stack levels used:    1
 19510 ;; This function calls:
 19511 ;;		Nothing
 19512 ;; This function is called by:
 19513 ;;		_retrieveLog
 19514 ;; This function uses a non-reentrant model
 19515 ;;
 19516                           
 19517                           	psect	text77
 19518  0049DC                     __ptext77:
 19519                           	opt stack 0
 19520  0049DC                     i2_EEPROM_read:
 19521                           	opt stack 20
 19522                           
 19523                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 19524                           
 19525                           ; BSR set to: 0
 19526                           ;incstack = 0
 19527  0049DC  5002               	movf	i2EEPROM_read@address+1,w,c
 19528  0049DE  6EAA               	movwf	4010,c	;volatile
 19529                           
 19530                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19531  0049E0  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19532                           
 19533                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19534  0049E4  9EA6               	bcf	4006,7,c	;volatile
 19535                           
 19536                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19537  0049E6  9CA6               	bcf	4006,6,c	;volatile
 19538                           
 19539                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19540  0049E8  80A6               	bsf	4006,0,c	;volatile
 19541  0049EA                     i2l956:
 19542  0049EA  B0A6               	btfsc	4006,0,c	;volatile
 19543  0049EC  D7FE               	goto	i2l956
 19544                           
 19545                           ;EEPROM.c: 81: return EEDATA;
 19546  0049EE  50A8               	movf	4008,w,c	;volatile
 19547  0049F0  0012               	return	
 19548  0049F2                     __end_ofi2_EEPROM_read:
 19549                           	opt stack 0
 19550                           pclatu	equ	0xFFB
 19551                           pclath	equ	0xFFA
 19552                           tblptru	equ	0xFF8
 19553                           tblptrh	equ	0xFF7
 19554                           tblptrl	equ	0xFF6
 19555                           tablat	equ	0xFF5
 19556                           prodh	equ	0xFF4
 19557                           prodl	equ	0xFF3
 19558                           intcon	equ	0xFF2
 19559                           intcon2	equ	0xFF1
 19560                           intcon3	equ	0xFF0
 19561                           indf0	equ	0xFEF
 19562                           postinc0	equ	0xFEE
 19563                           fsr0h	equ	0xFEA
 19564                           fsr0l	equ	0xFE9
 19565                           wreg	equ	0xFE8
 19566                           postdec1	equ	0xFE5
 19567                           fsr1h	equ	0xFE2
 19568                           fsr1l	equ	0xFE1
 19569                           indf2	equ	0xFDF
 19570                           postinc2	equ	0xFDE
 19571                           postdec2	equ	0xFDD
 19572                           fsr2h	equ	0xFDA
 19573                           fsr2l	equ	0xFD9
 19574                           status	equ	0xFD8
 19575                           
 19576 ;; *************** function _printSortTimer *****************
 19577 ;; Defined at:
 19578 ;;		line 320 in file "sort.c"
 19579 ;; Parameters:    Size  Location     Type
 19580 ;;		None
 19581 ;; Auto vars:     Size  Location     Type
 19582 ;;  i               2   72[COMRAM] int 
 19583 ;;  curTime        14   46[COMRAM] int [7]
 19584 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19585 ;;  sec             2   66[COMRAM] int 
 19586 ;;  min             2   64[COMRAM] int 
 19587 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19588 ;;  start_sec       2   60[COMRAM] unsigned int 
 19589 ;;  hour            2   44[COMRAM] int 
 19590 ;; Return value:  Size  Location     Type
 19591 ;;                  1    wreg      void 
 19592 ;; Registers used:
 19593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19594 ;; Tracked objects:
 19595 ;;		On entry : 0/0
 19596 ;;		On exit  : 0/0
 19597 ;;		Unchanged: 0/0
 19598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19600 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19601 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19602 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19603 ;;Total ram usage:       33 bytes
 19604 ;; Hardware stack levels used:    1
 19605 ;; Hardware stack levels required when called:    3
 19606 ;; This function calls:
 19607 ;;		i2___lwdiv
 19608 ;;		i2___lwmod
 19609 ;;		i2___wmul
 19610 ;;		i2_getRTC
 19611 ;;		i2_lcdInst
 19612 ;;		i2_printf
 19613 ;; This function is called by:
 19614 ;;		_handler
 19615 ;; This function uses a non-reentrant model
 19616 ;;
 19617                           
 19618                           	psect	text78
 19619  002B5C                     __ptext78:
 19620                           	opt stack 0
 19621  002B5C                     _printSortTimer:
 19622                           	opt stack 20
 19623                           
 19624                           ;sort.c: 321: getRTC();
 19625                           
 19626                           ;incstack = 0
 19627  002B5C  EC86  F01F         	call	i2_getRTC	;wreg free
 19628                           
 19629                           ;sort.c: 322: int curTime[7];
 19630                           ;sort.c: 323: for(int i = 0; i < 7; i++){
 19631  002B60  0E00               	movlw	0
 19632  002B62  6E4A               	movwf	printSortTimer@i+1,c
 19633  002B64  0E00               	movlw	0
 19634  002B66  6E49               	movwf	printSortTimer@i,c
 19635  002B68                     i2l8322:
 19636  002B68  BE4A               	btfsc	printSortTimer@i+1,7,c
 19637  002B6A  D006               	goto	i2l8326
 19638  002B6C  504A               	movf	printSortTimer@i+1,w,c
 19639  002B6E  E131               	bnz	i2l8332
 19640  002B70  0E07               	movlw	7
 19641  002B72  5C49               	subwf	printSortTimer@i,w,c
 19642  002B74  B0D8               	btfsc	status,0,c
 19643  002B76  D02D               	goto	i2l8332
 19644  002B78                     i2l8326:
 19645                           
 19646                           ;sort.c: 324: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19647  002B78  0E24               	movlw	low _time
 19648  002B7A  2449               	addwf	printSortTimer@i,w,c
 19649  002B7C  6ED9               	movwf	fsr2l,c
 19650  002B7E  0E01               	movlw	high _time
 19651  002B80  204A               	addwfc	printSortTimer@i+1,w,c
 19652  002B82  6EDA               	movwf	fsr2h,c
 19653  002B84  50DF               	movf	indf2,w,c
 19654  002B86  6E2A               	movwf	??_printSortTimer& (0+255),c
 19655  002B88  3A2A               	swapf	??_printSortTimer,f,c
 19656  002B8A  0E0F               	movlw	15
 19657  002B8C  162A               	andwf	??_printSortTimer,f,c
 19658  002B8E  0E0F               	movlw	15
 19659  002B90  162A               	andwf	??_printSortTimer,f,c
 19660  002B92  502A               	movf	??_printSortTimer,w,c
 19661  002B94  0D0A               	mullw	10
 19662  002B96  0E24               	movlw	low _time
 19663  002B98  2449               	addwf	printSortTimer@i,w,c
 19664  002B9A  6ED9               	movwf	fsr2l,c
 19665  002B9C  0E01               	movlw	high _time
 19666  002B9E  204A               	addwfc	printSortTimer@i+1,w,c
 19667  002BA0  6EDA               	movwf	fsr2h,c
 19668  002BA2  50DF               	movf	indf2,w,c
 19669  002BA4  0B0F               	andlw	15
 19670  002BA6  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19671  002BA8  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19672  002BAA  50F3               	movf	prodl,w,c
 19673  002BAC  262B               	addwf	??_printSortTimer+1,f,c
 19674  002BAE  50F4               	movf	prodh,w,c
 19675  002BB0  222C               	addwfc	??_printSortTimer+2,f,c
 19676  002BB2  90D8               	bcf	status,0,c
 19677  002BB4  3449               	rlcf	printSortTimer@i,w,c
 19678  002BB6  6ED9               	movwf	fsr2l,c
 19679  002BB8  344A               	rlcf	printSortTimer@i+1,w,c
 19680  002BBA  6EDA               	movwf	fsr2h,c
 19681  002BBC  0E2F               	movlw	low printSortTimer@curTime
 19682  002BBE  26D9               	addwf	fsr2l,f,c
 19683  002BC0  0E00               	movlw	high printSortTimer@curTime
 19684  002BC2  22DA               	addwfc	fsr2h,f,c
 19685  002BC4  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19686  002BC8  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19687  002BCC  4A49               	infsnz	printSortTimer@i,f,c
 19688  002BCE  2A4A               	incf	printSortTimer@i+1,f,c
 19689  002BD0  D7CB               	goto	i2l8322
 19690  002BD2                     i2l8332:
 19691                           
 19692                           ;sort.c: 325: }
 19693                           ;sort.c: 326: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19694  002BD2  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19695  002BD6  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19696  002BDA  0E00               	movlw	0
 19697  002BDC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19698  002BDE  0E3C               	movlw	60
 19699  002BE0  6E03               	movwf	i2___wmul@multiplicand,c
 19700  002BE2  EC6E  F024         	call	i2___wmul	;wreg free
 19701  002BE6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19702  002BEA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19703  002BEE  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19704  002BF2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19705  002BF6  0E0E               	movlw	14
 19706  002BF8  6E04               	movwf	i2___wmul@multiplicand+1,c
 19707  002BFA  0E10               	movlw	16
 19708  002BFC  6E03               	movwf	i2___wmul@multiplicand,c
 19709  002BFE  EC6E  F024         	call	i2___wmul	;wreg free
 19710  002C02  5001               	movf	?i2___wmul,w,c
 19711  002C04  262A               	addwf	??_printSortTimer,f,c
 19712  002C06  5002               	movf	?i2___wmul+1,w,c
 19713  002C08  222B               	addwfc	??_printSortTimer+1,f,c
 19714  002C0A  0101               	movlb	1	; () banked
 19715  002C0C  510E               	movf	_startTime& (0+255),w,b
 19716  002C0E  242A               	addwf	??_printSortTimer,w,c
 19717  002C10  6E3D               	movwf	printSortTimer@start_sec,c
 19718  002C12  0101               	movlb	1	; () banked
 19719  002C14  510F               	movf	(_startTime+1)& (0+255),w,b
 19720  002C16  202B               	addwfc	??_printSortTimer+1,w,c
 19721  002C18  6E3E               	movwf	printSortTimer@start_sec+1,c
 19722                           
 19723                           ;sort.c: 327: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19724  002C1A  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19725  002C1E  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19726  002C22  0E00               	movlw	0
 19727  002C24  6E04               	movwf	i2___wmul@multiplicand+1,c
 19728  002C26  0E3C               	movlw	60
 19729  002C28  6E03               	movwf	i2___wmul@multiplicand,c
 19730  002C2A  EC6E  F024         	call	i2___wmul	;wreg free
 19731  002C2E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19732  002C32  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19733  002C36  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19734  002C3A  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19735  002C3E  0E0E               	movlw	14
 19736  002C40  6E04               	movwf	i2___wmul@multiplicand+1,c
 19737  002C42  0E10               	movlw	16
 19738  002C44  6E03               	movwf	i2___wmul@multiplicand,c
 19739  002C46  EC6E  F024         	call	i2___wmul	;wreg free
 19740  002C4A  5001               	movf	?i2___wmul,w,c
 19741  002C4C  262A               	addwf	??_printSortTimer,f,c
 19742  002C4E  5002               	movf	?i2___wmul+1,w,c
 19743  002C50  222B               	addwfc	??_printSortTimer+1,f,c
 19744  002C52  502F               	movf	printSortTimer@curTime,w,c
 19745  002C54  242A               	addwf	??_printSortTimer,w,c
 19746  002C56  6E3F               	movwf	printSortTimer@cur_sec,c
 19747  002C58  5030               	movf	printSortTimer@curTime+1,w,c
 19748  002C5A  202B               	addwfc	??_printSortTimer+1,w,c
 19749  002C5C  6E40               	movwf	printSortTimer@cur_sec+1,c
 19750                           
 19751                           ;sort.c: 328: unsigned int timeDiff = cur_sec - start_sec;
 19752  002C5E  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19753  002C62  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19754  002C66  1E2A               	comf	??_printSortTimer,f,c
 19755  002C68  1E2B               	comf	??_printSortTimer+1,f,c
 19756  002C6A  4A2A               	infsnz	??_printSortTimer,f,c
 19757  002C6C  2A2B               	incf	??_printSortTimer+1,f,c
 19758  002C6E  503F               	movf	printSortTimer@cur_sec,w,c
 19759  002C70  242A               	addwf	??_printSortTimer,w,c
 19760  002C72  6E47               	movwf	printSortTimer@timeDiff,c
 19761  002C74  5040               	movf	printSortTimer@cur_sec+1,w,c
 19762  002C76  202B               	addwfc	??_printSortTimer+1,w,c
 19763  002C78  6E48               	movwf	printSortTimer@timeDiff+1,c
 19764                           
 19765                           ;sort.c: 330: total_time = timeDiff;
 19766  002C7A  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19767  002C7E  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19768                           
 19769                           ;sort.c: 332: if(timeDiff >= 179){
 19770  002C82  5048               	movf	printSortTimer@timeDiff+1,w,c
 19771  002C84  E104               	bnz	i2u726_40
 19772  002C86  0EB3               	movlw	179
 19773  002C88  5C47               	subwf	printSortTimer@timeDiff,w,c
 19774  002C8A  A0D8               	btfss	status,0,c
 19775  002C8C  D003               	goto	i2l8342
 19776  002C8E                     i2u726_40:
 19777                           
 19778                           ;sort.c: 333: machine_state = DoneSorting_state;
 19779  002C8E  0E02               	movlw	2
 19780  002C90  0100               	movlb	0	; () banked
 19781  002C92  6FFC               	movwf	_machine_state& (0+255),b
 19782  002C94                     i2l8342:
 19783                           
 19784                           ;sort.c: 335: }
 19785                           ;sort.c: 337: int hour = timeDiff / 3600;
 19786  002C94  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19787  002C98  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19788  002C9C  0E0E               	movlw	14
 19789  002C9E  6E09               	movwf	i2___lwdiv@divisor+1,c
 19790  002CA0  0E10               	movlw	16
 19791  002CA2  6E08               	movwf	i2___lwdiv@divisor,c
 19792  002CA4  EC68  F021         	call	i2___lwdiv	;wreg free
 19793  002CA8  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19794  002CAC  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19795                           
 19796                           ;sort.c: 338: int min = (timeDiff % 3600) / 60;
 19797  002CB0  0E0E               	movlw	14
 19798  002CB2  6E04               	movwf	i2___lwmod@divisor+1,c
 19799  002CB4  0E10               	movlw	16
 19800  002CB6  6E03               	movwf	i2___lwmod@divisor,c
 19801  002CB8  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19802  002CBC  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19803  002CC0  EC27  F022         	call	i2___lwmod	;wreg free
 19804  002CC4  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19805  002CC8  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19806  002CCC  0E00               	movlw	0
 19807  002CCE  6E09               	movwf	i2___lwdiv@divisor+1,c
 19808  002CD0  0E3C               	movlw	60
 19809  002CD2  6E08               	movwf	i2___lwdiv@divisor,c
 19810  002CD4  EC68  F021         	call	i2___lwdiv	;wreg free
 19811  002CD8  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19812  002CDC  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19813                           
 19814                           ;sort.c: 339: int sec = (timeDiff % 3600) % 60;
 19815  002CE0  0E0E               	movlw	14
 19816  002CE2  6E04               	movwf	i2___lwmod@divisor+1,c
 19817  002CE4  0E10               	movlw	16
 19818  002CE6  6E03               	movwf	i2___lwmod@divisor,c
 19819  002CE8  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19820  002CEC  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19821  002CF0  EC27  F022         	call	i2___lwmod	;wreg free
 19822  002CF4  C001  F045         	movff	?i2___lwmod,_printSortTimer$2435
 19823  002CF8  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2435+1
 19824                           
 19825                           ;sort.c: 339: int sec = (timeDiff % 3600) % 60;
 19826  002CFC  C045  F001         	movff	_printSortTimer$2435,i2___lwmod@dividend
 19827  002D00  C046  F002         	movff	_printSortTimer$2435+1,i2___lwmod@dividend+1
 19828  002D04  0E00               	movlw	0
 19829  002D06  6E04               	movwf	i2___lwmod@divisor+1,c
 19830  002D08  0E3C               	movlw	60
 19831  002D0A  6E03               	movwf	i2___lwmod@divisor,c
 19832  002D0C  EC27  F022         	call	i2___lwmod	;wreg free
 19833  002D10  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19834  002D14  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19835                           
 19836                           ;sort.c: 341: lcdInst(0b10000000);;
 19837  002D18  0E80               	movlw	128
 19838  002D1A  EC22  F025         	call	i2_lcdInst
 19839                           
 19840                           ;sort.c: 342: printf("SORTING...");
 19841  002D1E  0E7C               	movlw	low STR_64
 19842  002D20  6E0D               	movwf	i2printf@f,c
 19843  002D22  0EFF               	movlw	high STR_64
 19844  002D24  6E0E               	movwf	i2printf@f+1,c
 19845  002D26  EC96  F00C         	call	i2_printf	;wreg free
 19846                           
 19847                           ;sort.c: 343: lcdInst(0b11000000);;
 19848  002D2A  0EC0               	movlw	192
 19849  002D2C  EC22  F025         	call	i2_lcdInst
 19850                           
 19851                           ;sort.c: 344: printf("TIME %d:%02d", min, sec);
 19852  002D30  0E42               	movlw	low STR_65
 19853  002D32  6E0D               	movwf	i2printf@f,c
 19854  002D34  0EFF               	movlw	high STR_65
 19855  002D36  6E0E               	movwf	i2printf@f+1,c
 19856  002D38  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19857  002D3C  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19858  002D40  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19859  002D44  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19860  002D48  EC96  F00C         	call	i2_printf	;wreg free
 19861  002D4C  0012               	return		;funcret
 19862  002D4E                     __end_of_printSortTimer:
 19863                           	opt stack 0
 19864                           pclatu	equ	0xFFB
 19865                           pclath	equ	0xFFA
 19866                           tblptru	equ	0xFF8
 19867                           tblptrh	equ	0xFF7
 19868                           tblptrl	equ	0xFF6
 19869                           tablat	equ	0xFF5
 19870                           prodh	equ	0xFF4
 19871                           prodl	equ	0xFF3
 19872                           intcon	equ	0xFF2
 19873                           intcon2	equ	0xFF1
 19874                           intcon3	equ	0xFF0
 19875                           indf0	equ	0xFEF
 19876                           postinc0	equ	0xFEE
 19877                           fsr0h	equ	0xFEA
 19878                           fsr0l	equ	0xFE9
 19879                           wreg	equ	0xFE8
 19880                           postdec1	equ	0xFE5
 19881                           fsr1h	equ	0xFE2
 19882                           fsr1l	equ	0xFE1
 19883                           indf2	equ	0xFDF
 19884                           postinc2	equ	0xFDE
 19885                           postdec2	equ	0xFDD
 19886                           fsr2h	equ	0xFDA
 19887                           fsr2l	equ	0xFD9
 19888                           status	equ	0xFD8
 19889                           
 19890 ;; *************** function i2_printf *****************
 19891 ;; Defined at:
 19892 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19893 ;; Parameters:    Size  Location     Type
 19894 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19895 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 19896 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19897 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19898 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19899 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19900 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19901 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19902 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19903 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19904 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19905 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19906 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19907 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19908 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19909 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19910 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19911 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19912 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19913 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19914 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19915 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 19916 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19917 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19918 ;;		 -> STR_2(14), STR_1(18), 
 19919 ;; Auto vars:     Size  Location     Type
 19920 ;;  printf          4    0        struct .
 19921 ;;  printf          2   39[COMRAM] int 
 19922 ;;  printf          2   35[COMRAM] unsigned int 
 19923 ;;  printf          2   33[COMRAM] unsigned int 
 19924 ;;  printf          2   31[COMRAM] PTR void [1]
 19925 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19926 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19927 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 19928 ;;  printf          1   38[COMRAM] char 
 19929 ;;  printf          1   37[COMRAM] unsigned char 
 19930 ;;  printf          1   28[COMRAM] char 
 19931 ;; Return value:  Size  Location     Type
 19932 ;;                  2   12[COMRAM] int 
 19933 ;; Registers used:
 19934 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19935 ;; Tracked objects:
 19936 ;;		On entry : 0/0
 19937 ;;		On exit  : 0/0
 19938 ;;		Unchanged: 0/0
 19939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19940 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19941 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19942 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19943 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19944 ;;Total ram usage:       29 bytes
 19945 ;; Hardware stack levels used:    1
 19946 ;; Hardware stack levels required when called:    2
 19947 ;; This function calls:
 19948 ;;		i2___lwdiv
 19949 ;;		i2___lwmod
 19950 ;;		i2___wmul
 19951 ;;		i2_isdigit
 19952 ;;		i2_putch
 19953 ;; This function is called by:
 19954 ;;		_change_state_to_menu_11
 19955 ;;		_change_state_to_menu_23
 19956 ;;		_change_state_to_logs_11
 19957 ;;		_change_state_to_logs_12
 19958 ;;		_change_state_to_logs_22
 19959 ;;		_change_state_to_logs_23
 19960 ;;		_change_state_to_logs_33
 19961 ;;		_change_state_to_logs_34
 19962 ;;		_printSortTimer
 19963 ;;		i2_change_state_to_menu_start
 19964 ;;		i2_change_state_to_menu_12
 19965 ;;		i2_change_state_to_menu_22
 19966 ;;		i2_printRTC
 19967 ;; This function uses a non-reentrant model
 19968 ;;
 19969                           
 19970                           	psect	text79
 19971  00192C                     __ptext79:
 19972                           	opt stack 0
 19973  00192C                     i2_printf:
 19974                           	opt stack 19
 19975                           
 19976                           ;doprnt.c: 466: va_list ap;
 19977                           ;doprnt.c: 499: signed char c;
 19978                           ;doprnt.c: 501: int width;
 19979                           ;doprnt.c: 506: signed char prec;
 19980                           ;doprnt.c: 508: unsigned char flag;
 19981                           ;doprnt.c: 523: union {
 19982                           ;doprnt.c: 524: unsigned long vd;
 19983                           ;doprnt.c: 525: double integ;
 19984                           ;doprnt.c: 526: } tmpval;
 19985                           ;doprnt.c: 528: unsigned int val;
 19986                           ;doprnt.c: 529: unsigned len;
 19987                           ;doprnt.c: 530: const char * cp;
 19988                           ;doprnt.c: 533: *ap = __va_start();
 19989                           
 19990                           ;incstack = 0
 19991  00192C  0E0F               	movlw	low (?i2_printf+2)
 19992  00192E  6E20               	movwf	i2printf@ap,c
 19993  001930  0E00               	movlw	high (?i2_printf+2)
 19994  001932  6E21               	movwf	i2printf@ap+1,c
 19995                           
 19996                           ;doprnt.c: 536: while(c = *f++) {
 19997  001934  D1A4               	goto	i2l5982
 19998  001936                     i2l5852:
 19999                           
 20000                           ;doprnt.c: 538: if(c != '%')
 20001  001936  0E25               	movlw	37
 20002  001938  1827               	xorwf	i2printf@c,w,c
 20003  00193A  B4D8               	btfsc	status,2,c
 20004  00193C  D004               	goto	i2l5856
 20005                           
 20006                           ;doprnt.c: 540: {
 20007                           ;doprnt.c: 541: (putch(c) );
 20008  00193E  5027               	movf	i2printf@c,w,c
 20009  001940  EC1C  F025         	call	i2_putch
 20010                           
 20011                           ;doprnt.c: 542: continue;
 20012  001944  D19C               	goto	i2l5982
 20013  001946                     i2l5856:
 20014                           
 20015                           ;doprnt.c: 543: }
 20016                           ;doprnt.c: 546: width = 0;
 20017  001946  0E00               	movlw	0
 20018  001948  6E29               	movwf	i2printf@width+1,c
 20019  00194A  0E00               	movlw	0
 20020  00194C  6E28               	movwf	i2printf@width,c
 20021                           
 20022                           ;doprnt.c: 548: flag = 0;
 20023  00194E  0E00               	movlw	0
 20024  001950  6E26               	movwf	i2printf@flag,c
 20025                           
 20026                           ;doprnt.c: 551: switch(*f) {
 20027                           
 20028                           ;doprnt.c: 550: for(;;) {
 20029  001952  D003               	goto	i2l5862
 20030  001954                     i2l5858:
 20031                           
 20032                           ;doprnt.c: 580: flag |= 0x04;
 20033  001954  8426               	bsf	i2printf@flag,2,c
 20034                           
 20035                           ;doprnt.c: 581: f++;
 20036  001956  4A0D               	infsnz	i2printf@f,f,c
 20037  001958  2A0E               	incf	i2printf@f+1,f,c
 20038  00195A                     i2l5862:
 20039  00195A  C00D  FFF6         	movff	i2printf@f,tblptrl
 20040  00195E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20041  001962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20042  001962  6AF8               	clrf	tblptru,c
 20043  001964                     	endif
 20044  001964                     	if	0	;tblptru may be non-zero
 20045  001964                     	endif
 20046  001964  0008               	tblrd		*
 20047  001966  50F5               	movf	tablat,w,c
 20048                           
 20049                           ; Switch size 1, requested type "space"
 20050                           ; Number of cases is 1, Range of values is 48 to 48
 20051                           ; switch strategies available:
 20052                           ; Name         Instructions Cycles
 20053                           ; simple_byte            4     3 (average)
 20054                           ;	Chosen strategy is simple_byte
 20055  001968  0A30               	xorlw	48	; case 48
 20056  00196A  B4D8               	btfsc	status,2,c
 20057  00196C  D7F3               	goto	i2l5858
 20058                           
 20059                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 20060                           
 20061                           ;doprnt.c: 586: }
 20062                           
 20063                           ;doprnt.c: 585: break;
 20064  00196E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20065  001972  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20066  001976                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20067  001976  6AF8               	clrf	tblptru,c
 20068  001978                     	endif
 20069  001978                     	if	0	;tblptru may be non-zero
 20070  001978                     	endif
 20071  001978  0008               	tblrd		*
 20072  00197A  50F5               	movf	tablat,w,c
 20073  00197C  ECC8  F024         	call	i2_isdigit
 20074  001980  A0D8               	btfss	status,0,c
 20075  001982  D0A6               	goto	i2l5910
 20076                           
 20077                           ;doprnt.c: 598: width = 0;
 20078  001984  0E00               	movlw	0
 20079  001986  6E29               	movwf	i2printf@width+1,c
 20080  001988  0E00               	movlw	0
 20081  00198A  6E28               	movwf	i2printf@width,c
 20082  00198C                     i2l5868:
 20083                           
 20084                           ;doprnt.c: 600: width *= 10;
 20085  00198C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 20086  001990  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 20087  001994  0E00               	movlw	0
 20088  001996  6E04               	movwf	i2___wmul@multiplicand+1,c
 20089  001998  0E0A               	movlw	10
 20090  00199A  6E03               	movwf	i2___wmul@multiplicand,c
 20091  00199C  EC6E  F024         	call	i2___wmul	;wreg free
 20092  0019A0  C001  F028         	movff	?i2___wmul,i2printf@width
 20093  0019A4  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 20094                           
 20095                           ;doprnt.c: 601: width += *f++ - '0';
 20096  0019A8  0ED0               	movlw	208
 20097  0019AA  6E19               	movwf	??i2_printf& (0+255),c
 20098  0019AC  0EFF               	movlw	255
 20099  0019AE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20100  0019B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20101  0019B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20102  0019B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20103  0019B8  6AF8               	clrf	tblptru,c
 20104  0019BA                     	endif
 20105  0019BA                     	if	0	;tblptru may be non-zero
 20106  0019BA                     	endif
 20107  0019BA  0008               	tblrd		*
 20108  0019BC  50F5               	movf	tablat,w,c
 20109  0019BE  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 20110  0019C0  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 20111  0019C2  5019               	movf	??i2_printf,w,c
 20112  0019C4  261B               	addwf	??i2_printf+2,f,c
 20113  0019C6  501A               	movf	??i2_printf+1,w,c
 20114  0019C8  221C               	addwfc	??i2_printf+3,f,c
 20115  0019CA  501B               	movf	??i2_printf+2,w,c
 20116  0019CC  2628               	addwf	i2printf@width,f,c
 20117  0019CE  501C               	movf	??i2_printf+3,w,c
 20118  0019D0  2229               	addwfc	i2printf@width+1,f,c
 20119  0019D2  4A0D               	infsnz	i2printf@f,f,c
 20120  0019D4  2A0E               	incf	i2printf@f+1,f,c
 20121                           
 20122                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 20123  0019D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 20124  0019DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20125  0019DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20126  0019DE  6AF8               	clrf	tblptru,c
 20127  0019E0                     	endif
 20128  0019E0                     	if	0	;tblptru may be non-zero
 20129  0019E0                     	endif
 20130  0019E0  0008               	tblrd		*
 20131  0019E2  50F5               	movf	tablat,w,c
 20132  0019E4  ECC8  F024         	call	i2_isdigit
 20133  0019E8  A0D8               	btfss	status,0,c
 20134  0019EA  D072               	goto	i2l5910
 20135  0019EC  D7CF               	goto	i2l5868
 20136  0019EE                     i2l5876:
 20137                           
 20138                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 20139  0019EE  C020  FFD9         	movff	i2printf@ap,fsr2l
 20140  0019F2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20141  0019F6  CFDE F01E          	movff	postinc2,i2printf@cp
 20142  0019FA  CFDD F01F          	movff	postdec2,i2printf@cp+1
 20143  0019FE  0E02               	movlw	2
 20144  001A00  2620               	addwf	i2printf@ap,f,c
 20145  001A02  0E00               	movlw	0
 20146  001A04  2221               	addwfc	i2printf@ap+1,f,c
 20147                           
 20148                           ;doprnt.c: 740: if(!cp)
 20149  001A06  501E               	movf	i2printf@cp,w,c
 20150  001A08  101F               	iorwf	i2printf@cp+1,w,c
 20151  001A0A  A4D8               	btfss	status,2,c
 20152  001A0C  D004               	goto	i2l5884
 20153                           
 20154                           ;doprnt.c: 741: cp = "(null)";
 20155  001A0E  0EB6               	movlw	low STR_120
 20156  001A10  6E1E               	movwf	i2printf@cp,c
 20157  001A12  0EFF               	movlw	high STR_120
 20158  001A14  6E1F               	movwf	i2printf@cp+1,c
 20159  001A16                     i2l5884:
 20160                           
 20161                           ;doprnt.c: 745: len = 0;
 20162  001A16  0E00               	movlw	0
 20163  001A18  6E23               	movwf	i2printf@len+1,c
 20164  001A1A  0E00               	movlw	0
 20165  001A1C  6E22               	movwf	i2printf@len,c
 20166                           
 20167                           ;doprnt.c: 746: while(cp[len])
 20168  001A1E  D002               	goto	i2l5888
 20169  001A20                     i2l5886:
 20170                           
 20171                           ;doprnt.c: 747: len++;
 20172  001A20  4A22               	infsnz	i2printf@len,f,c
 20173  001A22  2A23               	incf	i2printf@len+1,f,c
 20174  001A24                     i2l5888:
 20175  001A24  5022               	movf	i2printf@len,w,c
 20176  001A26  241E               	addwf	i2printf@cp,w,c
 20177  001A28  6E19               	movwf	??i2_printf& (0+255),c
 20178  001A2A  5023               	movf	i2printf@len+1,w,c
 20179  001A2C  201F               	addwfc	i2printf@cp+1,w,c
 20180  001A2E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20181  001A30  C019  FFF6         	movff	??i2_printf,tblptrl
 20182  001A34  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 20183  001A38  0E00               	movlw	low (__mediumconst shr (0+16))
 20184  001A3A  6EF8               	movwf	tblptru,c
 20185  001A3C  0E0F               	movlw	(high __ramtop+-1)
 20186  001A3E  64F7               	cpfsgt	tblptrh,c
 20187  001A40  D003               	bra	i2u441_47
 20188  001A42  0008               	tblrd		*
 20189  001A44  50F5               	movf	tablat,w,c
 20190  001A46  D005               	bra	i2u441_40
 20191  001A48                     i2u441_47:
 20192  001A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 20193  001A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 20194  001A50  50EF               	movf	indf0,w,c
 20195  001A52                     i2u441_40:
 20196  001A52  0900               	iorlw	0
 20197  001A54  A4D8               	btfss	status,2,c
 20198  001A56  D7E4               	goto	i2l5886
 20199                           
 20200                           ;doprnt.c: 757: if(width > len)
 20201  001A58  5028               	movf	i2printf@width,w,c
 20202  001A5A  5C22               	subwf	i2printf@len,w,c
 20203  001A5C  5029               	movf	i2printf@width+1,w,c
 20204  001A5E  5823               	subwfb	i2printf@len+1,w,c
 20205  001A60  B0D8               	btfsc	status,0,c
 20206  001A62  D005               	goto	i2l5894
 20207                           
 20208                           ;doprnt.c: 758: width -= len;
 20209  001A64  5022               	movf	i2printf@len,w,c
 20210  001A66  5E28               	subwf	i2printf@width,f,c
 20211  001A68  5023               	movf	i2printf@len+1,w,c
 20212  001A6A  5A29               	subwfb	i2printf@width+1,f,c
 20213  001A6C  D008               	goto	i2l5898
 20214  001A6E                     i2l5894:
 20215                           
 20216                           ;doprnt.c: 759: else
 20217                           ;doprnt.c: 760: width = 0;
 20218  001A6E  0E00               	movlw	0
 20219  001A70  6E29               	movwf	i2printf@width+1,c
 20220  001A72  0E00               	movlw	0
 20221  001A74  6E28               	movwf	i2printf@width,c
 20222                           
 20223                           ;doprnt.c: 764: while(width--)
 20224  001A76  D003               	goto	i2l5898
 20225  001A78                     i2l5896:
 20226                           
 20227                           ;doprnt.c: 765: (putch(' ') );
 20228  001A78  0E20               	movlw	32
 20229  001A7A  EC1C  F025         	call	i2_putch
 20230  001A7E                     i2l5898:
 20231  001A7E  0628               	decf	i2printf@width,f,c
 20232  001A80  A0D8               	btfss	status,0,c
 20233  001A82  0629               	decf	i2printf@width+1,f,c
 20234  001A84  2828               	incf	i2printf@width,w,c
 20235  001A86  E1F8               	bnz	i2l5896
 20236  001A88  2829               	incf	i2printf@width+1,w,c
 20237  001A8A  B4D8               	btfsc	status,2,c
 20238  001A8C  D016               	goto	i2l5904
 20239  001A8E  D7F4               	goto	i2l5896
 20240  001A90                     i2l5900:
 20241                           
 20242                           ;doprnt.c: 768: (putch(*cp++) );
 20243  001A90  C01E  FFF6         	movff	i2printf@cp,tblptrl
 20244  001A94  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 20245  001A98  0E00               	movlw	low (__mediumconst shr (0+16))
 20246  001A9A  6EF8               	movwf	tblptru,c
 20247  001A9C  0E0F               	movlw	(high __ramtop+-1)
 20248  001A9E  64F7               	cpfsgt	tblptrh,c
 20249  001AA0  D003               	bra	i2u445_47
 20250  001AA2  0008               	tblrd		*
 20251  001AA4  50F5               	movf	tablat,w,c
 20252  001AA6  D005               	bra	i2u445_40
 20253  001AA8                     i2u445_47:
 20254  001AA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 20255  001AAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 20256  001AB0  50EF               	movf	indf0,w,c
 20257  001AB2                     i2u445_40:
 20258  001AB2  EC1C  F025         	call	i2_putch
 20259  001AB6  4A1E               	infsnz	i2printf@cp,f,c
 20260  001AB8  2A1F               	incf	i2printf@cp+1,f,c
 20261  001ABA                     i2l5904:
 20262  001ABA  0622               	decf	i2printf@len,f,c
 20263  001ABC  A0D8               	btfss	status,0,c
 20264  001ABE  0623               	decf	i2printf@len+1,f,c
 20265  001AC0  2822               	incf	i2printf@len,w,c
 20266  001AC2  E1E6               	bnz	i2l5900
 20267  001AC4  2823               	incf	i2printf@len+1,w,c
 20268  001AC6  B4D8               	btfsc	status,2,c
 20269  001AC8  D0DA               	goto	i2l5982
 20270  001ACA  D7E2               	goto	i2l5900
 20271  001ACC                     i2l5906:
 20272                           
 20273                           ;doprnt.c: 818: flag |= 0x40;
 20274  001ACC  8C26               	bsf	i2printf@flag,6,c
 20275                           
 20276                           ;doprnt.c: 822: }
 20277                           
 20278                           ;doprnt.c: 819: break;
 20279  001ACE  D01B               	goto	i2l1314
 20280  001AD0                     i2l5910:
 20281  001AD0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20282  001AD4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20283  001AD8  4A0D               	infsnz	i2printf@f,f,c
 20284  001ADA  2A0E               	incf	i2printf@f+1,f,c
 20285  001ADC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20286  001ADC  6AF8               	clrf	tblptru,c
 20287  001ADE                     	endif
 20288  001ADE                     	if	0	;tblptru may be non-zero
 20289  001ADE                     	endif
 20290  001ADE  0008               	tblrd		*
 20291  001AE0  CFF5 F027          	movff	tablat,i2printf@c
 20292  001AE4  5027               	movf	i2printf@c,w,c
 20293                           
 20294                           ; Switch size 1, requested type "space"
 20295                           ; Number of cases is 5, Range of values is 0 to 117
 20296                           ; switch strategies available:
 20297                           ; Name         Instructions Cycles
 20298                           ; simple_byte           16     9 (average)
 20299                           ;	Chosen strategy is simple_byte
 20300  001AE6  0A00               	xorlw	0	; case 0
 20301  001AE8  B4D8               	btfsc	status,2,c
 20302  001AEA  0012               	return	
 20303  001AEC  0A64               	xorlw	100	; case 100
 20304  001AEE  B4D8               	btfsc	status,2,c
 20305  001AF0  D00A               	goto	i2l1314
 20306  001AF2  0A0D               	xorlw	13	; case 105
 20307  001AF4  B4D8               	btfsc	status,2,c
 20308  001AF6  D007               	goto	i2l1314
 20309  001AF8  0A1A               	xorlw	26	; case 115
 20310  001AFA  B4D8               	btfsc	status,2,c
 20311  001AFC  D778               	goto	i2l5876
 20312  001AFE  0A06               	xorlw	6	; case 117
 20313  001B00  B4D8               	btfsc	status,2,c
 20314  001B02  D7E4               	goto	i2l5906
 20315  001B04  D0BC               	goto	i2l5982
 20316  001B06                     i2l1314:
 20317                           
 20318                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 20319  001B06  BC26               	btfsc	i2printf@flag,6,c
 20320  001B08  D015               	goto	i2l5922
 20321                           
 20322                           ;doprnt.c: 1253: {
 20323                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 20324  001B0A  C020  FFD9         	movff	i2printf@ap,fsr2l
 20325  001B0E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20326  001B12  CFDE F024          	movff	postinc2,i2printf@val
 20327  001B16  CFDD F025          	movff	postdec2,i2printf@val+1
 20328  001B1A  0E02               	movlw	2
 20329  001B1C  2620               	addwf	i2printf@ap,f,c
 20330  001B1E  0E00               	movlw	0
 20331  001B20  2221               	addwfc	i2printf@ap+1,f,c
 20332                           
 20333                           ;doprnt.c: 1261: if((int)val < 0) {
 20334  001B22  AE25               	btfss	i2printf@val+1,7,c
 20335  001B24  D013               	goto	i2l5926
 20336                           
 20337                           ;doprnt.c: 1262: flag |= 0x03;
 20338  001B26  0E03               	movlw	3
 20339  001B28  1226               	iorwf	i2printf@flag,f,c
 20340                           
 20341                           ;doprnt.c: 1263: val = -val;
 20342  001B2A  6C24               	negf	i2printf@val,c
 20343  001B2C  1E25               	comf	i2printf@val+1,f,c
 20344  001B2E  B0D8               	btfsc	status,0,c
 20345  001B30  2A25               	incf	i2printf@val+1,f,c
 20346                           
 20347                           ;doprnt.c: 1264: }
 20348                           ;doprnt.c: 1266: }
 20349  001B32  D00C               	goto	i2l5926
 20350  001B34                     i2l5922:
 20351                           
 20352                           ;doprnt.c: 1268: else
 20353                           ;doprnt.c: 1273: {
 20354                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 20355  001B34  C020  FFD9         	movff	i2printf@ap,fsr2l
 20356  001B38  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20357  001B3C  CFDE F024          	movff	postinc2,i2printf@val
 20358  001B40  CFDD F025          	movff	postdec2,i2printf@val+1
 20359  001B44  0E02               	movlw	2
 20360  001B46  2620               	addwf	i2printf@ap,f,c
 20361  001B48  0E00               	movlw	0
 20362  001B4A  2221               	addwfc	i2printf@ap+1,f,c
 20363  001B4C                     i2l5926:
 20364                           
 20365                           ;doprnt.c: 1287: }
 20366                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20367  001B4C  0E01               	movlw	1
 20368  001B4E  6E27               	movwf	i2printf@c,c
 20369  001B50                     i2l5928:
 20370  001B50  0E05               	movlw	5
 20371  001B52  1827               	xorwf	i2printf@c,w,c
 20372  001B54  B4D8               	btfsc	status,2,c
 20373  001B56  D015               	goto	i2l5940
 20374                           
 20375                           ;doprnt.c: 1306: if(val < dpowers[c])
 20376  001B58  5027               	movf	i2printf@c,w,c
 20377  001B5A  0D02               	mullw	2
 20378  001B5C  0E12               	movlw	low _dpowers
 20379  001B5E  24F3               	addwf	prodl,w,c
 20380  001B60  6EF6               	movwf	tblptrl,c
 20381  001B62  0EFB               	movlw	high _dpowers
 20382  001B64  20F4               	addwfc	prodh,w,c
 20383  001B66  6EF7               	movwf	tblptrh,c
 20384  001B68                     	if	1	;There are 3 active tblptr bytes
 20385  001B68  6AF8               	clrf	tblptru,c
 20386  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
 20387  001B6C  22F8               	addwfc	tblptru,f,c
 20388  001B6E                     	endif
 20389  001B6E  0009               	tblrd		*+
 20390  001B70  50F5               	movf	tablat,w,c
 20391  001B72  5C24               	subwf	i2printf@val,w,c
 20392  001B74  0009               	tblrd		*+
 20393  001B76  50F5               	movf	tablat,w,c
 20394  001B78  5825               	subwfb	i2printf@val+1,w,c
 20395  001B7A  A0D8               	btfss	status,0,c
 20396  001B7C  D002               	goto	i2l5940
 20397                           
 20398                           ;doprnt.c: 1307: break;
 20399  001B7E  2A27               	incf	i2printf@c,f,c
 20400  001B80  D7E7               	goto	i2l5928
 20401  001B82                     i2l5940:
 20402                           
 20403                           ;doprnt.c: 1345: if(width && flag & 0x03)
 20404  001B82  5028               	movf	i2printf@width,w,c
 20405  001B84  1029               	iorwf	i2printf@width+1,w,c
 20406  001B86  B4D8               	btfsc	status,2,c
 20407  001B88  D009               	goto	i2l5946
 20408  001B8A  C026  F019         	movff	i2printf@flag,??i2_printf
 20409  001B8E  0E03               	movlw	3
 20410  001B90  1619               	andwf	??i2_printf,f,c
 20411  001B92  B4D8               	btfsc	status,2,c
 20412  001B94  D003               	goto	i2l5946
 20413                           
 20414                           ;doprnt.c: 1346: width--;
 20415  001B96  0628               	decf	i2printf@width,f,c
 20416  001B98  A0D8               	btfss	status,0,c
 20417  001B9A  0629               	decf	i2printf@width+1,f,c
 20418  001B9C                     i2l5946:
 20419                           
 20420                           ;doprnt.c: 1381: if(width > c)
 20421  001B9C  0E80               	movlw	128
 20422  001B9E  BE27               	btfsc	i2printf@c,7,c
 20423  001BA0  0E7F               	movlw	127
 20424  001BA2  6E19               	movwf	??i2_printf& (0+255),c
 20425  001BA4  5028               	movf	i2printf@width,w,c
 20426  001BA6  5C27               	subwf	i2printf@c,w,c
 20427  001BA8  5029               	movf	i2printf@width+1,w,c
 20428  001BAA  0A80               	xorlw	128
 20429  001BAC  5819               	subwfb	??i2_printf& (0+255),w,c
 20430  001BAE  B0D8               	btfsc	status,0,c
 20431  001BB0  D007               	goto	i2l5950
 20432                           
 20433                           ;doprnt.c: 1382: width -= c;
 20434  001BB2  5027               	movf	i2printf@c,w,c
 20435  001BB4  5E28               	subwf	i2printf@width,f,c
 20436  001BB6  0E00               	movlw	0
 20437  001BB8  BE27               	btfsc	i2printf@c,7,c
 20438  001BBA  0EFF               	movlw	255
 20439  001BBC  5A29               	subwfb	i2printf@width+1,f,c
 20440  001BBE  D004               	goto	i2l5952
 20441  001BC0                     i2l5950:
 20442                           
 20443                           ;doprnt.c: 1383: else
 20444                           ;doprnt.c: 1384: width = 0;
 20445  001BC0  0E00               	movlw	0
 20446  001BC2  6E29               	movwf	i2printf@width+1,c
 20447  001BC4  0E00               	movlw	0
 20448  001BC6  6E28               	movwf	i2printf@width,c
 20449  001BC8                     i2l5952:
 20450                           
 20451                           ;doprnt.c: 1387: if(flag & 0x04) {
 20452  001BC8  A426               	btfss	i2printf@flag,2,c
 20453  001BCA  D014               	goto	i2l5964
 20454                           
 20455                           ;doprnt.c: 1392: if(flag & 0x03)
 20456  001BCC  C026  F019         	movff	i2printf@flag,??i2_printf
 20457  001BD0  0E03               	movlw	3
 20458  001BD2  1619               	andwf	??i2_printf,f,c
 20459  001BD4  B4D8               	btfsc	status,2,c
 20460  001BD6  D003               	goto	i2l5958
 20461                           
 20462                           ;doprnt.c: 1393: (putch('-') );
 20463  001BD8  0E2D               	movlw	45
 20464  001BDA  EC1C  F025         	call	i2_putch
 20465  001BDE                     i2l5958:
 20466                           
 20467                           ;doprnt.c: 1415: if(width)
 20468  001BDE  5028               	movf	i2printf@width,w,c
 20469  001BE0  1029               	iorwf	i2printf@width+1,w,c
 20470  001BE2  B4D8               	btfsc	status,2,c
 20471  001BE4  D01E               	goto	i2l5974
 20472                           
 20473                           ;doprnt.c: 1417: (putch('0') );
 20474                           
 20475                           ;doprnt.c: 1416: do
 20476  001BE6  0E30               	movlw	48
 20477  001BE8  EC1C  F025         	call	i2_putch
 20478                           
 20479                           ;doprnt.c: 1418: while(--width);
 20480  001BEC  0628               	decf	i2printf@width,f,c
 20481  001BEE  A0D8               	btfss	status,0,c
 20482  001BF0  0629               	decf	i2printf@width+1,f,c
 20483  001BF2  D7F5               	goto	i2l5958
 20484  001BF4                     i2l5964:
 20485                           
 20486                           ;doprnt.c: 1422: {
 20487                           ;doprnt.c: 1424: if(width
 20488                           ;doprnt.c: 1428: )
 20489  001BF4  5028               	movf	i2printf@width,w,c
 20490  001BF6  1029               	iorwf	i2printf@width+1,w,c
 20491  001BF8  B4D8               	btfsc	status,2,c
 20492  001BFA  D00A               	goto	i2l5970
 20493  001BFC                     i2l5966:
 20494                           
 20495                           ;doprnt.c: 1430: (putch(' ') );
 20496  001BFC  0E20               	movlw	32
 20497  001BFE  EC1C  F025         	call	i2_putch
 20498                           
 20499                           ;doprnt.c: 1431: while(--width);
 20500  001C02  0628               	decf	i2printf@width,f,c
 20501  001C04  A0D8               	btfss	status,0,c
 20502  001C06  0629               	decf	i2printf@width+1,f,c
 20503  001C08  5028               	movf	i2printf@width,w,c
 20504  001C0A  1029               	iorwf	i2printf@width+1,w,c
 20505  001C0C  A4D8               	btfss	status,2,c
 20506  001C0E  D7F6               	goto	i2l5966
 20507  001C10                     i2l5970:
 20508                           
 20509                           ;doprnt.c: 1438: if(flag & 0x03)
 20510  001C10  C026  F019         	movff	i2printf@flag,??i2_printf
 20511  001C14  0E03               	movlw	3
 20512  001C16  1619               	andwf	??i2_printf,f,c
 20513  001C18  B4D8               	btfsc	status,2,c
 20514  001C1A  D003               	goto	i2l5974
 20515                           
 20516                           ;doprnt.c: 1439: (putch('-') );
 20517  001C1C  0E2D               	movlw	45
 20518  001C1E  EC1C  F025         	call	i2_putch
 20519  001C22                     i2l5974:
 20520                           
 20521                           ;doprnt.c: 1469: }
 20522                           ;doprnt.c: 1472: prec = c;
 20523  001C22  C027  F01D         	movff	i2printf@c,i2printf@prec
 20524                           
 20525                           ;doprnt.c: 1474: while(prec--) {
 20526  001C26  D027               	goto	i2l5980
 20527  001C28                     i2l5976:
 20528                           
 20529                           ;doprnt.c: 1478: {
 20530                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20531  001C28  501D               	movf	i2printf@prec,w,c
 20532  001C2A  0D02               	mullw	2
 20533  001C2C  0E12               	movlw	low _dpowers
 20534  001C2E  24F3               	addwf	prodl,w,c
 20535  001C30  6EF6               	movwf	tblptrl,c
 20536  001C32  0EFB               	movlw	high _dpowers
 20537  001C34  20F4               	addwfc	prodh,w,c
 20538  001C36  6EF7               	movwf	tblptrh,c
 20539  001C38                     	if	1	;There are 3 active tblptr bytes
 20540  001C38  6AF8               	clrf	tblptru,c
 20541  001C3A  0E00               	movlw	low (__mediumconst shr (0+16))
 20542  001C3C  22F8               	addwfc	tblptru,f,c
 20543  001C3E                     	endif
 20544  001C3E  0009               	tblrd		*+
 20545  001C40  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20546  001C44  000A               	tblrd		*-
 20547  001C46  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20548  001C4A  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20549  001C4E  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20550  001C52  EC68  F021         	call	i2___lwdiv	;wreg free
 20551  001C56  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20552  001C5A  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20553  001C5E  0E00               	movlw	0
 20554  001C60  6E04               	movwf	i2___lwmod@divisor+1,c
 20555  001C62  0E0A               	movlw	10
 20556  001C64  6E03               	movwf	i2___lwmod@divisor,c
 20557  001C66  EC27  F022         	call	i2___lwmod	;wreg free
 20558  001C6A  5001               	movf	?i2___lwmod,w,c
 20559  001C6C  0F30               	addlw	48
 20560  001C6E  6E27               	movwf	i2printf@c,c
 20561                           
 20562                           ;doprnt.c: 1523: }
 20563                           ;doprnt.c: 1524: (putch(c) );
 20564  001C70  5027               	movf	i2printf@c,w,c
 20565  001C72  EC1C  F025         	call	i2_putch
 20566  001C76                     i2l5980:
 20567  001C76  061D               	decf	i2printf@prec,f,c
 20568  001C78  281D               	incf	i2printf@prec,w,c
 20569  001C7A  A4D8               	btfss	status,2,c
 20570  001C7C  D7D5               	goto	i2l5976
 20571  001C7E                     i2l5982:
 20572  001C7E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20573  001C82  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20574  001C86  4A0D               	infsnz	i2printf@f,f,c
 20575  001C88  2A0E               	incf	i2printf@f+1,f,c
 20576  001C8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20577  001C8A  6AF8               	clrf	tblptru,c
 20578  001C8C                     	endif
 20579  001C8C                     	if	0	;tblptru may be non-zero
 20580  001C8C                     	endif
 20581  001C8C  0008               	tblrd		*
 20582  001C8E  CFF5 F027          	movff	tablat,i2printf@c
 20583  001C92  5027               	movf	i2printf@c,w,c
 20584  001C94  B4D8               	btfsc	status,2,c
 20585  001C96  0012               	return	
 20586  001C98  D64E               	goto	i2l5852
 20587  001C9A                     __end_ofi2_printf:
 20588                           	opt stack 0
 20589                           pclatu	equ	0xFFB
 20590                           pclath	equ	0xFFA
 20591                           tblptru	equ	0xFF8
 20592                           tblptrh	equ	0xFF7
 20593                           tblptrl	equ	0xFF6
 20594                           tablat	equ	0xFF5
 20595                           prodh	equ	0xFF4
 20596                           prodl	equ	0xFF3
 20597                           intcon	equ	0xFF2
 20598                           intcon2	equ	0xFF1
 20599                           intcon3	equ	0xFF0
 20600                           indf0	equ	0xFEF
 20601                           postinc0	equ	0xFEE
 20602                           fsr0h	equ	0xFEA
 20603                           fsr0l	equ	0xFE9
 20604                           wreg	equ	0xFE8
 20605                           postdec1	equ	0xFE5
 20606                           fsr1h	equ	0xFE2
 20607                           fsr1l	equ	0xFE1
 20608                           indf2	equ	0xFDF
 20609                           postinc2	equ	0xFDE
 20610                           postdec2	equ	0xFDD
 20611                           fsr2h	equ	0xFDA
 20612                           fsr2l	equ	0xFD9
 20613                           status	equ	0xFD8
 20614                           
 20615 ;; *************** function i2_putch *****************
 20616 ;; Defined at:
 20617 ;;		line 20 in file "lcd.c"
 20618 ;; Parameters:    Size  Location     Type
 20619 ;;  data            1    wreg     unsigned char 
 20620 ;; Auto vars:     Size  Location     Type
 20621 ;;  data            1    2[COMRAM] unsigned char 
 20622 ;; Return value:  Size  Location     Type
 20623 ;;                  1    wreg      void 
 20624 ;; Registers used:
 20625 ;;		wreg, status,2, status,0, cstack
 20626 ;; Tracked objects:
 20627 ;;		On entry : 0/0
 20628 ;;		On exit  : 0/0
 20629 ;;		Unchanged: 0/0
 20630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20634 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20635 ;;Total ram usage:        1 bytes
 20636 ;; Hardware stack levels used:    1
 20637 ;; Hardware stack levels required when called:    1
 20638 ;; This function calls:
 20639 ;;		i2_lcdNibble
 20640 ;; This function is called by:
 20641 ;;		i2_printf
 20642 ;; This function uses a non-reentrant model
 20643 ;;
 20644                           
 20645                           	psect	text80
 20646  004A38                     __ptext80:
 20647                           	opt stack 0
 20648  004A38                     i2_putch:
 20649                           	opt stack 19
 20650                           
 20651                           ;incstack = 0
 20652                           ;i2putch@data stored from wreg
 20653  004A38  6E03               	movwf	i2putch@data,c
 20654                           
 20655                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20656  004A3A  848C               	bsf	3980,2,c	;volatile
 20657                           
 20658                           ;lcd.c: 22: lcdNibble(data);
 20659  004A3C  5003               	movf	i2putch@data,w,c
 20660  004A3E  EC13  F021         	call	i2_lcdNibble
 20661  004A42  0012               	return		;funcret
 20662  004A44                     __end_ofi2_putch:
 20663                           	opt stack 0
 20664                           pclatu	equ	0xFFB
 20665                           pclath	equ	0xFFA
 20666                           tblptru	equ	0xFF8
 20667                           tblptrh	equ	0xFF7
 20668                           tblptrl	equ	0xFF6
 20669                           tablat	equ	0xFF5
 20670                           prodh	equ	0xFF4
 20671                           prodl	equ	0xFF3
 20672                           intcon	equ	0xFF2
 20673                           intcon2	equ	0xFF1
 20674                           intcon3	equ	0xFF0
 20675                           indf0	equ	0xFEF
 20676                           postinc0	equ	0xFEE
 20677                           fsr0h	equ	0xFEA
 20678                           fsr0l	equ	0xFE9
 20679                           wreg	equ	0xFE8
 20680                           postdec1	equ	0xFE5
 20681                           fsr1h	equ	0xFE2
 20682                           fsr1l	equ	0xFE1
 20683                           indf2	equ	0xFDF
 20684                           postinc2	equ	0xFDE
 20685                           postdec2	equ	0xFDD
 20686                           fsr2h	equ	0xFDA
 20687                           fsr2l	equ	0xFD9
 20688                           status	equ	0xFD8
 20689                           
 20690 ;; *************** function i2_isdigit *****************
 20691 ;; Defined at:
 20692 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20693 ;; Parameters:    Size  Location     Type
 20694 ;;  c               1    wreg     unsigned char 
 20695 ;; Auto vars:     Size  Location     Type
 20696 ;;  c               1    2[COMRAM] unsigned char 
 20697 ;; Return value:  Size  Location     Type
 20698 ;;		None               void
 20699 ;; Registers used:
 20700 ;;		wreg, status,2, status,0
 20701 ;; Tracked objects:
 20702 ;;		On entry : 0/0
 20703 ;;		On exit  : 0/0
 20704 ;;		Unchanged: 0/0
 20705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20707 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20708 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20709 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20710 ;;Total ram usage:        3 bytes
 20711 ;; Hardware stack levels used:    1
 20712 ;; This function calls:
 20713 ;;		Nothing
 20714 ;; This function is called by:
 20715 ;;		i2_printf
 20716 ;; This function uses a non-reentrant model
 20717 ;;
 20718                           
 20719                           	psect	text81
 20720  004990                     __ptext81:
 20721                           	opt stack 0
 20722  004990                     i2_isdigit:
 20723                           	opt stack 20
 20724                           
 20725                           ;incstack = 0
 20726                           ;i2isdigit@c stored from wreg
 20727  004990  6E03               	movwf	i2isdigit@c,c
 20728  004992  0E00               	movlw	0
 20729  004994  6E02               	movwf	i2_isdigit$1959,c
 20730  004996  0E3A               	movlw	58
 20731  004998  6003               	cpfslt	i2isdigit@c,c
 20732  00499A  D005               	goto	i2l5556
 20733  00499C  0E2F               	movlw	47
 20734  00499E  6403               	cpfsgt	i2isdigit@c,c
 20735  0049A0  D002               	goto	i2l5556
 20736  0049A2  0E01               	movlw	1
 20737  0049A4  6E02               	movwf	i2_isdigit$1959,c
 20738  0049A6                     i2l5556:
 20739  0049A6  C002  F001         	movff	i2_isdigit$1959,??i2_isdigit
 20740  0049AA  3001               	rrcf	??i2_isdigit,w,c
 20741  0049AC  0012               	return	
 20742  0049AE                     __end_ofi2_isdigit:
 20743                           	opt stack 0
 20744                           pclatu	equ	0xFFB
 20745                           pclath	equ	0xFFA
 20746                           tblptru	equ	0xFF8
 20747                           tblptrh	equ	0xFF7
 20748                           tblptrl	equ	0xFF6
 20749                           tablat	equ	0xFF5
 20750                           prodh	equ	0xFF4
 20751                           prodl	equ	0xFF3
 20752                           intcon	equ	0xFF2
 20753                           intcon2	equ	0xFF1
 20754                           intcon3	equ	0xFF0
 20755                           indf0	equ	0xFEF
 20756                           postinc0	equ	0xFEE
 20757                           fsr0h	equ	0xFEA
 20758                           fsr0l	equ	0xFE9
 20759                           wreg	equ	0xFE8
 20760                           postdec1	equ	0xFE5
 20761                           fsr1h	equ	0xFE2
 20762                           fsr1l	equ	0xFE1
 20763                           indf2	equ	0xFDF
 20764                           postinc2	equ	0xFDE
 20765                           postdec2	equ	0xFDD
 20766                           fsr2h	equ	0xFDA
 20767                           fsr2l	equ	0xFD9
 20768                           status	equ	0xFD8
 20769                           
 20770 ;; *************** function i2___wmul *****************
 20771 ;; Defined at:
 20772 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20773 ;; Parameters:    Size  Location     Type
 20774 ;;  multiplier      2    0[COMRAM] unsigned int 
 20775 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20776 ;; Auto vars:     Size  Location     Type
 20777 ;;  __wmul          2    4[COMRAM] unsigned int 
 20778 ;; Return value:  Size  Location     Type
 20779 ;;                  2    0[COMRAM] unsigned int 
 20780 ;; Registers used:
 20781 ;;		wreg, status,2, status,0, prodl, prodh
 20782 ;; Tracked objects:
 20783 ;;		On entry : 0/0
 20784 ;;		On exit  : 0/0
 20785 ;;		Unchanged: 0/0
 20786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20787 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20790 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20791 ;;Total ram usage:        6 bytes
 20792 ;; Hardware stack levels used:    1
 20793 ;; This function calls:
 20794 ;;		Nothing
 20795 ;; This function is called by:
 20796 ;;		_printSortTimer
 20797 ;;		_retrieveLog
 20798 ;;		i2_printf
 20799 ;; This function uses a non-reentrant model
 20800 ;;
 20801                           
 20802                           	psect	text82
 20803  0048DC                     __ptext82:
 20804                           	opt stack 0
 20805  0048DC                     i2___wmul:
 20806                           	opt stack 20
 20807                           
 20808                           ;incstack = 0
 20809  0048DC  5001               	movf	i2___wmul@multiplier,w,c
 20810  0048DE  0203               	mulwf	i2___wmul@multiplicand,c
 20811  0048E0  CFF3 F005          	movff	prodl,i2___wmul@product
 20812  0048E4  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20813  0048E8  5001               	movf	i2___wmul@multiplier,w,c
 20814  0048EA  0204               	mulwf	i2___wmul@multiplicand+1,c
 20815  0048EC  50F3               	movf	prodl,w,c
 20816  0048EE  2606               	addwf	i2___wmul@product+1,f,c
 20817  0048F0  5002               	movf	i2___wmul@multiplier+1,w,c
 20818  0048F2  0203               	mulwf	i2___wmul@multiplicand,c
 20819  0048F4  50F3               	movf	prodl,w,c
 20820  0048F6  2606               	addwf	i2___wmul@product+1,f,c
 20821  0048F8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20822  0048FC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20823  004900  0012               	return	
 20824  004902                     __end_ofi2___wmul:
 20825                           	opt stack 0
 20826                           pclatu	equ	0xFFB
 20827                           pclath	equ	0xFFA
 20828                           tblptru	equ	0xFF8
 20829                           tblptrh	equ	0xFF7
 20830                           tblptrl	equ	0xFF6
 20831                           tablat	equ	0xFF5
 20832                           prodh	equ	0xFF4
 20833                           prodl	equ	0xFF3
 20834                           intcon	equ	0xFF2
 20835                           intcon2	equ	0xFF1
 20836                           intcon3	equ	0xFF0
 20837                           indf0	equ	0xFEF
 20838                           postinc0	equ	0xFEE
 20839                           fsr0h	equ	0xFEA
 20840                           fsr0l	equ	0xFE9
 20841                           wreg	equ	0xFE8
 20842                           postdec1	equ	0xFE5
 20843                           fsr1h	equ	0xFE2
 20844                           fsr1l	equ	0xFE1
 20845                           indf2	equ	0xFDF
 20846                           postinc2	equ	0xFDE
 20847                           postdec2	equ	0xFDD
 20848                           fsr2h	equ	0xFDA
 20849                           fsr2l	equ	0xFD9
 20850                           status	equ	0xFD8
 20851                           
 20852 ;; *************** function i2___lwmod *****************
 20853 ;; Defined at:
 20854 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20855 ;; Parameters:    Size  Location     Type
 20856 ;;  dividend        2    0[COMRAM] unsigned int 
 20857 ;;  divisor         2    2[COMRAM] unsigned int 
 20858 ;; Auto vars:     Size  Location     Type
 20859 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20860 ;; Return value:  Size  Location     Type
 20861 ;;                  2    0[COMRAM] unsigned int 
 20862 ;; Registers used:
 20863 ;;		wreg, status,2, status,0
 20864 ;; Tracked objects:
 20865 ;;		On entry : 0/0
 20866 ;;		On exit  : 0/0
 20867 ;;		Unchanged: 0/0
 20868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20869 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20872 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20873 ;;Total ram usage:        5 bytes
 20874 ;; Hardware stack levels used:    1
 20875 ;; This function calls:
 20876 ;;		Nothing
 20877 ;; This function is called by:
 20878 ;;		_printSortTimer
 20879 ;;		i2_printf
 20880 ;; This function uses a non-reentrant model
 20881 ;;
 20882                           
 20883                           	psect	text83
 20884  00444E                     __ptext83:
 20885                           	opt stack 0
 20886  00444E                     i2___lwmod:
 20887                           	opt stack 20
 20888                           
 20889                           ;incstack = 0
 20890  00444E  5003               	movf	i2___lwmod@divisor,w,c
 20891  004450  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20892  004452  B4D8               	btfsc	status,2,c
 20893  004454  D018               	goto	i2l1771
 20894  004456  0E01               	movlw	1
 20895  004458  6E05               	movwf	i2___lwmod@counter,c
 20896  00445A  D004               	goto	i2l5588
 20897  00445C                     i2l5586:
 20898  00445C  90D8               	bcf	status,0,c
 20899  00445E  3603               	rlcf	i2___lwmod@divisor,f,c
 20900  004460  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20901  004462  2A05               	incf	i2___lwmod@counter,f,c
 20902  004464                     i2l5588:
 20903  004464  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20904  004466  D7FA               	goto	i2l5586
 20905  004468                     i2l5590:
 20906  004468  5003               	movf	i2___lwmod@divisor,w,c
 20907  00446A  5C01               	subwf	i2___lwmod@dividend,w,c
 20908  00446C  5004               	movf	i2___lwmod@divisor+1,w,c
 20909  00446E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20910  004470  A0D8               	btfss	status,0,c
 20911  004472  D004               	goto	i2l5594
 20912  004474  5003               	movf	i2___lwmod@divisor,w,c
 20913  004476  5E01               	subwf	i2___lwmod@dividend,f,c
 20914  004478  5004               	movf	i2___lwmod@divisor+1,w,c
 20915  00447A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20916  00447C                     i2l5594:
 20917  00447C  90D8               	bcf	status,0,c
 20918  00447E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20919  004480  3203               	rrcf	i2___lwmod@divisor,f,c
 20920  004482  2E05               	decfsz	i2___lwmod@counter,f,c
 20921  004484  D7F1               	goto	i2l5590
 20922  004486                     i2l1771:
 20923  004486  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20924  00448A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20925  00448E  0012               	return		;funcret
 20926  004490                     __end_ofi2___lwmod:
 20927                           	opt stack 0
 20928                           pclatu	equ	0xFFB
 20929                           pclath	equ	0xFFA
 20930                           tblptru	equ	0xFF8
 20931                           tblptrh	equ	0xFF7
 20932                           tblptrl	equ	0xFF6
 20933                           tablat	equ	0xFF5
 20934                           prodh	equ	0xFF4
 20935                           prodl	equ	0xFF3
 20936                           intcon	equ	0xFF2
 20937                           intcon2	equ	0xFF1
 20938                           intcon3	equ	0xFF0
 20939                           indf0	equ	0xFEF
 20940                           postinc0	equ	0xFEE
 20941                           fsr0h	equ	0xFEA
 20942                           fsr0l	equ	0xFE9
 20943                           wreg	equ	0xFE8
 20944                           postdec1	equ	0xFE5
 20945                           fsr1h	equ	0xFE2
 20946                           fsr1l	equ	0xFE1
 20947                           indf2	equ	0xFDF
 20948                           postinc2	equ	0xFDE
 20949                           postdec2	equ	0xFDD
 20950                           fsr2h	equ	0xFDA
 20951                           fsr2l	equ	0xFD9
 20952                           status	equ	0xFD8
 20953                           
 20954 ;; *************** function i2___lwdiv *****************
 20955 ;; Defined at:
 20956 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20957 ;; Parameters:    Size  Location     Type
 20958 ;;  dividend        2    5[COMRAM] unsigned int 
 20959 ;;  divisor         2    7[COMRAM] unsigned int 
 20960 ;; Auto vars:     Size  Location     Type
 20961 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20962 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20963 ;; Return value:  Size  Location     Type
 20964 ;;                  2    5[COMRAM] unsigned int 
 20965 ;; Registers used:
 20966 ;;		wreg, status,2, status,0
 20967 ;; Tracked objects:
 20968 ;;		On entry : 0/0
 20969 ;;		On exit  : 0/0
 20970 ;;		Unchanged: 0/0
 20971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20972 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20973 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20975 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20976 ;;Total ram usage:        7 bytes
 20977 ;; Hardware stack levels used:    1
 20978 ;; This function calls:
 20979 ;;		Nothing
 20980 ;; This function is called by:
 20981 ;;		_printSortTimer
 20982 ;;		i2_printf
 20983 ;; This function uses a non-reentrant model
 20984 ;;
 20985                           
 20986                           	psect	text84
 20987  0042D0                     __ptext84:
 20988                           	opt stack 0
 20989  0042D0                     i2___lwdiv:
 20990                           	opt stack 20
 20991                           
 20992                           ;incstack = 0
 20993  0042D0  0E00               	movlw	0
 20994  0042D2  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20995  0042D4  0E00               	movlw	0
 20996  0042D6  6E0A               	movwf	i2___lwdiv@quotient,c
 20997  0042D8  5008               	movf	i2___lwdiv@divisor,w,c
 20998  0042DA  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20999  0042DC  B4D8               	btfsc	status,2,c
 21000  0042DE  D01C               	goto	i2l1761
 21001  0042E0  0E01               	movlw	1
 21002  0042E2  6E0C               	movwf	i2___lwdiv@counter,c
 21003  0042E4  D004               	goto	i2l5568
 21004  0042E6                     i2l5566:
 21005  0042E6  90D8               	bcf	status,0,c
 21006  0042E8  3608               	rlcf	i2___lwdiv@divisor,f,c
 21007  0042EA  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 21008  0042EC  2A0C               	incf	i2___lwdiv@counter,f,c
 21009  0042EE                     i2l5568:
 21010  0042EE  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 21011  0042F0  D7FA               	goto	i2l5566
 21012  0042F2                     i2l5570:
 21013  0042F2  90D8               	bcf	status,0,c
 21014  0042F4  360A               	rlcf	i2___lwdiv@quotient,f,c
 21015  0042F6  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 21016  0042F8  5008               	movf	i2___lwdiv@divisor,w,c
 21017  0042FA  5C06               	subwf	i2___lwdiv@dividend,w,c
 21018  0042FC  5009               	movf	i2___lwdiv@divisor+1,w,c
 21019  0042FE  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 21020  004300  A0D8               	btfss	status,0,c
 21021  004302  D005               	goto	i2l5578
 21022  004304  5008               	movf	i2___lwdiv@divisor,w,c
 21023  004306  5E06               	subwf	i2___lwdiv@dividend,f,c
 21024  004308  5009               	movf	i2___lwdiv@divisor+1,w,c
 21025  00430A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 21026  00430C  800A               	bsf	i2___lwdiv@quotient,0,c
 21027  00430E                     i2l5578:
 21028  00430E  90D8               	bcf	status,0,c
 21029  004310  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 21030  004312  3208               	rrcf	i2___lwdiv@divisor,f,c
 21031  004314  2E0C               	decfsz	i2___lwdiv@counter,f,c
 21032  004316  D7ED               	goto	i2l5570
 21033  004318                     i2l1761:
 21034  004318  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 21035  00431C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 21036  004320  0012               	return		;funcret
 21037  004322                     __end_ofi2___lwdiv:
 21038                           	opt stack 0
 21039                           pclatu	equ	0xFFB
 21040                           pclath	equ	0xFFA
 21041                           tblptru	equ	0xFF8
 21042                           tblptrh	equ	0xFF7
 21043                           tblptrl	equ	0xFF6
 21044                           tablat	equ	0xFF5
 21045                           prodh	equ	0xFF4
 21046                           prodl	equ	0xFF3
 21047                           intcon	equ	0xFF2
 21048                           intcon2	equ	0xFF1
 21049                           intcon3	equ	0xFF0
 21050                           indf0	equ	0xFEF
 21051                           postinc0	equ	0xFEE
 21052                           fsr0h	equ	0xFEA
 21053                           fsr0l	equ	0xFE9
 21054                           wreg	equ	0xFE8
 21055                           postdec1	equ	0xFE5
 21056                           fsr1h	equ	0xFE2
 21057                           fsr1l	equ	0xFE1
 21058                           indf2	equ	0xFDF
 21059                           postinc2	equ	0xFDE
 21060                           postdec2	equ	0xFDD
 21061                           fsr2h	equ	0xFDA
 21062                           fsr2l	equ	0xFD9
 21063                           status	equ	0xFD8
 21064                           
 21065 ;; *************** function i2_lcdInst *****************
 21066 ;; Defined at:
 21067 ;;		line 15 in file "lcd.c"
 21068 ;; Parameters:    Size  Location     Type
 21069 ;;  data            1    wreg     unsigned char 
 21070 ;; Auto vars:     Size  Location     Type
 21071 ;;  data            1    2[COMRAM] unsigned char 
 21072 ;; Return value:  Size  Location     Type
 21073 ;;                  1    wreg      void 
 21074 ;; Registers used:
 21075 ;;		wreg, status,2, status,0, cstack
 21076 ;; Tracked objects:
 21077 ;;		On entry : 0/0
 21078 ;;		On exit  : 0/0
 21079 ;;		Unchanged: 0/0
 21080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21084 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21085 ;;Total ram usage:        1 bytes
 21086 ;; Hardware stack levels used:    1
 21087 ;; Hardware stack levels required when called:    1
 21088 ;; This function calls:
 21089 ;;		i2_lcdNibble
 21090 ;; This function is called by:
 21091 ;;		_change_state_to_menu_11
 21092 ;;		_change_state_to_menu_23
 21093 ;;		_change_state_to_logs_11
 21094 ;;		_change_state_to_logs_12
 21095 ;;		_change_state_to_logs_22
 21096 ;;		_change_state_to_logs_23
 21097 ;;		_change_state_to_logs_33
 21098 ;;		_change_state_to_logs_34
 21099 ;;		_printSortTimer
 21100 ;;		i2_change_state_to_menu_start
 21101 ;;		i2_change_state_to_menu_12
 21102 ;;		i2_change_state_to_menu_22
 21103 ;;		i2_printRTC
 21104 ;; This function uses a non-reentrant model
 21105 ;;
 21106                           
 21107                           	psect	text85
 21108  004A44                     __ptext85:
 21109                           	opt stack 0
 21110  004A44                     i2_lcdInst:
 21111                           	opt stack 19
 21112                           
 21113                           ;incstack = 0
 21114                           ;i2lcdInst@data stored from wreg
 21115  004A44  6E03               	movwf	i2lcdInst@data,c
 21116                           
 21117                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 21118  004A46  948C               	bcf	3980,2,c	;volatile
 21119                           
 21120                           ;lcd.c: 17: lcdNibble(data);
 21121  004A48  5003               	movf	i2lcdInst@data,w,c
 21122  004A4A  EC13  F021         	call	i2_lcdNibble
 21123  004A4E  0012               	return		;funcret
 21124  004A50                     __end_ofi2_lcdInst:
 21125                           	opt stack 0
 21126                           pclatu	equ	0xFFB
 21127                           pclath	equ	0xFFA
 21128                           tblptru	equ	0xFF8
 21129                           tblptrh	equ	0xFF7
 21130                           tblptrl	equ	0xFF6
 21131                           tablat	equ	0xFF5
 21132                           prodh	equ	0xFF4
 21133                           prodl	equ	0xFF3
 21134                           intcon	equ	0xFF2
 21135                           intcon2	equ	0xFF1
 21136                           intcon3	equ	0xFF0
 21137                           indf0	equ	0xFEF
 21138                           postinc0	equ	0xFEE
 21139                           fsr0h	equ	0xFEA
 21140                           fsr0l	equ	0xFE9
 21141                           wreg	equ	0xFE8
 21142                           postdec1	equ	0xFE5
 21143                           fsr1h	equ	0xFE2
 21144                           fsr1l	equ	0xFE1
 21145                           indf2	equ	0xFDF
 21146                           postinc2	equ	0xFDE
 21147                           postdec2	equ	0xFDD
 21148                           fsr2h	equ	0xFDA
 21149                           fsr2l	equ	0xFD9
 21150                           status	equ	0xFD8
 21151                           
 21152 ;; *************** function i2_lcdNibble *****************
 21153 ;; Defined at:
 21154 ;;		line 25 in file "lcd.c"
 21155 ;; Parameters:    Size  Location     Type
 21156 ;;  data            1    wreg     unsigned char 
 21157 ;; Auto vars:     Size  Location     Type
 21158 ;;  data            1    1[COMRAM] unsigned char 
 21159 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 21160 ;; Return value:  Size  Location     Type
 21161 ;;                  1    wreg      void 
 21162 ;; Registers used:
 21163 ;;		wreg, status,2, status,0
 21164 ;; Tracked objects:
 21165 ;;		On entry : 0/0
 21166 ;;		On exit  : 0/0
 21167 ;;		Unchanged: 0/0
 21168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21170 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21172 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21173 ;;Total ram usage:        2 bytes
 21174 ;; Hardware stack levels used:    1
 21175 ;; This function calls:
 21176 ;;		Nothing
 21177 ;; This function is called by:
 21178 ;;		i2_lcdInst
 21179 ;;		i2_putch
 21180 ;; This function uses a non-reentrant model
 21181 ;;
 21182                           
 21183                           	psect	text86
 21184  004226                     __ptext86:
 21185                           	opt stack 0
 21186  004226                     i2_lcdNibble:
 21187                           	opt stack 19
 21188                           
 21189                           ;incstack = 0
 21190                           ;i2lcdNibble@data stored from wreg
 21191  004226  6E02               	movwf	i2lcdNibble@data,c
 21192                           
 21193                           ;lcd.c: 27: char temp = data & 0xF0;
 21194  004228  5002               	movf	i2lcdNibble@data,w,c
 21195  00422A  0BF0               	andlw	240
 21196  00422C  6E01               	movwf	i2lcdNibble@temp,c
 21197                           
 21198                           ;lcd.c: 28: LATD = LATD & 0x0F;
 21199  00422E  508C               	movf	3980,w,c	;volatile
 21200  004230  0B0F               	andlw	15
 21201  004232  6E8C               	movwf	3980,c	;volatile
 21202                           
 21203                           ;lcd.c: 29: LATD = temp | LATD;
 21204  004234  5001               	movf	i2lcdNibble@temp,w,c
 21205  004236  108C               	iorwf	3980,w,c	;volatile
 21206  004238  6E8C               	movwf	3980,c	;volatile
 21207                           
 21208                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 21209  00423A  868C               	bsf	3980,3,c	;volatile
 21210                           
 21211                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21212  00423C  0E42               	movlw	66
 21213  00423E                     i2u872_47:
 21214  00423E  2EE8               	decfsz	wreg,f,c
 21215  004240  D7FE               	bra	i2u872_47
 21216  004242  D000               	nop2	
 21217                           
 21218                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 21219  004244  968C               	bcf	3980,3,c	;volatile
 21220                           
 21221                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21222  004246  0E42               	movlw	66
 21223  004248                     i2u873_47:
 21224  004248  2EE8               	decfsz	wreg,f,c
 21225  00424A  D7FE               	bra	i2u873_47
 21226  00424C  D000               	nop2	
 21227                           
 21228                           ;lcd.c: 36: data = data << 4;
 21229  00424E  3802               	swapf	i2lcdNibble@data,w,c
 21230  004250  0BF0               	andlw	240
 21231  004252  6E02               	movwf	i2lcdNibble@data,c
 21232                           
 21233                           ;lcd.c: 38: temp = data & 0xF0;
 21234  004254  5002               	movf	i2lcdNibble@data,w,c
 21235  004256  0BF0               	andlw	240
 21236  004258  6E01               	movwf	i2lcdNibble@temp,c
 21237                           
 21238                           ;lcd.c: 39: LATD = LATD & 0x0F;
 21239  00425A  508C               	movf	3980,w,c	;volatile
 21240  00425C  0B0F               	andlw	15
 21241  00425E  6E8C               	movwf	3980,c	;volatile
 21242                           
 21243                           ;lcd.c: 40: LATD = temp | LATD;
 21244  004260  5001               	movf	i2lcdNibble@temp,w,c
 21245  004262  108C               	iorwf	3980,w,c	;volatile
 21246  004264  6E8C               	movwf	3980,c	;volatile
 21247                           
 21248                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 21249  004266  868C               	bsf	3980,3,c	;volatile
 21250                           
 21251                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21252  004268  0E42               	movlw	66
 21253  00426A                     i2u874_47:
 21254  00426A  2EE8               	decfsz	wreg,f,c
 21255  00426C  D7FE               	bra	i2u874_47
 21256  00426E  D000               	nop2	
 21257                           
 21258                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 21259  004270  968C               	bcf	3980,3,c	;volatile
 21260                           
 21261                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21262  004272  0E42               	movlw	66
 21263  004274                     i2u875_47:
 21264  004274  2EE8               	decfsz	wreg,f,c
 21265  004276  D7FE               	bra	i2u875_47
 21266  004278  D000               	nop2	
 21267  00427A  0012               	return		;funcret
 21268  00427C                     __end_ofi2_lcdNibble:
 21269                           	opt stack 0
 21270                           pclatu	equ	0xFFB
 21271                           pclath	equ	0xFFA
 21272                           tblptru	equ	0xFF8
 21273                           tblptrh	equ	0xFF7
 21274                           tblptrl	equ	0xFF6
 21275                           tablat	equ	0xFF5
 21276                           prodh	equ	0xFF4
 21277                           prodl	equ	0xFF3
 21278                           intcon	equ	0xFF2
 21279                           intcon2	equ	0xFF1
 21280                           intcon3	equ	0xFF0
 21281                           indf0	equ	0xFEF
 21282                           postinc0	equ	0xFEE
 21283                           fsr0h	equ	0xFEA
 21284                           fsr0l	equ	0xFE9
 21285                           wreg	equ	0xFE8
 21286                           postdec1	equ	0xFE5
 21287                           fsr1h	equ	0xFE2
 21288                           fsr1l	equ	0xFE1
 21289                           indf2	equ	0xFDF
 21290                           postinc2	equ	0xFDE
 21291                           postdec2	equ	0xFDD
 21292                           fsr2h	equ	0xFDA
 21293                           fsr2l	equ	0xFD9
 21294                           status	equ	0xFD8
 21295                           
 21296 ;; *************** function i2_getRTC *****************
 21297 ;; Defined at:
 21298 ;;		line 44 in file "RTC.c"
 21299 ;; Parameters:    Size  Location     Type
 21300 ;;		None
 21301 ;; Auto vars:     Size  Location     Type
 21302 ;;  getRTC          2    3[COMRAM] int 
 21303 ;; Return value:  Size  Location     Type
 21304 ;;                  1    wreg      void 
 21305 ;; Registers used:
 21306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21307 ;; Tracked objects:
 21308 ;;		On entry : 0/0
 21309 ;;		On exit  : 0/0
 21310 ;;		Unchanged: 0/0
 21311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21313 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21315 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21316 ;;Total ram usage:        2 bytes
 21317 ;; Hardware stack levels used:    1
 21318 ;; Hardware stack levels required when called:    2
 21319 ;; This function calls:
 21320 ;;		i2_I2C_Master_Read
 21321 ;;		i2_I2C_Master_Start
 21322 ;;		i2_I2C_Master_Stop
 21323 ;;		i2_I2C_Master_Write
 21324 ;; This function is called by:
 21325 ;;		_printSortTimer
 21326 ;;		i2_printRTC
 21327 ;; This function uses a non-reentrant model
 21328 ;;
 21329                           
 21330                           	psect	text87
 21331  003F0C                     __ptext87:
 21332                           	opt stack 0
 21333  003F0C                     i2_getRTC:
 21334                           	opt stack 18
 21335                           
 21336                           ;RTC.c: 48: I2C_Master_Start();
 21337                           
 21338                           ;incstack = 0
 21339  003F0C  EC42  F025         	call	i2_I2C_Master_Start	;wreg free
 21340                           
 21341                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 21342  003F10  0E00               	movlw	0
 21343  003F12  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21344  003F14  0ED0               	movlw	208
 21345  003F16  6E02               	movwf	i2I2C_Master_Write@d,c
 21346  003F18  EC2D  F025         	call	i2_I2C_Master_Write	;wreg free
 21347                           
 21348                           ;RTC.c: 50: I2C_Master_Write(0x00);
 21349  003F1C  0E00               	movlw	0
 21350  003F1E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21351  003F20  0E00               	movlw	0
 21352  003F22  6E02               	movwf	i2I2C_Master_Write@d,c
 21353  003F24  EC2D  F025         	call	i2_I2C_Master_Write	;wreg free
 21354                           
 21355                           ;RTC.c: 51: I2C_Master_Stop();
 21356  003F28  EC3E  F025         	call	i2_I2C_Master_Stop	;wreg free
 21357                           
 21358                           ;RTC.c: 54: I2C_Master_Start();
 21359  003F2C  EC42  F025         	call	i2_I2C_Master_Start	;wreg free
 21360                           
 21361                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 21362  003F30  0E00               	movlw	0
 21363  003F32  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21364  003F34  0ED1               	movlw	209
 21365  003F36  6E02               	movwf	i2I2C_Master_Write@d,c
 21366  003F38  EC2D  F025         	call	i2_I2C_Master_Write	;wreg free
 21367                           
 21368                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 21369  003F3C  0E00               	movlw	0
 21370  003F3E  6E05               	movwf	i2getRTC@i+1,c
 21371  003F40  0E00               	movlw	0
 21372  003F42  6E04               	movwf	i2getRTC@i,c
 21373  003F44                     i2l5824:
 21374  003F44  BE05               	btfsc	i2getRTC@i+1,7,c
 21375  003F46  D006               	goto	i2l5828
 21376  003F48  5005               	movf	i2getRTC@i+1,w,c
 21377  003F4A  E111               	bnz	i2l5834
 21378  003F4C  0E06               	movlw	6
 21379  003F4E  5C04               	subwf	i2getRTC@i,w,c
 21380  003F50  B0D8               	btfsc	status,0,c
 21381  003F52  D00D               	goto	i2l5834
 21382  003F54                     i2l5828:
 21383                           
 21384                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 21385  003F54  0E24               	movlw	low _time
 21386  003F56  2404               	addwf	i2getRTC@i,w,c
 21387  003F58  6ED9               	movwf	fsr2l,c
 21388  003F5A  0E01               	movlw	high _time
 21389  003F5C  2005               	addwfc	i2getRTC@i+1,w,c
 21390  003F5E  6EDA               	movwf	fsr2h,c
 21391  003F60  0E01               	movlw	1
 21392  003F62  EC81  F024         	call	i2_I2C_Master_Read
 21393  003F66  6EDF               	movwf	indf2,c
 21394  003F68  4A04               	infsnz	i2getRTC@i,f,c
 21395  003F6A  2A05               	incf	i2getRTC@i+1,f,c
 21396  003F6C  D7EB               	goto	i2l5824
 21397  003F6E                     i2l5834:
 21398                           
 21399                           ;RTC.c: 58: }
 21400                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 21401  003F6E  0E00               	movlw	0
 21402  003F70  EC81  F024         	call	i2_I2C_Master_Read
 21403  003F74  0101               	movlb	1	; () banked
 21404  003F76  6F2A               	movwf	(_time+6)& (0+255),b
 21405                           
 21406                           ;RTC.c: 60: I2C_Master_Stop();
 21407  003F78  EC3E  F025         	call	i2_I2C_Master_Stop	;wreg free
 21408  003F7C  0012               	return		;funcret
 21409  003F7E                     __end_ofi2_getRTC:
 21410                           	opt stack 0
 21411                           pclatu	equ	0xFFB
 21412                           pclath	equ	0xFFA
 21413                           tblptru	equ	0xFF8
 21414                           tblptrh	equ	0xFF7
 21415                           tblptrl	equ	0xFF6
 21416                           tablat	equ	0xFF5
 21417                           prodh	equ	0xFF4
 21418                           prodl	equ	0xFF3
 21419                           intcon	equ	0xFF2
 21420                           intcon2	equ	0xFF1
 21421                           intcon3	equ	0xFF0
 21422                           indf0	equ	0xFEF
 21423                           postinc0	equ	0xFEE
 21424                           fsr0h	equ	0xFEA
 21425                           fsr0l	equ	0xFE9
 21426                           wreg	equ	0xFE8
 21427                           postdec1	equ	0xFE5
 21428                           fsr1h	equ	0xFE2
 21429                           fsr1l	equ	0xFE1
 21430                           indf2	equ	0xFDF
 21431                           postinc2	equ	0xFDE
 21432                           postdec2	equ	0xFDD
 21433                           fsr2h	equ	0xFDA
 21434                           fsr2l	equ	0xFD9
 21435                           status	equ	0xFD8
 21436                           
 21437 ;; *************** function i2_I2C_Master_Write *****************
 21438 ;; Defined at:
 21439 ;;		line 49 in file "I2C.c"
 21440 ;; Parameters:    Size  Location     Type
 21441 ;;  d               2    1[COMRAM] unsigned int 
 21442 ;; Auto vars:     Size  Location     Type
 21443 ;;		None
 21444 ;; Return value:  Size  Location     Type
 21445 ;;                  1    wreg      void 
 21446 ;; Registers used:
 21447 ;;		wreg, status,2, status,0, cstack
 21448 ;; Tracked objects:
 21449 ;;		On entry : 0/0
 21450 ;;		On exit  : 0/0
 21451 ;;		Unchanged: 0/0
 21452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21456 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21457 ;;Total ram usage:        2 bytes
 21458 ;; Hardware stack levels used:    1
 21459 ;; Hardware stack levels required when called:    1
 21460 ;; This function calls:
 21461 ;;		i2_I2C_Master_Wait
 21462 ;; This function is called by:
 21463 ;;		i2_getRTC
 21464 ;; This function uses a non-reentrant model
 21465 ;;
 21466                           
 21467                           	psect	text88
 21468  004A5A                     __ptext88:
 21469                           	opt stack 0
 21470  004A5A                     i2_I2C_Master_Write:
 21471                           	opt stack 18
 21472                           
 21473                           ;I2C.c: 51: I2C_Master_Wait();
 21474                           
 21475                           ;incstack = 0
 21476  004A5A  EC03  F025         	call	i2_I2C_Master_Wait	;wreg free
 21477                           
 21478                           ;I2C.c: 52: SSPBUF = d;
 21479  004A5E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 21480  004A62  0012               	return		;funcret
 21481  004A64                     __end_ofi2_I2C_Master_Write:
 21482                           	opt stack 0
 21483                           pclatu	equ	0xFFB
 21484                           pclath	equ	0xFFA
 21485                           tblptru	equ	0xFF8
 21486                           tblptrh	equ	0xFF7
 21487                           tblptrl	equ	0xFF6
 21488                           tablat	equ	0xFF5
 21489                           prodh	equ	0xFF4
 21490                           prodl	equ	0xFF3
 21491                           intcon	equ	0xFF2
 21492                           intcon2	equ	0xFF1
 21493                           intcon3	equ	0xFF0
 21494                           indf0	equ	0xFEF
 21495                           postinc0	equ	0xFEE
 21496                           fsr0h	equ	0xFEA
 21497                           fsr0l	equ	0xFE9
 21498                           wreg	equ	0xFE8
 21499                           postdec1	equ	0xFE5
 21500                           fsr1h	equ	0xFE2
 21501                           fsr1l	equ	0xFE1
 21502                           indf2	equ	0xFDF
 21503                           postinc2	equ	0xFDE
 21504                           postdec2	equ	0xFDD
 21505                           fsr2h	equ	0xFDA
 21506                           fsr2l	equ	0xFD9
 21507                           status	equ	0xFD8
 21508                           
 21509 ;; *************** function i2_I2C_Master_Stop *****************
 21510 ;; Defined at:
 21511 ;;		line 43 in file "I2C.c"
 21512 ;; Parameters:    Size  Location     Type
 21513 ;;		None
 21514 ;; Auto vars:     Size  Location     Type
 21515 ;;		None
 21516 ;; Return value:  Size  Location     Type
 21517 ;;                  1    wreg      void 
 21518 ;; Registers used:
 21519 ;;		wreg, status,2, status,0, cstack
 21520 ;; Tracked objects:
 21521 ;;		On entry : 0/0
 21522 ;;		On exit  : 0/0
 21523 ;;		Unchanged: 0/0
 21524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21529 ;;Total ram usage:        0 bytes
 21530 ;; Hardware stack levels used:    1
 21531 ;; Hardware stack levels required when called:    1
 21532 ;; This function calls:
 21533 ;;		i2_I2C_Master_Wait
 21534 ;; This function is called by:
 21535 ;;		i2_getRTC
 21536 ;; This function uses a non-reentrant model
 21537 ;;
 21538                           
 21539                           	psect	text89
 21540  004A7C                     __ptext89:
 21541                           	opt stack 0
 21542  004A7C                     i2_I2C_Master_Stop:
 21543                           	opt stack 18
 21544                           
 21545                           ;I2C.c: 45: I2C_Master_Wait();
 21546                           
 21547                           ;incstack = 0
 21548  004A7C  EC03  F025         	call	i2_I2C_Master_Wait	;wreg free
 21549                           
 21550                           ;I2C.c: 46: PEN = 1;
 21551  004A80  84C5               	bsf	4037,2,c	;volatile
 21552  004A82  0012               	return		;funcret
 21553  004A84                     __end_ofi2_I2C_Master_Stop:
 21554                           	opt stack 0
 21555                           pclatu	equ	0xFFB
 21556                           pclath	equ	0xFFA
 21557                           tblptru	equ	0xFF8
 21558                           tblptrh	equ	0xFF7
 21559                           tblptrl	equ	0xFF6
 21560                           tablat	equ	0xFF5
 21561                           prodh	equ	0xFF4
 21562                           prodl	equ	0xFF3
 21563                           intcon	equ	0xFF2
 21564                           intcon2	equ	0xFF1
 21565                           intcon3	equ	0xFF0
 21566                           indf0	equ	0xFEF
 21567                           postinc0	equ	0xFEE
 21568                           fsr0h	equ	0xFEA
 21569                           fsr0l	equ	0xFE9
 21570                           wreg	equ	0xFE8
 21571                           postdec1	equ	0xFE5
 21572                           fsr1h	equ	0xFE2
 21573                           fsr1l	equ	0xFE1
 21574                           indf2	equ	0xFDF
 21575                           postinc2	equ	0xFDE
 21576                           postdec2	equ	0xFDD
 21577                           fsr2h	equ	0xFDA
 21578                           fsr2l	equ	0xFD9
 21579                           status	equ	0xFD8
 21580                           
 21581 ;; *************** function i2_I2C_Master_Start *****************
 21582 ;; Defined at:
 21583 ;;		line 31 in file "I2C.c"
 21584 ;; Parameters:    Size  Location     Type
 21585 ;;		None
 21586 ;; Auto vars:     Size  Location     Type
 21587 ;;		None
 21588 ;; Return value:  Size  Location     Type
 21589 ;;                  1    wreg      void 
 21590 ;; Registers used:
 21591 ;;		wreg, status,2, status,0, cstack
 21592 ;; Tracked objects:
 21593 ;;		On entry : 0/0
 21594 ;;		On exit  : 0/0
 21595 ;;		Unchanged: 0/0
 21596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21601 ;;Total ram usage:        0 bytes
 21602 ;; Hardware stack levels used:    1
 21603 ;; Hardware stack levels required when called:    1
 21604 ;; This function calls:
 21605 ;;		i2_I2C_Master_Wait
 21606 ;; This function is called by:
 21607 ;;		i2_getRTC
 21608 ;; This function uses a non-reentrant model
 21609 ;;
 21610                           
 21611                           	psect	text90
 21612  004A84                     __ptext90:
 21613                           	opt stack 0
 21614  004A84                     i2_I2C_Master_Start:
 21615                           	opt stack 18
 21616                           
 21617                           ;I2C.c: 33: I2C_Master_Wait();
 21618                           
 21619                           ;incstack = 0
 21620  004A84  EC03  F025         	call	i2_I2C_Master_Wait	;wreg free
 21621                           
 21622                           ;I2C.c: 34: SEN = 1;
 21623  004A88  80C5               	bsf	4037,0,c	;volatile
 21624  004A8A  0012               	return		;funcret
 21625  004A8C                     __end_ofi2_I2C_Master_Start:
 21626                           	opt stack 0
 21627                           pclatu	equ	0xFFB
 21628                           pclath	equ	0xFFA
 21629                           tblptru	equ	0xFF8
 21630                           tblptrh	equ	0xFF7
 21631                           tblptrl	equ	0xFF6
 21632                           tablat	equ	0xFF5
 21633                           prodh	equ	0xFF4
 21634                           prodl	equ	0xFF3
 21635                           intcon	equ	0xFF2
 21636                           intcon2	equ	0xFF1
 21637                           intcon3	equ	0xFF0
 21638                           indf0	equ	0xFEF
 21639                           postinc0	equ	0xFEE
 21640                           fsr0h	equ	0xFEA
 21641                           fsr0l	equ	0xFE9
 21642                           wreg	equ	0xFE8
 21643                           postdec1	equ	0xFE5
 21644                           fsr1h	equ	0xFE2
 21645                           fsr1l	equ	0xFE1
 21646                           indf2	equ	0xFDF
 21647                           postinc2	equ	0xFDE
 21648                           postdec2	equ	0xFDD
 21649                           fsr2h	equ	0xFDA
 21650                           fsr2l	equ	0xFD9
 21651                           status	equ	0xFD8
 21652                           
 21653 ;; *************** function i2_I2C_Master_Read *****************
 21654 ;; Defined at:
 21655 ;;		line 55 in file "I2C.c"
 21656 ;; Parameters:    Size  Location     Type
 21657 ;;  a               1    wreg     unsigned char 
 21658 ;; Auto vars:     Size  Location     Type
 21659 ;;  a               1    1[COMRAM] unsigned char 
 21660 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21661 ;; Return value:  Size  Location     Type
 21662 ;;                  1    wreg      unsigned char 
 21663 ;; Registers used:
 21664 ;;		wreg, status,2, status,0, cstack
 21665 ;; Tracked objects:
 21666 ;;		On entry : 0/0
 21667 ;;		On exit  : 0/0
 21668 ;;		Unchanged: 0/0
 21669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21673 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21674 ;;Total ram usage:        2 bytes
 21675 ;; Hardware stack levels used:    1
 21676 ;; Hardware stack levels required when called:    1
 21677 ;; This function calls:
 21678 ;;		i2_I2C_Master_Wait
 21679 ;; This function is called by:
 21680 ;;		i2_getRTC
 21681 ;; This function uses a non-reentrant model
 21682 ;;
 21683                           
 21684                           	psect	text91
 21685  004902                     __ptext91:
 21686                           	opt stack 0
 21687  004902                     i2_I2C_Master_Read:
 21688                           	opt stack 18
 21689                           
 21690                           ;incstack = 0
 21691                           ;i2I2C_Master_Read@a stored from wreg
 21692  004902  6E02               	movwf	i2I2C_Master_Read@a,c
 21693                           
 21694                           ;I2C.c: 57: unsigned char temp;
 21695                           ;I2C.c: 58: I2C_Master_Wait();
 21696  004904  EC03  F025         	call	i2_I2C_Master_Wait	;wreg free
 21697                           
 21698                           ;I2C.c: 59: RCEN = 1;
 21699  004908  86C5               	bsf	4037,3,c	;volatile
 21700                           
 21701                           ;I2C.c: 60: I2C_Master_Wait();
 21702  00490A  EC03  F025         	call	i2_I2C_Master_Wait	;wreg free
 21703                           
 21704                           ;I2C.c: 61: temp = SSPBUF;
 21705  00490E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21706                           
 21707                           ;I2C.c: 62: I2C_Master_Wait();
 21708  004912  EC03  F025         	call	i2_I2C_Master_Wait	;wreg free
 21709                           
 21710                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21711  004916  5002               	movf	i2I2C_Master_Read@a,w,c
 21712  004918  A4D8               	btfss	status,2,c
 21713  00491A  D002               	goto	i2u386_40
 21714  00491C  8AC5               	bsf	4037,5,c	;volatile
 21715  00491E  D001               	goto	i2l5532
 21716  004920                     i2u386_40:
 21717  004920  9AC5               	bcf	4037,5,c	;volatile
 21718  004922                     i2l5532:
 21719                           
 21720                           ;I2C.c: 64: ACKEN = 1;
 21721  004922  88C5               	bsf	4037,4,c	;volatile
 21722                           
 21723                           ;I2C.c: 65: return temp;
 21724  004924  5003               	movf	i2I2C_Master_Read@temp,w,c
 21725  004926  0012               	return	
 21726  004928                     __end_ofi2_I2C_Master_Read:
 21727                           	opt stack 0
 21728                           pclatu	equ	0xFFB
 21729                           pclath	equ	0xFFA
 21730                           tblptru	equ	0xFF8
 21731                           tblptrh	equ	0xFF7
 21732                           tblptrl	equ	0xFF6
 21733                           tablat	equ	0xFF5
 21734                           prodh	equ	0xFF4
 21735                           prodl	equ	0xFF3
 21736                           intcon	equ	0xFF2
 21737                           intcon2	equ	0xFF1
 21738                           intcon3	equ	0xFF0
 21739                           indf0	equ	0xFEF
 21740                           postinc0	equ	0xFEE
 21741                           fsr0h	equ	0xFEA
 21742                           fsr0l	equ	0xFE9
 21743                           wreg	equ	0xFE8
 21744                           postdec1	equ	0xFE5
 21745                           fsr1h	equ	0xFE2
 21746                           fsr1l	equ	0xFE1
 21747                           indf2	equ	0xFDF
 21748                           postinc2	equ	0xFDE
 21749                           postdec2	equ	0xFDD
 21750                           fsr2h	equ	0xFDA
 21751                           fsr2l	equ	0xFD9
 21752                           status	equ	0xFD8
 21753                           
 21754 ;; *************** function i2_I2C_Master_Wait *****************
 21755 ;; Defined at:
 21756 ;;		line 26 in file "I2C.c"
 21757 ;; Parameters:    Size  Location     Type
 21758 ;;		None
 21759 ;; Auto vars:     Size  Location     Type
 21760 ;;		None
 21761 ;; Return value:  Size  Location     Type
 21762 ;;                  1    wreg      void 
 21763 ;; Registers used:
 21764 ;;		wreg, status,2, status,0
 21765 ;; Tracked objects:
 21766 ;;		On entry : 0/0
 21767 ;;		On exit  : 0/0
 21768 ;;		Unchanged: 0/0
 21769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21773 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21774 ;;Total ram usage:        1 bytes
 21775 ;; Hardware stack levels used:    1
 21776 ;; This function calls:
 21777 ;;		Nothing
 21778 ;; This function is called by:
 21779 ;;		i2_I2C_Master_Start
 21780 ;;		i2_I2C_Master_Stop
 21781 ;;		i2_I2C_Master_Write
 21782 ;;		i2_I2C_Master_Read
 21783 ;; This function uses a non-reentrant model
 21784 ;;
 21785                           
 21786                           	psect	text92
 21787  004A06                     __ptext92:
 21788                           	opt stack 0
 21789  004A06                     i2_I2C_Master_Wait:
 21790                           	opt stack 18
 21791  004A06                     i2l66:
 21792  004A06  B4C7               	btfsc	4039,2,c	;volatile
 21793  004A08  D7FE               	goto	i2l66
 21794  004A0A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21795  004A0E  0E1F               	movlw	31
 21796  004A10  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21797  004A12  B4D8               	btfsc	status,2,c
 21798  004A14  0012               	return	
 21799  004A16  D7F7               	goto	i2l66
 21800  004A18                     __end_ofi2_I2C_Master_Wait:
 21801                           	opt stack 0
 21802                           pclatu	equ	0xFFB
 21803                           pclath	equ	0xFFA
 21804                           tblptru	equ	0xFF8
 21805                           tblptrh	equ	0xFF7
 21806                           tblptrl	equ	0xFF6
 21807                           tablat	equ	0xFF5
 21808                           prodh	equ	0xFF4
 21809                           prodl	equ	0xFF3
 21810                           intcon	equ	0xFF2
 21811                           intcon2	equ	0xFF1
 21812                           intcon3	equ	0xFF0
 21813                           indf0	equ	0xFEF
 21814                           postinc0	equ	0xFEE
 21815                           fsr0h	equ	0xFEA
 21816                           fsr0l	equ	0xFE9
 21817                           wreg	equ	0xFE8
 21818                           postdec1	equ	0xFE5
 21819                           fsr1h	equ	0xFE2
 21820                           fsr1l	equ	0xFE1
 21821                           indf2	equ	0xFDF
 21822                           postinc2	equ	0xFDE
 21823                           postdec2	equ	0xFDD
 21824                           fsr2h	equ	0xFDA
 21825                           fsr2l	equ	0xFD9
 21826                           status	equ	0xFD8
 21827                           pclatu	equ	0xFFB
 21828                           pclath	equ	0xFFA
 21829                           tblptru	equ	0xFF8
 21830                           tblptrh	equ	0xFF7
 21831                           tblptrl	equ	0xFF6
 21832                           tablat	equ	0xFF5
 21833                           prodh	equ	0xFF4
 21834                           prodl	equ	0xFF3
 21835                           intcon	equ	0xFF2
 21836                           intcon2	equ	0xFF1
 21837                           intcon3	equ	0xFF0
 21838                           indf0	equ	0xFEF
 21839                           postinc0	equ	0xFEE
 21840                           fsr0h	equ	0xFEA
 21841                           fsr0l	equ	0xFE9
 21842                           wreg	equ	0xFE8
 21843                           postdec1	equ	0xFE5
 21844                           fsr1h	equ	0xFE2
 21845                           fsr1l	equ	0xFE1
 21846                           indf2	equ	0xFDF
 21847                           postinc2	equ	0xFDE
 21848                           postdec2	equ	0xFDD
 21849                           fsr2h	equ	0xFDA
 21850                           fsr2l	equ	0xFD9
 21851                           status	equ	0xFD8
 21852                           
 21853                           	psect	rparam
 21854  0000                     pclatu	equ	0xFFB
 21855                           pclath	equ	0xFFA
 21856                           tblptru	equ	0xFF8
 21857                           tblptrh	equ	0xFF7
 21858                           tblptrl	equ	0xFF6
 21859                           tablat	equ	0xFF5
 21860                           prodh	equ	0xFF4
 21861                           prodl	equ	0xFF3
 21862                           intcon	equ	0xFF2
 21863                           intcon2	equ	0xFF1
 21864                           intcon3	equ	0xFF0
 21865                           indf0	equ	0xFEF
 21866                           postinc0	equ	0xFEE
 21867                           fsr0h	equ	0xFEA
 21868                           fsr0l	equ	0xFE9
 21869                           wreg	equ	0xFE8
 21870                           postdec1	equ	0xFE5
 21871                           fsr1h	equ	0xFE2
 21872                           fsr1l	equ	0xFE1
 21873                           indf2	equ	0xFDF
 21874                           postinc2	equ	0xFDE
 21875                           postdec2	equ	0xFDD
 21876                           fsr2h	equ	0xFDA
 21877                           fsr2l	equ	0xFD9
 21878                           status	equ	0xFD8
 21879                           
 21880                           	psect	temp
 21881  00007E                     btemp:
 21882                           	opt stack 0
 21883  00007E                     	ds	1
 21884  0000                     int$flags	set	btemp
 21885                           pclatu	equ	0xFFB
 21886                           pclath	equ	0xFFA
 21887                           tblptru	equ	0xFF8
 21888                           tblptrh	equ	0xFF7
 21889                           tblptrl	equ	0xFF6
 21890                           tablat	equ	0xFF5
 21891                           prodh	equ	0xFF4
 21892                           prodl	equ	0xFF3
 21893                           intcon	equ	0xFF2
 21894                           intcon2	equ	0xFF1
 21895                           intcon3	equ	0xFF0
 21896                           indf0	equ	0xFEF
 21897                           postinc0	equ	0xFEE
 21898                           fsr0h	equ	0xFEA
 21899                           fsr0l	equ	0xFE9
 21900                           wreg	equ	0xFE8
 21901                           postdec1	equ	0xFE5
 21902                           fsr1h	equ	0xFE2
 21903                           fsr1l	equ	0xFE1
 21904                           indf2	equ	0xFDF
 21905                           postinc2	equ	0xFDE
 21906                           postdec2	equ	0xFDD
 21907                           fsr2h	equ	0xFDA
 21908                           fsr2l	equ	0xFD9
 21909                           status	equ	0xFD8


Data Sizes:
    Strings     1251
    Constant    27
    Data        8
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      59
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_120(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[18]), STR_116(CODE[18]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  195969
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22550
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             11    11      0   17123
                                             49 BANK0     11    11      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10978
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10231
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   44456
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12903
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   94520
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8647
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8535
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15159
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                           5     5      0    8627
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19297
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          5     5      0    8650
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8400
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3B       7       23.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      34        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 25 13:21:02 2017

                                    _i 0131                     i2_I2C_Master_Start 4A84  
                   i2_I2C_Master_Write 4A5A                                     l66 49F2  
                                   _ID 3304                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0082  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 204E                                    l732 2A30  
                                  l742 2AF4                                    l487 3918  
                                  l809 3ED2                                    l745 2B2E  
                                  l756 33D0                                    l757 33EA  
                                  l943 3554                                    l956 49BE  
                                  l965 31CC                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00EA  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 387E  
                  _log_count_can_w_lab 0073        __end_of_change_state_to_menu_11 4690  
      __end_of_change_state_to_menu_12 4500        __end_of_change_state_to_menu_22 44C8  
      __end_of_change_state_to_menu_23 4660           _f_can_coming_to_distribution 006B  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 4780  
      __end_of_change_state_to_logs_12 4750        __end_of_change_state_to_logs_22 4720  
      __end_of_change_state_to_logs_23 480A        __end_of_change_state_to_logs_33 46F0  
      __end_of_change_state_to_logs_34 46C0                                   ??_ID 0080  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1210 41C4  
                                 l1123 0126                                   l1204 41B4  
                                 l1116 007C                                   l1060 349C  
                                 l1126 018C                                   l1231 37B0  
                                 l1127 01DA                                   l1119 0080  
                                 l1128 0240                                   l1225 3752  
                                 l1153 05E8                                   l1129 028E  
                                 l1081 3674                                   l1057 347C  
                                 l1314 13B6                                   l1218 371A  
                                 l1170 0858                                   l1090 1CF8  
                                 l1260 3D6A                                   l1084 3678  
                                 l1229 3796                                   l1253 3D5A  
                                 l1165 0782                                   l1093 1CFC  
                                 l1270 3804                                   l1190 3DBE  
                                 l1191 3DC2                                   l1183 3D9A  
                                 l1280 3878                                   l1192 3DC6  
                                 l1193 3DCA                                   l1195 3E08  
                                 l1187 3DB6                                   l1189 3DBA  
                                 l1278 384C                                   l1279 3866  
                                 l1708 3AA6                                   l1761 3E8C  
                                 l1771 40AA                                   l6020 20B2  
                                 l6030 2148                                   l6022 20D0  
                                 l6014 2058                                   l6032 2166  
                                 l6024 20EE                                   l6016 2076  
                                 l6040 21C0                                   l6008 1FCC  
                                 l6034 2184                                   l6026 210C  
                                 l6018 2094                                   l6042 221E  
                                 l5500 4066                                   l7100 04C8  
                                 l7012 0314                                   l6036 21A2  
                                 l6028 212A                                   l5502 4072  
                                 l7022 033C                                   l5422 484A  
                                 l5504 4078                                   l7200 06D6  
                                 l7120 053C                                   l7112 051A  
                                 l7104 04E0                                   l7016 032C  
                                 l7008 030A                                   l5424 485C  
                                 l6240 35FE                                   l6224 35BC  
                                 l6232 35DE                                   l7210 06FE  
                                 l7202 06DC                                   l7130 0564  
                                 l7122 0542                                   l7042 03B0  
                                 l7034 038E                                   l7026 0354  
                                 l7018 0332                                   l6250 48A8  
                                 l5508 409C                                   l5620 1192  
                                 l7116 0524                                   l7060 0412  
                                 l7052 03D8                                   l7044 03B6  
                                 l6236 35F4                                   l6228 35C6  
                                 l5710 146C                                   l5622 11A4  
                                 l7302 08AA                                   l7222 0742  
                                 l7206 06E6                                   l7142 05A8  
                                 l7126 054C                                   l7070 043A  
                                 l7038 0398                                   l5446 47D4  
                                 l6246 4892                                   l6182 3ADC  
                                 l5480 3E3C                                   l5464 4882  
                                 l5704 144A                                   l5640 125E  
                                 l5632 11E2                                   l5616 117E  
                                 l7232 076A                                   l7152 05D0  
                                 l7064 041C                                   l7048 03C0  
                                 l5800 3A2A                                   l5482 3E48  
                                 l5730 14F0                                   l5722 14C8  
                                 l5714 14A4                                   l5650 129C  
                                 l5626 11AE                                   l7306 08C2  
                                 l7226 075A                                   l7218 0738  
                                 l7170 063A                                   l7146 05C0  
                                 l7138 059E                                   l7090 04A0  
                                 l7074 0444                                   l5802 3A3A  
                                 l6370 3C5C                                   l6178 3AC6  
                                 l6610 2A8E                                   l5492 3E7E  
                                 l5484 3E4E                                   l5740 1524  
                                 l5716 14AE                                   l5660 1314  
                                 l5652 12A2                                   l7260 07F4  
                                 l7252 07D2                                   l7228 0760  
                                 l7180 0662                                   l7148 05C6  
                                 l7068 0434                                   l8300 34C0  
                                 l5812 3A94                                   l5804 3A40  
                                 l6188 3B52                                   l5734 150A  
                                 l5670 1376                                   l5662 131A  
                                 l7270 081C                                   l7262 07FA  
                                 l7174 0652                                   l7166 0630  
                                 l7094 04B8                                   l7086 0496  
                                 l7078 045C                                   l8302 34C6  
                                 l5750 450A                                   l6366 3C46  
                                 l6710 27B0                                   l6278 42C4  
                                 _ADIE 007CEE                                   l5744 157C  
                                 l5728 14E4                                   l5664 1332  
                                 l5648 1290                                   l7256 07DC  
                                 l7192 06B4                                   l7184 067A  
                                 l7176 0658                                   l7096 04BE  
                                 l8304 34CC                                   l8312 34DE  
                                 l7600 3BB4                                   l5752 4516  
                                 l6376 3C88                                   l6720 282E  
                                 l6704 2762                                   l6624 2ADE  
                                 l5738 151E                                   l5690 1408  
                                 l5658 1308                                   l5674 137C  
                                 l5746 1588                                   l7522 382C  
                                 l7266 0804                                   l6810 1D4C  
                                 l8306 34D2                                   l5762 3CE6  
                                 l8234 30EE                                   l6722 2848  
                                 l6730 2896                                   l6706 277C  
                                 l6714 27CA                                   l6634 2B0E  
                                 l5692 140E                                   l5668 135E  
                                 l7524 3836                                   l7348 3D92  
                                 l7292 0882                                   l7276 0842  
                                 l7196 06BE                                   l8308 34D8  
                                 l7612 3BFA                                   l7604 3BD8  
                                 l8260 3186                                   l8236 3102  
                                 l6724 2862                                   l6732 28C4  
                                 l6708 2796                                   l6716 27F8  
                                 l6636 2B18                                   l5686 13EE  
                                 l7534 3868                                   l7382 3780  
                                 l7286 0872                                   l7550 3970  
                                 l5758 3CD0                                   l7702 0A84  
                                 l6726 287C                                   l6646 2B48  
                                 l6582 29EE                                   l7368 373C  
                                 l7296 089A                                   l7288 0878  
                                 l6840 1E54                                   l8272 341E  
                                 l7560 39A0                                   l7544 395A  
                                 l7608 3BE6                                   l5768 3D06  
                                 l6680 33B0                                   l6664 336A  
                                 l5786 3EBE                                   l7378 376C  
                                 l7298 08A0                                   l6922 00EA  
                                 l8290 34A2                                   l7802 0DDA  
                                 l7730 0B06                                   l7722 0AE4  
                                 l6682 33BA                                   l6594 2A54  
                                 l8370 38C8                                   l5788 3EE8  
                                 l7396 3DCE                                   l6932 0112  
                                 l6924 00F0                                   l6828 1E04  
                                 l8292 34A8                                   l7556 398E  
                                 l7572 39DE                                   l7812 0DF6  
                                 l7740 0B22                                   l7708 0A92  
                                 l7660 09B8                                   l6676 33A0  
                                 l6668 3378                                   l8380 38F8  
                                 l8372 38DE                                   l6870 1F48  
                                 l6846 1E96                                   l8294 34AE  
                                 l7558 399A                                   l7726 0AEE  
                                 l7670 09DA                                   l7662 09BE  
                                 l8390 3914                                   l6928 00FA  
                                 l8296 34B4                                   l7576 39F2  
                                 l7568 39D0                                   l7592 3B8E  
                                 l7920 1056                                   l7840 0EDE  
                                 l7816 0E0E                                   l7808 0DEC  
                                 l7760 0B8C                                   l7744 0B3A  
                                 l7736 0B18                                   l8376 38EC  
                                 l6882 1F90                                   l6866 1F12  
                                 l6858 1EE2                                   l8298 34BA  
                                 l7930 1080                                   l7850 0F08  
                                 l7770 0C22                                   l7762 0BAA  
                                 l7674 09F2                                   l7666 09D0  
                                 l8378 38F2                                   l8394 391A  
                                 l7596 3BA2                                   l7588 3B7E  
                                 l7924 106E                                   l7916 104C  
                                 l7844 0EF6                                   l7836 0ED4  
                                 l7780 0CB8                                   l7772 0C40  
                                 l7764 0BC8                                   l7692 0A5C  
                                 l8388 390E                                   l6878 1F5A  
                                 l7598 3BAE                                   l7934 108A  
                                 l7854 0F12                                   l7782 0CD6  
                                 l7774 0C5E                                   l7766 0BE6  
                                 l7790 0D76                                   l7694 0A62  
                                 l7678 0A04                                   l7960 110A  
                                 l7880 0F9A                                   l7784 0CF4  
                                 l7776 0C7C                                   l7768 0C04  
                                 l7970 1134                                   l7938 10A2  
                                 l7890 0FC4                                   l7858 0F2A  
                                 l7794 0DB8                                   l7778 0C9A  
                                 l7698 0A6C                                   l7964 1122  
                                 l7956 1100                                   l7884 0FB2  
                                 l7876 0F90                                   l7788 0D12  
                                 l7974 113E                                   l7894 0FCE  
                                 l7798 0DC2                                   l7982 1162  
                                 l7978 1156                                   l7898 0FE6  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u4040 12DC                                   u5000 29FA  
                                 u5020 2A30                                   u4047 12D2  
                                 u4080 1354                                   u5130 3336  
                                 u5018 29FE                                   u5300 1F36  
                                 u4087 134A                                   u6111 3822  
                                 u6120 3824                                   u5400 0126  
                                 u5330 1F7E                                   u5138 333A  
                                 _PEIE 007F96                                   u5420 01DA  
                                 u5308 1F3A                                   u5260 1D8E  
                                 u5270 1D90                                   u5440 028E  
                                 u3760 47D2                                   u5338 1F82  
                                 u7210 31CC                                   _RCEN 007E2B  
                                 u4670 204E                                   u8007 3624  
                                 u4655 40E4                                   u3960 43B2  
                                 u8017 3668                                   u3970 43B4  
                                 u8107 01EA                                   u8027 368A  
                                 u3980 43FE                                   u8117 0250  
                                 u8037 002C                                   u3981 43FA  
                                 u3990 4400                                   u8207 04A8  
                                 u8127 026E                                   u8047 0070  
                                 u8217 04D0                                   u8137 029E  
                                 u8057 0092                                   u7417 297E  
                                 i2l66 4A06                                   u8307 074A  
                                 u8227 052C                                   u8147 031C  
                                 u8067 0102                                   u7507 489E  
                                 u7427 2A44                                   u8317 0772  
                                 u8237 0554                                   u8157 0344  
                                 u8077 0136                                   u7517 331A  
                                 u7437 2AAE                                   u8407 3D74  
                                 u8327 0794                                   u8247 05B0  
                                 u8167 03A0                                   u8087 019C  
                                 u7607 3606                                   u7527 33D4  
                                 u7447 2AF8                                   u8417 3D88  
                                 u8337 07E4                                   u8257 05D8  
                                 u8177 03C8                                   u8097 01BA  
                                 u7617 4410                                   u7537 33DE  
                                 u7457 2B02                                   u8507 164E  
                                 u8427 36FA                                   u8347 080C  
                                 u8267 0642                                   u8187 0424  
                                 u7707 0B54                                   u7627 4444  
                                 u7547 3404                                   u7467 2B32  
                                 u8517 1682                                   u8437 3756  
                                 u8357 085C                                   u8277 066A  
                                 u8197 044C                                   u7717 0DCA  
                                 u7637 08E2                                   u7557 281E  
                                 u7477 2B3C                                   u8607 18B0  
                                 u8527 16B4                                   u8447 375E  
                                 u8367 0866                                   u8287 06C6  
                                 u7807 105E                                   u7727 0DFE  
                                 u7647 09E2                                   u7567 28D2  
                                 u7487 458A                                   u8617 18E4  
                                 u8537 1700                                   u8457 379A  
                                 u8377 088A                                   u8297 06EE  
                                 u7817 1092                                   u7737 0E28  
                                 u7657 0A1E                                   u7577 2904  
                                 u7497 429A                                   u8707 404A  
                                 u8627 1916                                   u8547 1734  
                                 u8467 37A4                                   u8387 08B2  
                                 u7907 1D3C                                   u7827 10BC  
                                 u7747 0EE6                                   u7667 0A74  
                                 u7587 3572                                   u8637 420E  
                                 u8557 1766                                   u8477 417E  
                                 u8397 3D24                                   u7917 1DA4  
                                 u7837 1112                                   u7757 0F1A  
                                 u7677 0AA0                                   u7597 35CE  
                                 u8647 37C4                                   u8567 17B2  
                                 u8487 15B6                                   u7927 1DF8  
                                 u7847 1146                                   u7767 0F44  
                                 u7687 0AF6                                   u8657 3850  
                                 u8577 17FE                                   u8497 1602  
                                 u7937 1E18                                   u7857 342C  
                                 u7777 0FA2                                   u7697 0B2A  
                                 u8667 385A                                   u8587 1832  
                                 u7947 1E46                                   u7867 3470  
                                 u7787 0FD6                                   u8677 400A  
                                 u8597 1864                                   u7957 1E8A  
                                 u7877 1CA8                                   u7797 1000  
                                 u8687 4014                                   u7967 1EA8  
                                 u7887 1CEC                                   u8697 4040  
                                 u7977 1ED6                                   u7897 1D0E  
                                 u7987 1EF0                                   u7997 4852  
                                 _RSEN 007E29                            _stopSignals 49C6  
                                 _Test 341E                                   _back 005B  
                                 _main 387E                                   _down 0063  
                                 _keys FB01                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 494C  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EE  
                      __end_ofi2_putch 4A44                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2522                            i2_lcdNibble 4226  
                      __end_of_Loading 2B5C                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3616  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 39FC  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB1C                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 3C04                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB1C  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB34                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_92 FC81                                  STR_68 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC92                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
                                ?_sort 0001                        __end_of___lldiv 3AB8  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 3E96                        __end_of___lwmod 40B4  
                                i2l257 251E                                  i2l602 25B0  
                                i2l880 3066                                  i2l874 2FFA  
                                i2l956 49EA                        ___awdiv@counter 008A  
                                i2l878 3046                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 15A8  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 4A38  
                      __end_of_handler 30A2                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 4862                        __end_of_initLCD 444E  
                       __CFG_EBTRB$OFF 000000                                  _debug 0061  
                           i2isdigit@c 0003                                  _getIR 427C  
                      __end_of_loadRTC 3C90                        __end_of_readMAG 4408  
                      __end_of_dpowers FB1C                                  _first 006F  
                                _enter 0065                        __end_of_isdigit 488C  
                                _input 007D                                  _putch 4A18  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 4902                       __end_ofi2_getRTC 3F7E  
                  _log_count_pop_w_tab 00F2                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 1C9A                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 45D0  
                          Loading@addr 00B3                       _count_can_no_lab 012B  
                 __size_of_EEPROM_read 0018                        __initialization 4322  
                         __end_of_Test 3532                     __size_ofi2_lcdInst 000C  
                         __end_of_main 393E                           __end_of_keys FB12  
                         __end_of_sort 496E                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1697 00AE                            _BlockerTest 37B6  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00BC                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB49  
                               STR_120 FFB6                                 STR_104 FBE8  
                               STR_112 FB5B                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FC1B                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC4E  
                               STR_108 FE78                                 STR_116 FB6D  
                               _EEADRH 000FAA                                 STR_117 FB5B  
                               STR_109 FE69                                 STR_118 FB49  
                               _ADRESL 000FC3                                 STR_119 FB7F  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4600  
            i2_change_state_to_menu_22 45D0                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1314 1B06                                 i2l1761 4318  
                               i2l1771 4486                                 i2l6170 32EC  
                               i2l6162 32B8                                 i2l6330 25FC  
                               i2l8010 22C2                                 i2l8002 22A6  
                               i2l5532 4922                                 i2l6420 2D6C  
                               i2l6340 266A                                 i2l6332 2612  
                               i2l6324 25BA                                 i2l6158 32A8  
                               i2l6510 2EA6                                 i2l6502 2E8E  
                               i2l6430 2D96                                 i2l6342 2680  
                               i2l6334 2628                                 i2l6326 25D0  
                               i2l6350 26C2                                 i2l6318 254E  
                               i2l8110 2434                                 i2l8102 2410  
                               i2l8030 22FA                                 i2l8022 22DE  
                               i2l8014 22D0                                 i2l8006 22B4  
                               i2l6520 2EC6                                 i2l6432 2D9A  
                               i2l6344 2696                                 i2l6336 263E  
                               i2l6328 25E6                                 i2l6352 271C  
                               i2l5570 42F2                                 i2l6450 2DD0  
                               i2l6442 2DB8                                 i2l6346 26AC  
                               i2l6338 2654                                 i2l8130 2482  
                               i2l8122 2466                                 i2l8114 2442  
                               i2l8106 2426                                 i2l8050 2342  
                               i2l8042 2326                                 i2l8034 230A  
                               i2l8026 22EC                                 i2l5556 49A6  
                               i2l5900 1A90                                 i2l6532 2EFC  
                               i2l6524 2ED8                                 i2l6516 2EB4  
                               i2l6452 2DD6                                 i2l6444 2DBE  
                               i2l6428 2D86                                 i2l5566 42E6  
                               i2l5590 4468                                 i2l5910 1AD0  
                               i2l6446 2DC4                                 i2l6438 2DA4  
                               i2l8134 2490                                 i2l8126 2474  
                               i2l8118 2450                                 i2l8070 2390  
                               i2l8062 2374                                 i2l8054 2350  
                               i2l8046 2334                                 i2l8038 2318  
                               i2l5824 3F44                                 i2l5568 42EE  
                               i2l5904 1ABA                                 i2l6528 2EEA  
                               i2l6448 2DCA                                 i2l6456 2DDC  
                               i2l8144 24B4                                 i2l5834 3F6E  
                               i2l5578 430E                                 i2l5594 447C  
                               i2l5586 445C                                 i2l5922 1B34  
                               i2l5906 1ACC                                 i2l8322 2B68  
                               i2l6482 2E46                                 i2l6538 2F06  
                               i2l8138 24A6                                 i2l8090 23E6  
                               i2l8082 23C2                                 i2l8074 23A6  
                               i2l8066 2382                                 i2l8058 2366  
                               i2l8410 2FB2                                 i2l5828 3F54  
                               i2l5588 4464                                 i2l5940 1B82  
                               i2l5852 1936                                 i2l8332 2BD2  
                               i2l6492 2E6C                                 i2l6476 2E38  
                               i2l6468 2E20                                 i2l5950 1BC0  
                               i2l5926 1B4C                                 i2l5862 195A  
                               i2l8342 2C94                                 i2l8326 2B78  
                               i2l6486 2E62                                 i2l8094 23F4  
                               i2l8086 23D0                                 i2l8078 23B4  
                               i2l5952 1BC8                                 i2l5928 1B50  
                               i2l5856 1946                                 i2l6496 2E80  
                               i2l8424 2FCE                                 i2l8408 2FAE  
                               i2l5970 1C10                                 i2l5946 1B9C  
                               i2l5858 1954                                 i2l6498 2E84  
                               i2l8098 2402                                 i2l5980 1C76  
                               i2l5964 1BF4                                 i2l5884 1A16  
                               i2l5876 19EE                                 i2l5868 198C  
                               i2l5966 1BFC                                 i2l5974 1C22  
                               i2l5958 1BDE                                 i2l5894 1A6E  
                               i2l5886 1A20                                 i2l5982 1C7E  
                               i2l8470 3064                                 i2l8446 3018  
                               i2l5976 1C28                                 i2l5896 1A78  
                               i2l5888 1A24                                 i2l8448 301A  
                               i2l5898 1A7E                                 i2l5986 45A8  
                               i2l5988 45B0                                 i2l8780 24D2  
                               i2l8790 2E10                                 i2l8782 24F4  
                               i2l8784 2510                                 i2l8788 2DF4  
                               i2l7996 2292                                 i2l7998 2298  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 48B4  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 494C                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2964  
                               ___wmul 4536                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 456C  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3C90                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 4990  
                               _initUI 4780                                 _readIR 4370  
                               _logRun 30A2                                 clear_0 4348  
                               clear_1 4354                                 clear_2 4360  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 4170                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 006C  
                         ?_retrieveLog 0007                                 _strcpy 4500  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 48DC  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 48B4  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 4322                       __end_of_printRTC 2262  
                         __mediumconst FB00                      __end_ofi2___lwmod 4490  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F0  
                __end_of_algorithmTest 36EC                      __end_ofi2_lcdInst 4A50  
                           _PusherTest 36EC                      __end_ofi2_isdigit 49AE  
                           __accesstop 0080                __end_of__initialization 4366  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 49DC                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4A8E  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4A64                          __end_of_getIR 42D0  
                          i2printRTC@i 0041                          _initSortTimer 3AB8  
          __end_of_updateServoPosition 3F0C                          __end_of_putch 4A28  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 341E                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 4836          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 480A                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 005D  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 3532  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001                                UI@F3226 0133  
             ?_change_state_to_menu_23 0001                      __end_of_SpeedTest 3D9A  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 3E1E                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2315 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00E2  
                              i2_putch 4A38                              ?_initTime 0080  
                      _f_loadingNewCan 00E8                        i2printRTC@month 003D  
                __size_of_Distribution 020C            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4052                                _Loading 2964  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 393E  
                              ___awmod 3B62                             _initServos 41CC  
                              ___lldiv 39FC                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 3E1E  
                              ___lwmod 4052                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 4322  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0140  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3F7E                                _lcdInst 4A28  
                              _handler 0008                                __ptext0 387E  
                              __ptext1 49C6                                __ptext2 494C  
                              __ptext3 2964                                __ptext4 3AB8  
                              __ptext5 3F7E                                __ptext6 456C  
                              __ptext7 427C                                __ptext8 4370  
                              __ptext9 488C                        __size_of_printf 0438  
                              _readADC 4836                        __size_of_strcpy 0036  
                              _initLCD 4408                                _cur_can 00E4  
                              _loadRTC 3C04                                _readMAG 43BC  
                              _dpowers FB12                     actuatorTest@i_1651 00AE  
                   actuatorTest@i_1660 00B4                     actuatorTest@i_1652 00AF  
                   actuatorTest@i_1644 00AD                     actuatorTest@i_1661 00B5  
                   actuatorTest@i_1670 00BA                     actuatorTest@i_1654 00B0  
                   actuatorTest@i_1671 00BB                     actuatorTest@i_1663 00B6  
                   actuatorTest@i_1655 00B1                     actuatorTest@i_1680 00C0  
                   actuatorTest@i_1664 00B7                     actuatorTest@i_1681 00C1  
                   actuatorTest@i_1673 00BC                     actuatorTest@i_1657 00B2  
                   actuatorTest@i_1674 00BD                     actuatorTest@i_1666 00B8  
                   actuatorTest@i_1658 00B3                     actuatorTest@i_1683 00C2  
                   actuatorTest@i_1667 00B9                     actuatorTest@i_1684 00C3  
                   actuatorTest@i_1676 00BE                     actuatorTest@i_1677 00BF  
                              _isdigit 4862                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0122  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2758  
                       __pintcode_body 2F34                   end_of_initialization 4366  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 2F34  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3FEA                             _sensorTest 1C9A  
                  __size_of_PusherTest 00CA                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2F34                           ??_BothServos 00AB  
                __end_of_machineConfig 4170                             _updateMenu 2262  
                    i2_I2C_Master_Read 4902                              _IR_signal 00DE  
                    i2_I2C_Master_Wait 4A06                      i2_I2C_Master_Stop 4A7C  
                    i2___lwdiv@divisor 0008                        _log_count_total 0075  
                            i2___lwdiv 42D0                              i2___lwmod 444E  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 2758  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 4A44  
                        Loading@i_1100 00B8                          Loading@i_1099 00B6  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4990                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 192C                            PusherTest@i 00AC  
                  __end_of_EEPROM_read 49C6                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 456C  
                       __end_of_getMAG 459E                         __end_of_getRTC 3D16  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 47AE  
                       __end_of_readIR 43BC                         __end_of_logRun 31E2  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 4536  
            __end_ofi2_I2C_Master_Read 4928              __end_ofi2_I2C_Master_Wait 4A18  
                         i2printf@prec 001D                    start_initialization 4322  
            __end_ofi2_I2C_Master_Stop 4A84                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 012D  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1330 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 3D16                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3D9A  
                          ?_sensorTest 0001                            __pdataBANK1 0133  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2435 0045                   __size_of_BlockerTest 00C8  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1959 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 005F                            _EEPROM_read 49AE  
                   __end_of_PortTestA5 41CC                       _I2C_Master_Start 4A74  
                            _f_lastCan 006D                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4A50  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FB00  
                            _lcdNibble 3FEA                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 37B6                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0071  
                            _cur_state 00E6                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0054                          _algorithmTest 3616  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 011A  
                          __size_of_UI 08A6                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 4A8C             __end_ofi2_I2C_Master_Write 4A64  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2D4E                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               i2u441_40 1A52  
                             i2u441_47 1A48                               _PIR2bits 000FA1  
                             i2u445_40 1AB2                               i2u445_47 1AA8  
                             i2u386_40 4920                               i2u484_40 25B0  
                             i2u726_40 2C8E                               i2u871_47 2D8C  
                             i2u872_47 423E                               i2u873_47 4248  
                             i2u874_47 426A                               i2u875_47 4274  
                  __size_of_updateMenu 02C0                         _log_completion 00EC  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 48DC                          lcdNibble@data 0081  
                             i2_getRTC 3F0C                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00BA                               i2_printf 192C  
                             i2_strcpy 459E                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4336  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 49F2  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 01F8  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 3B62                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4660  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 44C8  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4490  
              _change_state_to_menu_23 4630                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4750                _change_state_to_logs_12 4720  
              _change_state_to_logs_22 46F0                _change_state_to_logs_23 47DC  
              _change_state_to_logs_33 46C0                _change_state_to_logs_34 4690  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 309A                             _EEPROMTest 4A8C  
                      _I2C_Master_Init 40B4                       __size_of_readADC 002C  
                      _I2C_Master_Read 47AE                       __size_of_initLCD 0046  
                         _f_ID_receive 0067                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 49F2  
                      _I2C_Master_Stop 4A6C                        BlockerTest@flag 00AE  
                     __size_of_isdigit 002A                               _delay_ms 488C  
                       _printSortTimer 2B5C                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3304  
                             __ptext10 3304                               __ptext11 2758  
                             __ptext20 480A                               __ptext12 4114  
                             __ptext21 496E                               __ptext13 30A2  
                             __ptext30 47AE                               __ptext22 4408  
                             __ptext14 3532                               __ptext31 49F2  
                             __ptext23 08CA                               __ptext15 49AE  
                             __ptext40 3616                               __ptext32 4490  
                             __ptext24 1F98                               __ptext16 4780  
                             __ptext41 0012                               __ptext33 44C8  
                             __ptext25 4500                               __ptext17 3C04  
                             __ptext50 37B6                               __ptext42 3D16  
                             __ptext34 3B62                               __ptext26 3C90  
                             __ptext18 40B4                               __ptext51 1170  
                             __ptext43 36EC                               __ptext35 393E  
                             __ptext27 4A50                               __ptext19 39FC  
                             __ptext60 2262                               __ptext52 4A18  
                             __ptext44 3D9A                               __ptext36 341E  
                             __ptext28 4A6C                               __ptext61 48B4  
                             __ptext53 4862                               __ptext45 4170  
                             __ptext37 1C9A                               __ptext29 4A74  
                             __ptext70 46C0                               __ptext62 2522  
                             __ptext54 4536                               __ptext46 4A8C  
                             __ptext38 43BC                               __ptext71 47DC  
                             __ptext63 459E                               __ptext55 4052  
                             __ptext47 15A8                               __ptext39 4836  
                             __ptext80 4A38                               __ptext72 46F0  
                             __ptext64 2D4E                               __ptext56 3E1E  
                             __ptext48 41CC                               __ptext81 4990  
                             __ptext73 4720                               __ptext65 45D0  
                             __ptext57 4A28                               __ptext49 3E96  
                             __ptext90 4A84                               __ptext82 48DC  
                             __ptext74 4750                               __ptext66 4600  
                             __ptext58 3FEA                               __ptext91 4902  
                             __ptext83 444E                               __ptext75 4928  
                             __ptext67 4630                               __ptext92 4A06  
                             __ptext84 42D0                               __ptext76 31E2  
                             __ptext68 4660                               __ptext85 4A44  
                             __ptext77 49DC                               __ptext69 4690  
                             __ptext86 4226                               __ptext78 2B5C  
                             __ptext87 3F0C                               __ptext79 192C  
                             __ptext88 4A5A                               __ptext89 4A7C  
                             _dispLogs 4928                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1959 0002                     __end_of_initServos 4226  
                        __size_of_Test 0114                          ?_EEPROM_write 00AB  
                             _initTime 496E                          __size_of_main 00C0  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 3E96  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 1F98                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 0069                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4630  
    __end_ofi2_change_state_to_menu_22 4600                               loadRTC@i 0096  
               __end_of_printSortTimer 2D4E                              putch@data 0082  
             __end_of_I2C_Master_Start 4A7C                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 4A5A                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E0  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1F98  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 49DC  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2522                __end_of_I2C_Master_Init 4114  
              __end_of_I2C_Master_Read 47DC                __end_of_I2C_Master_Wait 4A06  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 4A74  
                          lcdInst@data 0082                          printRTC@F3217 0137  
                         retrieveLog@i 000E                            _retrieveLog 31E2  
                  __end_ofi2_lcdNibble 427C                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012F  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 4114                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
