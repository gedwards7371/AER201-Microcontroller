

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 01 04:46:50 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           ; Version 1.40
    99                           ; Generated 01/12/2016 GMT
   100                           ; 
   101                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F4620 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     
   133                           	psect	idataBANK1
   134  0032B6                     __pidataBANK1:
   135                           	opt stack 0
   136                           
   137                           ;initializer for UI@F3220
   138  0032B6  4D                 	db	77
   139  0032B7  4D                 	db	77
   140  0032B8  4D                 	db	77
   141  0032B9  00                 	db	0
   142                           
   143                           ;initializer for printRTC@F3213
   144  0032BA  4D                 	db	77
   145  0032BB  4D                 	db	77
   146  0032BC  4D                 	db	77
   147  0032BD  00                 	db	0
   148                           
   149                           	psect	mediumconst
   150  00FD92                     __pmediumconst:
   151                           	opt stack 0
   152  00FD92  00                 	db	0
   153  00FD93                     _keys:
   154                           	opt stack 0
   155  00FD93  31                 	db	49
   156  00FD94  32                 	db	50
   157  00FD95  33                 	db	51
   158  00FD96  41                 	db	65
   159  00FD97  34                 	db	52
   160  00FD98  35                 	db	53
   161  00FD99  36                 	db	54
   162  00FD9A  42                 	db	66
   163  00FD9B  37                 	db	55
   164  00FD9C  38                 	db	56
   165  00FD9D  39                 	db	57
   166  00FD9E  43                 	db	67
   167  00FD9F  2A                 	db	42
   168  00FDA0  30                 	db	48
   169  00FDA1  23                 	db	35
   170  00FDA2  44                 	db	68
   171  00FDA3  00                 	db	0
   172  00FDA4                     __end_of_keys:
   173                           	opt stack 0
   174  00FDA4                     _dpowers:
   175                           	opt stack 0
   176  00FDA4  0001               	dw	1
   177  00FDA6  000A               	dw	10
   178  00FDA8  0064               	dw	100
   179  00FDAA  03E8               	dw	1000
   180  00FDAC  2710               	dw	10000
   181  00FDAE                     __end_of_dpowers:
   182                           	opt stack 0
   183  0000                     _ADCON0	set	4034
   184  0000                     _ADCON0bits	set	4034
   185  0000                     _ADCON1	set	4033
   186  0000                     _ADRESH	set	4036
   187  0000                     _ADRESL	set	4035
   188  0000                     _CMCONbits	set	4020
   189  0000                     _CVRCON	set	4021
   190  0000                     _EEADR	set	4009
   191  0000                     _EEADRH	set	4010
   192  0000                     _EECON1bits	set	4006
   193  0000                     _EECON2	set	4007
   194  0000                     _EEDATA	set	4008
   195  0000                     _INTCONbits	set	4082
   196  0000                     _LATA	set	3977
   197  0000                     _LATAbits	set	3977
   198  0000                     _LATB	set	3978
   199  0000                     _LATC	set	3979
   200  0000                     _LATCbits	set	3979
   201  0000                     _LATD	set	3980
   202  0000                     _LATDbits	set	3980
   203  0000                     _LATE	set	3981
   204  0000                     _OSCCON	set	4051
   205  0000                     _OSCTUNEbits	set	3995
   206  0000                     _PIR2bits	set	4001
   207  0000                     _PORTAbits	set	3968
   208  0000                     _PORTB	set	3969
   209  0000                     _PORTBbits	set	3969
   210  0000                     _SSPADD	set	4040
   211  0000                     _SSPBUF	set	4041
   212  0000                     _SSPCON1	set	4038
   213  0000                     _SSPCON2	set	4037
   214  0000                     _SSPSTAT	set	4039
   215  0000                     _T0CON	set	4053
   216  0000                     _T1CON	set	4045
   217  0000                     _TMR0H	set	4055
   218  0000                     _TMR0L	set	4054
   219  0000                     _TMR1H	set	4047
   220  0000                     _TMR1L	set	4046
   221  0000                     _TMR3H	set	4019
   222  0000                     _TMR3L	set	4018
   223  0000                     _TRISA	set	3986
   224  0000                     _TRISB	set	3987
   225  0000                     _TRISC	set	3988
   226  0000                     _TRISD	set	3989
   227  0000                     _TRISE	set	3990
   228  0000                     _ACKDT	set	32301
   229  0000                     _ACKEN	set	32300
   230  0000                     _ADFM	set	32263
   231  0000                     _ADIE	set	31982
   232  0000                     _ADON	set	32272
   233  0000                     _INT1IE	set	32643
   234  0000                     _INT1IF	set	32640
   235  0000                     _PEIE	set	32662
   236  0000                     _PEN	set	32298
   237  0000                     _RCEN	set	32299
   238  0000                     _RSEN	set	32297
   239  0000                     _SEN	set	32296
   240  0000                     _TMR0IE	set	32661
   241  0000                     _TMR0IF	set	32658
   242  0000                     _TMR0ON	set	32431
   243  0000                     _TMR1IE	set	31976
   244  0000                     _TMR1IF	set	31984
   245  0000                     _TMR1ON	set	32360
   246  0000                     _TMR2IE	set	31977
   247  0000                     _TMR3IE	set	32001
   248  0000                     _TMR3IF	set	32009
   249  0000                     _TMR3ON	set	32136
   250  0000                     _TRISC3	set	31907
   251  0000                     _TRISC4	set	31908
   252  0000                     _VCFG0	set	32268
   253  0000                     _VCFG1	set	32269
   254  0000                     _nRBPU	set	32655
   255  00FDAE                     STR_21:
   256  00FDAE  25                 	db	37
   257  00FDAF  30                 	db	48	;'0'
   258  00FDB0  32                 	db	50	;'2'
   259  00FDB1  64                 	db	100	;'d'
   260  00FDB2  25                 	db	37
   261  00FDB3  73                 	db	115	;'s'
   262  00FDB4  20                 	db	32
   263  00FDB5  7C                 	db	124
   264  00FDB6  20                 	db	32
   265  00FDB7  25                 	db	37
   266  00FDB8  30                 	db	48	;'0'
   267  00FDB9  32                 	db	50	;'2'
   268  00FDBA  64                 	db	100	;'d'
   269  00FDBB  3A                 	db	58	;':'
   270  00FDBC  25                 	db	37
   271  00FDBD  30                 	db	48	;'0'
   272  00FDBE  32                 	db	50	;'2'
   273  00FDBF  64                 	db	100	;'d'
   274  00FDC0  3A                 	db	58	;':'
   275  00FDC1  25                 	db	37
   276  00FDC2  30                 	db	48	;'0'
   277  00FDC3  32                 	db	50	;'2'
   278  00FDC4  64                 	db	100	;'d'
   279  00FDC5  00                 	db	0
   280  00FDC6                     STR_66:
   281  00FDC6  28                 	db	40
   282  00FDC7  64                 	db	100	;'d'
   283  00FDC8  61                 	db	97	;'a'
   284  00FDC9  74                 	db	116	;'t'
   285  00FDCA  61                 	db	97	;'a'
   286  00FDCB  3A                 	db	58	;':'
   287  00FDCC  20                 	db	32
   288  00FDCD  25                 	db	37
   289  00FDCE  75                 	db	117	;'u'
   290  00FDCF  2C                 	db	44
   291  00FDD0  20                 	db	32
   292  00FDD1  61                 	db	97	;'a'
   293  00FDD2  64                 	db	100	;'d'
   294  00FDD3  64                 	db	100	;'d'
   295  00FDD4  72                 	db	114	;'r'
   296  00FDD5  3A                 	db	58	;':'
   297  00FDD6  20                 	db	32
   298  00FDD7  25                 	db	37
   299  00FDD8  75                 	db	117	;'u'
   300  00FDD9  29                 	db	41
   301  00FDDA  00                 	db	0
   302  00FDDB                     STR_27:
   303  00FDDB  4E                 	db	78	;'N'
   304  00FDDC  4F                 	db	79	;'O'
   305  00FDDD  20                 	db	32
   306  00FDDE  4C                 	db	76	;'L'
   307  00FDDF  41                 	db	65	;'A'
   308  00FDE0  42                 	db	66	;'B'
   309  00FDE1  3A                 	db	58	;':'
   310  00FDE2  20                 	db	32
   311  00FDE3  25                 	db	37
   312  00FDE4  64                 	db	100	;'d'
   313  00FDE5  7C                 	db	124
   314  00FDE6  4C                 	db	76	;'L'
   315  00FDE7  41                 	db	65	;'A'
   316  00FDE8  42                 	db	66	;'B'
   317  00FDE9  3A                 	db	58	;':'
   318  00FDEA  20                 	db	32
   319  00FDEB  25                 	db	37
   320  00FDEC  64                 	db	100	;'d'
   321  00FDED  00                 	db	0
   322  00FDEE                     STR_25:
   323  00FDEE  4E                 	db	78	;'N'
   324  00FDEF  4F                 	db	79	;'O'
   325  00FDF0  20                 	db	32
   326  00FDF1  54                 	db	84	;'T'
   327  00FDF2  41                 	db	65	;'A'
   328  00FDF3  42                 	db	66	;'B'
   329  00FDF4  3A                 	db	58	;':'
   330  00FDF5  20                 	db	32
   331  00FDF6  25                 	db	37
   332  00FDF7  64                 	db	100	;'d'
   333  00FDF8  7C                 	db	124
   334  00FDF9  54                 	db	84	;'T'
   335  00FDFA  41                 	db	65	;'A'
   336  00FDFB  42                 	db	66	;'B'
   337  00FDFC  3A                 	db	58	;':'
   338  00FDFD  20                 	db	32
   339  00FDFE  25                 	db	37
   340  00FDFF  64                 	db	100	;'d'
   341  00FE00  00                 	db	0
   342  00FE01                     STR_3:
   343  00FE01  2D                 	db	45
   344  00FE02  2D                 	db	45
   345  00FE03  20                 	db	32
   346  00FE04  4C                 	db	76	;'L'
   347  00FE05  4F                 	db	79	;'O'
   348  00FE06  47                 	db	71	;'G'
   349  00FE07  20                 	db	32
   350  00FE08  25                 	db	37
   351  00FE09  32                 	db	50	;'2'
   352  00FE0A  64                 	db	100	;'d'
   353  00FE0B  20                 	db	32
   354  00FE0C  48                 	db	72	;'H'
   355  00FE0D  45                 	db	69	;'E'
   356  00FE0E  52                 	db	82	;'R'
   357  00FE0F  45                 	db	69	;'E'
   358  00FE10  2D                 	db	45
   359  00FE11  2D                 	db	45
   360  00FE12  00                 	db	0
   361  00FE13                     STR_1:
   362  00FE13  52                 	db	82	;'R'
   363  00FE14  45                 	db	69	;'E'
   364  00FE15  53                 	db	83	;'S'
   365  00FE16  55                 	db	85	;'U'
   366  00FE17  4C                 	db	76	;'L'
   367  00FE18  54                 	db	84	;'T'
   368  00FE19  53                 	db	83	;'S'
   369  00FE1A  20                 	db	32
   370  00FE1B  49                 	db	73	;'I'
   371  00FE1C  4E                 	db	78	;'N'
   372  00FE1D  20                 	db	32
   373  00FE1E  4C                 	db	76	;'L'
   374  00FE1F  4F                 	db	79	;'O'
   375  00FE20  47                 	db	71	;'G'
   376  00FE21  20                 	db	32
   377  00FE22  25                 	db	37
   378  00FE23  64                 	db	100	;'d'
   379  00FE24  00                 	db	0
   380  00FE25                     STR_41:
   381  00FE25  4C                 	db	76	;'L'
   382  00FE26  4F                 	db	79	;'O'
   383  00FE27  47                 	db	71	;'G'
   384  00FE28  20                 	db	32
   385  00FE29  31                 	db	49	;'1'
   386  00FE2A  20                 	db	32
   387  00FE2B  20                 	db	32
   388  00FE2C  20                 	db	32
   389  00FE2D  20                 	db	32
   390  00FE2E  20                 	db	32
   391  00FE2F  20                 	db	32
   392  00FE30  20                 	db	32
   393  00FE31  20                 	db	32
   394  00FE32  20                 	db	32
   395  00FE33  20                 	db	32
   396  00FE34  20                 	db	32
   397  00FE35  00                 	db	0
   398  00FE36                     STR_40:
   399  00FE36  4C                 	db	76	;'L'
   400  00FE37  4F                 	db	79	;'O'
   401  00FE38  47                 	db	71	;'G'
   402  00FE39  20                 	db	32
   403  00FE3A  32                 	db	50	;'2'
   404  00FE3B  20                 	db	32
   405  00FE3C  20                 	db	32
   406  00FE3D  20                 	db	32
   407  00FE3E  20                 	db	32
   408  00FE3F  20                 	db	32
   409  00FE40  20                 	db	32
   410  00FE41  20                 	db	32
   411  00FE42  20                 	db	32
   412  00FE43  20                 	db	32
   413  00FE44  20                 	db	32
   414  00FE45  20                 	db	32
   415  00FE46  00                 	db	0
   416  00FE47                     STR_44:
   417  00FE47  4C                 	db	76	;'L'
   418  00FE48  4F                 	db	79	;'O'
   419  00FE49  47                 	db	71	;'G'
   420  00FE4A  20                 	db	32
   421  00FE4B  33                 	db	51	;'3'
   422  00FE4C  20                 	db	32
   423  00FE4D  20                 	db	32
   424  00FE4E  20                 	db	32
   425  00FE4F  20                 	db	32
   426  00FE50  20                 	db	32
   427  00FE51  20                 	db	32
   428  00FE52  20                 	db	32
   429  00FE53  20                 	db	32
   430  00FE54  20                 	db	32
   431  00FE55  20                 	db	32
   432  00FE56  20                 	db	32
   433  00FE57  00                 	db	0
   434  00FE58                     STR_48:
   435  00FE58  4C                 	db	76	;'L'
   436  00FE59  4F                 	db	79	;'O'
   437  00FE5A  47                 	db	71	;'G'
   438  00FE5B  20                 	db	32
   439  00FE5C  34                 	db	52	;'4'
   440  00FE5D  20                 	db	32
   441  00FE5E  20                 	db	32
   442  00FE5F  20                 	db	32
   443  00FE60  20                 	db	32
   444  00FE61  20                 	db	32
   445  00FE62  20                 	db	32
   446  00FE63  20                 	db	32
   447  00FE64  20                 	db	32
   448  00FE65  20                 	db	32
   449  00FE66  20                 	db	32
   450  00FE67  20                 	db	32
   451  00FE68  00                 	db	0
   452  00FE69                     STR_36:
   453  00FE69  33                 	db	51	;'3'
   454  00FE6A  2E                 	db	46
   455  00FE6B  20                 	db	32
   456  00FE6C  4C                 	db	76	;'L'
   457  00FE6D  4F                 	db	79	;'O'
   458  00FE6E  47                 	db	71	;'G'
   459  00FE6F  53                 	db	83	;'S'
   460  00FE70  20                 	db	32
   461  00FE71  20                 	db	32
   462  00FE72  20                 	db	32
   463  00FE73  20                 	db	32
   464  00FE74  20                 	db	32
   465  00FE75  20                 	db	32
   466  00FE76  20                 	db	32
   467  00FE77  20                 	db	32
   468  00FE78  20                 	db	32
   469  00FE79  00                 	db	0
   470  00FE7A                     STR_32:
   471  00FE7A  32                 	db	50	;'2'
   472  00FE7B  2E                 	db	46
   473  00FE7C  20                 	db	32
   474  00FE7D  53                 	db	83	;'S'
   475  00FE7E  4F                 	db	79	;'O'
   476  00FE7F  52                 	db	82	;'R'
   477  00FE80  54                 	db	84	;'T'
   478  00FE81  20                 	db	32
   479  00FE82  20                 	db	32
   480  00FE83  20                 	db	32
   481  00FE84  20                 	db	32
   482  00FE85  20                 	db	32
   483  00FE86  20                 	db	32
   484  00FE87  20                 	db	32
   485  00FE88  20                 	db	32
   486  00FE89  20                 	db	32
   487  00FE8A  00                 	db	0
   488  00FE8B                     STR_33:
   489  00FE8B  31                 	db	49	;'1'
   490  00FE8C  2E                 	db	46
   491  00FE8D  20                 	db	32
   492  00FE8E  44                 	db	68	;'D'
   493  00FE8F  41                 	db	65	;'A'
   494  00FE90  54                 	db	84	;'T'
   495  00FE91  45                 	db	69	;'E'
   496  00FE92  2F                 	db	47
   497  00FE93  54                 	db	84	;'T'
   498  00FE94  49                 	db	73	;'I'
   499  00FE95  4D                 	db	77	;'M'
   500  00FE96  45                 	db	69	;'E'
   501  00FE97  20                 	db	32
   502  00FE98  20                 	db	32
   503  00FE99  20                 	db	32
   504  00FE9A  20                 	db	32
   505  00FE9B  00                 	db	0
   506  00FE9C                     STR_24:
   507  00FE9C  20                 	db	32
   508  00FE9D  2D                 	db	45
   509  00FE9E  2D                 	db	45
   510  00FE9F  20                 	db	32
   511  00FEA0  50                 	db	80	;'P'
   512  00FEA1  4F                 	db	79	;'O'
   513  00FEA2  50                 	db	80	;'P'
   514  00FEA3  20                 	db	32
   515  00FEA4  20                 	db	32
   516  00FEA5  43                 	db	67	;'C'
   517  00FEA6  41                 	db	65	;'A'
   518  00FEA7  4E                 	db	78	;'N'
   519  00FEA8  20                 	db	32
   520  00FEA9  2D                 	db	45
   521  00FEAA  2D                 	db	45
   522  00FEAB  20                 	db	32
   523  00FEAC  00                 	db	0
   524  00FEAD                     STR_26:
   525  00FEAD  20                 	db	32
   526  00FEAE  2D                 	db	45
   527  00FEAF  2D                 	db	45
   528  00FEB0  20                 	db	32
   529  00FEB1  53                 	db	83	;'S'
   530  00FEB2  4F                 	db	79	;'O'
   531  00FEB3  55                 	db	85	;'U'
   532  00FEB4  50                 	db	80	;'P'
   533  00FEB5  20                 	db	32
   534  00FEB6  43                 	db	67	;'C'
   535  00FEB7  41                 	db	65	;'A'
   536  00FEB8  4E                 	db	78	;'N'
   537  00FEB9  20                 	db	32
   538  00FEBA  2D                 	db	45
   539  00FEBB  2D                 	db	45
   540  00FEBC  20                 	db	32
   541  00FEBD  00                 	db	0
   542  00FEBE                     STR_28:
   543  00FEBE  2D                 	db	45
   544  00FEBF  2D                 	db	45
   545  00FEC0  20                 	db	32
   546  00FEC1  54                 	db	84	;'T'
   547  00FEC2  4F                 	db	79	;'O'
   548  00FEC3  54                 	db	84	;'T'
   549  00FEC4  41                 	db	65	;'A'
   550  00FEC5  4C                 	db	76	;'L'
   551  00FEC6  20                 	db	32
   552  00FEC7  43                 	db	67	;'C'
   553  00FEC8  41                 	db	65	;'A'
   554  00FEC9  4E                 	db	78	;'N'
   555  00FECA  53                 	db	83	;'S'
   556  00FECB  20                 	db	32
   557  00FECC  2D                 	db	45
   558  00FECD  2D                 	db	45
   559  00FECE  00                 	db	0
   560  00FECF                     STR_39:
   561  00FECF  4C                 	db	76	;'L'
   562  00FED0  4F                 	db	79	;'O'
   563  00FED1  47                 	db	71	;'G'
   564  00FED2  20                 	db	32
   565  00FED3  31                 	db	49	;'1'
   566  00FED4  20                 	db	32
   567  00FED5  20                 	db	32
   568  00FED6  20                 	db	32
   569  00FED7  20                 	db	32
   570  00FED8  20                 	db	32
   571  00FED9  20                 	db	32
   572  00FEDA  20                 	db	32
   573  00FEDB  20                 	db	32
   574  00FEDC  20                 	db	32
   575  00FEDD  20                 	db	32
   576  00FEDE  3C                 	db	60	;'<'
   577  00FEDF  00                 	db	0
   578  00FEE0                     STR_42:
   579  00FEE0  4C                 	db	76	;'L'
   580  00FEE1  4F                 	db	79	;'O'
   581  00FEE2  47                 	db	71	;'G'
   582  00FEE3  20                 	db	32
   583  00FEE4  32                 	db	50	;'2'
   584  00FEE5  20                 	db	32
   585  00FEE6  20                 	db	32
   586  00FEE7  20                 	db	32
   587  00FEE8  20                 	db	32
   588  00FEE9  20                 	db	32
   589  00FEEA  20                 	db	32
   590  00FEEB  20                 	db	32
   591  00FEEC  20                 	db	32
   592  00FEED  20                 	db	32
   593  00FEEE  20                 	db	32
   594  00FEEF  3C                 	db	60	;'<'
   595  00FEF0  00                 	db	0
   596  00FEF1                     STR_46:
   597  00FEF1  4C                 	db	76	;'L'
   598  00FEF2  4F                 	db	79	;'O'
   599  00FEF3  47                 	db	71	;'G'
   600  00FEF4  20                 	db	32
   601  00FEF5  33                 	db	51	;'3'
   602  00FEF6  20                 	db	32
   603  00FEF7  20                 	db	32
   604  00FEF8  20                 	db	32
   605  00FEF9  20                 	db	32
   606  00FEFA  20                 	db	32
   607  00FEFB  20                 	db	32
   608  00FEFC  20                 	db	32
   609  00FEFD  20                 	db	32
   610  00FEFE  20                 	db	32
   611  00FEFF  20                 	db	32
   612  00FF00  3C                 	db	60	;'<'
   613  00FF01  00                 	db	0
   614  00FF02                     STR_50:
   615  00FF02  4C                 	db	76	;'L'
   616  00FF03  4F                 	db	79	;'O'
   617  00FF04  47                 	db	71	;'G'
   618  00FF05  20                 	db	32
   619  00FF06  34                 	db	52	;'4'
   620  00FF07  20                 	db	32
   621  00FF08  20                 	db	32
   622  00FF09  20                 	db	32
   623  00FF0A  20                 	db	32
   624  00FF0B  20                 	db	32
   625  00FF0C  20                 	db	32
   626  00FF0D  20                 	db	32
   627  00FF0E  20                 	db	32
   628  00FF0F  20                 	db	32
   629  00FF10  20                 	db	32
   630  00FF11  3C                 	db	60	;'<'
   631  00FF12  00                 	db	0
   632  00FF13                     STR_38:
   633  00FF13  33                 	db	51	;'3'
   634  00FF14  2E                 	db	46
   635  00FF15  20                 	db	32
   636  00FF16  4C                 	db	76	;'L'
   637  00FF17  4F                 	db	79	;'O'
   638  00FF18  47                 	db	71	;'G'
   639  00FF19  53                 	db	83	;'S'
   640  00FF1A  20                 	db	32
   641  00FF1B  20                 	db	32
   642  00FF1C  20                 	db	32
   643  00FF1D  20                 	db	32
   644  00FF1E  20                 	db	32
   645  00FF1F  20                 	db	32
   646  00FF20  20                 	db	32
   647  00FF21  20                 	db	32
   648  00FF22  3C                 	db	60	;'<'
   649  00FF23  00                 	db	0
   650  00FF24                     STR_34:
   651  00FF24  32                 	db	50	;'2'
   652  00FF25  2E                 	db	46
   653  00FF26  20                 	db	32
   654  00FF27  53                 	db	83	;'S'
   655  00FF28  4F                 	db	79	;'O'
   656  00FF29  52                 	db	82	;'R'
   657  00FF2A  54                 	db	84	;'T'
   658  00FF2B  20                 	db	32
   659  00FF2C  20                 	db	32
   660  00FF2D  20                 	db	32
   661  00FF2E  20                 	db	32
   662  00FF2F  20                 	db	32
   663  00FF30  20                 	db	32
   664  00FF31  20                 	db	32
   665  00FF32  20                 	db	32
   666  00FF33  3C                 	db	60	;'<'
   667  00FF34  00                 	db	0
   668  00FF35                     STR_31:
   669  00FF35  31                 	db	49	;'1'
   670  00FF36  2E                 	db	46
   671  00FF37  20                 	db	32
   672  00FF38  44                 	db	68	;'D'
   673  00FF39  41                 	db	65	;'A'
   674  00FF3A  54                 	db	84	;'T'
   675  00FF3B  45                 	db	69	;'E'
   676  00FF3C  2F                 	db	47
   677  00FF3D  54                 	db	84	;'T'
   678  00FF3E  49                 	db	73	;'I'
   679  00FF3F  4D                 	db	77	;'M'
   680  00FF40  45                 	db	69	;'E'
   681  00FF41  20                 	db	32
   682  00FF42  20                 	db	32
   683  00FF43  20                 	db	32
   684  00FF44  3C                 	db	60	;'<'
   685  00FF45  00                 	db	0
   686  00FF46                     STR_6:
   687  00FF46  50                 	db	80	;'P'
   688  00FF47  41                 	db	65	;'A'
   689  00FF48  55                 	db	85	;'U'
   690  00FF49  53                 	db	83	;'S'
   691  00FF4A  45                 	db	69	;'E'
   692  00FF4B  20                 	db	32
   693  00FF4C  3C                 	db	60	;'<'
   694  00FF4D  20                 	db	32
   695  00FF4E  7C                 	db	124
   696  00FF4F  20                 	db	32
   697  00FF50  42                 	db	66	;'B'
   698  00FF51  41                 	db	65	;'A'
   699  00FF52  43                 	db	67	;'C'
   700  00FF53  4B                 	db	75	;'K'
   701  00FF54  20                 	db	32
   702  00FF55  3E                 	db	62	;'>'
   703  00FF56  00                 	db	0
   704  00FF57                     STR_30:
   705  00FF57  50                 	db	80	;'P'
   706  00FF58  55                 	db	85	;'U'
   707  00FF59  53                 	db	83	;'S'
   708  00FF5A  48                 	db	72	;'H'
   709  00FF5B  20                 	db	32
   710  00FF5C  54                 	db	84	;'T'
   711  00FF5D  4F                 	db	79	;'O'
   712  00FF5E  20                 	db	32
   713  00FF5F  43                 	db	67	;'C'
   714  00FF60  4F                 	db	79	;'O'
   715  00FF61  4E                 	db	78	;'N'
   716  00FF62  54                 	db	84	;'T'
   717  00FF63  49                 	db	73	;'I'
   718  00FF64  4E                 	db	78	;'N'
   719  00FF65  55                 	db	85	;'U'
   720  00FF66  45                 	db	69	;'E'
   721  00FF67  00                 	db	0
   722  00FF68                     STR_4:
   723  00FF68  44                 	db	68	;'D'
   724  00FF69  49                 	db	73	;'I'
   725  00FF6A  44                 	db	68	;'D'
   726  00FF6B  4E                 	db	78	;'N'
   727  00FF6C  27                 	db	39
   728  00FF6D  54                 	db	84	;'T'
   729  00FF6E  20                 	db	32
   730  00FF6F  43                 	db	67	;'C'
   731  00FF70  4F                 	db	79	;'O'
   732  00FF71  4D                 	db	77	;'M'
   733  00FF72  50                 	db	80	;'P'
   734  00FF73  4C                 	db	76	;'L'
   735  00FF74  45                 	db	69	;'E'
   736  00FF75  54                 	db	84	;'T'
   737  00FF76  45                 	db	69	;'E'
   738  00FF77  00                 	db	0
   739  00FF78                     STR_23:
   740  00FF78  25                 	db	37
   741  00FF79  64                 	db	100	;'d'
   742  00FF7A  20                 	db	32
   743  00FF7B  4D                 	db	77	;'M'
   744  00FF7C  49                 	db	73	;'I'
   745  00FF7D  4E                 	db	78	;'N'
   746  00FF7E  20                 	db	32
   747  00FF7F  25                 	db	37
   748  00FF80  64                 	db	100	;'d'
   749  00FF81  20                 	db	32
   750  00FF82  53                 	db	83	;'S'
   751  00FF83  45                 	db	69	;'E'
   752  00FF84  43                 	db	67	;'C'
   753  00FF85  00                 	db	0
   754  00FF86                     STR_2:
   755  00FF86  54                 	db	84	;'T'
   756  00FF87  49                 	db	73	;'I'
   757  00FF88  4D                 	db	77	;'M'
   758  00FF89  45                 	db	69	;'E'
   759  00FF8A  3A                 	db	58	;':'
   760  00FF8B  20                 	db	32
   761  00FF8C  25                 	db	37
   762  00FF8D  64                 	db	100	;'d'
   763  00FF8E  3A                 	db	58	;':'
   764  00FF8F  25                 	db	37
   765  00FF90  30                 	db	48	;'0'
   766  00FF91  32                 	db	50	;'2'
   767  00FF92  64                 	db	100	;'d'
   768  00FF93  00                 	db	0
   769  00FF94                     STR_65:
   770  00FF94  54                 	db	84	;'T'
   771  00FF95  49                 	db	73	;'I'
   772  00FF96  4D                 	db	77	;'M'
   773  00FF97  45                 	db	69	;'E'
   774  00FF98  20                 	db	32
   775  00FF99  25                 	db	37
   776  00FF9A  64                 	db	100	;'d'
   777  00FF9B  3A                 	db	58	;':'
   778  00FF9C  25                 	db	37
   779  00FF9D  30                 	db	48	;'0'
   780  00FF9E  32                 	db	50	;'2'
   781  00FF9F  64                 	db	100	;'d'
   782  00FFA0  00                 	db	0
   783  00FFA1                     STR_64:
   784  00FFA1  53                 	db	83	;'S'
   785  00FFA2  4F                 	db	79	;'O'
   786  00FFA3  52                 	db	82	;'R'
   787  00FFA4  54                 	db	84	;'T'
   788  00FFA5  49                 	db	73	;'I'
   789  00FFA6  4E                 	db	78	;'N'
   790  00FFA7  47                 	db	71	;'G'
   791  00FFA8  2E                 	db	46
   792  00FFA9  2E                 	db	46
   793  00FFAA  2E                 	db	46
   794  00FFAB  00                 	db	0
   795  00FFAC                     STR_22:
   796  00FFAC  44                 	db	68	;'D'
   797  00FFAD  55                 	db	85	;'U'
   798  00FFAE  52                 	db	82	;'R'
   799  00FFAF  41                 	db	65	;'A'
   800  00FFB0  54                 	db	84	;'T'
   801  00FFB1  49                 	db	73	;'I'
   802  00FFB2  4F                 	db	79	;'O'
   803  00FFB3  4E                 	db	78	;'N'
   804  00FFB4  3A                 	db	58	;':'
   805  00FFB5  00                 	db	0
   806  00FFB6                     STR_68:
   807  00FFB6  28                 	db	40
   808  00FFB7  6E                 	db	110	;'n'
   809  00FFB8  75                 	db	117	;'u'
   810  00FFB9  6C                 	db	108	;'l'
   811  00FFBA  6C                 	db	108	;'l'
   812  00FFBB  29                 	db	41
   813  00FFBC  00                 	db	0
   814  00FFBD                     STR_67:
   815  00FFBD  46                 	db	70	;'F'
   816  00FFBE  41                 	db	65	;'A'
   817  00FFBF  49                 	db	73	;'I'
   818  00FFC0  4C                 	db	76	;'L'
   819  00FFC1  45                 	db	69	;'E'
   820  00FFC2  44                 	db	68	;'D'
   821  00FFC3  00                 	db	0
   822  00FFC4                     STR_7:
   823  00FFC4  53                 	db	83	;'S'
   824  00FFC5  54                 	db	84	;'T'
   825  00FFC6  41                 	db	65	;'A'
   826  00FFC7  52                 	db	82	;'R'
   827  00FFC8  54                 	db	84	;'T'
   828  00FFC9  3A                 	db	58	;':'
   829  00FFCA  00                 	db	0
   830  00FFCB                     STR_9:
   831  00FFCB  46                 	db	70	;'F'
   832  00FFCC  45                 	db	69	;'E'
   833  00FFCD  42                 	db	66	;'B'
   834  00FFCE  00                 	db	0
   835  00FFCF                     STR_19:
   836  00FFCF  44                 	db	68	;'D'
   837  00FFD0  45                 	db	69	;'E'
   838  00FFD1  43                 	db	67	;'C'
   839  00FFD2  00                 	db	0
   840  00FFD3                     STR_15:
   841  00FFD3  41                 	db	65	;'A'
   842  00FFD4  55                 	db	85	;'U'
   843  00FFD5  47                 	db	71	;'G'
   844  00FFD6  00                 	db	0
   845  00FFD7                     STR_14:
   846  00FFD7  4A                 	db	74	;'J'
   847  00FFD8  55                 	db	85	;'U'
   848  00FFD9  4C                 	db	76	;'L'
   849  00FFDA  00                 	db	0
   850  00FFDB                     STR_8:
   851  00FFDB  4A                 	db	74	;'J'
   852  00FFDC  41                 	db	65	;'A'
   853  00FFDD  4E                 	db	78	;'N'
   854  00FFDE  00                 	db	0
   855  00FFDF                     STR_13:
   856  00FFDF  4A                 	db	74	;'J'
   857  00FFE0  55                 	db	85	;'U'
   858  00FFE1  4E                 	db	78	;'N'
   859  00FFE2  00                 	db	0
   860  00FFE3                     STR_16:
   861  00FFE3  53                 	db	83	;'S'
   862  00FFE4  45                 	db	69	;'E'
   863  00FFE5  50                 	db	80	;'P'
   864  00FFE6  00                 	db	0
   865  00FFE7                     STR_10:
   866  00FFE7  4D                 	db	77	;'M'
   867  00FFE8  41                 	db	65	;'A'
   868  00FFE9  52                 	db	82	;'R'
   869  00FFEA  00                 	db	0
   870  00FFEB                     STR_11:
   871  00FFEB  41                 	db	65	;'A'
   872  00FFEC  50                 	db	80	;'P'
   873  00FFED  52                 	db	82	;'R'
   874  00FFEE  00                 	db	0
   875  00FFEF                     STR_20:
   876  00FFEF  45                 	db	69	;'E'
   877  00FFF0  52                 	db	82	;'R'
   878  00FFF1  52                 	db	82	;'R'
   879  00FFF2  00                 	db	0
   880  00FFF3                     STR_17:
   881  00FFF3  4F                 	db	79	;'O'
   882  00FFF4  43                 	db	67	;'C'
   883  00FFF5  54                 	db	84	;'T'
   884  00FFF6  00                 	db	0
   885  00FFF7                     STR_18:
   886  00FFF7  4E                 	db	78	;'N'
   887  00FFF8  4F                 	db	79	;'O'
   888  00FFF9  56                 	db	86	;'V'
   889  00FFFA  00                 	db	0
   890  00FFFB                     STR_12:
   891  00FFFB  4D                 	db	77	;'M'
   892  00FFFC  41                 	db	65	;'A'
   893  00FFFD  59                 	db	89	;'Y'
   894  00FFFE  00                 	db	0
   895  0000                     
   896                           ; #config settings
   897  00FFFF  00                 	db	0	; dummy byte at the end
   898  0000                     
   899                           	psect	cinit
   900  002BCA                     __pcinit:
   901                           	opt stack 0
   902  002BCA                     start_initialization:
   903                           	opt stack 0
   904  002BCA                     __initialization:
   905                           	opt stack 0
   906                           
   907                           ; Initialize objects allocated to BANK1 (8 bytes)
   908                           ; load TBLPTR registers with __pidataBANK1
   909  002BCA  0EB6               	movlw	low __pidataBANK1
   910  002BCC  6EF6               	movwf	tblptrl,c
   911  002BCE  0E32               	movlw	high __pidataBANK1
   912  002BD0  6EF7               	movwf	tblptrh,c
   913  002BD2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   914  002BD4  6EF8               	movwf	tblptru,c
   915  002BD6  EE01  F028         	lfsr	0,__pdataBANK1
   916  002BDA  EE10 F008          	lfsr	1,8
   917  002BDE                     copy_data0:
   918  002BDE  0009               	tblrd		*+
   919  002BE0  CFF5 FFEE          	movff	tablat,postinc0
   920  002BE4  50E5               	movf	postdec1,w,c
   921  002BE6  50E1               	movf	fsr1l,w,c
   922  002BE8  E1FA               	bnz	copy_data0
   923                           
   924                           ; Clear objects allocated to BANK1 (40 bytes)
   925  002BEA  EE01  F000         	lfsr	0,__pbssBANK1
   926  002BEE  0E28               	movlw	40
   927  002BF0                     clear_0:
   928  002BF0  6AEE               	clrf	postinc0,c
   929  002BF2  06E8               	decf	wreg,f,c
   930  002BF4  E1FD               	bnz	clear_0
   931                           
   932                           ; Clear objects allocated to BANK0 (38 bytes)
   933  002BF6  EE00  F0D9         	lfsr	0,__pbssBANK0
   934  002BFA  0E26               	movlw	38
   935  002BFC                     clear_1:
   936  002BFC  6AEE               	clrf	postinc0,c
   937  002BFE  06E8               	decf	wreg,f,c
   938  002C00  E1FD               	bnz	clear_1
   939                           
   940                           ; Clear objects allocated to COMRAM (36 bytes)
   941  002C02  EE00  F05B         	lfsr	0,__pbssCOMRAM
   942  002C06  0E24               	movlw	36
   943  002C08                     clear_2:
   944  002C08  6AEE               	clrf	postinc0,c
   945  002C0A  06E8               	decf	wreg,f,c
   946  002C0C  E1FD               	bnz	clear_2
   947  002C0E                     end_of_initialization:
   948                           	opt stack 0
   949  002C0E                     __end_of__initialization:
   950                           	opt stack 0
   951  002C0E  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   952  002C10  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   953  002C12  0100               	movlb	0
   954  002C14  EF15  F013         	goto	_main	;jump to C main() function
   955                           tblptru	equ	0xFF8
   956                           tblptrh	equ	0xFF7
   957                           tblptrl	equ	0xFF6
   958                           tablat	equ	0xFF5
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           postdec1	equ	0xFE5
   962                           fsr1l	equ	0xFE1
   963                           
   964                           	psect	bssCOMRAM
   965  00005B                     __pbssCOMRAM:
   966                           	opt stack 0
   967  00005B                     _time:
   968                           	opt stack 0
   969  00005B                     	ds	7
   970  000062                     _IR_signal:
   971                           	opt stack 0
   972  000062                     	ds	2
   973  000064                     _back:
   974                           	opt stack 0
   975  000064                     	ds	2
   976  000066                     _count_can_no_lab:
   977                           	opt stack 0
   978  000066                     	ds	2
   979  000068                     _count_can_w_lab:
   980                           	opt stack 0
   981  000068                     	ds	2
   982  00006A                     _count_pop_no_tab:
   983                           	opt stack 0
   984  00006A                     	ds	2
   985  00006C                     _count_pop_w_tab:
   986                           	opt stack 0
   987  00006C                     	ds	2
   988  00006E                     _cur_can:
   989                           	opt stack 0
   990  00006E                     	ds	2
   991  000070                     _down:
   992                           	opt stack 0
   993  000070                     	ds	2
   994  000072                     _enter:
   995                           	opt stack 0
   996  000072                     	ds	2
   997  000074                     _f_can_coming_to_distribution:
   998                           	opt stack 0
   999  000074                     	ds	2
  1000  000076                     _firstboot:
  1001                           	opt stack 0
  1002  000076                     	ds	2
  1003  000078                     _up:
  1004                           	opt stack 0
  1005  000078                     	ds	2
  1006  00007A                     _was_low_1:
  1007                           	opt stack 0
  1008  00007A                     	ds	2
  1009  00007C                     _was_low_3:
  1010                           	opt stack 0
  1011  00007C                     	ds	2
  1012  00007E                     _input:
  1013                           	opt stack 0
  1014  00007E                     	ds	1
  1015                           tblptru	equ	0xFF8
  1016                           tblptrh	equ	0xFF7
  1017                           tblptrl	equ	0xFF6
  1018                           tablat	equ	0xFF5
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           postdec1	equ	0xFE5
  1022                           fsr1l	equ	0xFE1
  1023                           
  1024                           	psect	bssBANK0
  1025  0000D9                     __pbssBANK0:
  1026                           	opt stack 0
  1027  0000D9                     _MAG_signal:
  1028                           	opt stack 0
  1029  0000D9                     	ds	2
  1030  0000DB                     _cur_state:
  1031                           	opt stack 0
  1032  0000DB                     	ds	2
  1033  0000DD                     _debug:
  1034                           	opt stack 0
  1035  0000DD                     	ds	2
  1036  0000DF                     _f_ID_receive:
  1037                           	opt stack 0
  1038  0000DF                     	ds	2
  1039  0000E1                     _f_can_coming_to_ID:
  1040                           	opt stack 0
  1041  0000E1                     	ds	2
  1042  0000E3                     _f_loadingNewCan:
  1043                           	opt stack 0
  1044  0000E3                     	ds	2
  1045  0000E5                     _first:
  1046                           	opt stack 0
  1047  0000E5                     	ds	2
  1048  0000E7                     _log:
  1049                           	opt stack 0
  1050  0000E7                     	ds	2
  1051  0000E9                     _log_completion:
  1052                           	opt stack 0
  1053  0000E9                     	ds	2
  1054  0000EB                     _log_count_can_no_lab:
  1055                           	opt stack 0
  1056  0000EB                     	ds	2
  1057  0000ED                     _log_count_can_w_lab:
  1058                           	opt stack 0
  1059  0000ED                     	ds	2
  1060  0000EF                     _log_count_pop_no_tab:
  1061                           	opt stack 0
  1062  0000EF                     	ds	2
  1063  0000F1                     _log_count_pop_w_tab:
  1064                           	opt stack 0
  1065  0000F1                     	ds	2
  1066  0000F3                     _log_count_total:
  1067                           	opt stack 0
  1068  0000F3                     	ds	2
  1069  0000F5                     _log_total_time:
  1070                           	opt stack 0
  1071  0000F5                     	ds	2
  1072  0000F7                     _logstate:
  1073                           	opt stack 0
  1074  0000F7                     	ds	2
  1075  0000F9                     _total_time:
  1076                           	opt stack 0
  1077  0000F9                     	ds	2
  1078  0000FB                     _machine_state:
  1079                           	opt stack 0
  1080  0000FB                     	ds	1
  1081  0000FC                     _sel:
  1082                           	opt stack 0
  1083  0000FC                     	ds	1
  1084  0000FD                     _count_total:
  1085                           	opt stack 0
  1086  0000FD                     	ds	2
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           
  1096                           	psect	bssBANK1
  1097  000100                     __pbssBANK1:
  1098                           	opt stack 0
  1099  000100                     _log_startTime:
  1100                           	opt stack 0
  1101  000100                     	ds	14
  1102  00010E                     _startTime:
  1103                           	opt stack 0
  1104  00010E                     	ds	14
  1105  00011C                     _servoTimes:
  1106                           	opt stack 0
  1107  00011C                     	ds	8
  1108  000124                     _f_can_distributed:
  1109                           	opt stack 0
  1110  000124                     	ds	2
  1111  000126                     _f_lastCan:
  1112                           	opt stack 0
  1113  000126                     	ds	2
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           postdec1	equ	0xFE5
  1121                           fsr1l	equ	0xFE1
  1122                           
  1123                           	psect	dataBANK1
  1124  000128                     __pdataBANK1:
  1125                           	opt stack 0
  1126  000128                     UI@F3220:
  1127                           	opt stack 0
  1128  000128                     	ds	4
  1129  00012C                     printRTC@F3213:
  1130                           	opt stack 0
  1131  00012C                     	ds	4
  1132                           tblptru	equ	0xFF8
  1133                           tblptrh	equ	0xFF7
  1134                           tblptrl	equ	0xFF6
  1135                           tablat	equ	0xFF5
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           postdec1	equ	0xFE5
  1139                           fsr1l	equ	0xFE1
  1140                           
  1141                           	psect	cstackBANK0
  1142  000080                     __pcstackBANK0:
  1143                           	opt stack 0
  1144  000080                     ??_isdigit:
  1145  000080                     ??_readADC:
  1146  000080                     ??_I2C_Master_Wait:
  1147  000080                     ?___wmul:
  1148                           	opt stack 0
  1149  000080                     ?___awmod:
  1150                           	opt stack 0
  1151  000080                     ?___lwdiv:
  1152                           	opt stack 0
  1153  000080                     ?___lldiv:
  1154                           	opt stack 0
  1155  000080                     lcdNibble@temp:
  1156                           	opt stack 0
  1157  000080                     initTime@m:
  1158                           	opt stack 0
  1159  000080                     updateServoPosition@time_us:
  1160                           	opt stack 0
  1161  000080                     EEPROM_read@address:
  1162                           	opt stack 0
  1163  000080                     ___wmul@multiplier:
  1164                           	opt stack 0
  1165  000080                     ___awmod@dividend:
  1166                           	opt stack 0
  1167  000080                     ___lwdiv@dividend:
  1168                           	opt stack 0
  1169  000080                     strcpy@to:
  1170                           	opt stack 0
  1171  000080                     ___lldiv@dividend:
  1172                           	opt stack 0
  1173                           
  1174                           ; 4 bytes @ 0x0
  1175  000080                     	ds	1
  1176  000081                     readADC@channel:
  1177                           	opt stack 0
  1178  000081                     I2C_Master_Read@a:
  1179                           	opt stack 0
  1180  000081                     lcdNibble@data:
  1181                           	opt stack 0
  1182  000081                     initTime@h:
  1183                           	opt stack 0
  1184  000081                     _isdigit$1632:
  1185                           	opt stack 0
  1186  000081                     I2C_Master_Write@d:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x1
  1190  000081                     	ds	1
  1191  000082                     ??_readMAG:
  1192  000082                     I2C_Master_Read@temp:
  1193                           	opt stack 0
  1194  000082                     lcdInst@data:
  1195                           	opt stack 0
  1196  000082                     putch@data:
  1197                           	opt stack 0
  1198  000082                     initTime@w:
  1199                           	opt stack 0
  1200  000082                     isdigit@c:
  1201                           	opt stack 0
  1202  000082                     updateServoPosition@timer:
  1203                           	opt stack 0
  1204  000082                     ___wmul@multiplicand:
  1205                           	opt stack 0
  1206  000082                     ___awmod@divisor:
  1207                           	opt stack 0
  1208  000082                     ___lwdiv@divisor:
  1209                           	opt stack 0
  1210  000082                     strcpy@from:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x2
  1214  000082                     	ds	1
  1215  000083                     ??_initLCD:
  1216  000083                     initTime@DD:
  1217                           	opt stack 0
  1218  000083                     getRTC@i:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x3
  1222  000083                     	ds	1
  1223  000084                     ??_updateServoPosition:
  1224  000084                     initTime@MM:
  1225                           	opt stack 0
  1226  000084                     ___awmod@counter:
  1227                           	opt stack 0
  1228  000084                     readMAG@res:
  1229                           	opt stack 0
  1230  000084                     ___wmul@product:
  1231                           	opt stack 0
  1232  000084                     ___lwdiv@quotient:
  1233                           	opt stack 0
  1234  000084                     strcpy@cp:
  1235                           	opt stack 0
  1236  000084                     ___lldiv@divisor:
  1237                           	opt stack 0
  1238                           
  1239                           ; 4 bytes @ 0x4
  1240  000084                     	ds	1
  1241  000085                     ??_initSortTimer:
  1242  000085                     initTime@YY:
  1243                           	opt stack 0
  1244  000085                     ___awmod@sign:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x5
  1248  000085                     	ds	1
  1249  000086                     ??_ID:
  1250  000086                     ?___awdiv:
  1251                           	opt stack 0
  1252  000086                     initTime@s:
  1253                           	opt stack 0
  1254  000086                     ___lwdiv@counter:
  1255                           	opt stack 0
  1256  000086                     updateServoPosition@my_time:
  1257                           	opt stack 0
  1258  000086                     ___awdiv@dividend:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x6
  1262  000086                     	ds	1
  1263  000087                     ?___lwmod:
  1264                           	opt stack 0
  1265  000087                     ___lwmod@dividend:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x7
  1269  000087                     	ds	1
  1270  000088                     ??_Distribution:
  1271  000088                     ??_initServos:
  1272  000088                     initSortTimer@i:
  1273                           	opt stack 0
  1274  000088                     ___awdiv@divisor:
  1275                           	opt stack 0
  1276  000088                     ___lldiv@quotient:
  1277                           	opt stack 0
  1278  000088                     ID@sensor_outputs:
  1279                           	opt stack 0
  1280                           
  1281                           ; 6 bytes @ 0x8
  1282  000088                     	ds	1
  1283  000089                     ___lwmod@divisor:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x9
  1287  000089                     	ds	1
  1288  00008A                     ??_Loading:
  1289  00008A                     ___awdiv@counter:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0xA
  1293  00008A                     	ds	1
  1294  00008B                     ___awdiv@sign:
  1295                           	opt stack 0
  1296  00008B                     ___lwmod@counter:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0xB
  1300  00008B                     	ds	1
  1301  00008C                     ___lldiv@counter:
  1302                           	opt stack 0
  1303  00008C                     ___awdiv@quotient:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0xC
  1307  00008C                     	ds	1
  1308  00008D                     I2C_Master_Init@c:
  1309                           	opt stack 0
  1310                           
  1311                           ; 4 bytes @ 0xD
  1312  00008D                     	ds	1
  1313  00008E                     ?_printf:
  1314                           	opt stack 0
  1315  00008E                     printf@f:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0xE
  1319  00008E                     	ds	3
  1320  000091                     ??_I2C_Master_Init:
  1321                           
  1322                           ; 1 bytes @ 0x11
  1323  000091                     	ds	4
  1324  000095                     ??_loadRTC:
  1325                           
  1326                           ; 1 bytes @ 0x15
  1327  000095                     	ds	1
  1328  000096                     loadRTC@i:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0x16
  1332  000096                     	ds	4
  1333  00009A                     ??_printf:
  1334                           
  1335                           ; 1 bytes @ 0x1A
  1336  00009A                     	ds	4
  1337  00009E                     printf@prec:
  1338                           	opt stack 0
  1339                           
  1340                           ; 1 bytes @ 0x1E
  1341  00009E                     	ds	1
  1342  00009F                     printf@cp:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x1F
  1346  00009F                     	ds	2
  1347  0000A1                     printf@ap:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x21
  1351  0000A1                     	ds	2
  1352  0000A3                     printf@len:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x23
  1356  0000A3                     	ds	2
  1357  0000A5                     printf@val:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0x25
  1361  0000A5                     	ds	2
  1362  0000A7                     printf@flag:
  1363                           	opt stack 0
  1364                           
  1365                           ; 1 bytes @ 0x27
  1366  0000A7                     	ds	1
  1367  0000A8                     printf@c:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x28
  1371  0000A8                     	ds	1
  1372  0000A9                     printf@width:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x29
  1376  0000A9                     	ds	2
  1377  0000AB                     ??_printRTC:
  1378  0000AB                     EEPROM_write@address:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x2B
  1382  0000AB                     	ds	2
  1383  0000AD                     EEPROM_write@data:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x2D
  1387  0000AD                     	ds	1
  1388  0000AE                     ??_EEPROM_write:
  1389  0000AE                     printRTC@INT_time:
  1390                           	opt stack 0
  1391                           
  1392                           ; 14 bytes @ 0x2E
  1393  0000AE                     	ds	1
  1394  0000AF                     EEPROM_write@i:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x2F
  1398  0000AF                     	ds	1
  1399  0000B0                     EEPROM_write@i_1364:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x30
  1403  0000B0                     	ds	1
  1404  0000B1                     logRun@num:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x31
  1408  0000B1                     	ds	1
  1409  0000B2                     logRun@byte1:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x32
  1413  0000B2                     	ds	1
  1414  0000B3                     logRun@byte2:
  1415                           	opt stack 0
  1416                           
  1417                           ; 1 bytes @ 0x33
  1418  0000B3                     	ds	1
  1419  0000B4                     logRun@byte3:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x34
  1423  0000B4                     	ds	1
  1424  0000B5                     logRun@byte_i:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x35
  1428  0000B5                     	ds	1
  1429  0000B6                     logRun@byte11:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x36
  1433  0000B6                     	ds	1
  1434  0000B7                     logRun@i:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x37
  1438  0000B7                     	ds	2
  1439  0000B9                     logRun@addr:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x39
  1443  0000B9                     	ds	3
  1444  0000BC                     printRTC@RTC_month:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x3C
  1448  0000BC                     	ds	2
  1449  0000BE                     printRTC@month:
  1450                           	opt stack 0
  1451                           
  1452                           ; 4 bytes @ 0x3E
  1453  0000BE                     	ds	4
  1454  0000C2                     printRTC@i:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x42
  1458  0000C2                     	ds	2
  1459  0000C4                     ??_UI:
  1460                           
  1461                           ; 1 bytes @ 0x44
  1462  0000C4                     	ds	2
  1463  0000C6                     _UI$1992:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x46
  1467  0000C6                     	ds	2
  1468  0000C8                     UI@i:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x48
  1472  0000C8                     	ds	1
  1473  0000C9                     UI@i_505:
  1474                           	opt stack 0
  1475                           
  1476                           ; 1 bytes @ 0x49
  1477  0000C9                     	ds	1
  1478  0000CA                     UI@i_506:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x4A
  1482  0000CA                     	ds	1
  1483  0000CB                     UI@i_524:
  1484                           	opt stack 0
  1485                           
  1486                           ; 1 bytes @ 0x4B
  1487  0000CB                     	ds	1
  1488  0000CC                     UI@i_525:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x4C
  1492  0000CC                     	ds	1
  1493  0000CD                     UI@i_528:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x4D
  1497  0000CD                     	ds	1
  1498  0000CE                     UI@i_529:
  1499                           	opt stack 0
  1500                           
  1501                           ; 1 bytes @ 0x4E
  1502  0000CE                     	ds	1
  1503  0000CF                     UI@i_532:
  1504                           	opt stack 0
  1505                           
  1506                           ; 1 bytes @ 0x4F
  1507  0000CF                     	ds	1
  1508  0000D0                     UI@i_533:
  1509                           	opt stack 0
  1510                           
  1511                           ; 1 bytes @ 0x50
  1512  0000D0                     	ds	1
  1513  0000D1                     UI@i_536:
  1514                           	opt stack 0
  1515                           
  1516                           ; 1 bytes @ 0x51
  1517  0000D1                     	ds	1
  1518  0000D2                     UI@i_537:
  1519                           	opt stack 0
  1520                           
  1521                           ; 1 bytes @ 0x52
  1522  0000D2                     	ds	1
  1523  0000D3                     UI@i_540:
  1524                           	opt stack 0
  1525                           
  1526                           ; 1 bytes @ 0x53
  1527  0000D3                     	ds	1
  1528  0000D4                     UI@i_541:
  1529                           	opt stack 0
  1530                           
  1531                           ; 1 bytes @ 0x54
  1532  0000D4                     	ds	1
  1533  0000D5                     UI@month:
  1534                           	opt stack 0
  1535                           
  1536                           ; 4 bytes @ 0x55
  1537  0000D5                     	ds	4
  1538  0000D9                     tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           postdec1	equ	0xFE5
  1545                           fsr1l	equ	0xFE1
  1546                           
  1547                           ; 1 bytes @ 0x59
  1548                           
  1549                           	psect	cstackCOMRAM
  1550  000001                     __pcstackCOMRAM:
  1551                           	opt stack 0
  1552  000001                     ??i2_I2C_Master_Wait:
  1553  000001                     ??i2_isdigit:
  1554  000001                     ?i2___wmul:
  1555                           	opt stack 0
  1556  000001                     ?i2___lwmod:
  1557                           	opt stack 0
  1558  000001                     i2lcdNibble@temp:
  1559                           	opt stack 0
  1560  000001                     i2EEPROM_read@address:
  1561                           	opt stack 0
  1562  000001                     i2___wmul@multiplier:
  1563                           	opt stack 0
  1564  000001                     i2___lwmod@dividend:
  1565                           	opt stack 0
  1566  000001                     i2strcpy@to:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x0
  1570  000001                     	ds	1
  1571  000002                     i2I2C_Master_Read@a:
  1572                           	opt stack 0
  1573  000002                     i2lcdNibble@data:
  1574                           	opt stack 0
  1575  000002                     i2_isdigit$1632:
  1576                           	opt stack 0
  1577  000002                     i2I2C_Master_Write@d:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x1
  1581  000002                     	ds	1
  1582  000003                     i2I2C_Master_Read@temp:
  1583                           	opt stack 0
  1584  000003                     i2lcdInst@data:
  1585                           	opt stack 0
  1586  000003                     i2putch@data:
  1587                           	opt stack 0
  1588  000003                     i2isdigit@c:
  1589                           	opt stack 0
  1590  000003                     i2___wmul@multiplicand:
  1591                           	opt stack 0
  1592  000003                     i2___lwmod@divisor:
  1593                           	opt stack 0
  1594  000003                     i2strcpy@from:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x2
  1598  000003                     	ds	1
  1599  000004                     i2getRTC@i:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x3
  1603  000004                     	ds	1
  1604  000005                     i2___lwmod@counter:
  1605                           	opt stack 0
  1606  000005                     i2___wmul@product:
  1607                           	opt stack 0
  1608  000005                     i2strcpy@cp:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x4
  1612  000005                     	ds	1
  1613  000006                     ?i2___lwdiv:
  1614                           	opt stack 0
  1615  000006                     i2___lwdiv@dividend:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x5
  1619  000006                     	ds	1
  1620  000007                     retrieveLog@logNum:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x6
  1624  000007                     	ds	1
  1625  000008                     i2___lwdiv@divisor:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x7
  1629  000008                     	ds	1
  1630  000009                     ??_retrieveLog:
  1631                           
  1632                           ; 1 bytes @ 0x8
  1633  000009                     	ds	1
  1634  00000A                     i2___lwdiv@quotient:
  1635                           	opt stack 0
  1636                           
  1637                           ; 2 bytes @ 0x9
  1638  00000A                     	ds	1
  1639  00000B                     retrieveLog@byte1:
  1640                           	opt stack 0
  1641                           
  1642                           ; 1 bytes @ 0xA
  1643  00000B                     	ds	1
  1644  00000C                     retrieveLog@byte2:
  1645                           	opt stack 0
  1646  00000C                     i2___lwdiv@counter:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0xB
  1650  00000C                     	ds	1
  1651  00000D                     ?i2_printf:
  1652                           	opt stack 0
  1653  00000D                     retrieveLog@byte3:
  1654                           	opt stack 0
  1655  00000D                     i2printf@f:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0xC
  1659  00000D                     	ds	1
  1660  00000E                     retrieveLog@i:
  1661                           	opt stack 0
  1662                           
  1663                           ; 2 bytes @ 0xD
  1664  00000E                     	ds	2
  1665  000010                     retrieveLog@addr:
  1666                           	opt stack 0
  1667                           
  1668                           ; 2 bytes @ 0xF
  1669  000010                     	ds	2
  1670  000012                     dispLogs@myLog:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x11
  1674  000012                     	ds	2
  1675  000014                     
  1676                           ; 1 bytes @ 0x13
  1677  000014                     	ds	5
  1678  000019                     ??i2_printf:
  1679                           
  1680                           ; 1 bytes @ 0x18
  1681  000019                     	ds	4
  1682  00001D                     i2printf@prec:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x1C
  1686  00001D                     	ds	1
  1687  00001E                     i2printf@cp:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x1D
  1691  00001E                     	ds	2
  1692  000020                     i2printf@ap:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x1F
  1696  000020                     	ds	2
  1697  000022                     i2printf@len:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0x21
  1701  000022                     	ds	2
  1702  000024                     i2printf@val:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x23
  1706  000024                     	ds	2
  1707  000026                     i2printf@flag:
  1708                           	opt stack 0
  1709                           
  1710                           ; 1 bytes @ 0x25
  1711  000026                     	ds	1
  1712  000027                     i2printf@c:
  1713                           	opt stack 0
  1714                           
  1715                           ; 1 bytes @ 0x26
  1716  000027                     	ds	1
  1717  000028                     i2printf@width:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0x27
  1721  000028                     	ds	2
  1722  00002A                     ??_printSortTimer:
  1723  00002A                     ??i2_printRTC:
  1724  00002A                     ?_inputHandler:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x29
  1728  00002A                     	ds	2
  1729  00002C                     ??_inputHandler:
  1730                           
  1731                           ; 1 bytes @ 0x2B
  1732  00002C                     	ds	1
  1733  00002D                     printSortTimer@hour:
  1734                           	opt stack 0
  1735  00002D                     i2printRTC@INT_time:
  1736                           	opt stack 0
  1737                           
  1738                           ; 14 bytes @ 0x2C
  1739  00002D                     	ds	2
  1740  00002F                     printSortTimer@curTime:
  1741                           	opt stack 0
  1742                           
  1743                           ; 14 bytes @ 0x2E
  1744  00002F                     	ds	12
  1745  00003B                     i2printRTC@RTC_month:
  1746                           	opt stack 0
  1747                           
  1748                           ; 2 bytes @ 0x3A
  1749  00003B                     	ds	2
  1750  00003D                     printSortTimer@start_sec:
  1751                           	opt stack 0
  1752  00003D                     i2printRTC@month:
  1753                           	opt stack 0
  1754                           
  1755                           ; 4 bytes @ 0x3C
  1756  00003D                     	ds	2
  1757  00003F                     printSortTimer@cur_sec:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x3E
  1761  00003F                     	ds	2
  1762  000041                     printSortTimer@min:
  1763                           	opt stack 0
  1764  000041                     i2printRTC@i:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x40
  1768  000041                     	ds	2
  1769  000043                     ??_updateMenu:
  1770  000043                     printSortTimer@sec:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x42
  1774  000043                     	ds	2
  1775  000045                     _printSortTimer$2112:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x44
  1779  000045                     	ds	2
  1780  000047                     printSortTimer@timeDiff:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x46
  1784  000047                     	ds	2
  1785  000049                     printSortTimer@i:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0x48
  1789  000049                     	ds	2
  1790  00004B                     ??_handler:
  1791                           
  1792                           ; 1 bytes @ 0x4A
  1793  00004B                     	ds	16
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           
  1803 ;;
  1804 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1805 ;;
  1806 ;; *************** function _main *****************
  1807 ;; Defined at:
  1808 ;;		line 17 in file "main.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;Total ram usage:        0 bytes
  1827 ;; Hardware stack levels required when called:   13
  1828 ;; This function calls:
  1829 ;;		_PortTestA5
  1830 ;;		_UI
  1831 ;;		_initLCD
  1832 ;;		_initTime
  1833 ;;		_initUI
  1834 ;;		_logRun
  1835 ;;		_machineConfig
  1836 ;;		_sort
  1837 ;;		_stopSignals
  1838 ;; This function is called by:
  1839 ;;		Startup code after reset
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text0
  1844  00262A                     __ptext0:
  1845                           	opt stack 0
  1846  00262A                     _main:
  1847                           	opt stack 18
  1848                           
  1849                           ;main.c: 18: machineConfig();
  1850                           
  1851                           ;incstack = 0
  1852  00262A  EC64  F015         	call	_machineConfig	;wreg free
  1853                           
  1854                           ;main.c: 19: initLCD();
  1855  00262E  EC56  F016         	call	_initLCD	;wreg free
  1856                           
  1857                           ;main.c: 20: initTime(0x42, 0x44, 0x02, 0x04, 0x01, 0x03, 0x17);
  1858  002632  0E44               	movlw	68
  1859  002634  0100               	movlb	0	; () banked
  1860  002636  6F80               	movwf	initTime@m& (0+255),b
  1861  002638  0E02               	movlw	2
  1862  00263A  0100               	movlb	0	; () banked
  1863  00263C  6F81               	movwf	initTime@h& (0+255),b
  1864  00263E  0E04               	movlw	4
  1865  002640  0100               	movlb	0	; () banked
  1866  002642  6F82               	movwf	initTime@w& (0+255),b
  1867  002644  0E01               	movlw	1
  1868  002646  0100               	movlb	0	; () banked
  1869  002648  6F83               	movwf	initTime@DD& (0+255),b
  1870  00264A  0E03               	movlw	3
  1871  00264C  0100               	movlb	0	; () banked
  1872  00264E  6F84               	movwf	initTime@MM& (0+255),b
  1873  002650  0E17               	movlw	23
  1874  002652  0100               	movlb	0	; () banked
  1875  002654  6F85               	movwf	initTime@YY& (0+255),b
  1876  002656  0E42               	movlw	66
  1877  002658  ECD7  F018         	call	_initTime
  1878                           
  1879                           ;main.c: 21: initUI();
  1880  00265C  ECA2  F018         	call	_initUI	;wreg free
  1881                           
  1882                           ;main.c: 22: first = 1;
  1883  002660  0E00               	movlw	0
  1884  002662  0100               	movlb	0	; () banked
  1885  002664  6FE6               	movwf	(_first+1)& (0+255),b
  1886  002666  0E01               	movlw	1
  1887  002668  6FE5               	movwf	_first& (0+255),b
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;main.c: 28: switch(machine_state){
  1891                           
  1892                           ;main.c: 27: while(1){
  1893  00266A  D018               	goto	l6053
  1894  00266C                     l6035:
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;main.c: 30: UI();
  1898  00266C  EC09  F000         	call	_UI	;wreg free
  1899                           
  1900                           ;main.c: 31: break;
  1901  002670  D015               	goto	l6053
  1902  002672                     l6037:
  1903                           
  1904                           ;main.c: 33: sort();
  1905  002672  ECC6  F018         	call	_sort	;wreg free
  1906                           
  1907                           ;main.c: 34: break;
  1908  002676  D012               	goto	l6053
  1909  002678                     l6039:
  1910                           
  1911                           ;main.c: 36: stopSignals();
  1912  002678  EC03  F019         	call	_stopSignals	;wreg free
  1913                           
  1914                           ;main.c: 37: logRun();
  1915  00267C  EC90  F00E         	call	_logRun	;wreg free
  1916                           
  1917                           ;main.c: 38: first = 1;
  1918  002680  0E00               	movlw	0
  1919  002682  0100               	movlb	0	; () banked
  1920  002684  6FE6               	movwf	(_first+1)& (0+255),b
  1921  002686  0E01               	movlw	1
  1922  002688  6FE5               	movwf	_first& (0+255),b
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;main.c: 39: UI();
  1926  00268A  EC09  F000         	call	_UI	;wreg free
  1927                           
  1928                           ;main.c: 40: break;
  1929  00268E  D006               	goto	l6053
  1930  002690                     l6047:
  1931                           
  1932                           ;main.c: 42: PortTestA5();
  1933  002690  EC23  F019         	call	_PortTestA5	;wreg free
  1934                           
  1935                           ;main.c: 43: break;
  1936  002694  D003               	goto	l6053
  1937  002696                     l6049:
  1938                           
  1939                           ;main.c: 45: stopSignals();
  1940  002696  EC03  F019         	call	_stopSignals	;wreg free
  1941  00269A                     l493:
  1942  00269A  D7FF               	goto	l493
  1943  00269C                     l6053:
  1944  00269C  0100               	movlb	0	; () banked
  1945  00269E  51FB               	movf	_machine_state& (0+255),w,b
  1946                           
  1947                           ; Switch size 1, requested type "space"
  1948                           ; Number of cases is 5, Range of values is 0 to 4
  1949                           ; switch strategies available:
  1950                           ; Name         Instructions Cycles
  1951                           ; simple_byte           16     9 (average)
  1952                           ;	Chosen strategy is simple_byte
  1953  0026A0  0A00               	xorlw	0	; case 0
  1954  0026A2  B4D8               	btfsc	status,2,c
  1955  0026A4  D7E3               	goto	l6035
  1956  0026A6  0A01               	xorlw	1	; case 1
  1957  0026A8  B4D8               	btfsc	status,2,c
  1958  0026AA  D7E3               	goto	l6037
  1959  0026AC  0A03               	xorlw	3	; case 2
  1960  0026AE  B4D8               	btfsc	status,2,c
  1961  0026B0  D7E3               	goto	l6039
  1962  0026B2  0A01               	xorlw	1	; case 3
  1963  0026B4  B4D8               	btfsc	status,2,c
  1964  0026B6  D7EC               	goto	l6047
  1965  0026B8  0A07               	xorlw	7	; case 4
  1966  0026BA  B4D8               	btfsc	status,2,c
  1967  0026BC  D7EC               	goto	l6049
  1968                           
  1969                           ; BSR set to: 0
  1970                           
  1971                           ; BSR set to: 0
  1972  0026BE  D7EE               	goto	l6053
  1973  0026C0                     __end_of_main:
  1974                           	opt stack 0
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           postinc0	equ	0xFEE
  1980                           wreg	equ	0xFE8
  1981                           postdec1	equ	0xFE5
  1982                           fsr1l	equ	0xFE1
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _stopSignals *****************
  1986 ;; Defined at:
  1987 ;;		line 54 in file "main.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, status,2
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;Total ram usage:        0 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    7
  2008 ;; This function calls:
  2009 ;;		Nothing
  2010 ;; This function is called by:
  2011 ;;		_main
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text1
  2016  003206                     __ptext1:
  2017                           	opt stack 0
  2018  003206                     _stopSignals:
  2019                           	opt stack 23
  2020                           
  2021                           ;main.c: 55: LATA = 0x00;
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;incstack = 0
  2025  003206  0E00               	movlw	0
  2026  003208  6E89               	movwf	3977,c	;volatile
  2027                           
  2028                           ;main.c: 56: LATB = 0x00;
  2029  00320A  0E00               	movlw	0
  2030  00320C  6E8A               	movwf	3978,c	;volatile
  2031                           
  2032                           ;main.c: 57: LATC = 0x00;
  2033  00320E  0E00               	movlw	0
  2034  003210  6E8B               	movwf	3979,c	;volatile
  2035                           
  2036                           ;main.c: 58: LATD = 0x00;
  2037  003212  0E00               	movlw	0
  2038  003214  6E8C               	movwf	3980,c	;volatile
  2039                           
  2040                           ;main.c: 59: LATE = 0x00;
  2041  003216  0E00               	movlw	0
  2042  003218  6E8D               	movwf	3981,c	;volatile
  2043  00321A  0012               	return		;funcret
  2044  00321C                     __end_of_stopSignals:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           postdec1	equ	0xFE5
  2053                           fsr1l	equ	0xFE1
  2054                           status	equ	0xFD8
  2055                           
  2056 ;; *************** function _sort *****************
  2057 ;; Defined at:
  2058 ;;		line 55 in file "sort.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;		None
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;		None
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;Total ram usage:        0 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:   12
  2079 ;; This function calls:
  2080 ;;		_Distribution
  2081 ;;		_ID
  2082 ;;		_Loading
  2083 ;; This function is called by:
  2084 ;;		_main
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           	psect	text2
  2089  00318C                     __ptext2:
  2090                           	opt stack 0
  2091  00318C                     _sort:
  2092                           	opt stack 18
  2093                           
  2094                           ;sort.c: 56: if(machine_state == Sorting_state){
  2095                           
  2096                           ;incstack = 0
  2097  00318C  0100               	movlb	0	; () banked
  2098  00318E  05FB               	decf	_machine_state& (0+255),w,b
  2099  003190  B4D8               	btfsc	status,2,c
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;sort.c: 57: Loading();
  2103  003192  EC19  F012         	call	_Loading	;wreg free
  2104                           
  2105                           ;sort.c: 58: }
  2106                           ;sort.c: 59: if(machine_state == Sorting_state){
  2107  003196  0100               	movlb	0	; () banked
  2108  003198  05FB               	decf	_machine_state& (0+255),w,b
  2109  00319A  B4D8               	btfsc	status,2,c
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;sort.c: 60: ID();
  2113  00319C  ECC8  F00F         	call	_ID	;wreg free
  2114                           
  2115                           ;sort.c: 61: }
  2116                           ;sort.c: 62: if(machine_state == Sorting_state){
  2117  0031A0  0100               	movlb	0	; () banked
  2118  0031A2  05FB               	decf	_machine_state& (0+255),w,b
  2119  0031A4  A4D8               	btfss	status,2,c
  2120  0031A6  0012               	return	
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;sort.c: 63: Distribution();
  2124  0031A8  EC2E  F00F         	call	_Distribution	;wreg free
  2125  0031AC  0012               	return	
  2126  0031AE                     __end_of_sort:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           postinc0	equ	0xFEE
  2133                           wreg	equ	0xFE8
  2134                           postdec1	equ	0xFE5
  2135                           fsr1l	equ	0xFE1
  2136                           status	equ	0xFD8
  2137                           
  2138 ;; *************** function _Loading *****************
  2139 ;; Defined at:
  2140 ;;		line 67 in file "sort.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;		None
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;		None
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      void 
  2147 ;; Registers used:
  2148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;Total ram usage:        2 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:   11
  2161 ;; This function calls:
  2162 ;;		_initGlobalVars
  2163 ;;		_initServos
  2164 ;;		_initSortTimer
  2165 ;;		_lcdInst
  2166 ;; This function is called by:
  2167 ;;		_sort
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text3
  2172  002432                     __ptext3:
  2173                           	opt stack 0
  2174  002432                     _Loading:
  2175                           	opt stack 18
  2176                           
  2177                           ;sort.c: 68: if(first){
  2178                           
  2179                           ;incstack = 0
  2180  002432  0100               	movlb	0	; () banked
  2181  002434  51E5               	movf	_first& (0+255),w,b
  2182  002436  0100               	movlb	0	; () banked
  2183  002438  11E6               	iorwf	(_first+1)& (0+255),w,b
  2184  00243A  B4D8               	btfsc	status,2,c
  2185  00243C  D014               	goto	l5089
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;sort.c: 69: initGlobalVars();
  2189  00243E  EC5F  F014         	call	_initGlobalVars	;wreg free
  2190                           
  2191                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2192  002442  0E01               	movlw	1
  2193  002444  EC3D  F019         	call	_lcdInst
  2194  002448  0E68               	movlw	104
  2195  00244A  0100               	movlb	0	; () banked
  2196  00244C  6F8A               	movwf	??_Loading& (0+255),b
  2197  00244E  0EE4               	movlw	228
  2198  002450                     u5097:
  2199  002450  2EE8               	decfsz	wreg,f,c
  2200  002452  D7FE               	bra	u5097
  2201  002454  2F8A               	decfsz	??_Loading& (0+255),f,b
  2202  002456  D7FC               	bra	u5097
  2203  002458  F000               	nop	
  2204                           
  2205                           ;sort.c: 71: initSortTimer();
  2206  00245A  EC6F  F012         	call	_initSortTimer	;wreg free
  2207                           
  2208                           ;sort.c: 74: LATAbits.LATA5 = 1;
  2209  00245E  8A89               	bsf	3977,5,c	;volatile
  2210                           
  2211                           ;sort.c: 77: initServos();
  2212  002460  EC0C  F016         	call	_initServos	;wreg free
  2213                           
  2214                           ;sort.c: 78: }
  2215  002464  0012               	return	
  2216  002466                     l5089:
  2217                           
  2218                           ;sort.c: 79: else{
  2219                           ;sort.c: 82: if(!f_loadingNewCan){
  2220  002466  0100               	movlb	0	; () banked
  2221  002468  51E3               	movf	_f_loadingNewCan& (0+255),w,b
  2222  00246A  0100               	movlb	0	; () banked
  2223  00246C  11E4               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2224  00246E  A4D8               	btfss	status,2,c
  2225  002470  D016               	goto	l5103
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;sort.c: 86: if(!f_loadingNewCan){
  2229  002472  0100               	movlb	0	; () banked
  2230  002474  51E3               	movf	_f_loadingNewCan& (0+255),w,b
  2231  002476  0100               	movlb	0	; () banked
  2232  002478  11E4               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2233  00247A  B4D8               	btfsc	status,2,c
  2234  00247C  0012               	return	
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;sort.c: 90: else{
  2238                           ;sort.c: 91: count_total++;
  2239                           
  2240                           ; BSR set to: 0
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;sort.c: 88: }
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;sort.c: 87: return;
  2247  00247E  0100               	movlb	0	; () banked
  2248  002480  4BFD               	infsnz	_count_total& (0+255),f,b
  2249  002482  2BFE               	incf	(_count_total+1)& (0+255),f,b
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;sort.c: 92: if(count_total == 12){
  2253  002484  0E0C               	movlw	12
  2254  002486  0100               	movlb	0	; () banked
  2255  002488  19FD               	xorwf	_count_total& (0+255),w,b
  2256  00248A  0100               	movlb	0	; () banked
  2257  00248C  11FE               	iorwf	(_count_total+1)& (0+255),w,b
  2258  00248E  A4D8               	btfss	status,2,c
  2259  002490  0012               	return	
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;sort.c: 93: f_lastCan = 1;
  2263  002492  0E00               	movlw	0
  2264  002494  0101               	movlb	1	; () banked
  2265  002496  6F27               	movwf	(_f_lastCan+1)& (0+255),b
  2266  002498  0E01               	movlw	1
  2267  00249A  6F26               	movwf	_f_lastCan& (0+255),b
  2268                           
  2269                           ; BSR set to: 1
  2270                           ;sort.c: 94: }
  2271                           ;sort.c: 95: }
  2272                           ;sort.c: 96: }
  2273                           
  2274                           ; BSR set to: 1
  2275  00249C  0012               	return	
  2276  00249E                     l5103:
  2277                           
  2278                           ;sort.c: 99: else if(f_ID_receive){
  2279  00249E  0100               	movlb	0	; () banked
  2280  0024A0  51DF               	movf	_f_ID_receive& (0+255),w,b
  2281  0024A2  0100               	movlb	0	; () banked
  2282  0024A4  11E0               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2283  0024A6  B4D8               	btfsc	status,2,c
  2284  0024A8  0012               	return	
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;sort.c: 100: f_loadingNewCan = 0;
  2288  0024AA  0E00               	movlw	0
  2289  0024AC  0100               	movlb	0	; () banked
  2290  0024AE  6FE4               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2291  0024B0  0E00               	movlw	0
  2292  0024B2  6FE3               	movwf	_f_loadingNewCan& (0+255),b
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;sort.c: 101: LATAbits.LATA4 = 1;
  2296  0024B4  8889               	bsf	3977,4,c	;volatile
  2297                           
  2298                           ;sort.c: 102: f_can_coming_to_ID = 1;
  2299  0024B6  0E00               	movlw	0
  2300  0024B8  0100               	movlb	0	; () banked
  2301  0024BA  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2302  0024BC  0E01               	movlw	1
  2303  0024BE  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;sort.c: 103: _delay((unsigned long)((100)*(32000000/4000.0)));
  2307  0024C0  0E05               	movlw	5
  2308  0024C2  0100               	movlb	0	; () banked
  2309  0024C4  6F8B               	movwf	(??_Loading+1)& (0+255),b
  2310  0024C6  0E0F               	movlw	15
  2311  0024C8  0100               	movlb	0	; () banked
  2312  0024CA  6F8A               	movwf	??_Loading& (0+255),b
  2313  0024CC  0EF1               	movlw	241
  2314  0024CE                     u5107:
  2315  0024CE  2EE8               	decfsz	wreg,f,c
  2316  0024D0  D7FE               	bra	u5107
  2317  0024D2  2F8A               	decfsz	??_Loading& (0+255),f,b
  2318  0024D4  D7FC               	bra	u5107
  2319  0024D6  2F8B               	decfsz	(??_Loading+1)& (0+255),f,b
  2320  0024D8  D7FA               	bra	u5107
  2321                           
  2322                           ;sort.c: 104: LATAbits.LATA4 = 0;
  2323  0024DA  9889               	bcf	3977,4,c	;volatile
  2324  0024DC  0012               	return	
  2325  0024DE                     __end_of_Loading:
  2326                           	opt stack 0
  2327                           tblptru	equ	0xFF8
  2328                           tblptrh	equ	0xFF7
  2329                           tblptrl	equ	0xFF6
  2330                           tablat	equ	0xFF5
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1l	equ	0xFE1
  2335                           status	equ	0xFD8
  2336                           
  2337 ;; *************** function _initSortTimer *****************
  2338 ;; Defined at:
  2339 ;;		line 217 in file "sort.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;		None
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;  i               2    8[BANK0 ] int 
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;Total ram usage:        5 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:   10
  2360 ;; This function calls:
  2361 ;;		_getRTC
  2362 ;; This function is called by:
  2363 ;;		_Loading
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text4
  2368  0024DE                     __ptext4:
  2369                           	opt stack 0
  2370  0024DE                     _initSortTimer:
  2371                           	opt stack 18
  2372                           
  2373                           ;sort.c: 219: getRTC();
  2374                           
  2375                           ;incstack = 0
  2376  0024DE  ECA6  F013         	call	_getRTC	;wreg free
  2377                           
  2378                           ;sort.c: 220: for(int i = 0; i < 7; i++){
  2379  0024E2  0E00               	movlw	0
  2380  0024E4  0100               	movlb	0	; () banked
  2381  0024E6  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2382  0024E8  0E00               	movlw	0
  2383  0024EA  6F88               	movwf	initSortTimer@i& (0+255),b
  2384  0024EC                     l4771:
  2385                           
  2386                           ; BSR set to: 0
  2387  0024EC  0100               	movlb	0	; () banked
  2388  0024EE  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2389  0024F0  D008               	goto	l4775
  2390  0024F2  0100               	movlb	0	; () banked
  2391  0024F4  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2392  0024F6  E140               	bnz	l4781
  2393  0024F8  0E07               	movlw	7
  2394  0024FA  0100               	movlb	0	; () banked
  2395  0024FC  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2396  0024FE  B0D8               	btfsc	status,0,c
  2397  002500  D03B               	goto	l4781
  2398  002502                     l4775:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;sort.c: 221: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2402  002502  0E5B               	movlw	low _time
  2403  002504  0100               	movlb	0	; () banked
  2404  002506  2588               	addwf	initSortTimer@i& (0+255),w,b
  2405  002508  6ED9               	movwf	fsr2l,c
  2406  00250A  0E00               	movlw	high _time
  2407  00250C  0100               	movlb	0	; () banked
  2408  00250E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2409  002510  6EDA               	movwf	fsr2h,c
  2410  002512  50DF               	movf	indf2,w,c
  2411  002514  0100               	movlb	0	; () banked
  2412  002516  6F85               	movwf	??_initSortTimer& (0+255),b
  2413  002518  0100               	movlb	0	; () banked
  2414  00251A  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2415  00251C  0E0F               	movlw	15
  2416  00251E  1785               	andwf	??_initSortTimer& (0+255),f,b
  2417  002520  0E0F               	movlw	15
  2418  002522  0100               	movlb	0	; () banked
  2419  002524  1785               	andwf	??_initSortTimer& (0+255),f,b
  2420  002526  0100               	movlb	0	; () banked
  2421  002528  5185               	movf	??_initSortTimer& (0+255),w,b
  2422  00252A  0D0A               	mullw	10
  2423  00252C  0E5B               	movlw	low _time
  2424  00252E  0100               	movlb	0	; () banked
  2425  002530  2588               	addwf	initSortTimer@i& (0+255),w,b
  2426  002532  6ED9               	movwf	fsr2l,c
  2427  002534  0E00               	movlw	high _time
  2428  002536  0100               	movlb	0	; () banked
  2429  002538  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2430  00253A  6EDA               	movwf	fsr2h,c
  2431  00253C  50DF               	movf	indf2,w,c
  2432  00253E  0B0F               	andlw	15
  2433  002540  0100               	movlb	0	; () banked
  2434  002542  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2435  002544  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2436  002546  50F3               	movf	prodl,w,c
  2437  002548  0100               	movlb	0	; () banked
  2438  00254A  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2439  00254C  50F4               	movf	prodh,w,c
  2440  00254E  0100               	movlb	0	; () banked
  2441  002550  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2442  002552  90D8               	bcf	status,0,c
  2443  002554  0100               	movlb	0	; () banked
  2444  002556  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2445  002558  6ED9               	movwf	fsr2l,c
  2446  00255A  0100               	movlb	0	; () banked
  2447  00255C  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2448  00255E  6EDA               	movwf	fsr2h,c
  2449  002560  0E0E               	movlw	low _startTime
  2450  002562  26D9               	addwf	fsr2l,f,c
  2451  002564  0E01               	movlw	high _startTime
  2452  002566  22DA               	addwfc	fsr2h,f,c
  2453  002568  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2454  00256C  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2455                           
  2456                           ; BSR set to: 0
  2457  002570  0100               	movlb	0	; () banked
  2458  002572  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2459  002574  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2460  002576  D7BA               	goto	l4771
  2461  002578                     l4781:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;sort.c: 222: }
  2465                           ;sort.c: 224: T0CON = 0b00010111;
  2466  002578  0E17               	movlw	23
  2467  00257A  6ED5               	movwf	4053,c	;volatile
  2468                           
  2469                           ;sort.c: 233: TMR0H = 0b10000101;
  2470  00257C  0E85               	movlw	133
  2471  00257E  6ED7               	movwf	4055,c	;volatile
  2472                           
  2473                           ;sort.c: 234: TMR0L = 0b11101110;
  2474  002580  0EEE               	movlw	238
  2475  002582  6ED6               	movwf	4054,c	;volatile
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;sort.c: 235: TMR0ON = 1;
  2479  002584  8ED5               	bsf	4053,7,c	;volatile
  2480                           
  2481                           ; BSR set to: 0
  2482  002586  0012               	return		;funcret
  2483  002588                     __end_of_initSortTimer:
  2484                           	opt stack 0
  2485                           tblptru	equ	0xFF8
  2486                           tblptrh	equ	0xFF7
  2487                           tblptrl	equ	0xFF6
  2488                           tablat	equ	0xFF5
  2489                           prodh	equ	0xFF4
  2490                           prodl	equ	0xFF3
  2491                           postinc0	equ	0xFEE
  2492                           wreg	equ	0xFE8
  2493                           postdec1	equ	0xFE5
  2494                           fsr1l	equ	0xFE1
  2495                           indf2	equ	0xFDF
  2496                           postinc2	equ	0xFDE
  2497                           postdec2	equ	0xFDD
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _initServos *****************
  2503 ;; Defined at:
  2504 ;;		line 237 in file "sort.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;Total ram usage:        1 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    8
  2525 ;; This function calls:
  2526 ;;		_updateServoPosition
  2527 ;; This function is called by:
  2528 ;;		_Loading
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text5
  2533  002C18                     __ptext5:
  2534                           	opt stack 0
  2535  002C18                     _initServos:
  2536                           	opt stack 20
  2537                           
  2538                           ;sort.c: 238: updateServoPosition(2000, 1);
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;incstack = 0
  2542  002C18  0E07               	movlw	7
  2543  002C1A  0100               	movlb	0	; () banked
  2544  002C1C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2545  002C1E  0ED0               	movlw	208
  2546  002C20  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2547  002C22  0E00               	movlw	0
  2548  002C24  0100               	movlb	0	; () banked
  2549  002C26  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2550  002C28  0E01               	movlw	1
  2551  002C2A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2552  002C2C  EC24  F014         	call	_updateServoPosition	;wreg free
  2553                           
  2554                           ;sort.c: 239: updateServoPosition(1000, 3);
  2555  002C30  0E03               	movlw	3
  2556  002C32  0100               	movlb	0	; () banked
  2557  002C34  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2558  002C36  0EE8               	movlw	232
  2559  002C38  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2560  002C3A  0E00               	movlw	0
  2561  002C3C  0100               	movlb	0	; () banked
  2562  002C3E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2563  002C40  0E03               	movlw	3
  2564  002C42  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2565  002C44  EC24  F014         	call	_updateServoPosition	;wreg free
  2566                           
  2567                           ;sort.c: 240: TMR1ON = 1;
  2568  002C48  80CD               	bsf	4045,0,c	;volatile
  2569                           
  2570                           ;sort.c: 241: _delay((unsigned long)((5)*(32000000/4000.0)));
  2571  002C4A  0E34               	movlw	52
  2572  002C4C  0100               	movlb	0	; () banked
  2573  002C4E  6F88               	movwf	??_initServos& (0+255),b
  2574  002C50  0EF1               	movlw	241
  2575  002C52                     u5117:
  2576  002C52  2EE8               	decfsz	wreg,f,c
  2577  002C54  D7FE               	bra	u5117
  2578  002C56  2F88               	decfsz	??_initServos& (0+255),f,b
  2579  002C58  D7FC               	bra	u5117
  2580  002C5A  D000               	nop2	
  2581                           
  2582                           ;sort.c: 242: TMR3ON = 1;
  2583  002C5C  80B1               	bsf	4017,0,c	;volatile
  2584                           
  2585                           ;sort.c: 243: LATCbits.LATC0 = 0;
  2586  002C5E  908B               	bcf	3979,0,c	;volatile
  2587  002C60  0012               	return		;funcret
  2588  002C62                     __end_of_initServos:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           postdec1	equ	0xFE5
  2599                           fsr1l	equ	0xFE1
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           postdec2	equ	0xFDD
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _initGlobalVars *****************
  2608 ;; Defined at:
  2609 ;;		line 198 in file "sort.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;Total ram usage:        0 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    7
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_Loading
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text6
  2638  0028BE                     __ptext6:
  2639                           	opt stack 0
  2640  0028BE                     _initGlobalVars:
  2641                           	opt stack 21
  2642                           
  2643                           ;sort.c: 200: first = 0;
  2644                           
  2645                           ;incstack = 0
  2646  0028BE  0E00               	movlw	0
  2647  0028C0  0100               	movlb	0	; () banked
  2648  0028C2  6FE6               	movwf	(_first+1)& (0+255),b
  2649  0028C4  0E00               	movlw	0
  2650  0028C6  6FE5               	movwf	_first& (0+255),b
  2651                           
  2652                           ;sort.c: 203: f_loadingNewCan = 0;
  2653  0028C8  0E00               	movlw	0
  2654  0028CA  0100               	movlb	0	; () banked
  2655  0028CC  6FE4               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2656  0028CE  0E00               	movlw	0
  2657  0028D0  6FE3               	movwf	_f_loadingNewCan& (0+255),b
  2658                           
  2659                           ;sort.c: 204: f_lastCan = 0;
  2660  0028D2  0E00               	movlw	0
  2661  0028D4  0101               	movlb	1	; () banked
  2662  0028D6  6F27               	movwf	(_f_lastCan+1)& (0+255),b
  2663  0028D8  0E00               	movlw	0
  2664  0028DA  6F26               	movwf	_f_lastCan& (0+255),b
  2665                           
  2666                           ;sort.c: 205: f_ID_receive = 1;
  2667  0028DC  0E00               	movlw	0
  2668  0028DE  0100               	movlb	0	; () banked
  2669  0028E0  6FE0               	movwf	(_f_ID_receive+1)& (0+255),b
  2670  0028E2  0E01               	movlw	1
  2671  0028E4  6FDF               	movwf	_f_ID_receive& (0+255),b
  2672                           
  2673                           ;sort.c: 206: f_can_coming_to_ID = 0;
  2674  0028E6  0E00               	movlw	0
  2675  0028E8  0100               	movlb	0	; () banked
  2676  0028EA  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2677  0028EC  0E00               	movlw	0
  2678  0028EE  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2679                           
  2680                           ;sort.c: 207: f_can_coming_to_distribution = 0;
  2681  0028F0  0E00               	movlw	0
  2682  0028F2  6E75               	movwf	_f_can_coming_to_distribution+1,c
  2683  0028F4  0E00               	movlw	0
  2684  0028F6  6E74               	movwf	_f_can_coming_to_distribution,c
  2685                           
  2686                           ;sort.c: 208: f_can_distributed = 0;
  2687  0028F8  0E00               	movlw	0
  2688  0028FA  0101               	movlb	1	; () banked
  2689  0028FC  6F25               	movwf	(_f_can_distributed+1)& (0+255),b
  2690  0028FE  0E00               	movlw	0
  2691  002900  6F24               	movwf	_f_can_distributed& (0+255),b
  2692                           
  2693                           ;sort.c: 211: count_total = 0;
  2694  002902  0E00               	movlw	0
  2695  002904  0100               	movlb	0	; () banked
  2696  002906  6FFE               	movwf	(_count_total+1)& (0+255),b
  2697  002908  0E00               	movlw	0
  2698  00290A  6FFD               	movwf	_count_total& (0+255),b
  2699                           
  2700                           ;sort.c: 212: count_pop_no_tab = 0;
  2701  00290C  0E00               	movlw	0
  2702  00290E  6E6B               	movwf	_count_pop_no_tab+1,c
  2703  002910  0E00               	movlw	0
  2704  002912  6E6A               	movwf	_count_pop_no_tab,c
  2705                           
  2706                           ;sort.c: 213: count_pop_w_tab = 0;
  2707  002914  0E00               	movlw	0
  2708  002916  6E6D               	movwf	_count_pop_w_tab+1,c
  2709  002918  0E00               	movlw	0
  2710  00291A  6E6C               	movwf	_count_pop_w_tab,c
  2711                           
  2712                           ;sort.c: 214: count_can_w_lab = 0;
  2713  00291C  0E00               	movlw	0
  2714  00291E  6E69               	movwf	_count_can_w_lab+1,c
  2715  002920  0E00               	movlw	0
  2716  002922  6E68               	movwf	_count_can_w_lab,c
  2717                           
  2718                           ;sort.c: 215: count_can_no_lab = 0;
  2719  002924  0E00               	movlw	0
  2720  002926  6E67               	movwf	_count_can_no_lab+1,c
  2721  002928  0E00               	movlw	0
  2722  00292A  6E66               	movwf	_count_can_no_lab,c
  2723                           
  2724                           ; BSR set to: 0
  2725  00292C  0012               	return		;funcret
  2726  00292E                     __end_of_initGlobalVars:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           prodh	equ	0xFF4
  2733                           prodl	equ	0xFF3
  2734                           postinc0	equ	0xFEE
  2735                           wreg	equ	0xFE8
  2736                           postdec1	equ	0xFE5
  2737                           fsr1l	equ	0xFE1
  2738                           indf2	equ	0xFDF
  2739                           postinc2	equ	0xFDE
  2740                           postdec2	equ	0xFDD
  2741                           fsr2h	equ	0xFDA
  2742                           fsr2l	equ	0xFD9
  2743                           status	equ	0xFD8
  2744                           
  2745 ;; *************** function _ID *****************
  2746 ;; Defined at:
  2747 ;;		line 108 in file "sort.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;		None
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      void 
  2754 ;; Registers used:
  2755 ;;		wreg, status,2, status,0, cstack
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;Total ram usage:        8 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    9
  2768 ;; This function calls:
  2769 ;;		_readMAG
  2770 ;; This function is called by:
  2771 ;;		_sort
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text7
  2776  001F90                     __ptext7:
  2777                           	opt stack 0
  2778  001F90                     _ID:
  2779                           	opt stack 20
  2780                           
  2781                           ;sort.c: 109: if(f_can_coming_to_ID){
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;incstack = 0
  2785  001F90  0100               	movlb	0	; () banked
  2786  001F92  51E1               	movf	_f_can_coming_to_ID& (0+255),w,b
  2787  001F94  0100               	movlb	0	; () banked
  2788  001F96  11E2               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2789  001F98  B4D8               	btfsc	status,2,c
  2790  001F9A  0012               	return	
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;sort.c: 111: _delay((unsigned long)((500)*(32000000/4000.0)));
  2794  001F9C  0E15               	movlw	21
  2795  001F9E  0100               	movlb	0	; () banked
  2796  001FA0  6F87               	movwf	(??_ID+1)& (0+255),b
  2797  001FA2  0E4B               	movlw	75
  2798  001FA4  0100               	movlb	0	; () banked
  2799  001FA6  6F86               	movwf	??_ID& (0+255),b
  2800  001FA8  0EBE               	movlw	190
  2801  001FAA                     u5127:
  2802  001FAA  2EE8               	decfsz	wreg,f,c
  2803  001FAC  D7FE               	bra	u5127
  2804  001FAE  2F86               	decfsz	??_ID& (0+255),f,b
  2805  001FB0  D7FC               	bra	u5127
  2806  001FB2  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2807  001FB4  D7FA               	bra	u5127
  2808  001FB6  F000               	nop	
  2809                           
  2810                           ;sort.c: 116: int sensor_outputs[3];
  2811                           ;sort.c: 120: sensor_outputs[0] = PORTAbits.RA2;
  2812  001FB8  A480               	btfss	3968,2,c	;volatile
  2813  001FBA  D004               	goto	u3750
  2814  001FBC  0100               	movlb	0	; () banked
  2815  001FBE  6B86               	clrf	??_ID& (0+255),b
  2816  001FC0  2B86               	incf	??_ID& (0+255),f,b
  2817  001FC2  D002               	goto	u3758
  2818  001FC4                     u3750:
  2819  001FC4  0100               	movlb	0	; () banked
  2820  001FC6  6B86               	clrf	??_ID& (0+255),b
  2821  001FC8                     u3758:
  2822  001FC8  0100               	movlb	0	; () banked
  2823  001FCA  5186               	movf	??_ID& (0+255),w,b
  2824  001FCC  0100               	movlb	0	; () banked
  2825  001FCE  6F88               	movwf	ID@sensor_outputs& (0+255),b
  2826  001FD0  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;sort.c: 122: if(!sensor_outputs[0]){
  2830  001FD2  0100               	movlb	0	; () banked
  2831  001FD4  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2832  001FD6  0100               	movlb	0	; () banked
  2833  001FD8  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2834  001FDA  A4D8               	btfss	status,2,c
  2835  001FDC  D028               	goto	l5135
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;sort.c: 123: readMAG();
  2839  001FDE  EC31  F016         	call	_readMAG	;wreg free
  2840                           
  2841                           ;sort.c: 124: sensor_outputs[1] = MAG_signal;
  2842  001FE2  C0D9  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  2843  001FE6  C0DA  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  2844                           
  2845                           ;sort.c: 125: if(!sensor_outputs[1]){
  2846  001FEA  0100               	movlb	0	; () banked
  2847  001FEC  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2848  001FEE  0100               	movlb	0	; () banked
  2849  001FF0  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2850  001FF2  A4D8               	btfss	status,2,c
  2851  001FF4  D01C               	goto	l5135
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;sort.c: 126: LATAbits.LATA3 = 1;
  2855  001FF6  8689               	bsf	3977,3,c	;volatile
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;sort.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
  2859  001FF8  0E05               	movlw	5
  2860  001FFA  0100               	movlb	0	; () banked
  2861  001FFC  6F87               	movwf	(??_ID+1)& (0+255),b
  2862  001FFE  0E0F               	movlw	15
  2863  002000  0100               	movlb	0	; () banked
  2864  002002  6F86               	movwf	??_ID& (0+255),b
  2865  002004  0EF1               	movlw	241
  2866  002006                     u5137:
  2867  002006  2EE8               	decfsz	wreg,f,c
  2868  002008  D7FE               	bra	u5137
  2869  00200A  2F86               	decfsz	??_ID& (0+255),f,b
  2870  00200C  D7FC               	bra	u5137
  2871  00200E  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2872  002010  D7FA               	bra	u5137
  2873                           
  2874                           ;sort.c: 129: sensor_outputs[2] = PORTAbits.RA2;
  2875  002012  A480               	btfss	3968,2,c	;volatile
  2876  002014  D004               	goto	u3780
  2877  002016  0100               	movlb	0	; () banked
  2878  002018  6B86               	clrf	??_ID& (0+255),b
  2879  00201A  2B86               	incf	??_ID& (0+255),f,b
  2880  00201C  D002               	goto	u3788
  2881  00201E                     u3780:
  2882  00201E  0100               	movlb	0	; () banked
  2883  002020  6B86               	clrf	??_ID& (0+255),b
  2884  002022                     u3788:
  2885  002022  0100               	movlb	0	; () banked
  2886  002024  5186               	movf	??_ID& (0+255),w,b
  2887  002026  0100               	movlb	0	; () banked
  2888  002028  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  2889  00202A  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;sort.c: 130: LATAbits.LATA3 = 0;
  2893  00202C  9689               	bcf	3977,3,c	;volatile
  2894  00202E                     l5135:
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;sort.c: 131: }
  2898                           ;sort.c: 132: }
  2899                           ;sort.c: 135: if(!sensor_outputs[0]){
  2900  00202E  0100               	movlb	0	; () banked
  2901  002030  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2902  002032  0100               	movlb	0	; () banked
  2903  002034  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2904  002036  A4D8               	btfss	status,2,c
  2905  002038  D01E               	goto	l5153
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;sort.c: 136: if(!sensor_outputs[1]){
  2909  00203A  0100               	movlb	0	; () banked
  2910  00203C  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2911  00203E  0100               	movlb	0	; () banked
  2912  002040  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2913  002042  A4D8               	btfss	status,2,c
  2914  002044  D012               	goto	l5149
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;sort.c: 137: if(!sensor_outputs[2]){
  2918  002046  0100               	movlb	0	; () banked
  2919  002048  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  2920  00204A  0100               	movlb	0	; () banked
  2921  00204C  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  2922  00204E  A4D8               	btfss	status,2,c
  2923  002050  D006               	goto	l5145
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;sort.c: 138: count_pop_no_tab++;
  2927  002052  4A6A               	infsnz	_count_pop_no_tab,f,c
  2928  002054  2A6B               	incf	_count_pop_no_tab+1,f,c
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;sort.c: 139: cur_can = 0;
  2932  002056  0E00               	movlw	0
  2933  002058  6E6F               	movwf	_cur_can+1,c
  2934  00205A  0E00               	movlw	0
  2935  00205C  D011               	goto	L3
  2936  00205E                     l5145:
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;sort.c: 141: else{
  2940                           ;sort.c: 142: count_pop_w_tab++;
  2941  00205E  4A6C               	infsnz	_count_pop_w_tab,f,c
  2942  002060  2A6D               	incf	_count_pop_w_tab+1,f,c
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;sort.c: 143: cur_can = 1;
  2946  002062  0E00               	movlw	0
  2947  002064  6E6F               	movwf	_cur_can+1,c
  2948  002066  0E01               	movlw	1
  2949  002068  D00B               	goto	L3
  2950  00206A                     l5149:
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;sort.c: 146: else{
  2954                           ;sort.c: 147: count_can_w_lab++;
  2955  00206A  4A68               	infsnz	_count_can_w_lab,f,c
  2956  00206C  2A69               	incf	_count_can_w_lab+1,f,c
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;sort.c: 148: cur_can = 2;
  2960  00206E  0E00               	movlw	0
  2961  002070  6E6F               	movwf	_cur_can+1,c
  2962  002072  0E02               	movlw	2
  2963  002074  D005               	goto	L3
  2964  002076                     l5153:
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;sort.c: 151: else{
  2968                           ;sort.c: 152: count_can_no_lab++;
  2969  002076  4A66               	infsnz	_count_can_no_lab,f,c
  2970  002078  2A67               	incf	_count_can_no_lab+1,f,c
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;sort.c: 153: cur_can = 3;
  2974  00207A  0E00               	movlw	0
  2975  00207C  6E6F               	movwf	_cur_can+1,c
  2976  00207E  0E03               	movlw	3
  2977  002080                     L3:
  2978  002080  6E6E               	movwf	_cur_can,c
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;sort.c: 154: }
  2982                           ;sort.c: 156: LATCbits.LATC0 = 1;
  2983                           
  2984                           ; BSR set to: 0
  2985  002082  808B               	bsf	3979,0,c	;volatile
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;sort.c: 157: f_can_coming_to_distribution = 1;
  2989  002084  0E00               	movlw	0
  2990  002086  6E75               	movwf	_f_can_coming_to_distribution+1,c
  2991  002088  0E01               	movlw	1
  2992  00208A  6E74               	movwf	_f_can_coming_to_distribution,c
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;sort.c: 158: _delay((unsigned long)((500)*(32000000/4000.0)));
  2996  00208C  0E15               	movlw	21
  2997  00208E  0100               	movlb	0	; () banked
  2998  002090  6F87               	movwf	(??_ID+1)& (0+255),b
  2999  002092  0E4B               	movlw	75
  3000  002094  0100               	movlb	0	; () banked
  3001  002096  6F86               	movwf	??_ID& (0+255),b
  3002  002098  0EBE               	movlw	190
  3003  00209A                     u5147:
  3004  00209A  2EE8               	decfsz	wreg,f,c
  3005  00209C  D7FE               	bra	u5147
  3006  00209E  2F86               	decfsz	??_ID& (0+255),f,b
  3007  0020A0  D7FC               	bra	u5147
  3008  0020A2  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3009  0020A4  D7FA               	bra	u5147
  3010  0020A6  F000               	nop	
  3011                           
  3012                           ;sort.c: 159: LATCbits.LATC0 = 0;
  3013  0020A8  908B               	bcf	3979,0,c	;volatile
  3014                           
  3015                           ;sort.c: 161: f_can_coming_to_ID = 0;
  3016  0020AA  0E00               	movlw	0
  3017  0020AC  0100               	movlb	0	; () banked
  3018  0020AE  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  3019  0020B0  0E00               	movlw	0
  3020  0020B2  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  3021  0020B4  0012               	return	
  3022  0020B6                     __end_of_ID:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           prodh	equ	0xFF4
  3029                           prodl	equ	0xFF3
  3030                           postinc0	equ	0xFEE
  3031                           wreg	equ	0xFE8
  3032                           postdec1	equ	0xFE5
  3033                           fsr1l	equ	0xFE1
  3034                           indf2	equ	0xFDF
  3035                           postinc2	equ	0xFDE
  3036                           postdec2	equ	0xFDD
  3037                           fsr2h	equ	0xFDA
  3038                           fsr2l	equ	0xFD9
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function _readMAG *****************
  3042 ;; Defined at:
  3043 ;;		line 29 in file "ADCFunctionality.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  res             2    4[BANK0 ] int 
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, status,2, status,0, cstack
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;Total ram usage:        4 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    8
  3064 ;; This function calls:
  3065 ;;		_readADC
  3066 ;; This function is called by:
  3067 ;;		_ID
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text8
  3072  002C62                     __ptext8:
  3073                           	opt stack 0
  3074  002C62                     _readMAG:
  3075                           	opt stack 20
  3076                           
  3077                           ;ADCFunctionality.c: 30: readADC(1);
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;incstack = 0
  3081  002C62  0E01               	movlw	1
  3082  002C64  EC27  F018         	call	_readADC
  3083                           
  3084                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  3085  002C68  50C3               	movf	4035,w,c	;volatile
  3086  002C6A  CFC4 F082          	movff	4036,??_readMAG	;volatile
  3087  002C6E  0100               	movlb	0	; () banked
  3088  002C70  6B83               	clrf	(??_readMAG+1)& (0+255),b
  3089  002C72  C082  F083         	movff	??_readMAG,??_readMAG+1
  3090  002C76  0100               	movlb	0	; () banked
  3091  002C78  6B82               	clrf	??_readMAG& (0+255),b
  3092  002C7A  0100               	movlb	0	; () banked
  3093  002C7C  1182               	iorwf	??_readMAG& (0+255),w,b
  3094  002C7E  0100               	movlb	0	; () banked
  3095  002C80  6F84               	movwf	readMAG@res& (0+255),b
  3096  002C82  0100               	movlb	0	; () banked
  3097  002C84  5183               	movf	(??_readMAG+1)& (0+255),w,b
  3098  002C86  0100               	movlb	0	; () banked
  3099  002C88  6F85               	movwf	(readMAG@res+1)& (0+255),b
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;ADCFunctionality.c: 32: MAG_signal = (res < 255) ? 1 : 0;
  3103  002C8A  0100               	movlb	0	; () banked
  3104  002C8C  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  3105  002C8E  D007               	goto	u3441
  3106  002C90  0100               	movlb	0	; () banked
  3107  002C92  5185               	movf	(readMAG@res+1)& (0+255),w,b
  3108  002C94  E106               	bnz	u3440
  3109  002C96  0100               	movlb	0	; () banked
  3110  002C98  2984               	incf	readMAG@res& (0+255),w,b
  3111  002C9A  B0D8               	btfsc	status,0,c
  3112  002C9C  D002               	goto	u3440
  3113  002C9E                     u3441:
  3114  002C9E  0E01               	movlw	1
  3115  002CA0  D001               	goto	u3450
  3116  002CA2                     u3440:
  3117  002CA2  0E00               	movlw	0
  3118  002CA4                     u3450:
  3119  002CA4  0100               	movlb	0	; () banked
  3120  002CA6  6FD9               	movwf	_MAG_signal& (0+255),b
  3121  002CA8  6BDA               	clrf	(_MAG_signal+1)& (0+255),b
  3122                           
  3123                           ; BSR set to: 0
  3124  002CAA  0012               	return		;funcret
  3125  002CAC                     __end_of_readMAG:
  3126                           	opt stack 0
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           prodh	equ	0xFF4
  3132                           prodl	equ	0xFF3
  3133                           postinc0	equ	0xFEE
  3134                           wreg	equ	0xFE8
  3135                           postdec1	equ	0xFE5
  3136                           fsr1l	equ	0xFE1
  3137                           indf2	equ	0xFDF
  3138                           postinc2	equ	0xFDE
  3139                           postdec2	equ	0xFDD
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _readADC *****************
  3145 ;; Defined at:
  3146 ;;		line 15 in file "ADCFunctionality.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  channel         1    wreg     unsigned char 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  channel         1    1[BANK0 ] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;Total ram usage:        2 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    7
  3167 ;; This function calls:
  3168 ;;		Nothing
  3169 ;; This function is called by:
  3170 ;;		_readMAG
  3171 ;;		_readIR
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text9
  3176  00304E                     __ptext9:
  3177                           	opt stack 0
  3178  00304E                     _readADC:
  3179                           	opt stack 20
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;incstack = 0
  3183                           ;readADC@channel stored from wreg
  3184  00304E  0100               	movlb	0	; () banked
  3185  003050  6F81               	movwf	readADC@channel& (0+255),b
  3186                           
  3187                           ;ADCFunctionality.c: 17: ADCON0 = ((channel <<2));
  3188  003052  0100               	movlb	0	; () banked
  3189  003054  4581               	rlncf	readADC@channel& (0+255),w,b
  3190  003056  46E8               	rlncf	wreg,f,c
  3191  003058  0BFC               	andlw	252
  3192  00305A  6EC2               	movwf	4034,c	;volatile
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;ADCFunctionality.c: 18: ADON = 1;
  3196  00305C  80C2               	bsf	4034,0,c	;volatile
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  3200  00305E  82C2               	bsf	4034,1,c	;volatile
  3201                           
  3202                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  3203  003060  D009               	goto	l4209
  3204  003062                     l4207:
  3205  003062  0E34               	movlw	52
  3206  003064  0100               	movlb	0	; () banked
  3207  003066  6F80               	movwf	??_readADC& (0+255),b
  3208  003068  0EF1               	movlw	241
  3209  00306A                     u5157:
  3210  00306A  2EE8               	decfsz	wreg,f,c
  3211  00306C  D7FE               	bra	u5157
  3212  00306E  2F80               	decfsz	??_readADC& (0+255),f,b
  3213  003070  D7FC               	bra	u5157
  3214  003072  D000               	nop2	
  3215  003074                     l4209:
  3216  003074  A2C2               	btfss	4034,1,c	;volatile
  3217  003076  0012               	return	
  3218  003078  D7F4               	goto	l4207
  3219  00307A                     __end_of_readADC:
  3220                           	opt stack 0
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodh	equ	0xFF4
  3226                           prodl	equ	0xFF3
  3227                           postinc0	equ	0xFEE
  3228                           wreg	equ	0xFE8
  3229                           postdec1	equ	0xFE5
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _Distribution *****************
  3239 ;; Defined at:
  3240 ;;		line 164 in file "sort.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;		None
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;		None
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, status,2, status,0, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;Total ram usage:        2 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    8
  3261 ;; This function calls:
  3262 ;;		_updateServoPosition
  3263 ;; This function is called by:
  3264 ;;		_sort
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text10
  3269  001E5C                     __ptext10:
  3270                           	opt stack 0
  3271  001E5C                     _Distribution:
  3272                           	opt stack 21
  3273                           
  3274                           ;sort.c: 165: if(f_can_coming_to_distribution){
  3275                           
  3276                           ;incstack = 0
  3277  001E5C  5074               	movf	_f_can_coming_to_distribution,w,c
  3278  001E5E  1075               	iorwf	_f_can_coming_to_distribution+1,w,c
  3279  001E60  B4D8               	btfsc	status,2,c
  3280  001E62  0012               	return	
  3281  001E64  D034               	goto	l5181
  3282  001E66                     l5171:
  3283                           
  3284                           ;sort.c: 170: updateServoPosition(1000, 1);
  3285  001E66  0E03               	movlw	3
  3286  001E68  0100               	movlb	0	; () banked
  3287  001E6A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3288  001E6C  0EE8               	movlw	232
  3289  001E6E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3290  001E70  0E00               	movlw	0
  3291  001E72  0100               	movlb	0	; () banked
  3292  001E74  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3293  001E76  0E01               	movlw	1
  3294  001E78  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3295  001E7A  EC24  F014         	call	_updateServoPosition	;wreg free
  3296                           
  3297                           ;sort.c: 171: break;
  3298  001E7E  D03E               	goto	l5183
  3299  001E80                     l5173:
  3300                           
  3301                           ;sort.c: 173: updateServoPosition(1333, 1);
  3302  001E80  0E05               	movlw	5
  3303  001E82  0100               	movlb	0	; () banked
  3304  001E84  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3305  001E86  0E35               	movlw	53
  3306  001E88  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3307  001E8A  0E00               	movlw	0
  3308  001E8C  0100               	movlb	0	; () banked
  3309  001E8E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3310  001E90  0E01               	movlw	1
  3311  001E92  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3312  001E94  EC24  F014         	call	_updateServoPosition	;wreg free
  3313                           
  3314                           ;sort.c: 174: break;
  3315  001E98  D031               	goto	l5183
  3316  001E9A                     l5175:
  3317                           
  3318                           ;sort.c: 176: updateServoPosition(1666, 1);
  3319  001E9A  0E06               	movlw	6
  3320  001E9C  0100               	movlb	0	; () banked
  3321  001E9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3322  001EA0  0E82               	movlw	130
  3323  001EA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3324  001EA4  0E00               	movlw	0
  3325  001EA6  0100               	movlb	0	; () banked
  3326  001EA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3327  001EAA  0E01               	movlw	1
  3328  001EAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3329  001EAE  EC24  F014         	call	_updateServoPosition	;wreg free
  3330                           
  3331                           ;sort.c: 177: break;
  3332  001EB2  D024               	goto	l5183
  3333  001EB4                     l5177:
  3334                           
  3335                           ;sort.c: 179: updateServoPosition(2000, 1);
  3336  001EB4  0E07               	movlw	7
  3337  001EB6  0100               	movlb	0	; () banked
  3338  001EB8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3339  001EBA  0ED0               	movlw	208
  3340  001EBC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3341  001EBE  0E00               	movlw	0
  3342  001EC0  0100               	movlb	0	; () banked
  3343  001EC2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3344  001EC4  0E01               	movlw	1
  3345  001EC6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3346  001EC8  EC24  F014         	call	_updateServoPosition	;wreg free
  3347                           
  3348                           ;sort.c: 183: }
  3349                           
  3350                           ;sort.c: 182: break;
  3351                           
  3352                           ;sort.c: 181: default:
  3353                           
  3354                           ;sort.c: 180: break;
  3355  001ECC  D017               	goto	l5183
  3356  001ECE                     l5181:
  3357  001ECE  C06E  F088         	movff	_cur_can,??_Distribution
  3358  001ED2  C06F  F089         	movff	_cur_can+1,??_Distribution+1
  3359                           
  3360                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3361                           ; Switch size 1, requested type "space"
  3362                           ; Number of cases is 1, Range of values is 0 to 0
  3363                           ; switch strategies available:
  3364                           ; Name         Instructions Cycles
  3365                           ; simple_byte            4     3 (average)
  3366                           ;	Chosen strategy is simple_byte
  3367  001ED6  0100               	movlb	0	; () banked
  3368  001ED8  5189               	movf	(??_Distribution+1)& (0+255),w,b
  3369  001EDA  0A00               	xorlw	0	; case 0
  3370  001EDC  A4D8               	btfss	status,2,c
  3371  001EDE  D00E               	goto	l5183
  3372                           
  3373                           ; BSR set to: 0
  3374                           ; Switch size 1, requested type "space"
  3375                           ; Number of cases is 4, Range of values is 0 to 3
  3376                           ; switch strategies available:
  3377                           ; Name         Instructions Cycles
  3378                           ; simple_byte           13     7 (average)
  3379                           ;	Chosen strategy is simple_byte
  3380  001EE0  0100               	movlb	0	; () banked
  3381  001EE2  5188               	movf	??_Distribution& (0+255),w,b
  3382  001EE4  0A00               	xorlw	0	; case 0
  3383  001EE6  B4D8               	btfsc	status,2,c
  3384  001EE8  D7BE               	goto	l5171
  3385  001EEA  0A01               	xorlw	1	; case 1
  3386  001EEC  B4D8               	btfsc	status,2,c
  3387  001EEE  D7C8               	goto	l5173
  3388  001EF0  0A03               	xorlw	3	; case 2
  3389  001EF2  B4D8               	btfsc	status,2,c
  3390  001EF4  D7D2               	goto	l5175
  3391  001EF6  0A01               	xorlw	1	; case 3
  3392  001EF8  B4D8               	btfsc	status,2,c
  3393  001EFA  D7DC               	goto	l5177
  3394  001EFC                     l5183:
  3395                           
  3396                           ;sort.c: 184: _delay((unsigned long)((500)*(32000000/4000.0)));
  3397  001EFC  0E15               	movlw	21
  3398  001EFE  0100               	movlb	0	; () banked
  3399  001F00  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3400  001F02  0E4B               	movlw	75
  3401  001F04  0100               	movlb	0	; () banked
  3402  001F06  6F88               	movwf	??_Distribution& (0+255),b
  3403  001F08  0EBE               	movlw	190
  3404  001F0A                     u5167:
  3405  001F0A  2EE8               	decfsz	wreg,f,c
  3406  001F0C  D7FE               	bra	u5167
  3407  001F0E  2F88               	decfsz	??_Distribution& (0+255),f,b
  3408  001F10  D7FC               	bra	u5167
  3409  001F12  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3410  001F14  D7FA               	bra	u5167
  3411  001F16  F000               	nop	
  3412                           
  3413                           ;sort.c: 187: updateServoPosition(1500, 3);
  3414  001F18  0E05               	movlw	5
  3415  001F1A  0100               	movlb	0	; () banked
  3416  001F1C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3417  001F1E  0EDC               	movlw	220
  3418  001F20  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3419  001F22  0E00               	movlw	0
  3420  001F24  0100               	movlb	0	; () banked
  3421  001F26  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3422  001F28  0E03               	movlw	3
  3423  001F2A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3424  001F2C  EC24  F014         	call	_updateServoPosition	;wreg free
  3425                           
  3426                           ;sort.c: 188: _delay((unsigned long)((500)*(32000000/4000.0)));
  3427  001F30  0E15               	movlw	21
  3428  001F32  0100               	movlb	0	; () banked
  3429  001F34  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3430  001F36  0E4B               	movlw	75
  3431  001F38  0100               	movlb	0	; () banked
  3432  001F3A  6F88               	movwf	??_Distribution& (0+255),b
  3433  001F3C  0EBE               	movlw	190
  3434  001F3E                     u5177:
  3435  001F3E  2EE8               	decfsz	wreg,f,c
  3436  001F40  D7FE               	bra	u5177
  3437  001F42  2F88               	decfsz	??_Distribution& (0+255),f,b
  3438  001F44  D7FC               	bra	u5177
  3439  001F46  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3440  001F48  D7FA               	bra	u5177
  3441  001F4A  F000               	nop	
  3442                           
  3443                           ;sort.c: 191: updateServoPosition(1500, 1);
  3444  001F4C  0E05               	movlw	5
  3445  001F4E  0100               	movlb	0	; () banked
  3446  001F50  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3447  001F52  0EDC               	movlw	220
  3448  001F54  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3449  001F56  0E00               	movlw	0
  3450  001F58  0100               	movlb	0	; () banked
  3451  001F5A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3452  001F5C  0E01               	movlw	1
  3453  001F5E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3454  001F60  EC24  F014         	call	_updateServoPosition	;wreg free
  3455                           
  3456                           ;sort.c: 192: updateServoPosition(1000, 3);
  3457  001F64  0E03               	movlw	3
  3458  001F66  0100               	movlb	0	; () banked
  3459  001F68  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3460  001F6A  0EE8               	movlw	232
  3461  001F6C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3462  001F6E  0E00               	movlw	0
  3463  001F70  0100               	movlb	0	; () banked
  3464  001F72  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3465  001F74  0E03               	movlw	3
  3466  001F76  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3467  001F78  EC24  F014         	call	_updateServoPosition	;wreg free
  3468                           
  3469                           ;sort.c: 193: f_can_coming_to_distribution = 0;
  3470  001F7C  0E00               	movlw	0
  3471  001F7E  6E75               	movwf	_f_can_coming_to_distribution+1,c
  3472  001F80  0E00               	movlw	0
  3473  001F82  6E74               	movwf	_f_can_coming_to_distribution,c
  3474                           
  3475                           ;sort.c: 194: f_can_distributed = 1;
  3476  001F84  0E00               	movlw	0
  3477  001F86  0101               	movlb	1	; () banked
  3478  001F88  6F25               	movwf	(_f_can_distributed+1)& (0+255),b
  3479  001F8A  0E01               	movlw	1
  3480  001F8C  6F24               	movwf	_f_can_distributed& (0+255),b
  3481  001F8E  0012               	return	
  3482  001F90                     __end_of_Distribution:
  3483                           	opt stack 0
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           postinc0	equ	0xFEE
  3491                           wreg	equ	0xFE8
  3492                           postdec1	equ	0xFE5
  3493                           fsr1l	equ	0xFE1
  3494                           indf2	equ	0xFDF
  3495                           postinc2	equ	0xFDE
  3496                           postdec2	equ	0xFDD
  3497                           fsr2h	equ	0xFDA
  3498                           fsr2l	equ	0xFD9
  3499                           status	equ	0xFD8
  3500                           
  3501 ;; *************** function _updateServoPosition *****************
  3502 ;; Defined at:
  3503 ;;		line 285 in file "sort.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;  time_us         2    0[BANK0 ] int 
  3506 ;;  timer           2    2[BANK0 ] int 
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  my_time         2    6[BANK0 ] unsigned int 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  1    wreg      void 
  3511 ;; Registers used:
  3512 ;;		wreg, status,2, status,0
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3518 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;Total ram usage:        8 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:    7
  3525 ;; This function calls:
  3526 ;;		Nothing
  3527 ;; This function is called by:
  3528 ;;		_Distribution
  3529 ;;		_initServos
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text11
  3534  002848                     __ptext11:
  3535                           	opt stack 0
  3536  002848                     _updateServoPosition:
  3537                           	opt stack 20
  3538                           
  3539                           ;sort.c: 286: unsigned int my_time = 65535 - time_us;
  3540                           
  3541                           ;incstack = 0
  3542  002848  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
  3543  00284C  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
  3544  002850  0100               	movlb	0	; () banked
  3545  002852  1F84               	comf	??_updateServoPosition& (0+255),f,b
  3546  002854  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
  3547  002856  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
  3548  002858  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
  3549  00285A  0EFF               	movlw	255
  3550  00285C  0100               	movlb	0	; () banked
  3551  00285E  2584               	addwf	??_updateServoPosition& (0+255),w,b
  3552  002860  0100               	movlb	0	; () banked
  3553  002862  6F86               	movwf	updateServoPosition@my_time& (0+255),b
  3554  002864  0EFF               	movlw	255
  3555  002866  0100               	movlb	0	; () banked
  3556  002868  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
  3557  00286A  0100               	movlb	0	; () banked
  3558  00286C  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
  3559                           
  3560                           ;sort.c: 287: switch(timer){
  3561  00286E  D015               	goto	l4375
  3562  002870                     l4373:
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;sort.c: 289: servoTimes[0] = my_time >> 8;
  3566  002870  0100               	movlb	0	; () banked
  3567  002872  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3568  002874  0101               	movlb	1	; () banked
  3569  002876  6F1C               	movwf	_servoTimes& (0+255),b
  3570  002878  6B1D               	clrf	(_servoTimes+1)& (0+255),b
  3571                           
  3572                           ;sort.c: 290: servoTimes[1] = my_time & 0xFF;
  3573  00287A  0100               	movlb	0	; () banked
  3574  00287C  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3575  00287E  0101               	movlb	1	; () banked
  3576  002880  6F1E               	movwf	(_servoTimes+2)& (0+255),b
  3577  002882  6B1F               	clrf	(_servoTimes+3)& (0+255),b
  3578  002884                     l783:
  3579                           
  3580                           ;sort.c: 292: servoTimes[2] = my_time >> 8;
  3581  002884  0100               	movlb	0	; () banked
  3582  002886  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3583  002888  0101               	movlb	1	; () banked
  3584  00288A  6F20               	movwf	(_servoTimes+4)& (0+255),b
  3585  00288C  6B21               	clrf	(_servoTimes+5)& (0+255),b
  3586                           
  3587                           ;sort.c: 293: servoTimes[3] = my_time & 0xFF;
  3588  00288E  0100               	movlb	0	; () banked
  3589  002890  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3590  002892  0101               	movlb	1	; () banked
  3591  002894  6F22               	movwf	(_servoTimes+6)& (0+255),b
  3592  002896  6B23               	clrf	(_servoTimes+7)& (0+255),b
  3593                           
  3594                           ;sort.c: 294: }
  3595  002898  0012               	return	
  3596  00289A                     l4375:
  3597  00289A  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
  3598  00289E  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
  3599                           
  3600                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3601                           ; Switch size 1, requested type "space"
  3602                           ; Number of cases is 1, Range of values is 0 to 0
  3603                           ; switch strategies available:
  3604                           ; Name         Instructions Cycles
  3605                           ; simple_byte            4     3 (average)
  3606                           ;	Chosen strategy is simple_byte
  3607  0028A2  0100               	movlb	0	; () banked
  3608  0028A4  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
  3609  0028A6  0A00               	xorlw	0	; case 0
  3610  0028A8  A4D8               	btfss	status,2,c
  3611  0028AA  0012               	return	
  3612                           
  3613                           ; BSR set to: 0
  3614                           ; Switch size 1, requested type "space"
  3615                           ; Number of cases is 2, Range of values is 1 to 3
  3616                           ; switch strategies available:
  3617                           ; Name         Instructions Cycles
  3618                           ; simple_byte            7     4 (average)
  3619                           ;	Chosen strategy is simple_byte
  3620  0028AC  0100               	movlb	0	; () banked
  3621  0028AE  5184               	movf	??_updateServoPosition& (0+255),w,b
  3622  0028B0  0A01               	xorlw	1	; case 1
  3623  0028B2  B4D8               	btfsc	status,2,c
  3624  0028B4  D7DD               	goto	l4373
  3625  0028B6  0A02               	xorlw	2	; case 3
  3626  0028B8  A4D8               	btfss	status,2,c
  3627  0028BA  0012               	return	
  3628  0028BC  D7E3               	goto	l783
  3629  0028BE                     __end_of_updateServoPosition:
  3630                           	opt stack 0
  3631                           tblptru	equ	0xFF8
  3632                           tblptrh	equ	0xFF7
  3633                           tblptrl	equ	0xFF6
  3634                           tablat	equ	0xFF5
  3635                           prodh	equ	0xFF4
  3636                           prodl	equ	0xFF3
  3637                           postinc0	equ	0xFEE
  3638                           wreg	equ	0xFE8
  3639                           postdec1	equ	0xFE5
  3640                           fsr1l	equ	0xFE1
  3641                           indf2	equ	0xFDF
  3642                           postinc2	equ	0xFDE
  3643                           postdec2	equ	0xFDD
  3644                           fsr2h	equ	0xFDA
  3645                           fsr2l	equ	0xFD9
  3646                           status	equ	0xFD8
  3647                           
  3648 ;; *************** function _machineConfig *****************
  3649 ;; Defined at:
  3650 ;;		line 15 in file "MachineConfig.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      void 
  3657 ;; Registers used:
  3658 ;;		wreg, status,2
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;Total ram usage:        0 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    7
  3671 ;; This function calls:
  3672 ;;		Nothing
  3673 ;; This function is called by:
  3674 ;;		_main
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           	psect	text12
  3679  002AC8                     __ptext12:
  3680                           	opt stack 0
  3681  002AC8                     _machineConfig:
  3682                           	opt stack 23
  3683                           
  3684                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  3685                           
  3686                           ;incstack = 0
  3687  002AC8  0EF0               	movlw	240
  3688  002ACA  6ED3               	movwf	4051,c	;volatile
  3689                           
  3690                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  3691  002ACC  8C9B               	bsf	3995,6,c	;volatile
  3692                           
  3693                           ;MachineConfig.c: 21: ADCON0 = 0x00;
  3694  002ACE  0E00               	movlw	0
  3695  002AD0  6EC2               	movwf	4034,c	;volatile
  3696                           
  3697                           ;MachineConfig.c: 22: ADCON1 = 0x0D;
  3698  002AD2  0E0D               	movlw	13
  3699  002AD4  6EC1               	movwf	4033,c	;volatile
  3700                           
  3701                           ;MachineConfig.c: 25: VCFG1 = 0;
  3702  002AD6  9AC1               	bcf	4033,5,c	;volatile
  3703                           
  3704                           ;MachineConfig.c: 26: VCFG0 = 0;
  3705  002AD8  98C1               	bcf	4033,4,c	;volatile
  3706                           
  3707                           ;MachineConfig.c: 27: CVRCON = 0x00;
  3708  002ADA  0E00               	movlw	0
  3709  002ADC  6EB5               	movwf	4021,c	;volatile
  3710                           
  3711                           ;MachineConfig.c: 28: CMCONbits.CIS = 0;
  3712  002ADE  96B4               	bcf	4020,3,c	;volatile
  3713                           
  3714                           ;MachineConfig.c: 29: ADFM = 1;
  3715  002AE0  8EC0               	bsf	4032,7,c	;volatile
  3716                           
  3717                           ;MachineConfig.c: 30: nRBPU = 0;
  3718  002AE2  9EF1               	bcf	intcon2,7,c	;volatile
  3719                           
  3720                           ;MachineConfig.c: 34: TRISA = 0b01000111;
  3721  002AE4  0E47               	movlw	71
  3722  002AE6  6E92               	movwf	3986,c	;volatile
  3723                           
  3724                           ;MachineConfig.c: 36: TRISB = 0b11110010;
  3725  002AE8  0EF2               	movlw	242
  3726  002AEA  6E93               	movwf	3987,c	;volatile
  3727                           
  3728                           ;MachineConfig.c: 39: TRISC = 0x00;
  3729  002AEC  0E00               	movlw	0
  3730  002AEE  6E94               	movwf	3988,c	;volatile
  3731                           
  3732                           ;MachineConfig.c: 43: TRISD = 0x00;
  3733  002AF0  0E00               	movlw	0
  3734  002AF2  6E95               	movwf	3989,c	;volatile
  3735                           
  3736                           ;MachineConfig.c: 46: TRISE = 0x00;
  3737  002AF4  0E00               	movlw	0
  3738  002AF6  6E96               	movwf	3990,c	;volatile
  3739                           
  3740                           ;MachineConfig.c: 49: LATA = 0x00;
  3741  002AF8  0E00               	movlw	0
  3742  002AFA  6E89               	movwf	3977,c	;volatile
  3743                           
  3744                           ;MachineConfig.c: 50: LATB = 0x00;
  3745  002AFC  0E00               	movlw	0
  3746  002AFE  6E8A               	movwf	3978,c	;volatile
  3747                           
  3748                           ;MachineConfig.c: 51: LATC = 0x00;
  3749  002B00  0E00               	movlw	0
  3750  002B02  6E8B               	movwf	3979,c	;volatile
  3751                           
  3752                           ;MachineConfig.c: 52: LATD = 0x00;
  3753  002B04  0E00               	movlw	0
  3754  002B06  6E8C               	movwf	3980,c	;volatile
  3755                           
  3756                           ;MachineConfig.c: 53: LATE = 0x00;
  3757  002B08  0E00               	movlw	0
  3758  002B0A  6E8D               	movwf	3981,c	;volatile
  3759                           
  3760                           ;MachineConfig.c: 56: INT1IE = 1;
  3761  002B0C  86F0               	bsf	intcon3,3,c	;volatile
  3762                           
  3763                           ;MachineConfig.c: 58: TMR0IE = 1;
  3764  002B0E  8AF2               	bsf	intcon,5,c	;volatile
  3765                           
  3766                           ;MachineConfig.c: 59: TMR1IE = 1;
  3767  002B10  809D               	bsf	3997,0,c	;volatile
  3768                           
  3769                           ;MachineConfig.c: 60: T1CON = 0b10110000;
  3770  002B12  0EB0               	movlw	176
  3771  002B14  6ECD               	movwf	4045,c	;volatile
  3772                           
  3773                           ;MachineConfig.c: 61: TMR2IE = 1;
  3774  002B16  829D               	bsf	3997,1,c	;volatile
  3775                           
  3776                           ;MachineConfig.c: 62: TMR3IE = 1;
  3777  002B18  82A0               	bsf	4000,1,c	;volatile
  3778                           
  3779                           ;MachineConfig.c: 63: PEIE = 1;
  3780  002B1A  8CF2               	bsf	intcon,6,c	;volatile
  3781                           
  3782                           ;MachineConfig.c: 65: ADIE = 1;
  3783  002B1C  8C9D               	bsf	3997,6,c	;volatile
  3784                           
  3785                           ;MachineConfig.c: 66: (INTCONbits.GIE = 0);
  3786  002B1E  9EF2               	bcf	intcon,7,c	;volatile
  3787  002B20  0012               	return		;funcret
  3788  002B22                     __end_of_machineConfig:
  3789                           	opt stack 0
  3790                           tblptru	equ	0xFF8
  3791                           tblptrh	equ	0xFF7
  3792                           tblptrl	equ	0xFF6
  3793                           tablat	equ	0xFF5
  3794                           prodh	equ	0xFF4
  3795                           prodl	equ	0xFF3
  3796                           intcon	equ	0xFF2
  3797                           intcon2	equ	0xFF1
  3798                           intcon3	equ	0xFF0
  3799                           postinc0	equ	0xFEE
  3800                           wreg	equ	0xFE8
  3801                           postdec1	equ	0xFE5
  3802                           fsr1l	equ	0xFE1
  3803                           indf2	equ	0xFDF
  3804                           postinc2	equ	0xFDE
  3805                           postdec2	equ	0xFDD
  3806                           fsr2h	equ	0xFDA
  3807                           fsr2l	equ	0xFD9
  3808                           status	equ	0xFD8
  3809                           
  3810 ;; *************** function _logRun *****************
  3811 ;; Defined at:
  3812 ;;		line 84 in file "EEPROM.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;		None
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;  byte_i          1   53[BANK0 ] unsigned char 
  3817 ;;  i               2   55[BANK0 ] int 
  3818 ;;  num             1   49[BANK0 ] unsigned char 
  3819 ;;  addr            2   57[BANK0 ] unsigned short 
  3820 ;;  byte11          1   54[BANK0 ] unsigned char 
  3821 ;;  byte3           1   52[BANK0 ] unsigned char 
  3822 ;;  byte2           1   51[BANK0 ] unsigned char 
  3823 ;;  byte1           1   50[BANK0 ] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;Total ram usage:       10 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:   11
  3840 ;; This function calls:
  3841 ;;		_EEPROM_read
  3842 ;;		_EEPROM_write
  3843 ;; This function is called by:
  3844 ;;		_main
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text13
  3849  001D20                     __ptext13:
  3850                           	opt stack 0
  3851  001D20                     _logRun:
  3852                           	opt stack 19
  3853                           
  3854                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  3855                           
  3856                           ;incstack = 0
  3857  001D20  0E00               	movlw	0
  3858  001D22  0100               	movlb	0	; () banked
  3859  001D24  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3860  001D26  0E00               	movlw	0
  3861  001D28  6F80               	movwf	EEPROM_read@address& (0+255),b
  3862  001D2A  ECF7  F018         	call	_EEPROM_read	;wreg free
  3863  001D2E  0100               	movlb	0	; () banked
  3864  001D30  6FFC               	movwf	_sel& (0+255),b
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  3868  001D32  0100               	movlb	0	; () banked
  3869  001D34  51FC               	movf	_sel& (0+255),w,b
  3870  001D36  0D0B               	mullw	11
  3871  001D38  0E01               	movlw	1
  3872  001D3A  24F3               	addwf	prodl,w,c
  3873  001D3C  0100               	movlb	0	; () banked
  3874  001D3E  6FB9               	movwf	logRun@addr& (0+255),b
  3875  001D40  0E00               	movlw	0
  3876  001D42  20F4               	addwfc	prodh,w,c
  3877  001D44  0100               	movlb	0	; () banked
  3878  001D46  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;EEPROM.c: 101: if (sel < 3){
  3882  001D48  0E03               	movlw	3
  3883  001D4A  0100               	movlb	0	; () banked
  3884  001D4C  61FC               	cpfslt	_sel& (0+255),b
  3885  001D4E  D00E               	goto	l5943
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;EEPROM.c: 102: unsigned char num = sel+1;
  3889  001D50  0100               	movlb	0	; () banked
  3890  001D52  29FC               	incf	_sel& (0+255),w,b
  3891  001D54  0100               	movlb	0	; () banked
  3892  001D56  6FB1               	movwf	logRun@num& (0+255),b
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;EEPROM.c: 103: EEPROM_write(0, num);
  3896  001D58  0E00               	movlw	0
  3897  001D5A  0100               	movlb	0	; () banked
  3898  001D5C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  3899  001D5E  0E00               	movlw	0
  3900  001D60  6FAB               	movwf	EEPROM_write@address& (0+255),b
  3901  001D62  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  3902  001D66  ECE8  F010         	call	_EEPROM_write	;wreg free
  3903                           
  3904                           ;EEPROM.c: 104: }
  3905  001D6A  D00A               	goto	l5945
  3906  001D6C                     l5943:
  3907                           
  3908                           ;EEPROM.c: 105: else{
  3909                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  3910  001D6C  0E00               	movlw	0
  3911  001D6E  0100               	movlb	0	; () banked
  3912  001D70  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  3913  001D72  0E00               	movlw	0
  3914  001D74  6FAB               	movwf	EEPROM_write@address& (0+255),b
  3915  001D76  0E00               	movlw	0
  3916  001D78  0100               	movlb	0	; () banked
  3917  001D7A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  3918  001D7C  ECE8  F010         	call	_EEPROM_write	;wreg free
  3919  001D80                     l5945:
  3920                           
  3921                           ;EEPROM.c: 107: }
  3922                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  3923  001D80  0100               	movlb	0	; () banked
  3924  001D82  51FD               	movf	_count_total& (0+255),w,b
  3925  001D84  0980               	iorlw	128
  3926  001D86  0100               	movlb	0	; () banked
  3927  001D88  6FB2               	movwf	logRun@byte1& (0+255),b
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  3931  001D8A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  3932  001D8E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  3933  001D92  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  3934  001D96  ECE8  F010         	call	_EEPROM_write	;wreg free
  3935                           
  3936                           ;EEPROM.c: 112: addr++;
  3937  001D9A  0100               	movlb	0	; () banked
  3938  001D9C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  3939  001D9E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  3943  001DA0  386A               	swapf	_count_pop_no_tab,w,c
  3944  001DA2  0BF0               	andlw	240
  3945  001DA4  106C               	iorwf	_count_pop_w_tab,w,c
  3946  001DA6  0100               	movlb	0	; () banked
  3947  001DA8  6FB3               	movwf	logRun@byte2& (0+255),b
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  3951  001DAA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  3952  001DAE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  3953  001DB2  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  3954  001DB6  ECE8  F010         	call	_EEPROM_write	;wreg free
  3955                           
  3956                           ;EEPROM.c: 117: addr++;
  3957  001DBA  0100               	movlb	0	; () banked
  3958  001DBC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  3959  001DBE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  3963  001DC0  3868               	swapf	_count_can_w_lab,w,c
  3964  001DC2  0BF0               	andlw	240
  3965  001DC4  1066               	iorwf	_count_can_no_lab,w,c
  3966  001DC6  0100               	movlb	0	; () banked
  3967  001DC8  6FB4               	movwf	logRun@byte3& (0+255),b
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  3971  001DCA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  3972  001DCE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  3973  001DD2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  3974  001DD6  ECE8  F010         	call	_EEPROM_write	;wreg free
  3975                           
  3976                           ;EEPROM.c: 120: addr++;
  3977  001DDA  0100               	movlb	0	; () banked
  3978  001DDC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  3979  001DDE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  3983  001DE0  0E00               	movlw	0
  3984  001DE2  0100               	movlb	0	; () banked
  3985  001DE4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  3986  001DE6  0E00               	movlw	0
  3987  001DE8  6FB7               	movwf	logRun@i& (0+255),b
  3988                           
  3989                           ; BSR set to: 0
  3990  001DEA  0100               	movlb	0	; () banked
  3991  001DEC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  3992  001DEE  D008               	goto	l5969
  3993  001DF0  0100               	movlb	0	; () banked
  3994  001DF2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  3995  001DF4  E128               	bnz	l931
  3996  001DF6  0E07               	movlw	7
  3997  001DF8  0100               	movlb	0	; () banked
  3998  001DFA  5DB7               	subwf	logRun@i& (0+255),w,b
  3999  001DFC  B0D8               	btfsc	status,0,c
  4000  001DFE  D023               	goto	l931
  4001  001E00                     l5969:
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4005  001E00  90D8               	bcf	status,0,c
  4006  001E02  0100               	movlb	0	; () banked
  4007  001E04  35B7               	rlcf	logRun@i& (0+255),w,b
  4008  001E06  6ED9               	movwf	fsr2l,c
  4009  001E08  0100               	movlb	0	; () banked
  4010  001E0A  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4011  001E0C  6EDA               	movwf	fsr2h,c
  4012  001E0E  0E0E               	movlw	low _startTime
  4013  001E10  26D9               	addwf	fsr2l,f,c
  4014  001E12  0E01               	movlw	high _startTime
  4015  001E14  22DA               	addwfc	fsr2h,f,c
  4016  001E16  50DF               	movf	indf2,w,c
  4017  001E18  0100               	movlb	0	; () banked
  4018  001E1A  6FB5               	movwf	logRun@byte_i& (0+255),b
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4022  001E1C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4023  001E20  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4024  001E24  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4025  001E28  ECE8  F010         	call	_EEPROM_write	;wreg free
  4026                           
  4027                           ;EEPROM.c: 126: addr++;
  4028  001E2C  0100               	movlb	0	; () banked
  4029  001E2E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4030  001E30  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4031                           
  4032                           ; BSR set to: 0
  4033  001E32  0100               	movlb	0	; () banked
  4034  001E34  4BB7               	infsnz	logRun@i& (0+255),f,b
  4035  001E36  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4036                           
  4037                           ; BSR set to: 0
  4038  001E38  0100               	movlb	0	; () banked
  4039  001E3A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4040  001E3C  D7E1               	goto	l5969
  4041  001E3E  0100               	movlb	0	; () banked
  4042  001E40  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4043  001E42  E101               	bnz	u4930
  4044  001E44  D7D8               	goto	L4
  4045  001E46                     u4930:
  4046  001E46                     l931:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;EEPROM.c: 127: }
  4050                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4051  001E46  C0F9  F0B6         	movff	_total_time,logRun@byte11
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4055  001E4A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4056  001E4E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4057  001E52  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4058  001E56  ECE8  F010         	call	_EEPROM_write	;wreg free
  4059  001E5A  0012               	return		;funcret
  4060  001E5C                     __end_of_logRun:
  4061                           	opt stack 0
  4062                           tblptru	equ	0xFF8
  4063                           tblptrh	equ	0xFF7
  4064                           tblptrl	equ	0xFF6
  4065                           tablat	equ	0xFF5
  4066                           prodh	equ	0xFF4
  4067                           prodl	equ	0xFF3
  4068                           intcon	equ	0xFF2
  4069                           intcon2	equ	0xFF1
  4070                           intcon3	equ	0xFF0
  4071                           postinc0	equ	0xFEE
  4072                           wreg	equ	0xFE8
  4073                           postdec1	equ	0xFE5
  4074                           fsr1l	equ	0xFE1
  4075                           indf2	equ	0xFDF
  4076                           postinc2	equ	0xFDE
  4077                           postdec2	equ	0xFDD
  4078                           fsr2h	equ	0xFDA
  4079                           fsr2l	equ	0xFD9
  4080                           status	equ	0xFD8
  4081                           
  4082 ;; *************** function _EEPROM_write *****************
  4083 ;; Defined at:
  4084 ;;		line 32 in file "EEPROM.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  address         2   43[BANK0 ] unsigned short 
  4087 ;;  data            1   45[BANK0 ] unsigned char 
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  i               1   48[BANK0 ] unsigned char 
  4090 ;;  i               1   47[BANK0 ] unsigned char 
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      void 
  4093 ;; Registers used:
  4094 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4100 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;Total ram usage:        6 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:   10
  4107 ;; This function calls:
  4108 ;;		_EEPROM_read
  4109 ;;		_lcdInst
  4110 ;;		_printf
  4111 ;; This function is called by:
  4112 ;;		_logRun
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text14
  4117  0021D0                     __ptext14:
  4118                           	opt stack 0
  4119  0021D0                     _EEPROM_write:
  4120                           	opt stack 19
  4121                           
  4122                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4123                           
  4124                           ;incstack = 0
  4125  0021D0  84A6               	bsf	4006,2,c	;volatile
  4126                           
  4127                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4128  0021D2  0100               	movlb	0	; () banked
  4129  0021D4  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4130  0021D6  6EAA               	movwf	4010,c	;volatile
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4134  0021D8  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;EEPROM.c: 39: EEDATA = data;
  4138  0021DC  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4142  0021E0  9EA6               	bcf	4006,7,c	;volatile
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4146  0021E2  9CA6               	bcf	4006,6,c	;volatile
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4150  0021E4  9EF2               	bcf	intcon,7,c	;volatile
  4151                           
  4152                           ;EEPROM.c: 45: EECON2 = 0x55;
  4153  0021E6  0E55               	movlw	85
  4154  0021E8  6EA7               	movwf	4007,c	;volatile
  4155                           
  4156                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4157  0021EA  0EAA               	movlw	170
  4158  0021EC  6EA7               	movwf	4007,c	;volatile
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4162  0021EE  82A6               	bsf	4006,1,c	;volatile
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4166  0021F0  8EF2               	bsf	intcon,7,c	;volatile
  4167  0021F2                     l909:
  4168  0021F2  A8A1               	btfss	4001,4,c	;volatile
  4169  0021F4  D7FE               	goto	l909
  4170                           
  4171                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4172  0021F6  98A1               	bcf	4001,4,c	;volatile
  4173                           
  4174                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4175  0021F8  94A6               	bcf	4006,2,c	;volatile
  4176                           
  4177                           ;EEPROM.c: 57: if(debug){
  4178  0021FA  0100               	movlb	0	; () banked
  4179  0021FC  51DD               	movf	_debug& (0+255),w,b
  4180  0021FE  0100               	movlb	0	; () banked
  4181  002200  11DE               	iorwf	(_debug+1)& (0+255),w,b
  4182  002202  B4D8               	btfsc	status,2,c
  4183  002204  0012               	return	
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4187  002206  0E01               	movlw	1
  4188  002208  EC3D  F019         	call	_lcdInst
  4189  00220C  0E68               	movlw	104
  4190  00220E  0100               	movlb	0	; () banked
  4191  002210  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4192  002212  0EE4               	movlw	228
  4193  002214                     u5187:
  4194  002214  2EE8               	decfsz	wreg,f,c
  4195  002216  D7FE               	bra	u5187
  4196  002218  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4197  00221A  D7FC               	bra	u5187
  4198  00221C  F000               	nop	
  4199                           
  4200                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4201  00221E  0E80               	movlw	128
  4202  002220  EC3D  F019         	call	_lcdInst
  4203                           
  4204                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4205  002224  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4206  002228  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4207  00222C  ECF7  F018         	call	_EEPROM_read	;wreg free
  4208  002230  0100               	movlb	0	; () banked
  4209  002232  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4210  002234  A4D8               	btfss	status,2,c
  4211  002236  D024               	goto	l5237
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4215  002238  0EC6               	movlw	low STR_66
  4216  00223A  0100               	movlb	0	; () banked
  4217  00223C  6F8E               	movwf	printf@f& (0+255),b
  4218  00223E  0EFD               	movlw	high STR_66
  4219  002240  0100               	movlb	0	; () banked
  4220  002242  6F8F               	movwf	(printf@f+1)& (0+255),b
  4221  002244  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4222  002248  0100               	movlb	0	; () banked
  4223  00224A  6B91               	clrf	(?_printf+3)& (0+255),b
  4224  00224C  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4225  002250  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4226  002254  EC42  F004         	call	_printf	;wreg free
  4227                           
  4228                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4229  002258  0E00               	movlw	0
  4230  00225A  0100               	movlb	0	; () banked
  4231  00225C  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4232  00225E                     l5229:
  4233                           
  4234                           ; BSR set to: 0
  4235  00225E  0E63               	movlw	99
  4236  002260  0100               	movlb	0	; () banked
  4237  002262  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4238  002264  D001               	goto	l5233
  4239  002266  0012               	return	
  4240  002268                     l5233:
  4241                           
  4242                           ; BSR set to: 0
  4243  002268  0E68               	movlw	104
  4244  00226A  0100               	movlb	0	; () banked
  4245  00226C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4246  00226E  0EE4               	movlw	228
  4247  002270                     u5197:
  4248  002270  2EE8               	decfsz	wreg,f,c
  4249  002272  D7FE               	bra	u5197
  4250  002274  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4251  002276  D7FC               	bra	u5197
  4252  002278  F000               	nop	
  4253  00227A  0100               	movlb	0	; () banked
  4254  00227C  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4255  00227E  D7EF               	goto	l5229
  4256  002280                     l5237:
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4260  002280  0EBD               	movlw	low STR_67
  4261  002282  0100               	movlb	0	; () banked
  4262  002284  6F8E               	movwf	printf@f& (0+255),b
  4263  002286  0EFF               	movlw	high STR_67
  4264  002288  0100               	movlb	0	; () banked
  4265  00228A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4266  00228C  EC42  F004         	call	_printf	;wreg free
  4267  002290  0E00               	movlw	0
  4268  002292  0100               	movlb	0	; () banked
  4269  002294  6FB0               	movwf	EEPROM_write@i_1364& (0+255),b
  4270  002296                     l5241:
  4271                           
  4272                           ; BSR set to: 0
  4273  002296  0E63               	movlw	99
  4274  002298  0100               	movlb	0	; () banked
  4275  00229A  65B0               	cpfsgt	EEPROM_write@i_1364& (0+255),b
  4276  00229C  D001               	goto	l5245
  4277  00229E  0012               	return	
  4278  0022A0                     l5245:
  4279                           
  4280                           ; BSR set to: 0
  4281  0022A0  0E68               	movlw	104
  4282  0022A2  0100               	movlb	0	; () banked
  4283  0022A4  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4284  0022A6  0EE4               	movlw	228
  4285  0022A8                     u5207:
  4286  0022A8  2EE8               	decfsz	wreg,f,c
  4287  0022AA  D7FE               	bra	u5207
  4288  0022AC  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4289  0022AE  D7FC               	bra	u5207
  4290  0022B0  F000               	nop	
  4291  0022B2  0100               	movlb	0	; () banked
  4292  0022B4  2BB0               	incf	EEPROM_write@i_1364& (0+255),f,b
  4293  0022B6  D7EF               	goto	l5241
  4294  0022B8                     __end_of_EEPROM_write:
  4295                           	opt stack 0
  4296                           tblptru	equ	0xFF8
  4297                           tblptrh	equ	0xFF7
  4298                           tblptrl	equ	0xFF6
  4299                           tablat	equ	0xFF5
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           intcon	equ	0xFF2
  4303                           intcon2	equ	0xFF1
  4304                           intcon3	equ	0xFF0
  4305                           postinc0	equ	0xFEE
  4306                           wreg	equ	0xFE8
  4307                           postdec1	equ	0xFE5
  4308                           fsr1l	equ	0xFE1
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           postdec2	equ	0xFDD
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _EEPROM_read *****************
  4317 ;; Defined at:
  4318 ;;		line 68 in file "EEPROM.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  address         2    0[BANK0 ] unsigned short 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      unsigned char 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4332 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;Total ram usage:        2 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    7
  4339 ;; This function calls:
  4340 ;;		Nothing
  4341 ;; This function is called by:
  4342 ;;		_EEPROM_write
  4343 ;;		_logRun
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text15
  4348  0031EE                     __ptext15:
  4349                           	opt stack 0
  4350  0031EE                     _EEPROM_read:
  4351                           	opt stack 21
  4352                           
  4353                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;incstack = 0
  4357  0031EE  0100               	movlb	0	; () banked
  4358  0031F0  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4359  0031F2  6EAA               	movwf	4010,c	;volatile
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4363  0031F4  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4367  0031F8  9EA6               	bcf	4006,7,c	;volatile
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4371  0031FA  9CA6               	bcf	4006,6,c	;volatile
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4375  0031FC  80A6               	bsf	4006,0,c	;volatile
  4376  0031FE                     l922:
  4377  0031FE  B0A6               	btfsc	4006,0,c	;volatile
  4378  003200  D7FE               	goto	l922
  4379                           
  4380                           ;EEPROM.c: 81: return EEDATA;
  4381  003202  50A8               	movf	4008,w,c	;volatile
  4382  003204  0012               	return	
  4383  003206                     __end_of_EEPROM_read:
  4384                           	opt stack 0
  4385                           tblptru	equ	0xFF8
  4386                           tblptrh	equ	0xFF7
  4387                           tblptrl	equ	0xFF6
  4388                           tablat	equ	0xFF5
  4389                           prodh	equ	0xFF4
  4390                           prodl	equ	0xFF3
  4391                           intcon	equ	0xFF2
  4392                           intcon2	equ	0xFF1
  4393                           intcon3	equ	0xFF0
  4394                           postinc0	equ	0xFEE
  4395                           wreg	equ	0xFE8
  4396                           postdec1	equ	0xFE5
  4397                           fsr1l	equ	0xFE1
  4398                           indf2	equ	0xFDF
  4399                           postinc2	equ	0xFDE
  4400                           postdec2	equ	0xFDD
  4401                           fsr2h	equ	0xFDA
  4402                           fsr2l	equ	0xFD9
  4403                           status	equ	0xFD8
  4404                           
  4405 ;; *************** function _initUI *****************
  4406 ;; Defined at:
  4407 ;;		line 62 in file "UI.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;		None
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;		None
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  1    wreg      void 
  4414 ;; Registers used:
  4415 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;Total ram usage:        0 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:   12
  4428 ;; This function calls:
  4429 ;;		_change_state_to_menu_start
  4430 ;;		_loadRTC
  4431 ;; This function is called by:
  4432 ;;		_main
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text16
  4437  003144                     __ptext16:
  4438                           	opt stack 0
  4439  003144                     _initUI:
  4440                           	opt stack 18
  4441                           
  4442                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4443                           
  4444                           ;incstack = 0
  4445  003144  8EF2               	bsf	intcon,7,c	;volatile
  4446                           
  4447                           ;UI.c: 64: machine_state = UI_state;
  4448  003146  0E00               	movlw	0
  4449  003148  0100               	movlb	0	; () banked
  4450  00314A  6FFB               	movwf	_machine_state& (0+255),b
  4451                           
  4452                           ;UI.c: 65: logstate = 0;
  4453  00314C  0E00               	movlw	0
  4454  00314E  0100               	movlb	0	; () banked
  4455  003150  6FF8               	movwf	(_logstate+1)& (0+255),b
  4456  003152  0E00               	movlw	0
  4457  003154  6FF7               	movwf	_logstate& (0+255),b
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;UI.c: 67: loadRTC();
  4461  003156  EC60  F013         	call	_loadRTC	;wreg free
  4462                           
  4463                           ;UI.c: 69: change_state_to_menu_start();
  4464  00315A  EC3D  F018         	call	_change_state_to_menu_start	;wreg free
  4465                           
  4466                           ;UI.c: 70: firstboot = 1;
  4467  00315E  0E00               	movlw	0
  4468  003160  6E77               	movwf	_firstboot+1,c
  4469  003162  0E01               	movlw	1
  4470  003164  6E76               	movwf	_firstboot,c
  4471  003166  0012               	return		;funcret
  4472  003168                     __end_of_initUI:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           prodh	equ	0xFF4
  4479                           prodl	equ	0xFF3
  4480                           intcon	equ	0xFF2
  4481                           intcon2	equ	0xFF1
  4482                           intcon3	equ	0xFF0
  4483                           postinc0	equ	0xFEE
  4484                           wreg	equ	0xFE8
  4485                           postdec1	equ	0xFE5
  4486                           fsr1l	equ	0xFE1
  4487                           indf2	equ	0xFDF
  4488                           postinc2	equ	0xFDE
  4489                           postdec2	equ	0xFDD
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function _loadRTC *****************
  4495 ;; Defined at:
  4496 ;;		line 28 in file "RTC.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;		None
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  i               2   22[BANK0 ] int 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  1    wreg      void 
  4503 ;; Registers used:
  4504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;Total ram usage:        3 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; Hardware stack levels required when called:    9
  4517 ;; This function calls:
  4518 ;;		_I2C_Master_Init
  4519 ;;		_I2C_Master_Start
  4520 ;;		_I2C_Master_Stop
  4521 ;;		_I2C_Master_Write
  4522 ;; This function is called by:
  4523 ;;		_initUI
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text17
  4528  0026C0                     __ptext17:
  4529                           	opt stack 0
  4530  0026C0                     _loadRTC:
  4531                           	opt stack 20
  4532                           
  4533                           ;RTC.c: 30: I2C_Master_Init(10000);
  4534                           
  4535                           ;incstack = 0
  4536  0026C0  0E10               	movlw	16
  4537  0026C2  0100               	movlb	0	; () banked
  4538  0026C4  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  4539  0026C6  0E27               	movlw	39
  4540  0026C8  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  4541  0026CA  0E00               	movlw	0
  4542  0026CC  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  4543  0026CE  0E00               	movlw	0
  4544  0026D0  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  4545  0026D2  EC34  F015         	call	_I2C_Master_Init	;wreg free
  4546                           
  4547                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  4548  0026D6  9EF2               	bcf	intcon,7,c	;volatile
  4549                           
  4550                           ;RTC.c: 34: I2C_Master_Start();
  4551  0026D8  EC63  F019         	call	_I2C_Master_Start	;wreg free
  4552                           
  4553                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  4554  0026DC  0E00               	movlw	0
  4555  0026DE  0100               	movlb	0	; () banked
  4556  0026E0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4557  0026E2  0ED0               	movlw	208
  4558  0026E4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4559  0026E6  EC51  F019         	call	_I2C_Master_Write	;wreg free
  4560                           
  4561                           ;RTC.c: 36: I2C_Master_Write(0x00);
  4562  0026EA  0E00               	movlw	0
  4563  0026EC  0100               	movlb	0	; () banked
  4564  0026EE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4565  0026F0  0E00               	movlw	0
  4566  0026F2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4567  0026F4  EC51  F019         	call	_I2C_Master_Write	;wreg free
  4568                           
  4569                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  4570  0026F8  0E00               	movlw	0
  4571  0026FA  0100               	movlb	0	; () banked
  4572  0026FC  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  4573  0026FE  0E00               	movlw	0
  4574  002700  6F96               	movwf	loadRTC@i& (0+255),b
  4575  002702                     l4887:
  4576                           
  4577                           ; BSR set to: 0
  4578  002702  0100               	movlb	0	; () banked
  4579  002704  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  4580  002706  D008               	goto	l4891
  4581  002708  0100               	movlb	0	; () banked
  4582  00270A  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  4583  00270C  E11B               	bnz	l4897
  4584  00270E  0E07               	movlw	7
  4585  002710  0100               	movlb	0	; () banked
  4586  002712  5D96               	subwf	loadRTC@i& (0+255),w,b
  4587  002714  B0D8               	btfsc	status,0,c
  4588  002716  D016               	goto	l4897
  4589  002718                     l4891:
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  4593  002718  0E5B               	movlw	low _time
  4594  00271A  0100               	movlb	0	; () banked
  4595  00271C  2596               	addwf	loadRTC@i& (0+255),w,b
  4596  00271E  6ED9               	movwf	fsr2l,c
  4597  002720  0E00               	movlw	high _time
  4598  002722  0100               	movlb	0	; () banked
  4599  002724  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  4600  002726  6EDA               	movwf	fsr2h,c
  4601  002728  50DF               	movf	indf2,w,c
  4602  00272A  0100               	movlb	0	; () banked
  4603  00272C  6F95               	movwf	??_loadRTC& (0+255),b
  4604  00272E  0100               	movlb	0	; () banked
  4605  002730  5195               	movf	??_loadRTC& (0+255),w,b
  4606  002732  0100               	movlb	0	; () banked
  4607  002734  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4608  002736  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  4609  002738  EC51  F019         	call	_I2C_Master_Write	;wreg free
  4610  00273C  0100               	movlb	0	; () banked
  4611  00273E  4B96               	infsnz	loadRTC@i& (0+255),f,b
  4612  002740  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  4613  002742  D7DF               	goto	l4887
  4614  002744                     l4897:
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;RTC.c: 39: }
  4618                           ;RTC.c: 40: I2C_Master_Stop();
  4619  002744  EC5F  F019         	call	_I2C_Master_Stop	;wreg free
  4620                           
  4621                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  4622  002748  8EF2               	bsf	intcon,7,c	;volatile
  4623  00274A  0012               	return		;funcret
  4624  00274C                     __end_of_loadRTC:
  4625                           	opt stack 0
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           intcon	equ	0xFF2
  4633                           intcon2	equ	0xFF1
  4634                           intcon3	equ	0xFF0
  4635                           postinc0	equ	0xFEE
  4636                           wreg	equ	0xFE8
  4637                           postdec1	equ	0xFE5
  4638                           fsr1l	equ	0xFE1
  4639                           indf2	equ	0xFDF
  4640                           postinc2	equ	0xFDE
  4641                           postdec2	equ	0xFDD
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function _I2C_Master_Init *****************
  4647 ;; Defined at:
  4648 ;;		line 15 in file "I2C.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  c               4   13[BANK0 ] const unsigned long 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;		None
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4662 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;Total ram usage:        8 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    8
  4669 ;; This function calls:
  4670 ;;		___lldiv
  4671 ;; This function is called by:
  4672 ;;		_loadRTC
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text18
  4677  002A68                     __ptext18:
  4678                           	opt stack 0
  4679  002A68                     _I2C_Master_Init:
  4680                           	opt stack 20
  4681                           
  4682                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  4683                           
  4684                           ;incstack = 0
  4685  002A68  0E00               	movlw	0
  4686  002A6A  6EC7               	movwf	4039,c	;volatile
  4687                           
  4688                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  4689  002A6C  0E28               	movlw	40
  4690  002A6E  6EC6               	movwf	4038,c	;volatile
  4691                           
  4692                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  4693  002A70  0E00               	movlw	0
  4694  002A72  6EC5               	movwf	4037,c	;volatile
  4695                           
  4696                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  4697  002A74  0E00               	movlw	0
  4698  002A76  0100               	movlb	0	; () banked
  4699  002A78  6F80               	movwf	___lldiv@dividend& (0+255),b
  4700  002A7A  0E48               	movlw	72
  4701  002A7C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4702  002A7E  0EE8               	movlw	232
  4703  002A80  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4704  002A82  0E01               	movlw	1
  4705  002A84  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4706  002A86  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4707  002A8A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4708  002A8E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4709  002A92  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4710  002A96  0E02               	movlw	2
  4711  002A98                     u3465:
  4712  002A98  90D8               	bcf	status,0,c
  4713  002A9A  0100               	movlb	0	; () banked
  4714  002A9C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4715  002A9E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4716  002AA0  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4717  002AA2  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4718  002AA4  2EE8               	decfsz	wreg,f,c
  4719  002AA6  D7F8               	goto	u3465
  4720  002AA8  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4721  002AAC  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4722  002AB0  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4723  002AB4  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4724  002AB8  ECBB  F011         	call	___lldiv	;wreg free
  4725  002ABC  0100               	movlb	0	; () banked
  4726  002ABE  0580               	decf	?___lldiv& (0+255),w,b
  4727  002AC0  6EC8               	movwf	4040,c	;volatile
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;I2C.c: 22: TRISC3 = 1;
  4731  002AC2  8694               	bsf	3988,3,c	;volatile
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;I2C.c: 23: TRISC4 = 1;
  4735  002AC4  8894               	bsf	3988,4,c	;volatile
  4736                           
  4737                           ; BSR set to: 0
  4738  002AC6  0012               	return		;funcret
  4739  002AC8                     __end_of_I2C_Master_Init:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           intcon2	equ	0xFF1
  4749                           intcon3	equ	0xFF0
  4750                           postinc0	equ	0xFEE
  4751                           wreg	equ	0xFE8
  4752                           postdec1	equ	0xFE5
  4753                           fsr1l	equ	0xFE1
  4754                           indf2	equ	0xFDF
  4755                           postinc2	equ	0xFDE
  4756                           postdec2	equ	0xFDD
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function ___lldiv *****************
  4762 ;; Defined at:
  4763 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  dividend        4    0[BANK0 ] unsigned long 
  4766 ;;  divisor         4    4[BANK0 ] unsigned long 
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;  quotient        4    8[BANK0 ] unsigned long 
  4769 ;;  counter         1   12[BANK0 ] unsigned char 
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  4    0[BANK0 ] unsigned long 
  4772 ;; Registers used:
  4773 ;;		wreg, status,2, status,0
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4779 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;Total ram usage:       13 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    7
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_I2C_Master_Init
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           	psect	text19
  4794  002376                     __ptext19:
  4795                           	opt stack 0
  4796  002376                     ___lldiv:
  4797                           	opt stack 20
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;incstack = 0
  4801  002376  0E00               	movlw	0
  4802  002378  0100               	movlb	0	; () banked
  4803  00237A  6F88               	movwf	___lldiv@quotient& (0+255),b
  4804  00237C  0E00               	movlw	0
  4805  00237E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4806  002380  0E00               	movlw	0
  4807  002382  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4808  002384  0E00               	movlw	0
  4809  002386  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4810                           
  4811                           ; BSR set to: 0
  4812  002388  0100               	movlb	0	; () banked
  4813  00238A  5184               	movf	___lldiv@divisor& (0+255),w,b
  4814  00238C  0100               	movlb	0	; () banked
  4815  00238E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4816  002390  0100               	movlb	0	; () banked
  4817  002392  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4818  002394  0100               	movlb	0	; () banked
  4819  002396  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4820  002398  B4D8               	btfsc	status,2,c
  4821  00239A  D042               	goto	l1361
  4822                           
  4823                           ; BSR set to: 0
  4824  00239C  0E01               	movlw	1
  4825  00239E  0100               	movlb	0	; () banked
  4826  0023A0  6F8C               	movwf	___lldiv@counter& (0+255),b
  4827  0023A2  D008               	goto	l4389
  4828  0023A4                     l4387:
  4829                           
  4830                           ; BSR set to: 0
  4831  0023A4  0100               	movlb	0	; () banked
  4832  0023A6  90D8               	bcf	status,0,c
  4833  0023A8  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4834  0023AA  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4835  0023AC  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4836  0023AE  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4837  0023B0  0100               	movlb	0	; () banked
  4838  0023B2  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4839  0023B4                     l4389:
  4840                           
  4841                           ; BSR set to: 0
  4842  0023B4  0100               	movlb	0	; () banked
  4843  0023B6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4844  0023B8  D7F5               	goto	l4387
  4845  0023BA                     l4391:
  4846                           
  4847                           ; BSR set to: 0
  4848  0023BA  0100               	movlb	0	; () banked
  4849  0023BC  90D8               	bcf	status,0,c
  4850  0023BE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4851  0023C0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4852  0023C2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4853  0023C4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4854                           
  4855                           ; BSR set to: 0
  4856  0023C6  0100               	movlb	0	; () banked
  4857  0023C8  5184               	movf	___lldiv@divisor& (0+255),w,b
  4858  0023CA  0100               	movlb	0	; () banked
  4859  0023CC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4860  0023CE  0100               	movlb	0	; () banked
  4861  0023D0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4862  0023D2  0100               	movlb	0	; () banked
  4863  0023D4  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4864  0023D6  0100               	movlb	0	; () banked
  4865  0023D8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4866  0023DA  0100               	movlb	0	; () banked
  4867  0023DC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4868  0023DE  0100               	movlb	0	; () banked
  4869  0023E0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4870  0023E2  0100               	movlb	0	; () banked
  4871  0023E4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4872  0023E6  A0D8               	btfss	status,0,c
  4873  0023E8  D012               	goto	l4399
  4874                           
  4875                           ; BSR set to: 0
  4876  0023EA  0100               	movlb	0	; () banked
  4877  0023EC  5184               	movf	___lldiv@divisor& (0+255),w,b
  4878  0023EE  0100               	movlb	0	; () banked
  4879  0023F0  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4880  0023F2  0100               	movlb	0	; () banked
  4881  0023F4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4882  0023F6  0100               	movlb	0	; () banked
  4883  0023F8  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4884  0023FA  0100               	movlb	0	; () banked
  4885  0023FC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4886  0023FE  0100               	movlb	0	; () banked
  4887  002400  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4888  002402  0100               	movlb	0	; () banked
  4889  002404  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4890  002406  0100               	movlb	0	; () banked
  4891  002408  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4892                           
  4893                           ; BSR set to: 0
  4894  00240A  0100               	movlb	0	; () banked
  4895  00240C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4896  00240E                     l4399:
  4897                           
  4898                           ; BSR set to: 0
  4899  00240E  0100               	movlb	0	; () banked
  4900  002410  90D8               	bcf	status,0,c
  4901  002412  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4902  002414  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4903  002416  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4904  002418  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4905                           
  4906                           ; BSR set to: 0
  4907  00241A  0100               	movlb	0	; () banked
  4908  00241C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4909  00241E  D7CD               	goto	l4391
  4910  002420                     l1361:
  4911                           
  4912                           ; BSR set to: 0
  4913  002420  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4914  002424  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4915  002428  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4916  00242C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4917                           
  4918                           ; BSR set to: 0
  4919  002430  0012               	return		;funcret
  4920  002432                     __end_of___lldiv:
  4921                           	opt stack 0
  4922                           tblptru	equ	0xFF8
  4923                           tblptrh	equ	0xFF7
  4924                           tblptrl	equ	0xFF6
  4925                           tablat	equ	0xFF5
  4926                           prodh	equ	0xFF4
  4927                           prodl	equ	0xFF3
  4928                           intcon	equ	0xFF2
  4929                           intcon2	equ	0xFF1
  4930                           intcon3	equ	0xFF0
  4931                           postinc0	equ	0xFEE
  4932                           wreg	equ	0xFE8
  4933                           postdec1	equ	0xFE5
  4934                           fsr1l	equ	0xFE1
  4935                           indf2	equ	0xFDF
  4936                           postinc2	equ	0xFDE
  4937                           postdec2	equ	0xFDD
  4938                           fsr2h	equ	0xFDA
  4939                           fsr2l	equ	0xFD9
  4940                           status	equ	0xFD8
  4941                           
  4942 ;; *************** function _change_state_to_menu_start *****************
  4943 ;; Defined at:
  4944 ;;		line 470 in file "UI.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;		None
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;		None
  4949 ;; Return value:  Size  Location     Type
  4950 ;;                  1    wreg      void 
  4951 ;; Registers used:
  4952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;Total ram usage:        0 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; Hardware stack levels required when called:   11
  4965 ;; This function calls:
  4966 ;;		_lcdInst
  4967 ;;		_printRTC
  4968 ;;		_printf
  4969 ;; This function is called by:
  4970 ;;		_initUI
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text20
  4975  00307A                     __ptext20:
  4976                           	opt stack 0
  4977  00307A                     _change_state_to_menu_start:
  4978                           	opt stack 18
  4979                           
  4980                           ;UI.c: 471: cur_state = 0;
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;incstack = 0
  4984  00307A  0E00               	movlw	0
  4985  00307C  0100               	movlb	0	; () banked
  4986  00307E  6FDC               	movwf	(_cur_state+1)& (0+255),b
  4987  003080  0E00               	movlw	0
  4988  003082  6FDB               	movwf	_cur_state& (0+255),b
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;UI.c: 473: lcdInst(0b10000000);;
  4992  003084  0E80               	movlw	128
  4993  003086  EC3D  F019         	call	_lcdInst
  4994                           
  4995                           ;UI.c: 474: printRTC();
  4996  00308A  EC15  F008         	call	_printRTC	;wreg free
  4997                           
  4998                           ;UI.c: 475: lcdInst(0b11000000);;
  4999  00308E  0EC0               	movlw	192
  5000  003090  EC3D  F019         	call	_lcdInst
  5001                           
  5002                           ;UI.c: 476: printf("PUSH TO CONTINUE");
  5003  003094  0E57               	movlw	low STR_30
  5004  003096  0100               	movlb	0	; () banked
  5005  003098  6F8E               	movwf	printf@f& (0+255),b
  5006  00309A  0EFF               	movlw	high STR_30
  5007  00309C  0100               	movlb	0	; () banked
  5008  00309E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5009  0030A0  EC42  F004         	call	_printf	;wreg free
  5010  0030A4  0012               	return		;funcret
  5011  0030A6                     __end_of_change_state_to_menu_start:
  5012                           	opt stack 0
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           prodh	equ	0xFF4
  5018                           prodl	equ	0xFF3
  5019                           intcon	equ	0xFF2
  5020                           intcon2	equ	0xFF1
  5021                           intcon3	equ	0xFF0
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _initTime *****************
  5034 ;; Defined at:
  5035 ;;		line 17 in file "RTC.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  s               1    wreg     unsigned char 
  5038 ;;  m               1    0[BANK0 ] unsigned char 
  5039 ;;  h               1    1[BANK0 ] unsigned char 
  5040 ;;  w               1    2[BANK0 ] unsigned char 
  5041 ;;  DD              1    3[BANK0 ] unsigned char 
  5042 ;;  MM              1    4[BANK0 ] unsigned char 
  5043 ;;  YY              1    5[BANK0 ] unsigned char 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;  s               1    6[BANK0 ] unsigned char 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      void 
  5048 ;; Registers used:
  5049 ;;		wreg
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5055 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;Total ram usage:        7 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    7
  5062 ;; This function calls:
  5063 ;;		Nothing
  5064 ;; This function is called by:
  5065 ;;		_main
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           	psect	text21
  5070  0031AE                     __ptext21:
  5071                           	opt stack 0
  5072  0031AE                     _initTime:
  5073                           	opt stack 23
  5074                           
  5075                           ;incstack = 0
  5076                           ;initTime@s stored from wreg
  5077  0031AE  0100               	movlb	0	; () banked
  5078  0031B0  6F86               	movwf	initTime@s& (0+255),b
  5079                           
  5080                           ;RTC.c: 19: time[0] = s;
  5081  0031B2  C086  F05B         	movff	initTime@s,_time
  5082                           
  5083                           ;RTC.c: 20: time[1] = m;
  5084  0031B6  C080  F05C         	movff	initTime@m,_time+1
  5085                           
  5086                           ;RTC.c: 21: time[2] = h;
  5087  0031BA  C081  F05D         	movff	initTime@h,_time+2
  5088                           
  5089                           ;RTC.c: 22: time[3] = w;
  5090  0031BE  C082  F05E         	movff	initTime@w,_time+3
  5091                           
  5092                           ;RTC.c: 23: time[4] = DD;
  5093  0031C2  C083  F05F         	movff	initTime@DD,_time+4
  5094                           
  5095                           ;RTC.c: 24: time[5] = MM;
  5096  0031C6  C084  F060         	movff	initTime@MM,_time+5
  5097                           
  5098                           ;RTC.c: 25: time[6] = YY;
  5099  0031CA  C085  F061         	movff	initTime@YY,_time+6
  5100  0031CE  0012               	return		;funcret
  5101  0031D0                     __end_of_initTime:
  5102                           	opt stack 0
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           intcon	equ	0xFF2
  5110                           intcon2	equ	0xFF1
  5111                           intcon3	equ	0xFF0
  5112                           postinc0	equ	0xFEE
  5113                           wreg	equ	0xFE8
  5114                           postdec1	equ	0xFE5
  5115                           fsr1l	equ	0xFE1
  5116                           indf2	equ	0xFDF
  5117                           postinc2	equ	0xFDE
  5118                           postdec2	equ	0xFDD
  5119                           fsr2h	equ	0xFDA
  5120                           fsr2l	equ	0xFD9
  5121                           status	equ	0xFD8
  5122                           
  5123 ;; *************** function _initLCD *****************
  5124 ;; Defined at:
  5125 ;;		line 48 in file "lcd.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg, status,2, status,0, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;Total ram usage:        1 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    9
  5146 ;; This function calls:
  5147 ;;		_lcdInst
  5148 ;; This function is called by:
  5149 ;;		_main
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text22
  5154  002CAC                     __ptext22:
  5155                           	opt stack 0
  5156  002CAC                     _initLCD:
  5157                           	opt stack 21
  5158                           
  5159                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5160                           
  5161                           ;incstack = 0
  5162  002CAC  0E9C               	movlw	156
  5163  002CAE  0100               	movlb	0	; () banked
  5164  002CB0  6F83               	movwf	??_initLCD& (0+255),b
  5165  002CB2  0ED7               	movlw	215
  5166  002CB4                     u5217:
  5167  002CB4  2EE8               	decfsz	wreg,f,c
  5168  002CB6  D7FE               	bra	u5217
  5169  002CB8  2F83               	decfsz	??_initLCD& (0+255),f,b
  5170  002CBA  D7FC               	bra	u5217
  5171                           
  5172                           ;lcd.c: 50: lcdInst(0b00110011);
  5173  002CBC  0E33               	movlw	51
  5174  002CBE  EC3D  F019         	call	_lcdInst
  5175                           
  5176                           ;lcd.c: 51: lcdInst(0b00110010);
  5177  002CC2  0E32               	movlw	50
  5178  002CC4  EC3D  F019         	call	_lcdInst
  5179                           
  5180                           ;lcd.c: 53: lcdInst(0b00101000);
  5181  002CC8  0E28               	movlw	40
  5182  002CCA  EC3D  F019         	call	_lcdInst
  5183                           
  5184                           ;lcd.c: 54: lcdInst(0b00001100);
  5185  002CCE  0E0C               	movlw	12
  5186  002CD0  EC3D  F019         	call	_lcdInst
  5187                           
  5188                           ;lcd.c: 55: lcdInst(0b00000110);
  5189  002CD4  0E06               	movlw	6
  5190  002CD6  EC3D  F019         	call	_lcdInst
  5191                           
  5192                           ;lcd.c: 56: lcdInst(0b00000001);
  5193  002CDA  0E01               	movlw	1
  5194  002CDC  EC3D  F019         	call	_lcdInst
  5195                           
  5196                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5197  002CE0  0E9C               	movlw	156
  5198  002CE2  0100               	movlb	0	; () banked
  5199  002CE4  6F83               	movwf	??_initLCD& (0+255),b
  5200  002CE6  0ED7               	movlw	215
  5201  002CE8                     u5227:
  5202  002CE8  2EE8               	decfsz	wreg,f,c
  5203  002CEA  D7FE               	bra	u5227
  5204  002CEC  2F83               	decfsz	??_initLCD& (0+255),f,b
  5205  002CEE  D7FC               	bra	u5227
  5206  002CF0  0012               	return		;funcret
  5207  002CF2                     __end_of_initLCD:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           intcon2	equ	0xFF1
  5217                           intcon3	equ	0xFF0
  5218                           postinc0	equ	0xFEE
  5219                           wreg	equ	0xFE8
  5220                           postdec1	equ	0xFE5
  5221                           fsr1l	equ	0xFE1
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function _UI *****************
  5230 ;; Defined at:
  5231 ;;		line 74 in file "UI.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  i               1   84[BANK0 ] unsigned char 
  5236 ;;  i               1   83[BANK0 ] unsigned char 
  5237 ;;  i               1   82[BANK0 ] unsigned char 
  5238 ;;  i               1   81[BANK0 ] unsigned char 
  5239 ;;  i               1   80[BANK0 ] unsigned char 
  5240 ;;  i               1   79[BANK0 ] unsigned char 
  5241 ;;  i               1   78[BANK0 ] unsigned char 
  5242 ;;  i               1   77[BANK0 ] unsigned char 
  5243 ;;  i               1   76[BANK0 ] unsigned char 
  5244 ;;  i               1   75[BANK0 ] unsigned char 
  5245 ;;  i               1   74[BANK0 ] unsigned char 
  5246 ;;  i               1   73[BANK0 ] unsigned char 
  5247 ;;  month           4   85[BANK0 ] unsigned char [4]
  5248 ;;  i               1   72[BANK0 ] unsigned char 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;Total ram usage:       21 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:   11
  5265 ;; This function calls:
  5266 ;;		___awdiv
  5267 ;;		___awmod
  5268 ;;		_change_state_to_menu_12
  5269 ;;		_change_state_to_menu_22
  5270 ;;		_lcdInst
  5271 ;;		_printRTC
  5272 ;;		_printf
  5273 ;;		_strcpy
  5274 ;; This function is called by:
  5275 ;;		_main
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text23
  5280  000012                     __ptext23:
  5281                           	opt stack 0
  5282  000012                     _UI:
  5283                           	opt stack 19
  5284                           
  5285                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5286                           
  5287                           ;incstack = 0
  5288  000012  0E02               	movlw	2
  5289  000014  0100               	movlb	0	; () banked
  5290  000016  19FB               	xorwf	_machine_state& (0+255),w,b
  5291  000018  A4D8               	btfss	status,2,c
  5292  00001A  D075               	goto	l5381
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5296  00001C  0E01               	movlw	1
  5297  00001E  EC3D  F019         	call	_lcdInst
  5298  000022  0E68               	movlw	104
  5299  000024  0100               	movlb	0	; () banked
  5300  000026  6FC4               	movwf	??_UI& (0+255),b
  5301  000028  0EE4               	movlw	228
  5302  00002A                     u5237:
  5303  00002A  2EE8               	decfsz	wreg,f,c
  5304  00002C  D7FE               	bra	u5237
  5305  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5306  000030  D7FC               	bra	u5237
  5307  000032  F000               	nop	
  5308                           
  5309                           ;UI.c: 77: lcdInst(0b10000000);;
  5310  000034  0E80               	movlw	128
  5311  000036  EC3D  F019         	call	_lcdInst
  5312                           
  5313                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5314  00003A  0E13               	movlw	low STR_1
  5315  00003C  0100               	movlb	0	; () banked
  5316  00003E  6F8E               	movwf	printf@f& (0+255),b
  5317  000040  0EFE               	movlw	high STR_1
  5318  000042  0100               	movlb	0	; () banked
  5319  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5320  000046  0E01               	movlw	1
  5321  000048  0100               	movlb	0	; () banked
  5322  00004A  25FC               	addwf	_sel& (0+255),w,b
  5323  00004C  0100               	movlb	0	; () banked
  5324  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5325  000050  0100               	movlb	0	; () banked
  5326  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5327  000054  0E00               	movlw	0
  5328  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5329  000058  EC42  F004         	call	_printf	;wreg free
  5330                           
  5331                           ;UI.c: 79: lcdInst(0b11000000);;
  5332  00005C  0EC0               	movlw	192
  5333  00005E  EC3D  F019         	call	_lcdInst
  5334                           
  5335                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5336  000062  0E0E               	movlw	14
  5337  000064  0100               	movlb	0	; () banked
  5338  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5339  000068  0E10               	movlw	16
  5340  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5341  00006C  C0F9  F080         	movff	_total_time,___awmod@dividend
  5342  000070  C0FA  F081         	movff	_total_time+1,___awmod@dividend+1
  5343  000074  ECC4  F012         	call	___awmod	;wreg free
  5344  000078  C080  F0C6         	movff	?___awmod,_UI$1992
  5345  00007C  C081  F0C7         	movff	?___awmod+1,_UI$1992+1
  5346                           
  5347                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5348  000080  0E86               	movlw	low STR_2
  5349  000082  0100               	movlb	0	; () banked
  5350  000084  6F8E               	movwf	printf@f& (0+255),b
  5351  000086  0EFF               	movlw	high STR_2
  5352  000088  0100               	movlb	0	; () banked
  5353  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5354  00008C  0E0E               	movlw	14
  5355  00008E  0100               	movlb	0	; () banked
  5356  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5357  000092  0E10               	movlw	16
  5358  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5359  000096  C0F9  F080         	movff	_total_time,___awmod@dividend
  5360  00009A  C0FA  F081         	movff	_total_time+1,___awmod@dividend+1
  5361  00009E  ECC4  F012         	call	___awmod	;wreg free
  5362  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  5363  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5364  0000AA  0E00               	movlw	0
  5365  0000AC  0100               	movlb	0	; () banked
  5366  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5367  0000B0  0E3C               	movlw	60
  5368  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5369  0000B4  EC5C  F011         	call	___awdiv	;wreg free
  5370  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  5371  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  5372  0000C0  C0C6  F080         	movff	_UI$1992,___awmod@dividend
  5373  0000C4  C0C7  F081         	movff	_UI$1992+1,___awmod@dividend+1
  5374  0000C8  0E00               	movlw	0
  5375  0000CA  0100               	movlb	0	; () banked
  5376  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5377  0000CE  0E3C               	movlw	60
  5378  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5379  0000D2  ECC4  F012         	call	___awmod	;wreg free
  5380  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  5381  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  5382  0000DE  EC42  F004         	call	_printf	;wreg free
  5383                           
  5384                           ;UI.c: 81: machine_state = UI_state;
  5385  0000E2  0E00               	movlw	0
  5386  0000E4  0100               	movlb	0	; () banked
  5387  0000E6  6FFB               	movwf	_machine_state& (0+255),b
  5388  0000E8                     l198:
  5389  0000E8  A281               	btfss	3969,1,c	;volatile
  5390  0000EA  D7FE               	goto	l198
  5391                           
  5392                           ;UI.c: 84: }
  5393                           ;UI.c: 85: if(cur_state==12){
  5394  0000EC  0E0C               	movlw	12
  5395  0000EE  0100               	movlb	0	; () banked
  5396  0000F0  19DB               	xorwf	_cur_state& (0+255),w,b
  5397  0000F2  0100               	movlb	0	; () banked
  5398  0000F4  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
  5399  0000F6  A4D8               	btfss	status,2,c
  5400  0000F8  D003               	goto	l5379
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;UI.c: 86: change_state_to_menu_12();
  5404  0000FA  ECB6  F016         	call	_change_state_to_menu_12	;wreg free
  5405                           
  5406                           ;UI.c: 87: }
  5407  0000FE  D3BB               	goto	l5685
  5408  000100                     l5379:
  5409                           
  5410                           ;UI.c: 88: else{
  5411                           ;UI.c: 89: change_state_to_menu_22();
  5412  000100  EC9A  F016         	call	_change_state_to_menu_22	;wreg free
  5413                           
  5414                           ;UI.c: 90: }
  5415                           ;UI.c: 91: }
  5416  000104  D3B8               	goto	l5685
  5417  000106                     l5381:
  5418                           
  5419                           ;UI.c: 92: else if(cur_state == 0){
  5420  000106  0100               	movlb	0	; () banked
  5421  000108  51DB               	movf	_cur_state& (0+255),w,b
  5422  00010A  0100               	movlb	0	; () banked
  5423  00010C  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
  5424  00010E  A4D8               	btfss	status,2,c
  5425  000110  D3B2               	goto	l5685
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5429  000112  0E00               	movlw	0
  5430  000114  0100               	movlb	0	; () banked
  5431  000116  6FC8               	movwf	UI@i& (0+255),b
  5432  000118                     l5385:
  5433                           
  5434                           ; BSR set to: 0
  5435  000118  0E63               	movlw	99
  5436  00011A  0100               	movlb	0	; () banked
  5437  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  5438  00011E  D001               	goto	l5389
  5439  000120  D00C               	goto	l5393
  5440  000122                     l5389:
  5441                           
  5442                           ; BSR set to: 0
  5443  000122  0E68               	movlw	104
  5444  000124  0100               	movlb	0	; () banked
  5445  000126  6FC4               	movwf	??_UI& (0+255),b
  5446  000128  0EE4               	movlw	228
  5447  00012A                     u5247:
  5448  00012A  2EE8               	decfsz	wreg,f,c
  5449  00012C  D7FE               	bra	u5247
  5450  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  5451  000130  D7FC               	bra	u5247
  5452  000132  F000               	nop	
  5453  000134  0100               	movlb	0	; () banked
  5454  000136  2BC8               	incf	UI@i& (0+255),f,b
  5455  000138  D7EF               	goto	l5385
  5456  00013A                     l5393:
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;UI.c: 94: if(cur_state == 0){
  5460  00013A  0100               	movlb	0	; () banked
  5461  00013C  51DB               	movf	_cur_state& (0+255),w,b
  5462  00013E  0100               	movlb	0	; () banked
  5463  000140  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
  5464  000142  A4D8               	btfss	status,2,c
  5465  000144  D398               	goto	l5685
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;UI.c: 95: printRTC();
  5469  000146  EC15  F008         	call	_printRTC	;wreg free
  5470                           
  5471                           ;UI.c: 96: }
  5472                           ;UI.c: 97: }
  5473                           ;UI.c: 98: while(logstate){
  5474  00014A  D395               	goto	l5685
  5475  00014C                     l5397:
  5476                           
  5477                           ;UI.c: 100: if(!log_completion){
  5478  00014C  0100               	movlb	0	; () banked
  5479  00014E  51E9               	movf	_log_completion& (0+255),w,b
  5480  000150  0100               	movlb	0	; () banked
  5481  000152  11EA               	iorwf	(_log_completion+1)& (0+255),w,b
  5482  000154  A4D8               	btfss	status,2,c
  5483  000156  D027               	goto	l5411
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5487  000158  0E01               	movlw	1
  5488  00015A  EC3D  F019         	call	_lcdInst
  5489  00015E  0E68               	movlw	104
  5490  000160  0100               	movlb	0	; () banked
  5491  000162  6FC4               	movwf	??_UI& (0+255),b
  5492  000164  0EE4               	movlw	228
  5493  000166                     u5257:
  5494  000166  2EE8               	decfsz	wreg,f,c
  5495  000168  D7FE               	bra	u5257
  5496  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  5497  00016C  D7FC               	bra	u5257
  5498  00016E  F000               	nop	
  5499                           
  5500                           ;UI.c: 102: lcdInst(0b10000000);;
  5501  000170  0E80               	movlw	128
  5502  000172  EC3D  F019         	call	_lcdInst
  5503                           
  5504                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  5505  000176  0E01               	movlw	low STR_3
  5506  000178  0100               	movlb	0	; () banked
  5507  00017A  6F8E               	movwf	printf@f& (0+255),b
  5508  00017C  0EFE               	movlw	high STR_3
  5509  00017E  0100               	movlb	0	; () banked
  5510  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  5511  000182  C0E7  F090         	movff	_log,?_printf+2
  5512  000186  C0E8  F091         	movff	_log+1,?_printf+3
  5513  00018A  EC42  F004         	call	_printf	;wreg free
  5514                           
  5515                           ;UI.c: 104: lcdInst(0b11000000);;
  5516  00018E  0EC0               	movlw	192
  5517  000190  EC3D  F019         	call	_lcdInst
  5518                           
  5519                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  5520  000194  0E68               	movlw	low STR_4
  5521  000196  0100               	movlb	0	; () banked
  5522  000198  6F8E               	movwf	printf@f& (0+255),b
  5523  00019A  0EFF               	movlw	high STR_4
  5524  00019C  0100               	movlb	0	; () banked
  5525  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5526  0001A0  EC42  F004         	call	_printf	;wreg free
  5527                           
  5528                           ;UI.c: 106: }
  5529  0001A4  D368               	goto	l5685
  5530  0001A6                     l5411:
  5531                           
  5532                           ;UI.c: 107: else{
  5533                           ;UI.c: 108: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5534  0001A6  0E01               	movlw	1
  5535  0001A8  EC3D  F019         	call	_lcdInst
  5536  0001AC  0E68               	movlw	104
  5537  0001AE  0100               	movlb	0	; () banked
  5538  0001B0  6FC4               	movwf	??_UI& (0+255),b
  5539  0001B2  0EE4               	movlw	228
  5540  0001B4                     u5267:
  5541  0001B4  2EE8               	decfsz	wreg,f,c
  5542  0001B6  D7FE               	bra	u5267
  5543  0001B8  2FC4               	decfsz	??_UI& (0+255),f,b
  5544  0001BA  D7FC               	bra	u5267
  5545  0001BC  F000               	nop	
  5546                           
  5547                           ;UI.c: 109: lcdInst(0b10000000);;
  5548  0001BE  0E80               	movlw	128
  5549  0001C0  EC3D  F019         	call	_lcdInst
  5550                           
  5551                           ;UI.c: 110: printf("-- LOG %2d HERE--", log);
  5552  0001C4  0E01               	movlw	low STR_3
  5553  0001C6  0100               	movlb	0	; () banked
  5554  0001C8  6F8E               	movwf	printf@f& (0+255),b
  5555  0001CA  0EFE               	movlw	high STR_3
  5556  0001CC  0100               	movlb	0	; () banked
  5557  0001CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  5558  0001D0  C0E7  F090         	movff	_log,?_printf+2
  5559  0001D4  C0E8  F091         	movff	_log+1,?_printf+3
  5560  0001D8  EC42  F004         	call	_printf	;wreg free
  5561                           
  5562                           ;UI.c: 111: lcdInst(0b11000000);;
  5563  0001DC  0EC0               	movlw	192
  5564  0001DE  EC3D  F019         	call	_lcdInst
  5565                           
  5566                           ;UI.c: 112: printf("PAUSE < | BACK >");
  5567  0001E2  0E46               	movlw	low STR_6
  5568  0001E4  0100               	movlb	0	; () banked
  5569  0001E6  6F8E               	movwf	printf@f& (0+255),b
  5570  0001E8  0EFF               	movlw	high STR_6
  5571  0001EA  0100               	movlb	0	; () banked
  5572  0001EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  5573  0001EE  EC42  F004         	call	_printf	;wreg free
  5574                           
  5575                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5576  0001F2  0E00               	movlw	0
  5577  0001F4  0100               	movlb	0	; () banked
  5578  0001F6  6FC9               	movwf	UI@i_505& (0+255),b
  5579  0001F8                     l5425:
  5580                           
  5581                           ; BSR set to: 0
  5582  0001F8  0E63               	movlw	99
  5583  0001FA  0100               	movlb	0	; () banked
  5584  0001FC  65C9               	cpfsgt	UI@i_505& (0+255),b
  5585  0001FE  D001               	goto	l5429
  5586  000200  D00C               	goto	l5433
  5587  000202                     l5429:
  5588                           
  5589                           ; BSR set to: 0
  5590  000202  0E68               	movlw	104
  5591  000204  0100               	movlb	0	; () banked
  5592  000206  6FC4               	movwf	??_UI& (0+255),b
  5593  000208  0EE4               	movlw	228
  5594  00020A                     u5277:
  5595  00020A  2EE8               	decfsz	wreg,f,c
  5596  00020C  D7FE               	bra	u5277
  5597  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  5598  000210  D7FC               	bra	u5277
  5599  000212  F000               	nop	
  5600  000214  0100               	movlb	0	; () banked
  5601  000216  2BC9               	incf	UI@i_505& (0+255),f,b
  5602  000218  D7EF               	goto	l5425
  5603  00021A                     l5433:
  5604                           
  5605                           ; BSR set to: 0
  5606  00021A  0100               	movlb	0	; () banked
  5607  00021C  51F7               	movf	_logstate& (0+255),w,b
  5608  00021E  0100               	movlb	0	; () banked
  5609  000220  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5610  000222  B4D8               	btfsc	status,2,c
  5611  000224  0012               	return	
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;UI.c: 115: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5615                           
  5616                           ; BSR set to: 0
  5617                           
  5618                           ; BSR set to: 0
  5619  000226  0E00               	movlw	0
  5620  000228  0100               	movlb	0	; () banked
  5621  00022A  6FCA               	movwf	UI@i_506& (0+255),b
  5622  00022C                     l5439:
  5623                           
  5624                           ; BSR set to: 0
  5625  00022C  0E63               	movlw	99
  5626  00022E  0100               	movlb	0	; () banked
  5627  000230  65CA               	cpfsgt	UI@i_506& (0+255),b
  5628  000232  D001               	goto	l5443
  5629  000234  D00C               	goto	l5447
  5630  000236                     l5443:
  5631                           
  5632                           ; BSR set to: 0
  5633  000236  0E68               	movlw	104
  5634  000238  0100               	movlb	0	; () banked
  5635  00023A  6FC4               	movwf	??_UI& (0+255),b
  5636  00023C  0EE4               	movlw	228
  5637  00023E                     u5287:
  5638  00023E  2EE8               	decfsz	wreg,f,c
  5639  000240  D7FE               	bra	u5287
  5640  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  5641  000244  D7FC               	bra	u5287
  5642  000246  F000               	nop	
  5643  000248  0100               	movlb	0	; () banked
  5644  00024A  2BCA               	incf	UI@i_506& (0+255),f,b
  5645  00024C  D7EF               	goto	l5439
  5646  00024E                     l5447:
  5647                           
  5648                           ; BSR set to: 0
  5649  00024E  0100               	movlb	0	; () banked
  5650  000250  51F7               	movf	_logstate& (0+255),w,b
  5651  000252  0100               	movlb	0	; () banked
  5652  000254  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5653  000256  B4D8               	btfsc	status,2,c
  5654  000258  0012               	return	
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;UI.c: 117: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5658                           
  5659                           ; BSR set to: 0
  5660                           
  5661                           ; BSR set to: 0
  5662  00025A  0E01               	movlw	1
  5663  00025C  EC3D  F019         	call	_lcdInst
  5664  000260  0E68               	movlw	104
  5665  000262  0100               	movlb	0	; () banked
  5666  000264  6FC4               	movwf	??_UI& (0+255),b
  5667  000266  0EE4               	movlw	228
  5668  000268                     u5297:
  5669  000268  2EE8               	decfsz	wreg,f,c
  5670  00026A  D7FE               	bra	u5297
  5671  00026C  2FC4               	decfsz	??_UI& (0+255),f,b
  5672  00026E  D7FC               	bra	u5297
  5673  000270  F000               	nop	
  5674                           
  5675                           ;UI.c: 118: lcdInst(0b10000000);;
  5676  000272  0E80               	movlw	128
  5677  000274  EC3D  F019         	call	_lcdInst
  5678                           
  5679                           ;UI.c: 119: printf("START:");
  5680  000278  0EC4               	movlw	low STR_7
  5681  00027A  0100               	movlb	0	; () banked
  5682  00027C  6F8E               	movwf	printf@f& (0+255),b
  5683  00027E  0EFF               	movlw	high STR_7
  5684  000280  0100               	movlb	0	; () banked
  5685  000282  6F8F               	movwf	(printf@f+1)& (0+255),b
  5686  000284  EC42  F004         	call	_printf	;wreg free
  5687                           
  5688                           ;UI.c: 120: lcdInst(0b11000000);;
  5689  000288  0EC0               	movlw	192
  5690  00028A  EC3D  F019         	call	_lcdInst
  5691                           
  5692                           ;UI.c: 121: char month[] = "MMM";
  5693  00028E  C128  F0D5         	movff	UI@F3220,UI@month
  5694  000292  C129  F0D6         	movff	UI@F3220+1,UI@month+1
  5695  000296  C12A  F0D7         	movff	UI@F3220+2,UI@month+2
  5696  00029A  C12B  F0D8         	movff	UI@F3220+3,UI@month+3
  5697                           
  5698                           ;UI.c: 122: switch(log_startTime[5]){
  5699  00029E  D0C3               	goto	l5491
  5700  0002A0                     l5463:
  5701                           
  5702                           ;UI.c: 124: strcpy(month, "JAN");
  5703  0002A0  0ED5               	movlw	low UI@month
  5704  0002A2  0100               	movlb	0	; () banked
  5705  0002A4  6F80               	movwf	strcpy@to& (0+255),b
  5706  0002A6  0E00               	movlw	high UI@month
  5707  0002A8  0100               	movlb	0	; () banked
  5708  0002AA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5709  0002AC  0EDB               	movlw	low STR_8
  5710  0002AE  0100               	movlb	0	; () banked
  5711  0002B0  6F82               	movwf	strcpy@from& (0+255),b
  5712  0002B2  0EFF               	movlw	high STR_8
  5713  0002B4  0100               	movlb	0	; () banked
  5714  0002B6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5715  0002B8  ECD2  F016         	call	_strcpy	;wreg free
  5716                           
  5717                           ;UI.c: 125: break;
  5718  0002BC  D0E6               	goto	l5493
  5719  0002BE                     l5465:
  5720                           
  5721                           ;UI.c: 127: strcpy(month, "FEB");
  5722  0002BE  0ED5               	movlw	low UI@month
  5723  0002C0  0100               	movlb	0	; () banked
  5724  0002C2  6F80               	movwf	strcpy@to& (0+255),b
  5725  0002C4  0E00               	movlw	high UI@month
  5726  0002C6  0100               	movlb	0	; () banked
  5727  0002C8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5728  0002CA  0ECB               	movlw	low STR_9
  5729  0002CC  0100               	movlb	0	; () banked
  5730  0002CE  6F82               	movwf	strcpy@from& (0+255),b
  5731  0002D0  0EFF               	movlw	high STR_9
  5732  0002D2  0100               	movlb	0	; () banked
  5733  0002D4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5734  0002D6  ECD2  F016         	call	_strcpy	;wreg free
  5735                           
  5736                           ;UI.c: 128: break;
  5737  0002DA  D0D7               	goto	l5493
  5738  0002DC                     l5467:
  5739                           
  5740                           ;UI.c: 130: strcpy(month, "MAR");
  5741  0002DC  0ED5               	movlw	low UI@month
  5742  0002DE  0100               	movlb	0	; () banked
  5743  0002E0  6F80               	movwf	strcpy@to& (0+255),b
  5744  0002E2  0E00               	movlw	high UI@month
  5745  0002E4  0100               	movlb	0	; () banked
  5746  0002E6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5747  0002E8  0EE7               	movlw	low STR_10
  5748  0002EA  0100               	movlb	0	; () banked
  5749  0002EC  6F82               	movwf	strcpy@from& (0+255),b
  5750  0002EE  0EFF               	movlw	high STR_10
  5751  0002F0  0100               	movlb	0	; () banked
  5752  0002F2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5753  0002F4  ECD2  F016         	call	_strcpy	;wreg free
  5754                           
  5755                           ;UI.c: 131: break;
  5756  0002F8  D0C8               	goto	l5493
  5757  0002FA                     l5469:
  5758                           
  5759                           ;UI.c: 133: strcpy(month, "APR");
  5760  0002FA  0ED5               	movlw	low UI@month
  5761  0002FC  0100               	movlb	0	; () banked
  5762  0002FE  6F80               	movwf	strcpy@to& (0+255),b
  5763  000300  0E00               	movlw	high UI@month
  5764  000302  0100               	movlb	0	; () banked
  5765  000304  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5766  000306  0EEB               	movlw	low STR_11
  5767  000308  0100               	movlb	0	; () banked
  5768  00030A  6F82               	movwf	strcpy@from& (0+255),b
  5769  00030C  0EFF               	movlw	high STR_11
  5770  00030E  0100               	movlb	0	; () banked
  5771  000310  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5772  000312  ECD2  F016         	call	_strcpy	;wreg free
  5773                           
  5774                           ;UI.c: 134: break;
  5775  000316  D0B9               	goto	l5493
  5776  000318                     l5471:
  5777                           
  5778                           ;UI.c: 136: strcpy(month, "MAY");
  5779  000318  0ED5               	movlw	low UI@month
  5780  00031A  0100               	movlb	0	; () banked
  5781  00031C  6F80               	movwf	strcpy@to& (0+255),b
  5782  00031E  0E00               	movlw	high UI@month
  5783  000320  0100               	movlb	0	; () banked
  5784  000322  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5785  000324  0EFB               	movlw	low STR_12
  5786  000326  0100               	movlb	0	; () banked
  5787  000328  6F82               	movwf	strcpy@from& (0+255),b
  5788  00032A  0EFF               	movlw	high STR_12
  5789  00032C  0100               	movlb	0	; () banked
  5790  00032E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5791  000330  ECD2  F016         	call	_strcpy	;wreg free
  5792                           
  5793                           ;UI.c: 137: break;
  5794  000334  D0AA               	goto	l5493
  5795  000336                     l5473:
  5796                           
  5797                           ;UI.c: 139: strcpy(month, "JUN");
  5798  000336  0ED5               	movlw	low UI@month
  5799  000338  0100               	movlb	0	; () banked
  5800  00033A  6F80               	movwf	strcpy@to& (0+255),b
  5801  00033C  0E00               	movlw	high UI@month
  5802  00033E  0100               	movlb	0	; () banked
  5803  000340  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5804  000342  0EDF               	movlw	low STR_13
  5805  000344  0100               	movlb	0	; () banked
  5806  000346  6F82               	movwf	strcpy@from& (0+255),b
  5807  000348  0EFF               	movlw	high STR_13
  5808  00034A  0100               	movlb	0	; () banked
  5809  00034C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5810  00034E  ECD2  F016         	call	_strcpy	;wreg free
  5811                           
  5812                           ;UI.c: 140: break;
  5813  000352  D09B               	goto	l5493
  5814  000354                     l5475:
  5815                           
  5816                           ;UI.c: 142: strcpy(month, "JUL");
  5817  000354  0ED5               	movlw	low UI@month
  5818  000356  0100               	movlb	0	; () banked
  5819  000358  6F80               	movwf	strcpy@to& (0+255),b
  5820  00035A  0E00               	movlw	high UI@month
  5821  00035C  0100               	movlb	0	; () banked
  5822  00035E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5823  000360  0ED7               	movlw	low STR_14
  5824  000362  0100               	movlb	0	; () banked
  5825  000364  6F82               	movwf	strcpy@from& (0+255),b
  5826  000366  0EFF               	movlw	high STR_14
  5827  000368  0100               	movlb	0	; () banked
  5828  00036A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5829  00036C  ECD2  F016         	call	_strcpy	;wreg free
  5830                           
  5831                           ;UI.c: 143: break;
  5832  000370  D08C               	goto	l5493
  5833  000372                     l5477:
  5834                           
  5835                           ;UI.c: 145: strcpy(month, "AUG");
  5836  000372  0ED5               	movlw	low UI@month
  5837  000374  0100               	movlb	0	; () banked
  5838  000376  6F80               	movwf	strcpy@to& (0+255),b
  5839  000378  0E00               	movlw	high UI@month
  5840  00037A  0100               	movlb	0	; () banked
  5841  00037C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5842  00037E  0ED3               	movlw	low STR_15
  5843  000380  0100               	movlb	0	; () banked
  5844  000382  6F82               	movwf	strcpy@from& (0+255),b
  5845  000384  0EFF               	movlw	high STR_15
  5846  000386  0100               	movlb	0	; () banked
  5847  000388  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5848  00038A  ECD2  F016         	call	_strcpy	;wreg free
  5849                           
  5850                           ;UI.c: 146: break;
  5851  00038E  D07D               	goto	l5493
  5852  000390                     l5479:
  5853                           
  5854                           ;UI.c: 148: strcpy(month, "SEP");
  5855  000390  0ED5               	movlw	low UI@month
  5856  000392  0100               	movlb	0	; () banked
  5857  000394  6F80               	movwf	strcpy@to& (0+255),b
  5858  000396  0E00               	movlw	high UI@month
  5859  000398  0100               	movlb	0	; () banked
  5860  00039A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5861  00039C  0EE3               	movlw	low STR_16
  5862  00039E  0100               	movlb	0	; () banked
  5863  0003A0  6F82               	movwf	strcpy@from& (0+255),b
  5864  0003A2  0EFF               	movlw	high STR_16
  5865  0003A4  0100               	movlb	0	; () banked
  5866  0003A6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5867  0003A8  ECD2  F016         	call	_strcpy	;wreg free
  5868                           
  5869                           ;UI.c: 149: break;
  5870  0003AC  D06E               	goto	l5493
  5871  0003AE                     l5481:
  5872                           
  5873                           ;UI.c: 151: strcpy(month, "OCT");
  5874  0003AE  0ED5               	movlw	low UI@month
  5875  0003B0  0100               	movlb	0	; () banked
  5876  0003B2  6F80               	movwf	strcpy@to& (0+255),b
  5877  0003B4  0E00               	movlw	high UI@month
  5878  0003B6  0100               	movlb	0	; () banked
  5879  0003B8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5880  0003BA  0EF3               	movlw	low STR_17
  5881  0003BC  0100               	movlb	0	; () banked
  5882  0003BE  6F82               	movwf	strcpy@from& (0+255),b
  5883  0003C0  0EFF               	movlw	high STR_17
  5884  0003C2  0100               	movlb	0	; () banked
  5885  0003C4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5886  0003C6  ECD2  F016         	call	_strcpy	;wreg free
  5887                           
  5888                           ;UI.c: 152: break;
  5889  0003CA  D05F               	goto	l5493
  5890  0003CC                     l5483:
  5891                           
  5892                           ;UI.c: 154: strcpy(month, "NOV");
  5893  0003CC  0ED5               	movlw	low UI@month
  5894  0003CE  0100               	movlb	0	; () banked
  5895  0003D0  6F80               	movwf	strcpy@to& (0+255),b
  5896  0003D2  0E00               	movlw	high UI@month
  5897  0003D4  0100               	movlb	0	; () banked
  5898  0003D6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5899  0003D8  0EF7               	movlw	low STR_18
  5900  0003DA  0100               	movlb	0	; () banked
  5901  0003DC  6F82               	movwf	strcpy@from& (0+255),b
  5902  0003DE  0EFF               	movlw	high STR_18
  5903  0003E0  0100               	movlb	0	; () banked
  5904  0003E2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5905  0003E4  ECD2  F016         	call	_strcpy	;wreg free
  5906                           
  5907                           ;UI.c: 155: break;
  5908  0003E8  D050               	goto	l5493
  5909  0003EA                     l5485:
  5910                           
  5911                           ;UI.c: 157: strcpy(month, "DEC");
  5912  0003EA  0ED5               	movlw	low UI@month
  5913  0003EC  0100               	movlb	0	; () banked
  5914  0003EE  6F80               	movwf	strcpy@to& (0+255),b
  5915  0003F0  0E00               	movlw	high UI@month
  5916  0003F2  0100               	movlb	0	; () banked
  5917  0003F4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5918  0003F6  0ECF               	movlw	low STR_19
  5919  0003F8  0100               	movlb	0	; () banked
  5920  0003FA  6F82               	movwf	strcpy@from& (0+255),b
  5921  0003FC  0EFF               	movlw	high STR_19
  5922  0003FE  0100               	movlb	0	; () banked
  5923  000400  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5924  000402  ECD2  F016         	call	_strcpy	;wreg free
  5925                           
  5926                           ;UI.c: 158: break;
  5927  000406  D041               	goto	l5493
  5928  000408                     l5487:
  5929                           
  5930                           ;UI.c: 160: strcpy(month, "ERR");
  5931  000408  0ED5               	movlw	low UI@month
  5932  00040A  0100               	movlb	0	; () banked
  5933  00040C  6F80               	movwf	strcpy@to& (0+255),b
  5934  00040E  0E00               	movlw	high UI@month
  5935  000410  0100               	movlb	0	; () banked
  5936  000412  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5937  000414  0EEF               	movlw	low STR_20
  5938  000416  0100               	movlb	0	; () banked
  5939  000418  6F82               	movwf	strcpy@from& (0+255),b
  5940  00041A  0EFF               	movlw	high STR_20
  5941  00041C  0100               	movlb	0	; () banked
  5942  00041E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5943  000420  ECD2  F016         	call	_strcpy	;wreg free
  5944                           
  5945                           ;UI.c: 162: }
  5946                           
  5947                           ;UI.c: 161: break;
  5948  000424  D032               	goto	l5493
  5949  000426                     l5491:
  5950  000426  EE21  F00A         	lfsr	2,_log_startTime+10
  5951  00042A  CFDE F0C4          	movff	postinc2,??_UI
  5952  00042E  CFDD F0C5          	movff	postdec2,??_UI+1
  5953                           
  5954                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5955                           ; Switch size 1, requested type "space"
  5956                           ; Number of cases is 1, Range of values is 0 to 0
  5957                           ; switch strategies available:
  5958                           ; Name         Instructions Cycles
  5959                           ; simple_byte            4     3 (average)
  5960                           ;	Chosen strategy is simple_byte
  5961  000432  0100               	movlb	0	; () banked
  5962  000434  51C5               	movf	(??_UI+1)& (0+255),w,b
  5963  000436  0A00               	xorlw	0	; case 0
  5964  000438  A4D8               	btfss	status,2,c
  5965  00043A  D7E6               	goto	l5487
  5966                           
  5967                           ; BSR set to: 0
  5968                           ; Switch size 1, requested type "space"
  5969                           ; Number of cases is 12, Range of values is 1 to 12
  5970                           ; switch strategies available:
  5971                           ; Name         Instructions Cycles
  5972                           ; simple_byte           37    19 (average)
  5973                           ;	Chosen strategy is simple_byte
  5974  00043C  0100               	movlb	0	; () banked
  5975  00043E  51C4               	movf	??_UI& (0+255),w,b
  5976  000440  0A01               	xorlw	1	; case 1
  5977  000442  B4D8               	btfsc	status,2,c
  5978  000444  D72D               	goto	l5463
  5979  000446  0A03               	xorlw	3	; case 2
  5980  000448  B4D8               	btfsc	status,2,c
  5981  00044A  D739               	goto	l5465
  5982  00044C  0A01               	xorlw	1	; case 3
  5983  00044E  B4D8               	btfsc	status,2,c
  5984  000450  D745               	goto	l5467
  5985  000452  0A07               	xorlw	7	; case 4
  5986  000454  B4D8               	btfsc	status,2,c
  5987  000456  D751               	goto	l5469
  5988  000458  0A01               	xorlw	1	; case 5
  5989  00045A  B4D8               	btfsc	status,2,c
  5990  00045C  D75D               	goto	l5471
  5991  00045E  0A03               	xorlw	3	; case 6
  5992  000460  B4D8               	btfsc	status,2,c
  5993  000462  D769               	goto	l5473
  5994  000464  0A01               	xorlw	1	; case 7
  5995  000466  B4D8               	btfsc	status,2,c
  5996  000468  D775               	goto	l5475
  5997  00046A  0A0F               	xorlw	15	; case 8
  5998  00046C  B4D8               	btfsc	status,2,c
  5999  00046E  D781               	goto	l5477
  6000  000470  0A01               	xorlw	1	; case 9
  6001  000472  B4D8               	btfsc	status,2,c
  6002  000474  D78D               	goto	l5479
  6003  000476  0A03               	xorlw	3	; case 10
  6004  000478  B4D8               	btfsc	status,2,c
  6005  00047A  D799               	goto	l5481
  6006  00047C  0A01               	xorlw	1	; case 11
  6007  00047E  B4D8               	btfsc	status,2,c
  6008  000480  D7A5               	goto	l5483
  6009  000482  0A07               	xorlw	7	; case 12
  6010  000484  B4D8               	btfsc	status,2,c
  6011  000486  D7B1               	goto	l5485
  6012  000488  D7BF               	goto	l5487
  6013  00048A                     l5493:
  6014                           
  6015                           ;UI.c: 163: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6016  00048A  0EAE               	movlw	low STR_21
  6017  00048C  0100               	movlb	0	; () banked
  6018  00048E  6F8E               	movwf	printf@f& (0+255),b
  6019  000490  0EFD               	movlw	high STR_21
  6020  000492  0100               	movlb	0	; () banked
  6021  000494  6F8F               	movwf	(printf@f+1)& (0+255),b
  6022  000496  C108  F090         	movff	_log_startTime+8,?_printf+2
  6023  00049A  C109  F091         	movff	_log_startTime+9,?_printf+3
  6024  00049E  0ED5               	movlw	low UI@month
  6025  0004A0  0100               	movlb	0	; () banked
  6026  0004A2  6F92               	movwf	(?_printf+4)& (0+255),b
  6027  0004A4  0E00               	movlw	high UI@month
  6028  0004A6  0100               	movlb	0	; () banked
  6029  0004A8  6F93               	movwf	(?_printf+5)& (0+255),b
  6030  0004AA  C104  F094         	movff	_log_startTime+4,?_printf+6
  6031  0004AE  C105  F095         	movff	_log_startTime+5,?_printf+7
  6032  0004B2  C102  F096         	movff	_log_startTime+2,?_printf+8
  6033  0004B6  C103  F097         	movff	_log_startTime+3,?_printf+9
  6034  0004BA  C100  F098         	movff	_log_startTime,?_printf+10
  6035  0004BE  C101  F099         	movff	_log_startTime+1,?_printf+11
  6036  0004C2  EC42  F004         	call	_printf	;wreg free
  6037                           
  6038                           ;UI.c: 165: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6039  0004C6  0E00               	movlw	0
  6040  0004C8  0100               	movlb	0	; () banked
  6041  0004CA  6FCB               	movwf	UI@i_524& (0+255),b
  6042  0004CC                     l5497:
  6043                           
  6044                           ; BSR set to: 0
  6045  0004CC  0E63               	movlw	99
  6046  0004CE  0100               	movlb	0	; () banked
  6047  0004D0  65CB               	cpfsgt	UI@i_524& (0+255),b
  6048  0004D2  D001               	goto	l5501
  6049  0004D4  D00C               	goto	l5505
  6050  0004D6                     l5501:
  6051                           
  6052                           ; BSR set to: 0
  6053  0004D6  0E68               	movlw	104
  6054  0004D8  0100               	movlb	0	; () banked
  6055  0004DA  6FC4               	movwf	??_UI& (0+255),b
  6056  0004DC  0EE4               	movlw	228
  6057  0004DE                     u5307:
  6058  0004DE  2EE8               	decfsz	wreg,f,c
  6059  0004E0  D7FE               	bra	u5307
  6060  0004E2  2FC4               	decfsz	??_UI& (0+255),f,b
  6061  0004E4  D7FC               	bra	u5307
  6062  0004E6  F000               	nop	
  6063  0004E8  0100               	movlb	0	; () banked
  6064  0004EA  2BCB               	incf	UI@i_524& (0+255),f,b
  6065  0004EC  D7EF               	goto	l5497
  6066  0004EE                     l5505:
  6067                           
  6068                           ; BSR set to: 0
  6069  0004EE  0100               	movlb	0	; () banked
  6070  0004F0  51F7               	movf	_logstate& (0+255),w,b
  6071  0004F2  0100               	movlb	0	; () banked
  6072  0004F4  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6073  0004F6  B4D8               	btfsc	status,2,c
  6074  0004F8  0012               	return	
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;UI.c: 166: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6078                           
  6079                           ; BSR set to: 0
  6080                           
  6081                           ; BSR set to: 0
  6082  0004FA  0E00               	movlw	0
  6083  0004FC  0100               	movlb	0	; () banked
  6084  0004FE  6FCC               	movwf	UI@i_525& (0+255),b
  6085  000500                     l5511:
  6086                           
  6087                           ; BSR set to: 0
  6088  000500  0E63               	movlw	99
  6089  000502  0100               	movlb	0	; () banked
  6090  000504  65CC               	cpfsgt	UI@i_525& (0+255),b
  6091  000506  D001               	goto	l5515
  6092  000508  D00C               	goto	l5519
  6093  00050A                     l5515:
  6094                           
  6095                           ; BSR set to: 0
  6096  00050A  0E68               	movlw	104
  6097  00050C  0100               	movlb	0	; () banked
  6098  00050E  6FC4               	movwf	??_UI& (0+255),b
  6099  000510  0EE4               	movlw	228
  6100  000512                     u5317:
  6101  000512  2EE8               	decfsz	wreg,f,c
  6102  000514  D7FE               	bra	u5317
  6103  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6104  000518  D7FC               	bra	u5317
  6105  00051A  F000               	nop	
  6106  00051C  0100               	movlb	0	; () banked
  6107  00051E  2BCC               	incf	UI@i_525& (0+255),f,b
  6108  000520  D7EF               	goto	l5511
  6109  000522                     l5519:
  6110                           
  6111                           ; BSR set to: 0
  6112  000522  0100               	movlb	0	; () banked
  6113  000524  51F7               	movf	_logstate& (0+255),w,b
  6114  000526  0100               	movlb	0	; () banked
  6115  000528  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6116  00052A  B4D8               	btfsc	status,2,c
  6117  00052C  0012               	return	
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;UI.c: 168: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6121                           
  6122                           ; BSR set to: 0
  6123                           
  6124                           ; BSR set to: 0
  6125  00052E  0E01               	movlw	1
  6126  000530  EC3D  F019         	call	_lcdInst
  6127  000534  0E68               	movlw	104
  6128  000536  0100               	movlb	0	; () banked
  6129  000538  6FC4               	movwf	??_UI& (0+255),b
  6130  00053A  0EE4               	movlw	228
  6131  00053C                     u5327:
  6132  00053C  2EE8               	decfsz	wreg,f,c
  6133  00053E  D7FE               	bra	u5327
  6134  000540  2FC4               	decfsz	??_UI& (0+255),f,b
  6135  000542  D7FC               	bra	u5327
  6136  000544  F000               	nop	
  6137                           
  6138                           ;UI.c: 169: lcdInst(0b10000000);;
  6139  000546  0E80               	movlw	128
  6140  000548  EC3D  F019         	call	_lcdInst
  6141                           
  6142                           ;UI.c: 170: printf("DURATION:");
  6143  00054C  0EAC               	movlw	low STR_22
  6144  00054E  0100               	movlb	0	; () banked
  6145  000550  6F8E               	movwf	printf@f& (0+255),b
  6146  000552  0EFF               	movlw	high STR_22
  6147  000554  0100               	movlb	0	; () banked
  6148  000556  6F8F               	movwf	(printf@f+1)& (0+255),b
  6149  000558  EC42  F004         	call	_printf	;wreg free
  6150                           
  6151                           ;UI.c: 171: lcdInst(0b11000000);;
  6152  00055C  0EC0               	movlw	192
  6153  00055E  EC3D  F019         	call	_lcdInst
  6154                           
  6155                           ;UI.c: 172: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6156  000562  0E0E               	movlw	14
  6157  000564  0100               	movlb	0	; () banked
  6158  000566  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6159  000568  0E10               	movlw	16
  6160  00056A  6F82               	movwf	___awmod@divisor& (0+255),b
  6161  00056C  C0F5  F080         	movff	_log_total_time,___awmod@dividend
  6162  000570  C0F6  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6163  000574  ECC4  F012         	call	___awmod	;wreg free
  6164  000578  C080  F0C6         	movff	?___awmod,_UI$1992
  6165  00057C  C081  F0C7         	movff	?___awmod+1,_UI$1992+1
  6166                           
  6167                           ;UI.c: 172: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6168  000580  0E78               	movlw	low STR_23
  6169  000582  0100               	movlb	0	; () banked
  6170  000584  6F8E               	movwf	printf@f& (0+255),b
  6171  000586  0EFF               	movlw	high STR_23
  6172  000588  0100               	movlb	0	; () banked
  6173  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6174  00058C  0E0E               	movlw	14
  6175  00058E  0100               	movlb	0	; () banked
  6176  000590  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6177  000592  0E10               	movlw	16
  6178  000594  6F82               	movwf	___awmod@divisor& (0+255),b
  6179  000596  C0F5  F080         	movff	_log_total_time,___awmod@dividend
  6180  00059A  C0F6  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6181  00059E  ECC4  F012         	call	___awmod	;wreg free
  6182  0005A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6183  0005A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6184  0005AA  0E00               	movlw	0
  6185  0005AC  0100               	movlb	0	; () banked
  6186  0005AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6187  0005B0  0E3C               	movlw	60
  6188  0005B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  6189  0005B4  EC5C  F011         	call	___awdiv	;wreg free
  6190  0005B8  C086  F090         	movff	?___awdiv,?_printf+2
  6191  0005BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  6192  0005C0  C0C6  F080         	movff	_UI$1992,___awmod@dividend
  6193  0005C4  C0C7  F081         	movff	_UI$1992+1,___awmod@dividend+1
  6194  0005C8  0E00               	movlw	0
  6195  0005CA  0100               	movlb	0	; () banked
  6196  0005CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6197  0005CE  0E3C               	movlw	60
  6198  0005D0  6F82               	movwf	___awmod@divisor& (0+255),b
  6199  0005D2  ECC4  F012         	call	___awmod	;wreg free
  6200  0005D6  C080  F092         	movff	?___awmod,?_printf+4
  6201  0005DA  C081  F093         	movff	?___awmod+1,?_printf+5
  6202  0005DE  EC42  F004         	call	_printf	;wreg free
  6203                           
  6204                           ;UI.c: 174: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6205  0005E2  0E00               	movlw	0
  6206  0005E4  0100               	movlb	0	; () banked
  6207  0005E6  6FCD               	movwf	UI@i_528& (0+255),b
  6208  0005E8                     l5539:
  6209                           
  6210                           ; BSR set to: 0
  6211  0005E8  0E63               	movlw	99
  6212  0005EA  0100               	movlb	0	; () banked
  6213  0005EC  65CD               	cpfsgt	UI@i_528& (0+255),b
  6214  0005EE  D001               	goto	l5543
  6215  0005F0  D00C               	goto	l5547
  6216  0005F2                     l5543:
  6217                           
  6218                           ; BSR set to: 0
  6219  0005F2  0E68               	movlw	104
  6220  0005F4  0100               	movlb	0	; () banked
  6221  0005F6  6FC4               	movwf	??_UI& (0+255),b
  6222  0005F8  0EE4               	movlw	228
  6223  0005FA                     u5337:
  6224  0005FA  2EE8               	decfsz	wreg,f,c
  6225  0005FC  D7FE               	bra	u5337
  6226  0005FE  2FC4               	decfsz	??_UI& (0+255),f,b
  6227  000600  D7FC               	bra	u5337
  6228  000602  F000               	nop	
  6229  000604  0100               	movlb	0	; () banked
  6230  000606  2BCD               	incf	UI@i_528& (0+255),f,b
  6231  000608  D7EF               	goto	l5539
  6232  00060A                     l5547:
  6233                           
  6234                           ; BSR set to: 0
  6235  00060A  0100               	movlb	0	; () banked
  6236  00060C  51F7               	movf	_logstate& (0+255),w,b
  6237  00060E  0100               	movlb	0	; () banked
  6238  000610  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6239  000612  B4D8               	btfsc	status,2,c
  6240  000614  0012               	return	
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;UI.c: 175: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6244                           
  6245                           ; BSR set to: 0
  6246                           
  6247                           ; BSR set to: 0
  6248  000616  0E00               	movlw	0
  6249  000618  0100               	movlb	0	; () banked
  6250  00061A  6FCE               	movwf	UI@i_529& (0+255),b
  6251  00061C                     l5553:
  6252                           
  6253                           ; BSR set to: 0
  6254  00061C  0E63               	movlw	99
  6255  00061E  0100               	movlb	0	; () banked
  6256  000620  65CE               	cpfsgt	UI@i_529& (0+255),b
  6257  000622  D001               	goto	l5557
  6258  000624  D00C               	goto	l5561
  6259  000626                     l5557:
  6260                           
  6261                           ; BSR set to: 0
  6262  000626  0E68               	movlw	104
  6263  000628  0100               	movlb	0	; () banked
  6264  00062A  6FC4               	movwf	??_UI& (0+255),b
  6265  00062C  0EE4               	movlw	228
  6266  00062E                     u5347:
  6267  00062E  2EE8               	decfsz	wreg,f,c
  6268  000630  D7FE               	bra	u5347
  6269  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6270  000634  D7FC               	bra	u5347
  6271  000636  F000               	nop	
  6272  000638  0100               	movlb	0	; () banked
  6273  00063A  2BCE               	incf	UI@i_529& (0+255),f,b
  6274  00063C  D7EF               	goto	l5553
  6275  00063E                     l5561:
  6276                           
  6277                           ; BSR set to: 0
  6278  00063E  0100               	movlb	0	; () banked
  6279  000640  51F7               	movf	_logstate& (0+255),w,b
  6280  000642  0100               	movlb	0	; () banked
  6281  000644  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6282  000646  B4D8               	btfsc	status,2,c
  6283  000648  0012               	return	
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;UI.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6287                           
  6288                           ; BSR set to: 0
  6289                           
  6290                           ; BSR set to: 0
  6291  00064A  0E01               	movlw	1
  6292  00064C  EC3D  F019         	call	_lcdInst
  6293  000650  0E68               	movlw	104
  6294  000652  0100               	movlb	0	; () banked
  6295  000654  6FC4               	movwf	??_UI& (0+255),b
  6296  000656  0EE4               	movlw	228
  6297  000658                     u5357:
  6298  000658  2EE8               	decfsz	wreg,f,c
  6299  00065A  D7FE               	bra	u5357
  6300  00065C  2FC4               	decfsz	??_UI& (0+255),f,b
  6301  00065E  D7FC               	bra	u5357
  6302  000660  F000               	nop	
  6303                           
  6304                           ;UI.c: 178: lcdInst(0b10000000);;
  6305  000662  0E80               	movlw	128
  6306  000664  EC3D  F019         	call	_lcdInst
  6307                           
  6308                           ;UI.c: 179: printf(" -- POP  CAN -- ");
  6309  000668  0E9C               	movlw	low STR_24
  6310  00066A  0100               	movlb	0	; () banked
  6311  00066C  6F8E               	movwf	printf@f& (0+255),b
  6312  00066E  0EFE               	movlw	high STR_24
  6313  000670  0100               	movlb	0	; () banked
  6314  000672  6F8F               	movwf	(printf@f+1)& (0+255),b
  6315  000674  EC42  F004         	call	_printf	;wreg free
  6316                           
  6317                           ;UI.c: 180: lcdInst(0b11000000);;
  6318  000678  0EC0               	movlw	192
  6319  00067A  EC3D  F019         	call	_lcdInst
  6320                           
  6321                           ;UI.c: 181: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6322  00067E  0EEE               	movlw	low STR_25
  6323  000680  0100               	movlb	0	; () banked
  6324  000682  6F8E               	movwf	printf@f& (0+255),b
  6325  000684  0EFD               	movlw	high STR_25
  6326  000686  0100               	movlb	0	; () banked
  6327  000688  6F8F               	movwf	(printf@f+1)& (0+255),b
  6328  00068A  C0EF  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6329  00068E  C0F0  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6330  000692  C0F1  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6331  000696  C0F2  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6332  00069A  EC42  F004         	call	_printf	;wreg free
  6333                           
  6334                           ;UI.c: 183: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6335  00069E  0E00               	movlw	0
  6336  0006A0  0100               	movlb	0	; () banked
  6337  0006A2  6FCF               	movwf	UI@i_532& (0+255),b
  6338  0006A4                     l5579:
  6339                           
  6340                           ; BSR set to: 0
  6341  0006A4  0E63               	movlw	99
  6342  0006A6  0100               	movlb	0	; () banked
  6343  0006A8  65CF               	cpfsgt	UI@i_532& (0+255),b
  6344  0006AA  D001               	goto	l5583
  6345  0006AC  D00C               	goto	l5587
  6346  0006AE                     l5583:
  6347                           
  6348                           ; BSR set to: 0
  6349  0006AE  0E68               	movlw	104
  6350  0006B0  0100               	movlb	0	; () banked
  6351  0006B2  6FC4               	movwf	??_UI& (0+255),b
  6352  0006B4  0EE4               	movlw	228
  6353  0006B6                     u5367:
  6354  0006B6  2EE8               	decfsz	wreg,f,c
  6355  0006B8  D7FE               	bra	u5367
  6356  0006BA  2FC4               	decfsz	??_UI& (0+255),f,b
  6357  0006BC  D7FC               	bra	u5367
  6358  0006BE  F000               	nop	
  6359  0006C0  0100               	movlb	0	; () banked
  6360  0006C2  2BCF               	incf	UI@i_532& (0+255),f,b
  6361  0006C4  D7EF               	goto	l5579
  6362  0006C6                     l5587:
  6363                           
  6364                           ; BSR set to: 0
  6365  0006C6  0100               	movlb	0	; () banked
  6366  0006C8  51F7               	movf	_logstate& (0+255),w,b
  6367  0006CA  0100               	movlb	0	; () banked
  6368  0006CC  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6369  0006CE  B4D8               	btfsc	status,2,c
  6370  0006D0  0012               	return	
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;UI.c: 184: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6374                           
  6375                           ; BSR set to: 0
  6376                           
  6377                           ; BSR set to: 0
  6378  0006D2  0E00               	movlw	0
  6379  0006D4  0100               	movlb	0	; () banked
  6380  0006D6  6FD0               	movwf	UI@i_533& (0+255),b
  6381  0006D8                     l5593:
  6382                           
  6383                           ; BSR set to: 0
  6384  0006D8  0E63               	movlw	99
  6385  0006DA  0100               	movlb	0	; () banked
  6386  0006DC  65D0               	cpfsgt	UI@i_533& (0+255),b
  6387  0006DE  D001               	goto	l5597
  6388  0006E0  D00C               	goto	l5601
  6389  0006E2                     l5597:
  6390                           
  6391                           ; BSR set to: 0
  6392  0006E2  0E68               	movlw	104
  6393  0006E4  0100               	movlb	0	; () banked
  6394  0006E6  6FC4               	movwf	??_UI& (0+255),b
  6395  0006E8  0EE4               	movlw	228
  6396  0006EA                     u5377:
  6397  0006EA  2EE8               	decfsz	wreg,f,c
  6398  0006EC  D7FE               	bra	u5377
  6399  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  6400  0006F0  D7FC               	bra	u5377
  6401  0006F2  F000               	nop	
  6402  0006F4  0100               	movlb	0	; () banked
  6403  0006F6  2BD0               	incf	UI@i_533& (0+255),f,b
  6404  0006F8  D7EF               	goto	l5593
  6405  0006FA                     l5601:
  6406                           
  6407                           ; BSR set to: 0
  6408  0006FA  0100               	movlb	0	; () banked
  6409  0006FC  51F7               	movf	_logstate& (0+255),w,b
  6410  0006FE  0100               	movlb	0	; () banked
  6411  000700  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6412  000702  B4D8               	btfsc	status,2,c
  6413  000704  0012               	return	
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;UI.c: 186: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6417                           
  6418                           ; BSR set to: 0
  6419                           
  6420                           ; BSR set to: 0
  6421  000706  0E01               	movlw	1
  6422  000708  EC3D  F019         	call	_lcdInst
  6423  00070C  0E68               	movlw	104
  6424  00070E  0100               	movlb	0	; () banked
  6425  000710  6FC4               	movwf	??_UI& (0+255),b
  6426  000712  0EE4               	movlw	228
  6427  000714                     u5387:
  6428  000714  2EE8               	decfsz	wreg,f,c
  6429  000716  D7FE               	bra	u5387
  6430  000718  2FC4               	decfsz	??_UI& (0+255),f,b
  6431  00071A  D7FC               	bra	u5387
  6432  00071C  F000               	nop	
  6433                           
  6434                           ;UI.c: 187: lcdInst(0b10000000);;
  6435  00071E  0E80               	movlw	128
  6436  000720  EC3D  F019         	call	_lcdInst
  6437                           
  6438                           ;UI.c: 188: printf(" -- SOUP CAN -- ");
  6439  000724  0EAD               	movlw	low STR_26
  6440  000726  0100               	movlb	0	; () banked
  6441  000728  6F8E               	movwf	printf@f& (0+255),b
  6442  00072A  0EFE               	movlw	high STR_26
  6443  00072C  0100               	movlb	0	; () banked
  6444  00072E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6445  000730  EC42  F004         	call	_printf	;wreg free
  6446                           
  6447                           ;UI.c: 189: lcdInst(0b11000000);;
  6448  000734  0EC0               	movlw	192
  6449  000736  EC3D  F019         	call	_lcdInst
  6450                           
  6451                           ;UI.c: 190: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  6452  00073A  0EDB               	movlw	low STR_27
  6453  00073C  0100               	movlb	0	; () banked
  6454  00073E  6F8E               	movwf	printf@f& (0+255),b
  6455  000740  0EFD               	movlw	high STR_27
  6456  000742  0100               	movlb	0	; () banked
  6457  000744  6F8F               	movwf	(printf@f+1)& (0+255),b
  6458  000746  C0EB  F090         	movff	_log_count_can_no_lab,?_printf+2
  6459  00074A  C0EC  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  6460  00074E  C0ED  F092         	movff	_log_count_can_w_lab,?_printf+4
  6461  000752  C0EE  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  6462  000756  EC42  F004         	call	_printf	;wreg free
  6463                           
  6464                           ;UI.c: 192: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6465  00075A  0E00               	movlw	0
  6466  00075C  0100               	movlb	0	; () banked
  6467  00075E  6FD1               	movwf	UI@i_536& (0+255),b
  6468  000760                     l5619:
  6469                           
  6470                           ; BSR set to: 0
  6471  000760  0E63               	movlw	99
  6472  000762  0100               	movlb	0	; () banked
  6473  000764  65D1               	cpfsgt	UI@i_536& (0+255),b
  6474  000766  D001               	goto	l5623
  6475  000768  D00C               	goto	l5627
  6476  00076A                     l5623:
  6477                           
  6478                           ; BSR set to: 0
  6479  00076A  0E68               	movlw	104
  6480  00076C  0100               	movlb	0	; () banked
  6481  00076E  6FC4               	movwf	??_UI& (0+255),b
  6482  000770  0EE4               	movlw	228
  6483  000772                     u5397:
  6484  000772  2EE8               	decfsz	wreg,f,c
  6485  000774  D7FE               	bra	u5397
  6486  000776  2FC4               	decfsz	??_UI& (0+255),f,b
  6487  000778  D7FC               	bra	u5397
  6488  00077A  F000               	nop	
  6489  00077C  0100               	movlb	0	; () banked
  6490  00077E  2BD1               	incf	UI@i_536& (0+255),f,b
  6491  000780  D7EF               	goto	l5619
  6492  000782                     l5627:
  6493                           
  6494                           ; BSR set to: 0
  6495  000782  0100               	movlb	0	; () banked
  6496  000784  51F7               	movf	_logstate& (0+255),w,b
  6497  000786  0100               	movlb	0	; () banked
  6498  000788  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6499  00078A  B4D8               	btfsc	status,2,c
  6500  00078C  0012               	return	
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;UI.c: 193: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6504                           
  6505                           ; BSR set to: 0
  6506                           
  6507                           ; BSR set to: 0
  6508  00078E  0E00               	movlw	0
  6509  000790  0100               	movlb	0	; () banked
  6510  000792  6FD2               	movwf	UI@i_537& (0+255),b
  6511  000794                     l5633:
  6512                           
  6513                           ; BSR set to: 0
  6514  000794  0E63               	movlw	99
  6515  000796  0100               	movlb	0	; () banked
  6516  000798  65D2               	cpfsgt	UI@i_537& (0+255),b
  6517  00079A  D001               	goto	l5637
  6518  00079C  D00C               	goto	l5641
  6519  00079E                     l5637:
  6520                           
  6521                           ; BSR set to: 0
  6522  00079E  0E68               	movlw	104
  6523  0007A0  0100               	movlb	0	; () banked
  6524  0007A2  6FC4               	movwf	??_UI& (0+255),b
  6525  0007A4  0EE4               	movlw	228
  6526  0007A6                     u5407:
  6527  0007A6  2EE8               	decfsz	wreg,f,c
  6528  0007A8  D7FE               	bra	u5407
  6529  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  6530  0007AC  D7FC               	bra	u5407
  6531  0007AE  F000               	nop	
  6532  0007B0  0100               	movlb	0	; () banked
  6533  0007B2  2BD2               	incf	UI@i_537& (0+255),f,b
  6534  0007B4  D7EF               	goto	l5633
  6535  0007B6                     l5641:
  6536                           
  6537                           ; BSR set to: 0
  6538  0007B6  0100               	movlb	0	; () banked
  6539  0007B8  51F7               	movf	_logstate& (0+255),w,b
  6540  0007BA  0100               	movlb	0	; () banked
  6541  0007BC  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6542  0007BE  B4D8               	btfsc	status,2,c
  6543  0007C0  0012               	return	
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;UI.c: 195: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6547                           
  6548                           ; BSR set to: 0
  6549                           
  6550                           ; BSR set to: 0
  6551  0007C2  0E01               	movlw	1
  6552  0007C4  EC3D  F019         	call	_lcdInst
  6553  0007C8  0E68               	movlw	104
  6554  0007CA  0100               	movlb	0	; () banked
  6555  0007CC  6FC4               	movwf	??_UI& (0+255),b
  6556  0007CE  0EE4               	movlw	228
  6557  0007D0                     u5417:
  6558  0007D0  2EE8               	decfsz	wreg,f,c
  6559  0007D2  D7FE               	bra	u5417
  6560  0007D4  2FC4               	decfsz	??_UI& (0+255),f,b
  6561  0007D6  D7FC               	bra	u5417
  6562  0007D8  F000               	nop	
  6563                           
  6564                           ;UI.c: 196: lcdInst(0b10000000);;
  6565  0007DA  0E80               	movlw	128
  6566  0007DC  EC3D  F019         	call	_lcdInst
  6567                           
  6568                           ;UI.c: 197: printf("-- TOTAL CANS --");
  6569  0007E0  0EBE               	movlw	low STR_28
  6570  0007E2  0100               	movlb	0	; () banked
  6571  0007E4  6F8E               	movwf	printf@f& (0+255),b
  6572  0007E6  0EFE               	movlw	high STR_28
  6573  0007E8  0100               	movlb	0	; () banked
  6574  0007EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6575  0007EC  EC42  F004         	call	_printf	;wreg free
  6576                           
  6577                           ;UI.c: 198: lcdInst(0b11000000);;
  6578  0007F0  0EC0               	movlw	192
  6579  0007F2  EC3D  F019         	call	_lcdInst
  6580                           
  6581                           ;UI.c: 199: printf("%d", log_count_total);
  6582  0007F6  0EEB               	movlw	low (STR_27+16)
  6583  0007F8  0100               	movlb	0	; () banked
  6584  0007FA  6F8E               	movwf	printf@f& (0+255),b
  6585  0007FC  0EFD               	movlw	high (STR_27+16)
  6586  0007FE  0100               	movlb	0	; () banked
  6587  000800  6F8F               	movwf	(printf@f+1)& (0+255),b
  6588  000802  C0F3  F090         	movff	_log_count_total,?_printf+2
  6589  000806  C0F4  F091         	movff	_log_count_total+1,?_printf+3
  6590  00080A  EC42  F004         	call	_printf	;wreg free
  6591                           
  6592                           ;UI.c: 201: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6593  00080E  0E00               	movlw	0
  6594  000810  0100               	movlb	0	; () banked
  6595  000812  6FD3               	movwf	UI@i_540& (0+255),b
  6596  000814                     l5659:
  6597                           
  6598                           ; BSR set to: 0
  6599  000814  0E63               	movlw	99
  6600  000816  0100               	movlb	0	; () banked
  6601  000818  65D3               	cpfsgt	UI@i_540& (0+255),b
  6602  00081A  D001               	goto	l5663
  6603  00081C  D00C               	goto	l5667
  6604  00081E                     l5663:
  6605                           
  6606                           ; BSR set to: 0
  6607  00081E  0E68               	movlw	104
  6608  000820  0100               	movlb	0	; () banked
  6609  000822  6FC4               	movwf	??_UI& (0+255),b
  6610  000824  0EE4               	movlw	228
  6611  000826                     u5427:
  6612  000826  2EE8               	decfsz	wreg,f,c
  6613  000828  D7FE               	bra	u5427
  6614  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
  6615  00082C  D7FC               	bra	u5427
  6616  00082E  F000               	nop	
  6617  000830  0100               	movlb	0	; () banked
  6618  000832  2BD3               	incf	UI@i_540& (0+255),f,b
  6619  000834  D7EF               	goto	l5659
  6620  000836                     l5667:
  6621                           
  6622                           ; BSR set to: 0
  6623  000836  0100               	movlb	0	; () banked
  6624  000838  51F7               	movf	_logstate& (0+255),w,b
  6625  00083A  0100               	movlb	0	; () banked
  6626  00083C  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6627  00083E  B4D8               	btfsc	status,2,c
  6628  000840  0012               	return	
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;UI.c: 202: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6632                           
  6633                           ; BSR set to: 0
  6634                           
  6635                           ; BSR set to: 0
  6636  000842  0E00               	movlw	0
  6637  000844  0100               	movlb	0	; () banked
  6638  000846  6FD4               	movwf	UI@i_541& (0+255),b
  6639  000848                     l5673:
  6640                           
  6641                           ; BSR set to: 0
  6642  000848  0E63               	movlw	99
  6643  00084A  0100               	movlb	0	; () banked
  6644  00084C  65D4               	cpfsgt	UI@i_541& (0+255),b
  6645  00084E  D001               	goto	l5677
  6646  000850  D00C               	goto	l5681
  6647  000852                     l5677:
  6648                           
  6649                           ; BSR set to: 0
  6650  000852  0E68               	movlw	104
  6651  000854  0100               	movlb	0	; () banked
  6652  000856  6FC4               	movwf	??_UI& (0+255),b
  6653  000858  0EE4               	movlw	228
  6654  00085A                     u5437:
  6655  00085A  2EE8               	decfsz	wreg,f,c
  6656  00085C  D7FE               	bra	u5437
  6657  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  6658  000860  D7FC               	bra	u5437
  6659  000862  F000               	nop	
  6660  000864  0100               	movlb	0	; () banked
  6661  000866  2BD4               	incf	UI@i_541& (0+255),f,b
  6662  000868  D7EF               	goto	l5673
  6663  00086A                     l5681:
  6664                           
  6665                           ; BSR set to: 0
  6666  00086A  0100               	movlb	0	; () banked
  6667  00086C  51F7               	movf	_logstate& (0+255),w,b
  6668  00086E  0100               	movlb	0	; () banked
  6669  000870  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6670  000872  B4D8               	btfsc	status,2,c
  6671  000874  0012               	return	
  6672  000876                     l5685:
  6673  000876  0100               	movlb	0	; () banked
  6674  000878  51F7               	movf	_logstate& (0+255),w,b
  6675  00087A  0100               	movlb	0	; () banked
  6676  00087C  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  6677  00087E  B4D8               	btfsc	status,2,c
  6678  000880  0012               	return	
  6679  000882  D464               	goto	l5397
  6680  000884                     __end_of_UI:
  6681                           	opt stack 0
  6682                           tblptru	equ	0xFF8
  6683                           tblptrh	equ	0xFF7
  6684                           tblptrl	equ	0xFF6
  6685                           tablat	equ	0xFF5
  6686                           prodh	equ	0xFF4
  6687                           prodl	equ	0xFF3
  6688                           intcon	equ	0xFF2
  6689                           intcon2	equ	0xFF1
  6690                           intcon3	equ	0xFF0
  6691                           postinc0	equ	0xFEE
  6692                           wreg	equ	0xFE8
  6693                           postdec1	equ	0xFE5
  6694                           fsr1l	equ	0xFE1
  6695                           indf2	equ	0xFDF
  6696                           postinc2	equ	0xFDE
  6697                           postdec2	equ	0xFDD
  6698                           fsr2h	equ	0xFDA
  6699                           fsr2l	equ	0xFD9
  6700                           status	equ	0xFD8
  6701                           
  6702 ;; *************** function _printRTC *****************
  6703 ;; Defined at:
  6704 ;;		line 63 in file "RTC.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;		None
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;  i               2   66[BANK0 ] int 
  6709 ;;  INT_time       14   46[BANK0 ] int [7]
  6710 ;;  month           4   62[BANK0 ] unsigned char [4]
  6711 ;;  RTC_month       2   60[BANK0 ] int 
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  1    wreg      void 
  6714 ;; Registers used:
  6715 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6723 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;Total ram usage:       25 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; Hardware stack levels required when called:   10
  6728 ;; This function calls:
  6729 ;;		_getRTC
  6730 ;;		_lcdInst
  6731 ;;		_printf
  6732 ;;		_strcpy
  6733 ;; This function is called by:
  6734 ;;		_UI
  6735 ;;		_change_state_to_menu_start
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           	psect	text24
  6740  00102A                     __ptext24:
  6741                           	opt stack 0
  6742  00102A                     _printRTC:
  6743                           	opt stack 18
  6744                           
  6745                           ;RTC.c: 64: getRTC();
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;incstack = 0
  6749  00102A  ECA6  F013         	call	_getRTC	;wreg free
  6750                           
  6751                           ;RTC.c: 65: char month[] = "MMM";
  6752  00102E  C12C  F0BE         	movff	printRTC@F3213,printRTC@month
  6753  001032  C12D  F0BF         	movff	printRTC@F3213+1,printRTC@month+1
  6754  001036  C12E  F0C0         	movff	printRTC@F3213+2,printRTC@month+2
  6755  00103A  C12F  F0C1         	movff	printRTC@F3213+3,printRTC@month+3
  6756                           
  6757                           ;RTC.c: 66: int INT_time[7];
  6758                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  6759  00103E  0E00               	movlw	0
  6760  001040  0100               	movlb	0	; () banked
  6761  001042  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  6762  001044  0E00               	movlw	0
  6763  001046  6FC2               	movwf	printRTC@i& (0+255),b
  6764                           
  6765                           ; BSR set to: 0
  6766  001048  0100               	movlb	0	; () banked
  6767  00104A  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  6768  00104C  D008               	goto	l4601
  6769  00104E  0100               	movlb	0	; () banked
  6770  001050  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  6771  001052  E146               	bnz	l610
  6772  001054  0E07               	movlw	7
  6773  001056  0100               	movlb	0	; () banked
  6774  001058  5DC2               	subwf	printRTC@i& (0+255),w,b
  6775  00105A  B0D8               	btfsc	status,0,c
  6776  00105C  D041               	goto	l610
  6777  00105E                     l4601:
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6781  00105E  0E5B               	movlw	low _time
  6782  001060  0100               	movlb	0	; () banked
  6783  001062  25C2               	addwf	printRTC@i& (0+255),w,b
  6784  001064  6ED9               	movwf	fsr2l,c
  6785  001066  0E00               	movlw	high _time
  6786  001068  0100               	movlb	0	; () banked
  6787  00106A  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  6788  00106C  6EDA               	movwf	fsr2h,c
  6789  00106E  50DF               	movf	indf2,w,c
  6790  001070  0100               	movlb	0	; () banked
  6791  001072  6FAB               	movwf	??_printRTC& (0+255),b
  6792  001074  0100               	movlb	0	; () banked
  6793  001076  3BAB               	swapf	??_printRTC& (0+255),f,b
  6794  001078  0E0F               	movlw	15
  6795  00107A  17AB               	andwf	??_printRTC& (0+255),f,b
  6796  00107C  0E0F               	movlw	15
  6797  00107E  0100               	movlb	0	; () banked
  6798  001080  17AB               	andwf	??_printRTC& (0+255),f,b
  6799  001082  0100               	movlb	0	; () banked
  6800  001084  51AB               	movf	??_printRTC& (0+255),w,b
  6801  001086  0D0A               	mullw	10
  6802  001088  0E5B               	movlw	low _time
  6803  00108A  0100               	movlb	0	; () banked
  6804  00108C  25C2               	addwf	printRTC@i& (0+255),w,b
  6805  00108E  6ED9               	movwf	fsr2l,c
  6806  001090  0E00               	movlw	high _time
  6807  001092  0100               	movlb	0	; () banked
  6808  001094  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  6809  001096  6EDA               	movwf	fsr2h,c
  6810  001098  50DF               	movf	indf2,w,c
  6811  00109A  0B0F               	andlw	15
  6812  00109C  0100               	movlb	0	; () banked
  6813  00109E  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  6814  0010A0  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  6815  0010A2  50F3               	movf	prodl,w,c
  6816  0010A4  0100               	movlb	0	; () banked
  6817  0010A6  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  6818  0010A8  50F4               	movf	prodh,w,c
  6819  0010AA  0100               	movlb	0	; () banked
  6820  0010AC  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  6821  0010AE  90D8               	bcf	status,0,c
  6822  0010B0  0100               	movlb	0	; () banked
  6823  0010B2  35C2               	rlcf	printRTC@i& (0+255),w,b
  6824  0010B4  6ED9               	movwf	fsr2l,c
  6825  0010B6  0100               	movlb	0	; () banked
  6826  0010B8  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  6827  0010BA  6EDA               	movwf	fsr2h,c
  6828  0010BC  0EAE               	movlw	low printRTC@INT_time
  6829  0010BE  26D9               	addwf	fsr2l,f,c
  6830  0010C0  0E00               	movlw	high printRTC@INT_time
  6831  0010C2  22DA               	addwfc	fsr2h,f,c
  6832  0010C4  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  6833  0010C8  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  6834                           
  6835                           ; BSR set to: 0
  6836  0010CC  0100               	movlb	0	; () banked
  6837  0010CE  4BC2               	infsnz	printRTC@i& (0+255),f,b
  6838  0010D0  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  6839                           
  6840                           ; BSR set to: 0
  6841  0010D2  0100               	movlb	0	; () banked
  6842  0010D4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  6843  0010D6  D7C3               	goto	l4601
  6844  0010D8  0100               	movlb	0	; () banked
  6845  0010DA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  6846  0010DC  E101               	bnz	u3480
  6847  0010DE  D7BA               	goto	L5
  6848  0010E0                     u3480:
  6849  0010E0                     l610:
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;RTC.c: 69: }
  6853                           ;RTC.c: 70: int RTC_month = INT_time[5];
  6854  0010E0  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  6855  0010E4  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  6856                           
  6857                           ;RTC.c: 71: switch(RTC_month){
  6858  0010E8  D0B4               	goto	l4633
  6859  0010EA                     l4607:
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;RTC.c: 73: strcpy(month, "JAN");
  6863  0010EA  0EBE               	movlw	low printRTC@month
  6864  0010EC  0100               	movlb	0	; () banked
  6865  0010EE  6F80               	movwf	strcpy@to& (0+255),b
  6866  0010F0  0E00               	movlw	high printRTC@month
  6867  0010F2  0100               	movlb	0	; () banked
  6868  0010F4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6869  0010F6  0EDB               	movlw	low STR_8
  6870  0010F8  0100               	movlb	0	; () banked
  6871  0010FA  6F82               	movwf	strcpy@from& (0+255),b
  6872  0010FC  0EFF               	movlw	high STR_8
  6873  0010FE  0100               	movlb	0	; () banked
  6874  001100  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6875  001102  ECD2  F016         	call	_strcpy	;wreg free
  6876                           
  6877                           ;RTC.c: 74: break;
  6878  001106  D0D4               	goto	l4635
  6879  001108                     l4609:
  6880                           
  6881                           ;RTC.c: 76: strcpy(month, "FEB");
  6882  001108  0EBE               	movlw	low printRTC@month
  6883  00110A  0100               	movlb	0	; () banked
  6884  00110C  6F80               	movwf	strcpy@to& (0+255),b
  6885  00110E  0E00               	movlw	high printRTC@month
  6886  001110  0100               	movlb	0	; () banked
  6887  001112  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6888  001114  0ECB               	movlw	low STR_9
  6889  001116  0100               	movlb	0	; () banked
  6890  001118  6F82               	movwf	strcpy@from& (0+255),b
  6891  00111A  0EFF               	movlw	high STR_9
  6892  00111C  0100               	movlb	0	; () banked
  6893  00111E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6894  001120  ECD2  F016         	call	_strcpy	;wreg free
  6895                           
  6896                           ;RTC.c: 77: break;
  6897  001124  D0C5               	goto	l4635
  6898  001126                     l4611:
  6899                           
  6900                           ;RTC.c: 79: strcpy(month, "MAR");
  6901  001126  0EBE               	movlw	low printRTC@month
  6902  001128  0100               	movlb	0	; () banked
  6903  00112A  6F80               	movwf	strcpy@to& (0+255),b
  6904  00112C  0E00               	movlw	high printRTC@month
  6905  00112E  0100               	movlb	0	; () banked
  6906  001130  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6907  001132  0EE7               	movlw	low STR_10
  6908  001134  0100               	movlb	0	; () banked
  6909  001136  6F82               	movwf	strcpy@from& (0+255),b
  6910  001138  0EFF               	movlw	high STR_10
  6911  00113A  0100               	movlb	0	; () banked
  6912  00113C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6913  00113E  ECD2  F016         	call	_strcpy	;wreg free
  6914                           
  6915                           ;RTC.c: 80: break;
  6916  001142  D0B6               	goto	l4635
  6917  001144                     l4613:
  6918                           
  6919                           ;RTC.c: 82: strcpy(month, "APR");
  6920  001144  0EBE               	movlw	low printRTC@month
  6921  001146  0100               	movlb	0	; () banked
  6922  001148  6F80               	movwf	strcpy@to& (0+255),b
  6923  00114A  0E00               	movlw	high printRTC@month
  6924  00114C  0100               	movlb	0	; () banked
  6925  00114E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6926  001150  0EEB               	movlw	low STR_11
  6927  001152  0100               	movlb	0	; () banked
  6928  001154  6F82               	movwf	strcpy@from& (0+255),b
  6929  001156  0EFF               	movlw	high STR_11
  6930  001158  0100               	movlb	0	; () banked
  6931  00115A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6932  00115C  ECD2  F016         	call	_strcpy	;wreg free
  6933                           
  6934                           ;RTC.c: 83: break;
  6935  001160  D0A7               	goto	l4635
  6936  001162                     l4615:
  6937                           
  6938                           ;RTC.c: 85: strcpy(month, "MAY");
  6939  001162  0EBE               	movlw	low printRTC@month
  6940  001164  0100               	movlb	0	; () banked
  6941  001166  6F80               	movwf	strcpy@to& (0+255),b
  6942  001168  0E00               	movlw	high printRTC@month
  6943  00116A  0100               	movlb	0	; () banked
  6944  00116C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6945  00116E  0EFB               	movlw	low STR_12
  6946  001170  0100               	movlb	0	; () banked
  6947  001172  6F82               	movwf	strcpy@from& (0+255),b
  6948  001174  0EFF               	movlw	high STR_12
  6949  001176  0100               	movlb	0	; () banked
  6950  001178  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6951  00117A  ECD2  F016         	call	_strcpy	;wreg free
  6952                           
  6953                           ;RTC.c: 86: break;
  6954  00117E  D098               	goto	l4635
  6955  001180                     l4617:
  6956                           
  6957                           ;RTC.c: 88: strcpy(month, "JUN");
  6958  001180  0EBE               	movlw	low printRTC@month
  6959  001182  0100               	movlb	0	; () banked
  6960  001184  6F80               	movwf	strcpy@to& (0+255),b
  6961  001186  0E00               	movlw	high printRTC@month
  6962  001188  0100               	movlb	0	; () banked
  6963  00118A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6964  00118C  0EDF               	movlw	low STR_13
  6965  00118E  0100               	movlb	0	; () banked
  6966  001190  6F82               	movwf	strcpy@from& (0+255),b
  6967  001192  0EFF               	movlw	high STR_13
  6968  001194  0100               	movlb	0	; () banked
  6969  001196  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6970  001198  ECD2  F016         	call	_strcpy	;wreg free
  6971                           
  6972                           ;RTC.c: 89: break;
  6973  00119C  D089               	goto	l4635
  6974  00119E                     l4619:
  6975                           
  6976                           ;RTC.c: 91: strcpy(month, "JUL");
  6977  00119E  0EBE               	movlw	low printRTC@month
  6978  0011A0  0100               	movlb	0	; () banked
  6979  0011A2  6F80               	movwf	strcpy@to& (0+255),b
  6980  0011A4  0E00               	movlw	high printRTC@month
  6981  0011A6  0100               	movlb	0	; () banked
  6982  0011A8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6983  0011AA  0ED7               	movlw	low STR_14
  6984  0011AC  0100               	movlb	0	; () banked
  6985  0011AE  6F82               	movwf	strcpy@from& (0+255),b
  6986  0011B0  0EFF               	movlw	high STR_14
  6987  0011B2  0100               	movlb	0	; () banked
  6988  0011B4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6989  0011B6  ECD2  F016         	call	_strcpy	;wreg free
  6990                           
  6991                           ;RTC.c: 92: break;
  6992  0011BA  D07A               	goto	l4635
  6993  0011BC                     l4621:
  6994                           
  6995                           ;RTC.c: 94: strcpy(month, "AUG");
  6996  0011BC  0EBE               	movlw	low printRTC@month
  6997  0011BE  0100               	movlb	0	; () banked
  6998  0011C0  6F80               	movwf	strcpy@to& (0+255),b
  6999  0011C2  0E00               	movlw	high printRTC@month
  7000  0011C4  0100               	movlb	0	; () banked
  7001  0011C6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7002  0011C8  0ED3               	movlw	low STR_15
  7003  0011CA  0100               	movlb	0	; () banked
  7004  0011CC  6F82               	movwf	strcpy@from& (0+255),b
  7005  0011CE  0EFF               	movlw	high STR_15
  7006  0011D0  0100               	movlb	0	; () banked
  7007  0011D2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7008  0011D4  ECD2  F016         	call	_strcpy	;wreg free
  7009                           
  7010                           ;RTC.c: 95: break;
  7011  0011D8  D06B               	goto	l4635
  7012  0011DA                     l4623:
  7013                           
  7014                           ;RTC.c: 97: strcpy(month, "SEP");
  7015  0011DA  0EBE               	movlw	low printRTC@month
  7016  0011DC  0100               	movlb	0	; () banked
  7017  0011DE  6F80               	movwf	strcpy@to& (0+255),b
  7018  0011E0  0E00               	movlw	high printRTC@month
  7019  0011E2  0100               	movlb	0	; () banked
  7020  0011E4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7021  0011E6  0EE3               	movlw	low STR_16
  7022  0011E8  0100               	movlb	0	; () banked
  7023  0011EA  6F82               	movwf	strcpy@from& (0+255),b
  7024  0011EC  0EFF               	movlw	high STR_16
  7025  0011EE  0100               	movlb	0	; () banked
  7026  0011F0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7027  0011F2  ECD2  F016         	call	_strcpy	;wreg free
  7028                           
  7029                           ;RTC.c: 98: break;
  7030  0011F6  D05C               	goto	l4635
  7031  0011F8                     l4625:
  7032                           
  7033                           ;RTC.c: 100: strcpy(month, "OCT");
  7034  0011F8  0EBE               	movlw	low printRTC@month
  7035  0011FA  0100               	movlb	0	; () banked
  7036  0011FC  6F80               	movwf	strcpy@to& (0+255),b
  7037  0011FE  0E00               	movlw	high printRTC@month
  7038  001200  0100               	movlb	0	; () banked
  7039  001202  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7040  001204  0EF3               	movlw	low STR_17
  7041  001206  0100               	movlb	0	; () banked
  7042  001208  6F82               	movwf	strcpy@from& (0+255),b
  7043  00120A  0EFF               	movlw	high STR_17
  7044  00120C  0100               	movlb	0	; () banked
  7045  00120E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7046  001210  ECD2  F016         	call	_strcpy	;wreg free
  7047                           
  7048                           ;RTC.c: 101: break;
  7049  001214  D04D               	goto	l4635
  7050  001216                     l4627:
  7051                           
  7052                           ;RTC.c: 103: strcpy(month, "NOV");
  7053  001216  0EBE               	movlw	low printRTC@month
  7054  001218  0100               	movlb	0	; () banked
  7055  00121A  6F80               	movwf	strcpy@to& (0+255),b
  7056  00121C  0E00               	movlw	high printRTC@month
  7057  00121E  0100               	movlb	0	; () banked
  7058  001220  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7059  001222  0EF7               	movlw	low STR_18
  7060  001224  0100               	movlb	0	; () banked
  7061  001226  6F82               	movwf	strcpy@from& (0+255),b
  7062  001228  0EFF               	movlw	high STR_18
  7063  00122A  0100               	movlb	0	; () banked
  7064  00122C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7065  00122E  ECD2  F016         	call	_strcpy	;wreg free
  7066                           
  7067                           ;RTC.c: 104: break;
  7068  001232  D03E               	goto	l4635
  7069  001234                     l4629:
  7070                           
  7071                           ;RTC.c: 106: strcpy(month, "DEC");
  7072  001234  0EBE               	movlw	low printRTC@month
  7073  001236  0100               	movlb	0	; () banked
  7074  001238  6F80               	movwf	strcpy@to& (0+255),b
  7075  00123A  0E00               	movlw	high printRTC@month
  7076  00123C  0100               	movlb	0	; () banked
  7077  00123E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7078  001240  0ECF               	movlw	low STR_19
  7079  001242  0100               	movlb	0	; () banked
  7080  001244  6F82               	movwf	strcpy@from& (0+255),b
  7081  001246  0EFF               	movlw	high STR_19
  7082  001248  0100               	movlb	0	; () banked
  7083  00124A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7084  00124C  ECD2  F016         	call	_strcpy	;wreg free
  7085                           
  7086                           ;RTC.c: 108: }
  7087                           
  7088                           ;RTC.c: 107: break;
  7089  001250  D02F               	goto	l4635
  7090  001252                     l4633:
  7091  001252  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7092  001256  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7093                           
  7094                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7095                           ; Switch size 1, requested type "space"
  7096                           ; Number of cases is 1, Range of values is 0 to 0
  7097                           ; switch strategies available:
  7098                           ; Name         Instructions Cycles
  7099                           ; simple_byte            4     3 (average)
  7100                           ;	Chosen strategy is simple_byte
  7101  00125A  0100               	movlb	0	; () banked
  7102  00125C  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7103  00125E  0A00               	xorlw	0	; case 0
  7104  001260  A4D8               	btfss	status,2,c
  7105  001262  D026               	goto	l4635
  7106                           
  7107                           ; BSR set to: 0
  7108                           ; Switch size 1, requested type "space"
  7109                           ; Number of cases is 12, Range of values is 1 to 12
  7110                           ; switch strategies available:
  7111                           ; Name         Instructions Cycles
  7112                           ; simple_byte           37    19 (average)
  7113                           ;	Chosen strategy is simple_byte
  7114  001264  0100               	movlb	0	; () banked
  7115  001266  51AB               	movf	??_printRTC& (0+255),w,b
  7116  001268  0A01               	xorlw	1	; case 1
  7117  00126A  B4D8               	btfsc	status,2,c
  7118  00126C  D73E               	goto	l4607
  7119  00126E  0A03               	xorlw	3	; case 2
  7120  001270  B4D8               	btfsc	status,2,c
  7121  001272  D74A               	goto	l4609
  7122  001274  0A01               	xorlw	1	; case 3
  7123  001276  B4D8               	btfsc	status,2,c
  7124  001278  D756               	goto	l4611
  7125  00127A  0A07               	xorlw	7	; case 4
  7126  00127C  B4D8               	btfsc	status,2,c
  7127  00127E  D762               	goto	l4613
  7128  001280  0A01               	xorlw	1	; case 5
  7129  001282  B4D8               	btfsc	status,2,c
  7130  001284  D76E               	goto	l4615
  7131  001286  0A03               	xorlw	3	; case 6
  7132  001288  B4D8               	btfsc	status,2,c
  7133  00128A  D77A               	goto	l4617
  7134  00128C  0A01               	xorlw	1	; case 7
  7135  00128E  B4D8               	btfsc	status,2,c
  7136  001290  D786               	goto	l4619
  7137  001292  0A0F               	xorlw	15	; case 8
  7138  001294  B4D8               	btfsc	status,2,c
  7139  001296  D792               	goto	l4621
  7140  001298  0A01               	xorlw	1	; case 9
  7141  00129A  B4D8               	btfsc	status,2,c
  7142  00129C  D79E               	goto	l4623
  7143  00129E  0A03               	xorlw	3	; case 10
  7144  0012A0  B4D8               	btfsc	status,2,c
  7145  0012A2  D7AA               	goto	l4625
  7146  0012A4  0A01               	xorlw	1	; case 11
  7147  0012A6  B4D8               	btfsc	status,2,c
  7148  0012A8  D7B6               	goto	l4627
  7149  0012AA  0A07               	xorlw	7	; case 12
  7150  0012AC  B4D8               	btfsc	status,2,c
  7151  0012AE  D7C2               	goto	l4629
  7152  0012B0                     l4635:
  7153                           
  7154                           ;RTC.c: 109: lcdInst(0b10000000);;
  7155  0012B0  0E80               	movlw	128
  7156  0012B2  EC3D  F019         	call	_lcdInst
  7157                           
  7158                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7159  0012B6  0EAE               	movlw	low STR_21
  7160  0012B8  0100               	movlb	0	; () banked
  7161  0012BA  6F8E               	movwf	printf@f& (0+255),b
  7162  0012BC  0EFD               	movlw	high STR_21
  7163  0012BE  0100               	movlb	0	; () banked
  7164  0012C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  7165  0012C2  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7166  0012C6  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7167  0012CA  0EBE               	movlw	low printRTC@month
  7168  0012CC  0100               	movlb	0	; () banked
  7169  0012CE  6F92               	movwf	(?_printf+4)& (0+255),b
  7170  0012D0  0E00               	movlw	high printRTC@month
  7171  0012D2  0100               	movlb	0	; () banked
  7172  0012D4  6F93               	movwf	(?_printf+5)& (0+255),b
  7173  0012D6  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7174  0012DA  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7175  0012DE  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7176  0012E2  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7177  0012E6  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7178  0012EA  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7179  0012EE  EC42  F004         	call	_printf	;wreg free
  7180  0012F2  0012               	return		;funcret
  7181  0012F4                     __end_of_printRTC:
  7182                           	opt stack 0
  7183                           tblptru	equ	0xFF8
  7184                           tblptrh	equ	0xFF7
  7185                           tblptrl	equ	0xFF6
  7186                           tablat	equ	0xFF5
  7187                           prodh	equ	0xFF4
  7188                           prodl	equ	0xFF3
  7189                           intcon	equ	0xFF2
  7190                           intcon2	equ	0xFF1
  7191                           intcon3	equ	0xFF0
  7192                           postinc0	equ	0xFEE
  7193                           wreg	equ	0xFE8
  7194                           postdec1	equ	0xFE5
  7195                           fsr1l	equ	0xFE1
  7196                           indf2	equ	0xFDF
  7197                           postinc2	equ	0xFDE
  7198                           postdec2	equ	0xFDD
  7199                           fsr2h	equ	0xFDA
  7200                           fsr2l	equ	0xFD9
  7201                           status	equ	0xFD8
  7202                           
  7203 ;; *************** function _strcpy *****************
  7204 ;; Defined at:
  7205 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7208 ;;		 -> printRTC@month(4), UI@month(4), 
  7209 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7210 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7211 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7212 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7213 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7214 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7215 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7216 ;;		 -> STR_8(4), 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7219 ;;		 -> printRTC@month(4), UI@month(4), 
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  2    0[BANK0 ] PTR unsigned char 
  7222 ;; Registers used:
  7223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7229 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7233 ;;Total ram usage:        6 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    7
  7236 ;; This function calls:
  7237 ;;		Nothing
  7238 ;; This function is called by:
  7239 ;;		_UI
  7240 ;;		_printRTC
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           	psect	text25
  7245  002DA4                     __ptext25:
  7246                           	opt stack 0
  7247  002DA4                     _strcpy:
  7248                           	opt stack 20
  7249                           
  7250                           ;incstack = 0
  7251  002DA4  C080  F084         	movff	strcpy@to,strcpy@cp
  7252  002DA8  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7253  002DAC  D006               	goto	l4353
  7254  002DAE                     l4351:
  7255  002DAE  0100               	movlb	0	; () banked
  7256  002DB0  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7257  002DB2  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7258  002DB4  0100               	movlb	0	; () banked
  7259  002DB6  4B82               	infsnz	strcpy@from& (0+255),f,b
  7260  002DB8  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7261  002DBA                     l4353:
  7262  002DBA  C082  FFF6         	movff	strcpy@from,tblptrl
  7263  002DBE  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7264  002DC2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7265  002DC2  6AF8               	clrf	tblptru,c
  7266  002DC4                     	endif
  7267  002DC4                     	if	0	;tblptru may be non-zero
  7268  002DC4                     	endif
  7269  002DC4  C084  FFD9         	movff	strcpy@cp,fsr2l
  7270  002DC8  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7271  002DCC  0008               	tblrd		*
  7272  002DCE  CFF5 FFDF          	movff	tablat,indf2
  7273  002DD2  50DF               	movf	indf2,w,c
  7274  002DD4  B4D8               	btfsc	status,2,c
  7275  002DD6  0012               	return	
  7276  002DD8  D7EA               	goto	l4351
  7277  002DDA                     __end_of_strcpy:
  7278                           	opt stack 0
  7279                           tblptru	equ	0xFF8
  7280                           tblptrh	equ	0xFF7
  7281                           tblptrl	equ	0xFF6
  7282                           tablat	equ	0xFF5
  7283                           prodh	equ	0xFF4
  7284                           prodl	equ	0xFF3
  7285                           intcon	equ	0xFF2
  7286                           intcon2	equ	0xFF1
  7287                           intcon3	equ	0xFF0
  7288                           postinc0	equ	0xFEE
  7289                           wreg	equ	0xFE8
  7290                           postdec1	equ	0xFE5
  7291                           fsr1l	equ	0xFE1
  7292                           indf2	equ	0xFDF
  7293                           postinc2	equ	0xFDE
  7294                           postdec2	equ	0xFDD
  7295                           fsr2h	equ	0xFDA
  7296                           fsr2l	equ	0xFD9
  7297                           status	equ	0xFD8
  7298                           
  7299 ;; *************** function _getRTC *****************
  7300 ;; Defined at:
  7301 ;;		line 44 in file "RTC.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;		None
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;  i               2    3[BANK0 ] int 
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  1    wreg      void 
  7308 ;; Registers used:
  7309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;Total ram usage:        2 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; Hardware stack levels required when called:    9
  7322 ;; This function calls:
  7323 ;;		_I2C_Master_Read
  7324 ;;		_I2C_Master_Start
  7325 ;;		_I2C_Master_Stop
  7326 ;;		_I2C_Master_Write
  7327 ;; This function is called by:
  7328 ;;		_printRTC
  7329 ;;		_initSortTimer
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text26
  7334  00274C                     __ptext26:
  7335                           	opt stack 0
  7336  00274C                     _getRTC:
  7337                           	opt stack 18
  7338                           
  7339                           ;RTC.c: 48: I2C_Master_Start();
  7340                           
  7341                           ;incstack = 0
  7342  00274C  EC63  F019         	call	_I2C_Master_Start	;wreg free
  7343                           
  7344                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7345  002750  0E00               	movlw	0
  7346  002752  0100               	movlb	0	; () banked
  7347  002754  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7348  002756  0ED0               	movlw	208
  7349  002758  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7350  00275A  EC51  F019         	call	_I2C_Master_Write	;wreg free
  7351                           
  7352                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7353  00275E  0E00               	movlw	0
  7354  002760  0100               	movlb	0	; () banked
  7355  002762  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7356  002764  0E00               	movlw	0
  7357  002766  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7358  002768  EC51  F019         	call	_I2C_Master_Write	;wreg free
  7359                           
  7360                           ;RTC.c: 51: I2C_Master_Stop();
  7361  00276C  EC5F  F019         	call	_I2C_Master_Stop	;wreg free
  7362                           
  7363                           ;RTC.c: 54: I2C_Master_Start();
  7364  002770  EC63  F019         	call	_I2C_Master_Start	;wreg free
  7365                           
  7366                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7367  002774  0E00               	movlw	0
  7368  002776  0100               	movlb	0	; () banked
  7369  002778  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7370  00277A  0ED1               	movlw	209
  7371  00277C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7372  00277E  EC51  F019         	call	_I2C_Master_Write	;wreg free
  7373                           
  7374                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  7375  002782  0E00               	movlw	0
  7376  002784  0100               	movlb	0	; () banked
  7377  002786  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7378  002788  0E00               	movlw	0
  7379  00278A  6F83               	movwf	getRTC@i& (0+255),b
  7380  00278C                     l4359:
  7381                           
  7382                           ; BSR set to: 0
  7383  00278C  0100               	movlb	0	; () banked
  7384  00278E  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7385  002790  D008               	goto	l4363
  7386  002792  0100               	movlb	0	; () banked
  7387  002794  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7388  002796  E115               	bnz	l4369
  7389  002798  0E06               	movlw	6
  7390  00279A  0100               	movlb	0	; () banked
  7391  00279C  5D83               	subwf	getRTC@i& (0+255),w,b
  7392  00279E  B0D8               	btfsc	status,0,c
  7393  0027A0  D010               	goto	l4369
  7394  0027A2                     l4363:
  7395                           
  7396                           ; BSR set to: 0
  7397                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  7398  0027A2  0E5B               	movlw	low _time
  7399  0027A4  0100               	movlb	0	; () banked
  7400  0027A6  2583               	addwf	getRTC@i& (0+255),w,b
  7401  0027A8  6ED9               	movwf	fsr2l,c
  7402  0027AA  0E00               	movlw	high _time
  7403  0027AC  0100               	movlb	0	; () banked
  7404  0027AE  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7405  0027B0  6EDA               	movwf	fsr2h,c
  7406  0027B2  0E01               	movlw	1
  7407  0027B4  ECF9  F017         	call	_I2C_Master_Read
  7408  0027B8  6EDF               	movwf	indf2,c
  7409  0027BA  0100               	movlb	0	; () banked
  7410  0027BC  4B83               	infsnz	getRTC@i& (0+255),f,b
  7411  0027BE  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7412  0027C0  D7E5               	goto	l4359
  7413  0027C2                     l4369:
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;RTC.c: 58: }
  7417                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  7418  0027C2  0E00               	movlw	0
  7419  0027C4  ECF9  F017         	call	_I2C_Master_Read
  7420  0027C8  6E61               	movwf	_time+6,c
  7421                           
  7422                           ;RTC.c: 60: I2C_Master_Stop();
  7423  0027CA  EC5F  F019         	call	_I2C_Master_Stop	;wreg free
  7424  0027CE  0012               	return		;funcret
  7425  0027D0                     __end_of_getRTC:
  7426                           	opt stack 0
  7427                           tblptru	equ	0xFF8
  7428                           tblptrh	equ	0xFF7
  7429                           tblptrl	equ	0xFF6
  7430                           tablat	equ	0xFF5
  7431                           prodh	equ	0xFF4
  7432                           prodl	equ	0xFF3
  7433                           intcon	equ	0xFF2
  7434                           intcon2	equ	0xFF1
  7435                           intcon3	equ	0xFF0
  7436                           postinc0	equ	0xFEE
  7437                           wreg	equ	0xFE8
  7438                           postdec1	equ	0xFE5
  7439                           fsr1l	equ	0xFE1
  7440                           indf2	equ	0xFDF
  7441                           postinc2	equ	0xFDE
  7442                           postdec2	equ	0xFDD
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function _I2C_Master_Write *****************
  7448 ;; Defined at:
  7449 ;;		line 49 in file "I2C.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  d               2    1[BANK0 ] unsigned int 
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;		None
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1    wreg      void 
  7456 ;; Registers used:
  7457 ;;		wreg, status,2, status,0, cstack
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7463 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;Total ram usage:        2 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; Hardware stack levels required when called:    8
  7470 ;; This function calls:
  7471 ;;		_I2C_Master_Wait
  7472 ;; This function is called by:
  7473 ;;		_loadRTC
  7474 ;;		_getRTC
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           	psect	text27
  7479  0032A2                     __ptext27:
  7480                           	opt stack 0
  7481  0032A2                     _I2C_Master_Write:
  7482                           	opt stack 18
  7483                           
  7484                           ;I2C.c: 51: I2C_Master_Wait();
  7485                           
  7486                           ;incstack = 0
  7487  0032A2  EC19  F019         	call	_I2C_Master_Wait	;wreg free
  7488                           
  7489                           ;I2C.c: 52: SSPBUF = d;
  7490  0032A6  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7491  0032AA  0012               	return		;funcret
  7492  0032AC                     __end_of_I2C_Master_Write:
  7493                           	opt stack 0
  7494                           tblptru	equ	0xFF8
  7495                           tblptrh	equ	0xFF7
  7496                           tblptrl	equ	0xFF6
  7497                           tablat	equ	0xFF5
  7498                           prodh	equ	0xFF4
  7499                           prodl	equ	0xFF3
  7500                           intcon	equ	0xFF2
  7501                           intcon2	equ	0xFF1
  7502                           intcon3	equ	0xFF0
  7503                           postinc0	equ	0xFEE
  7504                           wreg	equ	0xFE8
  7505                           postdec1	equ	0xFE5
  7506                           fsr1l	equ	0xFE1
  7507                           indf2	equ	0xFDF
  7508                           postinc2	equ	0xFDE
  7509                           postdec2	equ	0xFDD
  7510                           fsr2h	equ	0xFDA
  7511                           fsr2l	equ	0xFD9
  7512                           status	equ	0xFD8
  7513                           
  7514 ;; *************** function _I2C_Master_Stop *****************
  7515 ;; Defined at:
  7516 ;;		line 43 in file "I2C.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;		None
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;		None
  7521 ;; Return value:  Size  Location     Type
  7522 ;;                  1    wreg      void 
  7523 ;; Registers used:
  7524 ;;		wreg, status,2, status,0, cstack
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;Total ram usage:        0 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    8
  7537 ;; This function calls:
  7538 ;;		_I2C_Master_Wait
  7539 ;; This function is called by:
  7540 ;;		_loadRTC
  7541 ;;		_getRTC
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text28
  7546  0032BE                     __ptext28:
  7547                           	opt stack 0
  7548  0032BE                     _I2C_Master_Stop:
  7549                           	opt stack 18
  7550                           
  7551                           ;I2C.c: 45: I2C_Master_Wait();
  7552                           
  7553                           ;incstack = 0
  7554  0032BE  EC19  F019         	call	_I2C_Master_Wait	;wreg free
  7555                           
  7556                           ;I2C.c: 46: PEN = 1;
  7557  0032C2  84C5               	bsf	4037,2,c	;volatile
  7558  0032C4  0012               	return		;funcret
  7559  0032C6                     __end_of_I2C_Master_Stop:
  7560                           	opt stack 0
  7561                           tblptru	equ	0xFF8
  7562                           tblptrh	equ	0xFF7
  7563                           tblptrl	equ	0xFF6
  7564                           tablat	equ	0xFF5
  7565                           prodh	equ	0xFF4
  7566                           prodl	equ	0xFF3
  7567                           intcon	equ	0xFF2
  7568                           intcon2	equ	0xFF1
  7569                           intcon3	equ	0xFF0
  7570                           postinc0	equ	0xFEE
  7571                           wreg	equ	0xFE8
  7572                           postdec1	equ	0xFE5
  7573                           fsr1l	equ	0xFE1
  7574                           indf2	equ	0xFDF
  7575                           postinc2	equ	0xFDE
  7576                           postdec2	equ	0xFDD
  7577                           fsr2h	equ	0xFDA
  7578                           fsr2l	equ	0xFD9
  7579                           status	equ	0xFD8
  7580                           
  7581 ;; *************** function _I2C_Master_Start *****************
  7582 ;; Defined at:
  7583 ;;		line 31 in file "I2C.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;		None
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;		None
  7588 ;; Return value:  Size  Location     Type
  7589 ;;                  1    wreg      void 
  7590 ;; Registers used:
  7591 ;;		wreg, status,2, status,0, cstack
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;Total ram usage:        0 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    8
  7604 ;; This function calls:
  7605 ;;		_I2C_Master_Wait
  7606 ;; This function is called by:
  7607 ;;		_loadRTC
  7608 ;;		_getRTC
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           	psect	text29
  7613  0032C6                     __ptext29:
  7614                           	opt stack 0
  7615  0032C6                     _I2C_Master_Start:
  7616                           	opt stack 18
  7617                           
  7618                           ;I2C.c: 33: I2C_Master_Wait();
  7619                           
  7620                           ;incstack = 0
  7621  0032C6  EC19  F019         	call	_I2C_Master_Wait	;wreg free
  7622                           
  7623                           ;I2C.c: 34: SEN = 1;
  7624  0032CA  80C5               	bsf	4037,0,c	;volatile
  7625  0032CC  0012               	return		;funcret
  7626  0032CE                     __end_of_I2C_Master_Start:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           intcon2	equ	0xFF1
  7636                           intcon3	equ	0xFF0
  7637                           postinc0	equ	0xFEE
  7638                           wreg	equ	0xFE8
  7639                           postdec1	equ	0xFE5
  7640                           fsr1l	equ	0xFE1
  7641                           indf2	equ	0xFDF
  7642                           postinc2	equ	0xFDE
  7643                           postdec2	equ	0xFDD
  7644                           fsr2h	equ	0xFDA
  7645                           fsr2l	equ	0xFD9
  7646                           status	equ	0xFD8
  7647                           
  7648 ;; *************** function _I2C_Master_Read *****************
  7649 ;; Defined at:
  7650 ;;		line 55 in file "I2C.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;  a               1    wreg     unsigned char 
  7653 ;; Auto vars:     Size  Location     Type
  7654 ;;  a               1    1[BANK0 ] unsigned char 
  7655 ;;  temp            1    2[BANK0 ] unsigned char 
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  1    wreg      unsigned char 
  7658 ;; Registers used:
  7659 ;;		wreg, status,2, status,0, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 0/0
  7662 ;;		On exit  : 0/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;Total ram usage:        2 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    8
  7672 ;; This function calls:
  7673 ;;		_I2C_Master_Wait
  7674 ;; This function is called by:
  7675 ;;		_getRTC
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text30
  7680  002FF2                     __ptext30:
  7681                           	opt stack 0
  7682  002FF2                     _I2C_Master_Read:
  7683                           	opt stack 18
  7684                           
  7685                           ;incstack = 0
  7686                           ;I2C_Master_Read@a stored from wreg
  7687  002FF2  0100               	movlb	0	; () banked
  7688  002FF4  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7689                           
  7690                           ;I2C.c: 57: unsigned char temp;
  7691                           ;I2C.c: 58: I2C_Master_Wait();
  7692  002FF6  EC19  F019         	call	_I2C_Master_Wait	;wreg free
  7693                           
  7694                           ;I2C.c: 59: RCEN = 1;
  7695  002FFA  86C5               	bsf	4037,3,c	;volatile
  7696                           
  7697                           ;I2C.c: 60: I2C_Master_Wait();
  7698  002FFC  EC19  F019         	call	_I2C_Master_Wait	;wreg free
  7699                           
  7700                           ;I2C.c: 61: temp = SSPBUF;
  7701  003000  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7702                           
  7703                           ;I2C.c: 62: I2C_Master_Wait();
  7704  003004  EC19  F019         	call	_I2C_Master_Wait	;wreg free
  7705                           
  7706                           ;I2C.c: 63: ACKDT = (a)?0:1;
  7707  003008  0100               	movlb	0	; () banked
  7708  00300A  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7709  00300C  0100               	movlb	0	; () banked
  7710  00300E  A4D8               	btfss	status,2,c
  7711  003010  D002               	goto	u2590
  7712  003012  8AC5               	bsf	4037,5,c	;volatile
  7713  003014  D001               	goto	l4049
  7714  003016                     u2590:
  7715  003016  9AC5               	bcf	4037,5,c	;volatile
  7716  003018                     l4049:
  7717                           
  7718                           ;I2C.c: 64: ACKEN = 1;
  7719  003018  88C5               	bsf	4037,4,c	;volatile
  7720                           
  7721                           ;I2C.c: 65: return temp;
  7722  00301A  0100               	movlb	0	; () banked
  7723  00301C  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7724  00301E  0012               	return	
  7725  003020                     __end_of_I2C_Master_Read:
  7726                           	opt stack 0
  7727                           tblptru	equ	0xFF8
  7728                           tblptrh	equ	0xFF7
  7729                           tblptrl	equ	0xFF6
  7730                           tablat	equ	0xFF5
  7731                           prodh	equ	0xFF4
  7732                           prodl	equ	0xFF3
  7733                           intcon	equ	0xFF2
  7734                           intcon2	equ	0xFF1
  7735                           intcon3	equ	0xFF0
  7736                           postinc0	equ	0xFEE
  7737                           wreg	equ	0xFE8
  7738                           postdec1	equ	0xFE5
  7739                           fsr1l	equ	0xFE1
  7740                           indf2	equ	0xFDF
  7741                           postinc2	equ	0xFDE
  7742                           postdec2	equ	0xFDD
  7743                           fsr2h	equ	0xFDA
  7744                           fsr2l	equ	0xFD9
  7745                           status	equ	0xFD8
  7746                           
  7747 ;; *************** function _I2C_Master_Wait *****************
  7748 ;; Defined at:
  7749 ;;		line 26 in file "I2C.c"
  7750 ;; Parameters:    Size  Location     Type
  7751 ;;		None
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;		None
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  1    wreg      void 
  7756 ;; Registers used:
  7757 ;;		wreg, status,2, status,0
  7758 ;; Tracked objects:
  7759 ;;		On entry : 0/0
  7760 ;;		On exit  : 0/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;Total ram usage:        1 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; Hardware stack levels required when called:    7
  7770 ;; This function calls:
  7771 ;;		Nothing
  7772 ;; This function is called by:
  7773 ;;		_I2C_Master_Start
  7774 ;;		_I2C_Master_Stop
  7775 ;;		_I2C_Master_Write
  7776 ;;		_I2C_Master_Read
  7777 ;;		_I2C_Master_RepeatedStart
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           	psect	text31
  7782  003232                     __ptext31:
  7783                           	opt stack 0
  7784  003232                     _I2C_Master_Wait:
  7785                           	opt stack 18
  7786  003232                     l68:
  7787  003232  B4C7               	btfsc	4039,2,c	;volatile
  7788  003234  D7FE               	goto	l68
  7789  003236  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7790  00323A  0E1F               	movlw	31
  7791  00323C  0100               	movlb	0	; () banked
  7792  00323E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7793  003240  B4D8               	btfsc	status,2,c
  7794  003242  0012               	return	
  7795  003244  D7F6               	goto	l68
  7796  003246                     __end_of_I2C_Master_Wait:
  7797                           	opt stack 0
  7798                           tblptru	equ	0xFF8
  7799                           tblptrh	equ	0xFF7
  7800                           tblptrl	equ	0xFF6
  7801                           tablat	equ	0xFF5
  7802                           prodh	equ	0xFF4
  7803                           prodl	equ	0xFF3
  7804                           intcon	equ	0xFF2
  7805                           intcon2	equ	0xFF1
  7806                           intcon3	equ	0xFF0
  7807                           postinc0	equ	0xFEE
  7808                           wreg	equ	0xFE8
  7809                           postdec1	equ	0xFE5
  7810                           fsr1l	equ	0xFE1
  7811                           indf2	equ	0xFDF
  7812                           postinc2	equ	0xFDE
  7813                           postdec2	equ	0xFDD
  7814                           fsr2h	equ	0xFDA
  7815                           fsr2l	equ	0xFD9
  7816                           status	equ	0xFD8
  7817                           
  7818 ;; *************** function _change_state_to_menu_22 *****************
  7819 ;; Defined at:
  7820 ;;		line 494 in file "UI.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;		None
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;		None
  7825 ;; Return value:  Size  Location     Type
  7826 ;;                  1    wreg      void 
  7827 ;; Registers used:
  7828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;Total ram usage:        0 bytes
  7839 ;; Hardware stack levels used:    1
  7840 ;; Hardware stack levels required when called:   10
  7841 ;; This function calls:
  7842 ;;		_lcdInst
  7843 ;;		_printf
  7844 ;; This function is called by:
  7845 ;;		_UI
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           	psect	text32
  7850  002D34                     __ptext32:
  7851                           	opt stack 0
  7852  002D34                     _change_state_to_menu_22:
  7853                           	opt stack 19
  7854                           
  7855                           ;UI.c: 495: cur_state = 22;
  7856                           
  7857                           ; BSR set to: 0
  7858                           ;incstack = 0
  7859  002D34  0E00               	movlw	0
  7860  002D36  0100               	movlb	0	; () banked
  7861  002D38  6FDC               	movwf	(_cur_state+1)& (0+255),b
  7862  002D3A  0E16               	movlw	22
  7863  002D3C  6FDB               	movwf	_cur_state& (0+255),b
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;UI.c: 497: lcdInst(0b10000000);;
  7867  002D3E  0E80               	movlw	128
  7868  002D40  EC3D  F019         	call	_lcdInst
  7869                           
  7870                           ;UI.c: 498: printf("2. SORT        <");
  7871  002D44  0E24               	movlw	low STR_34
  7872  002D46  0100               	movlb	0	; () banked
  7873  002D48  6F8E               	movwf	printf@f& (0+255),b
  7874  002D4A  0EFF               	movlw	high STR_34
  7875  002D4C  0100               	movlb	0	; () banked
  7876  002D4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7877  002D50  EC42  F004         	call	_printf	;wreg free
  7878                           
  7879                           ;UI.c: 499: lcdInst(0b11000000);;
  7880  002D54  0EC0               	movlw	192
  7881  002D56  EC3D  F019         	call	_lcdInst
  7882                           
  7883                           ;UI.c: 500: printf("3. LOGS         ");
  7884  002D5A  0E69               	movlw	low STR_36
  7885  002D5C  0100               	movlb	0	; () banked
  7886  002D5E  6F8E               	movwf	printf@f& (0+255),b
  7887  002D60  0EFE               	movlw	high STR_36
  7888  002D62  0100               	movlb	0	; () banked
  7889  002D64  6F8F               	movwf	(printf@f+1)& (0+255),b
  7890  002D66  EC42  F004         	call	_printf	;wreg free
  7891  002D6A  0012               	return		;funcret
  7892  002D6C                     __end_of_change_state_to_menu_22:
  7893                           	opt stack 0
  7894                           tblptru	equ	0xFF8
  7895                           tblptrh	equ	0xFF7
  7896                           tblptrl	equ	0xFF6
  7897                           tablat	equ	0xFF5
  7898                           prodh	equ	0xFF4
  7899                           prodl	equ	0xFF3
  7900                           intcon	equ	0xFF2
  7901                           intcon2	equ	0xFF1
  7902                           intcon3	equ	0xFF0
  7903                           postinc0	equ	0xFEE
  7904                           wreg	equ	0xFE8
  7905                           postdec1	equ	0xFE5
  7906                           fsr1l	equ	0xFE1
  7907                           indf2	equ	0xFDF
  7908                           postinc2	equ	0xFDE
  7909                           postdec2	equ	0xFDD
  7910                           fsr2h	equ	0xFDA
  7911                           fsr2l	equ	0xFD9
  7912                           status	equ	0xFD8
  7913                           
  7914 ;; *************** function _change_state_to_menu_12 *****************
  7915 ;; Defined at:
  7916 ;;		line 486 in file "UI.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;		None
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;		None
  7921 ;; Return value:  Size  Location     Type
  7922 ;;                  1    wreg      void 
  7923 ;; Registers used:
  7924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7925 ;; Tracked objects:
  7926 ;;		On entry : 0/0
  7927 ;;		On exit  : 0/0
  7928 ;;		Unchanged: 0/0
  7929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;Total ram usage:        0 bytes
  7935 ;; Hardware stack levels used:    1
  7936 ;; Hardware stack levels required when called:   10
  7937 ;; This function calls:
  7938 ;;		_lcdInst
  7939 ;;		_printf
  7940 ;; This function is called by:
  7941 ;;		_UI
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           	psect	text33
  7946  002D6C                     __ptext33:
  7947                           	opt stack 0
  7948  002D6C                     _change_state_to_menu_12:
  7949                           	opt stack 19
  7950                           
  7951                           ;UI.c: 487: cur_state = 12;
  7952                           
  7953                           ;incstack = 0
  7954  002D6C  0E00               	movlw	0
  7955  002D6E  0100               	movlb	0	; () banked
  7956  002D70  6FDC               	movwf	(_cur_state+1)& (0+255),b
  7957  002D72  0E0C               	movlw	12
  7958  002D74  6FDB               	movwf	_cur_state& (0+255),b
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;UI.c: 489: lcdInst(0b10000000);;
  7962  002D76  0E80               	movlw	128
  7963  002D78  EC3D  F019         	call	_lcdInst
  7964                           
  7965                           ;UI.c: 490: printf("1. DATE/TIME    ");
  7966  002D7C  0E8B               	movlw	low STR_33
  7967  002D7E  0100               	movlb	0	; () banked
  7968  002D80  6F8E               	movwf	printf@f& (0+255),b
  7969  002D82  0EFE               	movlw	high STR_33
  7970  002D84  0100               	movlb	0	; () banked
  7971  002D86  6F8F               	movwf	(printf@f+1)& (0+255),b
  7972  002D88  EC42  F004         	call	_printf	;wreg free
  7973                           
  7974                           ;UI.c: 491: lcdInst(0b11000000);;
  7975  002D8C  0EC0               	movlw	192
  7976  002D8E  EC3D  F019         	call	_lcdInst
  7977                           
  7978                           ;UI.c: 492: printf("2. SORT        <");
  7979  002D92  0E24               	movlw	low STR_34
  7980  002D94  0100               	movlb	0	; () banked
  7981  002D96  6F8E               	movwf	printf@f& (0+255),b
  7982  002D98  0EFF               	movlw	high STR_34
  7983  002D9A  0100               	movlb	0	; () banked
  7984  002D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
  7985  002D9E  EC42  F004         	call	_printf	;wreg free
  7986  002DA2  0012               	return		;funcret
  7987  002DA4                     __end_of_change_state_to_menu_12:
  7988                           	opt stack 0
  7989                           tblptru	equ	0xFF8
  7990                           tblptrh	equ	0xFF7
  7991                           tblptrl	equ	0xFF6
  7992                           tablat	equ	0xFF5
  7993                           prodh	equ	0xFF4
  7994                           prodl	equ	0xFF3
  7995                           intcon	equ	0xFF2
  7996                           intcon2	equ	0xFF1
  7997                           intcon3	equ	0xFF0
  7998                           postinc0	equ	0xFEE
  7999                           wreg	equ	0xFE8
  8000                           postdec1	equ	0xFE5
  8001                           fsr1l	equ	0xFE1
  8002                           indf2	equ	0xFDF
  8003                           postinc2	equ	0xFDE
  8004                           postdec2	equ	0xFDD
  8005                           fsr2h	equ	0xFDA
  8006                           fsr2l	equ	0xFD9
  8007                           status	equ	0xFD8
  8008                           
  8009 ;; *************** function _printf *****************
  8010 ;; Defined at:
  8011 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  8014 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
  8015 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
  8016 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
  8017 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
  8018 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
  8019 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
  8020 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
  8021 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
  8022 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
  8023 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
  8024 ;;		 -> STR_2(14), STR_1(18), 
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;  tmpval          4    0        struct .
  8027 ;;  width           2   41[BANK0 ] int 
  8028 ;;  val             2   37[BANK0 ] unsigned int 
  8029 ;;  len             2   35[BANK0 ] unsigned int 
  8030 ;;  ap              2   33[BANK0 ] PTR void [1]
  8031 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8032 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
  8033 ;;		 -> STR_68(7), count_total(2), printRTC@month(4), UI@month(4), 
  8034 ;;  c               1   40[BANK0 ] char 
  8035 ;;  flag            1   39[BANK0 ] unsigned char 
  8036 ;;  prec            1   30[BANK0 ] char 
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  2   14[BANK0 ] int 
  8039 ;; Registers used:
  8040 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8046 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8048 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8049 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8050 ;;Total ram usage:       29 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    9
  8053 ;; This function calls:
  8054 ;;		___lwdiv
  8055 ;;		___lwmod
  8056 ;;		___wmul
  8057 ;;		_isdigit
  8058 ;;		_putch
  8059 ;; This function is called by:
  8060 ;;		_UI
  8061 ;;		_change_state_to_menu_start
  8062 ;;		_change_state_to_menu_12
  8063 ;;		_change_state_to_menu_22
  8064 ;;		_printRTC
  8065 ;;		_EEPROM_write
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           	psect	text34
  8070  000884                     __ptext34:
  8071                           	opt stack 0
  8072  000884                     _printf:
  8073                           	opt stack 19
  8074                           
  8075                           ;doprnt.c: 466: va_list ap;
  8076                           ;doprnt.c: 499: signed char c;
  8077                           ;doprnt.c: 501: int width;
  8078                           ;doprnt.c: 506: signed char prec;
  8079                           ;doprnt.c: 508: unsigned char flag;
  8080                           ;doprnt.c: 523: union {
  8081                           ;doprnt.c: 524: unsigned long vd;
  8082                           ;doprnt.c: 525: double integ;
  8083                           ;doprnt.c: 526: } tmpval;
  8084                           ;doprnt.c: 528: unsigned int val;
  8085                           ;doprnt.c: 529: unsigned len;
  8086                           ;doprnt.c: 530: const char * cp;
  8087                           ;doprnt.c: 533: *ap = __va_start();
  8088                           
  8089                           ;incstack = 0
  8090  000884  0E90               	movlw	low (?_printf+2)
  8091  000886  0100               	movlb	0	; () banked
  8092  000888  6FA1               	movwf	printf@ap& (0+255),b
  8093  00088A  0E00               	movlw	high (?_printf+2)
  8094  00088C  0100               	movlb	0	; () banked
  8095  00088E  6FA2               	movwf	(printf@ap+1)& (0+255),b
  8096                           
  8097                           ;doprnt.c: 536: while(c = *f++) {
  8098  000890  D205               	goto	l4347
  8099  000892                     l4217:
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;doprnt.c: 538: if(c != '%')
  8103  000892  0E25               	movlw	37
  8104  000894  0100               	movlb	0	; () banked
  8105  000896  19A8               	xorwf	printf@c& (0+255),w,b
  8106  000898  B4D8               	btfsc	status,2,c
  8107  00089A  D005               	goto	l4221
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;doprnt.c: 540: {
  8111                           ;doprnt.c: 541: (putch(c) );
  8112  00089C  0100               	movlb	0	; () banked
  8113  00089E  51A8               	movf	printf@c& (0+255),w,b
  8114  0008A0  EC35  F019         	call	_putch
  8115                           
  8116                           ;doprnt.c: 542: continue;
  8117  0008A4  D1FB               	goto	l4347
  8118  0008A6                     l4221:
  8119                           
  8120                           ;doprnt.c: 543: }
  8121                           ;doprnt.c: 546: width = 0;
  8122  0008A6  0E00               	movlw	0
  8123  0008A8  0100               	movlb	0	; () banked
  8124  0008AA  6FAA               	movwf	(printf@width+1)& (0+255),b
  8125  0008AC  0E00               	movlw	0
  8126  0008AE  6FA9               	movwf	printf@width& (0+255),b
  8127                           
  8128                           ;doprnt.c: 548: flag = 0;
  8129  0008B0  0E00               	movlw	0
  8130  0008B2  0100               	movlb	0	; () banked
  8131  0008B4  6FA7               	movwf	printf@flag& (0+255),b
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;doprnt.c: 551: switch(*f) {
  8135                           
  8136                           ;doprnt.c: 550: for(;;) {
  8137  0008B6  D005               	goto	l4227
  8138  0008B8                     l4223:
  8139                           
  8140                           ;doprnt.c: 580: flag |= 0x04;
  8141  0008B8  0100               	movlb	0	; () banked
  8142  0008BA  85A7               	bsf	printf@flag& (0+255),2,b
  8143                           
  8144                           ;doprnt.c: 581: f++;
  8145  0008BC  0100               	movlb	0	; () banked
  8146  0008BE  4B8E               	infsnz	printf@f& (0+255),f,b
  8147  0008C0  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8148  0008C2                     l4227:
  8149  0008C2  C08E  FFF6         	movff	printf@f,tblptrl
  8150  0008C6  C08F  FFF7         	movff	printf@f+1,tblptrh
  8151  0008CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8152  0008CA  6AF8               	clrf	tblptru,c
  8153  0008CC                     	endif
  8154  0008CC                     	if	0	;tblptru may be non-zero
  8155  0008CC                     	endif
  8156  0008CC  0008               	tblrd		*
  8157  0008CE  50F5               	movf	tablat,w,c
  8158                           
  8159                           ; Switch size 1, requested type "space"
  8160                           ; Number of cases is 1, Range of values is 48 to 48
  8161                           ; switch strategies available:
  8162                           ; Name         Instructions Cycles
  8163                           ; simple_byte            4     3 (average)
  8164                           ;	Chosen strategy is simple_byte
  8165  0008D0  0A30               	xorlw	48	; case 48
  8166  0008D2  B4D8               	btfsc	status,2,c
  8167  0008D4  D7F1               	goto	l4223
  8168                           
  8169                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8170                           
  8171                           ;doprnt.c: 586: }
  8172                           
  8173                           ;doprnt.c: 585: break;
  8174  0008D6  C08E  FFF6         	movff	printf@f,tblptrl
  8175  0008DA  C08F  FFF7         	movff	printf@f+1,tblptrh
  8176  0008DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8177  0008DE  6AF8               	clrf	tblptru,c
  8178  0008E0                     	endif
  8179  0008E0                     	if	0	;tblptru may be non-zero
  8180  0008E0                     	endif
  8181  0008E0  0008               	tblrd		*
  8182  0008E2  50F5               	movf	tablat,w,c
  8183  0008E4  EC53  F018         	call	_isdigit
  8184  0008E8  A0D8               	btfss	status,0,c
  8185  0008EA  D0D2               	goto	l4275
  8186                           
  8187                           ;doprnt.c: 598: width = 0;
  8188  0008EC  0E00               	movlw	0
  8189  0008EE  0100               	movlb	0	; () banked
  8190  0008F0  6FAA               	movwf	(printf@width+1)& (0+255),b
  8191  0008F2  0E00               	movlw	0
  8192  0008F4  6FA9               	movwf	printf@width& (0+255),b
  8193  0008F6                     l4233:
  8194                           
  8195                           ;doprnt.c: 600: width *= 10;
  8196  0008F6  C0A9  F080         	movff	printf@width,___wmul@multiplier
  8197  0008FA  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  8198  0008FE  0E00               	movlw	0
  8199  000900  0100               	movlb	0	; () banked
  8200  000902  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8201  000904  0E0A               	movlw	10
  8202  000906  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8203  000908  ECED  F016         	call	___wmul	;wreg free
  8204  00090C  C080  F0A9         	movff	?___wmul,printf@width
  8205  000910  C081  F0AA         	movff	?___wmul+1,printf@width+1
  8206                           
  8207                           ;doprnt.c: 601: width += *f++ - '0';
  8208  000914  0ED0               	movlw	208
  8209  000916  0100               	movlb	0	; () banked
  8210  000918  6F9A               	movwf	??_printf& (0+255),b
  8211  00091A  0EFF               	movlw	255
  8212  00091C  0100               	movlb	0	; () banked
  8213  00091E  6F9B               	movwf	(??_printf+1)& (0+255),b
  8214  000920  C08E  FFF6         	movff	printf@f,tblptrl
  8215  000924  C08F  FFF7         	movff	printf@f+1,tblptrh
  8216  000928                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8217  000928  6AF8               	clrf	tblptru,c
  8218  00092A                     	endif
  8219  00092A                     	if	0	;tblptru may be non-zero
  8220  00092A                     	endif
  8221  00092A  0008               	tblrd		*
  8222  00092C  50F5               	movf	tablat,w,c
  8223  00092E  0100               	movlb	0	; () banked
  8224  000930  6F9C               	movwf	(??_printf+2)& (0+255),b
  8225  000932  6B9D               	clrf	(??_printf+3)& (0+255),b
  8226  000934  0100               	movlb	0	; () banked
  8227  000936  519A               	movf	??_printf& (0+255),w,b
  8228  000938  0100               	movlb	0	; () banked
  8229  00093A  279C               	addwf	(??_printf+2)& (0+255),f,b
  8230  00093C  0100               	movlb	0	; () banked
  8231  00093E  519B               	movf	(??_printf+1)& (0+255),w,b
  8232  000940  0100               	movlb	0	; () banked
  8233  000942  239D               	addwfc	(??_printf+3)& (0+255),f,b
  8234  000944  0100               	movlb	0	; () banked
  8235  000946  519C               	movf	(??_printf+2)& (0+255),w,b
  8236  000948  0100               	movlb	0	; () banked
  8237  00094A  27A9               	addwf	printf@width& (0+255),f,b
  8238  00094C  0100               	movlb	0	; () banked
  8239  00094E  519D               	movf	(??_printf+3)& (0+255),w,b
  8240  000950  0100               	movlb	0	; () banked
  8241  000952  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  8242                           
  8243                           ; BSR set to: 0
  8244  000954  0100               	movlb	0	; () banked
  8245  000956  4B8E               	infsnz	printf@f& (0+255),f,b
  8246  000958  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8250  00095A  C08E  FFF6         	movff	printf@f,tblptrl
  8251  00095E  C08F  FFF7         	movff	printf@f+1,tblptrh
  8252  000962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8253  000962  6AF8               	clrf	tblptru,c
  8254  000964                     	endif
  8255  000964                     	if	0	;tblptru may be non-zero
  8256  000964                     	endif
  8257  000964  0008               	tblrd		*
  8258  000966  50F5               	movf	tablat,w,c
  8259  000968  EC53  F018         	call	_isdigit
  8260  00096C  A0D8               	btfss	status,0,c
  8261  00096E  D090               	goto	l4275
  8262  000970  D7C2               	goto	l4233
  8263  000972                     l4241:
  8264                           
  8265                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8266  000972  C0A1  FFD9         	movff	printf@ap,fsr2l
  8267  000976  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  8268  00097A  CFDE F09F          	movff	postinc2,printf@cp
  8269  00097E  CFDD F0A0          	movff	postdec2,printf@cp+1
  8270  000982  0E02               	movlw	2
  8271  000984  0100               	movlb	0	; () banked
  8272  000986  27A1               	addwf	printf@ap& (0+255),f,b
  8273  000988  0E00               	movlw	0
  8274  00098A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;doprnt.c: 740: if(!cp)
  8278  00098C  0100               	movlb	0	; () banked
  8279  00098E  519F               	movf	printf@cp& (0+255),w,b
  8280  000990  0100               	movlb	0	; () banked
  8281  000992  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
  8282  000994  A4D8               	btfss	status,2,c
  8283  000996  D006               	goto	l4249
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;doprnt.c: 741: cp = "(null)";
  8287  000998  0EB6               	movlw	low STR_68
  8288  00099A  0100               	movlb	0	; () banked
  8289  00099C  6F9F               	movwf	printf@cp& (0+255),b
  8290  00099E  0EFF               	movlw	high STR_68
  8291  0009A0  0100               	movlb	0	; () banked
  8292  0009A2  6FA0               	movwf	(printf@cp+1)& (0+255),b
  8293  0009A4                     l4249:
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;doprnt.c: 745: len = 0;
  8297  0009A4  0E00               	movlw	0
  8298  0009A6  0100               	movlb	0	; () banked
  8299  0009A8  6FA4               	movwf	(printf@len+1)& (0+255),b
  8300  0009AA  0E00               	movlw	0
  8301  0009AC  6FA3               	movwf	printf@len& (0+255),b
  8302                           
  8303                           ;doprnt.c: 746: while(cp[len])
  8304  0009AE  D003               	goto	l4253
  8305  0009B0                     l4251:
  8306                           
  8307                           ;doprnt.c: 747: len++;
  8308  0009B0  0100               	movlb	0	; () banked
  8309  0009B2  4BA3               	infsnz	printf@len& (0+255),f,b
  8310  0009B4  2BA4               	incf	(printf@len+1)& (0+255),f,b
  8311  0009B6                     l4253:
  8312                           
  8313                           ; BSR set to: 0
  8314  0009B6  0100               	movlb	0	; () banked
  8315  0009B8  51A3               	movf	printf@len& (0+255),w,b
  8316  0009BA  0100               	movlb	0	; () banked
  8317  0009BC  259F               	addwf	printf@cp& (0+255),w,b
  8318  0009BE  0100               	movlb	0	; () banked
  8319  0009C0  6F9A               	movwf	??_printf& (0+255),b
  8320  0009C2  0100               	movlb	0	; () banked
  8321  0009C4  51A4               	movf	(printf@len+1)& (0+255),w,b
  8322  0009C6  0100               	movlb	0	; () banked
  8323  0009C8  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
  8324  0009CA  0100               	movlb	0	; () banked
  8325  0009CC  6F9B               	movwf	(??_printf+1)& (0+255),b
  8326  0009CE  C09A  FFF6         	movff	??_printf,tblptrl
  8327  0009D2  C09B  FFF7         	movff	??_printf+1,tblptrh
  8328  0009D6  0E00               	movlw	low (__mediumconst shr (0+16))
  8329  0009D8  6EF8               	movwf	tblptru,c
  8330  0009DA  0E0F               	movlw	(high __ramtop+-1)
  8331  0009DC  64F7               	cpfsgt	tblptrh,c
  8332  0009DE  D003               	bra	u2847
  8333  0009E0  0008               	tblrd		*
  8334  0009E2  50F5               	movf	tablat,w,c
  8335  0009E4  D005               	bra	u2840
  8336  0009E6                     u2847:
  8337  0009E6  CFF6 FFE9          	movff	tblptrl,fsr0l
  8338  0009EA  CFF7 FFEA          	movff	tblptrh,fsr0h
  8339  0009EE  50EF               	movf	indf0,w,c
  8340  0009F0                     u2840:
  8341  0009F0  0900               	iorlw	0
  8342  0009F2  A4D8               	btfss	status,2,c
  8343  0009F4  D7DD               	goto	l4251
  8344                           
  8345                           ;doprnt.c: 757: if(width > len)
  8346  0009F6  0100               	movlb	0	; () banked
  8347  0009F8  51A9               	movf	printf@width& (0+255),w,b
  8348  0009FA  0100               	movlb	0	; () banked
  8349  0009FC  5DA3               	subwf	printf@len& (0+255),w,b
  8350  0009FE  0100               	movlb	0	; () banked
  8351  000A00  51AA               	movf	(printf@width+1)& (0+255),w,b
  8352  000A02  0100               	movlb	0	; () banked
  8353  000A04  59A4               	subwfb	(printf@len+1)& (0+255),w,b
  8354  000A06  B0D8               	btfsc	status,0,c
  8355  000A08  D009               	goto	l4259
  8356                           
  8357                           ; BSR set to: 0
  8358                           ;doprnt.c: 758: width -= len;
  8359  000A0A  0100               	movlb	0	; () banked
  8360  000A0C  51A3               	movf	printf@len& (0+255),w,b
  8361  000A0E  0100               	movlb	0	; () banked
  8362  000A10  5FA9               	subwf	printf@width& (0+255),f,b
  8363  000A12  0100               	movlb	0	; () banked
  8364  000A14  51A4               	movf	(printf@len+1)& (0+255),w,b
  8365  000A16  0100               	movlb	0	; () banked
  8366  000A18  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  8367  000A1A  D009               	goto	l4263
  8368  000A1C                     l4259:
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;doprnt.c: 759: else
  8372                           ;doprnt.c: 760: width = 0;
  8373  000A1C  0E00               	movlw	0
  8374  000A1E  0100               	movlb	0	; () banked
  8375  000A20  6FAA               	movwf	(printf@width+1)& (0+255),b
  8376  000A22  0E00               	movlw	0
  8377  000A24  6FA9               	movwf	printf@width& (0+255),b
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;doprnt.c: 764: while(width--)
  8381  000A26  D003               	goto	l4263
  8382  000A28                     l4261:
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;doprnt.c: 765: (putch(' ') );
  8386  000A28  0E20               	movlw	32
  8387  000A2A  EC35  F019         	call	_putch
  8388  000A2E                     l4263:
  8389  000A2E  0100               	movlb	0	; () banked
  8390  000A30  07A9               	decf	printf@width& (0+255),f,b
  8391  000A32  A0D8               	btfss	status,0,c
  8392  000A34  07AA               	decf	(printf@width+1)& (0+255),f,b
  8393  000A36  0100               	movlb	0	; () banked
  8394  000A38  29A9               	incf	printf@width& (0+255),w,b
  8395  000A3A  E1F6               	bnz	l4261
  8396  000A3C  0100               	movlb	0	; () banked
  8397  000A3E  29AA               	incf	(printf@width+1)& (0+255),w,b
  8398  000A40  B4D8               	btfsc	status,2,c
  8399  000A42  D017               	goto	l4269
  8400  000A44  D7F1               	goto	l4261
  8401  000A46                     l4265:
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;doprnt.c: 768: (putch(*cp++) );
  8405  000A46  C09F  FFF6         	movff	printf@cp,tblptrl
  8406  000A4A  C0A0  FFF7         	movff	printf@cp+1,tblptrh
  8407  000A4E  0E00               	movlw	low (__mediumconst shr (0+16))
  8408  000A50  6EF8               	movwf	tblptru,c
  8409  000A52  0E0F               	movlw	(high __ramtop+-1)
  8410  000A54  64F7               	cpfsgt	tblptrh,c
  8411  000A56  D003               	bra	u2887
  8412  000A58  0008               	tblrd		*
  8413  000A5A  50F5               	movf	tablat,w,c
  8414  000A5C  D005               	bra	u2880
  8415  000A5E                     u2887:
  8416  000A5E  CFF6 FFE9          	movff	tblptrl,fsr0l
  8417  000A62  CFF7 FFEA          	movff	tblptrh,fsr0h
  8418  000A66  50EF               	movf	indf0,w,c
  8419  000A68                     u2880:
  8420  000A68  EC35  F019         	call	_putch
  8421  000A6C  0100               	movlb	0	; () banked
  8422  000A6E  4B9F               	infsnz	printf@cp& (0+255),f,b
  8423  000A70  2BA0               	incf	(printf@cp+1)& (0+255),f,b
  8424  000A72                     l4269:
  8425                           
  8426                           ; BSR set to: 0
  8427  000A72  0100               	movlb	0	; () banked
  8428  000A74  07A3               	decf	printf@len& (0+255),f,b
  8429  000A76  A0D8               	btfss	status,0,c
  8430  000A78  07A4               	decf	(printf@len+1)& (0+255),f,b
  8431  000A7A  0100               	movlb	0	; () banked
  8432  000A7C  29A3               	incf	printf@len& (0+255),w,b
  8433  000A7E  E1E3               	bnz	l4265
  8434  000A80  0100               	movlb	0	; () banked
  8435  000A82  29A4               	incf	(printf@len+1)& (0+255),w,b
  8436  000A84  B4D8               	btfsc	status,2,c
  8437  000A86  D10A               	goto	l4347
  8438  000A88  D7DE               	goto	l4265
  8439  000A8A                     l4271:
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;doprnt.c: 818: flag |= 0x40;
  8443  000A8A  0100               	movlb	0	; () banked
  8444  000A8C  8DA7               	bsf	printf@flag& (0+255),6,b
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;doprnt.c: 822: }
  8448                           
  8449                           ;doprnt.c: 819: break;
  8450  000A8E  D01D               	goto	l967
  8451  000A90                     l4275:
  8452  000A90  C08E  FFF6         	movff	printf@f,tblptrl
  8453  000A94  C08F  FFF7         	movff	printf@f+1,tblptrh
  8454  000A98  0100               	movlb	0	; () banked
  8455  000A9A  4B8E               	infsnz	printf@f& (0+255),f,b
  8456  000A9C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8457  000A9E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8458  000A9E  6AF8               	clrf	tblptru,c
  8459  000AA0                     	endif
  8460  000AA0                     	if	0	;tblptru may be non-zero
  8461  000AA0                     	endif
  8462  000AA0  0008               	tblrd		*
  8463  000AA2  CFF5 F0A8          	movff	tablat,printf@c
  8464  000AA6  0100               	movlb	0	; () banked
  8465  000AA8  51A8               	movf	printf@c& (0+255),w,b
  8466                           
  8467                           ; Switch size 1, requested type "space"
  8468                           ; Number of cases is 5, Range of values is 0 to 117
  8469                           ; switch strategies available:
  8470                           ; Name         Instructions Cycles
  8471                           ; simple_byte           16     9 (average)
  8472                           ;	Chosen strategy is simple_byte
  8473  000AAA  0A00               	xorlw	0	; case 0
  8474  000AAC  B4D8               	btfsc	status,2,c
  8475  000AAE  0012               	return	
  8476  000AB0  0A64               	xorlw	100	; case 100
  8477  000AB2  B4D8               	btfsc	status,2,c
  8478  000AB4  D00A               	goto	l967
  8479  000AB6  0A0D               	xorlw	13	; case 105
  8480  000AB8  B4D8               	btfsc	status,2,c
  8481  000ABA  D007               	goto	l967
  8482  000ABC  0A1A               	xorlw	26	; case 115
  8483  000ABE  B4D8               	btfsc	status,2,c
  8484  000AC0  D758               	goto	l4241
  8485  000AC2  0A06               	xorlw	6	; case 117
  8486  000AC4  B4D8               	btfsc	status,2,c
  8487  000AC6  D7E1               	goto	l4271
  8488  000AC8  D0E9               	goto	l4347
  8489  000ACA                     l967:
  8490                           
  8491                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  8492  000ACA  0100               	movlb	0	; () banked
  8493  000ACC  BDA7               	btfsc	printf@flag& (0+255),6,b
  8494  000ACE  D019               	goto	l4287
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;doprnt.c: 1253: {
  8498                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8499  000AD0  C0A1  FFD9         	movff	printf@ap,fsr2l
  8500  000AD4  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  8501  000AD8  CFDE F0A5          	movff	postinc2,printf@val
  8502  000ADC  CFDD F0A6          	movff	postdec2,printf@val+1
  8503                           
  8504                           ; BSR set to: 0
  8505  000AE0  0E02               	movlw	2
  8506  000AE2  0100               	movlb	0	; () banked
  8507  000AE4  27A1               	addwf	printf@ap& (0+255),f,b
  8508  000AE6  0E00               	movlw	0
  8509  000AE8  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;doprnt.c: 1261: if((int)val < 0) {
  8513  000AEA  0100               	movlb	0	; () banked
  8514  000AEC  AFA6               	btfss	(printf@val+1)& (0+255),7,b
  8515  000AEE  D016               	goto	l4291
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;doprnt.c: 1262: flag |= 0x03;
  8519  000AF0  0E03               	movlw	3
  8520  000AF2  0100               	movlb	0	; () banked
  8521  000AF4  13A7               	iorwf	printf@flag& (0+255),f,b
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;doprnt.c: 1263: val = -val;
  8525  000AF6  0100               	movlb	0	; () banked
  8526  000AF8  6DA5               	negf	printf@val& (0+255),b
  8527  000AFA  1FA6               	comf	(printf@val+1)& (0+255),f,b
  8528  000AFC  B0D8               	btfsc	status,0,c
  8529  000AFE  2BA6               	incf	(printf@val+1)& (0+255),f,b
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;doprnt.c: 1264: }
  8533                           ;doprnt.c: 1266: }
  8534  000B00  D00D               	goto	l4291
  8535  000B02                     l4287:
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;doprnt.c: 1268: else
  8539                           ;doprnt.c: 1273: {
  8540                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8541  000B02  C0A1  FFD9         	movff	printf@ap,fsr2l
  8542  000B06  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  8543  000B0A  CFDE F0A5          	movff	postinc2,printf@val
  8544  000B0E  CFDD F0A6          	movff	postdec2,printf@val+1
  8545                           
  8546                           ; BSR set to: 0
  8547  000B12  0E02               	movlw	2
  8548  000B14  0100               	movlb	0	; () banked
  8549  000B16  27A1               	addwf	printf@ap& (0+255),f,b
  8550  000B18  0E00               	movlw	0
  8551  000B1A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  8552  000B1C                     l4291:
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;doprnt.c: 1287: }
  8556                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8557  000B1C  0E01               	movlw	1
  8558  000B1E  0100               	movlb	0	; () banked
  8559  000B20  6FA8               	movwf	printf@c& (0+255),b
  8560  000B22                     l4293:
  8561                           
  8562                           ; BSR set to: 0
  8563  000B22  0E05               	movlw	5
  8564  000B24  0100               	movlb	0	; () banked
  8565  000B26  19A8               	xorwf	printf@c& (0+255),w,b
  8566  000B28  B4D8               	btfsc	status,2,c
  8567  000B2A  D019               	goto	l4305
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;doprnt.c: 1306: if(val < dpowers[c])
  8571                           
  8572                           ; BSR set to: 0
  8573                           
  8574                           ; BSR set to: 0
  8575  000B2C  0100               	movlb	0	; () banked
  8576  000B2E  51A8               	movf	printf@c& (0+255),w,b
  8577  000B30  0D02               	mullw	2
  8578  000B32  0EA4               	movlw	low _dpowers
  8579  000B34  24F3               	addwf	prodl,w,c
  8580  000B36  6EF6               	movwf	tblptrl,c
  8581  000B38  0EFD               	movlw	high _dpowers
  8582  000B3A  20F4               	addwfc	prodh,w,c
  8583  000B3C  6EF7               	movwf	tblptrh,c
  8584  000B3E                     	if	1	;There are 3 active tblptr bytes
  8585  000B3E  6AF8               	clrf	tblptru,c
  8586  000B40  0E00               	movlw	low (__mediumconst shr (0+16))
  8587  000B42  22F8               	addwfc	tblptru,f,c
  8588  000B44                     	endif
  8589  000B44  0009               	tblrd		*+
  8590  000B46  50F5               	movf	tablat,w,c
  8591  000B48  0100               	movlb	0	; () banked
  8592  000B4A  5DA5               	subwf	printf@val& (0+255),w,b
  8593  000B4C  0009               	tblrd		*+
  8594  000B4E  50F5               	movf	tablat,w,c
  8595  000B50  0100               	movlb	0	; () banked
  8596  000B52  59A6               	subwfb	(printf@val+1)& (0+255),w,b
  8597  000B54  A0D8               	btfss	status,0,c
  8598  000B56  D003               	goto	l4305
  8599                           
  8600                           ; BSR set to: 0
  8601                           
  8602                           ; BSR set to: 0
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;doprnt.c: 1307: break;
  8606  000B58  0100               	movlb	0	; () banked
  8607  000B5A  2BA8               	incf	printf@c& (0+255),f,b
  8608  000B5C  D7E2               	goto	l4293
  8609  000B5E                     l4305:
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8613  000B5E  0100               	movlb	0	; () banked
  8614  000B60  51A9               	movf	printf@width& (0+255),w,b
  8615  000B62  0100               	movlb	0	; () banked
  8616  000B64  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8617  000B66  B4D8               	btfsc	status,2,c
  8618  000B68  D00B               	goto	l4311
  8619                           
  8620                           ; BSR set to: 0
  8621  000B6A  C0A7  F09A         	movff	printf@flag,??_printf
  8622  000B6E  0E03               	movlw	3
  8623  000B70  0100               	movlb	0	; () banked
  8624  000B72  179A               	andwf	??_printf& (0+255),f,b
  8625  000B74  B4D8               	btfsc	status,2,c
  8626  000B76  D004               	goto	l4311
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;doprnt.c: 1346: width--;
  8630  000B78  0100               	movlb	0	; () banked
  8631  000B7A  07A9               	decf	printf@width& (0+255),f,b
  8632  000B7C  A0D8               	btfss	status,0,c
  8633  000B7E  07AA               	decf	(printf@width+1)& (0+255),f,b
  8634  000B80                     l4311:
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;doprnt.c: 1381: if(width > c)
  8638  000B80  0E80               	movlw	128
  8639  000B82  0100               	movlb	0	; () banked
  8640  000B84  BFA8               	btfsc	printf@c& (0+255),7,b
  8641  000B86  0E7F               	movlw	127
  8642  000B88  0100               	movlb	0	; () banked
  8643  000B8A  6F9A               	movwf	??_printf& (0+255),b
  8644  000B8C  0100               	movlb	0	; () banked
  8645  000B8E  51A9               	movf	printf@width& (0+255),w,b
  8646  000B90  0100               	movlb	0	; () banked
  8647  000B92  5DA8               	subwf	printf@c& (0+255),w,b
  8648  000B94  0100               	movlb	0	; () banked
  8649  000B96  51AA               	movf	(printf@width+1)& (0+255),w,b
  8650  000B98  0A80               	xorlw	128
  8651  000B9A  0100               	movlb	0	; () banked
  8652  000B9C  599A               	subwfb	??_printf& (0+255),w,b
  8653  000B9E  B0D8               	btfsc	status,0,c
  8654  000BA0  D00B               	goto	l4315
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;doprnt.c: 1382: width -= c;
  8658  000BA2  0100               	movlb	0	; () banked
  8659  000BA4  51A8               	movf	printf@c& (0+255),w,b
  8660  000BA6  0100               	movlb	0	; () banked
  8661  000BA8  5FA9               	subwf	printf@width& (0+255),f,b
  8662  000BAA  0E00               	movlw	0
  8663  000BAC  0100               	movlb	0	; () banked
  8664  000BAE  BFA8               	btfsc	printf@c& (0+255),7,b
  8665  000BB0  0EFF               	movlw	255
  8666  000BB2  0100               	movlb	0	; () banked
  8667  000BB4  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  8668  000BB6  D005               	goto	l4317
  8669  000BB8                     l4315:
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;doprnt.c: 1383: else
  8673                           ;doprnt.c: 1384: width = 0;
  8674  000BB8  0E00               	movlw	0
  8675  000BBA  0100               	movlb	0	; () banked
  8676  000BBC  6FAA               	movwf	(printf@width+1)& (0+255),b
  8677  000BBE  0E00               	movlw	0
  8678  000BC0  6FA9               	movwf	printf@width& (0+255),b
  8679  000BC2                     l4317:
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;doprnt.c: 1387: if(flag & 0x04) {
  8683  000BC2  0100               	movlb	0	; () banked
  8684  000BC4  A5A7               	btfss	printf@flag& (0+255),2,b
  8685  000BC6  D018               	goto	l4329
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;doprnt.c: 1392: if(flag & 0x03)
  8689  000BC8  C0A7  F09A         	movff	printf@flag,??_printf
  8690  000BCC  0E03               	movlw	3
  8691  000BCE  0100               	movlb	0	; () banked
  8692  000BD0  179A               	andwf	??_printf& (0+255),f,b
  8693  000BD2  B4D8               	btfsc	status,2,c
  8694  000BD4  D003               	goto	l4323
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;doprnt.c: 1393: (putch('-') );
  8698  000BD6  0E2D               	movlw	45
  8699  000BD8  EC35  F019         	call	_putch
  8700  000BDC                     l4323:
  8701                           
  8702                           ;doprnt.c: 1415: if(width)
  8703  000BDC  0100               	movlb	0	; () banked
  8704  000BDE  51A9               	movf	printf@width& (0+255),w,b
  8705  000BE0  0100               	movlb	0	; () banked
  8706  000BE2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8707  000BE4  B4D8               	btfsc	status,2,c
  8708  000BE6  D025               	goto	l4339
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;doprnt.c: 1417: (putch('0') );
  8712                           
  8713                           ; BSR set to: 0
  8714                           
  8715                           ;doprnt.c: 1416: do
  8716  000BE8  0E30               	movlw	48
  8717  000BEA  EC35  F019         	call	_putch
  8718                           
  8719                           ;doprnt.c: 1418: while(--width);
  8720  000BEE  0100               	movlb	0	; () banked
  8721  000BF0  07A9               	decf	printf@width& (0+255),f,b
  8722  000BF2  A0D8               	btfss	status,0,c
  8723  000BF4  07AA               	decf	(printf@width+1)& (0+255),f,b
  8724  000BF6  D7F2               	goto	l4323
  8725  000BF8                     l4329:
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;doprnt.c: 1422: {
  8729                           ;doprnt.c: 1424: if(width
  8730                           ;doprnt.c: 1428: )
  8731  000BF8  0100               	movlb	0	; () banked
  8732  000BFA  51A9               	movf	printf@width& (0+255),w,b
  8733  000BFC  0100               	movlb	0	; () banked
  8734  000BFE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8735  000C00  B4D8               	btfsc	status,2,c
  8736  000C02  D00D               	goto	l4335
  8737  000C04                     l4331:
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;doprnt.c: 1430: (putch(' ') );
  8741  000C04  0E20               	movlw	32
  8742  000C06  EC35  F019         	call	_putch
  8743                           
  8744                           ;doprnt.c: 1431: while(--width);
  8745  000C0A  0100               	movlb	0	; () banked
  8746  000C0C  07A9               	decf	printf@width& (0+255),f,b
  8747  000C0E  A0D8               	btfss	status,0,c
  8748  000C10  07AA               	decf	(printf@width+1)& (0+255),f,b
  8749  000C12  0100               	movlb	0	; () banked
  8750  000C14  51A9               	movf	printf@width& (0+255),w,b
  8751  000C16  0100               	movlb	0	; () banked
  8752  000C18  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8753  000C1A  A4D8               	btfss	status,2,c
  8754  000C1C  D7F3               	goto	l4331
  8755  000C1E                     l4335:
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;doprnt.c: 1438: if(flag & 0x03)
  8759  000C1E  C0A7  F09A         	movff	printf@flag,??_printf
  8760  000C22  0E03               	movlw	3
  8761  000C24  0100               	movlb	0	; () banked
  8762  000C26  179A               	andwf	??_printf& (0+255),f,b
  8763  000C28  B4D8               	btfsc	status,2,c
  8764  000C2A  D003               	goto	l4339
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;doprnt.c: 1439: (putch('-') );
  8768  000C2C  0E2D               	movlw	45
  8769  000C2E  EC35  F019         	call	_putch
  8770  000C32                     l4339:
  8771                           
  8772                           ;doprnt.c: 1469: }
  8773                           ;doprnt.c: 1472: prec = c;
  8774  000C32  C0A8  F09E         	movff	printf@c,printf@prec
  8775                           
  8776                           ;doprnt.c: 1474: while(prec--) {
  8777  000C36  D02C               	goto	l4345
  8778  000C38                     l4341:
  8779                           
  8780                           ;doprnt.c: 1478: {
  8781                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8782  000C38  0100               	movlb	0	; () banked
  8783  000C3A  519E               	movf	printf@prec& (0+255),w,b
  8784  000C3C  0D02               	mullw	2
  8785  000C3E  0EA4               	movlw	low _dpowers
  8786  000C40  24F3               	addwf	prodl,w,c
  8787  000C42  6EF6               	movwf	tblptrl,c
  8788  000C44  0EFD               	movlw	high _dpowers
  8789  000C46  20F4               	addwfc	prodh,w,c
  8790  000C48  6EF7               	movwf	tblptrh,c
  8791  000C4A                     	if	1	;There are 3 active tblptr bytes
  8792  000C4A  6AF8               	clrf	tblptru,c
  8793  000C4C  0E00               	movlw	low (__mediumconst shr (0+16))
  8794  000C4E  22F8               	addwfc	tblptru,f,c
  8795  000C50                     	endif
  8796  000C50  0009               	tblrd		*+
  8797  000C52  CFF5 F082          	movff	tablat,___lwdiv@divisor
  8798  000C56  000A               	tblrd		*-
  8799  000C58  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  8800  000C5C  C0A5  F080         	movff	printf@val,___lwdiv@dividend
  8801  000C60  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
  8802  000C64  ECE8  F013         	call	___lwdiv	;wreg free
  8803  000C68  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  8804  000C6C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  8805  000C70  0E00               	movlw	0
  8806  000C72  0100               	movlb	0	; () banked
  8807  000C74  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  8808  000C76  0E0A               	movlw	10
  8809  000C78  6F89               	movwf	___lwmod@divisor& (0+255),b
  8810  000C7A  EC03  F015         	call	___lwmod	;wreg free
  8811  000C7E  0100               	movlb	0	; () banked
  8812  000C80  5187               	movf	?___lwmod& (0+255),w,b
  8813  000C82  0F30               	addlw	48
  8814  000C84  0100               	movlb	0	; () banked
  8815  000C86  6FA8               	movwf	printf@c& (0+255),b
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;doprnt.c: 1523: }
  8819                           ;doprnt.c: 1524: (putch(c) );
  8820  000C88  0100               	movlb	0	; () banked
  8821  000C8A  51A8               	movf	printf@c& (0+255),w,b
  8822  000C8C  EC35  F019         	call	_putch
  8823  000C90                     l4345:
  8824  000C90  0100               	movlb	0	; () banked
  8825  000C92  079E               	decf	printf@prec& (0+255),f,b
  8826  000C94  0100               	movlb	0	; () banked
  8827  000C96  299E               	incf	printf@prec& (0+255),w,b
  8828  000C98  A4D8               	btfss	status,2,c
  8829  000C9A  D7CE               	goto	l4341
  8830  000C9C                     l4347:
  8831  000C9C  C08E  FFF6         	movff	printf@f,tblptrl
  8832  000CA0  C08F  FFF7         	movff	printf@f+1,tblptrh
  8833  000CA4  0100               	movlb	0	; () banked
  8834  000CA6  4B8E               	infsnz	printf@f& (0+255),f,b
  8835  000CA8  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8836  000CAA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8837  000CAA  6AF8               	clrf	tblptru,c
  8838  000CAC                     	endif
  8839  000CAC                     	if	0	;tblptru may be non-zero
  8840  000CAC                     	endif
  8841  000CAC  0008               	tblrd		*
  8842  000CAE  CFF5 F0A8          	movff	tablat,printf@c
  8843  000CB2  0100               	movlb	0	; () banked
  8844  000CB4  51A8               	movf	printf@c& (0+255),w,b
  8845  000CB6  B4D8               	btfsc	status,2,c
  8846  000CB8  0012               	return	
  8847  000CBA  D5EB               	goto	l4217
  8848  000CBC                     __end_of_printf:
  8849                           	opt stack 0
  8850                           tblptru	equ	0xFF8
  8851                           tblptrh	equ	0xFF7
  8852                           tblptrl	equ	0xFF6
  8853                           tablat	equ	0xFF5
  8854                           prodh	equ	0xFF4
  8855                           prodl	equ	0xFF3
  8856                           intcon	equ	0xFF2
  8857                           intcon2	equ	0xFF1
  8858                           intcon3	equ	0xFF0
  8859                           indf0	equ	0xFEF
  8860                           postinc0	equ	0xFEE
  8861                           fsr0h	equ	0xFEA
  8862                           fsr0l	equ	0xFE9
  8863                           wreg	equ	0xFE8
  8864                           postdec1	equ	0xFE5
  8865                           fsr1l	equ	0xFE1
  8866                           indf2	equ	0xFDF
  8867                           postinc2	equ	0xFDE
  8868                           postdec2	equ	0xFDD
  8869                           fsr2h	equ	0xFDA
  8870                           fsr2l	equ	0xFD9
  8871                           status	equ	0xFD8
  8872                           
  8873 ;; *************** function _putch *****************
  8874 ;; Defined at:
  8875 ;;		line 20 in file "lcd.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;  data            1    wreg     unsigned char 
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  data            1    2[BANK0 ] unsigned char 
  8880 ;; Return value:  Size  Location     Type
  8881 ;;                  1    wreg      void 
  8882 ;; Registers used:
  8883 ;;		wreg, status,2, status,0, cstack
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8892 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;Total ram usage:        1 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    8
  8896 ;; This function calls:
  8897 ;;		_lcdNibble
  8898 ;; This function is called by:
  8899 ;;		_printf
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           	psect	text35
  8904  00326A                     __ptext35:
  8905                           	opt stack 0
  8906  00326A                     _putch:
  8907                           	opt stack 19
  8908                           
  8909                           ;incstack = 0
  8910                           ;putch@data stored from wreg
  8911  00326A  0100               	movlb	0	; () banked
  8912  00326C  6F82               	movwf	putch@data& (0+255),b
  8913                           
  8914                           ;lcd.c: 21: LATDbits.LATD2 = 1;
  8915  00326E  848C               	bsf	3980,2,c	;volatile
  8916                           
  8917                           ;lcd.c: 22: lcdNibble(data);
  8918  003270  0100               	movlb	0	; () banked
  8919  003272  5182               	movf	putch@data& (0+255),w,b
  8920  003274  ECCF  F014         	call	_lcdNibble
  8921  003278  0012               	return		;funcret
  8922  00327A                     __end_of_putch:
  8923                           	opt stack 0
  8924                           tblptru	equ	0xFF8
  8925                           tblptrh	equ	0xFF7
  8926                           tblptrl	equ	0xFF6
  8927                           tablat	equ	0xFF5
  8928                           prodh	equ	0xFF4
  8929                           prodl	equ	0xFF3
  8930                           intcon	equ	0xFF2
  8931                           intcon2	equ	0xFF1
  8932                           intcon3	equ	0xFF0
  8933                           indf0	equ	0xFEF
  8934                           postinc0	equ	0xFEE
  8935                           fsr0h	equ	0xFEA
  8936                           fsr0l	equ	0xFE9
  8937                           wreg	equ	0xFE8
  8938                           postdec1	equ	0xFE5
  8939                           fsr1l	equ	0xFE1
  8940                           indf2	equ	0xFDF
  8941                           postinc2	equ	0xFDE
  8942                           postdec2	equ	0xFDD
  8943                           fsr2h	equ	0xFDA
  8944                           fsr2l	equ	0xFD9
  8945                           status	equ	0xFD8
  8946                           
  8947 ;; *************** function _isdigit *****************
  8948 ;; Defined at:
  8949 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;  c               1    wreg     unsigned char 
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;  c               1    2[BANK0 ] unsigned char 
  8954 ;; Return value:  Size  Location     Type
  8955 ;;		None               void
  8956 ;; Registers used:
  8957 ;;		wreg, status,2, status,0
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8966 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;Total ram usage:        3 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; Hardware stack levels required when called:    7
  8970 ;; This function calls:
  8971 ;;		Nothing
  8972 ;; This function is called by:
  8973 ;;		_printf
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           	psect	text36
  8978  0030A6                     __ptext36:
  8979                           	opt stack 0
  8980  0030A6                     _isdigit:
  8981                           	opt stack 20
  8982                           
  8983                           ;incstack = 0
  8984                           ;isdigit@c stored from wreg
  8985  0030A6  0100               	movlb	0	; () banked
  8986  0030A8  6F82               	movwf	isdigit@c& (0+255),b
  8987  0030AA  0E00               	movlw	0
  8988  0030AC  0100               	movlb	0	; () banked
  8989  0030AE  6F81               	movwf	_isdigit$1632& (0+255),b
  8990                           
  8991                           ; BSR set to: 0
  8992  0030B0  0E3A               	movlw	58
  8993  0030B2  0100               	movlb	0	; () banked
  8994  0030B4  6182               	cpfslt	isdigit@c& (0+255),b
  8995  0030B6  D007               	goto	l4067
  8996                           
  8997                           ; BSR set to: 0
  8998  0030B8  0E2F               	movlw	47
  8999  0030BA  0100               	movlb	0	; () banked
  9000  0030BC  6582               	cpfsgt	isdigit@c& (0+255),b
  9001  0030BE  D003               	goto	l4067
  9002                           
  9003                           ; BSR set to: 0
  9004  0030C0  0E01               	movlw	1
  9005  0030C2  0100               	movlb	0	; () banked
  9006  0030C4  6F81               	movwf	_isdigit$1632& (0+255),b
  9007  0030C6                     l4067:
  9008                           
  9009                           ; BSR set to: 0
  9010  0030C6  C081  F080         	movff	_isdigit$1632,??_isdigit
  9011  0030CA  0100               	movlb	0	; () banked
  9012  0030CC  3180               	rrcf	??_isdigit& (0+255),w,b
  9013  0030CE  0012               	return	
  9014  0030D0                     __end_of_isdigit:
  9015                           	opt stack 0
  9016                           tblptru	equ	0xFF8
  9017                           tblptrh	equ	0xFF7
  9018                           tblptrl	equ	0xFF6
  9019                           tablat	equ	0xFF5
  9020                           prodh	equ	0xFF4
  9021                           prodl	equ	0xFF3
  9022                           intcon	equ	0xFF2
  9023                           intcon2	equ	0xFF1
  9024                           intcon3	equ	0xFF0
  9025                           indf0	equ	0xFEF
  9026                           postinc0	equ	0xFEE
  9027                           fsr0h	equ	0xFEA
  9028                           fsr0l	equ	0xFE9
  9029                           wreg	equ	0xFE8
  9030                           postdec1	equ	0xFE5
  9031                           fsr1l	equ	0xFE1
  9032                           indf2	equ	0xFDF
  9033                           postinc2	equ	0xFDE
  9034                           postdec2	equ	0xFDD
  9035                           fsr2h	equ	0xFDA
  9036                           fsr2l	equ	0xFD9
  9037                           status	equ	0xFD8
  9038                           
  9039 ;; *************** function ___wmul *****************
  9040 ;; Defined at:
  9041 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9044 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;  product         2    4[BANK0 ] unsigned int 
  9047 ;; Return value:  Size  Location     Type
  9048 ;;                  2    0[BANK0 ] unsigned int 
  9049 ;; Registers used:
  9050 ;;		wreg, status,2, status,0, prodl, prodh
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9056 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9060 ;;Total ram usage:        6 bytes
  9061 ;; Hardware stack levels used:    1
  9062 ;; Hardware stack levels required when called:    7
  9063 ;; This function calls:
  9064 ;;		Nothing
  9065 ;; This function is called by:
  9066 ;;		_printf
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           	psect	text37
  9071  002DDA                     __ptext37:
  9072                           	opt stack 0
  9073  002DDA                     ___wmul:
  9074                           	opt stack 20
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;incstack = 0
  9078  002DDA  0100               	movlb	0	; () banked
  9079  002DDC  5180               	movf	___wmul@multiplier& (0+255),w,b
  9080  002DDE  0100               	movlb	0	; () banked
  9081  002DE0  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9082  002DE2  CFF3 F084          	movff	prodl,___wmul@product
  9083  002DE6  CFF4 F085          	movff	prodh,___wmul@product+1
  9084  002DEA  0100               	movlb	0	; () banked
  9085  002DEC  5180               	movf	___wmul@multiplier& (0+255),w,b
  9086  002DEE  0100               	movlb	0	; () banked
  9087  002DF0  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9088  002DF2  50F3               	movf	prodl,w,c
  9089  002DF4  0100               	movlb	0	; () banked
  9090  002DF6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9091  002DF8  0100               	movlb	0	; () banked
  9092  002DFA  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9093  002DFC  0100               	movlb	0	; () banked
  9094  002DFE  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9095  002E00  50F3               	movf	prodl,w,c
  9096  002E02  0100               	movlb	0	; () banked
  9097  002E04  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9098                           
  9099                           ; BSR set to: 0
  9100  002E06  C084  F080         	movff	___wmul@product,?___wmul
  9101  002E0A  C085  F081         	movff	___wmul@product+1,?___wmul+1
  9102  002E0E  0012               	return	
  9103  002E10                     __end_of___wmul:
  9104                           	opt stack 0
  9105                           tblptru	equ	0xFF8
  9106                           tblptrh	equ	0xFF7
  9107                           tblptrl	equ	0xFF6
  9108                           tablat	equ	0xFF5
  9109                           prodh	equ	0xFF4
  9110                           prodl	equ	0xFF3
  9111                           intcon	equ	0xFF2
  9112                           intcon2	equ	0xFF1
  9113                           intcon3	equ	0xFF0
  9114                           indf0	equ	0xFEF
  9115                           postinc0	equ	0xFEE
  9116                           fsr0h	equ	0xFEA
  9117                           fsr0l	equ	0xFE9
  9118                           wreg	equ	0xFE8
  9119                           postdec1	equ	0xFE5
  9120                           fsr1l	equ	0xFE1
  9121                           indf2	equ	0xFDF
  9122                           postinc2	equ	0xFDE
  9123                           postdec2	equ	0xFDD
  9124                           fsr2h	equ	0xFDA
  9125                           fsr2l	equ	0xFD9
  9126                           status	equ	0xFD8
  9127                           
  9128 ;; *************** function ___lwmod *****************
  9129 ;; Defined at:
  9130 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9131 ;; Parameters:    Size  Location     Type
  9132 ;;  dividend        2    7[BANK0 ] unsigned int 
  9133 ;;  divisor         2    9[BANK0 ] unsigned int 
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;  counter         1   11[BANK0 ] unsigned char 
  9136 ;; Return value:  Size  Location     Type
  9137 ;;                  2    7[BANK0 ] unsigned int 
  9138 ;; Registers used:
  9139 ;;		wreg, status,2, status,0
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9145 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;Total ram usage:        5 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    7
  9152 ;; This function calls:
  9153 ;;		Nothing
  9154 ;; This function is called by:
  9155 ;;		_printf
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           	psect	text38
  9160  002A06                     __ptext38:
  9161                           	opt stack 0
  9162  002A06                     ___lwmod:
  9163                           	opt stack 20
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;incstack = 0
  9167  002A06  0100               	movlb	0	; () banked
  9168  002A08  5189               	movf	___lwmod@divisor& (0+255),w,b
  9169  002A0A  0100               	movlb	0	; () banked
  9170  002A0C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  9171  002A0E  B4D8               	btfsc	status,2,c
  9172  002A10  D026               	goto	l1424
  9173                           
  9174                           ; BSR set to: 0
  9175  002A12  0E01               	movlw	1
  9176  002A14  0100               	movlb	0	; () banked
  9177  002A16  6F8B               	movwf	___lwmod@counter& (0+255),b
  9178  002A18  D006               	goto	l4105
  9179  002A1A                     l4103:
  9180                           
  9181                           ; BSR set to: 0
  9182  002A1A  0100               	movlb	0	; () banked
  9183  002A1C  90D8               	bcf	status,0,c
  9184  002A1E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  9185  002A20  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  9186  002A22  0100               	movlb	0	; () banked
  9187  002A24  2B8B               	incf	___lwmod@counter& (0+255),f,b
  9188  002A26                     l4105:
  9189                           
  9190                           ; BSR set to: 0
  9191  002A26  0100               	movlb	0	; () banked
  9192  002A28  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  9193  002A2A  D7F7               	goto	l4103
  9194  002A2C                     l4107:
  9195                           
  9196                           ; BSR set to: 0
  9197  002A2C  0100               	movlb	0	; () banked
  9198  002A2E  5189               	movf	___lwmod@divisor& (0+255),w,b
  9199  002A30  0100               	movlb	0	; () banked
  9200  002A32  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  9201  002A34  0100               	movlb	0	; () banked
  9202  002A36  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9203  002A38  0100               	movlb	0	; () banked
  9204  002A3A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  9205  002A3C  A0D8               	btfss	status,0,c
  9206  002A3E  D008               	goto	l4111
  9207                           
  9208                           ; BSR set to: 0
  9209  002A40  0100               	movlb	0	; () banked
  9210  002A42  5189               	movf	___lwmod@divisor& (0+255),w,b
  9211  002A44  0100               	movlb	0	; () banked
  9212  002A46  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  9213  002A48  0100               	movlb	0	; () banked
  9214  002A4A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9215  002A4C  0100               	movlb	0	; () banked
  9216  002A4E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  9217  002A50                     l4111:
  9218                           
  9219                           ; BSR set to: 0
  9220  002A50  0100               	movlb	0	; () banked
  9221  002A52  90D8               	bcf	status,0,c
  9222  002A54  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  9223  002A56  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  9224                           
  9225                           ; BSR set to: 0
  9226  002A58  0100               	movlb	0	; () banked
  9227  002A5A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  9228  002A5C  D7E7               	goto	l4107
  9229  002A5E                     l1424:
  9230                           
  9231                           ; BSR set to: 0
  9232  002A5E  C087  F087         	movff	___lwmod@dividend,?___lwmod
  9233  002A62  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  9234                           
  9235                           ; BSR set to: 0
  9236  002A66  0012               	return		;funcret
  9237  002A68                     __end_of___lwmod:
  9238                           	opt stack 0
  9239                           tblptru	equ	0xFF8
  9240                           tblptrh	equ	0xFF7
  9241                           tblptrl	equ	0xFF6
  9242                           tablat	equ	0xFF5
  9243                           prodh	equ	0xFF4
  9244                           prodl	equ	0xFF3
  9245                           intcon	equ	0xFF2
  9246                           intcon2	equ	0xFF1
  9247                           intcon3	equ	0xFF0
  9248                           indf0	equ	0xFEF
  9249                           postinc0	equ	0xFEE
  9250                           fsr0h	equ	0xFEA
  9251                           fsr0l	equ	0xFE9
  9252                           wreg	equ	0xFE8
  9253                           postdec1	equ	0xFE5
  9254                           fsr1l	equ	0xFE1
  9255                           indf2	equ	0xFDF
  9256                           postinc2	equ	0xFDE
  9257                           postdec2	equ	0xFDD
  9258                           fsr2h	equ	0xFDA
  9259                           fsr2l	equ	0xFD9
  9260                           status	equ	0xFD8
  9261                           
  9262 ;; *************** function ___lwdiv *****************
  9263 ;; Defined at:
  9264 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;  dividend        2    0[BANK0 ] unsigned int 
  9267 ;;  divisor         2    2[BANK0 ] unsigned int 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;  quotient        2    4[BANK0 ] unsigned int 
  9270 ;;  counter         1    6[BANK0 ] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  2    0[BANK0 ] unsigned int 
  9273 ;; Registers used:
  9274 ;;		wreg, status,2, status,0
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;Total ram usage:        7 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    7
  9287 ;; This function calls:
  9288 ;;		Nothing
  9289 ;; This function is called by:
  9290 ;;		_printf
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           	psect	text39
  9295  0027D0                     __ptext39:
  9296                           	opt stack 0
  9297  0027D0                     ___lwdiv:
  9298                           	opt stack 20
  9299                           
  9300                           ; BSR set to: 0
  9301                           ;incstack = 0
  9302  0027D0  0E00               	movlw	0
  9303  0027D2  0100               	movlb	0	; () banked
  9304  0027D4  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9305  0027D6  0E00               	movlw	0
  9306  0027D8  6F84               	movwf	___lwdiv@quotient& (0+255),b
  9307                           
  9308                           ; BSR set to: 0
  9309  0027DA  0100               	movlb	0	; () banked
  9310  0027DC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9311  0027DE  0100               	movlb	0	; () banked
  9312  0027E0  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9313  0027E2  B4D8               	btfsc	status,2,c
  9314  0027E4  D02C               	goto	l1414
  9315                           
  9316                           ; BSR set to: 0
  9317  0027E6  0E01               	movlw	1
  9318  0027E8  0100               	movlb	0	; () banked
  9319  0027EA  6F86               	movwf	___lwdiv@counter& (0+255),b
  9320  0027EC  D006               	goto	l4085
  9321  0027EE                     l4083:
  9322                           
  9323                           ; BSR set to: 0
  9324  0027EE  0100               	movlb	0	; () banked
  9325  0027F0  90D8               	bcf	status,0,c
  9326  0027F2  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  9327  0027F4  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9328  0027F6  0100               	movlb	0	; () banked
  9329  0027F8  2B86               	incf	___lwdiv@counter& (0+255),f,b
  9330  0027FA                     l4085:
  9331                           
  9332                           ; BSR set to: 0
  9333  0027FA  0100               	movlb	0	; () banked
  9334  0027FC  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9335  0027FE  D7F7               	goto	l4083
  9336  002800                     l4087:
  9337                           
  9338                           ; BSR set to: 0
  9339  002800  0100               	movlb	0	; () banked
  9340  002802  90D8               	bcf	status,0,c
  9341  002804  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  9342  002806  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9343                           
  9344                           ; BSR set to: 0
  9345  002808  0100               	movlb	0	; () banked
  9346  00280A  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9347  00280C  0100               	movlb	0	; () banked
  9348  00280E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  9349  002810  0100               	movlb	0	; () banked
  9350  002812  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9351  002814  0100               	movlb	0	; () banked
  9352  002816  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9353  002818  A0D8               	btfss	status,0,c
  9354  00281A  D00A               	goto	l4095
  9355                           
  9356                           ; BSR set to: 0
  9357  00281C  0100               	movlb	0	; () banked
  9358  00281E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9359  002820  0100               	movlb	0	; () banked
  9360  002822  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  9361  002824  0100               	movlb	0	; () banked
  9362  002826  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9363  002828  0100               	movlb	0	; () banked
  9364  00282A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9365                           
  9366                           ; BSR set to: 0
  9367  00282C  0100               	movlb	0	; () banked
  9368  00282E  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  9369  002830                     l4095:
  9370                           
  9371                           ; BSR set to: 0
  9372  002830  0100               	movlb	0	; () banked
  9373  002832  90D8               	bcf	status,0,c
  9374  002834  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9375  002836  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  9376                           
  9377                           ; BSR set to: 0
  9378  002838  0100               	movlb	0	; () banked
  9379  00283A  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  9380  00283C  D7E1               	goto	l4087
  9381  00283E                     l1414:
  9382                           
  9383                           ; BSR set to: 0
  9384  00283E  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  9385  002842  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9386                           
  9387                           ; BSR set to: 0
  9388  002846  0012               	return		;funcret
  9389  002848                     __end_of___lwdiv:
  9390                           	opt stack 0
  9391                           tblptru	equ	0xFF8
  9392                           tblptrh	equ	0xFF7
  9393                           tblptrl	equ	0xFF6
  9394                           tablat	equ	0xFF5
  9395                           prodh	equ	0xFF4
  9396                           prodl	equ	0xFF3
  9397                           intcon	equ	0xFF2
  9398                           intcon2	equ	0xFF1
  9399                           intcon3	equ	0xFF0
  9400                           indf0	equ	0xFEF
  9401                           postinc0	equ	0xFEE
  9402                           fsr0h	equ	0xFEA
  9403                           fsr0l	equ	0xFE9
  9404                           wreg	equ	0xFE8
  9405                           postdec1	equ	0xFE5
  9406                           fsr1l	equ	0xFE1
  9407                           indf2	equ	0xFDF
  9408                           postinc2	equ	0xFDE
  9409                           postdec2	equ	0xFDD
  9410                           fsr2h	equ	0xFDA
  9411                           fsr2l	equ	0xFD9
  9412                           status	equ	0xFD8
  9413                           
  9414 ;; *************** function _lcdInst *****************
  9415 ;; Defined at:
  9416 ;;		line 15 in file "lcd.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;  data            1    wreg     unsigned char 
  9419 ;; Auto vars:     Size  Location     Type
  9420 ;;  data            1    2[BANK0 ] unsigned char 
  9421 ;; Return value:  Size  Location     Type
  9422 ;;                  1    wreg      void 
  9423 ;; Registers used:
  9424 ;;		wreg, status,2, status,0, cstack
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9433 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9434 ;;Total ram usage:        1 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; Hardware stack levels required when called:    8
  9437 ;; This function calls:
  9438 ;;		_lcdNibble
  9439 ;; This function is called by:
  9440 ;;		_UI
  9441 ;;		_change_state_to_menu_start
  9442 ;;		_change_state_to_menu_12
  9443 ;;		_change_state_to_menu_22
  9444 ;;		_initLCD
  9445 ;;		_printRTC
  9446 ;;		_Loading
  9447 ;;		_EEPROM_write
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451                           	psect	text40
  9452  00327A                     __ptext40:
  9453                           	opt stack 0
  9454  00327A                     _lcdInst:
  9455                           	opt stack 20
  9456                           
  9457                           ; BSR set to: 0
  9458                           ;incstack = 0
  9459                           ;lcdInst@data stored from wreg
  9460  00327A  0100               	movlb	0	; () banked
  9461  00327C  6F82               	movwf	lcdInst@data& (0+255),b
  9462                           
  9463                           ;lcd.c: 16: LATDbits.LATD2 = 0;
  9464  00327E  948C               	bcf	3980,2,c	;volatile
  9465                           
  9466                           ;lcd.c: 17: lcdNibble(data);
  9467  003280  0100               	movlb	0	; () banked
  9468  003282  5182               	movf	lcdInst@data& (0+255),w,b
  9469  003284  ECCF  F014         	call	_lcdNibble
  9470  003288  0012               	return		;funcret
  9471  00328A                     __end_of_lcdInst:
  9472                           	opt stack 0
  9473                           tblptru	equ	0xFF8
  9474                           tblptrh	equ	0xFF7
  9475                           tblptrl	equ	0xFF6
  9476                           tablat	equ	0xFF5
  9477                           prodh	equ	0xFF4
  9478                           prodl	equ	0xFF3
  9479                           intcon	equ	0xFF2
  9480                           intcon2	equ	0xFF1
  9481                           intcon3	equ	0xFF0
  9482                           indf0	equ	0xFEF
  9483                           postinc0	equ	0xFEE
  9484                           fsr0h	equ	0xFEA
  9485                           fsr0l	equ	0xFE9
  9486                           wreg	equ	0xFE8
  9487                           postdec1	equ	0xFE5
  9488                           fsr1l	equ	0xFE1
  9489                           indf2	equ	0xFDF
  9490                           postinc2	equ	0xFDE
  9491                           postdec2	equ	0xFDD
  9492                           fsr2h	equ	0xFDA
  9493                           fsr2l	equ	0xFD9
  9494                           status	equ	0xFD8
  9495                           
  9496 ;; *************** function _lcdNibble *****************
  9497 ;; Defined at:
  9498 ;;		line 25 in file "lcd.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  data            1    wreg     unsigned char 
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;  data            1    1[BANK0 ] unsigned char 
  9503 ;;  temp            1    0[BANK0 ] unsigned char 
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      void 
  9506 ;; Registers used:
  9507 ;;		wreg, status,2, status,0
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;Total ram usage:        2 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    7
  9520 ;; This function calls:
  9521 ;;		Nothing
  9522 ;; This function is called by:
  9523 ;;		_lcdInst
  9524 ;;		_putch
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           	psect	text41
  9529  00299E                     __ptext41:
  9530                           	opt stack 0
  9531  00299E                     _lcdNibble:
  9532                           	opt stack 20
  9533                           
  9534                           ;incstack = 0
  9535                           ;lcdNibble@data stored from wreg
  9536  00299E  0100               	movlb	0	; () banked
  9537  0029A0  6F81               	movwf	lcdNibble@data& (0+255),b
  9538                           
  9539                           ;lcd.c: 27: char temp = data & 0xF0;
  9540  0029A2  0100               	movlb	0	; () banked
  9541  0029A4  5181               	movf	lcdNibble@data& (0+255),w,b
  9542  0029A6  0BF0               	andlw	240
  9543  0029A8  0100               	movlb	0	; () banked
  9544  0029AA  6F80               	movwf	lcdNibble@temp& (0+255),b
  9545                           
  9546                           ;lcd.c: 28: LATD = LATD & 0x0F;
  9547  0029AC  508C               	movf	3980,w,c	;volatile
  9548  0029AE  0B0F               	andlw	15
  9549  0029B0  6E8C               	movwf	3980,c	;volatile
  9550                           
  9551                           ;lcd.c: 29: LATD = temp | LATD;
  9552  0029B2  0100               	movlb	0	; () banked
  9553  0029B4  5180               	movf	lcdNibble@temp& (0+255),w,b
  9554  0029B6  108C               	iorwf	3980,w,c	;volatile
  9555  0029B8  6E8C               	movwf	3980,c	;volatile
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;lcd.c: 31: LATDbits.LATD3 = 1;
  9559  0029BA  868C               	bsf	3980,3,c	;volatile
  9560                           
  9561                           ; BSR set to: 0
  9562                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9563  0029BC  0E42               	movlw	66
  9564  0029BE                     u5447:
  9565  0029BE  2EE8               	decfsz	wreg,f,c
  9566  0029C0  D7FE               	bra	u5447
  9567  0029C2  D000               	nop2	
  9568                           
  9569                           ;lcd.c: 33: LATDbits.LATD3 = 0;
  9570  0029C4  968C               	bcf	3980,3,c	;volatile
  9571                           
  9572                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9573  0029C6  0E42               	movlw	66
  9574  0029C8                     u5457:
  9575  0029C8  2EE8               	decfsz	wreg,f,c
  9576  0029CA  D7FE               	bra	u5457
  9577  0029CC  D000               	nop2	
  9578                           
  9579                           ;lcd.c: 36: data = data << 4;
  9580  0029CE  0100               	movlb	0	; () banked
  9581  0029D0  3981               	swapf	lcdNibble@data& (0+255),w,b
  9582  0029D2  0BF0               	andlw	240
  9583  0029D4  0100               	movlb	0	; () banked
  9584  0029D6  6F81               	movwf	lcdNibble@data& (0+255),b
  9585                           
  9586                           ;lcd.c: 38: temp = data & 0xF0;
  9587  0029D8  0100               	movlb	0	; () banked
  9588  0029DA  5181               	movf	lcdNibble@data& (0+255),w,b
  9589  0029DC  0BF0               	andlw	240
  9590  0029DE  0100               	movlb	0	; () banked
  9591  0029E0  6F80               	movwf	lcdNibble@temp& (0+255),b
  9592                           
  9593                           ;lcd.c: 39: LATD = LATD & 0x0F;
  9594  0029E2  508C               	movf	3980,w,c	;volatile
  9595  0029E4  0B0F               	andlw	15
  9596  0029E6  6E8C               	movwf	3980,c	;volatile
  9597                           
  9598                           ;lcd.c: 40: LATD = temp | LATD;
  9599  0029E8  0100               	movlb	0	; () banked
  9600  0029EA  5180               	movf	lcdNibble@temp& (0+255),w,b
  9601  0029EC  108C               	iorwf	3980,w,c	;volatile
  9602  0029EE  6E8C               	movwf	3980,c	;volatile
  9603                           
  9604                           ; BSR set to: 0
  9605                           ;lcd.c: 42: LATDbits.LATD3 = 1;
  9606  0029F0  868C               	bsf	3980,3,c	;volatile
  9607                           
  9608                           ; BSR set to: 0
  9609                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9610  0029F2  0E42               	movlw	66
  9611  0029F4                     u5467:
  9612  0029F4  2EE8               	decfsz	wreg,f,c
  9613  0029F6  D7FE               	bra	u5467
  9614  0029F8  D000               	nop2	
  9615                           
  9616                           ;lcd.c: 44: LATDbits.LATD3 = 0;
  9617  0029FA  968C               	bcf	3980,3,c	;volatile
  9618                           
  9619                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9620  0029FC  0E42               	movlw	66
  9621  0029FE                     u5477:
  9622  0029FE  2EE8               	decfsz	wreg,f,c
  9623  002A00  D7FE               	bra	u5477
  9624  002A02  D000               	nop2	
  9625  002A04  0012               	return		;funcret
  9626  002A06                     __end_of_lcdNibble:
  9627                           	opt stack 0
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           intcon	equ	0xFF2
  9635                           intcon2	equ	0xFF1
  9636                           intcon3	equ	0xFF0
  9637                           indf0	equ	0xFEF
  9638                           postinc0	equ	0xFEE
  9639                           fsr0h	equ	0xFEA
  9640                           fsr0l	equ	0xFE9
  9641                           wreg	equ	0xFE8
  9642                           postdec1	equ	0xFE5
  9643                           fsr1l	equ	0xFE1
  9644                           indf2	equ	0xFDF
  9645                           postinc2	equ	0xFDE
  9646                           postdec2	equ	0xFDD
  9647                           fsr2h	equ	0xFDA
  9648                           fsr2l	equ	0xFD9
  9649                           status	equ	0xFD8
  9650                           
  9651 ;; *************** function ___awmod *****************
  9652 ;; Defined at:
  9653 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9654 ;; Parameters:    Size  Location     Type
  9655 ;;  dividend        2    0[BANK0 ] int 
  9656 ;;  divisor         2    2[BANK0 ] int 
  9657 ;; Auto vars:     Size  Location     Type
  9658 ;;  sign            1    5[BANK0 ] unsigned char 
  9659 ;;  counter         1    4[BANK0 ] unsigned char 
  9660 ;; Return value:  Size  Location     Type
  9661 ;;                  2    0[BANK0 ] int 
  9662 ;; Registers used:
  9663 ;;		wreg, status,2, status,0
  9664 ;; Tracked objects:
  9665 ;;		On entry : 0/0
  9666 ;;		On exit  : 0/0
  9667 ;;		Unchanged: 0/0
  9668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9669 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9672 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9673 ;;Total ram usage:        6 bytes
  9674 ;; Hardware stack levels used:    1
  9675 ;; Hardware stack levels required when called:    7
  9676 ;; This function calls:
  9677 ;;		Nothing
  9678 ;; This function is called by:
  9679 ;;		_UI
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           	psect	text42
  9684  002588                     __ptext42:
  9685                           	opt stack 0
  9686  002588                     ___awmod:
  9687                           	opt stack 22
  9688                           
  9689                           ;incstack = 0
  9690  002588  0E00               	movlw	0
  9691  00258A  0100               	movlb	0	; () banked
  9692  00258C  6F85               	movwf	___awmod@sign& (0+255),b
  9693                           
  9694                           ; BSR set to: 0
  9695  00258E  0100               	movlb	0	; () banked
  9696  002590  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9697  002592  D008               	goto	l5301
  9698                           
  9699                           ; BSR set to: 0
  9700  002594  0100               	movlb	0	; () banked
  9701  002596  6D80               	negf	___awmod@dividend& (0+255),b
  9702  002598  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9703  00259A  B0D8               	btfsc	status,0,c
  9704  00259C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9705                           
  9706                           ; BSR set to: 0
  9707  00259E  0E01               	movlw	1
  9708  0025A0  0100               	movlb	0	; () banked
  9709  0025A2  6F85               	movwf	___awmod@sign& (0+255),b
  9710  0025A4                     l5301:
  9711                           
  9712                           ; BSR set to: 0
  9713  0025A4  0100               	movlb	0	; () banked
  9714  0025A6  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9715  0025A8  D005               	goto	l5305
  9716                           
  9717                           ; BSR set to: 0
  9718  0025AA  0100               	movlb	0	; () banked
  9719  0025AC  6D82               	negf	___awmod@divisor& (0+255),b
  9720  0025AE  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9721  0025B0  B0D8               	btfsc	status,0,c
  9722  0025B2  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9723  0025B4                     l5305:
  9724                           
  9725                           ; BSR set to: 0
  9726  0025B4  0100               	movlb	0	; () banked
  9727  0025B6  5182               	movf	___awmod@divisor& (0+255),w,b
  9728  0025B8  0100               	movlb	0	; () banked
  9729  0025BA  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9730  0025BC  B4D8               	btfsc	status,2,c
  9731  0025BE  D026               	goto	l5321
  9732                           
  9733                           ; BSR set to: 0
  9734  0025C0  0E01               	movlw	1
  9735  0025C2  0100               	movlb	0	; () banked
  9736  0025C4  6F84               	movwf	___awmod@counter& (0+255),b
  9737  0025C6  D006               	goto	l5311
  9738  0025C8                     l5309:
  9739                           
  9740                           ; BSR set to: 0
  9741  0025C8  0100               	movlb	0	; () banked
  9742  0025CA  90D8               	bcf	status,0,c
  9743  0025CC  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9744  0025CE  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9745  0025D0  0100               	movlb	0	; () banked
  9746  0025D2  2B84               	incf	___awmod@counter& (0+255),f,b
  9747  0025D4                     l5311:
  9748                           
  9749                           ; BSR set to: 0
  9750  0025D4  0100               	movlb	0	; () banked
  9751  0025D6  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9752  0025D8  D7F7               	goto	l5309
  9753  0025DA                     l5313:
  9754                           
  9755                           ; BSR set to: 0
  9756  0025DA  0100               	movlb	0	; () banked
  9757  0025DC  5182               	movf	___awmod@divisor& (0+255),w,b
  9758  0025DE  0100               	movlb	0	; () banked
  9759  0025E0  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9760  0025E2  0100               	movlb	0	; () banked
  9761  0025E4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9762  0025E6  0100               	movlb	0	; () banked
  9763  0025E8  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9764  0025EA  A0D8               	btfss	status,0,c
  9765  0025EC  D008               	goto	l5317
  9766                           
  9767                           ; BSR set to: 0
  9768  0025EE  0100               	movlb	0	; () banked
  9769  0025F0  5182               	movf	___awmod@divisor& (0+255),w,b
  9770  0025F2  0100               	movlb	0	; () banked
  9771  0025F4  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9772  0025F6  0100               	movlb	0	; () banked
  9773  0025F8  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9774  0025FA  0100               	movlb	0	; () banked
  9775  0025FC  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9776  0025FE                     l5317:
  9777                           
  9778                           ; BSR set to: 0
  9779  0025FE  0100               	movlb	0	; () banked
  9780  002600  90D8               	bcf	status,0,c
  9781  002602  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9782  002604  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9783                           
  9784                           ; BSR set to: 0
  9785  002606  0100               	movlb	0	; () banked
  9786  002608  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9787  00260A  D7E7               	goto	l5313
  9788  00260C                     l5321:
  9789                           
  9790                           ; BSR set to: 0
  9791  00260C  0100               	movlb	0	; () banked
  9792  00260E  5185               	movf	___awmod@sign& (0+255),w,b
  9793  002610  0100               	movlb	0	; () banked
  9794  002612  B4D8               	btfsc	status,2,c
  9795  002614  D005               	goto	l5325
  9796                           
  9797                           ; BSR set to: 0
  9798  002616  0100               	movlb	0	; () banked
  9799  002618  6D80               	negf	___awmod@dividend& (0+255),b
  9800  00261A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9801  00261C  B0D8               	btfsc	status,0,c
  9802  00261E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9803  002620                     l5325:
  9804                           
  9805                           ; BSR set to: 0
  9806  002620  C080  F080         	movff	___awmod@dividend,?___awmod
  9807  002624  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9808  002628  0012               	return	
  9809  00262A                     __end_of___awmod:
  9810                           	opt stack 0
  9811                           tblptru	equ	0xFF8
  9812                           tblptrh	equ	0xFF7
  9813                           tblptrl	equ	0xFF6
  9814                           tablat	equ	0xFF5
  9815                           prodh	equ	0xFF4
  9816                           prodl	equ	0xFF3
  9817                           intcon	equ	0xFF2
  9818                           intcon2	equ	0xFF1
  9819                           intcon3	equ	0xFF0
  9820                           indf0	equ	0xFEF
  9821                           postinc0	equ	0xFEE
  9822                           fsr0h	equ	0xFEA
  9823                           fsr0l	equ	0xFE9
  9824                           wreg	equ	0xFE8
  9825                           postdec1	equ	0xFE5
  9826                           fsr1l	equ	0xFE1
  9827                           indf2	equ	0xFDF
  9828                           postinc2	equ	0xFDE
  9829                           postdec2	equ	0xFDD
  9830                           fsr2h	equ	0xFDA
  9831                           fsr2l	equ	0xFD9
  9832                           status	equ	0xFD8
  9833                           
  9834 ;; *************** function ___awdiv *****************
  9835 ;; Defined at:
  9836 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9837 ;; Parameters:    Size  Location     Type
  9838 ;;  dividend        2    6[BANK0 ] int 
  9839 ;;  divisor         2    8[BANK0 ] int 
  9840 ;; Auto vars:     Size  Location     Type
  9841 ;;  quotient        2   12[BANK0 ] int 
  9842 ;;  sign            1   11[BANK0 ] unsigned char 
  9843 ;;  counter         1   10[BANK0 ] unsigned char 
  9844 ;; Return value:  Size  Location     Type
  9845 ;;                  2    6[BANK0 ] int 
  9846 ;; Registers used:
  9847 ;;		wreg, status,2, status,0
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9853 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;Total ram usage:        8 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:    7
  9860 ;; This function calls:
  9861 ;;		Nothing
  9862 ;; This function is called by:
  9863 ;;		_UI
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867                           	psect	text43
  9868  0022B8                     __ptext43:
  9869                           	opt stack 0
  9870  0022B8                     ___awdiv:
  9871                           	opt stack 22
  9872                           
  9873                           ; BSR set to: 0
  9874                           ;incstack = 0
  9875  0022B8  0E00               	movlw	0
  9876  0022BA  0100               	movlb	0	; () banked
  9877  0022BC  6F8B               	movwf	___awdiv@sign& (0+255),b
  9878                           
  9879                           ; BSR set to: 0
  9880  0022BE  0100               	movlb	0	; () banked
  9881  0022C0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9882  0022C2  D008               	goto	l5257
  9883                           
  9884                           ; BSR set to: 0
  9885  0022C4  0100               	movlb	0	; () banked
  9886  0022C6  6D88               	negf	___awdiv@divisor& (0+255),b
  9887  0022C8  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9888  0022CA  B0D8               	btfsc	status,0,c
  9889  0022CC  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9890                           
  9891                           ; BSR set to: 0
  9892  0022CE  0E01               	movlw	1
  9893  0022D0  0100               	movlb	0	; () banked
  9894  0022D2  6F8B               	movwf	___awdiv@sign& (0+255),b
  9895  0022D4                     l5257:
  9896                           
  9897                           ; BSR set to: 0
  9898  0022D4  0100               	movlb	0	; () banked
  9899  0022D6  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9900  0022D8  D008               	goto	l5263
  9901                           
  9902                           ; BSR set to: 0
  9903  0022DA  0100               	movlb	0	; () banked
  9904  0022DC  6D86               	negf	___awdiv@dividend& (0+255),b
  9905  0022DE  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9906  0022E0  B0D8               	btfsc	status,0,c
  9907  0022E2  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9908                           
  9909                           ; BSR set to: 0
  9910  0022E4  0E01               	movlw	1
  9911  0022E6  0100               	movlb	0	; () banked
  9912  0022E8  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9913  0022EA                     l5263:
  9914                           
  9915                           ; BSR set to: 0
  9916  0022EA  0E00               	movlw	0
  9917  0022EC  0100               	movlb	0	; () banked
  9918  0022EE  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9919  0022F0  0E00               	movlw	0
  9920  0022F2  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9921                           
  9922                           ; BSR set to: 0
  9923  0022F4  0100               	movlb	0	; () banked
  9924  0022F6  5188               	movf	___awdiv@divisor& (0+255),w,b
  9925  0022F8  0100               	movlb	0	; () banked
  9926  0022FA  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9927  0022FC  B4D8               	btfsc	status,2,c
  9928  0022FE  D02C               	goto	l5285
  9929                           
  9930                           ; BSR set to: 0
  9931  002300  0E01               	movlw	1
  9932  002302  0100               	movlb	0	; () banked
  9933  002304  6F8A               	movwf	___awdiv@counter& (0+255),b
  9934  002306  D006               	goto	l5271
  9935  002308                     l5269:
  9936                           
  9937                           ; BSR set to: 0
  9938  002308  0100               	movlb	0	; () banked
  9939  00230A  90D8               	bcf	status,0,c
  9940  00230C  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9941  00230E  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9942  002310  0100               	movlb	0	; () banked
  9943  002312  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9944  002314                     l5271:
  9945                           
  9946                           ; BSR set to: 0
  9947  002314  0100               	movlb	0	; () banked
  9948  002316  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9949  002318  D7F7               	goto	l5269
  9950  00231A                     l5273:
  9951                           
  9952                           ; BSR set to: 0
  9953  00231A  0100               	movlb	0	; () banked
  9954  00231C  90D8               	bcf	status,0,c
  9955  00231E  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9956  002320  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9957                           
  9958                           ; BSR set to: 0
  9959  002322  0100               	movlb	0	; () banked
  9960  002324  5188               	movf	___awdiv@divisor& (0+255),w,b
  9961  002326  0100               	movlb	0	; () banked
  9962  002328  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9963  00232A  0100               	movlb	0	; () banked
  9964  00232C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9965  00232E  0100               	movlb	0	; () banked
  9966  002330  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9967  002332  A0D8               	btfss	status,0,c
  9968  002334  D00A               	goto	l5281
  9969                           
  9970                           ; BSR set to: 0
  9971  002336  0100               	movlb	0	; () banked
  9972  002338  5188               	movf	___awdiv@divisor& (0+255),w,b
  9973  00233A  0100               	movlb	0	; () banked
  9974  00233C  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9975  00233E  0100               	movlb	0	; () banked
  9976  002340  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9977  002342  0100               	movlb	0	; () banked
  9978  002344  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9979                           
  9980                           ; BSR set to: 0
  9981  002346  0100               	movlb	0	; () banked
  9982  002348  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9983  00234A                     l5281:
  9984                           
  9985                           ; BSR set to: 0
  9986  00234A  0100               	movlb	0	; () banked
  9987  00234C  90D8               	bcf	status,0,c
  9988  00234E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9989  002350  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9990                           
  9991                           ; BSR set to: 0
  9992  002352  0100               	movlb	0	; () banked
  9993  002354  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9994  002356  D7E1               	goto	l5273
  9995  002358                     l5285:
  9996                           
  9997                           ; BSR set to: 0
  9998  002358  0100               	movlb	0	; () banked
  9999  00235A  518B               	movf	___awdiv@sign& (0+255),w,b
 10000  00235C  0100               	movlb	0	; () banked
 10001  00235E  B4D8               	btfsc	status,2,c
 10002  002360  D005               	goto	l5289
 10003                           
 10004                           ; BSR set to: 0
 10005  002362  0100               	movlb	0	; () banked
 10006  002364  6D8C               	negf	___awdiv@quotient& (0+255),b
 10007  002366  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10008  002368  B0D8               	btfsc	status,0,c
 10009  00236A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10010  00236C                     l5289:
 10011                           
 10012                           ; BSR set to: 0
 10013  00236C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10014  002370  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10015  002374  0012               	return	
 10016  002376                     __end_of___awdiv:
 10017                           	opt stack 0
 10018                           tblptru	equ	0xFF8
 10019                           tblptrh	equ	0xFF7
 10020                           tblptrl	equ	0xFF6
 10021                           tablat	equ	0xFF5
 10022                           prodh	equ	0xFF4
 10023                           prodl	equ	0xFF3
 10024                           intcon	equ	0xFF2
 10025                           intcon2	equ	0xFF1
 10026                           intcon3	equ	0xFF0
 10027                           indf0	equ	0xFEF
 10028                           postinc0	equ	0xFEE
 10029                           fsr0h	equ	0xFEA
 10030                           fsr0l	equ	0xFE9
 10031                           wreg	equ	0xFE8
 10032                           postdec1	equ	0xFE5
 10033                           fsr1l	equ	0xFE1
 10034                           indf2	equ	0xFDF
 10035                           postinc2	equ	0xFDE
 10036                           postdec2	equ	0xFDD
 10037                           fsr2h	equ	0xFDA
 10038                           fsr2l	equ	0xFD9
 10039                           status	equ	0xFD8
 10040                           
 10041 ;; *************** function _PortTestA5 *****************
 10042 ;; Defined at:
 10043 ;;		line 15 in file "PortHigh.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;		None
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;		None
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  1    wreg      void 
 10050 ;; Registers used:
 10051 ;;		None
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;Total ram usage:        0 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    7
 10064 ;; This function calls:
 10065 ;;		Nothing
 10066 ;; This function is called by:
 10067 ;;		_main
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           	psect	text44
 10072  003246                     __ptext44:
 10073                           	opt stack 0
 10074  003246                     _PortTestA5:
 10075                           	opt stack 23
 10076  003246                     l99:
 10077  003246  A281               	btfss	3969,1,c	;volatile
 10078  003248  D7FE               	goto	l99
 10079                           
 10080                           ;PortHigh.c: 19: }
 10081                           ;PortHigh.c: 20: LATAbits.LATA5 = 1;
 10082  00324A  8A89               	bsf	3977,5,c	;volatile
 10083  00324C                     l102:
 10084  00324C  B281               	btfsc	3969,1,c	;volatile
 10085  00324E  D7FE               	goto	l102
 10086                           
 10087                           ;PortHigh.c: 23: }
 10088                           ;PortHigh.c: 24: __nop();
 10089  003250  F000               	nop	
 10090                           
 10091                           ;PortHigh.c: 25: __nop();
 10092  003252  F000               	nop	
 10093                           
 10094                           ;PortHigh.c: 26: LATAbits.LATA5 = 0;
 10095  003254  9A89               	bcf	3977,5,c	;volatile
 10096  003256  0012               	return		;funcret
 10097  003258                     __end_of_PortTestA5:
 10098                           	opt stack 0
 10099                           tblptru	equ	0xFF8
 10100                           tblptrh	equ	0xFF7
 10101                           tblptrl	equ	0xFF6
 10102                           tablat	equ	0xFF5
 10103                           prodh	equ	0xFF4
 10104                           prodl	equ	0xFF3
 10105                           intcon	equ	0xFF2
 10106                           intcon2	equ	0xFF1
 10107                           intcon3	equ	0xFF0
 10108                           indf0	equ	0xFEF
 10109                           postinc0	equ	0xFEE
 10110                           fsr0h	equ	0xFEA
 10111                           fsr0l	equ	0xFE9
 10112                           wreg	equ	0xFE8
 10113                           postdec1	equ	0xFE5
 10114                           fsr1l	equ	0xFE1
 10115                           indf2	equ	0xFDF
 10116                           postinc2	equ	0xFDE
 10117                           postdec2	equ	0xFDD
 10118                           fsr2h	equ	0xFDA
 10119                           fsr2l	equ	0xFD9
 10120                           status	equ	0xFD8
 10121                           
 10122 ;; *************** function _handler *****************
 10123 ;; Defined at:
 10124 ;;		line 16 in file "interruptHandler.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;		None
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;		None
 10129 ;; Return value:  Size  Location     Type
 10130 ;;                  1    wreg      void 
 10131 ;; Registers used:
 10132 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10140 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10141 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10142 ;;Total ram usage:       16 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; Hardware stack levels required when called:    6
 10145 ;; This function calls:
 10146 ;;		_printSortTimer
 10147 ;;		_updateMenu
 10148 ;; This function is called by:
 10149 ;;		Interrupt level 2
 10150 ;; This function uses a non-reentrant model
 10151 ;;
 10152                           
 10153                           	psect	intcode
 10154  000008                     __pintcode:
 10155                           	opt stack 0
 10156  000008                     _handler:
 10157                           	opt stack 18
 10158                           
 10159                           ;incstack = 0
 10160  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10161  00000A  EDE1  F00D         	call	int_func,f	;refresh shadow registers
 10162                           tblptru	equ	0xFF8
 10163                           tblptrh	equ	0xFF7
 10164                           tblptrl	equ	0xFF6
 10165                           tablat	equ	0xFF5
 10166                           prodh	equ	0xFF4
 10167                           prodl	equ	0xFF3
 10168                           intcon	equ	0xFF2
 10169                           intcon2	equ	0xFF1
 10170                           intcon3	equ	0xFF0
 10171                           indf0	equ	0xFEF
 10172                           postinc0	equ	0xFEE
 10173                           fsr0h	equ	0xFEA
 10174                           fsr0l	equ	0xFE9
 10175                           wreg	equ	0xFE8
 10176                           postdec1	equ	0xFE5
 10177                           fsr1l	equ	0xFE1
 10178                           indf2	equ	0xFDF
 10179                           postinc2	equ	0xFDE
 10180                           postdec2	equ	0xFDD
 10181                           fsr2h	equ	0xFDA
 10182                           fsr2l	equ	0xFD9
 10183                           status	equ	0xFD8
 10184                           
 10185                           	psect	intcode_body
 10186  001BC2                     __pintcode_body:
 10187                           	opt stack 18
 10188  001BC2                     int_func:
 10189                           	opt stack 18
 10190  001BC2  0006               	pop		; remove dummy address from shadow register refresh
 10191  001BC4  CFFA F04D          	movff	pclath,??_handler+2
 10192  001BC8  CFFB F04E          	movff	pclatu,??_handler+3
 10193  001BCC  CFE9 F04F          	movff	fsr0l,??_handler+4
 10194  001BD0  CFEA F050          	movff	fsr0h,??_handler+5
 10195  001BD4  CFE1 F051          	movff	fsr1l,??_handler+6
 10196  001BD8  CFE2 F052          	movff	fsr1h,??_handler+7
 10197  001BDC  CFD9 F053          	movff	fsr2l,??_handler+8
 10198  001BE0  CFDA F054          	movff	fsr2h,??_handler+9
 10199  001BE4  CFF3 F055          	movff	prodl,??_handler+10
 10200  001BE8  CFF4 F056          	movff	prodh,??_handler+11
 10201  001BEC  CFF6 F057          	movff	tblptrl,??_handler+12
 10202  001BF0  CFF7 F058          	movff	tblptrh,??_handler+13
 10203  001BF4  CFF8 F059          	movff	tblptru,??_handler+14
 10204  001BF8  CFF5 F05A          	movff	tablat,??_handler+15
 10205                           
 10206                           ;interruptHandler.c: 18: if(INT1IF){
 10207  001BFC  A0F0               	btfss	intcon3,0,c	;volatile
 10208  001BFE  D018               	goto	i2l6077
 10209                           
 10210                           ;interruptHandler.c: 19: INT1IF = 0;
 10211  001C00  90F0               	bcf	intcon3,0,c	;volatile
 10212                           
 10213                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 10214  001C02  0100               	movlb	0	; () banked
 10215  001C04  51FB               	movf	_machine_state& (0+255),w,b
 10216  001C06  A4D8               	btfss	status,2,c
 10217  001C08  D013               	goto	i2l6077
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 10221  001C0A  3881               	swapf	3969,w,c	;volatile
 10222  001C0C  0B0F               	andlw	15
 10223  001C0E  0B0F               	andlw	15
 10224  001C10  6E4B               	movwf	??_handler& (0+255),c
 10225  001C12  6A4C               	clrf	(??_handler+1)& (0+255),c
 10226  001C14  0E93               	movlw	low _keys
 10227  001C16  244B               	addwf	??_handler,w,c
 10228  001C18  6EF6               	movwf	tblptrl,c
 10229  001C1A  0EFD               	movlw	high _keys
 10230  001C1C  204C               	addwfc	??_handler+1,w,c
 10231  001C1E  6EF7               	movwf	tblptrh,c
 10232  001C20                     	if	1	;There are 3 active tblptr bytes
 10233  001C20  6AF8               	clrf	tblptru,c
 10234  001C22  0E00               	movlw	low (__mediumconst shr (0+16))
 10235  001C24  22F8               	addwfc	tblptru,f,c
 10236  001C26                     	endif
 10237  001C26  0008               	tblrd		*
 10238  001C28  CFF5 F07E          	movff	tablat,_input	;volatile
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;interruptHandler.c: 22: updateMenu();
 10242  001C2C  EC7A  F009         	call	_updateMenu	;wreg free
 10243  001C30                     i2l6077:
 10244                           
 10245                           ;interruptHandler.c: 23: }
 10246                           ;interruptHandler.c: 24: }
 10247                           ;interruptHandler.c: 27: if(TMR0IF){
 10248  001C30  A4F2               	btfss	intcon,2,c	;volatile
 10249  001C32  D00C               	goto	i2l6091
 10250                           
 10251                           ;interruptHandler.c: 28: TMR0IF = 0;
 10252  001C34  94F2               	bcf	intcon,2,c	;volatile
 10253                           
 10254                           ;interruptHandler.c: 29: if(machine_state == Sorting_state){
 10255  001C36  0100               	movlb	0	; () banked
 10256  001C38  05FB               	decf	_machine_state& (0+255),w,b
 10257  001C3A  A4D8               	btfss	status,2,c
 10258  001C3C  D007               	goto	i2l6091
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;interruptHandler.c: 30: printSortTimer();
 10262  001C3E  ECF5  F00B         	call	_printSortTimer	;wreg free
 10263                           
 10264                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
 10265  001C42  0E85               	movlw	133
 10266  001C44  6ED7               	movwf	4055,c	;volatile
 10267                           
 10268                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
 10269  001C46  0EEE               	movlw	238
 10270  001C48  6ED6               	movwf	4054,c	;volatile
 10271                           
 10272                           ;interruptHandler.c: 34: TMR0ON = 1;
 10273  001C4A  8ED5               	bsf	4053,7,c	;volatile
 10274  001C4C                     i2l6091:
 10275                           
 10276                           ;interruptHandler.c: 35: }
 10277                           ;interruptHandler.c: 36: }
 10278                           ;interruptHandler.c: 39: if(TMR1IF){
 10279  001C4C  A09E               	btfss	3998,0,c	;volatile
 10280  001C4E  D024               	goto	i2l6115
 10281                           
 10282                           ;interruptHandler.c: 40: TMR1IF = 0;
 10283  001C50  909E               	bcf	3998,0,c	;volatile
 10284                           
 10285                           ;interruptHandler.c: 41: TMR1ON = 0;
 10286  001C52  90CD               	bcf	4045,0,c	;volatile
 10287                           
 10288                           ;interruptHandler.c: 42: if(machine_state == Sorting_state){
 10289  001C54  0100               	movlb	0	; () banked
 10290  001C56  05FB               	decf	_machine_state& (0+255),w,b
 10291  001C58  A4D8               	btfss	status,2,c
 10292  001C5A  D01E               	goto	i2l6115
 10293                           
 10294                           ; BSR set to: 0
 10295                           ;interruptHandler.c: 43: if(was_low_1){
 10296  001C5C  507A               	movf	_was_low_1,w,c	;volatile
 10297  001C5E  107B               	iorwf	_was_low_1+1,w,c	;volatile
 10298  001C60  B4D8               	btfsc	status,2,c
 10299  001C62  D00A               	goto	i2l840
 10300                           
 10301                           ; BSR set to: 0
 10302                           ;interruptHandler.c: 44: LATCbits.LATC1 = 1;
 10303  001C64  828B               	bsf	3979,1,c	;volatile
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;interruptHandler.c: 45: was_low_1 = 0;
 10307  001C66  0E00               	movlw	0
 10308  001C68  6E7B               	movwf	_was_low_1+1,c	;volatile
 10309  001C6A  0E00               	movlw	0
 10310  001C6C  6E7A               	movwf	_was_low_1,c	;volatile
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;interruptHandler.c: 46: TMR1H = servoTimes[0];
 10314  001C6E  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 10315                           
 10316                           ; BSR set to: 0
 10317                           ;interruptHandler.c: 47: TMR1L = servoTimes[1];
 10318  001C72  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 10319                           
 10320                           ;interruptHandler.c: 48: }
 10321  001C76  D00F               	goto	i2l6113
 10322  001C78                     i2l840:
 10323                           
 10324                           ; BSR set to: 0
 10325                           ;interruptHandler.c: 49: else{
 10326                           ;interruptHandler.c: 50: LATCbits.LATC1 = 0;
 10327  001C78  928B               	bcf	3979,1,c	;volatile
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;interruptHandler.c: 51: was_low_1 = 1;
 10331  001C7A  0E00               	movlw	0
 10332  001C7C  6E7B               	movwf	_was_low_1+1,c	;volatile
 10333  001C7E  0E01               	movlw	1
 10334  001C80  6E7A               	movwf	_was_low_1,c	;volatile
 10335                           
 10336                           ; BSR set to: 0
 10337                           ;interruptHandler.c: 52: TMR1H = 20000 - servoTimes[0];
 10338  001C82  0101               	movlb	1	; () banked
 10339  001C84  511C               	movf	_servoTimes& (0+255),w,b
 10340  001C86  0800               	sublw	0
 10341  001C88  0F20               	addlw	32
 10342  001C8A  6ECF               	movwf	4047,c	;volatile
 10343                           
 10344                           ; BSR set to: 1
 10345                           ;interruptHandler.c: 53: TMR1L = 20000 - servoTimes[1];
 10346  001C8C  0101               	movlb	1	; () banked
 10347  001C8E  511E               	movf	(_servoTimes+2)& (0+255),w,b
 10348  001C90  0800               	sublw	0
 10349  001C92  0F20               	addlw	32
 10350  001C94  6ECE               	movwf	4046,c	;volatile
 10351  001C96                     i2l6113:
 10352                           
 10353                           ;interruptHandler.c: 54: }
 10354                           ;interruptHandler.c: 55: TMR1ON = 1;
 10355  001C96  80CD               	bsf	4045,0,c	;volatile
 10356  001C98                     i2l6115:
 10357                           
 10358                           ;interruptHandler.c: 56: }
 10359                           ;interruptHandler.c: 57: }
 10360                           ;interruptHandler.c: 59: if(TMR3IF){
 10361  001C98  A2A1               	btfss	4001,1,c	;volatile
 10362  001C9A  D024               	goto	i2l846
 10363                           
 10364                           ;interruptHandler.c: 60: TMR3IF = 0;
 10365  001C9C  92A1               	bcf	4001,1,c	;volatile
 10366                           
 10367                           ;interruptHandler.c: 61: TMR3ON = 0;
 10368  001C9E  90B1               	bcf	4017,0,c	;volatile
 10369                           
 10370                           ;interruptHandler.c: 62: if(machine_state == Sorting_state){
 10371  001CA0  0100               	movlb	0	; () banked
 10372  001CA2  05FB               	decf	_machine_state& (0+255),w,b
 10373  001CA4  A4D8               	btfss	status,2,c
 10374  001CA6  D01E               	goto	i2l846
 10375                           
 10376                           ; BSR set to: 0
 10377                           ;interruptHandler.c: 63: if(was_low_3){
 10378  001CA8  507C               	movf	_was_low_3,w,c	;volatile
 10379  001CAA  107D               	iorwf	_was_low_3+1,w,c	;volatile
 10380  001CAC  B4D8               	btfsc	status,2,c
 10381  001CAE  D00A               	goto	i2l844
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;interruptHandler.c: 64: LATCbits.LATC2 = 1;
 10385  001CB0  848B               	bsf	3979,2,c	;volatile
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;interruptHandler.c: 65: was_low_3 = 0;
 10389  001CB2  0E00               	movlw	0
 10390  001CB4  6E7D               	movwf	_was_low_3+1,c	;volatile
 10391  001CB6  0E00               	movlw	0
 10392  001CB8  6E7C               	movwf	_was_low_3,c	;volatile
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;interruptHandler.c: 66: TMR3H = servoTimes[2];
 10396  001CBA  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 10397                           
 10398                           ; BSR set to: 0
 10399                           ;interruptHandler.c: 67: TMR3L = servoTimes[3];
 10400  001CBE  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 10401                           
 10402                           ;interruptHandler.c: 68: }
 10403  001CC2  D00F               	goto	i2l6137
 10404  001CC4                     i2l844:
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;interruptHandler.c: 69: else{
 10408                           ;interruptHandler.c: 70: LATCbits.LATC2 = 0;
 10409  001CC4  948B               	bcf	3979,2,c	;volatile
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;interruptHandler.c: 71: was_low_3 = 1;
 10413  001CC6  0E00               	movlw	0
 10414  001CC8  6E7D               	movwf	_was_low_3+1,c	;volatile
 10415  001CCA  0E01               	movlw	1
 10416  001CCC  6E7C               	movwf	_was_low_3,c	;volatile
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;interruptHandler.c: 72: TMR3H = 20000 - servoTimes[2];
 10420  001CCE  0101               	movlb	1	; () banked
 10421  001CD0  5120               	movf	(_servoTimes+4)& (0+255),w,b
 10422  001CD2  0800               	sublw	0
 10423  001CD4  0F20               	addlw	32
 10424  001CD6  6EB3               	movwf	4019,c	;volatile
 10425                           
 10426                           ; BSR set to: 1
 10427                           ;interruptHandler.c: 73: TMR3L = 20000 - servoTimes[3];
 10428  001CD8  0101               	movlb	1	; () banked
 10429  001CDA  5122               	movf	(_servoTimes+6)& (0+255),w,b
 10430  001CDC  0800               	sublw	0
 10431  001CDE  0F20               	addlw	32
 10432  001CE0  6EB2               	movwf	4018,c	;volatile
 10433  001CE2                     i2l6137:
 10434                           
 10435                           ;interruptHandler.c: 74: }
 10436                           ;interruptHandler.c: 75: TMR3ON = 1;
 10437  001CE2  80B1               	bsf	4017,0,c	;volatile
 10438  001CE4                     i2l846:
 10439  001CE4  C05A  FFF5         	movff	??_handler+15,tablat
 10440  001CE8  C059  FFF8         	movff	??_handler+14,tblptru
 10441  001CEC  C058  FFF7         	movff	??_handler+13,tblptrh
 10442  001CF0  C057  FFF6         	movff	??_handler+12,tblptrl
 10443  001CF4  C056  FFF4         	movff	??_handler+11,prodh
 10444  001CF8  C055  FFF3         	movff	??_handler+10,prodl
 10445  001CFC  C054  FFDA         	movff	??_handler+9,fsr2h
 10446  001D00  C053  FFD9         	movff	??_handler+8,fsr2l
 10447  001D04  C052  FFE2         	movff	??_handler+7,fsr1h
 10448  001D08  C051  FFE1         	movff	??_handler+6,fsr1l
 10449  001D0C  C050  FFEA         	movff	??_handler+5,fsr0h
 10450  001D10  C04F  FFE9         	movff	??_handler+4,fsr0l
 10451  001D14  C04E  FFFB         	movff	??_handler+3,pclatu
 10452  001D18  C04D  FFFA         	movff	??_handler+2,pclath
 10453  001D1C  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10454  001D1E  0011               	retfie		f
 10455  001D20                     __end_of_handler:
 10456                           	opt stack 0
 10457                           pclatu	equ	0xFFB
 10458                           pclath	equ	0xFFA
 10459                           tblptru	equ	0xFF8
 10460                           tblptrh	equ	0xFF7
 10461                           tblptrl	equ	0xFF6
 10462                           tablat	equ	0xFF5
 10463                           prodh	equ	0xFF4
 10464                           prodl	equ	0xFF3
 10465                           intcon	equ	0xFF2
 10466                           intcon2	equ	0xFF1
 10467                           intcon3	equ	0xFF0
 10468                           indf0	equ	0xFEF
 10469                           postinc0	equ	0xFEE
 10470                           fsr0h	equ	0xFEA
 10471                           fsr0l	equ	0xFE9
 10472                           wreg	equ	0xFE8
 10473                           postdec1	equ	0xFE5
 10474                           fsr1h	equ	0xFE2
 10475                           fsr1l	equ	0xFE1
 10476                           indf2	equ	0xFDF
 10477                           postinc2	equ	0xFDE
 10478                           postdec2	equ	0xFDD
 10479                           fsr2h	equ	0xFDA
 10480                           fsr2l	equ	0xFD9
 10481                           status	equ	0xFD8
 10482                           
 10483 ;; *************** function _updateMenu *****************
 10484 ;; Defined at:
 10485 ;;		line 209 in file "UI.c"
 10486 ;; Parameters:    Size  Location     Type
 10487 ;;		None
 10488 ;; Auto vars:     Size  Location     Type
 10489 ;;		None
 10490 ;; Return value:  Size  Location     Type
 10491 ;;                  1    wreg      void 
 10492 ;; Registers used:
 10493 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10494 ;; Tracked objects:
 10495 ;;		On entry : 0/0
 10496 ;;		On exit  : 0/0
 10497 ;;		Unchanged: 0/0
 10498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10503 ;;Total ram usage:        2 bytes
 10504 ;; Hardware stack levels used:    1
 10505 ;; Hardware stack levels required when called:    5
 10506 ;; This function calls:
 10507 ;;		_change_state_to_logs_11
 10508 ;;		_change_state_to_logs_12
 10509 ;;		_change_state_to_logs_22
 10510 ;;		_change_state_to_logs_23
 10511 ;;		_change_state_to_logs_33
 10512 ;;		_change_state_to_logs_34
 10513 ;;		_change_state_to_menu_11
 10514 ;;		_change_state_to_menu_23
 10515 ;;		_dispLogs
 10516 ;;		_inputHandler
 10517 ;;		i2_change_state_to_menu_12
 10518 ;;		i2_change_state_to_menu_22
 10519 ;;		i2_change_state_to_menu_start
 10520 ;; This function is called by:
 10521 ;;		_handler
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           	psect	text46
 10526  0012F4                     __ptext46:
 10527                           	opt stack 0
 10528  0012F4                     _updateMenu:
 10529                           	opt stack 18
 10530                           
 10531                           ;UI.c: 210: up = 0; down = 0; enter = 0; back = 0;
 10532                           
 10533                           ;incstack = 0
 10534  0012F4  0E00               	movlw	0
 10535  0012F6  6E79               	movwf	_up+1,c
 10536  0012F8  0E00               	movlw	0
 10537  0012FA  6E78               	movwf	_up,c
 10538  0012FC  0E00               	movlw	0
 10539  0012FE  6E71               	movwf	_down+1,c
 10540  001300  0E00               	movlw	0
 10541  001302  6E70               	movwf	_down,c
 10542  001304  0E00               	movlw	0
 10543  001306  6E73               	movwf	_enter+1,c
 10544  001308  0E00               	movlw	0
 10545  00130A  6E72               	movwf	_enter,c
 10546  00130C  0E00               	movlw	0
 10547  00130E  6E65               	movwf	_back+1,c
 10548  001310  0E00               	movlw	0
 10549  001312  6E64               	movwf	_back,c
 10550                           
 10551                           ;UI.c: 211: (INTCONbits.GIE = 0);
 10552  001314  9EF2               	bcf	intcon,7,c	;volatile
 10553                           
 10554                           ;UI.c: 213: if (inputHandler()
 10555                           ;UI.c: 216: ){
 10556  001316  ECEE  F00C         	call	_inputHandler	;wreg free
 10557  00131A  502A               	movf	?_inputHandler,w,c
 10558  00131C  102B               	iorwf	?_inputHandler+1,w,c
 10559  00131E  A4D8               	btfss	status,2,c
 10560  001320  D112               	goto	i2l5847
 10561  001322  D146               	goto	i2l269
 10562  001324                     i2l5699:
 10563                           
 10564                           ;UI.c: 220: change_state_to_menu_11();
 10565  001324  EC69  F017         	call	_change_state_to_menu_11	;wreg free
 10566                           
 10567                           ;UI.c: 221: break;
 10568  001328  D143               	goto	i2l269
 10569  00132A                     i2l5701:
 10570                           
 10571                           ;UI.c: 224: if(up){
 10572  00132A  5078               	movf	_up,w,c
 10573  00132C  1079               	iorwf	_up+1,w,c
 10574  00132E  B4D8               	btfsc	status,2,c
 10575  001330  D003               	goto	i2l5705
 10576                           
 10577                           ;UI.c: 225: change_state_to_menu_23();
 10578  001332  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 10579                           
 10580                           ;UI.c: 226: }
 10581  001336  D13C               	goto	i2l269
 10582  001338                     i2l5705:
 10583                           
 10584                           ;UI.c: 227: else if(down){
 10585  001338  5070               	movf	_down,w,c
 10586  00133A  1071               	iorwf	_down+1,w,c
 10587  00133C  B4D8               	btfsc	status,2,c
 10588  00133E  D003               	goto	i2l5709
 10589                           
 10590                           ;UI.c: 228: change_state_to_menu_12();
 10591  001340  EC39  F017         	call	i2_change_state_to_menu_12	;wreg free
 10592                           
 10593                           ;UI.c: 229: }
 10594  001344  D135               	goto	i2l269
 10595  001346                     i2l5709:
 10596                           
 10597                           ;UI.c: 230: else if(enter){
 10598  001346  5072               	movf	_enter,w,c
 10599  001348  1073               	iorwf	_enter+1,w,c
 10600  00134A  B4D8               	btfsc	status,2,c
 10601  00134C  D131               	goto	i2l269
 10602                           
 10603                           ;UI.c: 231: change_state_to_menu_start();
 10604  00134E  EC68  F018         	call	i2_change_state_to_menu_start	;wreg free
 10605                           
 10606                           ;UI.c: 232: }
 10607                           ;UI.c: 233: break;
 10608  001352  D12E               	goto	i2l269
 10609  001354                     i2l5713:
 10610                           
 10611                           ;UI.c: 236: if(up){
 10612  001354  5078               	movf	_up,w,c
 10613  001356  1079               	iorwf	_up+1,w,c
 10614  001358  B4D8               	btfsc	status,2,c
 10615  00135A  D003               	goto	i2l5717
 10616                           
 10617                           ;UI.c: 237: change_state_to_menu_11();
 10618  00135C  EC69  F017         	call	_change_state_to_menu_11	;wreg free
 10619                           
 10620                           ;UI.c: 238: }
 10621  001360  D127               	goto	i2l269
 10622  001362                     i2l5717:
 10623                           
 10624                           ;UI.c: 239: else if(down){
 10625  001362  5070               	movf	_down,w,c
 10626  001364  1071               	iorwf	_down+1,w,c
 10627  001366  B4D8               	btfsc	status,2,c
 10628  001368  D011               	goto	i2l5733
 10629                           
 10630                           ;UI.c: 240: change_state_to_menu_23();
 10631  00136A  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 10632                           
 10633                           ;UI.c: 241: }
 10634  00136E  D120               	goto	i2l269
 10635  001370                     i2l5725:
 10636                           
 10637                           ;UI.c: 248: if(up){
 10638  001370  5078               	movf	_up,w,c
 10639  001372  1079               	iorwf	_up+1,w,c
 10640  001374  B4D8               	btfsc	status,2,c
 10641  001376  D003               	goto	i2l5729
 10642                           
 10643                           ;UI.c: 249: change_state_to_menu_11();
 10644  001378  EC69  F017         	call	_change_state_to_menu_11	;wreg free
 10645                           
 10646                           ;UI.c: 250: }
 10647  00137C  D119               	goto	i2l269
 10648  00137E                     i2l5729:
 10649                           
 10650                           ;UI.c: 251: else if(down){
 10651  00137E  5070               	movf	_down,w,c
 10652  001380  1071               	iorwf	_down+1,w,c
 10653  001382  B4D8               	btfsc	status,2,c
 10654  001384  D003               	goto	i2l5733
 10655                           
 10656                           ;UI.c: 252: change_state_to_menu_23();
 10657  001386  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 10658                           
 10659                           ;UI.c: 253: }
 10660  00138A  D112               	goto	i2l269
 10661  00138C                     i2l5733:
 10662                           
 10663                           ;UI.c: 254: else if(enter){
 10664  00138C  5072               	movf	_enter,w,c
 10665  00138E  1073               	iorwf	_enter+1,w,c
 10666  001390  B4D8               	btfsc	status,2,c
 10667  001392  D10E               	goto	i2l269
 10668                           
 10669                           ;UI.c: 255: machine_state = Sorting_state;
 10670  001394  0E01               	movlw	1
 10671  001396  0100               	movlb	0	; () banked
 10672  001398  6FFB               	movwf	_machine_state& (0+255),b
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;UI.c: 256: }
 10676                           ;UI.c: 257: break;
 10677                           
 10678                           ; BSR set to: 0
 10679                           
 10680                           ; BSR set to: 0
 10681  00139A  D10A               	goto	i2l269
 10682  00139C                     i2l5737:
 10683                           
 10684                           ;UI.c: 260: if(up){
 10685  00139C  5078               	movf	_up,w,c
 10686  00139E  1079               	iorwf	_up+1,w,c
 10687  0013A0  B4D8               	btfsc	status,2,c
 10688  0013A2  D003               	goto	i2l5741
 10689                           
 10690                           ;UI.c: 261: change_state_to_menu_22();
 10691  0013A4  EC21  F017         	call	i2_change_state_to_menu_22	;wreg free
 10692                           
 10693                           ;UI.c: 262: }
 10694  0013A8  D103               	goto	i2l269
 10695  0013AA                     i2l5741:
 10696                           
 10697                           ;UI.c: 263: else if(down){
 10698  0013AA  5070               	movf	_down,w,c
 10699  0013AC  1071               	iorwf	_down+1,w,c
 10700  0013AE  B4D8               	btfsc	status,2,c
 10701  0013B0  D003               	goto	i2l5745
 10702                           
 10703                           ;UI.c: 264: change_state_to_menu_11();
 10704  0013B2  EC69  F017         	call	_change_state_to_menu_11	;wreg free
 10705                           
 10706                           ;UI.c: 265: }
 10707  0013B6  D0FC               	goto	i2l269
 10708  0013B8                     i2l5745:
 10709                           
 10710                           ;UI.c: 266: else if(enter){
 10711  0013B8  5072               	movf	_enter,w,c
 10712  0013BA  1073               	iorwf	_enter+1,w,c
 10713  0013BC  B4D8               	btfsc	status,2,c
 10714  0013BE  D0F8               	goto	i2l269
 10715                           
 10716                           ;UI.c: 267: change_state_to_logs_11();
 10717  0013C0  ECE1  F017         	call	_change_state_to_logs_11	;wreg free
 10718                           
 10719                           ;UI.c: 268: }
 10720                           ;UI.c: 269: break;
 10721  0013C4  D0F5               	goto	i2l269
 10722  0013C6                     i2l5749:
 10723                           
 10724                           ;UI.c: 272: if(up){
 10725  0013C6  5078               	movf	_up,w,c
 10726  0013C8  1079               	iorwf	_up+1,w,c
 10727  0013CA  B4D8               	btfsc	status,2,c
 10728  0013CC  D003               	goto	i2l5753
 10729                           
 10730                           ;UI.c: 273: change_state_to_logs_34();
 10731  0013CE  EC81  F017         	call	_change_state_to_logs_34	;wreg free
 10732                           
 10733                           ;UI.c: 274: }
 10734  0013D2  D0EE               	goto	i2l269
 10735  0013D4                     i2l5753:
 10736                           
 10737                           ;UI.c: 275: else if(down){
 10738  0013D4  5070               	movf	_down,w,c
 10739  0013D6  1071               	iorwf	_down+1,w,c
 10740  0013D8  B4D8               	btfsc	status,2,c
 10741  0013DA  D003               	goto	i2l5757
 10742                           
 10743                           ;UI.c: 276: change_state_to_logs_12();
 10744  0013DC  ECC9  F017         	call	_change_state_to_logs_12	;wreg free
 10745                           
 10746                           ;UI.c: 277: }
 10747  0013E0  D0E7               	goto	i2l269
 10748  0013E2                     i2l5757:
 10749                           
 10750                           ;UI.c: 278: else if(enter){
 10751  0013E2  5072               	movf	_enter,w,c
 10752  0013E4  1073               	iorwf	_enter+1,w,c
 10753  0013E6  B4D8               	btfsc	status,2,c
 10754  0013E8  D007               	goto	i2l5761
 10755                           
 10756                           ;UI.c: 279: dispLogs(1);
 10757  0013EA  0E00               	movlw	0
 10758  0013EC  6E13               	movwf	dispLogs@myLog+1,c
 10759  0013EE  0E01               	movlw	1
 10760  0013F0  6E12               	movwf	dispLogs@myLog,c
 10761  0013F2  ECB4  F018         	call	_dispLogs	;wreg free
 10762                           
 10763                           ;UI.c: 280: }
 10764  0013F6  D0DC               	goto	i2l269
 10765  0013F8                     i2l5761:
 10766                           
 10767                           ;UI.c: 281: else if(back){
 10768  0013F8  5064               	movf	_back,w,c
 10769  0013FA  1065               	iorwf	_back+1,w,c
 10770  0013FC  B4D8               	btfsc	status,2,c
 10771  0013FE  D0D8               	goto	i2l269
 10772                           
 10773                           ;UI.c: 282: change_state_to_menu_23();
 10774  001400  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 10775                           
 10776                           ;UI.c: 283: }
 10777                           ;UI.c: 284: break;
 10778  001404  D0D5               	goto	i2l269
 10779  001406                     i2l5765:
 10780                           
 10781                           ;UI.c: 287: if(up){
 10782  001406  5078               	movf	_up,w,c
 10783  001408  1079               	iorwf	_up+1,w,c
 10784  00140A  B4D8               	btfsc	status,2,c
 10785  00140C  D003               	goto	i2l5769
 10786                           
 10787                           ;UI.c: 288: change_state_to_logs_11();
 10788  00140E  ECE1  F017         	call	_change_state_to_logs_11	;wreg free
 10789                           
 10790                           ;UI.c: 289: }
 10791  001412  D0CE               	goto	i2l269
 10792  001414                     i2l5769:
 10793                           
 10794                           ;UI.c: 290: else if(down){
 10795  001414  5070               	movf	_down,w,c
 10796  001416  1071               	iorwf	_down+1,w,c
 10797  001418  B4D8               	btfsc	status,2,c
 10798  00141A  D003               	goto	i2l5773
 10799                           
 10800                           ;UI.c: 291: change_state_to_logs_23();
 10801  00141C  EC10  F018         	call	_change_state_to_logs_23	;wreg free
 10802                           
 10803                           ;UI.c: 292: }
 10804  001420  D0C7               	goto	i2l269
 10805  001422                     i2l5773:
 10806                           
 10807                           ;UI.c: 293: else if(enter){
 10808  001422  5072               	movf	_enter,w,c
 10809  001424  1073               	iorwf	_enter+1,w,c
 10810  001426  B4D8               	btfsc	status,2,c
 10811  001428  D007               	goto	i2l5777
 10812                           
 10813                           ;UI.c: 294: dispLogs(2);
 10814  00142A  0E00               	movlw	0
 10815  00142C  6E13               	movwf	dispLogs@myLog+1,c
 10816  00142E  0E02               	movlw	2
 10817  001430  6E12               	movwf	dispLogs@myLog,c
 10818  001432  ECB4  F018         	call	_dispLogs	;wreg free
 10819                           
 10820                           ;UI.c: 295: }
 10821  001436  D0BC               	goto	i2l269
 10822  001438                     i2l5777:
 10823                           
 10824                           ;UI.c: 296: else if(back){
 10825  001438  5064               	movf	_back,w,c
 10826  00143A  1065               	iorwf	_back+1,w,c
 10827  00143C  B4D8               	btfsc	status,2,c
 10828  00143E  D0B8               	goto	i2l269
 10829                           
 10830                           ;UI.c: 297: change_state_to_menu_23();
 10831  001440  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 10832                           
 10833                           ;UI.c: 298: }
 10834                           ;UI.c: 299: break;
 10835  001444  D0B5               	goto	i2l269
 10836  001446                     i2l5781:
 10837                           
 10838                           ;UI.c: 302: if(up){
 10839  001446  5078               	movf	_up,w,c
 10840  001448  1079               	iorwf	_up+1,w,c
 10841  00144A  B4D8               	btfsc	status,2,c
 10842  00144C  D003               	goto	i2l5785
 10843                           
 10844                           ;UI.c: 303: change_state_to_logs_11();
 10845  00144E  ECE1  F017         	call	_change_state_to_logs_11	;wreg free
 10846                           
 10847                           ;UI.c: 304: }
 10848  001452  D0AE               	goto	i2l269
 10849  001454                     i2l5785:
 10850                           
 10851                           ;UI.c: 305: else if(down){
 10852  001454  5070               	movf	_down,w,c
 10853  001456  1071               	iorwf	_down+1,w,c
 10854  001458  B4D8               	btfsc	status,2,c
 10855  00145A  D003               	goto	i2l5789
 10856                           
 10857                           ;UI.c: 306: change_state_to_logs_23();
 10858  00145C  EC10  F018         	call	_change_state_to_logs_23	;wreg free
 10859                           
 10860                           ;UI.c: 307: }
 10861  001460  D0A7               	goto	i2l269
 10862  001462                     i2l5789:
 10863                           
 10864                           ;UI.c: 308: else if(enter){
 10865  001462  5072               	movf	_enter,w,c
 10866  001464  1073               	iorwf	_enter+1,w,c
 10867  001466  B4D8               	btfsc	status,2,c
 10868  001468  D007               	goto	i2l5793
 10869                           
 10870                           ;UI.c: 309: dispLogs(2);
 10871  00146A  0E00               	movlw	0
 10872  00146C  6E13               	movwf	dispLogs@myLog+1,c
 10873  00146E  0E02               	movlw	2
 10874  001470  6E12               	movwf	dispLogs@myLog,c
 10875  001472  ECB4  F018         	call	_dispLogs	;wreg free
 10876                           
 10877                           ;UI.c: 310: }
 10878  001476  D09C               	goto	i2l269
 10879  001478                     i2l5793:
 10880                           
 10881                           ;UI.c: 311: else if(back){
 10882  001478  5064               	movf	_back,w,c
 10883  00147A  1065               	iorwf	_back+1,w,c
 10884  00147C  B4D8               	btfsc	status,2,c
 10885  00147E  D098               	goto	i2l269
 10886                           
 10887                           ;UI.c: 312: change_state_to_menu_23();
 10888  001480  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 10889                           
 10890                           ;UI.c: 313: }
 10891                           ;UI.c: 314: break;
 10892  001484  D095               	goto	i2l269
 10893  001486                     i2l5797:
 10894                           
 10895                           ;UI.c: 317: if(up){
 10896  001486  5078               	movf	_up,w,c
 10897  001488  1079               	iorwf	_up+1,w,c
 10898  00148A  B4D8               	btfsc	status,2,c
 10899  00148C  D003               	goto	i2l5801
 10900                           
 10901                           ;UI.c: 318: change_state_to_logs_22();
 10902  00148E  ECB1  F017         	call	_change_state_to_logs_22	;wreg free
 10903                           
 10904                           ;UI.c: 319: }
 10905  001492  D08E               	goto	i2l269
 10906  001494                     i2l5801:
 10907                           
 10908                           ;UI.c: 320: else if(down){
 10909  001494  5070               	movf	_down,w,c
 10910  001496  1071               	iorwf	_down+1,w,c
 10911  001498  B4D8               	btfsc	status,2,c
 10912  00149A  D003               	goto	i2l5805
 10913                           
 10914                           ;UI.c: 321: change_state_to_logs_34();
 10915  00149C  EC81  F017         	call	_change_state_to_logs_34	;wreg free
 10916                           
 10917                           ;UI.c: 322: }
 10918  0014A0  D087               	goto	i2l269
 10919  0014A2                     i2l5805:
 10920                           
 10921                           ;UI.c: 323: else if(enter){
 10922  0014A2  5072               	movf	_enter,w,c
 10923  0014A4  1073               	iorwf	_enter+1,w,c
 10924  0014A6  B4D8               	btfsc	status,2,c
 10925  0014A8  D007               	goto	i2l5809
 10926                           
 10927                           ;UI.c: 324: dispLogs(3);
 10928  0014AA  0E00               	movlw	0
 10929  0014AC  6E13               	movwf	dispLogs@myLog+1,c
 10930  0014AE  0E03               	movlw	3
 10931  0014B0  6E12               	movwf	dispLogs@myLog,c
 10932  0014B2  ECB4  F018         	call	_dispLogs	;wreg free
 10933                           
 10934                           ;UI.c: 325: }
 10935  0014B6  D07C               	goto	i2l269
 10936  0014B8                     i2l5809:
 10937                           
 10938                           ;UI.c: 326: else if(back){
 10939  0014B8  5064               	movf	_back,w,c
 10940  0014BA  1065               	iorwf	_back+1,w,c
 10941  0014BC  B4D8               	btfsc	status,2,c
 10942  0014BE  D078               	goto	i2l269
 10943                           
 10944                           ;UI.c: 327: change_state_to_menu_23();
 10945  0014C0  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 10946                           
 10947                           ;UI.c: 328: }
 10948                           ;UI.c: 329: break;
 10949  0014C4  D075               	goto	i2l269
 10950  0014C6                     i2l5813:
 10951                           
 10952                           ;UI.c: 332: if(up){
 10953  0014C6  5078               	movf	_up,w,c
 10954  0014C8  1079               	iorwf	_up+1,w,c
 10955  0014CA  B4D8               	btfsc	status,2,c
 10956  0014CC  D003               	goto	i2l5817
 10957                           
 10958                           ;UI.c: 333: change_state_to_logs_22();
 10959  0014CE  ECB1  F017         	call	_change_state_to_logs_22	;wreg free
 10960                           
 10961                           ;UI.c: 334: }
 10962  0014D2  D06E               	goto	i2l269
 10963  0014D4                     i2l5817:
 10964                           
 10965                           ;UI.c: 335: else if(down){
 10966  0014D4  5070               	movf	_down,w,c
 10967  0014D6  1071               	iorwf	_down+1,w,c
 10968  0014D8  B4D8               	btfsc	status,2,c
 10969  0014DA  D003               	goto	i2l5821
 10970                           
 10971                           ;UI.c: 336: change_state_to_logs_34();
 10972  0014DC  EC81  F017         	call	_change_state_to_logs_34	;wreg free
 10973                           
 10974                           ;UI.c: 337: }
 10975  0014E0  D067               	goto	i2l269
 10976  0014E2                     i2l5821:
 10977                           
 10978                           ;UI.c: 338: else if(enter){
 10979  0014E2  5072               	movf	_enter,w,c
 10980  0014E4  1073               	iorwf	_enter+1,w,c
 10981  0014E6  B4D8               	btfsc	status,2,c
 10982  0014E8  D007               	goto	i2l5825
 10983                           
 10984                           ;UI.c: 339: dispLogs(3);
 10985  0014EA  0E00               	movlw	0
 10986  0014EC  6E13               	movwf	dispLogs@myLog+1,c
 10987  0014EE  0E03               	movlw	3
 10988  0014F0  6E12               	movwf	dispLogs@myLog,c
 10989  0014F2  ECB4  F018         	call	_dispLogs	;wreg free
 10990                           
 10991                           ;UI.c: 340: }
 10992  0014F6  D05C               	goto	i2l269
 10993  0014F8                     i2l5825:
 10994                           
 10995                           ;UI.c: 341: else if(back){
 10996  0014F8  5064               	movf	_back,w,c
 10997  0014FA  1065               	iorwf	_back+1,w,c
 10998  0014FC  B4D8               	btfsc	status,2,c
 10999  0014FE  D058               	goto	i2l269
 11000                           
 11001                           ;UI.c: 342: change_state_to_menu_23();
 11002  001500  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 11003                           
 11004                           ;UI.c: 343: }
 11005                           ;UI.c: 344: break;
 11006  001504  D055               	goto	i2l269
 11007  001506                     i2l5829:
 11008                           
 11009                           ;UI.c: 347: if(up){
 11010  001506  5078               	movf	_up,w,c
 11011  001508  1079               	iorwf	_up+1,w,c
 11012  00150A  B4D8               	btfsc	status,2,c
 11013  00150C  D003               	goto	i2l5833
 11014                           
 11015                           ;UI.c: 348: change_state_to_logs_33();
 11016  00150E  EC99  F017         	call	_change_state_to_logs_33	;wreg free
 11017                           
 11018                           ;UI.c: 349: }
 11019  001512  D04E               	goto	i2l269
 11020  001514                     i2l5833:
 11021                           
 11022                           ;UI.c: 350: else if(down){
 11023  001514  5070               	movf	_down,w,c
 11024  001516  1071               	iorwf	_down+1,w,c
 11025  001518  B4D8               	btfsc	status,2,c
 11026  00151A  D003               	goto	i2l5837
 11027                           
 11028                           ;UI.c: 351: change_state_to_logs_11();
 11029  00151C  ECE1  F017         	call	_change_state_to_logs_11	;wreg free
 11030                           
 11031                           ;UI.c: 352: }
 11032  001520  D047               	goto	i2l269
 11033  001522                     i2l5837:
 11034                           
 11035                           ;UI.c: 353: else if(enter){
 11036  001522  5072               	movf	_enter,w,c
 11037  001524  1073               	iorwf	_enter+1,w,c
 11038  001526  B4D8               	btfsc	status,2,c
 11039  001528  D007               	goto	i2l5841
 11040                           
 11041                           ;UI.c: 354: dispLogs(4);
 11042  00152A  0E00               	movlw	0
 11043  00152C  6E13               	movwf	dispLogs@myLog+1,c
 11044  00152E  0E04               	movlw	4
 11045  001530  6E12               	movwf	dispLogs@myLog,c
 11046  001532  ECB4  F018         	call	_dispLogs	;wreg free
 11047                           
 11048                           ;UI.c: 355: }
 11049  001536  D03C               	goto	i2l269
 11050  001538                     i2l5841:
 11051                           
 11052                           ;UI.c: 356: else if(back){
 11053  001538  5064               	movf	_back,w,c
 11054  00153A  1065               	iorwf	_back+1,w,c
 11055  00153C  B4D8               	btfsc	status,2,c
 11056  00153E  D038               	goto	i2l269
 11057                           
 11058                           ;UI.c: 357: change_state_to_menu_23();
 11059  001540  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 11060                           
 11061                           ;UI.c: 363: }
 11062                           
 11063                           ;UI.c: 362: break;
 11064                           
 11065                           ;UI.c: 361: default:
 11066                           
 11067                           ;UI.c: 358: }
 11068                           ;UI.c: 359: break;
 11069  001544  D035               	goto	i2l269
 11070  001546                     i2l5847:
 11071  001546  C0DB  F043         	movff	_cur_state,??_updateMenu
 11072  00154A  C0DC  F044         	movff	_cur_state+1,??_updateMenu+1
 11073                           
 11074                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 11075                           ; Switch size 1, requested type "space"
 11076                           ; Number of cases is 3, Range of values is 0 to 4
 11077                           ; switch strategies available:
 11078                           ; Name         Instructions Cycles
 11079                           ; simple_byte           10     6 (average)
 11080                           ;	Chosen strategy is simple_byte
 11081  00154E  5044               	movf	??_updateMenu+1,w,c
 11082  001550  0A00               	xorlw	0	; case 0
 11083  001552  B4D8               	btfsc	status,2,c
 11084  001554  D007               	goto	i2l6347
 11085  001556  0A03               	xorlw	3	; case 3
 11086  001558  B4D8               	btfsc	status,2,c
 11087  00155A  D015               	goto	i2l6349
 11088  00155C  0A07               	xorlw	7	; case 4
 11089  00155E  B4D8               	btfsc	status,2,c
 11090  001560  D020               	goto	i2l6351
 11091  001562  D026               	goto	i2l269
 11092  001564                     i2l6347:
 11093                           
 11094                           ; Switch size 1, requested type "space"
 11095                           ; Number of cases is 5, Range of values is 0 to 23
 11096                           ; switch strategies available:
 11097                           ; Name         Instructions Cycles
 11098                           ; simple_byte           16     9 (average)
 11099                           ;	Chosen strategy is simple_byte
 11100  001564  5043               	movf	??_updateMenu,w,c
 11101  001566  0A00               	xorlw	0	; case 0
 11102  001568  B4D8               	btfsc	status,2,c
 11103  00156A  D6DC               	goto	i2l5699
 11104  00156C  0A0B               	xorlw	11	; case 11
 11105  00156E  B4D8               	btfsc	status,2,c
 11106  001570  D6DC               	goto	i2l5701
 11107  001572  0A07               	xorlw	7	; case 12
 11108  001574  B4D8               	btfsc	status,2,c
 11109  001576  D6EE               	goto	i2l5713
 11110  001578  0A1A               	xorlw	26	; case 22
 11111  00157A  B4D8               	btfsc	status,2,c
 11112  00157C  D6F9               	goto	i2l5725
 11113  00157E  0A01               	xorlw	1	; case 23
 11114  001580  B4D8               	btfsc	status,2,c
 11115  001582  D70C               	goto	i2l5737
 11116  001584  D015               	goto	i2l269
 11117  001586                     i2l6349:
 11118                           
 11119                           ; Switch size 1, requested type "space"
 11120                           ; Number of cases is 4, Range of values is 243 to 255
 11121                           ; switch strategies available:
 11122                           ; Name         Instructions Cycles
 11123                           ; simple_byte           13     7 (average)
 11124                           ;	Chosen strategy is simple_byte
 11125  001586  5043               	movf	??_updateMenu,w,c
 11126  001588  0AF3               	xorlw	243	; case 243
 11127  00158A  B4D8               	btfsc	status,2,c
 11128  00158C  D71C               	goto	i2l5749
 11129  00158E  0A07               	xorlw	7	; case 244
 11130  001590  B4D8               	btfsc	status,2,c
 11131  001592  D739               	goto	i2l5765
 11132  001594  0A0A               	xorlw	10	; case 254
 11133  001596  B4D8               	btfsc	status,2,c
 11134  001598  D756               	goto	i2l5781
 11135  00159A  0A01               	xorlw	1	; case 255
 11136  00159C  B4D8               	btfsc	status,2,c
 11137  00159E  D773               	goto	i2l5797
 11138  0015A0  D007               	goto	i2l269
 11139  0015A2                     i2l6351:
 11140                           
 11141                           ; Switch size 1, requested type "space"
 11142                           ; Number of cases is 2, Range of values is 9 to 10
 11143                           ; switch strategies available:
 11144                           ; Name         Instructions Cycles
 11145                           ; simple_byte            7     4 (average)
 11146                           ;	Chosen strategy is simple_byte
 11147  0015A2  5043               	movf	??_updateMenu,w,c
 11148  0015A4  0A09               	xorlw	9	; case 9
 11149  0015A6  B4D8               	btfsc	status,2,c
 11150  0015A8  D78E               	goto	i2l5813
 11151  0015AA  0A03               	xorlw	3	; case 10
 11152  0015AC  B4D8               	btfsc	status,2,c
 11153  0015AE  D7AB               	goto	i2l5829
 11154  0015B0                     i2l269:
 11155                           
 11156                           ;UI.c: 364: }
 11157                           ;UI.c: 365: (INTCONbits.GIE = 1);
 11158  0015B0  8EF2               	bsf	intcon,7,c	;volatile
 11159  0015B2  0012               	return		;funcret
 11160  0015B4                     __end_of_updateMenu:
 11161                           	opt stack 0
 11162                           pclatu	equ	0xFFB
 11163                           pclath	equ	0xFFA
 11164                           tblptru	equ	0xFF8
 11165                           tblptrh	equ	0xFF7
 11166                           tblptrl	equ	0xFF6
 11167                           tablat	equ	0xFF5
 11168                           prodh	equ	0xFF4
 11169                           prodl	equ	0xFF3
 11170                           intcon	equ	0xFF2
 11171                           intcon2	equ	0xFF1
 11172                           intcon3	equ	0xFF0
 11173                           indf0	equ	0xFEF
 11174                           postinc0	equ	0xFEE
 11175                           fsr0h	equ	0xFEA
 11176                           fsr0l	equ	0xFE9
 11177                           wreg	equ	0xFE8
 11178                           postdec1	equ	0xFE5
 11179                           fsr1h	equ	0xFE2
 11180                           fsr1l	equ	0xFE1
 11181                           indf2	equ	0xFDF
 11182                           postinc2	equ	0xFDE
 11183                           postdec2	equ	0xFDD
 11184                           fsr2h	equ	0xFDA
 11185                           fsr2l	equ	0xFD9
 11186                           status	equ	0xFD8
 11187                           
 11188 ;; *************** function i2_change_state_to_menu_start *****************
 11189 ;; Defined at:
 11190 ;;		line 470 in file "UI.c"
 11191 ;; Parameters:    Size  Location     Type
 11192 ;;		None
 11193 ;; Auto vars:     Size  Location     Type
 11194 ;;		None
 11195 ;; Return value:  Size  Location     Type
 11196 ;;                  1    wreg      void 
 11197 ;; Registers used:
 11198 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11199 ;; Tracked objects:
 11200 ;;		On entry : 0/0
 11201 ;;		On exit  : 0/0
 11202 ;;		Unchanged: 0/0
 11203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;Total ram usage:        0 bytes
 11209 ;; Hardware stack levels used:    1
 11210 ;; Hardware stack levels required when called:    4
 11211 ;; This function calls:
 11212 ;;		i2_lcdInst
 11213 ;;		i2_printRTC
 11214 ;;		i2_printf
 11215 ;; This function is called by:
 11216 ;;		_updateMenu
 11217 ;; This function uses a non-reentrant model
 11218 ;;
 11219                           
 11220                           	psect	text47
 11221  0030D0                     __ptext47:
 11222                           	opt stack 0
 11223  0030D0                     i2_change_state_to_menu_start:
 11224                           	opt stack 18
 11225                           
 11226                           ;UI.c: 471: cur_state = 0;
 11227                           
 11228                           ;incstack = 0
 11229  0030D0  0E00               	movlw	0
 11230  0030D2  0100               	movlb	0	; () banked
 11231  0030D4  6FDC               	movwf	(_cur_state+1)& (0+255),b
 11232  0030D6  0E00               	movlw	0
 11233  0030D8  6FDB               	movwf	_cur_state& (0+255),b
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;UI.c: 473: lcdInst(0b10000000);;
 11237  0030DA  0E80               	movlw	128
 11238  0030DC  EC4B  F019         	call	i2_lcdInst
 11239                           
 11240                           ;UI.c: 474: printRTC();
 11241  0030E0  ECDA  F00A         	call	i2_printRTC	;wreg free
 11242                           
 11243                           ;UI.c: 475: lcdInst(0b11000000);;
 11244  0030E4  0EC0               	movlw	192
 11245  0030E6  EC4B  F019         	call	i2_lcdInst
 11246                           
 11247                           ;UI.c: 476: printf("PUSH TO CONTINUE");
 11248  0030EA  0E57               	movlw	low STR_30
 11249  0030EC  6E0D               	movwf	i2printf@f,c
 11250  0030EE  0EFF               	movlw	high STR_30
 11251  0030F0  6E0E               	movwf	i2printf@f+1,c
 11252  0030F2  EC5E  F006         	call	i2_printf	;wreg free
 11253  0030F6  0012               	return		;funcret
 11254  0030F8                     __end_ofi2_change_state_to_menu_start:
 11255                           	opt stack 0
 11256                           pclatu	equ	0xFFB
 11257                           pclath	equ	0xFFA
 11258                           tblptru	equ	0xFF8
 11259                           tblptrh	equ	0xFF7
 11260                           tblptrl	equ	0xFF6
 11261                           tablat	equ	0xFF5
 11262                           prodh	equ	0xFF4
 11263                           prodl	equ	0xFF3
 11264                           intcon	equ	0xFF2
 11265                           intcon2	equ	0xFF1
 11266                           intcon3	equ	0xFF0
 11267                           indf0	equ	0xFEF
 11268                           postinc0	equ	0xFEE
 11269                           fsr0h	equ	0xFEA
 11270                           fsr0l	equ	0xFE9
 11271                           wreg	equ	0xFE8
 11272                           postdec1	equ	0xFE5
 11273                           fsr1h	equ	0xFE2
 11274                           fsr1l	equ	0xFE1
 11275                           indf2	equ	0xFDF
 11276                           postinc2	equ	0xFDE
 11277                           postdec2	equ	0xFDD
 11278                           fsr2h	equ	0xFDA
 11279                           fsr2l	equ	0xFD9
 11280                           status	equ	0xFD8
 11281                           
 11282 ;; *************** function i2_printRTC *****************
 11283 ;; Defined at:
 11284 ;;		line 63 in file "RTC.c"
 11285 ;; Parameters:    Size  Location     Type
 11286 ;;		None
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;  printRTC       14   44[COMRAM] int [7]
 11289 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 11290 ;;  printRTC        2   64[COMRAM] int 
 11291 ;;  printRTC        2   58[COMRAM] int 
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  1    wreg      void 
 11294 ;; Registers used:
 11295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;Total ram usage:       25 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    3
 11308 ;; This function calls:
 11309 ;;		i2_getRTC
 11310 ;;		i2_lcdInst
 11311 ;;		i2_printf
 11312 ;;		i2_strcpy
 11313 ;; This function is called by:
 11314 ;;		i2_change_state_to_menu_start
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           	psect	text48
 11319  0015B4                     __ptext48:
 11320                           	opt stack 0
 11321  0015B4                     i2_printRTC:
 11322                           	opt stack 18
 11323                           
 11324                           ;RTC.c: 64: getRTC();
 11325                           
 11326                           ;incstack = 0
 11327  0015B4  EC97  F014         	call	i2_getRTC	;wreg free
 11328                           
 11329                           ;RTC.c: 65: char month[] = "MMM";
 11330  0015B8  C12C  F03D         	movff	printRTC@F3213,i2printRTC@month
 11331  0015BC  C12D  F03E         	movff	printRTC@F3213+1,i2printRTC@month+1
 11332  0015C0  C12E  F03F         	movff	printRTC@F3213+2,i2printRTC@month+2
 11333  0015C4  C12F  F040         	movff	printRTC@F3213+3,i2printRTC@month+3
 11334                           
 11335                           ;RTC.c: 66: int INT_time[7];
 11336                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 11337  0015C8  0E00               	movlw	0
 11338  0015CA  6E42               	movwf	i2printRTC@i+1,c
 11339  0015CC  0E00               	movlw	0
 11340  0015CE  6E41               	movwf	i2printRTC@i,c
 11341  0015D0  BE42               	btfsc	i2printRTC@i+1,7,c
 11342  0015D2  D006               	goto	i2l4839
 11343  0015D4  5042               	movf	i2printRTC@i+1,w,c
 11344  0015D6  E135               	bnz	i2l610
 11345  0015D8  0E07               	movlw	7
 11346  0015DA  5C41               	subwf	i2printRTC@i,w,c
 11347  0015DC  B0D8               	btfsc	status,0,c
 11348  0015DE  D031               	goto	i2l610
 11349  0015E0                     i2l4839:
 11350                           
 11351                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11352  0015E0  0E5B               	movlw	low _time
 11353  0015E2  2441               	addwf	i2printRTC@i,w,c
 11354  0015E4  6ED9               	movwf	fsr2l,c
 11355  0015E6  0E00               	movlw	high _time
 11356  0015E8  2042               	addwfc	i2printRTC@i+1,w,c
 11357  0015EA  6EDA               	movwf	fsr2h,c
 11358  0015EC  50DF               	movf	indf2,w,c
 11359  0015EE  6E2A               	movwf	??i2_printRTC& (0+255),c
 11360  0015F0  3A2A               	swapf	??i2_printRTC,f,c
 11361  0015F2  0E0F               	movlw	15
 11362  0015F4  162A               	andwf	??i2_printRTC,f,c
 11363  0015F6  0E0F               	movlw	15
 11364  0015F8  162A               	andwf	??i2_printRTC,f,c
 11365  0015FA  502A               	movf	??i2_printRTC,w,c
 11366  0015FC  0D0A               	mullw	10
 11367  0015FE  0E5B               	movlw	low _time
 11368  001600  2441               	addwf	i2printRTC@i,w,c
 11369  001602  6ED9               	movwf	fsr2l,c
 11370  001604  0E00               	movlw	high _time
 11371  001606  2042               	addwfc	i2printRTC@i+1,w,c
 11372  001608  6EDA               	movwf	fsr2h,c
 11373  00160A  50DF               	movf	indf2,w,c
 11374  00160C  0B0F               	andlw	15
 11375  00160E  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 11376  001610  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 11377  001612  50F3               	movf	prodl,w,c
 11378  001614  262B               	addwf	??i2_printRTC+1,f,c
 11379  001616  50F4               	movf	prodh,w,c
 11380  001618  222C               	addwfc	??i2_printRTC+2,f,c
 11381  00161A  90D8               	bcf	status,0,c
 11382  00161C  3441               	rlcf	i2printRTC@i,w,c
 11383  00161E  6ED9               	movwf	fsr2l,c
 11384  001620  3442               	rlcf	i2printRTC@i+1,w,c
 11385  001622  6EDA               	movwf	fsr2h,c
 11386  001624  0E2D               	movlw	low i2printRTC@INT_time
 11387  001626  26D9               	addwf	fsr2l,f,c
 11388  001628  0E00               	movlw	high i2printRTC@INT_time
 11389  00162A  22DA               	addwfc	fsr2h,f,c
 11390  00162C  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 11391  001630  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 11392  001634  4A41               	infsnz	i2printRTC@i,f,c
 11393  001636  2A42               	incf	i2printRTC@i+1,f,c
 11394  001638  BE42               	btfsc	i2printRTC@i+1,7,c
 11395  00163A  D7D2               	goto	i2l4839
 11396  00163C  5042               	movf	i2printRTC@i+1,w,c
 11397  00163E  E101               	bnz	i2u355_40
 11398  001640  D7CB               	goto	L6
 11399  001642                     i2u355_40:
 11400  001642                     i2l610:
 11401                           
 11402                           ;RTC.c: 69: }
 11403                           ;RTC.c: 70: int RTC_month = INT_time[5];
 11404  001642  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 11405  001646  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 11406                           
 11407                           ;RTC.c: 71: switch(RTC_month){
 11408  00164A  D084               	goto	i2l4871
 11409  00164C                     i2l4845:
 11410                           
 11411                           ;RTC.c: 73: strcpy(month, "JAN");
 11412  00164C  0E3D               	movlw	low i2printRTC@month
 11413  00164E  6E01               	movwf	i2strcpy@to,c
 11414  001650  0E00               	movlw	high i2printRTC@month
 11415  001652  6E02               	movwf	i2strcpy@to+1,c
 11416  001654  0EDB               	movlw	low STR_8
 11417  001656  6E03               	movwf	i2strcpy@from,c
 11418  001658  0EFF               	movlw	high STR_8
 11419  00165A  6E04               	movwf	i2strcpy@from+1,c
 11420  00165C  EC08  F017         	call	i2_strcpy	;wreg free
 11421                           
 11422                           ;RTC.c: 74: break;
 11423  001660  D0A6               	goto	i2l4873
 11424  001662                     i2l4847:
 11425                           
 11426                           ;RTC.c: 76: strcpy(month, "FEB");
 11427  001662  0E3D               	movlw	low i2printRTC@month
 11428  001664  6E01               	movwf	i2strcpy@to,c
 11429  001666  0E00               	movlw	high i2printRTC@month
 11430  001668  6E02               	movwf	i2strcpy@to+1,c
 11431  00166A  0ECB               	movlw	low STR_9
 11432  00166C  6E03               	movwf	i2strcpy@from,c
 11433  00166E  0EFF               	movlw	high STR_9
 11434  001670  6E04               	movwf	i2strcpy@from+1,c
 11435  001672  EC08  F017         	call	i2_strcpy	;wreg free
 11436                           
 11437                           ;RTC.c: 77: break;
 11438  001676  D09B               	goto	i2l4873
 11439  001678                     i2l4849:
 11440                           
 11441                           ;RTC.c: 79: strcpy(month, "MAR");
 11442  001678  0E3D               	movlw	low i2printRTC@month
 11443  00167A  6E01               	movwf	i2strcpy@to,c
 11444  00167C  0E00               	movlw	high i2printRTC@month
 11445  00167E  6E02               	movwf	i2strcpy@to+1,c
 11446  001680  0EE7               	movlw	low STR_10
 11447  001682  6E03               	movwf	i2strcpy@from,c
 11448  001684  0EFF               	movlw	high STR_10
 11449  001686  6E04               	movwf	i2strcpy@from+1,c
 11450  001688  EC08  F017         	call	i2_strcpy	;wreg free
 11451                           
 11452                           ;RTC.c: 80: break;
 11453  00168C  D090               	goto	i2l4873
 11454  00168E                     i2l4851:
 11455                           
 11456                           ;RTC.c: 82: strcpy(month, "APR");
 11457  00168E  0E3D               	movlw	low i2printRTC@month
 11458  001690  6E01               	movwf	i2strcpy@to,c
 11459  001692  0E00               	movlw	high i2printRTC@month
 11460  001694  6E02               	movwf	i2strcpy@to+1,c
 11461  001696  0EEB               	movlw	low STR_11
 11462  001698  6E03               	movwf	i2strcpy@from,c
 11463  00169A  0EFF               	movlw	high STR_11
 11464  00169C  6E04               	movwf	i2strcpy@from+1,c
 11465  00169E  EC08  F017         	call	i2_strcpy	;wreg free
 11466                           
 11467                           ;RTC.c: 83: break;
 11468  0016A2  D085               	goto	i2l4873
 11469  0016A4                     i2l4853:
 11470                           
 11471                           ;RTC.c: 85: strcpy(month, "MAY");
 11472  0016A4  0E3D               	movlw	low i2printRTC@month
 11473  0016A6  6E01               	movwf	i2strcpy@to,c
 11474  0016A8  0E00               	movlw	high i2printRTC@month
 11475  0016AA  6E02               	movwf	i2strcpy@to+1,c
 11476  0016AC  0EFB               	movlw	low STR_12
 11477  0016AE  6E03               	movwf	i2strcpy@from,c
 11478  0016B0  0EFF               	movlw	high STR_12
 11479  0016B2  6E04               	movwf	i2strcpy@from+1,c
 11480  0016B4  EC08  F017         	call	i2_strcpy	;wreg free
 11481                           
 11482                           ;RTC.c: 86: break;
 11483  0016B8  D07A               	goto	i2l4873
 11484  0016BA                     i2l4855:
 11485                           
 11486                           ;RTC.c: 88: strcpy(month, "JUN");
 11487  0016BA  0E3D               	movlw	low i2printRTC@month
 11488  0016BC  6E01               	movwf	i2strcpy@to,c
 11489  0016BE  0E00               	movlw	high i2printRTC@month
 11490  0016C0  6E02               	movwf	i2strcpy@to+1,c
 11491  0016C2  0EDF               	movlw	low STR_13
 11492  0016C4  6E03               	movwf	i2strcpy@from,c
 11493  0016C6  0EFF               	movlw	high STR_13
 11494  0016C8  6E04               	movwf	i2strcpy@from+1,c
 11495  0016CA  EC08  F017         	call	i2_strcpy	;wreg free
 11496                           
 11497                           ;RTC.c: 89: break;
 11498  0016CE  D06F               	goto	i2l4873
 11499  0016D0                     i2l4857:
 11500                           
 11501                           ;RTC.c: 91: strcpy(month, "JUL");
 11502  0016D0  0E3D               	movlw	low i2printRTC@month
 11503  0016D2  6E01               	movwf	i2strcpy@to,c
 11504  0016D4  0E00               	movlw	high i2printRTC@month
 11505  0016D6  6E02               	movwf	i2strcpy@to+1,c
 11506  0016D8  0ED7               	movlw	low STR_14
 11507  0016DA  6E03               	movwf	i2strcpy@from,c
 11508  0016DC  0EFF               	movlw	high STR_14
 11509  0016DE  6E04               	movwf	i2strcpy@from+1,c
 11510  0016E0  EC08  F017         	call	i2_strcpy	;wreg free
 11511                           
 11512                           ;RTC.c: 92: break;
 11513  0016E4  D064               	goto	i2l4873
 11514  0016E6                     i2l4859:
 11515                           
 11516                           ;RTC.c: 94: strcpy(month, "AUG");
 11517  0016E6  0E3D               	movlw	low i2printRTC@month
 11518  0016E8  6E01               	movwf	i2strcpy@to,c
 11519  0016EA  0E00               	movlw	high i2printRTC@month
 11520  0016EC  6E02               	movwf	i2strcpy@to+1,c
 11521  0016EE  0ED3               	movlw	low STR_15
 11522  0016F0  6E03               	movwf	i2strcpy@from,c
 11523  0016F2  0EFF               	movlw	high STR_15
 11524  0016F4  6E04               	movwf	i2strcpy@from+1,c
 11525  0016F6  EC08  F017         	call	i2_strcpy	;wreg free
 11526                           
 11527                           ;RTC.c: 95: break;
 11528  0016FA  D059               	goto	i2l4873
 11529  0016FC                     i2l4861:
 11530                           
 11531                           ;RTC.c: 97: strcpy(month, "SEP");
 11532  0016FC  0E3D               	movlw	low i2printRTC@month
 11533  0016FE  6E01               	movwf	i2strcpy@to,c
 11534  001700  0E00               	movlw	high i2printRTC@month
 11535  001702  6E02               	movwf	i2strcpy@to+1,c
 11536  001704  0EE3               	movlw	low STR_16
 11537  001706  6E03               	movwf	i2strcpy@from,c
 11538  001708  0EFF               	movlw	high STR_16
 11539  00170A  6E04               	movwf	i2strcpy@from+1,c
 11540  00170C  EC08  F017         	call	i2_strcpy	;wreg free
 11541                           
 11542                           ;RTC.c: 98: break;
 11543  001710  D04E               	goto	i2l4873
 11544  001712                     i2l4863:
 11545                           
 11546                           ;RTC.c: 100: strcpy(month, "OCT");
 11547  001712  0E3D               	movlw	low i2printRTC@month
 11548  001714  6E01               	movwf	i2strcpy@to,c
 11549  001716  0E00               	movlw	high i2printRTC@month
 11550  001718  6E02               	movwf	i2strcpy@to+1,c
 11551  00171A  0EF3               	movlw	low STR_17
 11552  00171C  6E03               	movwf	i2strcpy@from,c
 11553  00171E  0EFF               	movlw	high STR_17
 11554  001720  6E04               	movwf	i2strcpy@from+1,c
 11555  001722  EC08  F017         	call	i2_strcpy	;wreg free
 11556                           
 11557                           ;RTC.c: 101: break;
 11558  001726  D043               	goto	i2l4873
 11559  001728                     i2l4865:
 11560                           
 11561                           ;RTC.c: 103: strcpy(month, "NOV");
 11562  001728  0E3D               	movlw	low i2printRTC@month
 11563  00172A  6E01               	movwf	i2strcpy@to,c
 11564  00172C  0E00               	movlw	high i2printRTC@month
 11565  00172E  6E02               	movwf	i2strcpy@to+1,c
 11566  001730  0EF7               	movlw	low STR_18
 11567  001732  6E03               	movwf	i2strcpy@from,c
 11568  001734  0EFF               	movlw	high STR_18
 11569  001736  6E04               	movwf	i2strcpy@from+1,c
 11570  001738  EC08  F017         	call	i2_strcpy	;wreg free
 11571                           
 11572                           ;RTC.c: 104: break;
 11573  00173C  D038               	goto	i2l4873
 11574  00173E                     i2l4867:
 11575                           
 11576                           ;RTC.c: 106: strcpy(month, "DEC");
 11577  00173E  0E3D               	movlw	low i2printRTC@month
 11578  001740  6E01               	movwf	i2strcpy@to,c
 11579  001742  0E00               	movlw	high i2printRTC@month
 11580  001744  6E02               	movwf	i2strcpy@to+1,c
 11581  001746  0ECF               	movlw	low STR_19
 11582  001748  6E03               	movwf	i2strcpy@from,c
 11583  00174A  0EFF               	movlw	high STR_19
 11584  00174C  6E04               	movwf	i2strcpy@from+1,c
 11585  00174E  EC08  F017         	call	i2_strcpy	;wreg free
 11586                           
 11587                           ;RTC.c: 108: }
 11588                           
 11589                           ;RTC.c: 107: break;
 11590  001752  D02D               	goto	i2l4873
 11591  001754                     i2l4871:
 11592  001754  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 11593  001758  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 11594                           
 11595                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11596                           ; Switch size 1, requested type "space"
 11597                           ; Number of cases is 1, Range of values is 0 to 0
 11598                           ; switch strategies available:
 11599                           ; Name         Instructions Cycles
 11600                           ; simple_byte            4     3 (average)
 11601                           ;	Chosen strategy is simple_byte
 11602  00175C  502B               	movf	??i2_printRTC+1,w,c
 11603  00175E  0A00               	xorlw	0	; case 0
 11604  001760  A4D8               	btfss	status,2,c
 11605  001762  D025               	goto	i2l4873
 11606                           
 11607                           ; Switch size 1, requested type "space"
 11608                           ; Number of cases is 12, Range of values is 1 to 12
 11609                           ; switch strategies available:
 11610                           ; Name         Instructions Cycles
 11611                           ; simple_byte           37    19 (average)
 11612                           ;	Chosen strategy is simple_byte
 11613  001764  502A               	movf	??i2_printRTC,w,c
 11614  001766  0A01               	xorlw	1	; case 1
 11615  001768  B4D8               	btfsc	status,2,c
 11616  00176A  D770               	goto	i2l4845
 11617  00176C  0A03               	xorlw	3	; case 2
 11618  00176E  B4D8               	btfsc	status,2,c
 11619  001770  D778               	goto	i2l4847
 11620  001772  0A01               	xorlw	1	; case 3
 11621  001774  B4D8               	btfsc	status,2,c
 11622  001776  D780               	goto	i2l4849
 11623  001778  0A07               	xorlw	7	; case 4
 11624  00177A  B4D8               	btfsc	status,2,c
 11625  00177C  D788               	goto	i2l4851
 11626  00177E  0A01               	xorlw	1	; case 5
 11627  001780  B4D8               	btfsc	status,2,c
 11628  001782  D790               	goto	i2l4853
 11629  001784  0A03               	xorlw	3	; case 6
 11630  001786  B4D8               	btfsc	status,2,c
 11631  001788  D798               	goto	i2l4855
 11632  00178A  0A01               	xorlw	1	; case 7
 11633  00178C  B4D8               	btfsc	status,2,c
 11634  00178E  D7A0               	goto	i2l4857
 11635  001790  0A0F               	xorlw	15	; case 8
 11636  001792  B4D8               	btfsc	status,2,c
 11637  001794  D7A8               	goto	i2l4859
 11638  001796  0A01               	xorlw	1	; case 9
 11639  001798  B4D8               	btfsc	status,2,c
 11640  00179A  D7B0               	goto	i2l4861
 11641  00179C  0A03               	xorlw	3	; case 10
 11642  00179E  B4D8               	btfsc	status,2,c
 11643  0017A0  D7B8               	goto	i2l4863
 11644  0017A2  0A01               	xorlw	1	; case 11
 11645  0017A4  B4D8               	btfsc	status,2,c
 11646  0017A6  D7C0               	goto	i2l4865
 11647  0017A8  0A07               	xorlw	7	; case 12
 11648  0017AA  B4D8               	btfsc	status,2,c
 11649  0017AC  D7C8               	goto	i2l4867
 11650  0017AE                     i2l4873:
 11651                           
 11652                           ;RTC.c: 109: lcdInst(0b10000000);;
 11653  0017AE  0E80               	movlw	128
 11654  0017B0  EC4B  F019         	call	i2_lcdInst
 11655                           
 11656                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 11657  0017B4  0EAE               	movlw	low STR_21
 11658  0017B6  6E0D               	movwf	i2printf@f,c
 11659  0017B8  0EFD               	movlw	high STR_21
 11660  0017BA  6E0E               	movwf	i2printf@f+1,c
 11661  0017BC  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 11662  0017C0  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 11663  0017C4  0E3D               	movlw	low i2printRTC@month
 11664  0017C6  6E11               	movwf	?i2_printf+4,c
 11665  0017C8  0E00               	movlw	high i2printRTC@month
 11666  0017CA  6E12               	movwf	?i2_printf+5,c
 11667  0017CC  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 11668  0017D0  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 11669  0017D4  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 11670  0017D8  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 11671  0017DC  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 11672  0017E0  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 11673  0017E4  EC5E  F006         	call	i2_printf	;wreg free
 11674  0017E8  0012               	return		;funcret
 11675  0017EA                     __end_ofi2_printRTC:
 11676                           	opt stack 0
 11677                           pclatu	equ	0xFFB
 11678                           pclath	equ	0xFFA
 11679                           tblptru	equ	0xFF8
 11680                           tblptrh	equ	0xFF7
 11681                           tblptrl	equ	0xFF6
 11682                           tablat	equ	0xFF5
 11683                           prodh	equ	0xFF4
 11684                           prodl	equ	0xFF3
 11685                           intcon	equ	0xFF2
 11686                           intcon2	equ	0xFF1
 11687                           intcon3	equ	0xFF0
 11688                           indf0	equ	0xFEF
 11689                           postinc0	equ	0xFEE
 11690                           fsr0h	equ	0xFEA
 11691                           fsr0l	equ	0xFE9
 11692                           wreg	equ	0xFE8
 11693                           postdec1	equ	0xFE5
 11694                           fsr1h	equ	0xFE2
 11695                           fsr1l	equ	0xFE1
 11696                           indf2	equ	0xFDF
 11697                           postinc2	equ	0xFDE
 11698                           postdec2	equ	0xFDD
 11699                           fsr2h	equ	0xFDA
 11700                           fsr2l	equ	0xFD9
 11701                           status	equ	0xFD8
 11702                           
 11703 ;; *************** function i2_strcpy *****************
 11704 ;; Defined at:
 11705 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;  to              2    0[COMRAM] PTR unsigned char 
 11708 ;;		 -> printRTC@month(4), UI@month(4), 
 11709 ;;  from            2    2[COMRAM] PTR const unsigned char 
 11710 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 11711 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 11712 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 11713 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 11714 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 11715 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 11716 ;;		 -> STR_8(4), 
 11717 ;; Auto vars:     Size  Location     Type
 11718 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 11719 ;;		 -> printRTC@month(4), UI@month(4), 
 11720 ;; Return value:  Size  Location     Type
 11721 ;;                  2    0[COMRAM] PTR unsigned char 
 11722 ;; Registers used:
 11723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11732 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11733 ;;Total ram usage:        6 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; This function calls:
 11736 ;;		Nothing
 11737 ;; This function is called by:
 11738 ;;		i2_printRTC
 11739 ;; This function uses a non-reentrant model
 11740 ;;
 11741                           
 11742                           	psect	text49
 11743  002E10                     __ptext49:
 11744                           	opt stack 0
 11745  002E10                     i2_strcpy:
 11746                           	opt stack 20
 11747                           
 11748                           ;incstack = 0
 11749  002E10  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 11750  002E14  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 11751  002E18  D004               	goto	i2l4575
 11752  002E1A                     i2l4573:
 11753  002E1A  4A05               	infsnz	i2strcpy@cp,f,c
 11754  002E1C  2A06               	incf	i2strcpy@cp+1,f,c
 11755  002E1E  4A03               	infsnz	i2strcpy@from,f,c
 11756  002E20  2A04               	incf	i2strcpy@from+1,f,c
 11757  002E22                     i2l4575:
 11758  002E22  C003  FFF6         	movff	i2strcpy@from,tblptrl
 11759  002E26  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 11760  002E2A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11761  002E2A  6AF8               	clrf	tblptru,c
 11762  002E2C                     	endif
 11763  002E2C                     	if	0	;tblptru may be non-zero
 11764  002E2C                     	endif
 11765  002E2C  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 11766  002E30  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 11767  002E34  0008               	tblrd		*
 11768  002E36  CFF5 FFDF          	movff	tablat,indf2
 11769  002E3A  50DF               	movf	indf2,w,c
 11770  002E3C  B4D8               	btfsc	status,2,c
 11771  002E3E  0012               	return	
 11772  002E40  D7EC               	goto	i2l4573
 11773  002E42                     __end_ofi2_strcpy:
 11774                           	opt stack 0
 11775                           pclatu	equ	0xFFB
 11776                           pclath	equ	0xFFA
 11777                           tblptru	equ	0xFF8
 11778                           tblptrh	equ	0xFF7
 11779                           tblptrl	equ	0xFF6
 11780                           tablat	equ	0xFF5
 11781                           prodh	equ	0xFF4
 11782                           prodl	equ	0xFF3
 11783                           intcon	equ	0xFF2
 11784                           intcon2	equ	0xFF1
 11785                           intcon3	equ	0xFF0
 11786                           indf0	equ	0xFEF
 11787                           postinc0	equ	0xFEE
 11788                           fsr0h	equ	0xFEA
 11789                           fsr0l	equ	0xFE9
 11790                           wreg	equ	0xFE8
 11791                           postdec1	equ	0xFE5
 11792                           fsr1h	equ	0xFE2
 11793                           fsr1l	equ	0xFE1
 11794                           indf2	equ	0xFDF
 11795                           postinc2	equ	0xFDE
 11796                           postdec2	equ	0xFDD
 11797                           fsr2h	equ	0xFDA
 11798                           fsr2l	equ	0xFD9
 11799                           status	equ	0xFD8
 11800                           
 11801 ;; *************** function _inputHandler *****************
 11802 ;; Defined at:
 11803 ;;		line 368 in file "UI.c"
 11804 ;; Parameters:    Size  Location     Type
 11805 ;;		None
 11806 ;; Auto vars:     Size  Location     Type
 11807 ;;		None
 11808 ;; Return value:  Size  Location     Type
 11809 ;;                  2   41[COMRAM] int 
 11810 ;; Registers used:
 11811 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11812 ;; Tracked objects:
 11813 ;;		On entry : 0/0
 11814 ;;		On exit  : 0/0
 11815 ;;		Unchanged: 0/0
 11816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11817 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11820 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11821 ;;Total ram usage:        4 bytes
 11822 ;; Hardware stack levels used:    1
 11823 ;; Hardware stack levels required when called:    4
 11824 ;; This function calls:
 11825 ;;		_change_state_to_logs_11
 11826 ;;		_change_state_to_logs_12
 11827 ;;		_change_state_to_logs_22
 11828 ;;		_change_state_to_logs_23
 11829 ;;		_change_state_to_logs_33
 11830 ;;		_change_state_to_logs_34
 11831 ;;		_change_state_to_menu_11
 11832 ;;		_change_state_to_menu_23
 11833 ;;		i2_change_state_to_menu_12
 11834 ;;		i2_change_state_to_menu_22
 11835 ;; This function is called by:
 11836 ;;		_updateMenu
 11837 ;; This function uses a non-reentrant model
 11838 ;;
 11839                           
 11840                           	psect	text50
 11841  0019DC                     __ptext50:
 11842                           	opt stack 0
 11843  0019DC                     _inputHandler:
 11844                           	opt stack 18
 11845                           
 11846                           ;UI.c: 373: if(firstboot){
 11847                           
 11848                           ;incstack = 0
 11849  0019DC  5076               	movf	_firstboot,w,c
 11850  0019DE  1077               	iorwf	_firstboot+1,w,c
 11851  0019E0  B4D8               	btfsc	status,2,c
 11852  0019E2  D00B               	goto	i2l4941
 11853                           
 11854                           ;UI.c: 374: change_state_to_menu_11();
 11855  0019E4  EC69  F017         	call	_change_state_to_menu_11	;wreg free
 11856                           
 11857                           ;UI.c: 375: firstboot = 0;
 11858  0019E8  0E00               	movlw	0
 11859  0019EA  6E77               	movwf	_firstboot+1,c
 11860  0019EC  0E00               	movlw	0
 11861  0019EE  6E76               	movwf	_firstboot,c
 11862                           
 11863                           ;UI.c: 376: return 0;
 11864  0019F0  0E00               	movlw	0
 11865  0019F2  6E2B               	movwf	?_inputHandler+1,c
 11866  0019F4  0E00               	movlw	0
 11867  0019F6  6E2A               	movwf	?_inputHandler,c
 11868  0019F8  0012               	return	
 11869  0019FA                     i2l4941:
 11870                           
 11871                           ;UI.c: 377: }
 11872                           ;UI.c: 378: if (logstate){
 11873  0019FA  0100               	movlb	0	; () banked
 11874  0019FC  51F7               	movf	_logstate& (0+255),w,b
 11875  0019FE  0100               	movlb	0	; () banked
 11876  001A00  11F8               	iorwf	(_logstate+1)& (0+255),w,b
 11877  001A02  B4D8               	btfsc	status,2,c
 11878  001A04  D0C7               	goto	i2l5059
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;UI.c: 379: if(input == 'C' && PORTBbits.RB1 == 1){
 11882  001A06  0E43               	movlw	67
 11883  001A08  187E               	xorwf	_input,w,c	;volatile
 11884  001A0A  A4D8               	btfss	status,2,c
 11885  001A0C  D012               	goto	i2l4959
 11886                           
 11887                           ; BSR set to: 0
 11888  001A0E  B281               	btfsc	3969,1,c	;volatile
 11889  001A10  D009               	goto	i2l4951
 11890  001A12  D00F               	goto	i2l4959
 11891  001A14                     i2l4949:
 11892                           
 11893                           ;UI.c: 382: _delay((unsigned long)((10)*(32000000/4000.0)));
 11894  001A14  0E68               	movlw	104
 11895  001A16  6E2C               	movwf	??_inputHandler& (0+255),c
 11896  001A18  0EE4               	movlw	228
 11897  001A1A                     i2u548_47:
 11898  001A1A  2EE8               	decfsz	wreg,f,c
 11899  001A1C  D7FE               	bra	i2u548_47
 11900  001A1E  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 11901  001A20  D7FC               	bra	i2u548_47
 11902  001A22  D000               	nop2	
 11903  001A24                     i2l4951:
 11904  001A24  B281               	btfsc	3969,1,c	;volatile
 11905  001A26  D7F6               	goto	i2l4949
 11906  001A28                     i2l4953:
 11907                           
 11908                           ;UI.c: 383: }
 11909                           ;UI.c: 384: return 0;
 11910  001A28  0E00               	movlw	0
 11911  001A2A  6E2B               	movwf	?_inputHandler+1,c
 11912  001A2C  0E00               	movlw	0
 11913  001A2E  6E2A               	movwf	?_inputHandler,c
 11914  001A30  0012               	return	
 11915  001A32                     i2l4959:
 11916                           
 11917                           ;UI.c: 386: else if (input == 'D'){
 11918  001A32  0E44               	movlw	68
 11919  001A34  187E               	xorwf	_input,w,c	;volatile
 11920  001A36  A4D8               	btfss	status,2,c
 11921  001A38  D7F7               	goto	i2l4953
 11922                           
 11923                           ;UI.c: 388: logstate = 0;
 11924  001A3A  0E00               	movlw	0
 11925  001A3C  0100               	movlb	0	; () banked
 11926  001A3E  6FF8               	movwf	(_logstate+1)& (0+255),b
 11927  001A40  0E00               	movlw	0
 11928  001A42  6FF7               	movwf	_logstate& (0+255),b
 11929                           
 11930                           ;UI.c: 389: switch(cur_state){
 11931  001A44  D012               	goto	i2l4977
 11932  001A46                     i2l4963:
 11933                           
 11934                           ;UI.c: 391: change_state_to_logs_11();
 11935  001A46  ECE1  F017         	call	_change_state_to_logs_11	;wreg free
 11936                           
 11937                           ;UI.c: 392: break;
 11938  001A4A  D7EE               	goto	i2l4953
 11939  001A4C                     i2l4965:
 11940                           
 11941                           ;UI.c: 394: change_state_to_logs_12();
 11942  001A4C  ECC9  F017         	call	_change_state_to_logs_12	;wreg free
 11943                           
 11944                           ;UI.c: 395: break;
 11945  001A50  D7EB               	goto	i2l4953
 11946  001A52                     i2l4967:
 11947                           
 11948                           ;UI.c: 397: change_state_to_logs_22();
 11949  001A52  ECB1  F017         	call	_change_state_to_logs_22	;wreg free
 11950                           
 11951                           ;UI.c: 398: break;
 11952  001A56  D7E8               	goto	i2l4953
 11953  001A58                     i2l4969:
 11954                           
 11955                           ;UI.c: 400: change_state_to_logs_23();
 11956  001A58  EC10  F018         	call	_change_state_to_logs_23	;wreg free
 11957                           
 11958                           ;UI.c: 401: break;
 11959  001A5C  D7E5               	goto	i2l4953
 11960  001A5E                     i2l4971:
 11961                           
 11962                           ;UI.c: 403: change_state_to_logs_33();
 11963  001A5E  EC99  F017         	call	_change_state_to_logs_33	;wreg free
 11964                           
 11965                           ;UI.c: 404: break;
 11966  001A62  D7E2               	goto	i2l4953
 11967  001A64                     i2l4973:
 11968                           
 11969                           ;UI.c: 406: change_state_to_logs_34();
 11970  001A64  EC81  F017         	call	_change_state_to_logs_34	;wreg free
 11971                           
 11972                           ;UI.c: 408: }
 11973                           
 11974                           ;UI.c: 407: break;
 11975  001A68  D7DF               	goto	i2l4953
 11976  001A6A                     i2l4977:
 11977  001A6A  C0DB  F02C         	movff	_cur_state,??_inputHandler
 11978  001A6E  C0DC  F02D         	movff	_cur_state+1,??_inputHandler+1
 11979                           
 11980                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 11981                           ; Switch size 1, requested type "space"
 11982                           ; Number of cases is 2, Range of values is 3 to 4
 11983                           ; switch strategies available:
 11984                           ; Name         Instructions Cycles
 11985                           ; simple_byte            7     4 (average)
 11986                           ;	Chosen strategy is simple_byte
 11987  001A72  502D               	movf	??_inputHandler+1,w,c
 11988  001A74  0A03               	xorlw	3	; case 3
 11989  001A76  B4D8               	btfsc	status,2,c
 11990  001A78  D004               	goto	i2l6355
 11991  001A7A  0A07               	xorlw	7	; case 4
 11992  001A7C  B4D8               	btfsc	status,2,c
 11993  001A7E  D00F               	goto	i2l6357
 11994  001A80  D7D3               	goto	i2l4953
 11995  001A82                     i2l6355:
 11996                           
 11997                           ; Switch size 1, requested type "space"
 11998                           ; Number of cases is 4, Range of values is 243 to 255
 11999                           ; switch strategies available:
 12000                           ; Name         Instructions Cycles
 12001                           ; simple_byte           13     7 (average)
 12002                           ;	Chosen strategy is simple_byte
 12003  001A82  502C               	movf	??_inputHandler,w,c
 12004  001A84  0AF3               	xorlw	243	; case 243
 12005  001A86  B4D8               	btfsc	status,2,c
 12006  001A88  D7DE               	goto	i2l4963
 12007  001A8A  0A07               	xorlw	7	; case 244
 12008  001A8C  B4D8               	btfsc	status,2,c
 12009  001A8E  D7DE               	goto	i2l4965
 12010  001A90  0A0A               	xorlw	10	; case 254
 12011  001A92  B4D8               	btfsc	status,2,c
 12012  001A94  D7DE               	goto	i2l4967
 12013  001A96  0A01               	xorlw	1	; case 255
 12014  001A98  B4D8               	btfsc	status,2,c
 12015  001A9A  D7DE               	goto	i2l4969
 12016  001A9C  D7C5               	goto	i2l4953
 12017  001A9E                     i2l6357:
 12018                           
 12019                           ; Switch size 1, requested type "space"
 12020                           ; Number of cases is 2, Range of values is 9 to 10
 12021                           ; switch strategies available:
 12022                           ; Name         Instructions Cycles
 12023                           ; simple_byte            7     4 (average)
 12024                           ;	Chosen strategy is simple_byte
 12025  001A9E  502C               	movf	??_inputHandler,w,c
 12026  001AA0  0A09               	xorlw	9	; case 9
 12027  001AA2  B4D8               	btfsc	status,2,c
 12028  001AA4  D7DC               	goto	i2l4971
 12029  001AA6  0A03               	xorlw	3	; case 10
 12030  001AA8  B4D8               	btfsc	status,2,c
 12031  001AAA  D7DC               	goto	i2l4973
 12032  001AAC  D7BD               	goto	i2l4953
 12033  001AAE                     i2l4989:
 12034                           
 12035                           ;UI.c: 418: if(cur_state == 11){
 12036  001AAE  0E0B               	movlw	11
 12037  001AB0  0100               	movlb	0	; () banked
 12038  001AB2  19DB               	xorwf	_cur_state& (0+255),w,b
 12039  001AB4  0100               	movlb	0	; () banked
 12040  001AB6  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12041  001AB8  A4D8               	btfss	status,2,c
 12042  001ABA  D005               	goto	i2l4997
 12043                           
 12044                           ; BSR set to: 0
 12045                           ;UI.c: 419: return 0;
 12046  001ABC  0E00               	movlw	0
 12047  001ABE  6E2B               	movwf	?_inputHandler+1,c
 12048  001AC0  0E00               	movlw	0
 12049  001AC2  6E2A               	movwf	?_inputHandler,c
 12050                           
 12051                           ; BSR set to: 0
 12052  001AC4  0012               	return	
 12053  001AC6                     i2l4997:
 12054                           
 12055                           ; BSR set to: 0
 12056                           ;UI.c: 421: else{
 12057                           ;UI.c: 422: change_state_to_menu_11();
 12058  001AC6  EC69  F017         	call	_change_state_to_menu_11	;wreg free
 12059                           
 12060                           ;UI.c: 423: }
 12061                           ;UI.c: 424: return 0;
 12062  001ACA  0E00               	movlw	0
 12063  001ACC  6E2B               	movwf	?_inputHandler+1,c
 12064  001ACE  0E00               	movlw	0
 12065  001AD0  6E2A               	movwf	?_inputHandler,c
 12066  001AD2  0012               	return	
 12067  001AD4                     i2l5003:
 12068                           
 12069                           ;UI.c: 426: if(cur_state == 22 | cur_state == 12){
 12070  001AD4  0E16               	movlw	22
 12071  001AD6  0100               	movlb	0	; () banked
 12072  001AD8  19DB               	xorwf	_cur_state& (0+255),w,b
 12073  001ADA  0100               	movlb	0	; () banked
 12074  001ADC  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12075  001ADE  B4D8               	btfsc	status,2,c
 12076  001AE0  D007               	goto	i2l5007
 12077                           
 12078                           ; BSR set to: 0
 12079  001AE2  0E0C               	movlw	12
 12080  001AE4  0100               	movlb	0	; () banked
 12081  001AE6  19DB               	xorwf	_cur_state& (0+255),w,b
 12082  001AE8  0100               	movlb	0	; () banked
 12083  001AEA  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12084  001AEC  A4D8               	btfss	status,2,c
 12085  001AEE  D005               	goto	i2l5013
 12086  001AF0                     i2l5007:
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;UI.c: 427: return 0;
 12090  001AF0  0E00               	movlw	0
 12091  001AF2  6E2B               	movwf	?_inputHandler+1,c
 12092  001AF4  0E00               	movlw	0
 12093  001AF6  6E2A               	movwf	?_inputHandler,c
 12094                           
 12095                           ; BSR set to: 0
 12096  001AF8  0012               	return	
 12097  001AFA                     i2l5013:
 12098                           
 12099                           ; BSR set to: 0
 12100                           ;UI.c: 429: else if(cur_state == 23){
 12101  001AFA  0E17               	movlw	23
 12102  001AFC  0100               	movlb	0	; () banked
 12103  001AFE  19DB               	xorwf	_cur_state& (0+255),w,b
 12104  001B00  0100               	movlb	0	; () banked
 12105  001B02  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12106  001B04  A4D8               	btfss	status,2,c
 12107  001B06  D003               	goto	i2l5017
 12108                           
 12109                           ; BSR set to: 0
 12110                           ;UI.c: 430: change_state_to_menu_22();
 12111  001B08  EC21  F017         	call	i2_change_state_to_menu_22	;wreg free
 12112                           
 12113                           ;UI.c: 431: }
 12114  001B0C  D002               	goto	i2l5019
 12115  001B0E                     i2l5017:
 12116                           
 12117                           ;UI.c: 432: else{
 12118                           ;UI.c: 433: change_state_to_menu_12();
 12119  001B0E  EC39  F017         	call	i2_change_state_to_menu_12	;wreg free
 12120  001B12                     i2l5019:
 12121                           
 12122                           ;UI.c: 434: }
 12123                           ;UI.c: 435: return 0;
 12124  001B12  0E00               	movlw	0
 12125  001B14  6E2B               	movwf	?_inputHandler+1,c
 12126  001B16  0E00               	movlw	0
 12127  001B18  6E2A               	movwf	?_inputHandler,c
 12128  001B1A  0012               	return	
 12129  001B1C                     i2l5023:
 12130                           
 12131                           ;UI.c: 437: if(cur_state == 23){
 12132  001B1C  0E17               	movlw	23
 12133  001B1E  0100               	movlb	0	; () banked
 12134  001B20  19DB               	xorwf	_cur_state& (0+255),w,b
 12135  001B22  0100               	movlb	0	; () banked
 12136  001B24  11DC               	iorwf	(_cur_state+1)& (0+255),w,b
 12137  001B26  A4D8               	btfss	status,2,c
 12138  001B28  D005               	goto	i2l5031
 12139                           
 12140                           ; BSR set to: 0
 12141                           ;UI.c: 438: return 0;
 12142  001B2A  0E00               	movlw	0
 12143  001B2C  6E2B               	movwf	?_inputHandler+1,c
 12144  001B2E  0E00               	movlw	0
 12145  001B30  6E2A               	movwf	?_inputHandler,c
 12146                           
 12147                           ; BSR set to: 0
 12148  001B32  0012               	return	
 12149  001B34                     i2l5031:
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;UI.c: 440: else{
 12153                           ;UI.c: 441: change_state_to_menu_23();
 12154  001B34  EC51  F017         	call	_change_state_to_menu_23	;wreg free
 12155                           
 12156                           ;UI.c: 442: }
 12157                           ;UI.c: 443: return 0;
 12158  001B38  0E00               	movlw	0
 12159  001B3A  6E2B               	movwf	?_inputHandler+1,c
 12160  001B3C  0E00               	movlw	0
 12161  001B3E  6E2A               	movwf	?_inputHandler,c
 12162  001B40  0012               	return	
 12163  001B42                     i2l5037:
 12164                           
 12165                           ;UI.c: 446: up = 1;
 12166  001B42  0E00               	movlw	0
 12167  001B44  6E79               	movwf	_up+1,c
 12168  001B46  0E01               	movlw	1
 12169  001B48  6E78               	movwf	_up,c
 12170                           
 12171                           ;UI.c: 447: return 1;
 12172  001B4A  0E00               	movlw	0
 12173  001B4C  6E2B               	movwf	?_inputHandler+1,c
 12174  001B4E  0E01               	movlw	1
 12175  001B50  6E2A               	movwf	?_inputHandler,c
 12176  001B52  0012               	return	
 12177  001B54                     i2l5041:
 12178                           
 12179                           ;UI.c: 449: down = 1;
 12180  001B54  0E00               	movlw	0
 12181  001B56  6E71               	movwf	_down+1,c
 12182  001B58  0E01               	movlw	1
 12183  001B5A  6E70               	movwf	_down,c
 12184                           
 12185                           ;UI.c: 450: return 1;
 12186  001B5C  0E00               	movlw	0
 12187  001B5E  6E2B               	movwf	?_inputHandler+1,c
 12188  001B60  0E01               	movlw	1
 12189  001B62  6E2A               	movwf	?_inputHandler,c
 12190  001B64  0012               	return	
 12191  001B66                     i2l5045:
 12192                           
 12193                           ;UI.c: 452: enter = 1;
 12194  001B66  0E00               	movlw	0
 12195  001B68  6E73               	movwf	_enter+1,c
 12196  001B6A  0E01               	movlw	1
 12197  001B6C  6E72               	movwf	_enter,c
 12198                           
 12199                           ;UI.c: 453: return 1;
 12200  001B6E  0E00               	movlw	0
 12201  001B70  6E2B               	movwf	?_inputHandler+1,c
 12202  001B72  0E01               	movlw	1
 12203  001B74  6E2A               	movwf	?_inputHandler,c
 12204  001B76  0012               	return	
 12205  001B78                     i2l5049:
 12206                           
 12207                           ;UI.c: 455: back = 1;
 12208  001B78  0E00               	movlw	0
 12209  001B7A  6E65               	movwf	_back+1,c
 12210  001B7C  0E01               	movlw	1
 12211  001B7E  6E64               	movwf	_back,c
 12212                           
 12213                           ;UI.c: 456: return 1;
 12214  001B80  0E00               	movlw	0
 12215  001B82  6E2B               	movwf	?_inputHandler+1,c
 12216  001B84  0E01               	movlw	1
 12217  001B86  6E2A               	movwf	?_inputHandler,c
 12218  001B88  0012               	return	
 12219  001B8A                     i2l5053:
 12220                           
 12221                           ;UI.c: 459: return 1;
 12222  001B8A  0E00               	movlw	0
 12223  001B8C  6E2B               	movwf	?_inputHandler+1,c
 12224  001B8E  0E01               	movlw	1
 12225  001B90  6E2A               	movwf	?_inputHandler,c
 12226                           
 12227                           ;UI.c: 460: }
 12228  001B92  0012               	return	
 12229  001B94                     i2l5059:
 12230  001B94  507E               	movf	_input,w,c	;volatile
 12231                           
 12232                           ; Switch size 1, requested type "space"
 12233                           ; Number of cases is 7, Range of values is 49 to 68
 12234                           ; switch strategies available:
 12235                           ; Name         Instructions Cycles
 12236                           ; simple_byte           22    12 (average)
 12237                           ;	Chosen strategy is simple_byte
 12238  001B96  0A31               	xorlw	49	; case 49
 12239  001B98  B4D8               	btfsc	status,2,c
 12240  001B9A  D789               	goto	i2l4989
 12241  001B9C  0A03               	xorlw	3	; case 50
 12242  001B9E  B4D8               	btfsc	status,2,c
 12243  001BA0  D799               	goto	i2l5003
 12244  001BA2  0A01               	xorlw	1	; case 51
 12245  001BA4  B4D8               	btfsc	status,2,c
 12246  001BA6  D7BA               	goto	i2l5023
 12247  001BA8  0A72               	xorlw	114	; case 65
 12248  001BAA  B4D8               	btfsc	status,2,c
 12249  001BAC  D7CA               	goto	i2l5037
 12250  001BAE  0A03               	xorlw	3	; case 66
 12251  001BB0  B4D8               	btfsc	status,2,c
 12252  001BB2  D7D0               	goto	i2l5041
 12253  001BB4  0A01               	xorlw	1	; case 67
 12254  001BB6  B4D8               	btfsc	status,2,c
 12255  001BB8  D7D6               	goto	i2l5045
 12256  001BBA  0A07               	xorlw	7	; case 68
 12257  001BBC  B4D8               	btfsc	status,2,c
 12258  001BBE  D7DC               	goto	i2l5049
 12259  001BC0  D7E4               	goto	i2l5053
 12260  001BC2                     __end_of_inputHandler:
 12261                           	opt stack 0
 12262                           pclatu	equ	0xFFB
 12263                           pclath	equ	0xFFA
 12264                           tblptru	equ	0xFF8
 12265                           tblptrh	equ	0xFF7
 12266                           tblptrl	equ	0xFF6
 12267                           tablat	equ	0xFF5
 12268                           prodh	equ	0xFF4
 12269                           prodl	equ	0xFF3
 12270                           intcon	equ	0xFF2
 12271                           intcon2	equ	0xFF1
 12272                           intcon3	equ	0xFF0
 12273                           indf0	equ	0xFEF
 12274                           postinc0	equ	0xFEE
 12275                           fsr0h	equ	0xFEA
 12276                           fsr0l	equ	0xFE9
 12277                           wreg	equ	0xFE8
 12278                           postdec1	equ	0xFE5
 12279                           fsr1h	equ	0xFE2
 12280                           fsr1l	equ	0xFE1
 12281                           indf2	equ	0xFDF
 12282                           postinc2	equ	0xFDE
 12283                           postdec2	equ	0xFDD
 12284                           fsr2h	equ	0xFDA
 12285                           fsr2l	equ	0xFD9
 12286                           status	equ	0xFD8
 12287                           
 12288 ;; *************** function i2_change_state_to_menu_22 *****************
 12289 ;; Defined at:
 12290 ;;		line 494 in file "UI.c"
 12291 ;; Parameters:    Size  Location     Type
 12292 ;;		None
 12293 ;; Auto vars:     Size  Location     Type
 12294 ;;		None
 12295 ;; Return value:  Size  Location     Type
 12296 ;;                  1    wreg      void 
 12297 ;; Registers used:
 12298 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12299 ;; Tracked objects:
 12300 ;;		On entry : 0/0
 12301 ;;		On exit  : 0/0
 12302 ;;		Unchanged: 0/0
 12303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12308 ;;Total ram usage:        0 bytes
 12309 ;; Hardware stack levels used:    1
 12310 ;; Hardware stack levels required when called:    3
 12311 ;; This function calls:
 12312 ;;		i2_lcdInst
 12313 ;;		i2_printf
 12314 ;; This function is called by:
 12315 ;;		_updateMenu
 12316 ;;		_inputHandler
 12317 ;; This function uses a non-reentrant model
 12318 ;;
 12319                           
 12320                           	psect	text51
 12321  002E42                     __ptext51:
 12322                           	opt stack 0
 12323  002E42                     i2_change_state_to_menu_22:
 12324                           	opt stack 19
 12325                           
 12326                           ;UI.c: 495: cur_state = 22;
 12327                           
 12328                           ;incstack = 0
 12329  002E42  0E00               	movlw	0
 12330  002E44  0100               	movlb	0	; () banked
 12331  002E46  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12332  002E48  0E16               	movlw	22
 12333  002E4A  6FDB               	movwf	_cur_state& (0+255),b
 12334                           
 12335                           ; BSR set to: 0
 12336                           ;UI.c: 497: lcdInst(0b10000000);;
 12337  002E4C  0E80               	movlw	128
 12338  002E4E  EC4B  F019         	call	i2_lcdInst
 12339                           
 12340                           ;UI.c: 498: printf("2. SORT        <");
 12341  002E52  0E24               	movlw	low STR_34
 12342  002E54  6E0D               	movwf	i2printf@f,c
 12343  002E56  0EFF               	movlw	high STR_34
 12344  002E58  6E0E               	movwf	i2printf@f+1,c
 12345  002E5A  EC5E  F006         	call	i2_printf	;wreg free
 12346                           
 12347                           ;UI.c: 499: lcdInst(0b11000000);;
 12348  002E5E  0EC0               	movlw	192
 12349  002E60  EC4B  F019         	call	i2_lcdInst
 12350                           
 12351                           ;UI.c: 500: printf("3. LOGS         ");
 12352  002E64  0E69               	movlw	low STR_36
 12353  002E66  6E0D               	movwf	i2printf@f,c
 12354  002E68  0EFE               	movlw	high STR_36
 12355  002E6A  6E0E               	movwf	i2printf@f+1,c
 12356  002E6C  EC5E  F006         	call	i2_printf	;wreg free
 12357  002E70  0012               	return		;funcret
 12358  002E72                     __end_ofi2_change_state_to_menu_22:
 12359                           	opt stack 0
 12360                           pclatu	equ	0xFFB
 12361                           pclath	equ	0xFFA
 12362                           tblptru	equ	0xFF8
 12363                           tblptrh	equ	0xFF7
 12364                           tblptrl	equ	0xFF6
 12365                           tablat	equ	0xFF5
 12366                           prodh	equ	0xFF4
 12367                           prodl	equ	0xFF3
 12368                           intcon	equ	0xFF2
 12369                           intcon2	equ	0xFF1
 12370                           intcon3	equ	0xFF0
 12371                           indf0	equ	0xFEF
 12372                           postinc0	equ	0xFEE
 12373                           fsr0h	equ	0xFEA
 12374                           fsr0l	equ	0xFE9
 12375                           wreg	equ	0xFE8
 12376                           postdec1	equ	0xFE5
 12377                           fsr1h	equ	0xFE2
 12378                           fsr1l	equ	0xFE1
 12379                           indf2	equ	0xFDF
 12380                           postinc2	equ	0xFDE
 12381                           postdec2	equ	0xFDD
 12382                           fsr2h	equ	0xFDA
 12383                           fsr2l	equ	0xFD9
 12384                           status	equ	0xFD8
 12385                           
 12386 ;; *************** function i2_change_state_to_menu_12 *****************
 12387 ;; Defined at:
 12388 ;;		line 486 in file "UI.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;		None
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;		None
 12393 ;; Return value:  Size  Location     Type
 12394 ;;                  1    wreg      void 
 12395 ;; Registers used:
 12396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12397 ;; Tracked objects:
 12398 ;;		On entry : 0/0
 12399 ;;		On exit  : 0/0
 12400 ;;		Unchanged: 0/0
 12401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12406 ;;Total ram usage:        0 bytes
 12407 ;; Hardware stack levels used:    1
 12408 ;; Hardware stack levels required when called:    3
 12409 ;; This function calls:
 12410 ;;		i2_lcdInst
 12411 ;;		i2_printf
 12412 ;; This function is called by:
 12413 ;;		_updateMenu
 12414 ;;		_inputHandler
 12415 ;; This function uses a non-reentrant model
 12416 ;;
 12417                           
 12418                           	psect	text52
 12419  002E72                     __ptext52:
 12420                           	opt stack 0
 12421  002E72                     i2_change_state_to_menu_12:
 12422                           	opt stack 19
 12423                           
 12424                           ;UI.c: 487: cur_state = 12;
 12425                           
 12426                           ;incstack = 0
 12427  002E72  0E00               	movlw	0
 12428  002E74  0100               	movlb	0	; () banked
 12429  002E76  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12430  002E78  0E0C               	movlw	12
 12431  002E7A  6FDB               	movwf	_cur_state& (0+255),b
 12432                           
 12433                           ; BSR set to: 0
 12434                           ;UI.c: 489: lcdInst(0b10000000);;
 12435  002E7C  0E80               	movlw	128
 12436  002E7E  EC4B  F019         	call	i2_lcdInst
 12437                           
 12438                           ;UI.c: 490: printf("1. DATE/TIME    ");
 12439  002E82  0E8B               	movlw	low STR_33
 12440  002E84  6E0D               	movwf	i2printf@f,c
 12441  002E86  0EFE               	movlw	high STR_33
 12442  002E88  6E0E               	movwf	i2printf@f+1,c
 12443  002E8A  EC5E  F006         	call	i2_printf	;wreg free
 12444                           
 12445                           ;UI.c: 491: lcdInst(0b11000000);;
 12446  002E8E  0EC0               	movlw	192
 12447  002E90  EC4B  F019         	call	i2_lcdInst
 12448                           
 12449                           ;UI.c: 492: printf("2. SORT        <");
 12450  002E94  0E24               	movlw	low STR_34
 12451  002E96  6E0D               	movwf	i2printf@f,c
 12452  002E98  0EFF               	movlw	high STR_34
 12453  002E9A  6E0E               	movwf	i2printf@f+1,c
 12454  002E9C  EC5E  F006         	call	i2_printf	;wreg free
 12455  002EA0  0012               	return		;funcret
 12456  002EA2                     __end_ofi2_change_state_to_menu_12:
 12457                           	opt stack 0
 12458                           pclatu	equ	0xFFB
 12459                           pclath	equ	0xFFA
 12460                           tblptru	equ	0xFF8
 12461                           tblptrh	equ	0xFF7
 12462                           tblptrl	equ	0xFF6
 12463                           tablat	equ	0xFF5
 12464                           prodh	equ	0xFF4
 12465                           prodl	equ	0xFF3
 12466                           intcon	equ	0xFF2
 12467                           intcon2	equ	0xFF1
 12468                           intcon3	equ	0xFF0
 12469                           indf0	equ	0xFEF
 12470                           postinc0	equ	0xFEE
 12471                           fsr0h	equ	0xFEA
 12472                           fsr0l	equ	0xFE9
 12473                           wreg	equ	0xFE8
 12474                           postdec1	equ	0xFE5
 12475                           fsr1h	equ	0xFE2
 12476                           fsr1l	equ	0xFE1
 12477                           indf2	equ	0xFDF
 12478                           postinc2	equ	0xFDE
 12479                           postdec2	equ	0xFDD
 12480                           fsr2h	equ	0xFDA
 12481                           fsr2l	equ	0xFD9
 12482                           status	equ	0xFD8
 12483                           
 12484 ;; *************** function _change_state_to_menu_23 *****************
 12485 ;; Defined at:
 12486 ;;		line 502 in file "UI.c"
 12487 ;; Parameters:    Size  Location     Type
 12488 ;;		None
 12489 ;; Auto vars:     Size  Location     Type
 12490 ;;		None
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  1    wreg      void 
 12493 ;; Registers used:
 12494 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12504 ;;Total ram usage:        0 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; Hardware stack levels required when called:    3
 12507 ;; This function calls:
 12508 ;;		i2_lcdInst
 12509 ;;		i2_printf
 12510 ;; This function is called by:
 12511 ;;		_updateMenu
 12512 ;;		_inputHandler
 12513 ;; This function uses a non-reentrant model
 12514 ;;
 12515                           
 12516                           	psect	text53
 12517  002EA2                     __ptext53:
 12518                           	opt stack 0
 12519  002EA2                     _change_state_to_menu_23:
 12520                           	opt stack 18
 12521                           
 12522                           ;UI.c: 503: cur_state = 23;
 12523                           
 12524                           ;incstack = 0
 12525  002EA2  0E00               	movlw	0
 12526  002EA4  0100               	movlb	0	; () banked
 12527  002EA6  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12528  002EA8  0E17               	movlw	23
 12529  002EAA  6FDB               	movwf	_cur_state& (0+255),b
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;UI.c: 505: lcdInst(0b10000000);;
 12533  002EAC  0E80               	movlw	128
 12534  002EAE  EC4B  F019         	call	i2_lcdInst
 12535                           
 12536                           ;UI.c: 506: printf("2. SORT         ");
 12537  002EB2  0E7A               	movlw	low STR_32
 12538  002EB4  6E0D               	movwf	i2printf@f,c
 12539  002EB6  0EFE               	movlw	high STR_32
 12540  002EB8  6E0E               	movwf	i2printf@f+1,c
 12541  002EBA  EC5E  F006         	call	i2_printf	;wreg free
 12542                           
 12543                           ;UI.c: 507: lcdInst(0b11000000);;
 12544  002EBE  0EC0               	movlw	192
 12545  002EC0  EC4B  F019         	call	i2_lcdInst
 12546                           
 12547                           ;UI.c: 508: printf("3. LOGS        <");
 12548  002EC4  0E13               	movlw	low STR_38
 12549  002EC6  6E0D               	movwf	i2printf@f,c
 12550  002EC8  0EFF               	movlw	high STR_38
 12551  002ECA  6E0E               	movwf	i2printf@f+1,c
 12552  002ECC  EC5E  F006         	call	i2_printf	;wreg free
 12553  002ED0  0012               	return		;funcret
 12554  002ED2                     __end_of_change_state_to_menu_23:
 12555                           	opt stack 0
 12556                           pclatu	equ	0xFFB
 12557                           pclath	equ	0xFFA
 12558                           tblptru	equ	0xFF8
 12559                           tblptrh	equ	0xFF7
 12560                           tblptrl	equ	0xFF6
 12561                           tablat	equ	0xFF5
 12562                           prodh	equ	0xFF4
 12563                           prodl	equ	0xFF3
 12564                           intcon	equ	0xFF2
 12565                           intcon2	equ	0xFF1
 12566                           intcon3	equ	0xFF0
 12567                           indf0	equ	0xFEF
 12568                           postinc0	equ	0xFEE
 12569                           fsr0h	equ	0xFEA
 12570                           fsr0l	equ	0xFE9
 12571                           wreg	equ	0xFE8
 12572                           postdec1	equ	0xFE5
 12573                           fsr1h	equ	0xFE2
 12574                           fsr1l	equ	0xFE1
 12575                           indf2	equ	0xFDF
 12576                           postinc2	equ	0xFDE
 12577                           postdec2	equ	0xFDD
 12578                           fsr2h	equ	0xFDA
 12579                           fsr2l	equ	0xFD9
 12580                           status	equ	0xFD8
 12581                           
 12582 ;; *************** function _change_state_to_menu_11 *****************
 12583 ;; Defined at:
 12584 ;;		line 478 in file "UI.c"
 12585 ;; Parameters:    Size  Location     Type
 12586 ;;		None
 12587 ;; Auto vars:     Size  Location     Type
 12588 ;;		None
 12589 ;; Return value:  Size  Location     Type
 12590 ;;                  1    wreg      void 
 12591 ;; Registers used:
 12592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12593 ;; Tracked objects:
 12594 ;;		On entry : 0/0
 12595 ;;		On exit  : 0/0
 12596 ;;		Unchanged: 0/0
 12597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12602 ;;Total ram usage:        0 bytes
 12603 ;; Hardware stack levels used:    1
 12604 ;; Hardware stack levels required when called:    3
 12605 ;; This function calls:
 12606 ;;		i2_lcdInst
 12607 ;;		i2_printf
 12608 ;; This function is called by:
 12609 ;;		_updateMenu
 12610 ;;		_inputHandler
 12611 ;; This function uses a non-reentrant model
 12612 ;;
 12613                           
 12614                           	psect	text54
 12615  002ED2                     __ptext54:
 12616                           	opt stack 0
 12617  002ED2                     _change_state_to_menu_11:
 12618                           	opt stack 18
 12619                           
 12620                           ;UI.c: 479: cur_state = 11;
 12621                           
 12622                           ;incstack = 0
 12623  002ED2  0E00               	movlw	0
 12624  002ED4  0100               	movlb	0	; () banked
 12625  002ED6  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12626  002ED8  0E0B               	movlw	11
 12627  002EDA  6FDB               	movwf	_cur_state& (0+255),b
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;UI.c: 481: lcdInst(0b10000000);;
 12631  002EDC  0E80               	movlw	128
 12632  002EDE  EC4B  F019         	call	i2_lcdInst
 12633                           
 12634                           ;UI.c: 482: printf("1. DATE/TIME   <");
 12635  002EE2  0E35               	movlw	low STR_31
 12636  002EE4  6E0D               	movwf	i2printf@f,c
 12637  002EE6  0EFF               	movlw	high STR_31
 12638  002EE8  6E0E               	movwf	i2printf@f+1,c
 12639  002EEA  EC5E  F006         	call	i2_printf	;wreg free
 12640                           
 12641                           ;UI.c: 483: lcdInst(0b11000000);;
 12642  002EEE  0EC0               	movlw	192
 12643  002EF0  EC4B  F019         	call	i2_lcdInst
 12644                           
 12645                           ;UI.c: 484: printf("2. SORT         ");
 12646  002EF4  0E7A               	movlw	low STR_32
 12647  002EF6  6E0D               	movwf	i2printf@f,c
 12648  002EF8  0EFE               	movlw	high STR_32
 12649  002EFA  6E0E               	movwf	i2printf@f+1,c
 12650  002EFC  EC5E  F006         	call	i2_printf	;wreg free
 12651  002F00  0012               	return		;funcret
 12652  002F02                     __end_of_change_state_to_menu_11:
 12653                           	opt stack 0
 12654                           pclatu	equ	0xFFB
 12655                           pclath	equ	0xFFA
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           intcon2	equ	0xFF1
 12664                           intcon3	equ	0xFF0
 12665                           indf0	equ	0xFEF
 12666                           postinc0	equ	0xFEE
 12667                           fsr0h	equ	0xFEA
 12668                           fsr0l	equ	0xFE9
 12669                           wreg	equ	0xFE8
 12670                           postdec1	equ	0xFE5
 12671                           fsr1h	equ	0xFE2
 12672                           fsr1l	equ	0xFE1
 12673                           indf2	equ	0xFDF
 12674                           postinc2	equ	0xFDE
 12675                           postdec2	equ	0xFDD
 12676                           fsr2h	equ	0xFDA
 12677                           fsr2l	equ	0xFD9
 12678                           status	equ	0xFD8
 12679                           
 12680 ;; *************** function _change_state_to_logs_34 *****************
 12681 ;; Defined at:
 12682 ;;		line 545 in file "UI.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;		None
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;		None
 12687 ;; Return value:  Size  Location     Type
 12688 ;;                  1    wreg      void 
 12689 ;; Registers used:
 12690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12691 ;; Tracked objects:
 12692 ;;		On entry : 0/0
 12693 ;;		On exit  : 0/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12700 ;;Total ram usage:        0 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; Hardware stack levels required when called:    3
 12703 ;; This function calls:
 12704 ;;		i2_lcdInst
 12705 ;;		i2_printf
 12706 ;; This function is called by:
 12707 ;;		_updateMenu
 12708 ;;		_inputHandler
 12709 ;; This function uses a non-reentrant model
 12710 ;;
 12711                           
 12712                           	psect	text55
 12713  002F02                     __ptext55:
 12714                           	opt stack 0
 12715  002F02                     _change_state_to_logs_34:
 12716                           	opt stack 18
 12717                           
 12718                           ;UI.c: 546: cur_state = 1034;
 12719                           
 12720                           ;incstack = 0
 12721  002F02  0E04               	movlw	4
 12722  002F04  0100               	movlb	0	; () banked
 12723  002F06  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12724  002F08  0E0A               	movlw	10
 12725  002F0A  6FDB               	movwf	_cur_state& (0+255),b
 12726                           
 12727                           ; BSR set to: 0
 12728                           ;UI.c: 547: lcdInst(0b10000000);;
 12729  002F0C  0E80               	movlw	128
 12730  002F0E  EC4B  F019         	call	i2_lcdInst
 12731                           
 12732                           ;UI.c: 548: printf("LOG 3           ");
 12733  002F12  0E47               	movlw	low STR_44
 12734  002F14  6E0D               	movwf	i2printf@f,c
 12735  002F16  0EFE               	movlw	high STR_44
 12736  002F18  6E0E               	movwf	i2printf@f+1,c
 12737  002F1A  EC5E  F006         	call	i2_printf	;wreg free
 12738                           
 12739                           ;UI.c: 549: lcdInst(0b11000000);;
 12740  002F1E  0EC0               	movlw	192
 12741  002F20  EC4B  F019         	call	i2_lcdInst
 12742                           
 12743                           ;UI.c: 550: printf("LOG 4          <");
 12744  002F24  0E02               	movlw	low STR_50
 12745  002F26  6E0D               	movwf	i2printf@f,c
 12746  002F28  0EFF               	movlw	high STR_50
 12747  002F2A  6E0E               	movwf	i2printf@f+1,c
 12748  002F2C  EC5E  F006         	call	i2_printf	;wreg free
 12749  002F30  0012               	return		;funcret
 12750  002F32                     __end_of_change_state_to_logs_34:
 12751                           	opt stack 0
 12752                           pclatu	equ	0xFFB
 12753                           pclath	equ	0xFFA
 12754                           tblptru	equ	0xFF8
 12755                           tblptrh	equ	0xFF7
 12756                           tblptrl	equ	0xFF6
 12757                           tablat	equ	0xFF5
 12758                           prodh	equ	0xFF4
 12759                           prodl	equ	0xFF3
 12760                           intcon	equ	0xFF2
 12761                           intcon2	equ	0xFF1
 12762                           intcon3	equ	0xFF0
 12763                           indf0	equ	0xFEF
 12764                           postinc0	equ	0xFEE
 12765                           fsr0h	equ	0xFEA
 12766                           fsr0l	equ	0xFE9
 12767                           wreg	equ	0xFE8
 12768                           postdec1	equ	0xFE5
 12769                           fsr1h	equ	0xFE2
 12770                           fsr1l	equ	0xFE1
 12771                           indf2	equ	0xFDF
 12772                           postinc2	equ	0xFDE
 12773                           postdec2	equ	0xFDD
 12774                           fsr2h	equ	0xFDA
 12775                           fsr2l	equ	0xFD9
 12776                           status	equ	0xFD8
 12777                           
 12778 ;; *************** function _change_state_to_logs_33 *****************
 12779 ;; Defined at:
 12780 ;;		line 538 in file "UI.c"
 12781 ;; Parameters:    Size  Location     Type
 12782 ;;		None
 12783 ;; Auto vars:     Size  Location     Type
 12784 ;;		None
 12785 ;; Return value:  Size  Location     Type
 12786 ;;                  1    wreg      void 
 12787 ;; Registers used:
 12788 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12789 ;; Tracked objects:
 12790 ;;		On entry : 0/0
 12791 ;;		On exit  : 0/0
 12792 ;;		Unchanged: 0/0
 12793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12798 ;;Total ram usage:        0 bytes
 12799 ;; Hardware stack levels used:    1
 12800 ;; Hardware stack levels required when called:    3
 12801 ;; This function calls:
 12802 ;;		i2_lcdInst
 12803 ;;		i2_printf
 12804 ;; This function is called by:
 12805 ;;		_updateMenu
 12806 ;;		_inputHandler
 12807 ;; This function uses a non-reentrant model
 12808 ;;
 12809                           
 12810                           	psect	text56
 12811  002F32                     __ptext56:
 12812                           	opt stack 0
 12813  002F32                     _change_state_to_logs_33:
 12814                           	opt stack 18
 12815                           
 12816                           ;UI.c: 539: cur_state = 1033;
 12817                           
 12818                           ;incstack = 0
 12819  002F32  0E04               	movlw	4
 12820  002F34  0100               	movlb	0	; () banked
 12821  002F36  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12822  002F38  0E09               	movlw	9
 12823  002F3A  6FDB               	movwf	_cur_state& (0+255),b
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;UI.c: 540: lcdInst(0b10000000);;
 12827  002F3C  0E80               	movlw	128
 12828  002F3E  EC4B  F019         	call	i2_lcdInst
 12829                           
 12830                           ;UI.c: 541: printf("LOG 3          <");
 12831  002F42  0EF1               	movlw	low STR_46
 12832  002F44  6E0D               	movwf	i2printf@f,c
 12833  002F46  0EFE               	movlw	high STR_46
 12834  002F48  6E0E               	movwf	i2printf@f+1,c
 12835  002F4A  EC5E  F006         	call	i2_printf	;wreg free
 12836                           
 12837                           ;UI.c: 542: lcdInst(0b11000000);;
 12838  002F4E  0EC0               	movlw	192
 12839  002F50  EC4B  F019         	call	i2_lcdInst
 12840                           
 12841                           ;UI.c: 543: printf("LOG 4           ");
 12842  002F54  0E58               	movlw	low STR_48
 12843  002F56  6E0D               	movwf	i2printf@f,c
 12844  002F58  0EFE               	movlw	high STR_48
 12845  002F5A  6E0E               	movwf	i2printf@f+1,c
 12846  002F5C  EC5E  F006         	call	i2_printf	;wreg free
 12847  002F60  0012               	return		;funcret
 12848  002F62                     __end_of_change_state_to_logs_33:
 12849                           	opt stack 0
 12850                           pclatu	equ	0xFFB
 12851                           pclath	equ	0xFFA
 12852                           tblptru	equ	0xFF8
 12853                           tblptrh	equ	0xFF7
 12854                           tblptrl	equ	0xFF6
 12855                           tablat	equ	0xFF5
 12856                           prodh	equ	0xFF4
 12857                           prodl	equ	0xFF3
 12858                           intcon	equ	0xFF2
 12859                           intcon2	equ	0xFF1
 12860                           intcon3	equ	0xFF0
 12861                           indf0	equ	0xFEF
 12862                           postinc0	equ	0xFEE
 12863                           fsr0h	equ	0xFEA
 12864                           fsr0l	equ	0xFE9
 12865                           wreg	equ	0xFE8
 12866                           postdec1	equ	0xFE5
 12867                           fsr1h	equ	0xFE2
 12868                           fsr1l	equ	0xFE1
 12869                           indf2	equ	0xFDF
 12870                           postinc2	equ	0xFDE
 12871                           postdec2	equ	0xFDD
 12872                           fsr2h	equ	0xFDA
 12873                           fsr2l	equ	0xFD9
 12874                           status	equ	0xFD8
 12875                           
 12876 ;; *************** function _change_state_to_logs_23 *****************
 12877 ;; Defined at:
 12878 ;;		line 531 in file "UI.c"
 12879 ;; Parameters:    Size  Location     Type
 12880 ;;		None
 12881 ;; Auto vars:     Size  Location     Type
 12882 ;;		None
 12883 ;; Return value:  Size  Location     Type
 12884 ;;                  1    wreg      void 
 12885 ;; Registers used:
 12886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12887 ;; Tracked objects:
 12888 ;;		On entry : 0/0
 12889 ;;		On exit  : 0/0
 12890 ;;		Unchanged: 0/0
 12891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12896 ;;Total ram usage:        0 bytes
 12897 ;; Hardware stack levels used:    1
 12898 ;; Hardware stack levels required when called:    3
 12899 ;; This function calls:
 12900 ;;		i2_lcdInst
 12901 ;;		i2_printf
 12902 ;; This function is called by:
 12903 ;;		_updateMenu
 12904 ;;		_inputHandler
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           	psect	text57
 12909  003020                     __ptext57:
 12910                           	opt stack 0
 12911  003020                     _change_state_to_logs_23:
 12912                           	opt stack 18
 12913                           
 12914                           ;UI.c: 532: cur_state = 1023;
 12915                           
 12916                           ;incstack = 0
 12917  003020  0E03               	movlw	3
 12918  003022  0100               	movlb	0	; () banked
 12919  003024  6FDC               	movwf	(_cur_state+1)& (0+255),b
 12920  003026  69DB               	setf	_cur_state& (0+255),b
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;UI.c: 533: lcdInst(0b10000000);;
 12924  003028  0E80               	movlw	128
 12925  00302A  EC4B  F019         	call	i2_lcdInst
 12926                           
 12927                           ;UI.c: 534: printf("LOG 2           ");
 12928  00302E  0E36               	movlw	low STR_40
 12929  003030  6E0D               	movwf	i2printf@f,c
 12930  003032  0EFE               	movlw	high STR_40
 12931  003034  6E0E               	movwf	i2printf@f+1,c
 12932  003036  EC5E  F006         	call	i2_printf	;wreg free
 12933                           
 12934                           ;UI.c: 535: lcdInst(0b11000000);;
 12935  00303A  0EC0               	movlw	192
 12936  00303C  EC4B  F019         	call	i2_lcdInst
 12937                           
 12938                           ;UI.c: 536: printf("LOG 3          <");
 12939  003040  0EF1               	movlw	low STR_46
 12940  003042  6E0D               	movwf	i2printf@f,c
 12941  003044  0EFE               	movlw	high STR_46
 12942  003046  6E0E               	movwf	i2printf@f+1,c
 12943  003048  EC5E  F006         	call	i2_printf	;wreg free
 12944  00304C  0012               	return		;funcret
 12945  00304E                     __end_of_change_state_to_logs_23:
 12946                           	opt stack 0
 12947                           pclatu	equ	0xFFB
 12948                           pclath	equ	0xFFA
 12949                           tblptru	equ	0xFF8
 12950                           tblptrh	equ	0xFF7
 12951                           tblptrl	equ	0xFF6
 12952                           tablat	equ	0xFF5
 12953                           prodh	equ	0xFF4
 12954                           prodl	equ	0xFF3
 12955                           intcon	equ	0xFF2
 12956                           intcon2	equ	0xFF1
 12957                           intcon3	equ	0xFF0
 12958                           indf0	equ	0xFEF
 12959                           postinc0	equ	0xFEE
 12960                           fsr0h	equ	0xFEA
 12961                           fsr0l	equ	0xFE9
 12962                           wreg	equ	0xFE8
 12963                           postdec1	equ	0xFE5
 12964                           fsr1h	equ	0xFE2
 12965                           fsr1l	equ	0xFE1
 12966                           indf2	equ	0xFDF
 12967                           postinc2	equ	0xFDE
 12968                           postdec2	equ	0xFDD
 12969                           fsr2h	equ	0xFDA
 12970                           fsr2l	equ	0xFD9
 12971                           status	equ	0xFD8
 12972                           
 12973 ;; *************** function _change_state_to_logs_22 *****************
 12974 ;; Defined at:
 12975 ;;		line 524 in file "UI.c"
 12976 ;; Parameters:    Size  Location     Type
 12977 ;;		None
 12978 ;; Auto vars:     Size  Location     Type
 12979 ;;		None
 12980 ;; Return value:  Size  Location     Type
 12981 ;;                  1    wreg      void 
 12982 ;; Registers used:
 12983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12984 ;; Tracked objects:
 12985 ;;		On entry : 0/0
 12986 ;;		On exit  : 0/0
 12987 ;;		Unchanged: 0/0
 12988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12993 ;;Total ram usage:        0 bytes
 12994 ;; Hardware stack levels used:    1
 12995 ;; Hardware stack levels required when called:    3
 12996 ;; This function calls:
 12997 ;;		i2_lcdInst
 12998 ;;		i2_printf
 12999 ;; This function is called by:
 13000 ;;		_updateMenu
 13001 ;;		_inputHandler
 13002 ;; This function uses a non-reentrant model
 13003 ;;
 13004                           
 13005                           	psect	text58
 13006  002F62                     __ptext58:
 13007                           	opt stack 0
 13008  002F62                     _change_state_to_logs_22:
 13009                           	opt stack 18
 13010                           
 13011                           ;UI.c: 525: cur_state = 1022;
 13012                           
 13013                           ;incstack = 0
 13014  002F62  0E03               	movlw	3
 13015  002F64  0100               	movlb	0	; () banked
 13016  002F66  6FDC               	movwf	(_cur_state+1)& (0+255),b
 13017  002F68  0EFE               	movlw	254
 13018  002F6A  6FDB               	movwf	_cur_state& (0+255),b
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;UI.c: 526: lcdInst(0b10000000);;
 13022  002F6C  0E80               	movlw	128
 13023  002F6E  EC4B  F019         	call	i2_lcdInst
 13024                           
 13025                           ;UI.c: 527: printf("LOG 2          <");
 13026  002F72  0EE0               	movlw	low STR_42
 13027  002F74  6E0D               	movwf	i2printf@f,c
 13028  002F76  0EFE               	movlw	high STR_42
 13029  002F78  6E0E               	movwf	i2printf@f+1,c
 13030  002F7A  EC5E  F006         	call	i2_printf	;wreg free
 13031                           
 13032                           ;UI.c: 528: lcdInst(0b11000000);;
 13033  002F7E  0EC0               	movlw	192
 13034  002F80  EC4B  F019         	call	i2_lcdInst
 13035                           
 13036                           ;UI.c: 529: printf("LOG 3           ");
 13037  002F84  0E47               	movlw	low STR_44
 13038  002F86  6E0D               	movwf	i2printf@f,c
 13039  002F88  0EFE               	movlw	high STR_44
 13040  002F8A  6E0E               	movwf	i2printf@f+1,c
 13041  002F8C  EC5E  F006         	call	i2_printf	;wreg free
 13042  002F90  0012               	return		;funcret
 13043  002F92                     __end_of_change_state_to_logs_22:
 13044                           	opt stack 0
 13045                           pclatu	equ	0xFFB
 13046                           pclath	equ	0xFFA
 13047                           tblptru	equ	0xFF8
 13048                           tblptrh	equ	0xFF7
 13049                           tblptrl	equ	0xFF6
 13050                           tablat	equ	0xFF5
 13051                           prodh	equ	0xFF4
 13052                           prodl	equ	0xFF3
 13053                           intcon	equ	0xFF2
 13054                           intcon2	equ	0xFF1
 13055                           intcon3	equ	0xFF0
 13056                           indf0	equ	0xFEF
 13057                           postinc0	equ	0xFEE
 13058                           fsr0h	equ	0xFEA
 13059                           fsr0l	equ	0xFE9
 13060                           wreg	equ	0xFE8
 13061                           postdec1	equ	0xFE5
 13062                           fsr1h	equ	0xFE2
 13063                           fsr1l	equ	0xFE1
 13064                           indf2	equ	0xFDF
 13065                           postinc2	equ	0xFDE
 13066                           postdec2	equ	0xFDD
 13067                           fsr2h	equ	0xFDA
 13068                           fsr2l	equ	0xFD9
 13069                           status	equ	0xFD8
 13070                           
 13071 ;; *************** function _change_state_to_logs_12 *****************
 13072 ;; Defined at:
 13073 ;;		line 517 in file "UI.c"
 13074 ;; Parameters:    Size  Location     Type
 13075 ;;		None
 13076 ;; Auto vars:     Size  Location     Type
 13077 ;;		None
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  1    wreg      void 
 13080 ;; Registers used:
 13081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13091 ;;Total ram usage:        0 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; Hardware stack levels required when called:    3
 13094 ;; This function calls:
 13095 ;;		i2_lcdInst
 13096 ;;		i2_printf
 13097 ;; This function is called by:
 13098 ;;		_updateMenu
 13099 ;;		_inputHandler
 13100 ;; This function uses a non-reentrant model
 13101 ;;
 13102                           
 13103                           	psect	text59
 13104  002F92                     __ptext59:
 13105                           	opt stack 0
 13106  002F92                     _change_state_to_logs_12:
 13107                           	opt stack 18
 13108                           
 13109                           ;UI.c: 518: cur_state = 1012;
 13110                           
 13111                           ;incstack = 0
 13112  002F92  0E03               	movlw	3
 13113  002F94  0100               	movlb	0	; () banked
 13114  002F96  6FDC               	movwf	(_cur_state+1)& (0+255),b
 13115  002F98  0EF4               	movlw	244
 13116  002F9A  6FDB               	movwf	_cur_state& (0+255),b
 13117                           
 13118                           ; BSR set to: 0
 13119                           ;UI.c: 519: lcdInst(0b10000000);;
 13120  002F9C  0E80               	movlw	128
 13121  002F9E  EC4B  F019         	call	i2_lcdInst
 13122                           
 13123                           ;UI.c: 520: printf("LOG 1           ");
 13124  002FA2  0E25               	movlw	low STR_41
 13125  002FA4  6E0D               	movwf	i2printf@f,c
 13126  002FA6  0EFE               	movlw	high STR_41
 13127  002FA8  6E0E               	movwf	i2printf@f+1,c
 13128  002FAA  EC5E  F006         	call	i2_printf	;wreg free
 13129                           
 13130                           ;UI.c: 521: lcdInst(0b11000000);;
 13131  002FAE  0EC0               	movlw	192
 13132  002FB0  EC4B  F019         	call	i2_lcdInst
 13133                           
 13134                           ;UI.c: 522: printf("LOG 2          <");
 13135  002FB4  0EE0               	movlw	low STR_42
 13136  002FB6  6E0D               	movwf	i2printf@f,c
 13137  002FB8  0EFE               	movlw	high STR_42
 13138  002FBA  6E0E               	movwf	i2printf@f+1,c
 13139  002FBC  EC5E  F006         	call	i2_printf	;wreg free
 13140  002FC0  0012               	return		;funcret
 13141  002FC2                     __end_of_change_state_to_logs_12:
 13142                           	opt stack 0
 13143                           pclatu	equ	0xFFB
 13144                           pclath	equ	0xFFA
 13145                           tblptru	equ	0xFF8
 13146                           tblptrh	equ	0xFF7
 13147                           tblptrl	equ	0xFF6
 13148                           tablat	equ	0xFF5
 13149                           prodh	equ	0xFF4
 13150                           prodl	equ	0xFF3
 13151                           intcon	equ	0xFF2
 13152                           intcon2	equ	0xFF1
 13153                           intcon3	equ	0xFF0
 13154                           indf0	equ	0xFEF
 13155                           postinc0	equ	0xFEE
 13156                           fsr0h	equ	0xFEA
 13157                           fsr0l	equ	0xFE9
 13158                           wreg	equ	0xFE8
 13159                           postdec1	equ	0xFE5
 13160                           fsr1h	equ	0xFE2
 13161                           fsr1l	equ	0xFE1
 13162                           indf2	equ	0xFDF
 13163                           postinc2	equ	0xFDE
 13164                           postdec2	equ	0xFDD
 13165                           fsr2h	equ	0xFDA
 13166                           fsr2l	equ	0xFD9
 13167                           status	equ	0xFD8
 13168                           
 13169 ;; *************** function _change_state_to_logs_11 *****************
 13170 ;; Defined at:
 13171 ;;		line 510 in file "UI.c"
 13172 ;; Parameters:    Size  Location     Type
 13173 ;;		None
 13174 ;; Auto vars:     Size  Location     Type
 13175 ;;		None
 13176 ;; Return value:  Size  Location     Type
 13177 ;;                  1    wreg      void 
 13178 ;; Registers used:
 13179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13180 ;; Tracked objects:
 13181 ;;		On entry : 0/0
 13182 ;;		On exit  : 0/0
 13183 ;;		Unchanged: 0/0
 13184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13189 ;;Total ram usage:        0 bytes
 13190 ;; Hardware stack levels used:    1
 13191 ;; Hardware stack levels required when called:    3
 13192 ;; This function calls:
 13193 ;;		i2_lcdInst
 13194 ;;		i2_printf
 13195 ;; This function is called by:
 13196 ;;		_updateMenu
 13197 ;;		_inputHandler
 13198 ;; This function uses a non-reentrant model
 13199 ;;
 13200                           
 13201                           	psect	text60
 13202  002FC2                     __ptext60:
 13203                           	opt stack 0
 13204  002FC2                     _change_state_to_logs_11:
 13205                           	opt stack 18
 13206                           
 13207                           ;UI.c: 511: cur_state = 1011;
 13208                           
 13209                           ;incstack = 0
 13210  002FC2  0E03               	movlw	3
 13211  002FC4  0100               	movlb	0	; () banked
 13212  002FC6  6FDC               	movwf	(_cur_state+1)& (0+255),b
 13213  002FC8  0EF3               	movlw	243
 13214  002FCA  6FDB               	movwf	_cur_state& (0+255),b
 13215                           
 13216                           ; BSR set to: 0
 13217                           ;UI.c: 512: lcdInst(0b10000000);;
 13218  002FCC  0E80               	movlw	128
 13219  002FCE  EC4B  F019         	call	i2_lcdInst
 13220                           
 13221                           ;UI.c: 513: printf("LOG 1          <");
 13222  002FD2  0ECF               	movlw	low STR_39
 13223  002FD4  6E0D               	movwf	i2printf@f,c
 13224  002FD6  0EFE               	movlw	high STR_39
 13225  002FD8  6E0E               	movwf	i2printf@f+1,c
 13226  002FDA  EC5E  F006         	call	i2_printf	;wreg free
 13227                           
 13228                           ;UI.c: 514: lcdInst(0b11000000);;
 13229  002FDE  0EC0               	movlw	192
 13230  002FE0  EC4B  F019         	call	i2_lcdInst
 13231                           
 13232                           ;UI.c: 515: printf("LOG 2           ");
 13233  002FE4  0E36               	movlw	low STR_40
 13234  002FE6  6E0D               	movwf	i2printf@f,c
 13235  002FE8  0EFE               	movlw	high STR_40
 13236  002FEA  6E0E               	movwf	i2printf@f+1,c
 13237  002FEC  EC5E  F006         	call	i2_printf	;wreg free
 13238  002FF0  0012               	return		;funcret
 13239  002FF2                     __end_of_change_state_to_logs_11:
 13240                           	opt stack 0
 13241                           pclatu	equ	0xFFB
 13242                           pclath	equ	0xFFA
 13243                           tblptru	equ	0xFF8
 13244                           tblptrh	equ	0xFF7
 13245                           tblptrl	equ	0xFF6
 13246                           tablat	equ	0xFF5
 13247                           prodh	equ	0xFF4
 13248                           prodl	equ	0xFF3
 13249                           intcon	equ	0xFF2
 13250                           intcon2	equ	0xFF1
 13251                           intcon3	equ	0xFF0
 13252                           indf0	equ	0xFEF
 13253                           postinc0	equ	0xFEE
 13254                           fsr0h	equ	0xFEA
 13255                           fsr0l	equ	0xFE9
 13256                           wreg	equ	0xFE8
 13257                           postdec1	equ	0xFE5
 13258                           fsr1h	equ	0xFE2
 13259                           fsr1l	equ	0xFE1
 13260                           indf2	equ	0xFDF
 13261                           postinc2	equ	0xFDE
 13262                           postdec2	equ	0xFDD
 13263                           fsr2h	equ	0xFDA
 13264                           fsr2l	equ	0xFD9
 13265                           status	equ	0xFD8
 13266                           
 13267 ;; *************** function _dispLogs *****************
 13268 ;; Defined at:
 13269 ;;		line 463 in file "UI.c"
 13270 ;; Parameters:    Size  Location     Type
 13271 ;;  myLog           2   17[COMRAM] int 
 13272 ;; Auto vars:     Size  Location     Type
 13273 ;;		None
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  1    wreg      void 
 13276 ;; Registers used:
 13277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13287 ;;Total ram usage:        2 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    2
 13290 ;; This function calls:
 13291 ;;		_retrieveLog
 13292 ;; This function is called by:
 13293 ;;		_updateMenu
 13294 ;; This function uses a non-reentrant model
 13295 ;;
 13296                           
 13297                           	psect	text61
 13298  003168                     __ptext61:
 13299                           	opt stack 0
 13300  003168                     _dispLogs:
 13301                           	opt stack 20
 13302                           
 13303                           ;UI.c: 464: logstate = 1;
 13304                           
 13305                           ;incstack = 0
 13306  003168  0E00               	movlw	0
 13307  00316A  0100               	movlb	0	; () banked
 13308  00316C  6FF8               	movwf	(_logstate+1)& (0+255),b
 13309  00316E  0E01               	movlw	1
 13310  003170  6FF7               	movwf	_logstate& (0+255),b
 13311                           
 13312                           ; BSR set to: 0
 13313                           ;UI.c: 465: log = myLog;
 13314  003172  C012  F0E7         	movff	dispLogs@myLog,_log
 13315  003176  C013  F0E8         	movff	dispLogs@myLog+1,_log+1
 13316                           
 13317                           ; BSR set to: 0
 13318                           ;UI.c: 466: retrieveLog(myLog - 1);
 13319  00317A  0EFF               	movlw	255
 13320  00317C  2412               	addwf	dispLogs@myLog,w,c
 13321  00317E  6E07               	movwf	retrieveLog@logNum,c
 13322  003180  0EFF               	movlw	255
 13323  003182  2013               	addwfc	dispLogs@myLog+1,w,c
 13324  003184  6E08               	movwf	retrieveLog@logNum+1,c
 13325  003186  EC5B  F010         	call	_retrieveLog	;wreg free
 13326  00318A  0012               	return		;funcret
 13327  00318C                     __end_of_dispLogs:
 13328                           	opt stack 0
 13329                           pclatu	equ	0xFFB
 13330                           pclath	equ	0xFFA
 13331                           tblptru	equ	0xFF8
 13332                           tblptrh	equ	0xFF7
 13333                           tblptrl	equ	0xFF6
 13334                           tablat	equ	0xFF5
 13335                           prodh	equ	0xFF4
 13336                           prodl	equ	0xFF3
 13337                           intcon	equ	0xFF2
 13338                           intcon2	equ	0xFF1
 13339                           intcon3	equ	0xFF0
 13340                           indf0	equ	0xFEF
 13341                           postinc0	equ	0xFEE
 13342                           fsr0h	equ	0xFEA
 13343                           fsr0l	equ	0xFE9
 13344                           wreg	equ	0xFE8
 13345                           postdec1	equ	0xFE5
 13346                           fsr1h	equ	0xFE2
 13347                           fsr1l	equ	0xFE1
 13348                           indf2	equ	0xFDF
 13349                           postinc2	equ	0xFDE
 13350                           postdec2	equ	0xFDD
 13351                           fsr2h	equ	0xFDA
 13352                           fsr2l	equ	0xFD9
 13353                           status	equ	0xFD8
 13354                           
 13355 ;; *************** function _retrieveLog *****************
 13356 ;; Defined at:
 13357 ;;		line 134 in file "EEPROM.c"
 13358 ;; Parameters:    Size  Location     Type
 13359 ;;  logNum          2    6[COMRAM] int 
 13360 ;; Auto vars:     Size  Location     Type
 13361 ;;  i               2   13[COMRAM] int 
 13362 ;;  addr            2   15[COMRAM] unsigned short 
 13363 ;;  byte3           1   12[COMRAM] unsigned char 
 13364 ;;  byte2           1   11[COMRAM] unsigned char 
 13365 ;;  byte1           1   10[COMRAM] unsigned char 
 13366 ;; Return value:  Size  Location     Type
 13367 ;;                  1    wreg      void 
 13368 ;; Registers used:
 13369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13370 ;; Tracked objects:
 13371 ;;		On entry : 0/0
 13372 ;;		On exit  : 0/0
 13373 ;;		Unchanged: 0/0
 13374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13375 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13376 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13378 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13379 ;;Total ram usage:       11 bytes
 13380 ;; Hardware stack levels used:    1
 13381 ;; Hardware stack levels required when called:    1
 13382 ;; This function calls:
 13383 ;;		i2_EEPROM_read
 13384 ;;		i2___wmul
 13385 ;; This function is called by:
 13386 ;;		_dispLogs
 13387 ;; This function uses a non-reentrant model
 13388 ;;
 13389                           
 13390                           	psect	text62
 13391  0020B6                     __ptext62:
 13392                           	opt stack 0
 13393  0020B6                     _retrieveLog:
 13394                           	opt stack 20
 13395                           
 13396                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 13397                           
 13398                           ;incstack = 0
 13399  0020B6  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 13400  0020BA  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 13401  0020BE  0E00               	movlw	0
 13402  0020C0  6E04               	movwf	i2___wmul@multiplicand+1,c
 13403  0020C2  0E0B               	movlw	11
 13404  0020C4  6E03               	movwf	i2___wmul@multiplicand,c
 13405  0020C6  EC7C  F018         	call	i2___wmul	;wreg free
 13406  0020CA  0E01               	movlw	1
 13407  0020CC  2401               	addwf	?i2___wmul,w,c
 13408  0020CE  6E10               	movwf	retrieveLog@addr,c
 13409  0020D0  0E00               	movlw	0
 13410  0020D2  2002               	addwfc	?i2___wmul+1,w,c
 13411  0020D4  6E11               	movwf	retrieveLog@addr+1,c
 13412                           
 13413                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 13414  0020D6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13415  0020DA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13416  0020DE  EC0E  F019         	call	i2_EEPROM_read	;wreg free
 13417  0020E2  6E0B               	movwf	retrieveLog@byte1,c
 13418                           
 13419                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 13420  0020E4  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 13421  0020E8  0E80               	movlw	128
 13422  0020EA  1609               	andwf	??_retrieveLog,f,c
 13423  0020EC  5009               	movf	??_retrieveLog,w,c
 13424  0020EE  0100               	movlb	0	; () banked
 13425  0020F0  6FE9               	movwf	_log_completion& (0+255),b
 13426  0020F2  6BEA               	clrf	(_log_completion+1)& (0+255),b
 13427                           
 13428                           ; BSR set to: 0
 13429                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 13430  0020F4  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 13431  0020F8  0E0F               	movlw	15
 13432  0020FA  1609               	andwf	??_retrieveLog,f,c
 13433  0020FC  5009               	movf	??_retrieveLog,w,c
 13434  0020FE  0100               	movlb	0	; () banked
 13435  002100  6FF3               	movwf	_log_count_total& (0+255),b
 13436  002102  6BF4               	clrf	(_log_count_total+1)& (0+255),b
 13437                           
 13438                           ; BSR set to: 0
 13439                           ;EEPROM.c: 146: addr++;
 13440  002104  4A10               	infsnz	retrieveLog@addr,f,c
 13441  002106  2A11               	incf	retrieveLog@addr+1,f,c
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 13445  002108  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13446  00210C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13447  002110  EC0E  F019         	call	i2_EEPROM_read	;wreg free
 13448  002114  6E0C               	movwf	retrieveLog@byte2,c
 13449                           
 13450                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 13451  002116  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 13452  00211A  0EF0               	movlw	240
 13453  00211C  1609               	andwf	??_retrieveLog,f,c
 13454  00211E  5009               	movf	??_retrieveLog,w,c
 13455  002120  0100               	movlb	0	; () banked
 13456  002122  6FEF               	movwf	_log_count_pop_no_tab& (0+255),b
 13457  002124  6BF0               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 13458                           
 13459                           ; BSR set to: 0
 13460                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 13461  002126  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 13462  00212A  0E0F               	movlw	15
 13463  00212C  1609               	andwf	??_retrieveLog,f,c
 13464  00212E  5009               	movf	??_retrieveLog,w,c
 13465  002130  0100               	movlb	0	; () banked
 13466  002132  6FF1               	movwf	_log_count_pop_w_tab& (0+255),b
 13467  002134  6BF2               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;EEPROM.c: 152: addr++;
 13471  002136  4A10               	infsnz	retrieveLog@addr,f,c
 13472  002138  2A11               	incf	retrieveLog@addr+1,f,c
 13473                           
 13474                           ; BSR set to: 0
 13475                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 13476  00213A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13477  00213E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13478  002142  EC0E  F019         	call	i2_EEPROM_read	;wreg free
 13479  002146  6E0D               	movwf	retrieveLog@byte3,c
 13480                           
 13481                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 13482  002148  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 13483  00214C  0EF0               	movlw	240
 13484  00214E  1609               	andwf	??_retrieveLog,f,c
 13485  002150  5009               	movf	??_retrieveLog,w,c
 13486  002152  0100               	movlb	0	; () banked
 13487  002154  6FED               	movwf	_log_count_can_w_lab& (0+255),b
 13488  002156  6BEE               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 13492  002158  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 13493  00215C  0E0F               	movlw	15
 13494  00215E  1609               	andwf	??_retrieveLog,f,c
 13495  002160  5009               	movf	??_retrieveLog,w,c
 13496  002162  0100               	movlb	0	; () banked
 13497  002164  6FEB               	movwf	_log_count_can_no_lab& (0+255),b
 13498  002166  6BEC               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 13499                           
 13500                           ; BSR set to: 0
 13501                           ;EEPROM.c: 156: addr++;
 13502  002168  4A10               	infsnz	retrieveLog@addr,f,c
 13503  00216A  2A11               	incf	retrieveLog@addr+1,f,c
 13504                           
 13505                           ; BSR set to: 0
 13506                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 13507  00216C  0E00               	movlw	0
 13508  00216E  6E0F               	movwf	retrieveLog@i+1,c
 13509  002170  0E00               	movlw	0
 13510  002172  6E0E               	movwf	retrieveLog@i,c
 13511  002174                     i2l4751:
 13512                           
 13513                           ; BSR set to: 0
 13514  002174  BE0F               	btfsc	retrieveLog@i+1,7,c
 13515  002176  D006               	goto	i2l4755
 13516  002178  500F               	movf	retrieveLog@i+1,w,c
 13517  00217A  E11E               	bnz	i2l4763
 13518  00217C  0E07               	movlw	7
 13519  00217E  5C0E               	subwf	retrieveLog@i,w,c
 13520  002180  B0D8               	btfsc	status,0,c
 13521  002182  D01A               	goto	i2l4763
 13522  002184                     i2l4755:
 13523                           
 13524                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 13525  002184  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13526  002188  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13527  00218C  EC0E  F019         	call	i2_EEPROM_read	;wreg free
 13528  002190  6E09               	movwf	??_retrieveLog& (0+255),c
 13529  002192  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 13530  002194  90D8               	bcf	status,0,c
 13531  002196  340E               	rlcf	retrieveLog@i,w,c
 13532  002198  6ED9               	movwf	fsr2l,c
 13533  00219A  340F               	rlcf	retrieveLog@i+1,w,c
 13534  00219C  6EDA               	movwf	fsr2h,c
 13535  00219E  0E00               	movlw	low _log_startTime
 13536  0021A0  26D9               	addwf	fsr2l,f,c
 13537  0021A2  0E01               	movlw	high _log_startTime
 13538  0021A4  22DA               	addwfc	fsr2h,f,c
 13539  0021A6  C009  FFDE         	movff	??_retrieveLog,postinc2
 13540  0021AA  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 13541                           
 13542                           ;EEPROM.c: 161: addr++;
 13543  0021AE  4A10               	infsnz	retrieveLog@addr,f,c
 13544  0021B0  2A11               	incf	retrieveLog@addr+1,f,c
 13545  0021B2  4A0E               	infsnz	retrieveLog@i,f,c
 13546  0021B4  2A0F               	incf	retrieveLog@i+1,f,c
 13547  0021B6  D7DE               	goto	i2l4751
 13548  0021B8                     i2l4763:
 13549                           
 13550                           ;EEPROM.c: 162: }
 13551                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 13552  0021B8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13553  0021BC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13554  0021C0  EC0E  F019         	call	i2_EEPROM_read	;wreg free
 13555  0021C4  6E09               	movwf	??_retrieveLog& (0+255),c
 13556  0021C6  5009               	movf	??_retrieveLog,w,c
 13557  0021C8  0100               	movlb	0	; () banked
 13558  0021CA  6FF5               	movwf	_log_total_time& (0+255),b
 13559  0021CC  6BF6               	clrf	(_log_total_time+1)& (0+255),b
 13560                           
 13561                           ; BSR set to: 0
 13562  0021CE  0012               	return		;funcret
 13563  0021D0                     __end_of_retrieveLog:
 13564                           	opt stack 0
 13565                           pclatu	equ	0xFFB
 13566                           pclath	equ	0xFFA
 13567                           tblptru	equ	0xFF8
 13568                           tblptrh	equ	0xFF7
 13569                           tblptrl	equ	0xFF6
 13570                           tablat	equ	0xFF5
 13571                           prodh	equ	0xFF4
 13572                           prodl	equ	0xFF3
 13573                           intcon	equ	0xFF2
 13574                           intcon2	equ	0xFF1
 13575                           intcon3	equ	0xFF0
 13576                           indf0	equ	0xFEF
 13577                           postinc0	equ	0xFEE
 13578                           fsr0h	equ	0xFEA
 13579                           fsr0l	equ	0xFE9
 13580                           wreg	equ	0xFE8
 13581                           postdec1	equ	0xFE5
 13582                           fsr1h	equ	0xFE2
 13583                           fsr1l	equ	0xFE1
 13584                           indf2	equ	0xFDF
 13585                           postinc2	equ	0xFDE
 13586                           postdec2	equ	0xFDD
 13587                           fsr2h	equ	0xFDA
 13588                           fsr2l	equ	0xFD9
 13589                           status	equ	0xFD8
 13590                           
 13591 ;; *************** function i2_EEPROM_read *****************
 13592 ;; Defined at:
 13593 ;;		line 68 in file "EEPROM.c"
 13594 ;; Parameters:    Size  Location     Type
 13595 ;;  address         2    0[COMRAM] unsigned short 
 13596 ;; Auto vars:     Size  Location     Type
 13597 ;;		None
 13598 ;; Return value:  Size  Location     Type
 13599 ;;                  1    wreg      unsigned char 
 13600 ;; Registers used:
 13601 ;;		wreg, status,2
 13602 ;; Tracked objects:
 13603 ;;		On entry : 0/0
 13604 ;;		On exit  : 0/0
 13605 ;;		Unchanged: 0/0
 13606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13610 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13611 ;;Total ram usage:        2 bytes
 13612 ;; Hardware stack levels used:    1
 13613 ;; This function calls:
 13614 ;;		Nothing
 13615 ;; This function is called by:
 13616 ;;		_retrieveLog
 13617 ;; This function uses a non-reentrant model
 13618 ;;
 13619                           
 13620                           	psect	text63
 13621  00321C                     __ptext63:
 13622                           	opt stack 0
 13623  00321C                     i2_EEPROM_read:
 13624                           	opt stack 20
 13625                           
 13626                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 13627                           
 13628                           ; BSR set to: 0
 13629                           ;incstack = 0
 13630  00321C  5002               	movf	i2EEPROM_read@address+1,w,c
 13631  00321E  6EAA               	movwf	4010,c	;volatile
 13632                           
 13633                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 13634  003220  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 13635                           
 13636                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 13637  003224  9EA6               	bcf	4006,7,c	;volatile
 13638                           
 13639                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 13640  003226  9CA6               	bcf	4006,6,c	;volatile
 13641                           
 13642                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 13643  003228  80A6               	bsf	4006,0,c	;volatile
 13644  00322A                     i2l922:
 13645  00322A  B0A6               	btfsc	4006,0,c	;volatile
 13646  00322C  D7FE               	goto	i2l922
 13647                           
 13648                           ;EEPROM.c: 81: return EEDATA;
 13649  00322E  50A8               	movf	4008,w,c	;volatile
 13650  003230  0012               	return	
 13651  003232                     __end_ofi2_EEPROM_read:
 13652                           	opt stack 0
 13653                           pclatu	equ	0xFFB
 13654                           pclath	equ	0xFFA
 13655                           tblptru	equ	0xFF8
 13656                           tblptrh	equ	0xFF7
 13657                           tblptrl	equ	0xFF6
 13658                           tablat	equ	0xFF5
 13659                           prodh	equ	0xFF4
 13660                           prodl	equ	0xFF3
 13661                           intcon	equ	0xFF2
 13662                           intcon2	equ	0xFF1
 13663                           intcon3	equ	0xFF0
 13664                           indf0	equ	0xFEF
 13665                           postinc0	equ	0xFEE
 13666                           fsr0h	equ	0xFEA
 13667                           fsr0l	equ	0xFE9
 13668                           wreg	equ	0xFE8
 13669                           postdec1	equ	0xFE5
 13670                           fsr1h	equ	0xFE2
 13671                           fsr1l	equ	0xFE1
 13672                           indf2	equ	0xFDF
 13673                           postinc2	equ	0xFDE
 13674                           postdec2	equ	0xFDD
 13675                           fsr2h	equ	0xFDA
 13676                           fsr2l	equ	0xFD9
 13677                           status	equ	0xFD8
 13678                           
 13679 ;; *************** function _printSortTimer *****************
 13680 ;; Defined at:
 13681 ;;		line 245 in file "sort.c"
 13682 ;; Parameters:    Size  Location     Type
 13683 ;;		None
 13684 ;; Auto vars:     Size  Location     Type
 13685 ;;  i               2   72[COMRAM] int 
 13686 ;;  curTime        14   46[COMRAM] int [7]
 13687 ;;  timeDiff        2   70[COMRAM] unsigned int 
 13688 ;;  sec             2   66[COMRAM] int 
 13689 ;;  min             2   64[COMRAM] int 
 13690 ;;  cur_sec         2   62[COMRAM] unsigned int 
 13691 ;;  start_sec       2   60[COMRAM] unsigned int 
 13692 ;;  hour            2   44[COMRAM] int 
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  1    wreg      void 
 13695 ;; Registers used:
 13696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13703 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13704 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13705 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13706 ;;Total ram usage:       33 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; Hardware stack levels required when called:    3
 13709 ;; This function calls:
 13710 ;;		i2___lwdiv
 13711 ;;		i2___lwmod
 13712 ;;		i2___wmul
 13713 ;;		i2_getRTC
 13714 ;;		i2_lcdInst
 13715 ;;		i2_printf
 13716 ;; This function is called by:
 13717 ;;		_handler
 13718 ;; This function uses a non-reentrant model
 13719 ;;
 13720                           
 13721                           	psect	text64
 13722  0017EA                     __ptext64:
 13723                           	opt stack 0
 13724  0017EA                     _printSortTimer:
 13725                           	opt stack 20
 13726                           
 13727                           ;sort.c: 246: getRTC();
 13728                           
 13729                           ;incstack = 0
 13730  0017EA  EC97  F014         	call	i2_getRTC	;wreg free
 13731                           
 13732                           ;sort.c: 247: int curTime[7];
 13733                           ;sort.c: 248: for(int i = 0; i < 7; i++){
 13734  0017EE  0E00               	movlw	0
 13735  0017F0  6E4A               	movwf	printSortTimer@i+1,c
 13736  0017F2  0E00               	movlw	0
 13737  0017F4  6E49               	movwf	printSortTimer@i,c
 13738  0017F6                     i2l5985:
 13739  0017F6  BE4A               	btfsc	printSortTimer@i+1,7,c
 13740  0017F8  D006               	goto	i2l5989
 13741  0017FA  504A               	movf	printSortTimer@i+1,w,c
 13742  0017FC  E131               	bnz	i2l5995
 13743  0017FE  0E07               	movlw	7
 13744  001800  5C49               	subwf	printSortTimer@i,w,c
 13745  001802  B0D8               	btfsc	status,0,c
 13746  001804  D02D               	goto	i2l5995
 13747  001806                     i2l5989:
 13748                           
 13749                           ;sort.c: 249: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 13750  001806  0E5B               	movlw	low _time
 13751  001808  2449               	addwf	printSortTimer@i,w,c
 13752  00180A  6ED9               	movwf	fsr2l,c
 13753  00180C  0E00               	movlw	high _time
 13754  00180E  204A               	addwfc	printSortTimer@i+1,w,c
 13755  001810  6EDA               	movwf	fsr2h,c
 13756  001812  50DF               	movf	indf2,w,c
 13757  001814  6E2A               	movwf	??_printSortTimer& (0+255),c
 13758  001816  3A2A               	swapf	??_printSortTimer,f,c
 13759  001818  0E0F               	movlw	15
 13760  00181A  162A               	andwf	??_printSortTimer,f,c
 13761  00181C  0E0F               	movlw	15
 13762  00181E  162A               	andwf	??_printSortTimer,f,c
 13763  001820  502A               	movf	??_printSortTimer,w,c
 13764  001822  0D0A               	mullw	10
 13765  001824  0E5B               	movlw	low _time
 13766  001826  2449               	addwf	printSortTimer@i,w,c
 13767  001828  6ED9               	movwf	fsr2l,c
 13768  00182A  0E00               	movlw	high _time
 13769  00182C  204A               	addwfc	printSortTimer@i+1,w,c
 13770  00182E  6EDA               	movwf	fsr2h,c
 13771  001830  50DF               	movf	indf2,w,c
 13772  001832  0B0F               	andlw	15
 13773  001834  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 13774  001836  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 13775  001838  50F3               	movf	prodl,w,c
 13776  00183A  262B               	addwf	??_printSortTimer+1,f,c
 13777  00183C  50F4               	movf	prodh,w,c
 13778  00183E  222C               	addwfc	??_printSortTimer+2,f,c
 13779  001840  90D8               	bcf	status,0,c
 13780  001842  3449               	rlcf	printSortTimer@i,w,c
 13781  001844  6ED9               	movwf	fsr2l,c
 13782  001846  344A               	rlcf	printSortTimer@i+1,w,c
 13783  001848  6EDA               	movwf	fsr2h,c
 13784  00184A  0E2F               	movlw	low printSortTimer@curTime
 13785  00184C  26D9               	addwf	fsr2l,f,c
 13786  00184E  0E00               	movlw	high printSortTimer@curTime
 13787  001850  22DA               	addwfc	fsr2h,f,c
 13788  001852  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 13789  001856  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 13790  00185A  4A49               	infsnz	printSortTimer@i,f,c
 13791  00185C  2A4A               	incf	printSortTimer@i+1,f,c
 13792  00185E  D7CB               	goto	i2l5985
 13793  001860                     i2l5995:
 13794                           
 13795                           ;sort.c: 250: }
 13796                           ;sort.c: 251: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 13797  001860  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 13798  001864  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 13799  001868  0E00               	movlw	0
 13800  00186A  6E04               	movwf	i2___wmul@multiplicand+1,c
 13801  00186C  0E3C               	movlw	60
 13802  00186E  6E03               	movwf	i2___wmul@multiplicand,c
 13803  001870  EC7C  F018         	call	i2___wmul	;wreg free
 13804  001874  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 13805  001878  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 13806  00187C  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 13807  001880  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 13808  001884  0E0E               	movlw	14
 13809  001886  6E04               	movwf	i2___wmul@multiplicand+1,c
 13810  001888  0E10               	movlw	16
 13811  00188A  6E03               	movwf	i2___wmul@multiplicand,c
 13812  00188C  EC7C  F018         	call	i2___wmul	;wreg free
 13813  001890  5001               	movf	?i2___wmul,w,c
 13814  001892  262A               	addwf	??_printSortTimer,f,c
 13815  001894  5002               	movf	?i2___wmul+1,w,c
 13816  001896  222B               	addwfc	??_printSortTimer+1,f,c
 13817  001898  0101               	movlb	1	; () banked
 13818  00189A  510E               	movf	_startTime& (0+255),w,b
 13819  00189C  242A               	addwf	??_printSortTimer,w,c
 13820  00189E  6E3D               	movwf	printSortTimer@start_sec,c
 13821  0018A0  0101               	movlb	1	; () banked
 13822  0018A2  510F               	movf	(_startTime+1)& (0+255),w,b
 13823  0018A4  202B               	addwfc	??_printSortTimer+1,w,c
 13824  0018A6  6E3E               	movwf	printSortTimer@start_sec+1,c
 13825                           
 13826                           ;sort.c: 252: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 13827  0018A8  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 13828  0018AC  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 13829  0018B0  0E00               	movlw	0
 13830  0018B2  6E04               	movwf	i2___wmul@multiplicand+1,c
 13831  0018B4  0E3C               	movlw	60
 13832  0018B6  6E03               	movwf	i2___wmul@multiplicand,c
 13833  0018B8  EC7C  F018         	call	i2___wmul	;wreg free
 13834  0018BC  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 13835  0018C0  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 13836  0018C4  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 13837  0018C8  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 13838  0018CC  0E0E               	movlw	14
 13839  0018CE  6E04               	movwf	i2___wmul@multiplicand+1,c
 13840  0018D0  0E10               	movlw	16
 13841  0018D2  6E03               	movwf	i2___wmul@multiplicand,c
 13842  0018D4  EC7C  F018         	call	i2___wmul	;wreg free
 13843  0018D8  5001               	movf	?i2___wmul,w,c
 13844  0018DA  262A               	addwf	??_printSortTimer,f,c
 13845  0018DC  5002               	movf	?i2___wmul+1,w,c
 13846  0018DE  222B               	addwfc	??_printSortTimer+1,f,c
 13847  0018E0  502F               	movf	printSortTimer@curTime,w,c
 13848  0018E2  242A               	addwf	??_printSortTimer,w,c
 13849  0018E4  6E3F               	movwf	printSortTimer@cur_sec,c
 13850  0018E6  5030               	movf	printSortTimer@curTime+1,w,c
 13851  0018E8  202B               	addwfc	??_printSortTimer+1,w,c
 13852  0018EA  6E40               	movwf	printSortTimer@cur_sec+1,c
 13853                           
 13854                           ;sort.c: 253: unsigned int timeDiff = cur_sec - start_sec;
 13855  0018EC  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 13856  0018F0  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 13857  0018F4  1E2A               	comf	??_printSortTimer,f,c
 13858  0018F6  1E2B               	comf	??_printSortTimer+1,f,c
 13859  0018F8  4A2A               	infsnz	??_printSortTimer,f,c
 13860  0018FA  2A2B               	incf	??_printSortTimer+1,f,c
 13861  0018FC  503F               	movf	printSortTimer@cur_sec,w,c
 13862  0018FE  242A               	addwf	??_printSortTimer,w,c
 13863  001900  6E47               	movwf	printSortTimer@timeDiff,c
 13864  001902  5040               	movf	printSortTimer@cur_sec+1,w,c
 13865  001904  202B               	addwfc	??_printSortTimer+1,w,c
 13866  001906  6E48               	movwf	printSortTimer@timeDiff+1,c
 13867                           
 13868                           ;sort.c: 255: total_time = timeDiff;
 13869  001908  C047  F0F9         	movff	printSortTimer@timeDiff,_total_time
 13870  00190C  C048  F0FA         	movff	printSortTimer@timeDiff+1,_total_time+1
 13871                           
 13872                           ;sort.c: 257: if(timeDiff >= 10){
 13873  001910  5048               	movf	printSortTimer@timeDiff+1,w,c
 13874  001912  E104               	bnz	i2u496_40
 13875  001914  0E0A               	movlw	10
 13876  001916  5C47               	subwf	printSortTimer@timeDiff,w,c
 13877  001918  A0D8               	btfss	status,0,c
 13878  00191A  D003               	goto	i2l6005
 13879  00191C                     i2u496_40:
 13880                           
 13881                           ;sort.c: 258: machine_state = DoneSorting_state;
 13882  00191C  0E02               	movlw	2
 13883  00191E  0100               	movlb	0	; () banked
 13884  001920  6FFB               	movwf	_machine_state& (0+255),b
 13885  001922                     i2l6005:
 13886                           
 13887                           ;sort.c: 260: }
 13888                           ;sort.c: 262: int hour = timeDiff / 3600;
 13889  001922  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 13890  001926  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 13891  00192A  0E0E               	movlw	14
 13892  00192C  6E09               	movwf	i2___lwdiv@divisor+1,c
 13893  00192E  0E10               	movlw	16
 13894  001930  6E08               	movwf	i2___lwdiv@divisor,c
 13895  001932  ECBC  F015         	call	i2___lwdiv	;wreg free
 13896  001936  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 13897  00193A  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 13898                           
 13899                           ;sort.c: 263: int min = (timeDiff % 3600) / 60;
 13900  00193E  0E0E               	movlw	14
 13901  001940  6E04               	movwf	i2___lwmod@divisor+1,c
 13902  001942  0E10               	movlw	16
 13903  001944  6E03               	movwf	i2___lwmod@divisor,c
 13904  001946  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 13905  00194A  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 13906  00194E  EC79  F016         	call	i2___lwmod	;wreg free
 13907  001952  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 13908  001956  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 13909  00195A  0E00               	movlw	0
 13910  00195C  6E09               	movwf	i2___lwdiv@divisor+1,c
 13911  00195E  0E3C               	movlw	60
 13912  001960  6E08               	movwf	i2___lwdiv@divisor,c
 13913  001962  ECBC  F015         	call	i2___lwdiv	;wreg free
 13914  001966  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 13915  00196A  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 13916                           
 13917                           ;sort.c: 264: int sec = (timeDiff % 3600) % 60;
 13918  00196E  0E0E               	movlw	14
 13919  001970  6E04               	movwf	i2___lwmod@divisor+1,c
 13920  001972  0E10               	movlw	16
 13921  001974  6E03               	movwf	i2___lwmod@divisor,c
 13922  001976  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 13923  00197A  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 13924  00197E  EC79  F016         	call	i2___lwmod	;wreg free
 13925  001982  C001  F045         	movff	?i2___lwmod,_printSortTimer$2112
 13926  001986  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2112+1
 13927                           
 13928                           ;sort.c: 264: int sec = (timeDiff % 3600) % 60;
 13929  00198A  C045  F001         	movff	_printSortTimer$2112,i2___lwmod@dividend
 13930  00198E  C046  F002         	movff	_printSortTimer$2112+1,i2___lwmod@dividend+1
 13931  001992  0E00               	movlw	0
 13932  001994  6E04               	movwf	i2___lwmod@divisor+1,c
 13933  001996  0E3C               	movlw	60
 13934  001998  6E03               	movwf	i2___lwmod@divisor,c
 13935  00199A  EC79  F016         	call	i2___lwmod	;wreg free
 13936  00199E  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 13937  0019A2  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 13938                           
 13939                           ;sort.c: 266: lcdInst(0b10000000);;
 13940  0019A6  0E80               	movlw	128
 13941  0019A8  EC4B  F019         	call	i2_lcdInst
 13942                           
 13943                           ;sort.c: 267: printf("SORTING...");
 13944  0019AC  0EA1               	movlw	low STR_64
 13945  0019AE  6E0D               	movwf	i2printf@f,c
 13946  0019B0  0EFF               	movlw	high STR_64
 13947  0019B2  6E0E               	movwf	i2printf@f+1,c
 13948  0019B4  EC5E  F006         	call	i2_printf	;wreg free
 13949                           
 13950                           ;sort.c: 268: lcdInst(0b11000000);;
 13951  0019B8  0EC0               	movlw	192
 13952  0019BA  EC4B  F019         	call	i2_lcdInst
 13953                           
 13954                           ;sort.c: 269: printf("TIME %d:%02d", min, sec);
 13955  0019BE  0E94               	movlw	low STR_65
 13956  0019C0  6E0D               	movwf	i2printf@f,c
 13957  0019C2  0EFF               	movlw	high STR_65
 13958  0019C4  6E0E               	movwf	i2printf@f+1,c
 13959  0019C6  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 13960  0019CA  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 13961  0019CE  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 13962  0019D2  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 13963  0019D6  EC5E  F006         	call	i2_printf	;wreg free
 13964  0019DA  0012               	return		;funcret
 13965  0019DC                     __end_of_printSortTimer:
 13966                           	opt stack 0
 13967                           pclatu	equ	0xFFB
 13968                           pclath	equ	0xFFA
 13969                           tblptru	equ	0xFF8
 13970                           tblptrh	equ	0xFF7
 13971                           tblptrl	equ	0xFF6
 13972                           tablat	equ	0xFF5
 13973                           prodh	equ	0xFF4
 13974                           prodl	equ	0xFF3
 13975                           intcon	equ	0xFF2
 13976                           intcon2	equ	0xFF1
 13977                           intcon3	equ	0xFF0
 13978                           indf0	equ	0xFEF
 13979                           postinc0	equ	0xFEE
 13980                           fsr0h	equ	0xFEA
 13981                           fsr0l	equ	0xFE9
 13982                           wreg	equ	0xFE8
 13983                           postdec1	equ	0xFE5
 13984                           fsr1h	equ	0xFE2
 13985                           fsr1l	equ	0xFE1
 13986                           indf2	equ	0xFDF
 13987                           postinc2	equ	0xFDE
 13988                           postdec2	equ	0xFDD
 13989                           fsr2h	equ	0xFDA
 13990                           fsr2l	equ	0xFD9
 13991                           status	equ	0xFD8
 13992                           
 13993 ;; *************** function i2_printf *****************
 13994 ;; Defined at:
 13995 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13996 ;; Parameters:    Size  Location     Type
 13997 ;;  f               2   12[COMRAM] PTR const unsigned char 
 13998 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 13999 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 14000 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 14001 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 14002 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 14003 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 14004 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 14005 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 14006 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 14007 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 14008 ;;		 -> STR_2(14), STR_1(18), 
 14009 ;; Auto vars:     Size  Location     Type
 14010 ;;  printf          4    0        struct .
 14011 ;;  printf          2   39[COMRAM] int 
 14012 ;;  printf          2   35[COMRAM] unsigned int 
 14013 ;;  printf          2   33[COMRAM] unsigned int 
 14014 ;;  printf          2   31[COMRAM] PTR void [1]
 14015 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14016 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 14017 ;;		 -> STR_68(7), count_total(2), printRTC@month(4), UI@month(4), 
 14018 ;;  printf          1   38[COMRAM] char 
 14019 ;;  printf          1   37[COMRAM] unsigned char 
 14020 ;;  printf          1   28[COMRAM] char 
 14021 ;; Return value:  Size  Location     Type
 14022 ;;                  2   12[COMRAM] int 
 14023 ;; Registers used:
 14024 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14025 ;; Tracked objects:
 14026 ;;		On entry : 0/0
 14027 ;;		On exit  : 0/0
 14028 ;;		Unchanged: 0/0
 14029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14030 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14032 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14034 ;;Total ram usage:       29 bytes
 14035 ;; Hardware stack levels used:    1
 14036 ;; Hardware stack levels required when called:    2
 14037 ;; This function calls:
 14038 ;;		i2___lwdiv
 14039 ;;		i2___lwmod
 14040 ;;		i2___wmul
 14041 ;;		i2_isdigit
 14042 ;;		i2_putch
 14043 ;; This function is called by:
 14044 ;;		_change_state_to_menu_11
 14045 ;;		_change_state_to_menu_23
 14046 ;;		_change_state_to_logs_11
 14047 ;;		_change_state_to_logs_12
 14048 ;;		_change_state_to_logs_22
 14049 ;;		_change_state_to_logs_23
 14050 ;;		_change_state_to_logs_33
 14051 ;;		_change_state_to_logs_34
 14052 ;;		_printSortTimer
 14053 ;;		i2_change_state_to_menu_start
 14054 ;;		i2_change_state_to_menu_12
 14055 ;;		i2_change_state_to_menu_22
 14056 ;;		i2_printRTC
 14057 ;; This function uses a non-reentrant model
 14058 ;;
 14059                           
 14060                           	psect	text65
 14061  000CBC                     __ptext65:
 14062                           	opt stack 0
 14063  000CBC                     i2_printf:
 14064                           	opt stack 19
 14065                           
 14066                           ;doprnt.c: 466: va_list ap;
 14067                           ;doprnt.c: 499: signed char c;
 14068                           ;doprnt.c: 501: int width;
 14069                           ;doprnt.c: 506: signed char prec;
 14070                           ;doprnt.c: 508: unsigned char flag;
 14071                           ;doprnt.c: 523: union {
 14072                           ;doprnt.c: 524: unsigned long vd;
 14073                           ;doprnt.c: 525: double integ;
 14074                           ;doprnt.c: 526: } tmpval;
 14075                           ;doprnt.c: 528: unsigned int val;
 14076                           ;doprnt.c: 529: unsigned len;
 14077                           ;doprnt.c: 530: const char * cp;
 14078                           ;doprnt.c: 533: *ap = __va_start();
 14079                           
 14080                           ;incstack = 0
 14081  000CBC  0E0F               	movlw	low (?i2_printf+2)
 14082  000CBE  6E20               	movwf	i2printf@ap,c
 14083  000CC0  0E00               	movlw	high (?i2_printf+2)
 14084  000CC2  6E21               	movwf	i2printf@ap+1,c
 14085                           
 14086                           ;doprnt.c: 536: while(c = *f++) {
 14087  000CC4  D1A4               	goto	i2l4569
 14088  000CC6                     i2l4439:
 14089                           
 14090                           ;doprnt.c: 538: if(c != '%')
 14091  000CC6  0E25               	movlw	37
 14092  000CC8  1827               	xorwf	i2printf@c,w,c
 14093  000CCA  B4D8               	btfsc	status,2,c
 14094  000CCC  D004               	goto	i2l4443
 14095                           
 14096                           ;doprnt.c: 540: {
 14097                           ;doprnt.c: 541: (putch(c) );
 14098  000CCE  5027               	movf	i2printf@c,w,c
 14099  000CD0  EC45  F019         	call	i2_putch
 14100                           
 14101                           ;doprnt.c: 542: continue;
 14102  000CD4  D19C               	goto	i2l4569
 14103  000CD6                     i2l4443:
 14104                           
 14105                           ;doprnt.c: 543: }
 14106                           ;doprnt.c: 546: width = 0;
 14107  000CD6  0E00               	movlw	0
 14108  000CD8  6E29               	movwf	i2printf@width+1,c
 14109  000CDA  0E00               	movlw	0
 14110  000CDC  6E28               	movwf	i2printf@width,c
 14111                           
 14112                           ;doprnt.c: 548: flag = 0;
 14113  000CDE  0E00               	movlw	0
 14114  000CE0  6E26               	movwf	i2printf@flag,c
 14115                           
 14116                           ;doprnt.c: 551: switch(*f) {
 14117                           
 14118                           ;doprnt.c: 550: for(;;) {
 14119  000CE2  D003               	goto	i2l4449
 14120  000CE4                     i2l4445:
 14121                           
 14122                           ;doprnt.c: 580: flag |= 0x04;
 14123  000CE4  8426               	bsf	i2printf@flag,2,c
 14124                           
 14125                           ;doprnt.c: 581: f++;
 14126  000CE6  4A0D               	infsnz	i2printf@f,f,c
 14127  000CE8  2A0E               	incf	i2printf@f+1,f,c
 14128  000CEA                     i2l4449:
 14129  000CEA  C00D  FFF6         	movff	i2printf@f,tblptrl
 14130  000CEE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14131  000CF2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14132  000CF2  6AF8               	clrf	tblptru,c
 14133  000CF4                     	endif
 14134  000CF4                     	if	0	;tblptru may be non-zero
 14135  000CF4                     	endif
 14136  000CF4  0008               	tblrd		*
 14137  000CF6  50F5               	movf	tablat,w,c
 14138                           
 14139                           ; Switch size 1, requested type "space"
 14140                           ; Number of cases is 1, Range of values is 48 to 48
 14141                           ; switch strategies available:
 14142                           ; Name         Instructions Cycles
 14143                           ; simple_byte            4     3 (average)
 14144                           ;	Chosen strategy is simple_byte
 14145  000CF8  0A30               	xorlw	48	; case 48
 14146  000CFA  B4D8               	btfsc	status,2,c
 14147  000CFC  D7F3               	goto	i2l4445
 14148                           
 14149                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14150                           
 14151                           ;doprnt.c: 586: }
 14152                           
 14153                           ;doprnt.c: 585: break;
 14154  000CFE  C00D  FFF6         	movff	i2printf@f,tblptrl
 14155  000D02  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14156  000D06                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14157  000D06  6AF8               	clrf	tblptru,c
 14158  000D08                     	endif
 14159  000D08                     	if	0	;tblptru may be non-zero
 14160  000D08                     	endif
 14161  000D08  0008               	tblrd		*
 14162  000D0A  50F5               	movf	tablat,w,c
 14163  000D0C  ECE8  F018         	call	i2_isdigit
 14164  000D10  A0D8               	btfss	status,0,c
 14165  000D12  D0A6               	goto	i2l4497
 14166                           
 14167                           ;doprnt.c: 598: width = 0;
 14168  000D14  0E00               	movlw	0
 14169  000D16  6E29               	movwf	i2printf@width+1,c
 14170  000D18  0E00               	movlw	0
 14171  000D1A  6E28               	movwf	i2printf@width,c
 14172  000D1C                     i2l4455:
 14173                           
 14174                           ;doprnt.c: 600: width *= 10;
 14175  000D1C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 14176  000D20  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 14177  000D24  0E00               	movlw	0
 14178  000D26  6E04               	movwf	i2___wmul@multiplicand+1,c
 14179  000D28  0E0A               	movlw	10
 14180  000D2A  6E03               	movwf	i2___wmul@multiplicand,c
 14181  000D2C  EC7C  F018         	call	i2___wmul	;wreg free
 14182  000D30  C001  F028         	movff	?i2___wmul,i2printf@width
 14183  000D34  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 14184                           
 14185                           ;doprnt.c: 601: width += *f++ - '0';
 14186  000D38  0ED0               	movlw	208
 14187  000D3A  6E19               	movwf	??i2_printf& (0+255),c
 14188  000D3C  0EFF               	movlw	255
 14189  000D3E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 14190  000D40  C00D  FFF6         	movff	i2printf@f,tblptrl
 14191  000D44  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14192  000D48                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14193  000D48  6AF8               	clrf	tblptru,c
 14194  000D4A                     	endif
 14195  000D4A                     	if	0	;tblptru may be non-zero
 14196  000D4A                     	endif
 14197  000D4A  0008               	tblrd		*
 14198  000D4C  50F5               	movf	tablat,w,c
 14199  000D4E  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 14200  000D50  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 14201  000D52  5019               	movf	??i2_printf,w,c
 14202  000D54  261B               	addwf	??i2_printf+2,f,c
 14203  000D56  501A               	movf	??i2_printf+1,w,c
 14204  000D58  221C               	addwfc	??i2_printf+3,f,c
 14205  000D5A  501B               	movf	??i2_printf+2,w,c
 14206  000D5C  2628               	addwf	i2printf@width,f,c
 14207  000D5E  501C               	movf	??i2_printf+3,w,c
 14208  000D60  2229               	addwfc	i2printf@width+1,f,c
 14209  000D62  4A0D               	infsnz	i2printf@f,f,c
 14210  000D64  2A0E               	incf	i2printf@f+1,f,c
 14211                           
 14212                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14213  000D66  C00D  FFF6         	movff	i2printf@f,tblptrl
 14214  000D6A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14215  000D6E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14216  000D6E  6AF8               	clrf	tblptru,c
 14217  000D70                     	endif
 14218  000D70                     	if	0	;tblptru may be non-zero
 14219  000D70                     	endif
 14220  000D70  0008               	tblrd		*
 14221  000D72  50F5               	movf	tablat,w,c
 14222  000D74  ECE8  F018         	call	i2_isdigit
 14223  000D78  A0D8               	btfss	status,0,c
 14224  000D7A  D072               	goto	i2l4497
 14225  000D7C  D7CF               	goto	i2l4455
 14226  000D7E                     i2l4463:
 14227                           
 14228                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14229  000D7E  C020  FFD9         	movff	i2printf@ap,fsr2l
 14230  000D82  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 14231  000D86  CFDE F01E          	movff	postinc2,i2printf@cp
 14232  000D8A  CFDD F01F          	movff	postdec2,i2printf@cp+1
 14233  000D8E  0E02               	movlw	2
 14234  000D90  2620               	addwf	i2printf@ap,f,c
 14235  000D92  0E00               	movlw	0
 14236  000D94  2221               	addwfc	i2printf@ap+1,f,c
 14237                           
 14238                           ;doprnt.c: 740: if(!cp)
 14239  000D96  501E               	movf	i2printf@cp,w,c
 14240  000D98  101F               	iorwf	i2printf@cp+1,w,c
 14241  000D9A  A4D8               	btfss	status,2,c
 14242  000D9C  D004               	goto	i2l4471
 14243                           
 14244                           ;doprnt.c: 741: cp = "(null)";
 14245  000D9E  0EB6               	movlw	low STR_68
 14246  000DA0  6E1E               	movwf	i2printf@cp,c
 14247  000DA2  0EFF               	movlw	high STR_68
 14248  000DA4  6E1F               	movwf	i2printf@cp+1,c
 14249  000DA6                     i2l4471:
 14250                           
 14251                           ;doprnt.c: 745: len = 0;
 14252  000DA6  0E00               	movlw	0
 14253  000DA8  6E23               	movwf	i2printf@len+1,c
 14254  000DAA  0E00               	movlw	0
 14255  000DAC  6E22               	movwf	i2printf@len,c
 14256                           
 14257                           ;doprnt.c: 746: while(cp[len])
 14258  000DAE  D002               	goto	i2l4475
 14259  000DB0                     i2l4473:
 14260                           
 14261                           ;doprnt.c: 747: len++;
 14262  000DB0  4A22               	infsnz	i2printf@len,f,c
 14263  000DB2  2A23               	incf	i2printf@len+1,f,c
 14264  000DB4                     i2l4475:
 14265  000DB4  5022               	movf	i2printf@len,w,c
 14266  000DB6  241E               	addwf	i2printf@cp,w,c
 14267  000DB8  6E19               	movwf	??i2_printf& (0+255),c
 14268  000DBA  5023               	movf	i2printf@len+1,w,c
 14269  000DBC  201F               	addwfc	i2printf@cp+1,w,c
 14270  000DBE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 14271  000DC0  C019  FFF6         	movff	??i2_printf,tblptrl
 14272  000DC4  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 14273  000DC8  0E00               	movlw	low (__mediumconst shr (0+16))
 14274  000DCA  6EF8               	movwf	tblptru,c
 14275  000DCC  0E0F               	movlw	(high __ramtop+-1)
 14276  000DCE  64F7               	cpfsgt	tblptrh,c
 14277  000DD0  D003               	bra	i2u320_47
 14278  000DD2  0008               	tblrd		*
 14279  000DD4  50F5               	movf	tablat,w,c
 14280  000DD6  D005               	bra	i2u320_40
 14281  000DD8                     i2u320_47:
 14282  000DD8  CFF6 FFE9          	movff	tblptrl,fsr0l
 14283  000DDC  CFF7 FFEA          	movff	tblptrh,fsr0h
 14284  000DE0  50EF               	movf	indf0,w,c
 14285  000DE2                     i2u320_40:
 14286  000DE2  0900               	iorlw	0
 14287  000DE4  A4D8               	btfss	status,2,c
 14288  000DE6  D7E4               	goto	i2l4473
 14289                           
 14290                           ;doprnt.c: 757: if(width > len)
 14291  000DE8  5028               	movf	i2printf@width,w,c
 14292  000DEA  5C22               	subwf	i2printf@len,w,c
 14293  000DEC  5029               	movf	i2printf@width+1,w,c
 14294  000DEE  5823               	subwfb	i2printf@len+1,w,c
 14295  000DF0  B0D8               	btfsc	status,0,c
 14296  000DF2  D005               	goto	i2l4481
 14297                           
 14298                           ;doprnt.c: 758: width -= len;
 14299  000DF4  5022               	movf	i2printf@len,w,c
 14300  000DF6  5E28               	subwf	i2printf@width,f,c
 14301  000DF8  5023               	movf	i2printf@len+1,w,c
 14302  000DFA  5A29               	subwfb	i2printf@width+1,f,c
 14303  000DFC  D008               	goto	i2l4485
 14304  000DFE                     i2l4481:
 14305                           
 14306                           ;doprnt.c: 759: else
 14307                           ;doprnt.c: 760: width = 0;
 14308  000DFE  0E00               	movlw	0
 14309  000E00  6E29               	movwf	i2printf@width+1,c
 14310  000E02  0E00               	movlw	0
 14311  000E04  6E28               	movwf	i2printf@width,c
 14312                           
 14313                           ;doprnt.c: 764: while(width--)
 14314  000E06  D003               	goto	i2l4485
 14315  000E08                     i2l4483:
 14316                           
 14317                           ;doprnt.c: 765: (putch(' ') );
 14318  000E08  0E20               	movlw	32
 14319  000E0A  EC45  F019         	call	i2_putch
 14320  000E0E                     i2l4485:
 14321  000E0E  0628               	decf	i2printf@width,f,c
 14322  000E10  A0D8               	btfss	status,0,c
 14323  000E12  0629               	decf	i2printf@width+1,f,c
 14324  000E14  2828               	incf	i2printf@width,w,c
 14325  000E16  E1F8               	bnz	i2l4483
 14326  000E18  2829               	incf	i2printf@width+1,w,c
 14327  000E1A  B4D8               	btfsc	status,2,c
 14328  000E1C  D016               	goto	i2l4491
 14329  000E1E  D7F4               	goto	i2l4483
 14330  000E20                     i2l4487:
 14331                           
 14332                           ;doprnt.c: 768: (putch(*cp++) );
 14333  000E20  C01E  FFF6         	movff	i2printf@cp,tblptrl
 14334  000E24  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 14335  000E28  0E00               	movlw	low (__mediumconst shr (0+16))
 14336  000E2A  6EF8               	movwf	tblptru,c
 14337  000E2C  0E0F               	movlw	(high __ramtop+-1)
 14338  000E2E  64F7               	cpfsgt	tblptrh,c
 14339  000E30  D003               	bra	i2u324_47
 14340  000E32  0008               	tblrd		*
 14341  000E34  50F5               	movf	tablat,w,c
 14342  000E36  D005               	bra	i2u324_40
 14343  000E38                     i2u324_47:
 14344  000E38  CFF6 FFE9          	movff	tblptrl,fsr0l
 14345  000E3C  CFF7 FFEA          	movff	tblptrh,fsr0h
 14346  000E40  50EF               	movf	indf0,w,c
 14347  000E42                     i2u324_40:
 14348  000E42  EC45  F019         	call	i2_putch
 14349  000E46  4A1E               	infsnz	i2printf@cp,f,c
 14350  000E48  2A1F               	incf	i2printf@cp+1,f,c
 14351  000E4A                     i2l4491:
 14352  000E4A  0622               	decf	i2printf@len,f,c
 14353  000E4C  A0D8               	btfss	status,0,c
 14354  000E4E  0623               	decf	i2printf@len+1,f,c
 14355  000E50  2822               	incf	i2printf@len,w,c
 14356  000E52  E1E6               	bnz	i2l4487
 14357  000E54  2823               	incf	i2printf@len+1,w,c
 14358  000E56  B4D8               	btfsc	status,2,c
 14359  000E58  D0DA               	goto	i2l4569
 14360  000E5A  D7E2               	goto	i2l4487
 14361  000E5C                     i2l4493:
 14362                           
 14363                           ;doprnt.c: 818: flag |= 0x40;
 14364  000E5C  8C26               	bsf	i2printf@flag,6,c
 14365                           
 14366                           ;doprnt.c: 822: }
 14367                           
 14368                           ;doprnt.c: 819: break;
 14369  000E5E  D01B               	goto	i2l967
 14370  000E60                     i2l4497:
 14371  000E60  C00D  FFF6         	movff	i2printf@f,tblptrl
 14372  000E64  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14373  000E68  4A0D               	infsnz	i2printf@f,f,c
 14374  000E6A  2A0E               	incf	i2printf@f+1,f,c
 14375  000E6C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14376  000E6C  6AF8               	clrf	tblptru,c
 14377  000E6E                     	endif
 14378  000E6E                     	if	0	;tblptru may be non-zero
 14379  000E6E                     	endif
 14380  000E6E  0008               	tblrd		*
 14381  000E70  CFF5 F027          	movff	tablat,i2printf@c
 14382  000E74  5027               	movf	i2printf@c,w,c
 14383                           
 14384                           ; Switch size 1, requested type "space"
 14385                           ; Number of cases is 5, Range of values is 0 to 117
 14386                           ; switch strategies available:
 14387                           ; Name         Instructions Cycles
 14388                           ; simple_byte           16     9 (average)
 14389                           ;	Chosen strategy is simple_byte
 14390  000E76  0A00               	xorlw	0	; case 0
 14391  000E78  B4D8               	btfsc	status,2,c
 14392  000E7A  0012               	return	
 14393  000E7C  0A64               	xorlw	100	; case 100
 14394  000E7E  B4D8               	btfsc	status,2,c
 14395  000E80  D00A               	goto	i2l967
 14396  000E82  0A0D               	xorlw	13	; case 105
 14397  000E84  B4D8               	btfsc	status,2,c
 14398  000E86  D007               	goto	i2l967
 14399  000E88  0A1A               	xorlw	26	; case 115
 14400  000E8A  B4D8               	btfsc	status,2,c
 14401  000E8C  D778               	goto	i2l4463
 14402  000E8E  0A06               	xorlw	6	; case 117
 14403  000E90  B4D8               	btfsc	status,2,c
 14404  000E92  D7E4               	goto	i2l4493
 14405  000E94  D0BC               	goto	i2l4569
 14406  000E96                     i2l967:
 14407                           
 14408                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14409  000E96  BC26               	btfsc	i2printf@flag,6,c
 14410  000E98  D015               	goto	i2l4509
 14411                           
 14412                           ;doprnt.c: 1253: {
 14413                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14414  000E9A  C020  FFD9         	movff	i2printf@ap,fsr2l
 14415  000E9E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 14416  000EA2  CFDE F024          	movff	postinc2,i2printf@val
 14417  000EA6  CFDD F025          	movff	postdec2,i2printf@val+1
 14418  000EAA  0E02               	movlw	2
 14419  000EAC  2620               	addwf	i2printf@ap,f,c
 14420  000EAE  0E00               	movlw	0
 14421  000EB0  2221               	addwfc	i2printf@ap+1,f,c
 14422                           
 14423                           ;doprnt.c: 1261: if((int)val < 0) {
 14424  000EB2  AE25               	btfss	i2printf@val+1,7,c
 14425  000EB4  D013               	goto	i2l4513
 14426                           
 14427                           ;doprnt.c: 1262: flag |= 0x03;
 14428  000EB6  0E03               	movlw	3
 14429  000EB8  1226               	iorwf	i2printf@flag,f,c
 14430                           
 14431                           ;doprnt.c: 1263: val = -val;
 14432  000EBA  6C24               	negf	i2printf@val,c
 14433  000EBC  1E25               	comf	i2printf@val+1,f,c
 14434  000EBE  B0D8               	btfsc	status,0,c
 14435  000EC0  2A25               	incf	i2printf@val+1,f,c
 14436                           
 14437                           ;doprnt.c: 1264: }
 14438                           ;doprnt.c: 1266: }
 14439  000EC2  D00C               	goto	i2l4513
 14440  000EC4                     i2l4509:
 14441                           
 14442                           ;doprnt.c: 1268: else
 14443                           ;doprnt.c: 1273: {
 14444                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14445  000EC4  C020  FFD9         	movff	i2printf@ap,fsr2l
 14446  000EC8  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 14447  000ECC  CFDE F024          	movff	postinc2,i2printf@val
 14448  000ED0  CFDD F025          	movff	postdec2,i2printf@val+1
 14449  000ED4  0E02               	movlw	2
 14450  000ED6  2620               	addwf	i2printf@ap,f,c
 14451  000ED8  0E00               	movlw	0
 14452  000EDA  2221               	addwfc	i2printf@ap+1,f,c
 14453  000EDC                     i2l4513:
 14454                           
 14455                           ;doprnt.c: 1287: }
 14456                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14457  000EDC  0E01               	movlw	1
 14458  000EDE  6E27               	movwf	i2printf@c,c
 14459  000EE0                     i2l4515:
 14460  000EE0  0E05               	movlw	5
 14461  000EE2  1827               	xorwf	i2printf@c,w,c
 14462  000EE4  B4D8               	btfsc	status,2,c
 14463  000EE6  D015               	goto	i2l4527
 14464                           
 14465                           ;doprnt.c: 1306: if(val < dpowers[c])
 14466  000EE8  5027               	movf	i2printf@c,w,c
 14467  000EEA  0D02               	mullw	2
 14468  000EEC  0EA4               	movlw	low _dpowers
 14469  000EEE  24F3               	addwf	prodl,w,c
 14470  000EF0  6EF6               	movwf	tblptrl,c
 14471  000EF2  0EFD               	movlw	high _dpowers
 14472  000EF4  20F4               	addwfc	prodh,w,c
 14473  000EF6  6EF7               	movwf	tblptrh,c
 14474  000EF8                     	if	1	;There are 3 active tblptr bytes
 14475  000EF8  6AF8               	clrf	tblptru,c
 14476  000EFA  0E00               	movlw	low (__mediumconst shr (0+16))
 14477  000EFC  22F8               	addwfc	tblptru,f,c
 14478  000EFE                     	endif
 14479  000EFE  0009               	tblrd		*+
 14480  000F00  50F5               	movf	tablat,w,c
 14481  000F02  5C24               	subwf	i2printf@val,w,c
 14482  000F04  0009               	tblrd		*+
 14483  000F06  50F5               	movf	tablat,w,c
 14484  000F08  5825               	subwfb	i2printf@val+1,w,c
 14485  000F0A  A0D8               	btfss	status,0,c
 14486  000F0C  D002               	goto	i2l4527
 14487                           
 14488                           ;doprnt.c: 1307: break;
 14489  000F0E  2A27               	incf	i2printf@c,f,c
 14490  000F10  D7E7               	goto	i2l4515
 14491  000F12                     i2l4527:
 14492                           
 14493                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14494  000F12  5028               	movf	i2printf@width,w,c
 14495  000F14  1029               	iorwf	i2printf@width+1,w,c
 14496  000F16  B4D8               	btfsc	status,2,c
 14497  000F18  D009               	goto	i2l4533
 14498  000F1A  C026  F019         	movff	i2printf@flag,??i2_printf
 14499  000F1E  0E03               	movlw	3
 14500  000F20  1619               	andwf	??i2_printf,f,c
 14501  000F22  B4D8               	btfsc	status,2,c
 14502  000F24  D003               	goto	i2l4533
 14503                           
 14504                           ;doprnt.c: 1346: width--;
 14505  000F26  0628               	decf	i2printf@width,f,c
 14506  000F28  A0D8               	btfss	status,0,c
 14507  000F2A  0629               	decf	i2printf@width+1,f,c
 14508  000F2C                     i2l4533:
 14509                           
 14510                           ;doprnt.c: 1381: if(width > c)
 14511  000F2C  0E80               	movlw	128
 14512  000F2E  BE27               	btfsc	i2printf@c,7,c
 14513  000F30  0E7F               	movlw	127
 14514  000F32  6E19               	movwf	??i2_printf& (0+255),c
 14515  000F34  5028               	movf	i2printf@width,w,c
 14516  000F36  5C27               	subwf	i2printf@c,w,c
 14517  000F38  5029               	movf	i2printf@width+1,w,c
 14518  000F3A  0A80               	xorlw	128
 14519  000F3C  5819               	subwfb	??i2_printf& (0+255),w,c
 14520  000F3E  B0D8               	btfsc	status,0,c
 14521  000F40  D007               	goto	i2l4537
 14522                           
 14523                           ;doprnt.c: 1382: width -= c;
 14524  000F42  5027               	movf	i2printf@c,w,c
 14525  000F44  5E28               	subwf	i2printf@width,f,c
 14526  000F46  0E00               	movlw	0
 14527  000F48  BE27               	btfsc	i2printf@c,7,c
 14528  000F4A  0EFF               	movlw	255
 14529  000F4C  5A29               	subwfb	i2printf@width+1,f,c
 14530  000F4E  D004               	goto	i2l4539
 14531  000F50                     i2l4537:
 14532                           
 14533                           ;doprnt.c: 1383: else
 14534                           ;doprnt.c: 1384: width = 0;
 14535  000F50  0E00               	movlw	0
 14536  000F52  6E29               	movwf	i2printf@width+1,c
 14537  000F54  0E00               	movlw	0
 14538  000F56  6E28               	movwf	i2printf@width,c
 14539  000F58                     i2l4539:
 14540                           
 14541                           ;doprnt.c: 1387: if(flag & 0x04) {
 14542  000F58  A426               	btfss	i2printf@flag,2,c
 14543  000F5A  D014               	goto	i2l4551
 14544                           
 14545                           ;doprnt.c: 1392: if(flag & 0x03)
 14546  000F5C  C026  F019         	movff	i2printf@flag,??i2_printf
 14547  000F60  0E03               	movlw	3
 14548  000F62  1619               	andwf	??i2_printf,f,c
 14549  000F64  B4D8               	btfsc	status,2,c
 14550  000F66  D003               	goto	i2l4545
 14551                           
 14552                           ;doprnt.c: 1393: (putch('-') );
 14553  000F68  0E2D               	movlw	45
 14554  000F6A  EC45  F019         	call	i2_putch
 14555  000F6E                     i2l4545:
 14556                           
 14557                           ;doprnt.c: 1415: if(width)
 14558  000F6E  5028               	movf	i2printf@width,w,c
 14559  000F70  1029               	iorwf	i2printf@width+1,w,c
 14560  000F72  B4D8               	btfsc	status,2,c
 14561  000F74  D01E               	goto	i2l4561
 14562                           
 14563                           ;doprnt.c: 1417: (putch('0') );
 14564                           
 14565                           ;doprnt.c: 1416: do
 14566  000F76  0E30               	movlw	48
 14567  000F78  EC45  F019         	call	i2_putch
 14568                           
 14569                           ;doprnt.c: 1418: while(--width);
 14570  000F7C  0628               	decf	i2printf@width,f,c
 14571  000F7E  A0D8               	btfss	status,0,c
 14572  000F80  0629               	decf	i2printf@width+1,f,c
 14573  000F82  D7F5               	goto	i2l4545
 14574  000F84                     i2l4551:
 14575                           
 14576                           ;doprnt.c: 1422: {
 14577                           ;doprnt.c: 1424: if(width
 14578                           ;doprnt.c: 1428: )
 14579  000F84  5028               	movf	i2printf@width,w,c
 14580  000F86  1029               	iorwf	i2printf@width+1,w,c
 14581  000F88  B4D8               	btfsc	status,2,c
 14582  000F8A  D00A               	goto	i2l4557
 14583  000F8C                     i2l4553:
 14584                           
 14585                           ;doprnt.c: 1430: (putch(' ') );
 14586  000F8C  0E20               	movlw	32
 14587  000F8E  EC45  F019         	call	i2_putch
 14588                           
 14589                           ;doprnt.c: 1431: while(--width);
 14590  000F92  0628               	decf	i2printf@width,f,c
 14591  000F94  A0D8               	btfss	status,0,c
 14592  000F96  0629               	decf	i2printf@width+1,f,c
 14593  000F98  5028               	movf	i2printf@width,w,c
 14594  000F9A  1029               	iorwf	i2printf@width+1,w,c
 14595  000F9C  A4D8               	btfss	status,2,c
 14596  000F9E  D7F6               	goto	i2l4553
 14597  000FA0                     i2l4557:
 14598                           
 14599                           ;doprnt.c: 1438: if(flag & 0x03)
 14600  000FA0  C026  F019         	movff	i2printf@flag,??i2_printf
 14601  000FA4  0E03               	movlw	3
 14602  000FA6  1619               	andwf	??i2_printf,f,c
 14603  000FA8  B4D8               	btfsc	status,2,c
 14604  000FAA  D003               	goto	i2l4561
 14605                           
 14606                           ;doprnt.c: 1439: (putch('-') );
 14607  000FAC  0E2D               	movlw	45
 14608  000FAE  EC45  F019         	call	i2_putch
 14609  000FB2                     i2l4561:
 14610                           
 14611                           ;doprnt.c: 1469: }
 14612                           ;doprnt.c: 1472: prec = c;
 14613  000FB2  C027  F01D         	movff	i2printf@c,i2printf@prec
 14614                           
 14615                           ;doprnt.c: 1474: while(prec--) {
 14616  000FB6  D027               	goto	i2l4567
 14617  000FB8                     i2l4563:
 14618                           
 14619                           ;doprnt.c: 1478: {
 14620                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14621  000FB8  501D               	movf	i2printf@prec,w,c
 14622  000FBA  0D02               	mullw	2
 14623  000FBC  0EA4               	movlw	low _dpowers
 14624  000FBE  24F3               	addwf	prodl,w,c
 14625  000FC0  6EF6               	movwf	tblptrl,c
 14626  000FC2  0EFD               	movlw	high _dpowers
 14627  000FC4  20F4               	addwfc	prodh,w,c
 14628  000FC6  6EF7               	movwf	tblptrh,c
 14629  000FC8                     	if	1	;There are 3 active tblptr bytes
 14630  000FC8  6AF8               	clrf	tblptru,c
 14631  000FCA  0E00               	movlw	low (__mediumconst shr (0+16))
 14632  000FCC  22F8               	addwfc	tblptru,f,c
 14633  000FCE                     	endif
 14634  000FCE  0009               	tblrd		*+
 14635  000FD0  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 14636  000FD4  000A               	tblrd		*-
 14637  000FD6  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 14638  000FDA  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 14639  000FDE  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 14640  000FE2  ECBC  F015         	call	i2___lwdiv	;wreg free
 14641  000FE6  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 14642  000FEA  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 14643  000FEE  0E00               	movlw	0
 14644  000FF0  6E04               	movwf	i2___lwmod@divisor+1,c
 14645  000FF2  0E0A               	movlw	10
 14646  000FF4  6E03               	movwf	i2___lwmod@divisor,c
 14647  000FF6  EC79  F016         	call	i2___lwmod	;wreg free
 14648  000FFA  5001               	movf	?i2___lwmod,w,c
 14649  000FFC  0F30               	addlw	48
 14650  000FFE  6E27               	movwf	i2printf@c,c
 14651                           
 14652                           ;doprnt.c: 1523: }
 14653                           ;doprnt.c: 1524: (putch(c) );
 14654  001000  5027               	movf	i2printf@c,w,c
 14655  001002  EC45  F019         	call	i2_putch
 14656  001006                     i2l4567:
 14657  001006  061D               	decf	i2printf@prec,f,c
 14658  001008  281D               	incf	i2printf@prec,w,c
 14659  00100A  A4D8               	btfss	status,2,c
 14660  00100C  D7D5               	goto	i2l4563
 14661  00100E                     i2l4569:
 14662  00100E  C00D  FFF6         	movff	i2printf@f,tblptrl
 14663  001012  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14664  001016  4A0D               	infsnz	i2printf@f,f,c
 14665  001018  2A0E               	incf	i2printf@f+1,f,c
 14666  00101A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14667  00101A  6AF8               	clrf	tblptru,c
 14668  00101C                     	endif
 14669  00101C                     	if	0	;tblptru may be non-zero
 14670  00101C                     	endif
 14671  00101C  0008               	tblrd		*
 14672  00101E  CFF5 F027          	movff	tablat,i2printf@c
 14673  001022  5027               	movf	i2printf@c,w,c
 14674  001024  B4D8               	btfsc	status,2,c
 14675  001026  0012               	return	
 14676  001028  D64E               	goto	i2l4439
 14677  00102A                     __end_ofi2_printf:
 14678                           	opt stack 0
 14679                           pclatu	equ	0xFFB
 14680                           pclath	equ	0xFFA
 14681                           tblptru	equ	0xFF8
 14682                           tblptrh	equ	0xFF7
 14683                           tblptrl	equ	0xFF6
 14684                           tablat	equ	0xFF5
 14685                           prodh	equ	0xFF4
 14686                           prodl	equ	0xFF3
 14687                           intcon	equ	0xFF2
 14688                           intcon2	equ	0xFF1
 14689                           intcon3	equ	0xFF0
 14690                           indf0	equ	0xFEF
 14691                           postinc0	equ	0xFEE
 14692                           fsr0h	equ	0xFEA
 14693                           fsr0l	equ	0xFE9
 14694                           wreg	equ	0xFE8
 14695                           postdec1	equ	0xFE5
 14696                           fsr1h	equ	0xFE2
 14697                           fsr1l	equ	0xFE1
 14698                           indf2	equ	0xFDF
 14699                           postinc2	equ	0xFDE
 14700                           postdec2	equ	0xFDD
 14701                           fsr2h	equ	0xFDA
 14702                           fsr2l	equ	0xFD9
 14703                           status	equ	0xFD8
 14704                           
 14705 ;; *************** function i2_putch *****************
 14706 ;; Defined at:
 14707 ;;		line 20 in file "lcd.c"
 14708 ;; Parameters:    Size  Location     Type
 14709 ;;  data            1    wreg     unsigned char 
 14710 ;; Auto vars:     Size  Location     Type
 14711 ;;  data            1    2[COMRAM] unsigned char 
 14712 ;; Return value:  Size  Location     Type
 14713 ;;                  1    wreg      void 
 14714 ;; Registers used:
 14715 ;;		wreg, status,2, status,0, cstack
 14716 ;; Tracked objects:
 14717 ;;		On entry : 0/0
 14718 ;;		On exit  : 0/0
 14719 ;;		Unchanged: 0/0
 14720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14724 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14725 ;;Total ram usage:        1 bytes
 14726 ;; Hardware stack levels used:    1
 14727 ;; Hardware stack levels required when called:    1
 14728 ;; This function calls:
 14729 ;;		i2_lcdNibble
 14730 ;; This function is called by:
 14731 ;;		i2_printf
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           	psect	text66
 14736  00328A                     __ptext66:
 14737                           	opt stack 0
 14738  00328A                     i2_putch:
 14739                           	opt stack 19
 14740                           
 14741                           ;incstack = 0
 14742                           ;i2putch@data stored from wreg
 14743  00328A  6E03               	movwf	i2putch@data,c
 14744                           
 14745                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14746  00328C  848C               	bsf	3980,2,c	;volatile
 14747                           
 14748                           ;lcd.c: 22: lcdNibble(data);
 14749  00328E  5003               	movf	i2putch@data,w,c
 14750  003290  EC91  F015         	call	i2_lcdNibble
 14751  003294  0012               	return		;funcret
 14752  003296                     __end_ofi2_putch:
 14753                           	opt stack 0
 14754                           pclatu	equ	0xFFB
 14755                           pclath	equ	0xFFA
 14756                           tblptru	equ	0xFF8
 14757                           tblptrh	equ	0xFF7
 14758                           tblptrl	equ	0xFF6
 14759                           tablat	equ	0xFF5
 14760                           prodh	equ	0xFF4
 14761                           prodl	equ	0xFF3
 14762                           intcon	equ	0xFF2
 14763                           intcon2	equ	0xFF1
 14764                           intcon3	equ	0xFF0
 14765                           indf0	equ	0xFEF
 14766                           postinc0	equ	0xFEE
 14767                           fsr0h	equ	0xFEA
 14768                           fsr0l	equ	0xFE9
 14769                           wreg	equ	0xFE8
 14770                           postdec1	equ	0xFE5
 14771                           fsr1h	equ	0xFE2
 14772                           fsr1l	equ	0xFE1
 14773                           indf2	equ	0xFDF
 14774                           postinc2	equ	0xFDE
 14775                           postdec2	equ	0xFDD
 14776                           fsr2h	equ	0xFDA
 14777                           fsr2l	equ	0xFD9
 14778                           status	equ	0xFD8
 14779                           
 14780 ;; *************** function i2_isdigit *****************
 14781 ;; Defined at:
 14782 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14783 ;; Parameters:    Size  Location     Type
 14784 ;;  c               1    wreg     unsigned char 
 14785 ;; Auto vars:     Size  Location     Type
 14786 ;;  c               1    2[COMRAM] unsigned char 
 14787 ;; Return value:  Size  Location     Type
 14788 ;;		None               void
 14789 ;; Registers used:
 14790 ;;		wreg, status,2, status,0
 14791 ;; Tracked objects:
 14792 ;;		On entry : 0/0
 14793 ;;		On exit  : 0/0
 14794 ;;		Unchanged: 0/0
 14795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14797 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14799 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14800 ;;Total ram usage:        3 bytes
 14801 ;; Hardware stack levels used:    1
 14802 ;; This function calls:
 14803 ;;		Nothing
 14804 ;; This function is called by:
 14805 ;;		i2_printf
 14806 ;; This function uses a non-reentrant model
 14807 ;;
 14808                           
 14809                           	psect	text67
 14810  0031D0                     __ptext67:
 14811                           	opt stack 0
 14812  0031D0                     i2_isdigit:
 14813                           	opt stack 20
 14814                           
 14815                           ;incstack = 0
 14816                           ;i2isdigit@c stored from wreg
 14817  0031D0  6E03               	movwf	i2isdigit@c,c
 14818  0031D2  0E00               	movlw	0
 14819  0031D4  6E02               	movwf	i2_isdigit$1632,c
 14820  0031D6  0E3A               	movlw	58
 14821  0031D8  6003               	cpfslt	i2isdigit@c,c
 14822  0031DA  D005               	goto	i2l4159
 14823  0031DC  0E2F               	movlw	47
 14824  0031DE  6403               	cpfsgt	i2isdigit@c,c
 14825  0031E0  D002               	goto	i2l4159
 14826  0031E2  0E01               	movlw	1
 14827  0031E4  6E02               	movwf	i2_isdigit$1632,c
 14828  0031E6                     i2l4159:
 14829  0031E6  C002  F001         	movff	i2_isdigit$1632,??i2_isdigit
 14830  0031EA  3001               	rrcf	??i2_isdigit,w,c
 14831  0031EC  0012               	return	
 14832  0031EE                     __end_ofi2_isdigit:
 14833                           	opt stack 0
 14834                           pclatu	equ	0xFFB
 14835                           pclath	equ	0xFFA
 14836                           tblptru	equ	0xFF8
 14837                           tblptrh	equ	0xFF7
 14838                           tblptrl	equ	0xFF6
 14839                           tablat	equ	0xFF5
 14840                           prodh	equ	0xFF4
 14841                           prodl	equ	0xFF3
 14842                           intcon	equ	0xFF2
 14843                           intcon2	equ	0xFF1
 14844                           intcon3	equ	0xFF0
 14845                           indf0	equ	0xFEF
 14846                           postinc0	equ	0xFEE
 14847                           fsr0h	equ	0xFEA
 14848                           fsr0l	equ	0xFE9
 14849                           wreg	equ	0xFE8
 14850                           postdec1	equ	0xFE5
 14851                           fsr1h	equ	0xFE2
 14852                           fsr1l	equ	0xFE1
 14853                           indf2	equ	0xFDF
 14854                           postinc2	equ	0xFDE
 14855                           postdec2	equ	0xFDD
 14856                           fsr2h	equ	0xFDA
 14857                           fsr2l	equ	0xFD9
 14858                           status	equ	0xFD8
 14859                           
 14860 ;; *************** function i2___wmul *****************
 14861 ;; Defined at:
 14862 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14863 ;; Parameters:    Size  Location     Type
 14864 ;;  multiplier      2    0[COMRAM] unsigned int 
 14865 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14866 ;; Auto vars:     Size  Location     Type
 14867 ;;  __wmul          2    4[COMRAM] unsigned int 
 14868 ;; Return value:  Size  Location     Type
 14869 ;;                  2    0[COMRAM] unsigned int 
 14870 ;; Registers used:
 14871 ;;		wreg, status,2, status,0, prodl, prodh
 14872 ;; Tracked objects:
 14873 ;;		On entry : 0/0
 14874 ;;		On exit  : 0/0
 14875 ;;		Unchanged: 0/0
 14876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14877 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14878 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14880 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14881 ;;Total ram usage:        6 bytes
 14882 ;; Hardware stack levels used:    1
 14883 ;; This function calls:
 14884 ;;		Nothing
 14885 ;; This function is called by:
 14886 ;;		_printSortTimer
 14887 ;;		_retrieveLog
 14888 ;;		i2_printf
 14889 ;; This function uses a non-reentrant model
 14890 ;;
 14891                           
 14892                           	psect	text68
 14893  0030F8                     __ptext68:
 14894                           	opt stack 0
 14895  0030F8                     i2___wmul:
 14896                           	opt stack 20
 14897                           
 14898                           ;incstack = 0
 14899  0030F8  5001               	movf	i2___wmul@multiplier,w,c
 14900  0030FA  0203               	mulwf	i2___wmul@multiplicand,c
 14901  0030FC  CFF3 F005          	movff	prodl,i2___wmul@product
 14902  003100  CFF4 F006          	movff	prodh,i2___wmul@product+1
 14903  003104  5001               	movf	i2___wmul@multiplier,w,c
 14904  003106  0204               	mulwf	i2___wmul@multiplicand+1,c
 14905  003108  50F3               	movf	prodl,w,c
 14906  00310A  2606               	addwf	i2___wmul@product+1,f,c
 14907  00310C  5002               	movf	i2___wmul@multiplier+1,w,c
 14908  00310E  0203               	mulwf	i2___wmul@multiplicand,c
 14909  003110  50F3               	movf	prodl,w,c
 14910  003112  2606               	addwf	i2___wmul@product+1,f,c
 14911  003114  C005  F001         	movff	i2___wmul@product,?i2___wmul
 14912  003118  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 14913  00311C  0012               	return	
 14914  00311E                     __end_ofi2___wmul:
 14915                           	opt stack 0
 14916                           pclatu	equ	0xFFB
 14917                           pclath	equ	0xFFA
 14918                           tblptru	equ	0xFF8
 14919                           tblptrh	equ	0xFF7
 14920                           tblptrl	equ	0xFF6
 14921                           tablat	equ	0xFF5
 14922                           prodh	equ	0xFF4
 14923                           prodl	equ	0xFF3
 14924                           intcon	equ	0xFF2
 14925                           intcon2	equ	0xFF1
 14926                           intcon3	equ	0xFF0
 14927                           indf0	equ	0xFEF
 14928                           postinc0	equ	0xFEE
 14929                           fsr0h	equ	0xFEA
 14930                           fsr0l	equ	0xFE9
 14931                           wreg	equ	0xFE8
 14932                           postdec1	equ	0xFE5
 14933                           fsr1h	equ	0xFE2
 14934                           fsr1l	equ	0xFE1
 14935                           indf2	equ	0xFDF
 14936                           postinc2	equ	0xFDE
 14937                           postdec2	equ	0xFDD
 14938                           fsr2h	equ	0xFDA
 14939                           fsr2l	equ	0xFD9
 14940                           status	equ	0xFD8
 14941                           
 14942 ;; *************** function i2___lwmod *****************
 14943 ;; Defined at:
 14944 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14945 ;; Parameters:    Size  Location     Type
 14946 ;;  dividend        2    0[COMRAM] unsigned int 
 14947 ;;  divisor         2    2[COMRAM] unsigned int 
 14948 ;; Auto vars:     Size  Location     Type
 14949 ;;  __lwmod         1    4[COMRAM] unsigned char 
 14950 ;; Return value:  Size  Location     Type
 14951 ;;                  2    0[COMRAM] unsigned int 
 14952 ;; Registers used:
 14953 ;;		wreg, status,2, status,0
 14954 ;; Tracked objects:
 14955 ;;		On entry : 0/0
 14956 ;;		On exit  : 0/0
 14957 ;;		Unchanged: 0/0
 14958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14959 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14962 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14963 ;;Total ram usage:        5 bytes
 14964 ;; Hardware stack levels used:    1
 14965 ;; This function calls:
 14966 ;;		Nothing
 14967 ;; This function is called by:
 14968 ;;		_printSortTimer
 14969 ;;		i2_printf
 14970 ;; This function uses a non-reentrant model
 14971 ;;
 14972                           
 14973                           	psect	text69
 14974  002CF2                     __ptext69:
 14975                           	opt stack 0
 14976  002CF2                     i2___lwmod:
 14977                           	opt stack 20
 14978                           
 14979                           ;incstack = 0
 14980  002CF2  5003               	movf	i2___lwmod@divisor,w,c
 14981  002CF4  1004               	iorwf	i2___lwmod@divisor+1,w,c
 14982  002CF6  B4D8               	btfsc	status,2,c
 14983  002CF8  D018               	goto	i2l1424
 14984  002CFA  0E01               	movlw	1
 14985  002CFC  6E05               	movwf	i2___lwmod@counter,c
 14986  002CFE  D004               	goto	i2l4191
 14987  002D00                     i2l4189:
 14988  002D00  90D8               	bcf	status,0,c
 14989  002D02  3603               	rlcf	i2___lwmod@divisor,f,c
 14990  002D04  3604               	rlcf	i2___lwmod@divisor+1,f,c
 14991  002D06  2A05               	incf	i2___lwmod@counter,f,c
 14992  002D08                     i2l4191:
 14993  002D08  AE04               	btfss	i2___lwmod@divisor+1,7,c
 14994  002D0A  D7FA               	goto	i2l4189
 14995  002D0C                     i2l4193:
 14996  002D0C  5003               	movf	i2___lwmod@divisor,w,c
 14997  002D0E  5C01               	subwf	i2___lwmod@dividend,w,c
 14998  002D10  5004               	movf	i2___lwmod@divisor+1,w,c
 14999  002D12  5802               	subwfb	i2___lwmod@dividend+1,w,c
 15000  002D14  A0D8               	btfss	status,0,c
 15001  002D16  D004               	goto	i2l4197
 15002  002D18  5003               	movf	i2___lwmod@divisor,w,c
 15003  002D1A  5E01               	subwf	i2___lwmod@dividend,f,c
 15004  002D1C  5004               	movf	i2___lwmod@divisor+1,w,c
 15005  002D1E  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 15006  002D20                     i2l4197:
 15007  002D20  90D8               	bcf	status,0,c
 15008  002D22  3204               	rrcf	i2___lwmod@divisor+1,f,c
 15009  002D24  3203               	rrcf	i2___lwmod@divisor,f,c
 15010  002D26  2E05               	decfsz	i2___lwmod@counter,f,c
 15011  002D28  D7F1               	goto	i2l4193
 15012  002D2A                     i2l1424:
 15013  002D2A  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 15014  002D2E  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 15015  002D32  0012               	return		;funcret
 15016  002D34                     __end_ofi2___lwmod:
 15017                           	opt stack 0
 15018                           pclatu	equ	0xFFB
 15019                           pclath	equ	0xFFA
 15020                           tblptru	equ	0xFF8
 15021                           tblptrh	equ	0xFF7
 15022                           tblptrl	equ	0xFF6
 15023                           tablat	equ	0xFF5
 15024                           prodh	equ	0xFF4
 15025                           prodl	equ	0xFF3
 15026                           intcon	equ	0xFF2
 15027                           intcon2	equ	0xFF1
 15028                           intcon3	equ	0xFF0
 15029                           indf0	equ	0xFEF
 15030                           postinc0	equ	0xFEE
 15031                           fsr0h	equ	0xFEA
 15032                           fsr0l	equ	0xFE9
 15033                           wreg	equ	0xFE8
 15034                           postdec1	equ	0xFE5
 15035                           fsr1h	equ	0xFE2
 15036                           fsr1l	equ	0xFE1
 15037                           indf2	equ	0xFDF
 15038                           postinc2	equ	0xFDE
 15039                           postdec2	equ	0xFDD
 15040                           fsr2h	equ	0xFDA
 15041                           fsr2l	equ	0xFD9
 15042                           status	equ	0xFD8
 15043                           
 15044 ;; *************** function i2___lwdiv *****************
 15045 ;; Defined at:
 15046 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15047 ;; Parameters:    Size  Location     Type
 15048 ;;  dividend        2    5[COMRAM] unsigned int 
 15049 ;;  divisor         2    7[COMRAM] unsigned int 
 15050 ;; Auto vars:     Size  Location     Type
 15051 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 15052 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 15053 ;; Return value:  Size  Location     Type
 15054 ;;                  2    5[COMRAM] unsigned int 
 15055 ;; Registers used:
 15056 ;;		wreg, status,2, status,0
 15057 ;; Tracked objects:
 15058 ;;		On entry : 0/0
 15059 ;;		On exit  : 0/0
 15060 ;;		Unchanged: 0/0
 15061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15063 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15065 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15066 ;;Total ram usage:        7 bytes
 15067 ;; Hardware stack levels used:    1
 15068 ;; This function calls:
 15069 ;;		Nothing
 15070 ;; This function is called by:
 15071 ;;		_printSortTimer
 15072 ;;		i2_printf
 15073 ;; This function uses a non-reentrant model
 15074 ;;
 15075                           
 15076                           	psect	text70
 15077  002B78                     __ptext70:
 15078                           	opt stack 0
 15079  002B78                     i2___lwdiv:
 15080                           	opt stack 20
 15081                           
 15082                           ;incstack = 0
 15083  002B78  0E00               	movlw	0
 15084  002B7A  6E0B               	movwf	i2___lwdiv@quotient+1,c
 15085  002B7C  0E00               	movlw	0
 15086  002B7E  6E0A               	movwf	i2___lwdiv@quotient,c
 15087  002B80  5008               	movf	i2___lwdiv@divisor,w,c
 15088  002B82  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 15089  002B84  B4D8               	btfsc	status,2,c
 15090  002B86  D01C               	goto	i2l1414
 15091  002B88  0E01               	movlw	1
 15092  002B8A  6E0C               	movwf	i2___lwdiv@counter,c
 15093  002B8C  D004               	goto	i2l4171
 15094  002B8E                     i2l4169:
 15095  002B8E  90D8               	bcf	status,0,c
 15096  002B90  3608               	rlcf	i2___lwdiv@divisor,f,c
 15097  002B92  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 15098  002B94  2A0C               	incf	i2___lwdiv@counter,f,c
 15099  002B96                     i2l4171:
 15100  002B96  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 15101  002B98  D7FA               	goto	i2l4169
 15102  002B9A                     i2l4173:
 15103  002B9A  90D8               	bcf	status,0,c
 15104  002B9C  360A               	rlcf	i2___lwdiv@quotient,f,c
 15105  002B9E  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 15106  002BA0  5008               	movf	i2___lwdiv@divisor,w,c
 15107  002BA2  5C06               	subwf	i2___lwdiv@dividend,w,c
 15108  002BA4  5009               	movf	i2___lwdiv@divisor+1,w,c
 15109  002BA6  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 15110  002BA8  A0D8               	btfss	status,0,c
 15111  002BAA  D005               	goto	i2l4181
 15112  002BAC  5008               	movf	i2___lwdiv@divisor,w,c
 15113  002BAE  5E06               	subwf	i2___lwdiv@dividend,f,c
 15114  002BB0  5009               	movf	i2___lwdiv@divisor+1,w,c
 15115  002BB2  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 15116  002BB4  800A               	bsf	i2___lwdiv@quotient,0,c
 15117  002BB6                     i2l4181:
 15118  002BB6  90D8               	bcf	status,0,c
 15119  002BB8  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 15120  002BBA  3208               	rrcf	i2___lwdiv@divisor,f,c
 15121  002BBC  2E0C               	decfsz	i2___lwdiv@counter,f,c
 15122  002BBE  D7ED               	goto	i2l4173
 15123  002BC0                     i2l1414:
 15124  002BC0  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 15125  002BC4  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 15126  002BC8  0012               	return		;funcret
 15127  002BCA                     __end_ofi2___lwdiv:
 15128                           	opt stack 0
 15129                           pclatu	equ	0xFFB
 15130                           pclath	equ	0xFFA
 15131                           tblptru	equ	0xFF8
 15132                           tblptrh	equ	0xFF7
 15133                           tblptrl	equ	0xFF6
 15134                           tablat	equ	0xFF5
 15135                           prodh	equ	0xFF4
 15136                           prodl	equ	0xFF3
 15137                           intcon	equ	0xFF2
 15138                           intcon2	equ	0xFF1
 15139                           intcon3	equ	0xFF0
 15140                           indf0	equ	0xFEF
 15141                           postinc0	equ	0xFEE
 15142                           fsr0h	equ	0xFEA
 15143                           fsr0l	equ	0xFE9
 15144                           wreg	equ	0xFE8
 15145                           postdec1	equ	0xFE5
 15146                           fsr1h	equ	0xFE2
 15147                           fsr1l	equ	0xFE1
 15148                           indf2	equ	0xFDF
 15149                           postinc2	equ	0xFDE
 15150                           postdec2	equ	0xFDD
 15151                           fsr2h	equ	0xFDA
 15152                           fsr2l	equ	0xFD9
 15153                           status	equ	0xFD8
 15154                           
 15155 ;; *************** function i2_lcdInst *****************
 15156 ;; Defined at:
 15157 ;;		line 15 in file "lcd.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;  data            1    wreg     unsigned char 
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;  data            1    2[COMRAM] unsigned char 
 15162 ;; Return value:  Size  Location     Type
 15163 ;;                  1    wreg      void 
 15164 ;; Registers used:
 15165 ;;		wreg, status,2, status,0, cstack
 15166 ;; Tracked objects:
 15167 ;;		On entry : 0/0
 15168 ;;		On exit  : 0/0
 15169 ;;		Unchanged: 0/0
 15170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15174 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;Total ram usage:        1 bytes
 15176 ;; Hardware stack levels used:    1
 15177 ;; Hardware stack levels required when called:    1
 15178 ;; This function calls:
 15179 ;;		i2_lcdNibble
 15180 ;; This function is called by:
 15181 ;;		_change_state_to_menu_11
 15182 ;;		_change_state_to_menu_23
 15183 ;;		_change_state_to_logs_11
 15184 ;;		_change_state_to_logs_12
 15185 ;;		_change_state_to_logs_22
 15186 ;;		_change_state_to_logs_23
 15187 ;;		_change_state_to_logs_33
 15188 ;;		_change_state_to_logs_34
 15189 ;;		_printSortTimer
 15190 ;;		i2_change_state_to_menu_start
 15191 ;;		i2_change_state_to_menu_12
 15192 ;;		i2_change_state_to_menu_22
 15193 ;;		i2_printRTC
 15194 ;; This function uses a non-reentrant model
 15195 ;;
 15196                           
 15197                           	psect	text71
 15198  003296                     __ptext71:
 15199                           	opt stack 0
 15200  003296                     i2_lcdInst:
 15201                           	opt stack 19
 15202                           
 15203                           ;incstack = 0
 15204                           ;i2lcdInst@data stored from wreg
 15205  003296  6E03               	movwf	i2lcdInst@data,c
 15206                           
 15207                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15208  003298  948C               	bcf	3980,2,c	;volatile
 15209                           
 15210                           ;lcd.c: 17: lcdNibble(data);
 15211  00329A  5003               	movf	i2lcdInst@data,w,c
 15212  00329C  EC91  F015         	call	i2_lcdNibble
 15213  0032A0  0012               	return		;funcret
 15214  0032A2                     __end_ofi2_lcdInst:
 15215                           	opt stack 0
 15216                           pclatu	equ	0xFFB
 15217                           pclath	equ	0xFFA
 15218                           tblptru	equ	0xFF8
 15219                           tblptrh	equ	0xFF7
 15220                           tblptrl	equ	0xFF6
 15221                           tablat	equ	0xFF5
 15222                           prodh	equ	0xFF4
 15223                           prodl	equ	0xFF3
 15224                           intcon	equ	0xFF2
 15225                           intcon2	equ	0xFF1
 15226                           intcon3	equ	0xFF0
 15227                           indf0	equ	0xFEF
 15228                           postinc0	equ	0xFEE
 15229                           fsr0h	equ	0xFEA
 15230                           fsr0l	equ	0xFE9
 15231                           wreg	equ	0xFE8
 15232                           postdec1	equ	0xFE5
 15233                           fsr1h	equ	0xFE2
 15234                           fsr1l	equ	0xFE1
 15235                           indf2	equ	0xFDF
 15236                           postinc2	equ	0xFDE
 15237                           postdec2	equ	0xFDD
 15238                           fsr2h	equ	0xFDA
 15239                           fsr2l	equ	0xFD9
 15240                           status	equ	0xFD8
 15241                           
 15242 ;; *************** function i2_lcdNibble *****************
 15243 ;; Defined at:
 15244 ;;		line 25 in file "lcd.c"
 15245 ;; Parameters:    Size  Location     Type
 15246 ;;  data            1    wreg     unsigned char 
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;  data            1    1[COMRAM] unsigned char 
 15249 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 15250 ;; Return value:  Size  Location     Type
 15251 ;;                  1    wreg      void 
 15252 ;; Registers used:
 15253 ;;		wreg, status,2, status,0
 15254 ;; Tracked objects:
 15255 ;;		On entry : 0/0
 15256 ;;		On exit  : 0/0
 15257 ;;		Unchanged: 0/0
 15258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;Total ram usage:        2 bytes
 15264 ;; Hardware stack levels used:    1
 15265 ;; This function calls:
 15266 ;;		Nothing
 15267 ;; This function is called by:
 15268 ;;		i2_lcdInst
 15269 ;;		i2_putch
 15270 ;; This function uses a non-reentrant model
 15271 ;;
 15272                           
 15273                           	psect	text72
 15274  002B22                     __ptext72:
 15275                           	opt stack 0
 15276  002B22                     i2_lcdNibble:
 15277                           	opt stack 19
 15278                           
 15279                           ;incstack = 0
 15280                           ;i2lcdNibble@data stored from wreg
 15281  002B22  6E02               	movwf	i2lcdNibble@data,c
 15282                           
 15283                           ;lcd.c: 27: char temp = data & 0xF0;
 15284  002B24  5002               	movf	i2lcdNibble@data,w,c
 15285  002B26  0BF0               	andlw	240
 15286  002B28  6E01               	movwf	i2lcdNibble@temp,c
 15287                           
 15288                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15289  002B2A  508C               	movf	3980,w,c	;volatile
 15290  002B2C  0B0F               	andlw	15
 15291  002B2E  6E8C               	movwf	3980,c	;volatile
 15292                           
 15293                           ;lcd.c: 29: LATD = temp | LATD;
 15294  002B30  5001               	movf	i2lcdNibble@temp,w,c
 15295  002B32  108C               	iorwf	3980,w,c	;volatile
 15296  002B34  6E8C               	movwf	3980,c	;volatile
 15297                           
 15298                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15299  002B36  868C               	bsf	3980,3,c	;volatile
 15300                           
 15301                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15302  002B38  0E42               	movlw	66
 15303  002B3A                     i2u549_47:
 15304  002B3A  2EE8               	decfsz	wreg,f,c
 15305  002B3C  D7FE               	bra	i2u549_47
 15306  002B3E  D000               	nop2	
 15307                           
 15308                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15309  002B40  968C               	bcf	3980,3,c	;volatile
 15310                           
 15311                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15312  002B42  0E42               	movlw	66
 15313  002B44                     i2u550_47:
 15314  002B44  2EE8               	decfsz	wreg,f,c
 15315  002B46  D7FE               	bra	i2u550_47
 15316  002B48  D000               	nop2	
 15317                           
 15318                           ;lcd.c: 36: data = data << 4;
 15319  002B4A  3802               	swapf	i2lcdNibble@data,w,c
 15320  002B4C  0BF0               	andlw	240
 15321  002B4E  6E02               	movwf	i2lcdNibble@data,c
 15322                           
 15323                           ;lcd.c: 38: temp = data & 0xF0;
 15324  002B50  5002               	movf	i2lcdNibble@data,w,c
 15325  002B52  0BF0               	andlw	240
 15326  002B54  6E01               	movwf	i2lcdNibble@temp,c
 15327                           
 15328                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15329  002B56  508C               	movf	3980,w,c	;volatile
 15330  002B58  0B0F               	andlw	15
 15331  002B5A  6E8C               	movwf	3980,c	;volatile
 15332                           
 15333                           ;lcd.c: 40: LATD = temp | LATD;
 15334  002B5C  5001               	movf	i2lcdNibble@temp,w,c
 15335  002B5E  108C               	iorwf	3980,w,c	;volatile
 15336  002B60  6E8C               	movwf	3980,c	;volatile
 15337                           
 15338                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15339  002B62  868C               	bsf	3980,3,c	;volatile
 15340                           
 15341                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15342  002B64  0E42               	movlw	66
 15343  002B66                     i2u551_47:
 15344  002B66  2EE8               	decfsz	wreg,f,c
 15345  002B68  D7FE               	bra	i2u551_47
 15346  002B6A  D000               	nop2	
 15347                           
 15348                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15349  002B6C  968C               	bcf	3980,3,c	;volatile
 15350                           
 15351                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15352  002B6E  0E42               	movlw	66
 15353  002B70                     i2u552_47:
 15354  002B70  2EE8               	decfsz	wreg,f,c
 15355  002B72  D7FE               	bra	i2u552_47
 15356  002B74  D000               	nop2	
 15357  002B76  0012               	return		;funcret
 15358  002B78                     __end_ofi2_lcdNibble:
 15359                           	opt stack 0
 15360                           pclatu	equ	0xFFB
 15361                           pclath	equ	0xFFA
 15362                           tblptru	equ	0xFF8
 15363                           tblptrh	equ	0xFF7
 15364                           tblptrl	equ	0xFF6
 15365                           tablat	equ	0xFF5
 15366                           prodh	equ	0xFF4
 15367                           prodl	equ	0xFF3
 15368                           intcon	equ	0xFF2
 15369                           intcon2	equ	0xFF1
 15370                           intcon3	equ	0xFF0
 15371                           indf0	equ	0xFEF
 15372                           postinc0	equ	0xFEE
 15373                           fsr0h	equ	0xFEA
 15374                           fsr0l	equ	0xFE9
 15375                           wreg	equ	0xFE8
 15376                           postdec1	equ	0xFE5
 15377                           fsr1h	equ	0xFE2
 15378                           fsr1l	equ	0xFE1
 15379                           indf2	equ	0xFDF
 15380                           postinc2	equ	0xFDE
 15381                           postdec2	equ	0xFDD
 15382                           fsr2h	equ	0xFDA
 15383                           fsr2l	equ	0xFD9
 15384                           status	equ	0xFD8
 15385                           
 15386 ;; *************** function i2_getRTC *****************
 15387 ;; Defined at:
 15388 ;;		line 44 in file "RTC.c"
 15389 ;; Parameters:    Size  Location     Type
 15390 ;;		None
 15391 ;; Auto vars:     Size  Location     Type
 15392 ;;  getRTC          2    3[COMRAM] int 
 15393 ;; Return value:  Size  Location     Type
 15394 ;;                  1    wreg      void 
 15395 ;; Registers used:
 15396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15397 ;; Tracked objects:
 15398 ;;		On entry : 0/0
 15399 ;;		On exit  : 0/0
 15400 ;;		Unchanged: 0/0
 15401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15403 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15405 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15406 ;;Total ram usage:        2 bytes
 15407 ;; Hardware stack levels used:    1
 15408 ;; Hardware stack levels required when called:    2
 15409 ;; This function calls:
 15410 ;;		i2_I2C_Master_Read
 15411 ;;		i2_I2C_Master_Start
 15412 ;;		i2_I2C_Master_Stop
 15413 ;;		i2_I2C_Master_Write
 15414 ;; This function is called by:
 15415 ;;		_printSortTimer
 15416 ;;		i2_printRTC
 15417 ;; This function uses a non-reentrant model
 15418 ;;
 15419                           
 15420                           	psect	text73
 15421  00292E                     __ptext73:
 15422                           	opt stack 0
 15423  00292E                     i2_getRTC:
 15424                           	opt stack 18
 15425                           
 15426                           ;RTC.c: 48: I2C_Master_Start();
 15427                           
 15428                           ;incstack = 0
 15429  00292E  EC6B  F019         	call	i2_I2C_Master_Start	;wreg free
 15430                           
 15431                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 15432  002932  0E00               	movlw	0
 15433  002934  6E03               	movwf	i2I2C_Master_Write@d+1,c
 15434  002936  0ED0               	movlw	208
 15435  002938  6E02               	movwf	i2I2C_Master_Write@d,c
 15436  00293A  EC56  F019         	call	i2_I2C_Master_Write	;wreg free
 15437                           
 15438                           ;RTC.c: 50: I2C_Master_Write(0x00);
 15439  00293E  0E00               	movlw	0
 15440  002940  6E03               	movwf	i2I2C_Master_Write@d+1,c
 15441  002942  0E00               	movlw	0
 15442  002944  6E02               	movwf	i2I2C_Master_Write@d,c
 15443  002946  EC56  F019         	call	i2_I2C_Master_Write	;wreg free
 15444                           
 15445                           ;RTC.c: 51: I2C_Master_Stop();
 15446  00294A  EC67  F019         	call	i2_I2C_Master_Stop	;wreg free
 15447                           
 15448                           ;RTC.c: 54: I2C_Master_Start();
 15449  00294E  EC6B  F019         	call	i2_I2C_Master_Start	;wreg free
 15450                           
 15451                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 15452  002952  0E00               	movlw	0
 15453  002954  6E03               	movwf	i2I2C_Master_Write@d+1,c
 15454  002956  0ED1               	movlw	209
 15455  002958  6E02               	movwf	i2I2C_Master_Write@d,c
 15456  00295A  EC56  F019         	call	i2_I2C_Master_Write	;wreg free
 15457                           
 15458                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 15459  00295E  0E00               	movlw	0
 15460  002960  6E05               	movwf	i2getRTC@i+1,c
 15461  002962  0E00               	movlw	0
 15462  002964  6E04               	movwf	i2getRTC@i,c
 15463  002966                     i2l4411:
 15464  002966  BE05               	btfsc	i2getRTC@i+1,7,c
 15465  002968  D006               	goto	i2l4415
 15466  00296A  5005               	movf	i2getRTC@i+1,w,c
 15467  00296C  E111               	bnz	i2l4421
 15468  00296E  0E06               	movlw	6
 15469  002970  5C04               	subwf	i2getRTC@i,w,c
 15470  002972  B0D8               	btfsc	status,0,c
 15471  002974  D00D               	goto	i2l4421
 15472  002976                     i2l4415:
 15473                           
 15474                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 15475  002976  0E5B               	movlw	low _time
 15476  002978  2404               	addwf	i2getRTC@i,w,c
 15477  00297A  6ED9               	movwf	fsr2l,c
 15478  00297C  0E00               	movlw	high _time
 15479  00297E  2005               	addwfc	i2getRTC@i+1,w,c
 15480  002980  6EDA               	movwf	fsr2h,c
 15481  002982  0E01               	movlw	1
 15482  002984  EC8F  F018         	call	i2_I2C_Master_Read
 15483  002988  6EDF               	movwf	indf2,c
 15484  00298A  4A04               	infsnz	i2getRTC@i,f,c
 15485  00298C  2A05               	incf	i2getRTC@i+1,f,c
 15486  00298E  D7EB               	goto	i2l4411
 15487  002990                     i2l4421:
 15488                           
 15489                           ;RTC.c: 58: }
 15490                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 15491  002990  0E00               	movlw	0
 15492  002992  EC8F  F018         	call	i2_I2C_Master_Read
 15493  002996  6E61               	movwf	_time+6,c
 15494                           
 15495                           ;RTC.c: 60: I2C_Master_Stop();
 15496  002998  EC67  F019         	call	i2_I2C_Master_Stop	;wreg free
 15497  00299C  0012               	return		;funcret
 15498  00299E                     __end_ofi2_getRTC:
 15499                           	opt stack 0
 15500                           pclatu	equ	0xFFB
 15501                           pclath	equ	0xFFA
 15502                           tblptru	equ	0xFF8
 15503                           tblptrh	equ	0xFF7
 15504                           tblptrl	equ	0xFF6
 15505                           tablat	equ	0xFF5
 15506                           prodh	equ	0xFF4
 15507                           prodl	equ	0xFF3
 15508                           intcon	equ	0xFF2
 15509                           intcon2	equ	0xFF1
 15510                           intcon3	equ	0xFF0
 15511                           indf0	equ	0xFEF
 15512                           postinc0	equ	0xFEE
 15513                           fsr0h	equ	0xFEA
 15514                           fsr0l	equ	0xFE9
 15515                           wreg	equ	0xFE8
 15516                           postdec1	equ	0xFE5
 15517                           fsr1h	equ	0xFE2
 15518                           fsr1l	equ	0xFE1
 15519                           indf2	equ	0xFDF
 15520                           postinc2	equ	0xFDE
 15521                           postdec2	equ	0xFDD
 15522                           fsr2h	equ	0xFDA
 15523                           fsr2l	equ	0xFD9
 15524                           status	equ	0xFD8
 15525                           
 15526 ;; *************** function i2_I2C_Master_Write *****************
 15527 ;; Defined at:
 15528 ;;		line 49 in file "I2C.c"
 15529 ;; Parameters:    Size  Location     Type
 15530 ;;  d               2    1[COMRAM] unsigned int 
 15531 ;; Auto vars:     Size  Location     Type
 15532 ;;		None
 15533 ;; Return value:  Size  Location     Type
 15534 ;;                  1    wreg      void 
 15535 ;; Registers used:
 15536 ;;		wreg, status,2, status,0, cstack
 15537 ;; Tracked objects:
 15538 ;;		On entry : 0/0
 15539 ;;		On exit  : 0/0
 15540 ;;		Unchanged: 0/0
 15541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15542 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15545 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15546 ;;Total ram usage:        2 bytes
 15547 ;; Hardware stack levels used:    1
 15548 ;; Hardware stack levels required when called:    1
 15549 ;; This function calls:
 15550 ;;		i2_I2C_Master_Wait
 15551 ;; This function is called by:
 15552 ;;		i2_getRTC
 15553 ;; This function uses a non-reentrant model
 15554 ;;
 15555                           
 15556                           	psect	text74
 15557  0032AC                     __ptext74:
 15558                           	opt stack 0
 15559  0032AC                     i2_I2C_Master_Write:
 15560                           	opt stack 18
 15561                           
 15562                           ;I2C.c: 51: I2C_Master_Wait();
 15563                           
 15564                           ;incstack = 0
 15565  0032AC  EC2C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15566                           
 15567                           ;I2C.c: 52: SSPBUF = d;
 15568  0032B0  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 15569  0032B4  0012               	return		;funcret
 15570  0032B6                     __end_ofi2_I2C_Master_Write:
 15571                           	opt stack 0
 15572                           pclatu	equ	0xFFB
 15573                           pclath	equ	0xFFA
 15574                           tblptru	equ	0xFF8
 15575                           tblptrh	equ	0xFF7
 15576                           tblptrl	equ	0xFF6
 15577                           tablat	equ	0xFF5
 15578                           prodh	equ	0xFF4
 15579                           prodl	equ	0xFF3
 15580                           intcon	equ	0xFF2
 15581                           intcon2	equ	0xFF1
 15582                           intcon3	equ	0xFF0
 15583                           indf0	equ	0xFEF
 15584                           postinc0	equ	0xFEE
 15585                           fsr0h	equ	0xFEA
 15586                           fsr0l	equ	0xFE9
 15587                           wreg	equ	0xFE8
 15588                           postdec1	equ	0xFE5
 15589                           fsr1h	equ	0xFE2
 15590                           fsr1l	equ	0xFE1
 15591                           indf2	equ	0xFDF
 15592                           postinc2	equ	0xFDE
 15593                           postdec2	equ	0xFDD
 15594                           fsr2h	equ	0xFDA
 15595                           fsr2l	equ	0xFD9
 15596                           status	equ	0xFD8
 15597                           
 15598 ;; *************** function i2_I2C_Master_Stop *****************
 15599 ;; Defined at:
 15600 ;;		line 43 in file "I2C.c"
 15601 ;; Parameters:    Size  Location     Type
 15602 ;;		None
 15603 ;; Auto vars:     Size  Location     Type
 15604 ;;		None
 15605 ;; Return value:  Size  Location     Type
 15606 ;;                  1    wreg      void 
 15607 ;; Registers used:
 15608 ;;		wreg, status,2, status,0, cstack
 15609 ;; Tracked objects:
 15610 ;;		On entry : 0/0
 15611 ;;		On exit  : 0/0
 15612 ;;		Unchanged: 0/0
 15613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15618 ;;Total ram usage:        0 bytes
 15619 ;; Hardware stack levels used:    1
 15620 ;; Hardware stack levels required when called:    1
 15621 ;; This function calls:
 15622 ;;		i2_I2C_Master_Wait
 15623 ;; This function is called by:
 15624 ;;		i2_getRTC
 15625 ;; This function uses a non-reentrant model
 15626 ;;
 15627                           
 15628                           	psect	text75
 15629  0032CE                     __ptext75:
 15630                           	opt stack 0
 15631  0032CE                     i2_I2C_Master_Stop:
 15632                           	opt stack 18
 15633                           
 15634                           ;I2C.c: 45: I2C_Master_Wait();
 15635                           
 15636                           ;incstack = 0
 15637  0032CE  EC2C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15638                           
 15639                           ;I2C.c: 46: PEN = 1;
 15640  0032D2  84C5               	bsf	4037,2,c	;volatile
 15641  0032D4  0012               	return		;funcret
 15642  0032D6                     __end_ofi2_I2C_Master_Stop:
 15643                           	opt stack 0
 15644                           pclatu	equ	0xFFB
 15645                           pclath	equ	0xFFA
 15646                           tblptru	equ	0xFF8
 15647                           tblptrh	equ	0xFF7
 15648                           tblptrl	equ	0xFF6
 15649                           tablat	equ	0xFF5
 15650                           prodh	equ	0xFF4
 15651                           prodl	equ	0xFF3
 15652                           intcon	equ	0xFF2
 15653                           intcon2	equ	0xFF1
 15654                           intcon3	equ	0xFF0
 15655                           indf0	equ	0xFEF
 15656                           postinc0	equ	0xFEE
 15657                           fsr0h	equ	0xFEA
 15658                           fsr0l	equ	0xFE9
 15659                           wreg	equ	0xFE8
 15660                           postdec1	equ	0xFE5
 15661                           fsr1h	equ	0xFE2
 15662                           fsr1l	equ	0xFE1
 15663                           indf2	equ	0xFDF
 15664                           postinc2	equ	0xFDE
 15665                           postdec2	equ	0xFDD
 15666                           fsr2h	equ	0xFDA
 15667                           fsr2l	equ	0xFD9
 15668                           status	equ	0xFD8
 15669                           
 15670 ;; *************** function i2_I2C_Master_Start *****************
 15671 ;; Defined at:
 15672 ;;		line 31 in file "I2C.c"
 15673 ;; Parameters:    Size  Location     Type
 15674 ;;		None
 15675 ;; Auto vars:     Size  Location     Type
 15676 ;;		None
 15677 ;; Return value:  Size  Location     Type
 15678 ;;                  1    wreg      void 
 15679 ;; Registers used:
 15680 ;;		wreg, status,2, status,0, cstack
 15681 ;; Tracked objects:
 15682 ;;		On entry : 0/0
 15683 ;;		On exit  : 0/0
 15684 ;;		Unchanged: 0/0
 15685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15690 ;;Total ram usage:        0 bytes
 15691 ;; Hardware stack levels used:    1
 15692 ;; Hardware stack levels required when called:    1
 15693 ;; This function calls:
 15694 ;;		i2_I2C_Master_Wait
 15695 ;; This function is called by:
 15696 ;;		i2_getRTC
 15697 ;; This function uses a non-reentrant model
 15698 ;;
 15699                           
 15700                           	psect	text76
 15701  0032D6                     __ptext76:
 15702                           	opt stack 0
 15703  0032D6                     i2_I2C_Master_Start:
 15704                           	opt stack 18
 15705                           
 15706                           ;I2C.c: 33: I2C_Master_Wait();
 15707                           
 15708                           ;incstack = 0
 15709  0032D6  EC2C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15710                           
 15711                           ;I2C.c: 34: SEN = 1;
 15712  0032DA  80C5               	bsf	4037,0,c	;volatile
 15713  0032DC  0012               	return		;funcret
 15714  0032DE                     __end_ofi2_I2C_Master_Start:
 15715                           	opt stack 0
 15716                           pclatu	equ	0xFFB
 15717                           pclath	equ	0xFFA
 15718                           tblptru	equ	0xFF8
 15719                           tblptrh	equ	0xFF7
 15720                           tblptrl	equ	0xFF6
 15721                           tablat	equ	0xFF5
 15722                           prodh	equ	0xFF4
 15723                           prodl	equ	0xFF3
 15724                           intcon	equ	0xFF2
 15725                           intcon2	equ	0xFF1
 15726                           intcon3	equ	0xFF0
 15727                           indf0	equ	0xFEF
 15728                           postinc0	equ	0xFEE
 15729                           fsr0h	equ	0xFEA
 15730                           fsr0l	equ	0xFE9
 15731                           wreg	equ	0xFE8
 15732                           postdec1	equ	0xFE5
 15733                           fsr1h	equ	0xFE2
 15734                           fsr1l	equ	0xFE1
 15735                           indf2	equ	0xFDF
 15736                           postinc2	equ	0xFDE
 15737                           postdec2	equ	0xFDD
 15738                           fsr2h	equ	0xFDA
 15739                           fsr2l	equ	0xFD9
 15740                           status	equ	0xFD8
 15741                           
 15742 ;; *************** function i2_I2C_Master_Read *****************
 15743 ;; Defined at:
 15744 ;;		line 55 in file "I2C.c"
 15745 ;; Parameters:    Size  Location     Type
 15746 ;;  a               1    wreg     unsigned char 
 15747 ;; Auto vars:     Size  Location     Type
 15748 ;;  a               1    1[COMRAM] unsigned char 
 15749 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 15750 ;; Return value:  Size  Location     Type
 15751 ;;                  1    wreg      unsigned char 
 15752 ;; Registers used:
 15753 ;;		wreg, status,2, status,0, cstack
 15754 ;; Tracked objects:
 15755 ;;		On entry : 0/0
 15756 ;;		On exit  : 0/0
 15757 ;;		Unchanged: 0/0
 15758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15762 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15763 ;;Total ram usage:        2 bytes
 15764 ;; Hardware stack levels used:    1
 15765 ;; Hardware stack levels required when called:    1
 15766 ;; This function calls:
 15767 ;;		i2_I2C_Master_Wait
 15768 ;; This function is called by:
 15769 ;;		i2_getRTC
 15770 ;; This function uses a non-reentrant model
 15771 ;;
 15772                           
 15773                           	psect	text77
 15774  00311E                     __ptext77:
 15775                           	opt stack 0
 15776  00311E                     i2_I2C_Master_Read:
 15777                           	opt stack 18
 15778                           
 15779                           ;incstack = 0
 15780                           ;i2I2C_Master_Read@a stored from wreg
 15781  00311E  6E02               	movwf	i2I2C_Master_Read@a,c
 15782                           
 15783                           ;I2C.c: 57: unsigned char temp;
 15784                           ;I2C.c: 58: I2C_Master_Wait();
 15785  003120  EC2C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15786                           
 15787                           ;I2C.c: 59: RCEN = 1;
 15788  003124  86C5               	bsf	4037,3,c	;volatile
 15789                           
 15790                           ;I2C.c: 60: I2C_Master_Wait();
 15791  003126  EC2C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15792                           
 15793                           ;I2C.c: 61: temp = SSPBUF;
 15794  00312A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 15795                           
 15796                           ;I2C.c: 62: I2C_Master_Wait();
 15797  00312E  EC2C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15798                           
 15799                           ;I2C.c: 63: ACKDT = (a)?0:1;
 15800  003132  5002               	movf	i2I2C_Master_Read@a,w,c
 15801  003134  A4D8               	btfss	status,2,c
 15802  003136  D002               	goto	i2u269_40
 15803  003138  8AC5               	bsf	4037,5,c	;volatile
 15804  00313A  D001               	goto	i2l4135
 15805  00313C                     i2u269_40:
 15806  00313C  9AC5               	bcf	4037,5,c	;volatile
 15807  00313E                     i2l4135:
 15808                           
 15809                           ;I2C.c: 64: ACKEN = 1;
 15810  00313E  88C5               	bsf	4037,4,c	;volatile
 15811                           
 15812                           ;I2C.c: 65: return temp;
 15813  003140  5003               	movf	i2I2C_Master_Read@temp,w,c
 15814  003142  0012               	return	
 15815  003144                     __end_ofi2_I2C_Master_Read:
 15816                           	opt stack 0
 15817                           pclatu	equ	0xFFB
 15818                           pclath	equ	0xFFA
 15819                           tblptru	equ	0xFF8
 15820                           tblptrh	equ	0xFF7
 15821                           tblptrl	equ	0xFF6
 15822                           tablat	equ	0xFF5
 15823                           prodh	equ	0xFF4
 15824                           prodl	equ	0xFF3
 15825                           intcon	equ	0xFF2
 15826                           intcon2	equ	0xFF1
 15827                           intcon3	equ	0xFF0
 15828                           indf0	equ	0xFEF
 15829                           postinc0	equ	0xFEE
 15830                           fsr0h	equ	0xFEA
 15831                           fsr0l	equ	0xFE9
 15832                           wreg	equ	0xFE8
 15833                           postdec1	equ	0xFE5
 15834                           fsr1h	equ	0xFE2
 15835                           fsr1l	equ	0xFE1
 15836                           indf2	equ	0xFDF
 15837                           postinc2	equ	0xFDE
 15838                           postdec2	equ	0xFDD
 15839                           fsr2h	equ	0xFDA
 15840                           fsr2l	equ	0xFD9
 15841                           status	equ	0xFD8
 15842                           
 15843 ;; *************** function i2_I2C_Master_Wait *****************
 15844 ;; Defined at:
 15845 ;;		line 26 in file "I2C.c"
 15846 ;; Parameters:    Size  Location     Type
 15847 ;;		None
 15848 ;; Auto vars:     Size  Location     Type
 15849 ;;		None
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  1    wreg      void 
 15852 ;; Registers used:
 15853 ;;		wreg, status,2, status,0
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15863 ;;Total ram usage:        1 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; This function calls:
 15866 ;;		Nothing
 15867 ;; This function is called by:
 15868 ;;		i2_I2C_Master_Start
 15869 ;;		i2_I2C_Master_Stop
 15870 ;;		i2_I2C_Master_Write
 15871 ;;		i2_I2C_Master_Read
 15872 ;; This function uses a non-reentrant model
 15873 ;;
 15874                           
 15875                           	psect	text78
 15876  003258                     __ptext78:
 15877                           	opt stack 0
 15878  003258                     i2_I2C_Master_Wait:
 15879                           	opt stack 18
 15880  003258                     i2l68:
 15881  003258  B4C7               	btfsc	4039,2,c	;volatile
 15882  00325A  D7FE               	goto	i2l68
 15883  00325C  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 15884  003260  0E1F               	movlw	31
 15885  003262  1601               	andwf	??i2_I2C_Master_Wait,f,c
 15886  003264  B4D8               	btfsc	status,2,c
 15887  003266  0012               	return	
 15888  003268  D7F7               	goto	i2l68
 15889  00326A                     __end_ofi2_I2C_Master_Wait:
 15890                           	opt stack 0
 15891                           pclatu	equ	0xFFB
 15892                           pclath	equ	0xFFA
 15893                           tblptru	equ	0xFF8
 15894                           tblptrh	equ	0xFF7
 15895                           tblptrl	equ	0xFF6
 15896                           tablat	equ	0xFF5
 15897                           prodh	equ	0xFF4
 15898                           prodl	equ	0xFF3
 15899                           intcon	equ	0xFF2
 15900                           intcon2	equ	0xFF1
 15901                           intcon3	equ	0xFF0
 15902                           indf0	equ	0xFEF
 15903                           postinc0	equ	0xFEE
 15904                           fsr0h	equ	0xFEA
 15905                           fsr0l	equ	0xFE9
 15906                           wreg	equ	0xFE8
 15907                           postdec1	equ	0xFE5
 15908                           fsr1h	equ	0xFE2
 15909                           fsr1l	equ	0xFE1
 15910                           indf2	equ	0xFDF
 15911                           postinc2	equ	0xFDE
 15912                           postdec2	equ	0xFDD
 15913                           fsr2h	equ	0xFDA
 15914                           fsr2l	equ	0xFD9
 15915                           status	equ	0xFD8
 15916                           pclatu	equ	0xFFB
 15917                           pclath	equ	0xFFA
 15918                           tblptru	equ	0xFF8
 15919                           tblptrh	equ	0xFF7
 15920                           tblptrl	equ	0xFF6
 15921                           tablat	equ	0xFF5
 15922                           prodh	equ	0xFF4
 15923                           prodl	equ	0xFF3
 15924                           intcon	equ	0xFF2
 15925                           intcon2	equ	0xFF1
 15926                           intcon3	equ	0xFF0
 15927                           indf0	equ	0xFEF
 15928                           postinc0	equ	0xFEE
 15929                           fsr0h	equ	0xFEA
 15930                           fsr0l	equ	0xFE9
 15931                           wreg	equ	0xFE8
 15932                           postdec1	equ	0xFE5
 15933                           fsr1h	equ	0xFE2
 15934                           fsr1l	equ	0xFE1
 15935                           indf2	equ	0xFDF
 15936                           postinc2	equ	0xFDE
 15937                           postdec2	equ	0xFDD
 15938                           fsr2h	equ	0xFDA
 15939                           fsr2l	equ	0xFD9
 15940                           status	equ	0xFD8
 15941                           
 15942                           	psect	rparam
 15943  0000                     pclatu	equ	0xFFB
 15944                           pclath	equ	0xFFA
 15945                           tblptru	equ	0xFF8
 15946                           tblptrh	equ	0xFF7
 15947                           tblptrl	equ	0xFF6
 15948                           tablat	equ	0xFF5
 15949                           prodh	equ	0xFF4
 15950                           prodl	equ	0xFF3
 15951                           intcon	equ	0xFF2
 15952                           intcon2	equ	0xFF1
 15953                           intcon3	equ	0xFF0
 15954                           indf0	equ	0xFEF
 15955                           postinc0	equ	0xFEE
 15956                           fsr0h	equ	0xFEA
 15957                           fsr0l	equ	0xFE9
 15958                           wreg	equ	0xFE8
 15959                           postdec1	equ	0xFE5
 15960                           fsr1h	equ	0xFE2
 15961                           fsr1l	equ	0xFE1
 15962                           indf2	equ	0xFDF
 15963                           postinc2	equ	0xFDE
 15964                           postdec2	equ	0xFDD
 15965                           fsr2h	equ	0xFDA
 15966                           fsr2l	equ	0xFD9
 15967                           status	equ	0xFD8
 15968                           
 15969                           	psect	temp
 15970  00007F                     btemp:
 15971                           	opt stack 0
 15972  00007F                     	ds	1
 15973  0000                     int$flags	set	btemp
 15974                           pclatu	equ	0xFFB
 15975                           pclath	equ	0xFFA
 15976                           tblptru	equ	0xFF8
 15977                           tblptrh	equ	0xFF7
 15978                           tblptrl	equ	0xFF6
 15979                           tablat	equ	0xFF5
 15980                           prodh	equ	0xFF4
 15981                           prodl	equ	0xFF3
 15982                           intcon	equ	0xFF2
 15983                           intcon2	equ	0xFF1
 15984                           intcon3	equ	0xFF0
 15985                           indf0	equ	0xFEF
 15986                           postinc0	equ	0xFEE
 15987                           fsr0h	equ	0xFEA
 15988                           fsr0l	equ	0xFE9
 15989                           wreg	equ	0xFE8
 15990                           postdec1	equ	0xFE5
 15991                           fsr1h	equ	0xFE2
 15992                           fsr1l	equ	0xFE1
 15993                           indf2	equ	0xFDF
 15994                           postinc2	equ	0xFDE
 15995                           postdec2	equ	0xFDD
 15996                           fsr2h	equ	0xFDA
 15997                           fsr2l	equ	0xFD9
 15998                           status	equ	0xFD8


Data Sizes:
    Strings     593
    Constant    27
    Data        8
    BSS         114
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     126
    BANK0           128     89     127
    BANK1           256      0      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_ID
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _ID->_readMAG
    _readMAG->_readADC
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   58340
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    3543
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              2     2      0    2051
                                             10 BANK0      2     2      0
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    1285
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    1285
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    1285
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0    7394
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         6     3      3    6711
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _EEPROM_read                                          2     0      2     362
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   15632
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   14782
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  23    23      0   31098
                                             68 BANK0     21    21      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    9575
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    5207
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    5207
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    5072
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      30       7       18.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     59      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12D      34        0.0%
DATA                 0      0     12D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 01 04:46:50 2017

                   i2_I2C_Master_Start 32D6                     i2_I2C_Master_Write 32AC  
                                   _ID 1F90                                     l68 3232  
                                   l99 3246                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0078  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l102 324C  
                                  l610 10E0                                    l198 00E8  
                                  l493 269A                                    l922 31FE  
                                  l931 1E46                                    l909 21F2  
                                  l783 2884                                    l967 0ACA  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E7  
                                  _sel 00FC                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00ED        __end_of_change_state_to_menu_11 2F02  
      __end_of_change_state_to_menu_12 2DA4        __end_of_change_state_to_menu_22 2D6C  
      __end_of_change_state_to_menu_23 2ED2           _f_can_coming_to_distribution 0074  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 2FF2  
      __end_of_change_state_to_logs_12 2FC2        __end_of_change_state_to_logs_22 2F92  
      __end_of_change_state_to_logs_23 304E        __end_of_change_state_to_logs_33 2F62  
      __end_of_change_state_to_logs_34 2F32                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1414 283E  
                                 l1424 2A5E                                   l1361 2420  
                                 l4111 2A50                                   l4103 2A1A  
                                 l4105 2A26                                   l4107 2A2C  
                                 l4221 08A6                                   l4311 0B80  
                                 l4223 08B8                                   l4207 3062  
                                 l5103 249E                                   l4305 0B5E  
                                 l4241 0972                                   l4233 08F6  
                                 l4217 0892                                   l4049 3018  
                                 l4209 3074                                   l4083 27EE  
                                 l4067 30C6                                   l4331 0C04  
                                 l4323 0BDC                                   l4315 0BB8  
                                 l4251 09B0                                   l4227 08C2  
                                 l5301 25A4                                   l4085 27FA  
                                 l4341 0C38                                   l4317 0BC2  
                                 l4261 0A28                                   l4253 09B6  
                                 l5311 25D4                                   l4095 2830  
                                 l4087 2800                                   l4335 0C1E  
                                 l4271 0A8A                                   l4263 0A2E  
                                 l4351 2DAE                                   l5135 202E  
                                 l5313 25DA                                   l5321 260C  
                                 l5305 25B4                                   l4345 0C90  
                                 l4329 0BF8                                   l4265 0A46  
                                 l4249 09A4                                   l4353 2DBA  
                                 l4601 105E                                   l5241 2296  
                                 l5233 2268                                   l5145 205E  
                                 l5153 2076                                   l4339 0C32  
                                 l4291 0B1C                                   l4259 0A1C  
                                 l4275 0A90                                   l4347 0C9C  
                                 l4363 27A2                                   l4611 1126  
                                 l5411 01A6                                   l5171 1E66  
                                 l6035 266C                                   l5325 2620  
                                 l5317 25FE                                   l5309 25C8  
                                 l4293 0B22                                   l4269 0A72  
                                 l4621 11BC                                   l4613 1144  
                                 l5501 04D6                                   l5245 22A0  
                                 l5229 225E                                   l5237 2280  
                                 l4373 2870                                   l5173 1E80  
                                 l5181 1ECE                                   l5149 206A  
                                 l6037 2672                                   l6053 269C  
                                 l5271 2314                                   l5263 22EA  
                                 l4287 0B02                                   l4359 278C  
                                 l4623 11DA                                   l4615 1162  
                                 l4607 10EA                                   l5511 0500  
                                 l4391 23BA                                   l4375 289A  
                                 l5175 1E9A                                   l5183 1EFC  
                                 l6047 2690                                   l6039 2678  
                                 l5281 234A                                   l5273 231A  
                                 l5257 22D4                                   l4369 27C2  
                                 l4625 11F8                                   l4617 1180  
                                 l4609 1108                                   l4633 1252  
                                 l5601 06FA                                   l5505 04EE  
                                 l5433 021A                                   l5425 01F8  
                                 l5177 1EB4                                   l5089 2466  
                                 l6049 2696                                   l4627 1216  
                                 l4619 119E                                   l4635 12B0  
                                 l5515 050A                                   l5443 0236  
                                 l4387 23A4                                   l5269 2308  
                                 l5285 2358                                   l4629 1234  
                                 l5429 0202                                   l5381 0106  
                                 l4389 23B4                                   l5623 076A  
                                 l5543 05F2                                   l5519 0522  
                                 l5471 0318                                   l5463 02A0  
                                 l5447 024E                                   l5439 022C  
                                 l4399 240E                                   l5289 236C  
                                 l5641 07B6                                   l5633 0794  
                                 l5561 063E                                   l5553 061C  
                                 l5481 03AE                                   l5473 0336  
                                 l5465 02BE                                   l5393 013A  
                                 l5385 0118                                   l5627 0782  
                                 l5619 0760                                   l5547 060A  
                                 l5539 05E8                                   l5483 03CC  
                                 l5475 0354                                   l5467 02DC  
                                 l5491 0426                                   l5379 0100  
                                 l4771 24EC                                   l5637 079E  
                                 l5557 0626                                   l5485 03EA  
                                 l5477 0372                                   l5469 02FA  
                                 l5493 048A                                   l5397 014C  
                                 l5389 0122                                   l4781 2578  
                                 l5663 081E                                   l5583 06AE  
                                 l5487 0408                                   l5479 0390  
                                 l4775 2502                                   _ADIE 007CEE  
                                 l5681 086A                                   l5673 0848  
                                 l5593 06D8                                   l5497 04CC  
                                 _ADFM 007E07                                   l5667 0836  
                                 l5659 0814                                   l5587 06C6  
                                 l5579 06A4                                   l4891 2718  
                                 l5677 0852                                   l5597 06E2  
                                 l5685 0876                                   l4887 2702  
                                 l5943 1D6C                                   l4897 2744  
                                 l5945 1D80                                   l5969 1E00  
                                 _ADON 007E10                                   STR_1 FE13  
                                 STR_2 FF86                                   STR_3 FE01  
                                 STR_4 FF68                                   STR_5 FE01  
                                 STR_6 FF46                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3440 2CA2  
                                 u3441 2C9E                                   u3450 2CA4  
                                 u5107 24CE                                   u5117 2C52  
                                 u2590 3016                                   u5207 22A8  
                                 u5127 1FAA                                   u2840 09F0  
                                 u3480 10E0                                   u5217 2CB4  
                                 u3465 2A98                                   u5137 2006  
                                 u5307 04DE                                   u5227 2CE8  
                                 u5147 209A                                   _PEIE 007F96  
                                 u5317 0512                                   u5237 002A  
                                 u5157 306A                                   u3750 1FC4  
                                 u2847 09E6                                   u5407 07A6  
                                 u5327 053C                                   u5247 012A  
                                 u5167 1F0A                                   u2880 0A68  
                                 u5417 07D0                                   u5337 05FA  
                                 u5257 0166                                   u5177 1F3E  
                                 u5097 2450                                   u5427 0826  
                                 u5347 062E                                   u5267 01B4  
                                 u5187 2214                                   u3780 201E  
                                 _RCEN 007E2B                                   u5437 085A  
                                 u5357 0658                                   u5277 020A  
                                 u5197 2270                                   u3758 1FC8  
                                 u5447 29BE                                   u2887 0A5E  
                                 u5367 06B6                                   u5287 023E  
                                 u5457 29C8                                   u5377 06EA  
                                 u5297 0268                                   u4930 1E46  
                                 u5467 29F4                                   u5387 0714  
                                 u3788 2022                                   u5477 29FE  
                                 u5397 0772                                   i2l68 3258  
                                 _RSEN 007E29                            _stopSignals 3206  
                                 _back 0064                                   _main 262A  
                                 _down 0070                                   _keys FD93  
                                 _time 005B                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 318C                                   btemp 007F  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EB                        __end_ofi2_putch 3296  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 15B4                            i2_lcdNibble 2B22  
                      __end_of_Loading 24DE                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                   __end_of_EEPROM_write 22B8  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 2376  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FDAE                                  STR_14 FFD7  
                                STR_22 FFAC                                  STR_30 FF57  
                                STR_15 FFD3                                  STR_23 FF78  
                                STR_31 FF35                                  STR_16 FFE3  
                                STR_24 FE9C                                  STR_32 FE7A  
                                STR_40 FE36                                  STR_17 FFF3  
                                STR_33 FE8B                                  STR_41 FE25  
                                STR_25 FDEE                                  STR_18 FFF7  
                                STR_34 FF24                                  STR_50 FF02  
                                STR_42 FEE0                                  STR_26 FEAD  
                                STR_43 FEE0                                  STR_35 FF24  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FDDB                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FEBE  
                                STR_36 FE69                                  STR_44 FE47  
                      __end_of___awmod 262A                                  STR_45 FE36  
                                STR_37 FE7A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FDEB  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_38 FF13                                  STR_46 FEF1  
                                STR_47 FEF1                                  STR_55 FFFB  
                                STR_63 FDAE                                  STR_39 FECF  
                                STR_56 FFDF                                  STR_64 FFA1  
                                STR_48 FE58                                  STR_49 FE47  
                                STR_57 FFD7                                  STR_65 FF94  
                                STR_58 FFD3                                  STR_66 FDC6  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_68 FFB6                                  ?_sort 0001  
                      __end_of___lldiv 2432                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 2848                        __end_of___lwmod 2A68  
                                i2l610 1642                                  i2l269 15B0  
                                i2l840 1C78                                  i2l922 322A  
                                i2l844 1CC4                                  i2l846 1CE4  
                      ___awdiv@counter 008A                                  i2l967 0E96  
                                _VCFG0 007E0C                                  _VCFG1 007E0D  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 328A  
                      __end_of_handler 1D20                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 307A                        __end_of_initLCD 2CF2  
                       __CFG_EBTRB$OFF 000000                                  _debug 00DD  
                           i2isdigit@c 0003                        __end_of_loadRTC 274C  
                      __end_of_readMAG 2CAC                        __end_of_dpowers FDAE  
                                _first 00E5                                  _enter 0072  
                      __end_of_isdigit 30D0                                  _input 007E  
                                _putch 326A                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 311E  
                     __end_ofi2_getRTC 299E                    _log_count_pop_w_tab 00F1  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 102A  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 2E42                       _count_can_no_lab 0066  
                 __size_of_EEPROM_read 0018                        __initialization 2BCA  
                   __size_ofi2_lcdInst 000C                           __end_of_main 26C0  
                         __end_of_keys FDA4                           __end_of_sort 31AE  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D9  
                               ??_sort 008E                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADRESH 000FC4                                 _EEADRH 000FAA  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 2E72              i2_change_state_to_menu_22 2E42  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1414 2BC0  
                               i2l1424 2D2A                                 i2l5003 1AD4  
                               i2l5013 1AFA                                 i2l4135 313E  
                               i2l5031 1B34                                 i2l5023 1B1C  
                               i2l5007 1AF0                                 i2l5041 1B54  
                               i2l5017 1B0E                                 i2l4411 2966  
                               i2l4171 2B96                                 i2l5019 1B12  
                               i2l4421 2990                                 i2l4181 2BB6  
                               i2l4173 2B9A                                 i2l6005 1922  
                               i2l5053 1B8A                                 i2l5045 1B66  
                               i2l5037 1B42                                 i2l4415 2976  
                               i2l4191 2D08                                 i2l4159 31E6  
                               i2l4169 2B8E                                 i2l4193 2D0C  
                               i2l4513 0EDC                                 i2l5049 1B78  
                               i2l6113 1C96                                 i2l4515 0EE0  
                               i2l4443 0CD6                                 i2l5059 1B94  
                               i2l6115 1C98                                 i2l4197 2D20  
                               i2l4189 2D00                                 i2l4533 0F2C  
                               i2l4509 0EC4                                 i2l4445 0CE4  
                               i2l4551 0F84                                 i2l4527 0F12  
                               i2l4471 0DA6                                 i2l4463 0D7E  
                               i2l4455 0D1C                                 i2l4439 0CC6  
                               i2l4553 0F8C                                 i2l4561 0FB2  
                               i2l4545 0F6E                                 i2l4537 0F50  
                               i2l4481 0DFE                                 i2l4473 0DB0  
                               i2l4449 0CEA                                 i2l6137 1CE2  
                               i2l4563 0FB8                                 i2l4539 0F58  
                               i2l4491 0E4A                                 i2l4483 0E08  
                               i2l4475 0DB4                                 i2l6091 1C4C  
                               i2l4557 0FA0                                 i2l4493 0E5C  
                               i2l4485 0E0E                                 i2l4573 2E1A  
                               i2l5701 132A                                 i2l6077 1C30  
                               i2l4567 1006                                 i2l4487 0E20  
                               i2l4751 2174                                 i2l4575 2E22  
                               i2l6351 15A2                                 i2l4497 0E60  
                               i2l4569 100E                                 i2l5801 1494  
                               i2l5713 1354                                 i2l5705 1338  
                               i2l4763 21B8                                 i2l4755 2184  
                               i2l6355 1A82                                 i2l4851 168E  
                               i2l6347 1564                                 i2l6357 1A9E  
                               i2l4941 19FA                                 i2l4861 16FC  
                               i2l4853 16A4                                 i2l4845 164C  
                               i2l6349 1586                                 i2l5821 14E2  
                               i2l5813 14C6                                 i2l5805 14A2  
                               i2l5741 13AA                                 i2l5733 138C  
                               i2l5725 1370                                 i2l5717 1362  
                               i2l5709 1346                                 i2l4951 1A24  
                               i2l4863 1712                                 i2l4855 16BA  
                               i2l4847 1662                                 i2l4871 1754  
                               i2l4839 15E0                                 i2l4953 1A28  
                               i2l4865 1728                                 i2l4857 16D0  
                               i2l4849 1678                                 i2l4873 17AE  
                               i2l5841 1538                                 i2l5833 1514  
                               i2l5825 14F8                                 i2l5817 14D4  
                               i2l5809 14B8                                 i2l5761 13F8  
                               i2l5753 13D4                                 i2l5745 13B8  
                               i2l5737 139C                                 i2l5729 137E  
                               i2l4971 1A5E                                 i2l4963 1A46  
                               i2l4867 173E                                 i2l4859 16E6  
                               i2l4973 1A64                                 i2l4965 1A4C  
                               i2l4949 1A14                                 i2l5837 1522  
                               i2l5829 1506                                 i2l5781 1446  
                               i2l5773 1422                                 i2l5765 1406  
                               i2l5757 13E2                                 i2l5749 13C6  
                               i2l4967 1A52                                 i2l4959 1A32  
                               i2l5847 1546                                 i2l4969 1A58  
                               i2l4977 1A6A                                 i2l5793 1478  
                               i2l5785 1454                                 i2l5777 1438  
                               i2l5769 1414                                 i2l5699 1324  
                               i2l4997 1AC6                                 i2l4989 1AAE  
                               i2l5797 1486                                 i2l5789 1462  
                               i2l5985 17F6                                 i2l5995 1860  
                               i2l5989 1806                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 0088  
                     __end_of_dispLogs 318C                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 1F90  
                               ___wmul 2DDA                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 274C  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 31D0                                 _initUI 3144  
                               _logRun 1D20                                 clear_0 2BF0  
                               clear_1 2BFC                                 clear_2 2C08  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3246                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0884  
                            ??_handler 004B                __size_of_initGlobalVars 0070  
                         ?_retrieveLog 0007                                 _strcpy 2DA4  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 30F8  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 30D0                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 2BCA                       __end_of_printRTC 12F4  
                         __mediumconst FD92                      __end_ofi2___lwmod 2D34  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EF  
                    __end_ofi2_lcdInst 32A2                      __end_ofi2_isdigit 31EE  
                           __accesstop 0080                __end_of__initialization 2C0E  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                          i2_EEPROM_read 321C  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 32B6  
                          i2printRTC@i 0041                          _initSortTimer 24DE  
          __end_of_updateServoPosition 28BE                          __end_of_putch 327A  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 20B6                             __end_of_UI 0884  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 30A6          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 307A                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                              ?i2_strcpy 0001  
                     _count_pop_no_tab 006A                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                             __pbssBANK0 00D9  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 21D0  
                              UI@F3220 0128               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_505 00C9                                UI@i_506 00CA  
                              UI@i_540 00D3                                UI@i_532 00CF  
                              UI@i_524 00CB                                UI@i_541 00D4  
                              UI@i_533 00D0                                UI@i_525 00CC  
                              UI@i_536 00D1                                UI@i_528 00CD  
                              UI@i_537 00D2                                UI@i_529 00CE  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D5                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$1992 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 328A  
                            ?_initTime 0080                        _f_loadingNewCan 00E3  
                      i2printRTC@month 003D                  __size_of_Distribution 0134  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 2A06  
                              _Loading 2432            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 22B8                                ___awmod 2588  
                           _initServos 2C18                                ___lldiv 2376  
                      __size_of___wmul 0036                                ___lwdiv 27D0  
                              ___lwmod 2A06                        __size_of_getRTC 0084  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                                __pcinit 2BCA  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 28BE                                _lcdInst 327A  
                              _handler 0008                                __ptext0 262A  
                              __ptext1 3206                                __ptext2 318C  
                              __ptext3 2432                                __ptext4 24DE  
                              __ptext5 2C18                                __ptext6 28BE  
                              __ptext7 1F90                                __ptext8 2C62  
                              __ptext9 304E                        __size_of_printf 0438  
                              _readADC 304E                        __size_of_strcpy 0036  
                              _initLCD 2CAC                                _cur_can 006E  
                              _loadRTC 26C0                                _readMAG 2C62  
                              _dpowers FDA4                                _isdigit 30A6  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 1E5C  
                       __pintcode_body 1BC2                   end_of_initialization 2C0E  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 1BC2  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0012              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 292E                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 1BC2                  __end_of_machineConfig 2B22  
                           _updateMenu 12F4                      i2_I2C_Master_Read 311E  
                            _IR_signal 0062                      i2_I2C_Master_Wait 3258  
                    i2_I2C_Master_Stop 32CE                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F3                              i2___lwdiv 2B78  
                            i2___lwmod 2CF2                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 17EA                     ?i2_I2C_Master_Stop 0001  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 3296  
                           _total_time 00F9                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 31D0                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                  __end_of_EEPROM_read 3206                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 2E10  
                       __end_of_getRTC 27D0                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 3168                         __end_of_logRun 1E5C  
                     i2___wmul@product 0005                         __end_of_printf 0CBC  
                         i2printf@flag 0026                         __end_of_strcpy 2DDA  
            __end_ofi2_I2C_Master_Read 3144              __end_ofi2_I2C_Master_Wait 326A  
                         i2printf@prec 001D                    start_initialization 2BCA  
            __end_ofi2_I2C_Master_Stop 32D6                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0068  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0070  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1364 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK1 0128                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_logRun 00B1  
                         ??_PortTestA5 0080                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2112 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1632 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 004A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 006C  
                          _EEPROM_read 31EE                     __end_of_PortTestA5 3258  
                     _I2C_Master_Start 32C6                              _f_lastCan 0126  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 32A2                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FD92  
                            _lcdNibble 299E                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0076                              _cur_state 00DB  
                     ___lwdiv@quotient 0084                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0126                            __size_of_UI 0872  
           __end_ofi2_I2C_Master_Start 32DE             __end_ofi2_I2C_Master_Write 32B6  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 19DC  
                          ??i2_isdigit 0001                               i2u320_40 0DE2  
                             i2u320_47 0DD8                               i2u324_40 0E42  
                             i2u324_47 0E38                               i2u355_40 1642  
                             _PIR2bits 000FA1                               i2u269_40 313C  
                             i2u550_47 2B44                               i2u551_47 2B66  
                             i2u552_47 2B70                               i2u548_47 1A1A  
                             i2u549_47 2B3A                               i2u496_40 191C  
                  __size_of_updateMenu 02C0                         _log_completion 00E9  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 007A                              _was_low_3 007C  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 30F8                          lcdNibble@data 0081  
                             i2_getRTC 292E                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 0CBC                               i2_strcpy 2E10  
                  I2C_Master_Read@temp 0082                              copy_data0 2BDE  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 3232                            _count_total 00FD  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 00AC                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 2588                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 2ED2             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 2D6C             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 2D34                _change_state_to_menu_23 2EA2  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 2FC2  
              _change_state_to_logs_12 2F92                _change_state_to_logs_22 2F62  
              _change_state_to_logs_23 3020                _change_state_to_logs_33 2F32  
              _change_state_to_logs_34 2F02                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 1D18  
                      _I2C_Master_Init 2A68                       __size_of_readADC 002C  
                      _I2C_Master_Read 2FF2                       __size_of_initLCD 0046  
                         _f_ID_receive 00DF                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004A                        _I2C_Master_Wait 3232  
                      _I2C_Master_Stop 32BE                       __size_of_isdigit 002A  
                       _printSortTimer 17EA                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 21D0  
                             __ptext10 1E5C                               __ptext11 2848  
                             __ptext20 307A                               __ptext12 2AC8  
                             __ptext21 31AE                               __ptext13 1D20  
                             __ptext30 2FF2                               __ptext22 2CAC  
                             __ptext14 21D0                               __ptext31 3232  
                             __ptext23 0012                               __ptext15 31EE  
                             __ptext40 327A                               __ptext32 2D34  
                             __ptext24 102A                               __ptext16 3144  
                             __ptext41 299E                               __ptext33 2D6C  
                             __ptext25 2DA4                               __ptext17 26C0  
                             __ptext50 19DC                               __ptext42 2588  
                             __ptext34 0884                               __ptext26 274C  
                             __ptext18 2A68                               __ptext51 2E42  
                             __ptext43 22B8                               __ptext35 326A  
                             __ptext27 32A2                               __ptext19 2376  
                             __ptext60 2FC2                               __ptext52 2E72  
                             __ptext44 3246                               __ptext36 30A6  
                             __ptext28 32BE                               __ptext61 3168  
                             __ptext53 2EA2                               __ptext37 2DDA  
                             __ptext29 32C6                               __ptext70 2B78  
                             __ptext62 20B6                               __ptext54 2ED2  
                             __ptext46 12F4                               __ptext38 2A06  
                             __ptext71 3296                               __ptext63 321C  
                             __ptext55 2F02                               __ptext47 30D0  
                             __ptext39 27D0                               __ptext72 2B22  
                             __ptext64 17EA                               __ptext56 2F32  
                             __ptext48 15B4                               __ptext73 292E  
                             __ptext65 0CBC                               __ptext57 3020  
                             __ptext49 2E10                               __ptext74 32AC  
                             __ptext66 328A                               __ptext58 2F62  
                             __ptext75 32CE                               __ptext67 31D0  
                             __ptext59 2F92                               __ptext76 32D6  
                             __ptext68 30F8                               __ptext77 311E  
                             __ptext69 2CF2                               __ptext78 3258  
                             _dispLogs 3168                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1632 0002  
                   __end_of_initServos 2C62                          ?_EEPROM_write 00AB  
                             _initTime 31AE                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F7                    _updateServoPosition 2848  
               __size_of_machineConfig 005A                          ??i2_lcdNibble 0001  
                             _printRTC 102A                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007F  
                       _log_total_time 00F5                     _f_can_coming_to_ID 00E1  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 2EA2      __end_ofi2_change_state_to_menu_22 2E72  
                             loadRTC@i 0096                 __end_of_printSortTimer 19DC  
                            putch@data 0082               __end_of_I2C_Master_Start 32CE  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 32AC  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                             _MAG_signal 00D9  
                             isdigit@c 0082                               intlevel2 0000  
                       ??_EEPROM_write 00AE                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 321C              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 15B4  
              __end_of_I2C_Master_Init 2AC8                __end_of_I2C_Master_Read 3020  
              __end_of_I2C_Master_Wait 3246                __end_of_I2C_Master_Stop 32C6  
                        printRTC@F3213 012C                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 20B6  
                  __end_ofi2_lcdNibble 2B78                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 0124                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 2AC8  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FB  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
