

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Feb 23 20:31:10 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           ; Version 1.40
    94                           ; Generated 01/12/2016 GMT
    95                           ; 
    96                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4620 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     
   128                           	psect	idataCOMRAM
   129  00295C                     __pidataCOMRAM:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _timer1_20ms_high
   133  00295C  00B1               	dw	177
   134                           
   135                           ;initializer for _timer1_20ms_low
   136  00295E  00E0               	dw	224
   137                           
   138                           	psect	idataBANK0
   139  002934                     __pidataBANK0:
   140                           	opt stack 0
   141                           
   142                           ;initializer for printRTC@F3188
   143  002934  4D                 	db	77
   144  002935  4D                 	db	77
   145  002936  4D                 	db	77
   146  002937  00                 	db	0
   147                           
   148                           ;initializer for _f_ID_receive
   149  002938  0001               	dw	1
   150                           
   151                           ;initializer for _first
   152  00293A  0001               	dw	1
   153                           
   154                           	psect	mediumconst
   155  00FDB4                     __pmediumconst:
   156                           	opt stack 0
   157  00FDB4  00                 	db	0
   158  00FDB5                     _keys:
   159                           	opt stack 0
   160  00FDB5  31                 	db	49
   161  00FDB6  32                 	db	50
   162  00FDB7  33                 	db	51
   163  00FDB8  41                 	db	65
   164  00FDB9  34                 	db	52
   165  00FDBA  35                 	db	53
   166  00FDBB  36                 	db	54
   167  00FDBC  42                 	db	66
   168  00FDBD  37                 	db	55
   169  00FDBE  38                 	db	56
   170  00FDBF  39                 	db	57
   171  00FDC0  43                 	db	67
   172  00FDC1  2A                 	db	42
   173  00FDC2  30                 	db	48
   174  00FDC3  23                 	db	35
   175  00FDC4  44                 	db	68
   176  00FDC5  00                 	db	0
   177  00FDC6                     __end_of_keys:
   178                           	opt stack 0
   179  00FDC6                     _dpowers:
   180                           	opt stack 0
   181  00FDC6  0001               	dw	1
   182  00FDC8  000A               	dw	10
   183  00FDCA  0064               	dw	100
   184  00FDCC  03E8               	dw	1000
   185  00FDCE  2710               	dw	10000
   186  00FDD0                     __end_of_dpowers:
   187                           	opt stack 0
   188  0000                     _ADCON0	set	4034
   189  0000                     _ADCON0bits	set	4034
   190  0000                     _ADCON1	set	4033
   191  0000                     _CMCONbits	set	4020
   192  0000                     _CVRCON	set	4021
   193  0000                     _INTCONbits	set	4082
   194  0000                     _LATA	set	3977
   195  0000                     _LATAbits	set	3977
   196  0000                     _LATB	set	3978
   197  0000                     _LATC	set	3979
   198  0000                     _LATCbits	set	3979
   199  0000                     _LATD	set	3980
   200  0000                     _LATDbits	set	3980
   201  0000                     _LATE	set	3981
   202  0000                     _OSCCON	set	4051
   203  0000                     _OSCTUNEbits	set	3995
   204  0000                     _PORTAbits	set	3968
   205  0000                     _PORTB	set	3969
   206  0000                     _PORTBbits	set	3969
   207  0000                     _SSPADD	set	4040
   208  0000                     _SSPBUF	set	4041
   209  0000                     _SSPCON1	set	4038
   210  0000                     _SSPCON2	set	4037
   211  0000                     _SSPSTAT	set	4039
   212  0000                     _T0CON	set	4053
   213  0000                     _T1CON	set	4045
   214  0000                     _T3CON	set	4017
   215  0000                     _TMR0H	set	4055
   216  0000                     _TMR0L	set	4054
   217  0000                     _TMR1H	set	4047
   218  0000                     _TMR1L	set	4046
   219  0000                     _TMR3H	set	4019
   220  0000                     _TMR3L	set	4018
   221  0000                     _TRISA	set	3986
   222  0000                     _TRISB	set	3987
   223  0000                     _TRISC	set	3988
   224  0000                     _TRISD	set	3989
   225  0000                     _TRISE	set	3990
   226  0000                     _ACKDT	set	32301
   227  0000                     _ACKEN	set	32300
   228  0000                     _ADFM	set	32263
   229  0000                     _ADON	set	32272
   230  0000                     _INT1IE	set	32643
   231  0000                     _INT1IF	set	32640
   232  0000                     _PEIE	set	32662
   233  0000                     _PEN	set	32298
   234  0000                     _RCEN	set	32299
   235  0000                     _RSEN	set	32297
   236  0000                     _SEN	set	32296
   237  0000                     _TMR0IE	set	32661
   238  0000                     _TMR0IF	set	32658
   239  0000                     _TMR0ON	set	32431
   240  0000                     _TMR1IE	set	31976
   241  0000                     _TMR1IF	set	31984
   242  0000                     _TMR1ON	set	32360
   243  0000                     _TMR2IE	set	31977
   244  0000                     _TMR3IE	set	32001
   245  0000                     _TMR3ON	set	32136
   246  0000                     _TRISC3	set	31907
   247  0000                     _TRISC4	set	31908
   248  00FDD0                     STR_48:
   249  00FDD0  25                 	db	37
   250  00FDD1  30                 	db	48	;'0'
   251  00FDD2  32                 	db	50	;'2'
   252  00FDD3  64                 	db	100	;'d'
   253  00FDD4  25                 	db	37
   254  00FDD5  73                 	db	115	;'s'
   255  00FDD6  20                 	db	32
   256  00FDD7  7C                 	db	124
   257  00FDD8  20                 	db	32
   258  00FDD9  25                 	db	37
   259  00FDDA  30                 	db	48	;'0'
   260  00FDDB  32                 	db	50	;'2'
   261  00FDDC  64                 	db	100	;'d'
   262  00FDDD  3A                 	db	58	;':'
   263  00FDDE  25                 	db	37
   264  00FDDF  30                 	db	48	;'0'
   265  00FDE0  32                 	db	50	;'2'
   266  00FDE1  64                 	db	100	;'d'
   267  00FDE2  3A                 	db	58	;':'
   268  00FDE3  25                 	db	37
   269  00FDE4  30                 	db	48	;'0'
   270  00FDE5  32                 	db	50	;'2'
   271  00FDE6  64                 	db	100	;'d'
   272  00FDE7  00                 	db	0
   273  00FDE8                     STR_2:
   274  00FDE8  54                 	db	84	;'T'
   275  00FDE9  69                 	db	105	;'i'
   276  00FDEA  6D                 	db	109	;'m'
   277  00FDEB  65                 	db	101	;'e'
   278  00FDEC  3A                 	db	58	;':'
   279  00FDED  20                 	db	32
   280  00FDEE  25                 	db	37
   281  00FDEF  30                 	db	48	;'0'
   282  00FDF0  32                 	db	50	;'2'
   283  00FDF1  64                 	db	100	;'d'
   284  00FDF2  3A                 	db	58	;':'
   285  00FDF3  25                 	db	37
   286  00FDF4  30                 	db	48	;'0'
   287  00FDF5  32                 	db	50	;'2'
   288  00FDF6  64                 	db	100	;'d'
   289  00FDF7  3A                 	db	58	;':'
   290  00FDF8  25                 	db	37
   291  00FDF9  30                 	db	48	;'0'
   292  00FDFA  32                 	db	50	;'2'
   293  00FDFB  64                 	db	100	;'d'
   294  00FDFC  00                 	db	0
   295  00FDFD                     STR_3:
   296  00FDFD  2D                 	db	45
   297  00FDFE  2D                 	db	45
   298  00FDFF  20                 	db	32
   299  00FE00  4C                 	db	76	;'L'
   300  00FE01  6F                 	db	111	;'o'
   301  00FE02  67                 	db	103	;'g'
   302  00FE03  20                 	db	32
   303  00FE04  25                 	db	37
   304  00FE05  32                 	db	50	;'2'
   305  00FE06  64                 	db	100	;'d'
   306  00FE07  20                 	db	32
   307  00FE08  68                 	db	104	;'h'
   308  00FE09  65                 	db	101	;'e'
   309  00FE0A  72                 	db	114	;'r'
   310  00FE0B  65                 	db	101	;'e'
   311  00FE0C  2D                 	db	45
   312  00FE0D  2D                 	db	45
   313  00FE0E  00                 	db	0
   314  00FE0F                     STR_8:
   315  00FE0F  25                 	db	37
   316  00FE10  64                 	db	100	;'d'
   317  00FE11  20                 	db	32
   318  00FE12  6D                 	db	109	;'m'
   319  00FE13  69                 	db	105	;'i'
   320  00FE14  6E                 	db	110	;'n'
   321  00FE15  28                 	db	40
   322  00FE16  73                 	db	115	;'s'
   323  00FE17  29                 	db	41
   324  00FE18  20                 	db	32
   325  00FE19  25                 	db	37
   326  00FE1A  64                 	db	100	;'d'
   327  00FE1B  20                 	db	32
   328  00FE1C  73                 	db	115	;'s'
   329  00FE1D  65                 	db	101	;'e'
   330  00FE1E  63                 	db	99	;'c'
   331  00FE1F  73                 	db	115	;'s'
   332  00FE20  00                 	db	0
   333  00FE21                     STR_26:
   334  00FE21  4C                 	db	76	;'L'
   335  00FE22  4F                 	db	79	;'O'
   336  00FE23  47                 	db	71	;'G'
   337  00FE24  20                 	db	32
   338  00FE25  31                 	db	49	;'1'
   339  00FE26  20                 	db	32
   340  00FE27  20                 	db	32
   341  00FE28  20                 	db	32
   342  00FE29  20                 	db	32
   343  00FE2A  20                 	db	32
   344  00FE2B  20                 	db	32
   345  00FE2C  20                 	db	32
   346  00FE2D  20                 	db	32
   347  00FE2E  20                 	db	32
   348  00FE2F  20                 	db	32
   349  00FE30  20                 	db	32
   350  00FE31  00                 	db	0
   351  00FE32                     STR_25:
   352  00FE32  4C                 	db	76	;'L'
   353  00FE33  4F                 	db	79	;'O'
   354  00FE34  47                 	db	71	;'G'
   355  00FE35  20                 	db	32
   356  00FE36  32                 	db	50	;'2'
   357  00FE37  20                 	db	32
   358  00FE38  20                 	db	32
   359  00FE39  20                 	db	32
   360  00FE3A  20                 	db	32
   361  00FE3B  20                 	db	32
   362  00FE3C  20                 	db	32
   363  00FE3D  20                 	db	32
   364  00FE3E  20                 	db	32
   365  00FE3F  20                 	db	32
   366  00FE40  20                 	db	32
   367  00FE41  20                 	db	32
   368  00FE42  00                 	db	0
   369  00FE43                     STR_29:
   370  00FE43  4C                 	db	76	;'L'
   371  00FE44  4F                 	db	79	;'O'
   372  00FE45  47                 	db	71	;'G'
   373  00FE46  20                 	db	32
   374  00FE47  33                 	db	51	;'3'
   375  00FE48  20                 	db	32
   376  00FE49  20                 	db	32
   377  00FE4A  20                 	db	32
   378  00FE4B  20                 	db	32
   379  00FE4C  20                 	db	32
   380  00FE4D  20                 	db	32
   381  00FE4E  20                 	db	32
   382  00FE4F  20                 	db	32
   383  00FE50  20                 	db	32
   384  00FE51  20                 	db	32
   385  00FE52  20                 	db	32
   386  00FE53  00                 	db	0
   387  00FE54                     STR_33:
   388  00FE54  4C                 	db	76	;'L'
   389  00FE55  4F                 	db	79	;'O'
   390  00FE56  47                 	db	71	;'G'
   391  00FE57  20                 	db	32
   392  00FE58  34                 	db	52	;'4'
   393  00FE59  20                 	db	32
   394  00FE5A  20                 	db	32
   395  00FE5B  20                 	db	32
   396  00FE5C  20                 	db	32
   397  00FE5D  20                 	db	32
   398  00FE5E  20                 	db	32
   399  00FE5F  20                 	db	32
   400  00FE60  20                 	db	32
   401  00FE61  20                 	db	32
   402  00FE62  20                 	db	32
   403  00FE63  20                 	db	32
   404  00FE64  00                 	db	0
   405  00FE65                     STR_21:
   406  00FE65  33                 	db	51	;'3'
   407  00FE66  2E                 	db	46
   408  00FE67  20                 	db	32
   409  00FE68  4C                 	db	76	;'L'
   410  00FE69  4F                 	db	79	;'O'
   411  00FE6A  47                 	db	71	;'G'
   412  00FE6B  53                 	db	83	;'S'
   413  00FE6C  20                 	db	32
   414  00FE6D  20                 	db	32
   415  00FE6E  20                 	db	32
   416  00FE6F  20                 	db	32
   417  00FE70  20                 	db	32
   418  00FE71  20                 	db	32
   419  00FE72  20                 	db	32
   420  00FE73  20                 	db	32
   421  00FE74  20                 	db	32
   422  00FE75  00                 	db	0
   423  00FE76                     STR_17:
   424  00FE76  32                 	db	50	;'2'
   425  00FE77  2E                 	db	46
   426  00FE78  20                 	db	32
   427  00FE79  53                 	db	83	;'S'
   428  00FE7A  4F                 	db	79	;'O'
   429  00FE7B  52                 	db	82	;'R'
   430  00FE7C  54                 	db	84	;'T'
   431  00FE7D  20                 	db	32
   432  00FE7E  20                 	db	32
   433  00FE7F  20                 	db	32
   434  00FE80  20                 	db	32
   435  00FE81  20                 	db	32
   436  00FE82  20                 	db	32
   437  00FE83  20                 	db	32
   438  00FE84  20                 	db	32
   439  00FE85  20                 	db	32
   440  00FE86  00                 	db	0
   441  00FE87                     STR_18:
   442  00FE87  31                 	db	49	;'1'
   443  00FE88  2E                 	db	46
   444  00FE89  20                 	db	32
   445  00FE8A  44                 	db	68	;'D'
   446  00FE8B  41                 	db	65	;'A'
   447  00FE8C  54                 	db	84	;'T'
   448  00FE8D  45                 	db	69	;'E'
   449  00FE8E  2F                 	db	47
   450  00FE8F  54                 	db	84	;'T'
   451  00FE90  49                 	db	73	;'I'
   452  00FE91  4D                 	db	77	;'M'
   453  00FE92  45                 	db	69	;'E'
   454  00FE93  20                 	db	32
   455  00FE94  20                 	db	32
   456  00FE95  20                 	db	32
   457  00FE96  20                 	db	32
   458  00FE97  00                 	db	0
   459  00FE98                     STR_9:
   460  00FE98  20                 	db	32
   461  00FE99  2D                 	db	45
   462  00FE9A  2D                 	db	45
   463  00FE9B  20                 	db	32
   464  00FE9C  50                 	db	80	;'P'
   465  00FE9D  6F                 	db	111	;'o'
   466  00FE9E  70                 	db	112	;'p'
   467  00FE9F  20                 	db	32
   468  00FEA0  20                 	db	32
   469  00FEA1  63                 	db	99	;'c'
   470  00FEA2  61                 	db	97	;'a'
   471  00FEA3  6E                 	db	110	;'n'
   472  00FEA4  20                 	db	32
   473  00FEA5  2D                 	db	45
   474  00FEA6  2D                 	db	45
   475  00FEA7  20                 	db	32
   476  00FEA8  00                 	db	0
   477  00FEA9                     STR_11:
   478  00FEA9  20                 	db	32
   479  00FEAA  2D                 	db	45
   480  00FEAB  2D                 	db	45
   481  00FEAC  20                 	db	32
   482  00FEAD  53                 	db	83	;'S'
   483  00FEAE  6F                 	db	111	;'o'
   484  00FEAF  75                 	db	117	;'u'
   485  00FEB0  70                 	db	112	;'p'
   486  00FEB1  20                 	db	32
   487  00FEB2  63                 	db	99	;'c'
   488  00FEB3  61                 	db	97	;'a'
   489  00FEB4  6E                 	db	110	;'n'
   490  00FEB5  20                 	db	32
   491  00FEB6  2D                 	db	45
   492  00FEB7  2D                 	db	45
   493  00FEB8  20                 	db	32
   494  00FEB9  00                 	db	0
   495  00FEBA                     STR_1:
   496  00FEBA  21                 	db	33
   497  00FEBB  53                 	db	83	;'S'
   498  00FEBC  4F                 	db	79	;'O'
   499  00FEBD  52                 	db	82	;'R'
   500  00FEBE  54                 	db	84	;'T'
   501  00FEBF  20                 	db	32
   502  00FEC0  43                 	db	67	;'C'
   503  00FEC1  4F                 	db	79	;'O'
   504  00FEC2  4E                 	db	78	;'N'
   505  00FEC3  43                 	db	67	;'C'
   506  00FEC4  4C                 	db	76	;'L'
   507  00FEC5  55                 	db	85	;'U'
   508  00FEC6  44                 	db	68	;'D'
   509  00FEC7  45                 	db	69	;'E'
   510  00FEC8  44                 	db	68	;'D'
   511  00FEC9  21                 	db	33
   512  00FECA  00                 	db	0
   513  00FECB                     STR_13:
   514  00FECB  2D                 	db	45
   515  00FECC  2D                 	db	45
   516  00FECD  20                 	db	32
   517  00FECE  54                 	db	84	;'T'
   518  00FECF  6F                 	db	111	;'o'
   519  00FED0  74                 	db	116	;'t'
   520  00FED1  61                 	db	97	;'a'
   521  00FED2  6C                 	db	108	;'l'
   522  00FED3  20                 	db	32
   523  00FED4  63                 	db	99	;'c'
   524  00FED5  61                 	db	97	;'a'
   525  00FED6  6E                 	db	110	;'n'
   526  00FED7  73                 	db	115	;'s'
   527  00FED8  20                 	db	32
   528  00FED9  2D                 	db	45
   529  00FEDA  2D                 	db	45
   530  00FEDB  00                 	db	0
   531  00FEDC                     STR_10:
   532  00FEDC  4E                 	db	78	;'N'
   533  00FEDD  6F                 	db	111	;'o'
   534  00FEDE  20                 	db	32
   535  00FEDF  74                 	db	116	;'t'
   536  00FEE0  61                 	db	97	;'a'
   537  00FEE1  62                 	db	98	;'b'
   538  00FEE2  3A                 	db	58	;':'
   539  00FEE3  20                 	db	32
   540  00FEE4  39                 	db	57	;'9'
   541  00FEE5  7C                 	db	124
   542  00FEE6  54                 	db	84	;'T'
   543  00FEE7  61                 	db	97	;'a'
   544  00FEE8  62                 	db	98	;'b'
   545  00FEE9  3A                 	db	58	;':'
   546  00FEEA  20                 	db	32
   547  00FEEB  31                 	db	49	;'1'
   548  00FEEC  00                 	db	0
   549  00FEED                     STR_12:
   550  00FEED  4E                 	db	78	;'N'
   551  00FEEE  6F                 	db	111	;'o'
   552  00FEEF  20                 	db	32
   553  00FEF0  6C                 	db	108	;'l'
   554  00FEF1  62                 	db	98	;'b'
   555  00FEF2  6C                 	db	108	;'l'
   556  00FEF3  3A                 	db	58	;':'
   557  00FEF4  20                 	db	32
   558  00FEF5  31                 	db	49	;'1'
   559  00FEF6  7C                 	db	124
   560  00FEF7  6C                 	db	108	;'l'
   561  00FEF8  62                 	db	98	;'b'
   562  00FEF9  6C                 	db	108	;'l'
   563  00FEFA  3A                 	db	58	;':'
   564  00FEFB  20                 	db	32
   565  00FEFC  31                 	db	49	;'1'
   566  00FEFD  00                 	db	0
   567  00FEFE                     STR_6:
   568  00FEFE  30                 	db	48	;'0'
   569  00FEFF  36                 	db	54	;'6'
   570  00FF00  46                 	db	70	;'F'
   571  00FF01  65                 	db	101	;'e'
   572  00FF02  62                 	db	98	;'b'
   573  00FF03  20                 	db	32
   574  00FF04  7C                 	db	124
   575  00FF05  20                 	db	32
   576  00FF06  30                 	db	48	;'0'
   577  00FF07  31                 	db	49	;'1'
   578  00FF08  3A                 	db	58	;':'
   579  00FF09  30                 	db	48	;'0'
   580  00FF0A  38                 	db	56	;'8'
   581  00FF0B  3A                 	db	58	;':'
   582  00FF0C  35                 	db	53	;'5'
   583  00FF0D  36                 	db	54	;'6'
   584  00FF0E  00                 	db	0
   585  00FF0F                     STR_24:
   586  00FF0F  4C                 	db	76	;'L'
   587  00FF10  4F                 	db	79	;'O'
   588  00FF11  47                 	db	71	;'G'
   589  00FF12  20                 	db	32
   590  00FF13  31                 	db	49	;'1'
   591  00FF14  20                 	db	32
   592  00FF15  20                 	db	32
   593  00FF16  20                 	db	32
   594  00FF17  20                 	db	32
   595  00FF18  20                 	db	32
   596  00FF19  20                 	db	32
   597  00FF1A  20                 	db	32
   598  00FF1B  20                 	db	32
   599  00FF1C  20                 	db	32
   600  00FF1D  20                 	db	32
   601  00FF1E  3C                 	db	60	;'<'
   602  00FF1F  00                 	db	0
   603  00FF20                     STR_27:
   604  00FF20  4C                 	db	76	;'L'
   605  00FF21  4F                 	db	79	;'O'
   606  00FF22  47                 	db	71	;'G'
   607  00FF23  20                 	db	32
   608  00FF24  32                 	db	50	;'2'
   609  00FF25  20                 	db	32
   610  00FF26  20                 	db	32
   611  00FF27  20                 	db	32
   612  00FF28  20                 	db	32
   613  00FF29  20                 	db	32
   614  00FF2A  20                 	db	32
   615  00FF2B  20                 	db	32
   616  00FF2C  20                 	db	32
   617  00FF2D  20                 	db	32
   618  00FF2E  20                 	db	32
   619  00FF2F  3C                 	db	60	;'<'
   620  00FF30  00                 	db	0
   621  00FF31                     STR_31:
   622  00FF31  4C                 	db	76	;'L'
   623  00FF32  4F                 	db	79	;'O'
   624  00FF33  47                 	db	71	;'G'
   625  00FF34  20                 	db	32
   626  00FF35  33                 	db	51	;'3'
   627  00FF36  20                 	db	32
   628  00FF37  20                 	db	32
   629  00FF38  20                 	db	32
   630  00FF39  20                 	db	32
   631  00FF3A  20                 	db	32
   632  00FF3B  20                 	db	32
   633  00FF3C  20                 	db	32
   634  00FF3D  20                 	db	32
   635  00FF3E  20                 	db	32
   636  00FF3F  20                 	db	32
   637  00FF40  3C                 	db	60	;'<'
   638  00FF41  00                 	db	0
   639  00FF42                     STR_35:
   640  00FF42  4C                 	db	76	;'L'
   641  00FF43  4F                 	db	79	;'O'
   642  00FF44  47                 	db	71	;'G'
   643  00FF45  20                 	db	32
   644  00FF46  34                 	db	52	;'4'
   645  00FF47  20                 	db	32
   646  00FF48  20                 	db	32
   647  00FF49  20                 	db	32
   648  00FF4A  20                 	db	32
   649  00FF4B  20                 	db	32
   650  00FF4C  20                 	db	32
   651  00FF4D  20                 	db	32
   652  00FF4E  20                 	db	32
   653  00FF4F  20                 	db	32
   654  00FF50  20                 	db	32
   655  00FF51  3C                 	db	60	;'<'
   656  00FF52  00                 	db	0
   657  00FF53                     STR_23:
   658  00FF53  33                 	db	51	;'3'
   659  00FF54  2E                 	db	46
   660  00FF55  20                 	db	32
   661  00FF56  4C                 	db	76	;'L'
   662  00FF57  4F                 	db	79	;'O'
   663  00FF58  47                 	db	71	;'G'
   664  00FF59  53                 	db	83	;'S'
   665  00FF5A  20                 	db	32
   666  00FF5B  20                 	db	32
   667  00FF5C  20                 	db	32
   668  00FF5D  20                 	db	32
   669  00FF5E  20                 	db	32
   670  00FF5F  20                 	db	32
   671  00FF60  20                 	db	32
   672  00FF61  20                 	db	32
   673  00FF62  3C                 	db	60	;'<'
   674  00FF63  00                 	db	0
   675  00FF64                     STR_19:
   676  00FF64  32                 	db	50	;'2'
   677  00FF65  2E                 	db	46
   678  00FF66  20                 	db	32
   679  00FF67  53                 	db	83	;'S'
   680  00FF68  4F                 	db	79	;'O'
   681  00FF69  52                 	db	82	;'R'
   682  00FF6A  54                 	db	84	;'T'
   683  00FF6B  20                 	db	32
   684  00FF6C  20                 	db	32
   685  00FF6D  20                 	db	32
   686  00FF6E  20                 	db	32
   687  00FF6F  20                 	db	32
   688  00FF70  20                 	db	32
   689  00FF71  20                 	db	32
   690  00FF72  20                 	db	32
   691  00FF73  3C                 	db	60	;'<'
   692  00FF74  00                 	db	0
   693  00FF75                     STR_16:
   694  00FF75  31                 	db	49	;'1'
   695  00FF76  2E                 	db	46
   696  00FF77  20                 	db	32
   697  00FF78  44                 	db	68	;'D'
   698  00FF79  41                 	db	65	;'A'
   699  00FF7A  54                 	db	84	;'T'
   700  00FF7B  45                 	db	69	;'E'
   701  00FF7C  2F                 	db	47
   702  00FF7D  54                 	db	84	;'T'
   703  00FF7E  49                 	db	73	;'I'
   704  00FF7F  4D                 	db	77	;'M'
   705  00FF80  45                 	db	69	;'E'
   706  00FF81  20                 	db	32
   707  00FF82  20                 	db	32
   708  00FF83  20                 	db	32
   709  00FF84  3C                 	db	60	;'<'
   710  00FF85  00                 	db	0
   711  00FF86                     STR_4:
   712  00FF86  50                 	db	80	;'P'
   713  00FF87  61                 	db	97	;'a'
   714  00FF88  75                 	db	117	;'u'
   715  00FF89  73                 	db	115	;'s'
   716  00FF8A  65                 	db	101	;'e'
   717  00FF8B  3A                 	db	58	;':'
   718  00FF8C  3C                 	db	60	;'<'
   719  00FF8D  20                 	db	32
   720  00FF8E  7C                 	db	124
   721  00FF8F  20                 	db	32
   722  00FF90  42                 	db	66	;'B'
   723  00FF91  61                 	db	97	;'a'
   724  00FF92  63                 	db	99	;'c'
   725  00FF93  6B                 	db	107	;'k'
   726  00FF94  3A                 	db	58	;':'
   727  00FF95  3E                 	db	62	;'>'
   728  00FF96  00                 	db	0
   729  00FF97                     STR_15:
   730  00FF97  50                 	db	80	;'P'
   731  00FF98  55                 	db	85	;'U'
   732  00FF99  53                 	db	83	;'S'
   733  00FF9A  48                 	db	72	;'H'
   734  00FF9B  20                 	db	32
   735  00FF9C  54                 	db	84	;'T'
   736  00FF9D  4F                 	db	79	;'O'
   737  00FF9E  20                 	db	32
   738  00FF9F  43                 	db	67	;'C'
   739  00FFA0  4F                 	db	79	;'O'
   740  00FFA1  4E                 	db	78	;'N'
   741  00FFA2  54                 	db	84	;'T'
   742  00FFA3  49                 	db	73	;'I'
   743  00FFA4  4E                 	db	78	;'N'
   744  00FFA5  55                 	db	85	;'U'
   745  00FFA6  45                 	db	69	;'E'
   746  00FFA7  00                 	db	0
   747  00FFA8                     STR_49:
   748  00FFA8  53                 	db	83	;'S'
   749  00FFA9  6F                 	db	111	;'o'
   750  00FFAA  72                 	db	114	;'r'
   751  00FFAB  74                 	db	116	;'t'
   752  00FFAC  69                 	db	105	;'i'
   753  00FFAD  6E                 	db	110	;'n'
   754  00FFAE  67                 	db	103	;'g'
   755  00FFAF  2E                 	db	46
   756  00FFB0  2E                 	db	46
   757  00FFB1  2E                 	db	46
   758  00FFB2  00                 	db	0
   759  00FFB3                     STR_7:
   760  00FFB3  44                 	db	68	;'D'
   761  00FFB4  75                 	db	117	;'u'
   762  00FFB5  72                 	db	114	;'r'
   763  00FFB6  61                 	db	97	;'a'
   764  00FFB7  74                 	db	116	;'t'
   765  00FFB8  69                 	db	105	;'i'
   766  00FFB9  6F                 	db	111	;'o'
   767  00FFBA  6E                 	db	110	;'n'
   768  00FFBB  3A                 	db	58	;':'
   769  00FFBC  00                 	db	0
   770  00FFBD                     STR_51:
   771  00FFBD  28                 	db	40
   772  00FFBE  6E                 	db	110	;'n'
   773  00FFBF  75                 	db	117	;'u'
   774  00FFC0  6C                 	db	108	;'l'
   775  00FFC1  6C                 	db	108	;'l'
   776  00FFC2  29                 	db	41
   777  00FFC3  00                 	db	0
   778  00FFC4                     STR_5:
   779  00FFC4  53                 	db	83	;'S'
   780  00FFC5  74                 	db	116	;'t'
   781  00FFC6  61                 	db	97	;'a'
   782  00FFC7  72                 	db	114	;'r'
   783  00FFC8  74                 	db	116	;'t'
   784  00FFC9  3A                 	db	58	;':'
   785  00FFCA  00                 	db	0
   786  00FFCB                     STR_37:
   787  00FFCB  46                 	db	70	;'F'
   788  00FFCC  65                 	db	101	;'e'
   789  00FFCD  62                 	db	98	;'b'
   790  00FFCE  00                 	db	0
   791  00FFCF                     STR_47:
   792  00FFCF  44                 	db	68	;'D'
   793  00FFD0  65                 	db	101	;'e'
   794  00FFD1  63                 	db	99	;'c'
   795  00FFD2  00                 	db	0
   796  00FFD3                     STR_43:
   797  00FFD3  41                 	db	65	;'A'
   798  00FFD4  75                 	db	117	;'u'
   799  00FFD5  67                 	db	103	;'g'
   800  00FFD6  00                 	db	0
   801  00FFD7                     STR_42:
   802  00FFD7  4A                 	db	74	;'J'
   803  00FFD8  75                 	db	117	;'u'
   804  00FFD9  6C                 	db	108	;'l'
   805  00FFDA  00                 	db	0
   806  00FFDB                     STR_36:
   807  00FFDB  4A                 	db	74	;'J'
   808  00FFDC  61                 	db	97	;'a'
   809  00FFDD  6E                 	db	110	;'n'
   810  00FFDE  00                 	db	0
   811  00FFDF                     STR_41:
   812  00FFDF  4A                 	db	74	;'J'
   813  00FFE0  75                 	db	117	;'u'
   814  00FFE1  6E                 	db	110	;'n'
   815  00FFE2  00                 	db	0
   816  00FFE3                     STR_44:
   817  00FFE3  53                 	db	83	;'S'
   818  00FFE4  65                 	db	101	;'e'
   819  00FFE5  70                 	db	112	;'p'
   820  00FFE6  00                 	db	0
   821  00FFE7                     STR_38:
   822  00FFE7  4D                 	db	77	;'M'
   823  00FFE8  61                 	db	97	;'a'
   824  00FFE9  72                 	db	114	;'r'
   825  00FFEA  00                 	db	0
   826  00FFEB                     STR_39:
   827  00FFEB  41                 	db	65	;'A'
   828  00FFEC  70                 	db	112	;'p'
   829  00FFED  72                 	db	114	;'r'
   830  00FFEE  00                 	db	0
   831  00FFEF                     STR_45:
   832  00FFEF  4F                 	db	79	;'O'
   833  00FFF0  63                 	db	99	;'c'
   834  00FFF1  74                 	db	116	;'t'
   835  00FFF2  00                 	db	0
   836  00FFF3                     STR_46:
   837  00FFF3  4E                 	db	78	;'N'
   838  00FFF4  6F                 	db	111	;'o'
   839  00FFF5  76                 	db	118	;'v'
   840  00FFF6  00                 	db	0
   841  00FFF7                     STR_40:
   842  00FFF7  4D                 	db	77	;'M'
   843  00FFF8  61                 	db	97	;'a'
   844  00FFF9  79                 	db	121	;'y'
   845  00FFFA  00                 	db	0
   846  00FFFB                     STR_14:
   847  00FFFB  31                 	db	49	;'1'
   848  00FFFC  32                 	db	50	;'2'
   849  00FFFD  00                 	db	0
   850  0000                     
   851                           ; #config settings
   852  00FFFE  00                 	db	0	; dummy byte at the end
   853  0000                     
   854                           	psect	cinit
   855  002086                     __pcinit:
   856                           	opt stack 0
   857  002086                     start_initialization:
   858                           	opt stack 0
   859  002086                     __initialization:
   860                           	opt stack 0
   861                           
   862                           ; Initialize objects allocated to BANK0 (8 bytes)
   863                           ; load TBLPTR registers with __pidataBANK0
   864  002086  0E34               	movlw	low __pidataBANK0
   865  002088  6EF6               	movwf	tblptrl,c
   866  00208A  0E29               	movlw	high __pidataBANK0
   867  00208C  6EF7               	movwf	tblptrh,c
   868  00208E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   869  002090  6EF8               	movwf	tblptru,c
   870  002092  EE00  F0F2         	lfsr	0,__pdataBANK0
   871  002096  EE10 F008          	lfsr	1,8
   872  00209A                     copy_data0:
   873  00209A  0009               	tblrd		*+
   874  00209C  CFF5 FFEE          	movff	tablat,postinc0
   875  0020A0  50E5               	movf	postdec1,w,c
   876  0020A2  50E1               	movf	fsr1l,w,c
   877  0020A4  E1FA               	bnz	copy_data0
   878                           
   879                           ; Initialize objects allocated to COMRAM (4 bytes)
   880                           ; load TBLPTR registers with __pidataCOMRAM
   881  0020A6  0E5C               	movlw	low __pidataCOMRAM
   882  0020A8  6EF6               	movwf	tblptrl,c
   883  0020AA  0E29               	movlw	high __pidataCOMRAM
   884  0020AC  6EF7               	movwf	tblptrh,c
   885  0020AE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   886  0020B0  6EF8               	movwf	tblptru,c
   887  0020B2  EE00  F07A         	lfsr	0,__pdataCOMRAM
   888  0020B6  EE10 F004          	lfsr	1,4
   889  0020BA                     copy_data1:
   890  0020BA  0009               	tblrd		*+
   891  0020BC  CFF5 FFEE          	movff	tablat,postinc0
   892  0020C0  50E5               	movf	postdec1,w,c
   893  0020C2  50E1               	movf	fsr1l,w,c
   894  0020C4  E1FA               	bnz	copy_data1
   895                           
   896                           ; Clear objects allocated to BANK1 (14 bytes)
   897  0020C6  EE01  F000         	lfsr	0,__pbssBANK1
   898  0020CA  0E0E               	movlw	14
   899  0020CC                     clear_0:
   900  0020CC  6AEE               	clrf	postinc0,c
   901  0020CE  06E8               	decf	wreg,f,c
   902  0020D0  E1FD               	bnz	clear_0
   903                           
   904                           ; Clear objects allocated to BANK0 (30 bytes)
   905  0020D2  EE00  F0D4         	lfsr	0,__pbssBANK0
   906  0020D6  0E1E               	movlw	30
   907  0020D8                     clear_1:
   908  0020D8  6AEE               	clrf	postinc0,c
   909  0020DA  06E8               	decf	wreg,f,c
   910  0020DC  E1FD               	bnz	clear_1
   911                           
   912                           ; Clear objects allocated to COMRAM (31 bytes)
   913  0020DE  EE00  F05B         	lfsr	0,__pbssCOMRAM
   914  0020E2  0E1F               	movlw	31
   915  0020E4                     clear_2:
   916  0020E4  6AEE               	clrf	postinc0,c
   917  0020E6  06E8               	decf	wreg,f,c
   918  0020E8  E1FD               	bnz	clear_2
   919  0020EA                     end_of_initialization:
   920                           	opt stack 0
   921  0020EA                     __end_of__initialization:
   922                           	opt stack 0
   923  0020EA  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   924  0020EC  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   925  0020EE  0100               	movlb	0
   926  0020F0  EF8F  F00F         	goto	_main	;jump to C main() function
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           postdec1	equ	0xFE5
   934                           fsr1l	equ	0xFE1
   935                           
   936                           	psect	bssCOMRAM
   937  00005B                     __pbssCOMRAM:
   938                           	opt stack 0
   939  00005B                     _UIenabled:
   940                           	opt stack 0
   941  00005B                     	ds	2
   942  00005D                     _back:
   943                           	opt stack 0
   944  00005D                     	ds	2
   945  00005F                     _count_can_no_lab:
   946                           	opt stack 0
   947  00005F                     	ds	2
   948  000061                     _count_pop_no_tab:
   949                           	opt stack 0
   950  000061                     	ds	2
   951  000063                     _count_pop_w_tab:
   952                           	opt stack 0
   953  000063                     	ds	2
   954  000065                     _down:
   955                           	opt stack 0
   956  000065                     	ds	2
   957  000067                     _enter:
   958                           	opt stack 0
   959  000067                     	ds	2
   960  000069                     _firstboot:
   961                           	opt stack 0
   962  000069                     	ds	2
   963  00006B                     _timer1highbits:
   964                           	opt stack 0
   965  00006B                     	ds	2
   966  00006D                     _timer1lowbits:
   967                           	opt stack 0
   968  00006D                     	ds	2
   969  00006F                     _timer3highbits:
   970                           	opt stack 0
   971  00006F                     	ds	2
   972  000071                     _timer3lowbits:
   973                           	opt stack 0
   974  000071                     	ds	2
   975  000073                     _up:
   976                           	opt stack 0
   977  000073                     	ds	2
   978  000075                     _was_low:
   979                           	opt stack 0
   980  000075                     	ds	2
   981  000077                     _block:
   982                           	opt stack 0
   983  000077                     	ds	1
   984  000078                     _canType:
   985                           	opt stack 0
   986  000078                     	ds	1
   987  000079                     _input:
   988                           	opt stack 0
   989  000079                     	ds	1
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           fsr1l	equ	0xFE1
   998                           
   999                           	psect	dataCOMRAM
  1000  00007A                     __pdataCOMRAM:
  1001                           	opt stack 0
  1002  00007A                     _timer1_20ms_high:
  1003                           	opt stack 0
  1004  00007A                     	ds	2
  1005  00007C                     _timer1_20ms_low:
  1006                           	opt stack 0
  1007  00007C                     	ds	2
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           postdec1	equ	0xFE5
  1015                           fsr1l	equ	0xFE1
  1016                           
  1017                           	psect	bssBANK0
  1018  0000D4                     __pbssBANK0:
  1019                           	opt stack 0
  1020  0000D4                     _time:
  1021                           	opt stack 0
  1022  0000D4                     	ds	7
  1023  0000DB                     _count_can_w_lab:
  1024                           	opt stack 0
  1025  0000DB                     	ds	2
  1026  0000DD                     _count_total:
  1027                           	opt stack 0
  1028  0000DD                     	ds	2
  1029  0000DF                     _cur_state:
  1030                           	opt stack 0
  1031  0000DF                     	ds	2
  1032  0000E1                     _f_can_coming_to_ID:
  1033                           	opt stack 0
  1034  0000E1                     	ds	2
  1035  0000E3                     _f_can_coming_to_distribution:
  1036                           	opt stack 0
  1037  0000E3                     	ds	2
  1038  0000E5                     _f_can_distributed:
  1039                           	opt stack 0
  1040  0000E5                     	ds	2
  1041  0000E7                     _f_lastCan:
  1042                           	opt stack 0
  1043  0000E7                     	ds	2
  1044  0000E9                     _f_loadingNewCan:
  1045                           	opt stack 0
  1046  0000E9                     	ds	2
  1047  0000EB                     _log:
  1048                           	opt stack 0
  1049  0000EB                     	ds	2
  1050  0000ED                     _logstate:
  1051                           	opt stack 0
  1052  0000ED                     	ds	2
  1053  0000EF                     _total_time:
  1054                           	opt stack 0
  1055  0000EF                     	ds	2
  1056  0000F1                     _machine_state:
  1057                           	opt stack 0
  1058  0000F1                     	ds	1
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           postinc0	equ	0xFEE
  1064                           wreg	equ	0xFE8
  1065                           postdec1	equ	0xFE5
  1066                           fsr1l	equ	0xFE1
  1067                           
  1068                           	psect	dataBANK0
  1069  0000F2                     __pdataBANK0:
  1070                           	opt stack 0
  1071  0000F2                     printRTC@F3188:
  1072                           	opt stack 0
  1073  0000F2                     	ds	4
  1074  0000F6                     _f_ID_receive:
  1075                           	opt stack 0
  1076  0000F6                     	ds	2
  1077  0000F8                     _first:
  1078                           	opt stack 0
  1079  0000F8                     	ds	2
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           
  1089                           	psect	bssBANK1
  1090  000100                     __pbssBANK1:
  1091                           	opt stack 0
  1092  000100                     _startTime:
  1093                           	opt stack 0
  1094  000100                     	ds	14
  1095                           tblptru	equ	0xFF8
  1096                           tblptrh	equ	0xFF7
  1097                           tblptrl	equ	0xFF6
  1098                           tablat	equ	0xFF5
  1099                           postinc0	equ	0xFEE
  1100                           wreg	equ	0xFE8
  1101                           postdec1	equ	0xFE5
  1102                           fsr1l	equ	0xFE1
  1103                           
  1104                           	psect	cstackBANK0
  1105  000080                     __pcstackBANK0:
  1106                           	opt stack 0
  1107  000080                     ??_isdigit:
  1108  000080                     ??_I2C_Master_Wait:
  1109  000080                     ?_MAGNETISM_in:
  1110                           	opt stack 0
  1111  000080                     ?___wmul:
  1112                           	opt stack 0
  1113  000080                     ?___awmod:
  1114                           	opt stack 0
  1115  000080                     ?___lwdiv:
  1116                           	opt stack 0
  1117  000080                     ?___lldiv:
  1118                           	opt stack 0
  1119  000080                     lcdNibble@temp:
  1120                           	opt stack 0
  1121  000080                     initTime@m:
  1122                           	opt stack 0
  1123  000080                     moveServoBlock@myPosition:
  1124                           	opt stack 0
  1125  000080                     moveServoCup@myPosition:
  1126                           	opt stack 0
  1127  000080                     ___wmul@multiplier:
  1128                           	opt stack 0
  1129  000080                     ___awmod@dividend:
  1130                           	opt stack 0
  1131  000080                     ___lwdiv@dividend:
  1132                           	opt stack 0
  1133  000080                     strcpy@to:
  1134                           	opt stack 0
  1135  000080                     ___lldiv@dividend:
  1136                           	opt stack 0
  1137                           
  1138                           ; 4 bytes @ 0x0
  1139  000080                     	ds	1
  1140  000081                     I2C_Master_Read@a:
  1141                           	opt stack 0
  1142  000081                     lcdNibble@data:
  1143                           	opt stack 0
  1144  000081                     initTime@h:
  1145                           	opt stack 0
  1146  000081                     _isdigit$1698:
  1147                           	opt stack 0
  1148  000081                     I2C_Master_Write@d:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x1
  1152  000081                     	ds	1
  1153  000082                     ??_ID:
  1154  000082                     I2C_Master_Read@temp:
  1155                           	opt stack 0
  1156  000082                     lcdInst@data:
  1157                           	opt stack 0
  1158  000082                     putch@data:
  1159                           	opt stack 0
  1160  000082                     initTime@w:
  1161                           	opt stack 0
  1162  000082                     isdigit@c:
  1163                           	opt stack 0
  1164  000082                     ___wmul@multiplicand:
  1165                           	opt stack 0
  1166  000082                     ___awmod@divisor:
  1167                           	opt stack 0
  1168  000082                     ___lwdiv@divisor:
  1169                           	opt stack 0
  1170  000082                     strcpy@from:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x2
  1174  000082                     	ds	1
  1175  000083                     ??_initLCD:
  1176  000083                     initTime@DD:
  1177                           	opt stack 0
  1178  000083                     getRTC@i:
  1179                           	opt stack 0
  1180  000083                     ID@top_bottom_conductivity:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x3
  1184  000083                     	ds	1
  1185  000084                     initTime@MM:
  1186                           	opt stack 0
  1187  000084                     ___awmod@counter:
  1188                           	opt stack 0
  1189  000084                     ___wmul@product:
  1190                           	opt stack 0
  1191  000084                     ___lwdiv@quotient:
  1192                           	opt stack 0
  1193  000084                     strcpy@cp:
  1194                           	opt stack 0
  1195  000084                     ___lldiv@divisor:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x4
  1199  000084                     	ds	1
  1200  000085                     ??_initSortTimer:
  1201  000085                     initTime@YY:
  1202                           	opt stack 0
  1203  000085                     ___awmod@sign:
  1204                           	opt stack 0
  1205  000085                     ID@side_conductivity:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x5
  1209  000085                     	ds	1
  1210  000086                     ?___awdiv:
  1211                           	opt stack 0
  1212  000086                     initTime@s:
  1213                           	opt stack 0
  1214  000086                     ___lwdiv@counter:
  1215                           	opt stack 0
  1216  000086                     ___awdiv@dividend:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x6
  1220  000086                     	ds	1
  1221  000087                     ?___lwmod:
  1222                           	opt stack 0
  1223  000087                     ID@magnetic:
  1224                           	opt stack 0
  1225  000087                     ___lwmod@dividend:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x7
  1229  000087                     	ds	1
  1230  000088                     initSortTimer@i:
  1231                           	opt stack 0
  1232  000088                     ___awdiv@divisor:
  1233                           	opt stack 0
  1234  000088                     ___lldiv@quotient:
  1235                           	opt stack 0
  1236                           
  1237                           ; 4 bytes @ 0x8
  1238  000088                     	ds	1
  1239  000089                     ___lwmod@divisor:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x9
  1243  000089                     	ds	1
  1244  00008A                     ??_Loading:
  1245  00008A                     ___awdiv@counter:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0xA
  1249  00008A                     	ds	1
  1250  00008B                     ___awdiv@sign:
  1251                           	opt stack 0
  1252  00008B                     ___lwmod@counter:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0xB
  1256  00008B                     	ds	1
  1257  00008C                     ___lldiv@counter:
  1258                           	opt stack 0
  1259  00008C                     ___awdiv@quotient:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0xC
  1263  00008C                     	ds	1
  1264  00008D                     I2C_Master_Init@c:
  1265                           	opt stack 0
  1266                           
  1267                           ; 4 bytes @ 0xD
  1268  00008D                     	ds	1
  1269  00008E                     ?_printf:
  1270                           	opt stack 0
  1271  00008E                     printf@f:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0xE
  1275  00008E                     	ds	3
  1276  000091                     ??_I2C_Master_Init:
  1277                           
  1278                           ; 1 bytes @ 0x11
  1279  000091                     	ds	4
  1280  000095                     ??_loadRTC:
  1281                           
  1282                           ; 1 bytes @ 0x15
  1283  000095                     	ds	1
  1284  000096                     loadRTC@i:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x16
  1288  000096                     	ds	4
  1289  00009A                     ??_printf:
  1290                           
  1291                           ; 1 bytes @ 0x1A
  1292  00009A                     	ds	4
  1293  00009E                     printf@prec:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x1E
  1297  00009E                     	ds	1
  1298  00009F                     printf@ap:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x1F
  1302  00009F                     	ds	2
  1303  0000A1                     printf@cp:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x21
  1307  0000A1                     	ds	2
  1308  0000A3                     printf@val:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x23
  1312  0000A3                     	ds	2
  1313  0000A5                     printf@len:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x25
  1317  0000A5                     	ds	2
  1318  0000A7                     printf@flag:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x27
  1322  0000A7                     	ds	1
  1323  0000A8                     printf@c:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x28
  1327  0000A8                     	ds	1
  1328  0000A9                     printf@width:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0x29
  1332  0000A9                     	ds	2
  1333  0000AB                     ??_printRTC:
  1334                           
  1335                           ; 1 bytes @ 0x2B
  1336  0000AB                     	ds	3
  1337  0000AE                     printRTC@INT_time:
  1338                           	opt stack 0
  1339                           
  1340                           ; 14 bytes @ 0x2E
  1341  0000AE                     	ds	14
  1342  0000BC                     printRTC@RTC_month:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x3C
  1346  0000BC                     	ds	2
  1347  0000BE                     printRTC@month:
  1348                           	opt stack 0
  1349                           
  1350                           ; 4 bytes @ 0x3E
  1351  0000BE                     	ds	4
  1352  0000C2                     printRTC@i:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x42
  1356  0000C2                     	ds	2
  1357  0000C4                     ??_UI:
  1358                           
  1359                           ; 1 bytes @ 0x44
  1360  0000C4                     	ds	1
  1361  0000C5                     _UI$2056:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x45
  1365  0000C5                     	ds	2
  1366  0000C7                     UI@i:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x47
  1370  0000C7                     	ds	1
  1371  0000C8                     UI@i_640:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x48
  1375  0000C8                     	ds	1
  1376  0000C9                     UI@i_641:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x49
  1380  0000C9                     	ds	1
  1381  0000CA                     UI@i_644:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x4A
  1385  0000CA                     	ds	1
  1386  0000CB                     UI@i_645:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x4B
  1390  0000CB                     	ds	1
  1391  0000CC                     UI@i_648:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x4C
  1395  0000CC                     	ds	1
  1396  0000CD                     UI@i_649:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x4D
  1400  0000CD                     	ds	1
  1401  0000CE                     UI@i_652:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x4E
  1405  0000CE                     	ds	1
  1406  0000CF                     UI@i_653:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x4F
  1410  0000CF                     	ds	1
  1411  0000D0                     UI@i_656:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x50
  1415  0000D0                     	ds	1
  1416  0000D1                     UI@i_657:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x51
  1420  0000D1                     	ds	1
  1421  0000D2                     UI@i_660:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x52
  1425  0000D2                     	ds	1
  1426  0000D3                     UI@i_661:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x53
  1430  0000D3                     	ds	1
  1431  0000D4                     tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           postdec1	equ	0xFE5
  1438                           fsr1l	equ	0xFE1
  1439                           
  1440                           ; 1 bytes @ 0x54
  1441                           
  1442                           	psect	cstackCOMRAM
  1443  000001                     __pcstackCOMRAM:
  1444                           	opt stack 0
  1445  000001                     ??i2_I2C_Master_Wait:
  1446  000001                     ??i2_isdigit:
  1447  000001                     ?i2___wmul:
  1448                           	opt stack 0
  1449  000001                     ?i2___lwmod:
  1450                           	opt stack 0
  1451  000001                     i2lcdNibble@temp:
  1452                           	opt stack 0
  1453  000001                     dispLogs@myLog:
  1454                           	opt stack 0
  1455  000001                     i2___wmul@multiplier:
  1456                           	opt stack 0
  1457  000001                     i2___lwmod@dividend:
  1458                           	opt stack 0
  1459  000001                     i2strcpy@to:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x0
  1463  000001                     	ds	1
  1464  000002                     i2I2C_Master_Read@a:
  1465                           	opt stack 0
  1466  000002                     i2lcdNibble@data:
  1467                           	opt stack 0
  1468  000002                     i2_isdigit$1698:
  1469                           	opt stack 0
  1470  000002                     i2I2C_Master_Write@d:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x1
  1474  000002                     	ds	1
  1475  000003                     i2I2C_Master_Read@temp:
  1476                           	opt stack 0
  1477  000003                     i2lcdInst@data:
  1478                           	opt stack 0
  1479  000003                     i2putch@data:
  1480                           	opt stack 0
  1481  000003                     i2isdigit@c:
  1482                           	opt stack 0
  1483  000003                     i2___wmul@multiplicand:
  1484                           	opt stack 0
  1485  000003                     i2___lwmod@divisor:
  1486                           	opt stack 0
  1487  000003                     i2strcpy@from:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x2
  1491  000003                     	ds	1
  1492  000004                     i2getRTC@i:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x3
  1496  000004                     	ds	1
  1497  000005                     i2___lwmod@counter:
  1498                           	opt stack 0
  1499  000005                     i2___wmul@product:
  1500                           	opt stack 0
  1501  000005                     i2strcpy@cp:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x4
  1505  000005                     	ds	1
  1506  000006                     ?i2___lwdiv:
  1507                           	opt stack 0
  1508  000006                     i2___lwdiv@dividend:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x5
  1512  000006                     	ds	2
  1513  000008                     i2___lwdiv@divisor:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x7
  1517  000008                     	ds	2
  1518  00000A                     i2___lwdiv@quotient:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x9
  1522  00000A                     	ds	2
  1523  00000C                     i2___lwdiv@counter:
  1524                           	opt stack 0
  1525                           
  1526                           ; 1 bytes @ 0xB
  1527  00000C                     	ds	1
  1528  00000D                     ?i2_printf:
  1529                           	opt stack 0
  1530  00000D                     i2printf@f:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0xC
  1534  00000D                     	ds	12
  1535  000019                     ??i2_printf:
  1536                           
  1537                           ; 1 bytes @ 0x18
  1538  000019                     	ds	4
  1539  00001D                     i2printf@prec:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x1C
  1543  00001D                     	ds	1
  1544  00001E                     i2printf@ap:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x1D
  1548  00001E                     	ds	2
  1549  000020                     i2printf@cp:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x1F
  1553  000020                     	ds	2
  1554  000022                     i2printf@val:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x21
  1558  000022                     	ds	2
  1559  000024                     i2printf@len:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x23
  1563  000024                     	ds	2
  1564  000026                     i2printf@flag:
  1565                           	opt stack 0
  1566                           
  1567                           ; 1 bytes @ 0x25
  1568  000026                     	ds	1
  1569  000027                     i2printf@c:
  1570                           	opt stack 0
  1571                           
  1572                           ; 1 bytes @ 0x26
  1573  000027                     	ds	1
  1574  000028                     i2printf@width:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x27
  1578  000028                     	ds	2
  1579  00002A                     ??_printSortTimer:
  1580  00002A                     ??i2_printRTC:
  1581  00002A                     ?_inputHandler:
  1582                           	opt stack 0
  1583                           
  1584                           ; 2 bytes @ 0x29
  1585  00002A                     	ds	2
  1586  00002C                     ??_inputHandler:
  1587                           
  1588                           ; 1 bytes @ 0x2B
  1589  00002C                     	ds	1
  1590  00002D                     printSortTimer@curTime:
  1591                           	opt stack 0
  1592  00002D                     i2printRTC@INT_time:
  1593                           	opt stack 0
  1594                           
  1595                           ; 14 bytes @ 0x2C
  1596  00002D                     	ds	14
  1597  00003B                     printSortTimer@start_sec:
  1598                           	opt stack 0
  1599  00003B                     i2printRTC@RTC_month:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x3A
  1603  00003B                     	ds	2
  1604  00003D                     printSortTimer@cur_sec:
  1605                           	opt stack 0
  1606  00003D                     i2printRTC@month:
  1607                           	opt stack 0
  1608                           
  1609                           ; 4 bytes @ 0x3C
  1610  00003D                     	ds	2
  1611  00003F                     printSortTimer@hour:
  1612                           	opt stack 0
  1613                           
  1614                           ; 2 bytes @ 0x3E
  1615  00003F                     	ds	2
  1616  000041                     printSortTimer@min:
  1617                           	opt stack 0
  1618  000041                     i2printRTC@i:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x40
  1622  000041                     	ds	2
  1623  000043                     ??_updateMenu:
  1624  000043                     printSortTimer@sec:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x42
  1628  000043                     	ds	2
  1629  000045                     _printSortTimer$2171:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x44
  1633  000045                     	ds	2
  1634  000047                     printSortTimer@timeDiff:
  1635                           	opt stack 0
  1636                           
  1637                           ; 2 bytes @ 0x46
  1638  000047                     	ds	2
  1639  000049                     printSortTimer@i:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0x48
  1643  000049                     	ds	2
  1644  00004B                     ??_handler:
  1645                           
  1646                           ; 1 bytes @ 0x4A
  1647  00004B                     	ds	16
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           postdec1	equ	0xFE5
  1655                           fsr1l	equ	0xFE1
  1656                           
  1657 ;;
  1658 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1659 ;;
  1660 ;; *************** function _main *****************
  1661 ;; Defined at:
  1662 ;;		line 16 in file "main.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;		None
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;		None
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;Total ram usage:        0 bytes
  1681 ;; Hardware stack levels required when called:   13
  1682 ;; This function calls:
  1683 ;;		_PortTestA5
  1684 ;;		_UI
  1685 ;;		_initLCD
  1686 ;;		_initTime
  1687 ;;		_initUI
  1688 ;;		_machineConfig
  1689 ;;		_sort
  1690 ;;		_stopSignals
  1691 ;; This function is called by:
  1692 ;;		Startup code after reset
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text0
  1697  001F1E                     __ptext0:
  1698                           	opt stack 0
  1699  001F1E                     _main:
  1700                           	opt stack 18
  1701                           
  1702                           ;main.c: 17: machineConfig();
  1703                           
  1704                           ;incstack = 0
  1705  001F1E  EC8B  F011         	call	_machineConfig	;wreg free
  1706                           
  1707                           ;main.c: 18: initLCD();
  1708  001F22  ECB2  F011         	call	_initLCD	;wreg free
  1709                           
  1710                           ;main.c: 19: initTime(0x42, 0x32, 0x13, 0x04, 0x09, 0x02, 0x17);
  1711  001F26  0E32               	movlw	50
  1712  001F28  0100               	movlb	0	; () banked
  1713  001F2A  6F80               	movwf	initTime@m& (0+255),b
  1714  001F2C  0E13               	movlw	19
  1715  001F2E  0100               	movlb	0	; () banked
  1716  001F30  6F81               	movwf	initTime@h& (0+255),b
  1717  001F32  0E04               	movlw	4
  1718  001F34  0100               	movlb	0	; () banked
  1719  001F36  6F82               	movwf	initTime@w& (0+255),b
  1720  001F38  0E09               	movlw	9
  1721  001F3A  0100               	movlb	0	; () banked
  1722  001F3C  6F83               	movwf	initTime@DD& (0+255),b
  1723  001F3E  0E02               	movlw	2
  1724  001F40  0100               	movlb	0	; () banked
  1725  001F42  6F84               	movwf	initTime@MM& (0+255),b
  1726  001F44  0E17               	movlw	23
  1727  001F46  0100               	movlb	0	; () banked
  1728  001F48  6F85               	movwf	initTime@YY& (0+255),b
  1729  001F4A  0E42               	movlw	66
  1730  001F4C  EC10  F014         	call	_initTime
  1731                           
  1732                           ;main.c: 20: initUI();
  1733  001F50  EC30  F014         	call	_initUI	;wreg free
  1734                           
  1735                           ;main.c: 24: switch(machine_state){
  1736                           
  1737                           ;main.c: 23: while(1){
  1738  001F54  D011               	goto	l5571
  1739  001F56                     l5557:
  1740                           
  1741                           ;main.c: 26: UI();
  1742  001F56  EC09  F000         	call	_UI	;wreg free
  1743                           
  1744                           ;main.c: 27: break;
  1745  001F5A  D00E               	goto	l5571
  1746  001F5C                     l5559:
  1747                           
  1748                           ;main.c: 29: sort();
  1749  001F5C  ECFF  F013         	call	_sort	;wreg free
  1750                           
  1751                           ;main.c: 30: break;
  1752  001F60  D00B               	goto	l5571
  1753  001F62                     l5561:
  1754                           
  1755                           ;main.c: 32: stopSignals();
  1756  001F62  EC3D  F014         	call	_stopSignals	;wreg free
  1757                           
  1758                           ;main.c: 33: UI();
  1759  001F66  EC09  F000         	call	_UI	;wreg free
  1760                           
  1761                           ;main.c: 34: break;
  1762  001F6A  D006               	goto	l5571
  1763  001F6C                     l5565:
  1764                           
  1765                           ;main.c: 36: PortTestA5();
  1766  001F6C  EC5C  F014         	call	_PortTestA5	;wreg free
  1767                           
  1768                           ;main.c: 37: break;
  1769  001F70  D003               	goto	l5571
  1770  001F72                     l5567:
  1771                           
  1772                           ;main.c: 39: stopSignals();
  1773  001F72  EC3D  F014         	call	_stopSignals	;wreg free
  1774  001F76                     l689:
  1775  001F76  D7FF               	goto	l689
  1776  001F78                     l5571:
  1777  001F78  0100               	movlb	0	; () banked
  1778  001F7A  51F1               	movf	_machine_state& (0+255),w,b
  1779                           
  1780                           ; Switch size 1, requested type "space"
  1781                           ; Number of cases is 5, Range of values is 0 to 4
  1782                           ; switch strategies available:
  1783                           ; Name         Instructions Cycles
  1784                           ; simple_byte           16     9 (average)
  1785                           ;	Chosen strategy is simple_byte
  1786  001F7C  0A00               	xorlw	0	; case 0
  1787  001F7E  B4D8               	btfsc	status,2,c
  1788  001F80  D7EA               	goto	l5557
  1789  001F82  0A01               	xorlw	1	; case 1
  1790  001F84  B4D8               	btfsc	status,2,c
  1791  001F86  D7EA               	goto	l5559
  1792  001F88  0A03               	xorlw	3	; case 2
  1793  001F8A  B4D8               	btfsc	status,2,c
  1794  001F8C  D7EA               	goto	l5561
  1795  001F8E  0A01               	xorlw	1	; case 3
  1796  001F90  B4D8               	btfsc	status,2,c
  1797  001F92  D7EC               	goto	l5565
  1798  001F94  0A07               	xorlw	7	; case 4
  1799  001F96  B4D8               	btfsc	status,2,c
  1800  001F98  D7EC               	goto	l5567
  1801                           
  1802                           ; BSR set to: 0
  1803                           
  1804                           ; BSR set to: 0
  1805  001F9A  D7EE               	goto	l5571
  1806  001F9C                     __end_of_main:
  1807                           	opt stack 0
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1l	equ	0xFE1
  1816                           status	equ	0xFD8
  1817                           
  1818 ;; *************** function _stopSignals *****************
  1819 ;; Defined at:
  1820 ;;		line 48 in file "main.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;		None
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      void 
  1827 ;; Registers used:
  1828 ;;		wreg, status,2
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;Total ram usage:        0 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    7
  1841 ;; This function calls:
  1842 ;;		Nothing
  1843 ;; This function is called by:
  1844 ;;		_main
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text1
  1849  00287A                     __ptext1:
  1850                           	opt stack 0
  1851  00287A                     _stopSignals:
  1852                           	opt stack 23
  1853                           
  1854                           ;main.c: 49: LATA = 0x00;
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;incstack = 0
  1858  00287A  0E00               	movlw	0
  1859  00287C  6E89               	movwf	3977,c	;volatile
  1860                           
  1861                           ;main.c: 50: LATB = 0x00;
  1862  00287E  0E00               	movlw	0
  1863  002880  6E8A               	movwf	3978,c	;volatile
  1864                           
  1865                           ;main.c: 51: LATC = 0x00;
  1866  002882  0E00               	movlw	0
  1867  002884  6E8B               	movwf	3979,c	;volatile
  1868                           
  1869                           ;main.c: 52: LATD = 0x00;
  1870  002886  0E00               	movlw	0
  1871  002888  6E8C               	movwf	3980,c	;volatile
  1872                           
  1873                           ;main.c: 53: LATE = 0x00;
  1874  00288A  0E00               	movlw	0
  1875  00288C  6E8D               	movwf	3981,c	;volatile
  1876  00288E  0012               	return		;funcret
  1877  002890                     __end_of_stopSignals:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1l	equ	0xFE1
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _sort *****************
  1890 ;; Defined at:
  1891 ;;		line 28 in file "sort.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:   12
  1912 ;; This function calls:
  1913 ;;		_Distribution
  1914 ;;		_ID
  1915 ;;		_Loading
  1916 ;; This function is called by:
  1917 ;;		_main
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text2
  1922  0027FE                     __ptext2:
  1923                           	opt stack 0
  1924  0027FE                     _sort:
  1925                           	opt stack 18
  1926                           
  1927                           ;sort.c: 29: if(machine_state == Sorting_state){
  1928                           
  1929                           ;incstack = 0
  1930  0027FE  0100               	movlb	0	; () banked
  1931  002800  05F1               	decf	_machine_state& (0+255),w,b
  1932  002802  B4D8               	btfsc	status,2,c
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;sort.c: 30: Loading();
  1936  002804  EC73  F00E         	call	_Loading	;wreg free
  1937                           
  1938                           ;sort.c: 31: }
  1939                           ;sort.c: 32: if(machine_state == Sorting_state){
  1940  002808  0100               	movlb	0	; () banked
  1941  00280A  05F1               	decf	_machine_state& (0+255),w,b
  1942  00280C  B4D8               	btfsc	status,2,c
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;sort.c: 33: ID();
  1946  00280E  ECCE  F00D         	call	_ID	;wreg free
  1947                           
  1948                           ;sort.c: 34: }
  1949                           ;sort.c: 35: if(machine_state == Sorting_state){
  1950  002812  0100               	movlb	0	; () banked
  1951  002814  05F1               	decf	_machine_state& (0+255),w,b
  1952  002816  A4D8               	btfss	status,2,c
  1953  002818  0012               	return	
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;sort.c: 36: Distribution();
  1957  00281A  EC55  F013         	call	_Distribution	;wreg free
  1958  00281E  0012               	return	
  1959  002820                     __end_of_sort:
  1960                           	opt stack 0
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           postdec1	equ	0xFE5
  1968                           fsr1l	equ	0xFE1
  1969                           status	equ	0xFD8
  1970                           
  1971 ;; *************** function _Loading *****************
  1972 ;; Defined at:
  1973 ;;		line 40 in file "sort.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;		None
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;		None
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;Total ram usage:        1 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:   11
  1994 ;; This function calls:
  1995 ;;		_initSortTimer
  1996 ;;		_lcdInst
  1997 ;; This function is called by:
  1998 ;;		_sort
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text3
  2003  001CE6                     __ptext3:
  2004                           	opt stack 0
  2005  001CE6                     _Loading:
  2006                           	opt stack 18
  2007                           
  2008                           ;sort.c: 41: if(first){
  2009                           
  2010                           ;incstack = 0
  2011  001CE6  0100               	movlb	0	; () banked
  2012  001CE8  51F8               	movf	_first& (0+255),w,b
  2013  001CEA  0100               	movlb	0	; () banked
  2014  001CEC  11F9               	iorwf	(_first+1)& (0+255),w,b
  2015  001CEE  B4D8               	btfsc	status,2,c
  2016  001CF0  D015               	goto	l4835
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;sort.c: 42: first = 0;
  2020  001CF2  0E00               	movlw	0
  2021  001CF4  0100               	movlb	0	; () banked
  2022  001CF6  6FF9               	movwf	(_first+1)& (0+255),b
  2023  001CF8  0E00               	movlw	0
  2024  001CFA  6FF8               	movwf	_first& (0+255),b
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;sort.c: 43: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2028  001CFC  0E01               	movlw	1
  2029  001CFE  EC76  F014         	call	_lcdInst
  2030  001D02  0E68               	movlw	104
  2031  001D04  0100               	movlb	0	; () banked
  2032  001D06  6F8A               	movwf	??_Loading& (0+255),b
  2033  001D08  0EE4               	movlw	228
  2034  001D0A                     u4587:
  2035  001D0A  2EE8               	decfsz	wreg,f,c
  2036  001D0C  D7FE               	bra	u4587
  2037  001D0E  2F8A               	decfsz	??_Loading& (0+255),f,b
  2038  001D10  D7FC               	bra	u4587
  2039  001D12  F000               	nop	
  2040                           
  2041                           ;sort.c: 44: initSortTimer();
  2042  001D14  EC79  F00D         	call	_initSortTimer	;wreg free
  2043                           
  2044                           ;sort.c: 47: LATAbits.LATA5 = 1;
  2045  001D18  8A89               	bsf	3977,5,c	;volatile
  2046                           
  2047                           ;sort.c: 52: }
  2048  001D1A  0012               	return	
  2049  001D1C                     l4835:
  2050                           
  2051                           ;sort.c: 53: else{
  2052                           ;sort.c: 57: if(!f_loadingNewCan){
  2053  001D1C  0100               	movlb	0	; () banked
  2054  001D1E  51E9               	movf	_f_loadingNewCan& (0+255),w,b
  2055  001D20  0100               	movlb	0	; () banked
  2056  001D22  11EA               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2057  001D24  A4D8               	btfss	status,2,c
  2058  001D26  D016               	goto	l4849
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;sort.c: 61: if(!f_loadingNewCan){
  2062  001D28  0100               	movlb	0	; () banked
  2063  001D2A  51E9               	movf	_f_loadingNewCan& (0+255),w,b
  2064  001D2C  0100               	movlb	0	; () banked
  2065  001D2E  11EA               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2066  001D30  B4D8               	btfsc	status,2,c
  2067  001D32  0012               	return	
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;sort.c: 66: else{
  2071                           ;sort.c: 67: count_total++;
  2072                           
  2073                           ; BSR set to: 0
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;sort.c: 63: }
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;sort.c: 62: return;
  2080  001D34  0100               	movlb	0	; () banked
  2081  001D36  4BDD               	infsnz	_count_total& (0+255),f,b
  2082  001D38  2BDE               	incf	(_count_total+1)& (0+255),f,b
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;sort.c: 68: if(count_total == 12){
  2086  001D3A  0E0C               	movlw	12
  2087  001D3C  0100               	movlb	0	; () banked
  2088  001D3E  19DD               	xorwf	_count_total& (0+255),w,b
  2089  001D40  0100               	movlb	0	; () banked
  2090  001D42  11DE               	iorwf	(_count_total+1)& (0+255),w,b
  2091  001D44  A4D8               	btfss	status,2,c
  2092  001D46  0012               	return	
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;sort.c: 69: f_lastCan = 1;
  2096  001D48  0E00               	movlw	0
  2097  001D4A  0100               	movlb	0	; () banked
  2098  001D4C  6FE8               	movwf	(_f_lastCan+1)& (0+255),b
  2099  001D4E  0E01               	movlw	1
  2100  001D50  6FE7               	movwf	_f_lastCan& (0+255),b
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;sort.c: 70: }
  2104                           ;sort.c: 71: }
  2105                           ;sort.c: 72: }
  2106                           
  2107                           ; BSR set to: 0
  2108  001D52  0012               	return	
  2109  001D54                     l4849:
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;sort.c: 75: else if(f_ID_receive){
  2113  001D54  0100               	movlb	0	; () banked
  2114  001D56  51F6               	movf	_f_ID_receive& (0+255),w,b
  2115  001D58  0100               	movlb	0	; () banked
  2116  001D5A  11F7               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2117  001D5C  B4D8               	btfsc	status,2,c
  2118  001D5E  0012               	return	
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;sort.c: 76: f_loadingNewCan = 0;
  2122  001D60  0E00               	movlw	0
  2123  001D62  0100               	movlb	0	; () banked
  2124  001D64  6FEA               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2125  001D66  0E00               	movlw	0
  2126  001D68  6FE9               	movwf	_f_loadingNewCan& (0+255),b
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;sort.c: 77: LATAbits.LATA4 = 1;
  2130  001D6A  8889               	bsf	3977,4,c	;volatile
  2131                           
  2132                           ;sort.c: 78: f_can_coming_to_ID = 1;
  2133  001D6C  0E00               	movlw	0
  2134  001D6E  0100               	movlb	0	; () banked
  2135  001D70  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2136  001D72  0E01               	movlw	1
  2137  001D74  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;sort.c: 81: LATAbits.LATA4 = 0;
  2141  001D76  9889               	bcf	3977,4,c	;volatile
  2142                           
  2143                           ; BSR set to: 0
  2144                           
  2145                           ; BSR set to: 0
  2146  001D78  0012               	return	
  2147  001D7A                     __end_of_Loading:
  2148                           	opt stack 0
  2149                           tblptru	equ	0xFF8
  2150                           tblptrh	equ	0xFF7
  2151                           tblptrl	equ	0xFF6
  2152                           tablat	equ	0xFF5
  2153                           postinc0	equ	0xFEE
  2154                           wreg	equ	0xFE8
  2155                           postdec1	equ	0xFE5
  2156                           fsr1l	equ	0xFE1
  2157                           status	equ	0xFD8
  2158                           
  2159 ;; *************** function _initSortTimer *****************
  2160 ;; Defined at:
  2161 ;;		line 125 in file "sort.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  i               2    8[BANK0 ] int 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;Total ram usage:        5 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:   10
  2182 ;; This function calls:
  2183 ;;		_getRTC
  2184 ;; This function is called by:
  2185 ;;		_Loading
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text4
  2190  001AF2                     __ptext4:
  2191                           	opt stack 0
  2192  001AF2                     _initSortTimer:
  2193                           	opt stack 18
  2194                           
  2195                           ;sort.c: 127: getRTC();
  2196                           
  2197                           ;incstack = 0
  2198  001AF2  EC4C  F00F         	call	_getRTC	;wreg free
  2199                           
  2200                           ;sort.c: 128: for(int i = 0; i < 7; i++){
  2201  001AF6  0E00               	movlw	0
  2202  001AF8  0100               	movlb	0	; () banked
  2203  001AFA  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2204  001AFC  0E00               	movlw	0
  2205  001AFE  6F88               	movwf	initSortTimer@i& (0+255),b
  2206  001B00                     l4511:
  2207                           
  2208                           ; BSR set to: 0
  2209  001B00  0100               	movlb	0	; () banked
  2210  001B02  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2211  001B04  D008               	goto	l4515
  2212  001B06  0100               	movlb	0	; () banked
  2213  001B08  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2214  001B0A  E140               	bnz	l4521
  2215  001B0C  0E07               	movlw	7
  2216  001B0E  0100               	movlb	0	; () banked
  2217  001B10  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2218  001B12  B0D8               	btfsc	status,0,c
  2219  001B14  D03B               	goto	l4521
  2220  001B16                     l4515:
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;sort.c: 129: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2224  001B16  0ED4               	movlw	low _time
  2225  001B18  0100               	movlb	0	; () banked
  2226  001B1A  2588               	addwf	initSortTimer@i& (0+255),w,b
  2227  001B1C  6ED9               	movwf	fsr2l,c
  2228  001B1E  0E00               	movlw	high _time
  2229  001B20  0100               	movlb	0	; () banked
  2230  001B22  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2231  001B24  6EDA               	movwf	fsr2h,c
  2232  001B26  50DF               	movf	indf2,w,c
  2233  001B28  0100               	movlb	0	; () banked
  2234  001B2A  6F85               	movwf	??_initSortTimer& (0+255),b
  2235  001B2C  0100               	movlb	0	; () banked
  2236  001B2E  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2237  001B30  0E0F               	movlw	15
  2238  001B32  1785               	andwf	??_initSortTimer& (0+255),f,b
  2239  001B34  0E0F               	movlw	15
  2240  001B36  0100               	movlb	0	; () banked
  2241  001B38  1785               	andwf	??_initSortTimer& (0+255),f,b
  2242  001B3A  0100               	movlb	0	; () banked
  2243  001B3C  5185               	movf	??_initSortTimer& (0+255),w,b
  2244  001B3E  0D0A               	mullw	10
  2245  001B40  0ED4               	movlw	low _time
  2246  001B42  0100               	movlb	0	; () banked
  2247  001B44  2588               	addwf	initSortTimer@i& (0+255),w,b
  2248  001B46  6ED9               	movwf	fsr2l,c
  2249  001B48  0E00               	movlw	high _time
  2250  001B4A  0100               	movlb	0	; () banked
  2251  001B4C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2252  001B4E  6EDA               	movwf	fsr2h,c
  2253  001B50  50DF               	movf	indf2,w,c
  2254  001B52  0B0F               	andlw	15
  2255  001B54  0100               	movlb	0	; () banked
  2256  001B56  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2257  001B58  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2258  001B5A  50F3               	movf	prodl,w,c
  2259  001B5C  0100               	movlb	0	; () banked
  2260  001B5E  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2261  001B60  50F4               	movf	prodh,w,c
  2262  001B62  0100               	movlb	0	; () banked
  2263  001B64  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2264  001B66  90D8               	bcf	status,0,c
  2265  001B68  0100               	movlb	0	; () banked
  2266  001B6A  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2267  001B6C  6ED9               	movwf	fsr2l,c
  2268  001B6E  0100               	movlb	0	; () banked
  2269  001B70  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2270  001B72  6EDA               	movwf	fsr2h,c
  2271  001B74  0E00               	movlw	low _startTime
  2272  001B76  26D9               	addwf	fsr2l,f,c
  2273  001B78  0E01               	movlw	high _startTime
  2274  001B7A  22DA               	addwfc	fsr2h,f,c
  2275  001B7C  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2276  001B80  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2277                           
  2278                           ; BSR set to: 0
  2279  001B84  0100               	movlb	0	; () banked
  2280  001B86  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2281  001B88  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2282  001B8A  D7BA               	goto	l4511
  2283  001B8C                     l4521:
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;sort.c: 130: }
  2287                           ;sort.c: 132: T0CON = 0b00010111;
  2288  001B8C  0E17               	movlw	23
  2289  001B8E  6ED5               	movwf	4053,c	;volatile
  2290                           
  2291                           ;sort.c: 141: TMR0H = 0b10000101;
  2292  001B90  0E85               	movlw	133
  2293  001B92  6ED7               	movwf	4055,c	;volatile
  2294                           
  2295                           ;sort.c: 142: TMR0L = 0b11101110;
  2296  001B94  0EEE               	movlw	238
  2297  001B96  6ED6               	movwf	4054,c	;volatile
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;sort.c: 143: TMR0ON = 1;
  2301  001B98  8ED5               	bsf	4053,7,c	;volatile
  2302                           
  2303                           ; BSR set to: 0
  2304  001B9A  0012               	return		;funcret
  2305  001B9C                     __end_of_initSortTimer:
  2306                           	opt stack 0
  2307                           tblptru	equ	0xFF8
  2308                           tblptrh	equ	0xFF7
  2309                           tblptrl	equ	0xFF6
  2310                           tablat	equ	0xFF5
  2311                           prodh	equ	0xFF4
  2312                           prodl	equ	0xFF3
  2313                           postinc0	equ	0xFEE
  2314                           wreg	equ	0xFE8
  2315                           postdec1	equ	0xFE5
  2316                           fsr1l	equ	0xFE1
  2317                           indf2	equ	0xFDF
  2318                           postinc2	equ	0xFDE
  2319                           postdec2	equ	0xFDD
  2320                           fsr2h	equ	0xFDA
  2321                           fsr2l	equ	0xFD9
  2322                           status	equ	0xFD8
  2323                           
  2324 ;; *************** function _ID *****************
  2325 ;; Defined at:
  2326 ;;		line 85 in file "sort.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;		None
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;  magnetic        2    7[BANK0 ] int 
  2331 ;;  side_conduct    2    5[BANK0 ] int 
  2332 ;;  top_bottom_c    2    3[BANK0 ] int 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;Total ram usage:        7 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    8
  2349 ;; This function calls:
  2350 ;;		_MAGNETISM_in
  2351 ;;		_moveServoBlock
  2352 ;; This function is called by:
  2353 ;;		_sort
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text5
  2358  001B9C                     __ptext5:
  2359                           	opt stack 0
  2360  001B9C                     _ID:
  2361                           	opt stack 21
  2362                           
  2363                           ;sort.c: 86: if(f_can_coming_to_ID){
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;incstack = 0
  2367  001B9C  0100               	movlb	0	; () banked
  2368  001B9E  51E1               	movf	_f_can_coming_to_ID& (0+255),w,b
  2369  001BA0  0100               	movlb	0	; () banked
  2370  001BA2  11E2               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2371  001BA4  B4D8               	btfsc	status,2,c
  2372  001BA6  0012               	return	
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;sort.c: 91: int side_conductivity = 0;
  2376  001BA8  0E00               	movlw	0
  2377  001BAA  0100               	movlb	0	; () banked
  2378  001BAC  6F86               	movwf	(ID@side_conductivity+1)& (0+255),b
  2379  001BAE  0E00               	movlw	0
  2380  001BB0  6F85               	movwf	ID@side_conductivity& (0+255),b
  2381                           
  2382                           ;sort.c: 92: int magnetic = 0;
  2383  001BB2  0E00               	movlw	0
  2384  001BB4  0100               	movlb	0	; () banked
  2385  001BB6  6F88               	movwf	(ID@magnetic+1)& (0+255),b
  2386  001BB8  0E00               	movlw	0
  2387  001BBA  6F87               	movwf	ID@magnetic& (0+255),b
  2388                           
  2389                           ;sort.c: 93: int top_bottom_conductivity = 0;
  2390  001BBC  0E00               	movlw	0
  2391  001BBE  0100               	movlb	0	; () banked
  2392  001BC0  6F84               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2393  001BC2  0E00               	movlw	0
  2394  001BC4  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2395                           
  2396                           ;sort.c: 95: side_conductivity = PORTAbits.RA2;
  2397  001BC6  A480               	btfss	3968,2,c	;volatile
  2398  001BC8  D004               	goto	u3420
  2399  001BCA  0100               	movlb	0	; () banked
  2400  001BCC  6B82               	clrf	??_ID& (0+255),b
  2401  001BCE  2B82               	incf	??_ID& (0+255),f,b
  2402  001BD0  D002               	goto	u3428
  2403  001BD2                     u3420:
  2404  001BD2  0100               	movlb	0	; () banked
  2405  001BD4  6B82               	clrf	??_ID& (0+255),b
  2406  001BD6                     u3428:
  2407  001BD6  0100               	movlb	0	; () banked
  2408  001BD8  5182               	movf	??_ID& (0+255),w,b
  2409  001BDA  0100               	movlb	0	; () banked
  2410  001BDC  6F85               	movwf	ID@side_conductivity& (0+255),b
  2411  001BDE  6B86               	clrf	(ID@side_conductivity+1)& (0+255),b
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;sort.c: 96: if(!side_conductivity){
  2415  001BE0  0100               	movlb	0	; () banked
  2416  001BE2  5185               	movf	ID@side_conductivity& (0+255),w,b
  2417  001BE4  0100               	movlb	0	; () banked
  2418  001BE6  1186               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2419  001BE8  A4D8               	btfss	status,2,c
  2420  001BEA  D01B               	goto	l4873
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;sort.c: 97: magnetic = MAGNETISM_in();
  2424  001BEC  EC7E  F014         	call	_MAGNETISM_in	;wreg free
  2425  001BF0  C080  F087         	movff	?_MAGNETISM_in,ID@magnetic
  2426  001BF4  C081  F088         	movff	?_MAGNETISM_in+1,ID@magnetic+1
  2427                           
  2428                           ;sort.c: 98: if(!magnetic){
  2429  001BF8  0100               	movlb	0	; () banked
  2430  001BFA  5187               	movf	ID@magnetic& (0+255),w,b
  2431  001BFC  0100               	movlb	0	; () banked
  2432  001BFE  1188               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2433  001C00  A4D8               	btfss	status,2,c
  2434  001C02  D00F               	goto	l4873
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;sort.c: 99: LATAbits.LATA3 = 1;
  2438  001C04  8689               	bsf	3977,3,c	;volatile
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;sort.c: 101: top_bottom_conductivity = PORTAbits.RA2;
  2442  001C06  A480               	btfss	3968,2,c	;volatile
  2443  001C08  D004               	goto	u3450
  2444  001C0A  0100               	movlb	0	; () banked
  2445  001C0C  6B82               	clrf	??_ID& (0+255),b
  2446  001C0E  2B82               	incf	??_ID& (0+255),f,b
  2447  001C10  D002               	goto	u3458
  2448  001C12                     u3450:
  2449  001C12  0100               	movlb	0	; () banked
  2450  001C14  6B82               	clrf	??_ID& (0+255),b
  2451  001C16                     u3458:
  2452  001C16  0100               	movlb	0	; () banked
  2453  001C18  5182               	movf	??_ID& (0+255),w,b
  2454  001C1A  0100               	movlb	0	; () banked
  2455  001C1C  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2456  001C1E  6B84               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;sort.c: 102: LATAbits.LATA3 = 0;
  2460  001C20  9689               	bcf	3977,3,c	;volatile
  2461  001C22                     l4873:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;sort.c: 103: }
  2465                           ;sort.c: 104: }
  2466                           ;sort.c: 107: moveServoBlock(Lower);
  2467  001C22  0E01               	movlw	1
  2468  001C24  EC63  F011         	call	_moveServoBlock
  2469                           
  2470                           ;sort.c: 109: f_can_coming_to_distribution = 1;
  2471  001C28  0E00               	movlw	0
  2472  001C2A  0100               	movlb	0	; () banked
  2473  001C2C  6FE4               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2474  001C2E  0E01               	movlw	1
  2475  001C30  6FE3               	movwf	_f_can_coming_to_distribution& (0+255),b
  2476                           
  2477                           ;sort.c: 110: moveServoBlock(Raise);
  2478  001C32  0E00               	movlw	0
  2479  001C34  EC63  F011         	call	_moveServoBlock
  2480                           
  2481                           ;sort.c: 111: f_can_coming_to_ID = 0;
  2482  001C38  0E00               	movlw	0
  2483  001C3A  0100               	movlb	0	; () banked
  2484  001C3C  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2485  001C3E  0E00               	movlw	0
  2486  001C40  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2487  001C42  0012               	return	
  2488  001C44                     __end_of_ID:
  2489                           	opt stack 0
  2490                           tblptru	equ	0xFF8
  2491                           tblptrh	equ	0xFF7
  2492                           tblptrl	equ	0xFF6
  2493                           tablat	equ	0xFF5
  2494                           prodh	equ	0xFF4
  2495                           prodl	equ	0xFF3
  2496                           postinc0	equ	0xFEE
  2497                           wreg	equ	0xFE8
  2498                           postdec1	equ	0xFE5
  2499                           fsr1l	equ	0xFE1
  2500                           indf2	equ	0xFDF
  2501                           postinc2	equ	0xFDE
  2502                           postdec2	equ	0xFDD
  2503                           fsr2h	equ	0xFDA
  2504                           fsr2l	equ	0xFD9
  2505                           status	equ	0xFD8
  2506                           
  2507 ;; *************** function _moveServoBlock *****************
  2508 ;; Defined at:
  2509 ;;		line 190 in file "sort.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;  myPosition      1    wreg     enum E3138
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  myPosition      1    0[BANK0 ] enum E3138
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		wreg, status,2, status,0
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;Total ram usage:        1 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    7
  2530 ;; This function calls:
  2531 ;;		Nothing
  2532 ;; This function is called by:
  2533 ;;		_ID
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           	psect	text6
  2538  0022C6                     __ptext6:
  2539                           	opt stack 0
  2540  0022C6                     _moveServoBlock:
  2541                           	opt stack 21
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;incstack = 0
  2545                           ;moveServoBlock@myPosition stored from wreg
  2546  0022C6  0100               	movlb	0	; () banked
  2547  0022C8  6F80               	movwf	moveServoBlock@myPosition& (0+255),b
  2548                           
  2549                           ;sort.c: 192: T3CON = 0b10110000;
  2550  0022CA  0EB0               	movlw	176
  2551  0022CC  6EB1               	movwf	4017,c	;volatile
  2552                           
  2553                           ;sort.c: 193: switch(myPosition){
  2554  0022CE  D011               	goto	l4537
  2555  0022D0                     l4531:
  2556                           
  2557                           ;sort.c: 196: timer3highbits = 0b11111000;
  2558  0022D0  0E00               	movlw	0
  2559  0022D2  6E70               	movwf	_timer3highbits+1,c
  2560  0022D4  0EF8               	movlw	248
  2561  0022D6  6E6F               	movwf	_timer3highbits,c
  2562                           
  2563                           ;sort.c: 197: timer3lowbits = 0b00110000;
  2564  0022D8  0E00               	movlw	0
  2565  0022DA  6E72               	movwf	_timer3lowbits+1,c
  2566  0022DC  0E30               	movlw	48
  2567  0022DE  D007               	goto	L1
  2568  0022E0                     l4533:
  2569                           
  2570                           ;sort.c: 201: timer3highbits = 0b11111100;
  2571  0022E0  0E00               	movlw	0
  2572  0022E2  6E70               	movwf	_timer3highbits+1,c
  2573  0022E4  0EFC               	movlw	252
  2574  0022E6  6E6F               	movwf	_timer3highbits,c
  2575                           
  2576                           ;sort.c: 202: timer3lowbits = 0b00011000;
  2577  0022E8  0E00               	movlw	0
  2578  0022EA  6E72               	movwf	_timer3lowbits+1,c
  2579  0022EC  0E18               	movlw	24
  2580  0022EE                     L1:
  2581  0022EE  6E71               	movwf	_timer3lowbits,c
  2582                           
  2583                           ;sort.c: 206: }
  2584                           
  2585                           ;sort.c: 205: break;
  2586                           
  2587                           ;sort.c: 204: default:
  2588                           
  2589                           ;sort.c: 203: break;
  2590  0022F0  D008               	goto	l1055
  2591  0022F2                     l4537:
  2592  0022F2  0100               	movlb	0	; () banked
  2593  0022F4  5180               	movf	moveServoBlock@myPosition& (0+255),w,b
  2594                           
  2595                           ; Switch size 1, requested type "space"
  2596                           ; Number of cases is 2, Range of values is 0 to 1
  2597                           ; switch strategies available:
  2598                           ; Name         Instructions Cycles
  2599                           ; simple_byte            7     4 (average)
  2600                           ;	Chosen strategy is simple_byte
  2601  0022F6  0A00               	xorlw	0	; case 0
  2602  0022F8  B4D8               	btfsc	status,2,c
  2603  0022FA  D7EA               	goto	l4531
  2604  0022FC  0A01               	xorlw	1	; case 1
  2605  0022FE  B4D8               	btfsc	status,2,c
  2606  002300  D7EF               	goto	l4533
  2607  002302                     l1055:
  2608                           
  2609                           ;sort.c: 208: TMR3H = timer3highbits;
  2610  002302  C06F  FFB3         	movff	_timer3highbits,4019	;volatile
  2611                           
  2612                           ;sort.c: 209: TMR3L = timer3lowbits;
  2613  002306  C071  FFB2         	movff	_timer3lowbits,4018	;volatile
  2614                           
  2615                           ;sort.c: 210: TMR3ON = 1;
  2616  00230A  80B1               	bsf	4017,0,c	;volatile
  2617                           
  2618                           ;sort.c: 211: was_low = 0;
  2619  00230C  0E00               	movlw	0
  2620  00230E  6E76               	movwf	_was_low+1,c
  2621  002310  0E00               	movlw	0
  2622  002312  6E75               	movwf	_was_low,c
  2623  002314  0012               	return		;funcret
  2624  002316                     __end_of_moveServoBlock:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           prodh	equ	0xFF4
  2631                           prodl	equ	0xFF3
  2632                           postinc0	equ	0xFEE
  2633                           wreg	equ	0xFE8
  2634                           postdec1	equ	0xFE5
  2635                           fsr1l	equ	0xFE1
  2636                           indf2	equ	0xFDF
  2637                           postinc2	equ	0xFDE
  2638                           postdec2	equ	0xFDD
  2639                           fsr2h	equ	0xFDA
  2640                           fsr2l	equ	0xFD9
  2641                           status	equ	0xFD8
  2642                           
  2643 ;; *************** function _MAGNETISM_in *****************
  2644 ;; Defined at:
  2645 ;;		line 185 in file "sort.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;		None
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;		None
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  2    0[BANK0 ] int 
  2652 ;; Registers used:
  2653 ;;		wreg, status,2
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2659 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;Total ram usage:        2 bytes
  2664 ;; Hardware stack levels used:    1
  2665 ;; Hardware stack levels required when called:    7
  2666 ;; This function calls:
  2667 ;;		Nothing
  2668 ;; This function is called by:
  2669 ;;		_ID
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text7
  2674  0028FC                     __ptext7:
  2675                           	opt stack 0
  2676  0028FC                     _MAGNETISM_in:
  2677                           	opt stack 21
  2678                           
  2679                           ;sort.c: 187: return 0;
  2680                           
  2681                           ;incstack = 0
  2682  0028FC  0E00               	movlw	0
  2683  0028FE  0100               	movlb	0	; () banked
  2684  002900  6F81               	movwf	(?_MAGNETISM_in+1)& (0+255),b
  2685  002902  0E00               	movlw	0
  2686  002904  6F80               	movwf	?_MAGNETISM_in& (0+255),b
  2687  002906  0012               	return	
  2688  002908                     __end_of_MAGNETISM_in:
  2689                           	opt stack 0
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           prodh	equ	0xFF4
  2695                           prodl	equ	0xFF3
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           postdec1	equ	0xFE5
  2699                           fsr1l	equ	0xFE1
  2700                           indf2	equ	0xFDF
  2701                           postinc2	equ	0xFDE
  2702                           postdec2	equ	0xFDD
  2703                           fsr2h	equ	0xFDA
  2704                           fsr2l	equ	0xFD9
  2705                           status	equ	0xFD8
  2706                           
  2707 ;; *************** function _Distribution *****************
  2708 ;; Defined at:
  2709 ;;		line 114 in file "sort.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;		None
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0, cstack
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;Total ram usage:        0 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    8
  2730 ;; This function calls:
  2731 ;;		_moveServoCup
  2732 ;; This function is called by:
  2733 ;;		_sort
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text8
  2738  0026AA                     __ptext8:
  2739                           	opt stack 0
  2740  0026AA                     _Distribution:
  2741                           	opt stack 21
  2742                           
  2743                           ;sort.c: 115: if(f_can_coming_to_distribution){
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;incstack = 0
  2747  0026AA  0100               	movlb	0	; () banked
  2748  0026AC  51E3               	movf	_f_can_coming_to_distribution& (0+255),w,b
  2749  0026AE  0100               	movlb	0	; () banked
  2750  0026B0  11E4               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  2751  0026B2  B4D8               	btfsc	status,2,c
  2752  0026B4  0012               	return	
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;sort.c: 117: moveServoCup(canType);
  2756  0026B6  5078               	movf	_canType,w,c
  2757  0026B8  ECBD  F00E         	call	_moveServoCup
  2758                           
  2759                           ;sort.c: 119: moveServoCup(Home);
  2760  0026BC  0E00               	movlw	0
  2761  0026BE  ECBD  F00E         	call	_moveServoCup
  2762                           
  2763                           ;sort.c: 120: f_can_coming_to_distribution = 0;
  2764  0026C2  0E00               	movlw	0
  2765  0026C4  0100               	movlb	0	; () banked
  2766  0026C6  6FE4               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2767  0026C8  0E00               	movlw	0
  2768  0026CA  6FE3               	movwf	_f_can_coming_to_distribution& (0+255),b
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;sort.c: 121: f_can_distributed = 1;
  2772  0026CC  0E00               	movlw	0
  2773  0026CE  0100               	movlb	0	; () banked
  2774  0026D0  6FE6               	movwf	(_f_can_distributed+1)& (0+255),b
  2775  0026D2  0E01               	movlw	1
  2776  0026D4  6FE5               	movwf	_f_can_distributed& (0+255),b
  2777  0026D6  0012               	return	
  2778  0026D8                     __end_of_Distribution:
  2779                           	opt stack 0
  2780                           tblptru	equ	0xFF8
  2781                           tblptrh	equ	0xFF7
  2782                           tblptrl	equ	0xFF6
  2783                           tablat	equ	0xFF5
  2784                           prodh	equ	0xFF4
  2785                           prodl	equ	0xFF3
  2786                           postinc0	equ	0xFEE
  2787                           wreg	equ	0xFE8
  2788                           postdec1	equ	0xFE5
  2789                           fsr1l	equ	0xFE1
  2790                           indf2	equ	0xFDF
  2791                           postinc2	equ	0xFDE
  2792                           postdec2	equ	0xFDD
  2793                           fsr2h	equ	0xFDA
  2794                           fsr2l	equ	0xFD9
  2795                           status	equ	0xFD8
  2796                           
  2797 ;; *************** function _moveServoCup *****************
  2798 ;; Defined at:
  2799 ;;		line 213 in file "sort.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;  myPosition      1    wreg     enum E3131
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  myPosition      1    0[BANK0 ] enum E3131
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  1    wreg      void 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;Total ram usage:        1 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    7
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_Distribution
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text9
  2828  001D7A                     __ptext9:
  2829                           	opt stack 0
  2830  001D7A                     _moveServoCup:
  2831                           	opt stack 21
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;incstack = 0
  2835                           ;moveServoCup@myPosition stored from wreg
  2836  001D7A  0100               	movlb	0	; () banked
  2837  001D7C  6F80               	movwf	moveServoCup@myPosition& (0+255),b
  2838                           
  2839                           ;sort.c: 215: T1CON = 0b10110000;
  2840  001D7E  0EB0               	movlw	176
  2841  001D80  6ECD               	movwf	4045,c	;volatile
  2842                           
  2843                           ;sort.c: 216: switch(myPosition){
  2844  001D82  D029               	goto	l4555
  2845  001D84                     l4543:
  2846                           
  2847                           ;sort.c: 219: timer1highbits = 0b11111010;
  2848  001D84  0E00               	movlw	0
  2849  001D86  6E6C               	movwf	_timer1highbits+1,c
  2850  001D88  0EFA               	movlw	250
  2851  001D8A  6E6B               	movwf	_timer1highbits,c
  2852                           
  2853                           ;sort.c: 220: timer1lowbits = 0b00100100;
  2854  001D8C  0E00               	movlw	0
  2855  001D8E  6E6E               	movwf	_timer1lowbits+1,c
  2856  001D90  0E24               	movlw	36
  2857  001D92  D01F               	goto	L5
  2858  001D94                     l4545:
  2859                           
  2860                           ;sort.c: 224: timer1highbits = 0b11111100;
  2861  001D94  0E00               	movlw	0
  2862  001D96  6E6C               	movwf	_timer1highbits+1,c
  2863  001D98  0EFC               	movlw	252
  2864  001D9A  6E6B               	movwf	_timer1highbits,c
  2865                           
  2866                           ;sort.c: 225: timer1lowbits = 0b00011000;
  2867  001D9C  0E00               	movlw	0
  2868  001D9E  6E6E               	movwf	_timer1lowbits+1,c
  2869  001DA0  0E18               	movlw	24
  2870  001DA2  D017               	goto	L5
  2871  001DA4                     l4547:
  2872                           
  2873                           ;sort.c: 229: timer1highbits = 0b11111010;
  2874  001DA4  0E00               	movlw	0
  2875  001DA6  6E6C               	movwf	_timer1highbits+1,c
  2876  001DA8  0EFA               	movlw	250
  2877  001DAA  6E6B               	movwf	_timer1highbits,c
  2878                           
  2879                           ;sort.c: 230: timer1lowbits = 0b11001011;
  2880  001DAC  0E00               	movlw	0
  2881  001DAE  6E6E               	movwf	_timer1lowbits+1,c
  2882  001DB0  0ECB               	movlw	203
  2883  001DB2  D00F               	goto	L5
  2884  001DB4                     l4549:
  2885                           
  2886                           ;sort.c: 234: timer1highbits = 0b11111001;
  2887  001DB4  0E00               	movlw	0
  2888  001DB6  6E6C               	movwf	_timer1highbits+1,c
  2889  001DB8  0EF9               	movlw	249
  2890  001DBA  6E6B               	movwf	_timer1highbits,c
  2891                           
  2892                           ;sort.c: 235: timer1lowbits = 0b01111101;
  2893  001DBC  0E00               	movlw	0
  2894  001DBE  6E6E               	movwf	_timer1lowbits+1,c
  2895  001DC0  0E7D               	movlw	125
  2896  001DC2  D007               	goto	L5
  2897  001DC4                     l4551:
  2898                           
  2899                           ;sort.c: 239: timer1highbits = 0b11111000;
  2900  001DC4  0E00               	movlw	0
  2901  001DC6  6E6C               	movwf	_timer1highbits+1,c
  2902  001DC8  0EF8               	movlw	248
  2903  001DCA  6E6B               	movwf	_timer1highbits,c
  2904                           
  2905                           ;sort.c: 240: timer1lowbits = 0b00110000;
  2906  001DCC  0E00               	movlw	0
  2907  001DCE  6E6E               	movwf	_timer1lowbits+1,c
  2908  001DD0  0E30               	movlw	48
  2909  001DD2                     L5:
  2910  001DD2  6E6D               	movwf	_timer1lowbits,c
  2911                           
  2912                           ;sort.c: 244: }
  2913                           
  2914                           ;sort.c: 243: break;
  2915                           
  2916                           ;sort.c: 242: default:
  2917                           
  2918                           ;sort.c: 241: break;
  2919  001DD4  D011               	goto	l1063
  2920  001DD6                     l4555:
  2921  001DD6  0100               	movlb	0	; () banked
  2922  001DD8  5180               	movf	moveServoCup@myPosition& (0+255),w,b
  2923                           
  2924                           ; Switch size 1, requested type "space"
  2925                           ; Number of cases is 5, Range of values is 0 to 4
  2926                           ; switch strategies available:
  2927                           ; Name         Instructions Cycles
  2928                           ; simple_byte           16     9 (average)
  2929                           ;	Chosen strategy is simple_byte
  2930  001DDA  0A00               	xorlw	0	; case 0
  2931  001DDC  B4D8               	btfsc	status,2,c
  2932  001DDE  D7D2               	goto	l4543
  2933  001DE0  0A01               	xorlw	1	; case 1
  2934  001DE2  B4D8               	btfsc	status,2,c
  2935  001DE4  D7D7               	goto	l4545
  2936  001DE6  0A03               	xorlw	3	; case 2
  2937  001DE8  B4D8               	btfsc	status,2,c
  2938  001DEA  D7DC               	goto	l4547
  2939  001DEC  0A01               	xorlw	1	; case 3
  2940  001DEE  B4D8               	btfsc	status,2,c
  2941  001DF0  D7E1               	goto	l4549
  2942  001DF2  0A07               	xorlw	7	; case 4
  2943  001DF4  B4D8               	btfsc	status,2,c
  2944  001DF6  D7E6               	goto	l4551
  2945  001DF8                     l1063:
  2946                           
  2947                           ;sort.c: 246: TMR1H = timer1highbits;
  2948  001DF8  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  2949                           
  2950                           ;sort.c: 247: TMR1L = timer1lowbits;
  2951  001DFC  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  2952                           
  2953                           ;sort.c: 248: TMR1ON = 1;
  2954  001E00  80CD               	bsf	4045,0,c	;volatile
  2955                           
  2956                           ;sort.c: 249: was_low = 0;
  2957  001E02  0E00               	movlw	0
  2958  001E04  6E76               	movwf	_was_low+1,c
  2959  001E06  0E00               	movlw	0
  2960  001E08  6E75               	movwf	_was_low,c
  2961  001E0A  0012               	return		;funcret
  2962  001E0C                     __end_of_moveServoCup:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodh	equ	0xFF4
  2969                           prodl	equ	0xFF3
  2970                           postinc0	equ	0xFEE
  2971                           wreg	equ	0xFE8
  2972                           postdec1	equ	0xFE5
  2973                           fsr1l	equ	0xFE1
  2974                           indf2	equ	0xFDF
  2975                           postinc2	equ	0xFDE
  2976                           postdec2	equ	0xFDD
  2977                           fsr2h	equ	0xFDA
  2978                           fsr2l	equ	0xFD9
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _machineConfig *****************
  2982 ;; Defined at:
  2983 ;;		line 13 in file "MachineConfig.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;Total ram usage:        0 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    7
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_main
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text10
  3012  002316                     __ptext10:
  3013                           	opt stack 0
  3014  002316                     _machineConfig:
  3015                           	opt stack 23
  3016                           
  3017                           ;MachineConfig.c: 15: OSCCON = 0b11110000;
  3018                           
  3019                           ;incstack = 0
  3020  002316  0EF0               	movlw	240
  3021  002318  6ED3               	movwf	4051,c	;volatile
  3022                           
  3023                           ;MachineConfig.c: 16: OSCTUNEbits.PLLEN = 1;
  3024  00231A  8C9B               	bsf	3995,6,c	;volatile
  3025                           
  3026                           ;MachineConfig.c: 20: TRISA = 0b01000111;
  3027  00231C  0E47               	movlw	71
  3028  00231E  6E92               	movwf	3986,c	;volatile
  3029                           
  3030                           ;MachineConfig.c: 22: TRISB = 0b11110010;
  3031  002320  0EF2               	movlw	242
  3032  002322  6E93               	movwf	3987,c	;volatile
  3033                           
  3034                           ;MachineConfig.c: 25: TRISC = 0x00;
  3035  002324  0E00               	movlw	0
  3036  002326  6E94               	movwf	3988,c	;volatile
  3037                           
  3038                           ;MachineConfig.c: 29: TRISD = 0x00;
  3039  002328  0E00               	movlw	0
  3040  00232A  6E95               	movwf	3989,c	;volatile
  3041                           
  3042                           ;MachineConfig.c: 32: TRISE = 0x00;
  3043  00232C  0E00               	movlw	0
  3044  00232E  6E96               	movwf	3990,c	;volatile
  3045                           
  3046                           ;MachineConfig.c: 35: LATA = 0x00;
  3047  002330  0E00               	movlw	0
  3048  002332  6E89               	movwf	3977,c	;volatile
  3049                           
  3050                           ;MachineConfig.c: 36: LATB = 0x00;
  3051  002334  0E00               	movlw	0
  3052  002336  6E8A               	movwf	3978,c	;volatile
  3053                           
  3054                           ;MachineConfig.c: 37: LATC = 0x00;
  3055  002338  0E00               	movlw	0
  3056  00233A  6E8B               	movwf	3979,c	;volatile
  3057                           
  3058                           ;MachineConfig.c: 38: LATD = 0x00;
  3059  00233C  0E00               	movlw	0
  3060  00233E  6E8C               	movwf	3980,c	;volatile
  3061                           
  3062                           ;MachineConfig.c: 39: LATE = 0x00;
  3063  002340  0E00               	movlw	0
  3064  002342  6E8D               	movwf	3981,c	;volatile
  3065                           
  3066                           ;MachineConfig.c: 42: ADCON0 = 0x00;
  3067  002344  0E00               	movlw	0
  3068  002346  6EC2               	movwf	4034,c	;volatile
  3069                           
  3070                           ;MachineConfig.c: 43: ADCON1 = 0x0D;
  3071  002348  0E0D               	movlw	13
  3072  00234A  6EC1               	movwf	4033,c	;volatile
  3073                           
  3074                           ;MachineConfig.c: 46: CVRCON = 0x00;
  3075  00234C  0E00               	movlw	0
  3076  00234E  6EB5               	movwf	4021,c	;volatile
  3077                           
  3078                           ;MachineConfig.c: 47: CMCONbits.CIS = 0;
  3079  002350  96B4               	bcf	4020,3,c	;volatile
  3080                           
  3081                           ;MachineConfig.c: 48: ADFM = 1;
  3082  002352  8EC0               	bsf	4032,7,c	;volatile
  3083                           
  3084                           ;MachineConfig.c: 51: INT1IE = 1;
  3085  002354  86F0               	bsf	intcon3,3,c	;volatile
  3086                           
  3087                           ;MachineConfig.c: 52: TMR0IE = 1;
  3088  002356  8AF2               	bsf	intcon,5,c	;volatile
  3089                           
  3090                           ;MachineConfig.c: 53: TMR1IE = 1;
  3091  002358  809D               	bsf	3997,0,c	;volatile
  3092                           
  3093                           ;MachineConfig.c: 54: TMR2IE = 1;
  3094  00235A  829D               	bsf	3997,1,c	;volatile
  3095                           
  3096                           ;MachineConfig.c: 55: TMR3IE = 1;
  3097  00235C  82A0               	bsf	4000,1,c	;volatile
  3098                           
  3099                           ;MachineConfig.c: 56: PEIE = 1;
  3100  00235E  8CF2               	bsf	intcon,6,c	;volatile
  3101                           
  3102                           ;MachineConfig.c: 57: (INTCONbits.GIE = 0);
  3103  002360  9EF2               	bcf	intcon,7,c	;volatile
  3104  002362  0012               	return		;funcret
  3105  002364                     __end_of_machineConfig:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           intcon	equ	0xFF2
  3114                           intcon3	equ	0xFF0
  3115                           postinc0	equ	0xFEE
  3116                           wreg	equ	0xFE8
  3117                           postdec1	equ	0xFE5
  3118                           fsr1l	equ	0xFE1
  3119                           indf2	equ	0xFDF
  3120                           postinc2	equ	0xFDE
  3121                           postdec2	equ	0xFDD
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _initUI *****************
  3127 ;; Defined at:
  3128 ;;		line 60 in file "UI.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;Total ram usage:        0 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:   12
  3149 ;; This function calls:
  3150 ;;		_change_state_to_menu_start
  3151 ;;		_loadRTC
  3152 ;; This function is called by:
  3153 ;;		_main
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           	psect	text11
  3158  002860                     __ptext11:
  3159                           	opt stack 0
  3160  002860                     _initUI:
  3161                           	opt stack 18
  3162                           
  3163                           ;UI.c: 61: (INTCONbits.GIE = 1);
  3164                           
  3165                           ;incstack = 0
  3166  002860  8EF2               	bsf	intcon,7,c	;volatile
  3167                           
  3168                           ;UI.c: 62: machine_state = UI_state;
  3169  002862  0E00               	movlw	0
  3170  002864  0100               	movlb	0	; () banked
  3171  002866  6FF1               	movwf	_machine_state& (0+255),b
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;UI.c: 64: loadRTC();
  3175  002868  EC06  F00F         	call	_loadRTC	;wreg free
  3176                           
  3177                           ;UI.c: 66: change_state_to_menu_start();
  3178  00286C  EC9A  F013         	call	_change_state_to_menu_start	;wreg free
  3179                           
  3180                           ;UI.c: 67: firstboot = 1;
  3181  002870  0E00               	movlw	0
  3182  002872  6E6A               	movwf	_firstboot+1,c
  3183  002874  0E01               	movlw	1
  3184  002876  6E69               	movwf	_firstboot,c
  3185  002878  0012               	return		;funcret
  3186  00287A                     __end_of_initUI:
  3187                           	opt stack 0
  3188                           tblptru	equ	0xFF8
  3189                           tblptrh	equ	0xFF7
  3190                           tblptrl	equ	0xFF6
  3191                           tablat	equ	0xFF5
  3192                           prodh	equ	0xFF4
  3193                           prodl	equ	0xFF3
  3194                           intcon	equ	0xFF2
  3195                           intcon3	equ	0xFF0
  3196                           postinc0	equ	0xFEE
  3197                           wreg	equ	0xFE8
  3198                           postdec1	equ	0xFE5
  3199                           fsr1l	equ	0xFE1
  3200                           indf2	equ	0xFDF
  3201                           postinc2	equ	0xFDE
  3202                           postdec2	equ	0xFDD
  3203                           fsr2h	equ	0xFDA
  3204                           fsr2l	equ	0xFD9
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _loadRTC *****************
  3208 ;; Defined at:
  3209 ;;		line 26 in file "RTC.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  i               2   22[BANK0 ] int 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;Total ram usage:        3 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    9
  3230 ;; This function calls:
  3231 ;;		_I2C_Master_Init
  3232 ;;		_I2C_Master_Start
  3233 ;;		_I2C_Master_Stop
  3234 ;;		_I2C_Master_Write
  3235 ;; This function is called by:
  3236 ;;		_initUI
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text12
  3241  001E0C                     __ptext12:
  3242                           	opt stack 0
  3243  001E0C                     _loadRTC:
  3244                           	opt stack 20
  3245                           
  3246                           ;RTC.c: 28: I2C_Master_Init(10000);
  3247                           
  3248                           ;incstack = 0
  3249  001E0C  0E10               	movlw	16
  3250  001E0E  0100               	movlb	0	; () banked
  3251  001E10  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3252  001E12  0E27               	movlw	39
  3253  001E14  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3254  001E16  0E00               	movlw	0
  3255  001E18  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3256  001E1A  0E00               	movlw	0
  3257  001E1C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3258  001E1E  ECDF  F010         	call	_I2C_Master_Init	;wreg free
  3259                           
  3260                           ;RTC.c: 30: (INTCONbits.GIE = 0);
  3261  001E22  9EF2               	bcf	intcon,7,c	;volatile
  3262                           
  3263                           ;RTC.c: 32: I2C_Master_Start();
  3264  001E24  ECA2  F014         	call	_I2C_Master_Start	;wreg free
  3265                           
  3266                           ;RTC.c: 33: I2C_Master_Write(0b11010000);
  3267  001E28  0E00               	movlw	0
  3268  001E2A  0100               	movlb	0	; () banked
  3269  001E2C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3270  001E2E  0ED0               	movlw	208
  3271  001E30  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3272  001E32  EC90  F014         	call	_I2C_Master_Write	;wreg free
  3273                           
  3274                           ;RTC.c: 34: I2C_Master_Write(0x00);
  3275  001E36  0E00               	movlw	0
  3276  001E38  0100               	movlb	0	; () banked
  3277  001E3A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3278  001E3C  0E00               	movlw	0
  3279  001E3E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3280  001E40  EC90  F014         	call	_I2C_Master_Write	;wreg free
  3281                           
  3282                           ;RTC.c: 35: for(int i = 0; i<7; i++){
  3283  001E44  0E00               	movlw	0
  3284  001E46  0100               	movlb	0	; () banked
  3285  001E48  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3286  001E4A  0E00               	movlw	0
  3287  001E4C  6F96               	movwf	loadRTC@i& (0+255),b
  3288  001E4E                     l4637:
  3289                           
  3290                           ; BSR set to: 0
  3291  001E4E  0100               	movlb	0	; () banked
  3292  001E50  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3293  001E52  D008               	goto	l4641
  3294  001E54  0100               	movlb	0	; () banked
  3295  001E56  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3296  001E58  E11B               	bnz	l4647
  3297  001E5A  0E07               	movlw	7
  3298  001E5C  0100               	movlb	0	; () banked
  3299  001E5E  5D96               	subwf	loadRTC@i& (0+255),w,b
  3300  001E60  B0D8               	btfsc	status,0,c
  3301  001E62  D016               	goto	l4647
  3302  001E64                     l4641:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;RTC.c: 36: I2C_Master_Write(time[i]);
  3306  001E64  0ED4               	movlw	low _time
  3307  001E66  0100               	movlb	0	; () banked
  3308  001E68  2596               	addwf	loadRTC@i& (0+255),w,b
  3309  001E6A  6ED9               	movwf	fsr2l,c
  3310  001E6C  0E00               	movlw	high _time
  3311  001E6E  0100               	movlb	0	; () banked
  3312  001E70  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3313  001E72  6EDA               	movwf	fsr2h,c
  3314  001E74  50DF               	movf	indf2,w,c
  3315  001E76  0100               	movlb	0	; () banked
  3316  001E78  6F95               	movwf	??_loadRTC& (0+255),b
  3317  001E7A  0100               	movlb	0	; () banked
  3318  001E7C  5195               	movf	??_loadRTC& (0+255),w,b
  3319  001E7E  0100               	movlb	0	; () banked
  3320  001E80  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3321  001E82  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3322  001E84  EC90  F014         	call	_I2C_Master_Write	;wreg free
  3323  001E88  0100               	movlb	0	; () banked
  3324  001E8A  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3325  001E8C  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3326  001E8E  D7DF               	goto	l4637
  3327  001E90                     l4647:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;RTC.c: 37: }
  3331                           ;RTC.c: 38: I2C_Master_Stop();
  3332  001E90  EC9E  F014         	call	_I2C_Master_Stop	;wreg free
  3333                           
  3334                           ;RTC.c: 39: (INTCONbits.GIE = 1);
  3335  001E94  8EF2               	bsf	intcon,7,c	;volatile
  3336  001E96  0012               	return		;funcret
  3337  001E98                     __end_of_loadRTC:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           intcon3	equ	0xFF0
  3347                           postinc0	equ	0xFEE
  3348                           wreg	equ	0xFE8
  3349                           postdec1	equ	0xFE5
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _I2C_Master_Init *****************
  3359 ;; Defined at:
  3360 ;;		line 13 in file "I2C.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  c               4   13[BANK0 ] const unsigned long 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		wreg, status,2, status,0, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;Total ram usage:        8 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    8
  3381 ;; This function calls:
  3382 ;;		___lldiv
  3383 ;; This function is called by:
  3384 ;;		_loadRTC
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text13
  3389  0021BE                     __ptext13:
  3390                           	opt stack 0
  3391  0021BE                     _I2C_Master_Init:
  3392                           	opt stack 20
  3393                           
  3394                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3395                           
  3396                           ;incstack = 0
  3397  0021BE  0E00               	movlw	0
  3398  0021C0  6EC7               	movwf	4039,c	;volatile
  3399                           
  3400                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3401  0021C2  0E28               	movlw	40
  3402  0021C4  6EC6               	movwf	4038,c	;volatile
  3403                           
  3404                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3405  0021C6  0E00               	movlw	0
  3406  0021C8  6EC5               	movwf	4037,c	;volatile
  3407                           
  3408                           ;I2C.c: 19: SSPADD = (32000000/(4*c))-1;
  3409  0021CA  0E00               	movlw	0
  3410  0021CC  0100               	movlb	0	; () banked
  3411  0021CE  6F80               	movwf	___lldiv@dividend& (0+255),b
  3412  0021D0  0E48               	movlw	72
  3413  0021D2  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3414  0021D4  0EE8               	movlw	232
  3415  0021D6  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3416  0021D8  0E01               	movlw	1
  3417  0021DA  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3418  0021DC  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3419  0021E0  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3420  0021E4  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3421  0021E8  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3422  0021EC  0E02               	movlw	2
  3423  0021EE                     u3165:
  3424  0021EE  90D8               	bcf	status,0,c
  3425  0021F0  0100               	movlb	0	; () banked
  3426  0021F2  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3427  0021F4  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3428  0021F6  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3429  0021F8  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3430  0021FA  2EE8               	decfsz	wreg,f,c
  3431  0021FC  D7F8               	goto	u3165
  3432  0021FE  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3433  002202  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3434  002206  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3435  00220A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3436  00220E  EC1B  F00D         	call	___lldiv	;wreg free
  3437  002212  0100               	movlb	0	; () banked
  3438  002214  0580               	decf	?___lldiv& (0+255),w,b
  3439  002216  6EC8               	movwf	4040,c	;volatile
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;I2C.c: 20: TRISC3 = 1;
  3443  002218  8694               	bsf	3988,3,c	;volatile
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;I2C.c: 21: TRISC4 = 1;
  3447  00221A  8894               	bsf	3988,4,c	;volatile
  3448                           
  3449                           ; BSR set to: 0
  3450  00221C  0012               	return		;funcret
  3451  00221E                     __end_of_I2C_Master_Init:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           prodh	equ	0xFF4
  3458                           prodl	equ	0xFF3
  3459                           intcon	equ	0xFF2
  3460                           intcon3	equ	0xFF0
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           postdec1	equ	0xFE5
  3464                           fsr1l	equ	0xFE1
  3465                           indf2	equ	0xFDF
  3466                           postinc2	equ	0xFDE
  3467                           postdec2	equ	0xFDD
  3468                           fsr2h	equ	0xFDA
  3469                           fsr2l	equ	0xFD9
  3470                           status	equ	0xFD8
  3471                           
  3472 ;; *************** function ___lldiv *****************
  3473 ;; Defined at:
  3474 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;  dividend        4    0[BANK0 ] unsigned long 
  3477 ;;  divisor         4    4[BANK0 ] unsigned long 
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  quotient        4    8[BANK0 ] unsigned long 
  3480 ;;  counter         1   12[BANK0 ] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  4    0[BANK0 ] unsigned long 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3490 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;Total ram usage:       13 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    7
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_I2C_Master_Init
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	text14
  3505  001A36                     __ptext14:
  3506                           	opt stack 0
  3507  001A36                     ___lldiv:
  3508                           	opt stack 20
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;incstack = 0
  3512  001A36  0E00               	movlw	0
  3513  001A38  0100               	movlb	0	; () banked
  3514  001A3A  6F88               	movwf	___lldiv@quotient& (0+255),b
  3515  001A3C  0E00               	movlw	0
  3516  001A3E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3517  001A40  0E00               	movlw	0
  3518  001A42  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3519  001A44  0E00               	movlw	0
  3520  001A46  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523  001A48  0100               	movlb	0	; () banked
  3524  001A4A  5184               	movf	___lldiv@divisor& (0+255),w,b
  3525  001A4C  0100               	movlb	0	; () banked
  3526  001A4E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3527  001A50  0100               	movlb	0	; () banked
  3528  001A52  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3529  001A54  0100               	movlb	0	; () banked
  3530  001A56  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3531  001A58  B4D8               	btfsc	status,2,c
  3532  001A5A  D042               	goto	l1577
  3533                           
  3534                           ; BSR set to: 0
  3535  001A5C  0E01               	movlw	1
  3536  001A5E  0100               	movlb	0	; () banked
  3537  001A60  6F8C               	movwf	___lldiv@counter& (0+255),b
  3538  001A62  D008               	goto	l4199
  3539  001A64                     l4197:
  3540                           
  3541                           ; BSR set to: 0
  3542  001A64  0100               	movlb	0	; () banked
  3543  001A66  90D8               	bcf	status,0,c
  3544  001A68  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3545  001A6A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3546  001A6C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3547  001A6E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3548  001A70  0100               	movlb	0	; () banked
  3549  001A72  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3550  001A74                     l4199:
  3551                           
  3552                           ; BSR set to: 0
  3553  001A74  0100               	movlb	0	; () banked
  3554  001A76  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3555  001A78  D7F5               	goto	l4197
  3556  001A7A                     l4201:
  3557                           
  3558                           ; BSR set to: 0
  3559  001A7A  0100               	movlb	0	; () banked
  3560  001A7C  90D8               	bcf	status,0,c
  3561  001A7E  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3562  001A80  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3563  001A82  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3564  001A84  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3565                           
  3566                           ; BSR set to: 0
  3567  001A86  0100               	movlb	0	; () banked
  3568  001A88  5184               	movf	___lldiv@divisor& (0+255),w,b
  3569  001A8A  0100               	movlb	0	; () banked
  3570  001A8C  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3571  001A8E  0100               	movlb	0	; () banked
  3572  001A90  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3573  001A92  0100               	movlb	0	; () banked
  3574  001A94  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3575  001A96  0100               	movlb	0	; () banked
  3576  001A98  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3577  001A9A  0100               	movlb	0	; () banked
  3578  001A9C  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3579  001A9E  0100               	movlb	0	; () banked
  3580  001AA0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3581  001AA2  0100               	movlb	0	; () banked
  3582  001AA4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3583  001AA6  A0D8               	btfss	status,0,c
  3584  001AA8  D012               	goto	l4209
  3585                           
  3586                           ; BSR set to: 0
  3587  001AAA  0100               	movlb	0	; () banked
  3588  001AAC  5184               	movf	___lldiv@divisor& (0+255),w,b
  3589  001AAE  0100               	movlb	0	; () banked
  3590  001AB0  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3591  001AB2  0100               	movlb	0	; () banked
  3592  001AB4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3593  001AB6  0100               	movlb	0	; () banked
  3594  001AB8  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3595  001ABA  0100               	movlb	0	; () banked
  3596  001ABC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3597  001ABE  0100               	movlb	0	; () banked
  3598  001AC0  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3599  001AC2  0100               	movlb	0	; () banked
  3600  001AC4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3601  001AC6  0100               	movlb	0	; () banked
  3602  001AC8  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3603                           
  3604                           ; BSR set to: 0
  3605  001ACA  0100               	movlb	0	; () banked
  3606  001ACC  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3607  001ACE                     l4209:
  3608                           
  3609                           ; BSR set to: 0
  3610  001ACE  0100               	movlb	0	; () banked
  3611  001AD0  90D8               	bcf	status,0,c
  3612  001AD2  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3613  001AD4  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3614  001AD6  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3615  001AD8  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3616                           
  3617                           ; BSR set to: 0
  3618  001ADA  0100               	movlb	0	; () banked
  3619  001ADC  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3620  001ADE  D7CD               	goto	l4201
  3621  001AE0                     l1577:
  3622                           
  3623                           ; BSR set to: 0
  3624  001AE0  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3625  001AE4  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3626  001AE8  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3627  001AEC  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3628                           
  3629                           ; BSR set to: 0
  3630  001AF0  0012               	return		;funcret
  3631  001AF2                     __end_of___lldiv:
  3632                           	opt stack 0
  3633                           tblptru	equ	0xFF8
  3634                           tblptrh	equ	0xFF7
  3635                           tblptrl	equ	0xFF6
  3636                           tablat	equ	0xFF5
  3637                           prodh	equ	0xFF4
  3638                           prodl	equ	0xFF3
  3639                           intcon	equ	0xFF2
  3640                           intcon3	equ	0xFF0
  3641                           postinc0	equ	0xFEE
  3642                           wreg	equ	0xFE8
  3643                           postdec1	equ	0xFE5
  3644                           fsr1l	equ	0xFE1
  3645                           indf2	equ	0xFDF
  3646                           postinc2	equ	0xFDE
  3647                           postdec2	equ	0xFDD
  3648                           fsr2h	equ	0xFDA
  3649                           fsr2l	equ	0xFD9
  3650                           status	equ	0xFD8
  3651                           
  3652 ;; *************** function _change_state_to_menu_start *****************
  3653 ;; Defined at:
  3654 ;;		line 415 in file "UI.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;		None
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;		None
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;Total ram usage:        0 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:   11
  3675 ;; This function calls:
  3676 ;;		_lcdInst
  3677 ;;		_printRTC
  3678 ;;		_printf
  3679 ;; This function is called by:
  3680 ;;		_initUI
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	text15
  3685  002734                     __ptext15:
  3686                           	opt stack 0
  3687  002734                     _change_state_to_menu_start:
  3688                           	opt stack 18
  3689                           
  3690                           ;UI.c: 416: cur_state = 0;
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;incstack = 0
  3694  002734  0E00               	movlw	0
  3695  002736  0100               	movlb	0	; () banked
  3696  002738  6FE0               	movwf	(_cur_state+1)& (0+255),b
  3697  00273A  0E00               	movlw	0
  3698  00273C  6FDF               	movwf	_cur_state& (0+255),b
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;UI.c: 418: lcdInst(0b10000000);;
  3702  00273E  0E80               	movlw	128
  3703  002740  EC76  F014         	call	_lcdInst
  3704                           
  3705                           ;UI.c: 419: printRTC();
  3706  002744  EC63  F006         	call	_printRTC	;wreg free
  3707                           
  3708                           ;UI.c: 420: lcdInst(0b11000000);;
  3709  002748  0EC0               	movlw	192
  3710  00274A  EC76  F014         	call	_lcdInst
  3711                           
  3712                           ;UI.c: 421: printf("PUSH TO CONTINUE");
  3713  00274E  0E97               	movlw	low STR_15
  3714  002750  0100               	movlb	0	; () banked
  3715  002752  6F8E               	movwf	printf@f& (0+255),b
  3716  002754  0EFF               	movlw	high STR_15
  3717  002756  0100               	movlb	0	; () banked
  3718  002758  6F8F               	movwf	(printf@f+1)& (0+255),b
  3719  00275A  ECBB  F002         	call	_printf	;wreg free
  3720  00275E  0012               	return		;funcret
  3721  002760                     __end_of_change_state_to_menu_start:
  3722                           	opt stack 0
  3723                           tblptru	equ	0xFF8
  3724                           tblptrh	equ	0xFF7
  3725                           tblptrl	equ	0xFF6
  3726                           tablat	equ	0xFF5
  3727                           prodh	equ	0xFF4
  3728                           prodl	equ	0xFF3
  3729                           intcon	equ	0xFF2
  3730                           intcon3	equ	0xFF0
  3731                           postinc0	equ	0xFEE
  3732                           wreg	equ	0xFE8
  3733                           postdec1	equ	0xFE5
  3734                           fsr1l	equ	0xFE1
  3735                           indf2	equ	0xFDF
  3736                           postinc2	equ	0xFDE
  3737                           postdec2	equ	0xFDD
  3738                           fsr2h	equ	0xFDA
  3739                           fsr2l	equ	0xFD9
  3740                           status	equ	0xFD8
  3741                           
  3742 ;; *************** function _initTime *****************
  3743 ;; Defined at:
  3744 ;;		line 15 in file "RTC.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;  s               1    wreg     unsigned char 
  3747 ;;  m               1    0[BANK0 ] unsigned char 
  3748 ;;  h               1    1[BANK0 ] unsigned char 
  3749 ;;  w               1    2[BANK0 ] unsigned char 
  3750 ;;  DD              1    3[BANK0 ] unsigned char 
  3751 ;;  MM              1    4[BANK0 ] unsigned char 
  3752 ;;  YY              1    5[BANK0 ] unsigned char 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  s               1    6[BANK0 ] unsigned char 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3764 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;Total ram usage:        7 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    7
  3771 ;; This function calls:
  3772 ;;		Nothing
  3773 ;; This function is called by:
  3774 ;;		_main
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text16
  3779  002820                     __ptext16:
  3780                           	opt stack 0
  3781  002820                     _initTime:
  3782                           	opt stack 23
  3783                           
  3784                           ;incstack = 0
  3785                           ;initTime@s stored from wreg
  3786  002820  0100               	movlb	0	; () banked
  3787  002822  6F86               	movwf	initTime@s& (0+255),b
  3788                           
  3789                           ;RTC.c: 17: time[0] = s;
  3790  002824  C086  F0D4         	movff	initTime@s,_time
  3791                           
  3792                           ;RTC.c: 18: time[1] = m;
  3793  002828  C080  F0D5         	movff	initTime@m,_time+1
  3794                           
  3795                           ;RTC.c: 19: time[2] = h;
  3796  00282C  C081  F0D6         	movff	initTime@h,_time+2
  3797                           
  3798                           ;RTC.c: 20: time[3] = w;
  3799  002830  C082  F0D7         	movff	initTime@w,_time+3
  3800                           
  3801                           ;RTC.c: 21: time[4] = DD;
  3802  002834  C083  F0D8         	movff	initTime@DD,_time+4
  3803                           
  3804                           ;RTC.c: 22: time[5] = MM;
  3805  002838  C084  F0D9         	movff	initTime@MM,_time+5
  3806                           
  3807                           ;RTC.c: 23: time[6] = YY;
  3808  00283C  C085  F0DA         	movff	initTime@YY,_time+6
  3809  002840  0012               	return		;funcret
  3810  002842                     __end_of_initTime:
  3811                           	opt stack 0
  3812                           tblptru	equ	0xFF8
  3813                           tblptrh	equ	0xFF7
  3814                           tblptrl	equ	0xFF6
  3815                           tablat	equ	0xFF5
  3816                           prodh	equ	0xFF4
  3817                           prodl	equ	0xFF3
  3818                           intcon	equ	0xFF2
  3819                           intcon3	equ	0xFF0
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           postdec1	equ	0xFE5
  3823                           fsr1l	equ	0xFE1
  3824                           indf2	equ	0xFDF
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           fsr2h	equ	0xFDA
  3828                           fsr2l	equ	0xFD9
  3829                           status	equ	0xFD8
  3830                           
  3831 ;; *************** function _initLCD *****************
  3832 ;; Defined at:
  3833 ;;		line 46 in file "lcd.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;		None
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;		None
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  1    wreg      void 
  3840 ;; Registers used:
  3841 ;;		wreg, status,2, status,0, cstack
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;Total ram usage:        1 bytes
  3852 ;; Hardware stack levels used:    1
  3853 ;; Hardware stack levels required when called:    9
  3854 ;; This function calls:
  3855 ;;		_lcdInst
  3856 ;; This function is called by:
  3857 ;;		_main
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text17
  3862  002364                     __ptext17:
  3863                           	opt stack 0
  3864  002364                     _initLCD:
  3865                           	opt stack 21
  3866                           
  3867                           ;lcd.c: 47: _delay((unsigned long)((15)*(32000000/4000.0)));
  3868                           
  3869                           ;incstack = 0
  3870  002364  0E9C               	movlw	156
  3871  002366  0100               	movlb	0	; () banked
  3872  002368  6F83               	movwf	??_initLCD& (0+255),b
  3873  00236A  0ED7               	movlw	215
  3874  00236C                     u4597:
  3875  00236C  2EE8               	decfsz	wreg,f,c
  3876  00236E  D7FE               	bra	u4597
  3877  002370  2F83               	decfsz	??_initLCD& (0+255),f,b
  3878  002372  D7FC               	bra	u4597
  3879                           
  3880                           ;lcd.c: 48: lcdInst(0b00110011);
  3881  002374  0E33               	movlw	51
  3882  002376  EC76  F014         	call	_lcdInst
  3883                           
  3884                           ;lcd.c: 49: lcdInst(0b00110010);
  3885  00237A  0E32               	movlw	50
  3886  00237C  EC76  F014         	call	_lcdInst
  3887                           
  3888                           ;lcd.c: 51: lcdInst(0b00101000);
  3889  002380  0E28               	movlw	40
  3890  002382  EC76  F014         	call	_lcdInst
  3891                           
  3892                           ;lcd.c: 52: lcdInst(0b00001100);
  3893  002386  0E0C               	movlw	12
  3894  002388  EC76  F014         	call	_lcdInst
  3895                           
  3896                           ;lcd.c: 53: lcdInst(0b00000110);
  3897  00238C  0E06               	movlw	6
  3898  00238E  EC76  F014         	call	_lcdInst
  3899                           
  3900                           ;lcd.c: 54: lcdInst(0b00000001);
  3901  002392  0E01               	movlw	1
  3902  002394  EC76  F014         	call	_lcdInst
  3903                           
  3904                           ;lcd.c: 55: _delay((unsigned long)((15)*(32000000/4000.0)));
  3905  002398  0E9C               	movlw	156
  3906  00239A  0100               	movlb	0	; () banked
  3907  00239C  6F83               	movwf	??_initLCD& (0+255),b
  3908  00239E  0ED7               	movlw	215
  3909  0023A0                     u4607:
  3910  0023A0  2EE8               	decfsz	wreg,f,c
  3911  0023A2  D7FE               	bra	u4607
  3912  0023A4  2F83               	decfsz	??_initLCD& (0+255),f,b
  3913  0023A6  D7FC               	bra	u4607
  3914  0023A8  0012               	return		;funcret
  3915  0023AA                     __end_of_initLCD:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           intcon3	equ	0xFF0
  3925                           postinc0	equ	0xFEE
  3926                           wreg	equ	0xFE8
  3927                           postdec1	equ	0xFE5
  3928                           fsr1l	equ	0xFE1
  3929                           indf2	equ	0xFDF
  3930                           postinc2	equ	0xFDE
  3931                           postdec2	equ	0xFDD
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _UI *****************
  3937 ;; Defined at:
  3938 ;;		line 71 in file "UI.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;		None
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  i               1   83[BANK0 ] unsigned char 
  3943 ;;  i               1   82[BANK0 ] unsigned char 
  3944 ;;  i               1   81[BANK0 ] unsigned char 
  3945 ;;  i               1   80[BANK0 ] unsigned char 
  3946 ;;  i               1   79[BANK0 ] unsigned char 
  3947 ;;  i               1   78[BANK0 ] unsigned char 
  3948 ;;  i               1   77[BANK0 ] unsigned char 
  3949 ;;  i               1   76[BANK0 ] unsigned char 
  3950 ;;  i               1   75[BANK0 ] unsigned char 
  3951 ;;  i               1   74[BANK0 ] unsigned char 
  3952 ;;  i               1   73[BANK0 ] unsigned char 
  3953 ;;  i               1   72[BANK0 ] unsigned char 
  3954 ;;  i               1   71[BANK0 ] unsigned char 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;Total ram usage:       16 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:   11
  3971 ;; This function calls:
  3972 ;;		___awdiv
  3973 ;;		___awmod
  3974 ;;		_change_state_to_menu_12
  3975 ;;		_change_state_to_menu_22
  3976 ;;		_lcdInst
  3977 ;;		_printRTC
  3978 ;;		_printf
  3979 ;; This function is called by:
  3980 ;;		_main
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text18
  3985  000012                     __ptext18:
  3986                           	opt stack 0
  3987  000012                     _UI:
  3988                           	opt stack 19
  3989                           
  3990                           ;UI.c: 72: if(machine_state == DoneSorting_state){
  3991                           
  3992                           ;incstack = 0
  3993  000012  0E02               	movlw	2
  3994  000014  0100               	movlb	0	; () banked
  3995  000016  19F1               	xorwf	_machine_state& (0+255),w,b
  3996  000018  A4D8               	btfss	status,2,c
  3997  00001A  D071               	goto	l5013
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;UI.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4001  00001C  0E01               	movlw	1
  4002  00001E  EC76  F014         	call	_lcdInst
  4003  000022  0E68               	movlw	104
  4004  000024  0100               	movlb	0	; () banked
  4005  000026  6FC4               	movwf	??_UI& (0+255),b
  4006  000028  0EE4               	movlw	228
  4007  00002A                     u4617:
  4008  00002A  2EE8               	decfsz	wreg,f,c
  4009  00002C  D7FE               	bra	u4617
  4010  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4011  000030  D7FC               	bra	u4617
  4012  000032  F000               	nop	
  4013                           
  4014                           ;UI.c: 74: lcdInst(0b10000000);;
  4015  000034  0E80               	movlw	128
  4016  000036  EC76  F014         	call	_lcdInst
  4017                           
  4018                           ;UI.c: 75: printf("!SORT CONCLUDED!");
  4019  00003A  0EBA               	movlw	low STR_1
  4020  00003C  0100               	movlb	0	; () banked
  4021  00003E  6F8E               	movwf	printf@f& (0+255),b
  4022  000040  0EFE               	movlw	high STR_1
  4023  000042  0100               	movlb	0	; () banked
  4024  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4025  000046  ECBB  F002         	call	_printf	;wreg free
  4026                           
  4027                           ;UI.c: 76: lcdInst(0b11000000);;
  4028  00004A  0EC0               	movlw	192
  4029  00004C  EC76  F014         	call	_lcdInst
  4030                           
  4031                           ;UI.c: 77: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4032  000050  0E0E               	movlw	14
  4033  000052  0100               	movlb	0	; () banked
  4034  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4035  000056  0E10               	movlw	16
  4036  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4037  00005A  C0EF  F080         	movff	_total_time,___awmod@dividend
  4038  00005E  C0F0  F081         	movff	_total_time+1,___awmod@dividend+1
  4039  000062  EC22  F00E         	call	___awmod	;wreg free
  4040  000066  C080  F0C5         	movff	?___awmod,_UI$2056
  4041  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2056+1
  4042                           
  4043                           ;UI.c: 77: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4044  00006E  0EE8               	movlw	low STR_2
  4045  000070  0100               	movlb	0	; () banked
  4046  000072  6F8E               	movwf	printf@f& (0+255),b
  4047  000074  0EFD               	movlw	high STR_2
  4048  000076  0100               	movlb	0	; () banked
  4049  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4050  00007A  0E00               	movlw	0
  4051  00007C  0100               	movlb	0	; () banked
  4052  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4053  000080  0E00               	movlw	0
  4054  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4055  000084  0E0E               	movlw	14
  4056  000086  0100               	movlb	0	; () banked
  4057  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4058  00008A  0E10               	movlw	16
  4059  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4060  00008E  C0EF  F080         	movff	_total_time,___awmod@dividend
  4061  000092  C0F0  F081         	movff	_total_time+1,___awmod@dividend+1
  4062  000096  EC22  F00E         	call	___awmod	;wreg free
  4063  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4064  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4065  0000A2  0E00               	movlw	0
  4066  0000A4  0100               	movlb	0	; () banked
  4067  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4068  0000A8  0E3C               	movlw	60
  4069  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4070  0000AC  ECBC  F00C         	call	___awdiv	;wreg free
  4071  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4072  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4073  0000B8  C0C5  F080         	movff	_UI$2056,___awmod@dividend
  4074  0000BC  C0C6  F081         	movff	_UI$2056+1,___awmod@dividend+1
  4075  0000C0  0E00               	movlw	0
  4076  0000C2  0100               	movlb	0	; () banked
  4077  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4078  0000C6  0E3C               	movlw	60
  4079  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4080  0000CA  EC22  F00E         	call	___awmod	;wreg free
  4081  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4082  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4083  0000D6  ECBB  F002         	call	_printf	;wreg free
  4084                           
  4085                           ;UI.c: 78: machine_state = UI_state;
  4086  0000DA  0E00               	movlw	0
  4087  0000DC  0100               	movlb	0	; () banked
  4088  0000DE  6FF1               	movwf	_machine_state& (0+255),b
  4089  0000E0                     l335:
  4090  0000E0  A281               	btfss	3969,1,c	;volatile
  4091  0000E2  D7FE               	goto	l335
  4092                           
  4093                           ;UI.c: 81: }
  4094                           ;UI.c: 82: if(cur_state==12){
  4095  0000E4  0E0C               	movlw	12
  4096  0000E6  0100               	movlb	0	; () banked
  4097  0000E8  19DF               	xorwf	_cur_state& (0+255),w,b
  4098  0000EA  0100               	movlb	0	; () banked
  4099  0000EC  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
  4100  0000EE  A4D8               	btfss	status,2,c
  4101  0000F0  D003               	goto	l5011
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;UI.c: 83: change_state_to_menu_12();
  4105  0000F2  EC12  F012         	call	_change_state_to_menu_12	;wreg free
  4106                           
  4107                           ;UI.c: 84: }
  4108  0000F6  D238               	goto	l5269
  4109  0000F8                     l5011:
  4110                           
  4111                           ;UI.c: 85: else{
  4112                           ;UI.c: 86: change_state_to_menu_22();
  4113  0000F8  ECF6  F011         	call	_change_state_to_menu_22	;wreg free
  4114                           
  4115                           ;UI.c: 87: }
  4116                           ;UI.c: 88: }
  4117  0000FC  D235               	goto	l5269
  4118  0000FE                     l5013:
  4119                           
  4120                           ;UI.c: 89: else if(cur_state == 0){
  4121  0000FE  0100               	movlb	0	; () banked
  4122  000100  51DF               	movf	_cur_state& (0+255),w,b
  4123  000102  0100               	movlb	0	; () banked
  4124  000104  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
  4125  000106  A4D8               	btfss	status,2,c
  4126  000108  D22F               	goto	l5269
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;UI.c: 90: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4130  00010A  0E00               	movlw	0
  4131  00010C  0100               	movlb	0	; () banked
  4132  00010E  6FC7               	movwf	UI@i& (0+255),b
  4133  000110                     l5017:
  4134                           
  4135                           ; BSR set to: 0
  4136  000110  0E63               	movlw	99
  4137  000112  0100               	movlb	0	; () banked
  4138  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4139  000116  D001               	goto	l5021
  4140  000118  D00C               	goto	l5025
  4141  00011A                     l5021:
  4142                           
  4143                           ; BSR set to: 0
  4144  00011A  0E68               	movlw	104
  4145  00011C  0100               	movlb	0	; () banked
  4146  00011E  6FC4               	movwf	??_UI& (0+255),b
  4147  000120  0EE4               	movlw	228
  4148  000122                     u4627:
  4149  000122  2EE8               	decfsz	wreg,f,c
  4150  000124  D7FE               	bra	u4627
  4151  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4152  000128  D7FC               	bra	u4627
  4153  00012A  F000               	nop	
  4154  00012C  0100               	movlb	0	; () banked
  4155  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4156  000130  D7EF               	goto	l5017
  4157  000132                     l5025:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;UI.c: 91: if(cur_state == 0){
  4161  000132  0100               	movlb	0	; () banked
  4162  000134  51DF               	movf	_cur_state& (0+255),w,b
  4163  000136  0100               	movlb	0	; () banked
  4164  000138  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
  4165  00013A  A4D8               	btfss	status,2,c
  4166  00013C  D215               	goto	l5269
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;UI.c: 92: printRTC();
  4170  00013E  EC63  F006         	call	_printRTC	;wreg free
  4171                           
  4172                           ;UI.c: 93: }
  4173                           ;UI.c: 94: }
  4174                           ;UI.c: 95: while(logstate){
  4175  000142  D212               	goto	l5269
  4176  000144                     l5029:
  4177                           
  4178                           ;UI.c: 97: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4179  000144  0E01               	movlw	1
  4180  000146  EC76  F014         	call	_lcdInst
  4181  00014A  0E68               	movlw	104
  4182  00014C  0100               	movlb	0	; () banked
  4183  00014E  6FC4               	movwf	??_UI& (0+255),b
  4184  000150  0EE4               	movlw	228
  4185  000152                     u4637:
  4186  000152  2EE8               	decfsz	wreg,f,c
  4187  000154  D7FE               	bra	u4637
  4188  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4189  000158  D7FC               	bra	u4637
  4190  00015A  F000               	nop	
  4191                           
  4192                           ;UI.c: 98: lcdInst(0b10000000);;
  4193  00015C  0E80               	movlw	128
  4194  00015E  EC76  F014         	call	_lcdInst
  4195                           
  4196                           ;UI.c: 99: printf("-- Log %2d here--", log);
  4197  000162  0EFD               	movlw	low STR_3
  4198  000164  0100               	movlb	0	; () banked
  4199  000166  6F8E               	movwf	printf@f& (0+255),b
  4200  000168  0EFD               	movlw	high STR_3
  4201  00016A  0100               	movlb	0	; () banked
  4202  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4203  00016E  C0EB  F090         	movff	_log,?_printf+2
  4204  000172  C0EC  F091         	movff	_log+1,?_printf+3
  4205  000176  ECBB  F002         	call	_printf	;wreg free
  4206                           
  4207                           ;UI.c: 100: lcdInst(0b11000000);;
  4208  00017A  0EC0               	movlw	192
  4209  00017C  EC76  F014         	call	_lcdInst
  4210                           
  4211                           ;UI.c: 101: printf("Pause:< | Back:>");
  4212  000180  0E86               	movlw	low STR_4
  4213  000182  0100               	movlb	0	; () banked
  4214  000184  6F8E               	movwf	printf@f& (0+255),b
  4215  000186  0EFF               	movlw	high STR_4
  4216  000188  0100               	movlb	0	; () banked
  4217  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4218  00018C  ECBB  F002         	call	_printf	;wreg free
  4219                           
  4220                           ;UI.c: 103: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4221  000190  0E00               	movlw	0
  4222  000192  0100               	movlb	0	; () banked
  4223  000194  6FC8               	movwf	UI@i_640& (0+255),b
  4224  000196                     l5043:
  4225                           
  4226                           ; BSR set to: 0
  4227  000196  0E63               	movlw	99
  4228  000198  0100               	movlb	0	; () banked
  4229  00019A  65C8               	cpfsgt	UI@i_640& (0+255),b
  4230  00019C  D001               	goto	l5047
  4231  00019E  D00C               	goto	l5051
  4232  0001A0                     l5047:
  4233                           
  4234                           ; BSR set to: 0
  4235  0001A0  0E68               	movlw	104
  4236  0001A2  0100               	movlb	0	; () banked
  4237  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4238  0001A6  0EE4               	movlw	228
  4239  0001A8                     u4647:
  4240  0001A8  2EE8               	decfsz	wreg,f,c
  4241  0001AA  D7FE               	bra	u4647
  4242  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4243  0001AE  D7FC               	bra	u4647
  4244  0001B0  F000               	nop	
  4245  0001B2  0100               	movlb	0	; () banked
  4246  0001B4  2BC8               	incf	UI@i_640& (0+255),f,b
  4247  0001B6  D7EF               	goto	l5043
  4248  0001B8                     l5051:
  4249                           
  4250                           ; BSR set to: 0
  4251  0001B8  0100               	movlb	0	; () banked
  4252  0001BA  51ED               	movf	_logstate& (0+255),w,b
  4253  0001BC  0100               	movlb	0	; () banked
  4254  0001BE  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4255  0001C0  B4D8               	btfsc	status,2,c
  4256  0001C2  0012               	return	
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4260                           
  4261                           ; BSR set to: 0
  4262                           
  4263                           ; BSR set to: 0
  4264  0001C4  0E00               	movlw	0
  4265  0001C6  0100               	movlb	0	; () banked
  4266  0001C8  6FC9               	movwf	UI@i_641& (0+255),b
  4267  0001CA                     l5057:
  4268                           
  4269                           ; BSR set to: 0
  4270  0001CA  0E63               	movlw	99
  4271  0001CC  0100               	movlb	0	; () banked
  4272  0001CE  65C9               	cpfsgt	UI@i_641& (0+255),b
  4273  0001D0  D001               	goto	l5061
  4274  0001D2  D00C               	goto	l5065
  4275  0001D4                     l5061:
  4276                           
  4277                           ; BSR set to: 0
  4278  0001D4  0E68               	movlw	104
  4279  0001D6  0100               	movlb	0	; () banked
  4280  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4281  0001DA  0EE4               	movlw	228
  4282  0001DC                     u4657:
  4283  0001DC  2EE8               	decfsz	wreg,f,c
  4284  0001DE  D7FE               	bra	u4657
  4285  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4286  0001E2  D7FC               	bra	u4657
  4287  0001E4  F000               	nop	
  4288  0001E6  0100               	movlb	0	; () banked
  4289  0001E8  2BC9               	incf	UI@i_641& (0+255),f,b
  4290  0001EA  D7EF               	goto	l5057
  4291  0001EC                     l5065:
  4292                           
  4293                           ; BSR set to: 0
  4294  0001EC  0100               	movlb	0	; () banked
  4295  0001EE  51ED               	movf	_logstate& (0+255),w,b
  4296  0001F0  0100               	movlb	0	; () banked
  4297  0001F2  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4298  0001F4  B4D8               	btfsc	status,2,c
  4299  0001F6  0012               	return	
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4303                           
  4304                           ; BSR set to: 0
  4305                           
  4306                           ; BSR set to: 0
  4307  0001F8  0E01               	movlw	1
  4308  0001FA  EC76  F014         	call	_lcdInst
  4309  0001FE  0E68               	movlw	104
  4310  000200  0100               	movlb	0	; () banked
  4311  000202  6FC4               	movwf	??_UI& (0+255),b
  4312  000204  0EE4               	movlw	228
  4313  000206                     u4667:
  4314  000206  2EE8               	decfsz	wreg,f,c
  4315  000208  D7FE               	bra	u4667
  4316  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4317  00020C  D7FC               	bra	u4667
  4318  00020E  F000               	nop	
  4319                           
  4320                           ;UI.c: 107: lcdInst(0b10000000);;
  4321  000210  0E80               	movlw	128
  4322  000212  EC76  F014         	call	_lcdInst
  4323                           
  4324                           ;UI.c: 108: printf("Start:");
  4325  000216  0EC4               	movlw	low STR_5
  4326  000218  0100               	movlb	0	; () banked
  4327  00021A  6F8E               	movwf	printf@f& (0+255),b
  4328  00021C  0EFF               	movlw	high STR_5
  4329  00021E  0100               	movlb	0	; () banked
  4330  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4331  000222  ECBB  F002         	call	_printf	;wreg free
  4332                           
  4333                           ;UI.c: 109: lcdInst(0b11000000);;
  4334  000226  0EC0               	movlw	192
  4335  000228  EC76  F014         	call	_lcdInst
  4336                           
  4337                           ;UI.c: 110: printf("06Feb | 01:08:56");
  4338  00022C  0EFE               	movlw	low STR_6
  4339  00022E  0100               	movlb	0	; () banked
  4340  000230  6F8E               	movwf	printf@f& (0+255),b
  4341  000232  0EFE               	movlw	high STR_6
  4342  000234  0100               	movlb	0	; () banked
  4343  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4344  000238  ECBB  F002         	call	_printf	;wreg free
  4345                           
  4346                           ;UI.c: 112: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4347  00023C  0E00               	movlw	0
  4348  00023E  0100               	movlb	0	; () banked
  4349  000240  6FCA               	movwf	UI@i_644& (0+255),b
  4350  000242                     l5083:
  4351                           
  4352                           ; BSR set to: 0
  4353  000242  0E63               	movlw	99
  4354  000244  0100               	movlb	0	; () banked
  4355  000246  65CA               	cpfsgt	UI@i_644& (0+255),b
  4356  000248  D001               	goto	l5087
  4357  00024A  D00C               	goto	l5091
  4358  00024C                     l5087:
  4359                           
  4360                           ; BSR set to: 0
  4361  00024C  0E68               	movlw	104
  4362  00024E  0100               	movlb	0	; () banked
  4363  000250  6FC4               	movwf	??_UI& (0+255),b
  4364  000252  0EE4               	movlw	228
  4365  000254                     u4677:
  4366  000254  2EE8               	decfsz	wreg,f,c
  4367  000256  D7FE               	bra	u4677
  4368  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  4369  00025A  D7FC               	bra	u4677
  4370  00025C  F000               	nop	
  4371  00025E  0100               	movlb	0	; () banked
  4372  000260  2BCA               	incf	UI@i_644& (0+255),f,b
  4373  000262  D7EF               	goto	l5083
  4374  000264                     l5091:
  4375                           
  4376                           ; BSR set to: 0
  4377  000264  0100               	movlb	0	; () banked
  4378  000266  51ED               	movf	_logstate& (0+255),w,b
  4379  000268  0100               	movlb	0	; () banked
  4380  00026A  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4381  00026C  B4D8               	btfsc	status,2,c
  4382  00026E  0012               	return	
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4386                           
  4387                           ; BSR set to: 0
  4388                           
  4389                           ; BSR set to: 0
  4390  000270  0E00               	movlw	0
  4391  000272  0100               	movlb	0	; () banked
  4392  000274  6FCB               	movwf	UI@i_645& (0+255),b
  4393  000276                     l5097:
  4394                           
  4395                           ; BSR set to: 0
  4396  000276  0E63               	movlw	99
  4397  000278  0100               	movlb	0	; () banked
  4398  00027A  65CB               	cpfsgt	UI@i_645& (0+255),b
  4399  00027C  D001               	goto	l5101
  4400  00027E  D00C               	goto	l5105
  4401  000280                     l5101:
  4402                           
  4403                           ; BSR set to: 0
  4404  000280  0E68               	movlw	104
  4405  000282  0100               	movlb	0	; () banked
  4406  000284  6FC4               	movwf	??_UI& (0+255),b
  4407  000286  0EE4               	movlw	228
  4408  000288                     u4687:
  4409  000288  2EE8               	decfsz	wreg,f,c
  4410  00028A  D7FE               	bra	u4687
  4411  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  4412  00028E  D7FC               	bra	u4687
  4413  000290  F000               	nop	
  4414  000292  0100               	movlb	0	; () banked
  4415  000294  2BCB               	incf	UI@i_645& (0+255),f,b
  4416  000296  D7EF               	goto	l5097
  4417  000298                     l5105:
  4418                           
  4419                           ; BSR set to: 0
  4420  000298  0100               	movlb	0	; () banked
  4421  00029A  51ED               	movf	_logstate& (0+255),w,b
  4422  00029C  0100               	movlb	0	; () banked
  4423  00029E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4424  0002A0  B4D8               	btfsc	status,2,c
  4425  0002A2  0012               	return	
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4429                           
  4430                           ; BSR set to: 0
  4431                           
  4432                           ; BSR set to: 0
  4433  0002A4  0E01               	movlw	1
  4434  0002A6  EC76  F014         	call	_lcdInst
  4435  0002AA  0E68               	movlw	104
  4436  0002AC  0100               	movlb	0	; () banked
  4437  0002AE  6FC4               	movwf	??_UI& (0+255),b
  4438  0002B0  0EE4               	movlw	228
  4439  0002B2                     u4697:
  4440  0002B2  2EE8               	decfsz	wreg,f,c
  4441  0002B4  D7FE               	bra	u4697
  4442  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  4443  0002B8  D7FC               	bra	u4697
  4444  0002BA  F000               	nop	
  4445                           
  4446                           ;UI.c: 116: lcdInst(0b10000000);;
  4447  0002BC  0E80               	movlw	128
  4448  0002BE  EC76  F014         	call	_lcdInst
  4449                           
  4450                           ;UI.c: 117: printf("Duration:");
  4451  0002C2  0EB3               	movlw	low STR_7
  4452  0002C4  0100               	movlb	0	; () banked
  4453  0002C6  6F8E               	movwf	printf@f& (0+255),b
  4454  0002C8  0EFF               	movlw	high STR_7
  4455  0002CA  0100               	movlb	0	; () banked
  4456  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4457  0002CE  ECBB  F002         	call	_printf	;wreg free
  4458                           
  4459                           ;UI.c: 118: lcdInst(0b11000000);;
  4460  0002D2  0EC0               	movlw	192
  4461  0002D4  EC76  F014         	call	_lcdInst
  4462                           
  4463                           ;UI.c: 119: printf("%d min(s) %d secs", 2, 42);
  4464  0002D8  0E0F               	movlw	low STR_8
  4465  0002DA  0100               	movlb	0	; () banked
  4466  0002DC  6F8E               	movwf	printf@f& (0+255),b
  4467  0002DE  0EFE               	movlw	high STR_8
  4468  0002E0  0100               	movlb	0	; () banked
  4469  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4470  0002E4  0E00               	movlw	0
  4471  0002E6  0100               	movlb	0	; () banked
  4472  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  4473  0002EA  0E02               	movlw	2
  4474  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  4475  0002EE  0E00               	movlw	0
  4476  0002F0  0100               	movlb	0	; () banked
  4477  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  4478  0002F4  0E2A               	movlw	42
  4479  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  4480  0002F8  ECBB  F002         	call	_printf	;wreg free
  4481                           
  4482                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4483  0002FC  0E00               	movlw	0
  4484  0002FE  0100               	movlb	0	; () banked
  4485  000300  6FCC               	movwf	UI@i_648& (0+255),b
  4486  000302                     l5123:
  4487                           
  4488                           ; BSR set to: 0
  4489  000302  0E63               	movlw	99
  4490  000304  0100               	movlb	0	; () banked
  4491  000306  65CC               	cpfsgt	UI@i_648& (0+255),b
  4492  000308  D001               	goto	l5127
  4493  00030A  D00C               	goto	l5131
  4494  00030C                     l5127:
  4495                           
  4496                           ; BSR set to: 0
  4497  00030C  0E68               	movlw	104
  4498  00030E  0100               	movlb	0	; () banked
  4499  000310  6FC4               	movwf	??_UI& (0+255),b
  4500  000312  0EE4               	movlw	228
  4501  000314                     u4707:
  4502  000314  2EE8               	decfsz	wreg,f,c
  4503  000316  D7FE               	bra	u4707
  4504  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  4505  00031A  D7FC               	bra	u4707
  4506  00031C  F000               	nop	
  4507  00031E  0100               	movlb	0	; () banked
  4508  000320  2BCC               	incf	UI@i_648& (0+255),f,b
  4509  000322  D7EF               	goto	l5123
  4510  000324                     l5131:
  4511                           
  4512                           ; BSR set to: 0
  4513  000324  0100               	movlb	0	; () banked
  4514  000326  51ED               	movf	_logstate& (0+255),w,b
  4515  000328  0100               	movlb	0	; () banked
  4516  00032A  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4517  00032C  B4D8               	btfsc	status,2,c
  4518  00032E  0012               	return	
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4522                           
  4523                           ; BSR set to: 0
  4524                           
  4525                           ; BSR set to: 0
  4526  000330  0E00               	movlw	0
  4527  000332  0100               	movlb	0	; () banked
  4528  000334  6FCD               	movwf	UI@i_649& (0+255),b
  4529  000336                     l5137:
  4530                           
  4531                           ; BSR set to: 0
  4532  000336  0E63               	movlw	99
  4533  000338  0100               	movlb	0	; () banked
  4534  00033A  65CD               	cpfsgt	UI@i_649& (0+255),b
  4535  00033C  D001               	goto	l5141
  4536  00033E  D00C               	goto	l5145
  4537  000340                     l5141:
  4538                           
  4539                           ; BSR set to: 0
  4540  000340  0E68               	movlw	104
  4541  000342  0100               	movlb	0	; () banked
  4542  000344  6FC4               	movwf	??_UI& (0+255),b
  4543  000346  0EE4               	movlw	228
  4544  000348                     u4717:
  4545  000348  2EE8               	decfsz	wreg,f,c
  4546  00034A  D7FE               	bra	u4717
  4547  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  4548  00034E  D7FC               	bra	u4717
  4549  000350  F000               	nop	
  4550  000352  0100               	movlb	0	; () banked
  4551  000354  2BCD               	incf	UI@i_649& (0+255),f,b
  4552  000356  D7EF               	goto	l5137
  4553  000358                     l5145:
  4554                           
  4555                           ; BSR set to: 0
  4556  000358  0100               	movlb	0	; () banked
  4557  00035A  51ED               	movf	_logstate& (0+255),w,b
  4558  00035C  0100               	movlb	0	; () banked
  4559  00035E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4560  000360  B4D8               	btfsc	status,2,c
  4561  000362  0012               	return	
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4565                           
  4566                           ; BSR set to: 0
  4567                           
  4568                           ; BSR set to: 0
  4569  000364  0E01               	movlw	1
  4570  000366  EC76  F014         	call	_lcdInst
  4571  00036A  0E68               	movlw	104
  4572  00036C  0100               	movlb	0	; () banked
  4573  00036E  6FC4               	movwf	??_UI& (0+255),b
  4574  000370  0EE4               	movlw	228
  4575  000372                     u4727:
  4576  000372  2EE8               	decfsz	wreg,f,c
  4577  000374  D7FE               	bra	u4727
  4578  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  4579  000378  D7FC               	bra	u4727
  4580  00037A  F000               	nop	
  4581                           
  4582                           ;UI.c: 125: lcdInst(0b10000000);;
  4583  00037C  0E80               	movlw	128
  4584  00037E  EC76  F014         	call	_lcdInst
  4585                           
  4586                           ;UI.c: 126: printf(" -- Pop  can -- ");
  4587  000382  0E98               	movlw	low STR_9
  4588  000384  0100               	movlb	0	; () banked
  4589  000386  6F8E               	movwf	printf@f& (0+255),b
  4590  000388  0EFE               	movlw	high STR_9
  4591  00038A  0100               	movlb	0	; () banked
  4592  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4593  00038E  ECBB  F002         	call	_printf	;wreg free
  4594                           
  4595                           ;UI.c: 127: lcdInst(0b11000000);;
  4596  000392  0EC0               	movlw	192
  4597  000394  EC76  F014         	call	_lcdInst
  4598                           
  4599                           ;UI.c: 128: printf("No tab: 9|Tab: 1");
  4600  000398  0EDC               	movlw	low STR_10
  4601  00039A  0100               	movlb	0	; () banked
  4602  00039C  6F8E               	movwf	printf@f& (0+255),b
  4603  00039E  0EFE               	movlw	high STR_10
  4604  0003A0  0100               	movlb	0	; () banked
  4605  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4606  0003A4  ECBB  F002         	call	_printf	;wreg free
  4607                           
  4608                           ;UI.c: 130: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4609  0003A8  0E00               	movlw	0
  4610  0003AA  0100               	movlb	0	; () banked
  4611  0003AC  6FCE               	movwf	UI@i_652& (0+255),b
  4612  0003AE                     l5163:
  4613                           
  4614                           ; BSR set to: 0
  4615  0003AE  0E63               	movlw	99
  4616  0003B0  0100               	movlb	0	; () banked
  4617  0003B2  65CE               	cpfsgt	UI@i_652& (0+255),b
  4618  0003B4  D001               	goto	l5167
  4619  0003B6  D00C               	goto	l5171
  4620  0003B8                     l5167:
  4621                           
  4622                           ; BSR set to: 0
  4623  0003B8  0E68               	movlw	104
  4624  0003BA  0100               	movlb	0	; () banked
  4625  0003BC  6FC4               	movwf	??_UI& (0+255),b
  4626  0003BE  0EE4               	movlw	228
  4627  0003C0                     u4737:
  4628  0003C0  2EE8               	decfsz	wreg,f,c
  4629  0003C2  D7FE               	bra	u4737
  4630  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  4631  0003C6  D7FC               	bra	u4737
  4632  0003C8  F000               	nop	
  4633  0003CA  0100               	movlb	0	; () banked
  4634  0003CC  2BCE               	incf	UI@i_652& (0+255),f,b
  4635  0003CE  D7EF               	goto	l5163
  4636  0003D0                     l5171:
  4637                           
  4638                           ; BSR set to: 0
  4639  0003D0  0100               	movlb	0	; () banked
  4640  0003D2  51ED               	movf	_logstate& (0+255),w,b
  4641  0003D4  0100               	movlb	0	; () banked
  4642  0003D6  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4643  0003D8  B4D8               	btfsc	status,2,c
  4644  0003DA  0012               	return	
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4648                           
  4649                           ; BSR set to: 0
  4650                           
  4651                           ; BSR set to: 0
  4652  0003DC  0E00               	movlw	0
  4653  0003DE  0100               	movlb	0	; () banked
  4654  0003E0  6FCF               	movwf	UI@i_653& (0+255),b
  4655  0003E2                     l5177:
  4656                           
  4657                           ; BSR set to: 0
  4658  0003E2  0E63               	movlw	99
  4659  0003E4  0100               	movlb	0	; () banked
  4660  0003E6  65CF               	cpfsgt	UI@i_653& (0+255),b
  4661  0003E8  D001               	goto	l5181
  4662  0003EA  D00C               	goto	l5185
  4663  0003EC                     l5181:
  4664                           
  4665                           ; BSR set to: 0
  4666  0003EC  0E68               	movlw	104
  4667  0003EE  0100               	movlb	0	; () banked
  4668  0003F0  6FC4               	movwf	??_UI& (0+255),b
  4669  0003F2  0EE4               	movlw	228
  4670  0003F4                     u4747:
  4671  0003F4  2EE8               	decfsz	wreg,f,c
  4672  0003F6  D7FE               	bra	u4747
  4673  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  4674  0003FA  D7FC               	bra	u4747
  4675  0003FC  F000               	nop	
  4676  0003FE  0100               	movlb	0	; () banked
  4677  000400  2BCF               	incf	UI@i_653& (0+255),f,b
  4678  000402  D7EF               	goto	l5177
  4679  000404                     l5185:
  4680                           
  4681                           ; BSR set to: 0
  4682  000404  0100               	movlb	0	; () banked
  4683  000406  51ED               	movf	_logstate& (0+255),w,b
  4684  000408  0100               	movlb	0	; () banked
  4685  00040A  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4686  00040C  B4D8               	btfsc	status,2,c
  4687  00040E  0012               	return	
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;UI.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4691                           
  4692                           ; BSR set to: 0
  4693                           
  4694                           ; BSR set to: 0
  4695  000410  0E01               	movlw	1
  4696  000412  EC76  F014         	call	_lcdInst
  4697  000416  0E68               	movlw	104
  4698  000418  0100               	movlb	0	; () banked
  4699  00041A  6FC4               	movwf	??_UI& (0+255),b
  4700  00041C  0EE4               	movlw	228
  4701  00041E                     u4757:
  4702  00041E  2EE8               	decfsz	wreg,f,c
  4703  000420  D7FE               	bra	u4757
  4704  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  4705  000424  D7FC               	bra	u4757
  4706  000426  F000               	nop	
  4707                           
  4708                           ;UI.c: 134: lcdInst(0b10000000);;
  4709  000428  0E80               	movlw	128
  4710  00042A  EC76  F014         	call	_lcdInst
  4711                           
  4712                           ;UI.c: 135: printf(" -- Soup can -- ");
  4713  00042E  0EA9               	movlw	low STR_11
  4714  000430  0100               	movlb	0	; () banked
  4715  000432  6F8E               	movwf	printf@f& (0+255),b
  4716  000434  0EFE               	movlw	high STR_11
  4717  000436  0100               	movlb	0	; () banked
  4718  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  4719  00043A  ECBB  F002         	call	_printf	;wreg free
  4720                           
  4721                           ;UI.c: 136: lcdInst(0b11000000);;
  4722  00043E  0EC0               	movlw	192
  4723  000440  EC76  F014         	call	_lcdInst
  4724                           
  4725                           ;UI.c: 137: printf("No lbl: 1|lbl: 1");
  4726  000444  0EED               	movlw	low STR_12
  4727  000446  0100               	movlb	0	; () banked
  4728  000448  6F8E               	movwf	printf@f& (0+255),b
  4729  00044A  0EFE               	movlw	high STR_12
  4730  00044C  0100               	movlb	0	; () banked
  4731  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  4732  000450  ECBB  F002         	call	_printf	;wreg free
  4733                           
  4734                           ;UI.c: 139: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4735  000454  0E00               	movlw	0
  4736  000456  0100               	movlb	0	; () banked
  4737  000458  6FD0               	movwf	UI@i_656& (0+255),b
  4738  00045A                     l5203:
  4739                           
  4740                           ; BSR set to: 0
  4741  00045A  0E63               	movlw	99
  4742  00045C  0100               	movlb	0	; () banked
  4743  00045E  65D0               	cpfsgt	UI@i_656& (0+255),b
  4744  000460  D001               	goto	l5207
  4745  000462  D00C               	goto	l5211
  4746  000464                     l5207:
  4747                           
  4748                           ; BSR set to: 0
  4749  000464  0E68               	movlw	104
  4750  000466  0100               	movlb	0	; () banked
  4751  000468  6FC4               	movwf	??_UI& (0+255),b
  4752  00046A  0EE4               	movlw	228
  4753  00046C                     u4767:
  4754  00046C  2EE8               	decfsz	wreg,f,c
  4755  00046E  D7FE               	bra	u4767
  4756  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  4757  000472  D7FC               	bra	u4767
  4758  000474  F000               	nop	
  4759  000476  0100               	movlb	0	; () banked
  4760  000478  2BD0               	incf	UI@i_656& (0+255),f,b
  4761  00047A  D7EF               	goto	l5203
  4762  00047C                     l5211:
  4763                           
  4764                           ; BSR set to: 0
  4765  00047C  0100               	movlb	0	; () banked
  4766  00047E  51ED               	movf	_logstate& (0+255),w,b
  4767  000480  0100               	movlb	0	; () banked
  4768  000482  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4769  000484  B4D8               	btfsc	status,2,c
  4770  000486  0012               	return	
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4774                           
  4775                           ; BSR set to: 0
  4776                           
  4777                           ; BSR set to: 0
  4778  000488  0E00               	movlw	0
  4779  00048A  0100               	movlb	0	; () banked
  4780  00048C  6FD1               	movwf	UI@i_657& (0+255),b
  4781  00048E                     l5217:
  4782                           
  4783                           ; BSR set to: 0
  4784  00048E  0E63               	movlw	99
  4785  000490  0100               	movlb	0	; () banked
  4786  000492  65D1               	cpfsgt	UI@i_657& (0+255),b
  4787  000494  D001               	goto	l5221
  4788  000496  D00C               	goto	l5225
  4789  000498                     l5221:
  4790                           
  4791                           ; BSR set to: 0
  4792  000498  0E68               	movlw	104
  4793  00049A  0100               	movlb	0	; () banked
  4794  00049C  6FC4               	movwf	??_UI& (0+255),b
  4795  00049E  0EE4               	movlw	228
  4796  0004A0                     u4777:
  4797  0004A0  2EE8               	decfsz	wreg,f,c
  4798  0004A2  D7FE               	bra	u4777
  4799  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  4800  0004A6  D7FC               	bra	u4777
  4801  0004A8  F000               	nop	
  4802  0004AA  0100               	movlb	0	; () banked
  4803  0004AC  2BD1               	incf	UI@i_657& (0+255),f,b
  4804  0004AE  D7EF               	goto	l5217
  4805  0004B0                     l5225:
  4806                           
  4807                           ; BSR set to: 0
  4808  0004B0  0100               	movlb	0	; () banked
  4809  0004B2  51ED               	movf	_logstate& (0+255),w,b
  4810  0004B4  0100               	movlb	0	; () banked
  4811  0004B6  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4812  0004B8  B4D8               	btfsc	status,2,c
  4813  0004BA  0012               	return	
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;UI.c: 142: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4817                           
  4818                           ; BSR set to: 0
  4819                           
  4820                           ; BSR set to: 0
  4821  0004BC  0E01               	movlw	1
  4822  0004BE  EC76  F014         	call	_lcdInst
  4823  0004C2  0E68               	movlw	104
  4824  0004C4  0100               	movlb	0	; () banked
  4825  0004C6  6FC4               	movwf	??_UI& (0+255),b
  4826  0004C8  0EE4               	movlw	228
  4827  0004CA                     u4787:
  4828  0004CA  2EE8               	decfsz	wreg,f,c
  4829  0004CC  D7FE               	bra	u4787
  4830  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  4831  0004D0  D7FC               	bra	u4787
  4832  0004D2  F000               	nop	
  4833                           
  4834                           ;UI.c: 143: lcdInst(0b10000000);;
  4835  0004D4  0E80               	movlw	128
  4836  0004D6  EC76  F014         	call	_lcdInst
  4837                           
  4838                           ;UI.c: 144: printf("-- Total cans --");
  4839  0004DA  0ECB               	movlw	low STR_13
  4840  0004DC  0100               	movlb	0	; () banked
  4841  0004DE  6F8E               	movwf	printf@f& (0+255),b
  4842  0004E0  0EFE               	movlw	high STR_13
  4843  0004E2  0100               	movlb	0	; () banked
  4844  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  4845  0004E6  ECBB  F002         	call	_printf	;wreg free
  4846                           
  4847                           ;UI.c: 145: lcdInst(0b11000000);;
  4848  0004EA  0EC0               	movlw	192
  4849  0004EC  EC76  F014         	call	_lcdInst
  4850                           
  4851                           ;UI.c: 146: printf("12");
  4852  0004F0  0EFB               	movlw	low STR_14
  4853  0004F2  0100               	movlb	0	; () banked
  4854  0004F4  6F8E               	movwf	printf@f& (0+255),b
  4855  0004F6  0EFF               	movlw	high STR_14
  4856  0004F8  0100               	movlb	0	; () banked
  4857  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  4858  0004FC  ECBB  F002         	call	_printf	;wreg free
  4859                           
  4860                           ;UI.c: 148: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4861  000500  0E00               	movlw	0
  4862  000502  0100               	movlb	0	; () banked
  4863  000504  6FD2               	movwf	UI@i_660& (0+255),b
  4864  000506                     l5243:
  4865                           
  4866                           ; BSR set to: 0
  4867  000506  0E63               	movlw	99
  4868  000508  0100               	movlb	0	; () banked
  4869  00050A  65D2               	cpfsgt	UI@i_660& (0+255),b
  4870  00050C  D001               	goto	l5247
  4871  00050E  D00C               	goto	l5251
  4872  000510                     l5247:
  4873                           
  4874                           ; BSR set to: 0
  4875  000510  0E68               	movlw	104
  4876  000512  0100               	movlb	0	; () banked
  4877  000514  6FC4               	movwf	??_UI& (0+255),b
  4878  000516  0EE4               	movlw	228
  4879  000518                     u4797:
  4880  000518  2EE8               	decfsz	wreg,f,c
  4881  00051A  D7FE               	bra	u4797
  4882  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  4883  00051E  D7FC               	bra	u4797
  4884  000520  F000               	nop	
  4885  000522  0100               	movlb	0	; () banked
  4886  000524  2BD2               	incf	UI@i_660& (0+255),f,b
  4887  000526  D7EF               	goto	l5243
  4888  000528                     l5251:
  4889                           
  4890                           ; BSR set to: 0
  4891  000528  0100               	movlb	0	; () banked
  4892  00052A  51ED               	movf	_logstate& (0+255),w,b
  4893  00052C  0100               	movlb	0	; () banked
  4894  00052E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4895  000530  B4D8               	btfsc	status,2,c
  4896  000532  0012               	return	
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4900                           
  4901                           ; BSR set to: 0
  4902                           
  4903                           ; BSR set to: 0
  4904  000534  0E00               	movlw	0
  4905  000536  0100               	movlb	0	; () banked
  4906  000538  6FD3               	movwf	UI@i_661& (0+255),b
  4907  00053A                     l5257:
  4908                           
  4909                           ; BSR set to: 0
  4910  00053A  0E63               	movlw	99
  4911  00053C  0100               	movlb	0	; () banked
  4912  00053E  65D3               	cpfsgt	UI@i_661& (0+255),b
  4913  000540  D001               	goto	l5261
  4914  000542  D00C               	goto	l5265
  4915  000544                     l5261:
  4916                           
  4917                           ; BSR set to: 0
  4918  000544  0E68               	movlw	104
  4919  000546  0100               	movlb	0	; () banked
  4920  000548  6FC4               	movwf	??_UI& (0+255),b
  4921  00054A  0EE4               	movlw	228
  4922  00054C                     u4807:
  4923  00054C  2EE8               	decfsz	wreg,f,c
  4924  00054E  D7FE               	bra	u4807
  4925  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  4926  000552  D7FC               	bra	u4807
  4927  000554  F000               	nop	
  4928  000556  0100               	movlb	0	; () banked
  4929  000558  2BD3               	incf	UI@i_661& (0+255),f,b
  4930  00055A  D7EF               	goto	l5257
  4931  00055C                     l5265:
  4932                           
  4933                           ; BSR set to: 0
  4934  00055C  0100               	movlb	0	; () banked
  4935  00055E  51ED               	movf	_logstate& (0+255),w,b
  4936  000560  0100               	movlb	0	; () banked
  4937  000562  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4938  000564  B4D8               	btfsc	status,2,c
  4939  000566  0012               	return	
  4940  000568                     l5269:
  4941  000568  0100               	movlb	0	; () banked
  4942  00056A  51ED               	movf	_logstate& (0+255),w,b
  4943  00056C  0100               	movlb	0	; () banked
  4944  00056E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4945  000570  B4D8               	btfsc	status,2,c
  4946  000572  0012               	return	
  4947  000574  D5E7               	goto	l5029
  4948  000576                     __end_of_UI:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           intcon3	equ	0xFF0
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           postdec1	equ	0xFE5
  4961                           fsr1l	equ	0xFE1
  4962                           indf2	equ	0xFDF
  4963                           postinc2	equ	0xFDE
  4964                           postdec2	equ	0xFDD
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _printRTC *****************
  4970 ;; Defined at:
  4971 ;;		line 61 in file "RTC.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;		None
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  i               2   66[BANK0 ] int 
  4976 ;;  INT_time       14   46[BANK0 ] int [7]
  4977 ;;  month           4   62[BANK0 ] unsigned char [4]
  4978 ;;  RTC_month       2   60[BANK0 ] int 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;Total ram usage:       25 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:   10
  4995 ;; This function calls:
  4996 ;;		_getRTC
  4997 ;;		_lcdInst
  4998 ;;		_printf
  4999 ;;		_strcpy
  5000 ;; This function is called by:
  5001 ;;		_UI
  5002 ;;		_change_state_to_menu_start
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text19
  5007  000CC6                     __ptext19:
  5008                           	opt stack 0
  5009  000CC6                     _printRTC:
  5010                           	opt stack 18
  5011                           
  5012                           ;RTC.c: 62: getRTC();
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;incstack = 0
  5016  000CC6  EC4C  F00F         	call	_getRTC	;wreg free
  5017                           
  5018                           ;RTC.c: 63: char month[] = "MMM";
  5019  000CCA  C0F2  F0BE         	movff	printRTC@F3188,printRTC@month
  5020  000CCE  C0F3  F0BF         	movff	printRTC@F3188+1,printRTC@month+1
  5021  000CD2  C0F4  F0C0         	movff	printRTC@F3188+2,printRTC@month+2
  5022  000CD6  C0F5  F0C1         	movff	printRTC@F3188+3,printRTC@month+3
  5023                           
  5024                           ;RTC.c: 64: int INT_time[7];
  5025                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  5026  000CDA  0E00               	movlw	0
  5027  000CDC  0100               	movlb	0	; () banked
  5028  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5029  000CE0  0E00               	movlw	0
  5030  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  5031                           
  5032                           ; BSR set to: 0
  5033  000CE4  0100               	movlb	0	; () banked
  5034  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5035  000CE8  D008               	goto	l4385
  5036  000CEA  0100               	movlb	0	; () banked
  5037  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5038  000CEE  E146               	bnz	l878
  5039  000CF0  0E07               	movlw	7
  5040  000CF2  0100               	movlb	0	; () banked
  5041  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  5042  000CF6  B0D8               	btfsc	status,0,c
  5043  000CF8  D041               	goto	l878
  5044  000CFA                     l4385:
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5048  000CFA  0ED4               	movlw	low _time
  5049  000CFC  0100               	movlb	0	; () banked
  5050  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  5051  000D00  6ED9               	movwf	fsr2l,c
  5052  000D02  0E00               	movlw	high _time
  5053  000D04  0100               	movlb	0	; () banked
  5054  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5055  000D08  6EDA               	movwf	fsr2h,c
  5056  000D0A  50DF               	movf	indf2,w,c
  5057  000D0C  0100               	movlb	0	; () banked
  5058  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  5059  000D10  0100               	movlb	0	; () banked
  5060  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  5061  000D14  0E0F               	movlw	15
  5062  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  5063  000D18  0E0F               	movlw	15
  5064  000D1A  0100               	movlb	0	; () banked
  5065  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  5066  000D1E  0100               	movlb	0	; () banked
  5067  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  5068  000D22  0D0A               	mullw	10
  5069  000D24  0ED4               	movlw	low _time
  5070  000D26  0100               	movlb	0	; () banked
  5071  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  5072  000D2A  6ED9               	movwf	fsr2l,c
  5073  000D2C  0E00               	movlw	high _time
  5074  000D2E  0100               	movlb	0	; () banked
  5075  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5076  000D32  6EDA               	movwf	fsr2h,c
  5077  000D34  50DF               	movf	indf2,w,c
  5078  000D36  0B0F               	andlw	15
  5079  000D38  0100               	movlb	0	; () banked
  5080  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5081  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5082  000D3E  50F3               	movf	prodl,w,c
  5083  000D40  0100               	movlb	0	; () banked
  5084  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5085  000D44  50F4               	movf	prodh,w,c
  5086  000D46  0100               	movlb	0	; () banked
  5087  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5088  000D4A  90D8               	bcf	status,0,c
  5089  000D4C  0100               	movlb	0	; () banked
  5090  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  5091  000D50  6ED9               	movwf	fsr2l,c
  5092  000D52  0100               	movlb	0	; () banked
  5093  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5094  000D56  6EDA               	movwf	fsr2h,c
  5095  000D58  0EAE               	movlw	low printRTC@INT_time
  5096  000D5A  26D9               	addwf	fsr2l,f,c
  5097  000D5C  0E00               	movlw	high printRTC@INT_time
  5098  000D5E  22DA               	addwfc	fsr2h,f,c
  5099  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5100  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5101                           
  5102                           ; BSR set to: 0
  5103  000D68  0100               	movlb	0	; () banked
  5104  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5105  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5106                           
  5107                           ; BSR set to: 0
  5108  000D6E  0100               	movlb	0	; () banked
  5109  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5110  000D72  D7C3               	goto	l4385
  5111  000D74  0100               	movlb	0	; () banked
  5112  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5113  000D78  E101               	bnz	u3180
  5114  000D7A  D7BA               	goto	L6
  5115  000D7C                     u3180:
  5116  000D7C                     l878:
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;RTC.c: 67: }
  5120                           ;RTC.c: 68: int RTC_month = INT_time[5];
  5121  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5122  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5123                           
  5124                           ;RTC.c: 69: switch(RTC_month){
  5125  000D84  D0B4               	goto	l4417
  5126  000D86                     l4391:
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;RTC.c: 71: strcpy(month, "Jan");
  5130  000D86  0EBE               	movlw	low printRTC@month
  5131  000D88  0100               	movlb	0	; () banked
  5132  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  5133  000D8C  0E00               	movlw	high printRTC@month
  5134  000D8E  0100               	movlb	0	; () banked
  5135  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5136  000D92  0EDB               	movlw	low STR_36
  5137  000D94  0100               	movlb	0	; () banked
  5138  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5139  000D98  0EFF               	movlw	high STR_36
  5140  000D9A  0100               	movlb	0	; () banked
  5141  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5142  000D9E  EC2E  F012         	call	_strcpy	;wreg free
  5143                           
  5144                           ;RTC.c: 72: break;
  5145  000DA2  D0D4               	goto	l4419
  5146  000DA4                     l4393:
  5147                           
  5148                           ;RTC.c: 74: strcpy(month, "Feb");
  5149  000DA4  0EBE               	movlw	low printRTC@month
  5150  000DA6  0100               	movlb	0	; () banked
  5151  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5152  000DAA  0E00               	movlw	high printRTC@month
  5153  000DAC  0100               	movlb	0	; () banked
  5154  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5155  000DB0  0ECB               	movlw	low STR_37
  5156  000DB2  0100               	movlb	0	; () banked
  5157  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5158  000DB6  0EFF               	movlw	high STR_37
  5159  000DB8  0100               	movlb	0	; () banked
  5160  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5161  000DBC  EC2E  F012         	call	_strcpy	;wreg free
  5162                           
  5163                           ;RTC.c: 75: break;
  5164  000DC0  D0C5               	goto	l4419
  5165  000DC2                     l4395:
  5166                           
  5167                           ;RTC.c: 77: strcpy(month, "Mar");
  5168  000DC2  0EBE               	movlw	low printRTC@month
  5169  000DC4  0100               	movlb	0	; () banked
  5170  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5171  000DC8  0E00               	movlw	high printRTC@month
  5172  000DCA  0100               	movlb	0	; () banked
  5173  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5174  000DCE  0EE7               	movlw	low STR_38
  5175  000DD0  0100               	movlb	0	; () banked
  5176  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5177  000DD4  0EFF               	movlw	high STR_38
  5178  000DD6  0100               	movlb	0	; () banked
  5179  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5180  000DDA  EC2E  F012         	call	_strcpy	;wreg free
  5181                           
  5182                           ;RTC.c: 78: break;
  5183  000DDE  D0B6               	goto	l4419
  5184  000DE0                     l4397:
  5185                           
  5186                           ;RTC.c: 80: strcpy(month, "Apr");
  5187  000DE0  0EBE               	movlw	low printRTC@month
  5188  000DE2  0100               	movlb	0	; () banked
  5189  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5190  000DE6  0E00               	movlw	high printRTC@month
  5191  000DE8  0100               	movlb	0	; () banked
  5192  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5193  000DEC  0EEB               	movlw	low STR_39
  5194  000DEE  0100               	movlb	0	; () banked
  5195  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5196  000DF2  0EFF               	movlw	high STR_39
  5197  000DF4  0100               	movlb	0	; () banked
  5198  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5199  000DF8  EC2E  F012         	call	_strcpy	;wreg free
  5200                           
  5201                           ;RTC.c: 81: break;
  5202  000DFC  D0A7               	goto	l4419
  5203  000DFE                     l4399:
  5204                           
  5205                           ;RTC.c: 83: strcpy(month, "May");
  5206  000DFE  0EBE               	movlw	low printRTC@month
  5207  000E00  0100               	movlb	0	; () banked
  5208  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5209  000E04  0E00               	movlw	high printRTC@month
  5210  000E06  0100               	movlb	0	; () banked
  5211  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5212  000E0A  0EF7               	movlw	low STR_40
  5213  000E0C  0100               	movlb	0	; () banked
  5214  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5215  000E10  0EFF               	movlw	high STR_40
  5216  000E12  0100               	movlb	0	; () banked
  5217  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5218  000E16  EC2E  F012         	call	_strcpy	;wreg free
  5219                           
  5220                           ;RTC.c: 84: break;
  5221  000E1A  D098               	goto	l4419
  5222  000E1C                     l4401:
  5223                           
  5224                           ;RTC.c: 86: strcpy(month, "Jun");
  5225  000E1C  0EBE               	movlw	low printRTC@month
  5226  000E1E  0100               	movlb	0	; () banked
  5227  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5228  000E22  0E00               	movlw	high printRTC@month
  5229  000E24  0100               	movlb	0	; () banked
  5230  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5231  000E28  0EDF               	movlw	low STR_41
  5232  000E2A  0100               	movlb	0	; () banked
  5233  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5234  000E2E  0EFF               	movlw	high STR_41
  5235  000E30  0100               	movlb	0	; () banked
  5236  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5237  000E34  EC2E  F012         	call	_strcpy	;wreg free
  5238                           
  5239                           ;RTC.c: 87: break;
  5240  000E38  D089               	goto	l4419
  5241  000E3A                     l4403:
  5242                           
  5243                           ;RTC.c: 89: strcpy(month, "Jul");
  5244  000E3A  0EBE               	movlw	low printRTC@month
  5245  000E3C  0100               	movlb	0	; () banked
  5246  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5247  000E40  0E00               	movlw	high printRTC@month
  5248  000E42  0100               	movlb	0	; () banked
  5249  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5250  000E46  0ED7               	movlw	low STR_42
  5251  000E48  0100               	movlb	0	; () banked
  5252  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5253  000E4C  0EFF               	movlw	high STR_42
  5254  000E4E  0100               	movlb	0	; () banked
  5255  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5256  000E52  EC2E  F012         	call	_strcpy	;wreg free
  5257                           
  5258                           ;RTC.c: 90: break;
  5259  000E56  D07A               	goto	l4419
  5260  000E58                     l4405:
  5261                           
  5262                           ;RTC.c: 92: strcpy(month, "Aug");
  5263  000E58  0EBE               	movlw	low printRTC@month
  5264  000E5A  0100               	movlb	0	; () banked
  5265  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5266  000E5E  0E00               	movlw	high printRTC@month
  5267  000E60  0100               	movlb	0	; () banked
  5268  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5269  000E64  0ED3               	movlw	low STR_43
  5270  000E66  0100               	movlb	0	; () banked
  5271  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5272  000E6A  0EFF               	movlw	high STR_43
  5273  000E6C  0100               	movlb	0	; () banked
  5274  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5275  000E70  EC2E  F012         	call	_strcpy	;wreg free
  5276                           
  5277                           ;RTC.c: 93: break;
  5278  000E74  D06B               	goto	l4419
  5279  000E76                     l4407:
  5280                           
  5281                           ;RTC.c: 95: strcpy(month, "Sep");
  5282  000E76  0EBE               	movlw	low printRTC@month
  5283  000E78  0100               	movlb	0	; () banked
  5284  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5285  000E7C  0E00               	movlw	high printRTC@month
  5286  000E7E  0100               	movlb	0	; () banked
  5287  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5288  000E82  0EE3               	movlw	low STR_44
  5289  000E84  0100               	movlb	0	; () banked
  5290  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5291  000E88  0EFF               	movlw	high STR_44
  5292  000E8A  0100               	movlb	0	; () banked
  5293  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5294  000E8E  EC2E  F012         	call	_strcpy	;wreg free
  5295                           
  5296                           ;RTC.c: 96: break;
  5297  000E92  D05C               	goto	l4419
  5298  000E94                     l4409:
  5299                           
  5300                           ;RTC.c: 98: strcpy(month, "Oct");
  5301  000E94  0EBE               	movlw	low printRTC@month
  5302  000E96  0100               	movlb	0	; () banked
  5303  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5304  000E9A  0E00               	movlw	high printRTC@month
  5305  000E9C  0100               	movlb	0	; () banked
  5306  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5307  000EA0  0EEF               	movlw	low STR_45
  5308  000EA2  0100               	movlb	0	; () banked
  5309  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5310  000EA6  0EFF               	movlw	high STR_45
  5311  000EA8  0100               	movlb	0	; () banked
  5312  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5313  000EAC  EC2E  F012         	call	_strcpy	;wreg free
  5314                           
  5315                           ;RTC.c: 99: break;
  5316  000EB0  D04D               	goto	l4419
  5317  000EB2                     l4411:
  5318                           
  5319                           ;RTC.c: 101: strcpy(month, "Nov");
  5320  000EB2  0EBE               	movlw	low printRTC@month
  5321  000EB4  0100               	movlb	0	; () banked
  5322  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5323  000EB8  0E00               	movlw	high printRTC@month
  5324  000EBA  0100               	movlb	0	; () banked
  5325  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5326  000EBE  0EF3               	movlw	low STR_46
  5327  000EC0  0100               	movlb	0	; () banked
  5328  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5329  000EC4  0EFF               	movlw	high STR_46
  5330  000EC6  0100               	movlb	0	; () banked
  5331  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5332  000ECA  EC2E  F012         	call	_strcpy	;wreg free
  5333                           
  5334                           ;RTC.c: 102: break;
  5335  000ECE  D03E               	goto	l4419
  5336  000ED0                     l4413:
  5337                           
  5338                           ;RTC.c: 104: strcpy(month, "Dec");
  5339  000ED0  0EBE               	movlw	low printRTC@month
  5340  000ED2  0100               	movlb	0	; () banked
  5341  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5342  000ED6  0E00               	movlw	high printRTC@month
  5343  000ED8  0100               	movlb	0	; () banked
  5344  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5345  000EDC  0ECF               	movlw	low STR_47
  5346  000EDE  0100               	movlb	0	; () banked
  5347  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5348  000EE2  0EFF               	movlw	high STR_47
  5349  000EE4  0100               	movlb	0	; () banked
  5350  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5351  000EE8  EC2E  F012         	call	_strcpy	;wreg free
  5352                           
  5353                           ;RTC.c: 106: }
  5354                           
  5355                           ;RTC.c: 105: break;
  5356  000EEC  D02F               	goto	l4419
  5357  000EEE                     l4417:
  5358  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5359  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5360                           
  5361                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5362                           ; Switch size 1, requested type "space"
  5363                           ; Number of cases is 1, Range of values is 0 to 0
  5364                           ; switch strategies available:
  5365                           ; Name         Instructions Cycles
  5366                           ; simple_byte            4     3 (average)
  5367                           ;	Chosen strategy is simple_byte
  5368  000EF6  0100               	movlb	0	; () banked
  5369  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5370  000EFA  0A00               	xorlw	0	; case 0
  5371  000EFC  A4D8               	btfss	status,2,c
  5372  000EFE  D026               	goto	l4419
  5373                           
  5374                           ; BSR set to: 0
  5375                           ; Switch size 1, requested type "space"
  5376                           ; Number of cases is 12, Range of values is 1 to 12
  5377                           ; switch strategies available:
  5378                           ; Name         Instructions Cycles
  5379                           ; simple_byte           37    19 (average)
  5380                           ;	Chosen strategy is simple_byte
  5381  000F00  0100               	movlb	0	; () banked
  5382  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  5383  000F04  0A01               	xorlw	1	; case 1
  5384  000F06  B4D8               	btfsc	status,2,c
  5385  000F08  D73E               	goto	l4391
  5386  000F0A  0A03               	xorlw	3	; case 2
  5387  000F0C  B4D8               	btfsc	status,2,c
  5388  000F0E  D74A               	goto	l4393
  5389  000F10  0A01               	xorlw	1	; case 3
  5390  000F12  B4D8               	btfsc	status,2,c
  5391  000F14  D756               	goto	l4395
  5392  000F16  0A07               	xorlw	7	; case 4
  5393  000F18  B4D8               	btfsc	status,2,c
  5394  000F1A  D762               	goto	l4397
  5395  000F1C  0A01               	xorlw	1	; case 5
  5396  000F1E  B4D8               	btfsc	status,2,c
  5397  000F20  D76E               	goto	l4399
  5398  000F22  0A03               	xorlw	3	; case 6
  5399  000F24  B4D8               	btfsc	status,2,c
  5400  000F26  D77A               	goto	l4401
  5401  000F28  0A01               	xorlw	1	; case 7
  5402  000F2A  B4D8               	btfsc	status,2,c
  5403  000F2C  D786               	goto	l4403
  5404  000F2E  0A0F               	xorlw	15	; case 8
  5405  000F30  B4D8               	btfsc	status,2,c
  5406  000F32  D792               	goto	l4405
  5407  000F34  0A01               	xorlw	1	; case 9
  5408  000F36  B4D8               	btfsc	status,2,c
  5409  000F38  D79E               	goto	l4407
  5410  000F3A  0A03               	xorlw	3	; case 10
  5411  000F3C  B4D8               	btfsc	status,2,c
  5412  000F3E  D7AA               	goto	l4409
  5413  000F40  0A01               	xorlw	1	; case 11
  5414  000F42  B4D8               	btfsc	status,2,c
  5415  000F44  D7B6               	goto	l4411
  5416  000F46  0A07               	xorlw	7	; case 12
  5417  000F48  B4D8               	btfsc	status,2,c
  5418  000F4A  D7C2               	goto	l4413
  5419  000F4C                     l4419:
  5420                           
  5421                           ;RTC.c: 107: lcdInst(0b10000000);;
  5422  000F4C  0E80               	movlw	128
  5423  000F4E  EC76  F014         	call	_lcdInst
  5424                           
  5425                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5426  000F52  0ED0               	movlw	low STR_48
  5427  000F54  0100               	movlb	0	; () banked
  5428  000F56  6F8E               	movwf	printf@f& (0+255),b
  5429  000F58  0EFD               	movlw	high STR_48
  5430  000F5A  0100               	movlb	0	; () banked
  5431  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5432  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5433  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5434  000F66  0EBE               	movlw	low printRTC@month
  5435  000F68  0100               	movlb	0	; () banked
  5436  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  5437  000F6C  0E00               	movlw	high printRTC@month
  5438  000F6E  0100               	movlb	0	; () banked
  5439  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  5440  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5441  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5442  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5443  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5444  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5445  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  5446  000F8A  ECBB  F002         	call	_printf	;wreg free
  5447  000F8E  0012               	return		;funcret
  5448  000F90                     __end_of_printRTC:
  5449                           	opt stack 0
  5450                           tblptru	equ	0xFF8
  5451                           tblptrh	equ	0xFF7
  5452                           tblptrl	equ	0xFF6
  5453                           tablat	equ	0xFF5
  5454                           prodh	equ	0xFF4
  5455                           prodl	equ	0xFF3
  5456                           intcon	equ	0xFF2
  5457                           intcon3	equ	0xFF0
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           postdec1	equ	0xFE5
  5461                           fsr1l	equ	0xFE1
  5462                           indf2	equ	0xFDF
  5463                           postinc2	equ	0xFDE
  5464                           postdec2	equ	0xFDD
  5465                           fsr2h	equ	0xFDA
  5466                           fsr2l	equ	0xFD9
  5467                           status	equ	0xFD8
  5468                           
  5469 ;; *************** function _strcpy *****************
  5470 ;; Defined at:
  5471 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5474 ;;		 -> printRTC@month(4), 
  5475 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5476 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  5477 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  5478 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5481 ;;		 -> printRTC@month(4), 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  2    0[BANK0 ] PTR unsigned char 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5491 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;Total ram usage:        6 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    7
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_printRTC
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text20
  5506  00245C                     __ptext20:
  5507                           	opt stack 0
  5508  00245C                     _strcpy:
  5509                           	opt stack 20
  5510                           
  5511                           ;incstack = 0
  5512  00245C  C080  F084         	movff	strcpy@to,strcpy@cp
  5513  002460  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  5514  002464  D006               	goto	l4189
  5515  002466                     l4187:
  5516  002466  0100               	movlb	0	; () banked
  5517  002468  4B84               	infsnz	strcpy@cp& (0+255),f,b
  5518  00246A  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  5519  00246C  0100               	movlb	0	; () banked
  5520  00246E  4B82               	infsnz	strcpy@from& (0+255),f,b
  5521  002470  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  5522  002472                     l4189:
  5523  002472  C082  FFF6         	movff	strcpy@from,tblptrl
  5524  002476  C083  FFF7         	movff	strcpy@from+1,tblptrh
  5525  00247A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5526  00247A  6AF8               	clrf	tblptru,c
  5527  00247C                     	endif
  5528  00247C                     	if	0	;tblptru may be non-zero
  5529  00247C                     	endif
  5530  00247C  C084  FFD9         	movff	strcpy@cp,fsr2l
  5531  002480  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  5532  002484  0008               	tblrd		*
  5533  002486  CFF5 FFDF          	movff	tablat,indf2
  5534  00248A  50DF               	movf	indf2,w,c
  5535  00248C  B4D8               	btfsc	status,2,c
  5536  00248E  0012               	return	
  5537  002490  D7EA               	goto	l4187
  5538  002492                     __end_of_strcpy:
  5539                           	opt stack 0
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon	equ	0xFF2
  5547                           intcon3	equ	0xFF0
  5548                           postinc0	equ	0xFEE
  5549                           wreg	equ	0xFE8
  5550                           postdec1	equ	0xFE5
  5551                           fsr1l	equ	0xFE1
  5552                           indf2	equ	0xFDF
  5553                           postinc2	equ	0xFDE
  5554                           postdec2	equ	0xFDD
  5555                           fsr2h	equ	0xFDA
  5556                           fsr2l	equ	0xFD9
  5557                           status	equ	0xFD8
  5558                           
  5559 ;; *************** function _getRTC *****************
  5560 ;; Defined at:
  5561 ;;		line 42 in file "RTC.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;		None
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  i               2    3[BANK0 ] int 
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  1    wreg      void 
  5568 ;; Registers used:
  5569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;Total ram usage:        2 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    9
  5582 ;; This function calls:
  5583 ;;		_I2C_Master_Read
  5584 ;;		_I2C_Master_Start
  5585 ;;		_I2C_Master_Stop
  5586 ;;		_I2C_Master_Write
  5587 ;; This function is called by:
  5588 ;;		_printRTC
  5589 ;;		_initSortTimer
  5590 ;;		_getIR
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text21
  5595  001E98                     __ptext21:
  5596                           	opt stack 0
  5597  001E98                     _getRTC:
  5598                           	opt stack 18
  5599                           
  5600                           ;RTC.c: 46: I2C_Master_Start();
  5601                           
  5602                           ;incstack = 0
  5603  001E98  ECA2  F014         	call	_I2C_Master_Start	;wreg free
  5604                           
  5605                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
  5606  001E9C  0E00               	movlw	0
  5607  001E9E  0100               	movlb	0	; () banked
  5608  001EA0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5609  001EA2  0ED0               	movlw	208
  5610  001EA4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5611  001EA6  EC90  F014         	call	_I2C_Master_Write	;wreg free
  5612                           
  5613                           ;RTC.c: 48: I2C_Master_Write(0x00);
  5614  001EAA  0E00               	movlw	0
  5615  001EAC  0100               	movlb	0	; () banked
  5616  001EAE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5617  001EB0  0E00               	movlw	0
  5618  001EB2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5619  001EB4  EC90  F014         	call	_I2C_Master_Write	;wreg free
  5620                           
  5621                           ;RTC.c: 49: I2C_Master_Stop();
  5622  001EB8  EC9E  F014         	call	_I2C_Master_Stop	;wreg free
  5623                           
  5624                           ;RTC.c: 52: I2C_Master_Start();
  5625  001EBC  ECA2  F014         	call	_I2C_Master_Start	;wreg free
  5626                           
  5627                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
  5628  001EC0  0E00               	movlw	0
  5629  001EC2  0100               	movlb	0	; () banked
  5630  001EC4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5631  001EC6  0ED1               	movlw	209
  5632  001EC8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5633  001ECA  EC90  F014         	call	_I2C_Master_Write	;wreg free
  5634                           
  5635                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
  5636  001ECE  0E00               	movlw	0
  5637  001ED0  0100               	movlb	0	; () banked
  5638  001ED2  6F84               	movwf	(getRTC@i+1)& (0+255),b
  5639  001ED4  0E00               	movlw	0
  5640  001ED6  6F83               	movwf	getRTC@i& (0+255),b
  5641  001ED8                     l4173:
  5642                           
  5643                           ; BSR set to: 0
  5644  001ED8  0100               	movlb	0	; () banked
  5645  001EDA  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  5646  001EDC  D008               	goto	l4177
  5647  001EDE  0100               	movlb	0	; () banked
  5648  001EE0  5184               	movf	(getRTC@i+1)& (0+255),w,b
  5649  001EE2  E115               	bnz	l4183
  5650  001EE4  0E06               	movlw	6
  5651  001EE6  0100               	movlb	0	; () banked
  5652  001EE8  5D83               	subwf	getRTC@i& (0+255),w,b
  5653  001EEA  B0D8               	btfsc	status,0,c
  5654  001EEC  D010               	goto	l4183
  5655  001EEE                     l4177:
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
  5659  001EEE  0ED4               	movlw	low _time
  5660  001EF0  0100               	movlb	0	; () banked
  5661  001EF2  2583               	addwf	getRTC@i& (0+255),w,b
  5662  001EF4  6ED9               	movwf	fsr2l,c
  5663  001EF6  0E00               	movlw	high _time
  5664  001EF8  0100               	movlb	0	; () banked
  5665  001EFA  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  5666  001EFC  6EDA               	movwf	fsr2h,c
  5667  001EFE  0E01               	movlw	1
  5668  001F00  EC6C  F013         	call	_I2C_Master_Read
  5669  001F04  6EDF               	movwf	indf2,c
  5670  001F06  0100               	movlb	0	; () banked
  5671  001F08  4B83               	infsnz	getRTC@i& (0+255),f,b
  5672  001F0A  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  5673  001F0C  D7E5               	goto	l4173
  5674  001F0E                     l4183:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;RTC.c: 56: }
  5678                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
  5679  001F0E  0E00               	movlw	0
  5680  001F10  EC6C  F013         	call	_I2C_Master_Read
  5681  001F14  0100               	movlb	0	; () banked
  5682  001F16  6FDA               	movwf	(_time+6)& (0+255),b
  5683                           
  5684                           ;RTC.c: 58: I2C_Master_Stop();
  5685  001F18  EC9E  F014         	call	_I2C_Master_Stop	;wreg free
  5686  001F1C  0012               	return		;funcret
  5687  001F1E                     __end_of_getRTC:
  5688                           	opt stack 0
  5689                           tblptru	equ	0xFF8
  5690                           tblptrh	equ	0xFF7
  5691                           tblptrl	equ	0xFF6
  5692                           tablat	equ	0xFF5
  5693                           prodh	equ	0xFF4
  5694                           prodl	equ	0xFF3
  5695                           intcon	equ	0xFF2
  5696                           intcon3	equ	0xFF0
  5697                           postinc0	equ	0xFEE
  5698                           wreg	equ	0xFE8
  5699                           postdec1	equ	0xFE5
  5700                           fsr1l	equ	0xFE1
  5701                           indf2	equ	0xFDF
  5702                           postinc2	equ	0xFDE
  5703                           postdec2	equ	0xFDD
  5704                           fsr2h	equ	0xFDA
  5705                           fsr2l	equ	0xFD9
  5706                           status	equ	0xFD8
  5707                           
  5708 ;; *************** function _I2C_Master_Write *****************
  5709 ;; Defined at:
  5710 ;;		line 47 in file "I2C.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;  d               2    1[BANK0 ] unsigned int 
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;		None
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  1    wreg      void 
  5717 ;; Registers used:
  5718 ;;		wreg, status,2, status,0, cstack
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5724 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;Total ram usage:        2 bytes
  5729 ;; Hardware stack levels used:    1
  5730 ;; Hardware stack levels required when called:    8
  5731 ;; This function calls:
  5732 ;;		_I2C_Master_Wait
  5733 ;; This function is called by:
  5734 ;;		_loadRTC
  5735 ;;		_getRTC
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text22
  5740  002920                     __ptext22:
  5741                           	opt stack 0
  5742  002920                     _I2C_Master_Write:
  5743                           	opt stack 18
  5744                           
  5745                           ;I2C.c: 49: I2C_Master_Wait();
  5746                           
  5747                           ;incstack = 0
  5748  002920  EC48  F014         	call	_I2C_Master_Wait	;wreg free
  5749                           
  5750                           ;I2C.c: 50: SSPBUF = d;
  5751  002924  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5752  002928  0012               	return		;funcret
  5753  00292A                     __end_of_I2C_Master_Write:
  5754                           	opt stack 0
  5755                           tblptru	equ	0xFF8
  5756                           tblptrh	equ	0xFF7
  5757                           tblptrl	equ	0xFF6
  5758                           tablat	equ	0xFF5
  5759                           prodh	equ	0xFF4
  5760                           prodl	equ	0xFF3
  5761                           intcon	equ	0xFF2
  5762                           intcon3	equ	0xFF0
  5763                           postinc0	equ	0xFEE
  5764                           wreg	equ	0xFE8
  5765                           postdec1	equ	0xFE5
  5766                           fsr1l	equ	0xFE1
  5767                           indf2	equ	0xFDF
  5768                           postinc2	equ	0xFDE
  5769                           postdec2	equ	0xFDD
  5770                           fsr2h	equ	0xFDA
  5771                           fsr2l	equ	0xFD9
  5772                           status	equ	0xFD8
  5773                           
  5774 ;; *************** function _I2C_Master_Stop *****************
  5775 ;; Defined at:
  5776 ;;		line 41 in file "I2C.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;		None
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;		None
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  1    wreg      void 
  5783 ;; Registers used:
  5784 ;;		wreg, status,2, status,0, cstack
  5785 ;; Tracked objects:
  5786 ;;		On entry : 0/0
  5787 ;;		On exit  : 0/0
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;Total ram usage:        0 bytes
  5795 ;; Hardware stack levels used:    1
  5796 ;; Hardware stack levels required when called:    8
  5797 ;; This function calls:
  5798 ;;		_I2C_Master_Wait
  5799 ;; This function is called by:
  5800 ;;		_loadRTC
  5801 ;;		_getRTC
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           	psect	text23
  5806  00293C                     __ptext23:
  5807                           	opt stack 0
  5808  00293C                     _I2C_Master_Stop:
  5809                           	opt stack 18
  5810                           
  5811                           ;I2C.c: 43: I2C_Master_Wait();
  5812                           
  5813                           ;incstack = 0
  5814  00293C  EC48  F014         	call	_I2C_Master_Wait	;wreg free
  5815                           
  5816                           ;I2C.c: 44: PEN = 1;
  5817  002940  84C5               	bsf	4037,2,c	;volatile
  5818  002942  0012               	return		;funcret
  5819  002944                     __end_of_I2C_Master_Stop:
  5820                           	opt stack 0
  5821                           tblptru	equ	0xFF8
  5822                           tblptrh	equ	0xFF7
  5823                           tblptrl	equ	0xFF6
  5824                           tablat	equ	0xFF5
  5825                           prodh	equ	0xFF4
  5826                           prodl	equ	0xFF3
  5827                           intcon	equ	0xFF2
  5828                           intcon3	equ	0xFF0
  5829                           postinc0	equ	0xFEE
  5830                           wreg	equ	0xFE8
  5831                           postdec1	equ	0xFE5
  5832                           fsr1l	equ	0xFE1
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           postdec2	equ	0xFDD
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function _I2C_Master_Start *****************
  5841 ;; Defined at:
  5842 ;;		line 29 in file "I2C.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;		None
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  1    wreg      void 
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;Total ram usage:        0 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    8
  5863 ;; This function calls:
  5864 ;;		_I2C_Master_Wait
  5865 ;; This function is called by:
  5866 ;;		_loadRTC
  5867 ;;		_getRTC
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text24
  5872  002944                     __ptext24:
  5873                           	opt stack 0
  5874  002944                     _I2C_Master_Start:
  5875                           	opt stack 18
  5876                           
  5877                           ;I2C.c: 31: I2C_Master_Wait();
  5878                           
  5879                           ;incstack = 0
  5880  002944  EC48  F014         	call	_I2C_Master_Wait	;wreg free
  5881                           
  5882                           ;I2C.c: 32: SEN = 1;
  5883  002948  80C5               	bsf	4037,0,c	;volatile
  5884  00294A  0012               	return		;funcret
  5885  00294C                     __end_of_I2C_Master_Start:
  5886                           	opt stack 0
  5887                           tblptru	equ	0xFF8
  5888                           tblptrh	equ	0xFF7
  5889                           tblptrl	equ	0xFF6
  5890                           tablat	equ	0xFF5
  5891                           prodh	equ	0xFF4
  5892                           prodl	equ	0xFF3
  5893                           intcon	equ	0xFF2
  5894                           intcon3	equ	0xFF0
  5895                           postinc0	equ	0xFEE
  5896                           wreg	equ	0xFE8
  5897                           postdec1	equ	0xFE5
  5898                           fsr1l	equ	0xFE1
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           postdec2	equ	0xFDD
  5902                           fsr2h	equ	0xFDA
  5903                           fsr2l	equ	0xFD9
  5904                           status	equ	0xFD8
  5905                           
  5906 ;; *************** function _I2C_Master_Read *****************
  5907 ;; Defined at:
  5908 ;;		line 53 in file "I2C.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  a               1    wreg     unsigned char 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  a               1    1[BANK0 ] unsigned char 
  5913 ;;  temp            1    2[BANK0 ] unsigned char 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  1    wreg      unsigned char 
  5916 ;; Registers used:
  5917 ;;		wreg, status,2, status,0, cstack
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5927 ;;Total ram usage:        2 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    8
  5930 ;; This function calls:
  5931 ;;		_I2C_Master_Wait
  5932 ;; This function is called by:
  5933 ;;		_getRTC
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text25
  5938  0026D8                     __ptext25:
  5939                           	opt stack 0
  5940  0026D8                     _I2C_Master_Read:
  5941                           	opt stack 18
  5942                           
  5943                           ;incstack = 0
  5944                           ;I2C_Master_Read@a stored from wreg
  5945  0026D8  0100               	movlb	0	; () banked
  5946  0026DA  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  5947                           
  5948                           ;I2C.c: 55: unsigned char temp;
  5949                           ;I2C.c: 56: I2C_Master_Wait();
  5950  0026DC  EC48  F014         	call	_I2C_Master_Wait	;wreg free
  5951                           
  5952                           ;I2C.c: 57: RCEN = 1;
  5953  0026E0  86C5               	bsf	4037,3,c	;volatile
  5954                           
  5955                           ;I2C.c: 58: I2C_Master_Wait();
  5956  0026E2  EC48  F014         	call	_I2C_Master_Wait	;wreg free
  5957                           
  5958                           ;I2C.c: 59: temp = SSPBUF;
  5959  0026E6  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  5960                           
  5961                           ;I2C.c: 60: I2C_Master_Wait();
  5962  0026EA  EC48  F014         	call	_I2C_Master_Wait	;wreg free
  5963                           
  5964                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5965  0026EE  0100               	movlb	0	; () banked
  5966  0026F0  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  5967  0026F2  0100               	movlb	0	; () banked
  5968  0026F4  A4D8               	btfss	status,2,c
  5969  0026F6  D002               	goto	u2350
  5970  0026F8  8AC5               	bsf	4037,5,c	;volatile
  5971  0026FA  D001               	goto	l3885
  5972  0026FC                     u2350:
  5973  0026FC  9AC5               	bcf	4037,5,c	;volatile
  5974  0026FE                     l3885:
  5975                           
  5976                           ;I2C.c: 62: ACKEN = 1;
  5977  0026FE  88C5               	bsf	4037,4,c	;volatile
  5978                           
  5979                           ;I2C.c: 63: return temp;
  5980  002700  0100               	movlb	0	; () banked
  5981  002702  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  5982  002704  0012               	return	
  5983  002706                     __end_of_I2C_Master_Read:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           prodh	equ	0xFF4
  5990                           prodl	equ	0xFF3
  5991                           intcon	equ	0xFF2
  5992                           intcon3	equ	0xFF0
  5993                           postinc0	equ	0xFEE
  5994                           wreg	equ	0xFE8
  5995                           postdec1	equ	0xFE5
  5996                           fsr1l	equ	0xFE1
  5997                           indf2	equ	0xFDF
  5998                           postinc2	equ	0xFDE
  5999                           postdec2	equ	0xFDD
  6000                           fsr2h	equ	0xFDA
  6001                           fsr2l	equ	0xFD9
  6002                           status	equ	0xFD8
  6003                           
  6004 ;; *************** function _I2C_Master_Wait *****************
  6005 ;; Defined at:
  6006 ;;		line 24 in file "I2C.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;		None
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;		None
  6011 ;; Return value:  Size  Location     Type
  6012 ;;                  1    wreg      void 
  6013 ;; Registers used:
  6014 ;;		wreg, status,2, status,0
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;Total ram usage:        1 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    7
  6027 ;; This function calls:
  6028 ;;		Nothing
  6029 ;; This function is called by:
  6030 ;;		_I2C_Master_Start
  6031 ;;		_I2C_Master_Stop
  6032 ;;		_I2C_Master_Write
  6033 ;;		_I2C_Master_Read
  6034 ;;		_I2C_Master_RepeatedStart
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           	psect	text26
  6039  002890                     __ptext26:
  6040                           	opt stack 0
  6041  002890                     _I2C_Master_Wait:
  6042                           	opt stack 18
  6043  002890                     l138:
  6044  002890  B4C7               	btfsc	4039,2,c	;volatile
  6045  002892  D7FE               	goto	l138
  6046  002894  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6047  002898  0E1F               	movlw	31
  6048  00289A  0100               	movlb	0	; () banked
  6049  00289C  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6050  00289E  B4D8               	btfsc	status,2,c
  6051  0028A0  0012               	return	
  6052  0028A2  D7F6               	goto	l138
  6053  0028A4                     __end_of_I2C_Master_Wait:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           intcon	equ	0xFF2
  6062                           intcon3	equ	0xFF0
  6063                           postinc0	equ	0xFEE
  6064                           wreg	equ	0xFE8
  6065                           postdec1	equ	0xFE5
  6066                           fsr1l	equ	0xFE1
  6067                           indf2	equ	0xFDF
  6068                           postinc2	equ	0xFDE
  6069                           postdec2	equ	0xFDD
  6070                           fsr2h	equ	0xFDA
  6071                           fsr2l	equ	0xFD9
  6072                           status	equ	0xFD8
  6073                           
  6074 ;; *************** function _change_state_to_menu_22 *****************
  6075 ;; Defined at:
  6076 ;;		line 439 in file "UI.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;		None
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;		None
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      void 
  6083 ;; Registers used:
  6084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;Total ram usage:        0 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:   10
  6097 ;; This function calls:
  6098 ;;		_lcdInst
  6099 ;;		_printf
  6100 ;; This function is called by:
  6101 ;;		_UI
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text27
  6106  0023EC                     __ptext27:
  6107                           	opt stack 0
  6108  0023EC                     _change_state_to_menu_22:
  6109                           	opt stack 19
  6110                           
  6111                           ;UI.c: 440: cur_state = 22;
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;incstack = 0
  6115  0023EC  0E00               	movlw	0
  6116  0023EE  0100               	movlb	0	; () banked
  6117  0023F0  6FE0               	movwf	(_cur_state+1)& (0+255),b
  6118  0023F2  0E16               	movlw	22
  6119  0023F4  6FDF               	movwf	_cur_state& (0+255),b
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;UI.c: 442: lcdInst(0b10000000);;
  6123  0023F6  0E80               	movlw	128
  6124  0023F8  EC76  F014         	call	_lcdInst
  6125                           
  6126                           ;UI.c: 443: printf("2. SORT        <");
  6127  0023FC  0E64               	movlw	low STR_19
  6128  0023FE  0100               	movlb	0	; () banked
  6129  002400  6F8E               	movwf	printf@f& (0+255),b
  6130  002402  0EFF               	movlw	high STR_19
  6131  002404  0100               	movlb	0	; () banked
  6132  002406  6F8F               	movwf	(printf@f+1)& (0+255),b
  6133  002408  ECBB  F002         	call	_printf	;wreg free
  6134                           
  6135                           ;UI.c: 444: lcdInst(0b11000000);;
  6136  00240C  0EC0               	movlw	192
  6137  00240E  EC76  F014         	call	_lcdInst
  6138                           
  6139                           ;UI.c: 445: printf("3. LOGS         ");
  6140  002412  0E65               	movlw	low STR_21
  6141  002414  0100               	movlb	0	; () banked
  6142  002416  6F8E               	movwf	printf@f& (0+255),b
  6143  002418  0EFE               	movlw	high STR_21
  6144  00241A  0100               	movlb	0	; () banked
  6145  00241C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6146  00241E  ECBB  F002         	call	_printf	;wreg free
  6147  002422  0012               	return		;funcret
  6148  002424                     __end_of_change_state_to_menu_22:
  6149                           	opt stack 0
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           intcon	equ	0xFF2
  6157                           intcon3	equ	0xFF0
  6158                           postinc0	equ	0xFEE
  6159                           wreg	equ	0xFE8
  6160                           postdec1	equ	0xFE5
  6161                           fsr1l	equ	0xFE1
  6162                           indf2	equ	0xFDF
  6163                           postinc2	equ	0xFDE
  6164                           postdec2	equ	0xFDD
  6165                           fsr2h	equ	0xFDA
  6166                           fsr2l	equ	0xFD9
  6167                           status	equ	0xFD8
  6168                           
  6169 ;; *************** function _change_state_to_menu_12 *****************
  6170 ;; Defined at:
  6171 ;;		line 431 in file "UI.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;		None
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;		None
  6176 ;; Return value:  Size  Location     Type
  6177 ;;                  1    wreg      void 
  6178 ;; Registers used:
  6179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;Total ram usage:        0 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; Hardware stack levels required when called:   10
  6192 ;; This function calls:
  6193 ;;		_lcdInst
  6194 ;;		_printf
  6195 ;; This function is called by:
  6196 ;;		_UI
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text28
  6201  002424                     __ptext28:
  6202                           	opt stack 0
  6203  002424                     _change_state_to_menu_12:
  6204                           	opt stack 19
  6205                           
  6206                           ;UI.c: 432: cur_state = 12;
  6207                           
  6208                           ;incstack = 0
  6209  002424  0E00               	movlw	0
  6210  002426  0100               	movlb	0	; () banked
  6211  002428  6FE0               	movwf	(_cur_state+1)& (0+255),b
  6212  00242A  0E0C               	movlw	12
  6213  00242C  6FDF               	movwf	_cur_state& (0+255),b
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;UI.c: 434: lcdInst(0b10000000);;
  6217  00242E  0E80               	movlw	128
  6218  002430  EC76  F014         	call	_lcdInst
  6219                           
  6220                           ;UI.c: 435: printf("1. DATE/TIME    ");
  6221  002434  0E87               	movlw	low STR_18
  6222  002436  0100               	movlb	0	; () banked
  6223  002438  6F8E               	movwf	printf@f& (0+255),b
  6224  00243A  0EFE               	movlw	high STR_18
  6225  00243C  0100               	movlb	0	; () banked
  6226  00243E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6227  002440  ECBB  F002         	call	_printf	;wreg free
  6228                           
  6229                           ;UI.c: 436: lcdInst(0b11000000);;
  6230  002444  0EC0               	movlw	192
  6231  002446  EC76  F014         	call	_lcdInst
  6232                           
  6233                           ;UI.c: 437: printf("2. SORT        <");
  6234  00244A  0E64               	movlw	low STR_19
  6235  00244C  0100               	movlb	0	; () banked
  6236  00244E  6F8E               	movwf	printf@f& (0+255),b
  6237  002450  0EFF               	movlw	high STR_19
  6238  002452  0100               	movlb	0	; () banked
  6239  002454  6F8F               	movwf	(printf@f+1)& (0+255),b
  6240  002456  ECBB  F002         	call	_printf	;wreg free
  6241  00245A  0012               	return		;funcret
  6242  00245C                     __end_of_change_state_to_menu_12:
  6243                           	opt stack 0
  6244                           tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           prodh	equ	0xFF4
  6249                           prodl	equ	0xFF3
  6250                           intcon	equ	0xFF2
  6251                           intcon3	equ	0xFF0
  6252                           postinc0	equ	0xFEE
  6253                           wreg	equ	0xFE8
  6254                           postdec1	equ	0xFE5
  6255                           fsr1l	equ	0xFE1
  6256                           indf2	equ	0xFDF
  6257                           postinc2	equ	0xFDE
  6258                           postdec2	equ	0xFDD
  6259                           fsr2h	equ	0xFDA
  6260                           fsr2l	equ	0xFD9
  6261                           status	equ	0xFD8
  6262                           
  6263 ;; *************** function _printf *****************
  6264 ;; Defined at:
  6265 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6268 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  6269 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  6270 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  6271 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  6272 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  6273 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  6274 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  6275 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  6276 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  6277 ;;		 -> STR_2(21), STR_1(17), 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  tmpval          4    0        struct .
  6280 ;;  width           2   41[BANK0 ] int 
  6281 ;;  len             2   37[BANK0 ] unsigned int 
  6282 ;;  val             2   35[BANK0 ] unsigned int 
  6283 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6284 ;;		 -> STR_51(7), printRTC@month(4), 
  6285 ;;  ap              2   31[BANK0 ] PTR void [1]
  6286 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6287 ;;  c               1   40[BANK0 ] char 
  6288 ;;  flag            1   39[BANK0 ] unsigned char 
  6289 ;;  prec            1   30[BANK0 ] char 
  6290 ;; Return value:  Size  Location     Type
  6291 ;;                  2   14[BANK0 ] int 
  6292 ;; Registers used:
  6293 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6299 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;Total ram usage:       29 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; Hardware stack levels required when called:    9
  6306 ;; This function calls:
  6307 ;;		___lwdiv
  6308 ;;		___lwmod
  6309 ;;		___wmul
  6310 ;;		_isdigit
  6311 ;;		_putch
  6312 ;; This function is called by:
  6313 ;;		_UI
  6314 ;;		_change_state_to_menu_start
  6315 ;;		_change_state_to_menu_12
  6316 ;;		_change_state_to_menu_22
  6317 ;;		_printRTC
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321                           	psect	text29
  6322  000576                     __ptext29:
  6323                           	opt stack 0
  6324  000576                     _printf:
  6325                           	opt stack 19
  6326                           
  6327                           ;doprnt.c: 466: va_list ap;
  6328                           ;doprnt.c: 499: signed char c;
  6329                           ;doprnt.c: 501: int width;
  6330                           ;doprnt.c: 506: signed char prec;
  6331                           ;doprnt.c: 508: unsigned char flag;
  6332                           ;doprnt.c: 523: union {
  6333                           ;doprnt.c: 524: unsigned long vd;
  6334                           ;doprnt.c: 525: double integ;
  6335                           ;doprnt.c: 526: } tmpval;
  6336                           ;doprnt.c: 528: unsigned int val;
  6337                           ;doprnt.c: 529: unsigned len;
  6338                           ;doprnt.c: 530: const char * cp;
  6339                           ;doprnt.c: 533: *ap = __va_start();
  6340                           
  6341                           ;incstack = 0
  6342  000576  0E90               	movlw	low (?_printf+2)
  6343  000578  0100               	movlb	0	; () banked
  6344  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6345  00057C  0E00               	movlw	high (?_printf+2)
  6346  00057E  0100               	movlb	0	; () banked
  6347  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6348                           
  6349                           ;doprnt.c: 536: while(c = *f++) {
  6350  000582  D1EE               	goto	l4167
  6351  000584                     l4043:
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;doprnt.c: 538: if(c != '%')
  6355  000584  0E25               	movlw	37
  6356  000586  0100               	movlb	0	; () banked
  6357  000588  19A8               	xorwf	printf@c& (0+255),w,b
  6358  00058A  B4D8               	btfsc	status,2,c
  6359  00058C  D005               	goto	l4047
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;doprnt.c: 540: {
  6363                           ;doprnt.c: 541: (putch(c) );
  6364  00058E  0100               	movlb	0	; () banked
  6365  000590  51A8               	movf	printf@c& (0+255),w,b
  6366  000592  EC6E  F014         	call	_putch
  6367                           
  6368                           ;doprnt.c: 542: continue;
  6369  000596  D1E4               	goto	l4167
  6370  000598                     l4047:
  6371                           
  6372                           ;doprnt.c: 543: }
  6373                           ;doprnt.c: 546: width = 0;
  6374  000598  0E00               	movlw	0
  6375  00059A  0100               	movlb	0	; () banked
  6376  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  6377  00059E  0E00               	movlw	0
  6378  0005A0  6FA9               	movwf	printf@width& (0+255),b
  6379                           
  6380                           ;doprnt.c: 548: flag = 0;
  6381  0005A2  0E00               	movlw	0
  6382  0005A4  0100               	movlb	0	; () banked
  6383  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;doprnt.c: 551: switch(*f) {
  6387                           
  6388                           ;doprnt.c: 550: for(;;) {
  6389  0005A8  D005               	goto	l4053
  6390  0005AA                     l4049:
  6391                           
  6392                           ;doprnt.c: 580: flag |= 0x04;
  6393  0005AA  0100               	movlb	0	; () banked
  6394  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  6395                           
  6396                           ;doprnt.c: 581: f++;
  6397  0005AE  0100               	movlb	0	; () banked
  6398  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  6399  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6400  0005B4                     l4053:
  6401  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  6402  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  6403  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6404  0005BC  6AF8               	clrf	tblptru,c
  6405  0005BE                     	endif
  6406  0005BE                     	if	0	;tblptru may be non-zero
  6407  0005BE                     	endif
  6408  0005BE  0008               	tblrd		*
  6409  0005C0  50F5               	movf	tablat,w,c
  6410                           
  6411                           ; Switch size 1, requested type "space"
  6412                           ; Number of cases is 1, Range of values is 48 to 48
  6413                           ; switch strategies available:
  6414                           ; Name         Instructions Cycles
  6415                           ; simple_byte            4     3 (average)
  6416                           ;	Chosen strategy is simple_byte
  6417  0005C2  0A30               	xorlw	48	; case 48
  6418  0005C4  B4D8               	btfsc	status,2,c
  6419  0005C6  D7F1               	goto	l4049
  6420                           
  6421                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6422                           
  6423                           ;doprnt.c: 586: }
  6424                           
  6425                           ;doprnt.c: 585: break;
  6426  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  6427  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  6428  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6429  0005D0  6AF8               	clrf	tblptru,c
  6430  0005D2                     	endif
  6431  0005D2                     	if	0	;tblptru may be non-zero
  6432  0005D2                     	endif
  6433  0005D2  0008               	tblrd		*
  6434  0005D4  50F5               	movf	tablat,w,c
  6435  0005D6  ECB0  F013         	call	_isdigit
  6436  0005DA  A0D8               	btfss	status,0,c
  6437  0005DC  D0CF               	goto	l4099
  6438                           
  6439                           ;doprnt.c: 598: width = 0;
  6440  0005DE  0E00               	movlw	0
  6441  0005E0  0100               	movlb	0	; () banked
  6442  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  6443  0005E4  0E00               	movlw	0
  6444  0005E6  6FA9               	movwf	printf@width& (0+255),b
  6445  0005E8                     l4059:
  6446                           
  6447                           ;doprnt.c: 600: width *= 10;
  6448  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  6449  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  6450  0005F0  0E00               	movlw	0
  6451  0005F2  0100               	movlb	0	; () banked
  6452  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6453  0005F6  0E0A               	movlw	10
  6454  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6455  0005FA  EC49  F012         	call	___wmul	;wreg free
  6456  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  6457  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  6458                           
  6459                           ;doprnt.c: 601: width += *f++ - '0';
  6460  000606  0ED0               	movlw	208
  6461  000608  0100               	movlb	0	; () banked
  6462  00060A  6F9A               	movwf	??_printf& (0+255),b
  6463  00060C  0EFF               	movlw	255
  6464  00060E  0100               	movlb	0	; () banked
  6465  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  6466  000612  C08E  FFF6         	movff	printf@f,tblptrl
  6467  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  6468  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6469  00061A  6AF8               	clrf	tblptru,c
  6470  00061C                     	endif
  6471  00061C                     	if	0	;tblptru may be non-zero
  6472  00061C                     	endif
  6473  00061C  0008               	tblrd		*
  6474  00061E  50F5               	movf	tablat,w,c
  6475  000620  0100               	movlb	0	; () banked
  6476  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  6477  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  6478  000626  0100               	movlb	0	; () banked
  6479  000628  519A               	movf	??_printf& (0+255),w,b
  6480  00062A  0100               	movlb	0	; () banked
  6481  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  6482  00062E  0100               	movlb	0	; () banked
  6483  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  6484  000632  0100               	movlb	0	; () banked
  6485  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  6486  000636  0100               	movlb	0	; () banked
  6487  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  6488  00063A  0100               	movlb	0	; () banked
  6489  00063C  27A9               	addwf	printf@width& (0+255),f,b
  6490  00063E  0100               	movlb	0	; () banked
  6491  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  6492  000642  0100               	movlb	0	; () banked
  6493  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  6494                           
  6495                           ; BSR set to: 0
  6496  000646  0100               	movlb	0	; () banked
  6497  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  6498  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6502  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  6503  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  6504  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6505  000654  6AF8               	clrf	tblptru,c
  6506  000656                     	endif
  6507  000656                     	if	0	;tblptru may be non-zero
  6508  000656                     	endif
  6509  000656  0008               	tblrd		*
  6510  000658  50F5               	movf	tablat,w,c
  6511  00065A  ECB0  F013         	call	_isdigit
  6512  00065E  A0D8               	btfss	status,0,c
  6513  000660  D08D               	goto	l4099
  6514  000662  D7C2               	goto	l4059
  6515  000664                     l4067:
  6516                           
  6517                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6518  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  6519  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6520  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  6521  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  6522  000674  0E02               	movlw	2
  6523  000676  0100               	movlb	0	; () banked
  6524  000678  279F               	addwf	printf@ap& (0+255),f,b
  6525  00067A  0E00               	movlw	0
  6526  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6527                           
  6528                           ; BSR set to: 0
  6529                           ;doprnt.c: 740: if(!cp)
  6530  00067E  0100               	movlb	0	; () banked
  6531  000680  51A1               	movf	printf@cp& (0+255),w,b
  6532  000682  0100               	movlb	0	; () banked
  6533  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  6534  000686  A4D8               	btfss	status,2,c
  6535  000688  D006               	goto	l4075
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;doprnt.c: 741: cp = "(null)";
  6539  00068A  0EBD               	movlw	low STR_51
  6540  00068C  0100               	movlb	0	; () banked
  6541  00068E  6FA1               	movwf	printf@cp& (0+255),b
  6542  000690  0EFF               	movlw	high STR_51
  6543  000692  0100               	movlb	0	; () banked
  6544  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  6545  000696                     l4075:
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;doprnt.c: 745: len = 0;
  6549  000696  0E00               	movlw	0
  6550  000698  0100               	movlb	0	; () banked
  6551  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  6552  00069C  0E00               	movlw	0
  6553  00069E  6FA5               	movwf	printf@len& (0+255),b
  6554                           
  6555                           ;doprnt.c: 746: while(cp[len])
  6556  0006A0  D003               	goto	l4079
  6557  0006A2                     l4077:
  6558                           
  6559                           ;doprnt.c: 747: len++;
  6560  0006A2  0100               	movlb	0	; () banked
  6561  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  6562  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  6563  0006A8                     l4079:
  6564                           
  6565                           ; BSR set to: 0
  6566  0006A8  0100               	movlb	0	; () banked
  6567  0006AA  51A5               	movf	printf@len& (0+255),w,b
  6568  0006AC  0100               	movlb	0	; () banked
  6569  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  6570  0006B0  0100               	movlb	0	; () banked
  6571  0006B2  6F9A               	movwf	??_printf& (0+255),b
  6572  0006B4  0100               	movlb	0	; () banked
  6573  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  6574  0006B8  0100               	movlb	0	; () banked
  6575  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  6576  0006BC  0100               	movlb	0	; () banked
  6577  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  6578  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  6579  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  6580  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  6581  0006CA  6EF8               	movwf	tblptru,c
  6582  0006CC  0E0F               	movlw	(high __ramtop+-1)
  6583  0006CE  64F7               	cpfsgt	tblptrh,c
  6584  0006D0  D003               	bra	u2597
  6585  0006D2  0008               	tblrd		*
  6586  0006D4  50F5               	movf	tablat,w,c
  6587  0006D6  D005               	bra	u2590
  6588  0006D8                     u2597:
  6589  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  6590  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  6591  0006E0  50EF               	movf	indf0,w,c
  6592  0006E2                     u2590:
  6593  0006E2  0900               	iorlw	0
  6594  0006E4  A4D8               	btfss	status,2,c
  6595  0006E6  D7DD               	goto	l4077
  6596                           
  6597                           ;doprnt.c: 757: if(width > len)
  6598  0006E8  0100               	movlb	0	; () banked
  6599  0006EA  51A9               	movf	printf@width& (0+255),w,b
  6600  0006EC  0100               	movlb	0	; () banked
  6601  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  6602  0006F0  0100               	movlb	0	; () banked
  6603  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  6604  0006F4  0100               	movlb	0	; () banked
  6605  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  6606  0006F8  B0D8               	btfsc	status,0,c
  6607  0006FA  D009               	goto	l4085
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;doprnt.c: 758: width -= len;
  6611  0006FC  0100               	movlb	0	; () banked
  6612  0006FE  51A5               	movf	printf@len& (0+255),w,b
  6613  000700  0100               	movlb	0	; () banked
  6614  000702  5FA9               	subwf	printf@width& (0+255),f,b
  6615  000704  0100               	movlb	0	; () banked
  6616  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  6617  000708  0100               	movlb	0	; () banked
  6618  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6619  00070C  D009               	goto	l4089
  6620  00070E                     l4085:
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;doprnt.c: 759: else
  6624                           ;doprnt.c: 760: width = 0;
  6625  00070E  0E00               	movlw	0
  6626  000710  0100               	movlb	0	; () banked
  6627  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  6628  000714  0E00               	movlw	0
  6629  000716  6FA9               	movwf	printf@width& (0+255),b
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;doprnt.c: 764: while(width--)
  6633  000718  D003               	goto	l4089
  6634  00071A                     l4087:
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;doprnt.c: 765: (putch(' ') );
  6638  00071A  0E20               	movlw	32
  6639  00071C  EC6E  F014         	call	_putch
  6640  000720                     l4089:
  6641  000720  0100               	movlb	0	; () banked
  6642  000722  07A9               	decf	printf@width& (0+255),f,b
  6643  000724  A0D8               	btfss	status,0,c
  6644  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  6645  000728  0100               	movlb	0	; () banked
  6646  00072A  29A9               	incf	printf@width& (0+255),w,b
  6647  00072C  E1F6               	bnz	l4087
  6648  00072E  0100               	movlb	0	; () banked
  6649  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  6650  000732  B4D8               	btfsc	status,2,c
  6651  000734  D017               	goto	l4095
  6652  000736  D7F1               	goto	l4087
  6653  000738                     l4091:
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;doprnt.c: 768: (putch(*cp++) );
  6657  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  6658  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  6659  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  6660  000742  6EF8               	movwf	tblptru,c
  6661  000744  0E0F               	movlw	(high __ramtop+-1)
  6662  000746  64F7               	cpfsgt	tblptrh,c
  6663  000748  D003               	bra	u2637
  6664  00074A  0008               	tblrd		*
  6665  00074C  50F5               	movf	tablat,w,c
  6666  00074E  D005               	bra	u2630
  6667  000750                     u2637:
  6668  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  6669  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  6670  000758  50EF               	movf	indf0,w,c
  6671  00075A                     u2630:
  6672  00075A  EC6E  F014         	call	_putch
  6673  00075E  0100               	movlb	0	; () banked
  6674  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  6675  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  6676  000764                     l4095:
  6677                           
  6678                           ; BSR set to: 0
  6679  000764  0100               	movlb	0	; () banked
  6680  000766  07A5               	decf	printf@len& (0+255),f,b
  6681  000768  A0D8               	btfss	status,0,c
  6682  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  6683  00076C  0100               	movlb	0	; () banked
  6684  00076E  29A5               	incf	printf@len& (0+255),w,b
  6685  000770  E1E3               	bnz	l4091
  6686  000772  0100               	movlb	0	; () banked
  6687  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  6688  000776  B4D8               	btfsc	status,2,c
  6689  000778  D0F3               	goto	l4167
  6690  00077A  D7DE               	goto	l4091
  6691  00077C                     l4099:
  6692  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  6693  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  6694  000784  0100               	movlb	0	; () banked
  6695  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  6696  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6697  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6698  00078A  6AF8               	clrf	tblptru,c
  6699  00078C                     	endif
  6700  00078C                     	if	0	;tblptru may be non-zero
  6701  00078C                     	endif
  6702  00078C  0008               	tblrd		*
  6703  00078E  CFF5 F0A8          	movff	tablat,printf@c
  6704  000792  0100               	movlb	0	; () banked
  6705  000794  51A8               	movf	printf@c& (0+255),w,b
  6706                           
  6707                           ; Switch size 1, requested type "space"
  6708                           ; Number of cases is 4, Range of values is 0 to 115
  6709                           ; switch strategies available:
  6710                           ; Name         Instructions Cycles
  6711                           ; simple_byte           13     7 (average)
  6712                           ;	Chosen strategy is simple_byte
  6713  000796  0A00               	xorlw	0	; case 0
  6714  000798  B4D8               	btfsc	status,2,c
  6715  00079A  0012               	return	
  6716  00079C  0A64               	xorlw	100	; case 100
  6717  00079E  B4D8               	btfsc	status,2,c
  6718  0007A0  D007               	goto	l4101
  6719  0007A2  0A0D               	xorlw	13	; case 105
  6720  0007A4  B4D8               	btfsc	status,2,c
  6721  0007A6  D004               	goto	l4101
  6722  0007A8  0A1A               	xorlw	26	; case 115
  6723  0007AA  B4D8               	btfsc	status,2,c
  6724  0007AC  D75B               	goto	l4067
  6725  0007AE  D0D8               	goto	l4167
  6726  0007B0                     l4101:
  6727                           
  6728                           ;doprnt.c: 1253: {
  6729                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6730  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  6731  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6732  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  6733  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  6734  0007C0  0E02               	movlw	2
  6735  0007C2  0100               	movlb	0	; () banked
  6736  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  6737  0007C6  0E00               	movlw	0
  6738  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;doprnt.c: 1261: if((int)val < 0) {
  6742  0007CA  0100               	movlb	0	; () banked
  6743  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  6744  0007CE  D008               	goto	l4111
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;doprnt.c: 1262: flag |= 0x03;
  6748  0007D0  0E03               	movlw	3
  6749  0007D2  0100               	movlb	0	; () banked
  6750  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;doprnt.c: 1263: val = -val;
  6754  0007D6  0100               	movlb	0	; () banked
  6755  0007D8  6DA3               	negf	printf@val& (0+255),b
  6756  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  6757  0007DC  B0D8               	btfsc	status,0,c
  6758  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  6759  0007E0                     l4111:
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;doprnt.c: 1264: }
  6763                           ;doprnt.c: 1266: }
  6764                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6765  0007E0  0E01               	movlw	1
  6766  0007E2  0100               	movlb	0	; () banked
  6767  0007E4  6FA8               	movwf	printf@c& (0+255),b
  6768  0007E6                     l4113:
  6769                           
  6770                           ; BSR set to: 0
  6771  0007E6  0E05               	movlw	5
  6772  0007E8  0100               	movlb	0	; () banked
  6773  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  6774  0007EC  B4D8               	btfsc	status,2,c
  6775  0007EE  D019               	goto	l4125
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;doprnt.c: 1306: if(val < dpowers[c])
  6779                           
  6780                           ; BSR set to: 0
  6781                           
  6782                           ; BSR set to: 0
  6783  0007F0  0100               	movlb	0	; () banked
  6784  0007F2  51A8               	movf	printf@c& (0+255),w,b
  6785  0007F4  0D02               	mullw	2
  6786  0007F6  0EC6               	movlw	low _dpowers
  6787  0007F8  24F3               	addwf	prodl,w,c
  6788  0007FA  6EF6               	movwf	tblptrl,c
  6789  0007FC  0EFD               	movlw	high _dpowers
  6790  0007FE  20F4               	addwfc	prodh,w,c
  6791  000800  6EF7               	movwf	tblptrh,c
  6792  000802                     	if	1	;There are 3 active tblptr bytes
  6793  000802  6AF8               	clrf	tblptru,c
  6794  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  6795  000806  22F8               	addwfc	tblptru,f,c
  6796  000808                     	endif
  6797  000808  0009               	tblrd		*+
  6798  00080A  50F5               	movf	tablat,w,c
  6799  00080C  0100               	movlb	0	; () banked
  6800  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  6801  000810  0009               	tblrd		*+
  6802  000812  50F5               	movf	tablat,w,c
  6803  000814  0100               	movlb	0	; () banked
  6804  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  6805  000818  A0D8               	btfss	status,0,c
  6806  00081A  D003               	goto	l4125
  6807                           
  6808                           ; BSR set to: 0
  6809                           
  6810                           ; BSR set to: 0
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;doprnt.c: 1307: break;
  6814  00081C  0100               	movlb	0	; () banked
  6815  00081E  2BA8               	incf	printf@c& (0+255),f,b
  6816  000820  D7E2               	goto	l4113
  6817  000822                     l4125:
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6821  000822  0100               	movlb	0	; () banked
  6822  000824  51A9               	movf	printf@width& (0+255),w,b
  6823  000826  0100               	movlb	0	; () banked
  6824  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6825  00082A  B4D8               	btfsc	status,2,c
  6826  00082C  D00B               	goto	l4131
  6827                           
  6828                           ; BSR set to: 0
  6829  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  6830  000832  0E03               	movlw	3
  6831  000834  0100               	movlb	0	; () banked
  6832  000836  179A               	andwf	??_printf& (0+255),f,b
  6833  000838  B4D8               	btfsc	status,2,c
  6834  00083A  D004               	goto	l4131
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;doprnt.c: 1346: width--;
  6838  00083C  0100               	movlb	0	; () banked
  6839  00083E  07A9               	decf	printf@width& (0+255),f,b
  6840  000840  A0D8               	btfss	status,0,c
  6841  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  6842  000844                     l4131:
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;doprnt.c: 1381: if(width > c)
  6846  000844  0E80               	movlw	128
  6847  000846  0100               	movlb	0	; () banked
  6848  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  6849  00084A  0E7F               	movlw	127
  6850  00084C  0100               	movlb	0	; () banked
  6851  00084E  6F9A               	movwf	??_printf& (0+255),b
  6852  000850  0100               	movlb	0	; () banked
  6853  000852  51A9               	movf	printf@width& (0+255),w,b
  6854  000854  0100               	movlb	0	; () banked
  6855  000856  5DA8               	subwf	printf@c& (0+255),w,b
  6856  000858  0100               	movlb	0	; () banked
  6857  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  6858  00085C  0A80               	xorlw	128
  6859  00085E  0100               	movlb	0	; () banked
  6860  000860  599A               	subwfb	??_printf& (0+255),w,b
  6861  000862  B0D8               	btfsc	status,0,c
  6862  000864  D00B               	goto	l4135
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;doprnt.c: 1382: width -= c;
  6866  000866  0100               	movlb	0	; () banked
  6867  000868  51A8               	movf	printf@c& (0+255),w,b
  6868  00086A  0100               	movlb	0	; () banked
  6869  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  6870  00086E  0E00               	movlw	0
  6871  000870  0100               	movlb	0	; () banked
  6872  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  6873  000874  0EFF               	movlw	255
  6874  000876  0100               	movlb	0	; () banked
  6875  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6876  00087A  D005               	goto	l4137
  6877  00087C                     l4135:
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;doprnt.c: 1383: else
  6881                           ;doprnt.c: 1384: width = 0;
  6882  00087C  0E00               	movlw	0
  6883  00087E  0100               	movlb	0	; () banked
  6884  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  6885  000882  0E00               	movlw	0
  6886  000884  6FA9               	movwf	printf@width& (0+255),b
  6887  000886                     l4137:
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;doprnt.c: 1387: if(flag & 0x04) {
  6891  000886  0100               	movlb	0	; () banked
  6892  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  6893  00088A  D018               	goto	l4149
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;doprnt.c: 1392: if(flag & 0x03)
  6897  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  6898  000890  0E03               	movlw	3
  6899  000892  0100               	movlb	0	; () banked
  6900  000894  179A               	andwf	??_printf& (0+255),f,b
  6901  000896  B4D8               	btfsc	status,2,c
  6902  000898  D003               	goto	l4143
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;doprnt.c: 1393: (putch('-') );
  6906  00089A  0E2D               	movlw	45
  6907  00089C  EC6E  F014         	call	_putch
  6908  0008A0                     l4143:
  6909                           
  6910                           ;doprnt.c: 1415: if(width)
  6911  0008A0  0100               	movlb	0	; () banked
  6912  0008A2  51A9               	movf	printf@width& (0+255),w,b
  6913  0008A4  0100               	movlb	0	; () banked
  6914  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6915  0008A8  B4D8               	btfsc	status,2,c
  6916  0008AA  D025               	goto	l4159
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;doprnt.c: 1417: (putch('0') );
  6920                           
  6921                           ; BSR set to: 0
  6922                           
  6923                           ;doprnt.c: 1416: do
  6924  0008AC  0E30               	movlw	48
  6925  0008AE  EC6E  F014         	call	_putch
  6926                           
  6927                           ;doprnt.c: 1418: while(--width);
  6928  0008B2  0100               	movlb	0	; () banked
  6929  0008B4  07A9               	decf	printf@width& (0+255),f,b
  6930  0008B6  A0D8               	btfss	status,0,c
  6931  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  6932  0008BA  D7F2               	goto	l4143
  6933  0008BC                     l4149:
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;doprnt.c: 1422: {
  6937                           ;doprnt.c: 1424: if(width
  6938                           ;doprnt.c: 1428: )
  6939  0008BC  0100               	movlb	0	; () banked
  6940  0008BE  51A9               	movf	printf@width& (0+255),w,b
  6941  0008C0  0100               	movlb	0	; () banked
  6942  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6943  0008C4  B4D8               	btfsc	status,2,c
  6944  0008C6  D00D               	goto	l4155
  6945  0008C8                     l4151:
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;doprnt.c: 1430: (putch(' ') );
  6949  0008C8  0E20               	movlw	32
  6950  0008CA  EC6E  F014         	call	_putch
  6951                           
  6952                           ;doprnt.c: 1431: while(--width);
  6953  0008CE  0100               	movlb	0	; () banked
  6954  0008D0  07A9               	decf	printf@width& (0+255),f,b
  6955  0008D2  A0D8               	btfss	status,0,c
  6956  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  6957  0008D6  0100               	movlb	0	; () banked
  6958  0008D8  51A9               	movf	printf@width& (0+255),w,b
  6959  0008DA  0100               	movlb	0	; () banked
  6960  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6961  0008DE  A4D8               	btfss	status,2,c
  6962  0008E0  D7F3               	goto	l4151
  6963  0008E2                     l4155:
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;doprnt.c: 1438: if(flag & 0x03)
  6967  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  6968  0008E6  0E03               	movlw	3
  6969  0008E8  0100               	movlb	0	; () banked
  6970  0008EA  179A               	andwf	??_printf& (0+255),f,b
  6971  0008EC  B4D8               	btfsc	status,2,c
  6972  0008EE  D003               	goto	l4159
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;doprnt.c: 1439: (putch('-') );
  6976  0008F0  0E2D               	movlw	45
  6977  0008F2  EC6E  F014         	call	_putch
  6978  0008F6                     l4159:
  6979                           
  6980                           ;doprnt.c: 1469: }
  6981                           ;doprnt.c: 1472: prec = c;
  6982  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  6983                           
  6984                           ;doprnt.c: 1474: while(prec--) {
  6985  0008FA  D02C               	goto	l4165
  6986  0008FC                     l4161:
  6987                           
  6988                           ;doprnt.c: 1478: {
  6989                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6990  0008FC  0100               	movlb	0	; () banked
  6991  0008FE  519E               	movf	printf@prec& (0+255),w,b
  6992  000900  0D02               	mullw	2
  6993  000902  0EC6               	movlw	low _dpowers
  6994  000904  24F3               	addwf	prodl,w,c
  6995  000906  6EF6               	movwf	tblptrl,c
  6996  000908  0EFD               	movlw	high _dpowers
  6997  00090A  20F4               	addwfc	prodh,w,c
  6998  00090C  6EF7               	movwf	tblptrh,c
  6999  00090E                     	if	1	;There are 3 active tblptr bytes
  7000  00090E  6AF8               	clrf	tblptru,c
  7001  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  7002  000912  22F8               	addwfc	tblptru,f,c
  7003  000914                     	endif
  7004  000914  0009               	tblrd		*+
  7005  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7006  00091A  000A               	tblrd		*-
  7007  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7008  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  7009  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7010  000928  ECCE  F00F         	call	___lwdiv	;wreg free
  7011  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7012  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7013  000934  0E00               	movlw	0
  7014  000936  0100               	movlb	0	; () banked
  7015  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7016  00093A  0E0A               	movlw	10
  7017  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  7018  00093E  ECAE  F010         	call	___lwmod	;wreg free
  7019  000942  0100               	movlb	0	; () banked
  7020  000944  5187               	movf	?___lwmod& (0+255),w,b
  7021  000946  0F30               	addlw	48
  7022  000948  0100               	movlb	0	; () banked
  7023  00094A  6FA8               	movwf	printf@c& (0+255),b
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;doprnt.c: 1523: }
  7027                           ;doprnt.c: 1524: (putch(c) );
  7028  00094C  0100               	movlb	0	; () banked
  7029  00094E  51A8               	movf	printf@c& (0+255),w,b
  7030  000950  EC6E  F014         	call	_putch
  7031  000954                     l4165:
  7032  000954  0100               	movlb	0	; () banked
  7033  000956  079E               	decf	printf@prec& (0+255),f,b
  7034  000958  0100               	movlb	0	; () banked
  7035  00095A  299E               	incf	printf@prec& (0+255),w,b
  7036  00095C  A4D8               	btfss	status,2,c
  7037  00095E  D7CE               	goto	l4161
  7038  000960                     l4167:
  7039  000960  C08E  FFF6         	movff	printf@f,tblptrl
  7040  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  7041  000968  0100               	movlb	0	; () banked
  7042  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  7043  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7044  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7045  00096E  6AF8               	clrf	tblptru,c
  7046  000970                     	endif
  7047  000970                     	if	0	;tblptru may be non-zero
  7048  000970                     	endif
  7049  000970  0008               	tblrd		*
  7050  000972  CFF5 F0A8          	movff	tablat,printf@c
  7051  000976  0100               	movlb	0	; () banked
  7052  000978  51A8               	movf	printf@c& (0+255),w,b
  7053  00097A  B4D8               	btfsc	status,2,c
  7054  00097C  0012               	return	
  7055  00097E  D602               	goto	l4043
  7056  000980                     __end_of_printf:
  7057                           	opt stack 0
  7058                           tblptru	equ	0xFF8
  7059                           tblptrh	equ	0xFF7
  7060                           tblptrl	equ	0xFF6
  7061                           tablat	equ	0xFF5
  7062                           prodh	equ	0xFF4
  7063                           prodl	equ	0xFF3
  7064                           intcon	equ	0xFF2
  7065                           intcon3	equ	0xFF0
  7066                           indf0	equ	0xFEF
  7067                           postinc0	equ	0xFEE
  7068                           fsr0h	equ	0xFEA
  7069                           fsr0l	equ	0xFE9
  7070                           wreg	equ	0xFE8
  7071                           postdec1	equ	0xFE5
  7072                           fsr1l	equ	0xFE1
  7073                           indf2	equ	0xFDF
  7074                           postinc2	equ	0xFDE
  7075                           postdec2	equ	0xFDD
  7076                           fsr2h	equ	0xFDA
  7077                           fsr2l	equ	0xFD9
  7078                           status	equ	0xFD8
  7079                           
  7080 ;; *************** function _putch *****************
  7081 ;; Defined at:
  7082 ;;		line 18 in file "lcd.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;  data            1    wreg     unsigned char 
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;  data            1    2[BANK0 ] unsigned char 
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, status,2, status,0, cstack
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;Total ram usage:        1 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; Hardware stack levels required when called:    8
  7103 ;; This function calls:
  7104 ;;		_lcdNibble
  7105 ;; This function is called by:
  7106 ;;		_printf
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           	psect	text30
  7111  0028DC                     __ptext30:
  7112                           	opt stack 0
  7113  0028DC                     _putch:
  7114                           	opt stack 19
  7115                           
  7116                           ;incstack = 0
  7117                           ;putch@data stored from wreg
  7118  0028DC  0100               	movlb	0	; () banked
  7119  0028DE  6F82               	movwf	putch@data& (0+255),b
  7120                           
  7121                           ;lcd.c: 19: LATDbits.LATD2 = 1;
  7122  0028E0  848C               	bsf	3980,2,c	;volatile
  7123                           
  7124                           ;lcd.c: 20: lcdNibble(data);
  7125  0028E2  0100               	movlb	0	; () banked
  7126  0028E4  5182               	movf	putch@data& (0+255),w,b
  7127  0028E6  EC7A  F010         	call	_lcdNibble
  7128  0028EA  0012               	return		;funcret
  7129  0028EC                     __end_of_putch:
  7130                           	opt stack 0
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           intcon	equ	0xFF2
  7138                           intcon3	equ	0xFF0
  7139                           indf0	equ	0xFEF
  7140                           postinc0	equ	0xFEE
  7141                           fsr0h	equ	0xFEA
  7142                           fsr0l	equ	0xFE9
  7143                           wreg	equ	0xFE8
  7144                           postdec1	equ	0xFE5
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           postinc2	equ	0xFDE
  7148                           postdec2	equ	0xFDD
  7149                           fsr2h	equ	0xFDA
  7150                           fsr2l	equ	0xFD9
  7151                           status	equ	0xFD8
  7152                           
  7153 ;; *************** function _isdigit *****************
  7154 ;; Defined at:
  7155 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;  c               1    wreg     unsigned char 
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;  c               1    2[BANK0 ] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;		None               void
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;Total ram usage:        3 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    7
  7176 ;; This function calls:
  7177 ;;		Nothing
  7178 ;; This function is called by:
  7179 ;;		_printf
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           	psect	text31
  7184  002760                     __ptext31:
  7185                           	opt stack 0
  7186  002760                     _isdigit:
  7187                           	opt stack 20
  7188                           
  7189                           ;incstack = 0
  7190                           ;isdigit@c stored from wreg
  7191  002760  0100               	movlb	0	; () banked
  7192  002762  6F82               	movwf	isdigit@c& (0+255),b
  7193  002764  0E00               	movlw	0
  7194  002766  0100               	movlb	0	; () banked
  7195  002768  6F81               	movwf	_isdigit$1698& (0+255),b
  7196                           
  7197                           ; BSR set to: 0
  7198  00276A  0E3A               	movlw	58
  7199  00276C  0100               	movlb	0	; () banked
  7200  00276E  6182               	cpfslt	isdigit@c& (0+255),b
  7201  002770  D007               	goto	l3903
  7202                           
  7203                           ; BSR set to: 0
  7204  002772  0E2F               	movlw	47
  7205  002774  0100               	movlb	0	; () banked
  7206  002776  6582               	cpfsgt	isdigit@c& (0+255),b
  7207  002778  D003               	goto	l3903
  7208                           
  7209                           ; BSR set to: 0
  7210  00277A  0E01               	movlw	1
  7211  00277C  0100               	movlb	0	; () banked
  7212  00277E  6F81               	movwf	_isdigit$1698& (0+255),b
  7213  002780                     l3903:
  7214                           
  7215                           ; BSR set to: 0
  7216  002780  C081  F080         	movff	_isdigit$1698,??_isdigit
  7217  002784  0100               	movlb	0	; () banked
  7218  002786  3180               	rrcf	??_isdigit& (0+255),w,b
  7219  002788  0012               	return	
  7220  00278A                     __end_of_isdigit:
  7221                           	opt stack 0
  7222                           tblptru	equ	0xFF8
  7223                           tblptrh	equ	0xFF7
  7224                           tblptrl	equ	0xFF6
  7225                           tablat	equ	0xFF5
  7226                           prodh	equ	0xFF4
  7227                           prodl	equ	0xFF3
  7228                           intcon	equ	0xFF2
  7229                           intcon3	equ	0xFF0
  7230                           indf0	equ	0xFEF
  7231                           postinc0	equ	0xFEE
  7232                           fsr0h	equ	0xFEA
  7233                           fsr0l	equ	0xFE9
  7234                           wreg	equ	0xFE8
  7235                           postdec1	equ	0xFE5
  7236                           fsr1l	equ	0xFE1
  7237                           indf2	equ	0xFDF
  7238                           postinc2	equ	0xFDE
  7239                           postdec2	equ	0xFDD
  7240                           fsr2h	equ	0xFDA
  7241                           fsr2l	equ	0xFD9
  7242                           status	equ	0xFD8
  7243                           
  7244 ;; *************** function ___wmul *****************
  7245 ;; Defined at:
  7246 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7247 ;; Parameters:    Size  Location     Type
  7248 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7249 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;  product         2    4[BANK0 ] unsigned int 
  7252 ;; Return value:  Size  Location     Type
  7253 ;;                  2    0[BANK0 ] unsigned int 
  7254 ;; Registers used:
  7255 ;;		wreg, status,2, status,0, prodl, prodh
  7256 ;; Tracked objects:
  7257 ;;		On entry : 0/0
  7258 ;;		On exit  : 0/0
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7261 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7262 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7265 ;;Total ram usage:        6 bytes
  7266 ;; Hardware stack levels used:    1
  7267 ;; Hardware stack levels required when called:    7
  7268 ;; This function calls:
  7269 ;;		Nothing
  7270 ;; This function is called by:
  7271 ;;		_printf
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           	psect	text32
  7276  002492                     __ptext32:
  7277                           	opt stack 0
  7278  002492                     ___wmul:
  7279                           	opt stack 20
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;incstack = 0
  7283  002492  0100               	movlb	0	; () banked
  7284  002494  5180               	movf	___wmul@multiplier& (0+255),w,b
  7285  002496  0100               	movlb	0	; () banked
  7286  002498  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7287  00249A  CFF3 F084          	movff	prodl,___wmul@product
  7288  00249E  CFF4 F085          	movff	prodh,___wmul@product+1
  7289  0024A2  0100               	movlb	0	; () banked
  7290  0024A4  5180               	movf	___wmul@multiplier& (0+255),w,b
  7291  0024A6  0100               	movlb	0	; () banked
  7292  0024A8  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7293  0024AA  50F3               	movf	prodl,w,c
  7294  0024AC  0100               	movlb	0	; () banked
  7295  0024AE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7296  0024B0  0100               	movlb	0	; () banked
  7297  0024B2  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7298  0024B4  0100               	movlb	0	; () banked
  7299  0024B6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7300  0024B8  50F3               	movf	prodl,w,c
  7301  0024BA  0100               	movlb	0	; () banked
  7302  0024BC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7303                           
  7304                           ; BSR set to: 0
  7305  0024BE  C084  F080         	movff	___wmul@product,?___wmul
  7306  0024C2  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7307  0024C6  0012               	return	
  7308  0024C8                     __end_of___wmul:
  7309                           	opt stack 0
  7310                           tblptru	equ	0xFF8
  7311                           tblptrh	equ	0xFF7
  7312                           tblptrl	equ	0xFF6
  7313                           tablat	equ	0xFF5
  7314                           prodh	equ	0xFF4
  7315                           prodl	equ	0xFF3
  7316                           intcon	equ	0xFF2
  7317                           intcon3	equ	0xFF0
  7318                           indf0	equ	0xFEF
  7319                           postinc0	equ	0xFEE
  7320                           fsr0h	equ	0xFEA
  7321                           fsr0l	equ	0xFE9
  7322                           wreg	equ	0xFE8
  7323                           postdec1	equ	0xFE5
  7324                           fsr1l	equ	0xFE1
  7325                           indf2	equ	0xFDF
  7326                           postinc2	equ	0xFDE
  7327                           postdec2	equ	0xFDD
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332 ;; *************** function ___lwmod *****************
  7333 ;; Defined at:
  7334 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  dividend        2    7[BANK0 ] unsigned int 
  7337 ;;  divisor         2    9[BANK0 ] unsigned int 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  counter         1   11[BANK0 ] unsigned char 
  7340 ;; Return value:  Size  Location     Type
  7341 ;;                  2    7[BANK0 ] unsigned int 
  7342 ;; Registers used:
  7343 ;;		wreg, status,2, status,0
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;Total ram usage:        5 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    7
  7356 ;; This function calls:
  7357 ;;		Nothing
  7358 ;; This function is called by:
  7359 ;;		_printf
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text33
  7364  00215C                     __ptext33:
  7365                           	opt stack 0
  7366  00215C                     ___lwmod:
  7367                           	opt stack 20
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;incstack = 0
  7371  00215C  0100               	movlb	0	; () banked
  7372  00215E  5189               	movf	___lwmod@divisor& (0+255),w,b
  7373  002160  0100               	movlb	0	; () banked
  7374  002162  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7375  002164  B4D8               	btfsc	status,2,c
  7376  002166  D026               	goto	l1640
  7377                           
  7378                           ; BSR set to: 0
  7379  002168  0E01               	movlw	1
  7380  00216A  0100               	movlb	0	; () banked
  7381  00216C  6F8B               	movwf	___lwmod@counter& (0+255),b
  7382  00216E  D006               	goto	l3941
  7383  002170                     l3939:
  7384                           
  7385                           ; BSR set to: 0
  7386  002170  0100               	movlb	0	; () banked
  7387  002172  90D8               	bcf	status,0,c
  7388  002174  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7389  002176  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7390  002178  0100               	movlb	0	; () banked
  7391  00217A  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7392  00217C                     l3941:
  7393                           
  7394                           ; BSR set to: 0
  7395  00217C  0100               	movlb	0	; () banked
  7396  00217E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7397  002180  D7F7               	goto	l3939
  7398  002182                     l3943:
  7399                           
  7400                           ; BSR set to: 0
  7401  002182  0100               	movlb	0	; () banked
  7402  002184  5189               	movf	___lwmod@divisor& (0+255),w,b
  7403  002186  0100               	movlb	0	; () banked
  7404  002188  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  7405  00218A  0100               	movlb	0	; () banked
  7406  00218C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7407  00218E  0100               	movlb	0	; () banked
  7408  002190  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7409  002192  A0D8               	btfss	status,0,c
  7410  002194  D008               	goto	l3947
  7411                           
  7412                           ; BSR set to: 0
  7413  002196  0100               	movlb	0	; () banked
  7414  002198  5189               	movf	___lwmod@divisor& (0+255),w,b
  7415  00219A  0100               	movlb	0	; () banked
  7416  00219C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  7417  00219E  0100               	movlb	0	; () banked
  7418  0021A0  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7419  0021A2  0100               	movlb	0	; () banked
  7420  0021A4  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7421  0021A6                     l3947:
  7422                           
  7423                           ; BSR set to: 0
  7424  0021A6  0100               	movlb	0	; () banked
  7425  0021A8  90D8               	bcf	status,0,c
  7426  0021AA  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7427  0021AC  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  7428                           
  7429                           ; BSR set to: 0
  7430  0021AE  0100               	movlb	0	; () banked
  7431  0021B0  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  7432  0021B2  D7E7               	goto	l3943
  7433  0021B4                     l1640:
  7434                           
  7435                           ; BSR set to: 0
  7436  0021B4  C087  F087         	movff	___lwmod@dividend,?___lwmod
  7437  0021B8  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  7438                           
  7439                           ; BSR set to: 0
  7440  0021BC  0012               	return		;funcret
  7441  0021BE                     __end_of___lwmod:
  7442                           	opt stack 0
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           intcon	equ	0xFF2
  7450                           intcon3	equ	0xFF0
  7451                           indf0	equ	0xFEF
  7452                           postinc0	equ	0xFEE
  7453                           fsr0h	equ	0xFEA
  7454                           fsr0l	equ	0xFE9
  7455                           wreg	equ	0xFE8
  7456                           postdec1	equ	0xFE5
  7457                           fsr1l	equ	0xFE1
  7458                           indf2	equ	0xFDF
  7459                           postinc2	equ	0xFDE
  7460                           postdec2	equ	0xFDD
  7461                           fsr2h	equ	0xFDA
  7462                           fsr2l	equ	0xFD9
  7463                           status	equ	0xFD8
  7464                           
  7465 ;; *************** function ___lwdiv *****************
  7466 ;; Defined at:
  7467 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;  dividend        2    0[BANK0 ] unsigned int 
  7470 ;;  divisor         2    2[BANK0 ] unsigned int 
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;  quotient        2    4[BANK0 ] unsigned int 
  7473 ;;  counter         1    6[BANK0 ] unsigned char 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  2    0[BANK0 ] unsigned int 
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7483 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;Total ram usage:        7 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    7
  7490 ;; This function calls:
  7491 ;;		Nothing
  7492 ;; This function is called by:
  7493 ;;		_printf
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497                           	psect	text34
  7498  001F9C                     __ptext34:
  7499                           	opt stack 0
  7500  001F9C                     ___lwdiv:
  7501                           	opt stack 20
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;incstack = 0
  7505  001F9C  0E00               	movlw	0
  7506  001F9E  0100               	movlb	0	; () banked
  7507  001FA0  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7508  001FA2  0E00               	movlw	0
  7509  001FA4  6F84               	movwf	___lwdiv@quotient& (0+255),b
  7510                           
  7511                           ; BSR set to: 0
  7512  001FA6  0100               	movlb	0	; () banked
  7513  001FA8  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7514  001FAA  0100               	movlb	0	; () banked
  7515  001FAC  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7516  001FAE  B4D8               	btfsc	status,2,c
  7517  001FB0  D02C               	goto	l1630
  7518                           
  7519                           ; BSR set to: 0
  7520  001FB2  0E01               	movlw	1
  7521  001FB4  0100               	movlb	0	; () banked
  7522  001FB6  6F86               	movwf	___lwdiv@counter& (0+255),b
  7523  001FB8  D006               	goto	l3921
  7524  001FBA                     l3919:
  7525                           
  7526                           ; BSR set to: 0
  7527  001FBA  0100               	movlb	0	; () banked
  7528  001FBC  90D8               	bcf	status,0,c
  7529  001FBE  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  7530  001FC0  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7531  001FC2  0100               	movlb	0	; () banked
  7532  001FC4  2B86               	incf	___lwdiv@counter& (0+255),f,b
  7533  001FC6                     l3921:
  7534                           
  7535                           ; BSR set to: 0
  7536  001FC6  0100               	movlb	0	; () banked
  7537  001FC8  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7538  001FCA  D7F7               	goto	l3919
  7539  001FCC                     l3923:
  7540                           
  7541                           ; BSR set to: 0
  7542  001FCC  0100               	movlb	0	; () banked
  7543  001FCE  90D8               	bcf	status,0,c
  7544  001FD0  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  7545  001FD2  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7546                           
  7547                           ; BSR set to: 0
  7548  001FD4  0100               	movlb	0	; () banked
  7549  001FD6  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7550  001FD8  0100               	movlb	0	; () banked
  7551  001FDA  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  7552  001FDC  0100               	movlb	0	; () banked
  7553  001FDE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7554  001FE0  0100               	movlb	0	; () banked
  7555  001FE2  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7556  001FE4  A0D8               	btfss	status,0,c
  7557  001FE6  D00A               	goto	l3931
  7558                           
  7559                           ; BSR set to: 0
  7560  001FE8  0100               	movlb	0	; () banked
  7561  001FEA  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7562  001FEC  0100               	movlb	0	; () banked
  7563  001FEE  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  7564  001FF0  0100               	movlb	0	; () banked
  7565  001FF2  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7566  001FF4  0100               	movlb	0	; () banked
  7567  001FF6  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7568                           
  7569                           ; BSR set to: 0
  7570  001FF8  0100               	movlb	0	; () banked
  7571  001FFA  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  7572  001FFC                     l3931:
  7573                           
  7574                           ; BSR set to: 0
  7575  001FFC  0100               	movlb	0	; () banked
  7576  001FFE  90D8               	bcf	status,0,c
  7577  002000  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7578  002002  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  7579                           
  7580                           ; BSR set to: 0
  7581  002004  0100               	movlb	0	; () banked
  7582  002006  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  7583  002008  D7E1               	goto	l3923
  7584  00200A                     l1630:
  7585                           
  7586                           ; BSR set to: 0
  7587  00200A  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  7588  00200E  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7589                           
  7590                           ; BSR set to: 0
  7591  002012  0012               	return		;funcret
  7592  002014                     __end_of___lwdiv:
  7593                           	opt stack 0
  7594                           tblptru	equ	0xFF8
  7595                           tblptrh	equ	0xFF7
  7596                           tblptrl	equ	0xFF6
  7597                           tablat	equ	0xFF5
  7598                           prodh	equ	0xFF4
  7599                           prodl	equ	0xFF3
  7600                           intcon	equ	0xFF2
  7601                           intcon3	equ	0xFF0
  7602                           indf0	equ	0xFEF
  7603                           postinc0	equ	0xFEE
  7604                           fsr0h	equ	0xFEA
  7605                           fsr0l	equ	0xFE9
  7606                           wreg	equ	0xFE8
  7607                           postdec1	equ	0xFE5
  7608                           fsr1l	equ	0xFE1
  7609                           indf2	equ	0xFDF
  7610                           postinc2	equ	0xFDE
  7611                           postdec2	equ	0xFDD
  7612                           fsr2h	equ	0xFDA
  7613                           fsr2l	equ	0xFD9
  7614                           status	equ	0xFD8
  7615                           
  7616 ;; *************** function _lcdInst *****************
  7617 ;; Defined at:
  7618 ;;		line 13 in file "lcd.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  data            1    wreg     unsigned char 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  data            1    2[BANK0 ] unsigned char 
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, status,2, status,0, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7636 ;;Total ram usage:        1 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    8
  7639 ;; This function calls:
  7640 ;;		_lcdNibble
  7641 ;; This function is called by:
  7642 ;;		_UI
  7643 ;;		_change_state_to_menu_start
  7644 ;;		_change_state_to_menu_12
  7645 ;;		_change_state_to_menu_22
  7646 ;;		_initLCD
  7647 ;;		_printRTC
  7648 ;;		_Loading
  7649 ;; This function uses a non-reentrant model
  7650 ;;
  7651                           
  7652                           	psect	text35
  7653  0028EC                     __ptext35:
  7654                           	opt stack 0
  7655  0028EC                     _lcdInst:
  7656                           	opt stack 20
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;incstack = 0
  7660                           ;lcdInst@data stored from wreg
  7661  0028EC  0100               	movlb	0	; () banked
  7662  0028EE  6F82               	movwf	lcdInst@data& (0+255),b
  7663                           
  7664                           ;lcd.c: 14: LATDbits.LATD2 = 0;
  7665  0028F0  948C               	bcf	3980,2,c	;volatile
  7666                           
  7667                           ;lcd.c: 15: lcdNibble(data);
  7668  0028F2  0100               	movlb	0	; () banked
  7669  0028F4  5182               	movf	lcdInst@data& (0+255),w,b
  7670  0028F6  EC7A  F010         	call	_lcdNibble
  7671  0028FA  0012               	return		;funcret
  7672  0028FC                     __end_of_lcdInst:
  7673                           	opt stack 0
  7674                           tblptru	equ	0xFF8
  7675                           tblptrh	equ	0xFF7
  7676                           tblptrl	equ	0xFF6
  7677                           tablat	equ	0xFF5
  7678                           prodh	equ	0xFF4
  7679                           prodl	equ	0xFF3
  7680                           intcon	equ	0xFF2
  7681                           intcon3	equ	0xFF0
  7682                           indf0	equ	0xFEF
  7683                           postinc0	equ	0xFEE
  7684                           fsr0h	equ	0xFEA
  7685                           fsr0l	equ	0xFE9
  7686                           wreg	equ	0xFE8
  7687                           postdec1	equ	0xFE5
  7688                           fsr1l	equ	0xFE1
  7689                           indf2	equ	0xFDF
  7690                           postinc2	equ	0xFDE
  7691                           postdec2	equ	0xFDD
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function _lcdNibble *****************
  7697 ;; Defined at:
  7698 ;;		line 23 in file "lcd.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;  data            1    wreg     unsigned char 
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;  data            1    1[BANK0 ] unsigned char 
  7703 ;;  temp            1    0[BANK0 ] unsigned char 
  7704 ;; Return value:  Size  Location     Type
  7705 ;;                  1    wreg      void 
  7706 ;; Registers used:
  7707 ;;		wreg, status,2, status,0
  7708 ;; Tracked objects:
  7709 ;;		On entry : 0/0
  7710 ;;		On exit  : 0/0
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;Total ram usage:        2 bytes
  7718 ;; Hardware stack levels used:    1
  7719 ;; Hardware stack levels required when called:    7
  7720 ;; This function calls:
  7721 ;;		Nothing
  7722 ;; This function is called by:
  7723 ;;		_lcdInst
  7724 ;;		_putch
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	text36
  7729  0020F4                     __ptext36:
  7730                           	opt stack 0
  7731  0020F4                     _lcdNibble:
  7732                           	opt stack 20
  7733                           
  7734                           ;incstack = 0
  7735                           ;lcdNibble@data stored from wreg
  7736  0020F4  0100               	movlb	0	; () banked
  7737  0020F6  6F81               	movwf	lcdNibble@data& (0+255),b
  7738                           
  7739                           ;lcd.c: 25: char temp = data & 0xF0;
  7740  0020F8  0100               	movlb	0	; () banked
  7741  0020FA  5181               	movf	lcdNibble@data& (0+255),w,b
  7742  0020FC  0BF0               	andlw	240
  7743  0020FE  0100               	movlb	0	; () banked
  7744  002100  6F80               	movwf	lcdNibble@temp& (0+255),b
  7745                           
  7746                           ;lcd.c: 26: LATD = LATD & 0x0F;
  7747  002102  508C               	movf	3980,w,c	;volatile
  7748  002104  0B0F               	andlw	15
  7749  002106  6E8C               	movwf	3980,c	;volatile
  7750                           
  7751                           ;lcd.c: 27: LATD = temp | LATD;
  7752  002108  0100               	movlb	0	; () banked
  7753  00210A  5180               	movf	lcdNibble@temp& (0+255),w,b
  7754  00210C  108C               	iorwf	3980,w,c	;volatile
  7755  00210E  6E8C               	movwf	3980,c	;volatile
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;lcd.c: 29: LATDbits.LATD3 = 1;
  7759  002110  868C               	bsf	3980,3,c	;volatile
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7763  002112  0E42               	movlw	66
  7764  002114                     u4817:
  7765  002114  2EE8               	decfsz	wreg,f,c
  7766  002116  D7FE               	bra	u4817
  7767  002118  D000               	nop2	
  7768                           
  7769                           ;lcd.c: 31: LATDbits.LATD3 = 0;
  7770  00211A  968C               	bcf	3980,3,c	;volatile
  7771                           
  7772                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7773  00211C  0E42               	movlw	66
  7774  00211E                     u4827:
  7775  00211E  2EE8               	decfsz	wreg,f,c
  7776  002120  D7FE               	bra	u4827
  7777  002122  D000               	nop2	
  7778                           
  7779                           ;lcd.c: 34: data = data << 4;
  7780  002124  0100               	movlb	0	; () banked
  7781  002126  3981               	swapf	lcdNibble@data& (0+255),w,b
  7782  002128  0BF0               	andlw	240
  7783  00212A  0100               	movlb	0	; () banked
  7784  00212C  6F81               	movwf	lcdNibble@data& (0+255),b
  7785                           
  7786                           ;lcd.c: 36: temp = data & 0xF0;
  7787  00212E  0100               	movlb	0	; () banked
  7788  002130  5181               	movf	lcdNibble@data& (0+255),w,b
  7789  002132  0BF0               	andlw	240
  7790  002134  0100               	movlb	0	; () banked
  7791  002136  6F80               	movwf	lcdNibble@temp& (0+255),b
  7792                           
  7793                           ;lcd.c: 37: LATD = LATD & 0x0F;
  7794  002138  508C               	movf	3980,w,c	;volatile
  7795  00213A  0B0F               	andlw	15
  7796  00213C  6E8C               	movwf	3980,c	;volatile
  7797                           
  7798                           ;lcd.c: 38: LATD = temp | LATD;
  7799  00213E  0100               	movlb	0	; () banked
  7800  002140  5180               	movf	lcdNibble@temp& (0+255),w,b
  7801  002142  108C               	iorwf	3980,w,c	;volatile
  7802  002144  6E8C               	movwf	3980,c	;volatile
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  7806  002146  868C               	bsf	3980,3,c	;volatile
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7810  002148  0E42               	movlw	66
  7811  00214A                     u4837:
  7812  00214A  2EE8               	decfsz	wreg,f,c
  7813  00214C  D7FE               	bra	u4837
  7814  00214E  D000               	nop2	
  7815                           
  7816                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7817  002150  968C               	bcf	3980,3,c	;volatile
  7818                           
  7819                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7820  002152  0E42               	movlw	66
  7821  002154                     u4847:
  7822  002154  2EE8               	decfsz	wreg,f,c
  7823  002156  D7FE               	bra	u4847
  7824  002158  D000               	nop2	
  7825  00215A  0012               	return		;funcret
  7826  00215C                     __end_of_lcdNibble:
  7827                           	opt stack 0
  7828                           tblptru	equ	0xFF8
  7829                           tblptrh	equ	0xFF7
  7830                           tblptrl	equ	0xFF6
  7831                           tablat	equ	0xFF5
  7832                           prodh	equ	0xFF4
  7833                           prodl	equ	0xFF3
  7834                           intcon	equ	0xFF2
  7835                           intcon3	equ	0xFF0
  7836                           indf0	equ	0xFEF
  7837                           postinc0	equ	0xFEE
  7838                           fsr0h	equ	0xFEA
  7839                           fsr0l	equ	0xFE9
  7840                           wreg	equ	0xFE8
  7841                           postdec1	equ	0xFE5
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function ___awmod *****************
  7851 ;; Defined at:
  7852 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;  dividend        2    0[BANK0 ] int 
  7855 ;;  divisor         2    2[BANK0 ] int 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;  sign            1    5[BANK0 ] unsigned char 
  7858 ;;  counter         1    4[BANK0 ] unsigned char 
  7859 ;; Return value:  Size  Location     Type
  7860 ;;                  2    0[BANK0 ] int 
  7861 ;; Registers used:
  7862 ;;		wreg, status,2, status,0
  7863 ;; Tracked objects:
  7864 ;;		On entry : 0/0
  7865 ;;		On exit  : 0/0
  7866 ;;		Unchanged: 0/0
  7867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7868 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;Total ram usage:        6 bytes
  7873 ;; Hardware stack levels used:    1
  7874 ;; Hardware stack levels required when called:    7
  7875 ;; This function calls:
  7876 ;;		Nothing
  7877 ;; This function is called by:
  7878 ;;		_UI
  7879 ;; This function uses a non-reentrant model
  7880 ;;
  7881                           
  7882                           	psect	text37
  7883  001C44                     __ptext37:
  7884                           	opt stack 0
  7885  001C44                     ___awmod:
  7886                           	opt stack 22
  7887                           
  7888                           ;incstack = 0
  7889  001C44  0E00               	movlw	0
  7890  001C46  0100               	movlb	0	; () banked
  7891  001C48  6F85               	movwf	___awmod@sign& (0+255),b
  7892                           
  7893                           ; BSR set to: 0
  7894  001C4A  0100               	movlb	0	; () banked
  7895  001C4C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7896  001C4E  D008               	goto	l4939
  7897                           
  7898                           ; BSR set to: 0
  7899  001C50  0100               	movlb	0	; () banked
  7900  001C52  6D80               	negf	___awmod@dividend& (0+255),b
  7901  001C54  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7902  001C56  B0D8               	btfsc	status,0,c
  7903  001C58  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7904                           
  7905                           ; BSR set to: 0
  7906  001C5A  0E01               	movlw	1
  7907  001C5C  0100               	movlb	0	; () banked
  7908  001C5E  6F85               	movwf	___awmod@sign& (0+255),b
  7909  001C60                     l4939:
  7910                           
  7911                           ; BSR set to: 0
  7912  001C60  0100               	movlb	0	; () banked
  7913  001C62  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7914  001C64  D005               	goto	l4943
  7915                           
  7916                           ; BSR set to: 0
  7917  001C66  0100               	movlb	0	; () banked
  7918  001C68  6D82               	negf	___awmod@divisor& (0+255),b
  7919  001C6A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  7920  001C6C  B0D8               	btfsc	status,0,c
  7921  001C6E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  7922  001C70                     l4943:
  7923                           
  7924                           ; BSR set to: 0
  7925  001C70  0100               	movlb	0	; () banked
  7926  001C72  5182               	movf	___awmod@divisor& (0+255),w,b
  7927  001C74  0100               	movlb	0	; () banked
  7928  001C76  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7929  001C78  B4D8               	btfsc	status,2,c
  7930  001C7A  D026               	goto	l4959
  7931                           
  7932                           ; BSR set to: 0
  7933  001C7C  0E01               	movlw	1
  7934  001C7E  0100               	movlb	0	; () banked
  7935  001C80  6F84               	movwf	___awmod@counter& (0+255),b
  7936  001C82  D006               	goto	l4949
  7937  001C84                     l4947:
  7938                           
  7939                           ; BSR set to: 0
  7940  001C84  0100               	movlb	0	; () banked
  7941  001C86  90D8               	bcf	status,0,c
  7942  001C88  3782               	rlcf	___awmod@divisor& (0+255),f,b
  7943  001C8A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7944  001C8C  0100               	movlb	0	; () banked
  7945  001C8E  2B84               	incf	___awmod@counter& (0+255),f,b
  7946  001C90                     l4949:
  7947                           
  7948                           ; BSR set to: 0
  7949  001C90  0100               	movlb	0	; () banked
  7950  001C92  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7951  001C94  D7F7               	goto	l4947
  7952  001C96                     l4951:
  7953                           
  7954                           ; BSR set to: 0
  7955  001C96  0100               	movlb	0	; () banked
  7956  001C98  5182               	movf	___awmod@divisor& (0+255),w,b
  7957  001C9A  0100               	movlb	0	; () banked
  7958  001C9C  5D80               	subwf	___awmod@dividend& (0+255),w,b
  7959  001C9E  0100               	movlb	0	; () banked
  7960  001CA0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7961  001CA2  0100               	movlb	0	; () banked
  7962  001CA4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7963  001CA6  A0D8               	btfss	status,0,c
  7964  001CA8  D008               	goto	l4955
  7965                           
  7966                           ; BSR set to: 0
  7967  001CAA  0100               	movlb	0	; () banked
  7968  001CAC  5182               	movf	___awmod@divisor& (0+255),w,b
  7969  001CAE  0100               	movlb	0	; () banked
  7970  001CB0  5F80               	subwf	___awmod@dividend& (0+255),f,b
  7971  001CB2  0100               	movlb	0	; () banked
  7972  001CB4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7973  001CB6  0100               	movlb	0	; () banked
  7974  001CB8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7975  001CBA                     l4955:
  7976                           
  7977                           ; BSR set to: 0
  7978  001CBA  0100               	movlb	0	; () banked
  7979  001CBC  90D8               	bcf	status,0,c
  7980  001CBE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7981  001CC0  3382               	rrcf	___awmod@divisor& (0+255),f,b
  7982                           
  7983                           ; BSR set to: 0
  7984  001CC2  0100               	movlb	0	; () banked
  7985  001CC4  2F84               	decfsz	___awmod@counter& (0+255),f,b
  7986  001CC6  D7E7               	goto	l4951
  7987  001CC8                     l4959:
  7988                           
  7989                           ; BSR set to: 0
  7990  001CC8  0100               	movlb	0	; () banked
  7991  001CCA  5185               	movf	___awmod@sign& (0+255),w,b
  7992  001CCC  0100               	movlb	0	; () banked
  7993  001CCE  B4D8               	btfsc	status,2,c
  7994  001CD0  D005               	goto	l4963
  7995                           
  7996                           ; BSR set to: 0
  7997  001CD2  0100               	movlb	0	; () banked
  7998  001CD4  6D80               	negf	___awmod@dividend& (0+255),b
  7999  001CD6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8000  001CD8  B0D8               	btfsc	status,0,c
  8001  001CDA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8002  001CDC                     l4963:
  8003                           
  8004                           ; BSR set to: 0
  8005  001CDC  C080  F080         	movff	___awmod@dividend,?___awmod
  8006  001CE0  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8007  001CE4  0012               	return	
  8008  001CE6                     __end_of___awmod:
  8009                           	opt stack 0
  8010                           tblptru	equ	0xFF8
  8011                           tblptrh	equ	0xFF7
  8012                           tblptrl	equ	0xFF6
  8013                           tablat	equ	0xFF5
  8014                           prodh	equ	0xFF4
  8015                           prodl	equ	0xFF3
  8016                           intcon	equ	0xFF2
  8017                           intcon3	equ	0xFF0
  8018                           indf0	equ	0xFEF
  8019                           postinc0	equ	0xFEE
  8020                           fsr0h	equ	0xFEA
  8021                           fsr0l	equ	0xFE9
  8022                           wreg	equ	0xFE8
  8023                           postdec1	equ	0xFE5
  8024                           fsr1l	equ	0xFE1
  8025                           indf2	equ	0xFDF
  8026                           postinc2	equ	0xFDE
  8027                           postdec2	equ	0xFDD
  8028                           fsr2h	equ	0xFDA
  8029                           fsr2l	equ	0xFD9
  8030                           status	equ	0xFD8
  8031                           
  8032 ;; *************** function ___awdiv *****************
  8033 ;; Defined at:
  8034 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  dividend        2    6[BANK0 ] int 
  8037 ;;  divisor         2    8[BANK0 ] int 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  quotient        2   12[BANK0 ] int 
  8040 ;;  sign            1   11[BANK0 ] unsigned char 
  8041 ;;  counter         1   10[BANK0 ] unsigned char 
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  2    6[BANK0 ] int 
  8044 ;; Registers used:
  8045 ;;		wreg, status,2, status,0
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8051 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;Total ram usage:        8 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    7
  8058 ;; This function calls:
  8059 ;;		Nothing
  8060 ;; This function is called by:
  8061 ;;		_UI
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           	psect	text38
  8066  001978                     __ptext38:
  8067                           	opt stack 0
  8068  001978                     ___awdiv:
  8069                           	opt stack 22
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;incstack = 0
  8073  001978  0E00               	movlw	0
  8074  00197A  0100               	movlb	0	; () banked
  8075  00197C  6F8B               	movwf	___awdiv@sign& (0+255),b
  8076                           
  8077                           ; BSR set to: 0
  8078  00197E  0100               	movlb	0	; () banked
  8079  001980  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8080  001982  D008               	goto	l4895
  8081                           
  8082                           ; BSR set to: 0
  8083  001984  0100               	movlb	0	; () banked
  8084  001986  6D88               	negf	___awdiv@divisor& (0+255),b
  8085  001988  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8086  00198A  B0D8               	btfsc	status,0,c
  8087  00198C  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8088                           
  8089                           ; BSR set to: 0
  8090  00198E  0E01               	movlw	1
  8091  001990  0100               	movlb	0	; () banked
  8092  001992  6F8B               	movwf	___awdiv@sign& (0+255),b
  8093  001994                     l4895:
  8094                           
  8095                           ; BSR set to: 0
  8096  001994  0100               	movlb	0	; () banked
  8097  001996  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8098  001998  D008               	goto	l4901
  8099                           
  8100                           ; BSR set to: 0
  8101  00199A  0100               	movlb	0	; () banked
  8102  00199C  6D86               	negf	___awdiv@dividend& (0+255),b
  8103  00199E  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8104  0019A0  B0D8               	btfsc	status,0,c
  8105  0019A2  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8106                           
  8107                           ; BSR set to: 0
  8108  0019A4  0E01               	movlw	1
  8109  0019A6  0100               	movlb	0	; () banked
  8110  0019A8  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8111  0019AA                     l4901:
  8112                           
  8113                           ; BSR set to: 0
  8114  0019AA  0E00               	movlw	0
  8115  0019AC  0100               	movlb	0	; () banked
  8116  0019AE  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8117  0019B0  0E00               	movlw	0
  8118  0019B2  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8119                           
  8120                           ; BSR set to: 0
  8121  0019B4  0100               	movlb	0	; () banked
  8122  0019B6  5188               	movf	___awdiv@divisor& (0+255),w,b
  8123  0019B8  0100               	movlb	0	; () banked
  8124  0019BA  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8125  0019BC  B4D8               	btfsc	status,2,c
  8126  0019BE  D02C               	goto	l4923
  8127                           
  8128                           ; BSR set to: 0
  8129  0019C0  0E01               	movlw	1
  8130  0019C2  0100               	movlb	0	; () banked
  8131  0019C4  6F8A               	movwf	___awdiv@counter& (0+255),b
  8132  0019C6  D006               	goto	l4909
  8133  0019C8                     l4907:
  8134                           
  8135                           ; BSR set to: 0
  8136  0019C8  0100               	movlb	0	; () banked
  8137  0019CA  90D8               	bcf	status,0,c
  8138  0019CC  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8139  0019CE  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8140  0019D0  0100               	movlb	0	; () banked
  8141  0019D2  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8142  0019D4                     l4909:
  8143                           
  8144                           ; BSR set to: 0
  8145  0019D4  0100               	movlb	0	; () banked
  8146  0019D6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8147  0019D8  D7F7               	goto	l4907
  8148  0019DA                     l4911:
  8149                           
  8150                           ; BSR set to: 0
  8151  0019DA  0100               	movlb	0	; () banked
  8152  0019DC  90D8               	bcf	status,0,c
  8153  0019DE  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8154  0019E0  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8155                           
  8156                           ; BSR set to: 0
  8157  0019E2  0100               	movlb	0	; () banked
  8158  0019E4  5188               	movf	___awdiv@divisor& (0+255),w,b
  8159  0019E6  0100               	movlb	0	; () banked
  8160  0019E8  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8161  0019EA  0100               	movlb	0	; () banked
  8162  0019EC  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8163  0019EE  0100               	movlb	0	; () banked
  8164  0019F0  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8165  0019F2  A0D8               	btfss	status,0,c
  8166  0019F4  D00A               	goto	l4919
  8167                           
  8168                           ; BSR set to: 0
  8169  0019F6  0100               	movlb	0	; () banked
  8170  0019F8  5188               	movf	___awdiv@divisor& (0+255),w,b
  8171  0019FA  0100               	movlb	0	; () banked
  8172  0019FC  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8173  0019FE  0100               	movlb	0	; () banked
  8174  001A00  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8175  001A02  0100               	movlb	0	; () banked
  8176  001A04  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8177                           
  8178                           ; BSR set to: 0
  8179  001A06  0100               	movlb	0	; () banked
  8180  001A08  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8181  001A0A                     l4919:
  8182                           
  8183                           ; BSR set to: 0
  8184  001A0A  0100               	movlb	0	; () banked
  8185  001A0C  90D8               	bcf	status,0,c
  8186  001A0E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8187  001A10  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8188                           
  8189                           ; BSR set to: 0
  8190  001A12  0100               	movlb	0	; () banked
  8191  001A14  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8192  001A16  D7E1               	goto	l4911
  8193  001A18                     l4923:
  8194                           
  8195                           ; BSR set to: 0
  8196  001A18  0100               	movlb	0	; () banked
  8197  001A1A  518B               	movf	___awdiv@sign& (0+255),w,b
  8198  001A1C  0100               	movlb	0	; () banked
  8199  001A1E  B4D8               	btfsc	status,2,c
  8200  001A20  D005               	goto	l4927
  8201                           
  8202                           ; BSR set to: 0
  8203  001A22  0100               	movlb	0	; () banked
  8204  001A24  6D8C               	negf	___awdiv@quotient& (0+255),b
  8205  001A26  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8206  001A28  B0D8               	btfsc	status,0,c
  8207  001A2A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8208  001A2C                     l4927:
  8209                           
  8210                           ; BSR set to: 0
  8211  001A2C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8212  001A30  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8213  001A34  0012               	return	
  8214  001A36                     __end_of___awdiv:
  8215                           	opt stack 0
  8216                           tblptru	equ	0xFF8
  8217                           tblptrh	equ	0xFF7
  8218                           tblptrl	equ	0xFF6
  8219                           tablat	equ	0xFF5
  8220                           prodh	equ	0xFF4
  8221                           prodl	equ	0xFF3
  8222                           intcon	equ	0xFF2
  8223                           intcon3	equ	0xFF0
  8224                           indf0	equ	0xFEF
  8225                           postinc0	equ	0xFEE
  8226                           fsr0h	equ	0xFEA
  8227                           fsr0l	equ	0xFE9
  8228                           wreg	equ	0xFE8
  8229                           postdec1	equ	0xFE5
  8230                           fsr1l	equ	0xFE1
  8231                           indf2	equ	0xFDF
  8232                           postinc2	equ	0xFDE
  8233                           postdec2	equ	0xFDD
  8234                           fsr2h	equ	0xFDA
  8235                           fsr2l	equ	0xFD9
  8236                           status	equ	0xFD8
  8237                           
  8238 ;; *************** function _PortTestA5 *****************
  8239 ;; Defined at:
  8240 ;;		line 27 in file "PortHigh.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;		None
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;		None
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      void 
  8247 ;; Registers used:
  8248 ;;		None
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;Total ram usage:        0 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    7
  8261 ;; This function calls:
  8262 ;;		Nothing
  8263 ;; This function is called by:
  8264 ;;		_main
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text39
  8269  0028B8                     __ptext39:
  8270                           	opt stack 0
  8271  0028B8                     _PortTestA5:
  8272                           	opt stack 23
  8273  0028B8                     l222:
  8274  0028B8  A281               	btfss	3969,1,c	;volatile
  8275  0028BA  D7FE               	goto	l222
  8276                           
  8277                           ;PortHigh.c: 31: }
  8278                           ;PortHigh.c: 32: LATAbits.LATA5 = 1;
  8279  0028BC  8A89               	bsf	3977,5,c	;volatile
  8280  0028BE                     l225:
  8281  0028BE  B281               	btfsc	3969,1,c	;volatile
  8282  0028C0  D7FE               	goto	l225
  8283                           
  8284                           ;PortHigh.c: 35: }
  8285                           ;PortHigh.c: 36: __nop();
  8286  0028C2  F000               	nop	
  8287                           
  8288                           ;PortHigh.c: 37: __nop();
  8289  0028C4  F000               	nop	
  8290                           
  8291                           ;PortHigh.c: 38: LATAbits.LATA5 = 0;
  8292  0028C6  9A89               	bcf	3977,5,c	;volatile
  8293  0028C8  0012               	return		;funcret
  8294  0028CA                     __end_of_PortTestA5:
  8295                           	opt stack 0
  8296                           tblptru	equ	0xFF8
  8297                           tblptrh	equ	0xFF7
  8298                           tblptrl	equ	0xFF6
  8299                           tablat	equ	0xFF5
  8300                           prodh	equ	0xFF4
  8301                           prodl	equ	0xFF3
  8302                           intcon	equ	0xFF2
  8303                           intcon3	equ	0xFF0
  8304                           indf0	equ	0xFEF
  8305                           postinc0	equ	0xFEE
  8306                           fsr0h	equ	0xFEA
  8307                           fsr0l	equ	0xFE9
  8308                           wreg	equ	0xFE8
  8309                           postdec1	equ	0xFE5
  8310                           fsr1l	equ	0xFE1
  8311                           indf2	equ	0xFDF
  8312                           postinc2	equ	0xFDE
  8313                           postdec2	equ	0xFDD
  8314                           fsr2h	equ	0xFDA
  8315                           fsr2l	equ	0xFD9
  8316                           status	equ	0xFD8
  8317                           
  8318 ;; *************** function _handler *****************
  8319 ;; Defined at:
  8320 ;;		line 14 in file "interruptHandler.c"
  8321 ;; Parameters:    Size  Location     Type
  8322 ;;		None
  8323 ;; Auto vars:     Size  Location     Type
  8324 ;;		None
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  1    wreg      void 
  8327 ;; Registers used:
  8328 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8336 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8337 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8338 ;;Total ram usage:       16 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    6
  8341 ;; This function calls:
  8342 ;;		_printSortTimer
  8343 ;;		_updateMenu
  8344 ;; This function is called by:
  8345 ;;		Interrupt level 2
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           	psect	intcode
  8350  000008                     __pintcode:
  8351                           	opt stack 0
  8352  000008                     _handler:
  8353                           	opt stack 18
  8354                           
  8355                           ;incstack = 0
  8356  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8357  00000A  ED33  F00C         	call	int_func,f	;refresh shadow registers
  8358                           tblptru	equ	0xFF8
  8359                           tblptrh	equ	0xFF7
  8360                           tblptrl	equ	0xFF6
  8361                           tablat	equ	0xFF5
  8362                           prodh	equ	0xFF4
  8363                           prodl	equ	0xFF3
  8364                           intcon	equ	0xFF2
  8365                           intcon3	equ	0xFF0
  8366                           indf0	equ	0xFEF
  8367                           postinc0	equ	0xFEE
  8368                           fsr0h	equ	0xFEA
  8369                           fsr0l	equ	0xFE9
  8370                           wreg	equ	0xFE8
  8371                           postdec1	equ	0xFE5
  8372                           fsr1l	equ	0xFE1
  8373                           indf2	equ	0xFDF
  8374                           postinc2	equ	0xFDE
  8375                           postdec2	equ	0xFDD
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380                           	psect	intcode_body
  8381  001866                     __pintcode_body:
  8382                           	opt stack 18
  8383  001866                     int_func:
  8384                           	opt stack 18
  8385  001866  0006               	pop		; remove dummy address from shadow register refresh
  8386  001868  CFFA F04D          	movff	pclath,??_handler+2
  8387  00186C  CFFB F04E          	movff	pclatu,??_handler+3
  8388  001870  CFE9 F04F          	movff	fsr0l,??_handler+4
  8389  001874  CFEA F050          	movff	fsr0h,??_handler+5
  8390  001878  CFE1 F051          	movff	fsr1l,??_handler+6
  8391  00187C  CFE2 F052          	movff	fsr1h,??_handler+7
  8392  001880  CFD9 F053          	movff	fsr2l,??_handler+8
  8393  001884  CFDA F054          	movff	fsr2h,??_handler+9
  8394  001888  CFF3 F055          	movff	prodl,??_handler+10
  8395  00188C  CFF4 F056          	movff	prodh,??_handler+11
  8396  001890  CFF6 F057          	movff	tblptrl,??_handler+12
  8397  001894  CFF7 F058          	movff	tblptrh,??_handler+13
  8398  001898  CFF8 F059          	movff	tblptru,??_handler+14
  8399  00189C  CFF5 F05A          	movff	tablat,??_handler+15
  8400                           
  8401                           ;interruptHandler.c: 16: if(INT1IF){
  8402  0018A0  A0F0               	btfss	intcon3,0,c	;volatile
  8403  0018A2  D018               	goto	i2l5597
  8404                           
  8405                           ;interruptHandler.c: 17: INT1IF = 0;
  8406  0018A4  90F0               	bcf	intcon3,0,c	;volatile
  8407                           
  8408                           ;interruptHandler.c: 18: if(machine_state == UI_state) {
  8409  0018A6  0100               	movlb	0	; () banked
  8410  0018A8  51F1               	movf	_machine_state& (0+255),w,b
  8411  0018AA  A4D8               	btfss	status,2,c
  8412  0018AC  D013               	goto	i2l5597
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;interruptHandler.c: 19: input = keys[(PORTB & 0xF0) >> 4];
  8416  0018AE  3881               	swapf	3969,w,c	;volatile
  8417  0018B0  0B0F               	andlw	15
  8418  0018B2  0B0F               	andlw	15
  8419  0018B4  6E4B               	movwf	??_handler& (0+255),c
  8420  0018B6  6A4C               	clrf	(??_handler+1)& (0+255),c
  8421  0018B8  0EB5               	movlw	low _keys
  8422  0018BA  244B               	addwf	??_handler,w,c
  8423  0018BC  6EF6               	movwf	tblptrl,c
  8424  0018BE  0EFD               	movlw	high _keys
  8425  0018C0  204C               	addwfc	??_handler+1,w,c
  8426  0018C2  6EF7               	movwf	tblptrh,c
  8427  0018C4                     	if	1	;There are 3 active tblptr bytes
  8428  0018C4  6AF8               	clrf	tblptru,c
  8429  0018C6  0E00               	movlw	low (__mediumconst shr (0+16))
  8430  0018C8  22F8               	addwfc	tblptru,f,c
  8431  0018CA                     	endif
  8432  0018CA  0008               	tblrd		*
  8433  0018CC  CFF5 F079          	movff	tablat,_input
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;interruptHandler.c: 20: updateMenu();
  8437  0018D0  ECC8  F007         	call	_updateMenu	;wreg free
  8438  0018D4                     i2l5597:
  8439                           
  8440                           ;interruptHandler.c: 21: }
  8441                           ;interruptHandler.c: 22: }
  8442                           ;interruptHandler.c: 25: if(TMR0IF){
  8443  0018D4  A4F2               	btfss	intcon,2,c	;volatile
  8444  0018D6  D00E               	goto	i2l5613
  8445                           
  8446                           ;interruptHandler.c: 26: TMR0IF = 0;
  8447  0018D8  94F2               	bcf	intcon,2,c	;volatile
  8448                           
  8449                           ;interruptHandler.c: 27: if(machine_state == Sorting_state){
  8450  0018DA  0100               	movlb	0	; () banked
  8451  0018DC  05F1               	decf	_machine_state& (0+255),w,b
  8452  0018DE  A4D8               	btfss	status,2,c
  8453  0018E0  D009               	goto	i2l5613
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;interruptHandler.c: 28: printSortTimer();
  8457  0018E2  EC43  F00A         	call	_printSortTimer	;wreg free
  8458                           
  8459                           ;interruptHandler.c: 31: T0CON = 0b00010111;
  8460  0018E6  0E17               	movlw	23
  8461  0018E8  6ED5               	movwf	4053,c	;volatile
  8462                           
  8463                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
  8464  0018EA  0E85               	movlw	133
  8465  0018EC  6ED7               	movwf	4055,c	;volatile
  8466                           
  8467                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
  8468  0018EE  0EEE               	movlw	238
  8469  0018F0  6ED6               	movwf	4054,c	;volatile
  8470                           
  8471                           ;interruptHandler.c: 34: TMR0ON = 1;
  8472  0018F2  8ED5               	bsf	4053,7,c	;volatile
  8473  0018F4                     i2l5613:
  8474                           
  8475                           ;interruptHandler.c: 35: }
  8476                           ;interruptHandler.c: 36: }
  8477                           ;interruptHandler.c: 39: if(TMR1IF){
  8478  0018F4  A09E               	btfss	3998,0,c	;volatile
  8479  0018F6  D022               	goto	i2l1156
  8480                           
  8481                           ;interruptHandler.c: 40: TMR1IF = 1;
  8482  0018F8  809E               	bsf	3998,0,c	;volatile
  8483                           
  8484                           ;interruptHandler.c: 41: if(machine_state == Sorting_state){
  8485  0018FA  0100               	movlb	0	; () banked
  8486  0018FC  05F1               	decf	_machine_state& (0+255),w,b
  8487  0018FE  A4D8               	btfss	status,2,c
  8488  001900  D01D               	goto	i2l1156
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;interruptHandler.c: 42: TMR1ON = 0;
  8492  001902  90CD               	bcf	4045,0,c	;volatile
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;interruptHandler.c: 43: T1CON = 0b10110000;
  8496  001904  0EB0               	movlw	176
  8497  001906  6ECD               	movwf	4045,c	;volatile
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;interruptHandler.c: 44: if(was_low){
  8501  001908  5075               	movf	_was_low,w,c
  8502  00190A  1076               	iorwf	_was_low+1,w,c
  8503  00190C  B4D8               	btfsc	status,2,c
  8504  00190E  D00B               	goto	i2l1154
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;interruptHandler.c: 45: LATCbits.LATC1 = 1;
  8508  001910  828B               	bsf	3979,1,c	;volatile
  8509                           
  8510                           ;interruptHandler.c: 46: LATCbits.LATC2 = 1;
  8511  001912  848B               	bsf	3979,2,c	;volatile
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;interruptHandler.c: 47: was_low = 0;
  8515  001914  0E00               	movlw	0
  8516  001916  6E76               	movwf	_was_low+1,c
  8517  001918  0E00               	movlw	0
  8518  00191A  6E75               	movwf	_was_low,c
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;interruptHandler.c: 49: TMR1H = timer1highbits;
  8522  00191C  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;interruptHandler.c: 50: TMR1L = timer1lowbits;
  8526  001920  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  8527  001924  D00A               	goto	i2l5641
  8528  001926                     i2l1154:
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;interruptHandler.c: 53: else{
  8532                           ;interruptHandler.c: 54: LATCbits.LATC1 = 0;
  8533  001926  928B               	bcf	3979,1,c	;volatile
  8534                           
  8535                           ;interruptHandler.c: 55: LATCbits.LATC2 = 0;
  8536  001928  948B               	bcf	3979,2,c	;volatile
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;interruptHandler.c: 56: was_low = 1;
  8540  00192A  0E00               	movlw	0
  8541  00192C  6E76               	movwf	_was_low+1,c
  8542  00192E  0E01               	movlw	1
  8543  001930  6E75               	movwf	_was_low,c
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;interruptHandler.c: 58: TMR1H = timer1_20ms_high;
  8547  001932  C07A  FFCF         	movff	_timer1_20ms_high,4047	;volatile
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;interruptHandler.c: 59: TMR1L = timer1_20ms_low;
  8551  001936  C07C  FFCE         	movff	_timer1_20ms_low,4046	;volatile
  8552  00193A                     i2l5641:
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;interruptHandler.c: 60: TMR1ON = 1;
  8556  00193A  80CD               	bsf	4045,0,c	;volatile
  8557  00193C                     i2l1156:
  8558  00193C  C05A  FFF5         	movff	??_handler+15,tablat
  8559  001940  C059  FFF8         	movff	??_handler+14,tblptru
  8560  001944  C058  FFF7         	movff	??_handler+13,tblptrh
  8561  001948  C057  FFF6         	movff	??_handler+12,tblptrl
  8562  00194C  C056  FFF4         	movff	??_handler+11,prodh
  8563  001950  C055  FFF3         	movff	??_handler+10,prodl
  8564  001954  C054  FFDA         	movff	??_handler+9,fsr2h
  8565  001958  C053  FFD9         	movff	??_handler+8,fsr2l
  8566  00195C  C052  FFE2         	movff	??_handler+7,fsr1h
  8567  001960  C051  FFE1         	movff	??_handler+6,fsr1l
  8568  001964  C050  FFEA         	movff	??_handler+5,fsr0h
  8569  001968  C04F  FFE9         	movff	??_handler+4,fsr0l
  8570  00196C  C04E  FFFB         	movff	??_handler+3,pclatu
  8571  001970  C04D  FFFA         	movff	??_handler+2,pclath
  8572  001974  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8573  001976  0011               	retfie		f
  8574  001978                     __end_of_handler:
  8575                           	opt stack 0
  8576                           pclatu	equ	0xFFB
  8577                           pclath	equ	0xFFA
  8578                           tblptru	equ	0xFF8
  8579                           tblptrh	equ	0xFF7
  8580                           tblptrl	equ	0xFF6
  8581                           tablat	equ	0xFF5
  8582                           prodh	equ	0xFF4
  8583                           prodl	equ	0xFF3
  8584                           intcon	equ	0xFF2
  8585                           intcon3	equ	0xFF0
  8586                           indf0	equ	0xFEF
  8587                           postinc0	equ	0xFEE
  8588                           fsr0h	equ	0xFEA
  8589                           fsr0l	equ	0xFE9
  8590                           wreg	equ	0xFE8
  8591                           postdec1	equ	0xFE5
  8592                           fsr1h	equ	0xFE2
  8593                           fsr1l	equ	0xFE1
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8
  8600                           
  8601 ;; *************** function _updateMenu *****************
  8602 ;; Defined at:
  8603 ;;		line 155 in file "UI.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;		None
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;		None
  8608 ;; Return value:  Size  Location     Type
  8609 ;;                  1    wreg      void 
  8610 ;; Registers used:
  8611 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;Total ram usage:        2 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    5
  8624 ;; This function calls:
  8625 ;;		_change_state_to_logs_11
  8626 ;;		_change_state_to_logs_12
  8627 ;;		_change_state_to_logs_22
  8628 ;;		_change_state_to_logs_23
  8629 ;;		_change_state_to_logs_33
  8630 ;;		_change_state_to_logs_34
  8631 ;;		_change_state_to_menu_11
  8632 ;;		_change_state_to_menu_23
  8633 ;;		_dispLogs
  8634 ;;		_inputHandler
  8635 ;;		i2_change_state_to_menu_12
  8636 ;;		i2_change_state_to_menu_22
  8637 ;;		i2_change_state_to_menu_start
  8638 ;; This function is called by:
  8639 ;;		_handler
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           	psect	text41
  8644  000F90                     __ptext41:
  8645                           	opt stack 0
  8646  000F90                     _updateMenu:
  8647                           	opt stack 18
  8648                           
  8649                           ;UI.c: 156: up = 0; down = 0; enter = 0; back = 0;
  8650                           
  8651                           ;incstack = 0
  8652  000F90  0E00               	movlw	0
  8653  000F92  6E74               	movwf	_up+1,c
  8654  000F94  0E00               	movlw	0
  8655  000F96  6E73               	movwf	_up,c
  8656  000F98  0E00               	movlw	0
  8657  000F9A  6E66               	movwf	_down+1,c
  8658  000F9C  0E00               	movlw	0
  8659  000F9E  6E65               	movwf	_down,c
  8660  000FA0  0E00               	movlw	0
  8661  000FA2  6E68               	movwf	_enter+1,c
  8662  000FA4  0E00               	movlw	0
  8663  000FA6  6E67               	movwf	_enter,c
  8664  000FA8  0E00               	movlw	0
  8665  000FAA  6E5E               	movwf	_back+1,c
  8666  000FAC  0E00               	movlw	0
  8667  000FAE  6E5D               	movwf	_back,c
  8668                           
  8669                           ;UI.c: 157: (INTCONbits.GIE = 0);
  8670  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  8671                           
  8672                           ;UI.c: 159: if (inputHandler()
  8673                           ;UI.c: 162: ){
  8674  000FB2  EC40  F00B         	call	_inputHandler	;wreg free
  8675  000FB6  502A               	movf	?_inputHandler,w,c
  8676  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  8677  000FBA  A4D8               	btfss	status,2,c
  8678  000FBC  D112               	goto	i2l5427
  8679  000FBE  D146               	goto	i2l387
  8680  000FC0                     i2l5279:
  8681                           
  8682                           ;UI.c: 166: change_state_to_menu_11();
  8683  000FC0  ECC5  F012         	call	_change_state_to_menu_11	;wreg free
  8684                           
  8685                           ;UI.c: 167: break;
  8686  000FC4  D143               	goto	i2l387
  8687  000FC6                     i2l5281:
  8688                           
  8689                           ;UI.c: 170: if(up){
  8690  000FC6  5073               	movf	_up,w,c
  8691  000FC8  1074               	iorwf	_up+1,w,c
  8692  000FCA  B4D8               	btfsc	status,2,c
  8693  000FCC  D003               	goto	i2l5285
  8694                           
  8695                           ;UI.c: 171: change_state_to_menu_23();
  8696  000FCE  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
  8697                           
  8698                           ;UI.c: 172: }
  8699  000FD2  D13C               	goto	i2l387
  8700  000FD4                     i2l5285:
  8701                           
  8702                           ;UI.c: 173: else if(down){
  8703  000FD4  5065               	movf	_down,w,c
  8704  000FD6  1066               	iorwf	_down+1,w,c
  8705  000FD8  B4D8               	btfsc	status,2,c
  8706  000FDA  D003               	goto	i2l5289
  8707                           
  8708                           ;UI.c: 174: change_state_to_menu_12();
  8709  000FDC  EC95  F012         	call	i2_change_state_to_menu_12	;wreg free
  8710                           
  8711                           ;UI.c: 175: }
  8712  000FE0  D135               	goto	i2l387
  8713  000FE2                     i2l5289:
  8714                           
  8715                           ;UI.c: 176: else if(enter){
  8716  000FE2  5067               	movf	_enter,w,c
  8717  000FE4  1068               	iorwf	_enter+1,w,c
  8718  000FE6  B4D8               	btfsc	status,2,c
  8719  000FE8  D131               	goto	i2l387
  8720                           
  8721                           ;UI.c: 177: change_state_to_menu_start();
  8722  000FEA  ECC5  F013         	call	i2_change_state_to_menu_start	;wreg free
  8723                           
  8724                           ;UI.c: 178: }
  8725                           ;UI.c: 179: break;
  8726  000FEE  D12E               	goto	i2l387
  8727  000FF0                     i2l5293:
  8728                           
  8729                           ;UI.c: 182: if(up){
  8730  000FF0  5073               	movf	_up,w,c
  8731  000FF2  1074               	iorwf	_up+1,w,c
  8732  000FF4  B4D8               	btfsc	status,2,c
  8733  000FF6  D003               	goto	i2l5297
  8734                           
  8735                           ;UI.c: 183: change_state_to_menu_11();
  8736  000FF8  ECC5  F012         	call	_change_state_to_menu_11	;wreg free
  8737                           
  8738                           ;UI.c: 184: }
  8739  000FFC  D127               	goto	i2l387
  8740  000FFE                     i2l5297:
  8741                           
  8742                           ;UI.c: 185: else if(down){
  8743  000FFE  5065               	movf	_down,w,c
  8744  001000  1066               	iorwf	_down+1,w,c
  8745  001002  B4D8               	btfsc	status,2,c
  8746  001004  D011               	goto	i2l5313
  8747                           
  8748                           ;UI.c: 186: change_state_to_menu_23();
  8749  001006  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
  8750                           
  8751                           ;UI.c: 187: }
  8752  00100A  D120               	goto	i2l387
  8753  00100C                     i2l5305:
  8754                           
  8755                           ;UI.c: 194: if(up){
  8756  00100C  5073               	movf	_up,w,c
  8757  00100E  1074               	iorwf	_up+1,w,c
  8758  001010  B4D8               	btfsc	status,2,c
  8759  001012  D003               	goto	i2l5309
  8760                           
  8761                           ;UI.c: 195: change_state_to_menu_11();
  8762  001014  ECC5  F012         	call	_change_state_to_menu_11	;wreg free
  8763                           
  8764                           ;UI.c: 196: }
  8765  001018  D119               	goto	i2l387
  8766  00101A                     i2l5309:
  8767                           
  8768                           ;UI.c: 197: else if(down){
  8769  00101A  5065               	movf	_down,w,c
  8770  00101C  1066               	iorwf	_down+1,w,c
  8771  00101E  B4D8               	btfsc	status,2,c
  8772  001020  D003               	goto	i2l5313
  8773                           
  8774                           ;UI.c: 198: change_state_to_menu_23();
  8775  001022  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
  8776                           
  8777                           ;UI.c: 199: }
  8778  001026  D112               	goto	i2l387
  8779  001028                     i2l5313:
  8780                           
  8781                           ;UI.c: 200: else if(enter){
  8782  001028  5067               	movf	_enter,w,c
  8783  00102A  1068               	iorwf	_enter+1,w,c
  8784  00102C  B4D8               	btfsc	status,2,c
  8785  00102E  D10E               	goto	i2l387
  8786                           
  8787                           ;UI.c: 201: machine_state = Sorting_state;
  8788  001030  0E01               	movlw	1
  8789  001032  0100               	movlb	0	; () banked
  8790  001034  6FF1               	movwf	_machine_state& (0+255),b
  8791                           
  8792                           ; BSR set to: 0
  8793                           ;UI.c: 202: }
  8794                           ;UI.c: 203: break;
  8795                           
  8796                           ; BSR set to: 0
  8797                           
  8798                           ; BSR set to: 0
  8799  001036  D10A               	goto	i2l387
  8800  001038                     i2l5317:
  8801                           
  8802                           ;UI.c: 206: if(up){
  8803  001038  5073               	movf	_up,w,c
  8804  00103A  1074               	iorwf	_up+1,w,c
  8805  00103C  B4D8               	btfsc	status,2,c
  8806  00103E  D003               	goto	i2l5321
  8807                           
  8808                           ;UI.c: 207: change_state_to_menu_22();
  8809  001040  EC7D  F012         	call	i2_change_state_to_menu_22	;wreg free
  8810                           
  8811                           ;UI.c: 208: }
  8812  001044  D103               	goto	i2l387
  8813  001046                     i2l5321:
  8814                           
  8815                           ;UI.c: 209: else if(down){
  8816  001046  5065               	movf	_down,w,c
  8817  001048  1066               	iorwf	_down+1,w,c
  8818  00104A  B4D8               	btfsc	status,2,c
  8819  00104C  D003               	goto	i2l5325
  8820                           
  8821                           ;UI.c: 210: change_state_to_menu_11();
  8822  00104E  ECC5  F012         	call	_change_state_to_menu_11	;wreg free
  8823                           
  8824                           ;UI.c: 211: }
  8825  001052  D0FC               	goto	i2l387
  8826  001054                     i2l5325:
  8827                           
  8828                           ;UI.c: 212: else if(enter){
  8829  001054  5067               	movf	_enter,w,c
  8830  001056  1068               	iorwf	_enter+1,w,c
  8831  001058  B4D8               	btfsc	status,2,c
  8832  00105A  D0F8               	goto	i2l387
  8833                           
  8834                           ;UI.c: 213: change_state_to_logs_11();
  8835  00105C  EC3D  F013         	call	_change_state_to_logs_11	;wreg free
  8836                           
  8837                           ;UI.c: 214: }
  8838                           ;UI.c: 215: break;
  8839  001060  D0F5               	goto	i2l387
  8840  001062                     i2l5329:
  8841                           
  8842                           ;UI.c: 218: if(up){
  8843  001062  5073               	movf	_up,w,c
  8844  001064  1074               	iorwf	_up+1,w,c
  8845  001066  B4D8               	btfsc	status,2,c
  8846  001068  D003               	goto	i2l5333
  8847                           
  8848                           ;UI.c: 219: change_state_to_logs_34();
  8849  00106A  ECDD  F012         	call	_change_state_to_logs_34	;wreg free
  8850                           
  8851                           ;UI.c: 220: }
  8852  00106E  D0EE               	goto	i2l387
  8853  001070                     i2l5333:
  8854                           
  8855                           ;UI.c: 221: else if(down){
  8856  001070  5065               	movf	_down,w,c
  8857  001072  1066               	iorwf	_down+1,w,c
  8858  001074  B4D8               	btfsc	status,2,c
  8859  001076  D003               	goto	i2l5337
  8860                           
  8861                           ;UI.c: 222: change_state_to_logs_12();
  8862  001078  EC25  F013         	call	_change_state_to_logs_12	;wreg free
  8863                           
  8864                           ;UI.c: 223: }
  8865  00107C  D0E7               	goto	i2l387
  8866  00107E                     i2l5337:
  8867                           
  8868                           ;UI.c: 224: else if(enter){
  8869  00107E  5067               	movf	_enter,w,c
  8870  001080  1068               	iorwf	_enter+1,w,c
  8871  001082  B4D8               	btfsc	status,2,c
  8872  001084  D007               	goto	i2l5341
  8873                           
  8874                           ;UI.c: 225: dispLogs(1);
  8875  001086  0E00               	movlw	0
  8876  001088  6E02               	movwf	dispLogs@myLog+1,c
  8877  00108A  0E01               	movlw	1
  8878  00108C  6E01               	movwf	dispLogs@myLog,c
  8879  00108E  EC52  F014         	call	_dispLogs	;wreg free
  8880                           
  8881                           ;UI.c: 226: }
  8882  001092  D0DC               	goto	i2l387
  8883  001094                     i2l5341:
  8884                           
  8885                           ;UI.c: 227: else if(back){
  8886  001094  505D               	movf	_back,w,c
  8887  001096  105E               	iorwf	_back+1,w,c
  8888  001098  B4D8               	btfsc	status,2,c
  8889  00109A  D0D8               	goto	i2l387
  8890                           
  8891                           ;UI.c: 228: change_state_to_menu_23();
  8892  00109C  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
  8893                           
  8894                           ;UI.c: 229: }
  8895                           ;UI.c: 230: break;
  8896  0010A0  D0D5               	goto	i2l387
  8897  0010A2                     i2l5345:
  8898                           
  8899                           ;UI.c: 233: if(up){
  8900  0010A2  5073               	movf	_up,w,c
  8901  0010A4  1074               	iorwf	_up+1,w,c
  8902  0010A6  B4D8               	btfsc	status,2,c
  8903  0010A8  D003               	goto	i2l5349
  8904                           
  8905                           ;UI.c: 234: change_state_to_logs_11();
  8906  0010AA  EC3D  F013         	call	_change_state_to_logs_11	;wreg free
  8907                           
  8908                           ;UI.c: 235: }
  8909  0010AE  D0CE               	goto	i2l387
  8910  0010B0                     i2l5349:
  8911                           
  8912                           ;UI.c: 236: else if(down){
  8913  0010B0  5065               	movf	_down,w,c
  8914  0010B2  1066               	iorwf	_down+1,w,c
  8915  0010B4  B4D8               	btfsc	status,2,c
  8916  0010B6  D003               	goto	i2l5353
  8917                           
  8918                           ;UI.c: 237: change_state_to_logs_23();
  8919  0010B8  EC83  F013         	call	_change_state_to_logs_23	;wreg free
  8920                           
  8921                           ;UI.c: 238: }
  8922  0010BC  D0C7               	goto	i2l387
  8923  0010BE                     i2l5353:
  8924                           
  8925                           ;UI.c: 239: else if(enter){
  8926  0010BE  5067               	movf	_enter,w,c
  8927  0010C0  1068               	iorwf	_enter+1,w,c
  8928  0010C2  B4D8               	btfsc	status,2,c
  8929  0010C4  D007               	goto	i2l5357
  8930                           
  8931                           ;UI.c: 240: dispLogs(2);
  8932  0010C6  0E00               	movlw	0
  8933  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  8934  0010CA  0E02               	movlw	2
  8935  0010CC  6E01               	movwf	dispLogs@myLog,c
  8936  0010CE  EC52  F014         	call	_dispLogs	;wreg free
  8937                           
  8938                           ;UI.c: 241: }
  8939  0010D2  D0BC               	goto	i2l387
  8940  0010D4                     i2l5357:
  8941                           
  8942                           ;UI.c: 242: else if(back){
  8943  0010D4  505D               	movf	_back,w,c
  8944  0010D6  105E               	iorwf	_back+1,w,c
  8945  0010D8  B4D8               	btfsc	status,2,c
  8946  0010DA  D0B8               	goto	i2l387
  8947                           
  8948                           ;UI.c: 243: change_state_to_menu_23();
  8949  0010DC  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
  8950                           
  8951                           ;UI.c: 244: }
  8952                           ;UI.c: 245: break;
  8953  0010E0  D0B5               	goto	i2l387
  8954  0010E2                     i2l5361:
  8955                           
  8956                           ;UI.c: 248: if(up){
  8957  0010E2  5073               	movf	_up,w,c
  8958  0010E4  1074               	iorwf	_up+1,w,c
  8959  0010E6  B4D8               	btfsc	status,2,c
  8960  0010E8  D003               	goto	i2l5365
  8961                           
  8962                           ;UI.c: 249: change_state_to_logs_11();
  8963  0010EA  EC3D  F013         	call	_change_state_to_logs_11	;wreg free
  8964                           
  8965                           ;UI.c: 250: }
  8966  0010EE  D0AE               	goto	i2l387
  8967  0010F0                     i2l5365:
  8968                           
  8969                           ;UI.c: 251: else if(down){
  8970  0010F0  5065               	movf	_down,w,c
  8971  0010F2  1066               	iorwf	_down+1,w,c
  8972  0010F4  B4D8               	btfsc	status,2,c
  8973  0010F6  D003               	goto	i2l5369
  8974                           
  8975                           ;UI.c: 252: change_state_to_logs_23();
  8976  0010F8  EC83  F013         	call	_change_state_to_logs_23	;wreg free
  8977                           
  8978                           ;UI.c: 253: }
  8979  0010FC  D0A7               	goto	i2l387
  8980  0010FE                     i2l5369:
  8981                           
  8982                           ;UI.c: 254: else if(enter){
  8983  0010FE  5067               	movf	_enter,w,c
  8984  001100  1068               	iorwf	_enter+1,w,c
  8985  001102  B4D8               	btfsc	status,2,c
  8986  001104  D007               	goto	i2l5373
  8987                           
  8988                           ;UI.c: 255: dispLogs(2);
  8989  001106  0E00               	movlw	0
  8990  001108  6E02               	movwf	dispLogs@myLog+1,c
  8991  00110A  0E02               	movlw	2
  8992  00110C  6E01               	movwf	dispLogs@myLog,c
  8993  00110E  EC52  F014         	call	_dispLogs	;wreg free
  8994                           
  8995                           ;UI.c: 256: }
  8996  001112  D09C               	goto	i2l387
  8997  001114                     i2l5373:
  8998                           
  8999                           ;UI.c: 257: else if(back){
  9000  001114  505D               	movf	_back,w,c
  9001  001116  105E               	iorwf	_back+1,w,c
  9002  001118  B4D8               	btfsc	status,2,c
  9003  00111A  D098               	goto	i2l387
  9004                           
  9005                           ;UI.c: 258: change_state_to_menu_23();
  9006  00111C  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
  9007                           
  9008                           ;UI.c: 259: }
  9009                           ;UI.c: 260: break;
  9010  001120  D095               	goto	i2l387
  9011  001122                     i2l5377:
  9012                           
  9013                           ;UI.c: 263: if(up){
  9014  001122  5073               	movf	_up,w,c
  9015  001124  1074               	iorwf	_up+1,w,c
  9016  001126  B4D8               	btfsc	status,2,c
  9017  001128  D003               	goto	i2l5381
  9018                           
  9019                           ;UI.c: 264: change_state_to_logs_22();
  9020  00112A  EC0D  F013         	call	_change_state_to_logs_22	;wreg free
  9021                           
  9022                           ;UI.c: 265: }
  9023  00112E  D08E               	goto	i2l387
  9024  001130                     i2l5381:
  9025                           
  9026                           ;UI.c: 266: else if(down){
  9027  001130  5065               	movf	_down,w,c
  9028  001132  1066               	iorwf	_down+1,w,c
  9029  001134  B4D8               	btfsc	status,2,c
  9030  001136  D003               	goto	i2l5385
  9031                           
  9032                           ;UI.c: 267: change_state_to_logs_34();
  9033  001138  ECDD  F012         	call	_change_state_to_logs_34	;wreg free
  9034                           
  9035                           ;UI.c: 268: }
  9036  00113C  D087               	goto	i2l387
  9037  00113E                     i2l5385:
  9038                           
  9039                           ;UI.c: 269: else if(enter){
  9040  00113E  5067               	movf	_enter,w,c
  9041  001140  1068               	iorwf	_enter+1,w,c
  9042  001142  B4D8               	btfsc	status,2,c
  9043  001144  D007               	goto	i2l5389
  9044                           
  9045                           ;UI.c: 270: dispLogs(3);
  9046  001146  0E00               	movlw	0
  9047  001148  6E02               	movwf	dispLogs@myLog+1,c
  9048  00114A  0E03               	movlw	3
  9049  00114C  6E01               	movwf	dispLogs@myLog,c
  9050  00114E  EC52  F014         	call	_dispLogs	;wreg free
  9051                           
  9052                           ;UI.c: 271: }
  9053  001152  D07C               	goto	i2l387
  9054  001154                     i2l5389:
  9055                           
  9056                           ;UI.c: 272: else if(back){
  9057  001154  505D               	movf	_back,w,c
  9058  001156  105E               	iorwf	_back+1,w,c
  9059  001158  B4D8               	btfsc	status,2,c
  9060  00115A  D078               	goto	i2l387
  9061                           
  9062                           ;UI.c: 273: change_state_to_menu_23();
  9063  00115C  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
  9064                           
  9065                           ;UI.c: 274: }
  9066                           ;UI.c: 275: break;
  9067  001160  D075               	goto	i2l387
  9068  001162                     i2l5393:
  9069                           
  9070                           ;UI.c: 278: if(up){
  9071  001162  5073               	movf	_up,w,c
  9072  001164  1074               	iorwf	_up+1,w,c
  9073  001166  B4D8               	btfsc	status,2,c
  9074  001168  D003               	goto	i2l5397
  9075                           
  9076                           ;UI.c: 279: change_state_to_logs_22();
  9077  00116A  EC0D  F013         	call	_change_state_to_logs_22	;wreg free
  9078                           
  9079                           ;UI.c: 280: }
  9080  00116E  D06E               	goto	i2l387
  9081  001170                     i2l5397:
  9082                           
  9083                           ;UI.c: 281: else if(down){
  9084  001170  5065               	movf	_down,w,c
  9085  001172  1066               	iorwf	_down+1,w,c
  9086  001174  B4D8               	btfsc	status,2,c
  9087  001176  D003               	goto	i2l5401
  9088                           
  9089                           ;UI.c: 282: change_state_to_logs_34();
  9090  001178  ECDD  F012         	call	_change_state_to_logs_34	;wreg free
  9091                           
  9092                           ;UI.c: 283: }
  9093  00117C  D067               	goto	i2l387
  9094  00117E                     i2l5401:
  9095                           
  9096                           ;UI.c: 284: else if(enter){
  9097  00117E  5067               	movf	_enter,w,c
  9098  001180  1068               	iorwf	_enter+1,w,c
  9099  001182  B4D8               	btfsc	status,2,c
  9100  001184  D007               	goto	i2l5405
  9101                           
  9102                           ;UI.c: 285: dispLogs(3);
  9103  001186  0E00               	movlw	0
  9104  001188  6E02               	movwf	dispLogs@myLog+1,c
  9105  00118A  0E03               	movlw	3
  9106  00118C  6E01               	movwf	dispLogs@myLog,c
  9107  00118E  EC52  F014         	call	_dispLogs	;wreg free
  9108                           
  9109                           ;UI.c: 286: }
  9110  001192  D05C               	goto	i2l387
  9111  001194                     i2l5405:
  9112                           
  9113                           ;UI.c: 287: else if(back){
  9114  001194  505D               	movf	_back,w,c
  9115  001196  105E               	iorwf	_back+1,w,c
  9116  001198  B4D8               	btfsc	status,2,c
  9117  00119A  D058               	goto	i2l387
  9118                           
  9119                           ;UI.c: 288: change_state_to_menu_23();
  9120  00119C  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
  9121                           
  9122                           ;UI.c: 289: }
  9123                           ;UI.c: 290: break;
  9124  0011A0  D055               	goto	i2l387
  9125  0011A2                     i2l5409:
  9126                           
  9127                           ;UI.c: 293: if(up){
  9128  0011A2  5073               	movf	_up,w,c
  9129  0011A4  1074               	iorwf	_up+1,w,c
  9130  0011A6  B4D8               	btfsc	status,2,c
  9131  0011A8  D003               	goto	i2l5413
  9132                           
  9133                           ;UI.c: 294: change_state_to_logs_33();
  9134  0011AA  ECF5  F012         	call	_change_state_to_logs_33	;wreg free
  9135                           
  9136                           ;UI.c: 295: }
  9137  0011AE  D04E               	goto	i2l387
  9138  0011B0                     i2l5413:
  9139                           
  9140                           ;UI.c: 296: else if(down){
  9141  0011B0  5065               	movf	_down,w,c
  9142  0011B2  1066               	iorwf	_down+1,w,c
  9143  0011B4  B4D8               	btfsc	status,2,c
  9144  0011B6  D003               	goto	i2l5417
  9145                           
  9146                           ;UI.c: 297: change_state_to_logs_11();
  9147  0011B8  EC3D  F013         	call	_change_state_to_logs_11	;wreg free
  9148                           
  9149                           ;UI.c: 298: }
  9150  0011BC  D047               	goto	i2l387
  9151  0011BE                     i2l5417:
  9152                           
  9153                           ;UI.c: 299: else if(enter){
  9154  0011BE  5067               	movf	_enter,w,c
  9155  0011C0  1068               	iorwf	_enter+1,w,c
  9156  0011C2  B4D8               	btfsc	status,2,c
  9157  0011C4  D007               	goto	i2l5421
  9158                           
  9159                           ;UI.c: 300: dispLogs(4);
  9160  0011C6  0E00               	movlw	0
  9161  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9162  0011CA  0E04               	movlw	4
  9163  0011CC  6E01               	movwf	dispLogs@myLog,c
  9164  0011CE  EC52  F014         	call	_dispLogs	;wreg free
  9165                           
  9166                           ;UI.c: 301: }
  9167  0011D2  D03C               	goto	i2l387
  9168  0011D4                     i2l5421:
  9169                           
  9170                           ;UI.c: 302: else if(back){
  9171  0011D4  505D               	movf	_back,w,c
  9172  0011D6  105E               	iorwf	_back+1,w,c
  9173  0011D8  B4D8               	btfsc	status,2,c
  9174  0011DA  D038               	goto	i2l387
  9175                           
  9176                           ;UI.c: 303: change_state_to_menu_23();
  9177  0011DC  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
  9178                           
  9179                           ;UI.c: 309: }
  9180                           
  9181                           ;UI.c: 308: break;
  9182                           
  9183                           ;UI.c: 307: default:
  9184                           
  9185                           ;UI.c: 304: }
  9186                           ;UI.c: 305: break;
  9187  0011E0  D035               	goto	i2l387
  9188  0011E2                     i2l5427:
  9189  0011E2  C0DF  F043         	movff	_cur_state,??_updateMenu
  9190  0011E6  C0E0  F044         	movff	_cur_state+1,??_updateMenu+1
  9191                           
  9192                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9193                           ; Switch size 1, requested type "space"
  9194                           ; Number of cases is 3, Range of values is 0 to 4
  9195                           ; switch strategies available:
  9196                           ; Name         Instructions Cycles
  9197                           ; simple_byte           10     6 (average)
  9198                           ;	Chosen strategy is simple_byte
  9199  0011EA  5044               	movf	??_updateMenu+1,w,c
  9200  0011EC  0A00               	xorlw	0	; case 0
  9201  0011EE  B4D8               	btfsc	status,2,c
  9202  0011F0  D007               	goto	i2l5785
  9203  0011F2  0A03               	xorlw	3	; case 3
  9204  0011F4  B4D8               	btfsc	status,2,c
  9205  0011F6  D015               	goto	i2l5787
  9206  0011F8  0A07               	xorlw	7	; case 4
  9207  0011FA  B4D8               	btfsc	status,2,c
  9208  0011FC  D020               	goto	i2l5789
  9209  0011FE  D026               	goto	i2l387
  9210  001200                     i2l5785:
  9211                           
  9212                           ; Switch size 1, requested type "space"
  9213                           ; Number of cases is 5, Range of values is 0 to 23
  9214                           ; switch strategies available:
  9215                           ; Name         Instructions Cycles
  9216                           ; simple_byte           16     9 (average)
  9217                           ;	Chosen strategy is simple_byte
  9218  001200  5043               	movf	??_updateMenu,w,c
  9219  001202  0A00               	xorlw	0	; case 0
  9220  001204  B4D8               	btfsc	status,2,c
  9221  001206  D6DC               	goto	i2l5279
  9222  001208  0A0B               	xorlw	11	; case 11
  9223  00120A  B4D8               	btfsc	status,2,c
  9224  00120C  D6DC               	goto	i2l5281
  9225  00120E  0A07               	xorlw	7	; case 12
  9226  001210  B4D8               	btfsc	status,2,c
  9227  001212  D6EE               	goto	i2l5293
  9228  001214  0A1A               	xorlw	26	; case 22
  9229  001216  B4D8               	btfsc	status,2,c
  9230  001218  D6F9               	goto	i2l5305
  9231  00121A  0A01               	xorlw	1	; case 23
  9232  00121C  B4D8               	btfsc	status,2,c
  9233  00121E  D70C               	goto	i2l5317
  9234  001220  D015               	goto	i2l387
  9235  001222                     i2l5787:
  9236                           
  9237                           ; Switch size 1, requested type "space"
  9238                           ; Number of cases is 4, Range of values is 243 to 255
  9239                           ; switch strategies available:
  9240                           ; Name         Instructions Cycles
  9241                           ; simple_byte           13     7 (average)
  9242                           ;	Chosen strategy is simple_byte
  9243  001222  5043               	movf	??_updateMenu,w,c
  9244  001224  0AF3               	xorlw	243	; case 243
  9245  001226  B4D8               	btfsc	status,2,c
  9246  001228  D71C               	goto	i2l5329
  9247  00122A  0A07               	xorlw	7	; case 244
  9248  00122C  B4D8               	btfsc	status,2,c
  9249  00122E  D739               	goto	i2l5345
  9250  001230  0A0A               	xorlw	10	; case 254
  9251  001232  B4D8               	btfsc	status,2,c
  9252  001234  D756               	goto	i2l5361
  9253  001236  0A01               	xorlw	1	; case 255
  9254  001238  B4D8               	btfsc	status,2,c
  9255  00123A  D773               	goto	i2l5377
  9256  00123C  D007               	goto	i2l387
  9257  00123E                     i2l5789:
  9258                           
  9259                           ; Switch size 1, requested type "space"
  9260                           ; Number of cases is 2, Range of values is 9 to 10
  9261                           ; switch strategies available:
  9262                           ; Name         Instructions Cycles
  9263                           ; simple_byte            7     4 (average)
  9264                           ;	Chosen strategy is simple_byte
  9265  00123E  5043               	movf	??_updateMenu,w,c
  9266  001240  0A09               	xorlw	9	; case 9
  9267  001242  B4D8               	btfsc	status,2,c
  9268  001244  D78E               	goto	i2l5393
  9269  001246  0A03               	xorlw	3	; case 10
  9270  001248  B4D8               	btfsc	status,2,c
  9271  00124A  D7AB               	goto	i2l5409
  9272  00124C                     i2l387:
  9273                           
  9274                           ;UI.c: 310: }
  9275                           ;UI.c: 311: (INTCONbits.GIE = 1);
  9276  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9277  00124E  0012               	return		;funcret
  9278  001250                     __end_of_updateMenu:
  9279                           	opt stack 0
  9280                           pclatu	equ	0xFFB
  9281                           pclath	equ	0xFFA
  9282                           tblptru	equ	0xFF8
  9283                           tblptrh	equ	0xFF7
  9284                           tblptrl	equ	0xFF6
  9285                           tablat	equ	0xFF5
  9286                           prodh	equ	0xFF4
  9287                           prodl	equ	0xFF3
  9288                           intcon	equ	0xFF2
  9289                           intcon3	equ	0xFF0
  9290                           indf0	equ	0xFEF
  9291                           postinc0	equ	0xFEE
  9292                           fsr0h	equ	0xFEA
  9293                           fsr0l	equ	0xFE9
  9294                           wreg	equ	0xFE8
  9295                           postdec1	equ	0xFE5
  9296                           fsr1h	equ	0xFE2
  9297                           fsr1l	equ	0xFE1
  9298                           indf2	equ	0xFDF
  9299                           postinc2	equ	0xFDE
  9300                           postdec2	equ	0xFDD
  9301                           fsr2h	equ	0xFDA
  9302                           fsr2l	equ	0xFD9
  9303                           status	equ	0xFD8
  9304                           
  9305 ;; *************** function i2_change_state_to_menu_start *****************
  9306 ;; Defined at:
  9307 ;;		line 415 in file "UI.c"
  9308 ;; Parameters:    Size  Location     Type
  9309 ;;		None
  9310 ;; Auto vars:     Size  Location     Type
  9311 ;;		None
  9312 ;; Return value:  Size  Location     Type
  9313 ;;                  1    wreg      void 
  9314 ;; Registers used:
  9315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9316 ;; Tracked objects:
  9317 ;;		On entry : 0/0
  9318 ;;		On exit  : 0/0
  9319 ;;		Unchanged: 0/0
  9320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;Total ram usage:        0 bytes
  9326 ;; Hardware stack levels used:    1
  9327 ;; Hardware stack levels required when called:    4
  9328 ;; This function calls:
  9329 ;;		i2_lcdInst
  9330 ;;		i2_printRTC
  9331 ;;		i2_printf
  9332 ;; This function is called by:
  9333 ;;		_updateMenu
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           	psect	text42
  9338  00278A                     __ptext42:
  9339                           	opt stack 0
  9340  00278A                     i2_change_state_to_menu_start:
  9341                           	opt stack 18
  9342                           
  9343                           ;UI.c: 416: cur_state = 0;
  9344                           
  9345                           ;incstack = 0
  9346  00278A  0E00               	movlw	0
  9347  00278C  0100               	movlb	0	; () banked
  9348  00278E  6FE0               	movwf	(_cur_state+1)& (0+255),b
  9349  002790  0E00               	movlw	0
  9350  002792  6FDF               	movwf	_cur_state& (0+255),b
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;UI.c: 418: lcdInst(0b10000000);;
  9354  002794  0E80               	movlw	128
  9355  002796  EC8A  F014         	call	i2_lcdInst
  9356                           
  9357                           ;UI.c: 419: printRTC();
  9358  00279A  EC28  F009         	call	i2_printRTC	;wreg free
  9359                           
  9360                           ;UI.c: 420: lcdInst(0b11000000);;
  9361  00279E  0EC0               	movlw	192
  9362  0027A0  EC8A  F014         	call	i2_lcdInst
  9363                           
  9364                           ;UI.c: 421: printf("PUSH TO CONTINUE");
  9365  0027A4  0E97               	movlw	low STR_15
  9366  0027A6  6E0D               	movwf	i2printf@f,c
  9367  0027A8  0EFF               	movlw	high STR_15
  9368  0027AA  6E0E               	movwf	i2printf@f+1,c
  9369  0027AC  ECC0  F004         	call	i2_printf	;wreg free
  9370  0027B0  0012               	return		;funcret
  9371  0027B2                     __end_ofi2_change_state_to_menu_start:
  9372                           	opt stack 0
  9373                           pclatu	equ	0xFFB
  9374                           pclath	equ	0xFFA
  9375                           tblptru	equ	0xFF8
  9376                           tblptrh	equ	0xFF7
  9377                           tblptrl	equ	0xFF6
  9378                           tablat	equ	0xFF5
  9379                           prodh	equ	0xFF4
  9380                           prodl	equ	0xFF3
  9381                           intcon	equ	0xFF2
  9382                           intcon3	equ	0xFF0
  9383                           indf0	equ	0xFEF
  9384                           postinc0	equ	0xFEE
  9385                           fsr0h	equ	0xFEA
  9386                           fsr0l	equ	0xFE9
  9387                           wreg	equ	0xFE8
  9388                           postdec1	equ	0xFE5
  9389                           fsr1h	equ	0xFE2
  9390                           fsr1l	equ	0xFE1
  9391                           indf2	equ	0xFDF
  9392                           postinc2	equ	0xFDE
  9393                           postdec2	equ	0xFDD
  9394                           fsr2h	equ	0xFDA
  9395                           fsr2l	equ	0xFD9
  9396                           status	equ	0xFD8
  9397                           
  9398 ;; *************** function i2_printRTC *****************
  9399 ;; Defined at:
  9400 ;;		line 61 in file "RTC.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;		None
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;  printRTC       14   44[COMRAM] int [7]
  9405 ;;  printRTC        4   60[COMRAM] unsigned char [4]
  9406 ;;  printRTC        2   64[COMRAM] int 
  9407 ;;  printRTC        2   58[COMRAM] int 
  9408 ;; Return value:  Size  Location     Type
  9409 ;;                  1    wreg      void 
  9410 ;; Registers used:
  9411 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9420 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9421 ;;Total ram usage:       25 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    3
  9424 ;; This function calls:
  9425 ;;		i2_getRTC
  9426 ;;		i2_lcdInst
  9427 ;;		i2_printf
  9428 ;;		i2_strcpy
  9429 ;; This function is called by:
  9430 ;;		i2_change_state_to_menu_start
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           	psect	text43
  9435  001250                     __ptext43:
  9436                           	opt stack 0
  9437  001250                     i2_printRTC:
  9438                           	opt stack 18
  9439                           
  9440                           ;RTC.c: 62: getRTC();
  9441                           
  9442                           ;incstack = 0
  9443  001250  EC0A  F010         	call	i2_getRTC	;wreg free
  9444                           
  9445                           ;RTC.c: 63: char month[] = "MMM";
  9446  001254  C0F2  F03D         	movff	printRTC@F3188,i2printRTC@month
  9447  001258  C0F3  F03E         	movff	printRTC@F3188+1,i2printRTC@month+1
  9448  00125C  C0F4  F03F         	movff	printRTC@F3188+2,i2printRTC@month+2
  9449  001260  C0F5  F040         	movff	printRTC@F3188+3,i2printRTC@month+3
  9450                           
  9451                           ;RTC.c: 64: int INT_time[7];
  9452                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  9453  001264  0E00               	movlw	0
  9454  001266  6E42               	movwf	i2printRTC@i+1,c
  9455  001268  0E00               	movlw	0
  9456  00126A  6E41               	movwf	i2printRTC@i,c
  9457  00126C  BE42               	btfsc	i2printRTC@i+1,7,c
  9458  00126E  D006               	goto	i2l4589
  9459  001270  5042               	movf	i2printRTC@i+1,w,c
  9460  001272  E135               	bnz	i2l878
  9461  001274  0E07               	movlw	7
  9462  001276  5C41               	subwf	i2printRTC@i,w,c
  9463  001278  B0D8               	btfsc	status,0,c
  9464  00127A  D031               	goto	i2l878
  9465  00127C                     i2l4589:
  9466                           
  9467                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9468  00127C  0ED4               	movlw	low _time
  9469  00127E  2441               	addwf	i2printRTC@i,w,c
  9470  001280  6ED9               	movwf	fsr2l,c
  9471  001282  0E00               	movlw	high _time
  9472  001284  2042               	addwfc	i2printRTC@i+1,w,c
  9473  001286  6EDA               	movwf	fsr2h,c
  9474  001288  50DF               	movf	indf2,w,c
  9475  00128A  6E2A               	movwf	??i2_printRTC& (0+255),c
  9476  00128C  3A2A               	swapf	??i2_printRTC,f,c
  9477  00128E  0E0F               	movlw	15
  9478  001290  162A               	andwf	??i2_printRTC,f,c
  9479  001292  0E0F               	movlw	15
  9480  001294  162A               	andwf	??i2_printRTC,f,c
  9481  001296  502A               	movf	??i2_printRTC,w,c
  9482  001298  0D0A               	mullw	10
  9483  00129A  0ED4               	movlw	low _time
  9484  00129C  2441               	addwf	i2printRTC@i,w,c
  9485  00129E  6ED9               	movwf	fsr2l,c
  9486  0012A0  0E00               	movlw	high _time
  9487  0012A2  2042               	addwfc	i2printRTC@i+1,w,c
  9488  0012A4  6EDA               	movwf	fsr2h,c
  9489  0012A6  50DF               	movf	indf2,w,c
  9490  0012A8  0B0F               	andlw	15
  9491  0012AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
  9492  0012AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
  9493  0012AE  50F3               	movf	prodl,w,c
  9494  0012B0  262B               	addwf	??i2_printRTC+1,f,c
  9495  0012B2  50F4               	movf	prodh,w,c
  9496  0012B4  222C               	addwfc	??i2_printRTC+2,f,c
  9497  0012B6  90D8               	bcf	status,0,c
  9498  0012B8  3441               	rlcf	i2printRTC@i,w,c
  9499  0012BA  6ED9               	movwf	fsr2l,c
  9500  0012BC  3442               	rlcf	i2printRTC@i+1,w,c
  9501  0012BE  6EDA               	movwf	fsr2h,c
  9502  0012C0  0E2D               	movlw	low i2printRTC@INT_time
  9503  0012C2  26D9               	addwf	fsr2l,f,c
  9504  0012C4  0E00               	movlw	high i2printRTC@INT_time
  9505  0012C6  22DA               	addwfc	fsr2h,f,c
  9506  0012C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
  9507  0012CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
  9508  0012D0  4A41               	infsnz	i2printRTC@i,f,c
  9509  0012D2  2A42               	incf	i2printRTC@i+1,f,c
  9510  0012D4  BE42               	btfsc	i2printRTC@i+1,7,c
  9511  0012D6  D7D2               	goto	i2l4589
  9512  0012D8  5042               	movf	i2printRTC@i+1,w,c
  9513  0012DA  E101               	bnz	i2u322_40
  9514  0012DC  D7CB               	goto	L7
  9515  0012DE                     i2u322_40:
  9516  0012DE                     i2l878:
  9517                           
  9518                           ;RTC.c: 67: }
  9519                           ;RTC.c: 68: int RTC_month = INT_time[5];
  9520  0012DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
  9521  0012E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
  9522                           
  9523                           ;RTC.c: 69: switch(RTC_month){
  9524  0012E6  D084               	goto	i2l4621
  9525  0012E8                     i2l4595:
  9526                           
  9527                           ;RTC.c: 71: strcpy(month, "Jan");
  9528  0012E8  0E3D               	movlw	low i2printRTC@month
  9529  0012EA  6E01               	movwf	i2strcpy@to,c
  9530  0012EC  0E00               	movlw	high i2printRTC@month
  9531  0012EE  6E02               	movwf	i2strcpy@to+1,c
  9532  0012F0  0EDB               	movlw	low STR_36
  9533  0012F2  6E03               	movwf	i2strcpy@from,c
  9534  0012F4  0EFF               	movlw	high STR_36
  9535  0012F6  6E04               	movwf	i2strcpy@from+1,c
  9536  0012F8  EC64  F012         	call	i2_strcpy	;wreg free
  9537                           
  9538                           ;RTC.c: 72: break;
  9539  0012FC  D0A6               	goto	i2l4623
  9540  0012FE                     i2l4597:
  9541                           
  9542                           ;RTC.c: 74: strcpy(month, "Feb");
  9543  0012FE  0E3D               	movlw	low i2printRTC@month
  9544  001300  6E01               	movwf	i2strcpy@to,c
  9545  001302  0E00               	movlw	high i2printRTC@month
  9546  001304  6E02               	movwf	i2strcpy@to+1,c
  9547  001306  0ECB               	movlw	low STR_37
  9548  001308  6E03               	movwf	i2strcpy@from,c
  9549  00130A  0EFF               	movlw	high STR_37
  9550  00130C  6E04               	movwf	i2strcpy@from+1,c
  9551  00130E  EC64  F012         	call	i2_strcpy	;wreg free
  9552                           
  9553                           ;RTC.c: 75: break;
  9554  001312  D09B               	goto	i2l4623
  9555  001314                     i2l4599:
  9556                           
  9557                           ;RTC.c: 77: strcpy(month, "Mar");
  9558  001314  0E3D               	movlw	low i2printRTC@month
  9559  001316  6E01               	movwf	i2strcpy@to,c
  9560  001318  0E00               	movlw	high i2printRTC@month
  9561  00131A  6E02               	movwf	i2strcpy@to+1,c
  9562  00131C  0EE7               	movlw	low STR_38
  9563  00131E  6E03               	movwf	i2strcpy@from,c
  9564  001320  0EFF               	movlw	high STR_38
  9565  001322  6E04               	movwf	i2strcpy@from+1,c
  9566  001324  EC64  F012         	call	i2_strcpy	;wreg free
  9567                           
  9568                           ;RTC.c: 78: break;
  9569  001328  D090               	goto	i2l4623
  9570  00132A                     i2l4601:
  9571                           
  9572                           ;RTC.c: 80: strcpy(month, "Apr");
  9573  00132A  0E3D               	movlw	low i2printRTC@month
  9574  00132C  6E01               	movwf	i2strcpy@to,c
  9575  00132E  0E00               	movlw	high i2printRTC@month
  9576  001330  6E02               	movwf	i2strcpy@to+1,c
  9577  001332  0EEB               	movlw	low STR_39
  9578  001334  6E03               	movwf	i2strcpy@from,c
  9579  001336  0EFF               	movlw	high STR_39
  9580  001338  6E04               	movwf	i2strcpy@from+1,c
  9581  00133A  EC64  F012         	call	i2_strcpy	;wreg free
  9582                           
  9583                           ;RTC.c: 81: break;
  9584  00133E  D085               	goto	i2l4623
  9585  001340                     i2l4603:
  9586                           
  9587                           ;RTC.c: 83: strcpy(month, "May");
  9588  001340  0E3D               	movlw	low i2printRTC@month
  9589  001342  6E01               	movwf	i2strcpy@to,c
  9590  001344  0E00               	movlw	high i2printRTC@month
  9591  001346  6E02               	movwf	i2strcpy@to+1,c
  9592  001348  0EF7               	movlw	low STR_40
  9593  00134A  6E03               	movwf	i2strcpy@from,c
  9594  00134C  0EFF               	movlw	high STR_40
  9595  00134E  6E04               	movwf	i2strcpy@from+1,c
  9596  001350  EC64  F012         	call	i2_strcpy	;wreg free
  9597                           
  9598                           ;RTC.c: 84: break;
  9599  001354  D07A               	goto	i2l4623
  9600  001356                     i2l4605:
  9601                           
  9602                           ;RTC.c: 86: strcpy(month, "Jun");
  9603  001356  0E3D               	movlw	low i2printRTC@month
  9604  001358  6E01               	movwf	i2strcpy@to,c
  9605  00135A  0E00               	movlw	high i2printRTC@month
  9606  00135C  6E02               	movwf	i2strcpy@to+1,c
  9607  00135E  0EDF               	movlw	low STR_41
  9608  001360  6E03               	movwf	i2strcpy@from,c
  9609  001362  0EFF               	movlw	high STR_41
  9610  001364  6E04               	movwf	i2strcpy@from+1,c
  9611  001366  EC64  F012         	call	i2_strcpy	;wreg free
  9612                           
  9613                           ;RTC.c: 87: break;
  9614  00136A  D06F               	goto	i2l4623
  9615  00136C                     i2l4607:
  9616                           
  9617                           ;RTC.c: 89: strcpy(month, "Jul");
  9618  00136C  0E3D               	movlw	low i2printRTC@month
  9619  00136E  6E01               	movwf	i2strcpy@to,c
  9620  001370  0E00               	movlw	high i2printRTC@month
  9621  001372  6E02               	movwf	i2strcpy@to+1,c
  9622  001374  0ED7               	movlw	low STR_42
  9623  001376  6E03               	movwf	i2strcpy@from,c
  9624  001378  0EFF               	movlw	high STR_42
  9625  00137A  6E04               	movwf	i2strcpy@from+1,c
  9626  00137C  EC64  F012         	call	i2_strcpy	;wreg free
  9627                           
  9628                           ;RTC.c: 90: break;
  9629  001380  D064               	goto	i2l4623
  9630  001382                     i2l4609:
  9631                           
  9632                           ;RTC.c: 92: strcpy(month, "Aug");
  9633  001382  0E3D               	movlw	low i2printRTC@month
  9634  001384  6E01               	movwf	i2strcpy@to,c
  9635  001386  0E00               	movlw	high i2printRTC@month
  9636  001388  6E02               	movwf	i2strcpy@to+1,c
  9637  00138A  0ED3               	movlw	low STR_43
  9638  00138C  6E03               	movwf	i2strcpy@from,c
  9639  00138E  0EFF               	movlw	high STR_43
  9640  001390  6E04               	movwf	i2strcpy@from+1,c
  9641  001392  EC64  F012         	call	i2_strcpy	;wreg free
  9642                           
  9643                           ;RTC.c: 93: break;
  9644  001396  D059               	goto	i2l4623
  9645  001398                     i2l4611:
  9646                           
  9647                           ;RTC.c: 95: strcpy(month, "Sep");
  9648  001398  0E3D               	movlw	low i2printRTC@month
  9649  00139A  6E01               	movwf	i2strcpy@to,c
  9650  00139C  0E00               	movlw	high i2printRTC@month
  9651  00139E  6E02               	movwf	i2strcpy@to+1,c
  9652  0013A0  0EE3               	movlw	low STR_44
  9653  0013A2  6E03               	movwf	i2strcpy@from,c
  9654  0013A4  0EFF               	movlw	high STR_44
  9655  0013A6  6E04               	movwf	i2strcpy@from+1,c
  9656  0013A8  EC64  F012         	call	i2_strcpy	;wreg free
  9657                           
  9658                           ;RTC.c: 96: break;
  9659  0013AC  D04E               	goto	i2l4623
  9660  0013AE                     i2l4613:
  9661                           
  9662                           ;RTC.c: 98: strcpy(month, "Oct");
  9663  0013AE  0E3D               	movlw	low i2printRTC@month
  9664  0013B0  6E01               	movwf	i2strcpy@to,c
  9665  0013B2  0E00               	movlw	high i2printRTC@month
  9666  0013B4  6E02               	movwf	i2strcpy@to+1,c
  9667  0013B6  0EEF               	movlw	low STR_45
  9668  0013B8  6E03               	movwf	i2strcpy@from,c
  9669  0013BA  0EFF               	movlw	high STR_45
  9670  0013BC  6E04               	movwf	i2strcpy@from+1,c
  9671  0013BE  EC64  F012         	call	i2_strcpy	;wreg free
  9672                           
  9673                           ;RTC.c: 99: break;
  9674  0013C2  D043               	goto	i2l4623
  9675  0013C4                     i2l4615:
  9676                           
  9677                           ;RTC.c: 101: strcpy(month, "Nov");
  9678  0013C4  0E3D               	movlw	low i2printRTC@month
  9679  0013C6  6E01               	movwf	i2strcpy@to,c
  9680  0013C8  0E00               	movlw	high i2printRTC@month
  9681  0013CA  6E02               	movwf	i2strcpy@to+1,c
  9682  0013CC  0EF3               	movlw	low STR_46
  9683  0013CE  6E03               	movwf	i2strcpy@from,c
  9684  0013D0  0EFF               	movlw	high STR_46
  9685  0013D2  6E04               	movwf	i2strcpy@from+1,c
  9686  0013D4  EC64  F012         	call	i2_strcpy	;wreg free
  9687                           
  9688                           ;RTC.c: 102: break;
  9689  0013D8  D038               	goto	i2l4623
  9690  0013DA                     i2l4617:
  9691                           
  9692                           ;RTC.c: 104: strcpy(month, "Dec");
  9693  0013DA  0E3D               	movlw	low i2printRTC@month
  9694  0013DC  6E01               	movwf	i2strcpy@to,c
  9695  0013DE  0E00               	movlw	high i2printRTC@month
  9696  0013E0  6E02               	movwf	i2strcpy@to+1,c
  9697  0013E2  0ECF               	movlw	low STR_47
  9698  0013E4  6E03               	movwf	i2strcpy@from,c
  9699  0013E6  0EFF               	movlw	high STR_47
  9700  0013E8  6E04               	movwf	i2strcpy@from+1,c
  9701  0013EA  EC64  F012         	call	i2_strcpy	;wreg free
  9702                           
  9703                           ;RTC.c: 106: }
  9704                           
  9705                           ;RTC.c: 105: break;
  9706  0013EE  D02D               	goto	i2l4623
  9707  0013F0                     i2l4621:
  9708  0013F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
  9709  0013F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
  9710                           
  9711                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9712                           ; Switch size 1, requested type "space"
  9713                           ; Number of cases is 1, Range of values is 0 to 0
  9714                           ; switch strategies available:
  9715                           ; Name         Instructions Cycles
  9716                           ; simple_byte            4     3 (average)
  9717                           ;	Chosen strategy is simple_byte
  9718  0013F8  502B               	movf	??i2_printRTC+1,w,c
  9719  0013FA  0A00               	xorlw	0	; case 0
  9720  0013FC  A4D8               	btfss	status,2,c
  9721  0013FE  D025               	goto	i2l4623
  9722                           
  9723                           ; Switch size 1, requested type "space"
  9724                           ; Number of cases is 12, Range of values is 1 to 12
  9725                           ; switch strategies available:
  9726                           ; Name         Instructions Cycles
  9727                           ; simple_byte           37    19 (average)
  9728                           ;	Chosen strategy is simple_byte
  9729  001400  502A               	movf	??i2_printRTC,w,c
  9730  001402  0A01               	xorlw	1	; case 1
  9731  001404  B4D8               	btfsc	status,2,c
  9732  001406  D770               	goto	i2l4595
  9733  001408  0A03               	xorlw	3	; case 2
  9734  00140A  B4D8               	btfsc	status,2,c
  9735  00140C  D778               	goto	i2l4597
  9736  00140E  0A01               	xorlw	1	; case 3
  9737  001410  B4D8               	btfsc	status,2,c
  9738  001412  D780               	goto	i2l4599
  9739  001414  0A07               	xorlw	7	; case 4
  9740  001416  B4D8               	btfsc	status,2,c
  9741  001418  D788               	goto	i2l4601
  9742  00141A  0A01               	xorlw	1	; case 5
  9743  00141C  B4D8               	btfsc	status,2,c
  9744  00141E  D790               	goto	i2l4603
  9745  001420  0A03               	xorlw	3	; case 6
  9746  001422  B4D8               	btfsc	status,2,c
  9747  001424  D798               	goto	i2l4605
  9748  001426  0A01               	xorlw	1	; case 7
  9749  001428  B4D8               	btfsc	status,2,c
  9750  00142A  D7A0               	goto	i2l4607
  9751  00142C  0A0F               	xorlw	15	; case 8
  9752  00142E  B4D8               	btfsc	status,2,c
  9753  001430  D7A8               	goto	i2l4609
  9754  001432  0A01               	xorlw	1	; case 9
  9755  001434  B4D8               	btfsc	status,2,c
  9756  001436  D7B0               	goto	i2l4611
  9757  001438  0A03               	xorlw	3	; case 10
  9758  00143A  B4D8               	btfsc	status,2,c
  9759  00143C  D7B8               	goto	i2l4613
  9760  00143E  0A01               	xorlw	1	; case 11
  9761  001440  B4D8               	btfsc	status,2,c
  9762  001442  D7C0               	goto	i2l4615
  9763  001444  0A07               	xorlw	7	; case 12
  9764  001446  B4D8               	btfsc	status,2,c
  9765  001448  D7C8               	goto	i2l4617
  9766  00144A                     i2l4623:
  9767                           
  9768                           ;RTC.c: 107: lcdInst(0b10000000);;
  9769  00144A  0E80               	movlw	128
  9770  00144C  EC8A  F014         	call	i2_lcdInst
  9771                           
  9772                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9773  001450  0ED0               	movlw	low STR_48
  9774  001452  6E0D               	movwf	i2printf@f,c
  9775  001454  0EFD               	movlw	high STR_48
  9776  001456  6E0E               	movwf	i2printf@f+1,c
  9777  001458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
  9778  00145C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
  9779  001460  0E3D               	movlw	low i2printRTC@month
  9780  001462  6E11               	movwf	?i2_printf+4,c
  9781  001464  0E00               	movlw	high i2printRTC@month
  9782  001466  6E12               	movwf	?i2_printf+5,c
  9783  001468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
  9784  00146C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
  9785  001470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
  9786  001474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
  9787  001478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
  9788  00147C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
  9789  001480  ECC0  F004         	call	i2_printf	;wreg free
  9790  001484  0012               	return		;funcret
  9791  001486                     __end_ofi2_printRTC:
  9792                           	opt stack 0
  9793                           pclatu	equ	0xFFB
  9794                           pclath	equ	0xFFA
  9795                           tblptru	equ	0xFF8
  9796                           tblptrh	equ	0xFF7
  9797                           tblptrl	equ	0xFF6
  9798                           tablat	equ	0xFF5
  9799                           prodh	equ	0xFF4
  9800                           prodl	equ	0xFF3
  9801                           intcon	equ	0xFF2
  9802                           intcon3	equ	0xFF0
  9803                           indf0	equ	0xFEF
  9804                           postinc0	equ	0xFEE
  9805                           fsr0h	equ	0xFEA
  9806                           fsr0l	equ	0xFE9
  9807                           wreg	equ	0xFE8
  9808                           postdec1	equ	0xFE5
  9809                           fsr1h	equ	0xFE2
  9810                           fsr1l	equ	0xFE1
  9811                           indf2	equ	0xFDF
  9812                           postinc2	equ	0xFDE
  9813                           postdec2	equ	0xFDD
  9814                           fsr2h	equ	0xFDA
  9815                           fsr2l	equ	0xFD9
  9816                           status	equ	0xFD8
  9817                           
  9818 ;; *************** function i2_strcpy *****************
  9819 ;; Defined at:
  9820 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;  to              2    0[COMRAM] PTR unsigned char 
  9823 ;;		 -> printRTC@month(4), 
  9824 ;;  from            2    2[COMRAM] PTR const unsigned char 
  9825 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  9826 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  9827 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
  9830 ;;		 -> printRTC@month(4), 
  9831 ;; Return value:  Size  Location     Type
  9832 ;;                  2    0[COMRAM] PTR unsigned char 
  9833 ;; Registers used:
  9834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9835 ;; Tracked objects:
  9836 ;;		On entry : 0/0
  9837 ;;		On exit  : 0/0
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9840 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9843 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9844 ;;Total ram usage:        6 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; This function calls:
  9847 ;;		Nothing
  9848 ;; This function is called by:
  9849 ;;		i2_printRTC
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           	psect	text44
  9854  0024C8                     __ptext44:
  9855                           	opt stack 0
  9856  0024C8                     i2_strcpy:
  9857                           	opt stack 20
  9858                           
  9859                           ;incstack = 0
  9860  0024C8  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
  9861  0024CC  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
  9862  0024D0  D004               	goto	i2l4365
  9863  0024D2                     i2l4363:
  9864  0024D2  4A05               	infsnz	i2strcpy@cp,f,c
  9865  0024D4  2A06               	incf	i2strcpy@cp+1,f,c
  9866  0024D6  4A03               	infsnz	i2strcpy@from,f,c
  9867  0024D8  2A04               	incf	i2strcpy@from+1,f,c
  9868  0024DA                     i2l4365:
  9869  0024DA  C003  FFF6         	movff	i2strcpy@from,tblptrl
  9870  0024DE  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
  9871  0024E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9872  0024E2  6AF8               	clrf	tblptru,c
  9873  0024E4                     	endif
  9874  0024E4                     	if	0	;tblptru may be non-zero
  9875  0024E4                     	endif
  9876  0024E4  C005  FFD9         	movff	i2strcpy@cp,fsr2l
  9877  0024E8  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
  9878  0024EC  0008               	tblrd		*
  9879  0024EE  CFF5 FFDF          	movff	tablat,indf2
  9880  0024F2  50DF               	movf	indf2,w,c
  9881  0024F4  B4D8               	btfsc	status,2,c
  9882  0024F6  0012               	return	
  9883  0024F8  D7EC               	goto	i2l4363
  9884  0024FA                     __end_ofi2_strcpy:
  9885                           	opt stack 0
  9886                           pclatu	equ	0xFFB
  9887                           pclath	equ	0xFFA
  9888                           tblptru	equ	0xFF8
  9889                           tblptrh	equ	0xFF7
  9890                           tblptrl	equ	0xFF6
  9891                           tablat	equ	0xFF5
  9892                           prodh	equ	0xFF4
  9893                           prodl	equ	0xFF3
  9894                           intcon	equ	0xFF2
  9895                           intcon3	equ	0xFF0
  9896                           indf0	equ	0xFEF
  9897                           postinc0	equ	0xFEE
  9898                           fsr0h	equ	0xFEA
  9899                           fsr0l	equ	0xFE9
  9900                           wreg	equ	0xFE8
  9901                           postdec1	equ	0xFE5
  9902                           fsr1h	equ	0xFE2
  9903                           fsr1l	equ	0xFE1
  9904                           indf2	equ	0xFDF
  9905                           postinc2	equ	0xFDE
  9906                           postdec2	equ	0xFDD
  9907                           fsr2h	equ	0xFDA
  9908                           fsr2l	equ	0xFD9
  9909                           status	equ	0xFD8
  9910                           
  9911 ;; *************** function _inputHandler *****************
  9912 ;; Defined at:
  9913 ;;		line 314 in file "UI.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;		None
  9916 ;; Auto vars:     Size  Location     Type
  9917 ;;		None
  9918 ;; Return value:  Size  Location     Type
  9919 ;;                  2   41[COMRAM] int 
  9920 ;; Registers used:
  9921 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9922 ;; Tracked objects:
  9923 ;;		On entry : 0/0
  9924 ;;		On exit  : 0/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9927 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;Total ram usage:        4 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; Hardware stack levels required when called:    4
  9934 ;; This function calls:
  9935 ;;		_change_state_to_logs_11
  9936 ;;		_change_state_to_logs_12
  9937 ;;		_change_state_to_logs_22
  9938 ;;		_change_state_to_logs_23
  9939 ;;		_change_state_to_logs_33
  9940 ;;		_change_state_to_logs_34
  9941 ;;		_change_state_to_menu_11
  9942 ;;		_change_state_to_menu_23
  9943 ;;		i2_change_state_to_menu_12
  9944 ;;		i2_change_state_to_menu_22
  9945 ;; This function is called by:
  9946 ;;		_updateMenu
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           	psect	text45
  9951  001680                     __ptext45:
  9952                           	opt stack 0
  9953  001680                     _inputHandler:
  9954                           	opt stack 18
  9955                           
  9956                           ;UI.c: 319: if(firstboot){
  9957                           
  9958                           ;incstack = 0
  9959  001680  5069               	movf	_firstboot,w,c
  9960  001682  106A               	iorwf	_firstboot+1,w,c
  9961  001684  B4D8               	btfsc	status,2,c
  9962  001686  D00B               	goto	i2l4691
  9963                           
  9964                           ;UI.c: 320: change_state_to_menu_11();
  9965  001688  ECC5  F012         	call	_change_state_to_menu_11	;wreg free
  9966                           
  9967                           ;UI.c: 321: firstboot = 0;
  9968  00168C  0E00               	movlw	0
  9969  00168E  6E6A               	movwf	_firstboot+1,c
  9970  001690  0E00               	movlw	0
  9971  001692  6E69               	movwf	_firstboot,c
  9972                           
  9973                           ;UI.c: 322: return 0;
  9974  001694  0E00               	movlw	0
  9975  001696  6E2B               	movwf	?_inputHandler+1,c
  9976  001698  0E00               	movlw	0
  9977  00169A  6E2A               	movwf	?_inputHandler,c
  9978  00169C  0012               	return	
  9979  00169E                     i2l4691:
  9980                           
  9981                           ;UI.c: 323: }
  9982                           ;UI.c: 324: if (logstate){
  9983  00169E  0100               	movlb	0	; () banked
  9984  0016A0  51ED               	movf	_logstate& (0+255),w,b
  9985  0016A2  0100               	movlb	0	; () banked
  9986  0016A4  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  9987  0016A6  B4D8               	btfsc	status,2,c
  9988  0016A8  D0C7               	goto	i2l4809
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;UI.c: 325: if(input == 'C' && PORTBbits.RB1 == 1){
  9992  0016AA  0E43               	movlw	67
  9993  0016AC  1879               	xorwf	_input,w,c
  9994  0016AE  A4D8               	btfss	status,2,c
  9995  0016B0  D012               	goto	i2l4709
  9996                           
  9997                           ; BSR set to: 0
  9998  0016B2  B281               	btfsc	3969,1,c	;volatile
  9999  0016B4  D009               	goto	i2l4701
 10000  0016B6  D00F               	goto	i2l4709
 10001  0016B8                     i2l4699:
 10002                           
 10003                           ;UI.c: 328: _delay((unsigned long)((10)*(32000000/4000.0)));
 10004  0016B8  0E68               	movlw	104
 10005  0016BA  6E2C               	movwf	??_inputHandler& (0+255),c
 10006  0016BC  0EE4               	movlw	228
 10007  0016BE                     i2u485_47:
 10008  0016BE  2EE8               	decfsz	wreg,f,c
 10009  0016C0  D7FE               	bra	i2u485_47
 10010  0016C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 10011  0016C4  D7FC               	bra	i2u485_47
 10012  0016C6  D000               	nop2	
 10013  0016C8                     i2l4701:
 10014  0016C8  B281               	btfsc	3969,1,c	;volatile
 10015  0016CA  D7F6               	goto	i2l4699
 10016  0016CC                     i2l4703:
 10017                           
 10018                           ;UI.c: 329: }
 10019                           ;UI.c: 330: return 0;
 10020  0016CC  0E00               	movlw	0
 10021  0016CE  6E2B               	movwf	?_inputHandler+1,c
 10022  0016D0  0E00               	movlw	0
 10023  0016D2  6E2A               	movwf	?_inputHandler,c
 10024  0016D4  0012               	return	
 10025  0016D6                     i2l4709:
 10026                           
 10027                           ;UI.c: 332: else if (input == 'D'){
 10028  0016D6  0E44               	movlw	68
 10029  0016D8  1879               	xorwf	_input,w,c
 10030  0016DA  A4D8               	btfss	status,2,c
 10031  0016DC  D7F7               	goto	i2l4703
 10032                           
 10033                           ;UI.c: 334: logstate = 0;
 10034  0016DE  0E00               	movlw	0
 10035  0016E0  0100               	movlb	0	; () banked
 10036  0016E2  6FEE               	movwf	(_logstate+1)& (0+255),b
 10037  0016E4  0E00               	movlw	0
 10038  0016E6  6FED               	movwf	_logstate& (0+255),b
 10039                           
 10040                           ;UI.c: 335: switch(cur_state){
 10041  0016E8  D012               	goto	i2l4727
 10042  0016EA                     i2l4713:
 10043                           
 10044                           ;UI.c: 337: change_state_to_logs_11();
 10045  0016EA  EC3D  F013         	call	_change_state_to_logs_11	;wreg free
 10046                           
 10047                           ;UI.c: 338: break;
 10048  0016EE  D7EE               	goto	i2l4703
 10049  0016F0                     i2l4715:
 10050                           
 10051                           ;UI.c: 340: change_state_to_logs_12();
 10052  0016F0  EC25  F013         	call	_change_state_to_logs_12	;wreg free
 10053                           
 10054                           ;UI.c: 341: break;
 10055  0016F4  D7EB               	goto	i2l4703
 10056  0016F6                     i2l4717:
 10057                           
 10058                           ;UI.c: 343: change_state_to_logs_22();
 10059  0016F6  EC0D  F013         	call	_change_state_to_logs_22	;wreg free
 10060                           
 10061                           ;UI.c: 344: break;
 10062  0016FA  D7E8               	goto	i2l4703
 10063  0016FC                     i2l4719:
 10064                           
 10065                           ;UI.c: 346: change_state_to_logs_23();
 10066  0016FC  EC83  F013         	call	_change_state_to_logs_23	;wreg free
 10067                           
 10068                           ;UI.c: 347: break;
 10069  001700  D7E5               	goto	i2l4703
 10070  001702                     i2l4721:
 10071                           
 10072                           ;UI.c: 349: change_state_to_logs_33();
 10073  001702  ECF5  F012         	call	_change_state_to_logs_33	;wreg free
 10074                           
 10075                           ;UI.c: 350: break;
 10076  001706  D7E2               	goto	i2l4703
 10077  001708                     i2l4723:
 10078                           
 10079                           ;UI.c: 352: change_state_to_logs_34();
 10080  001708  ECDD  F012         	call	_change_state_to_logs_34	;wreg free
 10081                           
 10082                           ;UI.c: 354: }
 10083                           
 10084                           ;UI.c: 353: break;
 10085  00170C  D7DF               	goto	i2l4703
 10086  00170E                     i2l4727:
 10087  00170E  C0DF  F02C         	movff	_cur_state,??_inputHandler
 10088  001712  C0E0  F02D         	movff	_cur_state+1,??_inputHandler+1
 10089                           
 10090                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10091                           ; Switch size 1, requested type "space"
 10092                           ; Number of cases is 2, Range of values is 3 to 4
 10093                           ; switch strategies available:
 10094                           ; Name         Instructions Cycles
 10095                           ; simple_byte            7     4 (average)
 10096                           ;	Chosen strategy is simple_byte
 10097  001716  502D               	movf	??_inputHandler+1,w,c
 10098  001718  0A03               	xorlw	3	; case 3
 10099  00171A  B4D8               	btfsc	status,2,c
 10100  00171C  D004               	goto	i2l5793
 10101  00171E  0A07               	xorlw	7	; case 4
 10102  001720  B4D8               	btfsc	status,2,c
 10103  001722  D00F               	goto	i2l5795
 10104  001724  D7D3               	goto	i2l4703
 10105  001726                     i2l5793:
 10106                           
 10107                           ; Switch size 1, requested type "space"
 10108                           ; Number of cases is 4, Range of values is 243 to 255
 10109                           ; switch strategies available:
 10110                           ; Name         Instructions Cycles
 10111                           ; simple_byte           13     7 (average)
 10112                           ;	Chosen strategy is simple_byte
 10113  001726  502C               	movf	??_inputHandler,w,c
 10114  001728  0AF3               	xorlw	243	; case 243
 10115  00172A  B4D8               	btfsc	status,2,c
 10116  00172C  D7DE               	goto	i2l4713
 10117  00172E  0A07               	xorlw	7	; case 244
 10118  001730  B4D8               	btfsc	status,2,c
 10119  001732  D7DE               	goto	i2l4715
 10120  001734  0A0A               	xorlw	10	; case 254
 10121  001736  B4D8               	btfsc	status,2,c
 10122  001738  D7DE               	goto	i2l4717
 10123  00173A  0A01               	xorlw	1	; case 255
 10124  00173C  B4D8               	btfsc	status,2,c
 10125  00173E  D7DE               	goto	i2l4719
 10126  001740  D7C5               	goto	i2l4703
 10127  001742                     i2l5795:
 10128                           
 10129                           ; Switch size 1, requested type "space"
 10130                           ; Number of cases is 2, Range of values is 9 to 10
 10131                           ; switch strategies available:
 10132                           ; Name         Instructions Cycles
 10133                           ; simple_byte            7     4 (average)
 10134                           ;	Chosen strategy is simple_byte
 10135  001742  502C               	movf	??_inputHandler,w,c
 10136  001744  0A09               	xorlw	9	; case 9
 10137  001746  B4D8               	btfsc	status,2,c
 10138  001748  D7DC               	goto	i2l4721
 10139  00174A  0A03               	xorlw	3	; case 10
 10140  00174C  B4D8               	btfsc	status,2,c
 10141  00174E  D7DC               	goto	i2l4723
 10142  001750  D7BD               	goto	i2l4703
 10143  001752                     i2l4739:
 10144                           
 10145                           ;UI.c: 364: if(cur_state == 11){
 10146  001752  0E0B               	movlw	11
 10147  001754  0100               	movlb	0	; () banked
 10148  001756  19DF               	xorwf	_cur_state& (0+255),w,b
 10149  001758  0100               	movlb	0	; () banked
 10150  00175A  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10151  00175C  A4D8               	btfss	status,2,c
 10152  00175E  D005               	goto	i2l4747
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;UI.c: 365: return 0;
 10156  001760  0E00               	movlw	0
 10157  001762  6E2B               	movwf	?_inputHandler+1,c
 10158  001764  0E00               	movlw	0
 10159  001766  6E2A               	movwf	?_inputHandler,c
 10160                           
 10161                           ; BSR set to: 0
 10162  001768  0012               	return	
 10163  00176A                     i2l4747:
 10164                           
 10165                           ; BSR set to: 0
 10166                           ;UI.c: 367: else{
 10167                           ;UI.c: 368: change_state_to_menu_11();
 10168  00176A  ECC5  F012         	call	_change_state_to_menu_11	;wreg free
 10169                           
 10170                           ;UI.c: 369: }
 10171                           ;UI.c: 370: return 0;
 10172  00176E  0E00               	movlw	0
 10173  001770  6E2B               	movwf	?_inputHandler+1,c
 10174  001772  0E00               	movlw	0
 10175  001774  6E2A               	movwf	?_inputHandler,c
 10176  001776  0012               	return	
 10177  001778                     i2l4753:
 10178                           
 10179                           ;UI.c: 372: if(cur_state == 22 | cur_state == 12){
 10180  001778  0E16               	movlw	22
 10181  00177A  0100               	movlb	0	; () banked
 10182  00177C  19DF               	xorwf	_cur_state& (0+255),w,b
 10183  00177E  0100               	movlb	0	; () banked
 10184  001780  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10185  001782  B4D8               	btfsc	status,2,c
 10186  001784  D007               	goto	i2l4757
 10187                           
 10188                           ; BSR set to: 0
 10189  001786  0E0C               	movlw	12
 10190  001788  0100               	movlb	0	; () banked
 10191  00178A  19DF               	xorwf	_cur_state& (0+255),w,b
 10192  00178C  0100               	movlb	0	; () banked
 10193  00178E  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10194  001790  A4D8               	btfss	status,2,c
 10195  001792  D005               	goto	i2l4763
 10196  001794                     i2l4757:
 10197                           
 10198                           ; BSR set to: 0
 10199                           ;UI.c: 373: return 0;
 10200  001794  0E00               	movlw	0
 10201  001796  6E2B               	movwf	?_inputHandler+1,c
 10202  001798  0E00               	movlw	0
 10203  00179A  6E2A               	movwf	?_inputHandler,c
 10204                           
 10205                           ; BSR set to: 0
 10206  00179C  0012               	return	
 10207  00179E                     i2l4763:
 10208                           
 10209                           ; BSR set to: 0
 10210                           ;UI.c: 375: else if(cur_state == 23){
 10211  00179E  0E17               	movlw	23
 10212  0017A0  0100               	movlb	0	; () banked
 10213  0017A2  19DF               	xorwf	_cur_state& (0+255),w,b
 10214  0017A4  0100               	movlb	0	; () banked
 10215  0017A6  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10216  0017A8  A4D8               	btfss	status,2,c
 10217  0017AA  D003               	goto	i2l4767
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;UI.c: 376: change_state_to_menu_22();
 10221  0017AC  EC7D  F012         	call	i2_change_state_to_menu_22	;wreg free
 10222                           
 10223                           ;UI.c: 377: }
 10224  0017B0  D002               	goto	i2l4769
 10225  0017B2                     i2l4767:
 10226                           
 10227                           ;UI.c: 378: else{
 10228                           ;UI.c: 379: change_state_to_menu_12();
 10229  0017B2  EC95  F012         	call	i2_change_state_to_menu_12	;wreg free
 10230  0017B6                     i2l4769:
 10231                           
 10232                           ;UI.c: 380: }
 10233                           ;UI.c: 381: return 0;
 10234  0017B6  0E00               	movlw	0
 10235  0017B8  6E2B               	movwf	?_inputHandler+1,c
 10236  0017BA  0E00               	movlw	0
 10237  0017BC  6E2A               	movwf	?_inputHandler,c
 10238  0017BE  0012               	return	
 10239  0017C0                     i2l4773:
 10240                           
 10241                           ;UI.c: 383: if(cur_state == 23){
 10242  0017C0  0E17               	movlw	23
 10243  0017C2  0100               	movlb	0	; () banked
 10244  0017C4  19DF               	xorwf	_cur_state& (0+255),w,b
 10245  0017C6  0100               	movlb	0	; () banked
 10246  0017C8  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10247  0017CA  A4D8               	btfss	status,2,c
 10248  0017CC  D005               	goto	i2l4781
 10249                           
 10250                           ; BSR set to: 0
 10251                           ;UI.c: 384: return 0;
 10252  0017CE  0E00               	movlw	0
 10253  0017D0  6E2B               	movwf	?_inputHandler+1,c
 10254  0017D2  0E00               	movlw	0
 10255  0017D4  6E2A               	movwf	?_inputHandler,c
 10256                           
 10257                           ; BSR set to: 0
 10258  0017D6  0012               	return	
 10259  0017D8                     i2l4781:
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;UI.c: 386: else{
 10263                           ;UI.c: 387: change_state_to_menu_23();
 10264  0017D8  ECAD  F012         	call	_change_state_to_menu_23	;wreg free
 10265                           
 10266                           ;UI.c: 388: }
 10267                           ;UI.c: 389: return 0;
 10268  0017DC  0E00               	movlw	0
 10269  0017DE  6E2B               	movwf	?_inputHandler+1,c
 10270  0017E0  0E00               	movlw	0
 10271  0017E2  6E2A               	movwf	?_inputHandler,c
 10272  0017E4  0012               	return	
 10273  0017E6                     i2l4787:
 10274                           
 10275                           ;UI.c: 392: up = 1;
 10276  0017E6  0E00               	movlw	0
 10277  0017E8  6E74               	movwf	_up+1,c
 10278  0017EA  0E01               	movlw	1
 10279  0017EC  6E73               	movwf	_up,c
 10280                           
 10281                           ;UI.c: 393: return 1;
 10282  0017EE  0E00               	movlw	0
 10283  0017F0  6E2B               	movwf	?_inputHandler+1,c
 10284  0017F2  0E01               	movlw	1
 10285  0017F4  6E2A               	movwf	?_inputHandler,c
 10286  0017F6  0012               	return	
 10287  0017F8                     i2l4791:
 10288                           
 10289                           ;UI.c: 395: down = 1;
 10290  0017F8  0E00               	movlw	0
 10291  0017FA  6E66               	movwf	_down+1,c
 10292  0017FC  0E01               	movlw	1
 10293  0017FE  6E65               	movwf	_down,c
 10294                           
 10295                           ;UI.c: 396: return 1;
 10296  001800  0E00               	movlw	0
 10297  001802  6E2B               	movwf	?_inputHandler+1,c
 10298  001804  0E01               	movlw	1
 10299  001806  6E2A               	movwf	?_inputHandler,c
 10300  001808  0012               	return	
 10301  00180A                     i2l4795:
 10302                           
 10303                           ;UI.c: 398: enter = 1;
 10304  00180A  0E00               	movlw	0
 10305  00180C  6E68               	movwf	_enter+1,c
 10306  00180E  0E01               	movlw	1
 10307  001810  6E67               	movwf	_enter,c
 10308                           
 10309                           ;UI.c: 399: return 1;
 10310  001812  0E00               	movlw	0
 10311  001814  6E2B               	movwf	?_inputHandler+1,c
 10312  001816  0E01               	movlw	1
 10313  001818  6E2A               	movwf	?_inputHandler,c
 10314  00181A  0012               	return	
 10315  00181C                     i2l4799:
 10316                           
 10317                           ;UI.c: 401: back = 1;
 10318  00181C  0E00               	movlw	0
 10319  00181E  6E5E               	movwf	_back+1,c
 10320  001820  0E01               	movlw	1
 10321  001822  6E5D               	movwf	_back,c
 10322                           
 10323                           ;UI.c: 402: return 1;
 10324  001824  0E00               	movlw	0
 10325  001826  6E2B               	movwf	?_inputHandler+1,c
 10326  001828  0E01               	movlw	1
 10327  00182A  6E2A               	movwf	?_inputHandler,c
 10328  00182C  0012               	return	
 10329  00182E                     i2l4803:
 10330                           
 10331                           ;UI.c: 405: return 1;
 10332  00182E  0E00               	movlw	0
 10333  001830  6E2B               	movwf	?_inputHandler+1,c
 10334  001832  0E01               	movlw	1
 10335  001834  6E2A               	movwf	?_inputHandler,c
 10336                           
 10337                           ;UI.c: 406: }
 10338  001836  0012               	return	
 10339  001838                     i2l4809:
 10340  001838  5079               	movf	_input,w,c
 10341                           
 10342                           ; Switch size 1, requested type "space"
 10343                           ; Number of cases is 7, Range of values is 49 to 68
 10344                           ; switch strategies available:
 10345                           ; Name         Instructions Cycles
 10346                           ; simple_byte           22    12 (average)
 10347                           ;	Chosen strategy is simple_byte
 10348  00183A  0A31               	xorlw	49	; case 49
 10349  00183C  B4D8               	btfsc	status,2,c
 10350  00183E  D789               	goto	i2l4739
 10351  001840  0A03               	xorlw	3	; case 50
 10352  001842  B4D8               	btfsc	status,2,c
 10353  001844  D799               	goto	i2l4753
 10354  001846  0A01               	xorlw	1	; case 51
 10355  001848  B4D8               	btfsc	status,2,c
 10356  00184A  D7BA               	goto	i2l4773
 10357  00184C  0A72               	xorlw	114	; case 65
 10358  00184E  B4D8               	btfsc	status,2,c
 10359  001850  D7CA               	goto	i2l4787
 10360  001852  0A03               	xorlw	3	; case 66
 10361  001854  B4D8               	btfsc	status,2,c
 10362  001856  D7D0               	goto	i2l4791
 10363  001858  0A01               	xorlw	1	; case 67
 10364  00185A  B4D8               	btfsc	status,2,c
 10365  00185C  D7D6               	goto	i2l4795
 10366  00185E  0A07               	xorlw	7	; case 68
 10367  001860  B4D8               	btfsc	status,2,c
 10368  001862  D7DC               	goto	i2l4799
 10369  001864  D7E4               	goto	i2l4803
 10370  001866                     __end_of_inputHandler:
 10371                           	opt stack 0
 10372                           pclatu	equ	0xFFB
 10373                           pclath	equ	0xFFA
 10374                           tblptru	equ	0xFF8
 10375                           tblptrh	equ	0xFF7
 10376                           tblptrl	equ	0xFF6
 10377                           tablat	equ	0xFF5
 10378                           prodh	equ	0xFF4
 10379                           prodl	equ	0xFF3
 10380                           intcon	equ	0xFF2
 10381                           intcon3	equ	0xFF0
 10382                           indf0	equ	0xFEF
 10383                           postinc0	equ	0xFEE
 10384                           fsr0h	equ	0xFEA
 10385                           fsr0l	equ	0xFE9
 10386                           wreg	equ	0xFE8
 10387                           postdec1	equ	0xFE5
 10388                           fsr1h	equ	0xFE2
 10389                           fsr1l	equ	0xFE1
 10390                           indf2	equ	0xFDF
 10391                           postinc2	equ	0xFDE
 10392                           postdec2	equ	0xFDD
 10393                           fsr2h	equ	0xFDA
 10394                           fsr2l	equ	0xFD9
 10395                           status	equ	0xFD8
 10396                           
 10397 ;; *************** function i2_change_state_to_menu_22 *****************
 10398 ;; Defined at:
 10399 ;;		line 439 in file "UI.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;		None
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;		None
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  1    wreg      void 
 10406 ;; Registers used:
 10407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10417 ;;Total ram usage:        0 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    3
 10420 ;; This function calls:
 10421 ;;		i2_lcdInst
 10422 ;;		i2_printf
 10423 ;; This function is called by:
 10424 ;;		_updateMenu
 10425 ;;		_inputHandler
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           	psect	text46
 10430  0024FA                     __ptext46:
 10431                           	opt stack 0
 10432  0024FA                     i2_change_state_to_menu_22:
 10433                           	opt stack 19
 10434                           
 10435                           ;UI.c: 440: cur_state = 22;
 10436                           
 10437                           ;incstack = 0
 10438  0024FA  0E00               	movlw	0
 10439  0024FC  0100               	movlb	0	; () banked
 10440  0024FE  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10441  002500  0E16               	movlw	22
 10442  002502  6FDF               	movwf	_cur_state& (0+255),b
 10443                           
 10444                           ; BSR set to: 0
 10445                           ;UI.c: 442: lcdInst(0b10000000);;
 10446  002504  0E80               	movlw	128
 10447  002506  EC8A  F014         	call	i2_lcdInst
 10448                           
 10449                           ;UI.c: 443: printf("2. SORT        <");
 10450  00250A  0E64               	movlw	low STR_19
 10451  00250C  6E0D               	movwf	i2printf@f,c
 10452  00250E  0EFF               	movlw	high STR_19
 10453  002510  6E0E               	movwf	i2printf@f+1,c
 10454  002512  ECC0  F004         	call	i2_printf	;wreg free
 10455                           
 10456                           ;UI.c: 444: lcdInst(0b11000000);;
 10457  002516  0EC0               	movlw	192
 10458  002518  EC8A  F014         	call	i2_lcdInst
 10459                           
 10460                           ;UI.c: 445: printf("3. LOGS         ");
 10461  00251C  0E65               	movlw	low STR_21
 10462  00251E  6E0D               	movwf	i2printf@f,c
 10463  002520  0EFE               	movlw	high STR_21
 10464  002522  6E0E               	movwf	i2printf@f+1,c
 10465  002524  ECC0  F004         	call	i2_printf	;wreg free
 10466  002528  0012               	return		;funcret
 10467  00252A                     __end_ofi2_change_state_to_menu_22:
 10468                           	opt stack 0
 10469                           pclatu	equ	0xFFB
 10470                           pclath	equ	0xFFA
 10471                           tblptru	equ	0xFF8
 10472                           tblptrh	equ	0xFF7
 10473                           tblptrl	equ	0xFF6
 10474                           tablat	equ	0xFF5
 10475                           prodh	equ	0xFF4
 10476                           prodl	equ	0xFF3
 10477                           intcon	equ	0xFF2
 10478                           intcon3	equ	0xFF0
 10479                           indf0	equ	0xFEF
 10480                           postinc0	equ	0xFEE
 10481                           fsr0h	equ	0xFEA
 10482                           fsr0l	equ	0xFE9
 10483                           wreg	equ	0xFE8
 10484                           postdec1	equ	0xFE5
 10485                           fsr1h	equ	0xFE2
 10486                           fsr1l	equ	0xFE1
 10487                           indf2	equ	0xFDF
 10488                           postinc2	equ	0xFDE
 10489                           postdec2	equ	0xFDD
 10490                           fsr2h	equ	0xFDA
 10491                           fsr2l	equ	0xFD9
 10492                           status	equ	0xFD8
 10493                           
 10494 ;; *************** function i2_change_state_to_menu_12 *****************
 10495 ;; Defined at:
 10496 ;;		line 431 in file "UI.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;		None
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;		None
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;Total ram usage:        0 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:    3
 10517 ;; This function calls:
 10518 ;;		i2_lcdInst
 10519 ;;		i2_printf
 10520 ;; This function is called by:
 10521 ;;		_updateMenu
 10522 ;;		_inputHandler
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text47
 10527  00252A                     __ptext47:
 10528                           	opt stack 0
 10529  00252A                     i2_change_state_to_menu_12:
 10530                           	opt stack 19
 10531                           
 10532                           ;UI.c: 432: cur_state = 12;
 10533                           
 10534                           ;incstack = 0
 10535  00252A  0E00               	movlw	0
 10536  00252C  0100               	movlb	0	; () banked
 10537  00252E  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10538  002530  0E0C               	movlw	12
 10539  002532  6FDF               	movwf	_cur_state& (0+255),b
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;UI.c: 434: lcdInst(0b10000000);;
 10543  002534  0E80               	movlw	128
 10544  002536  EC8A  F014         	call	i2_lcdInst
 10545                           
 10546                           ;UI.c: 435: printf("1. DATE/TIME    ");
 10547  00253A  0E87               	movlw	low STR_18
 10548  00253C  6E0D               	movwf	i2printf@f,c
 10549  00253E  0EFE               	movlw	high STR_18
 10550  002540  6E0E               	movwf	i2printf@f+1,c
 10551  002542  ECC0  F004         	call	i2_printf	;wreg free
 10552                           
 10553                           ;UI.c: 436: lcdInst(0b11000000);;
 10554  002546  0EC0               	movlw	192
 10555  002548  EC8A  F014         	call	i2_lcdInst
 10556                           
 10557                           ;UI.c: 437: printf("2. SORT        <");
 10558  00254C  0E64               	movlw	low STR_19
 10559  00254E  6E0D               	movwf	i2printf@f,c
 10560  002550  0EFF               	movlw	high STR_19
 10561  002552  6E0E               	movwf	i2printf@f+1,c
 10562  002554  ECC0  F004         	call	i2_printf	;wreg free
 10563  002558  0012               	return		;funcret
 10564  00255A                     __end_ofi2_change_state_to_menu_12:
 10565                           	opt stack 0
 10566                           pclatu	equ	0xFFB
 10567                           pclath	equ	0xFFA
 10568                           tblptru	equ	0xFF8
 10569                           tblptrh	equ	0xFF7
 10570                           tblptrl	equ	0xFF6
 10571                           tablat	equ	0xFF5
 10572                           prodh	equ	0xFF4
 10573                           prodl	equ	0xFF3
 10574                           intcon	equ	0xFF2
 10575                           intcon3	equ	0xFF0
 10576                           indf0	equ	0xFEF
 10577                           postinc0	equ	0xFEE
 10578                           fsr0h	equ	0xFEA
 10579                           fsr0l	equ	0xFE9
 10580                           wreg	equ	0xFE8
 10581                           postdec1	equ	0xFE5
 10582                           fsr1h	equ	0xFE2
 10583                           fsr1l	equ	0xFE1
 10584                           indf2	equ	0xFDF
 10585                           postinc2	equ	0xFDE
 10586                           postdec2	equ	0xFDD
 10587                           fsr2h	equ	0xFDA
 10588                           fsr2l	equ	0xFD9
 10589                           status	equ	0xFD8
 10590                           
 10591 ;; *************** function _change_state_to_menu_23 *****************
 10592 ;; Defined at:
 10593 ;;		line 447 in file "UI.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;		None
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;		None
 10598 ;; Return value:  Size  Location     Type
 10599 ;;                  1    wreg      void 
 10600 ;; Registers used:
 10601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10602 ;; Tracked objects:
 10603 ;;		On entry : 0/0
 10604 ;;		On exit  : 0/0
 10605 ;;		Unchanged: 0/0
 10606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10611 ;;Total ram usage:        0 bytes
 10612 ;; Hardware stack levels used:    1
 10613 ;; Hardware stack levels required when called:    3
 10614 ;; This function calls:
 10615 ;;		i2_lcdInst
 10616 ;;		i2_printf
 10617 ;; This function is called by:
 10618 ;;		_updateMenu
 10619 ;;		_inputHandler
 10620 ;; This function uses a non-reentrant model
 10621 ;;
 10622                           
 10623                           	psect	text48
 10624  00255A                     __ptext48:
 10625                           	opt stack 0
 10626  00255A                     _change_state_to_menu_23:
 10627                           	opt stack 18
 10628                           
 10629                           ;UI.c: 448: cur_state = 23;
 10630                           
 10631                           ;incstack = 0
 10632  00255A  0E00               	movlw	0
 10633  00255C  0100               	movlb	0	; () banked
 10634  00255E  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10635  002560  0E17               	movlw	23
 10636  002562  6FDF               	movwf	_cur_state& (0+255),b
 10637                           
 10638                           ; BSR set to: 0
 10639                           ;UI.c: 450: lcdInst(0b10000000);;
 10640  002564  0E80               	movlw	128
 10641  002566  EC8A  F014         	call	i2_lcdInst
 10642                           
 10643                           ;UI.c: 451: printf("2. SORT         ");
 10644  00256A  0E76               	movlw	low STR_17
 10645  00256C  6E0D               	movwf	i2printf@f,c
 10646  00256E  0EFE               	movlw	high STR_17
 10647  002570  6E0E               	movwf	i2printf@f+1,c
 10648  002572  ECC0  F004         	call	i2_printf	;wreg free
 10649                           
 10650                           ;UI.c: 452: lcdInst(0b11000000);;
 10651  002576  0EC0               	movlw	192
 10652  002578  EC8A  F014         	call	i2_lcdInst
 10653                           
 10654                           ;UI.c: 453: printf("3. LOGS        <");
 10655  00257C  0E53               	movlw	low STR_23
 10656  00257E  6E0D               	movwf	i2printf@f,c
 10657  002580  0EFF               	movlw	high STR_23
 10658  002582  6E0E               	movwf	i2printf@f+1,c
 10659  002584  ECC0  F004         	call	i2_printf	;wreg free
 10660  002588  0012               	return		;funcret
 10661  00258A                     __end_of_change_state_to_menu_23:
 10662                           	opt stack 0
 10663                           pclatu	equ	0xFFB
 10664                           pclath	equ	0xFFA
 10665                           tblptru	equ	0xFF8
 10666                           tblptrh	equ	0xFF7
 10667                           tblptrl	equ	0xFF6
 10668                           tablat	equ	0xFF5
 10669                           prodh	equ	0xFF4
 10670                           prodl	equ	0xFF3
 10671                           intcon	equ	0xFF2
 10672                           intcon3	equ	0xFF0
 10673                           indf0	equ	0xFEF
 10674                           postinc0	equ	0xFEE
 10675                           fsr0h	equ	0xFEA
 10676                           fsr0l	equ	0xFE9
 10677                           wreg	equ	0xFE8
 10678                           postdec1	equ	0xFE5
 10679                           fsr1h	equ	0xFE2
 10680                           fsr1l	equ	0xFE1
 10681                           indf2	equ	0xFDF
 10682                           postinc2	equ	0xFDE
 10683                           postdec2	equ	0xFDD
 10684                           fsr2h	equ	0xFDA
 10685                           fsr2l	equ	0xFD9
 10686                           status	equ	0xFD8
 10687                           
 10688 ;; *************** function _change_state_to_menu_11 *****************
 10689 ;; Defined at:
 10690 ;;		line 423 in file "UI.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;		None
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;		None
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  1    wreg      void 
 10697 ;; Registers used:
 10698 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10708 ;;Total ram usage:        0 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:    3
 10711 ;; This function calls:
 10712 ;;		i2_lcdInst
 10713 ;;		i2_printf
 10714 ;; This function is called by:
 10715 ;;		_updateMenu
 10716 ;;		_inputHandler
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           	psect	text49
 10721  00258A                     __ptext49:
 10722                           	opt stack 0
 10723  00258A                     _change_state_to_menu_11:
 10724                           	opt stack 18
 10725                           
 10726                           ;UI.c: 424: cur_state = 11;
 10727                           
 10728                           ;incstack = 0
 10729  00258A  0E00               	movlw	0
 10730  00258C  0100               	movlb	0	; () banked
 10731  00258E  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10732  002590  0E0B               	movlw	11
 10733  002592  6FDF               	movwf	_cur_state& (0+255),b
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;UI.c: 426: lcdInst(0b10000000);;
 10737  002594  0E80               	movlw	128
 10738  002596  EC8A  F014         	call	i2_lcdInst
 10739                           
 10740                           ;UI.c: 427: printf("1. DATE/TIME   <");
 10741  00259A  0E75               	movlw	low STR_16
 10742  00259C  6E0D               	movwf	i2printf@f,c
 10743  00259E  0EFF               	movlw	high STR_16
 10744  0025A0  6E0E               	movwf	i2printf@f+1,c
 10745  0025A2  ECC0  F004         	call	i2_printf	;wreg free
 10746                           
 10747                           ;UI.c: 428: lcdInst(0b11000000);;
 10748  0025A6  0EC0               	movlw	192
 10749  0025A8  EC8A  F014         	call	i2_lcdInst
 10750                           
 10751                           ;UI.c: 429: printf("2. SORT         ");
 10752  0025AC  0E76               	movlw	low STR_17
 10753  0025AE  6E0D               	movwf	i2printf@f,c
 10754  0025B0  0EFE               	movlw	high STR_17
 10755  0025B2  6E0E               	movwf	i2printf@f+1,c
 10756  0025B4  ECC0  F004         	call	i2_printf	;wreg free
 10757  0025B8  0012               	return		;funcret
 10758  0025BA                     __end_of_change_state_to_menu_11:
 10759                           	opt stack 0
 10760                           pclatu	equ	0xFFB
 10761                           pclath	equ	0xFFA
 10762                           tblptru	equ	0xFF8
 10763                           tblptrh	equ	0xFF7
 10764                           tblptrl	equ	0xFF6
 10765                           tablat	equ	0xFF5
 10766                           prodh	equ	0xFF4
 10767                           prodl	equ	0xFF3
 10768                           intcon	equ	0xFF2
 10769                           intcon3	equ	0xFF0
 10770                           indf0	equ	0xFEF
 10771                           postinc0	equ	0xFEE
 10772                           fsr0h	equ	0xFEA
 10773                           fsr0l	equ	0xFE9
 10774                           wreg	equ	0xFE8
 10775                           postdec1	equ	0xFE5
 10776                           fsr1h	equ	0xFE2
 10777                           fsr1l	equ	0xFE1
 10778                           indf2	equ	0xFDF
 10779                           postinc2	equ	0xFDE
 10780                           postdec2	equ	0xFDD
 10781                           fsr2h	equ	0xFDA
 10782                           fsr2l	equ	0xFD9
 10783                           status	equ	0xFD8
 10784                           
 10785 ;; *************** function _change_state_to_logs_34 *****************
 10786 ;; Defined at:
 10787 ;;		line 490 in file "UI.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;		None
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;		None
 10792 ;; Return value:  Size  Location     Type
 10793 ;;                  1    wreg      void 
 10794 ;; Registers used:
 10795 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10796 ;; Tracked objects:
 10797 ;;		On entry : 0/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10805 ;;Total ram usage:        0 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; Hardware stack levels required when called:    3
 10808 ;; This function calls:
 10809 ;;		i2_lcdInst
 10810 ;;		i2_printf
 10811 ;; This function is called by:
 10812 ;;		_updateMenu
 10813 ;;		_inputHandler
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           	psect	text50
 10818  0025BA                     __ptext50:
 10819                           	opt stack 0
 10820  0025BA                     _change_state_to_logs_34:
 10821                           	opt stack 18
 10822                           
 10823                           ;UI.c: 491: cur_state = 1034;
 10824                           
 10825                           ;incstack = 0
 10826  0025BA  0E04               	movlw	4
 10827  0025BC  0100               	movlb	0	; () banked
 10828  0025BE  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10829  0025C0  0E0A               	movlw	10
 10830  0025C2  6FDF               	movwf	_cur_state& (0+255),b
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;UI.c: 492: lcdInst(0b10000000);;
 10834  0025C4  0E80               	movlw	128
 10835  0025C6  EC8A  F014         	call	i2_lcdInst
 10836                           
 10837                           ;UI.c: 493: printf("LOG 3           ");
 10838  0025CA  0E43               	movlw	low STR_29
 10839  0025CC  6E0D               	movwf	i2printf@f,c
 10840  0025CE  0EFE               	movlw	high STR_29
 10841  0025D0  6E0E               	movwf	i2printf@f+1,c
 10842  0025D2  ECC0  F004         	call	i2_printf	;wreg free
 10843                           
 10844                           ;UI.c: 494: lcdInst(0b11000000);;
 10845  0025D6  0EC0               	movlw	192
 10846  0025D8  EC8A  F014         	call	i2_lcdInst
 10847                           
 10848                           ;UI.c: 495: printf("LOG 4          <");
 10849  0025DC  0E42               	movlw	low STR_35
 10850  0025DE  6E0D               	movwf	i2printf@f,c
 10851  0025E0  0EFF               	movlw	high STR_35
 10852  0025E2  6E0E               	movwf	i2printf@f+1,c
 10853  0025E4  ECC0  F004         	call	i2_printf	;wreg free
 10854  0025E8  0012               	return		;funcret
 10855  0025EA                     __end_of_change_state_to_logs_34:
 10856                           	opt stack 0
 10857                           pclatu	equ	0xFFB
 10858                           pclath	equ	0xFFA
 10859                           tblptru	equ	0xFF8
 10860                           tblptrh	equ	0xFF7
 10861                           tblptrl	equ	0xFF6
 10862                           tablat	equ	0xFF5
 10863                           prodh	equ	0xFF4
 10864                           prodl	equ	0xFF3
 10865                           intcon	equ	0xFF2
 10866                           intcon3	equ	0xFF0
 10867                           indf0	equ	0xFEF
 10868                           postinc0	equ	0xFEE
 10869                           fsr0h	equ	0xFEA
 10870                           fsr0l	equ	0xFE9
 10871                           wreg	equ	0xFE8
 10872                           postdec1	equ	0xFE5
 10873                           fsr1h	equ	0xFE2
 10874                           fsr1l	equ	0xFE1
 10875                           indf2	equ	0xFDF
 10876                           postinc2	equ	0xFDE
 10877                           postdec2	equ	0xFDD
 10878                           fsr2h	equ	0xFDA
 10879                           fsr2l	equ	0xFD9
 10880                           status	equ	0xFD8
 10881                           
 10882 ;; *************** function _change_state_to_logs_33 *****************
 10883 ;; Defined at:
 10884 ;;		line 483 in file "UI.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;		None
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;		None
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  1    wreg      void 
 10891 ;; Registers used:
 10892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;Total ram usage:        0 bytes
 10903 ;; Hardware stack levels used:    1
 10904 ;; Hardware stack levels required when called:    3
 10905 ;; This function calls:
 10906 ;;		i2_lcdInst
 10907 ;;		i2_printf
 10908 ;; This function is called by:
 10909 ;;		_updateMenu
 10910 ;;		_inputHandler
 10911 ;; This function uses a non-reentrant model
 10912 ;;
 10913                           
 10914                           	psect	text51
 10915  0025EA                     __ptext51:
 10916                           	opt stack 0
 10917  0025EA                     _change_state_to_logs_33:
 10918                           	opt stack 18
 10919                           
 10920                           ;UI.c: 484: cur_state = 1033;
 10921                           
 10922                           ;incstack = 0
 10923  0025EA  0E04               	movlw	4
 10924  0025EC  0100               	movlb	0	; () banked
 10925  0025EE  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10926  0025F0  0E09               	movlw	9
 10927  0025F2  6FDF               	movwf	_cur_state& (0+255),b
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;UI.c: 485: lcdInst(0b10000000);;
 10931  0025F4  0E80               	movlw	128
 10932  0025F6  EC8A  F014         	call	i2_lcdInst
 10933                           
 10934                           ;UI.c: 486: printf("LOG 3          <");
 10935  0025FA  0E31               	movlw	low STR_31
 10936  0025FC  6E0D               	movwf	i2printf@f,c
 10937  0025FE  0EFF               	movlw	high STR_31
 10938  002600  6E0E               	movwf	i2printf@f+1,c
 10939  002602  ECC0  F004         	call	i2_printf	;wreg free
 10940                           
 10941                           ;UI.c: 487: lcdInst(0b11000000);;
 10942  002606  0EC0               	movlw	192
 10943  002608  EC8A  F014         	call	i2_lcdInst
 10944                           
 10945                           ;UI.c: 488: printf("LOG 4           ");
 10946  00260C  0E54               	movlw	low STR_33
 10947  00260E  6E0D               	movwf	i2printf@f,c
 10948  002610  0EFE               	movlw	high STR_33
 10949  002612  6E0E               	movwf	i2printf@f+1,c
 10950  002614  ECC0  F004         	call	i2_printf	;wreg free
 10951  002618  0012               	return		;funcret
 10952  00261A                     __end_of_change_state_to_logs_33:
 10953                           	opt stack 0
 10954                           pclatu	equ	0xFFB
 10955                           pclath	equ	0xFFA
 10956                           tblptru	equ	0xFF8
 10957                           tblptrh	equ	0xFF7
 10958                           tblptrl	equ	0xFF6
 10959                           tablat	equ	0xFF5
 10960                           prodh	equ	0xFF4
 10961                           prodl	equ	0xFF3
 10962                           intcon	equ	0xFF2
 10963                           intcon3	equ	0xFF0
 10964                           indf0	equ	0xFEF
 10965                           postinc0	equ	0xFEE
 10966                           fsr0h	equ	0xFEA
 10967                           fsr0l	equ	0xFE9
 10968                           wreg	equ	0xFE8
 10969                           postdec1	equ	0xFE5
 10970                           fsr1h	equ	0xFE2
 10971                           fsr1l	equ	0xFE1
 10972                           indf2	equ	0xFDF
 10973                           postinc2	equ	0xFDE
 10974                           postdec2	equ	0xFDD
 10975                           fsr2h	equ	0xFDA
 10976                           fsr2l	equ	0xFD9
 10977                           status	equ	0xFD8
 10978                           
 10979 ;; *************** function _change_state_to_logs_23 *****************
 10980 ;; Defined at:
 10981 ;;		line 476 in file "UI.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;		None
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;		None
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      void 
 10988 ;; Registers used:
 10989 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10999 ;;Total ram usage:        0 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    3
 11002 ;; This function calls:
 11003 ;;		i2_lcdInst
 11004 ;;		i2_printf
 11005 ;; This function is called by:
 11006 ;;		_updateMenu
 11007 ;;		_inputHandler
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           	psect	text52
 11012  002706                     __ptext52:
 11013                           	opt stack 0
 11014  002706                     _change_state_to_logs_23:
 11015                           	opt stack 18
 11016                           
 11017                           ;UI.c: 477: cur_state = 1023;
 11018                           
 11019                           ;incstack = 0
 11020  002706  0E03               	movlw	3
 11021  002708  0100               	movlb	0	; () banked
 11022  00270A  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11023  00270C  69DF               	setf	_cur_state& (0+255),b
 11024                           
 11025                           ; BSR set to: 0
 11026                           ;UI.c: 478: lcdInst(0b10000000);;
 11027  00270E  0E80               	movlw	128
 11028  002710  EC8A  F014         	call	i2_lcdInst
 11029                           
 11030                           ;UI.c: 479: printf("LOG 2           ");
 11031  002714  0E32               	movlw	low STR_25
 11032  002716  6E0D               	movwf	i2printf@f,c
 11033  002718  0EFE               	movlw	high STR_25
 11034  00271A  6E0E               	movwf	i2printf@f+1,c
 11035  00271C  ECC0  F004         	call	i2_printf	;wreg free
 11036                           
 11037                           ;UI.c: 480: lcdInst(0b11000000);;
 11038  002720  0EC0               	movlw	192
 11039  002722  EC8A  F014         	call	i2_lcdInst
 11040                           
 11041                           ;UI.c: 481: printf("LOG 3          <");
 11042  002726  0E31               	movlw	low STR_31
 11043  002728  6E0D               	movwf	i2printf@f,c
 11044  00272A  0EFF               	movlw	high STR_31
 11045  00272C  6E0E               	movwf	i2printf@f+1,c
 11046  00272E  ECC0  F004         	call	i2_printf	;wreg free
 11047  002732  0012               	return		;funcret
 11048  002734                     __end_of_change_state_to_logs_23:
 11049                           	opt stack 0
 11050                           pclatu	equ	0xFFB
 11051                           pclath	equ	0xFFA
 11052                           tblptru	equ	0xFF8
 11053                           tblptrh	equ	0xFF7
 11054                           tblptrl	equ	0xFF6
 11055                           tablat	equ	0xFF5
 11056                           prodh	equ	0xFF4
 11057                           prodl	equ	0xFF3
 11058                           intcon	equ	0xFF2
 11059                           intcon3	equ	0xFF0
 11060                           indf0	equ	0xFEF
 11061                           postinc0	equ	0xFEE
 11062                           fsr0h	equ	0xFEA
 11063                           fsr0l	equ	0xFE9
 11064                           wreg	equ	0xFE8
 11065                           postdec1	equ	0xFE5
 11066                           fsr1h	equ	0xFE2
 11067                           fsr1l	equ	0xFE1
 11068                           indf2	equ	0xFDF
 11069                           postinc2	equ	0xFDE
 11070                           postdec2	equ	0xFDD
 11071                           fsr2h	equ	0xFDA
 11072                           fsr2l	equ	0xFD9
 11073                           status	equ	0xFD8
 11074                           
 11075 ;; *************** function _change_state_to_logs_22 *****************
 11076 ;; Defined at:
 11077 ;;		line 469 in file "UI.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;		None
 11080 ;; Auto vars:     Size  Location     Type
 11081 ;;		None
 11082 ;; Return value:  Size  Location     Type
 11083 ;;                  1    wreg      void 
 11084 ;; Registers used:
 11085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11086 ;; Tracked objects:
 11087 ;;		On entry : 0/0
 11088 ;;		On exit  : 0/0
 11089 ;;		Unchanged: 0/0
 11090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;Total ram usage:        0 bytes
 11096 ;; Hardware stack levels used:    1
 11097 ;; Hardware stack levels required when called:    3
 11098 ;; This function calls:
 11099 ;;		i2_lcdInst
 11100 ;;		i2_printf
 11101 ;; This function is called by:
 11102 ;;		_updateMenu
 11103 ;;		_inputHandler
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107                           	psect	text53
 11108  00261A                     __ptext53:
 11109                           	opt stack 0
 11110  00261A                     _change_state_to_logs_22:
 11111                           	opt stack 18
 11112                           
 11113                           ;UI.c: 470: cur_state = 1022;
 11114                           
 11115                           ;incstack = 0
 11116  00261A  0E03               	movlw	3
 11117  00261C  0100               	movlb	0	; () banked
 11118  00261E  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11119  002620  0EFE               	movlw	254
 11120  002622  6FDF               	movwf	_cur_state& (0+255),b
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;UI.c: 471: lcdInst(0b10000000);;
 11124  002624  0E80               	movlw	128
 11125  002626  EC8A  F014         	call	i2_lcdInst
 11126                           
 11127                           ;UI.c: 472: printf("LOG 2          <");
 11128  00262A  0E20               	movlw	low STR_27
 11129  00262C  6E0D               	movwf	i2printf@f,c
 11130  00262E  0EFF               	movlw	high STR_27
 11131  002630  6E0E               	movwf	i2printf@f+1,c
 11132  002632  ECC0  F004         	call	i2_printf	;wreg free
 11133                           
 11134                           ;UI.c: 473: lcdInst(0b11000000);;
 11135  002636  0EC0               	movlw	192
 11136  002638  EC8A  F014         	call	i2_lcdInst
 11137                           
 11138                           ;UI.c: 474: printf("LOG 3           ");
 11139  00263C  0E43               	movlw	low STR_29
 11140  00263E  6E0D               	movwf	i2printf@f,c
 11141  002640  0EFE               	movlw	high STR_29
 11142  002642  6E0E               	movwf	i2printf@f+1,c
 11143  002644  ECC0  F004         	call	i2_printf	;wreg free
 11144  002648  0012               	return		;funcret
 11145  00264A                     __end_of_change_state_to_logs_22:
 11146                           	opt stack 0
 11147                           pclatu	equ	0xFFB
 11148                           pclath	equ	0xFFA
 11149                           tblptru	equ	0xFF8
 11150                           tblptrh	equ	0xFF7
 11151                           tblptrl	equ	0xFF6
 11152                           tablat	equ	0xFF5
 11153                           prodh	equ	0xFF4
 11154                           prodl	equ	0xFF3
 11155                           intcon	equ	0xFF2
 11156                           intcon3	equ	0xFF0
 11157                           indf0	equ	0xFEF
 11158                           postinc0	equ	0xFEE
 11159                           fsr0h	equ	0xFEA
 11160                           fsr0l	equ	0xFE9
 11161                           wreg	equ	0xFE8
 11162                           postdec1	equ	0xFE5
 11163                           fsr1h	equ	0xFE2
 11164                           fsr1l	equ	0xFE1
 11165                           indf2	equ	0xFDF
 11166                           postinc2	equ	0xFDE
 11167                           postdec2	equ	0xFDD
 11168                           fsr2h	equ	0xFDA
 11169                           fsr2l	equ	0xFD9
 11170                           status	equ	0xFD8
 11171                           
 11172 ;; *************** function _change_state_to_logs_12 *****************
 11173 ;; Defined at:
 11174 ;;		line 462 in file "UI.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;		None
 11177 ;; Auto vars:     Size  Location     Type
 11178 ;;		None
 11179 ;; Return value:  Size  Location     Type
 11180 ;;                  1    wreg      void 
 11181 ;; Registers used:
 11182 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11183 ;; Tracked objects:
 11184 ;;		On entry : 0/0
 11185 ;;		On exit  : 0/0
 11186 ;;		Unchanged: 0/0
 11187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11192 ;;Total ram usage:        0 bytes
 11193 ;; Hardware stack levels used:    1
 11194 ;; Hardware stack levels required when called:    3
 11195 ;; This function calls:
 11196 ;;		i2_lcdInst
 11197 ;;		i2_printf
 11198 ;; This function is called by:
 11199 ;;		_updateMenu
 11200 ;;		_inputHandler
 11201 ;; This function uses a non-reentrant model
 11202 ;;
 11203                           
 11204                           	psect	text54
 11205  00264A                     __ptext54:
 11206                           	opt stack 0
 11207  00264A                     _change_state_to_logs_12:
 11208                           	opt stack 18
 11209                           
 11210                           ;UI.c: 463: cur_state = 1012;
 11211                           
 11212                           ;incstack = 0
 11213  00264A  0E03               	movlw	3
 11214  00264C  0100               	movlb	0	; () banked
 11215  00264E  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11216  002650  0EF4               	movlw	244
 11217  002652  6FDF               	movwf	_cur_state& (0+255),b
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;UI.c: 464: lcdInst(0b10000000);;
 11221  002654  0E80               	movlw	128
 11222  002656  EC8A  F014         	call	i2_lcdInst
 11223                           
 11224                           ;UI.c: 465: printf("LOG 1           ");
 11225  00265A  0E21               	movlw	low STR_26
 11226  00265C  6E0D               	movwf	i2printf@f,c
 11227  00265E  0EFE               	movlw	high STR_26
 11228  002660  6E0E               	movwf	i2printf@f+1,c
 11229  002662  ECC0  F004         	call	i2_printf	;wreg free
 11230                           
 11231                           ;UI.c: 466: lcdInst(0b11000000);;
 11232  002666  0EC0               	movlw	192
 11233  002668  EC8A  F014         	call	i2_lcdInst
 11234                           
 11235                           ;UI.c: 467: printf("LOG 2          <");
 11236  00266C  0E20               	movlw	low STR_27
 11237  00266E  6E0D               	movwf	i2printf@f,c
 11238  002670  0EFF               	movlw	high STR_27
 11239  002672  6E0E               	movwf	i2printf@f+1,c
 11240  002674  ECC0  F004         	call	i2_printf	;wreg free
 11241  002678  0012               	return		;funcret
 11242  00267A                     __end_of_change_state_to_logs_12:
 11243                           	opt stack 0
 11244                           pclatu	equ	0xFFB
 11245                           pclath	equ	0xFFA
 11246                           tblptru	equ	0xFF8
 11247                           tblptrh	equ	0xFF7
 11248                           tblptrl	equ	0xFF6
 11249                           tablat	equ	0xFF5
 11250                           prodh	equ	0xFF4
 11251                           prodl	equ	0xFF3
 11252                           intcon	equ	0xFF2
 11253                           intcon3	equ	0xFF0
 11254                           indf0	equ	0xFEF
 11255                           postinc0	equ	0xFEE
 11256                           fsr0h	equ	0xFEA
 11257                           fsr0l	equ	0xFE9
 11258                           wreg	equ	0xFE8
 11259                           postdec1	equ	0xFE5
 11260                           fsr1h	equ	0xFE2
 11261                           fsr1l	equ	0xFE1
 11262                           indf2	equ	0xFDF
 11263                           postinc2	equ	0xFDE
 11264                           postdec2	equ	0xFDD
 11265                           fsr2h	equ	0xFDA
 11266                           fsr2l	equ	0xFD9
 11267                           status	equ	0xFD8
 11268                           
 11269 ;; *************** function _change_state_to_logs_11 *****************
 11270 ;; Defined at:
 11271 ;;		line 455 in file "UI.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;		None
 11274 ;; Auto vars:     Size  Location     Type
 11275 ;;		None
 11276 ;; Return value:  Size  Location     Type
 11277 ;;                  1    wreg      void 
 11278 ;; Registers used:
 11279 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11280 ;; Tracked objects:
 11281 ;;		On entry : 0/0
 11282 ;;		On exit  : 0/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11289 ;;Total ram usage:        0 bytes
 11290 ;; Hardware stack levels used:    1
 11291 ;; Hardware stack levels required when called:    3
 11292 ;; This function calls:
 11293 ;;		i2_lcdInst
 11294 ;;		i2_printf
 11295 ;; This function is called by:
 11296 ;;		_updateMenu
 11297 ;;		_inputHandler
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           	psect	text55
 11302  00267A                     __ptext55:
 11303                           	opt stack 0
 11304  00267A                     _change_state_to_logs_11:
 11305                           	opt stack 18
 11306                           
 11307                           ;UI.c: 456: cur_state = 1011;
 11308                           
 11309                           ;incstack = 0
 11310  00267A  0E03               	movlw	3
 11311  00267C  0100               	movlb	0	; () banked
 11312  00267E  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11313  002680  0EF3               	movlw	243
 11314  002682  6FDF               	movwf	_cur_state& (0+255),b
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;UI.c: 457: lcdInst(0b10000000);;
 11318  002684  0E80               	movlw	128
 11319  002686  EC8A  F014         	call	i2_lcdInst
 11320                           
 11321                           ;UI.c: 458: printf("LOG 1          <");
 11322  00268A  0E0F               	movlw	low STR_24
 11323  00268C  6E0D               	movwf	i2printf@f,c
 11324  00268E  0EFF               	movlw	high STR_24
 11325  002690  6E0E               	movwf	i2printf@f+1,c
 11326  002692  ECC0  F004         	call	i2_printf	;wreg free
 11327                           
 11328                           ;UI.c: 459: lcdInst(0b11000000);;
 11329  002696  0EC0               	movlw	192
 11330  002698  EC8A  F014         	call	i2_lcdInst
 11331                           
 11332                           ;UI.c: 460: printf("LOG 2           ");
 11333  00269C  0E32               	movlw	low STR_25
 11334  00269E  6E0D               	movwf	i2printf@f,c
 11335  0026A0  0EFE               	movlw	high STR_25
 11336  0026A2  6E0E               	movwf	i2printf@f+1,c
 11337  0026A4  ECC0  F004         	call	i2_printf	;wreg free
 11338  0026A8  0012               	return		;funcret
 11339  0026AA                     __end_of_change_state_to_logs_11:
 11340                           	opt stack 0
 11341                           pclatu	equ	0xFFB
 11342                           pclath	equ	0xFFA
 11343                           tblptru	equ	0xFF8
 11344                           tblptrh	equ	0xFF7
 11345                           tblptrl	equ	0xFF6
 11346                           tablat	equ	0xFF5
 11347                           prodh	equ	0xFF4
 11348                           prodl	equ	0xFF3
 11349                           intcon	equ	0xFF2
 11350                           intcon3	equ	0xFF0
 11351                           indf0	equ	0xFEF
 11352                           postinc0	equ	0xFEE
 11353                           fsr0h	equ	0xFEA
 11354                           fsr0l	equ	0xFE9
 11355                           wreg	equ	0xFE8
 11356                           postdec1	equ	0xFE5
 11357                           fsr1h	equ	0xFE2
 11358                           fsr1l	equ	0xFE1
 11359                           indf2	equ	0xFDF
 11360                           postinc2	equ	0xFDE
 11361                           postdec2	equ	0xFDD
 11362                           fsr2h	equ	0xFDA
 11363                           fsr2l	equ	0xFD9
 11364                           status	equ	0xFD8
 11365                           
 11366 ;; *************** function _dispLogs *****************
 11367 ;; Defined at:
 11368 ;;		line 409 in file "UI.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;  myLog           2    0[COMRAM] int 
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;		None
 11373 ;; Return value:  Size  Location     Type
 11374 ;;                  1    wreg      void 
 11375 ;; Registers used:
 11376 ;;		wreg, status,2
 11377 ;; Tracked objects:
 11378 ;;		On entry : 0/0
 11379 ;;		On exit  : 0/0
 11380 ;;		Unchanged: 0/0
 11381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11382 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11385 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11386 ;;Total ram usage:        2 bytes
 11387 ;; Hardware stack levels used:    1
 11388 ;; This function calls:
 11389 ;;		Nothing
 11390 ;; This function is called by:
 11391 ;;		_updateMenu
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           	psect	text56
 11396  0028A4                     __ptext56:
 11397                           	opt stack 0
 11398  0028A4                     _dispLogs:
 11399                           	opt stack 22
 11400                           
 11401                           ;UI.c: 410: logstate = 1;
 11402                           
 11403                           ;incstack = 0
 11404  0028A4  0E00               	movlw	0
 11405  0028A6  0100               	movlb	0	; () banked
 11406  0028A8  6FEE               	movwf	(_logstate+1)& (0+255),b
 11407  0028AA  0E01               	movlw	1
 11408  0028AC  6FED               	movwf	_logstate& (0+255),b
 11409                           
 11410                           ; BSR set to: 0
 11411                           ;UI.c: 411: log = myLog;
 11412  0028AE  C001  F0EB         	movff	dispLogs@myLog,_log
 11413  0028B2  C002  F0EC         	movff	dispLogs@myLog+1,_log+1
 11414                           
 11415                           ; BSR set to: 0
 11416  0028B6  0012               	return		;funcret
 11417  0028B8                     __end_of_dispLogs:
 11418                           	opt stack 0
 11419                           pclatu	equ	0xFFB
 11420                           pclath	equ	0xFFA
 11421                           tblptru	equ	0xFF8
 11422                           tblptrh	equ	0xFF7
 11423                           tblptrl	equ	0xFF6
 11424                           tablat	equ	0xFF5
 11425                           prodh	equ	0xFF4
 11426                           prodl	equ	0xFF3
 11427                           intcon	equ	0xFF2
 11428                           intcon3	equ	0xFF0
 11429                           indf0	equ	0xFEF
 11430                           postinc0	equ	0xFEE
 11431                           fsr0h	equ	0xFEA
 11432                           fsr0l	equ	0xFE9
 11433                           wreg	equ	0xFE8
 11434                           postdec1	equ	0xFE5
 11435                           fsr1h	equ	0xFE2
 11436                           fsr1l	equ	0xFE1
 11437                           indf2	equ	0xFDF
 11438                           postinc2	equ	0xFDE
 11439                           postdec2	equ	0xFDD
 11440                           fsr2h	equ	0xFDA
 11441                           fsr2l	equ	0xFD9
 11442                           status	equ	0xFD8
 11443                           
 11444 ;; *************** function _printSortTimer *****************
 11445 ;; Defined at:
 11446 ;;		line 145 in file "sort.c"
 11447 ;; Parameters:    Size  Location     Type
 11448 ;;		None
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;  i               2   72[COMRAM] int 
 11451 ;;  curTime        14   44[COMRAM] int [7]
 11452 ;;  timeDiff        2   70[COMRAM] unsigned int 
 11453 ;;  sec             2   66[COMRAM] int 
 11454 ;;  min             2   64[COMRAM] int 
 11455 ;;  hour            2   62[COMRAM] int 
 11456 ;;  cur_sec         2   60[COMRAM] unsigned int 
 11457 ;;  start_sec       2   58[COMRAM] unsigned int 
 11458 ;; Return value:  Size  Location     Type
 11459 ;;                  1    wreg      void 
 11460 ;; Registers used:
 11461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11462 ;; Tracked objects:
 11463 ;;		On entry : 0/0
 11464 ;;		On exit  : 0/0
 11465 ;;		Unchanged: 0/0
 11466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11468 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11469 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11470 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11471 ;;Total ram usage:       33 bytes
 11472 ;; Hardware stack levels used:    1
 11473 ;; Hardware stack levels required when called:    3
 11474 ;; This function calls:
 11475 ;;		i2___lwdiv
 11476 ;;		i2___lwmod
 11477 ;;		i2___wmul
 11478 ;;		i2_getRTC
 11479 ;;		i2_lcdInst
 11480 ;;		i2_printf
 11481 ;; This function is called by:
 11482 ;;		_handler
 11483 ;; This function uses a non-reentrant model
 11484 ;;
 11485                           
 11486                           	psect	text57
 11487  001486                     __ptext57:
 11488                           	opt stack 0
 11489  001486                     _printSortTimer:
 11490                           	opt stack 20
 11491                           
 11492                           ;sort.c: 146: getRTC();
 11493                           
 11494                           ; BSR set to: 0
 11495                           ;incstack = 0
 11496  001486  EC0A  F010         	call	i2_getRTC	;wreg free
 11497                           
 11498                           ;sort.c: 147: int curTime[7];
 11499                           ;sort.c: 148: for(int i = 0; i < 7; i++){
 11500  00148A  0E00               	movlw	0
 11501  00148C  6E4A               	movwf	printSortTimer@i+1,c
 11502  00148E  0E00               	movlw	0
 11503  001490  6E49               	movwf	printSortTimer@i,c
 11504  001492                     i2l5509:
 11505  001492  BE4A               	btfsc	printSortTimer@i+1,7,c
 11506  001494  D006               	goto	i2l5513
 11507  001496  504A               	movf	printSortTimer@i+1,w,c
 11508  001498  E131               	bnz	i2l5519
 11509  00149A  0E07               	movlw	7
 11510  00149C  5C49               	subwf	printSortTimer@i,w,c
 11511  00149E  B0D8               	btfsc	status,0,c
 11512  0014A0  D02D               	goto	i2l5519
 11513  0014A2                     i2l5513:
 11514                           
 11515                           ;sort.c: 149: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11516  0014A2  0ED4               	movlw	low _time
 11517  0014A4  2449               	addwf	printSortTimer@i,w,c
 11518  0014A6  6ED9               	movwf	fsr2l,c
 11519  0014A8  0E00               	movlw	high _time
 11520  0014AA  204A               	addwfc	printSortTimer@i+1,w,c
 11521  0014AC  6EDA               	movwf	fsr2h,c
 11522  0014AE  50DF               	movf	indf2,w,c
 11523  0014B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 11524  0014B2  3A2A               	swapf	??_printSortTimer,f,c
 11525  0014B4  0E0F               	movlw	15
 11526  0014B6  162A               	andwf	??_printSortTimer,f,c
 11527  0014B8  0E0F               	movlw	15
 11528  0014BA  162A               	andwf	??_printSortTimer,f,c
 11529  0014BC  502A               	movf	??_printSortTimer,w,c
 11530  0014BE  0D0A               	mullw	10
 11531  0014C0  0ED4               	movlw	low _time
 11532  0014C2  2449               	addwf	printSortTimer@i,w,c
 11533  0014C4  6ED9               	movwf	fsr2l,c
 11534  0014C6  0E00               	movlw	high _time
 11535  0014C8  204A               	addwfc	printSortTimer@i+1,w,c
 11536  0014CA  6EDA               	movwf	fsr2h,c
 11537  0014CC  50DF               	movf	indf2,w,c
 11538  0014CE  0B0F               	andlw	15
 11539  0014D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 11540  0014D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 11541  0014D4  50F3               	movf	prodl,w,c
 11542  0014D6  262B               	addwf	??_printSortTimer+1,f,c
 11543  0014D8  50F4               	movf	prodh,w,c
 11544  0014DA  222C               	addwfc	??_printSortTimer+2,f,c
 11545  0014DC  90D8               	bcf	status,0,c
 11546  0014DE  3449               	rlcf	printSortTimer@i,w,c
 11547  0014E0  6ED9               	movwf	fsr2l,c
 11548  0014E2  344A               	rlcf	printSortTimer@i+1,w,c
 11549  0014E4  6EDA               	movwf	fsr2h,c
 11550  0014E6  0E2D               	movlw	low printSortTimer@curTime
 11551  0014E8  26D9               	addwf	fsr2l,f,c
 11552  0014EA  0E00               	movlw	high printSortTimer@curTime
 11553  0014EC  22DA               	addwfc	fsr2h,f,c
 11554  0014EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 11555  0014F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 11556  0014F6  4A49               	infsnz	printSortTimer@i,f,c
 11557  0014F8  2A4A               	incf	printSortTimer@i+1,f,c
 11558  0014FA  D7CB               	goto	i2l5509
 11559  0014FC                     i2l5519:
 11560                           
 11561                           ;sort.c: 150: }
 11562                           ;sort.c: 151: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 11563  0014FC  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 11564  001500  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 11565  001504  0E00               	movlw	0
 11566  001506  6E04               	movwf	i2___wmul@multiplicand+1,c
 11567  001508  0E3C               	movlw	60
 11568  00150A  6E03               	movwf	i2___wmul@multiplicand,c
 11569  00150C  ECD9  F013         	call	i2___wmul	;wreg free
 11570  001510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11571  001514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11572  001518  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 11573  00151C  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 11574  001520  0E0E               	movlw	14
 11575  001522  6E04               	movwf	i2___wmul@multiplicand+1,c
 11576  001524  0E10               	movlw	16
 11577  001526  6E03               	movwf	i2___wmul@multiplicand,c
 11578  001528  ECD9  F013         	call	i2___wmul	;wreg free
 11579  00152C  5001               	movf	?i2___wmul,w,c
 11580  00152E  262A               	addwf	??_printSortTimer,f,c
 11581  001530  5002               	movf	?i2___wmul+1,w,c
 11582  001532  222B               	addwfc	??_printSortTimer+1,f,c
 11583  001534  0101               	movlb	1	; () banked
 11584  001536  5100               	movf	_startTime& (0+255),w,b
 11585  001538  242A               	addwf	??_printSortTimer,w,c
 11586  00153A  6E3B               	movwf	printSortTimer@start_sec,c
 11587  00153C  0101               	movlb	1	; () banked
 11588  00153E  5101               	movf	(_startTime+1)& (0+255),w,b
 11589  001540  202B               	addwfc	??_printSortTimer+1,w,c
 11590  001542  6E3C               	movwf	printSortTimer@start_sec+1,c
 11591                           
 11592                           ;sort.c: 152: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 11593  001544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 11594  001548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 11595  00154C  0E00               	movlw	0
 11596  00154E  6E04               	movwf	i2___wmul@multiplicand+1,c
 11597  001550  0E3C               	movlw	60
 11598  001552  6E03               	movwf	i2___wmul@multiplicand,c
 11599  001554  ECD9  F013         	call	i2___wmul	;wreg free
 11600  001558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11601  00155C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11602  001560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 11603  001564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 11604  001568  0E0E               	movlw	14
 11605  00156A  6E04               	movwf	i2___wmul@multiplicand+1,c
 11606  00156C  0E10               	movlw	16
 11607  00156E  6E03               	movwf	i2___wmul@multiplicand,c
 11608  001570  ECD9  F013         	call	i2___wmul	;wreg free
 11609  001574  5001               	movf	?i2___wmul,w,c
 11610  001576  262A               	addwf	??_printSortTimer,f,c
 11611  001578  5002               	movf	?i2___wmul+1,w,c
 11612  00157A  222B               	addwfc	??_printSortTimer+1,f,c
 11613  00157C  502D               	movf	printSortTimer@curTime,w,c
 11614  00157E  242A               	addwf	??_printSortTimer,w,c
 11615  001580  6E3D               	movwf	printSortTimer@cur_sec,c
 11616  001582  502E               	movf	printSortTimer@curTime+1,w,c
 11617  001584  202B               	addwfc	??_printSortTimer+1,w,c
 11618  001586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 11619                           
 11620                           ;sort.c: 153: unsigned int timeDiff = cur_sec - start_sec;
 11621  001588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 11622  00158C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 11623  001590  1E2A               	comf	??_printSortTimer,f,c
 11624  001592  1E2B               	comf	??_printSortTimer+1,f,c
 11625  001594  4A2A               	infsnz	??_printSortTimer,f,c
 11626  001596  2A2B               	incf	??_printSortTimer+1,f,c
 11627  001598  503D               	movf	printSortTimer@cur_sec,w,c
 11628  00159A  242A               	addwf	??_printSortTimer,w,c
 11629  00159C  6E47               	movwf	printSortTimer@timeDiff,c
 11630  00159E  503E               	movf	printSortTimer@cur_sec+1,w,c
 11631  0015A0  202B               	addwfc	??_printSortTimer+1,w,c
 11632  0015A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 11633                           
 11634                           ;sort.c: 155: total_time = timeDiff;
 11635  0015A4  C047  F0EF         	movff	printSortTimer@timeDiff,_total_time
 11636  0015A8  C048  F0F0         	movff	printSortTimer@timeDiff+1,_total_time+1
 11637                           
 11638                           ;sort.c: 157: if(timeDiff >= 10){
 11639  0015AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 11640  0015AE  E104               	bnz	i2u447_40
 11641  0015B0  0E0A               	movlw	10
 11642  0015B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 11643  0015B4  A0D8               	btfss	status,0,c
 11644  0015B6  D003               	goto	i2l5529
 11645  0015B8                     i2u447_40:
 11646                           
 11647                           ;sort.c: 158: machine_state = DoneSorting_state;
 11648  0015B8  0E02               	movlw	2
 11649  0015BA  0100               	movlb	0	; () banked
 11650  0015BC  6FF1               	movwf	_machine_state& (0+255),b
 11651  0015BE                     i2l5529:
 11652                           
 11653                           ;sort.c: 160: }
 11654                           ;sort.c: 162: int hour = timeDiff / 3600;
 11655  0015BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 11656  0015C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 11657  0015C6  0E0E               	movlw	14
 11658  0015C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 11659  0015CA  0E10               	movlw	16
 11660  0015CC  6E08               	movwf	i2___lwdiv@divisor,c
 11661  0015CE  EC3A  F011         	call	i2___lwdiv	;wreg free
 11662  0015D2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 11663  0015D6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 11664                           
 11665                           ;sort.c: 163: int min = (timeDiff % 3600) / 60;
 11666  0015DA  0E0E               	movlw	14
 11667  0015DC  6E04               	movwf	i2___lwmod@divisor+1,c
 11668  0015DE  0E10               	movlw	16
 11669  0015E0  6E03               	movwf	i2___lwmod@divisor,c
 11670  0015E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11671  0015E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11672  0015EA  ECD5  F011         	call	i2___lwmod	;wreg free
 11673  0015EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 11674  0015F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 11675  0015F6  0E00               	movlw	0
 11676  0015F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 11677  0015FA  0E3C               	movlw	60
 11678  0015FC  6E08               	movwf	i2___lwdiv@divisor,c
 11679  0015FE  EC3A  F011         	call	i2___lwdiv	;wreg free
 11680  001602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 11681  001606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 11682                           
 11683                           ;sort.c: 164: int sec = (timeDiff % 3600) % 60;
 11684  00160A  0E0E               	movlw	14
 11685  00160C  6E04               	movwf	i2___lwmod@divisor+1,c
 11686  00160E  0E10               	movlw	16
 11687  001610  6E03               	movwf	i2___lwmod@divisor,c
 11688  001612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11689  001616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11690  00161A  ECD5  F011         	call	i2___lwmod	;wreg free
 11691  00161E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2171
 11692  001622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2171+1
 11693                           
 11694                           ;sort.c: 164: int sec = (timeDiff % 3600) % 60;
 11695  001626  C045  F001         	movff	_printSortTimer$2171,i2___lwmod@dividend
 11696  00162A  C046  F002         	movff	_printSortTimer$2171+1,i2___lwmod@dividend+1
 11697  00162E  0E00               	movlw	0
 11698  001630  6E04               	movwf	i2___lwmod@divisor+1,c
 11699  001632  0E3C               	movlw	60
 11700  001634  6E03               	movwf	i2___lwmod@divisor,c
 11701  001636  ECD5  F011         	call	i2___lwmod	;wreg free
 11702  00163A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 11703  00163E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 11704                           
 11705                           ;sort.c: 166: lcdInst(0b10000000);;
 11706  001642  0E80               	movlw	128
 11707  001644  EC8A  F014         	call	i2_lcdInst
 11708                           
 11709                           ;sort.c: 167: printf("Sorting...");
 11710  001648  0EA8               	movlw	low STR_49
 11711  00164A  6E0D               	movwf	i2printf@f,c
 11712  00164C  0EFF               	movlw	high STR_49
 11713  00164E  6E0E               	movwf	i2printf@f+1,c
 11714  001650  ECC0  F004         	call	i2_printf	;wreg free
 11715                           
 11716                           ;sort.c: 168: lcdInst(0b11000000);;
 11717  001654  0EC0               	movlw	192
 11718  001656  EC8A  F014         	call	i2_lcdInst
 11719                           
 11720                           ;sort.c: 169: printf("Time: %02d:%02d:%02d", hour, min, sec);
 11721  00165A  0EE8               	movlw	low STR_2
 11722  00165C  6E0D               	movwf	i2printf@f,c
 11723  00165E  0EFD               	movlw	high STR_2
 11724  001660  6E0E               	movwf	i2printf@f+1,c
 11725  001662  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 11726  001666  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 11727  00166A  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 11728  00166E  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 11729  001672  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 11730  001676  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 11731  00167A  ECC0  F004         	call	i2_printf	;wreg free
 11732  00167E  0012               	return		;funcret
 11733  001680                     __end_of_printSortTimer:
 11734                           	opt stack 0
 11735                           pclatu	equ	0xFFB
 11736                           pclath	equ	0xFFA
 11737                           tblptru	equ	0xFF8
 11738                           tblptrh	equ	0xFF7
 11739                           tblptrl	equ	0xFF6
 11740                           tablat	equ	0xFF5
 11741                           prodh	equ	0xFF4
 11742                           prodl	equ	0xFF3
 11743                           intcon	equ	0xFF2
 11744                           intcon3	equ	0xFF0
 11745                           indf0	equ	0xFEF
 11746                           postinc0	equ	0xFEE
 11747                           fsr0h	equ	0xFEA
 11748                           fsr0l	equ	0xFE9
 11749                           wreg	equ	0xFE8
 11750                           postdec1	equ	0xFE5
 11751                           fsr1h	equ	0xFE2
 11752                           fsr1l	equ	0xFE1
 11753                           indf2	equ	0xFDF
 11754                           postinc2	equ	0xFDE
 11755                           postdec2	equ	0xFDD
 11756                           fsr2h	equ	0xFDA
 11757                           fsr2l	equ	0xFD9
 11758                           status	equ	0xFD8
 11759                           
 11760 ;; *************** function i2_printf *****************
 11761 ;; Defined at:
 11762 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11763 ;; Parameters:    Size  Location     Type
 11764 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11765 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 11766 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 11767 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 11768 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 11769 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 11770 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 11771 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 11772 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 11773 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 11774 ;;		 -> STR_2(21), STR_1(17), 
 11775 ;; Auto vars:     Size  Location     Type
 11776 ;;  printf          4    0        struct .
 11777 ;;  printf          2   39[COMRAM] int 
 11778 ;;  printf          2   35[COMRAM] unsigned int 
 11779 ;;  printf          2   33[COMRAM] unsigned int 
 11780 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 11781 ;;		 -> STR_51(7), printRTC@month(4), 
 11782 ;;  printf          2   29[COMRAM] PTR void [1]
 11783 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11784 ;;  printf          1   38[COMRAM] char 
 11785 ;;  printf          1   37[COMRAM] unsigned char 
 11786 ;;  printf          1   28[COMRAM] char 
 11787 ;; Return value:  Size  Location     Type
 11788 ;;                  2   12[COMRAM] int 
 11789 ;; Registers used:
 11790 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11791 ;; Tracked objects:
 11792 ;;		On entry : 0/0
 11793 ;;		On exit  : 0/0
 11794 ;;		Unchanged: 0/0
 11795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11796 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11797 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11799 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11800 ;;Total ram usage:       29 bytes
 11801 ;; Hardware stack levels used:    1
 11802 ;; Hardware stack levels required when called:    2
 11803 ;; This function calls:
 11804 ;;		i2___lwdiv
 11805 ;;		i2___lwmod
 11806 ;;		i2___wmul
 11807 ;;		i2_isdigit
 11808 ;;		i2_putch
 11809 ;; This function is called by:
 11810 ;;		_change_state_to_menu_11
 11811 ;;		_change_state_to_menu_23
 11812 ;;		_change_state_to_logs_11
 11813 ;;		_change_state_to_logs_12
 11814 ;;		_change_state_to_logs_22
 11815 ;;		_change_state_to_logs_23
 11816 ;;		_change_state_to_logs_33
 11817 ;;		_change_state_to_logs_34
 11818 ;;		_printSortTimer
 11819 ;;		i2_change_state_to_menu_start
 11820 ;;		i2_change_state_to_menu_12
 11821 ;;		i2_change_state_to_menu_22
 11822 ;;		i2_printRTC
 11823 ;; This function uses a non-reentrant model
 11824 ;;
 11825                           
 11826                           	psect	text58
 11827  000980                     __ptext58:
 11828                           	opt stack 0
 11829  000980                     i2_printf:
 11830                           	opt stack 19
 11831                           
 11832                           ;doprnt.c: 466: va_list ap;
 11833                           ;doprnt.c: 499: signed char c;
 11834                           ;doprnt.c: 501: int width;
 11835                           ;doprnt.c: 506: signed char prec;
 11836                           ;doprnt.c: 508: unsigned char flag;
 11837                           ;doprnt.c: 523: union {
 11838                           ;doprnt.c: 524: unsigned long vd;
 11839                           ;doprnt.c: 525: double integ;
 11840                           ;doprnt.c: 526: } tmpval;
 11841                           ;doprnt.c: 528: unsigned int val;
 11842                           ;doprnt.c: 529: unsigned len;
 11843                           ;doprnt.c: 530: const char * cp;
 11844                           ;doprnt.c: 533: *ap = __va_start();
 11845                           
 11846                           ;incstack = 0
 11847  000980  0E0F               	movlw	low (?i2_printf+2)
 11848  000982  6E1E               	movwf	i2printf@ap,c
 11849  000984  0E00               	movlw	high (?i2_printf+2)
 11850  000986  6E1F               	movwf	i2printf@ap+1,c
 11851                           
 11852                           ;doprnt.c: 536: while(c = *f++) {
 11853  000988  D190               	goto	i2l4359
 11854  00098A                     i2l4235:
 11855                           
 11856                           ;doprnt.c: 538: if(c != '%')
 11857  00098A  0E25               	movlw	37
 11858  00098C  1827               	xorwf	i2printf@c,w,c
 11859  00098E  B4D8               	btfsc	status,2,c
 11860  000990  D004               	goto	i2l4239
 11861                           
 11862                           ;doprnt.c: 540: {
 11863                           ;doprnt.c: 541: (putch(c) );
 11864  000992  5027               	movf	i2printf@c,w,c
 11865  000994  EC84  F014         	call	i2_putch
 11866                           
 11867                           ;doprnt.c: 542: continue;
 11868  000998  D188               	goto	i2l4359
 11869  00099A                     i2l4239:
 11870                           
 11871                           ;doprnt.c: 543: }
 11872                           ;doprnt.c: 546: width = 0;
 11873  00099A  0E00               	movlw	0
 11874  00099C  6E29               	movwf	i2printf@width+1,c
 11875  00099E  0E00               	movlw	0
 11876  0009A0  6E28               	movwf	i2printf@width,c
 11877                           
 11878                           ;doprnt.c: 548: flag = 0;
 11879  0009A2  0E00               	movlw	0
 11880  0009A4  6E26               	movwf	i2printf@flag,c
 11881                           
 11882                           ;doprnt.c: 551: switch(*f) {
 11883                           
 11884                           ;doprnt.c: 550: for(;;) {
 11885  0009A6  D003               	goto	i2l4245
 11886  0009A8                     i2l4241:
 11887                           
 11888                           ;doprnt.c: 580: flag |= 0x04;
 11889  0009A8  8426               	bsf	i2printf@flag,2,c
 11890                           
 11891                           ;doprnt.c: 581: f++;
 11892  0009AA  4A0D               	infsnz	i2printf@f,f,c
 11893  0009AC  2A0E               	incf	i2printf@f+1,f,c
 11894  0009AE                     i2l4245:
 11895  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 11896  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11897  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11898  0009B6  6AF8               	clrf	tblptru,c
 11899  0009B8                     	endif
 11900  0009B8                     	if	0	;tblptru may be non-zero
 11901  0009B8                     	endif
 11902  0009B8  0008               	tblrd		*
 11903  0009BA  50F5               	movf	tablat,w,c
 11904                           
 11905                           ; Switch size 1, requested type "space"
 11906                           ; Number of cases is 1, Range of values is 48 to 48
 11907                           ; switch strategies available:
 11908                           ; Name         Instructions Cycles
 11909                           ; simple_byte            4     3 (average)
 11910                           ;	Chosen strategy is simple_byte
 11911  0009BC  0A30               	xorlw	48	; case 48
 11912  0009BE  B4D8               	btfsc	status,2,c
 11913  0009C0  D7F3               	goto	i2l4241
 11914                           
 11915                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11916                           
 11917                           ;doprnt.c: 586: }
 11918                           
 11919                           ;doprnt.c: 585: break;
 11920  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 11921  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11922  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11923  0009CA  6AF8               	clrf	tblptru,c
 11924  0009CC                     	endif
 11925  0009CC                     	if	0	;tblptru may be non-zero
 11926  0009CC                     	endif
 11927  0009CC  0008               	tblrd		*
 11928  0009CE  50F5               	movf	tablat,w,c
 11929  0009D0  EC21  F014         	call	i2_isdigit
 11930  0009D4  A0D8               	btfss	status,0,c
 11931  0009D6  D0A4               	goto	i2l4291
 11932                           
 11933                           ;doprnt.c: 598: width = 0;
 11934  0009D8  0E00               	movlw	0
 11935  0009DA  6E29               	movwf	i2printf@width+1,c
 11936  0009DC  0E00               	movlw	0
 11937  0009DE  6E28               	movwf	i2printf@width,c
 11938  0009E0                     i2l4251:
 11939                           
 11940                           ;doprnt.c: 600: width *= 10;
 11941  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11942  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11943  0009E8  0E00               	movlw	0
 11944  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 11945  0009EC  0E0A               	movlw	10
 11946  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 11947  0009F0  ECD9  F013         	call	i2___wmul	;wreg free
 11948  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 11949  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11950                           
 11951                           ;doprnt.c: 601: width += *f++ - '0';
 11952  0009FC  0ED0               	movlw	208
 11953  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 11954  000A00  0EFF               	movlw	255
 11955  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11956  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 11957  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11958  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11959  000A0C  6AF8               	clrf	tblptru,c
 11960  000A0E                     	endif
 11961  000A0E                     	if	0	;tblptru may be non-zero
 11962  000A0E                     	endif
 11963  000A0E  0008               	tblrd		*
 11964  000A10  50F5               	movf	tablat,w,c
 11965  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11966  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11967  000A16  5019               	movf	??i2_printf,w,c
 11968  000A18  261B               	addwf	??i2_printf+2,f,c
 11969  000A1A  501A               	movf	??i2_printf+1,w,c
 11970  000A1C  221C               	addwfc	??i2_printf+3,f,c
 11971  000A1E  501B               	movf	??i2_printf+2,w,c
 11972  000A20  2628               	addwf	i2printf@width,f,c
 11973  000A22  501C               	movf	??i2_printf+3,w,c
 11974  000A24  2229               	addwfc	i2printf@width+1,f,c
 11975  000A26  4A0D               	infsnz	i2printf@f,f,c
 11976  000A28  2A0E               	incf	i2printf@f+1,f,c
 11977                           
 11978                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11979  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 11980  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11981  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11982  000A32  6AF8               	clrf	tblptru,c
 11983  000A34                     	endif
 11984  000A34                     	if	0	;tblptru may be non-zero
 11985  000A34                     	endif
 11986  000A34  0008               	tblrd		*
 11987  000A36  50F5               	movf	tablat,w,c
 11988  000A38  EC21  F014         	call	i2_isdigit
 11989  000A3C  A0D8               	btfss	status,0,c
 11990  000A3E  D070               	goto	i2l4291
 11991  000A40  D7CF               	goto	i2l4251
 11992  000A42                     i2l4259:
 11993                           
 11994                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11995  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 11996  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 11997  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 11998  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 11999  000A52  0E02               	movlw	2
 12000  000A54  261E               	addwf	i2printf@ap,f,c
 12001  000A56  0E00               	movlw	0
 12002  000A58  221F               	addwfc	i2printf@ap+1,f,c
 12003                           
 12004                           ;doprnt.c: 740: if(!cp)
 12005  000A5A  5020               	movf	i2printf@cp,w,c
 12006  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 12007  000A5E  A4D8               	btfss	status,2,c
 12008  000A60  D004               	goto	i2l4267
 12009                           
 12010                           ;doprnt.c: 741: cp = "(null)";
 12011  000A62  0EBD               	movlw	low STR_51
 12012  000A64  6E20               	movwf	i2printf@cp,c
 12013  000A66  0EFF               	movlw	high STR_51
 12014  000A68  6E21               	movwf	i2printf@cp+1,c
 12015  000A6A                     i2l4267:
 12016                           
 12017                           ;doprnt.c: 745: len = 0;
 12018  000A6A  0E00               	movlw	0
 12019  000A6C  6E25               	movwf	i2printf@len+1,c
 12020  000A6E  0E00               	movlw	0
 12021  000A70  6E24               	movwf	i2printf@len,c
 12022                           
 12023                           ;doprnt.c: 746: while(cp[len])
 12024  000A72  D002               	goto	i2l4271
 12025  000A74                     i2l4269:
 12026                           
 12027                           ;doprnt.c: 747: len++;
 12028  000A74  4A24               	infsnz	i2printf@len,f,c
 12029  000A76  2A25               	incf	i2printf@len+1,f,c
 12030  000A78                     i2l4271:
 12031  000A78  5024               	movf	i2printf@len,w,c
 12032  000A7A  2420               	addwf	i2printf@cp,w,c
 12033  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 12034  000A7E  5025               	movf	i2printf@len+1,w,c
 12035  000A80  2021               	addwfc	i2printf@cp+1,w,c
 12036  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12037  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 12038  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 12039  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12040  000A8E  6EF8               	movwf	tblptru,c
 12041  000A90  0E0F               	movlw	(high __ramtop+-1)
 12042  000A92  64F7               	cpfsgt	tblptrh,c
 12043  000A94  D003               	bra	i2u293_47
 12044  000A96  0008               	tblrd		*
 12045  000A98  50F5               	movf	tablat,w,c
 12046  000A9A  D005               	bra	i2u293_40
 12047  000A9C                     i2u293_47:
 12048  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12049  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12050  000AA4  50EF               	movf	indf0,w,c
 12051  000AA6                     i2u293_40:
 12052  000AA6  0900               	iorlw	0
 12053  000AA8  A4D8               	btfss	status,2,c
 12054  000AAA  D7E4               	goto	i2l4269
 12055                           
 12056                           ;doprnt.c: 757: if(width > len)
 12057  000AAC  5028               	movf	i2printf@width,w,c
 12058  000AAE  5C24               	subwf	i2printf@len,w,c
 12059  000AB0  5029               	movf	i2printf@width+1,w,c
 12060  000AB2  5825               	subwfb	i2printf@len+1,w,c
 12061  000AB4  B0D8               	btfsc	status,0,c
 12062  000AB6  D005               	goto	i2l4277
 12063                           
 12064                           ;doprnt.c: 758: width -= len;
 12065  000AB8  5024               	movf	i2printf@len,w,c
 12066  000ABA  5E28               	subwf	i2printf@width,f,c
 12067  000ABC  5025               	movf	i2printf@len+1,w,c
 12068  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 12069  000AC0  D008               	goto	i2l4281
 12070  000AC2                     i2l4277:
 12071                           
 12072                           ;doprnt.c: 759: else
 12073                           ;doprnt.c: 760: width = 0;
 12074  000AC2  0E00               	movlw	0
 12075  000AC4  6E29               	movwf	i2printf@width+1,c
 12076  000AC6  0E00               	movlw	0
 12077  000AC8  6E28               	movwf	i2printf@width,c
 12078                           
 12079                           ;doprnt.c: 764: while(width--)
 12080  000ACA  D003               	goto	i2l4281
 12081  000ACC                     i2l4279:
 12082                           
 12083                           ;doprnt.c: 765: (putch(' ') );
 12084  000ACC  0E20               	movlw	32
 12085  000ACE  EC84  F014         	call	i2_putch
 12086  000AD2                     i2l4281:
 12087  000AD2  0628               	decf	i2printf@width,f,c
 12088  000AD4  A0D8               	btfss	status,0,c
 12089  000AD6  0629               	decf	i2printf@width+1,f,c
 12090  000AD8  2828               	incf	i2printf@width,w,c
 12091  000ADA  E1F8               	bnz	i2l4279
 12092  000ADC  2829               	incf	i2printf@width+1,w,c
 12093  000ADE  B4D8               	btfsc	status,2,c
 12094  000AE0  D016               	goto	i2l4287
 12095  000AE2  D7F4               	goto	i2l4279
 12096  000AE4                     i2l4283:
 12097                           
 12098                           ;doprnt.c: 768: (putch(*cp++) );
 12099  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12100  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12101  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12102  000AEE  6EF8               	movwf	tblptru,c
 12103  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12104  000AF2  64F7               	cpfsgt	tblptrh,c
 12105  000AF4  D003               	bra	i2u297_47
 12106  000AF6  0008               	tblrd		*
 12107  000AF8  50F5               	movf	tablat,w,c
 12108  000AFA  D005               	bra	i2u297_40
 12109  000AFC                     i2u297_47:
 12110  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12111  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12112  000B04  50EF               	movf	indf0,w,c
 12113  000B06                     i2u297_40:
 12114  000B06  EC84  F014         	call	i2_putch
 12115  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12116  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12117  000B0E                     i2l4287:
 12118  000B0E  0624               	decf	i2printf@len,f,c
 12119  000B10  A0D8               	btfss	status,0,c
 12120  000B12  0625               	decf	i2printf@len+1,f,c
 12121  000B14  2824               	incf	i2printf@len,w,c
 12122  000B16  E1E6               	bnz	i2l4283
 12123  000B18  2825               	incf	i2printf@len+1,w,c
 12124  000B1A  B4D8               	btfsc	status,2,c
 12125  000B1C  D0C6               	goto	i2l4359
 12126  000B1E  D7E2               	goto	i2l4283
 12127  000B20                     i2l4291:
 12128  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12129  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12130  000B28  4A0D               	infsnz	i2printf@f,f,c
 12131  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12132  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12133  000B2C  6AF8               	clrf	tblptru,c
 12134  000B2E                     	endif
 12135  000B2E                     	if	0	;tblptru may be non-zero
 12136  000B2E                     	endif
 12137  000B2E  0008               	tblrd		*
 12138  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12139  000B34  5027               	movf	i2printf@c,w,c
 12140                           
 12141                           ; Switch size 1, requested type "space"
 12142                           ; Number of cases is 4, Range of values is 0 to 115
 12143                           ; switch strategies available:
 12144                           ; Name         Instructions Cycles
 12145                           ; simple_byte           13     7 (average)
 12146                           ;	Chosen strategy is simple_byte
 12147  000B36  0A00               	xorlw	0	; case 0
 12148  000B38  B4D8               	btfsc	status,2,c
 12149  000B3A  0012               	return	
 12150  000B3C  0A64               	xorlw	100	; case 100
 12151  000B3E  B4D8               	btfsc	status,2,c
 12152  000B40  D007               	goto	i2l4293
 12153  000B42  0A0D               	xorlw	13	; case 105
 12154  000B44  B4D8               	btfsc	status,2,c
 12155  000B46  D004               	goto	i2l4293
 12156  000B48  0A1A               	xorlw	26	; case 115
 12157  000B4A  B4D8               	btfsc	status,2,c
 12158  000B4C  D77A               	goto	i2l4259
 12159  000B4E  D0AD               	goto	i2l4359
 12160  000B50                     i2l4293:
 12161                           
 12162                           ;doprnt.c: 1253: {
 12163                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12164  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12165  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12166  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12167  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12168  000B60  0E02               	movlw	2
 12169  000B62  261E               	addwf	i2printf@ap,f,c
 12170  000B64  0E00               	movlw	0
 12171  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12172                           
 12173                           ;doprnt.c: 1261: if((int)val < 0) {
 12174  000B68  AE23               	btfss	i2printf@val+1,7,c
 12175  000B6A  D006               	goto	i2l4303
 12176                           
 12177                           ;doprnt.c: 1262: flag |= 0x03;
 12178  000B6C  0E03               	movlw	3
 12179  000B6E  1226               	iorwf	i2printf@flag,f,c
 12180                           
 12181                           ;doprnt.c: 1263: val = -val;
 12182  000B70  6C22               	negf	i2printf@val,c
 12183  000B72  1E23               	comf	i2printf@val+1,f,c
 12184  000B74  B0D8               	btfsc	status,0,c
 12185  000B76  2A23               	incf	i2printf@val+1,f,c
 12186  000B78                     i2l4303:
 12187                           
 12188                           ;doprnt.c: 1264: }
 12189                           ;doprnt.c: 1266: }
 12190                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12191  000B78  0E01               	movlw	1
 12192  000B7A  6E27               	movwf	i2printf@c,c
 12193  000B7C                     i2l4305:
 12194  000B7C  0E05               	movlw	5
 12195  000B7E  1827               	xorwf	i2printf@c,w,c
 12196  000B80  B4D8               	btfsc	status,2,c
 12197  000B82  D015               	goto	i2l4317
 12198                           
 12199                           ;doprnt.c: 1306: if(val < dpowers[c])
 12200  000B84  5027               	movf	i2printf@c,w,c
 12201  000B86  0D02               	mullw	2
 12202  000B88  0EC6               	movlw	low _dpowers
 12203  000B8A  24F3               	addwf	prodl,w,c
 12204  000B8C  6EF6               	movwf	tblptrl,c
 12205  000B8E  0EFD               	movlw	high _dpowers
 12206  000B90  20F4               	addwfc	prodh,w,c
 12207  000B92  6EF7               	movwf	tblptrh,c
 12208  000B94                     	if	1	;There are 3 active tblptr bytes
 12209  000B94  6AF8               	clrf	tblptru,c
 12210  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12211  000B98  22F8               	addwfc	tblptru,f,c
 12212  000B9A                     	endif
 12213  000B9A  0009               	tblrd		*+
 12214  000B9C  50F5               	movf	tablat,w,c
 12215  000B9E  5C22               	subwf	i2printf@val,w,c
 12216  000BA0  0009               	tblrd		*+
 12217  000BA2  50F5               	movf	tablat,w,c
 12218  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12219  000BA6  A0D8               	btfss	status,0,c
 12220  000BA8  D002               	goto	i2l4317
 12221                           
 12222                           ;doprnt.c: 1307: break;
 12223  000BAA  2A27               	incf	i2printf@c,f,c
 12224  000BAC  D7E7               	goto	i2l4305
 12225  000BAE                     i2l4317:
 12226                           
 12227                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12228  000BAE  5028               	movf	i2printf@width,w,c
 12229  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12230  000BB2  B4D8               	btfsc	status,2,c
 12231  000BB4  D009               	goto	i2l4323
 12232  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12233  000BBA  0E03               	movlw	3
 12234  000BBC  1619               	andwf	??i2_printf,f,c
 12235  000BBE  B4D8               	btfsc	status,2,c
 12236  000BC0  D003               	goto	i2l4323
 12237                           
 12238                           ;doprnt.c: 1346: width--;
 12239  000BC2  0628               	decf	i2printf@width,f,c
 12240  000BC4  A0D8               	btfss	status,0,c
 12241  000BC6  0629               	decf	i2printf@width+1,f,c
 12242  000BC8                     i2l4323:
 12243                           
 12244                           ;doprnt.c: 1381: if(width > c)
 12245  000BC8  0E80               	movlw	128
 12246  000BCA  BE27               	btfsc	i2printf@c,7,c
 12247  000BCC  0E7F               	movlw	127
 12248  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12249  000BD0  5028               	movf	i2printf@width,w,c
 12250  000BD2  5C27               	subwf	i2printf@c,w,c
 12251  000BD4  5029               	movf	i2printf@width+1,w,c
 12252  000BD6  0A80               	xorlw	128
 12253  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12254  000BDA  B0D8               	btfsc	status,0,c
 12255  000BDC  D007               	goto	i2l4327
 12256                           
 12257                           ;doprnt.c: 1382: width -= c;
 12258  000BDE  5027               	movf	i2printf@c,w,c
 12259  000BE0  5E28               	subwf	i2printf@width,f,c
 12260  000BE2  0E00               	movlw	0
 12261  000BE4  BE27               	btfsc	i2printf@c,7,c
 12262  000BE6  0EFF               	movlw	255
 12263  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12264  000BEA  D004               	goto	i2l4329
 12265  000BEC                     i2l4327:
 12266                           
 12267                           ;doprnt.c: 1383: else
 12268                           ;doprnt.c: 1384: width = 0;
 12269  000BEC  0E00               	movlw	0
 12270  000BEE  6E29               	movwf	i2printf@width+1,c
 12271  000BF0  0E00               	movlw	0
 12272  000BF2  6E28               	movwf	i2printf@width,c
 12273  000BF4                     i2l4329:
 12274                           
 12275                           ;doprnt.c: 1387: if(flag & 0x04) {
 12276  000BF4  A426               	btfss	i2printf@flag,2,c
 12277  000BF6  D014               	goto	i2l4341
 12278                           
 12279                           ;doprnt.c: 1392: if(flag & 0x03)
 12280  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12281  000BFC  0E03               	movlw	3
 12282  000BFE  1619               	andwf	??i2_printf,f,c
 12283  000C00  B4D8               	btfsc	status,2,c
 12284  000C02  D003               	goto	i2l4335
 12285                           
 12286                           ;doprnt.c: 1393: (putch('-') );
 12287  000C04  0E2D               	movlw	45
 12288  000C06  EC84  F014         	call	i2_putch
 12289  000C0A                     i2l4335:
 12290                           
 12291                           ;doprnt.c: 1415: if(width)
 12292  000C0A  5028               	movf	i2printf@width,w,c
 12293  000C0C  1029               	iorwf	i2printf@width+1,w,c
 12294  000C0E  B4D8               	btfsc	status,2,c
 12295  000C10  D01E               	goto	i2l4351
 12296                           
 12297                           ;doprnt.c: 1417: (putch('0') );
 12298                           
 12299                           ;doprnt.c: 1416: do
 12300  000C12  0E30               	movlw	48
 12301  000C14  EC84  F014         	call	i2_putch
 12302                           
 12303                           ;doprnt.c: 1418: while(--width);
 12304  000C18  0628               	decf	i2printf@width,f,c
 12305  000C1A  A0D8               	btfss	status,0,c
 12306  000C1C  0629               	decf	i2printf@width+1,f,c
 12307  000C1E  D7F5               	goto	i2l4335
 12308  000C20                     i2l4341:
 12309                           
 12310                           ;doprnt.c: 1422: {
 12311                           ;doprnt.c: 1424: if(width
 12312                           ;doprnt.c: 1428: )
 12313  000C20  5028               	movf	i2printf@width,w,c
 12314  000C22  1029               	iorwf	i2printf@width+1,w,c
 12315  000C24  B4D8               	btfsc	status,2,c
 12316  000C26  D00A               	goto	i2l4347
 12317  000C28                     i2l4343:
 12318                           
 12319                           ;doprnt.c: 1430: (putch(' ') );
 12320  000C28  0E20               	movlw	32
 12321  000C2A  EC84  F014         	call	i2_putch
 12322                           
 12323                           ;doprnt.c: 1431: while(--width);
 12324  000C2E  0628               	decf	i2printf@width,f,c
 12325  000C30  A0D8               	btfss	status,0,c
 12326  000C32  0629               	decf	i2printf@width+1,f,c
 12327  000C34  5028               	movf	i2printf@width,w,c
 12328  000C36  1029               	iorwf	i2printf@width+1,w,c
 12329  000C38  A4D8               	btfss	status,2,c
 12330  000C3A  D7F6               	goto	i2l4343
 12331  000C3C                     i2l4347:
 12332                           
 12333                           ;doprnt.c: 1438: if(flag & 0x03)
 12334  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 12335  000C40  0E03               	movlw	3
 12336  000C42  1619               	andwf	??i2_printf,f,c
 12337  000C44  B4D8               	btfsc	status,2,c
 12338  000C46  D003               	goto	i2l4351
 12339                           
 12340                           ;doprnt.c: 1439: (putch('-') );
 12341  000C48  0E2D               	movlw	45
 12342  000C4A  EC84  F014         	call	i2_putch
 12343  000C4E                     i2l4351:
 12344                           
 12345                           ;doprnt.c: 1469: }
 12346                           ;doprnt.c: 1472: prec = c;
 12347  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 12348                           
 12349                           ;doprnt.c: 1474: while(prec--) {
 12350  000C52  D027               	goto	i2l4357
 12351  000C54                     i2l4353:
 12352                           
 12353                           ;doprnt.c: 1478: {
 12354                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12355  000C54  501D               	movf	i2printf@prec,w,c
 12356  000C56  0D02               	mullw	2
 12357  000C58  0EC6               	movlw	low _dpowers
 12358  000C5A  24F3               	addwf	prodl,w,c
 12359  000C5C  6EF6               	movwf	tblptrl,c
 12360  000C5E  0EFD               	movlw	high _dpowers
 12361  000C60  20F4               	addwfc	prodh,w,c
 12362  000C62  6EF7               	movwf	tblptrh,c
 12363  000C64                     	if	1	;There are 3 active tblptr bytes
 12364  000C64  6AF8               	clrf	tblptru,c
 12365  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 12366  000C68  22F8               	addwfc	tblptru,f,c
 12367  000C6A                     	endif
 12368  000C6A  0009               	tblrd		*+
 12369  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 12370  000C70  000A               	tblrd		*-
 12371  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 12372  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 12373  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12374  000C7E  EC3A  F011         	call	i2___lwdiv	;wreg free
 12375  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 12376  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12377  000C8A  0E00               	movlw	0
 12378  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 12379  000C8E  0E0A               	movlw	10
 12380  000C90  6E03               	movwf	i2___lwmod@divisor,c
 12381  000C92  ECD5  F011         	call	i2___lwmod	;wreg free
 12382  000C96  5001               	movf	?i2___lwmod,w,c
 12383  000C98  0F30               	addlw	48
 12384  000C9A  6E27               	movwf	i2printf@c,c
 12385                           
 12386                           ;doprnt.c: 1523: }
 12387                           ;doprnt.c: 1524: (putch(c) );
 12388  000C9C  5027               	movf	i2printf@c,w,c
 12389  000C9E  EC84  F014         	call	i2_putch
 12390  000CA2                     i2l4357:
 12391  000CA2  061D               	decf	i2printf@prec,f,c
 12392  000CA4  281D               	incf	i2printf@prec,w,c
 12393  000CA6  A4D8               	btfss	status,2,c
 12394  000CA8  D7D5               	goto	i2l4353
 12395  000CAA                     i2l4359:
 12396  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 12397  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12398  000CB2  4A0D               	infsnz	i2printf@f,f,c
 12399  000CB4  2A0E               	incf	i2printf@f+1,f,c
 12400  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12401  000CB6  6AF8               	clrf	tblptru,c
 12402  000CB8                     	endif
 12403  000CB8                     	if	0	;tblptru may be non-zero
 12404  000CB8                     	endif
 12405  000CB8  0008               	tblrd		*
 12406  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 12407  000CBE  5027               	movf	i2printf@c,w,c
 12408  000CC0  B4D8               	btfsc	status,2,c
 12409  000CC2  0012               	return	
 12410  000CC4  D662               	goto	i2l4235
 12411  000CC6                     __end_ofi2_printf:
 12412                           	opt stack 0
 12413                           pclatu	equ	0xFFB
 12414                           pclath	equ	0xFFA
 12415                           tblptru	equ	0xFF8
 12416                           tblptrh	equ	0xFF7
 12417                           tblptrl	equ	0xFF6
 12418                           tablat	equ	0xFF5
 12419                           prodh	equ	0xFF4
 12420                           prodl	equ	0xFF3
 12421                           intcon	equ	0xFF2
 12422                           intcon3	equ	0xFF0
 12423                           indf0	equ	0xFEF
 12424                           postinc0	equ	0xFEE
 12425                           fsr0h	equ	0xFEA
 12426                           fsr0l	equ	0xFE9
 12427                           wreg	equ	0xFE8
 12428                           postdec1	equ	0xFE5
 12429                           fsr1h	equ	0xFE2
 12430                           fsr1l	equ	0xFE1
 12431                           indf2	equ	0xFDF
 12432                           postinc2	equ	0xFDE
 12433                           postdec2	equ	0xFDD
 12434                           fsr2h	equ	0xFDA
 12435                           fsr2l	equ	0xFD9
 12436                           status	equ	0xFD8
 12437                           
 12438 ;; *************** function i2_putch *****************
 12439 ;; Defined at:
 12440 ;;		line 18 in file "lcd.c"
 12441 ;; Parameters:    Size  Location     Type
 12442 ;;  data            1    wreg     unsigned char 
 12443 ;; Auto vars:     Size  Location     Type
 12444 ;;  data            1    2[COMRAM] unsigned char 
 12445 ;; Return value:  Size  Location     Type
 12446 ;;                  1    wreg      void 
 12447 ;; Registers used:
 12448 ;;		wreg, status,2, status,0, cstack
 12449 ;; Tracked objects:
 12450 ;;		On entry : 0/0
 12451 ;;		On exit  : 0/0
 12452 ;;		Unchanged: 0/0
 12453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12455 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12457 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12458 ;;Total ram usage:        1 bytes
 12459 ;; Hardware stack levels used:    1
 12460 ;; Hardware stack levels required when called:    1
 12461 ;; This function calls:
 12462 ;;		i2_lcdNibble
 12463 ;; This function is called by:
 12464 ;;		i2_printf
 12465 ;; This function uses a non-reentrant model
 12466 ;;
 12467                           
 12468                           	psect	text59
 12469  002908                     __ptext59:
 12470                           	opt stack 0
 12471  002908                     i2_putch:
 12472                           	opt stack 19
 12473                           
 12474                           ;incstack = 0
 12475                           ;i2putch@data stored from wreg
 12476  002908  6E03               	movwf	i2putch@data,c
 12477                           
 12478                           ;lcd.c: 19: LATDbits.LATD2 = 1;
 12479  00290A  848C               	bsf	3980,2,c	;volatile
 12480                           
 12481                           ;lcd.c: 20: lcdNibble(data);
 12482  00290C  5003               	movf	i2putch@data,w,c
 12483  00290E  EC0F  F011         	call	i2_lcdNibble
 12484  002912  0012               	return		;funcret
 12485  002914                     __end_ofi2_putch:
 12486                           	opt stack 0
 12487                           pclatu	equ	0xFFB
 12488                           pclath	equ	0xFFA
 12489                           tblptru	equ	0xFF8
 12490                           tblptrh	equ	0xFF7
 12491                           tblptrl	equ	0xFF6
 12492                           tablat	equ	0xFF5
 12493                           prodh	equ	0xFF4
 12494                           prodl	equ	0xFF3
 12495                           intcon	equ	0xFF2
 12496                           intcon3	equ	0xFF0
 12497                           indf0	equ	0xFEF
 12498                           postinc0	equ	0xFEE
 12499                           fsr0h	equ	0xFEA
 12500                           fsr0l	equ	0xFE9
 12501                           wreg	equ	0xFE8
 12502                           postdec1	equ	0xFE5
 12503                           fsr1h	equ	0xFE2
 12504                           fsr1l	equ	0xFE1
 12505                           indf2	equ	0xFDF
 12506                           postinc2	equ	0xFDE
 12507                           postdec2	equ	0xFDD
 12508                           fsr2h	equ	0xFDA
 12509                           fsr2l	equ	0xFD9
 12510                           status	equ	0xFD8
 12511                           
 12512 ;; *************** function i2_isdigit *****************
 12513 ;; Defined at:
 12514 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12515 ;; Parameters:    Size  Location     Type
 12516 ;;  c               1    wreg     unsigned char 
 12517 ;; Auto vars:     Size  Location     Type
 12518 ;;  c               1    2[COMRAM] unsigned char 
 12519 ;; Return value:  Size  Location     Type
 12520 ;;		None               void
 12521 ;; Registers used:
 12522 ;;		wreg, status,2, status,0
 12523 ;; Tracked objects:
 12524 ;;		On entry : 0/0
 12525 ;;		On exit  : 0/0
 12526 ;;		Unchanged: 0/0
 12527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12529 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12530 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12531 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12532 ;;Total ram usage:        3 bytes
 12533 ;; Hardware stack levels used:    1
 12534 ;; This function calls:
 12535 ;;		Nothing
 12536 ;; This function is called by:
 12537 ;;		i2_printf
 12538 ;; This function uses a non-reentrant model
 12539 ;;
 12540                           
 12541                           	psect	text60
 12542  002842                     __ptext60:
 12543                           	opt stack 0
 12544  002842                     i2_isdigit:
 12545                           	opt stack 20
 12546                           
 12547                           ;incstack = 0
 12548                           ;i2isdigit@c stored from wreg
 12549  002842  6E03               	movwf	i2isdigit@c,c
 12550  002844  0E00               	movlw	0
 12551  002846  6E02               	movwf	i2_isdigit$1698,c
 12552  002848  0E3A               	movlw	58
 12553  00284A  6003               	cpfslt	i2isdigit@c,c
 12554  00284C  D005               	goto	i2l3995
 12555  00284E  0E2F               	movlw	47
 12556  002850  6403               	cpfsgt	i2isdigit@c,c
 12557  002852  D002               	goto	i2l3995
 12558  002854  0E01               	movlw	1
 12559  002856  6E02               	movwf	i2_isdigit$1698,c
 12560  002858                     i2l3995:
 12561  002858  C002  F001         	movff	i2_isdigit$1698,??i2_isdigit
 12562  00285C  3001               	rrcf	??i2_isdigit,w,c
 12563  00285E  0012               	return	
 12564  002860                     __end_ofi2_isdigit:
 12565                           	opt stack 0
 12566                           pclatu	equ	0xFFB
 12567                           pclath	equ	0xFFA
 12568                           tblptru	equ	0xFF8
 12569                           tblptrh	equ	0xFF7
 12570                           tblptrl	equ	0xFF6
 12571                           tablat	equ	0xFF5
 12572                           prodh	equ	0xFF4
 12573                           prodl	equ	0xFF3
 12574                           intcon	equ	0xFF2
 12575                           intcon3	equ	0xFF0
 12576                           indf0	equ	0xFEF
 12577                           postinc0	equ	0xFEE
 12578                           fsr0h	equ	0xFEA
 12579                           fsr0l	equ	0xFE9
 12580                           wreg	equ	0xFE8
 12581                           postdec1	equ	0xFE5
 12582                           fsr1h	equ	0xFE2
 12583                           fsr1l	equ	0xFE1
 12584                           indf2	equ	0xFDF
 12585                           postinc2	equ	0xFDE
 12586                           postdec2	equ	0xFDD
 12587                           fsr2h	equ	0xFDA
 12588                           fsr2l	equ	0xFD9
 12589                           status	equ	0xFD8
 12590                           
 12591 ;; *************** function i2___wmul *****************
 12592 ;; Defined at:
 12593 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12594 ;; Parameters:    Size  Location     Type
 12595 ;;  multiplier      2    0[COMRAM] unsigned int 
 12596 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12597 ;; Auto vars:     Size  Location     Type
 12598 ;;  __wmul          2    4[COMRAM] unsigned int 
 12599 ;; Return value:  Size  Location     Type
 12600 ;;                  2    0[COMRAM] unsigned int 
 12601 ;; Registers used:
 12602 ;;		wreg, status,2, status,0, prodl, prodh
 12603 ;; Tracked objects:
 12604 ;;		On entry : 0/0
 12605 ;;		On exit  : 0/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12608 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12611 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12612 ;;Total ram usage:        6 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; This function calls:
 12615 ;;		Nothing
 12616 ;; This function is called by:
 12617 ;;		_printSortTimer
 12618 ;;		i2_printf
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           	psect	text61
 12623  0027B2                     __ptext61:
 12624                           	opt stack 0
 12625  0027B2                     i2___wmul:
 12626                           	opt stack 20
 12627                           
 12628                           ;incstack = 0
 12629  0027B2  5001               	movf	i2___wmul@multiplier,w,c
 12630  0027B4  0203               	mulwf	i2___wmul@multiplicand,c
 12631  0027B6  CFF3 F005          	movff	prodl,i2___wmul@product
 12632  0027BA  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12633  0027BE  5001               	movf	i2___wmul@multiplier,w,c
 12634  0027C0  0204               	mulwf	i2___wmul@multiplicand+1,c
 12635  0027C2  50F3               	movf	prodl,w,c
 12636  0027C4  2606               	addwf	i2___wmul@product+1,f,c
 12637  0027C6  5002               	movf	i2___wmul@multiplier+1,w,c
 12638  0027C8  0203               	mulwf	i2___wmul@multiplicand,c
 12639  0027CA  50F3               	movf	prodl,w,c
 12640  0027CC  2606               	addwf	i2___wmul@product+1,f,c
 12641  0027CE  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12642  0027D2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12643  0027D6  0012               	return	
 12644  0027D8                     __end_ofi2___wmul:
 12645                           	opt stack 0
 12646                           pclatu	equ	0xFFB
 12647                           pclath	equ	0xFFA
 12648                           tblptru	equ	0xFF8
 12649                           tblptrh	equ	0xFF7
 12650                           tblptrl	equ	0xFF6
 12651                           tablat	equ	0xFF5
 12652                           prodh	equ	0xFF4
 12653                           prodl	equ	0xFF3
 12654                           intcon	equ	0xFF2
 12655                           intcon3	equ	0xFF0
 12656                           indf0	equ	0xFEF
 12657                           postinc0	equ	0xFEE
 12658                           fsr0h	equ	0xFEA
 12659                           fsr0l	equ	0xFE9
 12660                           wreg	equ	0xFE8
 12661                           postdec1	equ	0xFE5
 12662                           fsr1h	equ	0xFE2
 12663                           fsr1l	equ	0xFE1
 12664                           indf2	equ	0xFDF
 12665                           postinc2	equ	0xFDE
 12666                           postdec2	equ	0xFDD
 12667                           fsr2h	equ	0xFDA
 12668                           fsr2l	equ	0xFD9
 12669                           status	equ	0xFD8
 12670                           
 12671 ;; *************** function i2___lwmod *****************
 12672 ;; Defined at:
 12673 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12674 ;; Parameters:    Size  Location     Type
 12675 ;;  dividend        2    0[COMRAM] unsigned int 
 12676 ;;  divisor         2    2[COMRAM] unsigned int 
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;  __lwmod         1    4[COMRAM] unsigned char 
 12679 ;; Return value:  Size  Location     Type
 12680 ;;                  2    0[COMRAM] unsigned int 
 12681 ;; Registers used:
 12682 ;;		wreg, status,2, status,0
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12691 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12692 ;;Total ram usage:        5 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; This function calls:
 12695 ;;		Nothing
 12696 ;; This function is called by:
 12697 ;;		_printSortTimer
 12698 ;;		i2_printf
 12699 ;; This function uses a non-reentrant model
 12700 ;;
 12701                           
 12702                           	psect	text62
 12703  0023AA                     __ptext62:
 12704                           	opt stack 0
 12705  0023AA                     i2___lwmod:
 12706                           	opt stack 20
 12707                           
 12708                           ;incstack = 0
 12709  0023AA  5003               	movf	i2___lwmod@divisor,w,c
 12710  0023AC  1004               	iorwf	i2___lwmod@divisor+1,w,c
 12711  0023AE  B4D8               	btfsc	status,2,c
 12712  0023B0  D018               	goto	i2l1640
 12713  0023B2  0E01               	movlw	1
 12714  0023B4  6E05               	movwf	i2___lwmod@counter,c
 12715  0023B6  D004               	goto	i2l4027
 12716  0023B8                     i2l4025:
 12717  0023B8  90D8               	bcf	status,0,c
 12718  0023BA  3603               	rlcf	i2___lwmod@divisor,f,c
 12719  0023BC  3604               	rlcf	i2___lwmod@divisor+1,f,c
 12720  0023BE  2A05               	incf	i2___lwmod@counter,f,c
 12721  0023C0                     i2l4027:
 12722  0023C0  AE04               	btfss	i2___lwmod@divisor+1,7,c
 12723  0023C2  D7FA               	goto	i2l4025
 12724  0023C4                     i2l4029:
 12725  0023C4  5003               	movf	i2___lwmod@divisor,w,c
 12726  0023C6  5C01               	subwf	i2___lwmod@dividend,w,c
 12727  0023C8  5004               	movf	i2___lwmod@divisor+1,w,c
 12728  0023CA  5802               	subwfb	i2___lwmod@dividend+1,w,c
 12729  0023CC  A0D8               	btfss	status,0,c
 12730  0023CE  D004               	goto	i2l4033
 12731  0023D0  5003               	movf	i2___lwmod@divisor,w,c
 12732  0023D2  5E01               	subwf	i2___lwmod@dividend,f,c
 12733  0023D4  5004               	movf	i2___lwmod@divisor+1,w,c
 12734  0023D6  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 12735  0023D8                     i2l4033:
 12736  0023D8  90D8               	bcf	status,0,c
 12737  0023DA  3204               	rrcf	i2___lwmod@divisor+1,f,c
 12738  0023DC  3203               	rrcf	i2___lwmod@divisor,f,c
 12739  0023DE  2E05               	decfsz	i2___lwmod@counter,f,c
 12740  0023E0  D7F1               	goto	i2l4029
 12741  0023E2                     i2l1640:
 12742  0023E2  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 12743  0023E6  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12744  0023EA  0012               	return		;funcret
 12745  0023EC                     __end_ofi2___lwmod:
 12746                           	opt stack 0
 12747                           pclatu	equ	0xFFB
 12748                           pclath	equ	0xFFA
 12749                           tblptru	equ	0xFF8
 12750                           tblptrh	equ	0xFF7
 12751                           tblptrl	equ	0xFF6
 12752                           tablat	equ	0xFF5
 12753                           prodh	equ	0xFF4
 12754                           prodl	equ	0xFF3
 12755                           intcon	equ	0xFF2
 12756                           intcon3	equ	0xFF0
 12757                           indf0	equ	0xFEF
 12758                           postinc0	equ	0xFEE
 12759                           fsr0h	equ	0xFEA
 12760                           fsr0l	equ	0xFE9
 12761                           wreg	equ	0xFE8
 12762                           postdec1	equ	0xFE5
 12763                           fsr1h	equ	0xFE2
 12764                           fsr1l	equ	0xFE1
 12765                           indf2	equ	0xFDF
 12766                           postinc2	equ	0xFDE
 12767                           postdec2	equ	0xFDD
 12768                           fsr2h	equ	0xFDA
 12769                           fsr2l	equ	0xFD9
 12770                           status	equ	0xFD8
 12771                           
 12772 ;; *************** function i2___lwdiv *****************
 12773 ;; Defined at:
 12774 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12775 ;; Parameters:    Size  Location     Type
 12776 ;;  dividend        2    5[COMRAM] unsigned int 
 12777 ;;  divisor         2    7[COMRAM] unsigned int 
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 12780 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 12781 ;; Return value:  Size  Location     Type
 12782 ;;                  2    5[COMRAM] unsigned int 
 12783 ;; Registers used:
 12784 ;;		wreg, status,2, status,0
 12785 ;; Tracked objects:
 12786 ;;		On entry : 0/0
 12787 ;;		On exit  : 0/0
 12788 ;;		Unchanged: 0/0
 12789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12790 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12791 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12793 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12794 ;;Total ram usage:        7 bytes
 12795 ;; Hardware stack levels used:    1
 12796 ;; This function calls:
 12797 ;;		Nothing
 12798 ;; This function is called by:
 12799 ;;		_printSortTimer
 12800 ;;		i2_printf
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           	psect	text63
 12805  002274                     __ptext63:
 12806                           	opt stack 0
 12807  002274                     i2___lwdiv:
 12808                           	opt stack 20
 12809                           
 12810                           ;incstack = 0
 12811  002274  0E00               	movlw	0
 12812  002276  6E0B               	movwf	i2___lwdiv@quotient+1,c
 12813  002278  0E00               	movlw	0
 12814  00227A  6E0A               	movwf	i2___lwdiv@quotient,c
 12815  00227C  5008               	movf	i2___lwdiv@divisor,w,c
 12816  00227E  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 12817  002280  B4D8               	btfsc	status,2,c
 12818  002282  D01C               	goto	i2l1630
 12819  002284  0E01               	movlw	1
 12820  002286  6E0C               	movwf	i2___lwdiv@counter,c
 12821  002288  D004               	goto	i2l4007
 12822  00228A                     i2l4005:
 12823  00228A  90D8               	bcf	status,0,c
 12824  00228C  3608               	rlcf	i2___lwdiv@divisor,f,c
 12825  00228E  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 12826  002290  2A0C               	incf	i2___lwdiv@counter,f,c
 12827  002292                     i2l4007:
 12828  002292  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 12829  002294  D7FA               	goto	i2l4005
 12830  002296                     i2l4009:
 12831  002296  90D8               	bcf	status,0,c
 12832  002298  360A               	rlcf	i2___lwdiv@quotient,f,c
 12833  00229A  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 12834  00229C  5008               	movf	i2___lwdiv@divisor,w,c
 12835  00229E  5C06               	subwf	i2___lwdiv@dividend,w,c
 12836  0022A0  5009               	movf	i2___lwdiv@divisor+1,w,c
 12837  0022A2  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 12838  0022A4  A0D8               	btfss	status,0,c
 12839  0022A6  D005               	goto	i2l4017
 12840  0022A8  5008               	movf	i2___lwdiv@divisor,w,c
 12841  0022AA  5E06               	subwf	i2___lwdiv@dividend,f,c
 12842  0022AC  5009               	movf	i2___lwdiv@divisor+1,w,c
 12843  0022AE  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 12844  0022B0  800A               	bsf	i2___lwdiv@quotient,0,c
 12845  0022B2                     i2l4017:
 12846  0022B2  90D8               	bcf	status,0,c
 12847  0022B4  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 12848  0022B6  3208               	rrcf	i2___lwdiv@divisor,f,c
 12849  0022B8  2E0C               	decfsz	i2___lwdiv@counter,f,c
 12850  0022BA  D7ED               	goto	i2l4009
 12851  0022BC                     i2l1630:
 12852  0022BC  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12853  0022C0  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12854  0022C4  0012               	return		;funcret
 12855  0022C6                     __end_ofi2___lwdiv:
 12856                           	opt stack 0
 12857                           pclatu	equ	0xFFB
 12858                           pclath	equ	0xFFA
 12859                           tblptru	equ	0xFF8
 12860                           tblptrh	equ	0xFF7
 12861                           tblptrl	equ	0xFF6
 12862                           tablat	equ	0xFF5
 12863                           prodh	equ	0xFF4
 12864                           prodl	equ	0xFF3
 12865                           intcon	equ	0xFF2
 12866                           intcon3	equ	0xFF0
 12867                           indf0	equ	0xFEF
 12868                           postinc0	equ	0xFEE
 12869                           fsr0h	equ	0xFEA
 12870                           fsr0l	equ	0xFE9
 12871                           wreg	equ	0xFE8
 12872                           postdec1	equ	0xFE5
 12873                           fsr1h	equ	0xFE2
 12874                           fsr1l	equ	0xFE1
 12875                           indf2	equ	0xFDF
 12876                           postinc2	equ	0xFDE
 12877                           postdec2	equ	0xFDD
 12878                           fsr2h	equ	0xFDA
 12879                           fsr2l	equ	0xFD9
 12880                           status	equ	0xFD8
 12881                           
 12882 ;; *************** function i2_lcdInst *****************
 12883 ;; Defined at:
 12884 ;;		line 13 in file "lcd.c"
 12885 ;; Parameters:    Size  Location     Type
 12886 ;;  data            1    wreg     unsigned char 
 12887 ;; Auto vars:     Size  Location     Type
 12888 ;;  data            1    2[COMRAM] unsigned char 
 12889 ;; Return value:  Size  Location     Type
 12890 ;;                  1    wreg      void 
 12891 ;; Registers used:
 12892 ;;		wreg, status,2, status,0, cstack
 12893 ;; Tracked objects:
 12894 ;;		On entry : 0/0
 12895 ;;		On exit  : 0/0
 12896 ;;		Unchanged: 0/0
 12897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12901 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12902 ;;Total ram usage:        1 bytes
 12903 ;; Hardware stack levels used:    1
 12904 ;; Hardware stack levels required when called:    1
 12905 ;; This function calls:
 12906 ;;		i2_lcdNibble
 12907 ;; This function is called by:
 12908 ;;		_change_state_to_menu_11
 12909 ;;		_change_state_to_menu_23
 12910 ;;		_change_state_to_logs_11
 12911 ;;		_change_state_to_logs_12
 12912 ;;		_change_state_to_logs_22
 12913 ;;		_change_state_to_logs_23
 12914 ;;		_change_state_to_logs_33
 12915 ;;		_change_state_to_logs_34
 12916 ;;		_printSortTimer
 12917 ;;		i2_change_state_to_menu_start
 12918 ;;		i2_change_state_to_menu_12
 12919 ;;		i2_change_state_to_menu_22
 12920 ;;		i2_printRTC
 12921 ;; This function uses a non-reentrant model
 12922 ;;
 12923                           
 12924                           	psect	text64
 12925  002914                     __ptext64:
 12926                           	opt stack 0
 12927  002914                     i2_lcdInst:
 12928                           	opt stack 19
 12929                           
 12930                           ;incstack = 0
 12931                           ;i2lcdInst@data stored from wreg
 12932  002914  6E03               	movwf	i2lcdInst@data,c
 12933                           
 12934                           ;lcd.c: 14: LATDbits.LATD2 = 0;
 12935  002916  948C               	bcf	3980,2,c	;volatile
 12936                           
 12937                           ;lcd.c: 15: lcdNibble(data);
 12938  002918  5003               	movf	i2lcdInst@data,w,c
 12939  00291A  EC0F  F011         	call	i2_lcdNibble
 12940  00291E  0012               	return		;funcret
 12941  002920                     __end_ofi2_lcdInst:
 12942                           	opt stack 0
 12943                           pclatu	equ	0xFFB
 12944                           pclath	equ	0xFFA
 12945                           tblptru	equ	0xFF8
 12946                           tblptrh	equ	0xFF7
 12947                           tblptrl	equ	0xFF6
 12948                           tablat	equ	0xFF5
 12949                           prodh	equ	0xFF4
 12950                           prodl	equ	0xFF3
 12951                           intcon	equ	0xFF2
 12952                           intcon3	equ	0xFF0
 12953                           indf0	equ	0xFEF
 12954                           postinc0	equ	0xFEE
 12955                           fsr0h	equ	0xFEA
 12956                           fsr0l	equ	0xFE9
 12957                           wreg	equ	0xFE8
 12958                           postdec1	equ	0xFE5
 12959                           fsr1h	equ	0xFE2
 12960                           fsr1l	equ	0xFE1
 12961                           indf2	equ	0xFDF
 12962                           postinc2	equ	0xFDE
 12963                           postdec2	equ	0xFDD
 12964                           fsr2h	equ	0xFDA
 12965                           fsr2l	equ	0xFD9
 12966                           status	equ	0xFD8
 12967                           
 12968 ;; *************** function i2_lcdNibble *****************
 12969 ;; Defined at:
 12970 ;;		line 23 in file "lcd.c"
 12971 ;; Parameters:    Size  Location     Type
 12972 ;;  data            1    wreg     unsigned char 
 12973 ;; Auto vars:     Size  Location     Type
 12974 ;;  data            1    1[COMRAM] unsigned char 
 12975 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12976 ;; Return value:  Size  Location     Type
 12977 ;;                  1    wreg      void 
 12978 ;; Registers used:
 12979 ;;		wreg, status,2, status,0
 12980 ;; Tracked objects:
 12981 ;;		On entry : 0/0
 12982 ;;		On exit  : 0/0
 12983 ;;		Unchanged: 0/0
 12984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12988 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12989 ;;Total ram usage:        2 bytes
 12990 ;; Hardware stack levels used:    1
 12991 ;; This function calls:
 12992 ;;		Nothing
 12993 ;; This function is called by:
 12994 ;;		i2_lcdInst
 12995 ;;		i2_putch
 12996 ;; This function uses a non-reentrant model
 12997 ;;
 12998                           
 12999                           	psect	text65
 13000  00221E                     __ptext65:
 13001                           	opt stack 0
 13002  00221E                     i2_lcdNibble:
 13003                           	opt stack 19
 13004                           
 13005                           ;incstack = 0
 13006                           ;i2lcdNibble@data stored from wreg
 13007  00221E  6E02               	movwf	i2lcdNibble@data,c
 13008                           
 13009                           ;lcd.c: 25: char temp = data & 0xF0;
 13010  002220  5002               	movf	i2lcdNibble@data,w,c
 13011  002222  0BF0               	andlw	240
 13012  002224  6E01               	movwf	i2lcdNibble@temp,c
 13013                           
 13014                           ;lcd.c: 26: LATD = LATD & 0x0F;
 13015  002226  508C               	movf	3980,w,c	;volatile
 13016  002228  0B0F               	andlw	15
 13017  00222A  6E8C               	movwf	3980,c	;volatile
 13018                           
 13019                           ;lcd.c: 27: LATD = temp | LATD;
 13020  00222C  5001               	movf	i2lcdNibble@temp,w,c
 13021  00222E  108C               	iorwf	3980,w,c	;volatile
 13022  002230  6E8C               	movwf	3980,c	;volatile
 13023                           
 13024                           ;lcd.c: 29: LATDbits.LATD3 = 1;
 13025  002232  868C               	bsf	3980,3,c	;volatile
 13026                           
 13027                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13028  002234  0E42               	movlw	66
 13029  002236                     i2u486_47:
 13030  002236  2EE8               	decfsz	wreg,f,c
 13031  002238  D7FE               	bra	i2u486_47
 13032  00223A  D000               	nop2	
 13033                           
 13034                           ;lcd.c: 31: LATDbits.LATD3 = 0;
 13035  00223C  968C               	bcf	3980,3,c	;volatile
 13036                           
 13037                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13038  00223E  0E42               	movlw	66
 13039  002240                     i2u487_47:
 13040  002240  2EE8               	decfsz	wreg,f,c
 13041  002242  D7FE               	bra	i2u487_47
 13042  002244  D000               	nop2	
 13043                           
 13044                           ;lcd.c: 34: data = data << 4;
 13045  002246  3802               	swapf	i2lcdNibble@data,w,c
 13046  002248  0BF0               	andlw	240
 13047  00224A  6E02               	movwf	i2lcdNibble@data,c
 13048                           
 13049                           ;lcd.c: 36: temp = data & 0xF0;
 13050  00224C  5002               	movf	i2lcdNibble@data,w,c
 13051  00224E  0BF0               	andlw	240
 13052  002250  6E01               	movwf	i2lcdNibble@temp,c
 13053                           
 13054                           ;lcd.c: 37: LATD = LATD & 0x0F;
 13055  002252  508C               	movf	3980,w,c	;volatile
 13056  002254  0B0F               	andlw	15
 13057  002256  6E8C               	movwf	3980,c	;volatile
 13058                           
 13059                           ;lcd.c: 38: LATD = temp | LATD;
 13060  002258  5001               	movf	i2lcdNibble@temp,w,c
 13061  00225A  108C               	iorwf	3980,w,c	;volatile
 13062  00225C  6E8C               	movwf	3980,c	;volatile
 13063                           
 13064                           ;lcd.c: 40: LATDbits.LATD3 = 1;
 13065  00225E  868C               	bsf	3980,3,c	;volatile
 13066                           
 13067                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13068  002260  0E42               	movlw	66
 13069  002262                     i2u488_47:
 13070  002262  2EE8               	decfsz	wreg,f,c
 13071  002264  D7FE               	bra	i2u488_47
 13072  002266  D000               	nop2	
 13073                           
 13074                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 13075  002268  968C               	bcf	3980,3,c	;volatile
 13076                           
 13077                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13078  00226A  0E42               	movlw	66
 13079  00226C                     i2u489_47:
 13080  00226C  2EE8               	decfsz	wreg,f,c
 13081  00226E  D7FE               	bra	i2u489_47
 13082  002270  D000               	nop2	
 13083  002272  0012               	return		;funcret
 13084  002274                     __end_ofi2_lcdNibble:
 13085                           	opt stack 0
 13086                           pclatu	equ	0xFFB
 13087                           pclath	equ	0xFFA
 13088                           tblptru	equ	0xFF8
 13089                           tblptrh	equ	0xFF7
 13090                           tblptrl	equ	0xFF6
 13091                           tablat	equ	0xFF5
 13092                           prodh	equ	0xFF4
 13093                           prodl	equ	0xFF3
 13094                           intcon	equ	0xFF2
 13095                           intcon3	equ	0xFF0
 13096                           indf0	equ	0xFEF
 13097                           postinc0	equ	0xFEE
 13098                           fsr0h	equ	0xFEA
 13099                           fsr0l	equ	0xFE9
 13100                           wreg	equ	0xFE8
 13101                           postdec1	equ	0xFE5
 13102                           fsr1h	equ	0xFE2
 13103                           fsr1l	equ	0xFE1
 13104                           indf2	equ	0xFDF
 13105                           postinc2	equ	0xFDE
 13106                           postdec2	equ	0xFDD
 13107                           fsr2h	equ	0xFDA
 13108                           fsr2l	equ	0xFD9
 13109                           status	equ	0xFD8
 13110                           
 13111 ;; *************** function i2_getRTC *****************
 13112 ;; Defined at:
 13113 ;;		line 42 in file "RTC.c"
 13114 ;; Parameters:    Size  Location     Type
 13115 ;;		None
 13116 ;; Auto vars:     Size  Location     Type
 13117 ;;  getRTC          2    3[COMRAM] int 
 13118 ;; Return value:  Size  Location     Type
 13119 ;;                  1    wreg      void 
 13120 ;; Registers used:
 13121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13122 ;; Tracked objects:
 13123 ;;		On entry : 0/0
 13124 ;;		On exit  : 0/0
 13125 ;;		Unchanged: 0/0
 13126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;Total ram usage:        2 bytes
 13132 ;; Hardware stack levels used:    1
 13133 ;; Hardware stack levels required when called:    2
 13134 ;; This function calls:
 13135 ;;		i2_I2C_Master_Read
 13136 ;;		i2_I2C_Master_Start
 13137 ;;		i2_I2C_Master_Stop
 13138 ;;		i2_I2C_Master_Write
 13139 ;; This function is called by:
 13140 ;;		_printSortTimer
 13141 ;;		i2_printRTC
 13142 ;; This function uses a non-reentrant model
 13143 ;;
 13144                           
 13145                           	psect	text66
 13146  002014                     __ptext66:
 13147                           	opt stack 0
 13148  002014                     i2_getRTC:
 13149                           	opt stack 18
 13150                           
 13151                           ;RTC.c: 46: I2C_Master_Start();
 13152                           
 13153                           ;incstack = 0
 13154  002014  ECAA  F014         	call	i2_I2C_Master_Start	;wreg free
 13155                           
 13156                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
 13157  002018  0E00               	movlw	0
 13158  00201A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13159  00201C  0ED0               	movlw	208
 13160  00201E  6E02               	movwf	i2I2C_Master_Write@d,c
 13161  002020  EC95  F014         	call	i2_I2C_Master_Write	;wreg free
 13162                           
 13163                           ;RTC.c: 48: I2C_Master_Write(0x00);
 13164  002024  0E00               	movlw	0
 13165  002026  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13166  002028  0E00               	movlw	0
 13167  00202A  6E02               	movwf	i2I2C_Master_Write@d,c
 13168  00202C  EC95  F014         	call	i2_I2C_Master_Write	;wreg free
 13169                           
 13170                           ;RTC.c: 49: I2C_Master_Stop();
 13171  002030  ECA6  F014         	call	i2_I2C_Master_Stop	;wreg free
 13172                           
 13173                           ;RTC.c: 52: I2C_Master_Start();
 13174  002034  ECAA  F014         	call	i2_I2C_Master_Start	;wreg free
 13175                           
 13176                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
 13177  002038  0E00               	movlw	0
 13178  00203A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13179  00203C  0ED1               	movlw	209
 13180  00203E  6E02               	movwf	i2I2C_Master_Write@d,c
 13181  002040  EC95  F014         	call	i2_I2C_Master_Write	;wreg free
 13182                           
 13183                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
 13184  002044  0E00               	movlw	0
 13185  002046  6E05               	movwf	i2getRTC@i+1,c
 13186  002048  0E00               	movlw	0
 13187  00204A  6E04               	movwf	i2getRTC@i,c
 13188  00204C                     i2l4221:
 13189  00204C  BE05               	btfsc	i2getRTC@i+1,7,c
 13190  00204E  D006               	goto	i2l4225
 13191  002050  5005               	movf	i2getRTC@i+1,w,c
 13192  002052  E111               	bnz	i2l4231
 13193  002054  0E06               	movlw	6
 13194  002056  5C04               	subwf	i2getRTC@i,w,c
 13195  002058  B0D8               	btfsc	status,0,c
 13196  00205A  D00D               	goto	i2l4231
 13197  00205C                     i2l4225:
 13198                           
 13199                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
 13200  00205C  0ED4               	movlw	low _time
 13201  00205E  2404               	addwf	i2getRTC@i,w,c
 13202  002060  6ED9               	movwf	fsr2l,c
 13203  002062  0E00               	movlw	high _time
 13204  002064  2005               	addwfc	i2getRTC@i+1,w,c
 13205  002066  6EDA               	movwf	fsr2h,c
 13206  002068  0E01               	movlw	1
 13207  00206A  ECEC  F013         	call	i2_I2C_Master_Read
 13208  00206E  6EDF               	movwf	indf2,c
 13209  002070  4A04               	infsnz	i2getRTC@i,f,c
 13210  002072  2A05               	incf	i2getRTC@i+1,f,c
 13211  002074  D7EB               	goto	i2l4221
 13212  002076                     i2l4231:
 13213                           
 13214                           ;RTC.c: 56: }
 13215                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
 13216  002076  0E00               	movlw	0
 13217  002078  ECEC  F013         	call	i2_I2C_Master_Read
 13218  00207C  0100               	movlb	0	; () banked
 13219  00207E  6FDA               	movwf	(_time+6)& (0+255),b
 13220                           
 13221                           ;RTC.c: 58: I2C_Master_Stop();
 13222  002080  ECA6  F014         	call	i2_I2C_Master_Stop	;wreg free
 13223  002084  0012               	return		;funcret
 13224  002086                     __end_ofi2_getRTC:
 13225                           	opt stack 0
 13226                           pclatu	equ	0xFFB
 13227                           pclath	equ	0xFFA
 13228                           tblptru	equ	0xFF8
 13229                           tblptrh	equ	0xFF7
 13230                           tblptrl	equ	0xFF6
 13231                           tablat	equ	0xFF5
 13232                           prodh	equ	0xFF4
 13233                           prodl	equ	0xFF3
 13234                           intcon	equ	0xFF2
 13235                           intcon3	equ	0xFF0
 13236                           indf0	equ	0xFEF
 13237                           postinc0	equ	0xFEE
 13238                           fsr0h	equ	0xFEA
 13239                           fsr0l	equ	0xFE9
 13240                           wreg	equ	0xFE8
 13241                           postdec1	equ	0xFE5
 13242                           fsr1h	equ	0xFE2
 13243                           fsr1l	equ	0xFE1
 13244                           indf2	equ	0xFDF
 13245                           postinc2	equ	0xFDE
 13246                           postdec2	equ	0xFDD
 13247                           fsr2h	equ	0xFDA
 13248                           fsr2l	equ	0xFD9
 13249                           status	equ	0xFD8
 13250                           
 13251 ;; *************** function i2_I2C_Master_Write *****************
 13252 ;; Defined at:
 13253 ;;		line 47 in file "I2C.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  d               2    1[COMRAM] unsigned int 
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;		None
 13258 ;; Return value:  Size  Location     Type
 13259 ;;                  1    wreg      void 
 13260 ;; Registers used:
 13261 ;;		wreg, status,2, status,0, cstack
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13267 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;Total ram usage:        2 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; Hardware stack levels required when called:    1
 13274 ;; This function calls:
 13275 ;;		i2_I2C_Master_Wait
 13276 ;; This function is called by:
 13277 ;;		i2_getRTC
 13278 ;; This function uses a non-reentrant model
 13279 ;;
 13280                           
 13281                           	psect	text67
 13282  00292A                     __ptext67:
 13283                           	opt stack 0
 13284  00292A                     i2_I2C_Master_Write:
 13285                           	opt stack 18
 13286                           
 13287                           ;I2C.c: 49: I2C_Master_Wait();
 13288                           
 13289                           ;incstack = 0
 13290  00292A  EC65  F014         	call	i2_I2C_Master_Wait	;wreg free
 13291                           
 13292                           ;I2C.c: 50: SSPBUF = d;
 13293  00292E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 13294  002932  0012               	return		;funcret
 13295  002934                     __end_ofi2_I2C_Master_Write:
 13296                           	opt stack 0
 13297                           pclatu	equ	0xFFB
 13298                           pclath	equ	0xFFA
 13299                           tblptru	equ	0xFF8
 13300                           tblptrh	equ	0xFF7
 13301                           tblptrl	equ	0xFF6
 13302                           tablat	equ	0xFF5
 13303                           prodh	equ	0xFF4
 13304                           prodl	equ	0xFF3
 13305                           intcon	equ	0xFF2
 13306                           intcon3	equ	0xFF0
 13307                           indf0	equ	0xFEF
 13308                           postinc0	equ	0xFEE
 13309                           fsr0h	equ	0xFEA
 13310                           fsr0l	equ	0xFE9
 13311                           wreg	equ	0xFE8
 13312                           postdec1	equ	0xFE5
 13313                           fsr1h	equ	0xFE2
 13314                           fsr1l	equ	0xFE1
 13315                           indf2	equ	0xFDF
 13316                           postinc2	equ	0xFDE
 13317                           postdec2	equ	0xFDD
 13318                           fsr2h	equ	0xFDA
 13319                           fsr2l	equ	0xFD9
 13320                           status	equ	0xFD8
 13321                           
 13322 ;; *************** function i2_I2C_Master_Stop *****************
 13323 ;; Defined at:
 13324 ;;		line 41 in file "I2C.c"
 13325 ;; Parameters:    Size  Location     Type
 13326 ;;		None
 13327 ;; Auto vars:     Size  Location     Type
 13328 ;;		None
 13329 ;; Return value:  Size  Location     Type
 13330 ;;                  1    wreg      void 
 13331 ;; Registers used:
 13332 ;;		wreg, status,2, status,0, cstack
 13333 ;; Tracked objects:
 13334 ;;		On entry : 0/0
 13335 ;;		On exit  : 0/0
 13336 ;;		Unchanged: 0/0
 13337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13342 ;;Total ram usage:        0 bytes
 13343 ;; Hardware stack levels used:    1
 13344 ;; Hardware stack levels required when called:    1
 13345 ;; This function calls:
 13346 ;;		i2_I2C_Master_Wait
 13347 ;; This function is called by:
 13348 ;;		i2_getRTC
 13349 ;; This function uses a non-reentrant model
 13350 ;;
 13351                           
 13352                           	psect	text68
 13353  00294C                     __ptext68:
 13354                           	opt stack 0
 13355  00294C                     i2_I2C_Master_Stop:
 13356                           	opt stack 18
 13357                           
 13358                           ;I2C.c: 43: I2C_Master_Wait();
 13359                           
 13360                           ;incstack = 0
 13361  00294C  EC65  F014         	call	i2_I2C_Master_Wait	;wreg free
 13362                           
 13363                           ;I2C.c: 44: PEN = 1;
 13364  002950  84C5               	bsf	4037,2,c	;volatile
 13365  002952  0012               	return		;funcret
 13366  002954                     __end_ofi2_I2C_Master_Stop:
 13367                           	opt stack 0
 13368                           pclatu	equ	0xFFB
 13369                           pclath	equ	0xFFA
 13370                           tblptru	equ	0xFF8
 13371                           tblptrh	equ	0xFF7
 13372                           tblptrl	equ	0xFF6
 13373                           tablat	equ	0xFF5
 13374                           prodh	equ	0xFF4
 13375                           prodl	equ	0xFF3
 13376                           intcon	equ	0xFF2
 13377                           intcon3	equ	0xFF0
 13378                           indf0	equ	0xFEF
 13379                           postinc0	equ	0xFEE
 13380                           fsr0h	equ	0xFEA
 13381                           fsr0l	equ	0xFE9
 13382                           wreg	equ	0xFE8
 13383                           postdec1	equ	0xFE5
 13384                           fsr1h	equ	0xFE2
 13385                           fsr1l	equ	0xFE1
 13386                           indf2	equ	0xFDF
 13387                           postinc2	equ	0xFDE
 13388                           postdec2	equ	0xFDD
 13389                           fsr2h	equ	0xFDA
 13390                           fsr2l	equ	0xFD9
 13391                           status	equ	0xFD8
 13392                           
 13393 ;; *************** function i2_I2C_Master_Start *****************
 13394 ;; Defined at:
 13395 ;;		line 29 in file "I2C.c"
 13396 ;; Parameters:    Size  Location     Type
 13397 ;;		None
 13398 ;; Auto vars:     Size  Location     Type
 13399 ;;		None
 13400 ;; Return value:  Size  Location     Type
 13401 ;;                  1    wreg      void 
 13402 ;; Registers used:
 13403 ;;		wreg, status,2, status,0, cstack
 13404 ;; Tracked objects:
 13405 ;;		On entry : 0/0
 13406 ;;		On exit  : 0/0
 13407 ;;		Unchanged: 0/0
 13408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13413 ;;Total ram usage:        0 bytes
 13414 ;; Hardware stack levels used:    1
 13415 ;; Hardware stack levels required when called:    1
 13416 ;; This function calls:
 13417 ;;		i2_I2C_Master_Wait
 13418 ;; This function is called by:
 13419 ;;		i2_getRTC
 13420 ;; This function uses a non-reentrant model
 13421 ;;
 13422                           
 13423                           	psect	text69
 13424  002954                     __ptext69:
 13425                           	opt stack 0
 13426  002954                     i2_I2C_Master_Start:
 13427                           	opt stack 18
 13428                           
 13429                           ;I2C.c: 31: I2C_Master_Wait();
 13430                           
 13431                           ;incstack = 0
 13432  002954  EC65  F014         	call	i2_I2C_Master_Wait	;wreg free
 13433                           
 13434                           ;I2C.c: 32: SEN = 1;
 13435  002958  80C5               	bsf	4037,0,c	;volatile
 13436  00295A  0012               	return		;funcret
 13437  00295C                     __end_ofi2_I2C_Master_Start:
 13438                           	opt stack 0
 13439                           pclatu	equ	0xFFB
 13440                           pclath	equ	0xFFA
 13441                           tblptru	equ	0xFF8
 13442                           tblptrh	equ	0xFF7
 13443                           tblptrl	equ	0xFF6
 13444                           tablat	equ	0xFF5
 13445                           prodh	equ	0xFF4
 13446                           prodl	equ	0xFF3
 13447                           intcon	equ	0xFF2
 13448                           intcon3	equ	0xFF0
 13449                           indf0	equ	0xFEF
 13450                           postinc0	equ	0xFEE
 13451                           fsr0h	equ	0xFEA
 13452                           fsr0l	equ	0xFE9
 13453                           wreg	equ	0xFE8
 13454                           postdec1	equ	0xFE5
 13455                           fsr1h	equ	0xFE2
 13456                           fsr1l	equ	0xFE1
 13457                           indf2	equ	0xFDF
 13458                           postinc2	equ	0xFDE
 13459                           postdec2	equ	0xFDD
 13460                           fsr2h	equ	0xFDA
 13461                           fsr2l	equ	0xFD9
 13462                           status	equ	0xFD8
 13463                           
 13464 ;; *************** function i2_I2C_Master_Read *****************
 13465 ;; Defined at:
 13466 ;;		line 53 in file "I2C.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;  a               1    wreg     unsigned char 
 13469 ;; Auto vars:     Size  Location     Type
 13470 ;;  a               1    1[COMRAM] unsigned char 
 13471 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13472 ;; Return value:  Size  Location     Type
 13473 ;;                  1    wreg      unsigned char 
 13474 ;; Registers used:
 13475 ;;		wreg, status,2, status,0, cstack
 13476 ;; Tracked objects:
 13477 ;;		On entry : 0/0
 13478 ;;		On exit  : 0/0
 13479 ;;		Unchanged: 0/0
 13480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13484 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13485 ;;Total ram usage:        2 bytes
 13486 ;; Hardware stack levels used:    1
 13487 ;; Hardware stack levels required when called:    1
 13488 ;; This function calls:
 13489 ;;		i2_I2C_Master_Wait
 13490 ;; This function is called by:
 13491 ;;		i2_getRTC
 13492 ;; This function uses a non-reentrant model
 13493 ;;
 13494                           
 13495                           	psect	text70
 13496  0027D8                     __ptext70:
 13497                           	opt stack 0
 13498  0027D8                     i2_I2C_Master_Read:
 13499                           	opt stack 18
 13500                           
 13501                           ;incstack = 0
 13502                           ;i2I2C_Master_Read@a stored from wreg
 13503  0027D8  6E02               	movwf	i2I2C_Master_Read@a,c
 13504                           
 13505                           ;I2C.c: 55: unsigned char temp;
 13506                           ;I2C.c: 56: I2C_Master_Wait();
 13507  0027DA  EC65  F014         	call	i2_I2C_Master_Wait	;wreg free
 13508                           
 13509                           ;I2C.c: 57: RCEN = 1;
 13510  0027DE  86C5               	bsf	4037,3,c	;volatile
 13511                           
 13512                           ;I2C.c: 58: I2C_Master_Wait();
 13513  0027E0  EC65  F014         	call	i2_I2C_Master_Wait	;wreg free
 13514                           
 13515                           ;I2C.c: 59: temp = SSPBUF;
 13516  0027E4  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 13517                           
 13518                           ;I2C.c: 60: I2C_Master_Wait();
 13519  0027E8  EC65  F014         	call	i2_I2C_Master_Wait	;wreg free
 13520                           
 13521                           ;I2C.c: 61: ACKDT = (a)?0:1;
 13522  0027EC  5002               	movf	i2I2C_Master_Read@a,w,c
 13523  0027EE  A4D8               	btfss	status,2,c
 13524  0027F0  D002               	goto	i2u245_40
 13525  0027F2  8AC5               	bsf	4037,5,c	;volatile
 13526  0027F4  D001               	goto	i2l3971
 13527  0027F6                     i2u245_40:
 13528  0027F6  9AC5               	bcf	4037,5,c	;volatile
 13529  0027F8                     i2l3971:
 13530                           
 13531                           ;I2C.c: 62: ACKEN = 1;
 13532  0027F8  88C5               	bsf	4037,4,c	;volatile
 13533                           
 13534                           ;I2C.c: 63: return temp;
 13535  0027FA  5003               	movf	i2I2C_Master_Read@temp,w,c
 13536  0027FC  0012               	return	
 13537  0027FE                     __end_ofi2_I2C_Master_Read:
 13538                           	opt stack 0
 13539                           pclatu	equ	0xFFB
 13540                           pclath	equ	0xFFA
 13541                           tblptru	equ	0xFF8
 13542                           tblptrh	equ	0xFF7
 13543                           tblptrl	equ	0xFF6
 13544                           tablat	equ	0xFF5
 13545                           prodh	equ	0xFF4
 13546                           prodl	equ	0xFF3
 13547                           intcon	equ	0xFF2
 13548                           intcon3	equ	0xFF0
 13549                           indf0	equ	0xFEF
 13550                           postinc0	equ	0xFEE
 13551                           fsr0h	equ	0xFEA
 13552                           fsr0l	equ	0xFE9
 13553                           wreg	equ	0xFE8
 13554                           postdec1	equ	0xFE5
 13555                           fsr1h	equ	0xFE2
 13556                           fsr1l	equ	0xFE1
 13557                           indf2	equ	0xFDF
 13558                           postinc2	equ	0xFDE
 13559                           postdec2	equ	0xFDD
 13560                           fsr2h	equ	0xFDA
 13561                           fsr2l	equ	0xFD9
 13562                           status	equ	0xFD8
 13563                           
 13564 ;; *************** function i2_I2C_Master_Wait *****************
 13565 ;; Defined at:
 13566 ;;		line 24 in file "I2C.c"
 13567 ;; Parameters:    Size  Location     Type
 13568 ;;		None
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;		None
 13571 ;; Return value:  Size  Location     Type
 13572 ;;                  1    wreg      void 
 13573 ;; Registers used:
 13574 ;;		wreg, status,2, status,0
 13575 ;; Tracked objects:
 13576 ;;		On entry : 0/0
 13577 ;;		On exit  : 0/0
 13578 ;;		Unchanged: 0/0
 13579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13582 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13583 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13584 ;;Total ram usage:        1 bytes
 13585 ;; Hardware stack levels used:    1
 13586 ;; This function calls:
 13587 ;;		Nothing
 13588 ;; This function is called by:
 13589 ;;		i2_I2C_Master_Start
 13590 ;;		i2_I2C_Master_Stop
 13591 ;;		i2_I2C_Master_Write
 13592 ;;		i2_I2C_Master_Read
 13593 ;; This function uses a non-reentrant model
 13594 ;;
 13595                           
 13596                           	psect	text71
 13597  0028CA                     __ptext71:
 13598                           	opt stack 0
 13599  0028CA                     i2_I2C_Master_Wait:
 13600                           	opt stack 18
 13601  0028CA                     i2l138:
 13602  0028CA  B4C7               	btfsc	4039,2,c	;volatile
 13603  0028CC  D7FE               	goto	i2l138
 13604  0028CE  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13605  0028D2  0E1F               	movlw	31
 13606  0028D4  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13607  0028D6  B4D8               	btfsc	status,2,c
 13608  0028D8  0012               	return	
 13609  0028DA  D7F7               	goto	i2l138
 13610  0028DC                     __end_ofi2_I2C_Master_Wait:
 13611                           	opt stack 0
 13612                           pclatu	equ	0xFFB
 13613                           pclath	equ	0xFFA
 13614                           tblptru	equ	0xFF8
 13615                           tblptrh	equ	0xFF7
 13616                           tblptrl	equ	0xFF6
 13617                           tablat	equ	0xFF5
 13618                           prodh	equ	0xFF4
 13619                           prodl	equ	0xFF3
 13620                           intcon	equ	0xFF2
 13621                           intcon3	equ	0xFF0
 13622                           indf0	equ	0xFEF
 13623                           postinc0	equ	0xFEE
 13624                           fsr0h	equ	0xFEA
 13625                           fsr0l	equ	0xFE9
 13626                           wreg	equ	0xFE8
 13627                           postdec1	equ	0xFE5
 13628                           fsr1h	equ	0xFE2
 13629                           fsr1l	equ	0xFE1
 13630                           indf2	equ	0xFDF
 13631                           postinc2	equ	0xFDE
 13632                           postdec2	equ	0xFDD
 13633                           fsr2h	equ	0xFDA
 13634                           fsr2l	equ	0xFD9
 13635                           status	equ	0xFD8
 13636                           pclatu	equ	0xFFB
 13637                           pclath	equ	0xFFA
 13638                           tblptru	equ	0xFF8
 13639                           tblptrh	equ	0xFF7
 13640                           tblptrl	equ	0xFF6
 13641                           tablat	equ	0xFF5
 13642                           prodh	equ	0xFF4
 13643                           prodl	equ	0xFF3
 13644                           intcon	equ	0xFF2
 13645                           intcon3	equ	0xFF0
 13646                           indf0	equ	0xFEF
 13647                           postinc0	equ	0xFEE
 13648                           fsr0h	equ	0xFEA
 13649                           fsr0l	equ	0xFE9
 13650                           wreg	equ	0xFE8
 13651                           postdec1	equ	0xFE5
 13652                           fsr1h	equ	0xFE2
 13653                           fsr1l	equ	0xFE1
 13654                           indf2	equ	0xFDF
 13655                           postinc2	equ	0xFDE
 13656                           postdec2	equ	0xFDD
 13657                           fsr2h	equ	0xFDA
 13658                           fsr2l	equ	0xFD9
 13659                           status	equ	0xFD8
 13660                           
 13661                           	psect	rparam
 13662  0000                     pclatu	equ	0xFFB
 13663                           pclath	equ	0xFFA
 13664                           tblptru	equ	0xFF8
 13665                           tblptrh	equ	0xFF7
 13666                           tblptrl	equ	0xFF6
 13667                           tablat	equ	0xFF5
 13668                           prodh	equ	0xFF4
 13669                           prodl	equ	0xFF3
 13670                           intcon	equ	0xFF2
 13671                           intcon3	equ	0xFF0
 13672                           indf0	equ	0xFEF
 13673                           postinc0	equ	0xFEE
 13674                           fsr0h	equ	0xFEA
 13675                           fsr0l	equ	0xFE9
 13676                           wreg	equ	0xFE8
 13677                           postdec1	equ	0xFE5
 13678                           fsr1h	equ	0xFE2
 13679                           fsr1l	equ	0xFE1
 13680                           indf2	equ	0xFDF
 13681                           postinc2	equ	0xFDE
 13682                           postdec2	equ	0xFDD
 13683                           fsr2h	equ	0xFDA
 13684                           fsr2l	equ	0xFD9
 13685                           status	equ	0xFD8
 13686                           
 13687                           	psect	temp
 13688  00007E                     btemp:
 13689                           	opt stack 0
 13690  00007E                     	ds	1
 13691  0000                     int$flags	set	btemp
 13692                           pclatu	equ	0xFFB
 13693                           pclath	equ	0xFFA
 13694                           tblptru	equ	0xFF8
 13695                           tblptrh	equ	0xFF7
 13696                           tblptrl	equ	0xFF6
 13697                           tablat	equ	0xFF5
 13698                           prodh	equ	0xFF4
 13699                           prodl	equ	0xFF3
 13700                           intcon	equ	0xFF2
 13701                           intcon3	equ	0xFF0
 13702                           indf0	equ	0xFEF
 13703                           postinc0	equ	0xFEE
 13704                           fsr0h	equ	0xFEA
 13705                           fsr0l	equ	0xFE9
 13706                           wreg	equ	0xFE8
 13707                           postdec1	equ	0xFE5
 13708                           fsr1h	equ	0xFE2
 13709                           fsr1l	equ	0xFE1
 13710                           indf2	equ	0xFDF
 13711                           postinc2	equ	0xFDE
 13712                           postdec2	equ	0xFDD
 13713                           fsr2h	equ	0xFDA
 13714                           fsr2l	equ	0xFD9
 13715                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        12
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     84     122
    BANK1           256      0      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _ID->_MAGNETISM_in
    _Distribution->_moveServoCup
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38488
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0     860
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0     766
                                             10 BANK0      1     1      0
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   7     7      0      72
                                              2 BANK0      7     7      0
                       _MAGNETISM_in
                     _moveServoBlock
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MAGNETISM_in                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0      22
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13210
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12360
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23745
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7532
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4693
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
     _ID
       _MAGNETISM_in
       _moveServoBlock
     _Loading
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       E       7        5.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     105      34        0.0%
DATA                 0      0     105       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Feb 23 20:31:10 2017

                   i2_I2C_Master_Start 2954                     i2_I2C_Master_Write 292A  
                                   _ID 1B9C                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0073  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l222 28B8                                    l225 28BE  
                                  l138 2890                                    l335 00E0  
                                  l689 1F76                                    l878 0D7C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00EB  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B        __end_of_change_state_to_menu_11 25BA  
      __end_of_change_state_to_menu_12 245C        __end_of_change_state_to_menu_22 2424  
      __end_of_change_state_to_menu_23 258A           _f_can_coming_to_distribution 00E3  
                       ??_Distribution 0081        __end_of_change_state_to_logs_11 26AA  
      __end_of_change_state_to_logs_12 267A        __end_of_change_state_to_logs_22 264A  
      __end_of_change_state_to_logs_23 2734        __end_of_change_state_to_logs_33 261A  
      __end_of_change_state_to_logs_34 25EA                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1063 1DF8  
                                 l1055 2302                                   l4101 07B0  
                                 l1630 200A                                   l4111 07E0  
                                 l1640 21B4                                   l4113 07E6  
                                 l4201 1A7A                                   l4131 0844  
                                 l4043 0584                                   l5011 00F8  
                                 l4125 0822                                   l4053 05B4  
                                 l5101 0280                                   l5021 011A  
                                 l5013 00FE                                   l4151 08C8  
                                 l4143 08A0                                   l4135 087C  
                                 l4047 0598                                   l4161 08FC  
                                 l4137 0886                                   l4049 05AA  
                                 l4401 0E1C                                   l5105 0298  
                                 l5025 0132                                   l5017 0110  
                                 l4209 1ACE                                   l1577 1AE0  
                                 l4155 08E2                                   l4091 0738  
                                 l4075 0696                                   l4067 0664  
                                 l4059 05E8                                   l4411 0EB2  
                                 l4403 0E3A                                   l5211 047C  
                                 l5203 045A                                   l5131 0324  
                                 l5123 0302                                   l5051 01B8  
                                 l5043 0196                                   l4165 0954  
                                 l4149 08BC                                   l4085 070E  
                                 l4077 06A2                                   l4173 1ED8  
                                 l4413 0ED0                                   l4405 0E58  
                                 l5221 0498                                   l5141 0340  
                                 l5061 01D4                                   l5029 0144  
                                 l4159 08F6                                   l4095 0764  
                                 l4087 071A                                   l4079 06A8  
                                 l4167 0960                                   l4183 1F0E  
                                 l4407 0E76                                   l5207 0464  
                                 l5127 030C                                   l5047 01A0  
                                 l4511 1B00                                   l4089 0720  
                                 l4177 1EEE                                   l4409 0E94  
                                 l4417 0EEE                                   l5225 04B0  
                                 l5217 048E                                   l5145 0358  
                                 l5137 0336                                   l5065 01EC  
                                 l5057 01CA                                   l4521 1B8C  
                                 l4099 077C                                   l4187 2466  
                                 l4419 0F4C                                   l5251 0528  
                                 l5243 0506                                   l5171 03D0  
                                 l5163 03AE                                   l5091 0264  
                                 l5083 0242                                   l4531 22D0  
                                 l4515 1B16                                   l4189 2472  
                                 l5261 0544                                   l5181 03EC  
                                 l4197 1A64                                   l4533 22E0  
                                 l3903 2780                                   l4391 0D86  
                                 l5247 0510                                   l5167 03B8  
                                 l5087 024C                                   l4199 1A74  
                                 l4551 1DC4                                   l4543 1D84  
                                 l3921 1FC6                                   l4393 0DA4  
                                 l4385 0CFA                                   l5265 055C  
                                 l5257 053A                                   l5185 0404  
                                 l5177 03E2                                   l5097 0276  
                                 l4641 1E64                                   l4545 1D94  
                                 l4537 22F2                                   l3931 1FFC  
                                 l3923 1FCC                                   l4395 0DC2  
                                 l4547 1DA4                                   l4555 1DD6  
                                 l4901 19AA                                   l3941 217C  
                                 l4397 0DE0                                   l5269 0568  
                                 l4637 1E4E                                   l4549 1DB4  
                                 l4911 19DA                                   l3919 1FBA  
                                 l3943 2182                                   l4399 0DFE  
                                 l4647 1E90                                   l5561 1F62  
                                 l4907 19C8                                   l4923 1A18  
                                 l3947 21A6                                   l3939 2170  
                                 l4835 1D1C                                   l5571 1F78  
                                 l4909 19D4                                   l3885 26FE  
                                 l5565 1F6C                                   l5557 1F56  
                                 l4927 1A2C                                   l4919 1A0A  
                                 l4951 1C96                                   l4943 1C70  
                                 l5567 1F72                                   l5559 1F5C  
                                 l4873 1C22                                   l4849 1D54  
                                 _ADFM 007E07                                   l4963 1CDC  
                                 l4955 1CBA                                   l4947 1C84  
                                 l4939 1C60                                   l4949 1C90  
                                 l4895 1994                                   l4959 1CC8  
                                 _ADON 007E10                                   STR_1 FEBA  
                                 STR_2 FDE8                                   STR_3 FDFD  
                                 STR_4 FF86                                   STR_5 FFC4  
                                 STR_6 FEFE                                   STR_7 FFB3  
                                 STR_8 FE0F                                   STR_9 FE98  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u2350 26FC  
                                 u3180 0D7C                                   u3420 1BD2  
                                 u3165 21EE                                   u2630 075A  
                                 u3450 1C12                                   u3428 1BD6  
                                 u2637 0750                                   u2590 06E2  
                                 u3458 1C16                                   _PEIE 007F96  
                                 u2597 06D8                                   u4607 23A0  
                                 u4617 002A                                   u4707 0314  
                                 u4627 0122                                   _RCEN 007E2B  
                                 u4717 0348                                   u4637 0152  
                                 u4807 054C                                   u4727 0372  
                                 u4647 01A8                                   u4817 2114  
                                 u4737 03C0                                   u4657 01DC  
                                 u4827 211E                                   u4747 03F4  
                                 u4667 0206                                   u4587 1D0A  
                                 u4837 214A                                   u4757 041E  
                                 u4677 0254                                   u4597 236C  
                                 u4847 2154                                   u4767 046C  
                                 u4687 0288                                   u4777 04A0  
                                 u4697 02B2                                   u4787 04CA  
                                 u4797 0518                                   _RSEN 007E29  
                          _stopSignals 287A                                   _back 005D  
                                 _main 1F1E                                   _down 0065  
                                 _keys FDB5                                   _time 00D4  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 27FE  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 2914  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 1250                            i2_lcdNibble 221E  
                      __end_of_Loading 1D7A                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 1A36                                  STR_10 FEDC  
                                STR_11 FEA9                                  STR_20 FF64  
                                STR_12 FEED                                  STR_13 FECB  
                                STR_21 FE65                                  STR_30 FE32  
                                STR_22 FE76                                  STR_14 FFFB  
                                STR_15 FF97                                  STR_23 FF53  
                                STR_31 FF31                                  STR_32 FF31  
                                STR_40 FFF7                                  STR_16 FF75  
                                STR_24 FF0F                                  STR_41 FFDF  
                                STR_17 FE76                                  STR_33 FE54  
                                STR_25 FE32                                  STR_34 FE43  
                                STR_50 FDE8                                  STR_42 FFD7  
                                STR_18 FE87                                  STR_26 FE21  
                                STR_43 FFD3                                  STR_51 FFBD  
                                STR_19 FF64                                  STR_35 FF42  
                                STR_27 FF20                                  STR_28 FF20  
                                STR_44 FFE3                                  STR_36 FFDB  
                      __end_of___awmod 1CE6                                  STR_45 FFEF  
                                STR_37 FFCB                                  STR_29 FE43  
                                STR_46 FFF3                                  STR_38 FFE7  
                                STR_39 FFEB                                  STR_47 FFCF  
                                STR_48 FDD0                                  STR_49 FFA8  
                                ?_sort 0001                        __end_of___lldiv 1AF2  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 2014                        __end_of___lwmod 21BE  
                                i2l138 28CA                                  i2l387 124C  
                      ___awdiv@counter 008A                                  i2l878 12DE  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 28FC  
                      __end_of_handler 1978                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_initLCD 23AA  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                      __end_of_loadRTC 1E98                                  _block 0077  
                      __end_of_dpowers FDD0                                  _first 00F8  
                                _enter 0067                        __end_of_isdigit 278A  
                                _input 0079                                  _putch 28DC  
                                pclath 000FFA                                  tablat 000FF5  
              __size_of_moveServoBlock 0050                       __end_ofi2___wmul 27D8  
                     __end_ofi2_getRTC 2086                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 0CC6                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                 moveServoCup@myPosition 0080  
                     __end_ofi2_strcpy 24FA                       _count_can_no_lab 005F  
                      __initialization 2086                     __size_ofi2_lcdInst 000C  
                         __end_of_main 1F9C                           __end_of_keys FDC6  
                         __end_of_sort 2820                             i2printf@ap 001E  
                           i2printf@cp 0020                     __size_ofi2_isdigit 001E  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00D4                   __end_of_MAGNETISM_in 2908  
                               ??_sort 008B                          __activetblptr 000003  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 0081  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 252A  
            i2_change_state_to_menu_22 24FA                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1154 1926                                 i2l1156 193C  
                               i2l4005 228A                                 i2l1630 22BC  
                               i2l4007 2292                                 i2l1640 23E2  
                               i2l4017 22B2                                 i2l4009 2296  
                               i2l4033 23D8                                 i2l4025 23B8  
                               i2l4027 23C0                                 i2l4221 204C  
                               i2l4029 23C4                                 i2l4231 2076  
                               i2l4303 0B78                                 i2l4225 205C  
                               i2l4305 0B7C                                 i2l4241 09A8  
                               i2l4323 0BC8                                 i2l4251 09E0  
                               i2l4235 098A                                 i2l4341 0C20  
                               i2l4317 0BAE                                 i2l4245 09AE  
                               i2l4343 0C28                                 i2l4351 0C4E  
                               i2l4335 0C0A                                 i2l4327 0BEC  
                               i2l4271 0A78                                 i2l4239 099A  
                               i2l4353 0C54                                 i2l4329 0BF4  
                               i2l4281 0AD2                                 i2l4601 132A  
                               i2l5401 117E                                 i2l5321 1046  
                               i2l5313 1028                                 i2l5305 100C  
                               i2l4347 0C3C                                 i2l4283 0AE4  
                               i2l4267 0A6A                                 i2l4259 0A42  
                               i2l4291 0B20                                 i2l4363 24D2  
                               i2l4611 1398                                 i2l4603 1340  
                               i2l4357 0CA2                                 i2l4277 0AC2  
                               i2l4269 0A74                                 i2l4293 0B50  
                               i2l4701 16C8                                 i2l4365 24DA  
                               i2l4613 13AE                                 i2l4605 1356  
                               i2l4621 13F0                                 i2l5421 11D4  
                               i2l5413 11B0                                 i2l5405 1194  
                               i2l5341 1094                                 i2l5333 1070  
                               i2l5325 1054                                 i2l5317 1038  
                               i2l5309 101A                                 i2l4287 0B0E  
                               i2l4279 0ACC                                 i2l4359 0CAA  
                               i2l4703 16CC                                 i2l4615 13C4  
                               i2l4607 136C                                 i2l4623 144A  
                               i2l5513 14A2                                 i2l4721 1702  
                               i2l4713 16EA                                 i2l4617 13DA  
                               i2l4609 1382                                 i2l5417 11BE  
                               i2l5409 11A2                                 i2l5361 10E2  
                               i2l5353 10BE                                 i2l5345 10A2  
                               i2l5337 107E                                 i2l5329 1062  
                               i2l5281 0FC6                                 i2l4803 182E  
                               i2l4723 1708                                 i2l4715 16F0  
                               i2l5427 11E2                                 i2l5509 1492  
                               i2l4717 16F6                                 i2l4709 16D6  
                               i2l5381 1130                                 i2l5373 1114  
                               i2l5365 10F0                                 i2l5357 10D4  
                               i2l5349 10B0                                 i2l5293 0FF0  
                               i2l5285 0FD4                                 i2l5613 18F4  
                               i2l5519 14FC                                 i2l4719 16FC  
                               i2l4727 170E                                 i2l5279 0FC0  
                               i2l5529 15BE                                 i2l4753 1778  
                               i2l4809 1838                                 i2l5393 1162  
                               i2l5385 113E                                 i2l5377 1122  
                               i2l5369 10FE                                 i2l5297 0FFE  
                               i2l5289 0FE2                                 i2l5641 193A  
                               i2l3971 27F8                                 i2l4763 179E  
                               i2l4747 176A                                 i2l4739 1752  
                               i2l4691 169E                                 i2l4595 12E8  
                               i2l4781 17D8                                 i2l4773 17C0  
                               i2l4757 1794                                 i2l4597 12FE  
                               i2l4589 127C                                 i2l5397 1170  
                               i2l5389 1154                                 i2l4791 17F8  
                               i2l4767 17B2                                 i2l4599 1314  
                               i2l4769 17B6                                 i2l3995 2858  
                               i2l4795 180A                                 i2l4787 17E6  
                               i2l4699 16B8                                 i2l5597 18D4  
                               i2l4799 181C                                 i2l5793 1726  
                               i2l5785 1200                                 i2l5795 1742  
                               i2l5787 1222                                 i2l5789 123E  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 28B8  
                          ?i2_printRTC 0001                   __end_of_Distribution 26D8  
                               ___wmul 2492                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                               _getRTC 1E98                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 2842  
                               _initUI 2860                                 clear_0 20CC  
                               clear_1 20D8                                 clear_2 20E4  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 28B8                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0576  
                            ??_handler 004B                                 _strcpy 245C  
                            ??_initLCD 0083                              ??_loadRTC 0095  
 __end_ofi2_change_state_to_menu_start 27B2  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 278A                           __pdataCOMRAM 007A  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 22C6  
                     __end_of_printRTC 0F90                           __mediumconst FDB4  
                    __end_ofi2___lwmod 23EC                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                    __end_ofi2_lcdInst 2920                      __end_ofi2_isdigit 2860  
                           __accesstop 0080                __end_of__initialization 20EA  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                           __pidataBANK0 2934  
                          i2printRTC@i 0041                          _initSortTimer 1AF2  
                        __end_of_putch 28EC                            i2printf@len 0024  
                          i2printf@val 0022                             __end_of_ID 1C44  
                           __end_of_UI 0576                     printSortTimer@hour 003F  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 2760  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 2734  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                       _moveServoBlock 22C6                             __pbssBANK0 00D4  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_640 00C8  
                              UI@i_641 00C9                         ?_initSortTimer 0001  
                              UI@i_660 00D2                                UI@i_652 00CE  
                              UI@i_644 00CA                                UI@i_661 00D3  
                              UI@i_653 00CF                                UI@i_645 00CB  
                              UI@i_656 00D0                                UI@i_648 00CC  
                              UI@i_657 00D1                                UI@i_649 00CD  
                              ?___wmul 0080                  __size_of_MAGNETISM_in 000C  
                              ?_getRTC 0001                                ?_initUI 0001  
                          ?_PortTestA5 0001                                ?_printf 008E  
            ID@top_bottom_conductivity 0083                                _UI$2056 00C5  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                          ?_moveServoCup 0001  
                           ??i2_printf 0019                 __end_of_moveServoBlock 2316  
                           ??i2_strcpy 0005                              ?_dispLogs 0001  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 2908  
                            ?_initTime 0080                           _MAGNETISM_in 28FC  
                      _f_loadingNewCan 00E9                        i2printRTC@month 003D  
                __size_of_Distribution 002E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 215C                                _Loading 1CE6  
          __size_ofi2_I2C_Master_Write 000A                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 1978                                ___awmod 1C44  
                              ___lldiv 1A36                        __size_of___wmul 0036  
                              ___lwdiv 1F9C                                ___lwmod 215C  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                                _canType 0078  
                      __size_of_initUI 001A                                __pcinit 2086  
                              __ramtop 1000                                _lcdInst 28EC  
                              _handler 0008                                __ptext0 1F1E  
                              __ptext1 287A                                __ptext2 27FE  
                              __ptext3 1CE6                                __ptext4 1AF2  
                              __ptext5 1B9C                                __ptext6 22C6  
                              __ptext7 28FC                                __ptext8 26AA  
                              __ptext9 1D7A                        __size_of_printf 040A  
                       ??_moveServoCup 0080                        __size_of_strcpy 0036  
                              _initLCD 2364                                _loadRTC 1E0C  
                              _dpowers FDC6                                _isdigit 2760  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                              _was_low 0075                        ?_moveServoBlock 0001  
                           ??_dispLogs 0003                           _Distribution 26AA  
                       __pintcode_body 1866                   end_of_initialization 20EA  
                           ??_initTime 0086                                int_func 1866  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1866  
                __end_of_machineConfig 2364                             _updateMenu 0F90  
                    i2_I2C_Master_Read 27D8                      i2_I2C_Master_Wait 28CA  
                    i2_I2C_Master_Stop 294C                      i2___lwdiv@divisor 0008  
                            i2___lwdiv 2274                              i2___lwmod 23AA  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 1486  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 2914                             _total_time 00EF  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                           ID@magnetic 0087                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 2842                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 005B                         __end_of___wmul 24C8  
                       __end_of_getRTC 1F1E                   __size_ofi2_lcdNibble 0056  
                        __pidataCOMRAM 295C                          i2lcdInst@data 0003  
                       __end_of_initUI 287A                       i2___wmul@product 0005  
                       __end_of_printf 0980                         _timer1highbits 006B  
                         i2printf@flag 0026                         __end_of_strcpy 2492  
            __end_ofi2_I2C_Master_Read 27FE              __end_ofi2_I2C_Master_Wait 28DC  
                         i2printf@prec 001D                    start_initialization 2086  
            __end_ofi2_I2C_Master_Stop 2954                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 00DB            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                         _timer3highbits 006F  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                   __end_of_moveServoCup 1E0C  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK0 00F2                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                           ??_PortTestA5 0080  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2171 0045  
                          __pbssCOMRAM 005B                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01FA  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1698 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                    __size_of_dispLogs 0014                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                     __end_of_PortTestA5 28CA  
                     _I2C_Master_Start 2944                              _f_lastCan 00E7  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 2920                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FDB4  
                            _lcdNibble 20F4                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                     ??_moveServoBlock 0080                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0069  
                            _cur_state 00DF                       ___lwdiv@quotient 0084  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 00A8  
                          __size_of_UI 0564             __end_ofi2_I2C_Master_Start 295C  
           __end_ofi2_I2C_Master_Write 2934                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 1680                            ??i2_isdigit 0001  
                             i2u322_40 12DE                               i2u245_40 27F6  
                             i2u293_40 0AA6                               i2u293_47 0A9C  
                             i2u447_40 15B8                               i2u297_40 0B06  
                             i2u297_47 0AFC                               i2u485_47 16BE  
                             i2u486_47 2236                               i2u487_47 2240  
                             i2u488_47 2262                               i2u489_47 226C  
                  __size_of_updateMenu 02C0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                    ID@side_conductivity 0085  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 0100                               i2___wmul 27B2  
                        lcdNibble@data 0081                               i2_getRTC 2014  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               i2_printf 0980  
                             i2_strcpy 24C8                    I2C_Master_Read@temp 0082  
                            copy_data0 209A                              copy_data1 20BA  
                __size_of_moveServoCup 0092                       __size_ofi2_putch 000C  
                        _timer1lowbits 006D                            _count_total 00DD  
                             __Hrparam 0000                          _timer3lowbits 0071  
                     __size_of_Loading 0094                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1B9C  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 258A             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 2424             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 23EC                _change_state_to_menu_23 255A  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 267A  
              _change_state_to_logs_12 264A                _change_state_to_logs_22 261A  
              _change_state_to_logs_23 2706                _change_state_to_logs_33 25EA  
              _change_state_to_logs_34 25BA                       __size_of___lwmod 0062  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 1970                       _timer1_20ms_high 007A  
                      _I2C_Master_Init 21BE                        _I2C_Master_Read 26D8  
                     __size_of_initLCD 0046                           _f_ID_receive 00F6  
                         _moveServoCup 1D7A                       __size_of_loadRTC 008C  
                      _I2C_Master_Wait 2890                        _I2C_Master_Stop 293C  
                     __size_of_isdigit 002A                         _printSortTimer 1486  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                             __ptext10 2316                               __ptext11 2860  
                             __ptext20 245C                               __ptext12 1E0C  
                             __ptext21 1E98                               __ptext13 21BE  
                             __ptext30 28DC                               __ptext22 2920  
                             __ptext14 1A36                               __ptext31 2760  
                             __ptext23 293C                               __ptext15 2734  
                             __ptext32 2492                               __ptext24 2944  
                             __ptext16 2820                               __ptext41 0F90  
                             __ptext33 215C                               __ptext25 26D8  
                             __ptext17 2364                               __ptext50 25BA  
                             __ptext42 278A                               __ptext34 1F9C  
                             __ptext26 2890                               __ptext18 0012  
                             __ptext51 25EA                               __ptext43 1250  
                             __ptext35 28EC                               __ptext27 23EC  
                             __ptext19 0CC6                               __ptext60 2842  
                             __ptext52 2706                               __ptext44 24C8  
                             __ptext36 20F4                               __ptext28 2424  
                             __ptext61 27B2                               __ptext53 261A  
                             __ptext45 1680                               __ptext37 1C44  
                             __ptext29 0576                               __ptext70 27D8  
                             __ptext62 23AA                               __ptext54 264A  
                             __ptext46 24FA                               __ptext38 1978  
                             __ptext71 28CA                               __ptext63 2274  
                             __ptext55 267A                               __ptext47 252A  
                             __ptext39 28B8                               __ptext64 2914  
                             __ptext56 28A4                               __ptext48 255A  
                             __ptext65 221E                               __ptext57 1486  
                             __ptext49 258A                               __ptext66 2014  
                             __ptext58 0980                               __ptext67 292A  
                             __ptext59 2908                               __ptext68 294C  
                             __ptext69 2954                               _dispLogs 28A4  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1698 0002                               _initTime 2820  
                        __size_of_main 007E                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00ED  
               __size_of_machineConfig 004E                          ??i2_lcdNibble 0001  
                             _printRTC 0CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                   _f_can_coming_to_ID 00E1                              printf@len 00A5  
                            printf@val 00A3      __end_ofi2_change_state_to_menu_12 255A  
    __end_ofi2_change_state_to_menu_22 252A                               loadRTC@i 0096  
               __end_of_printSortTimer 1680                              putch@data 0082  
             __end_of_I2C_Master_Start 294C                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 292A                             _INTCONbits 000FF2  
                         ??_updateMenu 0043                               isdigit@c 0082  
                             intlevel2 0000                        _timer1_20ms_low 007C  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                        ?_MAGNETISM_in 0080                    __end_of_stopSignals 2890  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 009F                               printf@cp 00A1  
                   __end_of_updateMenu 1250                __end_of_I2C_Master_Init 221E  
              __end_of_I2C_Master_Read 2706                __end_of_I2C_Master_Wait 28A4  
              __end_of_I2C_Master_Stop 2944                            lcdInst@data 0082  
                        printRTC@F3188 00F2                    __end_ofi2_lcdNibble 2274  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 00E5                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 2316  
                      ___lwmod@counter 008B               moveServoBlock@myPosition 0080  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00F1                         ??_MAGNETISM_in 0082  
                        dispLogs@myLog 0001                     i2printRTC@INT_time 002D  
