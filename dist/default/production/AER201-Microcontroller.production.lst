

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 12 17:37:08 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.40
   122                           ; Generated 01/12/2016 GMT
   123                           ; 
   124                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4620 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK1
   157  006102                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for UI@F3252
   161  006102  4D                 	db	77
   162  006103  4D                 	db	77
   163  006104  4D                 	db	77
   164  006105  00                 	db	0
   165                           
   166                           ;initializer for printRTC@F3242
   167  006106  4D                 	db	77
   168  006107  4D                 	db	77
   169  006108  4D                 	db	77
   170  006109  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FAA6                     __pmediumconst:
   174                           	opt stack 0
   175  00FAA6  00                 	db	0
   176  00FAA7                     _keys:
   177                           	opt stack 0
   178  00FAA7  31                 	db	49
   179  00FAA8  32                 	db	50
   180  00FAA9  33                 	db	51
   181  00FAAA  41                 	db	65
   182  00FAAB  34                 	db	52
   183  00FAAC  35                 	db	53
   184  00FAAD  36                 	db	54
   185  00FAAE  42                 	db	66
   186  00FAAF  37                 	db	55
   187  00FAB0  38                 	db	56
   188  00FAB1  39                 	db	57
   189  00FAB2  43                 	db	67
   190  00FAB3  2A                 	db	42
   191  00FAB4  30                 	db	48
   192  00FAB5  23                 	db	35
   193  00FAB6  44                 	db	68
   194  00FAB7  00                 	db	0
   195  00FAB8                     __end_of_keys:
   196                           	opt stack 0
   197  00FAB8                     _dpowers:
   198                           	opt stack 0
   199  00FAB8  0001               	dw	1
   200  00FABA  000A               	dw	10
   201  00FABC  0064               	dw	100
   202  00FABE  03E8               	dw	1000
   203  00FAC0  2710               	dw	10000
   204  00FAC2                     __end_of_dpowers:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _CMCONbits	set	4020
   213  0000                     _CVRCON	set	4021
   214  0000                     _EEADR	set	4009
   215  0000                     _EEADRH	set	4010
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _LATA	set	3977
   221  0000                     _LATAbits	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATBbits	set	3978
   224  0000                     _LATC	set	3979
   225  0000                     _LATCbits	set	3979
   226  0000                     _LATD	set	3980
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _OSCCON	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIR2bits	set	4001
   232  0000                     _PORTAbits	set	3968
   233  0000                     _PORTB	set	3969
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PR2	set	4043
   236  0000                     _SSPADD	set	4040
   237  0000                     _SSPBUF	set	4041
   238  0000                     _SSPCON1	set	4038
   239  0000                     _SSPCON2	set	4037
   240  0000                     _SSPSTAT	set	4039
   241  0000                     _T0CON	set	4053
   242  0000                     _T1CON	set	4045
   243  0000                     _T2CON	set	4042
   244  0000                     _T3CON	set	4017
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR1H	set	4047
   248  0000                     _TMR1L	set	4046
   249  0000                     _TMR3H	set	4019
   250  0000                     _TMR3L	set	4018
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _ACKDT	set	32301
   257  0000                     _ACKEN	set	32300
   258  0000                     _ADIE	set	31982
   259  0000                     _INT1IE	set	32643
   260  0000                     _INT1IF	set	32640
   261  0000                     _PEIE	set	32662
   262  0000                     _PEN	set	32298
   263  0000                     _RCEN	set	32299
   264  0000                     _RSEN	set	32297
   265  0000                     _SEN	set	32296
   266  0000                     _TMR0IE	set	32661
   267  0000                     _TMR0IF	set	32658
   268  0000                     _TMR0ON	set	32431
   269  0000                     _TMR1IE	set	31976
   270  0000                     _TMR1IF	set	31984
   271  0000                     _TMR1ON	set	32360
   272  0000                     _TMR2IE	set	31977
   273  0000                     _TMR2IF	set	31985
   274  0000                     _TMR2ON	set	32338
   275  0000                     _TMR3IE	set	32001
   276  0000                     _TMR3IF	set	32009
   277  0000                     _TMR3ON	set	32136
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FAC2                     STR_21:
   282  00FAC2  25                 	db	37
   283  00FAC3  30                 	db	48	;'0'
   284  00FAC4  32                 	db	50	;'2'
   285  00FAC5  64                 	db	100	;'d'
   286  00FAC6  25                 	db	37
   287  00FAC7  73                 	db	115	;'s'
   288  00FAC8  20                 	db	32
   289  00FAC9  7C                 	db	124
   290  00FACA  20                 	db	32
   291  00FACB  25                 	db	37
   292  00FACC  30                 	db	48	;'0'
   293  00FACD  32                 	db	50	;'2'
   294  00FACE  64                 	db	100	;'d'
   295  00FACF  3A                 	db	58	;':'
   296  00FAD0  25                 	db	37
   297  00FAD1  30                 	db	48	;'0'
   298  00FAD2  32                 	db	50	;'2'
   299  00FAD3  64                 	db	100	;'d'
   300  00FAD4  3A                 	db	58	;':'
   301  00FAD5  25                 	db	37
   302  00FAD6  30                 	db	48	;'0'
   303  00FAD7  32                 	db	50	;'2'
   304  00FAD8  64                 	db	100	;'d'
   305  00FAD9  00                 	db	0
   306  00FADA                     STR_66:
   307  00FADA  28                 	db	40
   308  00FADB  64                 	db	100	;'d'
   309  00FADC  61                 	db	97	;'a'
   310  00FADD  74                 	db	116	;'t'
   311  00FADE  61                 	db	97	;'a'
   312  00FADF  3A                 	db	58	;':'
   313  00FAE0  20                 	db	32
   314  00FAE1  25                 	db	37
   315  00FAE2  75                 	db	117	;'u'
   316  00FAE3  2C                 	db	44
   317  00FAE4  20                 	db	32
   318  00FAE5  61                 	db	97	;'a'
   319  00FAE6  64                 	db	100	;'d'
   320  00FAE7  64                 	db	100	;'d'
   321  00FAE8  72                 	db	114	;'r'
   322  00FAE9  3A                 	db	58	;':'
   323  00FAEA  20                 	db	32
   324  00FAEB  25                 	db	37
   325  00FAEC  75                 	db	117	;'u'
   326  00FAED  29                 	db	41
   327  00FAEE  00                 	db	0
   328  00FAEF                     STR_112:
   329  00FAEF  44                 	db	68	;'D'
   330  00FAF0  20                 	db	32
   331  00FAF1  57                 	db	87	;'W'
   332  00FAF2  49                 	db	73	;'I'
   333  00FAF3  4C                 	db	76	;'L'
   334  00FAF4  4C                 	db	76	;'L'
   335  00FAF5  20                 	db	32
   336  00FAF6  52                 	db	82	;'R'
   337  00FAF7  45                 	db	69	;'E'
   338  00FAF8  54                 	db	84	;'T'
   339  00FAF9  55                 	db	85	;'U'
   340  00FAFA  52                 	db	82	;'R'
   341  00FAFB  4E                 	db	78	;'N'
   342  00FAFC  20                 	db	32
   343  00FAFD  20                 	db	32
   344  00FAFE  20                 	db	32
   345  00FAFF  20                 	db	32
   346  00FB00  00                 	db	0
   347  00FB01                     STR_120:
   348  00FB01  4F                 	db	79	;'O'
   349  00FB02  54                 	db	84	;'T'
   350  00FB03  48                 	db	72	;'H'
   351  00FB04  45                 	db	69	;'E'
   352  00FB05  52                 	db	82	;'R'
   353  00FB06  20                 	db	32
   354  00FB07  53                 	db	83	;'S'
   355  00FB08  45                 	db	69	;'E'
   356  00FB09  54                 	db	84	;'T'
   357  00FB0A  53                 	db	83	;'S'
   358  00FB0B  20                 	db	32
   359  00FB0C  52                 	db	82	;'R'
   360  00FB0D  41                 	db	65	;'A'
   361  00FB0E  35                 	db	53	;'5'
   362  00FB0F  20                 	db	32
   363  00FB10  20                 	db	32
   364  00FB11  20                 	db	32
   365  00FB12  00                 	db	0
   366  00FB13                     STR_81:
   367  00FB13  49                 	db	73	;'I'
   368  00FB14  52                 	db	82	;'R'
   369  00FB15  20                 	db	32
   370  00FB16  28                 	db	40
   371  00FB17  52                 	db	82	;'R'
   372  00FB18  45                 	db	69	;'E'
   373  00FB19  46                 	db	70	;'F'
   374  00FB1A  4C                 	db	76	;'L'
   375  00FB1B  45                 	db	69	;'E'
   376  00FB1C  43                 	db	67	;'C'
   377  00FB1D  29                 	db	41
   378  00FB1E  3A                 	db	58	;':'
   379  00FB1F  20                 	db	32
   380  00FB20  25                 	db	37
   381  00FB21  64                 	db	100	;'d'
   382  00FB22  20                 	db	32
   383  00FB23  20                 	db	32
   384  00FB24  00                 	db	0
   385  00FB25                     STR_79:
   386  00FB25  49                 	db	73	;'I'
   387  00FB26  52                 	db	82	;'R'
   388  00FB27  20                 	db	32
   389  00FB28  28                 	db	40
   390  00FB29  50                 	db	80	;'P'
   391  00FB2A  55                 	db	85	;'U'
   392  00FB2B  53                 	db	83	;'S'
   393  00FB2C  48                 	db	72	;'H'
   394  00FB2D  45                 	db	69	;'E'
   395  00FB2E  52                 	db	82	;'R'
   396  00FB2F  29                 	db	41
   397  00FB30  3A                 	db	58	;':'
   398  00FB31  20                 	db	32
   399  00FB32  25                 	db	37
   400  00FB33  64                 	db	100	;'d'
   401  00FB34  20                 	db	32
   402  00FB35  20                 	db	32
   403  00FB36  00                 	db	0
   404  00FB37                     STR_119:
   405  00FB37  53                 	db	83	;'S'
   406  00FB38  3A                 	db	58	;':'
   407  00FB39  20                 	db	32
   408  00FB3A  44                 	db	68	;'D'
   409  00FB3B  20                 	db	32
   410  00FB3C  57                 	db	87	;'W'
   411  00FB3D  49                 	db	73	;'I'
   412  00FB3E  4C                 	db	76	;'L'
   413  00FB3F  4C                 	db	76	;'L'
   414  00FB40  20                 	db	32
   415  00FB41  52                 	db	82	;'R'
   416  00FB42  45                 	db	69	;'E'
   417  00FB43  54                 	db	84	;'T'
   418  00FB44  55                 	db	85	;'U'
   419  00FB45  52                 	db	82	;'R'
   420  00FB46  4E                 	db	78	;'N'
   421  00FB47  20                 	db	32
   422  00FB48  00                 	db	0
   423  00FB49                     STR_122:
   424  00FB49  4F                 	db	79	;'O'
   425  00FB4A  54                 	db	84	;'T'
   426  00FB4B  48                 	db	72	;'H'
   427  00FB4C  45                 	db	69	;'E'
   428  00FB4D  52                 	db	82	;'R'
   429  00FB4E  3A                 	db	58	;':'
   430  00FB4F  20                 	db	32
   431  00FB50  43                 	db	67	;'C'
   432  00FB51  41                 	db	65	;'A'
   433  00FB52  4D                 	db	77	;'M'
   434  00FB53  20                 	db	32
   435  00FB54  54                 	db	84	;'T'
   436  00FB55  4F                 	db	79	;'O'
   437  00FB56  47                 	db	71	;'G'
   438  00FB57  47                 	db	71	;'G'
   439  00FB58  4C                 	db	76	;'L'
   440  00FB59  45                 	db	69	;'E'
   441  00FB5A  00                 	db	0
   442  00FB5B                     STR_128:
   443  00FB5B  4F                 	db	79	;'O'
   444  00FB5C  54                 	db	84	;'T'
   445  00FB5D  48                 	db	72	;'H'
   446  00FB5E  45                 	db	69	;'E'
   447  00FB5F  52                 	db	82	;'R'
   448  00FB60  20                 	db	32
   449  00FB61  53                 	db	83	;'S'
   450  00FB62  45                 	db	69	;'E'
   451  00FB63  54                 	db	84	;'T'
   452  00FB64  53                 	db	83	;'S'
   453  00FB65  20                 	db	32
   454  00FB66  50                 	db	80	;'P'
   455  00FB67  55                 	db	85	;'U'
   456  00FB68  53                 	db	83	;'S'
   457  00FB69  48                 	db	72	;'H'
   458  00FB6A  45                 	db	69	;'E'
   459  00FB6B  52                 	db	82	;'R'
   460  00FB6C  00                 	db	0
   461  00FB6D                     STR_3:
   462  00FB6D  2D                 	db	45
   463  00FB6E  2D                 	db	45
   464  00FB6F  20                 	db	32
   465  00FB70  4C                 	db	76	;'L'
   466  00FB71  4F                 	db	79	;'O'
   467  00FB72  47                 	db	71	;'G'
   468  00FB73  20                 	db	32
   469  00FB74  25                 	db	37
   470  00FB75  32                 	db	50	;'2'
   471  00FB76  64                 	db	100	;'d'
   472  00FB77  20                 	db	32
   473  00FB78  48                 	db	72	;'H'
   474  00FB79  45                 	db	69	;'E'
   475  00FB7A  52                 	db	82	;'R'
   476  00FB7B  45                 	db	69	;'E'
   477  00FB7C  2D                 	db	45
   478  00FB7D  2D                 	db	45
   479  00FB7E  00                 	db	0
   480  00FB7F                     STR_1:
   481  00FB7F  52                 	db	82	;'R'
   482  00FB80  45                 	db	69	;'E'
   483  00FB81  53                 	db	83	;'S'
   484  00FB82  55                 	db	85	;'U'
   485  00FB83  4C                 	db	76	;'L'
   486  00FB84  54                 	db	84	;'T'
   487  00FB85  53                 	db	83	;'S'
   488  00FB86  20                 	db	32
   489  00FB87  49                 	db	73	;'I'
   490  00FB88  4E                 	db	78	;'N'
   491  00FB89  20                 	db	32
   492  00FB8A  4C                 	db	76	;'L'
   493  00FB8B  4F                 	db	79	;'O'
   494  00FB8C  47                 	db	71	;'G'
   495  00FB8D  20                 	db	32
   496  00FB8E  25                 	db	37
   497  00FB8F  64                 	db	100	;'d'
   498  00FB90  00                 	db	0
   499  00FB91                     STR_103:
   500  00FB91  4D                 	db	77	;'M'
   501  00FB92  49                 	db	73	;'I'
   502  00FB93  44                 	db	68	;'D'
   503  00FB94  20                 	db	32
   504  00FB95  2D                 	db	45
   505  00FB96  2D                 	db	45
   506  00FB97  20                 	db	32
   507  00FB98  32                 	db	50	;'2'
   508  00FB99  73                 	db	115	;'s'
   509  00FB9A  20                 	db	32
   510  00FB9B  20                 	db	32
   511  00FB9C  20                 	db	32
   512  00FB9D  20                 	db	32
   513  00FB9E  20                 	db	32
   514  00FB9F  20                 	db	32
   515  00FBA0  20                 	db	32
   516  00FBA1  00                 	db	0
   517  00FBA2                     STR_106:
   518  00FBA2  44                 	db	68	;'D'
   519  00FBA3  52                 	db	82	;'R'
   520  00FBA4  4F                 	db	79	;'O'
   521  00FBA5  50                 	db	80	;'P'
   522  00FBA6  20                 	db	32
   523  00FBA7  2D                 	db	45
   524  00FBA8  2D                 	db	45
   525  00FBA9  20                 	db	32
   526  00FBAA  32                 	db	50	;'2'
   527  00FBAB  73                 	db	115	;'s'
   528  00FBAC  20                 	db	32
   529  00FBAD  20                 	db	32
   530  00FBAE  20                 	db	32
   531  00FBAF  20                 	db	32
   532  00FBB0  20                 	db	32
   533  00FBB1  20                 	db	32
   534  00FBB2  00                 	db	0
   535  00FBB3                     STR_100:
   536  00FBB3  4C                 	db	76	;'L'
   537  00FBB4  45                 	db	69	;'E'
   538  00FBB5  46                 	db	70	;'F'
   539  00FBB6  54                 	db	84	;'T'
   540  00FBB7  20                 	db	32
   541  00FBB8  2D                 	db	45
   542  00FBB9  2D                 	db	45
   543  00FBBA  20                 	db	32
   544  00FBBB  32                 	db	50	;'2'
   545  00FBBC  73                 	db	115	;'s'
   546  00FBBD  20                 	db	32
   547  00FBBE  20                 	db	32
   548  00FBBF  20                 	db	32
   549  00FBC0  20                 	db	32
   550  00FBC1  20                 	db	32
   551  00FBC2  20                 	db	32
   552  00FBC3  00                 	db	0
   553  00FBC4                     STR_105:
   554  00FBC4  4C                 	db	76	;'L'
   555  00FBC5  45                 	db	69	;'E'
   556  00FBC6  56                 	db	86	;'V'
   557  00FBC7  45                 	db	69	;'E'
   558  00FBC8  4C                 	db	76	;'L'
   559  00FBC9  20                 	db	32
   560  00FBCA  2D                 	db	45
   561  00FBCB  2D                 	db	45
   562  00FBCC  20                 	db	32
   563  00FBCD  32                 	db	50	;'2'
   564  00FBCE  73                 	db	115	;'s'
   565  00FBCF  20                 	db	32
   566  00FBD0  20                 	db	32
   567  00FBD1  20                 	db	32
   568  00FBD2  20                 	db	32
   569  00FBD3  20                 	db	32
   570  00FBD4  00                 	db	0
   571  00FBD5                     STR_99:
   572  00FBD5  52                 	db	82	;'R'
   573  00FBD6  49                 	db	73	;'I'
   574  00FBD7  47                 	db	71	;'G'
   575  00FBD8  48                 	db	72	;'H'
   576  00FBD9  54                 	db	84	;'T'
   577  00FBDA  20                 	db	32
   578  00FBDB  2D                 	db	45
   579  00FBDC  2D                 	db	45
   580  00FBDD  20                 	db	32
   581  00FBDE  32                 	db	50	;'2'
   582  00FBDF  73                 	db	115	;'s'
   583  00FBE0  20                 	db	32
   584  00FBE1  20                 	db	32
   585  00FBE2  20                 	db	32
   586  00FBE3  20                 	db	32
   587  00FBE4  20                 	db	32
   588  00FBE5  00                 	db	0
   589  00FBE6                     STR_98:
   590  00FBE6  4D                 	db	77	;'M'
   591  00FBE7  49                 	db	73	;'I'
   592  00FBE8  44                 	db	68	;'D'
   593  00FBE9  44                 	db	68	;'D'
   594  00FBEA  4C                 	db	76	;'L'
   595  00FBEB  45                 	db	69	;'E'
   596  00FBEC  20                 	db	32
   597  00FBED  2D                 	db	45
   598  00FBEE  2D                 	db	45
   599  00FBEF  20                 	db	32
   600  00FBF0  32                 	db	50	;'2'
   601  00FBF1  73                 	db	115	;'s'
   602  00FBF2  20                 	db	32
   603  00FBF3  20                 	db	32
   604  00FBF4  20                 	db	32
   605  00FBF5  20                 	db	32
   606  00FBF6  00                 	db	0
   607  00FBF7                     STR_113:
   608  00FBF7  4F                 	db	79	;'O'
   609  00FBF8  54                 	db	84	;'T'
   610  00FBF9  48                 	db	72	;'H'
   611  00FBFA  45                 	db	69	;'E'
   612  00FBFB  52                 	db	82	;'R'
   613  00FBFC  20                 	db	32
   614  00FBFD  53                 	db	83	;'S'
   615  00FBFE  45                 	db	69	;'E'
   616  00FBFF  54                 	db	84	;'T'
   617  00FC00  53                 	db	83	;'S'
   618  00FC01  20                 	db	32
   619  00FC02  44                 	db	68	;'D'
   620  00FC03  43                 	db	67	;'C'
   621  00FC04  20                 	db	32
   622  00FC05  20                 	db	32
   623  00FC06  20                 	db	32
   624  00FC07  00                 	db	0
   625  00FC08                     STR_125:
   626  00FC08  44                 	db	68	;'D'
   627  00FC09  20                 	db	32
   628  00FC0A  57                 	db	87	;'W'
   629  00FC0B  49                 	db	73	;'I'
   630  00FC0C  4C                 	db	76	;'L'
   631  00FC0D  4C                 	db	76	;'L'
   632  00FC0E  20                 	db	32
   633  00FC0F  52                 	db	82	;'R'
   634  00FC10  45                 	db	69	;'E'
   635  00FC11  54                 	db	84	;'T'
   636  00FC12  55                 	db	85	;'U'
   637  00FC13  52                 	db	82	;'R'
   638  00FC14  4E                 	db	78	;'N'
   639  00FC15  20                 	db	32
   640  00FC16  20                 	db	32
   641  00FC17  20                 	db	32
   642  00FC18  00                 	db	0
   643  00FC19                     STR_116:
   644  00FC19  35                 	db	53	;'5'
   645  00FC1A  3A                 	db	58	;':'
   646  00FC1B  48                 	db	72	;'H'
   647  00FC1C  7C                 	db	124
   648  00FC1D  36                 	db	54	;'6'
   649  00FC1E  3A                 	db	58	;':'
   650  00FC1F  4C                 	db	76	;'L'
   651  00FC20  7C                 	db	124
   652  00FC21  49                 	db	73	;'I'
   653  00FC22  52                 	db	82	;'R'
   654  00FC23  3A                 	db	58	;':'
   655  00FC24  25                 	db	37
   656  00FC25  64                 	db	100	;'d'
   657  00FC26  20                 	db	32
   658  00FC27  20                 	db	32
   659  00FC28  20                 	db	32
   660  00FC29  00                 	db	0
   661  00FC2A                     STR_114:
   662  00FC2A  31                 	db	49	;'1'
   663  00FC2B  3A                 	db	58	;':'
   664  00FC2C  20                 	db	32
   665  00FC2D  44                 	db	68	;'D'
   666  00FC2E  43                 	db	67	;'C'
   667  00FC2F  20                 	db	32
   668  00FC30  7C                 	db	124
   669  00FC31  20                 	db	32
   670  00FC32  41                 	db	65	;'A'
   671  00FC33  3A                 	db	58	;':'
   672  00FC34  20                 	db	32
   673  00FC35  41                 	db	65	;'A'
   674  00FC36  52                 	db	82	;'R'
   675  00FC37  4D                 	db	77	;'M'
   676  00FC38  20                 	db	32
   677  00FC39  20                 	db	32
   678  00FC3A  00                 	db	0
   679  00FC3B                     STR_101:
   680  00FC3B  4D                 	db	77	;'M'
   681  00FC3C  49                 	db	73	;'I'
   682  00FC3D  44                 	db	68	;'D'
   683  00FC3E  2D                 	db	45
   684  00FC3F  4C                 	db	76	;'L'
   685  00FC40  45                 	db	69	;'E'
   686  00FC41  46                 	db	70	;'F'
   687  00FC42  54                 	db	84	;'T'
   688  00FC43  20                 	db	32
   689  00FC44  2D                 	db	45
   690  00FC45  2D                 	db	45
   691  00FC46  20                 	db	32
   692  00FC47  32                 	db	50	;'2'
   693  00FC48  73                 	db	115	;'s'
   694  00FC49  20                 	db	32
   695  00FC4A  20                 	db	32
   696  00FC4B  00                 	db	0
   697  00FC4C                     STR_102:
   698  00FC4C  4D                 	db	77	;'M'
   699  00FC4D  49                 	db	73	;'I'
   700  00FC4E  44                 	db	68	;'D'
   701  00FC4F  2D                 	db	45
   702  00FC50  52                 	db	82	;'R'
   703  00FC51  49                 	db	73	;'I'
   704  00FC52  47                 	db	71	;'G'
   705  00FC53  48                 	db	72	;'H'
   706  00FC54  54                 	db	84	;'T'
   707  00FC55  20                 	db	32
   708  00FC56  2D                 	db	45
   709  00FC57  2D                 	db	45
   710  00FC58  20                 	db	32
   711  00FC59  32                 	db	50	;'2'
   712  00FC5A  73                 	db	115	;'s'
   713  00FC5B  20                 	db	32
   714  00FC5C  00                 	db	0
   715  00FC5D                     STR_72:
   716  00FC5D  41                 	db	65	;'A'
   717  00FC5E  4C                 	db	76	;'L'
   718  00FC5F  47                 	db	71	;'G'
   719  00FC60  31                 	db	49	;'1'
   720  00FC61  3A                 	db	58	;':'
   721  00FC62  20                 	db	32
   722  00FC63  39                 	db	57	;'9'
   723  00FC64  20                 	db	32
   724  00FC65  50                 	db	80	;'P'
   725  00FC66  4F                 	db	79	;'O'
   726  00FC67  50                 	db	80	;'P'
   727  00FC68  4E                 	db	78	;'N'
   728  00FC69  4F                 	db	79	;'O'
   729  00FC6A  54                 	db	84	;'T'
   730  00FC6B  41                 	db	65	;'A'
   731  00FC6C  42                 	db	66	;'B'
   732  00FC6D  00                 	db	0
   733  00FC6E                     STR_93:
   734  00FC6E  54                 	db	84	;'T'
   735  00FC6F  53                 	db	83	;'S'
   736  00FC70  54                 	db	84	;'T'
   737  00FC71  3A                 	db	58	;':'
   738  00FC72  20                 	db	32
   739  00FC73  43                 	db	67	;'C'
   740  00FC74  4F                 	db	79	;'O'
   741  00FC75  4E                 	db	78	;'N'
   742  00FC76  44                 	db	68	;'D'
   743  00FC77  20                 	db	32
   744  00FC78  53                 	db	83	;'S'
   745  00FC79  4F                 	db	79	;'O'
   746  00FC7A  4C                 	db	76	;'L'
   747  00FC7B  4E                 	db	78	;'N'
   748  00FC7C  27                 	db	39
   749  00FC7D  44                 	db	68	;'D'
   750  00FC7E  00                 	db	0
   751  00FC7F                     STR_95:
   752  00FC7F  54                 	db	84	;'T'
   753  00FC80  53                 	db	83	;'S'
   754  00FC81  54                 	db	84	;'T'
   755  00FC82  3A                 	db	58	;':'
   756  00FC83  20                 	db	32
   757  00FC84  50                 	db	80	;'P'
   758  00FC85  55                 	db	85	;'U'
   759  00FC86  53                 	db	83	;'S'
   760  00FC87  48                 	db	72	;'H'
   761  00FC88  20                 	db	32
   762  00FC89  53                 	db	83	;'S'
   763  00FC8A  4F                 	db	79	;'O'
   764  00FC8B  4C                 	db	76	;'L'
   765  00FC8C  4E                 	db	78	;'N'
   766  00FC8D  27                 	db	39
   767  00FC8E  44                 	db	68	;'D'
   768  00FC8F  00                 	db	0
   769  00FC90                     STR_68:
   770  00FC90  32                 	db	50	;'2'
   771  00FC91  2E                 	db	46
   772  00FC92  53                 	db	83	;'S'
   773  00FC93  4E                 	db	78	;'N'
   774  00FC94  52                 	db	82	;'R'
   775  00FC95  7C                 	db	124
   776  00FC96  34                 	db	52	;'4'
   777  00FC97  2E                 	db	46
   778  00FC98  48                 	db	72	;'H'
   779  00FC99  49                 	db	73	;'I'
   780  00FC9A  7C                 	db	124
   781  00FC9B  35                 	db	53	;'5'
   782  00FC9C  2E                 	db	46
   783  00FC9D  4D                 	db	77	;'M'
   784  00FC9E  45                 	db	69	;'E'
   785  00FC9F  44                 	db	68	;'D'
   786  00FCA0  00                 	db	0
   787  00FCA1                     STR_69:
   788  00FCA1  42                 	db	66	;'B'
   789  00FCA2  2E                 	db	46
   790  00FCA3  50                 	db	80	;'P'
   791  00FCA4  4C                 	db	76	;'L'
   792  00FCA5  41                 	db	65	;'A'
   793  00FCA6  7C                 	db	124
   794  00FCA7  38                 	db	56	;'8'
   795  00FCA8  2E                 	db	46
   796  00FCA9  53                 	db	83	;'S'
   797  00FCAA  56                 	db	86	;'V'
   798  00FCAB  7C                 	db	124
   799  00FCAC  39                 	db	57	;'9'
   800  00FCAD  2E                 	db	46
   801  00FCAE  42                 	db	66	;'B'
   802  00FCAF  4C                 	db	76	;'L'
   803  00FCB0  4B                 	db	75	;'K'
   804  00FCB1  00                 	db	0
   805  00FCB2                     STR_126:
   806  00FCB2  45                 	db	69	;'E'
   807  00FCB3  4C                 	db	76	;'L'
   808  00FCB4  53                 	db	83	;'S'
   809  00FCB5  45                 	db	69	;'E'
   810  00FCB6  20                 	db	32
   811  00FCB7  54                 	db	84	;'T'
   812  00FCB8  4F                 	db	79	;'O'
   813  00FCB9  47                 	db	71	;'G'
   814  00FCBA  47                 	db	71	;'G'
   815  00FCBB  4C                 	db	76	;'L'
   816  00FCBC  45                 	db	69	;'E'
   817  00FCBD  53                 	db	83	;'S'
   818  00FCBE  20                 	db	32
   819  00FCBF  41                 	db	65	;'A'
   820  00FCC0  52                 	db	82	;'R'
   821  00FCC1  4D                 	db	77	;'M'
   822  00FCC2  00                 	db	0
   823  00FCC3                     STR_111:
   824  00FCC3  54                 	db	84	;'T'
   825  00FCC4  53                 	db	83	;'S'
   826  00FCC5  54                 	db	84	;'T'
   827  00FCC6  3A                 	db	58	;':'
   828  00FCC7  20                 	db	32
   829  00FCC8  42                 	db	66	;'B'
   830  00FCC9  4F                 	db	79	;'O'
   831  00FCCA  54                 	db	84	;'T'
   832  00FCCB  48                 	db	72	;'H'
   833  00FCCC  20                 	db	32
   834  00FCCD  53                 	db	83	;'S'
   835  00FCCE  45                 	db	69	;'E'
   836  00FCCF  52                 	db	82	;'R'
   837  00FCD0  56                 	db	86	;'V'
   838  00FCD1  4F                 	db	79	;'O'
   839  00FCD2  53                 	db	83	;'S'
   840  00FCD3  00                 	db	0
   841  00FCD4                     STR_41:
   842  00FCD4  4C                 	db	76	;'L'
   843  00FCD5  4F                 	db	79	;'O'
   844  00FCD6  47                 	db	71	;'G'
   845  00FCD7  20                 	db	32
   846  00FCD8  31                 	db	49	;'1'
   847  00FCD9  20                 	db	32
   848  00FCDA  20                 	db	32
   849  00FCDB  20                 	db	32
   850  00FCDC  20                 	db	32
   851  00FCDD  20                 	db	32
   852  00FCDE  20                 	db	32
   853  00FCDF  20                 	db	32
   854  00FCE0  20                 	db	32
   855  00FCE1  20                 	db	32
   856  00FCE2  20                 	db	32
   857  00FCE3  20                 	db	32
   858  00FCE4  00                 	db	0
   859  00FCE5                     STR_40:
   860  00FCE5  4C                 	db	76	;'L'
   861  00FCE6  4F                 	db	79	;'O'
   862  00FCE7  47                 	db	71	;'G'
   863  00FCE8  20                 	db	32
   864  00FCE9  32                 	db	50	;'2'
   865  00FCEA  20                 	db	32
   866  00FCEB  20                 	db	32
   867  00FCEC  20                 	db	32
   868  00FCED  20                 	db	32
   869  00FCEE  20                 	db	32
   870  00FCEF  20                 	db	32
   871  00FCF0  20                 	db	32
   872  00FCF1  20                 	db	32
   873  00FCF2  20                 	db	32
   874  00FCF3  20                 	db	32
   875  00FCF4  20                 	db	32
   876  00FCF5  00                 	db	0
   877  00FCF6                     STR_44:
   878  00FCF6  4C                 	db	76	;'L'
   879  00FCF7  4F                 	db	79	;'O'
   880  00FCF8  47                 	db	71	;'G'
   881  00FCF9  20                 	db	32
   882  00FCFA  33                 	db	51	;'3'
   883  00FCFB  20                 	db	32
   884  00FCFC  20                 	db	32
   885  00FCFD  20                 	db	32
   886  00FCFE  20                 	db	32
   887  00FCFF  20                 	db	32
   888  00FD00  20                 	db	32
   889  00FD01  20                 	db	32
   890  00FD02  20                 	db	32
   891  00FD03  20                 	db	32
   892  00FD04  20                 	db	32
   893  00FD05  20                 	db	32
   894  00FD06  00                 	db	0
   895  00FD07                     STR_48:
   896  00FD07  4C                 	db	76	;'L'
   897  00FD08  4F                 	db	79	;'O'
   898  00FD09  47                 	db	71	;'G'
   899  00FD0A  20                 	db	32
   900  00FD0B  34                 	db	52	;'4'
   901  00FD0C  20                 	db	32
   902  00FD0D  20                 	db	32
   903  00FD0E  20                 	db	32
   904  00FD0F  20                 	db	32
   905  00FD10  20                 	db	32
   906  00FD11  20                 	db	32
   907  00FD12  20                 	db	32
   908  00FD13  20                 	db	32
   909  00FD14  20                 	db	32
   910  00FD15  20                 	db	32
   911  00FD16  20                 	db	32
   912  00FD17  00                 	db	0
   913  00FD18                     STR_36:
   914  00FD18  33                 	db	51	;'3'
   915  00FD19  2E                 	db	46
   916  00FD1A  20                 	db	32
   917  00FD1B  4C                 	db	76	;'L'
   918  00FD1C  4F                 	db	79	;'O'
   919  00FD1D  47                 	db	71	;'G'
   920  00FD1E  53                 	db	83	;'S'
   921  00FD1F  20                 	db	32
   922  00FD20  20                 	db	32
   923  00FD21  20                 	db	32
   924  00FD22  20                 	db	32
   925  00FD23  20                 	db	32
   926  00FD24  20                 	db	32
   927  00FD25  20                 	db	32
   928  00FD26  20                 	db	32
   929  00FD27  20                 	db	32
   930  00FD28  00                 	db	0
   931  00FD29                     STR_32:
   932  00FD29  32                 	db	50	;'2'
   933  00FD2A  2E                 	db	46
   934  00FD2B  20                 	db	32
   935  00FD2C  53                 	db	83	;'S'
   936  00FD2D  4F                 	db	79	;'O'
   937  00FD2E  52                 	db	82	;'R'
   938  00FD2F  54                 	db	84	;'T'
   939  00FD30  20                 	db	32
   940  00FD31  20                 	db	32
   941  00FD32  20                 	db	32
   942  00FD33  20                 	db	32
   943  00FD34  20                 	db	32
   944  00FD35  20                 	db	32
   945  00FD36  20                 	db	32
   946  00FD37  20                 	db	32
   947  00FD38  20                 	db	32
   948  00FD39  00                 	db	0
   949  00FD3A                     STR_33:
   950  00FD3A  31                 	db	49	;'1'
   951  00FD3B  2E                 	db	46
   952  00FD3C  20                 	db	32
   953  00FD3D  44                 	db	68	;'D'
   954  00FD3E  41                 	db	65	;'A'
   955  00FD3F  54                 	db	84	;'T'
   956  00FD40  45                 	db	69	;'E'
   957  00FD41  2F                 	db	47
   958  00FD42  54                 	db	84	;'T'
   959  00FD43  49                 	db	73	;'I'
   960  00FD44  4D                 	db	77	;'M'
   961  00FD45  45                 	db	69	;'E'
   962  00FD46  20                 	db	32
   963  00FD47  20                 	db	32
   964  00FD48  20                 	db	32
   965  00FD49  20                 	db	32
   966  00FD4A  00                 	db	0
   967  00FD4B                     STR_24:
   968  00FD4B  20                 	db	32
   969  00FD4C  2D                 	db	45
   970  00FD4D  2D                 	db	45
   971  00FD4E  20                 	db	32
   972  00FD4F  50                 	db	80	;'P'
   973  00FD50  4F                 	db	79	;'O'
   974  00FD51  50                 	db	80	;'P'
   975  00FD52  20                 	db	32
   976  00FD53  20                 	db	32
   977  00FD54  43                 	db	67	;'C'
   978  00FD55  41                 	db	65	;'A'
   979  00FD56  4E                 	db	78	;'N'
   980  00FD57  20                 	db	32
   981  00FD58  2D                 	db	45
   982  00FD59  2D                 	db	45
   983  00FD5A  20                 	db	32
   984  00FD5B  00                 	db	0
   985  00FD5C                     STR_26:
   986  00FD5C  20                 	db	32
   987  00FD5D  2D                 	db	45
   988  00FD5E  2D                 	db	45
   989  00FD5F  20                 	db	32
   990  00FD60  53                 	db	83	;'S'
   991  00FD61  4F                 	db	79	;'O'
   992  00FD62  55                 	db	85	;'U'
   993  00FD63  50                 	db	80	;'P'
   994  00FD64  20                 	db	32
   995  00FD65  43                 	db	67	;'C'
   996  00FD66  41                 	db	65	;'A'
   997  00FD67  4E                 	db	78	;'N'
   998  00FD68  20                 	db	32
   999  00FD69  2D                 	db	45
  1000  00FD6A  2D                 	db	45
  1001  00FD6B  20                 	db	32
  1002  00FD6C  00                 	db	0
  1003  00FD6D                     STR_28:
  1004  00FD6D  2D                 	db	45
  1005  00FD6E  2D                 	db	45
  1006  00FD6F  20                 	db	32
  1007  00FD70  54                 	db	84	;'T'
  1008  00FD71  4F                 	db	79	;'O'
  1009  00FD72  54                 	db	84	;'T'
  1010  00FD73  41                 	db	65	;'A'
  1011  00FD74  4C                 	db	76	;'L'
  1012  00FD75  20                 	db	32
  1013  00FD76  43                 	db	67	;'C'
  1014  00FD77  41                 	db	65	;'A'
  1015  00FD78  4E                 	db	78	;'N'
  1016  00FD79  53                 	db	83	;'S'
  1017  00FD7A  20                 	db	32
  1018  00FD7B  2D                 	db	45
  1019  00FD7C  2D                 	db	45
  1020  00FD7D  00                 	db	0
  1021  00FD7E                     STR_39:
  1022  00FD7E  4C                 	db	76	;'L'
  1023  00FD7F  4F                 	db	79	;'O'
  1024  00FD80  47                 	db	71	;'G'
  1025  00FD81  20                 	db	32
  1026  00FD82  31                 	db	49	;'1'
  1027  00FD83  20                 	db	32
  1028  00FD84  20                 	db	32
  1029  00FD85  20                 	db	32
  1030  00FD86  20                 	db	32
  1031  00FD87  20                 	db	32
  1032  00FD88  20                 	db	32
  1033  00FD89  20                 	db	32
  1034  00FD8A  20                 	db	32
  1035  00FD8B  20                 	db	32
  1036  00FD8C  20                 	db	32
  1037  00FD8D  3C                 	db	60	;'<'
  1038  00FD8E  00                 	db	0
  1039  00FD8F                     STR_42:
  1040  00FD8F  4C                 	db	76	;'L'
  1041  00FD90  4F                 	db	79	;'O'
  1042  00FD91  47                 	db	71	;'G'
  1043  00FD92  20                 	db	32
  1044  00FD93  32                 	db	50	;'2'
  1045  00FD94  20                 	db	32
  1046  00FD95  20                 	db	32
  1047  00FD96  20                 	db	32
  1048  00FD97  20                 	db	32
  1049  00FD98  20                 	db	32
  1050  00FD99  20                 	db	32
  1051  00FD9A  20                 	db	32
  1052  00FD9B  20                 	db	32
  1053  00FD9C  20                 	db	32
  1054  00FD9D  20                 	db	32
  1055  00FD9E  3C                 	db	60	;'<'
  1056  00FD9F  00                 	db	0
  1057  00FDA0                     STR_46:
  1058  00FDA0  4C                 	db	76	;'L'
  1059  00FDA1  4F                 	db	79	;'O'
  1060  00FDA2  47                 	db	71	;'G'
  1061  00FDA3  20                 	db	32
  1062  00FDA4  33                 	db	51	;'3'
  1063  00FDA5  20                 	db	32
  1064  00FDA6  20                 	db	32
  1065  00FDA7  20                 	db	32
  1066  00FDA8  20                 	db	32
  1067  00FDA9  20                 	db	32
  1068  00FDAA  20                 	db	32
  1069  00FDAB  20                 	db	32
  1070  00FDAC  20                 	db	32
  1071  00FDAD  20                 	db	32
  1072  00FDAE  20                 	db	32
  1073  00FDAF  3C                 	db	60	;'<'
  1074  00FDB0  00                 	db	0
  1075  00FDB1                     STR_50:
  1076  00FDB1  4C                 	db	76	;'L'
  1077  00FDB2  4F                 	db	79	;'O'
  1078  00FDB3  47                 	db	71	;'G'
  1079  00FDB4  20                 	db	32
  1080  00FDB5  34                 	db	52	;'4'
  1081  00FDB6  20                 	db	32
  1082  00FDB7  20                 	db	32
  1083  00FDB8  20                 	db	32
  1084  00FDB9  20                 	db	32
  1085  00FDBA  20                 	db	32
  1086  00FDBB  20                 	db	32
  1087  00FDBC  20                 	db	32
  1088  00FDBD  20                 	db	32
  1089  00FDBE  20                 	db	32
  1090  00FDBF  20                 	db	32
  1091  00FDC0  3C                 	db	60	;'<'
  1092  00FDC1  00                 	db	0
  1093  00FDC2                     STR_38:
  1094  00FDC2  33                 	db	51	;'3'
  1095  00FDC3  2E                 	db	46
  1096  00FDC4  20                 	db	32
  1097  00FDC5  4C                 	db	76	;'L'
  1098  00FDC6  4F                 	db	79	;'O'
  1099  00FDC7  47                 	db	71	;'G'
  1100  00FDC8  53                 	db	83	;'S'
  1101  00FDC9  20                 	db	32
  1102  00FDCA  20                 	db	32
  1103  00FDCB  20                 	db	32
  1104  00FDCC  20                 	db	32
  1105  00FDCD  20                 	db	32
  1106  00FDCE  20                 	db	32
  1107  00FDCF  20                 	db	32
  1108  00FDD0  20                 	db	32
  1109  00FDD1  3C                 	db	60	;'<'
  1110  00FDD2  00                 	db	0
  1111  00FDD3                     STR_34:
  1112  00FDD3  32                 	db	50	;'2'
  1113  00FDD4  2E                 	db	46
  1114  00FDD5  20                 	db	32
  1115  00FDD6  53                 	db	83	;'S'
  1116  00FDD7  4F                 	db	79	;'O'
  1117  00FDD8  52                 	db	82	;'R'
  1118  00FDD9  54                 	db	84	;'T'
  1119  00FDDA  20                 	db	32
  1120  00FDDB  20                 	db	32
  1121  00FDDC  20                 	db	32
  1122  00FDDD  20                 	db	32
  1123  00FDDE  20                 	db	32
  1124  00FDDF  20                 	db	32
  1125  00FDE0  20                 	db	32
  1126  00FDE1  20                 	db	32
  1127  00FDE2  3C                 	db	60	;'<'
  1128  00FDE3  00                 	db	0
  1129  00FDE4                     STR_31:
  1130  00FDE4  31                 	db	49	;'1'
  1131  00FDE5  2E                 	db	46
  1132  00FDE6  20                 	db	32
  1133  00FDE7  44                 	db	68	;'D'
  1134  00FDE8  41                 	db	65	;'A'
  1135  00FDE9  54                 	db	84	;'T'
  1136  00FDEA  45                 	db	69	;'E'
  1137  00FDEB  2F                 	db	47
  1138  00FDEC  54                 	db	84	;'T'
  1139  00FDED  49                 	db	73	;'I'
  1140  00FDEE  4D                 	db	77	;'M'
  1141  00FDEF  45                 	db	69	;'E'
  1142  00FDF0  20                 	db	32
  1143  00FDF1  20                 	db	32
  1144  00FDF2  20                 	db	32
  1145  00FDF3  3C                 	db	60	;'<'
  1146  00FDF4  00                 	db	0
  1147  00FDF5                     STR_6:
  1148  00FDF5  50                 	db	80	;'P'
  1149  00FDF6  41                 	db	65	;'A'
  1150  00FDF7  55                 	db	85	;'U'
  1151  00FDF8  53                 	db	83	;'S'
  1152  00FDF9  45                 	db	69	;'E'
  1153  00FDFA  20                 	db	32
  1154  00FDFB  3C                 	db	60	;'<'
  1155  00FDFC  20                 	db	32
  1156  00FDFD  7C                 	db	124
  1157  00FDFE  20                 	db	32
  1158  00FDFF  42                 	db	66	;'B'
  1159  00FE00  41                 	db	65	;'A'
  1160  00FE01  43                 	db	67	;'C'
  1161  00FE02  4B                 	db	75	;'K'
  1162  00FE03  20                 	db	32
  1163  00FE04  3E                 	db	62	;'>'
  1164  00FE05  00                 	db	0
  1165  00FE06                     STR_30:
  1166  00FE06  50                 	db	80	;'P'
  1167  00FE07  55                 	db	85	;'U'
  1168  00FE08  53                 	db	83	;'S'
  1169  00FE09  48                 	db	72	;'H'
  1170  00FE0A  20                 	db	32
  1171  00FE0B  54                 	db	84	;'T'
  1172  00FE0C  4F                 	db	79	;'O'
  1173  00FE0D  20                 	db	32
  1174  00FE0E  43                 	db	67	;'C'
  1175  00FE0F  4F                 	db	79	;'O'
  1176  00FE10  4E                 	db	78	;'N'
  1177  00FE11  54                 	db	84	;'T'
  1178  00FE12  49                 	db	73	;'I'
  1179  00FE13  4E                 	db	78	;'N'
  1180  00FE14  55                 	db	85	;'U'
  1181  00FE15  45                 	db	69	;'E'
  1182  00FE16  00                 	db	0
  1183  00FE17                     STR_27:
  1184  00FE17  4E                 	db	78	;'N'
  1185  00FE18  4C                 	db	76	;'L'
  1186  00FE19  41                 	db	65	;'A'
  1187  00FE1A  42                 	db	66	;'B'
  1188  00FE1B  3A                 	db	58	;':'
  1189  00FE1C  20                 	db	32
  1190  00FE1D  25                 	db	37
  1191  00FE1E  64                 	db	100	;'d'
  1192  00FE1F  7C                 	db	124
  1193  00FE20  4C                 	db	76	;'L'
  1194  00FE21  41                 	db	65	;'A'
  1195  00FE22  42                 	db	66	;'B'
  1196  00FE23  3A                 	db	58	;':'
  1197  00FE24  20                 	db	32
  1198  00FE25  25                 	db	37
  1199  00FE26  64                 	db	100	;'d'
  1200  00FE27  00                 	db	0
  1201  00FE28                     STR_25:
  1202  00FE28  4E                 	db	78	;'N'
  1203  00FE29  54                 	db	84	;'T'
  1204  00FE2A  41                 	db	65	;'A'
  1205  00FE2B  42                 	db	66	;'B'
  1206  00FE2C  3A                 	db	58	;':'
  1207  00FE2D  20                 	db	32
  1208  00FE2E  25                 	db	37
  1209  00FE2F  64                 	db	100	;'d'
  1210  00FE30  7C                 	db	124
  1211  00FE31  54                 	db	84	;'T'
  1212  00FE32  41                 	db	65	;'A'
  1213  00FE33  42                 	db	66	;'B'
  1214  00FE34  3A                 	db	58	;':'
  1215  00FE35  20                 	db	32
  1216  00FE36  25                 	db	37
  1217  00FE37  64                 	db	100	;'d'
  1218  00FE38  00                 	db	0
  1219  00FE39                     STR_84:
  1220  00FE39  4D                 	db	77	;'M'
  1221  00FE3A  41                 	db	65	;'A'
  1222  00FE3B  47                 	db	71	;'G'
  1223  00FE3C  5F                 	db	95	;'_'
  1224  00FE3D  73                 	db	115	;'s'
  1225  00FE3E  69                 	db	105	;'i'
  1226  00FE3F  67                 	db	103	;'g'
  1227  00FE40  6E                 	db	110	;'n'
  1228  00FE41  61                 	db	97	;'a'
  1229  00FE42  6C                 	db	108	;'l'
  1230  00FE43  3A                 	db	58	;':'
  1231  00FE44  20                 	db	32
  1232  00FE45  25                 	db	37
  1233  00FE46  64                 	db	100	;'d'
  1234  00FE47  20                 	db	32
  1235  00FE48  00                 	db	0
  1236  00FE49                     STR_104:
  1237  00FE49  54                 	db	84	;'T'
  1238  00FE4A  53                 	db	83	;'S'
  1239  00FE4B  54                 	db	84	;'T'
  1240  00FE4C  3A                 	db	58	;':'
  1241  00FE4D  20                 	db	32
  1242  00FE4E  54                 	db	84	;'T'
  1243  00FE4F  49                 	db	73	;'I'
  1244  00FE50  4C                 	db	76	;'L'
  1245  00FE51  54                 	db	84	;'T'
  1246  00FE52  20                 	db	32
  1247  00FE53  53                 	db	83	;'S'
  1248  00FE54  45                 	db	69	;'E'
  1249  00FE55  52                 	db	82	;'R'
  1250  00FE56  56                 	db	86	;'V'
  1251  00FE57  4F                 	db	79	;'O'
  1252  00FE58  00                 	db	0
  1253  00FE59                     STR_64:
  1254  00FE59  53                 	db	83	;'S'
  1255  00FE5A  4F                 	db	79	;'O'
  1256  00FE5B  52                 	db	82	;'R'
  1257  00FE5C  54                 	db	84	;'T'
  1258  00FE5D  49                 	db	73	;'I'
  1259  00FE5E  4E                 	db	78	;'N'
  1260  00FE5F  47                 	db	71	;'G'
  1261  00FE60  2E                 	db	46
  1262  00FE61  2E                 	db	46
  1263  00FE62  2E                 	db	46
  1264  00FE63  20                 	db	32
  1265  00FE64  20                 	db	32
  1266  00FE65  20                 	db	32
  1267  00FE66  20                 	db	32
  1268  00FE67  20                 	db	32
  1269  00FE68  00                 	db	0
  1270  00FE69                     STR_65:
  1271  00FE69  54                 	db	84	;'T'
  1272  00FE6A  49                 	db	73	;'I'
  1273  00FE6B  4D                 	db	77	;'M'
  1274  00FE6C  45                 	db	69	;'E'
  1275  00FE6D  20                 	db	32
  1276  00FE6E  25                 	db	37
  1277  00FE6F  64                 	db	100	;'d'
  1278  00FE70  3A                 	db	58	;':'
  1279  00FE71  25                 	db	37
  1280  00FE72  30                 	db	48	;'0'
  1281  00FE73  32                 	db	50	;'2'
  1282  00FE74  64                 	db	100	;'d'
  1283  00FE75  20                 	db	32
  1284  00FE76  20                 	db	32
  1285  00FE77  20                 	db	32
  1286  00FE78  00                 	db	0
  1287  00FE79                     STR_4:
  1288  00FE79  44                 	db	68	;'D'
  1289  00FE7A  49                 	db	73	;'I'
  1290  00FE7B  44                 	db	68	;'D'
  1291  00FE7C  4E                 	db	78	;'N'
  1292  00FE7D  27                 	db	39
  1293  00FE7E  54                 	db	84	;'T'
  1294  00FE7F  20                 	db	32
  1295  00FE80  43                 	db	67	;'C'
  1296  00FE81  4F                 	db	79	;'O'
  1297  00FE82  4D                 	db	77	;'M'
  1298  00FE83  50                 	db	80	;'P'
  1299  00FE84  4C                 	db	76	;'L'
  1300  00FE85  45                 	db	69	;'E'
  1301  00FE86  54                 	db	84	;'T'
  1302  00FE87  45                 	db	69	;'E'
  1303  00FE88  00                 	db	0
  1304  00FE89                     STR_121:
  1305  00FE89  44                 	db	68	;'D'
  1306  00FE8A  3A                 	db	58	;':'
  1307  00FE8B  52                 	db	82	;'R'
  1308  00FE8C  45                 	db	69	;'E'
  1309  00FE8D  54                 	db	84	;'T'
  1310  00FE8E  7C                 	db	124
  1311  00FE8F  32                 	db	50	;'2'
  1312  00FE90  3A                 	db	58	;':'
  1313  00FE91  43                 	db	67	;'C'
  1314  00FE92  20                 	db	32
  1315  00FE93  25                 	db	37
  1316  00FE94  64                 	db	100	;'d'
  1317  00FE95  20                 	db	32
  1318  00FE96  20                 	db	32
  1319  00FE97  00                 	db	0
  1320  00FE98                     STR_110:
  1321  00FE98  43                 	db	67	;'C'
  1322  00FE99  41                 	db	65	;'A'
  1323  00FE9A  4D                 	db	77	;'M'
  1324  00FE9B  20                 	db	32
  1325  00FE9C  44                 	db	68	;'D'
  1326  00FE9D  57                 	db	87	;'W'
  1327  00FE9E  4E                 	db	78	;'N'
  1328  00FE9F  20                 	db	32
  1329  00FEA0  7C                 	db	124
  1330  00FEA1  52                 	db	82	;'R'
  1331  00FEA2  43                 	db	67	;'C'
  1332  00FEA3  30                 	db	48	;'0'
  1333  00FEA4  3D                 	db	61	;'='
  1334  00FEA5  30                 	db	48	;'0'
  1335  00FEA6  00                 	db	0
  1336  00FEA7                     STR_109:
  1337  00FEA7  43                 	db	67	;'C'
  1338  00FEA8  41                 	db	65	;'A'
  1339  00FEA9  4D                 	db	77	;'M'
  1340  00FEAA  20                 	db	32
  1341  00FEAB  55                 	db	85	;'U'
  1342  00FEAC  50                 	db	80	;'P'
  1343  00FEAD  20                 	db	32
  1344  00FEAE  20                 	db	32
  1345  00FEAF  7C                 	db	124
  1346  00FEB0  52                 	db	82	;'R'
  1347  00FEB1  43                 	db	67	;'C'
  1348  00FEB2  30                 	db	48	;'0'
  1349  00FEB3  3D                 	db	61	;'='
  1350  00FEB4  31                 	db	49	;'1'
  1351  00FEB5  00                 	db	0
  1352  00FEB6                     STR_83:
  1353  00FEB6  54                 	db	84	;'T'
  1354  00FEB7  53                 	db	83	;'S'
  1355  00FEB8  54                 	db	84	;'T'
  1356  00FEB9  3A                 	db	58	;':'
  1357  00FEBA  20                 	db	32
  1358  00FEBB  4D                 	db	77	;'M'
  1359  00FEBC  41                 	db	65	;'A'
  1360  00FEBD  47                 	db	71	;'G'
  1361  00FEBE  4E                 	db	78	;'N'
  1362  00FEBF  45                 	db	69	;'E'
  1363  00FEC0  54                 	db	84	;'T'
  1364  00FEC1  49                 	db	73	;'I'
  1365  00FEC2  53                 	db	83	;'S'
  1366  00FEC3  4D                 	db	77	;'M'
  1367  00FEC4  00                 	db	0
  1368  00FEC5                     STR_108:
  1369  00FEC5  54                 	db	84	;'T'
  1370  00FEC6  53                 	db	83	;'S'
  1371  00FEC7  54                 	db	84	;'T'
  1372  00FEC8  3A                 	db	58	;':'
  1373  00FEC9  20                 	db	32
  1374  00FECA  43                 	db	67	;'C'
  1375  00FECB  41                 	db	65	;'A'
  1376  00FECC  4D                 	db	77	;'M'
  1377  00FECD  20                 	db	32
  1378  00FECE  53                 	db	83	;'S'
  1379  00FECF  45                 	db	69	;'E'
  1380  00FED0  52                 	db	82	;'R'
  1381  00FED1  56                 	db	86	;'V'
  1382  00FED2  4F                 	db	79	;'O'
  1383  00FED3  00                 	db	0
  1384  00FED4                     STR_97:
  1385  00FED4  54                 	db	84	;'T'
  1386  00FED5  53                 	db	83	;'S'
  1387  00FED6  54                 	db	84	;'T'
  1388  00FED7  3A                 	db	58	;':'
  1389  00FED8  20                 	db	32
  1390  00FED9  50                 	db	80	;'P'
  1391  00FEDA  41                 	db	65	;'A'
  1392  00FEDB  4E                 	db	78	;'N'
  1393  00FEDC  20                 	db	32
  1394  00FEDD  53                 	db	83	;'S'
  1395  00FEDE  45                 	db	69	;'E'
  1396  00FEDF  52                 	db	82	;'R'
  1397  00FEE0  56                 	db	86	;'V'
  1398  00FEE1  4F                 	db	79	;'O'
  1399  00FEE2  00                 	db	0
  1400  00FEE3                     STR_75:
  1401  00FEE3  41                 	db	65	;'A'
  1402  00FEE4  4C                 	db	76	;'L'
  1403  00FEE5  47                 	db	71	;'G'
  1404  00FEE6  34                 	db	52	;'4'
  1405  00FEE7  3A                 	db	58	;':'
  1406  00FEE8  20                 	db	32
  1407  00FEE9  41                 	db	65	;'A'
  1408  00FEEA  4C                 	db	76	;'L'
  1409  00FEEB  4C                 	db	76	;'L'
  1410  00FEEC  20                 	db	32
  1411  00FEED  43                 	db	67	;'C'
  1412  00FEEE  41                 	db	65	;'A'
  1413  00FEEF  4E                 	db	78	;'N'
  1414  00FEF0  53                 	db	83	;'S'
  1415  00FEF1  00                 	db	0
  1416  00FEF2                     STR_91:
  1417  00FEF2  54                 	db	84	;'T'
  1418  00FEF3  53                 	db	83	;'S'
  1419  00FEF4  54                 	db	84	;'T'
  1420  00FEF5  3A                 	db	58	;':'
  1421  00FEF6  20                 	db	32
  1422  00FEF7  44                 	db	68	;'D'
  1423  00FEF8  43                 	db	67	;'C'
  1424  00FEF9  20                 	db	32
  1425  00FEFA  4D                 	db	77	;'M'
  1426  00FEFB  4F                 	db	79	;'O'
  1427  00FEFC  54                 	db	84	;'T'
  1428  00FEFD  4F                 	db	79	;'O'
  1429  00FEFE  52                 	db	82	;'R'
  1430  00FEFF  53                 	db	83	;'S'
  1431  00FF00  00                 	db	0
  1432  00FF01                     STR_70:
  1433  00FF01  41                 	db	65	;'A'
  1434  00FF02  4C                 	db	76	;'L'
  1435  00FF03  47                 	db	71	;'G'
  1436  00FF04  4F                 	db	79	;'O'
  1437  00FF05  52                 	db	82	;'R'
  1438  00FF06  49                 	db	73	;'I'
  1439  00FF07  54                 	db	84	;'T'
  1440  00FF08  48                 	db	72	;'H'
  1441  00FF09  4D                 	db	77	;'M'
  1442  00FF0A  20                 	db	32
  1443  00FF0B  54                 	db	84	;'T'
  1444  00FF0C  45                 	db	69	;'E'
  1445  00FF0D  53                 	db	83	;'S'
  1446  00FF0E  54                 	db	84	;'T'
  1447  00FF0F  00                 	db	0
  1448  00FF10                     STR_92:
  1449  00FF10  50                 	db	80	;'P'
  1450  00FF11  49                 	db	73	;'I'
  1451  00FF12  4E                 	db	78	;'N'
  1452  00FF13  20                 	db	32
  1453  00FF14  52                 	db	82	;'R'
  1454  00FF15  41                 	db	65	;'A'
  1455  00FF16  35                 	db	53	;'5'
  1456  00FF17  20                 	db	32
  1457  00FF18  48                 	db	72	;'H'
  1458  00FF19  49                 	db	73	;'I'
  1459  00FF1A  47                 	db	71	;'G'
  1460  00FF1B  48                 	db	72	;'H'
  1461  00FF1C  2E                 	db	46
  1462  00FF1D  00                 	db	0
  1463  00FF1E                     STR_73:
  1464  00FF1E  41                 	db	65	;'A'
  1465  00FF1F  4C                 	db	76	;'L'
  1466  00FF20  47                 	db	71	;'G'
  1467  00FF21  32                 	db	50	;'2'
  1468  00FF22  3A                 	db	58	;':'
  1469  00FF23  20                 	db	32
  1470  00FF24  31                 	db	49	;'1'
  1471  00FF25  32                 	db	50	;'2'
  1472  00FF26  20                 	db	32
  1473  00FF27  43                 	db	67	;'C'
  1474  00FF28  41                 	db	65	;'A'
  1475  00FF29  4E                 	db	78	;'N'
  1476  00FF2A  53                 	db	83	;'S'
  1477  00FF2B  00                 	db	0
  1478  00FF2C                     STR_76:
  1479  00FF2C  41                 	db	65	;'A'
  1480  00FF2D  4C                 	db	76	;'L'
  1481  00FF2E  47                 	db	71	;'G'
  1482  00FF2F  35                 	db	53	;'5'
  1483  00FF30  3A                 	db	58	;':'
  1484  00FF31  20                 	db	32
  1485  00FF32  4E                 	db	78	;'N'
  1486  00FF33  4F                 	db	79	;'O'
  1487  00FF34  20                 	db	32
  1488  00FF35  43                 	db	67	;'C'
  1489  00FF36  41                 	db	65	;'A'
  1490  00FF37  4E                 	db	78	;'N'
  1491  00FF38  53                 	db	83	;'S'
  1492  00FF39  00                 	db	0
  1493  00FF3A                     STR_71:
  1494  00FF3A  50                 	db	80	;'P'
  1495  00FF3B  55                 	db	85	;'U'
  1496  00FF3C  53                 	db	83	;'S'
  1497  00FF3D  48                 	db	72	;'H'
  1498  00FF3E  20                 	db	32
  1499  00FF3F  54                 	db	84	;'T'
  1500  00FF40  4F                 	db	79	;'O'
  1501  00FF41  20                 	db	32
  1502  00FF42  53                 	db	83	;'S'
  1503  00FF43  54                 	db	84	;'T'
  1504  00FF44  41                 	db	65	;'A'
  1505  00FF45  52                 	db	82	;'R'
  1506  00FF46  54                 	db	84	;'T'
  1507  00FF47  00                 	db	0
  1508  00FF48                     STR_23:
  1509  00FF48  25                 	db	37
  1510  00FF49  64                 	db	100	;'d'
  1511  00FF4A  20                 	db	32
  1512  00FF4B  4D                 	db	77	;'M'
  1513  00FF4C  49                 	db	73	;'I'
  1514  00FF4D  4E                 	db	78	;'N'
  1515  00FF4E  20                 	db	32
  1516  00FF4F  25                 	db	37
  1517  00FF50  64                 	db	100	;'d'
  1518  00FF51  20                 	db	32
  1519  00FF52  53                 	db	83	;'S'
  1520  00FF53  45                 	db	69	;'E'
  1521  00FF54  43                 	db	67	;'C'
  1522  00FF55  00                 	db	0
  1523  00FF56                     STR_2:
  1524  00FF56  54                 	db	84	;'T'
  1525  00FF57  49                 	db	73	;'I'
  1526  00FF58  4D                 	db	77	;'M'
  1527  00FF59  45                 	db	69	;'E'
  1528  00FF5A  3A                 	db	58	;':'
  1529  00FF5B  20                 	db	32
  1530  00FF5C  25                 	db	37
  1531  00FF5D  64                 	db	100	;'d'
  1532  00FF5E  3A                 	db	58	;':'
  1533  00FF5F  25                 	db	37
  1534  00FF60  30                 	db	48	;'0'
  1535  00FF61  32                 	db	50	;'2'
  1536  00FF62  64                 	db	100	;'d'
  1537  00FF63  00                 	db	0
  1538  00FF64                     STR_74:
  1539  00FF64  41                 	db	65	;'A'
  1540  00FF65  4C                 	db	76	;'L'
  1541  00FF66  47                 	db	71	;'G'
  1542  00FF67  33                 	db	51	;'3'
  1543  00FF68  3A                 	db	58	;':'
  1544  00FF69  20                 	db	32
  1545  00FF6A  31                 	db	49	;'1'
  1546  00FF6B  20                 	db	32
  1547  00FF6C  43                 	db	67	;'C'
  1548  00FF6D  41                 	db	65	;'A'
  1549  00FF6E  4E                 	db	78	;'N'
  1550  00FF6F  00                 	db	0
  1551  00FF70                     STR_94:
  1552  00FF70  50                 	db	80	;'P'
  1553  00FF71  49                 	db	73	;'I'
  1554  00FF72  4E                 	db	78	;'N'
  1555  00FF73  20                 	db	32
  1556  00FF74  52                 	db	82	;'R'
  1557  00FF75  41                 	db	65	;'A'
  1558  00FF76  33                 	db	51	;'3'
  1559  00FF77  2E                 	db	46
  1560  00FF78  2E                 	db	46
  1561  00FF79  2E                 	db	46
  1562  00FF7A  00                 	db	0
  1563  00FF7B                     STR_96:
  1564  00FF7B  50                 	db	80	;'P'
  1565  00FF7C  49                 	db	73	;'I'
  1566  00FF7D  4E                 	db	78	;'N'
  1567  00FF7E  20                 	db	32
  1568  00FF7F  52                 	db	82	;'R'
  1569  00FF80  41                 	db	65	;'A'
  1570  00FF81  34                 	db	52	;'4'
  1571  00FF82  2E                 	db	46
  1572  00FF83  2E                 	db	46
  1573  00FF84  2E                 	db	46
  1574  00FF85  00                 	db	0
  1575  00FF86                     STR_85:
  1576  00FF86  54                 	db	84	;'T'
  1577  00FF87  53                 	db	83	;'S'
  1578  00FF88  54                 	db	84	;'T'
  1579  00FF89  3A                 	db	58	;':'
  1580  00FF8A  20                 	db	32
  1581  00FF8B  43                 	db	67	;'C'
  1582  00FF8C  4F                 	db	79	;'O'
  1583  00FF8D  4E                 	db	78	;'N'
  1584  00FF8E  44                 	db	68	;'D'
  1585  00FF8F  00                 	db	0
  1586  00FF90                     STR_89:
  1587  00FF90  41                 	db	65	;'A'
  1588  00FF91  43                 	db	67	;'C'
  1589  00FF92  54                 	db	84	;'T'
  1590  00FF93  55                 	db	85	;'U'
  1591  00FF94  41                 	db	65	;'A'
  1592  00FF95  54                 	db	84	;'T'
  1593  00FF96  4F                 	db	79	;'O'
  1594  00FF97  52                 	db	82	;'R'
  1595  00FF98  53                 	db	83	;'S'
  1596  00FF99  00                 	db	0
  1597  00FF9A                     STR_22:
  1598  00FF9A  44                 	db	68	;'D'
  1599  00FF9B  55                 	db	85	;'U'
  1600  00FF9C  52                 	db	82	;'R'
  1601  00FF9D  41                 	db	65	;'A'
  1602  00FF9E  54                 	db	84	;'T'
  1603  00FF9F  49                 	db	73	;'I'
  1604  00FFA0  4F                 	db	79	;'O'
  1605  00FFA1  4E                 	db	78	;'N'
  1606  00FFA2  3A                 	db	58	;':'
  1607  00FFA3  00                 	db	0
  1608  00FFA4                     STR_87:
  1609  00FFA4  43                 	db	67	;'C'
  1610  00FFA5  4F                 	db	79	;'O'
  1611  00FFA6  4E                 	db	78	;'N'
  1612  00FFA7  44                 	db	68	;'D'
  1613  00FFA8  3A                 	db	58	;':'
  1614  00FFA9  20                 	db	32
  1615  00FFAA  25                 	db	37
  1616  00FFAB  64                 	db	100	;'d'
  1617  00FFAC  00                 	db	0
  1618  00FFAD                     STR_77:
  1619  00FFAD  53                 	db	83	;'S'
  1620  00FFAE  45                 	db	69	;'E'
  1621  00FFAF  4E                 	db	78	;'N'
  1622  00FFB0  53                 	db	83	;'S'
  1623  00FFB1  4F                 	db	79	;'O'
  1624  00FFB2  52                 	db	82	;'R'
  1625  00FFB3  53                 	db	83	;'S'
  1626  00FFB4  00                 	db	0
  1627  00FFB5                     STR_129:
  1628  00FFB5  28                 	db	40
  1629  00FFB6  6E                 	db	110	;'n'
  1630  00FFB7  75                 	db	117	;'u'
  1631  00FFB8  6C                 	db	108	;'l'
  1632  00FFB9  6C                 	db	108	;'l'
  1633  00FFBA  29                 	db	41
  1634  00FFBB  00                 	db	0
  1635  00FFBC                     STR_67:
  1636  00FFBC  46                 	db	70	;'F'
  1637  00FFBD  41                 	db	65	;'A'
  1638  00FFBE  49                 	db	73	;'I'
  1639  00FFBF  4C                 	db	76	;'L'
  1640  00FFC0  45                 	db	69	;'E'
  1641  00FFC1  44                 	db	68	;'D'
  1642  00FFC2  00                 	db	0
  1643  00FFC3                     STR_7:
  1644  00FFC3  53                 	db	83	;'S'
  1645  00FFC4  54                 	db	84	;'T'
  1646  00FFC5  41                 	db	65	;'A'
  1647  00FFC6  52                 	db	82	;'R'
  1648  00FFC7  54                 	db	84	;'T'
  1649  00FFC8  3A                 	db	58	;':'
  1650  00FFC9  00                 	db	0
  1651  00FFCA                     STR_9:
  1652  00FFCA  46                 	db	70	;'F'
  1653  00FFCB  45                 	db	69	;'E'
  1654  00FFCC  42                 	db	66	;'B'
  1655  00FFCD  00                 	db	0
  1656  00FFCE                     STR_19:
  1657  00FFCE  44                 	db	68	;'D'
  1658  00FFCF  45                 	db	69	;'E'
  1659  00FFD0  43                 	db	67	;'C'
  1660  00FFD1  00                 	db	0
  1661  00FFD2                     STR_15:
  1662  00FFD2  41                 	db	65	;'A'
  1663  00FFD3  55                 	db	85	;'U'
  1664  00FFD4  47                 	db	71	;'G'
  1665  00FFD5  00                 	db	0
  1666  00FFD6                     STR_14:
  1667  00FFD6  4A                 	db	74	;'J'
  1668  00FFD7  55                 	db	85	;'U'
  1669  00FFD8  4C                 	db	76	;'L'
  1670  00FFD9  00                 	db	0
  1671  00FFDA                     STR_8:
  1672  00FFDA  4A                 	db	74	;'J'
  1673  00FFDB  41                 	db	65	;'A'
  1674  00FFDC  4E                 	db	78	;'N'
  1675  00FFDD  00                 	db	0
  1676  00FFDE                     STR_13:
  1677  00FFDE  4A                 	db	74	;'J'
  1678  00FFDF  55                 	db	85	;'U'
  1679  00FFE0  4E                 	db	78	;'N'
  1680  00FFE1  00                 	db	0
  1681  00FFE2                     STR_16:
  1682  00FFE2  53                 	db	83	;'S'
  1683  00FFE3  45                 	db	69	;'E'
  1684  00FFE4  50                 	db	80	;'P'
  1685  00FFE5  00                 	db	0
  1686  00FFE6                     STR_10:
  1687  00FFE6  4D                 	db	77	;'M'
  1688  00FFE7  41                 	db	65	;'A'
  1689  00FFE8  52                 	db	82	;'R'
  1690  00FFE9  00                 	db	0
  1691  00FFEA                     STR_11:
  1692  00FFEA  41                 	db	65	;'A'
  1693  00FFEB  50                 	db	80	;'P'
  1694  00FFEC  52                 	db	82	;'R'
  1695  00FFED  00                 	db	0
  1696  00FFEE                     STR_20:
  1697  00FFEE  45                 	db	69	;'E'
  1698  00FFEF  52                 	db	82	;'R'
  1699  00FFF0  52                 	db	82	;'R'
  1700  00FFF1  00                 	db	0
  1701  00FFF2                     STR_17:
  1702  00FFF2  4F                 	db	79	;'O'
  1703  00FFF3  43                 	db	67	;'C'
  1704  00FFF4  54                 	db	84	;'T'
  1705  00FFF5  00                 	db	0
  1706  00FFF6                     STR_18:
  1707  00FFF6  4E                 	db	78	;'N'
  1708  00FFF7  4F                 	db	79	;'O'
  1709  00FFF8  56                 	db	86	;'V'
  1710  00FFF9  00                 	db	0
  1711  00FFFA                     STR_12:
  1712  00FFFA  4D                 	db	77	;'M'
  1713  00FFFB  41                 	db	65	;'A'
  1714  00FFFC  59                 	db	89	;'Y'
  1715  00FFFD  00                 	db	0
  1716  0000                     
  1717                           ; #config settings
  1718  00FFFE  00                 	db	0	; dummy byte at the end
  1719  0000                     
  1720                           	psect	cinit
  1721  005926                     __pcinit:
  1722                           	opt stack 0
  1723  005926                     start_initialization:
  1724                           	opt stack 0
  1725  005926                     __initialization:
  1726                           	opt stack 0
  1727                           
  1728                           ; Initialize objects allocated to BANK1 (8 bytes)
  1729                           ; load TBLPTR registers with __pidataBANK1
  1730  005926  0E02               	movlw	low __pidataBANK1
  1731  005928  6EF6               	movwf	tblptrl,c
  1732  00592A  0E61               	movlw	high __pidataBANK1
  1733  00592C  6EF7               	movwf	tblptrh,c
  1734  00592E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1735  005930  6EF8               	movwf	tblptru,c
  1736  005932  EE01  F04F         	lfsr	0,__pdataBANK1
  1737  005936  EE10 F008          	lfsr	1,8
  1738  00593A                     copy_data0:
  1739  00593A  0009               	tblrd		*+
  1740  00593C  CFF5 FFEE          	movff	tablat,postinc0
  1741  005940  50E5               	movf	postdec1,w,c
  1742  005942  50E1               	movf	fsr1l,w,c
  1743  005944  E1FA               	bnz	copy_data0
  1744                           
  1745                           ; Clear objects allocated to BANK1 (79 bytes)
  1746  005946  EE01  F000         	lfsr	0,__pbssBANK1
  1747  00594A  0E4F               	movlw	79
  1748  00594C                     clear_0:
  1749  00594C  6AEE               	clrf	postinc0,c
  1750  00594E  06E8               	decf	wreg,f,c
  1751  005950  E1FD               	bnz	clear_0
  1752                           
  1753                           ; Clear objects allocated to BANK0 (38 bytes)
  1754  005952  EE00  F0DA         	lfsr	0,__pbssBANK0
  1755  005956  0E26               	movlw	38
  1756  005958                     clear_1:
  1757  005958  6AEE               	clrf	postinc0,c
  1758  00595A  06E8               	decf	wreg,f,c
  1759  00595C  E1FD               	bnz	clear_1
  1760                           
  1761                           ; Clear objects allocated to COMRAM (37 bytes)
  1762  00595E  EE00  F059         	lfsr	0,__pbssCOMRAM
  1763  005962  0E25               	movlw	37
  1764  005964                     clear_2:
  1765  005964  6AEE               	clrf	postinc0,c
  1766  005966  06E8               	decf	wreg,f,c
  1767  005968  E1FD               	bnz	clear_2
  1768  00596A                     end_of_initialization:
  1769                           	opt stack 0
  1770  00596A                     __end_of__initialization:
  1771                           	opt stack 0
  1772  00596A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1773  00596C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1774  00596E  0100               	movlb	0
  1775  005970  EF5F  F026         	goto	_main	;jump to C main() function
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           
  1785                           	psect	bssCOMRAM
  1786  000059                     __pbssCOMRAM:
  1787                           	opt stack 0
  1788  000059                     _agitator_toggle_count:
  1789                           	opt stack 0
  1790  000059                     	ds	2
  1791  00005B                     _back:
  1792                           	opt stack 0
  1793  00005B                     	ds	2
  1794  00005D                     _count_can_no_lab:
  1795                           	opt stack 0
  1796  00005D                     	ds	2
  1797  00005F                     _count_can_w_lab:
  1798                           	opt stack 0
  1799  00005F                     	ds	2
  1800  000061                     _count_pop_no_tab:
  1801                           	opt stack 0
  1802  000061                     	ds	2
  1803  000063                     _count_pop_w_tab:
  1804                           	opt stack 0
  1805  000063                     	ds	2
  1806  000065                     _down:
  1807                           	opt stack 0
  1808  000065                     	ds	2
  1809  000067                     _enter:
  1810                           	opt stack 0
  1811  000067                     	ds	2
  1812  000069                     _f_panning_to_bin:
  1813                           	opt stack 0
  1814  000069                     	ds	2
  1815  00006B                     _pan_servo_state:
  1816                           	opt stack 0
  1817  00006B                     	ds	2
  1818  00006D                     _servo_timer_counter:
  1819                           	opt stack 0
  1820  00006D                     	ds	2
  1821  00006F                     _servo_timer_target:
  1822                           	opt stack 0
  1823  00006F                     	ds	2
  1824  000071                     _tilt_servo_state:
  1825                           	opt stack 0
  1826  000071                     	ds	2
  1827  000073                     _timer2_counter:
  1828                           	opt stack 0
  1829  000073                     	ds	2
  1830  000075                     _up:
  1831                           	opt stack 0
  1832  000075                     	ds	2
  1833  000077                     _was_low_1:
  1834                           	opt stack 0
  1835  000077                     	ds	2
  1836  000079                     _was_low_2:
  1837                           	opt stack 0
  1838  000079                     	ds	2
  1839  00007B                     _was_low_3:
  1840                           	opt stack 0
  1841  00007B                     	ds	2
  1842  00007D                     _input:
  1843                           	opt stack 0
  1844  00007D                     	ds	1
  1845                           tblptru	equ	0xFF8
  1846                           tblptrh	equ	0xFF7
  1847                           tblptrl	equ	0xFF6
  1848                           tablat	equ	0xFF5
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           postdec1	equ	0xFE5
  1852                           fsr1l	equ	0xFE1
  1853                           
  1854                           	psect	bssBANK0
  1855  0000DA                     __pbssBANK0:
  1856                           	opt stack 0
  1857  0000DA                     _sensor_outputs:
  1858                           	opt stack 0
  1859  0000DA                     	ds	4
  1860  0000DE                     _COND_signal:
  1861                           	opt stack 0
  1862  0000DE                     	ds	2
  1863  0000E0                     _IR_res:
  1864                           	opt stack 0
  1865  0000E0                     	ds	2
  1866  0000E2                     _IR_signal:
  1867                           	opt stack 0
  1868  0000E2                     	ds	2
  1869  0000E4                     _MAG_signal:
  1870                           	opt stack 0
  1871  0000E4                     	ds	2
  1872  0000E6                     _RTCflag:
  1873                           	opt stack 0
  1874  0000E6                     	ds	2
  1875  0000E8                     _cur_state:
  1876                           	opt stack 0
  1877  0000E8                     	ds	2
  1878  0000EA                     _f_arm_position:
  1879                           	opt stack 0
  1880  0000EA                     	ds	2
  1881  0000EC                     _f_lastCan:
  1882                           	opt stack 0
  1883  0000EC                     	ds	2
  1884  0000EE                     _f_loadingNewCan:
  1885                           	opt stack 0
  1886  0000EE                     	ds	2
  1887  0000F0                     _log:
  1888                           	opt stack 0
  1889  0000F0                     	ds	2
  1890  0000F2                     _log_completion:
  1891                           	opt stack 0
  1892  0000F2                     	ds	2
  1893  0000F4                     _log_count_pop_no_tab:
  1894                           	opt stack 0
  1895  0000F4                     	ds	2
  1896  0000F6                     _log_total_time:
  1897                           	opt stack 0
  1898  0000F6                     	ds	2
  1899  0000F8                     _logstate:
  1900                           	opt stack 0
  1901  0000F8                     	ds	2
  1902  0000FA                     _total_time:
  1903                           	opt stack 0
  1904  0000FA                     	ds	2
  1905  0000FC                     _machine_state:
  1906                           	opt stack 0
  1907  0000FC                     	ds	1
  1908  0000FD                     _sel:
  1909                           	opt stack 0
  1910  0000FD                     	ds	1
  1911  0000FE                     _count_total:
  1912                           	opt stack 0
  1913  0000FE                     	ds	2
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           postinc0	equ	0xFEE
  1919                           wreg	equ	0xFE8
  1920                           postdec1	equ	0xFE5
  1921                           fsr1l	equ	0xFE1
  1922                           
  1923                           	psect	bssBANK1
  1924  000100                     __pbssBANK1:
  1925                           	opt stack 0
  1926  000100                     _log_startTime:
  1927                           	opt stack 0
  1928  000100                     	ds	14
  1929  00010E                     _startTime:
  1930                           	opt stack 0
  1931  00010E                     	ds	14
  1932  00011C                     _servoTimes:
  1933                           	opt stack 0
  1934  00011C                     	ds	8
  1935  000124                     _time:
  1936                           	opt stack 0
  1937  000124                     	ds	7
  1938  00012B                     _cur_can:
  1939                           	opt stack 0
  1940  00012B                     	ds	2
  1941  00012D                     _debug:
  1942                           	opt stack 0
  1943  00012D                     	ds	2
  1944  00012F                     _f_ID_receive:
  1945                           	opt stack 0
  1946  00012F                     	ds	2
  1947  000131                     _f_can_coming_to_ID:
  1948                           	opt stack 0
  1949  000131                     	ds	2
  1950  000133                     _f_can_coming_to_distribution:
  1951                           	opt stack 0
  1952  000133                     	ds	2
  1953  000135                     _f_can_distributed:
  1954                           	opt stack 0
  1955  000135                     	ds	2
  1956  000137                     _f_most_recent_sort_time:
  1957                           	opt stack 0
  1958  000137                     	ds	2
  1959  000139                     _first:
  1960                           	opt stack 0
  1961  000139                     	ds	2
  1962  00013B                     _firstboot:
  1963                           	opt stack 0
  1964  00013B                     	ds	2
  1965  00013D                     _i:
  1966                           	opt stack 0
  1967  00013D                     	ds	2
  1968  00013F                     _log_count_can_no_lab:
  1969                           	opt stack 0
  1970  00013F                     	ds	2
  1971  000141                     _log_count_can_w_lab:
  1972                           	opt stack 0
  1973  000141                     	ds	2
  1974  000143                     _log_count_pop_w_tab:
  1975                           	opt stack 0
  1976  000143                     	ds	2
  1977  000145                     _log_count_total:
  1978                           	opt stack 0
  1979  000145                     	ds	2
  1980  000147                     _most_recent_sort_time:
  1981                           	opt stack 0
  1982  000147                     	ds	2
  1983  000149                     _motor_toggle_count:
  1984                           	opt stack 0
  1985  000149                     	ds	2
  1986  00014B                     _time_recent_agitator:
  1987                           	opt stack 0
  1988  00014B                     	ds	2
  1989  00014D                     _var:
  1990                           	opt stack 0
  1991  00014D                     	ds	2
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           postinc0	equ	0xFEE
  1997                           wreg	equ	0xFE8
  1998                           postdec1	equ	0xFE5
  1999                           fsr1l	equ	0xFE1
  2000                           
  2001                           	psect	dataBANK1
  2002  00014F                     __pdataBANK1:
  2003                           	opt stack 0
  2004  00014F                     UI@F3252:
  2005                           	opt stack 0
  2006  00014F                     	ds	4
  2007  000153                     printRTC@F3242:
  2008                           	opt stack 0
  2009  000153                     	ds	4
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1l	equ	0xFE1
  2018                           
  2019                           	psect	cstackBANK0
  2020  000080                     __pcstackBANK0:
  2021                           	opt stack 0
  2022  000080                     ??_delay_ms:
  2023  000080                     ??_isdigit:
  2024  000080                     ??_readADC:
  2025  000080                     ??_I2C_Master_Wait:
  2026  000080                     ?___wmul:
  2027                           	opt stack 0
  2028  000080                     ?___awmod:
  2029                           	opt stack 0
  2030  000080                     ?___lwdiv:
  2031                           	opt stack 0
  2032  000080                     ?___ftpack:
  2033                           	opt stack 0
  2034  000080                     ?___lldiv:
  2035                           	opt stack 0
  2036  000080                     lcdNibble@temp:
  2037                           	opt stack 0
  2038  000080                     initTime@m:
  2039                           	opt stack 0
  2040  000080                     initGlobalVars@time_recent_agitator:
  2041                           	opt stack 0
  2042  000080                     updateServoPosition@time_us:
  2043                           	opt stack 0
  2044  000080                     EEPROM_read@address:
  2045                           	opt stack 0
  2046  000080                     ___wmul@multiplier:
  2047                           	opt stack 0
  2048  000080                     ___awmod@dividend:
  2049                           	opt stack 0
  2050  000080                     ___lwdiv@dividend:
  2051                           	opt stack 0
  2052  000080                     strcpy@to:
  2053                           	opt stack 0
  2054  000080                     ___ftpack@arg:
  2055                           	opt stack 0
  2056  000080                     ___lldiv@dividend:
  2057                           	opt stack 0
  2058                           
  2059                           ; 4 bytes @ 0x0
  2060  000080                     	ds	1
  2061  000081                     readADC@channel:
  2062                           	opt stack 0
  2063  000081                     I2C_Master_Read@a:
  2064                           	opt stack 0
  2065  000081                     lcdNibble@data:
  2066                           	opt stack 0
  2067  000081                     initTime@h:
  2068                           	opt stack 0
  2069  000081                     delay_ms@milliseconds:
  2070                           	opt stack 0
  2071  000081                     _isdigit$2081:
  2072                           	opt stack 0
  2073  000081                     I2C_Master_Write@d:
  2074                           	opt stack 0
  2075                           
  2076                           ; 2 bytes @ 0x1
  2077  000081                     	ds	1
  2078  000082                     ??_readMAG:
  2079  000082                     ??_readCOND:
  2080  000082                     I2C_Master_Read@temp:
  2081                           	opt stack 0
  2082  000082                     lcdInst@data:
  2083                           	opt stack 0
  2084  000082                     putch@data:
  2085                           	opt stack 0
  2086  000082                     initTime@w:
  2087                           	opt stack 0
  2088  000082                     isdigit@c:
  2089                           	opt stack 0
  2090  000082                     readIR@ana_port:
  2091                           	opt stack 0
  2092  000082                     updateServoPosition@timer:
  2093                           	opt stack 0
  2094  000082                     ___wmul@multiplicand:
  2095                           	opt stack 0
  2096  000082                     ___awmod@divisor:
  2097                           	opt stack 0
  2098  000082                     ___lwdiv@divisor:
  2099                           	opt stack 0
  2100  000082                     strcpy@from:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x2
  2104  000082                     	ds	1
  2105  000083                     ??_initLCD:
  2106  000083                     initTime@DD:
  2107                           	opt stack 0
  2108  000083                     ___ftpack@exp:
  2109                           	opt stack 0
  2110  000083                     getRTC@i:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x3
  2114  000083                     	ds	1
  2115  000084                     ??_updateServoPosition:
  2116  000084                     ??_readIR:
  2117  000084                     initTime@MM:
  2118                           	opt stack 0
  2119  000084                     ___awmod@counter:
  2120                           	opt stack 0
  2121  000084                     ___ftpack@sign:
  2122                           	opt stack 0
  2123  000084                     readMAG@res:
  2124                           	opt stack 0
  2125  000084                     readCOND@res:
  2126                           	opt stack 0
  2127  000084                     ___wmul@product:
  2128                           	opt stack 0
  2129  000084                     ___lwdiv@quotient:
  2130                           	opt stack 0
  2131  000084                     strcpy@cp:
  2132                           	opt stack 0
  2133  000084                     ___lldiv@divisor:
  2134                           	opt stack 0
  2135                           
  2136                           ; 4 bytes @ 0x4
  2137  000084                     	ds	1
  2138  000085                     ??_initSortTimer:
  2139  000085                     ??___ftpack:
  2140  000085                     initTime@YY:
  2141                           	opt stack 0
  2142  000085                     ___awmod@sign:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x5
  2146  000085                     	ds	1
  2147  000086                     ??_getMAG:
  2148  000086                     ?___awdiv:
  2149                           	opt stack 0
  2150  000086                     initTime@s:
  2151                           	opt stack 0
  2152  000086                     ___lwdiv@counter:
  2153                           	opt stack 0
  2154  000086                     getIR@port:
  2155                           	opt stack 0
  2156  000086                     updateServoPosition@my_time:
  2157                           	opt stack 0
  2158  000086                     ___awdiv@dividend:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x6
  2162  000086                     	ds	1
  2163  000087                     ?___lwmod:
  2164                           	opt stack 0
  2165  000087                     ___lwmod@dividend:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x7
  2169  000087                     	ds	1
  2170  000088                     ??_Distribution:
  2171  000088                     ??_initServos:
  2172  000088                     ??_getIR:
  2173  000088                     initSortTimer@i:
  2174                           	opt stack 0
  2175  000088                     ___awdiv@divisor:
  2176                           	opt stack 0
  2177  000088                     ___lldiv@quotient:
  2178                           	opt stack 0
  2179                           
  2180                           ; 4 bytes @ 0x8
  2181  000088                     	ds	1
  2182  000089                     getIR@i:
  2183                           	opt stack 0
  2184  000089                     ___lwmod@divisor:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x9
  2188  000089                     	ds	1
  2189  00008A                     ___awdiv@counter:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0xA
  2193  00008A                     	ds	1
  2194  00008B                     ___awdiv@sign:
  2195                           	opt stack 0
  2196  00008B                     ___lwmod@counter:
  2197                           	opt stack 0
  2198                           
  2199                           ; 1 bytes @ 0xB
  2200  00008B                     	ds	1
  2201  00008C                     ___lldiv@counter:
  2202                           	opt stack 0
  2203  00008C                     ___awdiv@quotient:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0xC
  2207  00008C                     	ds	1
  2208  00008D                     I2C_Master_Init@c:
  2209                           	opt stack 0
  2210                           
  2211                           ; 4 bytes @ 0xD
  2212  00008D                     	ds	1
  2213  00008E                     ?_printf:
  2214                           	opt stack 0
  2215  00008E                     ?___awtoft:
  2216                           	opt stack 0
  2217  00008E                     printf@f:
  2218                           	opt stack 0
  2219  00008E                     ___awtoft@c:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0xE
  2223  00008E                     	ds	3
  2224  000091                     ??_I2C_Master_Init:
  2225  000091                     ___awtoft@sign:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x11
  2229  000091                     	ds	1
  2230  000092                     ___ftge@ff1:
  2231                           	opt stack 0
  2232                           
  2233                           ; 3 bytes @ 0x12
  2234  000092                     	ds	3
  2235  000095                     ??_loadRTC:
  2236  000095                     ___ftge@ff2:
  2237                           	opt stack 0
  2238                           
  2239                           ; 3 bytes @ 0x15
  2240  000095                     	ds	1
  2241  000096                     loadRTC@i:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x16
  2245  000096                     	ds	2
  2246  000098                     ??___ftge:
  2247                           
  2248                           ; 1 bytes @ 0x18
  2249  000098                     	ds	2
  2250  00009A                     ??_printf:
  2251                           
  2252                           ; 1 bytes @ 0x1A
  2253  00009A                     	ds	1
  2254  00009B                     ??_ID:
  2255                           
  2256                           ; 1 bytes @ 0x1B
  2257  00009B                     	ds	2
  2258  00009D                     ID@reflectivity1:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x1D
  2262  00009D                     	ds	1
  2263  00009E                     printf@prec:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x1E
  2267  00009E                     	ds	1
  2268  00009F                     ID@cond1:
  2269                           	opt stack 0
  2270  00009F                     printf@cp:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x1F
  2274  00009F                     	ds	2
  2275  0000A1                     ID@reflectivity2:
  2276                           	opt stack 0
  2277  0000A1                     printf@ap:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x21
  2281  0000A1                     	ds	2
  2282  0000A3                     ID@time_1154:
  2283                           	opt stack 0
  2284  0000A3                     printf@len:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x23
  2288  0000A3                     	ds	1
  2289  0000A4                     _ID$1144:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x24
  2293  0000A4                     	ds	1
  2294  0000A5                     _ID$1153:
  2295                           	opt stack 0
  2296  0000A5                     printf@val:
  2297                           	opt stack 0
  2298                           
  2299                           ; 2 bytes @ 0x25
  2300  0000A5                     	ds	1
  2301  0000A6                     _ID$1158:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x26
  2305  0000A6                     	ds	1
  2306  0000A7                     _ID$1160:
  2307                           	opt stack 0
  2308  0000A7                     printf@flag:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x27
  2312  0000A7                     	ds	1
  2313  0000A8                     _ID$1161:
  2314                           	opt stack 0
  2315  0000A8                     printf@c:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x28
  2319  0000A8                     	ds	1
  2320  0000A9                     ID@i:
  2321                           	opt stack 0
  2322  0000A9                     printf@width:
  2323                           	opt stack 0
  2324                           
  2325                           ; 2 bytes @ 0x29
  2326  0000A9                     	ds	2
  2327  0000AB                     ??_printRTC:
  2328  0000AB                     ??_algorithmTest:
  2329  0000AB                     ??_sensorTest:
  2330  0000AB                     ??_actuatorTest:
  2331  0000AB                     ??_arm:
  2332  0000AB                     ??_PortTestDC:
  2333  0000AB                     ??_SpeedTest:
  2334  0000AB                     ??_PortTestPusher:
  2335  0000AB                     ??_PlatformTest:
  2336  0000AB                     ??_BothServos:
  2337  0000AB                     ??_BlockerTest:
  2338  0000AB                     ID@i_1152:
  2339                           	opt stack 0
  2340  0000AB                     EEPROM_write@address:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x2B
  2344  0000AB                     	ds	1
  2345  0000AC                     arm@on:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x2C
  2349  0000AC                     	ds	1
  2350  0000AD                     EEPROM_write@data:
  2351                           	opt stack 0
  2352  0000AD                     actuatorTest@i_1756:
  2353                           	opt stack 0
  2354  0000AD                     ID@i_1157:
  2355                           	opt stack 0
  2356  0000AD                     sensorTest@res:
  2357                           	opt stack 0
  2358  0000AD                     PlatformTest@res:
  2359                           	opt stack 0
  2360  0000AD                     BlockerTest@i:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x2D
  2364  0000AD                     	ds	1
  2365  0000AE                     ??_EEPROM_write:
  2366  0000AE                     actuatorTest@i_1763:
  2367                           	opt stack 0
  2368  0000AE                     printRTC@INT_time:
  2369                           	opt stack 0
  2370                           
  2371                           ; 14 bytes @ 0x2E
  2372  0000AE                     	ds	1
  2373  0000AF                     EEPROM_write@i:
  2374                           	opt stack 0
  2375  0000AF                     actuatorTest@i_1764:
  2376                           	opt stack 0
  2377  0000AF                     ID@i_1163:
  2378                           	opt stack 0
  2379  0000AF                     sensorTest@res_1733:
  2380                           	opt stack 0
  2381  0000AF                     PlatformTest@res_1808:
  2382                           	opt stack 0
  2383  0000AF                     BlockerTest@res:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x2F
  2387  0000AF                     	ds	1
  2388  0000B0                     EEPROM_write@i_1421:
  2389                           	opt stack 0
  2390  0000B0                     actuatorTest@i_1766:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x30
  2394  0000B0                     	ds	1
  2395  0000B1                     ??_Loading:
  2396  0000B1                     ID@time:
  2397                           	opt stack 0
  2398  0000B1                     logRun@num:
  2399                           	opt stack 0
  2400  0000B1                     actuatorTest@i_1767:
  2401                           	opt stack 0
  2402  0000B1                     PlatformTest@i:
  2403                           	opt stack 0
  2404  0000B1                     BlockerTest@cam_flag:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x31
  2408  0000B1                     	ds	1
  2409  0000B2                     logRun@byte1:
  2410                           	opt stack 0
  2411  0000B2                     actuatorTest@i_1769:
  2412                           	opt stack 0
  2413  0000B2                     ID@res1:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x32
  2417  0000B2                     	ds	1
  2418  0000B3                     logRun@byte2:
  2419                           	opt stack 0
  2420  0000B3                     actuatorTest@i_1770:
  2421                           	opt stack 0
  2422  0000B3                     Loading@addr:
  2423                           	opt stack 0
  2424  0000B3                     PlatformTest@i_1812:
  2425                           	opt stack 0
  2426  0000B3                     BlockerTest@cond_flag:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x33
  2430  0000B3                     	ds	1
  2431  0000B4                     logRun@byte3:
  2432                           	opt stack 0
  2433  0000B4                     actuatorTest@i_1772:
  2434                           	opt stack 0
  2435  0000B4                     ID@res2:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x34
  2439  0000B4                     	ds	1
  2440  0000B5                     Loading@byte1:
  2441                           	opt stack 0
  2442  0000B5                     logRun@byte_i:
  2443                           	opt stack 0
  2444  0000B5                     actuatorTest@i_1773:
  2445                           	opt stack 0
  2446  0000B5                     PlatformTest@on:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x35
  2450  0000B5                     	ds	1
  2451  0000B6                     _Loading$1138:
  2452                           	opt stack 0
  2453  0000B6                     logRun@byte11:
  2454                           	opt stack 0
  2455  0000B6                     actuatorTest@i_1775:
  2456                           	opt stack 0
  2457  0000B6                     ID@res:
  2458                           	opt stack 0
  2459                           
  2460                           ; 4 bytes @ 0x36
  2461  0000B6                     	ds	1
  2462  0000B7                     actuatorTest@i_1776:
  2463                           	opt stack 0
  2464  0000B7                     Loading@i_1127:
  2465                           	opt stack 0
  2466  0000B7                     logRun@i:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x37
  2470  0000B7                     	ds	1
  2471  0000B8                     actuatorTest@i_1778:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0x38
  2475  0000B8                     	ds	1
  2476  0000B9                     actuatorTest@i_1779:
  2477                           	opt stack 0
  2478  0000B9                     Loading@i_1136:
  2479                           	opt stack 0
  2480  0000B9                     logRun@addr:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x39
  2484  0000B9                     	ds	1
  2485  0000BA                     actuatorTest@i_1782:
  2486                           	opt stack 0
  2487  0000BA                     ID@i_1164:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x3A
  2491  0000BA                     	ds	1
  2492  0000BB                     actuatorTest@i_1783:
  2493                           	opt stack 0
  2494  0000BB                     Loading@i_1139:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x3B
  2498  0000BB                     	ds	1
  2499  0000BC                     actuatorTest@i_1785:
  2500                           	opt stack 0
  2501  0000BC                     printRTC@RTC_month:
  2502                           	opt stack 0
  2503  0000BC                     ID@j:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x3C
  2507  0000BC                     	ds	1
  2508  0000BD                     actuatorTest@i_1786:
  2509                           	opt stack 0
  2510  0000BD                     Loading@i_1140:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x3D
  2514  0000BD                     	ds	1
  2515  0000BE                     actuatorTest@i_1788:
  2516                           	opt stack 0
  2517  0000BE                     ID@n:
  2518                           	opt stack 0
  2519  0000BE                     printRTC@month:
  2520                           	opt stack 0
  2521                           
  2522                           ; 4 bytes @ 0x3E
  2523  0000BE                     	ds	1
  2524  0000BF                     actuatorTest@i_1789:
  2525                           	opt stack 0
  2526  0000BF                     Loading@i_1142:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x3F
  2530  0000BF                     	ds	1
  2531  0000C0                     actuatorTest@i_1792:
  2532                           	opt stack 0
  2533                           
  2534                           ; 1 bytes @ 0x40
  2535  0000C0                     	ds	1
  2536  0000C1                     actuatorTest@i_1793:
  2537                           	opt stack 0
  2538  0000C1                     Loading@i:
  2539                           	opt stack 0
  2540                           
  2541                           ; 2 bytes @ 0x41
  2542  0000C1                     	ds	1
  2543  0000C2                     actuatorTest@i_1795:
  2544                           	opt stack 0
  2545  0000C2                     printRTC@i:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x42
  2549  0000C2                     	ds	1
  2550  0000C3                     actuatorTest@i_1796:
  2551                           	opt stack 0
  2552  0000C3                     Loading@j:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x43
  2556  0000C3                     	ds	1
  2557  0000C4                     ??_UI:
  2558  0000C4                     actuatorTest@i:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x44
  2562  0000C4                     	ds	1
  2563  0000C5                     
  2564                           ; 1 bytes @ 0x45
  2565  0000C5                     	ds	1
  2566  0000C6                     ??_Test:
  2567  0000C6                     _UI$2443:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x46
  2571  0000C6                     	ds	2
  2572  0000C8                     UI@i:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x48
  2576  0000C8                     	ds	1
  2577  0000C9                     UI@i_413:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x49
  2581  0000C9                     	ds	1
  2582  0000CA                     UI@i_416:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x4A
  2586  0000CA                     	ds	1
  2587  0000CB                     UI@i_417:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x4B
  2591  0000CB                     	ds	1
  2592  0000CC                     UI@i_435:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x4C
  2596  0000CC                     	ds	1
  2597  0000CD                     UI@i_436:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x4D
  2601  0000CD                     	ds	1
  2602  0000CE                     UI@i_439:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x4E
  2606  0000CE                     	ds	1
  2607  0000CF                     UI@i_440:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x4F
  2611  0000CF                     	ds	1
  2612  0000D0                     UI@i_443:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x50
  2616  0000D0                     	ds	1
  2617  0000D1                     UI@i_444:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x51
  2621  0000D1                     	ds	1
  2622  0000D2                     UI@i_447:
  2623                           	opt stack 0
  2624                           
  2625                           ; 1 bytes @ 0x52
  2626  0000D2                     	ds	1
  2627  0000D3                     UI@i_448:
  2628                           	opt stack 0
  2629                           
  2630                           ; 1 bytes @ 0x53
  2631  0000D3                     	ds	1
  2632  0000D4                     UI@i_451:
  2633                           	opt stack 0
  2634                           
  2635                           ; 1 bytes @ 0x54
  2636  0000D4                     	ds	1
  2637  0000D5                     UI@i_452:
  2638                           	opt stack 0
  2639                           
  2640                           ; 1 bytes @ 0x55
  2641  0000D5                     	ds	1
  2642  0000D6                     UI@month:
  2643                           	opt stack 0
  2644                           
  2645                           ; 4 bytes @ 0x56
  2646  0000D6                     	ds	4
  2647  0000DA                     tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           postinc0	equ	0xFEE
  2652                           wreg	equ	0xFE8
  2653                           postdec1	equ	0xFE5
  2654                           fsr1l	equ	0xFE1
  2655                           
  2656                           ; 1 bytes @ 0x5A
  2657                           
  2658                           	psect	cstackCOMRAM
  2659  000001                     __pcstackCOMRAM:
  2660                           	opt stack 0
  2661  000001                     ??_updateArmState:
  2662  000001                     ??i2_I2C_Master_Wait:
  2663  000001                     ??i2_isdigit:
  2664  000001                     ?i2___wmul:
  2665                           	opt stack 0
  2666  000001                     ?i2___awmod:
  2667                           	opt stack 0
  2668  000001                     ?i2___lwmod:
  2669                           	opt stack 0
  2670  000001                     i2lcdNibble@temp:
  2671                           	opt stack 0
  2672  000001                     i2updateServoPosition@time_us:
  2673                           	opt stack 0
  2674  000001                     i2EEPROM_read@address:
  2675                           	opt stack 0
  2676  000001                     i2___wmul@multiplier:
  2677                           	opt stack 0
  2678  000001                     i2___awmod@dividend:
  2679                           	opt stack 0
  2680  000001                     i2___lwmod@dividend:
  2681                           	opt stack 0
  2682  000001                     i2strcpy@to:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0x0
  2686  000001                     	ds	1
  2687  000002                     i2I2C_Master_Read@a:
  2688                           	opt stack 0
  2689  000002                     i2lcdNibble@data:
  2690                           	opt stack 0
  2691  000002                     i2_isdigit$2081:
  2692                           	opt stack 0
  2693  000002                     i2I2C_Master_Write@d:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x1
  2697  000002                     	ds	1
  2698  000003                     i2I2C_Master_Read@temp:
  2699                           	opt stack 0
  2700  000003                     i2lcdInst@data:
  2701                           	opt stack 0
  2702  000003                     i2putch@data:
  2703                           	opt stack 0
  2704  000003                     i2isdigit@c:
  2705                           	opt stack 0
  2706  000003                     i2updateServoPosition@timer:
  2707                           	opt stack 0
  2708  000003                     i2___wmul@multiplicand:
  2709                           	opt stack 0
  2710  000003                     i2___awmod@divisor:
  2711                           	opt stack 0
  2712  000003                     i2___lwmod@divisor:
  2713                           	opt stack 0
  2714  000003                     i2strcpy@from:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x2
  2718  000003                     	ds	1
  2719  000004                     i2getRTC@i:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x3
  2723  000004                     	ds	1
  2724  000005                     ??i2_updateServoPosition:
  2725  000005                     i2___awmod@counter:
  2726                           	opt stack 0
  2727  000005                     i2___lwmod@counter:
  2728                           	opt stack 0
  2729  000005                     i2___wmul@product:
  2730                           	opt stack 0
  2731  000005                     i2strcpy@cp:
  2732                           	opt stack 0
  2733                           
  2734                           ; 2 bytes @ 0x4
  2735  000005                     	ds	1
  2736  000006                     ?i2___lwdiv:
  2737                           	opt stack 0
  2738  000006                     i2___awmod@sign:
  2739                           	opt stack 0
  2740  000006                     i2___lwdiv@dividend:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0x5
  2744  000006                     	ds	1
  2745  000007                     retrieveLog@logNum:
  2746                           	opt stack 0
  2747  000007                     i2updateServoPosition@my_time:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0x6
  2751  000007                     	ds	1
  2752  000008                     i2___lwdiv@divisor:
  2753                           	opt stack 0
  2754                           
  2755                           ; 2 bytes @ 0x7
  2756  000008                     	ds	1
  2757  000009                     ??_retrieveLog:
  2758  000009                     ??_updateServoStates:
  2759                           
  2760                           ; 1 bytes @ 0x8
  2761  000009                     	ds	1
  2762  00000A                     i2___lwdiv@quotient:
  2763                           	opt stack 0
  2764                           
  2765                           ; 2 bytes @ 0x9
  2766  00000A                     	ds	1
  2767  00000B                     retrieveLog@byte1:
  2768                           	opt stack 0
  2769                           
  2770                           ; 1 bytes @ 0xA
  2771  00000B                     	ds	1
  2772  00000C                     retrieveLog@byte2:
  2773                           	opt stack 0
  2774  00000C                     i2___lwdiv@counter:
  2775                           	opt stack 0
  2776                           
  2777                           ; 1 bytes @ 0xB
  2778  00000C                     	ds	1
  2779  00000D                     ?i2_printf:
  2780                           	opt stack 0
  2781  00000D                     retrieveLog@byte3:
  2782                           	opt stack 0
  2783  00000D                     i2printf@f:
  2784                           	opt stack 0
  2785                           
  2786                           ; 2 bytes @ 0xC
  2787  00000D                     	ds	1
  2788  00000E                     retrieveLog@i:
  2789                           	opt stack 0
  2790                           
  2791                           ; 2 bytes @ 0xD
  2792  00000E                     	ds	2
  2793  000010                     retrieveLog@addr:
  2794                           	opt stack 0
  2795                           
  2796                           ; 2 bytes @ 0xF
  2797  000010                     	ds	2
  2798  000012                     dispLogs@myLog:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0x11
  2802  000012                     	ds	2
  2803  000014                     
  2804                           ; 1 bytes @ 0x13
  2805  000014                     	ds	5
  2806  000019                     ??i2_printf:
  2807                           
  2808                           ; 1 bytes @ 0x18
  2809  000019                     	ds	4
  2810  00001D                     i2printf@prec:
  2811                           	opt stack 0
  2812                           
  2813                           ; 1 bytes @ 0x1C
  2814  00001D                     	ds	1
  2815  00001E                     i2printf@cp:
  2816                           	opt stack 0
  2817                           
  2818                           ; 2 bytes @ 0x1D
  2819  00001E                     	ds	2
  2820  000020                     i2printf@ap:
  2821                           	opt stack 0
  2822                           
  2823                           ; 2 bytes @ 0x1F
  2824  000020                     	ds	2
  2825  000022                     i2printf@len:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x21
  2829  000022                     	ds	2
  2830  000024                     i2printf@val:
  2831                           	opt stack 0
  2832                           
  2833                           ; 2 bytes @ 0x23
  2834  000024                     	ds	2
  2835  000026                     i2printf@flag:
  2836                           	opt stack 0
  2837                           
  2838                           ; 1 bytes @ 0x25
  2839  000026                     	ds	1
  2840  000027                     i2printf@c:
  2841                           	opt stack 0
  2842                           
  2843                           ; 1 bytes @ 0x26
  2844  000027                     	ds	1
  2845  000028                     i2printf@width:
  2846                           	opt stack 0
  2847                           
  2848                           ; 2 bytes @ 0x27
  2849  000028                     	ds	2
  2850  00002A                     ??_printSortTimer:
  2851  00002A                     ??i2_printRTC:
  2852  00002A                     ?_inputHandler:
  2853                           	opt stack 0
  2854                           
  2855                           ; 2 bytes @ 0x29
  2856  00002A                     	ds	2
  2857  00002C                     ??_inputHandler:
  2858                           
  2859                           ; 1 bytes @ 0x2B
  2860  00002C                     	ds	1
  2861  00002D                     printSortTimer@curTime:
  2862                           	opt stack 0
  2863  00002D                     i2printRTC@INT_time:
  2864                           	opt stack 0
  2865                           
  2866                           ; 14 bytes @ 0x2C
  2867  00002D                     	ds	14
  2868  00003B                     printSortTimer@start_sec:
  2869                           	opt stack 0
  2870  00003B                     i2printRTC@RTC_month:
  2871                           	opt stack 0
  2872                           
  2873                           ; 2 bytes @ 0x3A
  2874  00003B                     	ds	2
  2875  00003D                     printSortTimer@cur_sec:
  2876                           	opt stack 0
  2877  00003D                     i2printRTC@month:
  2878                           	opt stack 0
  2879                           
  2880                           ; 4 bytes @ 0x3C
  2881  00003D                     	ds	2
  2882  00003F                     printSortTimer@min:
  2883                           	opt stack 0
  2884                           
  2885                           ; 2 bytes @ 0x3E
  2886  00003F                     	ds	2
  2887  000041                     printSortTimer@sec:
  2888                           	opt stack 0
  2889  000041                     i2printRTC@i:
  2890                           	opt stack 0
  2891                           
  2892                           ; 2 bytes @ 0x40
  2893  000041                     	ds	2
  2894  000043                     ??_updateMenu:
  2895  000043                     _printSortTimer$2578:
  2896                           	opt stack 0
  2897                           
  2898                           ; 2 bytes @ 0x42
  2899  000043                     	ds	2
  2900  000045                     printSortTimer@timeDiff:
  2901                           	opt stack 0
  2902                           
  2903                           ; 2 bytes @ 0x44
  2904  000045                     	ds	2
  2905  000047                     printSortTimer@i:
  2906                           	opt stack 0
  2907                           
  2908                           ; 2 bytes @ 0x46
  2909  000047                     	ds	2
  2910  000049                     ??_handler:
  2911                           
  2912                           ; 1 bytes @ 0x48
  2913  000049                     	ds	16
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           postinc0	equ	0xFEE
  2919                           wreg	equ	0xFE8
  2920                           postdec1	equ	0xFE5
  2921                           fsr1l	equ	0xFE1
  2922                           
  2923 ;;
  2924 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2925 ;;
  2926 ;; *************** function _main *****************
  2927 ;; Defined at:
  2928 ;;		line 19 in file "main.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels required when called:   13
  2948 ;; This function calls:
  2949 ;;		_I2C_Master_Init
  2950 ;;		_Test
  2951 ;;		_UI
  2952 ;;		_initEEPROM
  2953 ;;		_initLCD
  2954 ;;		_initTime
  2955 ;;		_initUI
  2956 ;;		_logRun
  2957 ;;		_machineConfig
  2958 ;;		_sort
  2959 ;;		_stopSignals
  2960 ;; This function is called by:
  2961 ;;		Startup code after reset
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text0
  2966  004CBE                     __ptext0:
  2967                           	opt stack 0
  2968  004CBE                     _main:
  2969                           	opt stack 18
  2970                           
  2971                           ;main.c: 20: machineConfig();
  2972                           
  2973                           ;incstack = 0
  2974  004CBE  EC7C  F02B         	call	_machineConfig	;wreg free
  2975                           
  2976                           ;main.c: 21: initLCD();
  2977  004CC2  EC06  F02D         	call	_initLCD	;wreg free
  2978                           
  2979                           ;main.c: 24: RTCflag = 0;
  2980  004CC6  0E00               	movlw	0
  2981  004CC8  0100               	movlb	0	; () banked
  2982  004CCA  6FE7               	movwf	(_RTCflag+1)& (0+255),b
  2983  004CCC  0E00               	movlw	0
  2984  004CCE  6FE6               	movwf	_RTCflag& (0+255),b
  2985                           
  2986                           ;main.c: 25: if(RTCflag){
  2987  004CD0  0100               	movlb	0	; () banked
  2988  004CD2  51E6               	movf	_RTCflag& (0+255),w,b
  2989  004CD4  0100               	movlb	0	; () banked
  2990  004CD6  11E7               	iorwf	(_RTCflag+1)& (0+255),w,b
  2991  004CD8  B4D8               	btfsc	status,2,c
  2992  004CDA  D016               	goto	l10594
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2996  004CDC  0E47               	movlw	71
  2997  004CDE  0100               	movlb	0	; () banked
  2998  004CE0  6F80               	movwf	initTime@m& (0+255),b
  2999  004CE2  0E17               	movlw	23
  3000  004CE4  0100               	movlb	0	; () banked
  3001  004CE6  6F81               	movwf	initTime@h& (0+255),b
  3002  004CE8  0E07               	movlw	7
  3003  004CEA  0100               	movlb	0	; () banked
  3004  004CEC  6F82               	movwf	initTime@w& (0+255),b
  3005  004CEE  0E08               	movlw	8
  3006  004CF0  0100               	movlb	0	; () banked
  3007  004CF2  6F83               	movwf	initTime@DD& (0+255),b
  3008  004CF4  0E04               	movlw	4
  3009  004CF6  0100               	movlb	0	; () banked
  3010  004CF8  6F84               	movwf	initTime@MM& (0+255),b
  3011  004CFA  0E17               	movlw	23
  3012  004CFC  0100               	movlb	0	; () banked
  3013  004CFE  6F85               	movwf	initTime@YY& (0+255),b
  3014  004D00  0E42               	movlw	66
  3015  004D02  ECF8  F02F         	call	_initTime
  3016                           
  3017                           ;main.c: 27: }
  3018  004D06  D00B               	goto	l10596
  3019  004D08                     l10594:
  3020                           
  3021                           ;main.c: 28: else{
  3022                           ;main.c: 29: I2C_Master_Init(10000);
  3023  004D08  0E10               	movlw	16
  3024  004D0A  0100               	movlb	0	; () banked
  3025  004D0C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3026  004D0E  0E27               	movlw	39
  3027  004D10  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3028  004D12  0E00               	movlw	0
  3029  004D14  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3030  004D16  0E00               	movlw	0
  3031  004D18  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3032  004D1A  ECDF  F02B         	call	_I2C_Master_Init	;wreg free
  3033  004D1E                     l10596:
  3034                           
  3035                           ;main.c: 30: }
  3036                           ;main.c: 32: initUI();
  3037  004D1E  EC28  F02E         	call	_initUI	;wreg free
  3038                           
  3039                           ;main.c: 33: first = 1;
  3040  004D22  0E00               	movlw	0
  3041  004D24  0101               	movlb	1	; () banked
  3042  004D26  6F3A               	movwf	(_first+1)& (0+255),b
  3043  004D28  0E01               	movlw	1
  3044  004D2A  6F39               	movwf	_first& (0+255),b
  3045                           
  3046                           ; BSR set to: 1
  3047                           ;main.c: 34: initEEPROM();
  3048  004D2C  EC32  F030         	call	_initEEPROM	;wreg free
  3049                           
  3050                           ;main.c: 45: switch(machine_state){
  3051                           
  3052                           ;main.c: 44: while(1){
  3053  004D30  D018               	goto	l10620
  3054  004D32                     l10602:
  3055                           
  3056                           ;main.c: 47: UI();
  3057  004D32  EC09  F000         	call	_UI	;wreg free
  3058                           
  3059                           ;main.c: 48: break;
  3060  004D36  D015               	goto	l10620
  3061  004D38                     l10604:
  3062                           
  3063                           ;main.c: 50: sort();
  3064  004D38  ECE7  F02F         	call	_sort	;wreg free
  3065                           
  3066                           ;main.c: 51: break;
  3067  004D3C  D012               	goto	l10620
  3068  004D3E                     l10606:
  3069                           
  3070                           ;main.c: 53: stopSignals();
  3071  004D3E  EC18  F030         	call	_stopSignals	;wreg free
  3072                           
  3073                           ;main.c: 54: logRun();
  3074  004D42  EC81  F021         	call	_logRun	;wreg free
  3075                           
  3076                           ;main.c: 55: first = 1;
  3077  004D46  0E00               	movlw	0
  3078  004D48  0101               	movlb	1	; () banked
  3079  004D4A  6F3A               	movwf	(_first+1)& (0+255),b
  3080  004D4C  0E01               	movlw	1
  3081  004D4E  6F39               	movwf	_first& (0+255),b
  3082                           
  3083                           ; BSR set to: 1
  3084                           ;main.c: 56: UI();
  3085  004D50  EC09  F000         	call	_UI	;wreg free
  3086                           
  3087                           ;main.c: 57: break;
  3088  004D54  D006               	goto	l10620
  3089  004D56                     l10614:
  3090                           
  3091                           ;main.c: 59: Test();
  3092  004D56  EC38  F023         	call	_Test	;wreg free
  3093                           
  3094                           ;main.c: 60: break;
  3095  004D5A  D003               	goto	l10620
  3096  004D5C                     l10616:
  3097                           
  3098                           ;main.c: 62: stopSignals();
  3099  004D5C  EC18  F030         	call	_stopSignals	;wreg free
  3100  004D60                     l515:
  3101  004D60  D7FF               	goto	l515
  3102  004D62                     l10620:
  3103  004D62  0100               	movlb	0	; () banked
  3104  004D64  51FC               	movf	_machine_state& (0+255),w,b
  3105                           
  3106                           ; Switch size 1, requested type "space"
  3107                           ; Number of cases is 5, Range of values is 0 to 4
  3108                           ; switch strategies available:
  3109                           ; Name         Instructions Cycles
  3110                           ; simple_byte           16     9 (average)
  3111                           ;	Chosen strategy is simple_byte
  3112  004D66  0A00               	xorlw	0	; case 0
  3113  004D68  B4D8               	btfsc	status,2,c
  3114  004D6A  D7E3               	goto	l10602
  3115  004D6C  0A01               	xorlw	1	; case 1
  3116  004D6E  B4D8               	btfsc	status,2,c
  3117  004D70  D7E3               	goto	l10604
  3118  004D72  0A03               	xorlw	3	; case 2
  3119  004D74  B4D8               	btfsc	status,2,c
  3120  004D76  D7E3               	goto	l10606
  3121  004D78  0A01               	xorlw	1	; case 3
  3122  004D7A  B4D8               	btfsc	status,2,c
  3123  004D7C  D7EC               	goto	l10614
  3124  004D7E  0A07               	xorlw	7	; case 4
  3125  004D80  B4D8               	btfsc	status,2,c
  3126  004D82  D7EC               	goto	l10616
  3127                           
  3128                           ; BSR set to: 0
  3129                           
  3130                           ; BSR set to: 0
  3131  004D84  D7EE               	goto	l10620
  3132  004D86                     __end_of_main:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postdec1	equ	0xFE5
  3141                           fsr1l	equ	0xFE1
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _sort *****************
  3145 ;; Defined at:
  3146 ;;		line 73 in file "sort.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;		None
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;Total ram usage:        0 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:   12
  3167 ;; This function calls:
  3168 ;;		_Distribution
  3169 ;;		_ID
  3170 ;;		_Loading
  3171 ;; This function is called by:
  3172 ;;		_main
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text1
  3177  005FCE                     __ptext1:
  3178                           	opt stack 0
  3179  005FCE                     _sort:
  3180                           	opt stack 18
  3181                           
  3182                           ;sort.c: 74: if(machine_state == Sorting_state){
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;incstack = 0
  3186  005FCE  0100               	movlb	0	; () banked
  3187  005FD0  05FC               	decf	_machine_state& (0+255),w,b
  3188  005FD2  B4D8               	btfsc	status,2,c
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;sort.c: 75: Loading();
  3192  005FD4  ECEA  F00B         	call	_Loading	;wreg free
  3193                           
  3194                           ;sort.c: 76: }
  3195                           ;sort.c: 77: if(machine_state == Sorting_state){
  3196  005FD8  0100               	movlb	0	; () banked
  3197  005FDA  05FC               	decf	_machine_state& (0+255),w,b
  3198  005FDC  B4D8               	btfsc	status,2,c
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;sort.c: 78: ID();
  3202  005FDE  ECC9  F008         	call	_ID	;wreg free
  3203                           
  3204                           ;sort.c: 79: }
  3205                           ;sort.c: 80: if(machine_state == Sorting_state){
  3206  005FE2  0100               	movlb	0	; () banked
  3207  005FE4  05FC               	decf	_machine_state& (0+255),w,b
  3208  005FE6  A4D8               	btfss	status,2,c
  3209  005FE8  0012               	return	
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;sort.c: 81: Distribution();
  3213  005FEA  ECAE  F024         	call	_Distribution	;wreg free
  3214  005FEE  0012               	return	
  3215  005FF0                     __end_of_sort:
  3216                           	opt stack 0
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           postinc0	equ	0xFEE
  3222                           wreg	equ	0xFE8
  3223                           postdec1	equ	0xFE5
  3224                           fsr1l	equ	0xFE1
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _Loading *****************
  3228 ;; Defined at:
  3229 ;;		line 85 in file "sort.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  i               2   63[BANK0 ] int 
  3234 ;;  i               2   61[BANK0 ] int 
  3235 ;;  i               2   59[BANK0 ] int 
  3236 ;;  i               2   57[BANK0 ] int 
  3237 ;;  i               2   55[BANK0 ] int 
  3238 ;;  j               2   67[BANK0 ] int 
  3239 ;;  i               2   65[BANK0 ] int 
  3240 ;;  addr            2   51[BANK0 ] unsigned short 
  3241 ;;  byte1           1   53[BANK0 ] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;Total ram usage:       20 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:   11
  3258 ;; This function calls:
  3259 ;;		_EEPROM_read
  3260 ;;		_EEPROM_write
  3261 ;;		_delay_ms
  3262 ;;		_getIR
  3263 ;;		_getMAG
  3264 ;;		_initGlobalVars
  3265 ;;		_initServos
  3266 ;;		_initSortTimer
  3267 ;;		_lcdInst
  3268 ;;		_readIR
  3269 ;; This function is called by:
  3270 ;;		_sort
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text2
  3275  0017D4                     __ptext2:
  3276                           	opt stack 0
  3277  0017D4                     _Loading:
  3278                           	opt stack 18
  3279                           
  3280                           ;sort.c: 86: if(first){
  3281                           
  3282                           ;incstack = 0
  3283  0017D4  0101               	movlb	1	; () banked
  3284  0017D6  5139               	movf	_first& (0+255),w,b
  3285  0017D8  0101               	movlb	1	; () banked
  3286  0017DA  113A               	iorwf	(_first+1)& (0+255),w,b
  3287  0017DC  B4D8               	btfsc	status,2,c
  3288  0017DE  D06A               	goto	l8118
  3289                           
  3290                           ; BSR set to: 1
  3291                           ;sort.c: 87: TMR1IE = 1;
  3292  0017E0  809D               	bsf	3997,0,c	;volatile
  3293                           
  3294                           ;sort.c: 88: TMR2IE = 1;
  3295  0017E2  829D               	bsf	3997,1,c	;volatile
  3296                           
  3297                           ;sort.c: 89: TMR3IE = 1;
  3298  0017E4  82A0               	bsf	4000,1,c	;volatile
  3299                           
  3300                           ; BSR set to: 1
  3301                           ;sort.c: 90: initGlobalVars();
  3302  0017E6  ECF5  F025         	call	_initGlobalVars	;wreg free
  3303                           
  3304                           ;sort.c: 91: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3305  0017EA  0E01               	movlw	1
  3306  0017EC  EC63  F030         	call	_lcdInst
  3307  0017F0  0E68               	movlw	104
  3308  0017F2  0100               	movlb	0	; () banked
  3309  0017F4  6FB1               	movwf	??_Loading& (0+255),b
  3310  0017F6  0EE4               	movlw	228
  3311  0017F8                     u10857:
  3312  0017F8  2EE8               	decfsz	wreg,f,c
  3313  0017FA  D7FE               	bra	u10857
  3314  0017FC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3315  0017FE  D7FC               	bra	u10857
  3316  001800  F000               	nop	
  3317                           
  3318                           ;sort.c: 92: initSortTimer();
  3319  001802  ECE4  F027         	call	_initSortTimer	;wreg free
  3320                           
  3321                           ;sort.c: 93: LATCbits.LATC5 = 1;
  3322  001806  8A8B               	bsf	3979,5,c	;volatile
  3323                           
  3324                           ;sort.c: 94: LATCbits.LATC6 = 1;
  3325  001808  8C8B               	bsf	3979,6,c	;volatile
  3326                           
  3327                           ;sort.c: 99: sel = EEPROM_read(0);
  3328  00180A  0E00               	movlw	0
  3329  00180C  0100               	movlb	0	; () banked
  3330  00180E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3331  001810  0E00               	movlw	0
  3332  001812  6F80               	movwf	EEPROM_read@address& (0+255),b
  3333  001814  EC26  F030         	call	_EEPROM_read	;wreg free
  3334  001818  0100               	movlb	0	; () banked
  3335  00181A  6FFD               	movwf	_sel& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;sort.c: 100: unsigned short addr = 1 + 11 * sel;
  3339  00181C  0100               	movlb	0	; () banked
  3340  00181E  51FD               	movf	_sel& (0+255),w,b
  3341  001820  0D0B               	mullw	11
  3342  001822  0E01               	movlw	1
  3343  001824  24F3               	addwf	prodl,w,c
  3344  001826  0100               	movlb	0	; () banked
  3345  001828  6FB3               	movwf	Loading@addr& (0+255),b
  3346  00182A  0E00               	movlw	0
  3347  00182C  20F4               	addwfc	prodh,w,c
  3348  00182E  0100               	movlb	0	; () banked
  3349  001830  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;sort.c: 101: unsigned char byte1 = 0b01111111;
  3353  001832  0E7F               	movlw	127
  3354  001834  0100               	movlb	0	; () banked
  3355  001836  6FB5               	movwf	Loading@byte1& (0+255),b
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;sort.c: 102: EEPROM_write(addr, byte1);
  3359  001838  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3360  00183C  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3361  001840  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3362  001844  EC3A  F024         	call	_EEPROM_write	;wreg free
  3363                           
  3364                           ;sort.c: 105: LATBbits.LATB2 = 0;
  3365  001848  948A               	bcf	3978,2,c	;volatile
  3366                           
  3367                           ;sort.c: 107: for(int i=0; i<46; i++){
  3368  00184A  0E00               	movlw	0
  3369  00184C  0100               	movlb	0	; () banked
  3370  00184E  6FC2               	movwf	(Loading@i+1)& (0+255),b
  3371  001850  0E00               	movlw	0
  3372  001852  6FC1               	movwf	Loading@i& (0+255),b
  3373                           
  3374                           ; BSR set to: 0
  3375  001854  0100               	movlb	0	; () banked
  3376  001856  BFC2               	btfsc	(Loading@i+1)& (0+255),7,b
  3377  001858  D008               	goto	l8108
  3378  00185A  0100               	movlb	0	; () banked
  3379  00185C  51C2               	movf	(Loading@i+1)& (0+255),w,b
  3380  00185E  E126               	bnz	l806
  3381  001860  0E2E               	movlw	46
  3382  001862  0100               	movlb	0	; () banked
  3383  001864  5DC1               	subwf	Loading@i& (0+255),w,b
  3384  001866  B0D8               	btfsc	status,0,c
  3385  001868  D021               	goto	l806
  3386  00186A                     l8108:
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;sort.c: 108: LATBbits.LATB2 = !LATBbits.LATB2;
  3390  00186A  B48A               	btfsc	3978,2,c	;volatile
  3391  00186C  D004               	goto	u6960
  3392  00186E  0100               	movlb	0	; () banked
  3393  001870  6BB1               	clrf	??_Loading& (0+255),b
  3394  001872  2BB1               	incf	??_Loading& (0+255),f,b
  3395  001874  D002               	goto	u6978
  3396  001876                     u6960:
  3397  001876  0100               	movlb	0	; () banked
  3398  001878  6BB1               	clrf	??_Loading& (0+255),b
  3399  00187A                     u6978:
  3400  00187A  0100               	movlb	0	; () banked
  3401  00187C  47B1               	rlncf	??_Loading& (0+255),f,b
  3402  00187E  47B1               	rlncf	??_Loading& (0+255),f,b
  3403  001880  508A               	movf	3978,w,c	;volatile
  3404  001882  0100               	movlb	0	; () banked
  3405  001884  19B1               	xorwf	??_Loading& (0+255),w,b
  3406  001886  0BFB               	andlw	-5
  3407  001888  19B1               	xorwf	??_Loading& (0+255),w,b
  3408  00188A  6E8A               	movwf	3978,c	;volatile
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;sort.c: 109: delay_ms(45-i);
  3412  00188C  0100               	movlb	0	; () banked
  3413  00188E  51C1               	movf	Loading@i& (0+255),w,b
  3414  001890  0800               	sublw	0
  3415  001892  0F2D               	addlw	45
  3416  001894  EC87  F02F         	call	_delay_ms
  3417  001898  0100               	movlb	0	; () banked
  3418  00189A  4BC1               	infsnz	Loading@i& (0+255),f,b
  3419  00189C  2BC2               	incf	(Loading@i+1)& (0+255),f,b
  3420                           
  3421                           ; BSR set to: 0
  3422  00189E  0100               	movlb	0	; () banked
  3423  0018A0  BFC2               	btfsc	(Loading@i+1)& (0+255),7,b
  3424  0018A2  D7E3               	goto	l8108
  3425  0018A4  0100               	movlb	0	; () banked
  3426  0018A6  51C2               	movf	(Loading@i+1)& (0+255),w,b
  3427  0018A8  E101               	bnz	u6980
  3428  0018AA  D7DA               	goto	L1
  3429  0018AC                     u6980:
  3430  0018AC                     l806:
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;sort.c: 110: }
  3434                           ;sort.c: 111: LATBbits.LATB2 = 1;
  3435  0018AC  848A               	bsf	3978,2,c	;volatile
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 114: initServos();
  3439  0018AE  EC25  F02A         	call	_initServos	;wreg free
  3440                           
  3441                           ;sort.c: 115: }
  3442  0018B2  0012               	return	
  3443  0018B4                     l8118:
  3444                           
  3445                           ;sort.c: 116: else{
  3446                           ;sort.c: 119: if(!f_loadingNewCan){
  3447  0018B4  0100               	movlb	0	; () banked
  3448  0018B6  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3449  0018B8  0100               	movlb	0	; () banked
  3450  0018BA  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3451  0018BC  A4D8               	btfss	status,2,c
  3452  0018BE  D01D               	goto	l8134
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;sort.c: 121: getIR(0);
  3456  0018C0  0E00               	movlw	0
  3457  0018C2  0100               	movlb	0	; () banked
  3458  0018C4  6F87               	movwf	(getIR@port+1)& (0+255),b
  3459  0018C6  0E00               	movlw	0
  3460  0018C8  6F86               	movwf	getIR@port& (0+255),b
  3461  0018CA  ECE4  F029         	call	_getIR	;wreg free
  3462                           
  3463                           ;sort.c: 123: if(!f_loadingNewCan){
  3464  0018CE  0100               	movlb	0	; () banked
  3465  0018D0  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3466  0018D2  0100               	movlb	0	; () banked
  3467  0018D4  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3468  0018D6  B4D8               	btfsc	status,2,c
  3469  0018D8  0012               	return	
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;sort.c: 127: else{
  3473                           ;sort.c: 128: count_total++;
  3474                           
  3475                           ; BSR set to: 0
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;sort.c: 125: }
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;sort.c: 124: return;
  3482  0018DA  0100               	movlb	0	; () banked
  3483  0018DC  4BFE               	infsnz	_count_total& (0+255),f,b
  3484  0018DE  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;sort.c: 129: if(count_total == 12){
  3488  0018E0  0E0C               	movlw	12
  3489  0018E2  0100               	movlb	0	; () banked
  3490  0018E4  19FE               	xorwf	_count_total& (0+255),w,b
  3491  0018E6  0100               	movlb	0	; () banked
  3492  0018E8  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3493  0018EA  A4D8               	btfss	status,2,c
  3494  0018EC  0012               	return	
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;sort.c: 130: f_lastCan = 1;
  3498  0018EE  0E00               	movlw	0
  3499  0018F0  0100               	movlb	0	; () banked
  3500  0018F2  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  3501  0018F4  0E01               	movlw	1
  3502  0018F6  6FEC               	movwf	_f_lastCan& (0+255),b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;sort.c: 131: }
  3506                           ;sort.c: 132: }
  3507                           ;sort.c: 133: }
  3508                           
  3509                           ; BSR set to: 0
  3510  0018F8  0012               	return	
  3511  0018FA                     l8134:
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;sort.c: 136: else if(f_ID_receive){
  3515  0018FA  0101               	movlb	1	; () banked
  3516  0018FC  512F               	movf	_f_ID_receive& (0+255),w,b
  3517  0018FE  0101               	movlb	1	; () banked
  3518  001900  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3519  001902  B4D8               	btfsc	status,2,c
  3520  001904  0012               	return	
  3521                           
  3522                           ; BSR set to: 1
  3523                           ;sort.c: 137: f_most_recent_sort_time = 1;
  3524  001906  0E00               	movlw	0
  3525  001908  0101               	movlb	1	; () banked
  3526  00190A  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3527  00190C  0E01               	movlw	1
  3528  00190E  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3529                           
  3530                           ;sort.c: 138: f_loadingNewCan = 0;
  3531  001910  0E00               	movlw	0
  3532  001912  0100               	movlb	0	; () banked
  3533  001914  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3534  001916  0E00               	movlw	0
  3535  001918  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;sort.c: 139: _delay((unsigned long)((750)*(32000000/4000.0)));
  3539  00191A  0E1F               	movlw	31
  3540  00191C  0100               	movlb	0	; () banked
  3541  00191E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3542  001920  0E71               	movlw	113
  3543  001922  0100               	movlb	0	; () banked
  3544  001924  6FB1               	movwf	??_Loading& (0+255),b
  3545  001926  0E1E               	movlw	30
  3546  001928                     u10867:
  3547  001928  2EE8               	decfsz	wreg,f,c
  3548  00192A  D7FE               	bra	u10867
  3549  00192C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3550  00192E  D7FC               	bra	u10867
  3551  001930  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3552  001932  D7FA               	bra	u10867
  3553  001934  F000               	nop	
  3554                           
  3555                           ;sort.c: 140: LATBbits.LATB2 = 0;
  3556  001936  948A               	bcf	3978,2,c	;volatile
  3557                           
  3558                           ;sort.c: 144: f_arm_position = 1;
  3559  001938  0E00               	movlw	0
  3560  00193A  0100               	movlb	0	; () banked
  3561  00193C  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3562  00193E  0E01               	movlw	1
  3563  001940  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;sort.c: 146: delay_ms(750);
  3567  001942  0EEE               	movlw	238
  3568  001944  EC87  F02F         	call	_delay_ms
  3569                           
  3570                           ;sort.c: 147: getMAG();
  3571  001948  EC10  F02E         	call	_getMAG	;wreg free
  3572                           
  3573                           ;sort.c: 148: sensor_outputs[0] = MAG_signal;
  3574  00194C  C0E4  F0DA         	movff	_MAG_signal,_sensor_outputs
  3575  001950  C0E5  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3576                           
  3577                           ;sort.c: 150: TMR2IE = 0;
  3578  001954  929D               	bcf	3997,1,c	;volatile
  3579                           
  3580                           ;sort.c: 151: if(sensor_outputs[0]){
  3581  001956  0100               	movlb	0	; () banked
  3582  001958  51DA               	movf	_sensor_outputs& (0+255),w,b
  3583  00195A  0100               	movlb	0	; () banked
  3584  00195C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3585  00195E  B4D8               	btfsc	status,2,c
  3586  001960  D01D               	goto	l8166
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;sort.c: 152: for(int i = 0; i<3000; i++){
  3590  001962  0E00               	movlw	0
  3591  001964  0100               	movlb	0	; () banked
  3592  001966  6FB8               	movwf	(Loading@i_1127+1)& (0+255),b
  3593  001968  0E00               	movlw	0
  3594  00196A  6FB7               	movwf	Loading@i_1127& (0+255),b
  3595  00196C                     l8156:
  3596                           
  3597                           ; BSR set to: 0
  3598  00196C  0100               	movlb	0	; () banked
  3599  00196E  BFB8               	btfsc	(Loading@i_1127+1)& (0+255),7,b
  3600  001970  D008               	goto	l816
  3601  001972  0EB8               	movlw	184
  3602  001974  0100               	movlb	0	; () banked
  3603  001976  5DB7               	subwf	Loading@i_1127& (0+255),w,b
  3604  001978  0E0B               	movlw	11
  3605  00197A  0100               	movlb	0	; () banked
  3606  00197C  59B8               	subwfb	(Loading@i_1127+1)& (0+255),w,b
  3607  00197E  B0D8               	btfsc	status,0,c
  3608  001980  D02A               	goto	l818
  3609  001982                     l816:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;sort.c: 153: LATAbits.LATA4 = 1;
  3613  001982  8889               	bsf	3977,4,c	;volatile
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 154: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3617  001984  0EC8               	movlw	200
  3618  001986                     u10877:
  3619  001986  2EE8               	decfsz	wreg,f,c
  3620  001988  D7FE               	bra	u10877
  3621                           
  3622                           ;sort.c: 155: LATAbits.LATA4 = 0;
  3623  00198A  9889               	bcf	3977,4,c	;volatile
  3624                           
  3625                           ;sort.c: 156: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3626  00198C  0E42               	movlw	66
  3627  00198E                     u10887:
  3628  00198E  2EE8               	decfsz	wreg,f,c
  3629  001990  D7FE               	bra	u10887
  3630  001992  D000               	nop2	
  3631  001994  0100               	movlb	0	; () banked
  3632  001996  4BB7               	infsnz	Loading@i_1127& (0+255),f,b
  3633  001998  2BB8               	incf	(Loading@i_1127+1)& (0+255),f,b
  3634  00199A  D7E8               	goto	l8156
  3635  00199C                     l8166:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;sort.c: 159: else{
  3639                           ;sort.c: 160: for(int i = 0; i<3000; i++){
  3640  00199C  0E00               	movlw	0
  3641  00199E  0100               	movlb	0	; () banked
  3642  0019A0  6FBA               	movwf	(Loading@i_1136+1)& (0+255),b
  3643  0019A2  0E00               	movlw	0
  3644  0019A4  6FB9               	movwf	Loading@i_1136& (0+255),b
  3645  0019A6                     l8168:
  3646                           
  3647                           ; BSR set to: 0
  3648  0019A6  0100               	movlb	0	; () banked
  3649  0019A8  BFBA               	btfsc	(Loading@i_1136+1)& (0+255),7,b
  3650  0019AA  D008               	goto	l819
  3651  0019AC  0EB8               	movlw	184
  3652  0019AE  0100               	movlb	0	; () banked
  3653  0019B0  5DB9               	subwf	Loading@i_1136& (0+255),w,b
  3654  0019B2  0E0B               	movlw	11
  3655  0019B4  0100               	movlb	0	; () banked
  3656  0019B6  59BA               	subwfb	(Loading@i_1136+1)& (0+255),w,b
  3657  0019B8  B0D8               	btfsc	status,0,c
  3658  0019BA  D00D               	goto	l818
  3659  0019BC                     l819:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 161: LATAbits.LATA4 = 1;
  3663  0019BC  8889               	bsf	3977,4,c	;volatile
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 162: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3667  0019BE  0E9A               	movlw	154
  3668  0019C0                     u10897:
  3669  0019C0  2EE8               	decfsz	wreg,f,c
  3670  0019C2  D7FE               	bra	u10897
  3671  0019C4  D000               	nop2	
  3672                           
  3673                           ;sort.c: 163: LATAbits.LATA4 = 0;
  3674  0019C6  9889               	bcf	3977,4,c	;volatile
  3675                           
  3676                           ;sort.c: 164: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3677  0019C8  0E70               	movlw	112
  3678  0019CA                     u10907:
  3679  0019CA  2EE8               	decfsz	wreg,f,c
  3680  0019CC  D7FE               	bra	u10907
  3681  0019CE  0100               	movlb	0	; () banked
  3682  0019D0  4BB9               	infsnz	Loading@i_1136& (0+255),f,b
  3683  0019D2  2BBA               	incf	(Loading@i_1136+1)& (0+255),f,b
  3684  0019D4  D7E8               	goto	l8168
  3685  0019D6                     l818:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;sort.c: 165: }
  3689                           ;sort.c: 166: }
  3690                           ;sort.c: 167: TMR2IE = 1;
  3691  0019D6  829D               	bsf	3997,1,c	;volatile
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;sort.c: 168: _delay((unsigned long)((500)*(32000000/4000.0)));
  3695  0019D8  0E15               	movlw	21
  3696  0019DA  0100               	movlb	0	; () banked
  3697  0019DC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3698  0019DE  0E4B               	movlw	75
  3699  0019E0  0100               	movlb	0	; () banked
  3700  0019E2  6FB1               	movwf	??_Loading& (0+255),b
  3701  0019E4  0EBE               	movlw	190
  3702  0019E6                     u10917:
  3703  0019E6  2EE8               	decfsz	wreg,f,c
  3704  0019E8  D7FE               	bra	u10917
  3705  0019EA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3706  0019EC  D7FC               	bra	u10917
  3707  0019EE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3708  0019F0  D7FA               	bra	u10917
  3709  0019F2  F000               	nop	
  3710                           
  3711                           ;sort.c: 170: readIR(0);
  3712  0019F4  0E00               	movlw	0
  3713  0019F6  0100               	movlb	0	; () banked
  3714  0019F8  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3715  0019FA  0E00               	movlw	0
  3716  0019FC  6F82               	movwf	readIR@ana_port& (0+255),b
  3717  0019FE  EC8A  F028         	call	_readIR	;wreg free
  3718                           
  3719                           ;sort.c: 171: if(IR_signal==1){
  3720  001A02  0100               	movlb	0	; () banked
  3721  001A04  05E2               	decf	_IR_signal& (0+255),w,b
  3722  001A06  0100               	movlb	0	; () banked
  3723  001A08  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  3724  001A0A  A4D8               	btfss	status,2,c
  3725  001A0C  D1DA               	goto	l8328
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;sort.c: 172: _delay((unsigned long)((100)*(32000000/4000.0)));
  3729  001A0E  0E05               	movlw	5
  3730  001A10  0100               	movlb	0	; () banked
  3731  001A12  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3732  001A14  0E0F               	movlw	15
  3733  001A16  0100               	movlb	0	; () banked
  3734  001A18  6FB1               	movwf	??_Loading& (0+255),b
  3735  001A1A  0EF1               	movlw	241
  3736  001A1C                     u10927:
  3737  001A1C  2EE8               	decfsz	wreg,f,c
  3738  001A1E  D7FE               	bra	u10927
  3739  001A20  2FB1               	decfsz	??_Loading& (0+255),f,b
  3740  001A22  D7FC               	bra	u10927
  3741  001A24  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3742  001A26  D7FA               	bra	u10927
  3743                           
  3744                           ;sort.c: 173: readIR(0);
  3745  001A28  0E00               	movlw	0
  3746  001A2A  0100               	movlb	0	; () banked
  3747  001A2C  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3748  001A2E  0E00               	movlw	0
  3749  001A30  6F82               	movwf	readIR@ana_port& (0+255),b
  3750  001A32  EC8A  F028         	call	_readIR	;wreg free
  3751                           
  3752                           ;sort.c: 174: if(IR_signal==1){
  3753  001A36  0100               	movlb	0	; () banked
  3754  001A38  05E2               	decf	_IR_signal& (0+255),w,b
  3755  001A3A  0100               	movlb	0	; () banked
  3756  001A3C  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  3757  001A3E  A4D8               	btfss	status,2,c
  3758  001A40  D058               	goto	l8228
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;sort.c: 175: getMAG();
  3762  001A42  EC10  F02E         	call	_getMAG	;wreg free
  3763                           
  3764                           ;sort.c: 176: sensor_outputs[0] = sensor_outputs[0] || MAG_signal;
  3765  001A46  0E01               	movlw	1
  3766  001A48  0100               	movlb	0	; () banked
  3767  001A4A  6FB6               	movwf	_Loading$1138& (0+255),b
  3768                           
  3769                           ; BSR set to: 0
  3770  001A4C  0100               	movlb	0	; () banked
  3771  001A4E  51DA               	movf	_sensor_outputs& (0+255),w,b
  3772  001A50  0100               	movlb	0	; () banked
  3773  001A52  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3774  001A54  A4D8               	btfss	status,2,c
  3775  001A56  D009               	goto	l8200
  3776                           
  3777                           ; BSR set to: 0
  3778  001A58  0100               	movlb	0	; () banked
  3779  001A5A  51E4               	movf	_MAG_signal& (0+255),w,b
  3780  001A5C  0100               	movlb	0	; () banked
  3781  001A5E  11E5               	iorwf	(_MAG_signal+1)& (0+255),w,b
  3782  001A60  A4D8               	btfss	status,2,c
  3783  001A62  D003               	goto	l8200
  3784                           
  3785                           ; BSR set to: 0
  3786  001A64  0E00               	movlw	0
  3787  001A66  0100               	movlb	0	; () banked
  3788  001A68  6FB6               	movwf	_Loading$1138& (0+255),b
  3789  001A6A                     l8200:
  3790                           
  3791                           ; BSR set to: 0
  3792  001A6A  C0B6  F0DA         	movff	_Loading$1138,_sensor_outputs
  3793  001A6E  0100               	movlb	0	; () banked
  3794  001A70  6BDB               	clrf	(_sensor_outputs+1)& (0+255),b
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;sort.c: 178: if(sensor_outputs[0]){
  3798  001A72  0100               	movlb	0	; () banked
  3799  001A74  51DA               	movf	_sensor_outputs& (0+255),w,b
  3800  001A76  0100               	movlb	0	; () banked
  3801  001A78  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3802  001A7A  B4D8               	btfsc	status,2,c
  3803  001A7C  D01D               	goto	l8216
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;sort.c: 179: for(int i = 0; i<3000; i++){
  3807  001A7E  0E00               	movlw	0
  3808  001A80  0100               	movlb	0	; () banked
  3809  001A82  6FBC               	movwf	(Loading@i_1139+1)& (0+255),b
  3810  001A84  0E00               	movlw	0
  3811  001A86  6FBB               	movwf	Loading@i_1139& (0+255),b
  3812  001A88                     l8206:
  3813                           
  3814                           ; BSR set to: 0
  3815  001A88  0100               	movlb	0	; () banked
  3816  001A8A  BFBC               	btfsc	(Loading@i_1139+1)& (0+255),7,b
  3817  001A8C  D008               	goto	l826
  3818  001A8E  0EB8               	movlw	184
  3819  001A90  0100               	movlb	0	; () banked
  3820  001A92  5DBB               	subwf	Loading@i_1139& (0+255),w,b
  3821  001A94  0E0B               	movlw	11
  3822  001A96  0100               	movlb	0	; () banked
  3823  001A98  59BC               	subwfb	(Loading@i_1139+1)& (0+255),w,b
  3824  001A9A  B0D8               	btfsc	status,0,c
  3825  001A9C  D02A               	goto	l8228
  3826  001A9E                     l826:
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;sort.c: 180: LATAbits.LATA4 = 1;
  3830  001A9E  8889               	bsf	3977,4,c	;volatile
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;sort.c: 181: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3834  001AA0  0EC8               	movlw	200
  3835  001AA2                     u10937:
  3836  001AA2  2EE8               	decfsz	wreg,f,c
  3837  001AA4  D7FE               	bra	u10937
  3838                           
  3839                           ;sort.c: 182: LATAbits.LATA4 = 0;
  3840  001AA6  9889               	bcf	3977,4,c	;volatile
  3841                           
  3842                           ;sort.c: 183: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3843  001AA8  0E42               	movlw	66
  3844  001AAA                     u10947:
  3845  001AAA  2EE8               	decfsz	wreg,f,c
  3846  001AAC  D7FE               	bra	u10947
  3847  001AAE  D000               	nop2	
  3848  001AB0  0100               	movlb	0	; () banked
  3849  001AB2  4BBB               	infsnz	Loading@i_1139& (0+255),f,b
  3850  001AB4  2BBC               	incf	(Loading@i_1139+1)& (0+255),f,b
  3851  001AB6  D7E8               	goto	l8206
  3852  001AB8                     l8216:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;sort.c: 186: else{
  3856                           ;sort.c: 187: for(int i = 0; i<3000; i++){
  3857  001AB8  0E00               	movlw	0
  3858  001ABA  0100               	movlb	0	; () banked
  3859  001ABC  6FBE               	movwf	(Loading@i_1140+1)& (0+255),b
  3860  001ABE  0E00               	movlw	0
  3861  001AC0  6FBD               	movwf	Loading@i_1140& (0+255),b
  3862  001AC2                     l8218:
  3863                           
  3864                           ; BSR set to: 0
  3865  001AC2  0100               	movlb	0	; () banked
  3866  001AC4  BFBE               	btfsc	(Loading@i_1140+1)& (0+255),7,b
  3867  001AC6  D008               	goto	l829
  3868  001AC8  0EB8               	movlw	184
  3869  001ACA  0100               	movlb	0	; () banked
  3870  001ACC  5DBD               	subwf	Loading@i_1140& (0+255),w,b
  3871  001ACE  0E0B               	movlw	11
  3872  001AD0  0100               	movlb	0	; () banked
  3873  001AD2  59BE               	subwfb	(Loading@i_1140+1)& (0+255),w,b
  3874  001AD4  B0D8               	btfsc	status,0,c
  3875  001AD6  D00D               	goto	l8228
  3876  001AD8                     l829:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;sort.c: 188: LATAbits.LATA4 = 1;
  3880  001AD8  8889               	bsf	3977,4,c	;volatile
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;sort.c: 189: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3884  001ADA  0E9A               	movlw	154
  3885  001ADC                     u10957:
  3886  001ADC  2EE8               	decfsz	wreg,f,c
  3887  001ADE  D7FE               	bra	u10957
  3888  001AE0  D000               	nop2	
  3889                           
  3890                           ;sort.c: 190: LATAbits.LATA4 = 0;
  3891  001AE2  9889               	bcf	3977,4,c	;volatile
  3892                           
  3893                           ;sort.c: 191: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3894  001AE4  0E70               	movlw	112
  3895  001AE6                     u10967:
  3896  001AE6  2EE8               	decfsz	wreg,f,c
  3897  001AE8  D7FE               	bra	u10967
  3898  001AEA  0100               	movlb	0	; () banked
  3899  001AEC  4BBD               	infsnz	Loading@i_1140& (0+255),f,b
  3900  001AEE  2BBE               	incf	(Loading@i_1140+1)& (0+255),f,b
  3901  001AF0  D7E8               	goto	l8218
  3902  001AF2                     l8228:
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;sort.c: 192: }
  3906                           ;sort.c: 193: }
  3907                           ;sort.c: 194: }
  3908                           ;sort.c: 196: _delay((unsigned long)((400)*(32000000/4000.0)));
  3909  001AF2  0E11               	movlw	17
  3910  001AF4  0100               	movlb	0	; () banked
  3911  001AF6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3912  001AF8  0E3C               	movlw	60
  3913  001AFA  0100               	movlb	0	; () banked
  3914  001AFC  6FB1               	movwf	??_Loading& (0+255),b
  3915  001AFE  0ECB               	movlw	203
  3916  001B00                     u10977:
  3917  001B00  2EE8               	decfsz	wreg,f,c
  3918  001B02  D7FE               	bra	u10977
  3919  001B04  2FB1               	decfsz	??_Loading& (0+255),f,b
  3920  001B06  D7FC               	bra	u10977
  3921  001B08  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3922  001B0A  D7FA               	bra	u10977
  3923                           
  3924                           ;sort.c: 198: int j = 0;
  3925  001B0C  0E00               	movlw	0
  3926  001B0E  0100               	movlb	0	; () banked
  3927  001B10  6FC4               	movwf	(Loading@j+1)& (0+255),b
  3928  001B12  0E00               	movlw	0
  3929  001B14  6FC3               	movwf	Loading@j& (0+255),b
  3930                           
  3931                           ;sort.c: 199: while(IR_signal == 1){
  3932  001B16  D14E               	goto	l8326
  3933  001B18                     l8232:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;sort.c: 200: readIR(0);
  3937  001B18  0E00               	movlw	0
  3938  001B1A  0100               	movlb	0	; () banked
  3939  001B1C  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3940  001B1E  0E00               	movlw	0
  3941  001B20  6F82               	movwf	readIR@ana_port& (0+255),b
  3942  001B22  EC8A  F028         	call	_readIR	;wreg free
  3943                           
  3944                           ;sort.c: 201: if(j == 3 || j == 4){
  3945  001B26  0E03               	movlw	3
  3946  001B28  0100               	movlb	0	; () banked
  3947  001B2A  19C3               	xorwf	Loading@j& (0+255),w,b
  3948  001B2C  0100               	movlb	0	; () banked
  3949  001B2E  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3950  001B30  B4D8               	btfsc	status,2,c
  3951  001B32  D007               	goto	l8238
  3952                           
  3953                           ; BSR set to: 0
  3954  001B34  0E04               	movlw	4
  3955  001B36  0100               	movlb	0	; () banked
  3956  001B38  19C3               	xorwf	Loading@j& (0+255),w,b
  3957  001B3A  0100               	movlb	0	; () banked
  3958  001B3C  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3959  001B3E  A4D8               	btfss	status,2,c
  3960  001B40  D006               	goto	l8240
  3961  001B42                     l8238:
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;sort.c: 202: f_arm_position = 0;
  3965  001B42  0E00               	movlw	0
  3966  001B44  0100               	movlb	0	; () banked
  3967  001B46  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3968  001B48  0E00               	movlw	0
  3969  001B4A  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3970                           
  3971                           ;sort.c: 203: }
  3972  001B4C  D06D               	goto	l8260
  3973  001B4E                     l8240:
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;sort.c: 204: else if(j == 5 || j == 6){
  3977  001B4E  0E05               	movlw	5
  3978  001B50  0100               	movlb	0	; () banked
  3979  001B52  19C3               	xorwf	Loading@j& (0+255),w,b
  3980  001B54  0100               	movlb	0	; () banked
  3981  001B56  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3982  001B58  B4D8               	btfsc	status,2,c
  3983  001B5A  D007               	goto	l839
  3984                           
  3985                           ; BSR set to: 0
  3986  001B5C  0E06               	movlw	6
  3987  001B5E  0100               	movlb	0	; () banked
  3988  001B60  19C3               	xorwf	Loading@j& (0+255),w,b
  3989  001B62  0100               	movlb	0	; () banked
  3990  001B64  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3991  001B66  A4D8               	btfss	status,2,c
  3992  001B68  D002               	goto	l8244
  3993  001B6A                     l839:
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;sort.c: 205: LATBbits.LATB2 = 1;
  3997  001B6A  848A               	bsf	3978,2,c	;volatile
  3998                           
  3999                           ;sort.c: 206: }
  4000  001B6C  D05D               	goto	l8260
  4001  001B6E                     l8244:
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;sort.c: 207: else if(j == 7 || j == 8 || j == 9 || j == 10){
  4005  001B6E  0E07               	movlw	7
  4006  001B70  0100               	movlb	0	; () banked
  4007  001B72  19C3               	xorwf	Loading@j& (0+255),w,b
  4008  001B74  0100               	movlb	0	; () banked
  4009  001B76  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4010  001B78  B4D8               	btfsc	status,2,c
  4011  001B7A  D015               	goto	l8252
  4012                           
  4013                           ; BSR set to: 0
  4014  001B7C  0E08               	movlw	8
  4015  001B7E  0100               	movlb	0	; () banked
  4016  001B80  19C3               	xorwf	Loading@j& (0+255),w,b
  4017  001B82  0100               	movlb	0	; () banked
  4018  001B84  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4019  001B86  B4D8               	btfsc	status,2,c
  4020  001B88  D00E               	goto	l8252
  4021                           
  4022                           ; BSR set to: 0
  4023  001B8A  0E09               	movlw	9
  4024  001B8C  0100               	movlb	0	; () banked
  4025  001B8E  19C3               	xorwf	Loading@j& (0+255),w,b
  4026  001B90  0100               	movlb	0	; () banked
  4027  001B92  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4028  001B94  B4D8               	btfsc	status,2,c
  4029  001B96  D007               	goto	l8252
  4030                           
  4031                           ; BSR set to: 0
  4032  001B98  0E0A               	movlw	10
  4033  001B9A  0100               	movlb	0	; () banked
  4034  001B9C  19C3               	xorwf	Loading@j& (0+255),w,b
  4035  001B9E  0100               	movlb	0	; () banked
  4036  001BA0  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4037  001BA2  A4D8               	btfss	status,2,c
  4038  001BA4  D013               	goto	l841
  4039  001BA6                     l8252:
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;sort.c: 208: f_arm_position = 1;
  4043  001BA6  0E00               	movlw	0
  4044  001BA8  0100               	movlb	0	; () banked
  4045  001BAA  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4046  001BAC  0E01               	movlw	1
  4047  001BAE  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;sort.c: 209: _delay((unsigned long)((200)*(32000000/4000.0)));
  4051  001BB0  0E09               	movlw	9
  4052  001BB2  0100               	movlb	0	; () banked
  4053  001BB4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4054  001BB6  0E1E               	movlw	30
  4055  001BB8  0100               	movlb	0	; () banked
  4056  001BBA  6FB1               	movwf	??_Loading& (0+255),b
  4057  001BBC  0EE4               	movlw	228
  4058  001BBE                     u10987:
  4059  001BBE  2EE8               	decfsz	wreg,f,c
  4060  001BC0  D7FE               	bra	u10987
  4061  001BC2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4062  001BC4  D7FC               	bra	u10987
  4063  001BC6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4064  001BC8  D7FA               	bra	u10987
  4065  001BCA  D02D               	goto	L2
  4066  001BCC                     l841:
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;sort.c: 211: else if(j % 2 == 0){
  4070  001BCC  0100               	movlb	0	; () banked
  4071  001BCE  B1C3               	btfsc	Loading@j& (0+255),0,b
  4072  001BD0  D02B               	goto	l8260
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;sort.c: 212: LATBbits.LATB2 = !LATBbits.LATB2;
  4076  001BD2  B48A               	btfsc	3978,2,c	;volatile
  4077  001BD4  D004               	goto	u7260
  4078  001BD6  0100               	movlb	0	; () banked
  4079  001BD8  6BB1               	clrf	??_Loading& (0+255),b
  4080  001BDA  2BB1               	incf	??_Loading& (0+255),f,b
  4081  001BDC  D002               	goto	u7278
  4082  001BDE                     u7260:
  4083  001BDE  0100               	movlb	0	; () banked
  4084  001BE0  6BB1               	clrf	??_Loading& (0+255),b
  4085  001BE2                     u7278:
  4086  001BE2  0100               	movlb	0	; () banked
  4087  001BE4  47B1               	rlncf	??_Loading& (0+255),f,b
  4088  001BE6  47B1               	rlncf	??_Loading& (0+255),f,b
  4089  001BE8  508A               	movf	3978,w,c	;volatile
  4090  001BEA  0100               	movlb	0	; () banked
  4091  001BEC  19B1               	xorwf	??_Loading& (0+255),w,b
  4092  001BEE  0BFB               	andlw	-5
  4093  001BF0  19B1               	xorwf	??_Loading& (0+255),w,b
  4094  001BF2  6E8A               	movwf	3978,c	;volatile
  4095                           
  4096                           ;sort.c: 213: f_arm_position = !f_arm_position;
  4097  001BF4  0100               	movlb	0	; () banked
  4098  001BF6  51EA               	movf	_f_arm_position& (0+255),w,b	;volatile
  4099  001BF8  0100               	movlb	0	; () banked
  4100  001BFA  11EB               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4101  001BFC  A4D8               	btfss	status,2,c
  4102  001BFE  D002               	goto	u7280
  4103  001C00  0E01               	movlw	1
  4104  001C02  D001               	goto	u7290
  4105  001C04                     u7280:
  4106  001C04  0E00               	movlw	0
  4107  001C06                     u7290:
  4108  001C06  0100               	movlb	0	; () banked
  4109  001C08  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4110  001C0A  6BEB               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;sort.c: 214: _delay((unsigned long)((200)*(32000000/4000.0)));
  4114  001C0C  0E09               	movlw	9
  4115  001C0E  0100               	movlb	0	; () banked
  4116  001C10  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4117  001C12  0E1E               	movlw	30
  4118  001C14  0100               	movlb	0	; () banked
  4119  001C16  6FB1               	movwf	??_Loading& (0+255),b
  4120  001C18  0EE4               	movlw	228
  4121  001C1A                     u10997:
  4122  001C1A  2EE8               	decfsz	wreg,f,c
  4123  001C1C  D7FE               	bra	u10997
  4124  001C1E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4125  001C20  D7FC               	bra	u10997
  4126  001C22  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4127  001C24  D7FA               	bra	u10997
  4128  001C26                     L2:
  4129  001C26  F000               	nop	
  4130  001C28                     l8260:
  4131                           
  4132                           ;sort.c: 215: }
  4133                           ;sort.c: 218: if(IR_signal==1){
  4134  001C28  0100               	movlb	0	; () banked
  4135  001C2A  05E2               	decf	_IR_signal& (0+255),w,b
  4136  001C2C  0100               	movlb	0	; () banked
  4137  001C2E  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4138  001C30  A4D8               	btfss	status,2,c
  4139  001C32  D09F               	goto	l8314
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;sort.c: 219: _delay((unsigned long)((350)*(32000000/4000.0)));
  4143  001C34  0E0F               	movlw	15
  4144  001C36  0100               	movlb	0	; () banked
  4145  001C38  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4146  001C3A  0E35               	movlw	53
  4147  001C3C  0100               	movlb	0	; () banked
  4148  001C3E  6FB1               	movwf	??_Loading& (0+255),b
  4149  001C40  0E51               	movlw	81
  4150  001C42                     u11007:
  4151  001C42  2EE8               	decfsz	wreg,f,c
  4152  001C44  D7FE               	bra	u11007
  4153  001C46  2FB1               	decfsz	??_Loading& (0+255),f,b
  4154  001C48  D7FC               	bra	u11007
  4155  001C4A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4156  001C4C  D7FA               	bra	u11007
  4157                           
  4158                           ;sort.c: 220: readIR(0);
  4159  001C4E  0E00               	movlw	0
  4160  001C50  0100               	movlb	0	; () banked
  4161  001C52  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4162  001C54  0E00               	movlw	0
  4163  001C56  6F82               	movwf	readIR@ana_port& (0+255),b
  4164  001C58  EC8A  F028         	call	_readIR	;wreg free
  4165                           
  4166                           ;sort.c: 221: if(IR_signal==1){
  4167  001C5C  0100               	movlb	0	; () banked
  4168  001C5E  05E2               	decf	_IR_signal& (0+255),w,b
  4169  001C60  0100               	movlb	0	; () banked
  4170  001C62  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4171  001C64  A4D8               	btfss	status,2,c
  4172  001C66  D081               	goto	l847
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;sort.c: 222: if(sensor_outputs[0]){
  4176  001C68  0100               	movlb	0	; () banked
  4177  001C6A  51DA               	movf	_sensor_outputs& (0+255),w,b
  4178  001C6C  0100               	movlb	0	; () banked
  4179  001C6E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4180  001C70  B4D8               	btfsc	status,2,c
  4181  001C72  D011               	goto	l848
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;sort.c: 223: LATAbits.LATA4 = 1;
  4185  001C74  8889               	bsf	3977,4,c	;volatile
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;sort.c: 224: _delay((unsigned long)((300)*(32000000/4000.0)));
  4189  001C76  0E0D               	movlw	13
  4190  001C78  0100               	movlb	0	; () banked
  4191  001C7A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4192  001C7C  0E2D               	movlw	45
  4193  001C7E  0100               	movlb	0	; () banked
  4194  001C80  6FB1               	movwf	??_Loading& (0+255),b
  4195  001C82  0ED7               	movlw	215
  4196  001C84                     u11017:
  4197  001C84  2EE8               	decfsz	wreg,f,c
  4198  001C86  D7FE               	bra	u11017
  4199  001C88  2FB1               	decfsz	??_Loading& (0+255),f,b
  4200  001C8A  D7FC               	bra	u11017
  4201  001C8C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4202  001C8E  D7FA               	bra	u11017
  4203  001C90  D000               	nop2	
  4204                           
  4205                           ;sort.c: 225: LATAbits.LATA4 = 0;
  4206  001C92  9889               	bcf	3977,4,c	;volatile
  4207                           
  4208                           ;sort.c: 226: }
  4209  001C94  D06A               	goto	l847
  4210  001C96                     l848:
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;sort.c: 227: else{
  4214                           ;sort.c: 228: TMR2IE = 0;
  4215  001C96  929D               	bcf	3997,1,c	;volatile
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;sort.c: 229: for(int i = 0; i<3000; i++){
  4219  001C98  0E00               	movlw	0
  4220  001C9A  0100               	movlb	0	; () banked
  4221  001C9C  6FC0               	movwf	(Loading@i_1142+1)& (0+255),b
  4222  001C9E  0E00               	movlw	0
  4223  001CA0  6FBF               	movwf	Loading@i_1142& (0+255),b
  4224  001CA2                     l8278:
  4225                           
  4226                           ; BSR set to: 0
  4227  001CA2  0100               	movlb	0	; () banked
  4228  001CA4  BFC0               	btfsc	(Loading@i_1142+1)& (0+255),7,b
  4229  001CA6  D041               	goto	l8306
  4230  001CA8  0EB8               	movlw	184
  4231  001CAA  0100               	movlb	0	; () banked
  4232  001CAC  5DBF               	subwf	Loading@i_1142& (0+255),w,b
  4233  001CAE  0E0B               	movlw	11
  4234  001CB0  0100               	movlb	0	; () banked
  4235  001CB2  59C0               	subwfb	(Loading@i_1142+1)& (0+255),w,b
  4236  001CB4  B0D8               	btfsc	status,0,c
  4237  001CB6  D058               	goto	l851
  4238  001CB8  D038               	goto	l8306
  4239  001CBA                     l853:
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;sort.c: 232: LATAbits.LATA4 = 1;
  4243  001CBA  8889               	bsf	3977,4,c	;volatile
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;sort.c: 233: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4247  001CBC  0EC8               	movlw	200
  4248  001CBE                     u11027:
  4249  001CBE  2EE8               	decfsz	wreg,f,c
  4250  001CC0  D7FE               	bra	u11027
  4251                           
  4252                           ;sort.c: 234: LATAbits.LATA4 = 0;
  4253  001CC2  9889               	bcf	3977,4,c	;volatile
  4254                           
  4255                           ;sort.c: 235: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4256  001CC4  0E42               	movlw	66
  4257  001CC6                     u11037:
  4258  001CC6  2EE8               	decfsz	wreg,f,c
  4259  001CC8  D7FE               	bra	u11037
  4260  001CCA  D01C               	goto	L3
  4261  001CCC                     l855:
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;sort.c: 238: LATAbits.LATA4 = 1;
  4265  001CCC  8889               	bsf	3977,4,c	;volatile
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;sort.c: 239: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4269  001CCE  0ED5               	movlw	213
  4270  001CD0                     u11047:
  4271  001CD0  2EE8               	decfsz	wreg,f,c
  4272  001CD2  D7FE               	bra	u11047
  4273  001CD4  F000               	nop	
  4274                           
  4275                           ;sort.c: 240: LATAbits.LATA4 = 0;
  4276  001CD6  9889               	bcf	3977,4,c	;volatile
  4277                           
  4278                           ;sort.c: 241: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4279  001CD8  0E35               	movlw	53
  4280  001CDA                     u11057:
  4281  001CDA  2EE8               	decfsz	wreg,f,c
  4282  001CDC  D7FE               	bra	u11057
  4283  001CDE  D01D               	goto	L4
  4284  001CE0                     l856:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;sort.c: 244: LATAbits.LATA4 = 1;
  4288  001CE0  8889               	bsf	3977,4,c	;volatile
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;sort.c: 245: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4292  001CE2  0EE2               	movlw	226
  4293  001CE4                     u11067:
  4294  001CE4  2EE8               	decfsz	wreg,f,c
  4295  001CE6  D7FE               	bra	u11067
  4296  001CE8  D000               	nop2	
  4297                           
  4298                           ;sort.c: 246: LATAbits.LATA4 = 0;
  4299  001CEA  9889               	bcf	3977,4,c	;volatile
  4300                           
  4301                           ;sort.c: 247: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4302  001CEC  0E28               	movlw	40
  4303  001CEE                     u11077:
  4304  001CEE  2EE8               	decfsz	wreg,f,c
  4305  001CF0  D7FE               	bra	u11077
  4306                           
  4307                           ;sort.c: 248: break;
  4308  001CF2  D036               	goto	l8308
  4309  001CF4                     l857:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;sort.c: 250: LATAbits.LATA4 = 1;
  4313  001CF4  8889               	bsf	3977,4,c	;volatile
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;sort.c: 251: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4317  001CF6  0EF0               	movlw	240
  4318  001CF8                     u11087:
  4319  001CF8  2EE8               	decfsz	wreg,f,c
  4320  001CFA  D7FE               	bra	u11087
  4321                           
  4322                           ;sort.c: 252: LATAbits.LATA4 = 0;
  4323  001CFC  9889               	bcf	3977,4,c	;volatile
  4324                           
  4325                           ;sort.c: 253: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4326  001CFE  0E1A               	movlw	26
  4327  001D00                     u11097:
  4328  001D00  2EE8               	decfsz	wreg,f,c
  4329  001D02  D7FE               	bra	u11097
  4330  001D04                     L3:
  4331  001D04  D000               	nop2	
  4332                           
  4333                           ;sort.c: 254: break;
  4334  001D06  D02C               	goto	l8308
  4335  001D08                     l858:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;sort.c: 256: LATAbits.LATA4 = 1;
  4339  001D08  8889               	bsf	3977,4,c	;volatile
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;sort.c: 257: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4343  001D0A  0EFD               	movlw	253
  4344  001D0C                     u11107:
  4345  001D0C  2EE8               	decfsz	wreg,f,c
  4346  001D0E  D7FE               	bra	u11107
  4347  001D10  F000               	nop	
  4348                           
  4349                           ;sort.c: 258: LATAbits.LATA4 = 0;
  4350  001D12  9889               	bcf	3977,4,c	;volatile
  4351                           
  4352                           ;sort.c: 259: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4353  001D14  0E85               	movlw	133
  4354  001D16                     u11117:
  4355  001D16  2EE8               	decfsz	wreg,f,c
  4356  001D18  D7FE               	bra	u11117
  4357  001D1A                     L4:
  4358  001D1A  F000               	nop	
  4359                           
  4360                           ;sort.c: 260: break;
  4361  001D1C  D021               	goto	l8308
  4362  001D1E                     l859:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;sort.c: 262: LATAbits.LATA4 = 1;
  4366  001D1E  8889               	bsf	3977,4,c	;volatile
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;sort.c: 263: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4370  001D20  0EA0               	movlw	160
  4371  001D22                     u11127:
  4372  001D22  D000               	nop2	
  4373  001D24  2EE8               	decfsz	wreg,f,c
  4374  001D26  D7FD               	bra	u11127
  4375                           
  4376                           ;sort.c: 265: }
  4377                           
  4378                           ;sort.c: 264: break;
  4379  001D28  D01B               	goto	l8308
  4380  001D2A                     l8306:
  4381  001D2A  C0C3  F0B1         	movff	Loading@j,??_Loading
  4382  001D2E  C0C4  F0B2         	movff	Loading@j+1,??_Loading+1
  4383                           
  4384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4385                           ; Switch size 1, requested type "space"
  4386                           ; Number of cases is 1, Range of values is 0 to 0
  4387                           ; switch strategies available:
  4388                           ; Name         Instructions Cycles
  4389                           ; simple_byte            4     3 (average)
  4390                           ;	Chosen strategy is simple_byte
  4391  001D32  0100               	movlb	0	; () banked
  4392  001D34  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4393  001D36  0A00               	xorlw	0	; case 0
  4394  001D38  A4D8               	btfss	status,2,c
  4395  001D3A  D7F1               	goto	l859
  4396                           
  4397                           ; BSR set to: 0
  4398                           ; Switch size 1, requested type "space"
  4399                           ; Number of cases is 5, Range of values is 0 to 4
  4400                           ; switch strategies available:
  4401                           ; Name         Instructions Cycles
  4402                           ; simple_byte           16     9 (average)
  4403                           ;	Chosen strategy is simple_byte
  4404  001D3C  0100               	movlb	0	; () banked
  4405  001D3E  51B1               	movf	??_Loading& (0+255),w,b
  4406  001D40  0A00               	xorlw	0	; case 0
  4407  001D42  B4D8               	btfsc	status,2,c
  4408  001D44  D7BA               	goto	l853
  4409  001D46  0A01               	xorlw	1	; case 1
  4410  001D48  B4D8               	btfsc	status,2,c
  4411  001D4A  D7C0               	goto	l855
  4412  001D4C  0A03               	xorlw	3	; case 2
  4413  001D4E  B4D8               	btfsc	status,2,c
  4414  001D50  D7C7               	goto	l856
  4415  001D52  0A01               	xorlw	1	; case 3
  4416  001D54  B4D8               	btfsc	status,2,c
  4417  001D56  D7CE               	goto	l857
  4418  001D58  0A07               	xorlw	7	; case 4
  4419  001D5A  B4D8               	btfsc	status,2,c
  4420  001D5C  D7D5               	goto	l858
  4421  001D5E  D7DF               	goto	l859
  4422  001D60                     l8308:
  4423  001D60  0100               	movlb	0	; () banked
  4424  001D62  4BBF               	infsnz	Loading@i_1142& (0+255),f,b
  4425  001D64  2BC0               	incf	(Loading@i_1142+1)& (0+255),f,b
  4426  001D66  D79D               	goto	l8278
  4427  001D68                     l851:
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;sort.c: 266: }
  4431                           ;sort.c: 267: TMR2IE = 1;
  4432  001D68  829D               	bsf	3997,1,c	;volatile
  4433  001D6A                     l847:
  4434                           
  4435                           ;sort.c: 268: }
  4436                           ;sort.c: 269: }
  4437                           ;sort.c: 270: LATAbits.LATA4 = 0;
  4438  001D6A  9889               	bcf	3977,4,c	;volatile
  4439                           
  4440                           ;sort.c: 271: j++;
  4441  001D6C  0100               	movlb	0	; () banked
  4442  001D6E  4BC3               	infsnz	Loading@j& (0+255),f,b
  4443  001D70  2BC4               	incf	(Loading@j+1)& (0+255),f,b
  4444  001D72                     l8314:
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;sort.c: 272: }
  4448                           ;sort.c: 274: if(!IR_signal){
  4449  001D72  0100               	movlb	0	; () banked
  4450  001D74  51E2               	movf	_IR_signal& (0+255),w,b
  4451  001D76  0100               	movlb	0	; () banked
  4452  001D78  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4453  001D7A  A4D8               	btfss	status,2,c
  4454  001D7C  D01B               	goto	l8326
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;sort.c: 275: _delay((unsigned long)((750)*(32000000/4000.0)));
  4458  001D7E  0E1F               	movlw	31
  4459  001D80  0100               	movlb	0	; () banked
  4460  001D82  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4461  001D84  0E71               	movlw	113
  4462  001D86  0100               	movlb	0	; () banked
  4463  001D88  6FB1               	movwf	??_Loading& (0+255),b
  4464  001D8A  0E1E               	movlw	30
  4465  001D8C                     u11137:
  4466  001D8C  2EE8               	decfsz	wreg,f,c
  4467  001D8E  D7FE               	bra	u11137
  4468  001D90  2FB1               	decfsz	??_Loading& (0+255),f,b
  4469  001D92  D7FC               	bra	u11137
  4470  001D94  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4471  001D96  D7FA               	bra	u11137
  4472  001D98  F000               	nop	
  4473                           
  4474                           ;sort.c: 276: readIR(0);
  4475  001D9A  0E00               	movlw	0
  4476  001D9C  0100               	movlb	0	; () banked
  4477  001D9E  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4478  001DA0  0E00               	movlw	0
  4479  001DA2  6F82               	movwf	readIR@ana_port& (0+255),b
  4480  001DA4  EC8A  F028         	call	_readIR	;wreg free
  4481                           
  4482                           ;sort.c: 277: if(IR_signal==1){
  4483  001DA8  0100               	movlb	0	; () banked
  4484  001DAA  05E2               	decf	_IR_signal& (0+255),w,b
  4485  001DAC  0100               	movlb	0	; () banked
  4486  001DAE  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4487  001DB0  A4D8               	btfss	status,2,c
  4488  001DB2  D006               	goto	l863
  4489  001DB4                     l8326:
  4490                           
  4491                           ; BSR set to: 0
  4492  001DB4  0100               	movlb	0	; () banked
  4493  001DB6  05E2               	decf	_IR_signal& (0+255),w,b
  4494  001DB8  0100               	movlb	0	; () banked
  4495  001DBA  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4496  001DBC  B4D8               	btfsc	status,2,c
  4497  001DBE  D6AC               	goto	l8232
  4498  001DC0                     l863:
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;sort.c: 282: }
  4502                           ;sort.c: 283: }
  4503                           ;sort.c: 284: }
  4504                           ;sort.c: 285: LATBbits.LATB2 = 0;
  4505  001DC0  948A               	bcf	3978,2,c	;volatile
  4506  001DC2                     l8328:
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;sort.c: 286: }
  4510                           ;sort.c: 287: f_can_coming_to_ID = 1;
  4511  001DC2  0E00               	movlw	0
  4512  001DC4  0101               	movlb	1	; () banked
  4513  001DC6  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4514  001DC8  0E01               	movlw	1
  4515  001DCA  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4516                           
  4517                           ; BSR set to: 1
  4518                           
  4519                           ; BSR set to: 1
  4520  001DCC  0012               	return	
  4521  001DCE                     __end_of_Loading:
  4522                           	opt stack 0
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           prodh	equ	0xFF4
  4528                           prodl	equ	0xFF3
  4529                           postinc0	equ	0xFEE
  4530                           wreg	equ	0xFE8
  4531                           postdec1	equ	0xFE5
  4532                           fsr1l	equ	0xFE1
  4533                           status	equ	0xFD8
  4534                           
  4535 ;; *************** function _initSortTimer *****************
  4536 ;; Defined at:
  4537 ;;		line 504 in file "sort.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  i               2    8[BANK0 ] int 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      void 
  4544 ;; Registers used:
  4545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        5 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:   10
  4558 ;; This function calls:
  4559 ;;		_getRTC
  4560 ;; This function is called by:
  4561 ;;		_Loading
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text3
  4566  004FC8                     __ptext3:
  4567                           	opt stack 0
  4568  004FC8                     _initSortTimer:
  4569                           	opt stack 18
  4570                           
  4571                           ;sort.c: 506: getRTC();
  4572                           
  4573                           ;incstack = 0
  4574  004FC8  EC1C  F029         	call	_getRTC	;wreg free
  4575                           
  4576                           ;sort.c: 507: for(int i = 0; i < 7; i++){
  4577  004FCC  0E00               	movlw	0
  4578  004FCE  0100               	movlb	0	; () banked
  4579  004FD0  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4580  004FD2  0E00               	movlw	0
  4581  004FD4  6F88               	movwf	initSortTimer@i& (0+255),b
  4582  004FD6                     l7606:
  4583                           
  4584                           ; BSR set to: 0
  4585  004FD6  0100               	movlb	0	; () banked
  4586  004FD8  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4587  004FDA  D008               	goto	l7610
  4588  004FDC  0100               	movlb	0	; () banked
  4589  004FDE  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4590  004FE0  E140               	bnz	l7616
  4591  004FE2  0E07               	movlw	7
  4592  004FE4  0100               	movlb	0	; () banked
  4593  004FE6  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4594  004FE8  B0D8               	btfsc	status,0,c
  4595  004FEA  D03B               	goto	l7616
  4596  004FEC                     l7610:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;sort.c: 508: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4600  004FEC  0E24               	movlw	low _time
  4601  004FEE  0100               	movlb	0	; () banked
  4602  004FF0  2588               	addwf	initSortTimer@i& (0+255),w,b
  4603  004FF2  6ED9               	movwf	fsr2l,c
  4604  004FF4  0E01               	movlw	high _time
  4605  004FF6  0100               	movlb	0	; () banked
  4606  004FF8  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4607  004FFA  6EDA               	movwf	fsr2h,c
  4608  004FFC  50DF               	movf	indf2,w,c
  4609  004FFE  0100               	movlb	0	; () banked
  4610  005000  6F85               	movwf	??_initSortTimer& (0+255),b
  4611  005002  0100               	movlb	0	; () banked
  4612  005004  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4613  005006  0E0F               	movlw	15
  4614  005008  1785               	andwf	??_initSortTimer& (0+255),f,b
  4615  00500A  0E0F               	movlw	15
  4616  00500C  0100               	movlb	0	; () banked
  4617  00500E  1785               	andwf	??_initSortTimer& (0+255),f,b
  4618  005010  0100               	movlb	0	; () banked
  4619  005012  5185               	movf	??_initSortTimer& (0+255),w,b
  4620  005014  0D0A               	mullw	10
  4621  005016  0E24               	movlw	low _time
  4622  005018  0100               	movlb	0	; () banked
  4623  00501A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4624  00501C  6ED9               	movwf	fsr2l,c
  4625  00501E  0E01               	movlw	high _time
  4626  005020  0100               	movlb	0	; () banked
  4627  005022  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4628  005024  6EDA               	movwf	fsr2h,c
  4629  005026  50DF               	movf	indf2,w,c
  4630  005028  0B0F               	andlw	15
  4631  00502A  0100               	movlb	0	; () banked
  4632  00502C  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4633  00502E  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4634  005030  50F3               	movf	prodl,w,c
  4635  005032  0100               	movlb	0	; () banked
  4636  005034  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4637  005036  50F4               	movf	prodh,w,c
  4638  005038  0100               	movlb	0	; () banked
  4639  00503A  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4640  00503C  90D8               	bcf	status,0,c
  4641  00503E  0100               	movlb	0	; () banked
  4642  005040  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4643  005042  6ED9               	movwf	fsr2l,c
  4644  005044  0100               	movlb	0	; () banked
  4645  005046  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4646  005048  6EDA               	movwf	fsr2h,c
  4647  00504A  0E0E               	movlw	low _startTime
  4648  00504C  26D9               	addwf	fsr2l,f,c
  4649  00504E  0E01               	movlw	high _startTime
  4650  005050  22DA               	addwfc	fsr2h,f,c
  4651  005052  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4652  005056  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4653                           
  4654                           ; BSR set to: 0
  4655  00505A  0100               	movlb	0	; () banked
  4656  00505C  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4657  00505E  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4658  005060  D7BA               	goto	l7606
  4659  005062                     l7616:
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;sort.c: 509: }
  4663                           ;sort.c: 511: T0CON = 0b00010111;
  4664  005062  0E17               	movlw	23
  4665  005064  6ED5               	movwf	4053,c	;volatile
  4666                           
  4667                           ;sort.c: 520: TMR0H = 0b10000101;
  4668  005066  0E85               	movlw	133
  4669  005068  6ED7               	movwf	4055,c	;volatile
  4670                           
  4671                           ;sort.c: 521: TMR0L = 0b11101110;
  4672  00506A  0EEE               	movlw	238
  4673  00506C  6ED6               	movwf	4054,c	;volatile
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;sort.c: 522: TMR0ON = 1;
  4677  00506E  8ED5               	bsf	4053,7,c	;volatile
  4678                           
  4679                           ; BSR set to: 0
  4680  005070  0012               	return		;funcret
  4681  005072                     __end_of_initSortTimer:
  4682                           	opt stack 0
  4683                           tblptru	equ	0xFF8
  4684                           tblptrh	equ	0xFF7
  4685                           tblptrl	equ	0xFF6
  4686                           tablat	equ	0xFF5
  4687                           prodh	equ	0xFF4
  4688                           prodl	equ	0xFF3
  4689                           postinc0	equ	0xFEE
  4690                           wreg	equ	0xFE8
  4691                           postdec1	equ	0xFE5
  4692                           fsr1l	equ	0xFE1
  4693                           indf2	equ	0xFDF
  4694                           postinc2	equ	0xFDE
  4695                           postdec2	equ	0xFDD
  4696                           fsr2h	equ	0xFDA
  4697                           fsr2l	equ	0xFD9
  4698                           status	equ	0xFD8
  4699                           
  4700 ;; *************** function _initGlobalVars *****************
  4701 ;; Defined at:
  4702 ;;		line 467 in file "sort.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  time_recent_    2    0[BANK0 ] int 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, status,2
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;Total ram usage:        2 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    7
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_Loading
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text4
  4731  004BEA                     __ptext4:
  4732                           	opt stack 0
  4733  004BEA                     _initGlobalVars:
  4734                           	opt stack 21
  4735                           
  4736                           ;sort.c: 469: first = 0;
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;incstack = 0
  4740  004BEA  0E00               	movlw	0
  4741  004BEC  0101               	movlb	1	; () banked
  4742  004BEE  6F3A               	movwf	(_first+1)& (0+255),b
  4743  004BF0  0E00               	movlw	0
  4744  004BF2  6F39               	movwf	_first& (0+255),b
  4745                           
  4746                           ;sort.c: 472: f_loadingNewCan = 0;
  4747  004BF4  0E00               	movlw	0
  4748  004BF6  0100               	movlb	0	; () banked
  4749  004BF8  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4750  004BFA  0E00               	movlw	0
  4751  004BFC  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4752                           
  4753                           ;sort.c: 473: f_lastCan = 0;
  4754  004BFE  0E00               	movlw	0
  4755  004C00  0100               	movlb	0	; () banked
  4756  004C02  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  4757  004C04  0E00               	movlw	0
  4758  004C06  6FEC               	movwf	_f_lastCan& (0+255),b
  4759                           
  4760                           ;sort.c: 474: f_ID_receive = 1;
  4761  004C08  0E00               	movlw	0
  4762  004C0A  0101               	movlb	1	; () banked
  4763  004C0C  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4764  004C0E  0E01               	movlw	1
  4765  004C10  6F2F               	movwf	_f_ID_receive& (0+255),b
  4766                           
  4767                           ;sort.c: 475: f_can_coming_to_ID = 0;
  4768  004C12  0E00               	movlw	0
  4769  004C14  0101               	movlb	1	; () banked
  4770  004C16  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4771  004C18  0E00               	movlw	0
  4772  004C1A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4773                           
  4774                           ;sort.c: 476: f_can_coming_to_distribution = 0;
  4775  004C1C  0E00               	movlw	0
  4776  004C1E  0101               	movlb	1	; () banked
  4777  004C20  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4778  004C22  0E00               	movlw	0
  4779  004C24  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4780                           
  4781                           ;sort.c: 477: f_can_distributed = 1;
  4782  004C26  0E00               	movlw	0
  4783  004C28  0101               	movlb	1	; () banked
  4784  004C2A  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4785  004C2C  0E01               	movlw	1
  4786  004C2E  6F35               	movwf	_f_can_distributed& (0+255),b
  4787                           
  4788                           ;sort.c: 478: f_most_recent_sort_time = 0;
  4789  004C30  0E00               	movlw	0
  4790  004C32  0101               	movlb	1	; () banked
  4791  004C34  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4792  004C36  0E00               	movlw	0
  4793  004C38  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4794                           
  4795                           ;sort.c: 481: count_total = 0;
  4796  004C3A  0E00               	movlw	0
  4797  004C3C  0100               	movlb	0	; () banked
  4798  004C3E  6FFF               	movwf	(_count_total+1)& (0+255),b
  4799  004C40  0E00               	movlw	0
  4800  004C42  6FFE               	movwf	_count_total& (0+255),b
  4801                           
  4802                           ;sort.c: 482: count_pop_no_tab = 0;
  4803  004C44  0E00               	movlw	0
  4804  004C46  6E62               	movwf	_count_pop_no_tab+1,c
  4805  004C48  0E00               	movlw	0
  4806  004C4A  6E61               	movwf	_count_pop_no_tab,c
  4807                           
  4808                           ;sort.c: 483: count_pop_w_tab = 0;
  4809  004C4C  0E00               	movlw	0
  4810  004C4E  6E64               	movwf	_count_pop_w_tab+1,c
  4811  004C50  0E00               	movlw	0
  4812  004C52  6E63               	movwf	_count_pop_w_tab,c
  4813                           
  4814                           ;sort.c: 484: count_can_w_lab = 0;
  4815  004C54  0E00               	movlw	0
  4816  004C56  6E60               	movwf	_count_can_w_lab+1,c
  4817  004C58  0E00               	movlw	0
  4818  004C5A  6E5F               	movwf	_count_can_w_lab,c
  4819                           
  4820                           ;sort.c: 485: count_can_no_lab = 0;
  4821  004C5C  0E00               	movlw	0
  4822  004C5E  6E5E               	movwf	_count_can_no_lab+1,c
  4823  004C60  0E00               	movlw	0
  4824  004C62  6E5D               	movwf	_count_can_no_lab,c
  4825                           
  4826                           ;sort.c: 488: most_recent_sort_time = 999;
  4827  004C64  0E03               	movlw	3
  4828  004C66  0101               	movlb	1	; () banked
  4829  004C68  6F48               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4830  004C6A  0EE7               	movlw	231
  4831  004C6C  6F47               	movwf	_most_recent_sort_time& (0+255),b
  4832                           
  4833                           ;sort.c: 489: int time_recent_agitator = 0;
  4834  004C6E  0E00               	movlw	0
  4835  004C70  0100               	movlb	0	; () banked
  4836  004C72  6F81               	movwf	(initGlobalVars@time_recent_agitator+1)& (0+255),b
  4837  004C74  0E00               	movlw	0
  4838  004C76  6F80               	movwf	initGlobalVars@time_recent_agitator& (0+255),b
  4839                           
  4840                           ;sort.c: 492: motor_toggle_count = 0;
  4841  004C78  0E00               	movlw	0
  4842  004C7A  0101               	movlb	1	; () banked
  4843  004C7C  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
  4844  004C7E  0E00               	movlw	0
  4845  004C80  6F49               	movwf	_motor_toggle_count& (0+255),b
  4846                           
  4847                           ;sort.c: 493: agitator_toggle_count = 0;
  4848  004C82  0E00               	movlw	0
  4849  004C84  6E5A               	movwf	_agitator_toggle_count+1,c
  4850  004C86  0E00               	movlw	0
  4851  004C88  6E59               	movwf	_agitator_toggle_count,c
  4852                           
  4853                           ;sort.c: 496: servo_timer_counter = 0;
  4854  004C8A  0E00               	movlw	0
  4855  004C8C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4856  004C8E  0E00               	movlw	0
  4857  004C90  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4858                           
  4859                           ;sort.c: 497: servo_timer_target = 9999;
  4860  004C92  0E27               	movlw	39
  4861  004C94  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4862  004C96  0E0F               	movlw	15
  4863  004C98  6E6F               	movwf	_servo_timer_target,c	;volatile
  4864                           
  4865                           ;sort.c: 498: timer2_counter = 0;
  4866  004C9A  0E00               	movlw	0
  4867  004C9C  6E74               	movwf	_timer2_counter+1,c	;volatile
  4868  004C9E  0E00               	movlw	0
  4869  004CA0  6E73               	movwf	_timer2_counter,c	;volatile
  4870                           
  4871                           ;sort.c: 499: f_arm_position = 0;
  4872  004CA2  0E00               	movlw	0
  4873  004CA4  0100               	movlb	0	; () banked
  4874  004CA6  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4875  004CA8  0E00               	movlw	0
  4876  004CAA  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;sort.c: 500: pan_servo_state = -1;
  4880  004CAC  686B               	setf	_pan_servo_state,c	;volatile
  4881  004CAE  686C               	setf	_pan_servo_state+1,c	;volatile
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;sort.c: 501: tilt_servo_state = -1;
  4885  004CB0  6871               	setf	_tilt_servo_state,c	;volatile
  4886  004CB2  6872               	setf	_tilt_servo_state+1,c	;volatile
  4887                           
  4888                           ;sort.c: 502: f_panning_to_bin = 0;
  4889  004CB4  0E00               	movlw	0
  4890  004CB6  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4891  004CB8  0E00               	movlw	0
  4892  004CBA  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4893                           
  4894                           ; BSR set to: 0
  4895  004CBC  0012               	return		;funcret
  4896  004CBE                     __end_of_initGlobalVars:
  4897                           	opt stack 0
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           prodh	equ	0xFF4
  4903                           prodl	equ	0xFF3
  4904                           postinc0	equ	0xFEE
  4905                           wreg	equ	0xFE8
  4906                           postdec1	equ	0xFE5
  4907                           fsr1l	equ	0xFE1
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           fsr2h	equ	0xFDA
  4912                           fsr2l	equ	0xFD9
  4913                           status	equ	0xFD8
  4914                           
  4915 ;; *************** function _getMAG *****************
  4916 ;; Defined at:
  4917 ;;		line 647 in file "sort.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;		None
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  1    wreg      void 
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;Total ram usage:        2 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    9
  4938 ;; This function calls:
  4939 ;;		_readMAG
  4940 ;; This function is called by:
  4941 ;;		_Loading
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text5
  4946  005C20                     __ptext5:
  4947                           	opt stack 0
  4948  005C20                     _getMAG:
  4949                           	opt stack 19
  4950                           
  4951                           ;sort.c: 648: readMAG();
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;incstack = 0
  4955  005C20  ECE0  F02C         	call	_readMAG	;wreg free
  4956                           
  4957                           ;sort.c: 649: if(MAG_signal){
  4958  005C24  0100               	movlb	0	; () banked
  4959  005C26  51E4               	movf	_MAG_signal& (0+255),w,b
  4960  005C28  0100               	movlb	0	; () banked
  4961  005C2A  11E5               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4962  005C2C  B4D8               	btfsc	status,2,c
  4963  005C2E  0012               	return	
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;sort.c: 650: _delay((unsigned long)((100)*(32000000/4000.0)));
  4967  005C30  0E05               	movlw	5
  4968  005C32  0100               	movlb	0	; () banked
  4969  005C34  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4970  005C36  0E0F               	movlw	15
  4971  005C38  0100               	movlb	0	; () banked
  4972  005C3A  6F86               	movwf	??_getMAG& (0+255),b
  4973  005C3C  0EF1               	movlw	241
  4974  005C3E                     u11147:
  4975  005C3E  2EE8               	decfsz	wreg,f,c
  4976  005C40  D7FE               	bra	u11147
  4977  005C42  2F86               	decfsz	??_getMAG& (0+255),f,b
  4978  005C44  D7FC               	bra	u11147
  4979  005C46  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4980  005C48  D7FA               	bra	u11147
  4981                           
  4982                           ;sort.c: 651: readMAG();
  4983  005C4A  ECE0  F02C         	call	_readMAG	;wreg free
  4984  005C4E  0012               	return	
  4985  005C50                     __end_of_getMAG:
  4986                           	opt stack 0
  4987                           tblptru	equ	0xFF8
  4988                           tblptrh	equ	0xFF7
  4989                           tblptrl	equ	0xFF6
  4990                           tablat	equ	0xFF5
  4991                           prodh	equ	0xFF4
  4992                           prodl	equ	0xFF3
  4993                           postinc0	equ	0xFEE
  4994                           wreg	equ	0xFE8
  4995                           postdec1	equ	0xFE5
  4996                           fsr1l	equ	0xFE1
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           postdec2	equ	0xFDD
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _getIR *****************
  5005 ;; Defined at:
  5006 ;;		line 631 in file "sort.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  port            2    6[BANK0 ] int 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  i               2    9[BANK0 ] int 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, status,2, status,0, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5020 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;Total ram usage:        5 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    9
  5027 ;; This function calls:
  5028 ;;		_readIR
  5029 ;; This function is called by:
  5030 ;;		_Loading
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text6
  5035  0053C8                     __ptext6:
  5036                           	opt stack 0
  5037  0053C8                     _getIR:
  5038                           	opt stack 19
  5039                           
  5040                           ;sort.c: 632: readIR(port);
  5041                           
  5042                           ;incstack = 0
  5043  0053C8  C086  F082         	movff	getIR@port,readIR@ana_port
  5044  0053CC  C087  F083         	movff	getIR@port+1,readIR@ana_port+1
  5045  0053D0  EC8A  F028         	call	_readIR	;wreg free
  5046                           
  5047                           ;sort.c: 633: for(int i = 0; i < 150; i++){
  5048  0053D4  0E00               	movlw	0
  5049  0053D6  0100               	movlb	0	; () banked
  5050  0053D8  6F8A               	movwf	(getIR@i+1)& (0+255),b
  5051  0053DA  0E00               	movlw	0
  5052  0053DC  6F89               	movwf	getIR@i& (0+255),b
  5053  0053DE                     l7706:
  5054                           
  5055                           ; BSR set to: 0
  5056  0053DE  0100               	movlb	0	; () banked
  5057  0053E0  BF8A               	btfsc	(getIR@i+1)& (0+255),7,b
  5058  0053E2  D008               	goto	l7710
  5059  0053E4  0100               	movlb	0	; () banked
  5060  0053E6  518A               	movf	(getIR@i+1)& (0+255),w,b
  5061  0053E8  E11E               	bnz	l7722
  5062  0053EA  0E96               	movlw	150
  5063  0053EC  0100               	movlb	0	; () banked
  5064  0053EE  5D89               	subwf	getIR@i& (0+255),w,b
  5065  0053F0  B0D8               	btfsc	status,0,c
  5066  0053F2  D019               	goto	l7722
  5067  0053F4                     l7710:
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;sort.c: 634: _delay((unsigned long)((500)*(32000000/4000000.0)));
  5071  0053F4  0E06               	movlw	6
  5072  0053F6  0100               	movlb	0	; () banked
  5073  0053F8  6F88               	movwf	??_getIR& (0+255),b
  5074  0053FA  0E30               	movlw	48
  5075  0053FC                     u11157:
  5076  0053FC  2EE8               	decfsz	wreg,f,c
  5077  0053FE  D7FE               	bra	u11157
  5078  005400  2F88               	decfsz	??_getIR& (0+255),f,b
  5079  005402  D7FC               	bra	u11157
  5080  005404  F000               	nop	
  5081                           
  5082                           ;sort.c: 635: readIR(port);
  5083  005406  C086  F082         	movff	getIR@port,readIR@ana_port
  5084  00540A  C087  F083         	movff	getIR@port+1,readIR@ana_port+1
  5085  00540E  EC8A  F028         	call	_readIR	;wreg free
  5086                           
  5087                           ;sort.c: 636: if(!IR_signal){
  5088  005412  0100               	movlb	0	; () banked
  5089  005414  51E2               	movf	_IR_signal& (0+255),w,b
  5090  005416  0100               	movlb	0	; () banked
  5091  005418  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5092  00541A  B4D8               	btfsc	status,2,c
  5093  00541C  D004               	goto	l7722
  5094                           
  5095                           ; BSR set to: 0
  5096                           
  5097                           ; BSR set to: 0
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;sort.c: 637: break;
  5101  00541E  0100               	movlb	0	; () banked
  5102  005420  4B89               	infsnz	getIR@i& (0+255),f,b
  5103  005422  2B8A               	incf	(getIR@i+1)& (0+255),f,b
  5104  005424  D7DC               	goto	l7706
  5105  005426                     l7722:
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;sort.c: 638: }
  5109                           ;sort.c: 639: }
  5110                           ;sort.c: 640: if(IR_signal==1){
  5111  005426  0100               	movlb	0	; () banked
  5112  005428  05E2               	decf	_IR_signal& (0+255),w,b
  5113  00542A  0100               	movlb	0	; () banked
  5114  00542C  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5115  00542E  A4D8               	btfss	status,2,c
  5116  005430  D006               	goto	l7726
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;sort.c: 641: f_loadingNewCan = 1;
  5120  005432  0E00               	movlw	0
  5121  005434  0100               	movlb	0	; () banked
  5122  005436  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5123  005438  0E01               	movlw	1
  5124  00543A  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5125                           
  5126                           ;sort.c: 642: }
  5127  00543C  0012               	return	
  5128  00543E                     l7726:
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;sort.c: 643: else{
  5132                           ;sort.c: 644: f_loadingNewCan = 0;
  5133  00543E  0E00               	movlw	0
  5134  005440  0100               	movlb	0	; () banked
  5135  005442  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5136  005444  0E00               	movlw	0
  5137  005446  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5138  005448  0012               	return	
  5139  00544A                     __end_of_getIR:
  5140                           	opt stack 0
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           postinc0	equ	0xFEE
  5148                           wreg	equ	0xFE8
  5149                           postdec1	equ	0xFE5
  5150                           fsr1l	equ	0xFE1
  5151                           indf2	equ	0xFDF
  5152                           postinc2	equ	0xFDE
  5153                           postdec2	equ	0xFDD
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _ID *****************
  5159 ;; Defined at:
  5160 ;;		line 291 in file "sort.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  i               2   45[BANK0 ] int 
  5165 ;;  i               2   58[BANK0 ] int 
  5166 ;;  j               2   60[BANK0 ] int 
  5167 ;;  i               2   43[BANK0 ] int 
  5168 ;;  i               2   41[BANK0 ] int 
  5169 ;;  i               2   47[BANK0 ] int 
  5170 ;;  res             4   54[BANK0 ] int [2]
  5171 ;;  time            1   35[BANK0 ] const unsigned char 
  5172 ;;  res2            2   52[BANK0 ] int 
  5173 ;;  res1            2   50[BANK0 ] int 
  5174 ;;  time            1   49[BANK0 ] const unsigned char 
  5175 ;;  n               2   62[BANK0 ] const int 
  5176 ;;  reflectivity    2   33[BANK0 ] int 
  5177 ;;  cond1           2   31[BANK0 ] int 
  5178 ;;  reflectivity    2   29[BANK0 ] int 
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  1    wreg      void 
  5181 ;; Registers used:
  5182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Locals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;Total ram usage:       37 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    9
  5195 ;; This function calls:
  5196 ;;		___awdiv
  5197 ;;		___awtoft
  5198 ;;		___ftge
  5199 ;;		_delay_ms
  5200 ;;		_readCOND
  5201 ;;		_readIR
  5202 ;; This function is called by:
  5203 ;;		_sort
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text7
  5208  001192                     __ptext7:
  5209                           	opt stack 0
  5210  001192                     _ID:
  5211                           	opt stack 20
  5212                           
  5213                           ;sort.c: 292: if(f_can_coming_to_ID){
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;incstack = 0
  5217  001192  0101               	movlb	1	; () banked
  5218  001194  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5219  001196  0101               	movlb	1	; () banked
  5220  001198  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5221  00119A  B4D8               	btfsc	status,2,c
  5222  00119C  0012               	return	
  5223                           
  5224                           ; BSR set to: 1
  5225                           ;sort.c: 294: _delay((unsigned long)((750)*(32000000/4000.0)));
  5226  00119E  0E1F               	movlw	31
  5227  0011A0  0100               	movlb	0	; () banked
  5228  0011A2  6F9C               	movwf	(??_ID+1)& (0+255),b
  5229  0011A4  0E71               	movlw	113
  5230  0011A6  0100               	movlb	0	; () banked
  5231  0011A8  6F9B               	movwf	??_ID& (0+255),b
  5232  0011AA  0E1E               	movlw	30
  5233  0011AC                     u11167:
  5234  0011AC  2EE8               	decfsz	wreg,f,c
  5235  0011AE  D7FE               	bra	u11167
  5236  0011B0  2F9B               	decfsz	??_ID& (0+255),f,b
  5237  0011B2  D7FC               	bra	u11167
  5238  0011B4  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5239  0011B6  D7FA               	bra	u11167
  5240  0011B8  F000               	nop	
  5241                           
  5242                           ;sort.c: 296: f_arm_position = 0;
  5243  0011BA  0E00               	movlw	0
  5244  0011BC  0100               	movlb	0	; () banked
  5245  0011BE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5246  0011C0  0E00               	movlw	0
  5247  0011C2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;sort.c: 298: if(sensor_outputs[0]){
  5251  0011C4  0100               	movlb	0	; () banked
  5252  0011C6  51DA               	movf	_sensor_outputs& (0+255),w,b
  5253  0011C8  0100               	movlb	0	; () banked
  5254  0011CA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5255  0011CC  B4D8               	btfsc	status,2,c
  5256  0011CE  D031               	goto	l8362
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;sort.c: 300: readIR(3);
  5260  0011D0  0E00               	movlw	0
  5261  0011D2  0100               	movlb	0	; () banked
  5262  0011D4  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5263  0011D6  0E03               	movlw	3
  5264  0011D8  6F82               	movwf	readIR@ana_port& (0+255),b
  5265  0011DA  EC8A  F028         	call	_readIR	;wreg free
  5266                           
  5267                           ;sort.c: 301: sensor_outputs[1] = IR_signal;
  5268  0011DE  C0E2  F0DC         	movff	_IR_signal,_sensor_outputs+2
  5269  0011E2  C0E3  F0DD         	movff	_IR_signal+1,_sensor_outputs+3
  5270                           
  5271                           ;sort.c: 302: _delay((unsigned long)((10)*(32000000/4000.0)));
  5272  0011E6  0E68               	movlw	104
  5273  0011E8  0100               	movlb	0	; () banked
  5274  0011EA  6F9B               	movwf	??_ID& (0+255),b
  5275  0011EC  0EE4               	movlw	228
  5276  0011EE                     u11177:
  5277  0011EE  2EE8               	decfsz	wreg,f,c
  5278  0011F0  D7FE               	bra	u11177
  5279  0011F2  2F9B               	decfsz	??_ID& (0+255),f,b
  5280  0011F4  D7FC               	bra	u11177
  5281  0011F6  F000               	nop	
  5282                           
  5283                           ;sort.c: 303: readIR(3);
  5284  0011F8  0E00               	movlw	0
  5285  0011FA  0100               	movlb	0	; () banked
  5286  0011FC  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5287  0011FE  0E03               	movlw	3
  5288  001200  6F82               	movwf	readIR@ana_port& (0+255),b
  5289  001202  EC8A  F028         	call	_readIR	;wreg free
  5290                           
  5291                           ;sort.c: 304: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5292  001206  0E01               	movlw	1
  5293  001208  0100               	movlb	0	; () banked
  5294  00120A  6FA4               	movwf	_ID$1144& (0+255),b
  5295                           
  5296                           ; BSR set to: 0
  5297  00120C  0100               	movlb	0	; () banked
  5298  00120E  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5299  001210  0100               	movlb	0	; () banked
  5300  001212  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5301  001214  A4D8               	btfss	status,2,c
  5302  001216  D009               	goto	l8360
  5303                           
  5304                           ; BSR set to: 0
  5305  001218  0100               	movlb	0	; () banked
  5306  00121A  51E2               	movf	_IR_signal& (0+255),w,b
  5307  00121C  0100               	movlb	0	; () banked
  5308  00121E  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5309  001220  A4D8               	btfss	status,2,c
  5310  001222  D003               	goto	l8360
  5311                           
  5312                           ; BSR set to: 0
  5313  001224  0E00               	movlw	0
  5314  001226  0100               	movlb	0	; () banked
  5315  001228  6FA4               	movwf	_ID$1144& (0+255),b
  5316  00122A                     l8360:
  5317                           
  5318                           ; BSR set to: 0
  5319  00122A  C0A4  F0DC         	movff	_ID$1144,_sensor_outputs+2
  5320  00122E  0100               	movlb	0	; () banked
  5321  001230  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5322  001232                     l8362:
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;sort.c: 305: }
  5326                           ;sort.c: 306: int reflectivity1 = IR_res;
  5327  001232  C0E0  F09D         	movff	_IR_res,ID@reflectivity1
  5328  001236  C0E1  F09E         	movff	_IR_res+1,ID@reflectivity1+1
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;sort.c: 308: LATCbits.LATC7 = 1;
  5332  00123A  8E8B               	bsf	3979,7,c	;volatile
  5333                           
  5334                           ;sort.c: 311: const int n = 10;
  5335  00123C  0E00               	movlw	0
  5336  00123E  0100               	movlb	0	; () banked
  5337  001240  6FBF               	movwf	(ID@n+1)& (0+255),b
  5338  001242  0E0A               	movlw	10
  5339  001244  6FBE               	movwf	ID@n& (0+255),b
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;sort.c: 313: if(!sensor_outputs[0]){
  5343  001246  0100               	movlb	0	; () banked
  5344  001248  51DA               	movf	_sensor_outputs& (0+255),w,b
  5345  00124A  0100               	movlb	0	; () banked
  5346  00124C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5347  00124E  A4D8               	btfss	status,2,c
  5348  001250  D0E3               	goto	l8418
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;sort.c: 314: const unsigned char time = (600 / n);
  5352  001252  0E02               	movlw	2
  5353  001254  0100               	movlb	0	; () banked
  5354  001256  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5355  001258  0E58               	movlw	88
  5356  00125A  6F86               	movwf	___awdiv@dividend& (0+255),b
  5357  00125C  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5358  001260  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5359  001264  EC27  F027         	call	___awdiv	;wreg free
  5360  001268  0100               	movlb	0	; () banked
  5361  00126A  5186               	movf	?___awdiv& (0+255),w,b
  5362  00126C  0100               	movlb	0	; () banked
  5363  00126E  6FB1               	movwf	ID@time& (0+255),b
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;sort.c: 315: int res1 = 0;
  5367  001270  0E00               	movlw	0
  5368  001272  0100               	movlb	0	; () banked
  5369  001274  6FB3               	movwf	(ID@res1+1)& (0+255),b
  5370  001276  0E00               	movlw	0
  5371  001278  6FB2               	movwf	ID@res1& (0+255),b
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;sort.c: 316: int res2 = 0;
  5375  00127A  0E00               	movlw	0
  5376  00127C  0100               	movlb	0	; () banked
  5377  00127E  6FB5               	movwf	(ID@res2+1)& (0+255),b
  5378  001280  0E00               	movlw	0
  5379  001282  6FB4               	movwf	ID@res2& (0+255),b
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;sort.c: 317: for(int i = 0; i<n; i++){
  5383  001284  0E00               	movlw	0
  5384  001286  0100               	movlb	0	; () banked
  5385  001288  6FAA               	movwf	(ID@i+1)& (0+255),b
  5386  00128A  0E00               	movlw	0
  5387  00128C  6FA9               	movwf	ID@i& (0+255),b
  5388  00128E                     l8376:
  5389                           
  5390                           ; BSR set to: 0
  5391  00128E  0100               	movlb	0	; () banked
  5392  001290  51BE               	movf	ID@n& (0+255),w,b
  5393  001292  0100               	movlb	0	; () banked
  5394  001294  5DA9               	subwf	ID@i& (0+255),w,b
  5395  001296  0100               	movlb	0	; () banked
  5396  001298  51AA               	movf	(ID@i+1)& (0+255),w,b
  5397  00129A  0A80               	xorlw	128
  5398  00129C  0100               	movlb	0	; () banked
  5399  00129E  6F9B               	movwf	??_ID& (0+255),b
  5400  0012A0  0100               	movlb	0	; () banked
  5401  0012A2  51BF               	movf	(ID@n+1)& (0+255),w,b
  5402  0012A4  0A80               	xorlw	128
  5403  0012A6  0100               	movlb	0	; () banked
  5404  0012A8  599B               	subwfb	??_ID& (0+255),w,b
  5405  0012AA  B0D8               	btfsc	status,0,c
  5406  0012AC  D012               	goto	l872
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;sort.c: 318: delay_ms(time);
  5410                           
  5411                           ; BSR set to: 0
  5412                           
  5413                           ; BSR set to: 0
  5414  0012AE  0100               	movlb	0	; () banked
  5415  0012B0  51B1               	movf	ID@time& (0+255),w,b
  5416  0012B2  EC87  F02F         	call	_delay_ms
  5417                           
  5418                           ;sort.c: 319: readCOND();
  5419  0012B6  ECBA  F02C         	call	_readCOND	;wreg free
  5420                           
  5421                           ;sort.c: 320: res1 += COND_signal;
  5422  0012BA  0100               	movlb	0	; () banked
  5423  0012BC  51DE               	movf	_COND_signal& (0+255),w,b
  5424  0012BE  0100               	movlb	0	; () banked
  5425  0012C0  27B2               	addwf	ID@res1& (0+255),f,b
  5426  0012C2  0100               	movlb	0	; () banked
  5427  0012C4  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5428  0012C6  0100               	movlb	0	; () banked
  5429  0012C8  23B3               	addwfc	(ID@res1+1)& (0+255),f,b
  5430                           
  5431                           ; BSR set to: 0
  5432  0012CA  0100               	movlb	0	; () banked
  5433  0012CC  4BA9               	infsnz	ID@i& (0+255),f,b
  5434  0012CE  2BAA               	incf	(ID@i+1)& (0+255),f,b
  5435  0012D0  D7DE               	goto	l8376
  5436  0012D2                     l872:
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;sort.c: 321: }
  5440                           ;sort.c: 322: LATCbits.LATC7 = 0;
  5441  0012D2  9E8B               	bcf	3979,7,c	;volatile
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;sort.c: 323: _delay((unsigned long)((200)*(32000000/4000.0)));
  5445  0012D4  0E09               	movlw	9
  5446  0012D6  0100               	movlb	0	; () banked
  5447  0012D8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5448  0012DA  0E1E               	movlw	30
  5449  0012DC  0100               	movlb	0	; () banked
  5450  0012DE  6F9B               	movwf	??_ID& (0+255),b
  5451  0012E0  0EE4               	movlw	228
  5452  0012E2                     u11187:
  5453  0012E2  2EE8               	decfsz	wreg,f,c
  5454  0012E4  D7FE               	bra	u11187
  5455  0012E6  2F9B               	decfsz	??_ID& (0+255),f,b
  5456  0012E8  D7FC               	bra	u11187
  5457  0012EA  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5458  0012EC  D7FA               	bra	u11187
  5459  0012EE  F000               	nop	
  5460                           
  5461                           ;sort.c: 324: LATCbits.LATC7 = 1;
  5462  0012F0  8E8B               	bsf	3979,7,c	;volatile
  5463                           
  5464                           ;sort.c: 325: for(int i = 0; i<n; i++){
  5465  0012F2  0E00               	movlw	0
  5466  0012F4  0100               	movlb	0	; () banked
  5467  0012F6  6FAC               	movwf	(ID@i_1152+1)& (0+255),b
  5468  0012F8  0E00               	movlw	0
  5469  0012FA  6FAB               	movwf	ID@i_1152& (0+255),b
  5470  0012FC                     l8394:
  5471                           
  5472                           ; BSR set to: 0
  5473  0012FC  0100               	movlb	0	; () banked
  5474  0012FE  51BE               	movf	ID@n& (0+255),w,b
  5475  001300  0100               	movlb	0	; () banked
  5476  001302  5DAB               	subwf	ID@i_1152& (0+255),w,b
  5477  001304  0100               	movlb	0	; () banked
  5478  001306  51AC               	movf	(ID@i_1152+1)& (0+255),w,b
  5479  001308  0A80               	xorlw	128
  5480  00130A  0100               	movlb	0	; () banked
  5481  00130C  6F9B               	movwf	??_ID& (0+255),b
  5482  00130E  0100               	movlb	0	; () banked
  5483  001310  51BF               	movf	(ID@n+1)& (0+255),w,b
  5484  001312  0A80               	xorlw	128
  5485  001314  0100               	movlb	0	; () banked
  5486  001316  599B               	subwfb	??_ID& (0+255),w,b
  5487  001318  B0D8               	btfsc	status,0,c
  5488  00131A  D012               	goto	l874
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;sort.c: 326: delay_ms(time);
  5492                           
  5493                           ; BSR set to: 0
  5494                           
  5495                           ; BSR set to: 0
  5496  00131C  0100               	movlb	0	; () banked
  5497  00131E  51B1               	movf	ID@time& (0+255),w,b
  5498  001320  EC87  F02F         	call	_delay_ms
  5499                           
  5500                           ;sort.c: 327: readCOND();
  5501  001324  ECBA  F02C         	call	_readCOND	;wreg free
  5502                           
  5503                           ;sort.c: 328: res2 += COND_signal;
  5504  001328  0100               	movlb	0	; () banked
  5505  00132A  51DE               	movf	_COND_signal& (0+255),w,b
  5506  00132C  0100               	movlb	0	; () banked
  5507  00132E  27B4               	addwf	ID@res2& (0+255),f,b
  5508  001330  0100               	movlb	0	; () banked
  5509  001332  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5510  001334  0100               	movlb	0	; () banked
  5511  001336  23B5               	addwfc	(ID@res2+1)& (0+255),f,b
  5512                           
  5513                           ; BSR set to: 0
  5514  001338  0100               	movlb	0	; () banked
  5515  00133A  4BAB               	infsnz	ID@i_1152& (0+255),f,b
  5516  00133C  2BAC               	incf	(ID@i_1152+1)& (0+255),f,b
  5517  00133E  D7DE               	goto	l8394
  5518  001340                     l874:
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;sort.c: 329: }
  5522                           ;sort.c: 330: LATCbits.LATC7 = 0;
  5523  001340  9E8B               	bcf	3979,7,c	;volatile
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;sort.c: 331: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5527  001342  0E9A               	movlw	154
  5528  001344  0100               	movlb	0	; () banked
  5529  001346  6F92               	movwf	___ftge@ff1& (0+255),b
  5530  001348  0E99               	movlw	153
  5531  00134A  0100               	movlb	0	; () banked
  5532  00134C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5533  00134E  0E3E               	movlw	62
  5534  001350  0100               	movlb	0	; () banked
  5535  001352  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5536  001354  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5537  001358  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5538  00135C  C0B2  F086         	movff	ID@res1,___awdiv@dividend
  5539  001360  C0B3  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5540  001364  EC27  F027         	call	___awdiv	;wreg free
  5541  001368  C086  F08E         	movff	?___awdiv,___awtoft@c
  5542  00136C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5543  001370  EC29  F02D         	call	___awtoft	;wreg free
  5544  001374  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5545  001378  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5546  00137C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5547  001380  ECC3  F026         	call	___ftge	;wreg free
  5548  001384  0100               	movlb	0	; () banked
  5549  001386  B0D8               	btfsc	status,0,c
  5550  001388  D002               	goto	u7470
  5551  00138A  0E01               	movlw	1
  5552  00138C  D001               	goto	u7480
  5553  00138E                     u7470:
  5554  00138E  0E00               	movlw	0
  5555  001390                     u7480:
  5556  001390  0100               	movlb	0	; () banked
  5557  001392  6FB2               	movwf	ID@res1& (0+255),b
  5558  001394  6BB3               	clrf	(ID@res1+1)& (0+255),b
  5559                           
  5560                           ;sort.c: 332: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5561  001396  0E9A               	movlw	154
  5562  001398  0100               	movlb	0	; () banked
  5563  00139A  6F92               	movwf	___ftge@ff1& (0+255),b
  5564  00139C  0E99               	movlw	153
  5565  00139E  0100               	movlb	0	; () banked
  5566  0013A0  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5567  0013A2  0E3E               	movlw	62
  5568  0013A4  0100               	movlb	0	; () banked
  5569  0013A6  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5570  0013A8  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5571  0013AC  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5572  0013B0  C0B4  F086         	movff	ID@res2,___awdiv@dividend
  5573  0013B4  C0B5  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5574  0013B8  EC27  F027         	call	___awdiv	;wreg free
  5575  0013BC  C086  F08E         	movff	?___awdiv,___awtoft@c
  5576  0013C0  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5577  0013C4  EC29  F02D         	call	___awtoft	;wreg free
  5578  0013C8  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5579  0013CC  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5580  0013D0  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5581  0013D4  ECC3  F026         	call	___ftge	;wreg free
  5582  0013D8  0100               	movlb	0	; () banked
  5583  0013DA  B0D8               	btfsc	status,0,c
  5584  0013DC  D002               	goto	u7490
  5585  0013DE  0E01               	movlw	1
  5586  0013E0  D001               	goto	u7500
  5587  0013E2                     u7490:
  5588  0013E2  0E00               	movlw	0
  5589  0013E4                     u7500:
  5590  0013E4  0100               	movlb	0	; () banked
  5591  0013E6  6FB4               	movwf	ID@res2& (0+255),b
  5592  0013E8  6BB5               	clrf	(ID@res2+1)& (0+255),b
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;sort.c: 335: sensor_outputs[1] = (res1 || res2);
  5596  0013EA  0E01               	movlw	1
  5597  0013EC  0100               	movlb	0	; () banked
  5598  0013EE  6FA5               	movwf	_ID$1153& (0+255),b
  5599                           
  5600                           ; BSR set to: 0
  5601  0013F0  0100               	movlb	0	; () banked
  5602  0013F2  51B2               	movf	ID@res1& (0+255),w,b
  5603  0013F4  0100               	movlb	0	; () banked
  5604  0013F6  11B3               	iorwf	(ID@res1+1)& (0+255),w,b
  5605  0013F8  A4D8               	btfss	status,2,c
  5606  0013FA  D009               	goto	l8416
  5607                           
  5608                           ; BSR set to: 0
  5609  0013FC  0100               	movlb	0	; () banked
  5610  0013FE  51B4               	movf	ID@res2& (0+255),w,b
  5611  001400  0100               	movlb	0	; () banked
  5612  001402  11B5               	iorwf	(ID@res2+1)& (0+255),w,b
  5613  001404  A4D8               	btfss	status,2,c
  5614  001406  D003               	goto	l8416
  5615                           
  5616                           ; BSR set to: 0
  5617  001408  0E00               	movlw	0
  5618  00140A  0100               	movlb	0	; () banked
  5619  00140C  6FA5               	movwf	_ID$1153& (0+255),b
  5620  00140E                     l8416:
  5621                           
  5622                           ; BSR set to: 0
  5623  00140E  C0A5  F0DC         	movff	_ID$1153,_sensor_outputs+2
  5624  001412  0100               	movlb	0	; () banked
  5625  001414  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5626                           
  5627                           ;sort.c: 336: }
  5628  001416  D0E3               	goto	l877
  5629  001418                     l8418:
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;sort.c: 337: else{
  5633                           ;sort.c: 338: const unsigned char time = (400 / n);
  5634  001418  0E01               	movlw	1
  5635  00141A  0100               	movlb	0	; () banked
  5636  00141C  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5637  00141E  0E90               	movlw	144
  5638  001420  6F86               	movwf	___awdiv@dividend& (0+255),b
  5639  001422  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5640  001426  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5641  00142A  EC27  F027         	call	___awdiv	;wreg free
  5642  00142E  0100               	movlb	0	; () banked
  5643  001430  5186               	movf	?___awdiv& (0+255),w,b
  5644  001432  0100               	movlb	0	; () banked
  5645  001434  6FA3               	movwf	ID@time_1154& (0+255),b
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;sort.c: 339: int res[2];
  5649                           ;sort.c: 341: for(int j = 0; j < 2; j++){
  5650  001436  0E00               	movlw	0
  5651  001438  0100               	movlb	0	; () banked
  5652  00143A  6FBD               	movwf	(ID@j+1)& (0+255),b
  5653  00143C  0E00               	movlw	0
  5654  00143E  6FBC               	movwf	ID@j& (0+255),b
  5655                           
  5656                           ; BSR set to: 0
  5657  001440  0100               	movlb	0	; () banked
  5658  001442  BFBD               	btfsc	(ID@j+1)& (0+255),7,b
  5659  001444  D00A               	goto	l878
  5660  001446  0100               	movlb	0	; () banked
  5661  001448  51BD               	movf	(ID@j+1)& (0+255),w,b
  5662  00144A  E106               	bnz	u7530
  5663  00144C  0E02               	movlw	2
  5664  00144E  0100               	movlb	0	; () banked
  5665  001450  5DBC               	subwf	ID@j& (0+255),w,b
  5666  001452  B0D8               	btfsc	status,0,c
  5667  001454  D0C4               	goto	l877
  5668  001456  D001               	goto	l878
  5669  001458                     u7530:
  5670                           
  5671                           ; BSR set to: 0
  5672  001458  D0C2               	goto	l877
  5673  00145A                     l878:
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;sort.c: 342: LATCbits.LATC7 = 1;
  5677  00145A  8E8B               	bsf	3979,7,c	;volatile
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;sort.c: 343: for(int i = 0; i < n; i++){
  5681  00145C  0E00               	movlw	0
  5682  00145E  0100               	movlb	0	; () banked
  5683  001460  6FAE               	movwf	(ID@i_1157+1)& (0+255),b
  5684  001462  0E00               	movlw	0
  5685  001464  6FAD               	movwf	ID@i_1157& (0+255),b
  5686  001466                     l8428:
  5687                           
  5688                           ; BSR set to: 0
  5689  001466  0100               	movlb	0	; () banked
  5690  001468  51BE               	movf	ID@n& (0+255),w,b
  5691  00146A  0100               	movlb	0	; () banked
  5692  00146C  5DAD               	subwf	ID@i_1157& (0+255),w,b
  5693  00146E  0100               	movlb	0	; () banked
  5694  001470  51AE               	movf	(ID@i_1157+1)& (0+255),w,b
  5695  001472  0A80               	xorlw	128
  5696  001474  0100               	movlb	0	; () banked
  5697  001476  6F9B               	movwf	??_ID& (0+255),b
  5698  001478  0100               	movlb	0	; () banked
  5699  00147A  51BF               	movf	(ID@n+1)& (0+255),w,b
  5700  00147C  0A80               	xorlw	128
  5701  00147E  0100               	movlb	0	; () banked
  5702  001480  599B               	subwfb	??_ID& (0+255),w,b
  5703  001482  B0D8               	btfsc	status,0,c
  5704  001484  D01A               	goto	l881
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;sort.c: 344: delay_ms(time);
  5708                           
  5709                           ; BSR set to: 0
  5710                           
  5711                           ; BSR set to: 0
  5712  001486  0100               	movlb	0	; () banked
  5713  001488  51A3               	movf	ID@time_1154& (0+255),w,b
  5714  00148A  EC87  F02F         	call	_delay_ms
  5715                           
  5716                           ;sort.c: 345: readCOND();
  5717  00148E  ECBA  F02C         	call	_readCOND	;wreg free
  5718                           
  5719                           ;sort.c: 346: res[j] += COND_signal;
  5720  001492  90D8               	bcf	status,0,c
  5721  001494  0100               	movlb	0	; () banked
  5722  001496  35BC               	rlcf	ID@j& (0+255),w,b
  5723  001498  6ED9               	movwf	fsr2l,c
  5724  00149A  0100               	movlb	0	; () banked
  5725  00149C  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5726  00149E  6EDA               	movwf	fsr2h,c
  5727  0014A0  0EB6               	movlw	low ID@res
  5728  0014A2  26D9               	addwf	fsr2l,f,c
  5729  0014A4  0E00               	movlw	high ID@res
  5730  0014A6  22DA               	addwfc	fsr2h,f,c
  5731  0014A8  0100               	movlb	0	; () banked
  5732  0014AA  51DE               	movf	_COND_signal& (0+255),w,b
  5733  0014AC  26DE               	addwf	postinc2,f,c
  5734  0014AE  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5735  0014B0  22DD               	addwfc	postdec2,f,c
  5736                           
  5737                           ; BSR set to: 0
  5738  0014B2  0100               	movlb	0	; () banked
  5739  0014B4  4BAD               	infsnz	ID@i_1157& (0+255),f,b
  5740  0014B6  2BAE               	incf	(ID@i_1157+1)& (0+255),f,b
  5741  0014B8  D7D6               	goto	l8428
  5742  0014BA                     l881:
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;sort.c: 347: }
  5746                           ;sort.c: 348: LATCbits.LATC7 = 0;
  5747  0014BA  9E8B               	bcf	3979,7,c	;volatile
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;sort.c: 350: _delay((unsigned long)((200)*(32000000/4000.0)));
  5751  0014BC  0E09               	movlw	9
  5752  0014BE  0100               	movlb	0	; () banked
  5753  0014C0  6F9C               	movwf	(??_ID+1)& (0+255),b
  5754  0014C2  0E1E               	movlw	30
  5755  0014C4  0100               	movlb	0	; () banked
  5756  0014C6  6F9B               	movwf	??_ID& (0+255),b
  5757  0014C8  0EE4               	movlw	228
  5758  0014CA                     u11197:
  5759  0014CA  2EE8               	decfsz	wreg,f,c
  5760  0014CC  D7FE               	bra	u11197
  5761  0014CE  2F9B               	decfsz	??_ID& (0+255),f,b
  5762  0014D0  D7FC               	bra	u11197
  5763  0014D2  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5764  0014D4  D7FA               	bra	u11197
  5765  0014D6  F000               	nop	
  5766                           
  5767                           ;sort.c: 353: res[j] = ((res[j] / n) > 0.3) ? 1 : 0;
  5768  0014D8  0E9A               	movlw	154
  5769  0014DA  0100               	movlb	0	; () banked
  5770  0014DC  6F92               	movwf	___ftge@ff1& (0+255),b
  5771  0014DE  0E99               	movlw	153
  5772  0014E0  0100               	movlb	0	; () banked
  5773  0014E2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5774  0014E4  0E3E               	movlw	62
  5775  0014E6  0100               	movlb	0	; () banked
  5776  0014E8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5777  0014EA  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5778  0014EE  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5779  0014F2  90D8               	bcf	status,0,c
  5780  0014F4  0100               	movlb	0	; () banked
  5781  0014F6  35BC               	rlcf	ID@j& (0+255),w,b
  5782  0014F8  6ED9               	movwf	fsr2l,c
  5783  0014FA  0100               	movlb	0	; () banked
  5784  0014FC  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5785  0014FE  6EDA               	movwf	fsr2h,c
  5786  001500  0EB6               	movlw	low ID@res
  5787  001502  26D9               	addwf	fsr2l,f,c
  5788  001504  0E00               	movlw	high ID@res
  5789  001506  22DA               	addwfc	fsr2h,f,c
  5790  001508  CFDE F086          	movff	postinc2,___awdiv@dividend
  5791  00150C  CFDD F087          	movff	postdec2,___awdiv@dividend+1
  5792  001510  EC27  F027         	call	___awdiv	;wreg free
  5793  001514  C086  F08E         	movff	?___awdiv,___awtoft@c
  5794  001518  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5795  00151C  EC29  F02D         	call	___awtoft	;wreg free
  5796  001520  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5797  001524  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5798  001528  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5799  00152C  ECC3  F026         	call	___ftge	;wreg free
  5800  001530  0100               	movlb	0	; () banked
  5801  001532  B0D8               	btfsc	status,0,c
  5802  001534  D002               	goto	u7560
  5803  001536  0E01               	movlw	1
  5804  001538  D001               	goto	u7570
  5805  00153A                     u7560:
  5806  00153A  0E00               	movlw	0
  5807  00153C                     u7570:
  5808  00153C  0100               	movlb	0	; () banked
  5809  00153E  6F9B               	movwf	??_ID& (0+255),b
  5810  001540  6B9C               	clrf	(??_ID+1)& (0+255),b
  5811  001542  90D8               	bcf	status,0,c
  5812  001544  0100               	movlb	0	; () banked
  5813  001546  35BC               	rlcf	ID@j& (0+255),w,b
  5814  001548  6ED9               	movwf	fsr2l,c
  5815  00154A  0100               	movlb	0	; () banked
  5816  00154C  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5817  00154E  6EDA               	movwf	fsr2h,c
  5818  001550  0EB6               	movlw	low ID@res
  5819  001552  26D9               	addwf	fsr2l,f,c
  5820  001554  0E00               	movlw	high ID@res
  5821  001556  22DA               	addwfc	fsr2h,f,c
  5822  001558  C09B  FFDE         	movff	??_ID,postinc2
  5823  00155C  C09C  FFDD         	movff	??_ID+1,postdec2
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;sort.c: 354: if(j==0){
  5827  001560  0100               	movlb	0	; () banked
  5828  001562  51BC               	movf	ID@j& (0+255),w,b
  5829  001564  0100               	movlb	0	; () banked
  5830  001566  11BD               	iorwf	(ID@j+1)& (0+255),w,b
  5831  001568  A4D8               	btfss	status,2,c
  5832  00156A  D010               	goto	l8448
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;sort.c: 355: sensor_outputs[1] = res[j];
  5836  00156C  90D8               	bcf	status,0,c
  5837  00156E  0100               	movlb	0	; () banked
  5838  001570  35BC               	rlcf	ID@j& (0+255),w,b
  5839  001572  6ED9               	movwf	fsr2l,c
  5840  001574  0100               	movlb	0	; () banked
  5841  001576  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5842  001578  6EDA               	movwf	fsr2h,c
  5843  00157A  0EB6               	movlw	low ID@res
  5844  00157C  26D9               	addwf	fsr2l,f,c
  5845  00157E  0E00               	movlw	high ID@res
  5846  001580  22DA               	addwfc	fsr2h,f,c
  5847  001582  CFDE F0DC          	movff	postinc2,_sensor_outputs+2
  5848  001586  CFDD F0DD          	movff	postdec2,_sensor_outputs+3
  5849                           
  5850                           ;sort.c: 356: }
  5851  00158A  D01F               	goto	l8458
  5852  00158C                     l8448:
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;sort.c: 357: else{
  5856                           ;sort.c: 358: sensor_outputs[1] = sensor_outputs[1] || res[j];
  5857  00158C  0E01               	movlw	1
  5858  00158E  0100               	movlb	0	; () banked
  5859  001590  6FA6               	movwf	_ID$1158& (0+255),b
  5860                           
  5861                           ; BSR set to: 0
  5862  001592  0100               	movlb	0	; () banked
  5863  001594  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5864  001596  0100               	movlb	0	; () banked
  5865  001598  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5866  00159A  A4D8               	btfss	status,2,c
  5867  00159C  D012               	goto	l8456
  5868                           
  5869                           ; BSR set to: 0
  5870  00159E  90D8               	bcf	status,0,c
  5871  0015A0  0100               	movlb	0	; () banked
  5872  0015A2  35BC               	rlcf	ID@j& (0+255),w,b
  5873  0015A4  6ED9               	movwf	fsr2l,c
  5874  0015A6  0100               	movlb	0	; () banked
  5875  0015A8  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5876  0015AA  6EDA               	movwf	fsr2h,c
  5877  0015AC  0EB6               	movlw	low ID@res
  5878  0015AE  26D9               	addwf	fsr2l,f,c
  5879  0015B0  0E00               	movlw	high ID@res
  5880  0015B2  22DA               	addwfc	fsr2h,f,c
  5881  0015B4  50DE               	movf	postinc2,w,c
  5882  0015B6  10DE               	iorwf	postinc2,w,c
  5883  0015B8  A4D8               	btfss	status,2,c
  5884  0015BA  D003               	goto	l8456
  5885                           
  5886                           ; BSR set to: 0
  5887  0015BC  0E00               	movlw	0
  5888  0015BE  0100               	movlb	0	; () banked
  5889  0015C0  6FA6               	movwf	_ID$1158& (0+255),b
  5890  0015C2                     l8456:
  5891                           
  5892                           ; BSR set to: 0
  5893  0015C2  C0A6  F0DC         	movff	_ID$1158,_sensor_outputs+2
  5894  0015C6  0100               	movlb	0	; () banked
  5895  0015C8  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5896  0015CA                     l8458:
  5897                           
  5898                           ; BSR set to: 0
  5899  0015CA  0100               	movlb	0	; () banked
  5900  0015CC  4BBC               	infsnz	ID@j& (0+255),f,b
  5901  0015CE  2BBD               	incf	(ID@j+1)& (0+255),f,b
  5902                           
  5903                           ; BSR set to: 0
  5904  0015D0  0100               	movlb	0	; () banked
  5905  0015D2  BFBD               	btfsc	(ID@j+1)& (0+255),7,b
  5906  0015D4  D742               	goto	l878
  5907  0015D6  0100               	movlb	0	; () banked
  5908  0015D8  51BD               	movf	(ID@j+1)& (0+255),w,b
  5909  0015DA  E101               	bnz	l877
  5910  0015DC  D737               	goto	L5
  5911  0015DE                     l877:
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;sort.c: 359: }
  5915                           ;sort.c: 360: }
  5916                           ;sort.c: 361: }
  5917                           ;sort.c: 362: int cond1 = sensor_outputs[1];
  5918  0015DE  C0DC  F09F         	movff	_sensor_outputs+2,ID@cond1
  5919  0015E2  C0DD  F0A0         	movff	_sensor_outputs+3,ID@cond1+1
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;sort.c: 365: if(sensor_outputs[0]){
  5923  0015E6  0100               	movlb	0	; () banked
  5924  0015E8  51DA               	movf	_sensor_outputs& (0+255),w,b
  5925  0015EA  0100               	movlb	0	; () banked
  5926  0015EC  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5927  0015EE  B4D8               	btfsc	status,2,c
  5928  0015F0  D043               	goto	l8490
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;sort.c: 367: readIR(3);
  5932  0015F2  0E00               	movlw	0
  5933  0015F4  0100               	movlb	0	; () banked
  5934  0015F6  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5935  0015F8  0E03               	movlw	3
  5936  0015FA  6F82               	movwf	readIR@ana_port& (0+255),b
  5937  0015FC  EC8A  F028         	call	_readIR	;wreg free
  5938                           
  5939                           ;sort.c: 368: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5940  001600  0E01               	movlw	1
  5941  001602  0100               	movlb	0	; () banked
  5942  001604  6FA7               	movwf	_ID$1160& (0+255),b
  5943                           
  5944                           ; BSR set to: 0
  5945  001606  0100               	movlb	0	; () banked
  5946  001608  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5947  00160A  0100               	movlb	0	; () banked
  5948  00160C  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5949  00160E  A4D8               	btfss	status,2,c
  5950  001610  D009               	goto	l8474
  5951                           
  5952                           ; BSR set to: 0
  5953  001612  0100               	movlb	0	; () banked
  5954  001614  51E2               	movf	_IR_signal& (0+255),w,b
  5955  001616  0100               	movlb	0	; () banked
  5956  001618  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5957  00161A  A4D8               	btfss	status,2,c
  5958  00161C  D003               	goto	l8474
  5959                           
  5960                           ; BSR set to: 0
  5961  00161E  0E00               	movlw	0
  5962  001620  0100               	movlb	0	; () banked
  5963  001622  6FA7               	movwf	_ID$1160& (0+255),b
  5964  001624                     l8474:
  5965                           
  5966                           ; BSR set to: 0
  5967  001624  C0A7  F0DC         	movff	_ID$1160,_sensor_outputs+2
  5968  001628  0100               	movlb	0	; () banked
  5969  00162A  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;sort.c: 369: _delay((unsigned long)((10)*(32000000/4000.0)));
  5973  00162C  0E68               	movlw	104
  5974  00162E  0100               	movlb	0	; () banked
  5975  001630  6F9B               	movwf	??_ID& (0+255),b
  5976  001632  0EE4               	movlw	228
  5977  001634                     u11207:
  5978  001634  2EE8               	decfsz	wreg,f,c
  5979  001636  D7FE               	bra	u11207
  5980  001638  2F9B               	decfsz	??_ID& (0+255),f,b
  5981  00163A  D7FC               	bra	u11207
  5982  00163C  F000               	nop	
  5983                           
  5984                           ;sort.c: 370: readIR(3);
  5985  00163E  0E00               	movlw	0
  5986  001640  0100               	movlb	0	; () banked
  5987  001642  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5988  001644  0E03               	movlw	3
  5989  001646  6F82               	movwf	readIR@ana_port& (0+255),b
  5990  001648  EC8A  F028         	call	_readIR	;wreg free
  5991                           
  5992                           ;sort.c: 371: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5993  00164C  0E01               	movlw	1
  5994  00164E  0100               	movlb	0	; () banked
  5995  001650  6FA8               	movwf	_ID$1161& (0+255),b
  5996                           
  5997                           ; BSR set to: 0
  5998  001652  0100               	movlb	0	; () banked
  5999  001654  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6000  001656  0100               	movlb	0	; () banked
  6001  001658  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6002  00165A  A4D8               	btfss	status,2,c
  6003  00165C  D009               	goto	l8488
  6004                           
  6005                           ; BSR set to: 0
  6006  00165E  0100               	movlb	0	; () banked
  6007  001660  51E2               	movf	_IR_signal& (0+255),w,b
  6008  001662  0100               	movlb	0	; () banked
  6009  001664  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  6010  001666  A4D8               	btfss	status,2,c
  6011  001668  D003               	goto	l8488
  6012                           
  6013                           ; BSR set to: 0
  6014  00166A  0E00               	movlw	0
  6015  00166C  0100               	movlb	0	; () banked
  6016  00166E  6FA8               	movwf	_ID$1161& (0+255),b
  6017  001670                     l8488:
  6018                           
  6019                           ; BSR set to: 0
  6020  001670  C0A8  F0DC         	movff	_ID$1161,_sensor_outputs+2
  6021  001674  0100               	movlb	0	; () banked
  6022  001676  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  6023  001678                     l8490:
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;sort.c: 372: }
  6027                           ;sort.c: 373: int reflectivity2 = IR_res;
  6028  001678  C0E0  F0A1         	movff	_IR_res,ID@reflectivity2
  6029  00167C  C0E1  F0A2         	movff	_IR_res+1,ID@reflectivity2+1
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;sort.c: 386: if(!sensor_outputs[0]){
  6033  001680  0100               	movlb	0	; () banked
  6034  001682  51DA               	movf	_sensor_outputs& (0+255),w,b
  6035  001684  0100               	movlb	0	; () banked
  6036  001686  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  6037  001688  A4D8               	btfss	status,2,c
  6038  00168A  D014               	goto	l8504
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;sort.c: 387: if(!sensor_outputs[1]){
  6042  00168C  0100               	movlb	0	; () banked
  6043  00168E  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6044  001690  0100               	movlb	0	; () banked
  6045  001692  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6046  001694  A4D8               	btfss	status,2,c
  6047  001696  D007               	goto	l8500
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;sort.c: 388: count_pop_no_tab++;
  6051  001698  4A61               	infsnz	_count_pop_no_tab,f,c
  6052  00169A  2A62               	incf	_count_pop_no_tab+1,f,c
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;sort.c: 389: cur_can = 0;
  6056  00169C  0E00               	movlw	0
  6057  00169E  0101               	movlb	1	; () banked
  6058  0016A0  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6059  0016A2  0E00               	movlw	0
  6060  0016A4  D006               	goto	L6
  6061  0016A6                     l8500:
  6062                           
  6063                           ;sort.c: 391: else{
  6064                           ;sort.c: 392: count_pop_w_tab++;
  6065  0016A6  4A63               	infsnz	_count_pop_w_tab,f,c
  6066  0016A8  2A64               	incf	_count_pop_w_tab+1,f,c
  6067                           
  6068                           ;sort.c: 393: cur_can = 1;
  6069  0016AA  0E00               	movlw	0
  6070  0016AC  0101               	movlb	1	; () banked
  6071  0016AE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6072  0016B0  0E01               	movlw	1
  6073  0016B2                     L6:
  6074  0016B2  6F2B               	movwf	_cur_can& (0+255),b
  6075  0016B4                     l8504:
  6076                           
  6077                           ;sort.c: 394: }
  6078                           ;sort.c: 395: }
  6079                           ;sort.c: 396: if(sensor_outputs[0]){
  6080  0016B4  0100               	movlb	0	; () banked
  6081  0016B6  51DA               	movf	_sensor_outputs& (0+255),w,b
  6082  0016B8  0100               	movlb	0	; () banked
  6083  0016BA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  6084  0016BC  B4D8               	btfsc	status,2,c
  6085  0016BE  D014               	goto	l8516
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;sort.c: 397: if(!sensor_outputs[1]){
  6089  0016C0  0100               	movlb	0	; () banked
  6090  0016C2  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6091  0016C4  0100               	movlb	0	; () banked
  6092  0016C6  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6093  0016C8  A4D8               	btfss	status,2,c
  6094  0016CA  D007               	goto	l8512
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;sort.c: 398: count_can_w_lab++;
  6098  0016CC  4A5F               	infsnz	_count_can_w_lab,f,c
  6099  0016CE  2A60               	incf	_count_can_w_lab+1,f,c
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;sort.c: 399: cur_can = 2;
  6103  0016D0  0E00               	movlw	0
  6104  0016D2  0101               	movlb	1	; () banked
  6105  0016D4  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6106  0016D6  0E02               	movlw	2
  6107  0016D8  D006               	goto	L7
  6108  0016DA                     l8512:
  6109                           
  6110                           ;sort.c: 401: else{
  6111                           ;sort.c: 402: count_can_no_lab++;
  6112  0016DA  4A5D               	infsnz	_count_can_no_lab,f,c
  6113  0016DC  2A5E               	incf	_count_can_no_lab+1,f,c
  6114                           
  6115                           ;sort.c: 403: cur_can = 3;
  6116  0016DE  0E00               	movlw	0
  6117  0016E0  0101               	movlb	1	; () banked
  6118  0016E2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6119  0016E4  0E03               	movlw	3
  6120  0016E6                     L7:
  6121  0016E6  6F2B               	movwf	_cur_can& (0+255),b
  6122  0016E8                     l8516:
  6123  0016E8  0101               	movlb	1	; () banked
  6124  0016EA  5135               	movf	_f_can_distributed& (0+255),w,b
  6125  0016EC  0101               	movlb	1	; () banked
  6126  0016EE  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  6127  0016F0  B4D8               	btfsc	status,2,c
  6128  0016F2  D7FA               	goto	l8516
  6129                           
  6130                           ; BSR set to: 1
  6131                           ;sort.c: 409: for(int i=0;i<10000;i++)
  6132                           
  6133                           ; BSR set to: 1
  6134  0016F4  0E00               	movlw	0
  6135  0016F6  0100               	movlb	0	; () banked
  6136  0016F8  6FB0               	movwf	(ID@i_1163+1)& (0+255),b
  6137  0016FA  0E00               	movlw	0
  6138  0016FC  6FAF               	movwf	ID@i_1163& (0+255),b
  6139  0016FE                     l8520:
  6140                           
  6141                           ; BSR set to: 0
  6142  0016FE  0100               	movlb	0	; () banked
  6143  001700  BFB0               	btfsc	(ID@i_1163+1)& (0+255),7,b
  6144  001702  D008               	goto	l900
  6145  001704  0E10               	movlw	16
  6146  001706  0100               	movlb	0	; () banked
  6147  001708  5DAF               	subwf	ID@i_1163& (0+255),w,b
  6148  00170A  0E27               	movlw	39
  6149  00170C  0100               	movlb	0	; () banked
  6150  00170E  59B0               	subwfb	(ID@i_1163+1)& (0+255),w,b
  6151  001710  B0D8               	btfsc	status,0,c
  6152  001712  D00D               	goto	l901
  6153  001714                     l900:
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;sort.c: 410: {
  6157                           ;sort.c: 411: LATCbits.LATC0 = 1;
  6158  001714  808B               	bsf	3979,0,c	;volatile
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;sort.c: 412: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6162  001716  0E1A               	movlw	26
  6163  001718                     u11217:
  6164  001718  2EE8               	decfsz	wreg,f,c
  6165  00171A  D7FE               	bra	u11217
  6166  00171C  D000               	nop2	
  6167                           
  6168                           ;sort.c: 413: LATCbits.LATC0 = 0;
  6169  00171E  908B               	bcf	3979,0,c	;volatile
  6170                           
  6171                           ;sort.c: 414: _delay((unsigned long)((90)*(32000000/4000000.0)));
  6172  001720  0EF0               	movlw	240
  6173  001722                     u11227:
  6174  001722  2EE8               	decfsz	wreg,f,c
  6175  001724  D7FE               	bra	u11227
  6176  001726  0100               	movlb	0	; () banked
  6177  001728  4BAF               	infsnz	ID@i_1163& (0+255),f,b
  6178  00172A  2BB0               	incf	(ID@i_1163+1)& (0+255),f,b
  6179  00172C  D7E8               	goto	l8520
  6180  00172E                     l901:
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;sort.c: 415: }
  6184                           ;sort.c: 417: LATCbits.LATC0 = 0;
  6185  00172E  908B               	bcf	3979,0,c	;volatile
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;sort.c: 419: f_can_coming_to_distribution = 1;
  6189  001730  0E00               	movlw	0
  6190  001732  0101               	movlb	1	; () banked
  6191  001734  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6192  001736  0E01               	movlw	1
  6193  001738  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  6194                           
  6195                           ; BSR set to: 1
  6196                           ;sort.c: 420: _delay((unsigned long)((500)*(32000000/4000.0)));
  6197  00173A  0E15               	movlw	21
  6198  00173C  0100               	movlb	0	; () banked
  6199  00173E  6F9C               	movwf	(??_ID+1)& (0+255),b
  6200  001740  0E4B               	movlw	75
  6201  001742  0100               	movlb	0	; () banked
  6202  001744  6F9B               	movwf	??_ID& (0+255),b
  6203  001746  0EBE               	movlw	190
  6204  001748                     u11237:
  6205  001748  2EE8               	decfsz	wreg,f,c
  6206  00174A  D7FE               	bra	u11237
  6207  00174C  2F9B               	decfsz	??_ID& (0+255),f,b
  6208  00174E  D7FC               	bra	u11237
  6209  001750  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  6210  001752  D7FA               	bra	u11237
  6211  001754  F000               	nop	
  6212                           
  6213                           ;sort.c: 421: LATCbits.LATC0 = 1;
  6214  001756  808B               	bsf	3979,0,c	;volatile
  6215                           
  6216                           ;sort.c: 424: if(!f_lastCan){
  6217  001758  0100               	movlb	0	; () banked
  6218  00175A  51EC               	movf	_f_lastCan& (0+255),w,b
  6219  00175C  0100               	movlb	0	; () banked
  6220  00175E  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
  6221  001760  A4D8               	btfss	status,2,c
  6222  001762  D032               	goto	l8552
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;sort.c: 425: for(int i=0; i<46; i++){
  6226  001764  0E00               	movlw	0
  6227  001766  0100               	movlb	0	; () banked
  6228  001768  6FBB               	movwf	(ID@i_1164+1)& (0+255),b
  6229  00176A  0E00               	movlw	0
  6230  00176C  6FBA               	movwf	ID@i_1164& (0+255),b
  6231                           
  6232                           ; BSR set to: 0
  6233  00176E  0100               	movlb	0	; () banked
  6234  001770  BFBB               	btfsc	(ID@i_1164+1)& (0+255),7,b
  6235  001772  D008               	goto	l8544
  6236  001774  0100               	movlb	0	; () banked
  6237  001776  51BB               	movf	(ID@i_1164+1)& (0+255),w,b
  6238  001778  E126               	bnz	l904
  6239  00177A  0E2E               	movlw	46
  6240  00177C  0100               	movlb	0	; () banked
  6241  00177E  5DBA               	subwf	ID@i_1164& (0+255),w,b
  6242  001780  B0D8               	btfsc	status,0,c
  6243  001782  D021               	goto	l904
  6244  001784                     l8544:
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;sort.c: 426: LATBbits.LATB2 = !LATBbits.LATB2;
  6248  001784  B48A               	btfsc	3978,2,c	;volatile
  6249  001786  D004               	goto	u7760
  6250  001788  0100               	movlb	0	; () banked
  6251  00178A  6B9B               	clrf	??_ID& (0+255),b
  6252  00178C  2B9B               	incf	??_ID& (0+255),f,b
  6253  00178E  D002               	goto	u7778
  6254  001790                     u7760:
  6255  001790  0100               	movlb	0	; () banked
  6256  001792  6B9B               	clrf	??_ID& (0+255),b
  6257  001794                     u7778:
  6258  001794  0100               	movlb	0	; () banked
  6259  001796  479B               	rlncf	??_ID& (0+255),f,b
  6260  001798  479B               	rlncf	??_ID& (0+255),f,b
  6261  00179A  508A               	movf	3978,w,c	;volatile
  6262  00179C  0100               	movlb	0	; () banked
  6263  00179E  199B               	xorwf	??_ID& (0+255),w,b
  6264  0017A0  0BFB               	andlw	-5
  6265  0017A2  199B               	xorwf	??_ID& (0+255),w,b
  6266  0017A4  6E8A               	movwf	3978,c	;volatile
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;sort.c: 427: delay_ms(45-i);
  6270  0017A6  0100               	movlb	0	; () banked
  6271  0017A8  51BA               	movf	ID@i_1164& (0+255),w,b
  6272  0017AA  0800               	sublw	0
  6273  0017AC  0F2D               	addlw	45
  6274  0017AE  EC87  F02F         	call	_delay_ms
  6275  0017B2  0100               	movlb	0	; () banked
  6276  0017B4  4BBA               	infsnz	ID@i_1164& (0+255),f,b
  6277  0017B6  2BBB               	incf	(ID@i_1164+1)& (0+255),f,b
  6278                           
  6279                           ; BSR set to: 0
  6280  0017B8  0100               	movlb	0	; () banked
  6281  0017BA  BFBB               	btfsc	(ID@i_1164+1)& (0+255),7,b
  6282  0017BC  D7E3               	goto	l8544
  6283  0017BE  0100               	movlb	0	; () banked
  6284  0017C0  51BB               	movf	(ID@i_1164+1)& (0+255),w,b
  6285  0017C2  E101               	bnz	u7780
  6286  0017C4  D7DA               	goto	L8
  6287  0017C6                     u7780:
  6288  0017C6                     l904:
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;sort.c: 428: }
  6292                           ;sort.c: 429: LATBbits.LATB2 = 1;
  6293  0017C6  848A               	bsf	3978,2,c	;volatile
  6294  0017C8                     l8552:
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;sort.c: 430: }
  6298                           ;sort.c: 432: f_can_coming_to_ID = 0;
  6299  0017C8  0E00               	movlw	0
  6300  0017CA  0101               	movlb	1	; () banked
  6301  0017CC  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6302  0017CE  0E00               	movlw	0
  6303  0017D0  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  6304  0017D2  0012               	return	
  6305  0017D4                     __end_of_ID:
  6306                           	opt stack 0
  6307                           tblptru	equ	0xFF8
  6308                           tblptrh	equ	0xFF7
  6309                           tblptrl	equ	0xFF6
  6310                           tablat	equ	0xFF5
  6311                           prodh	equ	0xFF4
  6312                           prodl	equ	0xFF3
  6313                           postinc0	equ	0xFEE
  6314                           wreg	equ	0xFE8
  6315                           postdec1	equ	0xFE5
  6316                           fsr1l	equ	0xFE1
  6317                           indf2	equ	0xFDF
  6318                           postinc2	equ	0xFDE
  6319                           postdec2	equ	0xFDD
  6320                           fsr2h	equ	0xFDA
  6321                           fsr2l	equ	0xFD9
  6322                           status	equ	0xFD8
  6323                           
  6324 ;; *************** function _readIR *****************
  6325 ;; Defined at:
  6326 ;;		line 23 in file "ADCFunctionality.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  ana_port        2    2[BANK0 ] int 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      void 
  6333 ;; Registers used:
  6334 ;;		wreg, status,2, status,0, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6340 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;Total ram usage:        4 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    8
  6347 ;; This function calls:
  6348 ;;		_readADC
  6349 ;; This function is called by:
  6350 ;;		_Loading
  6351 ;;		_ID
  6352 ;;		_getIR
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           	psect	text8
  6357  005114                     __ptext8:
  6358                           	opt stack 0
  6359  005114                     _readIR:
  6360                           	opt stack 20
  6361                           
  6362                           ;ADCFunctionality.c: 24: readADC(ana_port);
  6363                           
  6364                           ; BSR set to: 1
  6365                           ;incstack = 0
  6366  005114  0100               	movlb	0	; () banked
  6367  005116  5182               	movf	readIR@ana_port& (0+255),w,b
  6368  005118  EC5C  F02F         	call	_readADC
  6369                           
  6370                           ;ADCFunctionality.c: 25: IR_res = ADRESH<<8 | ADRESL;
  6371  00511C  50C3               	movf	4035,w,c	;volatile
  6372  00511E  CFC4 F084          	movff	4036,??_readIR	;volatile
  6373  005122  0100               	movlb	0	; () banked
  6374  005124  6B85               	clrf	(??_readIR+1)& (0+255),b
  6375  005126  C084  F085         	movff	??_readIR,??_readIR+1
  6376  00512A  0100               	movlb	0	; () banked
  6377  00512C  6B84               	clrf	??_readIR& (0+255),b
  6378  00512E  0100               	movlb	0	; () banked
  6379  005130  1184               	iorwf	??_readIR& (0+255),w,b
  6380  005132  0100               	movlb	0	; () banked
  6381  005134  6FE0               	movwf	_IR_res& (0+255),b
  6382  005136  0100               	movlb	0	; () banked
  6383  005138  5185               	movf	(??_readIR+1)& (0+255),w,b
  6384  00513A  0100               	movlb	0	; () banked
  6385  00513C  6FE1               	movwf	(_IR_res+1)& (0+255),b
  6386                           
  6387                           ;ADCFunctionality.c: 26: switch(ana_port){
  6388  00513E  D024               	goto	l6968
  6389  005140                     l6962:
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;ADCFunctionality.c: 28: IR_signal = (IR_res > 700) ? 1 : 0;
  6393  005140  0100               	movlb	0	; () banked
  6394  005142  BFE1               	btfsc	(_IR_res+1)& (0+255),7,b
  6395  005144  D00A               	goto	u5680
  6396  005146  0EBD               	movlw	189
  6397  005148  0100               	movlb	0	; () banked
  6398  00514A  5DE0               	subwf	_IR_res& (0+255),w,b
  6399  00514C  0E02               	movlw	2
  6400  00514E  0100               	movlb	0	; () banked
  6401  005150  59E1               	subwfb	(_IR_res+1)& (0+255),w,b
  6402  005152  A0D8               	btfss	status,0,c
  6403  005154  D002               	goto	u5680
  6404  005156  0E01               	movlw	1
  6405  005158  D001               	goto	u5690
  6406  00515A                     u5680:
  6407  00515A  0E00               	movlw	0
  6408  00515C                     u5690:
  6409  00515C  0100               	movlb	0	; () banked
  6410  00515E  6FE2               	movwf	_IR_signal& (0+255),b
  6411  005160  6BE3               	clrf	(_IR_signal+1)& (0+255),b
  6412                           
  6413                           ;ADCFunctionality.c: 29: break;
  6414  005162  0012               	return	
  6415  005164                     l6964:
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;ADCFunctionality.c: 31: IR_signal = (IR_res > 250) ? 1 : 0;
  6419  005164  0100               	movlb	0	; () banked
  6420  005166  BFE1               	btfsc	(_IR_res+1)& (0+255),7,b
  6421  005168  D00A               	goto	u5700
  6422  00516A  0100               	movlb	0	; () banked
  6423  00516C  51E1               	movf	(_IR_res+1)& (0+255),w,b
  6424  00516E  E105               	bnz	u5701
  6425  005170  0EFB               	movlw	251
  6426  005172  0100               	movlb	0	; () banked
  6427  005174  5DE0               	subwf	_IR_res& (0+255),w,b
  6428  005176  A0D8               	btfss	status,0,c
  6429  005178  D002               	goto	u5700
  6430  00517A                     u5701:
  6431  00517A  0E01               	movlw	1
  6432  00517C  D001               	goto	u5710
  6433  00517E                     u5700:
  6434  00517E  0E00               	movlw	0
  6435  005180                     u5710:
  6436  005180  0100               	movlb	0	; () banked
  6437  005182  6FE2               	movwf	_IR_signal& (0+255),b
  6438  005184  6BE3               	clrf	(_IR_signal+1)& (0+255),b
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;ADCFunctionality.c: 35: }
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;ADCFunctionality.c: 34: break;
  6445                           
  6446                           ;ADCFunctionality.c: 33: default:
  6447                           
  6448                           ;ADCFunctionality.c: 32: break;
  6449  005186  0012               	return	
  6450  005188                     l6968:
  6451                           
  6452                           ; BSR set to: 0
  6453  005188  C082  F084         	movff	readIR@ana_port,??_readIR
  6454  00518C  C083  F085         	movff	readIR@ana_port+1,??_readIR+1
  6455                           
  6456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6457                           ; Switch size 1, requested type "space"
  6458                           ; Number of cases is 1, Range of values is 0 to 0
  6459                           ; switch strategies available:
  6460                           ; Name         Instructions Cycles
  6461                           ; simple_byte            4     3 (average)
  6462                           ;	Chosen strategy is simple_byte
  6463  005190  0100               	movlb	0	; () banked
  6464  005192  5185               	movf	(??_readIR+1)& (0+255),w,b
  6465  005194  0A00               	xorlw	0	; case 0
  6466  005196  A4D8               	btfss	status,2,c
  6467  005198  0012               	return	
  6468                           
  6469                           ; BSR set to: 0
  6470                           ; Switch size 1, requested type "space"
  6471                           ; Number of cases is 2, Range of values is 0 to 3
  6472                           ; switch strategies available:
  6473                           ; Name         Instructions Cycles
  6474                           ; simple_byte            7     4 (average)
  6475                           ;	Chosen strategy is simple_byte
  6476  00519A  0100               	movlb	0	; () banked
  6477  00519C  5184               	movf	??_readIR& (0+255),w,b
  6478  00519E  0A00               	xorlw	0	; case 0
  6479  0051A0  B4D8               	btfsc	status,2,c
  6480  0051A2  D7CE               	goto	l6962
  6481  0051A4  0A03               	xorlw	3	; case 3
  6482  0051A6  A4D8               	btfss	status,2,c
  6483  0051A8  0012               	return	
  6484  0051AA  D7DC               	goto	l6964
  6485  0051AC                     __end_of_readIR:
  6486                           	opt stack 0
  6487                           tblptru	equ	0xFF8
  6488                           tblptrh	equ	0xFF7
  6489                           tblptrl	equ	0xFF6
  6490                           tablat	equ	0xFF5
  6491                           prodh	equ	0xFF4
  6492                           prodl	equ	0xFF3
  6493                           postinc0	equ	0xFEE
  6494                           wreg	equ	0xFE8
  6495                           postdec1	equ	0xFE5
  6496                           fsr1l	equ	0xFE1
  6497                           indf2	equ	0xFDF
  6498                           postinc2	equ	0xFDE
  6499                           postdec2	equ	0xFDD
  6500                           fsr2h	equ	0xFDA
  6501                           fsr2l	equ	0xFD9
  6502                           status	equ	0xFD8
  6503                           
  6504 ;; *************** function _readCOND *****************
  6505 ;; Defined at:
  6506 ;;		line 44 in file "ADCFunctionality.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;		None
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;  res             2    4[BANK0 ] int 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;                  1    wreg      void 
  6513 ;; Registers used:
  6514 ;;		wreg, status,2, status,0, cstack
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;Total ram usage:        4 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    8
  6527 ;; This function calls:
  6528 ;;		_readADC
  6529 ;; This function is called by:
  6530 ;;		_ID
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text9
  6535  005974                     __ptext9:
  6536                           	opt stack 0
  6537  005974                     _readCOND:
  6538                           	opt stack 20
  6539                           
  6540                           ;ADCFunctionality.c: 45: readADC(2);
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;incstack = 0
  6544  005974  0E02               	movlw	2
  6545  005976  EC5C  F02F         	call	_readADC
  6546                           
  6547                           ;ADCFunctionality.c: 46: int res = ADRESH<<8 | ADRESL;
  6548  00597A  50C3               	movf	4035,w,c	;volatile
  6549  00597C  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6550  005980  0100               	movlb	0	; () banked
  6551  005982  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6552  005984  C082  F083         	movff	??_readCOND,??_readCOND+1
  6553  005988  0100               	movlb	0	; () banked
  6554  00598A  6B82               	clrf	??_readCOND& (0+255),b
  6555  00598C  0100               	movlb	0	; () banked
  6556  00598E  1182               	iorwf	??_readCOND& (0+255),w,b
  6557  005990  0100               	movlb	0	; () banked
  6558  005992  6F84               	movwf	readCOND@res& (0+255),b
  6559  005994  0100               	movlb	0	; () banked
  6560  005996  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6561  005998  0100               	movlb	0	; () banked
  6562  00599A  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;ADCFunctionality.c: 47: COND_signal = (res > 300) ? 1 : 0;
  6566  00599C  0100               	movlb	0	; () banked
  6567  00599E  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6568  0059A0  D00A               	goto	u6470
  6569  0059A2  0E2D               	movlw	45
  6570  0059A4  0100               	movlb	0	; () banked
  6571  0059A6  5D84               	subwf	readCOND@res& (0+255),w,b
  6572  0059A8  0E01               	movlw	1
  6573  0059AA  0100               	movlb	0	; () banked
  6574  0059AC  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6575  0059AE  A0D8               	btfss	status,0,c
  6576  0059B0  D002               	goto	u6470
  6577  0059B2  0E01               	movlw	1
  6578  0059B4  D001               	goto	u6480
  6579  0059B6                     u6470:
  6580  0059B6  0E00               	movlw	0
  6581  0059B8                     u6480:
  6582  0059B8  0100               	movlb	0	; () banked
  6583  0059BA  6FDE               	movwf	_COND_signal& (0+255),b
  6584  0059BC  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6585                           
  6586                           ; BSR set to: 0
  6587  0059BE  0012               	return		;funcret
  6588  0059C0                     __end_of_readCOND:
  6589                           	opt stack 0
  6590                           tblptru	equ	0xFF8
  6591                           tblptrh	equ	0xFF7
  6592                           tblptrl	equ	0xFF6
  6593                           tablat	equ	0xFF5
  6594                           prodh	equ	0xFF4
  6595                           prodl	equ	0xFF3
  6596                           postinc0	equ	0xFEE
  6597                           wreg	equ	0xFE8
  6598                           postdec1	equ	0xFE5
  6599                           fsr1l	equ	0xFE1
  6600                           indf2	equ	0xFDF
  6601                           postinc2	equ	0xFDE
  6602                           postdec2	equ	0xFDD
  6603                           fsr2h	equ	0xFDA
  6604                           fsr2l	equ	0xFD9
  6605                           status	equ	0xFD8
  6606                           
  6607 ;; *************** function _delay_ms *****************
  6608 ;; Defined at:
  6609 ;;		line 765 in file "sort.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;  milliseconds    1    wreg     unsigned char 
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  1    wreg      void 
  6616 ;; Registers used:
  6617 ;;		wreg, status,2, status,0, cstack
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;Total ram usage:        2 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    7
  6630 ;; This function calls:
  6631 ;;		Nothing
  6632 ;; This function is called by:
  6633 ;;		_Loading
  6634 ;;		_ID
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text10
  6639  005F0E                     __ptext10:
  6640                           	opt stack 0
  6641  005F0E                     _delay_ms:
  6642                           	opt stack 21
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;incstack = 0
  6646                           ;delay_ms@milliseconds stored from wreg
  6647  005F0E  0100               	movlb	0	; () banked
  6648  005F10  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6649                           
  6650                           ;sort.c: 766: while(milliseconds > 0)
  6651  005F12  D00B               	goto	l7678
  6652  005F14                     l7674:
  6653                           
  6654                           ;sort.c: 767: {
  6655                           ;sort.c: 768: milliseconds--;
  6656  005F14  0100               	movlb	0	; () banked
  6657  005F16  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;sort.c: 769: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6661  005F18  0E0B               	movlw	11
  6662  005F1A  0100               	movlb	0	; () banked
  6663  005F1C  6F80               	movwf	??_delay_ms& (0+255),b
  6664  005F1E  0E47               	movlw	71
  6665  005F20                     u11247:
  6666  005F20  2EE8               	decfsz	wreg,f,c
  6667  005F22  D7FE               	bra	u11247
  6668  005F24  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6669  005F26  D7FC               	bra	u11247
  6670  005F28  D000               	nop2	
  6671  005F2A                     l7678:
  6672  005F2A  0100               	movlb	0	; () banked
  6673  005F2C  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6674  005F2E  0100               	movlb	0	; () banked
  6675  005F30  B4D8               	btfsc	status,2,c
  6676  005F32  0012               	return	
  6677  005F34  D7EF               	goto	l7674
  6678  005F36                     __end_of_delay_ms:
  6679                           	opt stack 0
  6680                           tblptru	equ	0xFF8
  6681                           tblptrh	equ	0xFF7
  6682                           tblptrl	equ	0xFF6
  6683                           tablat	equ	0xFF5
  6684                           prodh	equ	0xFF4
  6685                           prodl	equ	0xFF3
  6686                           postinc0	equ	0xFEE
  6687                           wreg	equ	0xFE8
  6688                           postdec1	equ	0xFE5
  6689                           fsr1l	equ	0xFE1
  6690                           indf2	equ	0xFDF
  6691                           postinc2	equ	0xFDE
  6692                           postdec2	equ	0xFDD
  6693                           fsr2h	equ	0xFDA
  6694                           fsr2l	equ	0xFD9
  6695                           status	equ	0xFD8
  6696                           
  6697 ;; *************** function ___ftge *****************
  6698 ;; Defined at:
  6699 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;  ff1             3   18[BANK0 ] float 
  6702 ;;  ff2             3   21[BANK0 ] float 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;		None               void
  6707 ;; Registers used:
  6708 ;;		wreg, status,2, status,0
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6714 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;Total ram usage:        9 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    7
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_ID
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text11
  6729  004D86                     __ptext11:
  6730                           	opt stack 0
  6731  004D86                     ___ftge:
  6732                           	opt stack 21
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;incstack = 0
  6736  004D86  0100               	movlb	0	; () banked
  6737  004D88  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6738  004D8A  D01D               	goto	l7796
  6739                           
  6740                           ; BSR set to: 0
  6741  004D8C  C092  F098         	movff	___ftge@ff1,??___ftge
  6742  004D90  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6743  004D94  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6744  004D98  0100               	movlb	0	; () banked
  6745  004D9A  1F98               	comf	??___ftge& (0+255),f,b
  6746  004D9C  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6747  004D9E  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6748  004DA0  2B98               	incf	??___ftge& (0+255),f,b
  6749  004DA2  0E00               	movlw	0
  6750  004DA4  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6751  004DA6  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6752  004DA8  0E00               	movlw	0
  6753  004DAA  0100               	movlb	0	; () banked
  6754  004DAC  2598               	addwf	??___ftge& (0+255),w,b
  6755  004DAE  0100               	movlb	0	; () banked
  6756  004DB0  6F92               	movwf	___ftge@ff1& (0+255),b
  6757  004DB2  0E00               	movlw	0
  6758  004DB4  0100               	movlb	0	; () banked
  6759  004DB6  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6760  004DB8  0100               	movlb	0	; () banked
  6761  004DBA  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6762  004DBC  0E80               	movlw	128
  6763  004DBE  0100               	movlb	0	; () banked
  6764  004DC0  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6765  004DC2  0100               	movlb	0	; () banked
  6766  004DC4  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6767  004DC6                     l7796:
  6768                           
  6769                           ; BSR set to: 0
  6770  004DC6  0100               	movlb	0	; () banked
  6771  004DC8  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6772  004DCA  D01D               	goto	l7800
  6773                           
  6774                           ; BSR set to: 0
  6775  004DCC  C095  F098         	movff	___ftge@ff2,??___ftge
  6776  004DD0  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6777  004DD4  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6778  004DD8  0100               	movlb	0	; () banked
  6779  004DDA  1F98               	comf	??___ftge& (0+255),f,b
  6780  004DDC  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6781  004DDE  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6782  004DE0  2B98               	incf	??___ftge& (0+255),f,b
  6783  004DE2  0E00               	movlw	0
  6784  004DE4  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6785  004DE6  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6786  004DE8  0E00               	movlw	0
  6787  004DEA  0100               	movlb	0	; () banked
  6788  004DEC  2598               	addwf	??___ftge& (0+255),w,b
  6789  004DEE  0100               	movlb	0	; () banked
  6790  004DF0  6F95               	movwf	___ftge@ff2& (0+255),b
  6791  004DF2  0E00               	movlw	0
  6792  004DF4  0100               	movlb	0	; () banked
  6793  004DF6  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6794  004DF8  0100               	movlb	0	; () banked
  6795  004DFA  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6796  004DFC  0E80               	movlw	128
  6797  004DFE  0100               	movlb	0	; () banked
  6798  004E00  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6799  004E02  0100               	movlb	0	; () banked
  6800  004E04  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6801  004E06                     l7800:
  6802                           
  6803                           ; BSR set to: 0
  6804  004E06  0E00               	movlw	0
  6805  004E08  0100               	movlb	0	; () banked
  6806  004E0A  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6807  004E0C  0E00               	movlw	0
  6808  004E0E  0100               	movlb	0	; () banked
  6809  004E10  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6810  004E12  0E80               	movlw	128
  6811  004E14  0100               	movlb	0	; () banked
  6812  004E16  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6813                           
  6814                           ; BSR set to: 0
  6815  004E18  0E00               	movlw	0
  6816  004E1A  0100               	movlb	0	; () banked
  6817  004E1C  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6818  004E1E  0E00               	movlw	0
  6819  004E20  0100               	movlb	0	; () banked
  6820  004E22  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6821  004E24  0E80               	movlw	128
  6822  004E26  0100               	movlb	0	; () banked
  6823  004E28  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6824  004E2A  0100               	movlb	0	; () banked
  6825  004E2C  5195               	movf	___ftge@ff2& (0+255),w,b
  6826  004E2E  0100               	movlb	0	; () banked
  6827  004E30  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6828  004E32  0100               	movlb	0	; () banked
  6829  004E34  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6830  004E36  0100               	movlb	0	; () banked
  6831  004E38  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6832  004E3A  0100               	movlb	0	; () banked
  6833  004E3C  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6834  004E3E  0100               	movlb	0	; () banked
  6835  004E40  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6836  004E42  B0D8               	btfsc	status,0,c
  6837  004E44  D002               	goto	l7806
  6838                           
  6839                           ; BSR set to: 0
  6840  004E46  90D8               	bcf	status,0,c
  6841  004E48  0012               	return	
  6842  004E4A                     l7806:
  6843                           
  6844                           ; BSR set to: 0
  6845  004E4A  80D8               	bsf	status,0,c
  6846                           
  6847                           ; BSR set to: 0
  6848  004E4C  0012               	return	
  6849  004E4E                     __end_of___ftge:
  6850                           	opt stack 0
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           postinc0	equ	0xFEE
  6858                           wreg	equ	0xFE8
  6859                           postdec1	equ	0xFE5
  6860                           fsr1l	equ	0xFE1
  6861                           indf2	equ	0xFDF
  6862                           postinc2	equ	0xFDE
  6863                           postdec2	equ	0xFDD
  6864                           fsr2h	equ	0xFDA
  6865                           fsr2l	equ	0xFD9
  6866                           status	equ	0xFD8
  6867                           
  6868 ;; *************** function ___awtoft *****************
  6869 ;; Defined at:
  6870 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  c               2   14[BANK0 ] int 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  sign            1   17[BANK0 ] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  3   14[BANK0 ] float 
  6877 ;; Registers used:
  6878 ;;		wreg, status,2, status,0, cstack
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6884 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;Total ram usage:        4 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    8
  6891 ;; This function calls:
  6892 ;;		___ftpack
  6893 ;; This function is called by:
  6894 ;;		_ID
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text12
  6899  005A52                     __ptext12:
  6900                           	opt stack 0
  6901  005A52                     ___awtoft:
  6902                           	opt stack 20
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;incstack = 0
  6906  005A52  0E00               	movlw	0
  6907  005A54  0100               	movlb	0	; () banked
  6908  005A56  6F91               	movwf	___awtoft@sign& (0+255),b
  6909                           
  6910                           ; BSR set to: 0
  6911  005A58  0100               	movlb	0	; () banked
  6912  005A5A  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6913  005A5C  D008               	goto	l7788
  6914                           
  6915                           ; BSR set to: 0
  6916  005A5E  0100               	movlb	0	; () banked
  6917  005A60  6D8E               	negf	___awtoft@c& (0+255),b
  6918  005A62  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6919  005A64  B0D8               	btfsc	status,0,c
  6920  005A66  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6921                           
  6922                           ; BSR set to: 0
  6923  005A68  0E01               	movlw	1
  6924  005A6A  0100               	movlb	0	; () banked
  6925  005A6C  6F91               	movwf	___awtoft@sign& (0+255),b
  6926  005A6E                     l7788:
  6927                           
  6928                           ; BSR set to: 0
  6929  005A6E  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6930  005A72  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6931  005A76  0100               	movlb	0	; () banked
  6932  005A78  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6933  005A7A  0E8E               	movlw	142
  6934  005A7C  0100               	movlb	0	; () banked
  6935  005A7E  6F83               	movwf	___ftpack@exp& (0+255),b
  6936  005A80  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6937  005A84  ECB2  F022         	call	___ftpack	;wreg free
  6938  005A88  C080  F08E         	movff	?___ftpack,?___awtoft
  6939  005A8C  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6940  005A90  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6941  005A94  0012               	return	
  6942  005A96                     __end_of___awtoft:
  6943                           	opt stack 0
  6944                           tblptru	equ	0xFF8
  6945                           tblptrh	equ	0xFF7
  6946                           tblptrl	equ	0xFF6
  6947                           tablat	equ	0xFF5
  6948                           prodh	equ	0xFF4
  6949                           prodl	equ	0xFF3
  6950                           postinc0	equ	0xFEE
  6951                           wreg	equ	0xFE8
  6952                           postdec1	equ	0xFE5
  6953                           fsr1l	equ	0xFE1
  6954                           indf2	equ	0xFDF
  6955                           postinc2	equ	0xFDE
  6956                           postdec2	equ	0xFDD
  6957                           fsr2h	equ	0xFDA
  6958                           fsr2l	equ	0xFD9
  6959                           status	equ	0xFD8
  6960                           
  6961 ;; *************** function ___ftpack *****************
  6962 ;; Defined at:
  6963 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;  arg             3    0[BANK0 ] unsigned um
  6966 ;;  exp             1    3[BANK0 ] unsigned char 
  6967 ;;  sign            1    4[BANK0 ] unsigned char 
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;		None
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  3    0[BANK0 ] float 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6979 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;Total ram usage:        8 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    7
  6986 ;; This function calls:
  6987 ;;		Nothing
  6988 ;; This function is called by:
  6989 ;;		___awtoft
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text13
  6994  004564                     __ptext13:
  6995                           	opt stack 0
  6996  004564                     ___ftpack:
  6997                           	opt stack 20
  6998                           
  6999                           ;incstack = 0
  7000  004564  0100               	movlb	0	; () banked
  7001  004566  5183               	movf	___ftpack@exp& (0+255),w,b
  7002  004568  0100               	movlb	0	; () banked
  7003  00456A  B4D8               	btfsc	status,2,c
  7004  00456C  D008               	goto	l7172
  7005                           
  7006                           ; BSR set to: 0
  7007  00456E  0100               	movlb	0	; () banked
  7008  004570  5180               	movf	___ftpack@arg& (0+255),w,b
  7009  004572  0100               	movlb	0	; () banked
  7010  004574  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7011  004576  0100               	movlb	0	; () banked
  7012  004578  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7013  00457A  A4D8               	btfss	status,2,c
  7014  00457C  D011               	goto	l7178
  7015  00457E                     l7172:
  7016                           
  7017                           ; BSR set to: 0
  7018  00457E  0E00               	movlw	0
  7019  004580  0100               	movlb	0	; () banked
  7020  004582  6F80               	movwf	?___ftpack& (0+255),b
  7021  004584  0E00               	movlw	0
  7022  004586  0100               	movlb	0	; () banked
  7023  004588  6F81               	movwf	(?___ftpack+1)& (0+255),b
  7024  00458A  0E00               	movlw	0
  7025  00458C  0100               	movlb	0	; () banked
  7026  00458E  6F82               	movwf	(?___ftpack+2)& (0+255),b
  7027                           
  7028                           ; BSR set to: 0
  7029  004590  0012               	return	
  7030  004592                     l7176:
  7031                           
  7032                           ; BSR set to: 0
  7033  004592  0100               	movlb	0	; () banked
  7034  004594  2B83               	incf	___ftpack@exp& (0+255),f,b
  7035  004596  0100               	movlb	0	; () banked
  7036  004598  90D8               	bcf	status,0,c
  7037  00459A  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7038  00459C  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7039  00459E  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7040  0045A0                     l7178:
  7041                           
  7042                           ; BSR set to: 0
  7043  0045A0  0E00               	movlw	0
  7044  0045A2  0100               	movlb	0	; () banked
  7045  0045A4  1580               	andwf	___ftpack@arg& (0+255),w,b
  7046  0045A6  0100               	movlb	0	; () banked
  7047  0045A8  6F85               	movwf	??___ftpack& (0+255),b
  7048  0045AA  0E00               	movlw	0
  7049  0045AC  0100               	movlb	0	; () banked
  7050  0045AE  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7051  0045B0  0100               	movlb	0	; () banked
  7052  0045B2  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7053  0045B4  0EFE               	movlw	254
  7054  0045B6  0100               	movlb	0	; () banked
  7055  0045B8  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7056  0045BA  0100               	movlb	0	; () banked
  7057  0045BC  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7058  0045BE  0100               	movlb	0	; () banked
  7059  0045C0  5185               	movf	??___ftpack& (0+255),w,b
  7060  0045C2  0100               	movlb	0	; () banked
  7061  0045C4  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7062  0045C6  0100               	movlb	0	; () banked
  7063  0045C8  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7064  0045CA  B4D8               	btfsc	status,2,c
  7065  0045CC  D011               	goto	l7184
  7066  0045CE  D7E1               	goto	l7176
  7067  0045D0                     l7180:
  7068                           
  7069                           ; BSR set to: 0
  7070  0045D0  0100               	movlb	0	; () banked
  7071  0045D2  2B83               	incf	___ftpack@exp& (0+255),f,b
  7072                           
  7073                           ; BSR set to: 0
  7074  0045D4  0E01               	movlw	1
  7075  0045D6  0100               	movlb	0	; () banked
  7076  0045D8  2780               	addwf	___ftpack@arg& (0+255),f,b
  7077  0045DA  0E00               	movlw	0
  7078  0045DC  0100               	movlb	0	; () banked
  7079  0045DE  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  7080  0045E0  0E00               	movlw	0
  7081  0045E2  0100               	movlb	0	; () banked
  7082  0045E4  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  7083  0045E6  0100               	movlb	0	; () banked
  7084  0045E8  90D8               	bcf	status,0,c
  7085  0045EA  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7086  0045EC  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7087  0045EE  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7088  0045F0                     l7184:
  7089                           
  7090                           ; BSR set to: 0
  7091  0045F0  0E00               	movlw	0
  7092  0045F2  0100               	movlb	0	; () banked
  7093  0045F4  1580               	andwf	___ftpack@arg& (0+255),w,b
  7094  0045F6  0100               	movlb	0	; () banked
  7095  0045F8  6F85               	movwf	??___ftpack& (0+255),b
  7096  0045FA  0E00               	movlw	0
  7097  0045FC  0100               	movlb	0	; () banked
  7098  0045FE  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7099  004600  0100               	movlb	0	; () banked
  7100  004602  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7101  004604  0EFF               	movlw	255
  7102  004606  0100               	movlb	0	; () banked
  7103  004608  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7104  00460A  0100               	movlb	0	; () banked
  7105  00460C  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7106  00460E  0100               	movlb	0	; () banked
  7107  004610  5185               	movf	??___ftpack& (0+255),w,b
  7108  004612  0100               	movlb	0	; () banked
  7109  004614  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7110  004616  0100               	movlb	0	; () banked
  7111  004618  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7112  00461A  B4D8               	btfsc	status,2,c
  7113  00461C  D008               	goto	l7188
  7114  00461E  D7D8               	goto	l7180
  7115  004620                     l7186:
  7116                           
  7117                           ; BSR set to: 0
  7118  004620  0100               	movlb	0	; () banked
  7119  004622  0783               	decf	___ftpack@exp& (0+255),f,b
  7120  004624  0100               	movlb	0	; () banked
  7121  004626  90D8               	bcf	status,0,c
  7122  004628  3780               	rlcf	___ftpack@arg& (0+255),f,b
  7123  00462A  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  7124  00462C  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  7125  00462E                     l7188:
  7126                           
  7127                           ; BSR set to: 0
  7128  00462E  0100               	movlb	0	; () banked
  7129  004630  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  7130  004632  D004               	goto	l1850
  7131                           
  7132                           ; BSR set to: 0
  7133  004634  0E02               	movlw	2
  7134  004636  0100               	movlb	0	; () banked
  7135  004638  6183               	cpfslt	___ftpack@exp& (0+255),b
  7136  00463A  D7F2               	goto	l7186
  7137  00463C                     l1850:
  7138                           
  7139                           ; BSR set to: 0
  7140  00463C  0100               	movlb	0	; () banked
  7141  00463E  B183               	btfsc	___ftpack@exp& (0+255),0,b
  7142  004640  D002               	goto	l7194
  7143                           
  7144                           ; BSR set to: 0
  7145  004642  0100               	movlb	0	; () banked
  7146  004644  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  7147  004646                     l7194:
  7148                           
  7149                           ; BSR set to: 0
  7150  004646  0100               	movlb	0	; () banked
  7151  004648  90D8               	bcf	status,0,c
  7152  00464A  3383               	rrcf	___ftpack@exp& (0+255),f,b
  7153  00464C  0100               	movlb	0	; () banked
  7154  00464E  5183               	movf	___ftpack@exp& (0+255),w,b
  7155  004650  0100               	movlb	0	; () banked
  7156  004652  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  7157                           
  7158                           ; BSR set to: 0
  7159  004654  0100               	movlb	0	; () banked
  7160  004656  5184               	movf	___ftpack@sign& (0+255),w,b
  7161  004658  0100               	movlb	0	; () banked
  7162  00465A  B4D8               	btfsc	status,2,c
  7163  00465C  D002               	goto	l7200
  7164                           
  7165                           ; BSR set to: 0
  7166  00465E  0100               	movlb	0	; () banked
  7167  004660  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  7168  004662                     l7200:
  7169                           
  7170                           ; BSR set to: 0
  7171  004662  C080  F080         	movff	___ftpack@arg,?___ftpack
  7172  004666  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  7173  00466A  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  7174  00466E  0012               	return	
  7175  004670                     __end_of___ftpack:
  7176                           	opt stack 0
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           prodh	equ	0xFF4
  7182                           prodl	equ	0xFF3
  7183                           postinc0	equ	0xFEE
  7184                           wreg	equ	0xFE8
  7185                           postdec1	equ	0xFE5
  7186                           fsr1l	equ	0xFE1
  7187                           indf2	equ	0xFDF
  7188                           postinc2	equ	0xFDE
  7189                           postdec2	equ	0xFDD
  7190                           fsr2h	equ	0xFDA
  7191                           fsr2l	equ	0xFD9
  7192                           status	equ	0xFD8
  7193                           
  7194 ;; *************** function _Distribution *****************
  7195 ;; Defined at:
  7196 ;;		line 435 in file "sort.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;		None
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;		None
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      void 
  7203 ;; Registers used:
  7204 ;;		wreg, status,2, status,0, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;Total ram usage:        2 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    8
  7217 ;; This function calls:
  7218 ;;		_updateServoPosition
  7219 ;; This function is called by:
  7220 ;;		_sort
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           	psect	text14
  7225  00495C                     __ptext14:
  7226                           	opt stack 0
  7227  00495C                     _Distribution:
  7228                           	opt stack 21
  7229                           
  7230                           ;sort.c: 436: if(f_can_coming_to_distribution){
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;incstack = 0
  7234  00495C  0101               	movlb	1	; () banked
  7235  00495E  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  7236  004960  0101               	movlb	1	; () banked
  7237  004962  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  7238  004964  B4D8               	btfsc	status,2,c
  7239  004966  0012               	return	
  7240                           
  7241                           ; BSR set to: 1
  7242                           ;sort.c: 437: f_can_distributed = 0;
  7243  004968  0E00               	movlw	0
  7244  00496A  0101               	movlb	1	; () banked
  7245  00496C  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  7246  00496E  0E00               	movlw	0
  7247  004970  6F35               	movwf	_f_can_distributed& (0+255),b
  7248                           
  7249                           ;sort.c: 444: switch(cur_can){
  7250  004972  D034               	goto	l8568
  7251  004974                     l8558:
  7252                           
  7253                           ;sort.c: 446: updateServoPosition(400, 1);
  7254  004974  0E01               	movlw	1
  7255  004976  0100               	movlb	0	; () banked
  7256  004978  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7257  00497A  0E90               	movlw	144
  7258  00497C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7259  00497E  0E00               	movlw	0
  7260  004980  0100               	movlb	0	; () banked
  7261  004982  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7262  004984  0E01               	movlw	1
  7263  004986  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7264  004988  EC5F  F029         	call	_updateServoPosition	;wreg free
  7265                           
  7266                           ;sort.c: 447: break;
  7267  00498C  D03E               	goto	l8570
  7268  00498E                     l8560:
  7269                           
  7270                           ;sort.c: 449: updateServoPosition(850, 1);
  7271  00498E  0E03               	movlw	3
  7272  004990  0100               	movlb	0	; () banked
  7273  004992  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7274  004994  0E52               	movlw	82
  7275  004996  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7276  004998  0E00               	movlw	0
  7277  00499A  0100               	movlb	0	; () banked
  7278  00499C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7279  00499E  0E01               	movlw	1
  7280  0049A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7281  0049A2  EC5F  F029         	call	_updateServoPosition	;wreg free
  7282                           
  7283                           ;sort.c: 450: break;
  7284  0049A6  D031               	goto	l8570
  7285  0049A8                     l8562:
  7286                           
  7287                           ;sort.c: 452: updateServoPosition(1550, 1);
  7288  0049A8  0E06               	movlw	6
  7289  0049AA  0100               	movlb	0	; () banked
  7290  0049AC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7291  0049AE  0E0E               	movlw	14
  7292  0049B0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7293  0049B2  0E00               	movlw	0
  7294  0049B4  0100               	movlb	0	; () banked
  7295  0049B6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7296  0049B8  0E01               	movlw	1
  7297  0049BA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7298  0049BC  EC5F  F029         	call	_updateServoPosition	;wreg free
  7299                           
  7300                           ;sort.c: 453: break;
  7301  0049C0  D024               	goto	l8570
  7302  0049C2                     l8564:
  7303                           
  7304                           ;sort.c: 455: updateServoPosition(2500, 1);
  7305  0049C2  0E09               	movlw	9
  7306  0049C4  0100               	movlb	0	; () banked
  7307  0049C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7308  0049C8  0EC4               	movlw	196
  7309  0049CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7310  0049CC  0E00               	movlw	0
  7311  0049CE  0100               	movlb	0	; () banked
  7312  0049D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7313  0049D2  0E01               	movlw	1
  7314  0049D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7315  0049D6  EC5F  F029         	call	_updateServoPosition	;wreg free
  7316                           
  7317                           ;sort.c: 459: }
  7318                           
  7319                           ;sort.c: 458: break;
  7320                           
  7321                           ;sort.c: 457: default:
  7322                           
  7323                           ;sort.c: 456: break;
  7324  0049DA  D017               	goto	l8570
  7325  0049DC                     l8568:
  7326  0049DC  C12B  F088         	movff	_cur_can,??_Distribution
  7327  0049E0  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  7328                           
  7329                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7330                           ; Switch size 1, requested type "space"
  7331                           ; Number of cases is 1, Range of values is 0 to 0
  7332                           ; switch strategies available:
  7333                           ; Name         Instructions Cycles
  7334                           ; simple_byte            4     3 (average)
  7335                           ;	Chosen strategy is simple_byte
  7336  0049E4  0100               	movlb	0	; () banked
  7337  0049E6  5189               	movf	(??_Distribution+1)& (0+255),w,b
  7338  0049E8  0A00               	xorlw	0	; case 0
  7339  0049EA  A4D8               	btfss	status,2,c
  7340  0049EC  D00E               	goto	l8570
  7341                           
  7342                           ; BSR set to: 0
  7343                           ; Switch size 1, requested type "space"
  7344                           ; Number of cases is 4, Range of values is 0 to 3
  7345                           ; switch strategies available:
  7346                           ; Name         Instructions Cycles
  7347                           ; simple_byte           13     7 (average)
  7348                           ;	Chosen strategy is simple_byte
  7349  0049EE  0100               	movlb	0	; () banked
  7350  0049F0  5188               	movf	??_Distribution& (0+255),w,b
  7351  0049F2  0A00               	xorlw	0	; case 0
  7352  0049F4  B4D8               	btfsc	status,2,c
  7353  0049F6  D7BE               	goto	l8558
  7354  0049F8  0A01               	xorlw	1	; case 1
  7355  0049FA  B4D8               	btfsc	status,2,c
  7356  0049FC  D7C8               	goto	l8560
  7357  0049FE  0A03               	xorlw	3	; case 2
  7358  004A00  B4D8               	btfsc	status,2,c
  7359  004A02  D7D2               	goto	l8562
  7360  004A04  0A01               	xorlw	1	; case 3
  7361  004A06  B4D8               	btfsc	status,2,c
  7362  004A08  D7DC               	goto	l8564
  7363  004A0A                     l8570:
  7364                           
  7365                           ;sort.c: 460: updateServoPosition(1050, 3);
  7366  004A0A  0E04               	movlw	4
  7367  004A0C  0100               	movlb	0	; () banked
  7368  004A0E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7369  004A10  0E1A               	movlw	26
  7370  004A12  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7371  004A14  0E00               	movlw	0
  7372  004A16  0100               	movlb	0	; () banked
  7373  004A18  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7374  004A1A  0E03               	movlw	3
  7375  004A1C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7376  004A1E  EC5F  F029         	call	_updateServoPosition	;wreg free
  7377                           
  7378                           ;sort.c: 461: servo_timer_target = 750;
  7379  004A22  0E02               	movlw	2
  7380  004A24  6E70               	movwf	_servo_timer_target+1,c	;volatile
  7381  004A26  0EEE               	movlw	238
  7382  004A28  6E6F               	movwf	_servo_timer_target,c	;volatile
  7383                           
  7384                           ;sort.c: 462: f_panning_to_bin = 1;
  7385  004A2A  0E00               	movlw	0
  7386  004A2C  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  7387  004A2E  0E01               	movlw	1
  7388  004A30  6E69               	movwf	_f_panning_to_bin,c	;volatile
  7389                           
  7390                           ;sort.c: 463: f_can_coming_to_distribution = 0;
  7391  004A32  0E00               	movlw	0
  7392  004A34  0101               	movlb	1	; () banked
  7393  004A36  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  7394  004A38  0E00               	movlw	0
  7395  004A3A  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  7396  004A3C  0012               	return	
  7397  004A3E                     __end_of_Distribution:
  7398                           	opt stack 0
  7399                           tblptru	equ	0xFF8
  7400                           tblptrh	equ	0xFF7
  7401                           tblptrl	equ	0xFF6
  7402                           tablat	equ	0xFF5
  7403                           prodh	equ	0xFF4
  7404                           prodl	equ	0xFF3
  7405                           postinc0	equ	0xFEE
  7406                           wreg	equ	0xFE8
  7407                           postdec1	equ	0xFE5
  7408                           fsr1l	equ	0xFE1
  7409                           indf2	equ	0xFDF
  7410                           postinc2	equ	0xFDE
  7411                           postdec2	equ	0xFDD
  7412                           fsr2h	equ	0xFDA
  7413                           fsr2l	equ	0xFD9
  7414                           status	equ	0xFD8
  7415                           
  7416 ;; *************** function _machineConfig *****************
  7417 ;; Defined at:
  7418 ;;		line 15 in file "MachineConfig.c"
  7419 ;; Parameters:    Size  Location     Type
  7420 ;;		None
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;		None
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  1    wreg      void 
  7425 ;; Registers used:
  7426 ;;		wreg, status,2
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;Total ram usage:        0 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    7
  7439 ;; This function calls:
  7440 ;;		Nothing
  7441 ;; This function is called by:
  7442 ;;		_main
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text15
  7447  0056F8                     __ptext15:
  7448                           	opt stack 0
  7449  0056F8                     _machineConfig:
  7450                           	opt stack 23
  7451                           
  7452                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7453                           
  7454                           ; BSR set to: 1
  7455                           ;incstack = 0
  7456  0056F8  0EF0               	movlw	240
  7457  0056FA  6ED3               	movwf	4051,c	;volatile
  7458                           
  7459                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7460  0056FC  8C9B               	bsf	3995,6,c	;volatile
  7461                           
  7462                           ;MachineConfig.c: 22: TRISA = 0b00001111;
  7463  0056FE  0E0F               	movlw	15
  7464  005700  6E92               	movwf	3986,c	;volatile
  7465                           
  7466                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7467  005702  0EF2               	movlw	242
  7468  005704  6E93               	movwf	3987,c	;volatile
  7469                           
  7470                           ;MachineConfig.c: 27: TRISC = 0x00;
  7471  005706  0E00               	movlw	0
  7472  005708  6E94               	movwf	3988,c	;volatile
  7473                           
  7474                           ;MachineConfig.c: 31: TRISD = 0x00;
  7475  00570A  0E00               	movlw	0
  7476  00570C  6E95               	movwf	3989,c	;volatile
  7477                           
  7478                           ;MachineConfig.c: 34: TRISE = 0x00;
  7479  00570E  0E00               	movlw	0
  7480  005710  6E96               	movwf	3990,c	;volatile
  7481                           
  7482                           ;MachineConfig.c: 37: LATA = 0x00;
  7483  005712  0E00               	movlw	0
  7484  005714  6E89               	movwf	3977,c	;volatile
  7485                           
  7486                           ;MachineConfig.c: 38: LATB = 0x00;
  7487  005716  0E00               	movlw	0
  7488  005718  6E8A               	movwf	3978,c	;volatile
  7489                           
  7490                           ;MachineConfig.c: 39: LATC = 0x00;
  7491  00571A  0E00               	movlw	0
  7492  00571C  6E8B               	movwf	3979,c	;volatile
  7493                           
  7494                           ;MachineConfig.c: 40: LATD = 0x00;
  7495  00571E  0E00               	movlw	0
  7496  005720  6E8C               	movwf	3980,c	;volatile
  7497                           
  7498                           ;MachineConfig.c: 41: LATE = 0x00;
  7499  005722  0E00               	movlw	0
  7500  005724  6E8D               	movwf	3981,c	;volatile
  7501                           
  7502                           ;MachineConfig.c: 43: nRBPU = 0;
  7503  005726  9EF1               	bcf	intcon2,7,c	;volatile
  7504                           
  7505                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7506  005728  0E00               	movlw	0
  7507  00572A  6EC2               	movwf	4034,c	;volatile
  7508                           
  7509                           ;MachineConfig.c: 47: ADCON1 = 0b00001011;
  7510  00572C  0E0B               	movlw	11
  7511  00572E  6EC1               	movwf	4033,c	;volatile
  7512                           
  7513                           ;MachineConfig.c: 52: CVRCON = 0x00;
  7514  005730  0E00               	movlw	0
  7515  005732  6EB5               	movwf	4021,c	;volatile
  7516                           
  7517                           ;MachineConfig.c: 53: CMCONbits.CIS = 0;
  7518  005734  96B4               	bcf	4020,3,c	;volatile
  7519                           
  7520                           ;MachineConfig.c: 54: ADCON2 = 0b10110001;
  7521  005736  0EB1               	movlw	177
  7522  005738  6EC0               	movwf	4032,c	;volatile
  7523                           
  7524                           ;MachineConfig.c: 57: INT1IE = 1;
  7525  00573A  86F0               	bsf	intcon3,3,c	;volatile
  7526                           
  7527                           ;MachineConfig.c: 59: TMR0IE = 1;
  7528  00573C  8AF2               	bsf	intcon,5,c	;volatile
  7529                           
  7530                           ;MachineConfig.c: 60: TMR1IE = 1;
  7531  00573E  809D               	bsf	3997,0,c	;volatile
  7532                           
  7533                           ;MachineConfig.c: 61: TMR2IE = 1;
  7534  005740  829D               	bsf	3997,1,c	;volatile
  7535                           
  7536                           ;MachineConfig.c: 62: TMR3IE = 1;
  7537  005742  82A0               	bsf	4000,1,c	;volatile
  7538                           
  7539                           ;MachineConfig.c: 64: T1CON = 0b10110000;
  7540  005744  0EB0               	movlw	176
  7541  005746  6ECD               	movwf	4045,c	;volatile
  7542                           
  7543                           ;MachineConfig.c: 65: T2CON = 0b01111011;
  7544  005748  0E7B               	movlw	123
  7545  00574A  6ECA               	movwf	4042,c	;volatile
  7546                           
  7547                           ;MachineConfig.c: 66: PR2 = 0x22;
  7548  00574C  0E22               	movlw	34
  7549  00574E  6ECB               	movwf	4043,c	;volatile
  7550                           
  7551                           ;MachineConfig.c: 67: T3CON = 0b10110000;
  7552  005750  0EB0               	movlw	176
  7553  005752  6EB1               	movwf	4017,c	;volatile
  7554                           
  7555                           ;MachineConfig.c: 68: PEIE = 1;
  7556  005754  8CF2               	bsf	intcon,6,c	;volatile
  7557                           
  7558                           ;MachineConfig.c: 69: ADIE = 0;
  7559  005756  9C9D               	bcf	3997,6,c	;volatile
  7560                           
  7561                           ;MachineConfig.c: 70: (INTCONbits.GIE = 0);
  7562  005758  9EF2               	bcf	intcon,7,c	;volatile
  7563  00575A  0012               	return		;funcret
  7564  00575C                     __end_of_machineConfig:
  7565                           	opt stack 0
  7566                           tblptru	equ	0xFF8
  7567                           tblptrh	equ	0xFF7
  7568                           tblptrl	equ	0xFF6
  7569                           tablat	equ	0xFF5
  7570                           prodh	equ	0xFF4
  7571                           prodl	equ	0xFF3
  7572                           intcon	equ	0xFF2
  7573                           intcon2	equ	0xFF1
  7574                           intcon3	equ	0xFF0
  7575                           postinc0	equ	0xFEE
  7576                           wreg	equ	0xFE8
  7577                           postdec1	equ	0xFE5
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           postdec2	equ	0xFDD
  7582                           fsr2h	equ	0xFDA
  7583                           fsr2l	equ	0xFD9
  7584                           status	equ	0xFD8
  7585                           
  7586 ;; *************** function _logRun *****************
  7587 ;; Defined at:
  7588 ;;		line 88 in file "EEPROM.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;		None
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7593 ;;  i               2   55[BANK0 ] int 
  7594 ;;  num             1   49[BANK0 ] unsigned char 
  7595 ;;  addr            2   57[BANK0 ] unsigned short 
  7596 ;;  byte11          1   54[BANK0 ] unsigned char 
  7597 ;;  byte3           1   52[BANK0 ] unsigned char 
  7598 ;;  byte2           1   51[BANK0 ] unsigned char 
  7599 ;;  byte1           1   50[BANK0 ] unsigned char 
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  1    wreg      void 
  7602 ;; Registers used:
  7603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;Total ram usage:       10 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; Hardware stack levels required when called:   11
  7616 ;; This function calls:
  7617 ;;		_EEPROM_read
  7618 ;;		_EEPROM_write
  7619 ;; This function is called by:
  7620 ;;		_main
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text16
  7625  004302                     __ptext16:
  7626                           	opt stack 0
  7627  004302                     _logRun:
  7628                           	opt stack 19
  7629                           
  7630                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7631                           
  7632                           ;incstack = 0
  7633  004302  0E00               	movlw	0
  7634  004304  0100               	movlb	0	; () banked
  7635  004306  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7636  004308  0E00               	movlw	0
  7637  00430A  6F80               	movwf	EEPROM_read@address& (0+255),b
  7638  00430C  EC26  F030         	call	_EEPROM_read	;wreg free
  7639  004310  0100               	movlb	0	; () banked
  7640  004312  6FFD               	movwf	_sel& (0+255),b
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7644  004314  0100               	movlb	0	; () banked
  7645  004316  51FD               	movf	_sel& (0+255),w,b
  7646  004318  0D0B               	mullw	11
  7647  00431A  0E01               	movlw	1
  7648  00431C  24F3               	addwf	prodl,w,c
  7649  00431E  0100               	movlb	0	; () banked
  7650  004320  6FB9               	movwf	logRun@addr& (0+255),b
  7651  004322  0E00               	movlw	0
  7652  004324  20F4               	addwfc	prodh,w,c
  7653  004326  0100               	movlb	0	; () banked
  7654  004328  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;EEPROM.c: 105: if (sel < 3){
  7658  00432A  0E03               	movlw	3
  7659  00432C  0100               	movlb	0	; () banked
  7660  00432E  61FD               	cpfslt	_sel& (0+255),b
  7661  004330  D00E               	goto	l10286
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7665  004332  0100               	movlb	0	; () banked
  7666  004334  29FD               	incf	_sel& (0+255),w,b
  7667  004336  0100               	movlb	0	; () banked
  7668  004338  6FB1               	movwf	logRun@num& (0+255),b
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7672  00433A  0E00               	movlw	0
  7673  00433C  0100               	movlb	0	; () banked
  7674  00433E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7675  004340  0E00               	movlw	0
  7676  004342  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7677  004344  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7678  004348  EC3A  F024         	call	_EEPROM_write	;wreg free
  7679                           
  7680                           ;EEPROM.c: 108: }
  7681  00434C  D00A               	goto	l10288
  7682  00434E                     l10286:
  7683                           
  7684                           ;EEPROM.c: 109: else{
  7685                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7686  00434E  0E00               	movlw	0
  7687  004350  0100               	movlb	0	; () banked
  7688  004352  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7689  004354  0E00               	movlw	0
  7690  004356  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7691  004358  0E00               	movlw	0
  7692  00435A  0100               	movlb	0	; () banked
  7693  00435C  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7694  00435E  EC3A  F024         	call	_EEPROM_write	;wreg free
  7695  004362                     l10288:
  7696                           
  7697                           ;EEPROM.c: 111: }
  7698                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7699  004362  0100               	movlb	0	; () banked
  7700  004364  51FE               	movf	_count_total& (0+255),w,b
  7701  004366  0980               	iorlw	128
  7702  004368  0100               	movlb	0	; () banked
  7703  00436A  6FB2               	movwf	logRun@byte1& (0+255),b
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7707  00436C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7708  004370  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7709  004374  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7710  004378  EC3A  F024         	call	_EEPROM_write	;wreg free
  7711                           
  7712                           ;EEPROM.c: 116: addr++;
  7713  00437C  0100               	movlb	0	; () banked
  7714  00437E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7715  004380  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7719  004382  3861               	swapf	_count_pop_no_tab,w,c
  7720  004384  0BF0               	andlw	240
  7721  004386  1063               	iorwf	_count_pop_w_tab,w,c
  7722  004388  0100               	movlb	0	; () banked
  7723  00438A  6FB3               	movwf	logRun@byte2& (0+255),b
  7724                           
  7725                           ; BSR set to: 0
  7726                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7727  00438C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7728  004390  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7729  004394  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7730  004398  EC3A  F024         	call	_EEPROM_write	;wreg free
  7731                           
  7732                           ;EEPROM.c: 121: addr++;
  7733  00439C  0100               	movlb	0	; () banked
  7734  00439E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7735  0043A0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7739  0043A2  385F               	swapf	_count_can_w_lab,w,c
  7740  0043A4  0BF0               	andlw	240
  7741  0043A6  105D               	iorwf	_count_can_no_lab,w,c
  7742  0043A8  0100               	movlb	0	; () banked
  7743  0043AA  6FB4               	movwf	logRun@byte3& (0+255),b
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7747  0043AC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7748  0043B0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7749  0043B4  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7750  0043B8  EC3A  F024         	call	_EEPROM_write	;wreg free
  7751                           
  7752                           ;EEPROM.c: 124: addr++;
  7753  0043BC  0100               	movlb	0	; () banked
  7754  0043BE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7755  0043C0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7759  0043C2  0E00               	movlw	0
  7760  0043C4  0100               	movlb	0	; () banked
  7761  0043C6  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7762  0043C8  0E00               	movlw	0
  7763  0043CA  6FB7               	movwf	logRun@i& (0+255),b
  7764                           
  7765                           ; BSR set to: 0
  7766  0043CC  0100               	movlb	0	; () banked
  7767  0043CE  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7768  0043D0  D008               	goto	l10312
  7769  0043D2  0100               	movlb	0	; () banked
  7770  0043D4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7771  0043D6  E128               	bnz	l1187
  7772  0043D8  0E07               	movlw	7
  7773  0043DA  0100               	movlb	0	; () banked
  7774  0043DC  5DB7               	subwf	logRun@i& (0+255),w,b
  7775  0043DE  B0D8               	btfsc	status,0,c
  7776  0043E0  D023               	goto	l1187
  7777  0043E2                     l10312:
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7781  0043E2  90D8               	bcf	status,0,c
  7782  0043E4  0100               	movlb	0	; () banked
  7783  0043E6  35B7               	rlcf	logRun@i& (0+255),w,b
  7784  0043E8  6ED9               	movwf	fsr2l,c
  7785  0043EA  0100               	movlb	0	; () banked
  7786  0043EC  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7787  0043EE  6EDA               	movwf	fsr2h,c
  7788  0043F0  0E0E               	movlw	low _startTime
  7789  0043F2  26D9               	addwf	fsr2l,f,c
  7790  0043F4  0E01               	movlw	high _startTime
  7791  0043F6  22DA               	addwfc	fsr2h,f,c
  7792  0043F8  50DF               	movf	indf2,w,c
  7793  0043FA  0100               	movlb	0	; () banked
  7794  0043FC  6FB5               	movwf	logRun@byte_i& (0+255),b
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7798  0043FE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7799  004402  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7800  004406  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7801  00440A  EC3A  F024         	call	_EEPROM_write	;wreg free
  7802                           
  7803                           ;EEPROM.c: 130: addr++;
  7804  00440E  0100               	movlb	0	; () banked
  7805  004410  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7806  004412  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7807                           
  7808                           ; BSR set to: 0
  7809  004414  0100               	movlb	0	; () banked
  7810  004416  4BB7               	infsnz	logRun@i& (0+255),f,b
  7811  004418  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7812                           
  7813                           ; BSR set to: 0
  7814  00441A  0100               	movlb	0	; () banked
  7815  00441C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7816  00441E  D7E1               	goto	l10312
  7817  004420  0100               	movlb	0	; () banked
  7818  004422  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7819  004424  E101               	bnz	u10340
  7820  004426  D7D8               	goto	L9
  7821  004428                     u10340:
  7822  004428                     l1187:
  7823                           
  7824                           ; BSR set to: 0
  7825                           ;EEPROM.c: 131: }
  7826                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7827  004428  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7828                           
  7829                           ; BSR set to: 0
  7830                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7831  00442C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7832  004430  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7833  004434  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7834  004438  EC3A  F024         	call	_EEPROM_write	;wreg free
  7835  00443C  0012               	return		;funcret
  7836  00443E                     __end_of_logRun:
  7837                           	opt stack 0
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           intcon	equ	0xFF2
  7845                           intcon2	equ	0xFF1
  7846                           intcon3	equ	0xFF0
  7847                           postinc0	equ	0xFEE
  7848                           wreg	equ	0xFE8
  7849                           postdec1	equ	0xFE5
  7850                           fsr1l	equ	0xFE1
  7851                           indf2	equ	0xFDF
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function _initUI *****************
  7859 ;; Defined at:
  7860 ;;		line 62 in file "UI.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;		None
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      void 
  7867 ;; Registers used:
  7868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;Total ram usage:        0 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:   12
  7881 ;; This function calls:
  7882 ;;		_change_state_to_menu_start
  7883 ;;		_loadRTC
  7884 ;; This function is called by:
  7885 ;;		_main
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text17
  7890  005C50                     __ptext17:
  7891                           	opt stack 0
  7892  005C50                     _initUI:
  7893                           	opt stack 18
  7894                           
  7895                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7896                           
  7897                           ;incstack = 0
  7898  005C50  8EF2               	bsf	intcon,7,c	;volatile
  7899                           
  7900                           ;UI.c: 64: machine_state = UI_state;
  7901  005C52  0E00               	movlw	0
  7902  005C54  0100               	movlb	0	; () banked
  7903  005C56  6FFC               	movwf	_machine_state& (0+255),b
  7904                           
  7905                           ;UI.c: 65: logstate = 0;
  7906  005C58  0E00               	movlw	0
  7907  005C5A  0100               	movlb	0	; () banked
  7908  005C5C  6FF9               	movwf	(_logstate+1)& (0+255),b
  7909  005C5E  0E00               	movlw	0
  7910  005C60  6FF8               	movwf	_logstate& (0+255),b
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;UI.c: 67: if(RTCflag){
  7914  005C62  0100               	movlb	0	; () banked
  7915  005C64  51E6               	movf	_RTCflag& (0+255),w,b
  7916  005C66  0100               	movlb	0	; () banked
  7917  005C68  11E7               	iorwf	(_RTCflag+1)& (0+255),w,b
  7918  005C6A  A4D8               	btfss	status,2,c
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;UI.c: 68: loadRTC();
  7922  005C6C  ECD6  F028         	call	_loadRTC	;wreg free
  7923                           
  7924                           ;UI.c: 69: }
  7925                           ;UI.c: 71: change_state_to_menu_start();
  7926  005C70  EC46  F02F         	call	_change_state_to_menu_start	;wreg free
  7927                           
  7928                           ;UI.c: 72: firstboot = 1;
  7929  005C74  0E00               	movlw	0
  7930  005C76  0101               	movlb	1	; () banked
  7931  005C78  6F3C               	movwf	(_firstboot+1)& (0+255),b
  7932  005C7A  0E01               	movlw	1
  7933  005C7C  6F3B               	movwf	_firstboot& (0+255),b
  7934                           
  7935                           ; BSR set to: 1
  7936  005C7E  0012               	return		;funcret
  7937  005C80                     __end_of_initUI:
  7938                           	opt stack 0
  7939                           tblptru	equ	0xFF8
  7940                           tblptrh	equ	0xFF7
  7941                           tblptrl	equ	0xFF6
  7942                           tablat	equ	0xFF5
  7943                           prodh	equ	0xFF4
  7944                           prodl	equ	0xFF3
  7945                           intcon	equ	0xFF2
  7946                           intcon2	equ	0xFF1
  7947                           intcon3	equ	0xFF0
  7948                           postinc0	equ	0xFEE
  7949                           wreg	equ	0xFE8
  7950                           postdec1	equ	0xFE5
  7951                           fsr1l	equ	0xFE1
  7952                           indf2	equ	0xFDF
  7953                           postinc2	equ	0xFDE
  7954                           postdec2	equ	0xFDD
  7955                           fsr2h	equ	0xFDA
  7956                           fsr2l	equ	0xFD9
  7957                           status	equ	0xFD8
  7958                           
  7959 ;; *************** function _loadRTC *****************
  7960 ;; Defined at:
  7961 ;;		line 28 in file "RTC.c"
  7962 ;; Parameters:    Size  Location     Type
  7963 ;;		None
  7964 ;; Auto vars:     Size  Location     Type
  7965 ;;  i               2   22[BANK0 ] int 
  7966 ;; Return value:  Size  Location     Type
  7967 ;;                  1    wreg      void 
  7968 ;; Registers used:
  7969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7970 ;; Tracked objects:
  7971 ;;		On entry : 0/0
  7972 ;;		On exit  : 0/0
  7973 ;;		Unchanged: 0/0
  7974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7979 ;;Total ram usage:        3 bytes
  7980 ;; Hardware stack levels used:    1
  7981 ;; Hardware stack levels required when called:    9
  7982 ;; This function calls:
  7983 ;;		_I2C_Master_Init
  7984 ;;		_I2C_Master_Start
  7985 ;;		_I2C_Master_Stop
  7986 ;;		_I2C_Master_Write
  7987 ;; This function is called by:
  7988 ;;		_initUI
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           	psect	text18
  7993  0051AC                     __ptext18:
  7994                           	opt stack 0
  7995  0051AC                     _loadRTC:
  7996                           	opt stack 20
  7997                           
  7998                           ;RTC.c: 30: I2C_Master_Init(10000);
  7999                           
  8000                           ; BSR set to: 1
  8001                           ;incstack = 0
  8002  0051AC  0E10               	movlw	16
  8003  0051AE  0100               	movlb	0	; () banked
  8004  0051B0  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  8005  0051B2  0E27               	movlw	39
  8006  0051B4  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  8007  0051B6  0E00               	movlw	0
  8008  0051B8  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  8009  0051BA  0E00               	movlw	0
  8010  0051BC  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  8011  0051BE  ECDF  F02B         	call	_I2C_Master_Init	;wreg free
  8012                           
  8013                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  8014  0051C2  9EF2               	bcf	intcon,7,c	;volatile
  8015                           
  8016                           ;RTC.c: 34: I2C_Master_Start();
  8017  0051C4  EC89  F030         	call	_I2C_Master_Start	;wreg free
  8018                           
  8019                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  8020  0051C8  0E00               	movlw	0
  8021  0051CA  0100               	movlb	0	; () banked
  8022  0051CC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8023  0051CE  0ED0               	movlw	208
  8024  0051D0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8025  0051D2  EC77  F030         	call	_I2C_Master_Write	;wreg free
  8026                           
  8027                           ;RTC.c: 36: I2C_Master_Write(0x00);
  8028  0051D6  0E00               	movlw	0
  8029  0051D8  0100               	movlb	0	; () banked
  8030  0051DA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8031  0051DC  0E00               	movlw	0
  8032  0051DE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8033  0051E0  EC77  F030         	call	_I2C_Master_Write	;wreg free
  8034                           
  8035                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  8036  0051E4  0E00               	movlw	0
  8037  0051E6  0100               	movlb	0	; () banked
  8038  0051E8  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  8039  0051EA  0E00               	movlw	0
  8040  0051EC  6F96               	movwf	loadRTC@i& (0+255),b
  8041  0051EE                     l7888:
  8042                           
  8043                           ; BSR set to: 0
  8044  0051EE  0100               	movlb	0	; () banked
  8045  0051F0  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  8046  0051F2  D008               	goto	l7892
  8047  0051F4  0100               	movlb	0	; () banked
  8048  0051F6  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  8049  0051F8  E11B               	bnz	l7898
  8050  0051FA  0E07               	movlw	7
  8051  0051FC  0100               	movlb	0	; () banked
  8052  0051FE  5D96               	subwf	loadRTC@i& (0+255),w,b
  8053  005200  B0D8               	btfsc	status,0,c
  8054  005202  D016               	goto	l7898
  8055  005204                     l7892:
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  8059  005204  0E24               	movlw	low _time
  8060  005206  0100               	movlb	0	; () banked
  8061  005208  2596               	addwf	loadRTC@i& (0+255),w,b
  8062  00520A  6ED9               	movwf	fsr2l,c
  8063  00520C  0E01               	movlw	high _time
  8064  00520E  0100               	movlb	0	; () banked
  8065  005210  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  8066  005212  6EDA               	movwf	fsr2h,c
  8067  005214  50DF               	movf	indf2,w,c
  8068  005216  0100               	movlb	0	; () banked
  8069  005218  6F95               	movwf	??_loadRTC& (0+255),b
  8070  00521A  0100               	movlb	0	; () banked
  8071  00521C  5195               	movf	??_loadRTC& (0+255),w,b
  8072  00521E  0100               	movlb	0	; () banked
  8073  005220  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8074  005222  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8075  005224  EC77  F030         	call	_I2C_Master_Write	;wreg free
  8076  005228  0100               	movlb	0	; () banked
  8077  00522A  4B96               	infsnz	loadRTC@i& (0+255),f,b
  8078  00522C  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  8079  00522E  D7DF               	goto	l7888
  8080  005230                     l7898:
  8081                           
  8082                           ; BSR set to: 0
  8083                           ;RTC.c: 39: }
  8084                           ;RTC.c: 40: I2C_Master_Stop();
  8085  005230  EC85  F030         	call	_I2C_Master_Stop	;wreg free
  8086                           
  8087                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  8088  005234  8EF2               	bsf	intcon,7,c	;volatile
  8089  005236  0012               	return		;funcret
  8090  005238                     __end_of_loadRTC:
  8091                           	opt stack 0
  8092                           tblptru	equ	0xFF8
  8093                           tblptrh	equ	0xFF7
  8094                           tblptrl	equ	0xFF6
  8095                           tablat	equ	0xFF5
  8096                           prodh	equ	0xFF4
  8097                           prodl	equ	0xFF3
  8098                           intcon	equ	0xFF2
  8099                           intcon2	equ	0xFF1
  8100                           intcon3	equ	0xFF0
  8101                           postinc0	equ	0xFEE
  8102                           wreg	equ	0xFE8
  8103                           postdec1	equ	0xFE5
  8104                           fsr1l	equ	0xFE1
  8105                           indf2	equ	0xFDF
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _I2C_Master_Init *****************
  8113 ;; Defined at:
  8114 ;;		line 15 in file "I2C.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;  c               4   13[BANK0 ] const unsigned long 
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      void 
  8121 ;; Registers used:
  8122 ;;		wreg, status,2, status,0, cstack
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8128 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;Total ram usage:        8 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    8
  8135 ;; This function calls:
  8136 ;;		___lldiv
  8137 ;; This function is called by:
  8138 ;;		_main
  8139 ;;		_loadRTC
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           	psect	text19
  8144  0057BE                     __ptext19:
  8145                           	opt stack 0
  8146  0057BE                     _I2C_Master_Init:
  8147                           	opt stack 20
  8148                           
  8149                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  8150                           
  8151                           ;incstack = 0
  8152  0057BE  0E00               	movlw	0
  8153  0057C0  6EC7               	movwf	4039,c	;volatile
  8154                           
  8155                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  8156  0057C2  0E28               	movlw	40
  8157  0057C4  6EC6               	movwf	4038,c	;volatile
  8158                           
  8159                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  8160  0057C6  0E00               	movlw	0
  8161  0057C8  6EC5               	movwf	4037,c	;volatile
  8162                           
  8163                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  8164  0057CA  0E00               	movlw	0
  8165  0057CC  0100               	movlb	0	; () banked
  8166  0057CE  6F80               	movwf	___lldiv@dividend& (0+255),b
  8167  0057D0  0E48               	movlw	72
  8168  0057D2  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  8169  0057D4  0EE8               	movlw	232
  8170  0057D6  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  8171  0057D8  0E01               	movlw	1
  8172  0057DA  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  8173  0057DC  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8174  0057E0  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8175  0057E4  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8176  0057E8  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8177  0057EC  0E02               	movlw	2
  8178  0057EE                     u6495:
  8179  0057EE  90D8               	bcf	status,0,c
  8180  0057F0  0100               	movlb	0	; () banked
  8181  0057F2  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8182  0057F4  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8183  0057F6  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8184  0057F8  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8185  0057FA  2EE8               	decfsz	wreg,f,c
  8186  0057FC  D7F8               	goto	u6495
  8187  0057FE  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  8188  005802  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8189  005806  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8190  00580A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8191  00580E  EC86  F027         	call	___lldiv	;wreg free
  8192  005812  0100               	movlb	0	; () banked
  8193  005814  0580               	decf	?___lldiv& (0+255),w,b
  8194  005816  6EC8               	movwf	4040,c	;volatile
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;I2C.c: 22: TRISC3 = 1;
  8198  005818  8694               	bsf	3988,3,c	;volatile
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;I2C.c: 23: TRISC4 = 1;
  8202  00581A  8894               	bsf	3988,4,c	;volatile
  8203                           
  8204                           ; BSR set to: 0
  8205  00581C  0012               	return		;funcret
  8206  00581E                     __end_of_I2C_Master_Init:
  8207                           	opt stack 0
  8208                           tblptru	equ	0xFF8
  8209                           tblptrh	equ	0xFF7
  8210                           tblptrl	equ	0xFF6
  8211                           tablat	equ	0xFF5
  8212                           prodh	equ	0xFF4
  8213                           prodl	equ	0xFF3
  8214                           intcon	equ	0xFF2
  8215                           intcon2	equ	0xFF1
  8216                           intcon3	equ	0xFF0
  8217                           postinc0	equ	0xFEE
  8218                           wreg	equ	0xFE8
  8219                           postdec1	equ	0xFE5
  8220                           fsr1l	equ	0xFE1
  8221                           indf2	equ	0xFDF
  8222                           postinc2	equ	0xFDE
  8223                           postdec2	equ	0xFDD
  8224                           fsr2h	equ	0xFDA
  8225                           fsr2l	equ	0xFD9
  8226                           status	equ	0xFD8
  8227                           
  8228 ;; *************** function ___lldiv *****************
  8229 ;; Defined at:
  8230 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  dividend        4    0[BANK0 ] unsigned long 
  8233 ;;  divisor         4    4[BANK0 ] unsigned long 
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;  quotient        4    8[BANK0 ] unsigned long 
  8236 ;;  counter         1   12[BANK0 ] unsigned char 
  8237 ;; Return value:  Size  Location     Type
  8238 ;;                  4    0[BANK0 ] unsigned long 
  8239 ;; Registers used:
  8240 ;;		wreg, status,2, status,0
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8246 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;Total ram usage:       13 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:    7
  8253 ;; This function calls:
  8254 ;;		Nothing
  8255 ;; This function is called by:
  8256 ;;		_I2C_Master_Init
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           	psect	text20
  8261  004F0C                     __ptext20:
  8262                           	opt stack 0
  8263  004F0C                     ___lldiv:
  8264                           	opt stack 20
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;incstack = 0
  8268  004F0C  0E00               	movlw	0
  8269  004F0E  0100               	movlb	0	; () banked
  8270  004F10  6F88               	movwf	___lldiv@quotient& (0+255),b
  8271  004F12  0E00               	movlw	0
  8272  004F14  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8273  004F16  0E00               	movlw	0
  8274  004F18  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8275  004F1A  0E00               	movlw	0
  8276  004F1C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8277                           
  8278                           ; BSR set to: 0
  8279  004F1E  0100               	movlb	0	; () banked
  8280  004F20  5184               	movf	___lldiv@divisor& (0+255),w,b
  8281  004F22  0100               	movlb	0	; () banked
  8282  004F24  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8283  004F26  0100               	movlb	0	; () banked
  8284  004F28  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8285  004F2A  0100               	movlb	0	; () banked
  8286  004F2C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8287  004F2E  B4D8               	btfsc	status,2,c
  8288  004F30  D042               	goto	l1980
  8289                           
  8290                           ; BSR set to: 0
  8291  004F32  0E01               	movlw	1
  8292  004F34  0100               	movlb	0	; () banked
  8293  004F36  6F8C               	movwf	___lldiv@counter& (0+255),b
  8294  004F38  D008               	goto	l7212
  8295  004F3A                     l7210:
  8296                           
  8297                           ; BSR set to: 0
  8298  004F3A  0100               	movlb	0	; () banked
  8299  004F3C  90D8               	bcf	status,0,c
  8300  004F3E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8301  004F40  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8302  004F42  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8303  004F44  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8304  004F46  0100               	movlb	0	; () banked
  8305  004F48  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8306  004F4A                     l7212:
  8307                           
  8308                           ; BSR set to: 0
  8309  004F4A  0100               	movlb	0	; () banked
  8310  004F4C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8311  004F4E  D7F5               	goto	l7210
  8312  004F50                     l7214:
  8313                           
  8314                           ; BSR set to: 0
  8315  004F50  0100               	movlb	0	; () banked
  8316  004F52  90D8               	bcf	status,0,c
  8317  004F54  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8318  004F56  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8319  004F58  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8320  004F5A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8321                           
  8322                           ; BSR set to: 0
  8323  004F5C  0100               	movlb	0	; () banked
  8324  004F5E  5184               	movf	___lldiv@divisor& (0+255),w,b
  8325  004F60  0100               	movlb	0	; () banked
  8326  004F62  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8327  004F64  0100               	movlb	0	; () banked
  8328  004F66  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8329  004F68  0100               	movlb	0	; () banked
  8330  004F6A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8331  004F6C  0100               	movlb	0	; () banked
  8332  004F6E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8333  004F70  0100               	movlb	0	; () banked
  8334  004F72  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8335  004F74  0100               	movlb	0	; () banked
  8336  004F76  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8337  004F78  0100               	movlb	0	; () banked
  8338  004F7A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8339  004F7C  A0D8               	btfss	status,0,c
  8340  004F7E  D012               	goto	l7222
  8341                           
  8342                           ; BSR set to: 0
  8343  004F80  0100               	movlb	0	; () banked
  8344  004F82  5184               	movf	___lldiv@divisor& (0+255),w,b
  8345  004F84  0100               	movlb	0	; () banked
  8346  004F86  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8347  004F88  0100               	movlb	0	; () banked
  8348  004F8A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8349  004F8C  0100               	movlb	0	; () banked
  8350  004F8E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8351  004F90  0100               	movlb	0	; () banked
  8352  004F92  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8353  004F94  0100               	movlb	0	; () banked
  8354  004F96  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8355  004F98  0100               	movlb	0	; () banked
  8356  004F9A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8357  004F9C  0100               	movlb	0	; () banked
  8358  004F9E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8359                           
  8360                           ; BSR set to: 0
  8361  004FA0  0100               	movlb	0	; () banked
  8362  004FA2  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8363  004FA4                     l7222:
  8364                           
  8365                           ; BSR set to: 0
  8366  004FA4  0100               	movlb	0	; () banked
  8367  004FA6  90D8               	bcf	status,0,c
  8368  004FA8  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8369  004FAA  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8370  004FAC  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8371  004FAE  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8372                           
  8373                           ; BSR set to: 0
  8374  004FB0  0100               	movlb	0	; () banked
  8375  004FB2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8376  004FB4  D7CD               	goto	l7214
  8377  004FB6                     l1980:
  8378                           
  8379                           ; BSR set to: 0
  8380  004FB6  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8381  004FBA  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8382  004FBE  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8383  004FC2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8384                           
  8385                           ; BSR set to: 0
  8386  004FC6  0012               	return		;funcret
  8387  004FC8                     __end_of___lldiv:
  8388                           	opt stack 0
  8389                           tblptru	equ	0xFF8
  8390                           tblptrh	equ	0xFF7
  8391                           tblptrl	equ	0xFF6
  8392                           tablat	equ	0xFF5
  8393                           prodh	equ	0xFF4
  8394                           prodl	equ	0xFF3
  8395                           intcon	equ	0xFF2
  8396                           intcon2	equ	0xFF1
  8397                           intcon3	equ	0xFF0
  8398                           postinc0	equ	0xFEE
  8399                           wreg	equ	0xFE8
  8400                           postdec1	equ	0xFE5
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           fsr2h	equ	0xFDA
  8406                           fsr2l	equ	0xFD9
  8407                           status	equ	0xFD8
  8408                           
  8409 ;; *************** function _change_state_to_menu_start *****************
  8410 ;; Defined at:
  8411 ;;		line 477 in file "UI.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;		None
  8416 ;; Return value:  Size  Location     Type
  8417 ;;                  1    wreg      void 
  8418 ;; Registers used:
  8419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8429 ;;Total ram usage:        0 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:   11
  8432 ;; This function calls:
  8433 ;;		_lcdInst
  8434 ;;		_printRTC
  8435 ;;		_printf
  8436 ;; This function is called by:
  8437 ;;		_initUI
  8438 ;; This function uses a non-reentrant model
  8439 ;;
  8440                           
  8441                           	psect	text21
  8442  005E8C                     __ptext21:
  8443                           	opt stack 0
  8444  005E8C                     _change_state_to_menu_start:
  8445                           	opt stack 18
  8446                           
  8447                           ;UI.c: 478: cur_state = 0;
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;incstack = 0
  8451  005E8C  0E00               	movlw	0
  8452  005E8E  0100               	movlb	0	; () banked
  8453  005E90  6FE9               	movwf	(_cur_state+1)& (0+255),b
  8454  005E92  0E00               	movlw	0
  8455  005E94  6FE8               	movwf	_cur_state& (0+255),b
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;UI.c: 480: lcdInst(0b10000000);;
  8459  005E96  0E80               	movlw	128
  8460  005E98  EC63  F030         	call	_lcdInst
  8461                           
  8462                           ;UI.c: 481: printRTC();
  8463  005E9C  ECEB  F019         	call	_printRTC	;wreg free
  8464                           
  8465                           ;UI.c: 482: lcdInst(0b11000000);;
  8466  005EA0  0EC0               	movlw	192
  8467  005EA2  EC63  F030         	call	_lcdInst
  8468                           
  8469                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8470  005EA6  0E06               	movlw	low STR_30
  8471  005EA8  0100               	movlb	0	; () banked
  8472  005EAA  6F8E               	movwf	printf@f& (0+255),b
  8473  005EAC  0EFE               	movlw	high STR_30
  8474  005EAE  0100               	movlb	0	; () banked
  8475  005EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8476  005EB2  ECE7  F00E         	call	_printf	;wreg free
  8477  005EB6  0012               	return		;funcret
  8478  005EB8                     __end_of_change_state_to_menu_start:
  8479                           	opt stack 0
  8480                           tblptru	equ	0xFF8
  8481                           tblptrh	equ	0xFF7
  8482                           tblptrl	equ	0xFF6
  8483                           tablat	equ	0xFF5
  8484                           prodh	equ	0xFF4
  8485                           prodl	equ	0xFF3
  8486                           intcon	equ	0xFF2
  8487                           intcon2	equ	0xFF1
  8488                           intcon3	equ	0xFF0
  8489                           postinc0	equ	0xFEE
  8490                           wreg	equ	0xFE8
  8491                           postdec1	equ	0xFE5
  8492                           fsr1l	equ	0xFE1
  8493                           indf2	equ	0xFDF
  8494                           postinc2	equ	0xFDE
  8495                           postdec2	equ	0xFDD
  8496                           fsr2h	equ	0xFDA
  8497                           fsr2l	equ	0xFD9
  8498                           status	equ	0xFD8
  8499                           
  8500 ;; *************** function _initTime *****************
  8501 ;; Defined at:
  8502 ;;		line 17 in file "RTC.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  s               1    wreg     unsigned char 
  8505 ;;  m               1    0[BANK0 ] unsigned char 
  8506 ;;  h               1    1[BANK0 ] unsigned char 
  8507 ;;  w               1    2[BANK0 ] unsigned char 
  8508 ;;  DD              1    3[BANK0 ] unsigned char 
  8509 ;;  MM              1    4[BANK0 ] unsigned char 
  8510 ;;  YY              1    5[BANK0 ] unsigned char 
  8511 ;; Auto vars:     Size  Location     Type
  8512 ;;  s               1    6[BANK0 ] unsigned char 
  8513 ;; Return value:  Size  Location     Type
  8514 ;;                  1    wreg      void 
  8515 ;; Registers used:
  8516 ;;		wreg
  8517 ;; Tracked objects:
  8518 ;;		On entry : 0/0
  8519 ;;		On exit  : 0/0
  8520 ;;		Unchanged: 0/0
  8521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8522 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;Total ram usage:        7 bytes
  8527 ;; Hardware stack levels used:    1
  8528 ;; Hardware stack levels required when called:    7
  8529 ;; This function calls:
  8530 ;;		Nothing
  8531 ;; This function is called by:
  8532 ;;		_main
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           	psect	text22
  8537  005FF0                     __ptext22:
  8538                           	opt stack 0
  8539  005FF0                     _initTime:
  8540                           	opt stack 23
  8541                           
  8542                           ;incstack = 0
  8543                           ;initTime@s stored from wreg
  8544  005FF0  0100               	movlb	0	; () banked
  8545  005FF2  6F86               	movwf	initTime@s& (0+255),b
  8546                           
  8547                           ;RTC.c: 19: time[0] = s;
  8548  005FF4  C086  F124         	movff	initTime@s,_time
  8549                           
  8550                           ;RTC.c: 20: time[1] = m;
  8551  005FF8  C080  F125         	movff	initTime@m,_time+1
  8552                           
  8553                           ;RTC.c: 21: time[2] = h;
  8554  005FFC  C081  F126         	movff	initTime@h,_time+2
  8555                           
  8556                           ;RTC.c: 22: time[3] = w;
  8557  006000  C082  F127         	movff	initTime@w,_time+3
  8558                           
  8559                           ;RTC.c: 23: time[4] = DD;
  8560  006004  C083  F128         	movff	initTime@DD,_time+4
  8561                           
  8562                           ;RTC.c: 24: time[5] = MM;
  8563  006008  C084  F129         	movff	initTime@MM,_time+5
  8564                           
  8565                           ;RTC.c: 25: time[6] = YY;
  8566  00600C  C085  F12A         	movff	initTime@YY,_time+6
  8567  006010  0012               	return		;funcret
  8568  006012                     __end_of_initTime:
  8569                           	opt stack 0
  8570                           tblptru	equ	0xFF8
  8571                           tblptrh	equ	0xFF7
  8572                           tblptrl	equ	0xFF6
  8573                           tablat	equ	0xFF5
  8574                           prodh	equ	0xFF4
  8575                           prodl	equ	0xFF3
  8576                           intcon	equ	0xFF2
  8577                           intcon2	equ	0xFF1
  8578                           intcon3	equ	0xFF0
  8579                           postinc0	equ	0xFEE
  8580                           wreg	equ	0xFE8
  8581                           postdec1	equ	0xFE5
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           postdec2	equ	0xFDD
  8586                           fsr2h	equ	0xFDA
  8587                           fsr2l	equ	0xFD9
  8588                           status	equ	0xFD8
  8589                           
  8590 ;; *************** function _initLCD *****************
  8591 ;; Defined at:
  8592 ;;		line 50 in file "lcd.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;		None
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;		None
  8597 ;; Return value:  Size  Location     Type
  8598 ;;                  1    wreg      void 
  8599 ;; Registers used:
  8600 ;;		wreg, status,2, status,0, cstack
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;Total ram usage:        1 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:    9
  8613 ;; This function calls:
  8614 ;;		_lcdInst
  8615 ;; This function is called by:
  8616 ;;		_main
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           	psect	text23
  8621  005A0C                     __ptext23:
  8622                           	opt stack 0
  8623  005A0C                     _initLCD:
  8624                           	opt stack 21
  8625                           
  8626                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8627                           
  8628                           ;incstack = 0
  8629  005A0C  0E9C               	movlw	156
  8630  005A0E  0100               	movlb	0	; () banked
  8631  005A10  6F83               	movwf	??_initLCD& (0+255),b
  8632  005A12  0ED7               	movlw	215
  8633  005A14                     u11257:
  8634  005A14  2EE8               	decfsz	wreg,f,c
  8635  005A16  D7FE               	bra	u11257
  8636  005A18  2F83               	decfsz	??_initLCD& (0+255),f,b
  8637  005A1A  D7FC               	bra	u11257
  8638                           
  8639                           ;lcd.c: 52: lcdInst(0b00110011);
  8640  005A1C  0E33               	movlw	51
  8641  005A1E  EC63  F030         	call	_lcdInst
  8642                           
  8643                           ;lcd.c: 53: lcdInst(0b00110010);
  8644  005A22  0E32               	movlw	50
  8645  005A24  EC63  F030         	call	_lcdInst
  8646                           
  8647                           ;lcd.c: 55: lcdInst(0b00101000);
  8648  005A28  0E28               	movlw	40
  8649  005A2A  EC63  F030         	call	_lcdInst
  8650                           
  8651                           ;lcd.c: 56: lcdInst(0b00001100);
  8652  005A2E  0E0C               	movlw	12
  8653  005A30  EC63  F030         	call	_lcdInst
  8654                           
  8655                           ;lcd.c: 57: lcdInst(0b00000110);
  8656  005A34  0E06               	movlw	6
  8657  005A36  EC63  F030         	call	_lcdInst
  8658                           
  8659                           ;lcd.c: 58: lcdInst(0b00000001);
  8660  005A3A  0E01               	movlw	1
  8661  005A3C  EC63  F030         	call	_lcdInst
  8662                           
  8663                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8664  005A40  0E9C               	movlw	156
  8665  005A42  0100               	movlb	0	; () banked
  8666  005A44  6F83               	movwf	??_initLCD& (0+255),b
  8667  005A46  0ED7               	movlw	215
  8668  005A48                     u11267:
  8669  005A48  2EE8               	decfsz	wreg,f,c
  8670  005A4A  D7FE               	bra	u11267
  8671  005A4C  2F83               	decfsz	??_initLCD& (0+255),f,b
  8672  005A4E  D7FC               	bra	u11267
  8673  005A50  0012               	return		;funcret
  8674  005A52                     __end_of_initLCD:
  8675                           	opt stack 0
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           intcon2	equ	0xFF1
  8684                           intcon3	equ	0xFF0
  8685                           postinc0	equ	0xFEE
  8686                           wreg	equ	0xFE8
  8687                           postdec1	equ	0xFE5
  8688                           fsr1l	equ	0xFE1
  8689                           indf2	equ	0xFDF
  8690                           postinc2	equ	0xFDE
  8691                           postdec2	equ	0xFDD
  8692                           fsr2h	equ	0xFDA
  8693                           fsr2l	equ	0xFD9
  8694                           status	equ	0xFD8
  8695                           
  8696 ;; *************** function _initEEPROM *****************
  8697 ;; Defined at:
  8698 ;;		line 32 in file "EEPROM.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;		None
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;		None
  8703 ;; Return value:  Size  Location     Type
  8704 ;;                  1    wreg      void 
  8705 ;; Registers used:
  8706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8707 ;; Tracked objects:
  8708 ;;		On entry : 0/0
  8709 ;;		On exit  : 0/0
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;Total ram usage:        0 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:   11
  8719 ;; This function calls:
  8720 ;;		_EEPROM_write
  8721 ;; This function is called by:
  8722 ;;		_main
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           	psect	text24
  8727  006064                     __ptext24:
  8728                           	opt stack 0
  8729  006064                     _initEEPROM:
  8730                           	opt stack 19
  8731                           
  8732                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8733                           
  8734                           ;incstack = 0
  8735  006064  0E00               	movlw	0
  8736  006066  0100               	movlb	0	; () banked
  8737  006068  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8738  00606A  0E00               	movlw	0
  8739  00606C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8740  00606E  0E01               	movlw	1
  8741  006070  0100               	movlb	0	; () banked
  8742  006072  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8743  006074  EC3A  F024         	call	_EEPROM_write	;wreg free
  8744  006078  0012               	return		;funcret
  8745  00607A                     __end_of_initEEPROM:
  8746                           	opt stack 0
  8747                           tblptru	equ	0xFF8
  8748                           tblptrh	equ	0xFF7
  8749                           tblptrl	equ	0xFF6
  8750                           tablat	equ	0xFF5
  8751                           prodh	equ	0xFF4
  8752                           prodl	equ	0xFF3
  8753                           intcon	equ	0xFF2
  8754                           intcon2	equ	0xFF1
  8755                           intcon3	equ	0xFF0
  8756                           postinc0	equ	0xFEE
  8757                           wreg	equ	0xFE8
  8758                           postdec1	equ	0xFE5
  8759                           fsr1l	equ	0xFE1
  8760                           indf2	equ	0xFDF
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           fsr2h	equ	0xFDA
  8764                           fsr2l	equ	0xFD9
  8765                           status	equ	0xFD8
  8766                           
  8767 ;; *************** function _EEPROM_write *****************
  8768 ;; Defined at:
  8769 ;;		line 36 in file "EEPROM.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  address         2   43[BANK0 ] unsigned short 
  8772 ;;  data            1   45[BANK0 ] unsigned char 
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;  i               1   48[BANK0 ] unsigned char 
  8775 ;;  i               1   47[BANK0 ] unsigned char 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  1    wreg      void 
  8778 ;; Registers used:
  8779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8785 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;Total ram usage:        6 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:   10
  8792 ;; This function calls:
  8793 ;;		_EEPROM_read
  8794 ;;		_lcdInst
  8795 ;;		_printf
  8796 ;; This function is called by:
  8797 ;;		_Loading
  8798 ;;		_initEEPROM
  8799 ;;		_logRun
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text25
  8804  004874                     __ptext25:
  8805                           	opt stack 0
  8806  004874                     _EEPROM_write:
  8807                           	opt stack 18
  8808                           
  8809                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8810                           
  8811                           ;incstack = 0
  8812  004874  84A6               	bsf	4006,2,c	;volatile
  8813                           
  8814                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8815  004876  0100               	movlb	0	; () banked
  8816  004878  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8817  00487A  6EAA               	movwf	4010,c	;volatile
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8821  00487C  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;EEPROM.c: 43: EEDATA = data;
  8825  004880  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8829  004884  9EA6               	bcf	4006,7,c	;volatile
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8833  004886  9CA6               	bcf	4006,6,c	;volatile
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8837  004888  9EF2               	bcf	intcon,7,c	;volatile
  8838                           
  8839                           ;EEPROM.c: 49: EECON2 = 0x55;
  8840  00488A  0E55               	movlw	85
  8841  00488C  6EA7               	movwf	4007,c	;volatile
  8842                           
  8843                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8844  00488E  0EAA               	movlw	170
  8845  004890  6EA7               	movwf	4007,c	;volatile
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8849  004892  82A6               	bsf	4006,1,c	;volatile
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8853  004894  8EF2               	bsf	intcon,7,c	;volatile
  8854  004896                     l1165:
  8855  004896  A8A1               	btfss	4001,4,c	;volatile
  8856  004898  D7FE               	goto	l1165
  8857                           
  8858                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8859  00489A  98A1               	bcf	4001,4,c	;volatile
  8860                           
  8861                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8862  00489C  94A6               	bcf	4006,2,c	;volatile
  8863                           
  8864                           ;EEPROM.c: 61: if(debug){
  8865  00489E  0101               	movlb	1	; () banked
  8866  0048A0  512D               	movf	_debug& (0+255),w,b
  8867  0048A2  0101               	movlb	1	; () banked
  8868  0048A4  112E               	iorwf	(_debug+1)& (0+255),w,b
  8869  0048A6  B4D8               	btfsc	status,2,c
  8870  0048A8  0012               	return	
  8871                           
  8872                           ; BSR set to: 1
  8873                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8874  0048AA  0E01               	movlw	1
  8875  0048AC  EC63  F030         	call	_lcdInst
  8876  0048B0  0E68               	movlw	104
  8877  0048B2  0100               	movlb	0	; () banked
  8878  0048B4  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8879  0048B6  0EE4               	movlw	228
  8880  0048B8                     u11277:
  8881  0048B8  2EE8               	decfsz	wreg,f,c
  8882  0048BA  D7FE               	bra	u11277
  8883  0048BC  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8884  0048BE  D7FC               	bra	u11277
  8885  0048C0  F000               	nop	
  8886                           
  8887                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8888  0048C2  0E80               	movlw	128
  8889  0048C4  EC63  F030         	call	_lcdInst
  8890                           
  8891                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8892  0048C8  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8893  0048CC  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8894  0048D0  EC26  F030         	call	_EEPROM_read	;wreg free
  8895  0048D4  0100               	movlb	0	; () banked
  8896  0048D6  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8897  0048D8  A4D8               	btfss	status,2,c
  8898  0048DA  D024               	goto	l7660
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8902  0048DC  0EDA               	movlw	low STR_66
  8903  0048DE  0100               	movlb	0	; () banked
  8904  0048E0  6F8E               	movwf	printf@f& (0+255),b
  8905  0048E2  0EFA               	movlw	high STR_66
  8906  0048E4  0100               	movlb	0	; () banked
  8907  0048E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8908  0048E8  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8909  0048EC  0100               	movlb	0	; () banked
  8910  0048EE  6B91               	clrf	(?_printf+3)& (0+255),b
  8911  0048F0  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8912  0048F4  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8913  0048F8  ECE7  F00E         	call	_printf	;wreg free
  8914                           
  8915                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8916  0048FC  0E00               	movlw	0
  8917  0048FE  0100               	movlb	0	; () banked
  8918  004900  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8919  004902                     l7652:
  8920                           
  8921                           ; BSR set to: 0
  8922  004902  0E63               	movlw	99
  8923  004904  0100               	movlb	0	; () banked
  8924  004906  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8925  004908  D001               	goto	l7656
  8926  00490A  0012               	return	
  8927  00490C                     l7656:
  8928                           
  8929                           ; BSR set to: 0
  8930  00490C  0E68               	movlw	104
  8931  00490E  0100               	movlb	0	; () banked
  8932  004910  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8933  004912  0EE4               	movlw	228
  8934  004914                     u11287:
  8935  004914  2EE8               	decfsz	wreg,f,c
  8936  004916  D7FE               	bra	u11287
  8937  004918  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8938  00491A  D7FC               	bra	u11287
  8939  00491C  F000               	nop	
  8940  00491E  0100               	movlb	0	; () banked
  8941  004920  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8942  004922  D7EF               	goto	l7652
  8943  004924                     l7660:
  8944                           
  8945                           ; BSR set to: 0
  8946                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8947  004924  0EBC               	movlw	low STR_67
  8948  004926  0100               	movlb	0	; () banked
  8949  004928  6F8E               	movwf	printf@f& (0+255),b
  8950  00492A  0EFF               	movlw	high STR_67
  8951  00492C  0100               	movlb	0	; () banked
  8952  00492E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8953  004930  ECE7  F00E         	call	_printf	;wreg free
  8954  004934  0E00               	movlw	0
  8955  004936  0100               	movlb	0	; () banked
  8956  004938  6FB0               	movwf	EEPROM_write@i_1421& (0+255),b
  8957  00493A                     l7664:
  8958                           
  8959                           ; BSR set to: 0
  8960  00493A  0E63               	movlw	99
  8961  00493C  0100               	movlb	0	; () banked
  8962  00493E  65B0               	cpfsgt	EEPROM_write@i_1421& (0+255),b
  8963  004940  D001               	goto	l7668
  8964  004942  0012               	return	
  8965  004944                     l7668:
  8966                           
  8967                           ; BSR set to: 0
  8968  004944  0E68               	movlw	104
  8969  004946  0100               	movlb	0	; () banked
  8970  004948  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8971  00494A  0EE4               	movlw	228
  8972  00494C                     u11297:
  8973  00494C  2EE8               	decfsz	wreg,f,c
  8974  00494E  D7FE               	bra	u11297
  8975  004950  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8976  004952  D7FC               	bra	u11297
  8977  004954  F000               	nop	
  8978  004956  0100               	movlb	0	; () banked
  8979  004958  2BB0               	incf	EEPROM_write@i_1421& (0+255),f,b
  8980  00495A  D7EF               	goto	l7664
  8981  00495C                     __end_of_EEPROM_write:
  8982                           	opt stack 0
  8983                           tblptru	equ	0xFF8
  8984                           tblptrh	equ	0xFF7
  8985                           tblptrl	equ	0xFF6
  8986                           tablat	equ	0xFF5
  8987                           prodh	equ	0xFF4
  8988                           prodl	equ	0xFF3
  8989                           intcon	equ	0xFF2
  8990                           intcon2	equ	0xFF1
  8991                           intcon3	equ	0xFF0
  8992                           postinc0	equ	0xFEE
  8993                           wreg	equ	0xFE8
  8994                           postdec1	equ	0xFE5
  8995                           fsr1l	equ	0xFE1
  8996                           indf2	equ	0xFDF
  8997                           postinc2	equ	0xFDE
  8998                           postdec2	equ	0xFDD
  8999                           fsr2h	equ	0xFDA
  9000                           fsr2l	equ	0xFD9
  9001                           status	equ	0xFD8
  9002                           
  9003 ;; *************** function _EEPROM_read *****************
  9004 ;; Defined at:
  9005 ;;		line 72 in file "EEPROM.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;  address         2    0[BANK0 ] unsigned short 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;		None
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  1    wreg      unsigned char 
  9012 ;; Registers used:
  9013 ;;		wreg, status,2
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9019 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;Total ram usage:        2 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:    7
  9026 ;; This function calls:
  9027 ;;		Nothing
  9028 ;; This function is called by:
  9029 ;;		_Loading
  9030 ;;		_EEPROM_write
  9031 ;;		_logRun
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           	psect	text26
  9036  00604C                     __ptext26:
  9037                           	opt stack 0
  9038  00604C                     _EEPROM_read:
  9039                           	opt stack 20
  9040                           
  9041                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  9042                           
  9043                           ;incstack = 0
  9044  00604C  0100               	movlb	0	; () banked
  9045  00604E  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  9046  006050  6EAA               	movwf	4010,c	;volatile
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  9050  006052  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  9054  006056  9EA6               	bcf	4006,7,c	;volatile
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  9058  006058  9CA6               	bcf	4006,6,c	;volatile
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  9062  00605A  80A6               	bsf	4006,0,c	;volatile
  9063  00605C                     l1178:
  9064  00605C  B0A6               	btfsc	4006,0,c	;volatile
  9065  00605E  D7FE               	goto	l1178
  9066                           
  9067                           ;EEPROM.c: 85: return EEDATA;
  9068  006060  50A8               	movf	4008,w,c	;volatile
  9069  006062  0012               	return	
  9070  006064                     __end_of_EEPROM_read:
  9071                           	opt stack 0
  9072                           tblptru	equ	0xFF8
  9073                           tblptrh	equ	0xFF7
  9074                           tblptrl	equ	0xFF6
  9075                           tablat	equ	0xFF5
  9076                           prodh	equ	0xFF4
  9077                           prodl	equ	0xFF3
  9078                           intcon	equ	0xFF2
  9079                           intcon2	equ	0xFF1
  9080                           intcon3	equ	0xFF0
  9081                           postinc0	equ	0xFEE
  9082                           wreg	equ	0xFE8
  9083                           postdec1	equ	0xFE5
  9084                           fsr1l	equ	0xFE1
  9085                           indf2	equ	0xFDF
  9086                           postinc2	equ	0xFDE
  9087                           postdec2	equ	0xFDD
  9088                           fsr2h	equ	0xFDA
  9089                           fsr2l	equ	0xFD9
  9090                           status	equ	0xFD8
  9091                           
  9092 ;; *************** function _UI *****************
  9093 ;; Defined at:
  9094 ;;		line 76 in file "UI.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;  i               1   73[BANK0 ] unsigned char 
  9099 ;;  i               1   85[BANK0 ] unsigned char 
  9100 ;;  i               1   84[BANK0 ] unsigned char 
  9101 ;;  i               1   83[BANK0 ] unsigned char 
  9102 ;;  i               1   82[BANK0 ] unsigned char 
  9103 ;;  i               1   81[BANK0 ] unsigned char 
  9104 ;;  i               1   80[BANK0 ] unsigned char 
  9105 ;;  i               1   79[BANK0 ] unsigned char 
  9106 ;;  i               1   78[BANK0 ] unsigned char 
  9107 ;;  i               1   77[BANK0 ] unsigned char 
  9108 ;;  i               1   76[BANK0 ] unsigned char 
  9109 ;;  i               1   75[BANK0 ] unsigned char 
  9110 ;;  i               1   74[BANK0 ] unsigned char 
  9111 ;;  month           4   86[BANK0 ] unsigned char [4]
  9112 ;;  i               1   72[BANK0 ] unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;Total ram usage:       22 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:   11
  9129 ;; This function calls:
  9130 ;;		___awdiv
  9131 ;;		___awmod
  9132 ;;		_change_state_to_menu_12
  9133 ;;		_change_state_to_menu_22
  9134 ;;		_lcdInst
  9135 ;;		_printRTC
  9136 ;;		_printf
  9137 ;;		_strcpy
  9138 ;; This function is called by:
  9139 ;;		_main
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           	psect	text27
  9144  000012                     __ptext27:
  9145                           	opt stack 0
  9146  000012                     _UI:
  9147                           	opt stack 19
  9148                           
  9149                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  9150                           
  9151                           ;incstack = 0
  9152  000012  0E02               	movlw	2
  9153  000014  0100               	movlb	0	; () banked
  9154  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  9155  000018  A4D8               	btfss	status,2,c
  9156  00001A  D086               	goto	l9714
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9160  00001C  0E01               	movlw	1
  9161  00001E  EC63  F030         	call	_lcdInst
  9162  000022  0E68               	movlw	104
  9163  000024  0100               	movlb	0	; () banked
  9164  000026  6FC4               	movwf	??_UI& (0+255),b
  9165  000028  0EE4               	movlw	228
  9166  00002A                     u11307:
  9167  00002A  2EE8               	decfsz	wreg,f,c
  9168  00002C  D7FE               	bra	u11307
  9169  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  9170  000030  D7FC               	bra	u11307
  9171  000032  F000               	nop	
  9172                           
  9173                           ;UI.c: 79: lcdInst(0b10000000);;
  9174  000034  0E80               	movlw	128
  9175  000036  EC63  F030         	call	_lcdInst
  9176                           
  9177                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  9178  00003A  0E7F               	movlw	low STR_1
  9179  00003C  0100               	movlb	0	; () banked
  9180  00003E  6F8E               	movwf	printf@f& (0+255),b
  9181  000040  0EFB               	movlw	high STR_1
  9182  000042  0100               	movlb	0	; () banked
  9183  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  9184  000046  0E01               	movlw	1
  9185  000048  0100               	movlb	0	; () banked
  9186  00004A  25FD               	addwf	_sel& (0+255),w,b
  9187  00004C  0100               	movlb	0	; () banked
  9188  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  9189  000050  0100               	movlb	0	; () banked
  9190  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  9191  000054  0E00               	movlw	0
  9192  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  9193  000058  ECE7  F00E         	call	_printf	;wreg free
  9194                           
  9195                           ;UI.c: 81: lcdInst(0b11000000);;
  9196  00005C  0EC0               	movlw	192
  9197  00005E  EC63  F030         	call	_lcdInst
  9198                           
  9199                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9200  000062  0E0E               	movlw	14
  9201  000064  0100               	movlb	0	; () banked
  9202  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9203  000068  0E10               	movlw	16
  9204  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  9205  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  9206  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9207  000074  EC39  F028         	call	___awmod	;wreg free
  9208  000078  C080  F0C6         	movff	?___awmod,_UI$2443
  9209  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2443+1
  9210                           
  9211                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9212  000080  0E56               	movlw	low STR_2
  9213  000082  0100               	movlb	0	; () banked
  9214  000084  6F8E               	movwf	printf@f& (0+255),b
  9215  000086  0EFF               	movlw	high STR_2
  9216  000088  0100               	movlb	0	; () banked
  9217  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9218  00008C  0E0E               	movlw	14
  9219  00008E  0100               	movlb	0	; () banked
  9220  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9221  000092  0E10               	movlw	16
  9222  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  9223  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  9224  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9225  00009E  EC39  F028         	call	___awmod	;wreg free
  9226  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  9227  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9228  0000AA  0E00               	movlw	0
  9229  0000AC  0100               	movlb	0	; () banked
  9230  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9231  0000B0  0E3C               	movlw	60
  9232  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  9233  0000B4  EC27  F027         	call	___awdiv	;wreg free
  9234  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  9235  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  9236  0000C0  C0C6  F080         	movff	_UI$2443,___awmod@dividend
  9237  0000C4  C0C7  F081         	movff	_UI$2443+1,___awmod@dividend+1
  9238  0000C8  0E00               	movlw	0
  9239  0000CA  0100               	movlb	0	; () banked
  9240  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9241  0000CE  0E3C               	movlw	60
  9242  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  9243  0000D2  EC39  F028         	call	___awmod	;wreg free
  9244  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  9245  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  9246  0000DE  ECE7  F00E         	call	_printf	;wreg free
  9247  0000E2                     l192:
  9248  0000E2  B281               	btfsc	3969,1,c	;volatile
  9249  0000E4  D7FE               	goto	l192
  9250  0000E6                     l195:
  9251  0000E6  A281               	btfss	3969,1,c	;volatile
  9252  0000E8  D7FE               	goto	l195
  9253                           
  9254                           ;UI.c: 86: }
  9255                           ;UI.c: 87: if(cur_state == 12){
  9256  0000EA  0E0C               	movlw	12
  9257  0000EC  0100               	movlb	0	; () banked
  9258  0000EE  19E8               	xorwf	_cur_state& (0+255),w,b
  9259  0000F0  0100               	movlb	0	; () banked
  9260  0000F2  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9261  0000F4  A4D8               	btfss	status,2,c
  9262  0000F6  D003               	goto	l9708
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;UI.c: 88: change_state_to_menu_12();
  9266  0000F8  ECA5  F02D         	call	_change_state_to_menu_12	;wreg free
  9267                           
  9268                           ;UI.c: 89: }
  9269  0000FC  D002               	goto	l200
  9270  0000FE                     l9708:
  9271                           
  9272                           ;UI.c: 90: else{
  9273                           ;UI.c: 91: change_state_to_menu_22();
  9274  0000FE  EC89  F02D         	call	_change_state_to_menu_22	;wreg free
  9275  000102                     l200:
  9276  000102  B281               	btfsc	3969,1,c	;volatile
  9277  000104  D7FE               	goto	l200
  9278                           
  9279                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  9280  000106  0E05               	movlw	5
  9281  000108  0100               	movlb	0	; () banked
  9282  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  9283  00010C  0E0F               	movlw	15
  9284  00010E  0100               	movlb	0	; () banked
  9285  000110  6FC4               	movwf	??_UI& (0+255),b
  9286  000112  0EF1               	movlw	241
  9287  000114                     u11317:
  9288  000114  2EE8               	decfsz	wreg,f,c
  9289  000116  D7FE               	bra	u11317
  9290  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  9291  00011A  D7FC               	bra	u11317
  9292  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  9293  00011E  D7FA               	bra	u11317
  9294                           
  9295                           ;UI.c: 95: machine_state = UI_state;
  9296  000120  0E00               	movlw	0
  9297  000122  0100               	movlb	0	; () banked
  9298  000124  6FFC               	movwf	_machine_state& (0+255),b
  9299                           
  9300                           ;UI.c: 96: }
  9301  000126  D3D2               	goto	l10034
  9302  000128                     l9714:
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;UI.c: 97: else if(cur_state == 0){
  9306  000128  0100               	movlb	0	; () banked
  9307  00012A  51E8               	movf	_cur_state& (0+255),w,b
  9308  00012C  0100               	movlb	0	; () banked
  9309  00012E  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9310  000130  A4D8               	btfss	status,2,c
  9311  000132  D3CC               	goto	l10034
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  9315  000134  0E00               	movlw	0
  9316  000136  0100               	movlb	0	; () banked
  9317  000138  6FC8               	movwf	UI@i& (0+255),b
  9318  00013A                     l9718:
  9319                           
  9320                           ; BSR set to: 0
  9321  00013A  0E63               	movlw	99
  9322  00013C  0100               	movlb	0	; () banked
  9323  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  9324  000140  D001               	goto	l9722
  9325  000142  D00C               	goto	l9726
  9326  000144                     l9722:
  9327                           
  9328                           ; BSR set to: 0
  9329  000144  0E68               	movlw	104
  9330  000146  0100               	movlb	0	; () banked
  9331  000148  6FC4               	movwf	??_UI& (0+255),b
  9332  00014A  0EE4               	movlw	228
  9333  00014C                     u11327:
  9334  00014C  2EE8               	decfsz	wreg,f,c
  9335  00014E  D7FE               	bra	u11327
  9336  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  9337  000152  D7FC               	bra	u11327
  9338  000154  F000               	nop	
  9339  000156  0100               	movlb	0	; () banked
  9340  000158  2BC8               	incf	UI@i& (0+255),f,b
  9341  00015A  D7EF               	goto	l9718
  9342  00015C                     l9726:
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;UI.c: 99: if(cur_state == 0){
  9346  00015C  0100               	movlb	0	; () banked
  9347  00015E  51E8               	movf	_cur_state& (0+255),w,b
  9348  000160  0100               	movlb	0	; () banked
  9349  000162  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9350  000164  A4D8               	btfss	status,2,c
  9351  000166  D3B2               	goto	l10034
  9352                           
  9353                           ; BSR set to: 0
  9354                           ;UI.c: 100: printRTC();
  9355  000168  ECEB  F019         	call	_printRTC	;wreg free
  9356                           
  9357                           ;UI.c: 101: }
  9358                           ;UI.c: 102: }
  9359                           ;UI.c: 103: while(logstate){
  9360  00016C  D3AF               	goto	l10034
  9361  00016E                     l9730:
  9362                           
  9363                           ;UI.c: 105: if(!log_completion){
  9364  00016E  0100               	movlb	0	; () banked
  9365  000170  51F2               	movf	_log_completion& (0+255),w,b
  9366  000172  0100               	movlb	0	; () banked
  9367  000174  11F3               	iorwf	(_log_completion+1)& (0+255),w,b
  9368  000176  A4D8               	btfss	status,2,c
  9369  000178  D041               	goto	l9760
  9370                           
  9371                           ; BSR set to: 0
  9372                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9373  00017A  0E01               	movlw	1
  9374  00017C  EC63  F030         	call	_lcdInst
  9375  000180  0E68               	movlw	104
  9376  000182  0100               	movlb	0	; () banked
  9377  000184  6FC4               	movwf	??_UI& (0+255),b
  9378  000186  0EE4               	movlw	228
  9379  000188                     u11337:
  9380  000188  2EE8               	decfsz	wreg,f,c
  9381  00018A  D7FE               	bra	u11337
  9382  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  9383  00018E  D7FC               	bra	u11337
  9384  000190  F000               	nop	
  9385                           
  9386                           ;UI.c: 107: lcdInst(0b10000000);;
  9387  000192  0E80               	movlw	128
  9388  000194  EC63  F030         	call	_lcdInst
  9389                           
  9390                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  9391  000198  0E6D               	movlw	low STR_3
  9392  00019A  0100               	movlb	0	; () banked
  9393  00019C  6F8E               	movwf	printf@f& (0+255),b
  9394  00019E  0EFB               	movlw	high STR_3
  9395  0001A0  0100               	movlb	0	; () banked
  9396  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9397  0001A4  C0F0  F090         	movff	_log,?_printf+2
  9398  0001A8  C0F1  F091         	movff	_log+1,?_printf+3
  9399  0001AC  ECE7  F00E         	call	_printf	;wreg free
  9400                           
  9401                           ;UI.c: 109: lcdInst(0b11000000);;
  9402  0001B0  0EC0               	movlw	192
  9403  0001B2  EC63  F030         	call	_lcdInst
  9404                           
  9405                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  9406  0001B6  0E79               	movlw	low STR_4
  9407  0001B8  0100               	movlb	0	; () banked
  9408  0001BA  6F8E               	movwf	printf@f& (0+255),b
  9409  0001BC  0EFE               	movlw	high STR_4
  9410  0001BE  0100               	movlb	0	; () banked
  9411  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9412  0001C2  ECE7  F00E         	call	_printf	;wreg free
  9413  0001C6                     l9744:
  9414  0001C6  0E00               	movlw	0
  9415  0001C8  0100               	movlb	0	; () banked
  9416  0001CA  6FC9               	movwf	UI@i_413& (0+255),b
  9417  0001CC                     l9746:
  9418                           
  9419                           ; BSR set to: 0
  9420  0001CC  0E63               	movlw	99
  9421  0001CE  0100               	movlb	0	; () banked
  9422  0001D0  65C9               	cpfsgt	UI@i_413& (0+255),b
  9423  0001D2  D001               	goto	l9750
  9424  0001D4  D00C               	goto	l9754
  9425  0001D6                     l9750:
  9426                           
  9427                           ; BSR set to: 0
  9428  0001D6  0E68               	movlw	104
  9429  0001D8  0100               	movlb	0	; () banked
  9430  0001DA  6FC4               	movwf	??_UI& (0+255),b
  9431  0001DC  0EE4               	movlw	228
  9432  0001DE                     u11347:
  9433  0001DE  2EE8               	decfsz	wreg,f,c
  9434  0001E0  D7FE               	bra	u11347
  9435  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  9436  0001E4  D7FC               	bra	u11347
  9437  0001E6  F000               	nop	
  9438  0001E8  0100               	movlb	0	; () banked
  9439  0001EA  2BC9               	incf	UI@i_413& (0+255),f,b
  9440  0001EC  D7EF               	goto	l9746
  9441  0001EE                     l9754:
  9442                           
  9443                           ; BSR set to: 0
  9444  0001EE  0100               	movlb	0	; () banked
  9445  0001F0  51F8               	movf	_logstate& (0+255),w,b
  9446  0001F2  0100               	movlb	0	; () banked
  9447  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9448  0001F6  B4D8               	btfsc	status,2,c
  9449  0001F8  0012               	return	
  9450  0001FA  D7E5               	goto	l9744
  9451  0001FC                     l9760:
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;UI.c: 114: else{
  9455                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9456  0001FC  0E01               	movlw	1
  9457  0001FE  EC63  F030         	call	_lcdInst
  9458  000202  0E68               	movlw	104
  9459  000204  0100               	movlb	0	; () banked
  9460  000206  6FC4               	movwf	??_UI& (0+255),b
  9461  000208  0EE4               	movlw	228
  9462  00020A                     u11357:
  9463  00020A  2EE8               	decfsz	wreg,f,c
  9464  00020C  D7FE               	bra	u11357
  9465  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9466  000210  D7FC               	bra	u11357
  9467  000212  F000               	nop	
  9468                           
  9469                           ;UI.c: 116: lcdInst(0b10000000);;
  9470  000214  0E80               	movlw	128
  9471  000216  EC63  F030         	call	_lcdInst
  9472                           
  9473                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9474  00021A  0E6D               	movlw	low STR_3
  9475  00021C  0100               	movlb	0	; () banked
  9476  00021E  6F8E               	movwf	printf@f& (0+255),b
  9477  000220  0EFB               	movlw	high STR_3
  9478  000222  0100               	movlb	0	; () banked
  9479  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9480  000226  C0F0  F090         	movff	_log,?_printf+2
  9481  00022A  C0F1  F091         	movff	_log+1,?_printf+3
  9482  00022E  ECE7  F00E         	call	_printf	;wreg free
  9483                           
  9484                           ;UI.c: 118: lcdInst(0b11000000);;
  9485  000232  0EC0               	movlw	192
  9486  000234  EC63  F030         	call	_lcdInst
  9487                           
  9488                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9489  000238  0EF5               	movlw	low STR_6
  9490  00023A  0100               	movlb	0	; () banked
  9491  00023C  6F8E               	movwf	printf@f& (0+255),b
  9492  00023E  0EFD               	movlw	high STR_6
  9493  000240  0100               	movlb	0	; () banked
  9494  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9495  000244  ECE7  F00E         	call	_printf	;wreg free
  9496                           
  9497                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9498  000248  0E00               	movlw	0
  9499  00024A  0100               	movlb	0	; () banked
  9500  00024C  6FCA               	movwf	UI@i_416& (0+255),b
  9501  00024E                     l9774:
  9502                           
  9503                           ; BSR set to: 0
  9504  00024E  0E63               	movlw	99
  9505  000250  0100               	movlb	0	; () banked
  9506  000252  65CA               	cpfsgt	UI@i_416& (0+255),b
  9507  000254  D001               	goto	l9778
  9508  000256  D00C               	goto	l9782
  9509  000258                     l9778:
  9510                           
  9511                           ; BSR set to: 0
  9512  000258  0E68               	movlw	104
  9513  00025A  0100               	movlb	0	; () banked
  9514  00025C  6FC4               	movwf	??_UI& (0+255),b
  9515  00025E  0EE4               	movlw	228
  9516  000260                     u11367:
  9517  000260  2EE8               	decfsz	wreg,f,c
  9518  000262  D7FE               	bra	u11367
  9519  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9520  000266  D7FC               	bra	u11367
  9521  000268  F000               	nop	
  9522  00026A  0100               	movlb	0	; () banked
  9523  00026C  2BCA               	incf	UI@i_416& (0+255),f,b
  9524  00026E  D7EF               	goto	l9774
  9525  000270                     l9782:
  9526                           
  9527                           ; BSR set to: 0
  9528  000270  0100               	movlb	0	; () banked
  9529  000272  51F8               	movf	_logstate& (0+255),w,b
  9530  000274  0100               	movlb	0	; () banked
  9531  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9532  000278  B4D8               	btfsc	status,2,c
  9533  00027A  0012               	return	
  9534                           
  9535                           ; BSR set to: 0
  9536                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9537                           
  9538                           ; BSR set to: 0
  9539                           
  9540                           ; BSR set to: 0
  9541  00027C  0E00               	movlw	0
  9542  00027E  0100               	movlb	0	; () banked
  9543  000280  6FCB               	movwf	UI@i_417& (0+255),b
  9544  000282                     l9788:
  9545                           
  9546                           ; BSR set to: 0
  9547  000282  0E63               	movlw	99
  9548  000284  0100               	movlb	0	; () banked
  9549  000286  65CB               	cpfsgt	UI@i_417& (0+255),b
  9550  000288  D001               	goto	l9792
  9551  00028A  D00C               	goto	l9796
  9552  00028C                     l9792:
  9553                           
  9554                           ; BSR set to: 0
  9555  00028C  0E68               	movlw	104
  9556  00028E  0100               	movlb	0	; () banked
  9557  000290  6FC4               	movwf	??_UI& (0+255),b
  9558  000292  0EE4               	movlw	228
  9559  000294                     u11377:
  9560  000294  2EE8               	decfsz	wreg,f,c
  9561  000296  D7FE               	bra	u11377
  9562  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9563  00029A  D7FC               	bra	u11377
  9564  00029C  F000               	nop	
  9565  00029E  0100               	movlb	0	; () banked
  9566  0002A0  2BCB               	incf	UI@i_417& (0+255),f,b
  9567  0002A2  D7EF               	goto	l9788
  9568  0002A4                     l9796:
  9569                           
  9570                           ; BSR set to: 0
  9571  0002A4  0100               	movlb	0	; () banked
  9572  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9573  0002A8  0100               	movlb	0	; () banked
  9574  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9575  0002AC  B4D8               	btfsc	status,2,c
  9576  0002AE  0012               	return	
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9580                           
  9581                           ; BSR set to: 0
  9582                           
  9583                           ; BSR set to: 0
  9584  0002B0  0E01               	movlw	1
  9585  0002B2  EC63  F030         	call	_lcdInst
  9586  0002B6  0E68               	movlw	104
  9587  0002B8  0100               	movlb	0	; () banked
  9588  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9589  0002BC  0EE4               	movlw	228
  9590  0002BE                     u11387:
  9591  0002BE  2EE8               	decfsz	wreg,f,c
  9592  0002C0  D7FE               	bra	u11387
  9593  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9594  0002C4  D7FC               	bra	u11387
  9595  0002C6  F000               	nop	
  9596                           
  9597                           ;UI.c: 125: lcdInst(0b10000000);;
  9598  0002C8  0E80               	movlw	128
  9599  0002CA  EC63  F030         	call	_lcdInst
  9600                           
  9601                           ;UI.c: 126: printf("START:");
  9602  0002CE  0EC3               	movlw	low STR_7
  9603  0002D0  0100               	movlb	0	; () banked
  9604  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9605  0002D4  0EFF               	movlw	high STR_7
  9606  0002D6  0100               	movlb	0	; () banked
  9607  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9608  0002DA  ECE7  F00E         	call	_printf	;wreg free
  9609                           
  9610                           ;UI.c: 127: lcdInst(0b11000000);;
  9611  0002DE  0EC0               	movlw	192
  9612  0002E0  EC63  F030         	call	_lcdInst
  9613                           
  9614                           ;UI.c: 128: char month[] = "MMM";
  9615  0002E4  C14F  F0D6         	movff	UI@F3252,UI@month
  9616  0002E8  C150  F0D7         	movff	UI@F3252+1,UI@month+1
  9617  0002EC  C151  F0D8         	movff	UI@F3252+2,UI@month+2
  9618  0002F0  C152  F0D9         	movff	UI@F3252+3,UI@month+3
  9619                           
  9620                           ;UI.c: 129: switch(log_startTime[5]){
  9621  0002F4  D0C3               	goto	l9840
  9622  0002F6                     l9812:
  9623                           
  9624                           ;UI.c: 131: strcpy(month, "JAN");
  9625  0002F6  0ED6               	movlw	low UI@month
  9626  0002F8  0100               	movlb	0	; () banked
  9627  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9628  0002FC  0E00               	movlw	high UI@month
  9629  0002FE  0100               	movlb	0	; () banked
  9630  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9631  000302  0EDA               	movlw	low STR_8
  9632  000304  0100               	movlb	0	; () banked
  9633  000306  6F82               	movwf	strcpy@from& (0+255),b
  9634  000308  0EFF               	movlw	high STR_8
  9635  00030A  0100               	movlb	0	; () banked
  9636  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9637  00030E  ECC1  F02D         	call	_strcpy	;wreg free
  9638                           
  9639                           ;UI.c: 132: break;
  9640  000312  D0E6               	goto	l9842
  9641  000314                     l9814:
  9642                           
  9643                           ;UI.c: 134: strcpy(month, "FEB");
  9644  000314  0ED6               	movlw	low UI@month
  9645  000316  0100               	movlb	0	; () banked
  9646  000318  6F80               	movwf	strcpy@to& (0+255),b
  9647  00031A  0E00               	movlw	high UI@month
  9648  00031C  0100               	movlb	0	; () banked
  9649  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9650  000320  0ECA               	movlw	low STR_9
  9651  000322  0100               	movlb	0	; () banked
  9652  000324  6F82               	movwf	strcpy@from& (0+255),b
  9653  000326  0EFF               	movlw	high STR_9
  9654  000328  0100               	movlb	0	; () banked
  9655  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9656  00032C  ECC1  F02D         	call	_strcpy	;wreg free
  9657                           
  9658                           ;UI.c: 135: break;
  9659  000330  D0D7               	goto	l9842
  9660  000332                     l9816:
  9661                           
  9662                           ;UI.c: 137: strcpy(month, "MAR");
  9663  000332  0ED6               	movlw	low UI@month
  9664  000334  0100               	movlb	0	; () banked
  9665  000336  6F80               	movwf	strcpy@to& (0+255),b
  9666  000338  0E00               	movlw	high UI@month
  9667  00033A  0100               	movlb	0	; () banked
  9668  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9669  00033E  0EE6               	movlw	low STR_10
  9670  000340  0100               	movlb	0	; () banked
  9671  000342  6F82               	movwf	strcpy@from& (0+255),b
  9672  000344  0EFF               	movlw	high STR_10
  9673  000346  0100               	movlb	0	; () banked
  9674  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9675  00034A  ECC1  F02D         	call	_strcpy	;wreg free
  9676                           
  9677                           ;UI.c: 138: break;
  9678  00034E  D0C8               	goto	l9842
  9679  000350                     l9818:
  9680                           
  9681                           ;UI.c: 140: strcpy(month, "APR");
  9682  000350  0ED6               	movlw	low UI@month
  9683  000352  0100               	movlb	0	; () banked
  9684  000354  6F80               	movwf	strcpy@to& (0+255),b
  9685  000356  0E00               	movlw	high UI@month
  9686  000358  0100               	movlb	0	; () banked
  9687  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9688  00035C  0EEA               	movlw	low STR_11
  9689  00035E  0100               	movlb	0	; () banked
  9690  000360  6F82               	movwf	strcpy@from& (0+255),b
  9691  000362  0EFF               	movlw	high STR_11
  9692  000364  0100               	movlb	0	; () banked
  9693  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9694  000368  ECC1  F02D         	call	_strcpy	;wreg free
  9695                           
  9696                           ;UI.c: 141: break;
  9697  00036C  D0B9               	goto	l9842
  9698  00036E                     l9820:
  9699                           
  9700                           ;UI.c: 143: strcpy(month, "MAY");
  9701  00036E  0ED6               	movlw	low UI@month
  9702  000370  0100               	movlb	0	; () banked
  9703  000372  6F80               	movwf	strcpy@to& (0+255),b
  9704  000374  0E00               	movlw	high UI@month
  9705  000376  0100               	movlb	0	; () banked
  9706  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9707  00037A  0EFA               	movlw	low STR_12
  9708  00037C  0100               	movlb	0	; () banked
  9709  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9710  000380  0EFF               	movlw	high STR_12
  9711  000382  0100               	movlb	0	; () banked
  9712  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9713  000386  ECC1  F02D         	call	_strcpy	;wreg free
  9714                           
  9715                           ;UI.c: 144: break;
  9716  00038A  D0AA               	goto	l9842
  9717  00038C                     l9822:
  9718                           
  9719                           ;UI.c: 146: strcpy(month, "JUN");
  9720  00038C  0ED6               	movlw	low UI@month
  9721  00038E  0100               	movlb	0	; () banked
  9722  000390  6F80               	movwf	strcpy@to& (0+255),b
  9723  000392  0E00               	movlw	high UI@month
  9724  000394  0100               	movlb	0	; () banked
  9725  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9726  000398  0EDE               	movlw	low STR_13
  9727  00039A  0100               	movlb	0	; () banked
  9728  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9729  00039E  0EFF               	movlw	high STR_13
  9730  0003A0  0100               	movlb	0	; () banked
  9731  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9732  0003A4  ECC1  F02D         	call	_strcpy	;wreg free
  9733                           
  9734                           ;UI.c: 147: break;
  9735  0003A8  D09B               	goto	l9842
  9736  0003AA                     l9824:
  9737                           
  9738                           ;UI.c: 149: strcpy(month, "JUL");
  9739  0003AA  0ED6               	movlw	low UI@month
  9740  0003AC  0100               	movlb	0	; () banked
  9741  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9742  0003B0  0E00               	movlw	high UI@month
  9743  0003B2  0100               	movlb	0	; () banked
  9744  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9745  0003B6  0ED6               	movlw	low STR_14
  9746  0003B8  0100               	movlb	0	; () banked
  9747  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9748  0003BC  0EFF               	movlw	high STR_14
  9749  0003BE  0100               	movlb	0	; () banked
  9750  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9751  0003C2  ECC1  F02D         	call	_strcpy	;wreg free
  9752                           
  9753                           ;UI.c: 150: break;
  9754  0003C6  D08C               	goto	l9842
  9755  0003C8                     l9826:
  9756                           
  9757                           ;UI.c: 152: strcpy(month, "AUG");
  9758  0003C8  0ED6               	movlw	low UI@month
  9759  0003CA  0100               	movlb	0	; () banked
  9760  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9761  0003CE  0E00               	movlw	high UI@month
  9762  0003D0  0100               	movlb	0	; () banked
  9763  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9764  0003D4  0ED2               	movlw	low STR_15
  9765  0003D6  0100               	movlb	0	; () banked
  9766  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9767  0003DA  0EFF               	movlw	high STR_15
  9768  0003DC  0100               	movlb	0	; () banked
  9769  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9770  0003E0  ECC1  F02D         	call	_strcpy	;wreg free
  9771                           
  9772                           ;UI.c: 153: break;
  9773  0003E4  D07D               	goto	l9842
  9774  0003E6                     l9828:
  9775                           
  9776                           ;UI.c: 155: strcpy(month, "SEP");
  9777  0003E6  0ED6               	movlw	low UI@month
  9778  0003E8  0100               	movlb	0	; () banked
  9779  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9780  0003EC  0E00               	movlw	high UI@month
  9781  0003EE  0100               	movlb	0	; () banked
  9782  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9783  0003F2  0EE2               	movlw	low STR_16
  9784  0003F4  0100               	movlb	0	; () banked
  9785  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9786  0003F8  0EFF               	movlw	high STR_16
  9787  0003FA  0100               	movlb	0	; () banked
  9788  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9789  0003FE  ECC1  F02D         	call	_strcpy	;wreg free
  9790                           
  9791                           ;UI.c: 156: break;
  9792  000402  D06E               	goto	l9842
  9793  000404                     l9830:
  9794                           
  9795                           ;UI.c: 158: strcpy(month, "OCT");
  9796  000404  0ED6               	movlw	low UI@month
  9797  000406  0100               	movlb	0	; () banked
  9798  000408  6F80               	movwf	strcpy@to& (0+255),b
  9799  00040A  0E00               	movlw	high UI@month
  9800  00040C  0100               	movlb	0	; () banked
  9801  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9802  000410  0EF2               	movlw	low STR_17
  9803  000412  0100               	movlb	0	; () banked
  9804  000414  6F82               	movwf	strcpy@from& (0+255),b
  9805  000416  0EFF               	movlw	high STR_17
  9806  000418  0100               	movlb	0	; () banked
  9807  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9808  00041C  ECC1  F02D         	call	_strcpy	;wreg free
  9809                           
  9810                           ;UI.c: 159: break;
  9811  000420  D05F               	goto	l9842
  9812  000422                     l9832:
  9813                           
  9814                           ;UI.c: 161: strcpy(month, "NOV");
  9815  000422  0ED6               	movlw	low UI@month
  9816  000424  0100               	movlb	0	; () banked
  9817  000426  6F80               	movwf	strcpy@to& (0+255),b
  9818  000428  0E00               	movlw	high UI@month
  9819  00042A  0100               	movlb	0	; () banked
  9820  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9821  00042E  0EF6               	movlw	low STR_18
  9822  000430  0100               	movlb	0	; () banked
  9823  000432  6F82               	movwf	strcpy@from& (0+255),b
  9824  000434  0EFF               	movlw	high STR_18
  9825  000436  0100               	movlb	0	; () banked
  9826  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9827  00043A  ECC1  F02D         	call	_strcpy	;wreg free
  9828                           
  9829                           ;UI.c: 162: break;
  9830  00043E  D050               	goto	l9842
  9831  000440                     l9834:
  9832                           
  9833                           ;UI.c: 164: strcpy(month, "DEC");
  9834  000440  0ED6               	movlw	low UI@month
  9835  000442  0100               	movlb	0	; () banked
  9836  000444  6F80               	movwf	strcpy@to& (0+255),b
  9837  000446  0E00               	movlw	high UI@month
  9838  000448  0100               	movlb	0	; () banked
  9839  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9840  00044C  0ECE               	movlw	low STR_19
  9841  00044E  0100               	movlb	0	; () banked
  9842  000450  6F82               	movwf	strcpy@from& (0+255),b
  9843  000452  0EFF               	movlw	high STR_19
  9844  000454  0100               	movlb	0	; () banked
  9845  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9846  000458  ECC1  F02D         	call	_strcpy	;wreg free
  9847                           
  9848                           ;UI.c: 165: break;
  9849  00045C  D041               	goto	l9842
  9850  00045E                     l9836:
  9851                           
  9852                           ;UI.c: 167: strcpy(month, "ERR");
  9853  00045E  0ED6               	movlw	low UI@month
  9854  000460  0100               	movlb	0	; () banked
  9855  000462  6F80               	movwf	strcpy@to& (0+255),b
  9856  000464  0E00               	movlw	high UI@month
  9857  000466  0100               	movlb	0	; () banked
  9858  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9859  00046A  0EEE               	movlw	low STR_20
  9860  00046C  0100               	movlb	0	; () banked
  9861  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9862  000470  0EFF               	movlw	high STR_20
  9863  000472  0100               	movlb	0	; () banked
  9864  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9865  000476  ECC1  F02D         	call	_strcpy	;wreg free
  9866                           
  9867                           ;UI.c: 169: }
  9868                           
  9869                           ;UI.c: 168: break;
  9870  00047A  D032               	goto	l9842
  9871  00047C                     l9840:
  9872  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9873  000480  CFDE F0C4          	movff	postinc2,??_UI
  9874  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9875                           
  9876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9877                           ; Switch size 1, requested type "space"
  9878                           ; Number of cases is 1, Range of values is 0 to 0
  9879                           ; switch strategies available:
  9880                           ; Name         Instructions Cycles
  9881                           ; simple_byte            4     3 (average)
  9882                           ;	Chosen strategy is simple_byte
  9883  000488  0100               	movlb	0	; () banked
  9884  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9885  00048C  0A00               	xorlw	0	; case 0
  9886  00048E  A4D8               	btfss	status,2,c
  9887  000490  D7E6               	goto	l9836
  9888                           
  9889                           ; BSR set to: 0
  9890                           ; Switch size 1, requested type "space"
  9891                           ; Number of cases is 12, Range of values is 1 to 12
  9892                           ; switch strategies available:
  9893                           ; Name         Instructions Cycles
  9894                           ; simple_byte           37    19 (average)
  9895                           ;	Chosen strategy is simple_byte
  9896  000492  0100               	movlb	0	; () banked
  9897  000494  51C4               	movf	??_UI& (0+255),w,b
  9898  000496  0A01               	xorlw	1	; case 1
  9899  000498  B4D8               	btfsc	status,2,c
  9900  00049A  D72D               	goto	l9812
  9901  00049C  0A03               	xorlw	3	; case 2
  9902  00049E  B4D8               	btfsc	status,2,c
  9903  0004A0  D739               	goto	l9814
  9904  0004A2  0A01               	xorlw	1	; case 3
  9905  0004A4  B4D8               	btfsc	status,2,c
  9906  0004A6  D745               	goto	l9816
  9907  0004A8  0A07               	xorlw	7	; case 4
  9908  0004AA  B4D8               	btfsc	status,2,c
  9909  0004AC  D751               	goto	l9818
  9910  0004AE  0A01               	xorlw	1	; case 5
  9911  0004B0  B4D8               	btfsc	status,2,c
  9912  0004B2  D75D               	goto	l9820
  9913  0004B4  0A03               	xorlw	3	; case 6
  9914  0004B6  B4D8               	btfsc	status,2,c
  9915  0004B8  D769               	goto	l9822
  9916  0004BA  0A01               	xorlw	1	; case 7
  9917  0004BC  B4D8               	btfsc	status,2,c
  9918  0004BE  D775               	goto	l9824
  9919  0004C0  0A0F               	xorlw	15	; case 8
  9920  0004C2  B4D8               	btfsc	status,2,c
  9921  0004C4  D781               	goto	l9826
  9922  0004C6  0A01               	xorlw	1	; case 9
  9923  0004C8  B4D8               	btfsc	status,2,c
  9924  0004CA  D78D               	goto	l9828
  9925  0004CC  0A03               	xorlw	3	; case 10
  9926  0004CE  B4D8               	btfsc	status,2,c
  9927  0004D0  D799               	goto	l9830
  9928  0004D2  0A01               	xorlw	1	; case 11
  9929  0004D4  B4D8               	btfsc	status,2,c
  9930  0004D6  D7A5               	goto	l9832
  9931  0004D8  0A07               	xorlw	7	; case 12
  9932  0004DA  B4D8               	btfsc	status,2,c
  9933  0004DC  D7B1               	goto	l9834
  9934  0004DE  D7BF               	goto	l9836
  9935  0004E0                     l9842:
  9936                           
  9937                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9938  0004E0  0EC2               	movlw	low STR_21
  9939  0004E2  0100               	movlb	0	; () banked
  9940  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9941  0004E6  0EFA               	movlw	high STR_21
  9942  0004E8  0100               	movlb	0	; () banked
  9943  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9944  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9945  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9946  0004F4  0ED6               	movlw	low UI@month
  9947  0004F6  0100               	movlb	0	; () banked
  9948  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9949  0004FA  0E00               	movlw	high UI@month
  9950  0004FC  0100               	movlb	0	; () banked
  9951  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9952  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9953  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9954  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9955  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9956  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9957  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9958  000518  ECE7  F00E         	call	_printf	;wreg free
  9959                           
  9960                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9961  00051C  0E00               	movlw	0
  9962  00051E  0100               	movlb	0	; () banked
  9963  000520  6FCC               	movwf	UI@i_435& (0+255),b
  9964  000522                     l9846:
  9965                           
  9966                           ; BSR set to: 0
  9967  000522  0E63               	movlw	99
  9968  000524  0100               	movlb	0	; () banked
  9969  000526  65CC               	cpfsgt	UI@i_435& (0+255),b
  9970  000528  D001               	goto	l9850
  9971  00052A  D00C               	goto	l9854
  9972  00052C                     l9850:
  9973                           
  9974                           ; BSR set to: 0
  9975  00052C  0E68               	movlw	104
  9976  00052E  0100               	movlb	0	; () banked
  9977  000530  6FC4               	movwf	??_UI& (0+255),b
  9978  000532  0EE4               	movlw	228
  9979  000534                     u11397:
  9980  000534  2EE8               	decfsz	wreg,f,c
  9981  000536  D7FE               	bra	u11397
  9982  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9983  00053A  D7FC               	bra	u11397
  9984  00053C  F000               	nop	
  9985  00053E  0100               	movlb	0	; () banked
  9986  000540  2BCC               	incf	UI@i_435& (0+255),f,b
  9987  000542  D7EF               	goto	l9846
  9988  000544                     l9854:
  9989                           
  9990                           ; BSR set to: 0
  9991  000544  0100               	movlb	0	; () banked
  9992  000546  51F8               	movf	_logstate& (0+255),w,b
  9993  000548  0100               	movlb	0	; () banked
  9994  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9995  00054C  B4D8               	btfsc	status,2,c
  9996  00054E  0012               	return	
  9997                           
  9998                           ; BSR set to: 0
  9999                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10000                           
 10001                           ; BSR set to: 0
 10002                           
 10003                           ; BSR set to: 0
 10004  000550  0E00               	movlw	0
 10005  000552  0100               	movlb	0	; () banked
 10006  000554  6FCD               	movwf	UI@i_436& (0+255),b
 10007  000556                     l9860:
 10008                           
 10009                           ; BSR set to: 0
 10010  000556  0E63               	movlw	99
 10011  000558  0100               	movlb	0	; () banked
 10012  00055A  65CD               	cpfsgt	UI@i_436& (0+255),b
 10013  00055C  D001               	goto	l9864
 10014  00055E  D00C               	goto	l9868
 10015  000560                     l9864:
 10016                           
 10017                           ; BSR set to: 0
 10018  000560  0E68               	movlw	104
 10019  000562  0100               	movlb	0	; () banked
 10020  000564  6FC4               	movwf	??_UI& (0+255),b
 10021  000566  0EE4               	movlw	228
 10022  000568                     u11407:
 10023  000568  2EE8               	decfsz	wreg,f,c
 10024  00056A  D7FE               	bra	u11407
 10025  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
 10026  00056E  D7FC               	bra	u11407
 10027  000570  F000               	nop	
 10028  000572  0100               	movlb	0	; () banked
 10029  000574  2BCD               	incf	UI@i_436& (0+255),f,b
 10030  000576  D7EF               	goto	l9860
 10031  000578                     l9868:
 10032                           
 10033                           ; BSR set to: 0
 10034  000578  0100               	movlb	0	; () banked
 10035  00057A  51F8               	movf	_logstate& (0+255),w,b
 10036  00057C  0100               	movlb	0	; () banked
 10037  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10038  000580  B4D8               	btfsc	status,2,c
 10039  000582  0012               	return	
 10040                           
 10041                           ; BSR set to: 0
 10042                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10043                           
 10044                           ; BSR set to: 0
 10045                           
 10046                           ; BSR set to: 0
 10047  000584  0E01               	movlw	1
 10048  000586  EC63  F030         	call	_lcdInst
 10049  00058A  0E68               	movlw	104
 10050  00058C  0100               	movlb	0	; () banked
 10051  00058E  6FC4               	movwf	??_UI& (0+255),b
 10052  000590  0EE4               	movlw	228
 10053  000592                     u11417:
 10054  000592  2EE8               	decfsz	wreg,f,c
 10055  000594  D7FE               	bra	u11417
 10056  000596  2FC4               	decfsz	??_UI& (0+255),f,b
 10057  000598  D7FC               	bra	u11417
 10058  00059A  F000               	nop	
 10059                           
 10060                           ;UI.c: 176: lcdInst(0b10000000);;
 10061  00059C  0E80               	movlw	128
 10062  00059E  EC63  F030         	call	_lcdInst
 10063                           
 10064                           ;UI.c: 177: printf("DURATION:");
 10065  0005A2  0E9A               	movlw	low STR_22
 10066  0005A4  0100               	movlb	0	; () banked
 10067  0005A6  6F8E               	movwf	printf@f& (0+255),b
 10068  0005A8  0EFF               	movlw	high STR_22
 10069  0005AA  0100               	movlb	0	; () banked
 10070  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10071  0005AE  ECE7  F00E         	call	_printf	;wreg free
 10072                           
 10073                           ;UI.c: 178: lcdInst(0b11000000);;
 10074  0005B2  0EC0               	movlw	192
 10075  0005B4  EC63  F030         	call	_lcdInst
 10076                           
 10077                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
 10078  0005B8  0E0E               	movlw	14
 10079  0005BA  0100               	movlb	0	; () banked
 10080  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10081  0005BE  0E10               	movlw	16
 10082  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
 10083  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
 10084  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
 10085  0005CA  EC39  F028         	call	___awmod	;wreg free
 10086  0005CE  C080  F0C6         	movff	?___awmod,_UI$2443
 10087  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2443+1
 10088                           
 10089                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
 10090  0005D6  0E48               	movlw	low STR_23
 10091  0005D8  0100               	movlb	0	; () banked
 10092  0005DA  6F8E               	movwf	printf@f& (0+255),b
 10093  0005DC  0EFF               	movlw	high STR_23
 10094  0005DE  0100               	movlb	0	; () banked
 10095  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10096  0005E2  0E0E               	movlw	14
 10097  0005E4  0100               	movlb	0	; () banked
 10098  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10099  0005E8  0E10               	movlw	16
 10100  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
 10101  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
 10102  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
 10103  0005F4  EC39  F028         	call	___awmod	;wreg free
 10104  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
 10105  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
 10106  000600  0E00               	movlw	0
 10107  000602  0100               	movlb	0	; () banked
 10108  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
 10109  000606  0E3C               	movlw	60
 10110  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
 10111  00060A  EC27  F027         	call	___awdiv	;wreg free
 10112  00060E  C086  F090         	movff	?___awdiv,?_printf+2
 10113  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
 10114  000616  C0C6  F080         	movff	_UI$2443,___awmod@dividend
 10115  00061A  C0C7  F081         	movff	_UI$2443+1,___awmod@dividend+1
 10116  00061E  0E00               	movlw	0
 10117  000620  0100               	movlb	0	; () banked
 10118  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10119  000624  0E3C               	movlw	60
 10120  000626  6F82               	movwf	___awmod@divisor& (0+255),b
 10121  000628  EC39  F028         	call	___awmod	;wreg free
 10122  00062C  C080  F092         	movff	?___awmod,?_printf+4
 10123  000630  C081  F093         	movff	?___awmod+1,?_printf+5
 10124  000634  ECE7  F00E         	call	_printf	;wreg free
 10125                           
 10126                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10127  000638  0E00               	movlw	0
 10128  00063A  0100               	movlb	0	; () banked
 10129  00063C  6FCE               	movwf	UI@i_439& (0+255),b
 10130  00063E                     l9888:
 10131                           
 10132                           ; BSR set to: 0
 10133  00063E  0E63               	movlw	99
 10134  000640  0100               	movlb	0	; () banked
 10135  000642  65CE               	cpfsgt	UI@i_439& (0+255),b
 10136  000644  D001               	goto	l9892
 10137  000646  D00C               	goto	l9896
 10138  000648                     l9892:
 10139                           
 10140                           ; BSR set to: 0
 10141  000648  0E68               	movlw	104
 10142  00064A  0100               	movlb	0	; () banked
 10143  00064C  6FC4               	movwf	??_UI& (0+255),b
 10144  00064E  0EE4               	movlw	228
 10145  000650                     u11427:
 10146  000650  2EE8               	decfsz	wreg,f,c
 10147  000652  D7FE               	bra	u11427
 10148  000654  2FC4               	decfsz	??_UI& (0+255),f,b
 10149  000656  D7FC               	bra	u11427
 10150  000658  F000               	nop	
 10151  00065A  0100               	movlb	0	; () banked
 10152  00065C  2BCE               	incf	UI@i_439& (0+255),f,b
 10153  00065E  D7EF               	goto	l9888
 10154  000660                     l9896:
 10155                           
 10156                           ; BSR set to: 0
 10157  000660  0100               	movlb	0	; () banked
 10158  000662  51F8               	movf	_logstate& (0+255),w,b
 10159  000664  0100               	movlb	0	; () banked
 10160  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10161  000668  B4D8               	btfsc	status,2,c
 10162  00066A  0012               	return	
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10166                           
 10167                           ; BSR set to: 0
 10168                           
 10169                           ; BSR set to: 0
 10170  00066C  0E00               	movlw	0
 10171  00066E  0100               	movlb	0	; () banked
 10172  000670  6FCF               	movwf	UI@i_440& (0+255),b
 10173  000672                     l9902:
 10174                           
 10175                           ; BSR set to: 0
 10176  000672  0E63               	movlw	99
 10177  000674  0100               	movlb	0	; () banked
 10178  000676  65CF               	cpfsgt	UI@i_440& (0+255),b
 10179  000678  D001               	goto	l9906
 10180  00067A  D00C               	goto	l9910
 10181  00067C                     l9906:
 10182                           
 10183                           ; BSR set to: 0
 10184  00067C  0E68               	movlw	104
 10185  00067E  0100               	movlb	0	; () banked
 10186  000680  6FC4               	movwf	??_UI& (0+255),b
 10187  000682  0EE4               	movlw	228
 10188  000684                     u11437:
 10189  000684  2EE8               	decfsz	wreg,f,c
 10190  000686  D7FE               	bra	u11437
 10191  000688  2FC4               	decfsz	??_UI& (0+255),f,b
 10192  00068A  D7FC               	bra	u11437
 10193  00068C  F000               	nop	
 10194  00068E  0100               	movlb	0	; () banked
 10195  000690  2BCF               	incf	UI@i_440& (0+255),f,b
 10196  000692  D7EF               	goto	l9902
 10197  000694                     l9910:
 10198                           
 10199                           ; BSR set to: 0
 10200  000694  0100               	movlb	0	; () banked
 10201  000696  51F8               	movf	_logstate& (0+255),w,b
 10202  000698  0100               	movlb	0	; () banked
 10203  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10204  00069C  B4D8               	btfsc	status,2,c
 10205  00069E  0012               	return	
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10209                           
 10210                           ; BSR set to: 0
 10211                           
 10212                           ; BSR set to: 0
 10213  0006A0  0E01               	movlw	1
 10214  0006A2  EC63  F030         	call	_lcdInst
 10215  0006A6  0E68               	movlw	104
 10216  0006A8  0100               	movlb	0	; () banked
 10217  0006AA  6FC4               	movwf	??_UI& (0+255),b
 10218  0006AC  0EE4               	movlw	228
 10219  0006AE                     u11447:
 10220  0006AE  2EE8               	decfsz	wreg,f,c
 10221  0006B0  D7FE               	bra	u11447
 10222  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
 10223  0006B4  D7FC               	bra	u11447
 10224  0006B6  F000               	nop	
 10225                           
 10226                           ;UI.c: 185: lcdInst(0b10000000);;
 10227  0006B8  0E80               	movlw	128
 10228  0006BA  EC63  F030         	call	_lcdInst
 10229                           
 10230                           ;UI.c: 186: printf(" -- POP  CAN -- ");
 10231  0006BE  0E4B               	movlw	low STR_24
 10232  0006C0  0100               	movlb	0	; () banked
 10233  0006C2  6F8E               	movwf	printf@f& (0+255),b
 10234  0006C4  0EFD               	movlw	high STR_24
 10235  0006C6  0100               	movlb	0	; () banked
 10236  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10237  0006CA  ECE7  F00E         	call	_printf	;wreg free
 10238                           
 10239                           ;UI.c: 187: lcdInst(0b11000000);;
 10240  0006CE  0EC0               	movlw	192
 10241  0006D0  EC63  F030         	call	_lcdInst
 10242                           
 10243                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
 10244  0006D4  0E28               	movlw	low STR_25
 10245  0006D6  0100               	movlb	0	; () banked
 10246  0006D8  6F8E               	movwf	printf@f& (0+255),b
 10247  0006DA  0EFE               	movlw	high STR_25
 10248  0006DC  0100               	movlb	0	; () banked
 10249  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10250  0006E0  C0F4  F090         	movff	_log_count_pop_no_tab,?_printf+2
 10251  0006E4  C0F5  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
 10252  0006E8  C143  F092         	movff	_log_count_pop_w_tab,?_printf+4
 10253  0006EC  C144  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
 10254  0006F0  ECE7  F00E         	call	_printf	;wreg free
 10255                           
 10256                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10257  0006F4  0E00               	movlw	0
 10258  0006F6  0100               	movlb	0	; () banked
 10259  0006F8  6FD0               	movwf	UI@i_443& (0+255),b
 10260  0006FA                     l9928:
 10261                           
 10262                           ; BSR set to: 0
 10263  0006FA  0E63               	movlw	99
 10264  0006FC  0100               	movlb	0	; () banked
 10265  0006FE  65D0               	cpfsgt	UI@i_443& (0+255),b
 10266  000700  D001               	goto	l9932
 10267  000702  D00C               	goto	l9936
 10268  000704                     l9932:
 10269                           
 10270                           ; BSR set to: 0
 10271  000704  0E68               	movlw	104
 10272  000706  0100               	movlb	0	; () banked
 10273  000708  6FC4               	movwf	??_UI& (0+255),b
 10274  00070A  0EE4               	movlw	228
 10275  00070C                     u11457:
 10276  00070C  2EE8               	decfsz	wreg,f,c
 10277  00070E  D7FE               	bra	u11457
 10278  000710  2FC4               	decfsz	??_UI& (0+255),f,b
 10279  000712  D7FC               	bra	u11457
 10280  000714  F000               	nop	
 10281  000716  0100               	movlb	0	; () banked
 10282  000718  2BD0               	incf	UI@i_443& (0+255),f,b
 10283  00071A  D7EF               	goto	l9928
 10284  00071C                     l9936:
 10285                           
 10286                           ; BSR set to: 0
 10287  00071C  0100               	movlb	0	; () banked
 10288  00071E  51F8               	movf	_logstate& (0+255),w,b
 10289  000720  0100               	movlb	0	; () banked
 10290  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10291  000724  B4D8               	btfsc	status,2,c
 10292  000726  0012               	return	
 10293                           
 10294                           ; BSR set to: 0
 10295                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10296                           
 10297                           ; BSR set to: 0
 10298                           
 10299                           ; BSR set to: 0
 10300  000728  0E00               	movlw	0
 10301  00072A  0100               	movlb	0	; () banked
 10302  00072C  6FD1               	movwf	UI@i_444& (0+255),b
 10303  00072E                     l9942:
 10304                           
 10305                           ; BSR set to: 0
 10306  00072E  0E63               	movlw	99
 10307  000730  0100               	movlb	0	; () banked
 10308  000732  65D1               	cpfsgt	UI@i_444& (0+255),b
 10309  000734  D001               	goto	l9946
 10310  000736  D00C               	goto	l9950
 10311  000738                     l9946:
 10312                           
 10313                           ; BSR set to: 0
 10314  000738  0E68               	movlw	104
 10315  00073A  0100               	movlb	0	; () banked
 10316  00073C  6FC4               	movwf	??_UI& (0+255),b
 10317  00073E  0EE4               	movlw	228
 10318  000740                     u11467:
 10319  000740  2EE8               	decfsz	wreg,f,c
 10320  000742  D7FE               	bra	u11467
 10321  000744  2FC4               	decfsz	??_UI& (0+255),f,b
 10322  000746  D7FC               	bra	u11467
 10323  000748  F000               	nop	
 10324  00074A  0100               	movlb	0	; () banked
 10325  00074C  2BD1               	incf	UI@i_444& (0+255),f,b
 10326  00074E  D7EF               	goto	l9942
 10327  000750                     l9950:
 10328                           
 10329                           ; BSR set to: 0
 10330  000750  0100               	movlb	0	; () banked
 10331  000752  51F8               	movf	_logstate& (0+255),w,b
 10332  000754  0100               	movlb	0	; () banked
 10333  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10334  000758  B4D8               	btfsc	status,2,c
 10335  00075A  0012               	return	
 10336                           
 10337                           ; BSR set to: 0
 10338                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10339                           
 10340                           ; BSR set to: 0
 10341                           
 10342                           ; BSR set to: 0
 10343  00075C  0E01               	movlw	1
 10344  00075E  EC63  F030         	call	_lcdInst
 10345  000762  0E68               	movlw	104
 10346  000764  0100               	movlb	0	; () banked
 10347  000766  6FC4               	movwf	??_UI& (0+255),b
 10348  000768  0EE4               	movlw	228
 10349  00076A                     u11477:
 10350  00076A  2EE8               	decfsz	wreg,f,c
 10351  00076C  D7FE               	bra	u11477
 10352  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
 10353  000770  D7FC               	bra	u11477
 10354  000772  F000               	nop	
 10355                           
 10356                           ;UI.c: 194: lcdInst(0b10000000);;
 10357  000774  0E80               	movlw	128
 10358  000776  EC63  F030         	call	_lcdInst
 10359                           
 10360                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
 10361  00077A  0E5C               	movlw	low STR_26
 10362  00077C  0100               	movlb	0	; () banked
 10363  00077E  6F8E               	movwf	printf@f& (0+255),b
 10364  000780  0EFD               	movlw	high STR_26
 10365  000782  0100               	movlb	0	; () banked
 10366  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
 10367  000786  ECE7  F00E         	call	_printf	;wreg free
 10368                           
 10369                           ;UI.c: 196: lcdInst(0b11000000);;
 10370  00078A  0EC0               	movlw	192
 10371  00078C  EC63  F030         	call	_lcdInst
 10372                           
 10373                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
 10374  000790  0E17               	movlw	low STR_27
 10375  000792  0100               	movlb	0	; () banked
 10376  000794  6F8E               	movwf	printf@f& (0+255),b
 10377  000796  0EFE               	movlw	high STR_27
 10378  000798  0100               	movlb	0	; () banked
 10379  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10380  00079C  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
 10381  0007A0  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
 10382  0007A4  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
 10383  0007A8  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
 10384  0007AC  ECE7  F00E         	call	_printf	;wreg free
 10385                           
 10386                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10387  0007B0  0E00               	movlw	0
 10388  0007B2  0100               	movlb	0	; () banked
 10389  0007B4  6FD2               	movwf	UI@i_447& (0+255),b
 10390  0007B6                     l9968:
 10391                           
 10392                           ; BSR set to: 0
 10393  0007B6  0E63               	movlw	99
 10394  0007B8  0100               	movlb	0	; () banked
 10395  0007BA  65D2               	cpfsgt	UI@i_447& (0+255),b
 10396  0007BC  D001               	goto	l9972
 10397  0007BE  D00C               	goto	l9976
 10398  0007C0                     l9972:
 10399                           
 10400                           ; BSR set to: 0
 10401  0007C0  0E68               	movlw	104
 10402  0007C2  0100               	movlb	0	; () banked
 10403  0007C4  6FC4               	movwf	??_UI& (0+255),b
 10404  0007C6  0EE4               	movlw	228
 10405  0007C8                     u11487:
 10406  0007C8  2EE8               	decfsz	wreg,f,c
 10407  0007CA  D7FE               	bra	u11487
 10408  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
 10409  0007CE  D7FC               	bra	u11487
 10410  0007D0  F000               	nop	
 10411  0007D2  0100               	movlb	0	; () banked
 10412  0007D4  2BD2               	incf	UI@i_447& (0+255),f,b
 10413  0007D6  D7EF               	goto	l9968
 10414  0007D8                     l9976:
 10415                           
 10416                           ; BSR set to: 0
 10417  0007D8  0100               	movlb	0	; () banked
 10418  0007DA  51F8               	movf	_logstate& (0+255),w,b
 10419  0007DC  0100               	movlb	0	; () banked
 10420  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10421  0007E0  B4D8               	btfsc	status,2,c
 10422  0007E2  0012               	return	
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10426                           
 10427                           ; BSR set to: 0
 10428                           
 10429                           ; BSR set to: 0
 10430  0007E4  0E00               	movlw	0
 10431  0007E6  0100               	movlb	0	; () banked
 10432  0007E8  6FD3               	movwf	UI@i_448& (0+255),b
 10433  0007EA                     l9982:
 10434                           
 10435                           ; BSR set to: 0
 10436  0007EA  0E63               	movlw	99
 10437  0007EC  0100               	movlb	0	; () banked
 10438  0007EE  65D3               	cpfsgt	UI@i_448& (0+255),b
 10439  0007F0  D001               	goto	l9986
 10440  0007F2  D00C               	goto	l9990
 10441  0007F4                     l9986:
 10442                           
 10443                           ; BSR set to: 0
 10444  0007F4  0E68               	movlw	104
 10445  0007F6  0100               	movlb	0	; () banked
 10446  0007F8  6FC4               	movwf	??_UI& (0+255),b
 10447  0007FA  0EE4               	movlw	228
 10448  0007FC                     u11497:
 10449  0007FC  2EE8               	decfsz	wreg,f,c
 10450  0007FE  D7FE               	bra	u11497
 10451  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10452  000802  D7FC               	bra	u11497
 10453  000804  F000               	nop	
 10454  000806  0100               	movlb	0	; () banked
 10455  000808  2BD3               	incf	UI@i_448& (0+255),f,b
 10456  00080A  D7EF               	goto	l9982
 10457  00080C                     l9990:
 10458                           
 10459                           ; BSR set to: 0
 10460  00080C  0100               	movlb	0	; () banked
 10461  00080E  51F8               	movf	_logstate& (0+255),w,b
 10462  000810  0100               	movlb	0	; () banked
 10463  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10464  000814  B4D8               	btfsc	status,2,c
 10465  000816  0012               	return	
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10469                           
 10470                           ; BSR set to: 0
 10471                           
 10472                           ; BSR set to: 0
 10473  000818  0E01               	movlw	1
 10474  00081A  EC63  F030         	call	_lcdInst
 10475  00081E  0E68               	movlw	104
 10476  000820  0100               	movlb	0	; () banked
 10477  000822  6FC4               	movwf	??_UI& (0+255),b
 10478  000824  0EE4               	movlw	228
 10479  000826                     u11507:
 10480  000826  2EE8               	decfsz	wreg,f,c
 10481  000828  D7FE               	bra	u11507
 10482  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10483  00082C  D7FC               	bra	u11507
 10484  00082E  F000               	nop	
 10485                           
 10486                           ;UI.c: 203: lcdInst(0b10000000);;
 10487  000830  0E80               	movlw	128
 10488  000832  EC63  F030         	call	_lcdInst
 10489                           
 10490                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10491  000836  0E6D               	movlw	low STR_28
 10492  000838  0100               	movlb	0	; () banked
 10493  00083A  6F8E               	movwf	printf@f& (0+255),b
 10494  00083C  0EFD               	movlw	high STR_28
 10495  00083E  0100               	movlb	0	; () banked
 10496  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10497  000842  ECE7  F00E         	call	_printf	;wreg free
 10498                           
 10499                           ;UI.c: 205: lcdInst(0b11000000);;
 10500  000846  0EC0               	movlw	192
 10501  000848  EC63  F030         	call	_lcdInst
 10502                           
 10503                           ;UI.c: 206: printf("%d", log_count_total);
 10504  00084C  0E25               	movlw	low (STR_27+14)
 10505  00084E  0100               	movlb	0	; () banked
 10506  000850  6F8E               	movwf	printf@f& (0+255),b
 10507  000852  0EFE               	movlw	high (STR_27+14)
 10508  000854  0100               	movlb	0	; () banked
 10509  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10510  000858  C145  F090         	movff	_log_count_total,?_printf+2
 10511  00085C  C146  F091         	movff	_log_count_total+1,?_printf+3
 10512  000860  ECE7  F00E         	call	_printf	;wreg free
 10513                           
 10514                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10515  000864  0E00               	movlw	0
 10516  000866  0100               	movlb	0	; () banked
 10517  000868  6FD4               	movwf	UI@i_451& (0+255),b
 10518  00086A                     l10008:
 10519                           
 10520                           ; BSR set to: 0
 10521  00086A  0E63               	movlw	99
 10522  00086C  0100               	movlb	0	; () banked
 10523  00086E  65D4               	cpfsgt	UI@i_451& (0+255),b
 10524  000870  D001               	goto	l10012
 10525  000872  D00C               	goto	l10016
 10526  000874                     l10012:
 10527                           
 10528                           ; BSR set to: 0
 10529  000874  0E68               	movlw	104
 10530  000876  0100               	movlb	0	; () banked
 10531  000878  6FC4               	movwf	??_UI& (0+255),b
 10532  00087A  0EE4               	movlw	228
 10533  00087C                     u11517:
 10534  00087C  2EE8               	decfsz	wreg,f,c
 10535  00087E  D7FE               	bra	u11517
 10536  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10537  000882  D7FC               	bra	u11517
 10538  000884  F000               	nop	
 10539  000886  0100               	movlb	0	; () banked
 10540  000888  2BD4               	incf	UI@i_451& (0+255),f,b
 10541  00088A  D7EF               	goto	l10008
 10542  00088C                     l10016:
 10543                           
 10544                           ; BSR set to: 0
 10545  00088C  0100               	movlb	0	; () banked
 10546  00088E  51F8               	movf	_logstate& (0+255),w,b
 10547  000890  0100               	movlb	0	; () banked
 10548  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10549  000894  B4D8               	btfsc	status,2,c
 10550  000896  0012               	return	
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10554                           
 10555                           ; BSR set to: 0
 10556                           
 10557                           ; BSR set to: 0
 10558  000898  0E00               	movlw	0
 10559  00089A  0100               	movlb	0	; () banked
 10560  00089C  6FD5               	movwf	UI@i_452& (0+255),b
 10561  00089E                     l10022:
 10562                           
 10563                           ; BSR set to: 0
 10564  00089E  0E63               	movlw	99
 10565  0008A0  0100               	movlb	0	; () banked
 10566  0008A2  65D5               	cpfsgt	UI@i_452& (0+255),b
 10567  0008A4  D001               	goto	l10026
 10568  0008A6  D00C               	goto	l10030
 10569  0008A8                     l10026:
 10570                           
 10571                           ; BSR set to: 0
 10572  0008A8  0E68               	movlw	104
 10573  0008AA  0100               	movlb	0	; () banked
 10574  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10575  0008AE  0EE4               	movlw	228
 10576  0008B0                     u11527:
 10577  0008B0  2EE8               	decfsz	wreg,f,c
 10578  0008B2  D7FE               	bra	u11527
 10579  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10580  0008B6  D7FC               	bra	u11527
 10581  0008B8  F000               	nop	
 10582  0008BA  0100               	movlb	0	; () banked
 10583  0008BC  2BD5               	incf	UI@i_452& (0+255),f,b
 10584  0008BE  D7EF               	goto	l10022
 10585  0008C0                     l10030:
 10586                           
 10587                           ; BSR set to: 0
 10588  0008C0  0100               	movlb	0	; () banked
 10589  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10590  0008C4  0100               	movlb	0	; () banked
 10591  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10592  0008C8  B4D8               	btfsc	status,2,c
 10593  0008CA  0012               	return	
 10594  0008CC                     l10034:
 10595  0008CC  0100               	movlb	0	; () banked
 10596  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10597  0008D0  0100               	movlb	0	; () banked
 10598  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10599  0008D4  B4D8               	btfsc	status,2,c
 10600  0008D6  0012               	return	
 10601  0008D8  D44A               	goto	l9730
 10602  0008DA                     __end_of_UI:
 10603                           	opt stack 0
 10604                           tblptru	equ	0xFF8
 10605                           tblptrh	equ	0xFF7
 10606                           tblptrl	equ	0xFF6
 10607                           tablat	equ	0xFF5
 10608                           prodh	equ	0xFF4
 10609                           prodl	equ	0xFF3
 10610                           intcon	equ	0xFF2
 10611                           intcon2	equ	0xFF1
 10612                           intcon3	equ	0xFF0
 10613                           postinc0	equ	0xFEE
 10614                           wreg	equ	0xFE8
 10615                           postdec1	equ	0xFE5
 10616                           fsr1l	equ	0xFE1
 10617                           indf2	equ	0xFDF
 10618                           postinc2	equ	0xFDE
 10619                           postdec2	equ	0xFDD
 10620                           fsr2h	equ	0xFDA
 10621                           fsr2l	equ	0xFD9
 10622                           status	equ	0xFD8
 10623                           
 10624 ;; *************** function _printRTC *****************
 10625 ;; Defined at:
 10626 ;;		line 63 in file "RTC.c"
 10627 ;; Parameters:    Size  Location     Type
 10628 ;;		None
 10629 ;; Auto vars:     Size  Location     Type
 10630 ;;  i               2   66[BANK0 ] int 
 10631 ;;  INT_time       14   46[BANK0 ] int [7]
 10632 ;;  month           4   62[BANK0 ] unsigned char [4]
 10633 ;;  RTC_month       2   60[BANK0 ] int 
 10634 ;; Return value:  Size  Location     Type
 10635 ;;                  1    wreg      void 
 10636 ;; Registers used:
 10637 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10638 ;; Tracked objects:
 10639 ;;		On entry : 0/0
 10640 ;;		On exit  : 0/0
 10641 ;;		Unchanged: 0/0
 10642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10644 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10645 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;Total ram usage:       25 bytes
 10648 ;; Hardware stack levels used:    1
 10649 ;; Hardware stack levels required when called:   10
 10650 ;; This function calls:
 10651 ;;		_getRTC
 10652 ;;		_lcdInst
 10653 ;;		_printf
 10654 ;;		_strcpy
 10655 ;; This function is called by:
 10656 ;;		_UI
 10657 ;;		_change_state_to_menu_start
 10658 ;; This function uses a non-reentrant model
 10659 ;;
 10660                           
 10661                           	psect	text28
 10662  0033D6                     __ptext28:
 10663                           	opt stack 0
 10664  0033D6                     _printRTC:
 10665                           	opt stack 18
 10666                           
 10667                           ;RTC.c: 64: getRTC();
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;incstack = 0
 10671  0033D6  EC1C  F029         	call	_getRTC	;wreg free
 10672                           
 10673                           ;RTC.c: 65: char month[] = "MMM";
 10674  0033DA  C153  F0BE         	movff	printRTC@F3242,printRTC@month
 10675  0033DE  C154  F0BF         	movff	printRTC@F3242+1,printRTC@month+1
 10676  0033E2  C155  F0C0         	movff	printRTC@F3242+2,printRTC@month+2
 10677  0033E6  C156  F0C1         	movff	printRTC@F3242+3,printRTC@month+3
 10678                           
 10679                           ;RTC.c: 66: int INT_time[7];
 10680                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10681  0033EA  0E00               	movlw	0
 10682  0033EC  0100               	movlb	0	; () banked
 10683  0033EE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10684  0033F0  0E00               	movlw	0
 10685  0033F2  6FC2               	movwf	printRTC@i& (0+255),b
 10686                           
 10687                           ; BSR set to: 0
 10688  0033F4  0100               	movlb	0	; () banked
 10689  0033F6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10690  0033F8  D008               	goto	l7424
 10691  0033FA  0100               	movlb	0	; () banked
 10692  0033FC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10693  0033FE  E146               	bnz	l634
 10694  003400  0E07               	movlw	7
 10695  003402  0100               	movlb	0	; () banked
 10696  003404  5DC2               	subwf	printRTC@i& (0+255),w,b
 10697  003406  B0D8               	btfsc	status,0,c
 10698  003408  D041               	goto	l634
 10699  00340A                     l7424:
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10703  00340A  0E24               	movlw	low _time
 10704  00340C  0100               	movlb	0	; () banked
 10705  00340E  25C2               	addwf	printRTC@i& (0+255),w,b
 10706  003410  6ED9               	movwf	fsr2l,c
 10707  003412  0E01               	movlw	high _time
 10708  003414  0100               	movlb	0	; () banked
 10709  003416  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10710  003418  6EDA               	movwf	fsr2h,c
 10711  00341A  50DF               	movf	indf2,w,c
 10712  00341C  0100               	movlb	0	; () banked
 10713  00341E  6FAB               	movwf	??_printRTC& (0+255),b
 10714  003420  0100               	movlb	0	; () banked
 10715  003422  3BAB               	swapf	??_printRTC& (0+255),f,b
 10716  003424  0E0F               	movlw	15
 10717  003426  17AB               	andwf	??_printRTC& (0+255),f,b
 10718  003428  0E0F               	movlw	15
 10719  00342A  0100               	movlb	0	; () banked
 10720  00342C  17AB               	andwf	??_printRTC& (0+255),f,b
 10721  00342E  0100               	movlb	0	; () banked
 10722  003430  51AB               	movf	??_printRTC& (0+255),w,b
 10723  003432  0D0A               	mullw	10
 10724  003434  0E24               	movlw	low _time
 10725  003436  0100               	movlb	0	; () banked
 10726  003438  25C2               	addwf	printRTC@i& (0+255),w,b
 10727  00343A  6ED9               	movwf	fsr2l,c
 10728  00343C  0E01               	movlw	high _time
 10729  00343E  0100               	movlb	0	; () banked
 10730  003440  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10731  003442  6EDA               	movwf	fsr2h,c
 10732  003444  50DF               	movf	indf2,w,c
 10733  003446  0B0F               	andlw	15
 10734  003448  0100               	movlb	0	; () banked
 10735  00344A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10736  00344C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10737  00344E  50F3               	movf	prodl,w,c
 10738  003450  0100               	movlb	0	; () banked
 10739  003452  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10740  003454  50F4               	movf	prodh,w,c
 10741  003456  0100               	movlb	0	; () banked
 10742  003458  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10743  00345A  90D8               	bcf	status,0,c
 10744  00345C  0100               	movlb	0	; () banked
 10745  00345E  35C2               	rlcf	printRTC@i& (0+255),w,b
 10746  003460  6ED9               	movwf	fsr2l,c
 10747  003462  0100               	movlb	0	; () banked
 10748  003464  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10749  003466  6EDA               	movwf	fsr2h,c
 10750  003468  0EAE               	movlw	low printRTC@INT_time
 10751  00346A  26D9               	addwf	fsr2l,f,c
 10752  00346C  0E00               	movlw	high printRTC@INT_time
 10753  00346E  22DA               	addwfc	fsr2h,f,c
 10754  003470  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10755  003474  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10756                           
 10757                           ; BSR set to: 0
 10758  003478  0100               	movlb	0	; () banked
 10759  00347A  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10760  00347C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10761                           
 10762                           ; BSR set to: 0
 10763  00347E  0100               	movlb	0	; () banked
 10764  003480  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10765  003482  D7C3               	goto	l7424
 10766  003484  0100               	movlb	0	; () banked
 10767  003486  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10768  003488  E101               	bnz	u6510
 10769  00348A  D7BA               	goto	L10
 10770  00348C                     u6510:
 10771  00348C                     l634:
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;RTC.c: 69: }
 10775                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10776  00348C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10777  003490  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10778                           
 10779                           ;RTC.c: 72: switch(RTC_month){
 10780  003494  D0B4               	goto	l7456
 10781  003496                     l7430:
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;RTC.c: 74: strcpy(month, "JAN");
 10785  003496  0EBE               	movlw	low printRTC@month
 10786  003498  0100               	movlb	0	; () banked
 10787  00349A  6F80               	movwf	strcpy@to& (0+255),b
 10788  00349C  0E00               	movlw	high printRTC@month
 10789  00349E  0100               	movlb	0	; () banked
 10790  0034A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10791  0034A2  0EDA               	movlw	low STR_8
 10792  0034A4  0100               	movlb	0	; () banked
 10793  0034A6  6F82               	movwf	strcpy@from& (0+255),b
 10794  0034A8  0EFF               	movlw	high STR_8
 10795  0034AA  0100               	movlb	0	; () banked
 10796  0034AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10797  0034AE  ECC1  F02D         	call	_strcpy	;wreg free
 10798                           
 10799                           ;RTC.c: 75: break;
 10800  0034B2  D0D4               	goto	l7458
 10801  0034B4                     l7432:
 10802                           
 10803                           ;RTC.c: 77: strcpy(month, "FEB");
 10804  0034B4  0EBE               	movlw	low printRTC@month
 10805  0034B6  0100               	movlb	0	; () banked
 10806  0034B8  6F80               	movwf	strcpy@to& (0+255),b
 10807  0034BA  0E00               	movlw	high printRTC@month
 10808  0034BC  0100               	movlb	0	; () banked
 10809  0034BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10810  0034C0  0ECA               	movlw	low STR_9
 10811  0034C2  0100               	movlb	0	; () banked
 10812  0034C4  6F82               	movwf	strcpy@from& (0+255),b
 10813  0034C6  0EFF               	movlw	high STR_9
 10814  0034C8  0100               	movlb	0	; () banked
 10815  0034CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10816  0034CC  ECC1  F02D         	call	_strcpy	;wreg free
 10817                           
 10818                           ;RTC.c: 78: break;
 10819  0034D0  D0C5               	goto	l7458
 10820  0034D2                     l7434:
 10821                           
 10822                           ;RTC.c: 80: strcpy(month, "MAR");
 10823  0034D2  0EBE               	movlw	low printRTC@month
 10824  0034D4  0100               	movlb	0	; () banked
 10825  0034D6  6F80               	movwf	strcpy@to& (0+255),b
 10826  0034D8  0E00               	movlw	high printRTC@month
 10827  0034DA  0100               	movlb	0	; () banked
 10828  0034DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10829  0034DE  0EE6               	movlw	low STR_10
 10830  0034E0  0100               	movlb	0	; () banked
 10831  0034E2  6F82               	movwf	strcpy@from& (0+255),b
 10832  0034E4  0EFF               	movlw	high STR_10
 10833  0034E6  0100               	movlb	0	; () banked
 10834  0034E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10835  0034EA  ECC1  F02D         	call	_strcpy	;wreg free
 10836                           
 10837                           ;RTC.c: 81: break;
 10838  0034EE  D0B6               	goto	l7458
 10839  0034F0                     l7436:
 10840                           
 10841                           ;RTC.c: 83: strcpy(month, "APR");
 10842  0034F0  0EBE               	movlw	low printRTC@month
 10843  0034F2  0100               	movlb	0	; () banked
 10844  0034F4  6F80               	movwf	strcpy@to& (0+255),b
 10845  0034F6  0E00               	movlw	high printRTC@month
 10846  0034F8  0100               	movlb	0	; () banked
 10847  0034FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10848  0034FC  0EEA               	movlw	low STR_11
 10849  0034FE  0100               	movlb	0	; () banked
 10850  003500  6F82               	movwf	strcpy@from& (0+255),b
 10851  003502  0EFF               	movlw	high STR_11
 10852  003504  0100               	movlb	0	; () banked
 10853  003506  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10854  003508  ECC1  F02D         	call	_strcpy	;wreg free
 10855                           
 10856                           ;RTC.c: 84: break;
 10857  00350C  D0A7               	goto	l7458
 10858  00350E                     l7438:
 10859                           
 10860                           ;RTC.c: 86: strcpy(month, "MAY");
 10861  00350E  0EBE               	movlw	low printRTC@month
 10862  003510  0100               	movlb	0	; () banked
 10863  003512  6F80               	movwf	strcpy@to& (0+255),b
 10864  003514  0E00               	movlw	high printRTC@month
 10865  003516  0100               	movlb	0	; () banked
 10866  003518  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10867  00351A  0EFA               	movlw	low STR_12
 10868  00351C  0100               	movlb	0	; () banked
 10869  00351E  6F82               	movwf	strcpy@from& (0+255),b
 10870  003520  0EFF               	movlw	high STR_12
 10871  003522  0100               	movlb	0	; () banked
 10872  003524  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10873  003526  ECC1  F02D         	call	_strcpy	;wreg free
 10874                           
 10875                           ;RTC.c: 87: break;
 10876  00352A  D098               	goto	l7458
 10877  00352C                     l7440:
 10878                           
 10879                           ;RTC.c: 89: strcpy(month, "JUN");
 10880  00352C  0EBE               	movlw	low printRTC@month
 10881  00352E  0100               	movlb	0	; () banked
 10882  003530  6F80               	movwf	strcpy@to& (0+255),b
 10883  003532  0E00               	movlw	high printRTC@month
 10884  003534  0100               	movlb	0	; () banked
 10885  003536  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10886  003538  0EDE               	movlw	low STR_13
 10887  00353A  0100               	movlb	0	; () banked
 10888  00353C  6F82               	movwf	strcpy@from& (0+255),b
 10889  00353E  0EFF               	movlw	high STR_13
 10890  003540  0100               	movlb	0	; () banked
 10891  003542  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10892  003544  ECC1  F02D         	call	_strcpy	;wreg free
 10893                           
 10894                           ;RTC.c: 90: break;
 10895  003548  D089               	goto	l7458
 10896  00354A                     l7442:
 10897                           
 10898                           ;RTC.c: 92: strcpy(month, "JUL");
 10899  00354A  0EBE               	movlw	low printRTC@month
 10900  00354C  0100               	movlb	0	; () banked
 10901  00354E  6F80               	movwf	strcpy@to& (0+255),b
 10902  003550  0E00               	movlw	high printRTC@month
 10903  003552  0100               	movlb	0	; () banked
 10904  003554  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10905  003556  0ED6               	movlw	low STR_14
 10906  003558  0100               	movlb	0	; () banked
 10907  00355A  6F82               	movwf	strcpy@from& (0+255),b
 10908  00355C  0EFF               	movlw	high STR_14
 10909  00355E  0100               	movlb	0	; () banked
 10910  003560  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10911  003562  ECC1  F02D         	call	_strcpy	;wreg free
 10912                           
 10913                           ;RTC.c: 93: break;
 10914  003566  D07A               	goto	l7458
 10915  003568                     l7444:
 10916                           
 10917                           ;RTC.c: 95: strcpy(month, "AUG");
 10918  003568  0EBE               	movlw	low printRTC@month
 10919  00356A  0100               	movlb	0	; () banked
 10920  00356C  6F80               	movwf	strcpy@to& (0+255),b
 10921  00356E  0E00               	movlw	high printRTC@month
 10922  003570  0100               	movlb	0	; () banked
 10923  003572  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10924  003574  0ED2               	movlw	low STR_15
 10925  003576  0100               	movlb	0	; () banked
 10926  003578  6F82               	movwf	strcpy@from& (0+255),b
 10927  00357A  0EFF               	movlw	high STR_15
 10928  00357C  0100               	movlb	0	; () banked
 10929  00357E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10930  003580  ECC1  F02D         	call	_strcpy	;wreg free
 10931                           
 10932                           ;RTC.c: 96: break;
 10933  003584  D06B               	goto	l7458
 10934  003586                     l7446:
 10935                           
 10936                           ;RTC.c: 98: strcpy(month, "SEP");
 10937  003586  0EBE               	movlw	low printRTC@month
 10938  003588  0100               	movlb	0	; () banked
 10939  00358A  6F80               	movwf	strcpy@to& (0+255),b
 10940  00358C  0E00               	movlw	high printRTC@month
 10941  00358E  0100               	movlb	0	; () banked
 10942  003590  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10943  003592  0EE2               	movlw	low STR_16
 10944  003594  0100               	movlb	0	; () banked
 10945  003596  6F82               	movwf	strcpy@from& (0+255),b
 10946  003598  0EFF               	movlw	high STR_16
 10947  00359A  0100               	movlb	0	; () banked
 10948  00359C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10949  00359E  ECC1  F02D         	call	_strcpy	;wreg free
 10950                           
 10951                           ;RTC.c: 99: break;
 10952  0035A2  D05C               	goto	l7458
 10953  0035A4                     l7448:
 10954                           
 10955                           ;RTC.c: 101: strcpy(month, "OCT");
 10956  0035A4  0EBE               	movlw	low printRTC@month
 10957  0035A6  0100               	movlb	0	; () banked
 10958  0035A8  6F80               	movwf	strcpy@to& (0+255),b
 10959  0035AA  0E00               	movlw	high printRTC@month
 10960  0035AC  0100               	movlb	0	; () banked
 10961  0035AE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10962  0035B0  0EF2               	movlw	low STR_17
 10963  0035B2  0100               	movlb	0	; () banked
 10964  0035B4  6F82               	movwf	strcpy@from& (0+255),b
 10965  0035B6  0EFF               	movlw	high STR_17
 10966  0035B8  0100               	movlb	0	; () banked
 10967  0035BA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10968  0035BC  ECC1  F02D         	call	_strcpy	;wreg free
 10969                           
 10970                           ;RTC.c: 102: break;
 10971  0035C0  D04D               	goto	l7458
 10972  0035C2                     l7450:
 10973                           
 10974                           ;RTC.c: 104: strcpy(month, "NOV");
 10975  0035C2  0EBE               	movlw	low printRTC@month
 10976  0035C4  0100               	movlb	0	; () banked
 10977  0035C6  6F80               	movwf	strcpy@to& (0+255),b
 10978  0035C8  0E00               	movlw	high printRTC@month
 10979  0035CA  0100               	movlb	0	; () banked
 10980  0035CC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10981  0035CE  0EF6               	movlw	low STR_18
 10982  0035D0  0100               	movlb	0	; () banked
 10983  0035D2  6F82               	movwf	strcpy@from& (0+255),b
 10984  0035D4  0EFF               	movlw	high STR_18
 10985  0035D6  0100               	movlb	0	; () banked
 10986  0035D8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10987  0035DA  ECC1  F02D         	call	_strcpy	;wreg free
 10988                           
 10989                           ;RTC.c: 105: break;
 10990  0035DE  D03E               	goto	l7458
 10991  0035E0                     l7452:
 10992                           
 10993                           ;RTC.c: 107: strcpy(month, "DEC");
 10994  0035E0  0EBE               	movlw	low printRTC@month
 10995  0035E2  0100               	movlb	0	; () banked
 10996  0035E4  6F80               	movwf	strcpy@to& (0+255),b
 10997  0035E6  0E00               	movlw	high printRTC@month
 10998  0035E8  0100               	movlb	0	; () banked
 10999  0035EA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 11000  0035EC  0ECE               	movlw	low STR_19
 11001  0035EE  0100               	movlb	0	; () banked
 11002  0035F0  6F82               	movwf	strcpy@from& (0+255),b
 11003  0035F2  0EFF               	movlw	high STR_19
 11004  0035F4  0100               	movlb	0	; () banked
 11005  0035F6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 11006  0035F8  ECC1  F02D         	call	_strcpy	;wreg free
 11007                           
 11008                           ;RTC.c: 109: }
 11009                           
 11010                           ;RTC.c: 108: break;
 11011  0035FC  D02F               	goto	l7458
 11012  0035FE                     l7456:
 11013  0035FE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 11014  003602  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 11015                           
 11016                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11017                           ; Switch size 1, requested type "space"
 11018                           ; Number of cases is 1, Range of values is 0 to 0
 11019                           ; switch strategies available:
 11020                           ; Name         Instructions Cycles
 11021                           ; simple_byte            4     3 (average)
 11022                           ;	Chosen strategy is simple_byte
 11023  003606  0100               	movlb	0	; () banked
 11024  003608  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 11025  00360A  0A00               	xorlw	0	; case 0
 11026  00360C  A4D8               	btfss	status,2,c
 11027  00360E  D026               	goto	l7458
 11028                           
 11029                           ; BSR set to: 0
 11030                           ; Switch size 1, requested type "space"
 11031                           ; Number of cases is 12, Range of values is 1 to 12
 11032                           ; switch strategies available:
 11033                           ; Name         Instructions Cycles
 11034                           ; simple_byte           37    19 (average)
 11035                           ;	Chosen strategy is simple_byte
 11036  003610  0100               	movlb	0	; () banked
 11037  003612  51AB               	movf	??_printRTC& (0+255),w,b
 11038  003614  0A01               	xorlw	1	; case 1
 11039  003616  B4D8               	btfsc	status,2,c
 11040  003618  D73E               	goto	l7430
 11041  00361A  0A03               	xorlw	3	; case 2
 11042  00361C  B4D8               	btfsc	status,2,c
 11043  00361E  D74A               	goto	l7432
 11044  003620  0A01               	xorlw	1	; case 3
 11045  003622  B4D8               	btfsc	status,2,c
 11046  003624  D756               	goto	l7434
 11047  003626  0A07               	xorlw	7	; case 4
 11048  003628  B4D8               	btfsc	status,2,c
 11049  00362A  D762               	goto	l7436
 11050  00362C  0A01               	xorlw	1	; case 5
 11051  00362E  B4D8               	btfsc	status,2,c
 11052  003630  D76E               	goto	l7438
 11053  003632  0A03               	xorlw	3	; case 6
 11054  003634  B4D8               	btfsc	status,2,c
 11055  003636  D77A               	goto	l7440
 11056  003638  0A01               	xorlw	1	; case 7
 11057  00363A  B4D8               	btfsc	status,2,c
 11058  00363C  D786               	goto	l7442
 11059  00363E  0A0F               	xorlw	15	; case 8
 11060  003640  B4D8               	btfsc	status,2,c
 11061  003642  D792               	goto	l7444
 11062  003644  0A01               	xorlw	1	; case 9
 11063  003646  B4D8               	btfsc	status,2,c
 11064  003648  D79E               	goto	l7446
 11065  00364A  0A03               	xorlw	3	; case 10
 11066  00364C  B4D8               	btfsc	status,2,c
 11067  00364E  D7AA               	goto	l7448
 11068  003650  0A01               	xorlw	1	; case 11
 11069  003652  B4D8               	btfsc	status,2,c
 11070  003654  D7B6               	goto	l7450
 11071  003656  0A07               	xorlw	7	; case 12
 11072  003658  B4D8               	btfsc	status,2,c
 11073  00365A  D7C2               	goto	l7452
 11074  00365C                     l7458:
 11075                           
 11076                           ;RTC.c: 110: lcdInst(0b10000000);;
 11077  00365C  0E80               	movlw	128
 11078  00365E  EC63  F030         	call	_lcdInst
 11079                           
 11080                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 11081  003662  0EC2               	movlw	low STR_21
 11082  003664  0100               	movlb	0	; () banked
 11083  003666  6F8E               	movwf	printf@f& (0+255),b
 11084  003668  0EFA               	movlw	high STR_21
 11085  00366A  0100               	movlb	0	; () banked
 11086  00366C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11087  00366E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 11088  003672  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 11089  003676  0EBE               	movlw	low printRTC@month
 11090  003678  0100               	movlb	0	; () banked
 11091  00367A  6F92               	movwf	(?_printf+4)& (0+255),b
 11092  00367C  0E00               	movlw	high printRTC@month
 11093  00367E  0100               	movlb	0	; () banked
 11094  003680  6F93               	movwf	(?_printf+5)& (0+255),b
 11095  003682  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 11096  003686  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 11097  00368A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 11098  00368E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 11099  003692  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 11100  003696  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 11101  00369A  ECE7  F00E         	call	_printf	;wreg free
 11102  00369E  0012               	return		;funcret
 11103  0036A0                     __end_of_printRTC:
 11104                           	opt stack 0
 11105                           tblptru	equ	0xFF8
 11106                           tblptrh	equ	0xFF7
 11107                           tblptrl	equ	0xFF6
 11108                           tablat	equ	0xFF5
 11109                           prodh	equ	0xFF4
 11110                           prodl	equ	0xFF3
 11111                           intcon	equ	0xFF2
 11112                           intcon2	equ	0xFF1
 11113                           intcon3	equ	0xFF0
 11114                           postinc0	equ	0xFEE
 11115                           wreg	equ	0xFE8
 11116                           postdec1	equ	0xFE5
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125 ;; *************** function _strcpy *****************
 11126 ;; Defined at:
 11127 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;  to              2    0[BANK0 ] PTR unsigned char 
 11130 ;;		 -> printRTC@month(4), UI@month(4), 
 11131 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 11132 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 11133 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 11134 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 11135 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 11136 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 11137 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 11138 ;;		 -> STR_8(4), 
 11139 ;; Auto vars:     Size  Location     Type
 11140 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 11141 ;;		 -> printRTC@month(4), UI@month(4), 
 11142 ;; Return value:  Size  Location     Type
 11143 ;;                  2    0[BANK0 ] PTR unsigned char 
 11144 ;; Registers used:
 11145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11146 ;; Tracked objects:
 11147 ;;		On entry : 0/0
 11148 ;;		On exit  : 0/0
 11149 ;;		Unchanged: 0/0
 11150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11151 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11152 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11154 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11155 ;;Total ram usage:        6 bytes
 11156 ;; Hardware stack levels used:    1
 11157 ;; Hardware stack levels required when called:    7
 11158 ;; This function calls:
 11159 ;;		Nothing
 11160 ;; This function is called by:
 11161 ;;		_UI
 11162 ;;		_printRTC
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text29
 11167  005B82                     __ptext29:
 11168                           	opt stack 0
 11169  005B82                     _strcpy:
 11170                           	opt stack 20
 11171                           
 11172                           ;incstack = 0
 11173  005B82  C080  F084         	movff	strcpy@to,strcpy@cp
 11174  005B86  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 11175  005B8A  D006               	goto	l7122
 11176  005B8C                     l7120:
 11177  005B8C  0100               	movlb	0	; () banked
 11178  005B8E  4B84               	infsnz	strcpy@cp& (0+255),f,b
 11179  005B90  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 11180  005B92  0100               	movlb	0	; () banked
 11181  005B94  4B82               	infsnz	strcpy@from& (0+255),f,b
 11182  005B96  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 11183  005B98                     l7122:
 11184  005B98  C082  FFF6         	movff	strcpy@from,tblptrl
 11185  005B9C  C083  FFF7         	movff	strcpy@from+1,tblptrh
 11186  005BA0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11187  005BA0  6AF8               	clrf	tblptru,c
 11188  005BA2                     	endif
 11189  005BA2                     	if	0	;tblptru may be non-zero
 11190  005BA2                     	endif
 11191  005BA2  C084  FFD9         	movff	strcpy@cp,fsr2l
 11192  005BA6  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 11193  005BAA  0008               	tblrd		*
 11194  005BAC  CFF5 FFDF          	movff	tablat,indf2
 11195  005BB0  50DF               	movf	indf2,w,c
 11196  005BB2  B4D8               	btfsc	status,2,c
 11197  005BB4  0012               	return	
 11198  005BB6  D7EA               	goto	l7120
 11199  005BB8                     __end_of_strcpy:
 11200                           	opt stack 0
 11201                           tblptru	equ	0xFF8
 11202                           tblptrh	equ	0xFF7
 11203                           tblptrl	equ	0xFF6
 11204                           tablat	equ	0xFF5
 11205                           prodh	equ	0xFF4
 11206                           prodl	equ	0xFF3
 11207                           intcon	equ	0xFF2
 11208                           intcon2	equ	0xFF1
 11209                           intcon3	equ	0xFF0
 11210                           postinc0	equ	0xFEE
 11211                           wreg	equ	0xFE8
 11212                           postdec1	equ	0xFE5
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221 ;; *************** function _getRTC *****************
 11222 ;; Defined at:
 11223 ;;		line 44 in file "RTC.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;		None
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;  i               2    3[BANK0 ] int 
 11228 ;; Return value:  Size  Location     Type
 11229 ;;                  1    wreg      void 
 11230 ;; Registers used:
 11231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;Total ram usage:        2 bytes
 11242 ;; Hardware stack levels used:    1
 11243 ;; Hardware stack levels required when called:    9
 11244 ;; This function calls:
 11245 ;;		_I2C_Master_Read
 11246 ;;		_I2C_Master_Start
 11247 ;;		_I2C_Master_Stop
 11248 ;;		_I2C_Master_Write
 11249 ;; This function is called by:
 11250 ;;		_printRTC
 11251 ;;		_initSortTimer
 11252 ;; This function uses a non-reentrant model
 11253 ;;
 11254                           
 11255                           	psect	text30
 11256  005238                     __ptext30:
 11257                           	opt stack 0
 11258  005238                     _getRTC:
 11259                           	opt stack 18
 11260                           
 11261                           ;RTC.c: 48: I2C_Master_Start();
 11262                           
 11263                           ;incstack = 0
 11264  005238  EC89  F030         	call	_I2C_Master_Start	;wreg free
 11265                           
 11266                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 11267  00523C  0E00               	movlw	0
 11268  00523E  0100               	movlb	0	; () banked
 11269  005240  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11270  005242  0ED0               	movlw	208
 11271  005244  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11272  005246  EC77  F030         	call	_I2C_Master_Write	;wreg free
 11273                           
 11274                           ;RTC.c: 50: I2C_Master_Write(0x00);
 11275  00524A  0E00               	movlw	0
 11276  00524C  0100               	movlb	0	; () banked
 11277  00524E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11278  005250  0E00               	movlw	0
 11279  005252  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11280  005254  EC77  F030         	call	_I2C_Master_Write	;wreg free
 11281                           
 11282                           ;RTC.c: 51: I2C_Master_Stop();
 11283  005258  EC85  F030         	call	_I2C_Master_Stop	;wreg free
 11284                           
 11285                           ;RTC.c: 54: I2C_Master_Start();
 11286  00525C  EC89  F030         	call	_I2C_Master_Start	;wreg free
 11287                           
 11288                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 11289  005260  0E00               	movlw	0
 11290  005262  0100               	movlb	0	; () banked
 11291  005264  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11292  005266  0ED1               	movlw	209
 11293  005268  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11294  00526A  EC77  F030         	call	_I2C_Master_Write	;wreg free
 11295                           
 11296                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 11297  00526E  0E00               	movlw	0
 11298  005270  0100               	movlb	0	; () banked
 11299  005272  6F84               	movwf	(getRTC@i+1)& (0+255),b
 11300  005274  0E00               	movlw	0
 11301  005276  6F83               	movwf	getRTC@i& (0+255),b
 11302  005278                     l7128:
 11303                           
 11304                           ; BSR set to: 0
 11305  005278  0100               	movlb	0	; () banked
 11306  00527A  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 11307  00527C  D008               	goto	l7132
 11308  00527E  0100               	movlb	0	; () banked
 11309  005280  5184               	movf	(getRTC@i+1)& (0+255),w,b
 11310  005282  E115               	bnz	l7138
 11311  005284  0E06               	movlw	6
 11312  005286  0100               	movlb	0	; () banked
 11313  005288  5D83               	subwf	getRTC@i& (0+255),w,b
 11314  00528A  B0D8               	btfsc	status,0,c
 11315  00528C  D010               	goto	l7138
 11316  00528E                     l7132:
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 11320  00528E  0E24               	movlw	low _time
 11321  005290  0100               	movlb	0	; () banked
 11322  005292  2583               	addwf	getRTC@i& (0+255),w,b
 11323  005294  6ED9               	movwf	fsr2l,c
 11324  005296  0E01               	movlw	high _time
 11325  005298  0100               	movlb	0	; () banked
 11326  00529A  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 11327  00529C  6EDA               	movwf	fsr2h,c
 11328  00529E  0E01               	movlw	1
 11329  0052A0  EC18  F02F         	call	_I2C_Master_Read
 11330  0052A4  6EDF               	movwf	indf2,c
 11331  0052A6  0100               	movlb	0	; () banked
 11332  0052A8  4B83               	infsnz	getRTC@i& (0+255),f,b
 11333  0052AA  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 11334  0052AC  D7E5               	goto	l7128
 11335  0052AE                     l7138:
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;RTC.c: 58: }
 11339                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 11340  0052AE  0E00               	movlw	0
 11341  0052B0  EC18  F02F         	call	_I2C_Master_Read
 11342  0052B4  0101               	movlb	1	; () banked
 11343  0052B6  6F2A               	movwf	(_time+6)& (0+255),b
 11344                           
 11345                           ;RTC.c: 60: I2C_Master_Stop();
 11346  0052B8  EC85  F030         	call	_I2C_Master_Stop	;wreg free
 11347  0052BC  0012               	return		;funcret
 11348  0052BE                     __end_of_getRTC:
 11349                           	opt stack 0
 11350                           tblptru	equ	0xFF8
 11351                           tblptrh	equ	0xFF7
 11352                           tblptrl	equ	0xFF6
 11353                           tablat	equ	0xFF5
 11354                           prodh	equ	0xFF4
 11355                           prodl	equ	0xFF3
 11356                           intcon	equ	0xFF2
 11357                           intcon2	equ	0xFF1
 11358                           intcon3	equ	0xFF0
 11359                           postinc0	equ	0xFEE
 11360                           wreg	equ	0xFE8
 11361                           postdec1	equ	0xFE5
 11362                           fsr1l	equ	0xFE1
 11363                           indf2	equ	0xFDF
 11364                           postinc2	equ	0xFDE
 11365                           postdec2	equ	0xFDD
 11366                           fsr2h	equ	0xFDA
 11367                           fsr2l	equ	0xFD9
 11368                           status	equ	0xFD8
 11369                           
 11370 ;; *************** function _I2C_Master_Write *****************
 11371 ;; Defined at:
 11372 ;;		line 49 in file "I2C.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  d               2    1[BANK0 ] unsigned int 
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;		None
 11377 ;; Return value:  Size  Location     Type
 11378 ;;                  1    wreg      void 
 11379 ;; Registers used:
 11380 ;;		wreg, status,2, status,0, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 0/0
 11383 ;;		On exit  : 0/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11386 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;Total ram usage:        2 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    8
 11393 ;; This function calls:
 11394 ;;		_I2C_Master_Wait
 11395 ;; This function is called by:
 11396 ;;		_loadRTC
 11397 ;;		_getRTC
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           	psect	text31
 11402  0060EE                     __ptext31:
 11403                           	opt stack 0
 11404  0060EE                     _I2C_Master_Write:
 11405                           	opt stack 18
 11406                           
 11407                           ;I2C.c: 51: I2C_Master_Wait();
 11408                           
 11409                           ;incstack = 0
 11410  0060EE  EC48  F030         	call	_I2C_Master_Wait	;wreg free
 11411                           
 11412                           ;I2C.c: 52: SSPBUF = d;
 11413  0060F2  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11414  0060F6  0012               	return		;funcret
 11415  0060F8                     __end_of_I2C_Master_Write:
 11416                           	opt stack 0
 11417                           tblptru	equ	0xFF8
 11418                           tblptrh	equ	0xFF7
 11419                           tblptrl	equ	0xFF6
 11420                           tablat	equ	0xFF5
 11421                           prodh	equ	0xFF4
 11422                           prodl	equ	0xFF3
 11423                           intcon	equ	0xFF2
 11424                           intcon2	equ	0xFF1
 11425                           intcon3	equ	0xFF0
 11426                           postinc0	equ	0xFEE
 11427                           wreg	equ	0xFE8
 11428                           postdec1	equ	0xFE5
 11429                           fsr1l	equ	0xFE1
 11430                           indf2	equ	0xFDF
 11431                           postinc2	equ	0xFDE
 11432                           postdec2	equ	0xFDD
 11433                           fsr2h	equ	0xFDA
 11434                           fsr2l	equ	0xFD9
 11435                           status	equ	0xFD8
 11436                           
 11437 ;; *************** function _I2C_Master_Stop *****************
 11438 ;; Defined at:
 11439 ;;		line 43 in file "I2C.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;		None
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;		None
 11444 ;; Return value:  Size  Location     Type
 11445 ;;                  1    wreg      void 
 11446 ;; Registers used:
 11447 ;;		wreg, status,2, status,0, cstack
 11448 ;; Tracked objects:
 11449 ;;		On entry : 0/0
 11450 ;;		On exit  : 0/0
 11451 ;;		Unchanged: 0/0
 11452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11457 ;;Total ram usage:        0 bytes
 11458 ;; Hardware stack levels used:    1
 11459 ;; Hardware stack levels required when called:    8
 11460 ;; This function calls:
 11461 ;;		_I2C_Master_Wait
 11462 ;; This function is called by:
 11463 ;;		_loadRTC
 11464 ;;		_getRTC
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           	psect	text32
 11469  00610A                     __ptext32:
 11470                           	opt stack 0
 11471  00610A                     _I2C_Master_Stop:
 11472                           	opt stack 18
 11473                           
 11474                           ;I2C.c: 45: I2C_Master_Wait();
 11475                           
 11476                           ;incstack = 0
 11477  00610A  EC48  F030         	call	_I2C_Master_Wait	;wreg free
 11478                           
 11479                           ;I2C.c: 46: PEN = 1;
 11480  00610E  84C5               	bsf	4037,2,c	;volatile
 11481  006110  0012               	return		;funcret
 11482  006112                     __end_of_I2C_Master_Stop:
 11483                           	opt stack 0
 11484                           tblptru	equ	0xFF8
 11485                           tblptrh	equ	0xFF7
 11486                           tblptrl	equ	0xFF6
 11487                           tablat	equ	0xFF5
 11488                           prodh	equ	0xFF4
 11489                           prodl	equ	0xFF3
 11490                           intcon	equ	0xFF2
 11491                           intcon2	equ	0xFF1
 11492                           intcon3	equ	0xFF0
 11493                           postinc0	equ	0xFEE
 11494                           wreg	equ	0xFE8
 11495                           postdec1	equ	0xFE5
 11496                           fsr1l	equ	0xFE1
 11497                           indf2	equ	0xFDF
 11498                           postinc2	equ	0xFDE
 11499                           postdec2	equ	0xFDD
 11500                           fsr2h	equ	0xFDA
 11501                           fsr2l	equ	0xFD9
 11502                           status	equ	0xFD8
 11503                           
 11504 ;; *************** function _I2C_Master_Start *****************
 11505 ;; Defined at:
 11506 ;;		line 31 in file "I2C.c"
 11507 ;; Parameters:    Size  Location     Type
 11508 ;;		None
 11509 ;; Auto vars:     Size  Location     Type
 11510 ;;		None
 11511 ;; Return value:  Size  Location     Type
 11512 ;;                  1    wreg      void 
 11513 ;; Registers used:
 11514 ;;		wreg, status,2, status,0, cstack
 11515 ;; Tracked objects:
 11516 ;;		On entry : 0/0
 11517 ;;		On exit  : 0/0
 11518 ;;		Unchanged: 0/0
 11519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11524 ;;Total ram usage:        0 bytes
 11525 ;; Hardware stack levels used:    1
 11526 ;; Hardware stack levels required when called:    8
 11527 ;; This function calls:
 11528 ;;		_I2C_Master_Wait
 11529 ;; This function is called by:
 11530 ;;		_loadRTC
 11531 ;;		_getRTC
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           	psect	text33
 11536  006112                     __ptext33:
 11537                           	opt stack 0
 11538  006112                     _I2C_Master_Start:
 11539                           	opt stack 18
 11540                           
 11541                           ;I2C.c: 33: I2C_Master_Wait();
 11542                           
 11543                           ;incstack = 0
 11544  006112  EC48  F030         	call	_I2C_Master_Wait	;wreg free
 11545                           
 11546                           ;I2C.c: 34: SEN = 1;
 11547  006116  80C5               	bsf	4037,0,c	;volatile
 11548  006118  0012               	return		;funcret
 11549  00611A                     __end_of_I2C_Master_Start:
 11550                           	opt stack 0
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           intcon2	equ	0xFF1
 11559                           intcon3	equ	0xFF0
 11560                           postinc0	equ	0xFEE
 11561                           wreg	equ	0xFE8
 11562                           postdec1	equ	0xFE5
 11563                           fsr1l	equ	0xFE1
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           postdec2	equ	0xFDD
 11567                           fsr2h	equ	0xFDA
 11568                           fsr2l	equ	0xFD9
 11569                           status	equ	0xFD8
 11570                           
 11571 ;; *************** function _I2C_Master_Read *****************
 11572 ;; Defined at:
 11573 ;;		line 55 in file "I2C.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;  a               1    wreg     unsigned char 
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;  a               1    1[BANK0 ] unsigned char 
 11578 ;;  temp            1    2[BANK0 ] unsigned char 
 11579 ;; Return value:  Size  Location     Type
 11580 ;;                  1    wreg      unsigned char 
 11581 ;; Registers used:
 11582 ;;		wreg, status,2, status,0, cstack
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;Total ram usage:        2 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    8
 11595 ;; This function calls:
 11596 ;;		_I2C_Master_Wait
 11597 ;; This function is called by:
 11598 ;;		_getRTC
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           	psect	text34
 11603  005E30                     __ptext34:
 11604                           	opt stack 0
 11605  005E30                     _I2C_Master_Read:
 11606                           	opt stack 18
 11607                           
 11608                           ;incstack = 0
 11609                           ;I2C_Master_Read@a stored from wreg
 11610  005E30  0100               	movlb	0	; () banked
 11611  005E32  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11612                           
 11613                           ;I2C.c: 57: unsigned char temp;
 11614                           ;I2C.c: 58: I2C_Master_Wait();
 11615  005E34  EC48  F030         	call	_I2C_Master_Wait	;wreg free
 11616                           
 11617                           ;I2C.c: 59: RCEN = 1;
 11618  005E38  86C5               	bsf	4037,3,c	;volatile
 11619                           
 11620                           ;I2C.c: 60: I2C_Master_Wait();
 11621  005E3A  EC48  F030         	call	_I2C_Master_Wait	;wreg free
 11622                           
 11623                           ;I2C.c: 61: temp = SSPBUF;
 11624  005E3E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11625                           
 11626                           ;I2C.c: 62: I2C_Master_Wait();
 11627  005E42  EC48  F030         	call	_I2C_Master_Wait	;wreg free
 11628                           
 11629                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11630  005E46  0100               	movlb	0	; () banked
 11631  005E48  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11632  005E4A  0100               	movlb	0	; () banked
 11633  005E4C  A4D8               	btfss	status,2,c
 11634  005E4E  D002               	goto	u5480
 11635  005E50  8AC5               	bsf	4037,5,c	;volatile
 11636  005E52  D001               	goto	l6806
 11637  005E54                     u5480:
 11638  005E54  9AC5               	bcf	4037,5,c	;volatile
 11639  005E56                     l6806:
 11640                           
 11641                           ;I2C.c: 64: ACKEN = 1;
 11642  005E56  88C5               	bsf	4037,4,c	;volatile
 11643                           
 11644                           ;I2C.c: 65: return temp;
 11645  005E58  0100               	movlb	0	; () banked
 11646  005E5A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11647  005E5C  0012               	return	
 11648  005E5E                     __end_of_I2C_Master_Read:
 11649                           	opt stack 0
 11650                           tblptru	equ	0xFF8
 11651                           tblptrh	equ	0xFF7
 11652                           tblptrl	equ	0xFF6
 11653                           tablat	equ	0xFF5
 11654                           prodh	equ	0xFF4
 11655                           prodl	equ	0xFF3
 11656                           intcon	equ	0xFF2
 11657                           intcon2	equ	0xFF1
 11658                           intcon3	equ	0xFF0
 11659                           postinc0	equ	0xFEE
 11660                           wreg	equ	0xFE8
 11661                           postdec1	equ	0xFE5
 11662                           fsr1l	equ	0xFE1
 11663                           indf2	equ	0xFDF
 11664                           postinc2	equ	0xFDE
 11665                           postdec2	equ	0xFDD
 11666                           fsr2h	equ	0xFDA
 11667                           fsr2l	equ	0xFD9
 11668                           status	equ	0xFD8
 11669                           
 11670 ;; *************** function _I2C_Master_Wait *****************
 11671 ;; Defined at:
 11672 ;;		line 26 in file "I2C.c"
 11673 ;; Parameters:    Size  Location     Type
 11674 ;;		None
 11675 ;; Auto vars:     Size  Location     Type
 11676 ;;		None
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      void 
 11679 ;; Registers used:
 11680 ;;		wreg, status,2, status,0
 11681 ;; Tracked objects:
 11682 ;;		On entry : 0/0
 11683 ;;		On exit  : 0/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;Total ram usage:        1 bytes
 11691 ;; Hardware stack levels used:    1
 11692 ;; Hardware stack levels required when called:    7
 11693 ;; This function calls:
 11694 ;;		Nothing
 11695 ;; This function is called by:
 11696 ;;		_I2C_Master_Start
 11697 ;;		_I2C_Master_Stop
 11698 ;;		_I2C_Master_Write
 11699 ;;		_I2C_Master_Read
 11700 ;;		_I2C_Master_RepeatedStart
 11701 ;; This function uses a non-reentrant model
 11702 ;;
 11703                           
 11704                           	psect	text35
 11705  006090                     __ptext35:
 11706                           	opt stack 0
 11707  006090                     _I2C_Master_Wait:
 11708                           	opt stack 18
 11709  006090                     l78:
 11710  006090  B4C7               	btfsc	4039,2,c	;volatile
 11711  006092  D7FE               	goto	l78
 11712  006094  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11713  006098  0E1F               	movlw	31
 11714  00609A  0100               	movlb	0	; () banked
 11715  00609C  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11716  00609E  B4D8               	btfsc	status,2,c
 11717  0060A0  0012               	return	
 11718  0060A2  D7F6               	goto	l78
 11719  0060A4                     __end_of_I2C_Master_Wait:
 11720                           	opt stack 0
 11721                           tblptru	equ	0xFF8
 11722                           tblptrh	equ	0xFF7
 11723                           tblptrl	equ	0xFF6
 11724                           tablat	equ	0xFF5
 11725                           prodh	equ	0xFF4
 11726                           prodl	equ	0xFF3
 11727                           intcon	equ	0xFF2
 11728                           intcon2	equ	0xFF1
 11729                           intcon3	equ	0xFF0
 11730                           postinc0	equ	0xFEE
 11731                           wreg	equ	0xFE8
 11732                           postdec1	equ	0xFE5
 11733                           fsr1l	equ	0xFE1
 11734                           indf2	equ	0xFDF
 11735                           postinc2	equ	0xFDE
 11736                           postdec2	equ	0xFDD
 11737                           fsr2h	equ	0xFDA
 11738                           fsr2l	equ	0xFD9
 11739                           status	equ	0xFD8
 11740                           
 11741 ;; *************** function _change_state_to_menu_22 *****************
 11742 ;; Defined at:
 11743 ;;		line 501 in file "UI.c"
 11744 ;; Parameters:    Size  Location     Type
 11745 ;;		None
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;		None
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  1    wreg      void 
 11750 ;; Registers used:
 11751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;Total ram usage:        0 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:   10
 11764 ;; This function calls:
 11765 ;;		_lcdInst
 11766 ;;		_printf
 11767 ;; This function is called by:
 11768 ;;		_UI
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text36
 11773  005B12                     __ptext36:
 11774                           	opt stack 0
 11775  005B12                     _change_state_to_menu_22:
 11776                           	opt stack 19
 11777                           
 11778                           ;UI.c: 502: cur_state = 22;
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;incstack = 0
 11782  005B12  0E00               	movlw	0
 11783  005B14  0100               	movlb	0	; () banked
 11784  005B16  6FE9               	movwf	(_cur_state+1)& (0+255),b
 11785  005B18  0E16               	movlw	22
 11786  005B1A  6FE8               	movwf	_cur_state& (0+255),b
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;UI.c: 504: lcdInst(0b10000000);;
 11790  005B1C  0E80               	movlw	128
 11791  005B1E  EC63  F030         	call	_lcdInst
 11792                           
 11793                           ;UI.c: 505: printf("2. SORT        <");
 11794  005B22  0ED3               	movlw	low STR_34
 11795  005B24  0100               	movlb	0	; () banked
 11796  005B26  6F8E               	movwf	printf@f& (0+255),b
 11797  005B28  0EFD               	movlw	high STR_34
 11798  005B2A  0100               	movlb	0	; () banked
 11799  005B2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11800  005B2E  ECE7  F00E         	call	_printf	;wreg free
 11801                           
 11802                           ;UI.c: 506: lcdInst(0b11000000);;
 11803  005B32  0EC0               	movlw	192
 11804  005B34  EC63  F030         	call	_lcdInst
 11805                           
 11806                           ;UI.c: 507: printf("3. LOGS         ");
 11807  005B38  0E18               	movlw	low STR_36
 11808  005B3A  0100               	movlb	0	; () banked
 11809  005B3C  6F8E               	movwf	printf@f& (0+255),b
 11810  005B3E  0EFD               	movlw	high STR_36
 11811  005B40  0100               	movlb	0	; () banked
 11812  005B42  6F8F               	movwf	(printf@f+1)& (0+255),b
 11813  005B44  ECE7  F00E         	call	_printf	;wreg free
 11814  005B48  0012               	return		;funcret
 11815  005B4A                     __end_of_change_state_to_menu_22:
 11816                           	opt stack 0
 11817                           tblptru	equ	0xFF8
 11818                           tblptrh	equ	0xFF7
 11819                           tblptrl	equ	0xFF6
 11820                           tablat	equ	0xFF5
 11821                           prodh	equ	0xFF4
 11822                           prodl	equ	0xFF3
 11823                           intcon	equ	0xFF2
 11824                           intcon2	equ	0xFF1
 11825                           intcon3	equ	0xFF0
 11826                           postinc0	equ	0xFEE
 11827                           wreg	equ	0xFE8
 11828                           postdec1	equ	0xFE5
 11829                           fsr1l	equ	0xFE1
 11830                           indf2	equ	0xFDF
 11831                           postinc2	equ	0xFDE
 11832                           postdec2	equ	0xFDD
 11833                           fsr2h	equ	0xFDA
 11834                           fsr2l	equ	0xFD9
 11835                           status	equ	0xFD8
 11836                           
 11837 ;; *************** function _change_state_to_menu_12 *****************
 11838 ;; Defined at:
 11839 ;;		line 493 in file "UI.c"
 11840 ;; Parameters:    Size  Location     Type
 11841 ;;		None
 11842 ;; Auto vars:     Size  Location     Type
 11843 ;;		None
 11844 ;; Return value:  Size  Location     Type
 11845 ;;                  1    wreg      void 
 11846 ;; Registers used:
 11847 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11857 ;;Total ram usage:        0 bytes
 11858 ;; Hardware stack levels used:    1
 11859 ;; Hardware stack levels required when called:   10
 11860 ;; This function calls:
 11861 ;;		_lcdInst
 11862 ;;		_printf
 11863 ;; This function is called by:
 11864 ;;		_UI
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           	psect	text37
 11869  005B4A                     __ptext37:
 11870                           	opt stack 0
 11871  005B4A                     _change_state_to_menu_12:
 11872                           	opt stack 19
 11873                           
 11874                           ;UI.c: 494: cur_state = 12;
 11875                           
 11876                           ;incstack = 0
 11877  005B4A  0E00               	movlw	0
 11878  005B4C  0100               	movlb	0	; () banked
 11879  005B4E  6FE9               	movwf	(_cur_state+1)& (0+255),b
 11880  005B50  0E0C               	movlw	12
 11881  005B52  6FE8               	movwf	_cur_state& (0+255),b
 11882                           
 11883                           ; BSR set to: 0
 11884                           ;UI.c: 496: lcdInst(0b10000000);;
 11885  005B54  0E80               	movlw	128
 11886  005B56  EC63  F030         	call	_lcdInst
 11887                           
 11888                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11889  005B5A  0E3A               	movlw	low STR_33
 11890  005B5C  0100               	movlb	0	; () banked
 11891  005B5E  6F8E               	movwf	printf@f& (0+255),b
 11892  005B60  0EFD               	movlw	high STR_33
 11893  005B62  0100               	movlb	0	; () banked
 11894  005B64  6F8F               	movwf	(printf@f+1)& (0+255),b
 11895  005B66  ECE7  F00E         	call	_printf	;wreg free
 11896                           
 11897                           ;UI.c: 498: lcdInst(0b11000000);;
 11898  005B6A  0EC0               	movlw	192
 11899  005B6C  EC63  F030         	call	_lcdInst
 11900                           
 11901                           ;UI.c: 499: printf("2. SORT        <");
 11902  005B70  0ED3               	movlw	low STR_34
 11903  005B72  0100               	movlb	0	; () banked
 11904  005B74  6F8E               	movwf	printf@f& (0+255),b
 11905  005B76  0EFD               	movlw	high STR_34
 11906  005B78  0100               	movlb	0	; () banked
 11907  005B7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11908  005B7C  ECE7  F00E         	call	_printf	;wreg free
 11909  005B80  0012               	return		;funcret
 11910  005B82                     __end_of_change_state_to_menu_12:
 11911                           	opt stack 0
 11912                           tblptru	equ	0xFF8
 11913                           tblptrh	equ	0xFF7
 11914                           tblptrl	equ	0xFF6
 11915                           tablat	equ	0xFF5
 11916                           prodh	equ	0xFF4
 11917                           prodl	equ	0xFF3
 11918                           intcon	equ	0xFF2
 11919                           intcon2	equ	0xFF1
 11920                           intcon3	equ	0xFF0
 11921                           postinc0	equ	0xFEE
 11922                           wreg	equ	0xFE8
 11923                           postdec1	equ	0xFE5
 11924                           fsr1l	equ	0xFE1
 11925                           indf2	equ	0xFDF
 11926                           postinc2	equ	0xFDE
 11927                           postdec2	equ	0xFDD
 11928                           fsr2h	equ	0xFDA
 11929                           fsr2l	equ	0xFD9
 11930                           status	equ	0xFD8
 11931                           
 11932 ;; *************** function ___awmod *****************
 11933 ;; Defined at:
 11934 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11935 ;; Parameters:    Size  Location     Type
 11936 ;;  dividend        2    0[BANK0 ] int 
 11937 ;;  divisor         2    2[BANK0 ] int 
 11938 ;; Auto vars:     Size  Location     Type
 11939 ;;  sign            1    5[BANK0 ] unsigned char 
 11940 ;;  counter         1    4[BANK0 ] unsigned char 
 11941 ;; Return value:  Size  Location     Type
 11942 ;;                  2    0[BANK0 ] int 
 11943 ;; Registers used:
 11944 ;;		wreg, status,2, status,0
 11945 ;; Tracked objects:
 11946 ;;		On entry : 0/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11951 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;Total ram usage:        6 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; Hardware stack levels required when called:    7
 11957 ;; This function calls:
 11958 ;;		Nothing
 11959 ;; This function is called by:
 11960 ;;		_UI
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           	psect	text38
 11965  005072                     __ptext38:
 11966                           	opt stack 0
 11967  005072                     ___awmod:
 11968                           	opt stack 22
 11969                           
 11970                           ;incstack = 0
 11971  005072  0E00               	movlw	0
 11972  005074  0100               	movlb	0	; () banked
 11973  005076  6F85               	movwf	___awmod@sign& (0+255),b
 11974                           
 11975                           ; BSR set to: 0
 11976  005078  0100               	movlb	0	; () banked
 11977  00507A  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11978  00507C  D008               	goto	l9588
 11979                           
 11980                           ; BSR set to: 0
 11981  00507E  0100               	movlb	0	; () banked
 11982  005080  6D80               	negf	___awmod@dividend& (0+255),b
 11983  005082  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11984  005084  B0D8               	btfsc	status,0,c
 11985  005086  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11986                           
 11987                           ; BSR set to: 0
 11988  005088  0E01               	movlw	1
 11989  00508A  0100               	movlb	0	; () banked
 11990  00508C  6F85               	movwf	___awmod@sign& (0+255),b
 11991  00508E                     l9588:
 11992                           
 11993                           ; BSR set to: 0
 11994  00508E  0100               	movlb	0	; () banked
 11995  005090  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11996  005092  D005               	goto	l9592
 11997                           
 11998                           ; BSR set to: 0
 11999  005094  0100               	movlb	0	; () banked
 12000  005096  6D82               	negf	___awmod@divisor& (0+255),b
 12001  005098  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 12002  00509A  B0D8               	btfsc	status,0,c
 12003  00509C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 12004  00509E                     l9592:
 12005                           
 12006                           ; BSR set to: 0
 12007  00509E  0100               	movlb	0	; () banked
 12008  0050A0  5182               	movf	___awmod@divisor& (0+255),w,b
 12009  0050A2  0100               	movlb	0	; () banked
 12010  0050A4  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12011  0050A6  B4D8               	btfsc	status,2,c
 12012  0050A8  D026               	goto	l9608
 12013                           
 12014                           ; BSR set to: 0
 12015  0050AA  0E01               	movlw	1
 12016  0050AC  0100               	movlb	0	; () banked
 12017  0050AE  6F84               	movwf	___awmod@counter& (0+255),b
 12018  0050B0  D006               	goto	l9598
 12019  0050B2                     l9596:
 12020                           
 12021                           ; BSR set to: 0
 12022  0050B2  0100               	movlb	0	; () banked
 12023  0050B4  90D8               	bcf	status,0,c
 12024  0050B6  3782               	rlcf	___awmod@divisor& (0+255),f,b
 12025  0050B8  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12026  0050BA  0100               	movlb	0	; () banked
 12027  0050BC  2B84               	incf	___awmod@counter& (0+255),f,b
 12028  0050BE                     l9598:
 12029                           
 12030                           ; BSR set to: 0
 12031  0050BE  0100               	movlb	0	; () banked
 12032  0050C0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12033  0050C2  D7F7               	goto	l9596
 12034  0050C4                     l9600:
 12035                           
 12036                           ; BSR set to: 0
 12037  0050C4  0100               	movlb	0	; () banked
 12038  0050C6  5182               	movf	___awmod@divisor& (0+255),w,b
 12039  0050C8  0100               	movlb	0	; () banked
 12040  0050CA  5D80               	subwf	___awmod@dividend& (0+255),w,b
 12041  0050CC  0100               	movlb	0	; () banked
 12042  0050CE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12043  0050D0  0100               	movlb	0	; () banked
 12044  0050D2  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12045  0050D4  A0D8               	btfss	status,0,c
 12046  0050D6  D008               	goto	l9604
 12047                           
 12048                           ; BSR set to: 0
 12049  0050D8  0100               	movlb	0	; () banked
 12050  0050DA  5182               	movf	___awmod@divisor& (0+255),w,b
 12051  0050DC  0100               	movlb	0	; () banked
 12052  0050DE  5F80               	subwf	___awmod@dividend& (0+255),f,b
 12053  0050E0  0100               	movlb	0	; () banked
 12054  0050E2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12055  0050E4  0100               	movlb	0	; () banked
 12056  0050E6  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12057  0050E8                     l9604:
 12058                           
 12059                           ; BSR set to: 0
 12060  0050E8  0100               	movlb	0	; () banked
 12061  0050EA  90D8               	bcf	status,0,c
 12062  0050EC  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12063  0050EE  3382               	rrcf	___awmod@divisor& (0+255),f,b
 12064                           
 12065                           ; BSR set to: 0
 12066  0050F0  0100               	movlb	0	; () banked
 12067  0050F2  2F84               	decfsz	___awmod@counter& (0+255),f,b
 12068  0050F4  D7E7               	goto	l9600
 12069  0050F6                     l9608:
 12070                           
 12071                           ; BSR set to: 0
 12072  0050F6  0100               	movlb	0	; () banked
 12073  0050F8  5185               	movf	___awmod@sign& (0+255),w,b
 12074  0050FA  0100               	movlb	0	; () banked
 12075  0050FC  B4D8               	btfsc	status,2,c
 12076  0050FE  D005               	goto	l9612
 12077                           
 12078                           ; BSR set to: 0
 12079  005100  0100               	movlb	0	; () banked
 12080  005102  6D80               	negf	___awmod@dividend& (0+255),b
 12081  005104  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12082  005106  B0D8               	btfsc	status,0,c
 12083  005108  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12084  00510A                     l9612:
 12085                           
 12086                           ; BSR set to: 0
 12087  00510A  C080  F080         	movff	___awmod@dividend,?___awmod
 12088  00510E  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 12089  005112  0012               	return	
 12090  005114                     __end_of___awmod:
 12091                           	opt stack 0
 12092                           tblptru	equ	0xFF8
 12093                           tblptrh	equ	0xFF7
 12094                           tblptrl	equ	0xFF6
 12095                           tablat	equ	0xFF5
 12096                           prodh	equ	0xFF4
 12097                           prodl	equ	0xFF3
 12098                           intcon	equ	0xFF2
 12099                           intcon2	equ	0xFF1
 12100                           intcon3	equ	0xFF0
 12101                           postinc0	equ	0xFEE
 12102                           wreg	equ	0xFE8
 12103                           postdec1	equ	0xFE5
 12104                           fsr1l	equ	0xFE1
 12105                           indf2	equ	0xFDF
 12106                           postinc2	equ	0xFDE
 12107                           postdec2	equ	0xFDD
 12108                           fsr2h	equ	0xFDA
 12109                           fsr2l	equ	0xFD9
 12110                           status	equ	0xFD8
 12111                           
 12112 ;; *************** function ___awdiv *****************
 12113 ;; Defined at:
 12114 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;  dividend        2    6[BANK0 ] int 
 12117 ;;  divisor         2    8[BANK0 ] int 
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;  quotient        2   12[BANK0 ] int 
 12120 ;;  sign            1   11[BANK0 ] unsigned char 
 12121 ;;  counter         1   10[BANK0 ] unsigned char 
 12122 ;; Return value:  Size  Location     Type
 12123 ;;                  2    6[BANK0 ] int 
 12124 ;; Registers used:
 12125 ;;		wreg, status,2, status,0
 12126 ;; Tracked objects:
 12127 ;;		On entry : 0/0
 12128 ;;		On exit  : 0/0
 12129 ;;		Unchanged: 0/0
 12130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12131 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12134 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12135 ;;Total ram usage:        8 bytes
 12136 ;; Hardware stack levels used:    1
 12137 ;; Hardware stack levels required when called:    7
 12138 ;; This function calls:
 12139 ;;		Nothing
 12140 ;; This function is called by:
 12141 ;;		_UI
 12142 ;;		_ID
 12143 ;; This function uses a non-reentrant model
 12144 ;;
 12145                           
 12146                           	psect	text39
 12147  004E4E                     __ptext39:
 12148                           	opt stack 0
 12149  004E4E                     ___awdiv:
 12150                           	opt stack 21
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;incstack = 0
 12154  004E4E  0E00               	movlw	0
 12155  004E50  0100               	movlb	0	; () banked
 12156  004E52  6F8B               	movwf	___awdiv@sign& (0+255),b
 12157                           
 12158                           ; BSR set to: 0
 12159  004E54  0100               	movlb	0	; () banked
 12160  004E56  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12161  004E58  D008               	goto	l7744
 12162                           
 12163                           ; BSR set to: 0
 12164  004E5A  0100               	movlb	0	; () banked
 12165  004E5C  6D88               	negf	___awdiv@divisor& (0+255),b
 12166  004E5E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12167  004E60  B0D8               	btfsc	status,0,c
 12168  004E62  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12169                           
 12170                           ; BSR set to: 0
 12171  004E64  0E01               	movlw	1
 12172  004E66  0100               	movlb	0	; () banked
 12173  004E68  6F8B               	movwf	___awdiv@sign& (0+255),b
 12174  004E6A                     l7744:
 12175                           
 12176                           ; BSR set to: 0
 12177  004E6A  0100               	movlb	0	; () banked
 12178  004E6C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12179  004E6E  D008               	goto	l7750
 12180                           
 12181                           ; BSR set to: 0
 12182  004E70  0100               	movlb	0	; () banked
 12183  004E72  6D86               	negf	___awdiv@dividend& (0+255),b
 12184  004E74  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12185  004E76  B0D8               	btfsc	status,0,c
 12186  004E78  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12187                           
 12188                           ; BSR set to: 0
 12189  004E7A  0E01               	movlw	1
 12190  004E7C  0100               	movlb	0	; () banked
 12191  004E7E  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 12192  004E80                     l7750:
 12193                           
 12194                           ; BSR set to: 0
 12195  004E80  0E00               	movlw	0
 12196  004E82  0100               	movlb	0	; () banked
 12197  004E84  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 12198  004E86  0E00               	movlw	0
 12199  004E88  6F8C               	movwf	___awdiv@quotient& (0+255),b
 12200                           
 12201                           ; BSR set to: 0
 12202  004E8A  0100               	movlb	0	; () banked
 12203  004E8C  5188               	movf	___awdiv@divisor& (0+255),w,b
 12204  004E8E  0100               	movlb	0	; () banked
 12205  004E90  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12206  004E92  B4D8               	btfsc	status,2,c
 12207  004E94  D02C               	goto	l7772
 12208                           
 12209                           ; BSR set to: 0
 12210  004E96  0E01               	movlw	1
 12211  004E98  0100               	movlb	0	; () banked
 12212  004E9A  6F8A               	movwf	___awdiv@counter& (0+255),b
 12213  004E9C  D006               	goto	l7758
 12214  004E9E                     l7756:
 12215                           
 12216                           ; BSR set to: 0
 12217  004E9E  0100               	movlb	0	; () banked
 12218  004EA0  90D8               	bcf	status,0,c
 12219  004EA2  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 12220  004EA4  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12221  004EA6  0100               	movlb	0	; () banked
 12222  004EA8  2B8A               	incf	___awdiv@counter& (0+255),f,b
 12223  004EAA                     l7758:
 12224                           
 12225                           ; BSR set to: 0
 12226  004EAA  0100               	movlb	0	; () banked
 12227  004EAC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12228  004EAE  D7F7               	goto	l7756
 12229  004EB0                     l7760:
 12230                           
 12231                           ; BSR set to: 0
 12232  004EB0  0100               	movlb	0	; () banked
 12233  004EB2  90D8               	bcf	status,0,c
 12234  004EB4  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 12235  004EB6  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12236                           
 12237                           ; BSR set to: 0
 12238  004EB8  0100               	movlb	0	; () banked
 12239  004EBA  5188               	movf	___awdiv@divisor& (0+255),w,b
 12240  004EBC  0100               	movlb	0	; () banked
 12241  004EBE  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 12242  004EC0  0100               	movlb	0	; () banked
 12243  004EC2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12244  004EC4  0100               	movlb	0	; () banked
 12245  004EC6  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12246  004EC8  A0D8               	btfss	status,0,c
 12247  004ECA  D00A               	goto	l7768
 12248                           
 12249                           ; BSR set to: 0
 12250  004ECC  0100               	movlb	0	; () banked
 12251  004ECE  5188               	movf	___awdiv@divisor& (0+255),w,b
 12252  004ED0  0100               	movlb	0	; () banked
 12253  004ED2  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 12254  004ED4  0100               	movlb	0	; () banked
 12255  004ED6  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12256  004ED8  0100               	movlb	0	; () banked
 12257  004EDA  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12258                           
 12259                           ; BSR set to: 0
 12260  004EDC  0100               	movlb	0	; () banked
 12261  004EDE  818C               	bsf	___awdiv@quotient& (0+255),0,b
 12262  004EE0                     l7768:
 12263                           
 12264                           ; BSR set to: 0
 12265  004EE0  0100               	movlb	0	; () banked
 12266  004EE2  90D8               	bcf	status,0,c
 12267  004EE4  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12268  004EE6  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 12269                           
 12270                           ; BSR set to: 0
 12271  004EE8  0100               	movlb	0	; () banked
 12272  004EEA  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 12273  004EEC  D7E1               	goto	l7760
 12274  004EEE                     l7772:
 12275                           
 12276                           ; BSR set to: 0
 12277  004EEE  0100               	movlb	0	; () banked
 12278  004EF0  518B               	movf	___awdiv@sign& (0+255),w,b
 12279  004EF2  0100               	movlb	0	; () banked
 12280  004EF4  B4D8               	btfsc	status,2,c
 12281  004EF6  D005               	goto	l7776
 12282                           
 12283                           ; BSR set to: 0
 12284  004EF8  0100               	movlb	0	; () banked
 12285  004EFA  6D8C               	negf	___awdiv@quotient& (0+255),b
 12286  004EFC  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12287  004EFE  B0D8               	btfsc	status,0,c
 12288  004F00  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12289  004F02                     l7776:
 12290                           
 12291                           ; BSR set to: 0
 12292  004F02  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 12293  004F06  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 12294  004F0A  0012               	return	
 12295  004F0C                     __end_of___awdiv:
 12296                           	opt stack 0
 12297                           tblptru	equ	0xFF8
 12298                           tblptrh	equ	0xFF7
 12299                           tblptrl	equ	0xFF6
 12300                           tablat	equ	0xFF5
 12301                           prodh	equ	0xFF4
 12302                           prodl	equ	0xFF3
 12303                           intcon	equ	0xFF2
 12304                           intcon2	equ	0xFF1
 12305                           intcon3	equ	0xFF0
 12306                           postinc0	equ	0xFEE
 12307                           wreg	equ	0xFE8
 12308                           postdec1	equ	0xFE5
 12309                           fsr1l	equ	0xFE1
 12310                           indf2	equ	0xFDF
 12311                           postinc2	equ	0xFDE
 12312                           postdec2	equ	0xFDD
 12313                           fsr2h	equ	0xFDA
 12314                           fsr2l	equ	0xFD9
 12315                           status	equ	0xFD8
 12316                           
 12317 ;; *************** function _Test *****************
 12318 ;; Defined at:
 12319 ;;		line 30 in file "Test.c"
 12320 ;; Parameters:    Size  Location     Type
 12321 ;;		None
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;		None
 12324 ;; Return value:  Size  Location     Type
 12325 ;;                  1    wreg      void 
 12326 ;; Registers used:
 12327 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12328 ;; Tracked objects:
 12329 ;;		On entry : 0/0
 12330 ;;		On exit  : 0/0
 12331 ;;		Unchanged: 0/0
 12332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12335 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12336 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;Total ram usage:        2 bytes
 12338 ;; Hardware stack levels used:    1
 12339 ;; Hardware stack levels required when called:   11
 12340 ;; This function calls:
 12341 ;;		_BlockerTest
 12342 ;;		_BothServos
 12343 ;;		_PlatformTest
 12344 ;;		_PortTestDC
 12345 ;;		_PortTestPusher
 12346 ;;		_SpeedTest
 12347 ;;		_actuatorTest
 12348 ;;		_algorithmTest
 12349 ;;		_arm
 12350 ;;		_lcdInst
 12351 ;;		_printf
 12352 ;;		_sensorTest
 12353 ;; This function is called by:
 12354 ;;		_main
 12355 ;; This function uses a non-reentrant model
 12356 ;;
 12357                           
 12358                           	psect	text40
 12359  004670                     __ptext40:
 12360                           	opt stack 0
 12361  004670                     _Test:
 12362                           	opt stack 19
 12363                           
 12364                           ;Test.c: 32: while(machine_state == Testing_state){
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;incstack = 0
 12368  004670  D07C               	goto	l10366
 12369  004672                     l10326:
 12370                           
 12371                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12372  004672  0E01               	movlw	1
 12373  004674  EC63  F030         	call	_lcdInst
 12374  004678  0E68               	movlw	104
 12375  00467A  0100               	movlb	0	; () banked
 12376  00467C  6FC6               	movwf	??_Test& (0+255),b
 12377  00467E  0EE4               	movlw	228
 12378  004680                     u11537:
 12379  004680  2EE8               	decfsz	wreg,f,c
 12380  004682  D7FE               	bra	u11537
 12381  004684  2FC6               	decfsz	??_Test& (0+255),f,b
 12382  004686  D7FC               	bra	u11537
 12383  004688  F000               	nop	
 12384  00468A  0E80               	movlw	128
 12385  00468C  EC63  F030         	call	_lcdInst
 12386                           
 12387                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 12388  004690  0E90               	movlw	low STR_68
 12389  004692  0100               	movlb	0	; () banked
 12390  004694  6F8E               	movwf	printf@f& (0+255),b
 12391  004696  0EFC               	movlw	high STR_68
 12392  004698  0100               	movlb	0	; () banked
 12393  00469A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12394  00469C  ECE7  F00E         	call	_printf	;wreg free
 12395                           
 12396                           ;Test.c: 35: lcdInst(0b11000000);;
 12397  0046A0  0EC0               	movlw	192
 12398  0046A2  EC63  F030         	call	_lcdInst
 12399                           
 12400                           ;Test.c: 36: printf("B.PLA|8.SV|9.BLK");
 12401  0046A6  0EA1               	movlw	low STR_69
 12402  0046A8  0100               	movlb	0	; () banked
 12403  0046AA  6F8E               	movwf	printf@f& (0+255),b
 12404  0046AC  0EFC               	movlw	high STR_69
 12405  0046AE  0100               	movlb	0	; () banked
 12406  0046B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12407  0046B2  ECE7  F00E         	call	_printf	;wreg free
 12408  0046B6                     l1282:
 12409  0046B6  A281               	btfss	3969,1,c	;volatile
 12410  0046B8  D7FE               	goto	l1282
 12411                           
 12412                           ;Test.c: 38: var = PORTB >> 4;
 12413  0046BA  CF81 F0C6          	movff	3969,??_Test	;volatile
 12414  0046BE  0100               	movlb	0	; () banked
 12415  0046C0  3BC6               	swapf	??_Test& (0+255),f,b
 12416  0046C2  0E0F               	movlw	15
 12417  0046C4  17C6               	andwf	??_Test& (0+255),f,b
 12418  0046C6  0100               	movlb	0	; () banked
 12419  0046C8  51C6               	movf	??_Test& (0+255),w,b
 12420  0046CA  0101               	movlb	1	; () banked
 12421  0046CC  6F4D               	movwf	_var& (0+255),b
 12422  0046CE  6B4E               	clrf	(_var+1)& (0+255),b
 12423                           
 12424                           ; BSR set to: 1
 12425                           ;Test.c: 39: var++;
 12426  0046D0  0101               	movlb	1	; () banked
 12427  0046D2  4B4D               	infsnz	_var& (0+255),f,b
 12428  0046D4  2B4E               	incf	(_var+1)& (0+255),f,b
 12429  0046D6                     l1285:
 12430  0046D6  A281               	btfss	3969,1,c	;volatile
 12431  0046D8  D01F               	goto	l10364
 12432  0046DA  D7FD               	goto	l1285
 12433  0046DC                     l10342:
 12434                           
 12435                           ;Test.c: 43: algorithmTest();
 12436  0046DC  EC1F  F025         	call	_algorithmTest	;wreg free
 12437                           
 12438                           ;Test.c: 44: break;
 12439  0046E0  D044               	goto	l10366
 12440  0046E2                     l10344:
 12441                           
 12442                           ;Test.c: 46: sensorTest();
 12443  0046E2  ECFA  F012         	call	_sensorTest	;wreg free
 12444                           
 12445                           ;Test.c: 47: break;
 12446  0046E6  D041               	goto	l10366
 12447  0046E8                     l10346:
 12448                           
 12449                           ;Test.c: 49: actuatorTest();
 12450  0046E8  EC6D  F004         	call	_actuatorTest	;wreg free
 12451                           
 12452                           ;Test.c: 50: break;
 12453  0046EC  D03E               	goto	l10366
 12454  0046EE                     l10348:
 12455                           
 12456                           ;Test.c: 52: arm();
 12457  0046EE  ECBB  F023         	call	_arm	;wreg free
 12458                           
 12459                           ;Test.c: 53: break;
 12460  0046F2  D03B               	goto	l10366
 12461  0046F4                     l10350:
 12462                           
 12463                           ;Test.c: 55: PortTestDC();
 12464  0046F4  EC8A  F025         	call	_PortTestDC	;wreg free
 12465                           
 12466                           ;Test.c: 56: break;
 12467  0046F8  D038               	goto	l10366
 12468  0046FA                     l10352:
 12469                           
 12470                           ;Test.c: 58: SpeedTest();
 12471  0046FA  ECA2  F029         	call	_SpeedTest	;wreg free
 12472                           
 12473                           ;Test.c: 59: break;
 12474  0046FE  D035               	goto	l10366
 12475  004700                     l10354:
 12476                           
 12477                           ;Test.c: 61: PortTestPusher();
 12478  004700  EC0F  F02C         	call	_PortTestPusher	;wreg free
 12479                           
 12480                           ;Test.c: 62: break;
 12481  004704  D032               	goto	l10366
 12482  004706                     l10356:
 12483                           
 12484                           ;Test.c: 64: PlatformTest();
 12485  004706  EC69  F018         	call	_PlatformTest	;wreg free
 12486                           
 12487                           ;Test.c: 65: break;
 12488  00470A  D02F               	goto	l10366
 12489  00470C                     l10358:
 12490                           
 12491                           ;Test.c: 67: BothServos();
 12492  00470C  EC03  F011         	call	_BothServos	;wreg free
 12493                           
 12494                           ;Test.c: 68: break;
 12495  004710  D02C               	goto	l10366
 12496  004712                     l10360:
 12497                           
 12498                           ;Test.c: 70: BlockerTest();
 12499  004712  EC9E  F020         	call	_BlockerTest	;wreg free
 12500                           
 12501                           ;Test.c: 74: }
 12502                           
 12503                           ;Test.c: 73: break;
 12504                           
 12505                           ;Test.c: 72: default:
 12506                           
 12507                           ;Test.c: 71: break;
 12508  004716  D029               	goto	l10366
 12509  004718                     l10364:
 12510  004718  C14D  F0C6         	movff	_var,??_Test
 12511  00471C  C14E  F0C7         	movff	_var+1,??_Test+1
 12512                           
 12513                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12514                           ; Switch size 1, requested type "space"
 12515                           ; Number of cases is 1, Range of values is 0 to 0
 12516                           ; switch strategies available:
 12517                           ; Name         Instructions Cycles
 12518                           ; simple_byte            4     3 (average)
 12519                           ;	Chosen strategy is simple_byte
 12520  004720  0100               	movlb	0	; () banked
 12521  004722  51C7               	movf	(??_Test+1)& (0+255),w,b
 12522  004724  0A00               	xorlw	0	; case 0
 12523  004726  A4D8               	btfss	status,2,c
 12524  004728  D020               	goto	l10366
 12525                           
 12526                           ; BSR set to: 0
 12527                           ; Switch size 1, requested type "space"
 12528                           ; Number of cases is 10, Range of values is 1 to 11
 12529                           ; switch strategies available:
 12530                           ; Name         Instructions Cycles
 12531                           ; simple_byte           31    16 (average)
 12532                           ;	Chosen strategy is simple_byte
 12533  00472A  0100               	movlb	0	; () banked
 12534  00472C  51C6               	movf	??_Test& (0+255),w,b
 12535  00472E  0A01               	xorlw	1	; case 1
 12536  004730  B4D8               	btfsc	status,2,c
 12537  004732  D7D4               	goto	l10342
 12538  004734  0A03               	xorlw	3	; case 2
 12539  004736  B4D8               	btfsc	status,2,c
 12540  004738  D7D4               	goto	l10344
 12541  00473A  0A01               	xorlw	1	; case 3
 12542  00473C  B4D8               	btfsc	status,2,c
 12543  00473E  D7D4               	goto	l10346
 12544  004740  0A07               	xorlw	7	; case 4
 12545  004742  B4D8               	btfsc	status,2,c
 12546  004744  D7D4               	goto	l10348
 12547  004746  0A01               	xorlw	1	; case 5
 12548  004748  B4D8               	btfsc	status,2,c
 12549  00474A  D7D4               	goto	l10350
 12550  00474C  0A03               	xorlw	3	; case 6
 12551  00474E  B4D8               	btfsc	status,2,c
 12552  004750  D7D4               	goto	l10352
 12553  004752  0A01               	xorlw	1	; case 7
 12554  004754  B4D8               	btfsc	status,2,c
 12555  004756  D7D4               	goto	l10354
 12556  004758  0A0F               	xorlw	15	; case 8
 12557  00475A  B4D8               	btfsc	status,2,c
 12558  00475C  D7D4               	goto	l10356
 12559  00475E  0A02               	xorlw	2	; case 10
 12560  004760  B4D8               	btfsc	status,2,c
 12561  004762  D7D4               	goto	l10358
 12562  004764  0A01               	xorlw	1	; case 11
 12563  004766  B4D8               	btfsc	status,2,c
 12564  004768  D7D4               	goto	l10360
 12565  00476A                     l10366:
 12566  00476A  0E03               	movlw	3
 12567  00476C  0100               	movlb	0	; () banked
 12568  00476E  19FC               	xorwf	_machine_state& (0+255),w,b
 12569  004770  A4D8               	btfss	status,2,c
 12570  004772  0012               	return	
 12571  004774  D77E               	goto	l10326
 12572  004776                     __end_of_Test:
 12573                           	opt stack 0
 12574                           tblptru	equ	0xFF8
 12575                           tblptrh	equ	0xFF7
 12576                           tblptrl	equ	0xFF6
 12577                           tablat	equ	0xFF5
 12578                           prodh	equ	0xFF4
 12579                           prodl	equ	0xFF3
 12580                           intcon	equ	0xFF2
 12581                           intcon2	equ	0xFF1
 12582                           intcon3	equ	0xFF0
 12583                           postinc0	equ	0xFEE
 12584                           wreg	equ	0xFE8
 12585                           postdec1	equ	0xFE5
 12586                           fsr1l	equ	0xFE1
 12587                           indf2	equ	0xFDF
 12588                           postinc2	equ	0xFDE
 12589                           postdec2	equ	0xFDD
 12590                           fsr2h	equ	0xFDA
 12591                           fsr2l	equ	0xFD9
 12592                           status	equ	0xFD8
 12593                           
 12594 ;; *************** function _sensorTest *****************
 12595 ;; Defined at:
 12596 ;;		line 122 in file "Test.c"
 12597 ;; Parameters:    Size  Location     Type
 12598 ;;		None
 12599 ;; Auto vars:     Size  Location     Type
 12600 ;;  res             2   47[BANK0 ] int 
 12601 ;;  res             2   45[BANK0 ] int 
 12602 ;; Return value:  Size  Location     Type
 12603 ;;                  1    wreg      void 
 12604 ;; Registers used:
 12605 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12606 ;; Tracked objects:
 12607 ;;		On entry : 0/0
 12608 ;;		On exit  : 0/0
 12609 ;;		Unchanged: 0/0
 12610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12612 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12613 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12614 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12615 ;;Total ram usage:        6 bytes
 12616 ;; Hardware stack levels used:    1
 12617 ;; Hardware stack levels required when called:   10
 12618 ;; This function calls:
 12619 ;;		_lcdInst
 12620 ;;		_printf
 12621 ;;		_readADC
 12622 ;;		_readMAG
 12623 ;; This function is called by:
 12624 ;;		_Test
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           	psect	text41
 12629  0025F4                     __ptext41:
 12630                           	opt stack 0
 12631  0025F4                     _sensorTest:
 12632                           	opt stack 19
 12633                           
 12634                           ;Test.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;incstack = 0
 12638  0025F4  0E01               	movlw	1
 12639  0025F6  EC63  F030         	call	_lcdInst
 12640  0025FA  0E68               	movlw	104
 12641  0025FC  0100               	movlb	0	; () banked
 12642  0025FE  6FAB               	movwf	??_sensorTest& (0+255),b
 12643  002600  0EE4               	movlw	228
 12644  002602                     u11547:
 12645  002602  2EE8               	decfsz	wreg,f,c
 12646  002604  D7FE               	bra	u11547
 12647  002606  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12648  002608  D7FC               	bra	u11547
 12649  00260A  F000               	nop	
 12650  00260C  0E80               	movlw	128
 12651  00260E  EC63  F030         	call	_lcdInst
 12652                           
 12653                           ;Test.c: 125: printf("SENSORS");
 12654  002612  0EAD               	movlw	low STR_77
 12655  002614  0100               	movlb	0	; () banked
 12656  002616  6F8E               	movwf	printf@f& (0+255),b
 12657  002618  0EFF               	movlw	high STR_77
 12658  00261A  0100               	movlb	0	; () banked
 12659  00261C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12660  00261E  ECE7  F00E         	call	_printf	;wreg free
 12661                           
 12662                           ;Test.c: 126: lcdInst(0b11000000);;
 12663  002622  0EC0               	movlw	192
 12664  002624  EC63  F030         	call	_lcdInst
 12665                           
 12666                           ;Test.c: 127: printf("PUSH TO START");
 12667  002628  0E3A               	movlw	low STR_71
 12668  00262A  0100               	movlb	0	; () banked
 12669  00262C  6F8E               	movwf	printf@f& (0+255),b
 12670  00262E  0EFF               	movlw	high STR_71
 12671  002630  0100               	movlb	0	; () banked
 12672  002632  6F8F               	movwf	(printf@f+1)& (0+255),b
 12673  002634  ECE7  F00E         	call	_printf	;wreg free
 12674                           
 12675                           ;Test.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
 12676  002638  0E05               	movlw	5
 12677  00263A  0100               	movlb	0	; () banked
 12678  00263C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12679  00263E  0E0F               	movlw	15
 12680  002640  0100               	movlb	0	; () banked
 12681  002642  6FAB               	movwf	??_sensorTest& (0+255),b
 12682  002644  0EF1               	movlw	241
 12683  002646                     u11557:
 12684  002646  2EE8               	decfsz	wreg,f,c
 12685  002648  D7FE               	bra	u11557
 12686  00264A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12687  00264C  D7FC               	bra	u11557
 12688  00264E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12689  002650  D7FA               	bra	u11557
 12690  002652                     l1314:
 12691  002652  A281               	btfss	3969,1,c	;volatile
 12692  002654  D7FE               	goto	l1314
 12693  002656                     l1317:
 12694  002656  B281               	btfsc	3969,1,c	;volatile
 12695  002658  D7FE               	goto	l1317
 12696                           
 12697                           ;Test.c: 131: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12698  00265A  0E01               	movlw	1
 12699  00265C  EC63  F030         	call	_lcdInst
 12700  002660  0E68               	movlw	104
 12701  002662  0100               	movlb	0	; () banked
 12702  002664  6FAB               	movwf	??_sensorTest& (0+255),b
 12703  002666  0EE4               	movlw	228
 12704  002668                     u11567:
 12705  002668  2EE8               	decfsz	wreg,f,c
 12706  00266A  D7FE               	bra	u11567
 12707  00266C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12708  00266E  D7FC               	bra	u11567
 12709  002670  F000               	nop	
 12710  002672  0E80               	movlw	128
 12711  002674  EC63  F030         	call	_lcdInst
 12712                           
 12713                           ;Test.c: 136: LATCbits.LATC5 = 1;
 12714  002678  8A8B               	bsf	3979,5,c	;volatile
 12715                           
 12716                           ;Test.c: 138: while(PORTBbits.RB1 == 0){
 12717  00267A  D05C               	goto	l8652
 12718  00267C                     l8634:
 12719                           
 12720                           ;Test.c: 139: readADC(0);
 12721  00267C  0E00               	movlw	0
 12722  00267E  EC5C  F02F         	call	_readADC
 12723                           
 12724                           ;Test.c: 140: int res = ADRESH<<8 | ADRESL;
 12725  002682  50C3               	movf	4035,w,c	;volatile
 12726  002684  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12727  002688  0100               	movlb	0	; () banked
 12728  00268A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12729  00268C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12730  002690  0100               	movlb	0	; () banked
 12731  002692  6BAB               	clrf	??_sensorTest& (0+255),b
 12732  002694  0100               	movlb	0	; () banked
 12733  002696  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12734  002698  0100               	movlb	0	; () banked
 12735  00269A  6FAD               	movwf	sensorTest@res& (0+255),b
 12736  00269C  0100               	movlb	0	; () banked
 12737  00269E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12738  0026A0  0100               	movlb	0	; () banked
 12739  0026A2  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;Test.c: 141: IR_signal = (res > 700) ? 1 : 0;
 12743  0026A4  0100               	movlb	0	; () banked
 12744  0026A6  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12745  0026A8  D00A               	goto	u7840
 12746  0026AA  0EBD               	movlw	189
 12747  0026AC  0100               	movlb	0	; () banked
 12748  0026AE  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12749  0026B0  0E02               	movlw	2
 12750  0026B2  0100               	movlb	0	; () banked
 12751  0026B4  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12752  0026B6  A0D8               	btfss	status,0,c
 12753  0026B8  D002               	goto	u7840
 12754  0026BA  0E01               	movlw	1
 12755  0026BC  D001               	goto	u7850
 12756  0026BE                     u7840:
 12757  0026BE  0E00               	movlw	0
 12758  0026C0                     u7850:
 12759  0026C0  0100               	movlb	0	; () banked
 12760  0026C2  6FE2               	movwf	_IR_signal& (0+255),b
 12761  0026C4  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 12762                           
 12763                           ;Test.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12764  0026C6  0E01               	movlw	1
 12765  0026C8  EC63  F030         	call	_lcdInst
 12766  0026CC  0E68               	movlw	104
 12767  0026CE  0100               	movlb	0	; () banked
 12768  0026D0  6FAB               	movwf	??_sensorTest& (0+255),b
 12769  0026D2  0EE4               	movlw	228
 12770  0026D4                     u11577:
 12771  0026D4  2EE8               	decfsz	wreg,f,c
 12772  0026D6  D7FE               	bra	u11577
 12773  0026D8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12774  0026DA  D7FC               	bra	u11577
 12775  0026DC  F000               	nop	
 12776  0026DE  0E80               	movlw	128
 12777  0026E0  EC63  F030         	call	_lcdInst
 12778                           
 12779                           ;Test.c: 144: printf("IR (PUSHER): %d  ", IR_signal);
 12780  0026E4  0E25               	movlw	low STR_79
 12781  0026E6  0100               	movlb	0	; () banked
 12782  0026E8  6F8E               	movwf	printf@f& (0+255),b
 12783  0026EA  0EFB               	movlw	high STR_79
 12784  0026EC  0100               	movlb	0	; () banked
 12785  0026EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12786  0026F0  C0E2  F090         	movff	_IR_signal,?_printf+2
 12787  0026F4  C0E3  F091         	movff	_IR_signal+1,?_printf+3
 12788  0026F8  ECE7  F00E         	call	_printf	;wreg free
 12789                           
 12790                           ;Test.c: 145: lcdInst(0b11000000);;
 12791  0026FC  0EC0               	movlw	192
 12792  0026FE  EC63  F030         	call	_lcdInst
 12793                           
 12794                           ;Test.c: 146: printf("%d", res);
 12795  002702  0E25               	movlw	low (STR_27+14)
 12796  002704  0100               	movlb	0	; () banked
 12797  002706  6F8E               	movwf	printf@f& (0+255),b
 12798  002708  0EFE               	movlw	high (STR_27+14)
 12799  00270A  0100               	movlb	0	; () banked
 12800  00270C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12801  00270E  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12802  002712  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12803  002716  ECE7  F00E         	call	_printf	;wreg free
 12804                           
 12805                           ;Test.c: 147: _delay((unsigned long)((100)*(32000000/4000.0)));
 12806  00271A  0E05               	movlw	5
 12807  00271C  0100               	movlb	0	; () banked
 12808  00271E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12809  002720  0E0F               	movlw	15
 12810  002722  0100               	movlb	0	; () banked
 12811  002724  6FAB               	movwf	??_sensorTest& (0+255),b
 12812  002726  0EF1               	movlw	241
 12813  002728                     u11587:
 12814  002728  2EE8               	decfsz	wreg,f,c
 12815  00272A  D7FE               	bra	u11587
 12816  00272C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12817  00272E  D7FC               	bra	u11587
 12818  002730  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12819  002732  D7FA               	bra	u11587
 12820  002734                     l8652:
 12821  002734  A281               	btfss	3969,1,c	;volatile
 12822  002736  D7A2               	goto	l8634
 12823                           
 12824                           ;Test.c: 148: }
 12825                           ;Test.c: 149: LATCbits.LATC5 = 0;
 12826  002738  9A8B               	bcf	3979,5,c	;volatile
 12827  00273A                     l1323:
 12828  00273A  B281               	btfsc	3969,1,c	;volatile
 12829  00273C  D7FE               	goto	l1323
 12830                           
 12831                           ;Test.c: 155: LATCbits.LATC6 = 1;
 12832  00273E  8C8B               	bsf	3979,6,c	;volatile
 12833                           
 12834                           ;Test.c: 158: while(PORTBbits.RB1 == 0){
 12835                           
 12836                           ;Test.c: 157: while(1){
 12837  002740  D05C               	goto	l8672
 12838  002742                     l8654:
 12839                           
 12840                           ;Test.c: 159: readADC(3);
 12841  002742  0E03               	movlw	3
 12842  002744  EC5C  F02F         	call	_readADC
 12843                           
 12844                           ;Test.c: 160: int res = ADRESH<<8 | ADRESL;
 12845  002748  50C3               	movf	4035,w,c	;volatile
 12846  00274A  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12847  00274E  0100               	movlb	0	; () banked
 12848  002750  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12849  002752  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12850  002756  0100               	movlb	0	; () banked
 12851  002758  6BAB               	clrf	??_sensorTest& (0+255),b
 12852  00275A  0100               	movlb	0	; () banked
 12853  00275C  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12854  00275E  0100               	movlb	0	; () banked
 12855  002760  6FAF               	movwf	sensorTest@res_1733& (0+255),b
 12856  002762  0100               	movlb	0	; () banked
 12857  002764  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12858  002766  0100               	movlb	0	; () banked
 12859  002768  6FB0               	movwf	(sensorTest@res_1733+1)& (0+255),b
 12860                           
 12861                           ; BSR set to: 0
 12862                           ;Test.c: 161: IR_signal = (res > 250) ? 1 : 0;
 12863  00276A  0100               	movlb	0	; () banked
 12864  00276C  BFB0               	btfsc	(sensorTest@res_1733+1)& (0+255),7,b
 12865  00276E  D00A               	goto	u7880
 12866  002770  0100               	movlb	0	; () banked
 12867  002772  51B0               	movf	(sensorTest@res_1733+1)& (0+255),w,b
 12868  002774  E105               	bnz	u7881
 12869  002776  0EFB               	movlw	251
 12870  002778  0100               	movlb	0	; () banked
 12871  00277A  5DAF               	subwf	sensorTest@res_1733& (0+255),w,b
 12872  00277C  A0D8               	btfss	status,0,c
 12873  00277E  D002               	goto	u7880
 12874  002780                     u7881:
 12875  002780  0E01               	movlw	1
 12876  002782  D001               	goto	u7890
 12877  002784                     u7880:
 12878  002784  0E00               	movlw	0
 12879  002786                     u7890:
 12880  002786  0100               	movlb	0	; () banked
 12881  002788  6FE2               	movwf	_IR_signal& (0+255),b
 12882  00278A  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 12883                           
 12884                           ;Test.c: 163: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12885  00278C  0E01               	movlw	1
 12886  00278E  EC63  F030         	call	_lcdInst
 12887  002792  0E68               	movlw	104
 12888  002794  0100               	movlb	0	; () banked
 12889  002796  6FAB               	movwf	??_sensorTest& (0+255),b
 12890  002798  0EE4               	movlw	228
 12891  00279A                     u11597:
 12892  00279A  2EE8               	decfsz	wreg,f,c
 12893  00279C  D7FE               	bra	u11597
 12894  00279E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12895  0027A0  D7FC               	bra	u11597
 12896  0027A2  F000               	nop	
 12897  0027A4  0E80               	movlw	128
 12898  0027A6  EC63  F030         	call	_lcdInst
 12899                           
 12900                           ;Test.c: 164: printf("IR (REFLEC): %d  ", IR_signal);
 12901  0027AA  0E13               	movlw	low STR_81
 12902  0027AC  0100               	movlb	0	; () banked
 12903  0027AE  6F8E               	movwf	printf@f& (0+255),b
 12904  0027B0  0EFB               	movlw	high STR_81
 12905  0027B2  0100               	movlb	0	; () banked
 12906  0027B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12907  0027B6  C0E2  F090         	movff	_IR_signal,?_printf+2
 12908  0027BA  C0E3  F091         	movff	_IR_signal+1,?_printf+3
 12909  0027BE  ECE7  F00E         	call	_printf	;wreg free
 12910                           
 12911                           ;Test.c: 165: lcdInst(0b11000000);;
 12912  0027C2  0EC0               	movlw	192
 12913  0027C4  EC63  F030         	call	_lcdInst
 12914                           
 12915                           ;Test.c: 166: printf("%d", res);
 12916  0027C8  0E25               	movlw	low (STR_27+14)
 12917  0027CA  0100               	movlb	0	; () banked
 12918  0027CC  6F8E               	movwf	printf@f& (0+255),b
 12919  0027CE  0EFE               	movlw	high (STR_27+14)
 12920  0027D0  0100               	movlb	0	; () banked
 12921  0027D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12922  0027D4  C0AF  F090         	movff	sensorTest@res_1733,?_printf+2
 12923  0027D8  C0B0  F091         	movff	sensorTest@res_1733+1,?_printf+3
 12924  0027DC  ECE7  F00E         	call	_printf	;wreg free
 12925                           
 12926                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 12927  0027E0  0E05               	movlw	5
 12928  0027E2  0100               	movlb	0	; () banked
 12929  0027E4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12930  0027E6  0E0F               	movlw	15
 12931  0027E8  0100               	movlb	0	; () banked
 12932  0027EA  6FAB               	movwf	??_sensorTest& (0+255),b
 12933  0027EC  0EF1               	movlw	241
 12934  0027EE                     u11607:
 12935  0027EE  2EE8               	decfsz	wreg,f,c
 12936  0027F0  D7FE               	bra	u11607
 12937  0027F2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12938  0027F4  D7FC               	bra	u11607
 12939  0027F6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12940  0027F8  D7FA               	bra	u11607
 12941  0027FA                     l8672:
 12942  0027FA  A281               	btfss	3969,1,c	;volatile
 12943  0027FC  D7A2               	goto	l8654
 12944                           
 12945                           ;Test.c: 168: }
 12946                           ;Test.c: 169: if(PORTB >> 4 == 0b1111){
 12947  0027FE  3881               	swapf	3969,w,c	;volatile
 12948  002800  0B0F               	andlw	15
 12949  002802  0A0F               	xorlw	15
 12950  002804  B4D8               	btfsc	status,2,c
 12951  002806  D01D               	goto	l1331
 12952                           
 12953                           ;Test.c: 172: else if(PORTB >> 4 == 0b0000){
 12954                           
 12955                           ;Test.c: 171: }
 12956                           
 12957                           ;Test.c: 170: break;
 12958  002808  CF81 F0AB          	movff	3969,??_sensorTest	;volatile
 12959  00280C  0100               	movlb	0	; () banked
 12960  00280E  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12961  002810  0E0F               	movlw	15
 12962  002812  17AB               	andwf	??_sensorTest& (0+255),f,b
 12963  002814  A4D8               	btfss	status,2,c
 12964  002816  D012               	goto	l1334
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;Test.c: 173: LATCbits.LATC6 = !LATCbits.LATC6;
 12968  002818  BC8B               	btfsc	3979,6,c	;volatile
 12969  00281A  D004               	goto	u7930
 12970  00281C  0100               	movlb	0	; () banked
 12971  00281E  6BAB               	clrf	??_sensorTest& (0+255),b
 12972  002820  2BAB               	incf	??_sensorTest& (0+255),f,b
 12973  002822  D002               	goto	u7948
 12974  002824                     u7930:
 12975  002824  0100               	movlb	0	; () banked
 12976  002826  6BAB               	clrf	??_sensorTest& (0+255),b
 12977  002828                     u7948:
 12978  002828  0100               	movlb	0	; () banked
 12979  00282A  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12980  00282C  47AB               	rlncf	??_sensorTest& (0+255),f,b
 12981  00282E  47AB               	rlncf	??_sensorTest& (0+255),f,b
 12982  002830  508B               	movf	3979,w,c	;volatile
 12983  002832  0100               	movlb	0	; () banked
 12984  002834  19AB               	xorwf	??_sensorTest& (0+255),w,b
 12985  002836  0BBF               	andlw	-65
 12986  002838  19AB               	xorwf	??_sensorTest& (0+255),w,b
 12987  00283A  6E8B               	movwf	3979,c	;volatile
 12988  00283C                     l1334:
 12989  00283C  A281               	btfss	3969,1,c	;volatile
 12990  00283E  D7DD               	goto	l8672
 12991  002840  D7FD               	goto	l1334
 12992  002842                     l1331:
 12993                           
 12994                           ;Test.c: 176: }
 12995                           ;Test.c: 177: LATCbits.LATC6 = 0;
 12996  002842  9C8B               	bcf	3979,6,c	;volatile
 12997  002844                     l1338:
 12998  002844  B281               	btfsc	3969,1,c	;volatile
 12999  002846  D7FE               	goto	l1338
 13000                           
 13001                           ;Test.c: 187: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13002  002848  0E01               	movlw	1
 13003  00284A  EC63  F030         	call	_lcdInst
 13004  00284E  0E68               	movlw	104
 13005  002850  0100               	movlb	0	; () banked
 13006  002852  6FAB               	movwf	??_sensorTest& (0+255),b
 13007  002854  0EE4               	movlw	228
 13008  002856                     u11617:
 13009  002856  2EE8               	decfsz	wreg,f,c
 13010  002858  D7FE               	bra	u11617
 13011  00285A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13012  00285C  D7FC               	bra	u11617
 13013  00285E  F000               	nop	
 13014  002860  0E80               	movlw	128
 13015  002862  EC63  F030         	call	_lcdInst
 13016                           
 13017                           ;Test.c: 188: printf("TST: MAGNETISM");
 13018  002866  0EB6               	movlw	low STR_83
 13019  002868  0100               	movlb	0	; () banked
 13020  00286A  6F8E               	movwf	printf@f& (0+255),b
 13021  00286C  0EFE               	movlw	high STR_83
 13022  00286E  0100               	movlb	0	; () banked
 13023  002870  6F8F               	movwf	(printf@f+1)& (0+255),b
 13024  002872  ECE7  F00E         	call	_printf	;wreg free
 13025                           
 13026                           ;Test.c: 189: _delay((unsigned long)((100)*(32000000/4000.0)));
 13027  002876  0E05               	movlw	5
 13028  002878  0100               	movlb	0	; () banked
 13029  00287A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13030  00287C  0E0F               	movlw	15
 13031  00287E  0100               	movlb	0	; () banked
 13032  002880  6FAB               	movwf	??_sensorTest& (0+255),b
 13033  002882  0EF1               	movlw	241
 13034  002884                     u11627:
 13035  002884  2EE8               	decfsz	wreg,f,c
 13036  002886  D7FE               	bra	u11627
 13037  002888  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13038  00288A  D7FC               	bra	u11627
 13039  00288C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13040  00288E  D7FA               	bra	u11627
 13041                           
 13042                           ;Test.c: 190: while(PORTBbits.RB1 == 0){
 13043  002890  D021               	goto	l8700
 13044  002892                     l8694:
 13045                           
 13046                           ;Test.c: 191: readMAG();
 13047  002892  ECE0  F02C         	call	_readMAG	;wreg free
 13048                           
 13049                           ;Test.c: 192: lcdInst(0b10000000);;
 13050  002896  0E80               	movlw	128
 13051  002898  EC63  F030         	call	_lcdInst
 13052                           
 13053                           ;Test.c: 193: lcdInst(0b11000000);;
 13054  00289C  0EC0               	movlw	192
 13055  00289E  EC63  F030         	call	_lcdInst
 13056                           
 13057                           ;Test.c: 194: printf("MAG_signal: %d ", MAG_signal);
 13058  0028A2  0E39               	movlw	low STR_84
 13059  0028A4  0100               	movlb	0	; () banked
 13060  0028A6  6F8E               	movwf	printf@f& (0+255),b
 13061  0028A8  0EFE               	movlw	high STR_84
 13062  0028AA  0100               	movlb	0	; () banked
 13063  0028AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13064  0028AE  C0E4  F090         	movff	_MAG_signal,?_printf+2
 13065  0028B2  C0E5  F091         	movff	_MAG_signal+1,?_printf+3
 13066  0028B6  ECE7  F00E         	call	_printf	;wreg free
 13067                           
 13068                           ;Test.c: 195: _delay((unsigned long)((100)*(32000000/4000.0)));
 13069  0028BA  0E05               	movlw	5
 13070  0028BC  0100               	movlb	0	; () banked
 13071  0028BE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13072  0028C0  0E0F               	movlw	15
 13073  0028C2  0100               	movlb	0	; () banked
 13074  0028C4  6FAB               	movwf	??_sensorTest& (0+255),b
 13075  0028C6  0EF1               	movlw	241
 13076  0028C8                     u11637:
 13077  0028C8  2EE8               	decfsz	wreg,f,c
 13078  0028CA  D7FE               	bra	u11637
 13079  0028CC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13080  0028CE  D7FC               	bra	u11637
 13081  0028D0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13082  0028D2  D7FA               	bra	u11637
 13083  0028D4                     l8700:
 13084  0028D4  A281               	btfss	3969,1,c	;volatile
 13085  0028D6  D7DD               	goto	l8694
 13086  0028D8                     l1344:
 13087  0028D8  B281               	btfsc	3969,1,c	;volatile
 13088  0028DA  D7FE               	goto	l1344
 13089                           
 13090                           ;Test.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13091  0028DC  0E01               	movlw	1
 13092  0028DE  EC63  F030         	call	_lcdInst
 13093  0028E2  0E68               	movlw	104
 13094  0028E4  0100               	movlb	0	; () banked
 13095  0028E6  6FAB               	movwf	??_sensorTest& (0+255),b
 13096  0028E8  0EE4               	movlw	228
 13097  0028EA                     u11647:
 13098  0028EA  2EE8               	decfsz	wreg,f,c
 13099  0028EC  D7FE               	bra	u11647
 13100  0028EE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13101  0028F0  D7FC               	bra	u11647
 13102  0028F2  F000               	nop	
 13103  0028F4  0E80               	movlw	128
 13104  0028F6  EC63  F030         	call	_lcdInst
 13105                           
 13106                           ;Test.c: 203: printf("TST: COND");
 13107  0028FA  0E86               	movlw	low STR_85
 13108  0028FC  0100               	movlb	0	; () banked
 13109  0028FE  6F8E               	movwf	printf@f& (0+255),b
 13110  002900  0EFF               	movlw	high STR_85
 13111  002902  0100               	movlb	0	; () banked
 13112  002904  6F8F               	movwf	(printf@f+1)& (0+255),b
 13113  002906  ECE7  F00E         	call	_printf	;wreg free
 13114                           
 13115                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 13116  00290A  0E05               	movlw	5
 13117  00290C  0100               	movlb	0	; () banked
 13118  00290E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13119  002910  0E0F               	movlw	15
 13120  002912  0100               	movlb	0	; () banked
 13121  002914  6FAB               	movwf	??_sensorTest& (0+255),b
 13122  002916  0EF1               	movlw	241
 13123  002918                     u11657:
 13124  002918  2EE8               	decfsz	wreg,f,c
 13125  00291A  D7FE               	bra	u11657
 13126  00291C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13127  00291E  D7FC               	bra	u11657
 13128  002920  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13129  002922  D7FA               	bra	u11657
 13130  002924                     l8712:
 13131                           
 13132                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13133  002924  0E01               	movlw	1
 13134  002926  EC63  F030         	call	_lcdInst
 13135  00292A  0E68               	movlw	104
 13136  00292C  0100               	movlb	0	; () banked
 13137  00292E  6FAB               	movwf	??_sensorTest& (0+255),b
 13138  002930  0EE4               	movlw	228
 13139  002932                     u11667:
 13140  002932  2EE8               	decfsz	wreg,f,c
 13141  002934  D7FE               	bra	u11667
 13142  002936  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13143  002938  D7FC               	bra	u11667
 13144  00293A  F000               	nop	
 13145  00293C  0E80               	movlw	128
 13146  00293E  EC63  F030         	call	_lcdInst
 13147                           
 13148                           ;Test.c: 207: printf("TST: COND");
 13149  002942  0E86               	movlw	low STR_85
 13150  002944  0100               	movlb	0	; () banked
 13151  002946  6F8E               	movwf	printf@f& (0+255),b
 13152  002948  0EFF               	movlw	high STR_85
 13153  00294A  0100               	movlb	0	; () banked
 13154  00294C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13155  00294E  ECE7  F00E         	call	_printf	;wreg free
 13156                           
 13157                           ;Test.c: 208: while(PORTBbits.RB1 == 0){
 13158  002952  D01B               	goto	l8724
 13159  002954                     l8720:
 13160                           
 13161                           ;Test.c: 212: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13162  002954  0E80               	movlw	128
 13163  002956  EC63  F030         	call	_lcdInst
 13164  00295A  0EC0               	movlw	192
 13165  00295C  EC63  F030         	call	_lcdInst
 13166                           
 13167                           ;Test.c: 213: printf("COND: %d", PORTAbits.RA2);
 13168  002960  0EA4               	movlw	low STR_87
 13169  002962  0100               	movlb	0	; () banked
 13170  002964  6F8E               	movwf	printf@f& (0+255),b
 13171  002966  0EFF               	movlw	high STR_87
 13172  002968  0100               	movlb	0	; () banked
 13173  00296A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13174  00296C  A480               	btfss	3968,2,c	;volatile
 13175  00296E  D004               	goto	u7990
 13176  002970  0100               	movlb	0	; () banked
 13177  002972  6BAB               	clrf	??_sensorTest& (0+255),b
 13178  002974  2BAB               	incf	??_sensorTest& (0+255),f,b
 13179  002976  D002               	goto	u7998
 13180  002978                     u7990:
 13181  002978  0100               	movlb	0	; () banked
 13182  00297A  6BAB               	clrf	??_sensorTest& (0+255),b
 13183  00297C                     u7998:
 13184  00297C  0100               	movlb	0	; () banked
 13185  00297E  51AB               	movf	??_sensorTest& (0+255),w,b
 13186  002980  0100               	movlb	0	; () banked
 13187  002982  6F90               	movwf	(?_printf+2)& (0+255),b
 13188  002984  6B91               	clrf	(?_printf+3)& (0+255),b
 13189  002986  ECE7  F00E         	call	_printf	;wreg free
 13190  00298A                     l8724:
 13191  00298A  A281               	btfss	3969,1,c	;volatile
 13192  00298C  D7E3               	goto	l8720
 13193                           
 13194                           ;Test.c: 214: }
 13195                           ;Test.c: 215: if(PORTB >> 4 == 0b1111){
 13196  00298E  3881               	swapf	3969,w,c	;volatile
 13197  002990  0B0F               	andlw	15
 13198  002992  0A0F               	xorlw	15
 13199  002994  B4D8               	btfsc	status,2,c
 13200  002996  0012               	return	
 13201                           
 13202                           ;Test.c: 218: else{
 13203                           ;Test.c: 219: LATCbits.LATC7 = 1;
 13204                           
 13205                           ;Test.c: 217: }
 13206                           
 13207                           ;Test.c: 216: break;
 13208  002998  8E8B               	bsf	3979,7,c	;volatile
 13209                           
 13210                           ;Test.c: 220: while(PORTBbits.RB1 == 1){
 13211  00299A  D01B               	goto	l8736
 13212  00299C                     l8732:
 13213                           
 13214                           ;Test.c: 222: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13215  00299C  0E80               	movlw	128
 13216  00299E  EC63  F030         	call	_lcdInst
 13217  0029A2  0EC0               	movlw	192
 13218  0029A4  EC63  F030         	call	_lcdInst
 13219                           
 13220                           ;Test.c: 223: printf("COND: %d", PORTAbits.RA2);
 13221  0029A8  0EA4               	movlw	low STR_87
 13222  0029AA  0100               	movlb	0	; () banked
 13223  0029AC  6F8E               	movwf	printf@f& (0+255),b
 13224  0029AE  0EFF               	movlw	high STR_87
 13225  0029B0  0100               	movlb	0	; () banked
 13226  0029B2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13227  0029B4  A480               	btfss	3968,2,c	;volatile
 13228  0029B6  D004               	goto	u8020
 13229  0029B8  0100               	movlb	0	; () banked
 13230  0029BA  6BAB               	clrf	??_sensorTest& (0+255),b
 13231  0029BC  2BAB               	incf	??_sensorTest& (0+255),f,b
 13232  0029BE  D002               	goto	u8028
 13233  0029C0                     u8020:
 13234  0029C0  0100               	movlb	0	; () banked
 13235  0029C2  6BAB               	clrf	??_sensorTest& (0+255),b
 13236  0029C4                     u8028:
 13237  0029C4  0100               	movlb	0	; () banked
 13238  0029C6  51AB               	movf	??_sensorTest& (0+255),w,b
 13239  0029C8  0100               	movlb	0	; () banked
 13240  0029CA  6F90               	movwf	(?_printf+2)& (0+255),b
 13241  0029CC  6B91               	clrf	(?_printf+3)& (0+255),b
 13242  0029CE  ECE7  F00E         	call	_printf	;wreg free
 13243  0029D2                     l8736:
 13244  0029D2  B281               	btfsc	3969,1,c	;volatile
 13245  0029D4  D7E3               	goto	l8732
 13246                           
 13247                           ;Test.c: 224: }
 13248                           ;Test.c: 225: LATCbits.LATC7 = !1;
 13249  0029D6  9E8B               	bcf	3979,7,c	;volatile
 13250  0029D8  D7A5               	goto	l8712
 13251  0029DA                     __end_of_sensorTest:
 13252                           	opt stack 0
 13253                           tblptru	equ	0xFF8
 13254                           tblptrh	equ	0xFF7
 13255                           tblptrl	equ	0xFF6
 13256                           tablat	equ	0xFF5
 13257                           prodh	equ	0xFF4
 13258                           prodl	equ	0xFF3
 13259                           intcon	equ	0xFF2
 13260                           intcon2	equ	0xFF1
 13261                           intcon3	equ	0xFF0
 13262                           postinc0	equ	0xFEE
 13263                           wreg	equ	0xFE8
 13264                           postdec1	equ	0xFE5
 13265                           fsr1l	equ	0xFE1
 13266                           indf2	equ	0xFDF
 13267                           postinc2	equ	0xFDE
 13268                           postdec2	equ	0xFDD
 13269                           fsr2h	equ	0xFDA
 13270                           fsr2l	equ	0xFD9
 13271                           status	equ	0xFD8
 13272                           
 13273 ;; *************** function _readMAG *****************
 13274 ;; Defined at:
 13275 ;;		line 38 in file "ADCFunctionality.c"
 13276 ;; Parameters:    Size  Location     Type
 13277 ;;		None
 13278 ;; Auto vars:     Size  Location     Type
 13279 ;;  res             2    4[BANK0 ] int 
 13280 ;; Return value:  Size  Location     Type
 13281 ;;                  1    wreg      void 
 13282 ;; Registers used:
 13283 ;;		wreg, status,2, status,0, cstack
 13284 ;; Tracked objects:
 13285 ;;		On entry : 0/0
 13286 ;;		On exit  : 0/0
 13287 ;;		Unchanged: 0/0
 13288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13292 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13293 ;;Total ram usage:        4 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    8
 13296 ;; This function calls:
 13297 ;;		_readADC
 13298 ;; This function is called by:
 13299 ;;		_getMAG
 13300 ;;		_sensorTest
 13301 ;; This function uses a non-reentrant model
 13302 ;;
 13303                           
 13304                           	psect	text42
 13305  0059C0                     __ptext42:
 13306                           	opt stack 0
 13307  0059C0                     _readMAG:
 13308                           	opt stack 19
 13309                           
 13310                           ;ADCFunctionality.c: 39: readADC(1);
 13311                           
 13312                           ;incstack = 0
 13313  0059C0  0E01               	movlw	1
 13314  0059C2  EC5C  F02F         	call	_readADC
 13315                           
 13316                           ;ADCFunctionality.c: 40: int res = ADRESH<<8 | ADRESL;
 13317  0059C6  50C3               	movf	4035,w,c	;volatile
 13318  0059C8  CFC4 F082          	movff	4036,??_readMAG	;volatile
 13319  0059CC  0100               	movlb	0	; () banked
 13320  0059CE  6B83               	clrf	(??_readMAG+1)& (0+255),b
 13321  0059D0  C082  F083         	movff	??_readMAG,??_readMAG+1
 13322  0059D4  0100               	movlb	0	; () banked
 13323  0059D6  6B82               	clrf	??_readMAG& (0+255),b
 13324  0059D8  0100               	movlb	0	; () banked
 13325  0059DA  1182               	iorwf	??_readMAG& (0+255),w,b
 13326  0059DC  0100               	movlb	0	; () banked
 13327  0059DE  6F84               	movwf	readMAG@res& (0+255),b
 13328  0059E0  0100               	movlb	0	; () banked
 13329  0059E2  5183               	movf	(??_readMAG+1)& (0+255),w,b
 13330  0059E4  0100               	movlb	0	; () banked
 13331  0059E6  6F85               	movwf	(readMAG@res+1)& (0+255),b
 13332                           
 13333                           ; BSR set to: 0
 13334                           ;ADCFunctionality.c: 41: MAG_signal = (res < 150) ? 1 : 0;
 13335  0059E8  0100               	movlb	0	; () banked
 13336  0059EA  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 13337  0059EC  D008               	goto	u5721
 13338  0059EE  0100               	movlb	0	; () banked
 13339  0059F0  5185               	movf	(readMAG@res+1)& (0+255),w,b
 13340  0059F2  E107               	bnz	u5720
 13341  0059F4  0E96               	movlw	150
 13342  0059F6  0100               	movlb	0	; () banked
 13343  0059F8  5D84               	subwf	readMAG@res& (0+255),w,b
 13344  0059FA  B0D8               	btfsc	status,0,c
 13345  0059FC  D002               	goto	u5720
 13346  0059FE                     u5721:
 13347  0059FE  0E01               	movlw	1
 13348  005A00  D001               	goto	u5730
 13349  005A02                     u5720:
 13350  005A02  0E00               	movlw	0
 13351  005A04                     u5730:
 13352  005A04  0100               	movlb	0	; () banked
 13353  005A06  6FE4               	movwf	_MAG_signal& (0+255),b
 13354  005A08  6BE5               	clrf	(_MAG_signal+1)& (0+255),b
 13355                           
 13356                           ; BSR set to: 0
 13357  005A0A  0012               	return		;funcret
 13358  005A0C                     __end_of_readMAG:
 13359                           	opt stack 0
 13360                           tblptru	equ	0xFF8
 13361                           tblptrh	equ	0xFF7
 13362                           tblptrl	equ	0xFF6
 13363                           tablat	equ	0xFF5
 13364                           prodh	equ	0xFF4
 13365                           prodl	equ	0xFF3
 13366                           intcon	equ	0xFF2
 13367                           intcon2	equ	0xFF1
 13368                           intcon3	equ	0xFF0
 13369                           postinc0	equ	0xFEE
 13370                           wreg	equ	0xFE8
 13371                           postdec1	equ	0xFE5
 13372                           fsr1l	equ	0xFE1
 13373                           indf2	equ	0xFDF
 13374                           postinc2	equ	0xFDE
 13375                           postdec2	equ	0xFDD
 13376                           fsr2h	equ	0xFDA
 13377                           fsr2l	equ	0xFD9
 13378                           status	equ	0xFD8
 13379                           
 13380 ;; *************** function _arm *****************
 13381 ;; Defined at:
 13382 ;;		line 663 in file "Test.c"
 13383 ;; Parameters:    Size  Location     Type
 13384 ;;		None
 13385 ;; Auto vars:     Size  Location     Type
 13386 ;;  on              2   44[BANK0 ] int 
 13387 ;; Return value:  Size  Location     Type
 13388 ;;                  1    wreg      void 
 13389 ;; Registers used:
 13390 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13391 ;; Tracked objects:
 13392 ;;		On entry : 0/0
 13393 ;;		On exit  : 0/0
 13394 ;;		Unchanged: 0/0
 13395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13397 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13399 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13400 ;;Total ram usage:        3 bytes
 13401 ;; Hardware stack levels used:    1
 13402 ;; Hardware stack levels required when called:   10
 13403 ;; This function calls:
 13404 ;;		_lcdInst
 13405 ;;		_printf
 13406 ;;		_stopSignals
 13407 ;; This function is called by:
 13408 ;;		_Test
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           	psect	text43
 13413  004776                     __ptext43:
 13414                           	opt stack 0
 13415  004776                     _arm:
 13416                           	opt stack 19
 13417                           
 13418                           ;Test.c: 664: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;incstack = 0
 13422  004776  0E01               	movlw	1
 13423  004778  EC63  F030         	call	_lcdInst
 13424  00477C  0E68               	movlw	104
 13425  00477E  0100               	movlb	0	; () banked
 13426  004780  6FAB               	movwf	??_arm& (0+255),b
 13427  004782  0EE4               	movlw	228
 13428  004784                     u11677:
 13429  004784  2EE8               	decfsz	wreg,f,c
 13430  004786  D7FE               	bra	u11677
 13431  004788  2FAB               	decfsz	??_arm& (0+255),f,b
 13432  00478A  D7FC               	bra	u11677
 13433  00478C  F000               	nop	
 13434  00478E  0E80               	movlw	128
 13435  004790  EC63  F030         	call	_lcdInst
 13436                           
 13437                           ;Test.c: 665: printf("D WILL RETURN   ");
 13438  004794  0E08               	movlw	low STR_125
 13439  004796  0100               	movlb	0	; () banked
 13440  004798  6F8E               	movwf	printf@f& (0+255),b
 13441  00479A  0EFC               	movlw	high STR_125
 13442  00479C  0100               	movlb	0	; () banked
 13443  00479E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13444  0047A0  ECE7  F00E         	call	_printf	;wreg free
 13445                           
 13446                           ;Test.c: 666: lcdInst(0b11000000);;
 13447  0047A4  0EC0               	movlw	192
 13448  0047A6  EC63  F030         	call	_lcdInst
 13449                           
 13450                           ;Test.c: 667: printf("ELSE TOGGLES ARM");
 13451  0047AA  0EB2               	movlw	low STR_126
 13452  0047AC  0100               	movlb	0	; () banked
 13453  0047AE  6F8E               	movwf	printf@f& (0+255),b
 13454  0047B0  0EFC               	movlw	high STR_126
 13455  0047B2  0100               	movlb	0	; () banked
 13456  0047B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13457  0047B6  ECE7  F00E         	call	_printf	;wreg free
 13458                           
 13459                           ;Test.c: 669: (INTCONbits.GIE = 1);
 13460  0047BA  8EF2               	bsf	intcon,7,c	;volatile
 13461                           
 13462                           ;Test.c: 670: machine_state = Sorting_state;
 13463  0047BC  0E01               	movlw	1
 13464  0047BE  0100               	movlb	0	; () banked
 13465  0047C0  6FFC               	movwf	_machine_state& (0+255),b
 13466                           
 13467                           ; BSR set to: 0
 13468                           ;Test.c: 671: f_arm_position = 1;
 13469  0047C2  0E00               	movlw	0
 13470  0047C4  0100               	movlb	0	; () banked
 13471  0047C6  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13472  0047C8  0E01               	movlw	1
 13473  0047CA  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;Test.c: 672: timer2_counter = 0;
 13477  0047CC  0E00               	movlw	0
 13478  0047CE  6E74               	movwf	_timer2_counter+1,c	;volatile
 13479  0047D0  0E00               	movlw	0
 13480  0047D2  6E73               	movwf	_timer2_counter,c	;volatile
 13481                           
 13482                           ; BSR set to: 0
 13483                           ;Test.c: 673: LATBbits.LATB3 = 1;
 13484  0047D4  868A               	bsf	3978,3,c	;volatile
 13485                           
 13486                           ; BSR set to: 0
 13487                           ;Test.c: 674: TMR2ON = 1;
 13488  0047D6  84CA               	bsf	4042,2,c	;volatile
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;Test.c: 675: was_low_2 = 0;
 13492  0047D8  0E00               	movlw	0
 13493  0047DA  6E7A               	movwf	_was_low_2+1,c	;volatile
 13494  0047DC  0E00               	movlw	0
 13495  0047DE  6E79               	movwf	_was_low_2,c	;volatile
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;Test.c: 677: int on = 0;
 13499  0047E0  0E00               	movlw	0
 13500  0047E2  0100               	movlb	0	; () banked
 13501  0047E4  6FAD               	movwf	(arm@on+1)& (0+255),b
 13502  0047E6  0E00               	movlw	0
 13503  0047E8  6FAC               	movwf	arm@on& (0+255),b
 13504  0047EA                     l9190:
 13505                           
 13506                           ;Test.c: 679: if(on){
 13507  0047EA  0100               	movlb	0	; () banked
 13508  0047EC  51AC               	movf	arm@on& (0+255),w,b
 13509  0047EE  0100               	movlb	0	; () banked
 13510  0047F0  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13511  0047F2  B4D8               	btfsc	status,2,c
 13512  0047F4  D01C               	goto	l9202
 13513                           
 13514                           ; BSR set to: 0
 13515                           ;Test.c: 680: on = !on;
 13516  0047F6  0100               	movlb	0	; () banked
 13517  0047F8  51AC               	movf	arm@on& (0+255),w,b
 13518  0047FA  0100               	movlb	0	; () banked
 13519  0047FC  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13520  0047FE  A4D8               	btfss	status,2,c
 13521  004800  D002               	goto	u8610
 13522  004802  0E01               	movlw	1
 13523  004804  D001               	goto	u8620
 13524  004806                     u8610:
 13525  004806  0E00               	movlw	0
 13526  004808                     u8620:
 13527  004808  0100               	movlb	0	; () banked
 13528  00480A  6FAC               	movwf	arm@on& (0+255),b
 13529  00480C  6BAD               	clrf	(arm@on+1)& (0+255),b
 13530                           
 13531                           ;Test.c: 681: while(PORTBbits.RB1 == 0){
 13532  00480E  D005               	goto	l9196
 13533  004810                     l9194:
 13534                           
 13535                           ; BSR set to: 0
 13536                           ;Test.c: 682: f_arm_position = 0;
 13537  004810  0E00               	movlw	0
 13538  004812  0100               	movlb	0	; () banked
 13539  004814  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13540  004816  0E00               	movlw	0
 13541  004818  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13542  00481A                     l9196:
 13543                           
 13544                           ; BSR set to: 0
 13545  00481A  A281               	btfss	3969,1,c	;volatile
 13546  00481C  D7F9               	goto	l9194
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;Test.c: 683: }
 13550                           ;Test.c: 684: if(PORTB >> 4 == 0b1111){
 13551                           
 13552                           ; BSR set to: 0
 13553  00481E  3881               	swapf	3969,w,c	;volatile
 13554  004820  0B0F               	andlw	15
 13555  004822  0A0F               	xorlw	15
 13556  004824  B4D8               	btfsc	status,2,c
 13557  004826  D01F               	goto	l1529
 13558  004828                     l1530:
 13559  004828  A281               	btfss	3969,1,c	;volatile
 13560  00482A  D7DF               	goto	l9190
 13561  00482C  D7FD               	goto	l1530
 13562  00482E                     l9202:
 13563                           
 13564                           ;Test.c: 689: else{
 13565                           ;Test.c: 690: on = !on;
 13566  00482E  0100               	movlb	0	; () banked
 13567  004830  51AC               	movf	arm@on& (0+255),w,b
 13568  004832  0100               	movlb	0	; () banked
 13569  004834  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13570  004836  A4D8               	btfss	status,2,c
 13571  004838  D002               	goto	u8660
 13572  00483A  0E01               	movlw	1
 13573  00483C  D001               	goto	u8670
 13574  00483E                     u8660:
 13575  00483E  0E00               	movlw	0
 13576  004840                     u8670:
 13577  004840  0100               	movlb	0	; () banked
 13578  004842  6FAC               	movwf	arm@on& (0+255),b
 13579  004844  6BAD               	clrf	(arm@on+1)& (0+255),b
 13580                           
 13581                           ;Test.c: 691: while(PORTBbits.RB1 == 0){
 13582  004846  D005               	goto	l9206
 13583  004848                     l9204:
 13584                           
 13585                           ; BSR set to: 0
 13586                           ;Test.c: 692: f_arm_position = 1;
 13587  004848  0E00               	movlw	0
 13588  00484A  0100               	movlb	0	; () banked
 13589  00484C  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13590  00484E  0E01               	movlw	1
 13591  004850  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13592  004852                     l9206:
 13593                           
 13594                           ; BSR set to: 0
 13595  004852  A281               	btfss	3969,1,c	;volatile
 13596  004854  D7F9               	goto	l9204
 13597                           
 13598                           ; BSR set to: 0
 13599                           ;Test.c: 693: }
 13600                           ;Test.c: 694: if(PORTB >> 4 == 0b1111){
 13601                           
 13602                           ; BSR set to: 0
 13603  004856  3881               	swapf	3969,w,c	;volatile
 13604  004858  0B0F               	andlw	15
 13605  00485A  0A0F               	xorlw	15
 13606  00485C  B4D8               	btfsc	status,2,c
 13607  00485E  D003               	goto	l1529
 13608  004860                     l1538:
 13609  004860  A281               	btfss	3969,1,c	;volatile
 13610  004862  D7C3               	goto	l9190
 13611  004864  D7FD               	goto	l1538
 13612  004866                     l1529:
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;Test.c: 698: }
 13616                           ;Test.c: 699: }
 13617                           ;Test.c: 701: (INTCONbits.GIE = 0);
 13618  004866  9EF2               	bcf	intcon,7,c	;volatile
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;Test.c: 702: stopSignals();
 13622  004868  EC18  F030         	call	_stopSignals	;wreg free
 13623                           
 13624                           ;Test.c: 703: machine_state = Testing_state;
 13625  00486C  0E03               	movlw	3
 13626  00486E  0100               	movlb	0	; () banked
 13627  004870  6FFC               	movwf	_machine_state& (0+255),b
 13628                           
 13629                           ; BSR set to: 0
 13630  004872  0012               	return		;funcret
 13631  004874                     __end_of_arm:
 13632                           	opt stack 0
 13633                           tblptru	equ	0xFF8
 13634                           tblptrh	equ	0xFF7
 13635                           tblptrl	equ	0xFF6
 13636                           tablat	equ	0xFF5
 13637                           prodh	equ	0xFF4
 13638                           prodl	equ	0xFF3
 13639                           intcon	equ	0xFF2
 13640                           intcon2	equ	0xFF1
 13641                           intcon3	equ	0xFF0
 13642                           postinc0	equ	0xFEE
 13643                           wreg	equ	0xFE8
 13644                           postdec1	equ	0xFE5
 13645                           fsr1l	equ	0xFE1
 13646                           indf2	equ	0xFDF
 13647                           postinc2	equ	0xFDE
 13648                           postdec2	equ	0xFDD
 13649                           fsr2h	equ	0xFDA
 13650                           fsr2l	equ	0xFD9
 13651                           status	equ	0xFD8
 13652                           
 13653 ;; *************** function _algorithmTest *****************
 13654 ;; Defined at:
 13655 ;;		line 78 in file "Test.c"
 13656 ;; Parameters:    Size  Location     Type
 13657 ;;		None
 13658 ;; Auto vars:     Size  Location     Type
 13659 ;;		None
 13660 ;; Return value:  Size  Location     Type
 13661 ;;                  1    wreg      void 
 13662 ;; Registers used:
 13663 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13664 ;; Tracked objects:
 13665 ;;		On entry : 0/0
 13666 ;;		On exit  : 0/0
 13667 ;;		Unchanged: 0/0
 13668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13671 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13673 ;;Total ram usage:        2 bytes
 13674 ;; Hardware stack levels used:    1
 13675 ;; Hardware stack levels required when called:   10
 13676 ;; This function calls:
 13677 ;;		_lcdInst
 13678 ;;		_printf
 13679 ;; This function is called by:
 13680 ;;		_Test
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           	psect	text44
 13685  004A3E                     __ptext44:
 13686                           	opt stack 0
 13687  004A3E                     _algorithmTest:
 13688                           	opt stack 19
 13689                           
 13690                           ;Test.c: 80: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13691                           
 13692                           ; BSR set to: 0
 13693                           ;incstack = 0
 13694  004A3E  0E01               	movlw	1
 13695  004A40  EC63  F030         	call	_lcdInst
 13696  004A44  0E68               	movlw	104
 13697  004A46  0100               	movlb	0	; () banked
 13698  004A48  6FAB               	movwf	??_algorithmTest& (0+255),b
 13699  004A4A  0EE4               	movlw	228
 13700  004A4C                     u11687:
 13701  004A4C  2EE8               	decfsz	wreg,f,c
 13702  004A4E  D7FE               	bra	u11687
 13703  004A50  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13704  004A52  D7FC               	bra	u11687
 13705  004A54  F000               	nop	
 13706  004A56  0E80               	movlw	128
 13707  004A58  EC63  F030         	call	_lcdInst
 13708                           
 13709                           ;Test.c: 81: printf("ALGORITHM TEST");
 13710  004A5C  0E01               	movlw	low STR_70
 13711  004A5E  0100               	movlb	0	; () banked
 13712  004A60  6F8E               	movwf	printf@f& (0+255),b
 13713  004A62  0EFF               	movlw	high STR_70
 13714  004A64  0100               	movlb	0	; () banked
 13715  004A66  6F8F               	movwf	(printf@f+1)& (0+255),b
 13716  004A68  ECE7  F00E         	call	_printf	;wreg free
 13717                           
 13718                           ;Test.c: 82: lcdInst(0b11000000);;
 13719  004A6C  0EC0               	movlw	192
 13720  004A6E  EC63  F030         	call	_lcdInst
 13721                           
 13722                           ;Test.c: 83: printf("PUSH TO START");
 13723  004A72  0E3A               	movlw	low STR_71
 13724  004A74  0100               	movlb	0	; () banked
 13725  004A76  6F8E               	movwf	printf@f& (0+255),b
 13726  004A78  0EFF               	movlw	high STR_71
 13727  004A7A  0100               	movlb	0	; () banked
 13728  004A7C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13729  004A7E  ECE7  F00E         	call	_printf	;wreg free
 13730                           
 13731                           ;Test.c: 84: _delay((unsigned long)((100)*(32000000/4000.0)));
 13732  004A82  0E05               	movlw	5
 13733  004A84  0100               	movlb	0	; () banked
 13734  004A86  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13735  004A88  0E0F               	movlw	15
 13736  004A8A  0100               	movlb	0	; () banked
 13737  004A8C  6FAB               	movwf	??_algorithmTest& (0+255),b
 13738  004A8E  0EF1               	movlw	241
 13739  004A90                     u11697:
 13740  004A90  2EE8               	decfsz	wreg,f,c
 13741  004A92  D7FE               	bra	u11697
 13742  004A94  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13743  004A96  D7FC               	bra	u11697
 13744  004A98  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13745  004A9A  D7FA               	bra	u11697
 13746  004A9C                     l1305:
 13747  004A9C  A281               	btfss	3969,1,c	;volatile
 13748  004A9E  D7FE               	goto	l1305
 13749  004AA0                     l1308:
 13750  004AA0  B281               	btfsc	3969,1,c	;volatile
 13751  004AA2  D7FE               	goto	l1308
 13752                           
 13753                           ;Test.c: 87: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13754  004AA4  0E01               	movlw	1
 13755  004AA6  EC63  F030         	call	_lcdInst
 13756  004AAA  0E68               	movlw	104
 13757  004AAC  0100               	movlb	0	; () banked
 13758  004AAE  6FAB               	movwf	??_algorithmTest& (0+255),b
 13759  004AB0  0EE4               	movlw	228
 13760  004AB2                     u11707:
 13761  004AB2  2EE8               	decfsz	wreg,f,c
 13762  004AB4  D7FE               	bra	u11707
 13763  004AB6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13764  004AB8  D7FC               	bra	u11707
 13765  004ABA  F000               	nop	
 13766  004ABC  0E80               	movlw	128
 13767  004ABE  EC63  F030         	call	_lcdInst
 13768                           
 13769                           ;Test.c: 92: printf("ALG1: 9 POPNOTAB");
 13770  004AC2  0E5D               	movlw	low STR_72
 13771  004AC4  0100               	movlb	0	; () banked
 13772  004AC6  6F8E               	movwf	printf@f& (0+255),b
 13773  004AC8  0EFC               	movlw	high STR_72
 13774  004ACA  0100               	movlb	0	; () banked
 13775  004ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13776  004ACE  ECE7  F00E         	call	_printf	;wreg free
 13777                           
 13778                           ;Test.c: 99: printf("ALG2: 12 CANS");
 13779  004AD2  0E1E               	movlw	low STR_73
 13780  004AD4  0100               	movlb	0	; () banked
 13781  004AD6  6F8E               	movwf	printf@f& (0+255),b
 13782  004AD8  0EFF               	movlw	high STR_73
 13783  004ADA  0100               	movlb	0	; () banked
 13784  004ADC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13785  004ADE  ECE7  F00E         	call	_printf	;wreg free
 13786                           
 13787                           ;Test.c: 108: printf("ALG3: 1 CAN");
 13788  004AE2  0E64               	movlw	low STR_74
 13789  004AE4  0100               	movlb	0	; () banked
 13790  004AE6  6F8E               	movwf	printf@f& (0+255),b
 13791  004AE8  0EFF               	movlw	high STR_74
 13792  004AEA  0100               	movlb	0	; () banked
 13793  004AEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13794  004AEE  ECE7  F00E         	call	_printf	;wreg free
 13795                           
 13796                           ;Test.c: 114: printf("ALG4: ALL CANS");
 13797  004AF2  0EE3               	movlw	low STR_75
 13798  004AF4  0100               	movlb	0	; () banked
 13799  004AF6  6F8E               	movwf	printf@f& (0+255),b
 13800  004AF8  0EFE               	movlw	high STR_75
 13801  004AFA  0100               	movlb	0	; () banked
 13802  004AFC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13803  004AFE  ECE7  F00E         	call	_printf	;wreg free
 13804                           
 13805                           ;Test.c: 119: printf("ALG5: NO CANS");
 13806  004B02  0E2C               	movlw	low STR_76
 13807  004B04  0100               	movlb	0	; () banked
 13808  004B06  6F8E               	movwf	printf@f& (0+255),b
 13809  004B08  0EFF               	movlw	high STR_76
 13810  004B0A  0100               	movlb	0	; () banked
 13811  004B0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13812  004B0E  ECE7  F00E         	call	_printf	;wreg free
 13813  004B12  0012               	return		;funcret
 13814  004B14                     __end_of_algorithmTest:
 13815                           	opt stack 0
 13816                           tblptru	equ	0xFF8
 13817                           tblptrh	equ	0xFF7
 13818                           tblptrl	equ	0xFF6
 13819                           tablat	equ	0xFF5
 13820                           prodh	equ	0xFF4
 13821                           prodl	equ	0xFF3
 13822                           intcon	equ	0xFF2
 13823                           intcon2	equ	0xFF1
 13824                           intcon3	equ	0xFF0
 13825                           postinc0	equ	0xFEE
 13826                           wreg	equ	0xFE8
 13827                           postdec1	equ	0xFE5
 13828                           fsr1l	equ	0xFE1
 13829                           indf2	equ	0xFDF
 13830                           postinc2	equ	0xFDE
 13831                           postdec2	equ	0xFDD
 13832                           fsr2h	equ	0xFDA
 13833                           fsr2l	equ	0xFD9
 13834                           status	equ	0xFD8
 13835                           
 13836 ;; *************** function _actuatorTest *****************
 13837 ;; Defined at:
 13838 ;;		line 230 in file "Test.c"
 13839 ;; Parameters:    Size  Location     Type
 13840 ;;		None
 13841 ;; Auto vars:     Size  Location     Type
 13842 ;;  i               1   45[BANK0 ] unsigned char 
 13843 ;;  i               1   67[BANK0 ] unsigned char 
 13844 ;;  i               1   66[BANK0 ] unsigned char 
 13845 ;;  i               1   65[BANK0 ] unsigned char 
 13846 ;;  i               1   64[BANK0 ] unsigned char 
 13847 ;;  i               1   63[BANK0 ] unsigned char 
 13848 ;;  i               1   62[BANK0 ] unsigned char 
 13849 ;;  i               1   61[BANK0 ] unsigned char 
 13850 ;;  i               1   60[BANK0 ] unsigned char 
 13851 ;;  i               1   59[BANK0 ] unsigned char 
 13852 ;;  i               1   58[BANK0 ] unsigned char 
 13853 ;;  i               1   57[BANK0 ] unsigned char 
 13854 ;;  i               1   56[BANK0 ] unsigned char 
 13855 ;;  i               1   55[BANK0 ] unsigned char 
 13856 ;;  i               1   54[BANK0 ] unsigned char 
 13857 ;;  i               1   53[BANK0 ] unsigned char 
 13858 ;;  i               1   52[BANK0 ] unsigned char 
 13859 ;;  i               1   51[BANK0 ] unsigned char 
 13860 ;;  i               1   50[BANK0 ] unsigned char 
 13861 ;;  i               1   49[BANK0 ] unsigned char 
 13862 ;;  i               1   48[BANK0 ] unsigned char 
 13863 ;;  i               1   47[BANK0 ] unsigned char 
 13864 ;;  i               1   46[BANK0 ] unsigned char 
 13865 ;;  i               2   68[BANK0 ] int 
 13866 ;; Return value:  Size  Location     Type
 13867 ;;                  1    wreg      void 
 13868 ;; Registers used:
 13869 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13870 ;; Tracked objects:
 13871 ;;		On entry : 0/0
 13872 ;;		On exit  : 0/0
 13873 ;;		Unchanged: 0/0
 13874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13876 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13878 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13879 ;;Total ram usage:       27 bytes
 13880 ;; Hardware stack levels used:    1
 13881 ;; Hardware stack levels required when called:   10
 13882 ;; This function calls:
 13883 ;;		_lcdInst
 13884 ;;		_printf
 13885 ;;		_updateServoPosition
 13886 ;; This function is called by:
 13887 ;;		_Test
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890                           
 13891                           	psect	text45
 13892  0008DA                     __ptext45:
 13893                           	opt stack 0
 13894  0008DA                     _actuatorTest:
 13895                           	opt stack 19
 13896                           
 13897                           ;Test.c: 232: int i = 0;
 13898                           
 13899                           ;incstack = 0
 13900  0008DA  0E00               	movlw	0
 13901  0008DC  0100               	movlb	0	; () banked
 13902  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13903  0008E0  0E00               	movlw	0
 13904  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;Test.c: 234: (INTCONbits.GIE = 1);
 13908  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;Test.c: 235: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13912  0008E6  0E01               	movlw	1
 13913  0008E8  EC63  F030         	call	_lcdInst
 13914  0008EC  0E68               	movlw	104
 13915  0008EE  0100               	movlb	0	; () banked
 13916  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13917  0008F2  0EE4               	movlw	228
 13918  0008F4                     u11717:
 13919  0008F4  2EE8               	decfsz	wreg,f,c
 13920  0008F6  D7FE               	bra	u11717
 13921  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13922  0008FA  D7FC               	bra	u11717
 13923  0008FC  F000               	nop	
 13924  0008FE  0E80               	movlw	128
 13925  000900  EC63  F030         	call	_lcdInst
 13926                           
 13927                           ;Test.c: 236: printf("ACTUATORS");
 13928  000904  0E90               	movlw	low STR_89
 13929  000906  0100               	movlb	0	; () banked
 13930  000908  6F8E               	movwf	printf@f& (0+255),b
 13931  00090A  0EFF               	movlw	high STR_89
 13932  00090C  0100               	movlb	0	; () banked
 13933  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13934  000910  ECE7  F00E         	call	_printf	;wreg free
 13935                           
 13936                           ;Test.c: 237: lcdInst(0b11000000);;
 13937  000914  0EC0               	movlw	192
 13938  000916  EC63  F030         	call	_lcdInst
 13939                           
 13940                           ;Test.c: 238: printf("PUSH TO START");
 13941  00091A  0E3A               	movlw	low STR_71
 13942  00091C  0100               	movlb	0	; () banked
 13943  00091E  6F8E               	movwf	printf@f& (0+255),b
 13944  000920  0EFF               	movlw	high STR_71
 13945  000922  0100               	movlb	0	; () banked
 13946  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13947  000926  ECE7  F00E         	call	_printf	;wreg free
 13948                           
 13949                           ;Test.c: 239: _delay((unsigned long)((100)*(32000000/4000.0)));
 13950  00092A  0E05               	movlw	5
 13951  00092C  0100               	movlb	0	; () banked
 13952  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13953  000930  0E0F               	movlw	15
 13954  000932  0100               	movlb	0	; () banked
 13955  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13956  000936  0EF1               	movlw	241
 13957  000938                     u11727:
 13958  000938  2EE8               	decfsz	wreg,f,c
 13959  00093A  D7FE               	bra	u11727
 13960  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13961  00093E  D7FC               	bra	u11727
 13962  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13963  000942  D7FA               	bra	u11727
 13964  000944                     l1361:
 13965  000944  A281               	btfss	3969,1,c	;volatile
 13966  000946  D7FE               	goto	l1361
 13967  000948                     l1364:
 13968  000948  B281               	btfsc	3969,1,c	;volatile
 13969  00094A  D7FE               	goto	l1364
 13970                           
 13971                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13972  00094C  0E01               	movlw	1
 13973  00094E  EC63  F030         	call	_lcdInst
 13974  000952  0E68               	movlw	104
 13975  000954  0100               	movlb	0	; () banked
 13976  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13977  000958  0EE4               	movlw	228
 13978  00095A                     u11737:
 13979  00095A  2EE8               	decfsz	wreg,f,c
 13980  00095C  D7FE               	bra	u11737
 13981  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13982  000960  D7FC               	bra	u11737
 13983  000962  F000               	nop	
 13984  000964  0E80               	movlw	128
 13985  000966  EC63  F030         	call	_lcdInst
 13986                           
 13987                           ;Test.c: 247: printf("TST: DC MOTORS");
 13988  00096A  0EF2               	movlw	low STR_91
 13989  00096C  0100               	movlb	0	; () banked
 13990  00096E  6F8E               	movwf	printf@f& (0+255),b
 13991  000970  0EFE               	movlw	high STR_91
 13992  000972  0100               	movlb	0	; () banked
 13993  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13994  000976  ECE7  F00E         	call	_printf	;wreg free
 13995                           
 13996                           ;Test.c: 248: lcdInst(0b11000000);;
 13997  00097A  0EC0               	movlw	192
 13998  00097C  EC63  F030         	call	_lcdInst
 13999                           
 14000                           ;Test.c: 249: printf("PIN RA5 HIGH.");
 14001  000980  0E10               	movlw	low STR_92
 14002  000982  0100               	movlb	0	; () banked
 14003  000984  6F8E               	movwf	printf@f& (0+255),b
 14004  000986  0EFF               	movlw	high STR_92
 14005  000988  0100               	movlb	0	; () banked
 14006  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14007  00098C  ECE7  F00E         	call	_printf	;wreg free
 14008                           
 14009                           ;Test.c: 250: LATBbits.LATB2 = 1;
 14010  000990  848A               	bsf	3978,2,c	;volatile
 14011                           
 14012                           ;Test.c: 251: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 14013  000992  0E00               	movlw	0
 14014  000994  0100               	movlb	0	; () banked
 14015  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14016  000998  0E00               	movlw	0
 14017  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 14018                           
 14019                           ; BSR set to: 0
 14020  00099C  0100               	movlb	0	; () banked
 14021  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14022  0009A0  D008               	goto	l8776
 14023  0009A2  0100               	movlb	0	; () banked
 14024  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14025  0009A6  E123               	bnz	l1368
 14026  0009A8  0E05               	movlw	5
 14027  0009AA  0100               	movlb	0	; () banked
 14028  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14029  0009AE  B0D8               	btfsc	status,0,c
 14030  0009B0  D01E               	goto	l1368
 14031  0009B2                     l8776:
 14032                           
 14033                           ; BSR set to: 0
 14034  0009B2  0E00               	movlw	0
 14035  0009B4  0100               	movlb	0	; () banked
 14036  0009B6  6FAD               	movwf	actuatorTest@i_1756& (0+255),b
 14037  0009B8                     l8778:
 14038                           
 14039                           ; BSR set to: 0
 14040  0009B8  0E63               	movlw	99
 14041  0009BA  0100               	movlb	0	; () banked
 14042  0009BC  65AD               	cpfsgt	actuatorTest@i_1756& (0+255),b
 14043  0009BE  D001               	goto	l8782
 14044  0009C0  D00C               	goto	l8786
 14045  0009C2                     l8782:
 14046                           
 14047                           ; BSR set to: 0
 14048  0009C2  0E68               	movlw	104
 14049  0009C4  0100               	movlb	0	; () banked
 14050  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 14051  0009C8  0EE4               	movlw	228
 14052  0009CA                     u11747:
 14053  0009CA  2EE8               	decfsz	wreg,f,c
 14054  0009CC  D7FE               	bra	u11747
 14055  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14056  0009D0  D7FC               	bra	u11747
 14057  0009D2  F000               	nop	
 14058  0009D4  0100               	movlb	0	; () banked
 14059  0009D6  2BAD               	incf	actuatorTest@i_1756& (0+255),f,b
 14060  0009D8  D7EF               	goto	l8778
 14061  0009DA                     l8786:
 14062                           
 14063                           ; BSR set to: 0
 14064  0009DA  0100               	movlb	0	; () banked
 14065  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14066  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14067                           
 14068                           ; BSR set to: 0
 14069  0009E0  0100               	movlb	0	; () banked
 14070  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14071  0009E4  D7E6               	goto	l8776
 14072  0009E6  0100               	movlb	0	; () banked
 14073  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14074  0009EA  E101               	bnz	u8090
 14075  0009EC  D7DD               	goto	L11
 14076  0009EE                     u8090:
 14077  0009EE                     l1368:
 14078                           
 14079                           ; BSR set to: 0
 14080                           ;Test.c: 252: LATBbits.LATB2 = 0;
 14081  0009EE  948A               	bcf	3978,2,c	;volatile
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;Test.c: 253: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14085  0009F0  0E01               	movlw	1
 14086  0009F2  EC63  F030         	call	_lcdInst
 14087  0009F6  0E68               	movlw	104
 14088  0009F8  0100               	movlb	0	; () banked
 14089  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 14090  0009FC  0EE4               	movlw	228
 14091  0009FE                     u11757:
 14092  0009FE  2EE8               	decfsz	wreg,f,c
 14093  000A00  D7FE               	bra	u11757
 14094  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14095  000A04  D7FC               	bra	u11757
 14096  000A06  F000               	nop	
 14097  000A08  0E80               	movlw	128
 14098  000A0A  EC63  F030         	call	_lcdInst
 14099                           
 14100                           ;Test.c: 259: printf("TST: COND SOLN'D");
 14101  000A0E  0E6E               	movlw	low STR_93
 14102  000A10  0100               	movlb	0	; () banked
 14103  000A12  6F8E               	movwf	printf@f& (0+255),b
 14104  000A14  0EFC               	movlw	high STR_93
 14105  000A16  0100               	movlb	0	; () banked
 14106  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 14107  000A1A  ECE7  F00E         	call	_printf	;wreg free
 14108                           
 14109                           ;Test.c: 260: lcdInst(0b11000000);;
 14110  000A1E  0EC0               	movlw	192
 14111  000A20  EC63  F030         	call	_lcdInst
 14112                           
 14113                           ;Test.c: 261: printf("PIN RA3...");
 14114  000A24  0E70               	movlw	low STR_94
 14115  000A26  0100               	movlb	0	; () banked
 14116  000A28  6F8E               	movwf	printf@f& (0+255),b
 14117  000A2A  0EFF               	movlw	high STR_94
 14118  000A2C  0100               	movlb	0	; () banked
 14119  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14120  000A30  ECE7  F00E         	call	_printf	;wreg free
 14121                           
 14122                           ;Test.c: 262: for(i=0;i<5;i++){
 14123  000A34  0E00               	movlw	0
 14124  000A36  0100               	movlb	0	; () banked
 14125  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14126  000A3A  0E00               	movlw	0
 14127  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 14128                           
 14129                           ; BSR set to: 0
 14130  000A3E  0100               	movlb	0	; () banked
 14131  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14132  000A42  D008               	goto	l1371
 14133  000A44  0100               	movlb	0	; () banked
 14134  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14135  000A48  E12C               	bnz	l1372
 14136  000A4A  0E05               	movlw	5
 14137  000A4C  0100               	movlb	0	; () banked
 14138  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14139  000A50  B0D8               	btfsc	status,0,c
 14140  000A52  D027               	goto	l1372
 14141  000A54                     l1371:
 14142                           
 14143                           ; BSR set to: 0
 14144                           ;Test.c: 263: LATCbits.LATC7 = 1;
 14145  000A54  8E8B               	bsf	3979,7,c	;volatile
 14146                           
 14147                           ; BSR set to: 0
 14148                           ;Test.c: 264: _delay((unsigned long)((300)*(32000000/4000.0)));
 14149  000A56  0E0D               	movlw	13
 14150  000A58  0100               	movlb	0	; () banked
 14151  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14152  000A5C  0E2D               	movlw	45
 14153  000A5E  0100               	movlb	0	; () banked
 14154  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 14155  000A62  0ED7               	movlw	215
 14156  000A64                     u11767:
 14157  000A64  2EE8               	decfsz	wreg,f,c
 14158  000A66  D7FE               	bra	u11767
 14159  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14160  000A6A  D7FC               	bra	u11767
 14161  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14162  000A6E  D7FA               	bra	u11767
 14163  000A70  D000               	nop2	
 14164                           
 14165                           ;Test.c: 265: LATCbits.LATC7 = !1;
 14166  000A72  9E8B               	bcf	3979,7,c	;volatile
 14167                           
 14168                           ;Test.c: 266: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14169  000A74  0E1D               	movlw	29
 14170  000A76  0100               	movlb	0	; () banked
 14171  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14172  000A7A  0E69               	movlw	105
 14173  000A7C  0100               	movlb	0	; () banked
 14174  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14175  000A80  0EA5               	movlw	165
 14176  000A82                     u11777:
 14177  000A82  2EE8               	decfsz	wreg,f,c
 14178  000A84  D7FE               	bra	u11777
 14179  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14180  000A88  D7FC               	bra	u11777
 14181  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14182  000A8C  D7FA               	bra	u11777
 14183  000A8E  0100               	movlb	0	; () banked
 14184  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14185  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14186  000A94  0100               	movlb	0	; () banked
 14187  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14188  000A98  D7DD               	goto	l1371
 14189  000A9A  0100               	movlb	0	; () banked
 14190  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14191  000A9E  E101               	bnz	u8110
 14192  000AA0  D7D4               	goto	L12
 14193  000AA2                     u8110:
 14194  000AA2                     l1372:
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;Test.c: 267: }
 14198                           ;Test.c: 268: LATCbits.LATC7 = !1;
 14199  000AA2  9E8B               	bcf	3979,7,c	;volatile
 14200                           
 14201                           ; BSR set to: 0
 14202                           ;Test.c: 269: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14203  000AA4  0E01               	movlw	1
 14204  000AA6  EC63  F030         	call	_lcdInst
 14205  000AAA  0E68               	movlw	104
 14206  000AAC  0100               	movlb	0	; () banked
 14207  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 14208  000AB0  0EE4               	movlw	228
 14209  000AB2                     u11787:
 14210  000AB2  2EE8               	decfsz	wreg,f,c
 14211  000AB4  D7FE               	bra	u11787
 14212  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14213  000AB8  D7FC               	bra	u11787
 14214  000ABA  F000               	nop	
 14215  000ABC  0E80               	movlw	128
 14216  000ABE  EC63  F030         	call	_lcdInst
 14217                           
 14218                           ;Test.c: 275: printf("TST: PUSH SOLN'D");
 14219  000AC2  0E7F               	movlw	low STR_95
 14220  000AC4  0100               	movlb	0	; () banked
 14221  000AC6  6F8E               	movwf	printf@f& (0+255),b
 14222  000AC8  0EFC               	movlw	high STR_95
 14223  000ACA  0100               	movlb	0	; () banked
 14224  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14225  000ACE  ECE7  F00E         	call	_printf	;wreg free
 14226                           
 14227                           ;Test.c: 276: lcdInst(0b11000000);;
 14228  000AD2  0EC0               	movlw	192
 14229  000AD4  EC63  F030         	call	_lcdInst
 14230                           
 14231                           ;Test.c: 277: printf("PIN RA4...");
 14232  000AD8  0E7B               	movlw	low STR_96
 14233  000ADA  0100               	movlb	0	; () banked
 14234  000ADC  6F8E               	movwf	printf@f& (0+255),b
 14235  000ADE  0EFF               	movlw	high STR_96
 14236  000AE0  0100               	movlb	0	; () banked
 14237  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14238  000AE4  ECE7  F00E         	call	_printf	;wreg free
 14239                           
 14240                           ;Test.c: 278: for(i=0;i<5;i++){
 14241  000AE8  0E00               	movlw	0
 14242  000AEA  0100               	movlb	0	; () banked
 14243  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14244  000AEE  0E00               	movlw	0
 14245  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 14246                           
 14247                           ; BSR set to: 0
 14248  000AF2  0100               	movlb	0	; () banked
 14249  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14250  000AF6  D008               	goto	l1373
 14251  000AF8  0100               	movlb	0	; () banked
 14252  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14253  000AFC  E12C               	bnz	l1374
 14254  000AFE  0E05               	movlw	5
 14255  000B00  0100               	movlb	0	; () banked
 14256  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14257  000B04  B0D8               	btfsc	status,0,c
 14258  000B06  D027               	goto	l1374
 14259  000B08                     l1373:
 14260                           
 14261                           ; BSR set to: 0
 14262                           ;Test.c: 279: LATAbits.LATA4 = 1;
 14263  000B08  8889               	bsf	3977,4,c	;volatile
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;Test.c: 280: _delay((unsigned long)((300)*(32000000/4000.0)));
 14267  000B0A  0E0D               	movlw	13
 14268  000B0C  0100               	movlb	0	; () banked
 14269  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14270  000B10  0E2D               	movlw	45
 14271  000B12  0100               	movlb	0	; () banked
 14272  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 14273  000B16  0ED7               	movlw	215
 14274  000B18                     u11797:
 14275  000B18  2EE8               	decfsz	wreg,f,c
 14276  000B1A  D7FE               	bra	u11797
 14277  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14278  000B1E  D7FC               	bra	u11797
 14279  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14280  000B22  D7FA               	bra	u11797
 14281  000B24  D000               	nop2	
 14282                           
 14283                           ;Test.c: 281: LATAbits.LATA4 = !1;
 14284  000B26  9889               	bcf	3977,4,c	;volatile
 14285                           
 14286                           ;Test.c: 282: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14287  000B28  0E1D               	movlw	29
 14288  000B2A  0100               	movlb	0	; () banked
 14289  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14290  000B2E  0E69               	movlw	105
 14291  000B30  0100               	movlb	0	; () banked
 14292  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 14293  000B34  0EA5               	movlw	165
 14294  000B36                     u11807:
 14295  000B36  2EE8               	decfsz	wreg,f,c
 14296  000B38  D7FE               	bra	u11807
 14297  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14298  000B3C  D7FC               	bra	u11807
 14299  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14300  000B40  D7FA               	bra	u11807
 14301  000B42  0100               	movlb	0	; () banked
 14302  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14303  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14304  000B48  0100               	movlb	0	; () banked
 14305  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14306  000B4C  D7DD               	goto	l1373
 14307  000B4E  0100               	movlb	0	; () banked
 14308  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14309  000B52  E101               	bnz	u8130
 14310  000B54  D7D4               	goto	L13
 14311  000B56                     u8130:
 14312  000B56                     l1374:
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;Test.c: 283: }
 14316                           ;Test.c: 284: LATAbits.LATA4 = !1;
 14317  000B56  9889               	bcf	3977,4,c	;volatile
 14318                           
 14319                           ; BSR set to: 0
 14320                           ;Test.c: 285: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14321  000B58  0E01               	movlw	1
 14322  000B5A  EC63  F030         	call	_lcdInst
 14323  000B5E  0E68               	movlw	104
 14324  000B60  0100               	movlb	0	; () banked
 14325  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 14326  000B64  0EE4               	movlw	228
 14327  000B66                     u11817:
 14328  000B66  2EE8               	decfsz	wreg,f,c
 14329  000B68  D7FE               	bra	u11817
 14330  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14331  000B6C  D7FC               	bra	u11817
 14332  000B6E  F000               	nop	
 14333  000B70  0E80               	movlw	128
 14334  000B72  EC63  F030         	call	_lcdInst
 14335                           
 14336                           ;Test.c: 288: machine_state = Sorting_state;
 14337  000B76  0E01               	movlw	1
 14338  000B78  0100               	movlb	0	; () banked
 14339  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 14340                           
 14341                           ; BSR set to: 0
 14342                           ;Test.c: 289: was_low_1 = 0;
 14343  000B7C  0E00               	movlw	0
 14344  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 14345  000B80  0E00               	movlw	0
 14346  000B82  6E77               	movwf	_was_low_1,c	;volatile
 14347                           
 14348                           ; BSR set to: 0
 14349                           ;Test.c: 290: was_low_1 = 0;
 14350  000B84  0E00               	movlw	0
 14351  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 14352  000B88  0E00               	movlw	0
 14353  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 14354                           
 14355                           ; BSR set to: 0
 14356                           ;Test.c: 297: printf("TST: PAN SERVO");
 14357  000B8C  0ED4               	movlw	low STR_97
 14358  000B8E  0100               	movlb	0	; () banked
 14359  000B90  6F8E               	movwf	printf@f& (0+255),b
 14360  000B92  0EFE               	movlw	high STR_97
 14361  000B94  0100               	movlb	0	; () banked
 14362  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 14363  000B98  ECE7  F00E         	call	_printf	;wreg free
 14364                           
 14365                           ;Test.c: 298: lcdInst(0b11000000);;
 14366  000B9C  0EC0               	movlw	192
 14367  000B9E  EC63  F030         	call	_lcdInst
 14368                           
 14369                           ;Test.c: 299: printf("MIDDLE -- 2s    ");
 14370  000BA2  0EE6               	movlw	low STR_98
 14371  000BA4  0100               	movlb	0	; () banked
 14372  000BA6  6F8E               	movwf	printf@f& (0+255),b
 14373  000BA8  0EFB               	movlw	high STR_98
 14374  000BAA  0100               	movlb	0	; () banked
 14375  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14376  000BAE  ECE7  F00E         	call	_printf	;wreg free
 14377                           
 14378                           ;Test.c: 300: updateServoPosition(1200, 1);
 14379  000BB2  0E04               	movlw	4
 14380  000BB4  0100               	movlb	0	; () banked
 14381  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14382  000BB8  0EB0               	movlw	176
 14383  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14384  000BBC  0E00               	movlw	0
 14385  000BBE  0100               	movlb	0	; () banked
 14386  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14387  000BC2  0E01               	movlw	1
 14388  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14389  000BC6  EC5F  F029         	call	_updateServoPosition	;wreg free
 14390                           
 14391                           ;Test.c: 301: TMR1ON = 1;
 14392  000BCA  80CD               	bsf	4045,0,c	;volatile
 14393                           
 14394                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14395  000BCC  0E00               	movlw	0
 14396  000BCE  0100               	movlb	0	; () banked
 14397  000BD0  6FAE               	movwf	actuatorTest@i_1763& (0+255),b
 14398  000BD2                     l8862:
 14399                           
 14400                           ; BSR set to: 0
 14401  000BD2  0E63               	movlw	99
 14402  000BD4  0100               	movlb	0	; () banked
 14403  000BD6  65AE               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14404  000BD8  D001               	goto	l8866
 14405  000BDA  D00C               	goto	l8870
 14406  000BDC                     l8866:
 14407                           
 14408                           ; BSR set to: 0
 14409  000BDC  0E68               	movlw	104
 14410  000BDE  0100               	movlb	0	; () banked
 14411  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14412  000BE2  0EE4               	movlw	228
 14413  000BE4                     u11827:
 14414  000BE4  2EE8               	decfsz	wreg,f,c
 14415  000BE6  D7FE               	bra	u11827
 14416  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14417  000BEA  D7FC               	bra	u11827
 14418  000BEC  F000               	nop	
 14419  000BEE  0100               	movlb	0	; () banked
 14420  000BF0  2BAE               	incf	actuatorTest@i_1763& (0+255),f,b
 14421  000BF2  D7EF               	goto	l8862
 14422  000BF4                     l8870:
 14423                           
 14424                           ; BSR set to: 0
 14425  000BF4  0E00               	movlw	0
 14426  000BF6  0100               	movlb	0	; () banked
 14427  000BF8  6FAF               	movwf	actuatorTest@i_1764& (0+255),b
 14428  000BFA                     l8872:
 14429                           
 14430                           ; BSR set to: 0
 14431  000BFA  0E63               	movlw	99
 14432  000BFC  0100               	movlb	0	; () banked
 14433  000BFE  65AF               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14434  000C00  D001               	goto	l8876
 14435  000C02  D00C               	goto	l8880
 14436  000C04                     l8876:
 14437                           
 14438                           ; BSR set to: 0
 14439  000C04  0E68               	movlw	104
 14440  000C06  0100               	movlb	0	; () banked
 14441  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 14442  000C0A  0EE4               	movlw	228
 14443  000C0C                     u11837:
 14444  000C0C  2EE8               	decfsz	wreg,f,c
 14445  000C0E  D7FE               	bra	u11837
 14446  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14447  000C12  D7FC               	bra	u11837
 14448  000C14  F000               	nop	
 14449  000C16  0100               	movlb	0	; () banked
 14450  000C18  2BAF               	incf	actuatorTest@i_1764& (0+255),f,b
 14451  000C1A  D7EF               	goto	l8872
 14452  000C1C                     l8880:
 14453                           
 14454                           ; BSR set to: 0
 14455                           ;Test.c: 304: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14456  000C1C  0E80               	movlw	128
 14457  000C1E  EC63  F030         	call	_lcdInst
 14458  000C22  0EC0               	movlw	192
 14459  000C24  EC63  F030         	call	_lcdInst
 14460                           
 14461                           ;Test.c: 305: printf("RIGHT -- 2s     ");
 14462  000C28  0ED5               	movlw	low STR_99
 14463  000C2A  0100               	movlb	0	; () banked
 14464  000C2C  6F8E               	movwf	printf@f& (0+255),b
 14465  000C2E  0EFB               	movlw	high STR_99
 14466  000C30  0100               	movlb	0	; () banked
 14467  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 14468  000C34  ECE7  F00E         	call	_printf	;wreg free
 14469                           
 14470                           ;Test.c: 306: updateServoPosition(400, 1);
 14471  000C38  0E01               	movlw	1
 14472  000C3A  0100               	movlb	0	; () banked
 14473  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14474  000C3E  0E90               	movlw	144
 14475  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14476  000C42  0E00               	movlw	0
 14477  000C44  0100               	movlb	0	; () banked
 14478  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14479  000C48  0E01               	movlw	1
 14480  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14481  000C4C  EC5F  F029         	call	_updateServoPosition	;wreg free
 14482                           
 14483                           ;Test.c: 307: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14484  000C50  0E00               	movlw	0
 14485  000C52  0100               	movlb	0	; () banked
 14486  000C54  6FB0               	movwf	actuatorTest@i_1766& (0+255),b
 14487  000C56                     l8888:
 14488                           
 14489                           ; BSR set to: 0
 14490  000C56  0E63               	movlw	99
 14491  000C58  0100               	movlb	0	; () banked
 14492  000C5A  65B0               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14493  000C5C  D001               	goto	l8892
 14494  000C5E  D00C               	goto	l8896
 14495  000C60                     l8892:
 14496                           
 14497                           ; BSR set to: 0
 14498  000C60  0E68               	movlw	104
 14499  000C62  0100               	movlb	0	; () banked
 14500  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 14501  000C66  0EE4               	movlw	228
 14502  000C68                     u11847:
 14503  000C68  2EE8               	decfsz	wreg,f,c
 14504  000C6A  D7FE               	bra	u11847
 14505  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14506  000C6E  D7FC               	bra	u11847
 14507  000C70  F000               	nop	
 14508  000C72  0100               	movlb	0	; () banked
 14509  000C74  2BB0               	incf	actuatorTest@i_1766& (0+255),f,b
 14510  000C76  D7EF               	goto	l8888
 14511  000C78                     l8896:
 14512                           
 14513                           ; BSR set to: 0
 14514  000C78  0E00               	movlw	0
 14515  000C7A  0100               	movlb	0	; () banked
 14516  000C7C  6FB1               	movwf	actuatorTest@i_1767& (0+255),b
 14517  000C7E                     l8898:
 14518                           
 14519                           ; BSR set to: 0
 14520  000C7E  0E63               	movlw	99
 14521  000C80  0100               	movlb	0	; () banked
 14522  000C82  65B1               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14523  000C84  D001               	goto	l8902
 14524  000C86  D00C               	goto	l8906
 14525  000C88                     l8902:
 14526                           
 14527                           ; BSR set to: 0
 14528  000C88  0E68               	movlw	104
 14529  000C8A  0100               	movlb	0	; () banked
 14530  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14531  000C8E  0EE4               	movlw	228
 14532  000C90                     u11857:
 14533  000C90  2EE8               	decfsz	wreg,f,c
 14534  000C92  D7FE               	bra	u11857
 14535  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14536  000C96  D7FC               	bra	u11857
 14537  000C98  F000               	nop	
 14538  000C9A  0100               	movlb	0	; () banked
 14539  000C9C  2BB1               	incf	actuatorTest@i_1767& (0+255),f,b
 14540  000C9E  D7EF               	goto	l8898
 14541  000CA0                     l8906:
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;Test.c: 309: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14545  000CA0  0E80               	movlw	128
 14546  000CA2  EC63  F030         	call	_lcdInst
 14547  000CA6  0EC0               	movlw	192
 14548  000CA8  EC63  F030         	call	_lcdInst
 14549                           
 14550                           ;Test.c: 310: printf("LEFT -- 2s      ");
 14551  000CAC  0EB3               	movlw	low STR_100
 14552  000CAE  0100               	movlb	0	; () banked
 14553  000CB0  6F8E               	movwf	printf@f& (0+255),b
 14554  000CB2  0EFB               	movlw	high STR_100
 14555  000CB4  0100               	movlb	0	; () banked
 14556  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14557  000CB8  ECE7  F00E         	call	_printf	;wreg free
 14558                           
 14559                           ;Test.c: 311: updateServoPosition(2500, 1);
 14560  000CBC  0E09               	movlw	9
 14561  000CBE  0100               	movlb	0	; () banked
 14562  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14563  000CC2  0EC4               	movlw	196
 14564  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14565  000CC6  0E00               	movlw	0
 14566  000CC8  0100               	movlb	0	; () banked
 14567  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14568  000CCC  0E01               	movlw	1
 14569  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14570  000CD0  EC5F  F029         	call	_updateServoPosition	;wreg free
 14571                           
 14572                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14573  000CD4  0E00               	movlw	0
 14574  000CD6  0100               	movlb	0	; () banked
 14575  000CD8  6FB2               	movwf	actuatorTest@i_1769& (0+255),b
 14576  000CDA                     l8914:
 14577                           
 14578                           ; BSR set to: 0
 14579  000CDA  0E63               	movlw	99
 14580  000CDC  0100               	movlb	0	; () banked
 14581  000CDE  65B2               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14582  000CE0  D001               	goto	l8918
 14583  000CE2  D00C               	goto	l8922
 14584  000CE4                     l8918:
 14585                           
 14586                           ; BSR set to: 0
 14587  000CE4  0E68               	movlw	104
 14588  000CE6  0100               	movlb	0	; () banked
 14589  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14590  000CEA  0EE4               	movlw	228
 14591  000CEC                     u11867:
 14592  000CEC  2EE8               	decfsz	wreg,f,c
 14593  000CEE  D7FE               	bra	u11867
 14594  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14595  000CF2  D7FC               	bra	u11867
 14596  000CF4  F000               	nop	
 14597  000CF6  0100               	movlb	0	; () banked
 14598  000CF8  2BB2               	incf	actuatorTest@i_1769& (0+255),f,b
 14599  000CFA  D7EF               	goto	l8914
 14600  000CFC                     l8922:
 14601                           
 14602                           ; BSR set to: 0
 14603  000CFC  0E00               	movlw	0
 14604  000CFE  0100               	movlb	0	; () banked
 14605  000D00  6FB3               	movwf	actuatorTest@i_1770& (0+255),b
 14606  000D02                     l8924:
 14607                           
 14608                           ; BSR set to: 0
 14609  000D02  0E63               	movlw	99
 14610  000D04  0100               	movlb	0	; () banked
 14611  000D06  65B3               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14612  000D08  D001               	goto	l8928
 14613  000D0A  D00C               	goto	l8932
 14614  000D0C                     l8928:
 14615                           
 14616                           ; BSR set to: 0
 14617  000D0C  0E68               	movlw	104
 14618  000D0E  0100               	movlb	0	; () banked
 14619  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14620  000D12  0EE4               	movlw	228
 14621  000D14                     u11877:
 14622  000D14  2EE8               	decfsz	wreg,f,c
 14623  000D16  D7FE               	bra	u11877
 14624  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14625  000D1A  D7FC               	bra	u11877
 14626  000D1C  F000               	nop	
 14627  000D1E  0100               	movlb	0	; () banked
 14628  000D20  2BB3               	incf	actuatorTest@i_1770& (0+255),f,b
 14629  000D22  D7EF               	goto	l8924
 14630  000D24                     l8932:
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14634  000D24  0E80               	movlw	128
 14635  000D26  EC63  F030         	call	_lcdInst
 14636  000D2A  0EC0               	movlw	192
 14637  000D2C  EC63  F030         	call	_lcdInst
 14638                           
 14639                           ;Test.c: 315: printf("MID-LEFT -- 2s  ");
 14640  000D30  0E3B               	movlw	low STR_101
 14641  000D32  0100               	movlb	0	; () banked
 14642  000D34  6F8E               	movwf	printf@f& (0+255),b
 14643  000D36  0EFC               	movlw	high STR_101
 14644  000D38  0100               	movlb	0	; () banked
 14645  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14646  000D3C  ECE7  F00E         	call	_printf	;wreg free
 14647                           
 14648                           ;Test.c: 316: updateServoPosition(1550, 1);
 14649  000D40  0E06               	movlw	6
 14650  000D42  0100               	movlb	0	; () banked
 14651  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14652  000D46  0E0E               	movlw	14
 14653  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14654  000D4A  0E00               	movlw	0
 14655  000D4C  0100               	movlb	0	; () banked
 14656  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14657  000D50  0E01               	movlw	1
 14658  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14659  000D54  EC5F  F029         	call	_updateServoPosition	;wreg free
 14660                           
 14661                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14662  000D58  0E00               	movlw	0
 14663  000D5A  0100               	movlb	0	; () banked
 14664  000D5C  6FB4               	movwf	actuatorTest@i_1772& (0+255),b
 14665  000D5E                     l8940:
 14666                           
 14667                           ; BSR set to: 0
 14668  000D5E  0E63               	movlw	99
 14669  000D60  0100               	movlb	0	; () banked
 14670  000D62  65B4               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14671  000D64  D001               	goto	l8944
 14672  000D66  D00C               	goto	l8948
 14673  000D68                     l8944:
 14674                           
 14675                           ; BSR set to: 0
 14676  000D68  0E68               	movlw	104
 14677  000D6A  0100               	movlb	0	; () banked
 14678  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14679  000D6E  0EE4               	movlw	228
 14680  000D70                     u11887:
 14681  000D70  2EE8               	decfsz	wreg,f,c
 14682  000D72  D7FE               	bra	u11887
 14683  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14684  000D76  D7FC               	bra	u11887
 14685  000D78  F000               	nop	
 14686  000D7A  0100               	movlb	0	; () banked
 14687  000D7C  2BB4               	incf	actuatorTest@i_1772& (0+255),f,b
 14688  000D7E  D7EF               	goto	l8940
 14689  000D80                     l8948:
 14690                           
 14691                           ; BSR set to: 0
 14692  000D80  0E00               	movlw	0
 14693  000D82  0100               	movlb	0	; () banked
 14694  000D84  6FB5               	movwf	actuatorTest@i_1773& (0+255),b
 14695  000D86                     l8950:
 14696                           
 14697                           ; BSR set to: 0
 14698  000D86  0E63               	movlw	99
 14699  000D88  0100               	movlb	0	; () banked
 14700  000D8A  65B5               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14701  000D8C  D001               	goto	l8954
 14702  000D8E  D00C               	goto	l8958
 14703  000D90                     l8954:
 14704                           
 14705                           ; BSR set to: 0
 14706  000D90  0E68               	movlw	104
 14707  000D92  0100               	movlb	0	; () banked
 14708  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14709  000D96  0EE4               	movlw	228
 14710  000D98                     u11897:
 14711  000D98  2EE8               	decfsz	wreg,f,c
 14712  000D9A  D7FE               	bra	u11897
 14713  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14714  000D9E  D7FC               	bra	u11897
 14715  000DA0  F000               	nop	
 14716  000DA2  0100               	movlb	0	; () banked
 14717  000DA4  2BB5               	incf	actuatorTest@i_1773& (0+255),f,b
 14718  000DA6  D7EF               	goto	l8950
 14719  000DA8                     l8958:
 14720                           
 14721                           ; BSR set to: 0
 14722                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14723  000DA8  0E80               	movlw	128
 14724  000DAA  EC63  F030         	call	_lcdInst
 14725  000DAE  0EC0               	movlw	192
 14726  000DB0  EC63  F030         	call	_lcdInst
 14727                           
 14728                           ;Test.c: 320: printf("MID-RIGHT -- 2s ");
 14729  000DB4  0E4C               	movlw	low STR_102
 14730  000DB6  0100               	movlb	0	; () banked
 14731  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14732  000DBA  0EFC               	movlw	high STR_102
 14733  000DBC  0100               	movlb	0	; () banked
 14734  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14735  000DC0  ECE7  F00E         	call	_printf	;wreg free
 14736                           
 14737                           ;Test.c: 321: updateServoPosition(850, 1);
 14738  000DC4  0E03               	movlw	3
 14739  000DC6  0100               	movlb	0	; () banked
 14740  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14741  000DCA  0E52               	movlw	82
 14742  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14743  000DCE  0E00               	movlw	0
 14744  000DD0  0100               	movlb	0	; () banked
 14745  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14746  000DD4  0E01               	movlw	1
 14747  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14748  000DD8  EC5F  F029         	call	_updateServoPosition	;wreg free
 14749                           
 14750                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14751  000DDC  0E00               	movlw	0
 14752  000DDE  0100               	movlb	0	; () banked
 14753  000DE0  6FB6               	movwf	actuatorTest@i_1775& (0+255),b
 14754  000DE2                     l8966:
 14755                           
 14756                           ; BSR set to: 0
 14757  000DE2  0E63               	movlw	99
 14758  000DE4  0100               	movlb	0	; () banked
 14759  000DE6  65B6               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14760  000DE8  D001               	goto	l8970
 14761  000DEA  D00C               	goto	l8974
 14762  000DEC                     l8970:
 14763                           
 14764                           ; BSR set to: 0
 14765  000DEC  0E68               	movlw	104
 14766  000DEE  0100               	movlb	0	; () banked
 14767  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14768  000DF2  0EE4               	movlw	228
 14769  000DF4                     u11907:
 14770  000DF4  2EE8               	decfsz	wreg,f,c
 14771  000DF6  D7FE               	bra	u11907
 14772  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14773  000DFA  D7FC               	bra	u11907
 14774  000DFC  F000               	nop	
 14775  000DFE  0100               	movlb	0	; () banked
 14776  000E00  2BB6               	incf	actuatorTest@i_1775& (0+255),f,b
 14777  000E02  D7EF               	goto	l8966
 14778  000E04                     l8974:
 14779                           
 14780                           ; BSR set to: 0
 14781  000E04  0E00               	movlw	0
 14782  000E06  0100               	movlb	0	; () banked
 14783  000E08  6FB7               	movwf	actuatorTest@i_1776& (0+255),b
 14784  000E0A                     l8976:
 14785                           
 14786                           ; BSR set to: 0
 14787  000E0A  0E63               	movlw	99
 14788  000E0C  0100               	movlb	0	; () banked
 14789  000E0E  65B7               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14790  000E10  D001               	goto	l8980
 14791  000E12  D00C               	goto	l8984
 14792  000E14                     l8980:
 14793                           
 14794                           ; BSR set to: 0
 14795  000E14  0E68               	movlw	104
 14796  000E16  0100               	movlb	0	; () banked
 14797  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14798  000E1A  0EE4               	movlw	228
 14799  000E1C                     u11917:
 14800  000E1C  2EE8               	decfsz	wreg,f,c
 14801  000E1E  D7FE               	bra	u11917
 14802  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14803  000E22  D7FC               	bra	u11917
 14804  000E24  F000               	nop	
 14805  000E26  0100               	movlb	0	; () banked
 14806  000E28  2BB7               	incf	actuatorTest@i_1776& (0+255),f,b
 14807  000E2A  D7EF               	goto	l8976
 14808  000E2C                     l8984:
 14809                           
 14810                           ; BSR set to: 0
 14811                           ;Test.c: 324: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14812  000E2C  0E80               	movlw	128
 14813  000E2E  EC63  F030         	call	_lcdInst
 14814  000E32  0EC0               	movlw	192
 14815  000E34  EC63  F030         	call	_lcdInst
 14816                           
 14817                           ;Test.c: 325: printf("MID -- 2s       ");
 14818  000E38  0E91               	movlw	low STR_103
 14819  000E3A  0100               	movlb	0	; () banked
 14820  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14821  000E3E  0EFB               	movlw	high STR_103
 14822  000E40  0100               	movlb	0	; () banked
 14823  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14824  000E44  ECE7  F00E         	call	_printf	;wreg free
 14825                           
 14826                           ;Test.c: 326: updateServoPosition(1200, 1);
 14827  000E48  0E04               	movlw	4
 14828  000E4A  0100               	movlb	0	; () banked
 14829  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14830  000E4E  0EB0               	movlw	176
 14831  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14832  000E52  0E00               	movlw	0
 14833  000E54  0100               	movlb	0	; () banked
 14834  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14835  000E58  0E01               	movlw	1
 14836  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14837  000E5C  EC5F  F029         	call	_updateServoPosition	;wreg free
 14838                           
 14839                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14840  000E60  0E00               	movlw	0
 14841  000E62  0100               	movlb	0	; () banked
 14842  000E64  6FB8               	movwf	actuatorTest@i_1778& (0+255),b
 14843  000E66                     l8992:
 14844                           
 14845                           ; BSR set to: 0
 14846  000E66  0E63               	movlw	99
 14847  000E68  0100               	movlb	0	; () banked
 14848  000E6A  65B8               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14849  000E6C  D001               	goto	l8996
 14850  000E6E  D00C               	goto	l9000
 14851  000E70                     l8996:
 14852                           
 14853                           ; BSR set to: 0
 14854  000E70  0E68               	movlw	104
 14855  000E72  0100               	movlb	0	; () banked
 14856  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14857  000E76  0EE4               	movlw	228
 14858  000E78                     u11927:
 14859  000E78  2EE8               	decfsz	wreg,f,c
 14860  000E7A  D7FE               	bra	u11927
 14861  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14862  000E7E  D7FC               	bra	u11927
 14863  000E80  F000               	nop	
 14864  000E82  0100               	movlb	0	; () banked
 14865  000E84  2BB8               	incf	actuatorTest@i_1778& (0+255),f,b
 14866  000E86  D7EF               	goto	l8992
 14867  000E88                     l9000:
 14868                           
 14869                           ; BSR set to: 0
 14870  000E88  0E00               	movlw	0
 14871  000E8A  0100               	movlb	0	; () banked
 14872  000E8C  6FB9               	movwf	actuatorTest@i_1779& (0+255),b
 14873  000E8E                     l9002:
 14874                           
 14875                           ; BSR set to: 0
 14876  000E8E  0E63               	movlw	99
 14877  000E90  0100               	movlb	0	; () banked
 14878  000E92  65B9               	cpfsgt	actuatorTest@i_1779& (0+255),b
 14879  000E94  D001               	goto	l9006
 14880  000E96  D00C               	goto	l1398
 14881  000E98                     l9006:
 14882                           
 14883                           ; BSR set to: 0
 14884  000E98  0E68               	movlw	104
 14885  000E9A  0100               	movlb	0	; () banked
 14886  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14887  000E9E  0EE4               	movlw	228
 14888  000EA0                     u11937:
 14889  000EA0  2EE8               	decfsz	wreg,f,c
 14890  000EA2  D7FE               	bra	u11937
 14891  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14892  000EA6  D7FC               	bra	u11937
 14893  000EA8  F000               	nop	
 14894  000EAA  0100               	movlb	0	; () banked
 14895  000EAC  2BB9               	incf	actuatorTest@i_1779& (0+255),f,b
 14896  000EAE  D7EF               	goto	l9002
 14897  000EB0                     l1398:
 14898                           
 14899                           ; BSR set to: 0
 14900                           ;Test.c: 328: TMR1ON = 0;
 14901  000EB0  90CD               	bcf	4045,0,c	;volatile
 14902                           
 14903                           ; BSR set to: 0
 14904                           ;Test.c: 335: printf("TST: TILT SERVO");
 14905  000EB2  0E49               	movlw	low STR_104
 14906  000EB4  0100               	movlb	0	; () banked
 14907  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14908  000EB8  0EFE               	movlw	high STR_104
 14909  000EBA  0100               	movlb	0	; () banked
 14910  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14911  000EBE  ECE7  F00E         	call	_printf	;wreg free
 14912                           
 14913                           ;Test.c: 336: lcdInst(0b11000000);;
 14914  000EC2  0EC0               	movlw	192
 14915  000EC4  EC63  F030         	call	_lcdInst
 14916                           
 14917                           ;Test.c: 337: printf("LEVEL -- 2s     ");
 14918  000EC8  0EC4               	movlw	low STR_105
 14919  000ECA  0100               	movlb	0	; () banked
 14920  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14921  000ECE  0EFB               	movlw	high STR_105
 14922  000ED0  0100               	movlb	0	; () banked
 14923  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14924  000ED4  ECE7  F00E         	call	_printf	;wreg free
 14925                           
 14926                           ;Test.c: 338: updateServoPosition(1050, 3);
 14927  000ED8  0E04               	movlw	4
 14928  000EDA  0100               	movlb	0	; () banked
 14929  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14930  000EDE  0E1A               	movlw	26
 14931  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14932  000EE2  0E00               	movlw	0
 14933  000EE4  0100               	movlb	0	; () banked
 14934  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14935  000EE8  0E03               	movlw	3
 14936  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14937  000EEC  EC5F  F029         	call	_updateServoPosition	;wreg free
 14938                           
 14939                           ;Test.c: 339: TMR3ON = 1;
 14940  000EF0  80B1               	bsf	4017,0,c	;volatile
 14941                           
 14942                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14943  000EF2  0E00               	movlw	0
 14944  000EF4  0100               	movlb	0	; () banked
 14945  000EF6  6FBA               	movwf	actuatorTest@i_1782& (0+255),b
 14946  000EF8                     l9020:
 14947                           
 14948                           ; BSR set to: 0
 14949  000EF8  0E63               	movlw	99
 14950  000EFA  0100               	movlb	0	; () banked
 14951  000EFC  65BA               	cpfsgt	actuatorTest@i_1782& (0+255),b
 14952  000EFE  D001               	goto	l9024
 14953  000F00  D00C               	goto	l9028
 14954  000F02                     l9024:
 14955                           
 14956                           ; BSR set to: 0
 14957  000F02  0E68               	movlw	104
 14958  000F04  0100               	movlb	0	; () banked
 14959  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14960  000F08  0EE4               	movlw	228
 14961  000F0A                     u11947:
 14962  000F0A  2EE8               	decfsz	wreg,f,c
 14963  000F0C  D7FE               	bra	u11947
 14964  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14965  000F10  D7FC               	bra	u11947
 14966  000F12  F000               	nop	
 14967  000F14  0100               	movlb	0	; () banked
 14968  000F16  2BBA               	incf	actuatorTest@i_1782& (0+255),f,b
 14969  000F18  D7EF               	goto	l9020
 14970  000F1A                     l9028:
 14971                           
 14972                           ; BSR set to: 0
 14973  000F1A  0E00               	movlw	0
 14974  000F1C  0100               	movlb	0	; () banked
 14975  000F1E  6FBB               	movwf	actuatorTest@i_1783& (0+255),b
 14976  000F20                     l9030:
 14977                           
 14978                           ; BSR set to: 0
 14979  000F20  0E63               	movlw	99
 14980  000F22  0100               	movlb	0	; () banked
 14981  000F24  65BB               	cpfsgt	actuatorTest@i_1783& (0+255),b
 14982  000F26  D001               	goto	l9034
 14983  000F28  D00C               	goto	l9038
 14984  000F2A                     l9034:
 14985                           
 14986                           ; BSR set to: 0
 14987  000F2A  0E68               	movlw	104
 14988  000F2C  0100               	movlb	0	; () banked
 14989  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14990  000F30  0EE4               	movlw	228
 14991  000F32                     u11957:
 14992  000F32  2EE8               	decfsz	wreg,f,c
 14993  000F34  D7FE               	bra	u11957
 14994  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14995  000F38  D7FC               	bra	u11957
 14996  000F3A  F000               	nop	
 14997  000F3C  0100               	movlb	0	; () banked
 14998  000F3E  2BBB               	incf	actuatorTest@i_1783& (0+255),f,b
 14999  000F40  D7EF               	goto	l9030
 15000  000F42                     l9038:
 15001                           
 15002                           ; BSR set to: 0
 15003                           ;Test.c: 342: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15004  000F42  0E80               	movlw	128
 15005  000F44  EC63  F030         	call	_lcdInst
 15006  000F48  0EC0               	movlw	192
 15007  000F4A  EC63  F030         	call	_lcdInst
 15008                           
 15009                           ;Test.c: 343: printf("DROP -- 2s      ");
 15010  000F4E  0EA2               	movlw	low STR_106
 15011  000F50  0100               	movlb	0	; () banked
 15012  000F52  6F8E               	movwf	printf@f& (0+255),b
 15013  000F54  0EFB               	movlw	high STR_106
 15014  000F56  0100               	movlb	0	; () banked
 15015  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 15016  000F5A  ECE7  F00E         	call	_printf	;wreg free
 15017                           
 15018                           ;Test.c: 344: updateServoPosition(1260, 3);
 15019  000F5E  0E04               	movlw	4
 15020  000F60  0100               	movlb	0	; () banked
 15021  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15022  000F64  0EEC               	movlw	236
 15023  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15024  000F68  0E00               	movlw	0
 15025  000F6A  0100               	movlb	0	; () banked
 15026  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15027  000F6E  0E03               	movlw	3
 15028  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15029  000F72  EC5F  F029         	call	_updateServoPosition	;wreg free
 15030                           
 15031                           ;Test.c: 345: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15032  000F76  0E00               	movlw	0
 15033  000F78  0100               	movlb	0	; () banked
 15034  000F7A  6FBC               	movwf	actuatorTest@i_1785& (0+255),b
 15035  000F7C                     l9046:
 15036                           
 15037                           ; BSR set to: 0
 15038  000F7C  0E63               	movlw	99
 15039  000F7E  0100               	movlb	0	; () banked
 15040  000F80  65BC               	cpfsgt	actuatorTest@i_1785& (0+255),b
 15041  000F82  D001               	goto	l9050
 15042  000F84  D00C               	goto	l9054
 15043  000F86                     l9050:
 15044                           
 15045                           ; BSR set to: 0
 15046  000F86  0E68               	movlw	104
 15047  000F88  0100               	movlb	0	; () banked
 15048  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 15049  000F8C  0EE4               	movlw	228
 15050  000F8E                     u11967:
 15051  000F8E  2EE8               	decfsz	wreg,f,c
 15052  000F90  D7FE               	bra	u11967
 15053  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15054  000F94  D7FC               	bra	u11967
 15055  000F96  F000               	nop	
 15056  000F98  0100               	movlb	0	; () banked
 15057  000F9A  2BBC               	incf	actuatorTest@i_1785& (0+255),f,b
 15058  000F9C  D7EF               	goto	l9046
 15059  000F9E                     l9054:
 15060                           
 15061                           ; BSR set to: 0
 15062  000F9E  0E00               	movlw	0
 15063  000FA0  0100               	movlb	0	; () banked
 15064  000FA2  6FBD               	movwf	actuatorTest@i_1786& (0+255),b
 15065  000FA4                     l9056:
 15066                           
 15067                           ; BSR set to: 0
 15068  000FA4  0E63               	movlw	99
 15069  000FA6  0100               	movlb	0	; () banked
 15070  000FA8  65BD               	cpfsgt	actuatorTest@i_1786& (0+255),b
 15071  000FAA  D001               	goto	l9060
 15072  000FAC  D00C               	goto	l9064
 15073  000FAE                     l9060:
 15074                           
 15075                           ; BSR set to: 0
 15076  000FAE  0E68               	movlw	104
 15077  000FB0  0100               	movlb	0	; () banked
 15078  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 15079  000FB4  0EE4               	movlw	228
 15080  000FB6                     u11977:
 15081  000FB6  2EE8               	decfsz	wreg,f,c
 15082  000FB8  D7FE               	bra	u11977
 15083  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15084  000FBC  D7FC               	bra	u11977
 15085  000FBE  F000               	nop	
 15086  000FC0  0100               	movlb	0	; () banked
 15087  000FC2  2BBD               	incf	actuatorTest@i_1786& (0+255),f,b
 15088  000FC4  D7EF               	goto	l9056
 15089  000FC6                     l9064:
 15090                           
 15091                           ; BSR set to: 0
 15092                           ;Test.c: 347: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15093  000FC6  0E80               	movlw	128
 15094  000FC8  EC63  F030         	call	_lcdInst
 15095  000FCC  0EC0               	movlw	192
 15096  000FCE  EC63  F030         	call	_lcdInst
 15097                           
 15098                           ;Test.c: 348: printf("LEVEL -- 2s     ");
 15099  000FD2  0EC4               	movlw	low STR_105
 15100  000FD4  0100               	movlb	0	; () banked
 15101  000FD6  6F8E               	movwf	printf@f& (0+255),b
 15102  000FD8  0EFB               	movlw	high STR_105
 15103  000FDA  0100               	movlb	0	; () banked
 15104  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15105  000FDE  ECE7  F00E         	call	_printf	;wreg free
 15106                           
 15107                           ;Test.c: 349: updateServoPosition(1050, 3);
 15108  000FE2  0E04               	movlw	4
 15109  000FE4  0100               	movlb	0	; () banked
 15110  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15111  000FE8  0E1A               	movlw	26
 15112  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15113  000FEC  0E00               	movlw	0
 15114  000FEE  0100               	movlb	0	; () banked
 15115  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15116  000FF2  0E03               	movlw	3
 15117  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15118  000FF6  EC5F  F029         	call	_updateServoPosition	;wreg free
 15119                           
 15120                           ;Test.c: 350: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15121  000FFA  0E00               	movlw	0
 15122  000FFC  0100               	movlb	0	; () banked
 15123  000FFE  6FBE               	movwf	actuatorTest@i_1788& (0+255),b
 15124  001000                     l9072:
 15125                           
 15126                           ; BSR set to: 0
 15127  001000  0E63               	movlw	99
 15128  001002  0100               	movlb	0	; () banked
 15129  001004  65BE               	cpfsgt	actuatorTest@i_1788& (0+255),b
 15130  001006  D001               	goto	l9076
 15131  001008  D00C               	goto	l9080
 15132  00100A                     l9076:
 15133                           
 15134                           ; BSR set to: 0
 15135  00100A  0E68               	movlw	104
 15136  00100C  0100               	movlb	0	; () banked
 15137  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15138  001010  0EE4               	movlw	228
 15139  001012                     u11987:
 15140  001012  2EE8               	decfsz	wreg,f,c
 15141  001014  D7FE               	bra	u11987
 15142  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15143  001018  D7FC               	bra	u11987
 15144  00101A  F000               	nop	
 15145  00101C  0100               	movlb	0	; () banked
 15146  00101E  2BBE               	incf	actuatorTest@i_1788& (0+255),f,b
 15147  001020  D7EF               	goto	l9072
 15148  001022                     l9080:
 15149                           
 15150                           ; BSR set to: 0
 15151  001022  0E00               	movlw	0
 15152  001024  0100               	movlb	0	; () banked
 15153  001026  6FBF               	movwf	actuatorTest@i_1789& (0+255),b
 15154  001028                     l9082:
 15155                           
 15156                           ; BSR set to: 0
 15157  001028  0E63               	movlw	99
 15158  00102A  0100               	movlb	0	; () banked
 15159  00102C  65BF               	cpfsgt	actuatorTest@i_1789& (0+255),b
 15160  00102E  D001               	goto	l9086
 15161  001030  D00C               	goto	l1410
 15162  001032                     l9086:
 15163                           
 15164                           ; BSR set to: 0
 15165  001032  0E68               	movlw	104
 15166  001034  0100               	movlb	0	; () banked
 15167  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 15168  001038  0EE4               	movlw	228
 15169  00103A                     u11997:
 15170  00103A  2EE8               	decfsz	wreg,f,c
 15171  00103C  D7FE               	bra	u11997
 15172  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15173  001040  D7FC               	bra	u11997
 15174  001042  F000               	nop	
 15175  001044  0100               	movlb	0	; () banked
 15176  001046  2BBF               	incf	actuatorTest@i_1789& (0+255),f,b
 15177  001048  D7EF               	goto	l9082
 15178  00104A                     l1410:
 15179                           
 15180                           ; BSR set to: 0
 15181                           ;Test.c: 351: TMR3ON = 0;
 15182  00104A  90B1               	bcf	4017,0,c	;volatile
 15183                           
 15184                           ;Test.c: 352: (INTCONbits.GIE = 0);
 15185  00104C  9EF2               	bcf	intcon,7,c	;volatile
 15186                           
 15187                           ; BSR set to: 0
 15188                           ;Test.c: 357: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15189  00104E  0E01               	movlw	1
 15190  001050  EC63  F030         	call	_lcdInst
 15191  001054  0E68               	movlw	104
 15192  001056  0100               	movlb	0	; () banked
 15193  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 15194  00105A  0EE4               	movlw	228
 15195  00105C                     u12007:
 15196  00105C  2EE8               	decfsz	wreg,f,c
 15197  00105E  D7FE               	bra	u12007
 15198  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15199  001062  D7FC               	bra	u12007
 15200  001064  F000               	nop	
 15201  001066  0E80               	movlw	128
 15202  001068  EC63  F030         	call	_lcdInst
 15203                           
 15204                           ;Test.c: 358: printf("TST: CAM SERVO");
 15205  00106C  0EC5               	movlw	low STR_108
 15206  00106E  0100               	movlb	0	; () banked
 15207  001070  6F8E               	movwf	printf@f& (0+255),b
 15208  001072  0EFE               	movlw	high STR_108
 15209  001074  0100               	movlb	0	; () banked
 15210  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 15211  001078  ECE7  F00E         	call	_printf	;wreg free
 15212                           
 15213                           ;Test.c: 359: lcdInst(0b11000000);;
 15214  00107C  0EC0               	movlw	192
 15215  00107E  EC63  F030         	call	_lcdInst
 15216                           
 15217                           ;Test.c: 360: printf("CAM UP  |RC0=1");
 15218  001082  0EA7               	movlw	low STR_109
 15219  001084  0100               	movlb	0	; () banked
 15220  001086  6F8E               	movwf	printf@f& (0+255),b
 15221  001088  0EFE               	movlw	high STR_109
 15222  00108A  0100               	movlb	0	; () banked
 15223  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15224  00108E  ECE7  F00E         	call	_printf	;wreg free
 15225                           
 15226                           ;Test.c: 361: LATCbits.LATC0 = 1;
 15227  001092  808B               	bsf	3979,0,c	;volatile
 15228                           
 15229                           ;Test.c: 362: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15230  001094  0E00               	movlw	0
 15231  001096  0100               	movlb	0	; () banked
 15232  001098  6FC0               	movwf	actuatorTest@i_1792& (0+255),b
 15233  00109A                     l9106:
 15234                           
 15235                           ; BSR set to: 0
 15236  00109A  0E63               	movlw	99
 15237  00109C  0100               	movlb	0	; () banked
 15238  00109E  65C0               	cpfsgt	actuatorTest@i_1792& (0+255),b
 15239  0010A0  D001               	goto	l9110
 15240  0010A2  D00C               	goto	l9114
 15241  0010A4                     l9110:
 15242                           
 15243                           ; BSR set to: 0
 15244  0010A4  0E68               	movlw	104
 15245  0010A6  0100               	movlb	0	; () banked
 15246  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 15247  0010AA  0EE4               	movlw	228
 15248  0010AC                     u12017:
 15249  0010AC  2EE8               	decfsz	wreg,f,c
 15250  0010AE  D7FE               	bra	u12017
 15251  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15252  0010B2  D7FC               	bra	u12017
 15253  0010B4  F000               	nop	
 15254  0010B6  0100               	movlb	0	; () banked
 15255  0010B8  2BC0               	incf	actuatorTest@i_1792& (0+255),f,b
 15256  0010BA  D7EF               	goto	l9106
 15257  0010BC                     l9114:
 15258                           
 15259                           ; BSR set to: 0
 15260  0010BC  0E00               	movlw	0
 15261  0010BE  0100               	movlb	0	; () banked
 15262  0010C0  6FC1               	movwf	actuatorTest@i_1793& (0+255),b
 15263  0010C2                     l9116:
 15264                           
 15265                           ; BSR set to: 0
 15266  0010C2  0E63               	movlw	99
 15267  0010C4  0100               	movlb	0	; () banked
 15268  0010C6  65C1               	cpfsgt	actuatorTest@i_1793& (0+255),b
 15269  0010C8  D001               	goto	l9120
 15270  0010CA  D00C               	goto	l9124
 15271  0010CC                     l9120:
 15272                           
 15273                           ; BSR set to: 0
 15274  0010CC  0E68               	movlw	104
 15275  0010CE  0100               	movlb	0	; () banked
 15276  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 15277  0010D2  0EE4               	movlw	228
 15278  0010D4                     u12027:
 15279  0010D4  2EE8               	decfsz	wreg,f,c
 15280  0010D6  D7FE               	bra	u12027
 15281  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15282  0010DA  D7FC               	bra	u12027
 15283  0010DC  F000               	nop	
 15284  0010DE  0100               	movlb	0	; () banked
 15285  0010E0  2BC1               	incf	actuatorTest@i_1793& (0+255),f,b
 15286  0010E2  D7EF               	goto	l9116
 15287  0010E4                     l9124:
 15288                           
 15289                           ; BSR set to: 0
 15290                           ;Test.c: 363: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15291  0010E4  0E80               	movlw	128
 15292  0010E6  EC63  F030         	call	_lcdInst
 15293  0010EA  0EC0               	movlw	192
 15294  0010EC  EC63  F030         	call	_lcdInst
 15295                           
 15296                           ;Test.c: 364: printf("CAM DWN |RC0=0");
 15297  0010F0  0E98               	movlw	low STR_110
 15298  0010F2  0100               	movlb	0	; () banked
 15299  0010F4  6F8E               	movwf	printf@f& (0+255),b
 15300  0010F6  0EFE               	movlw	high STR_110
 15301  0010F8  0100               	movlb	0	; () banked
 15302  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15303  0010FC  ECE7  F00E         	call	_printf	;wreg free
 15304                           
 15305                           ;Test.c: 367: for(i=0;i<10000;i++)
 15306  001100  0E00               	movlw	0
 15307  001102  0100               	movlb	0	; () banked
 15308  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 15309  001106  0E00               	movlw	0
 15310  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 15311  00110A                     l9130:
 15312                           
 15313                           ; BSR set to: 0
 15314  00110A  0100               	movlb	0	; () banked
 15315  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 15316  00110E  D008               	goto	l1415
 15317  001110  0E10               	movlw	16
 15318  001112  0100               	movlb	0	; () banked
 15319  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 15320  001116  0E27               	movlw	39
 15321  001118  0100               	movlb	0	; () banked
 15322  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 15323  00111C  B0D8               	btfsc	status,0,c
 15324  00111E  D00D               	goto	l9140
 15325  001120                     l1415:
 15326                           
 15327                           ; BSR set to: 0
 15328                           ;Test.c: 368: {
 15329                           ;Test.c: 369: LATCbits.LATC0 = 1;
 15330  001120  808B               	bsf	3979,0,c	;volatile
 15331                           
 15332                           ; BSR set to: 0
 15333                           ;Test.c: 370: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15334  001122  0E1A               	movlw	26
 15335  001124                     u12037:
 15336  001124  2EE8               	decfsz	wreg,f,c
 15337  001126  D7FE               	bra	u12037
 15338  001128  D000               	nop2	
 15339                           
 15340                           ;Test.c: 371: LATCbits.LATC0 = 0;
 15341  00112A  908B               	bcf	3979,0,c	;volatile
 15342                           
 15343                           ;Test.c: 372: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15344  00112C  0EF0               	movlw	240
 15345  00112E                     u12047:
 15346  00112E  2EE8               	decfsz	wreg,f,c
 15347  001130  D7FE               	bra	u12047
 15348  001132  0100               	movlb	0	; () banked
 15349  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 15350  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 15351  001138  D7E8               	goto	l9130
 15352  00113A                     l9140:
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;Test.c: 373: }
 15356                           ;Test.c: 375: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15357  00113A  0E00               	movlw	0
 15358  00113C  0100               	movlb	0	; () banked
 15359  00113E  6FC2               	movwf	actuatorTest@i_1795& (0+255),b
 15360  001140                     l9142:
 15361                           
 15362                           ; BSR set to: 0
 15363  001140  0E63               	movlw	99
 15364  001142  0100               	movlb	0	; () banked
 15365  001144  65C2               	cpfsgt	actuatorTest@i_1795& (0+255),b
 15366  001146  D001               	goto	l9146
 15367  001148  D00C               	goto	l9150
 15368  00114A                     l9146:
 15369                           
 15370                           ; BSR set to: 0
 15371  00114A  0E68               	movlw	104
 15372  00114C  0100               	movlb	0	; () banked
 15373  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15374  001150  0EE4               	movlw	228
 15375  001152                     u12057:
 15376  001152  2EE8               	decfsz	wreg,f,c
 15377  001154  D7FE               	bra	u12057
 15378  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15379  001158  D7FC               	bra	u12057
 15380  00115A  F000               	nop	
 15381  00115C  0100               	movlb	0	; () banked
 15382  00115E  2BC2               	incf	actuatorTest@i_1795& (0+255),f,b
 15383  001160  D7EF               	goto	l9142
 15384  001162                     l9150:
 15385                           
 15386                           ; BSR set to: 0
 15387  001162  0E00               	movlw	0
 15388  001164  0100               	movlb	0	; () banked
 15389  001166  6FC3               	movwf	actuatorTest@i_1796& (0+255),b
 15390  001168                     l9152:
 15391                           
 15392                           ; BSR set to: 0
 15393  001168  0E63               	movlw	99
 15394  00116A  0100               	movlb	0	; () banked
 15395  00116C  65C3               	cpfsgt	actuatorTest@i_1796& (0+255),b
 15396  00116E  D001               	goto	l9156
 15397  001170  D00C               	goto	l9160
 15398  001172                     l9156:
 15399                           
 15400                           ; BSR set to: 0
 15401  001172  0E68               	movlw	104
 15402  001174  0100               	movlb	0	; () banked
 15403  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 15404  001178  0EE4               	movlw	228
 15405  00117A                     u12067:
 15406  00117A  2EE8               	decfsz	wreg,f,c
 15407  00117C  D7FE               	bra	u12067
 15408  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15409  001180  D7FC               	bra	u12067
 15410  001182  F000               	nop	
 15411  001184  0100               	movlb	0	; () banked
 15412  001186  2BC3               	incf	actuatorTest@i_1796& (0+255),f,b
 15413  001188  D7EF               	goto	l9152
 15414  00118A                     l9160:
 15415                           
 15416                           ; BSR set to: 0
 15417                           ;Test.c: 376: machine_state = Testing_state;
 15418  00118A  0E03               	movlw	3
 15419  00118C  0100               	movlb	0	; () banked
 15420  00118E  6FFC               	movwf	_machine_state& (0+255),b
 15421                           
 15422                           ; BSR set to: 0
 15423  001190  0012               	return		;funcret
 15424  001192                     __end_of_actuatorTest:
 15425                           	opt stack 0
 15426                           tblptru	equ	0xFF8
 15427                           tblptrh	equ	0xFF7
 15428                           tblptrl	equ	0xFF6
 15429                           tablat	equ	0xFF5
 15430                           prodh	equ	0xFF4
 15431                           prodl	equ	0xFF3
 15432                           intcon	equ	0xFF2
 15433                           intcon2	equ	0xFF1
 15434                           intcon3	equ	0xFF0
 15435                           postinc0	equ	0xFEE
 15436                           wreg	equ	0xFE8
 15437                           postdec1	equ	0xFE5
 15438                           fsr1l	equ	0xFE1
 15439                           indf2	equ	0xFDF
 15440                           postinc2	equ	0xFDE
 15441                           postdec2	equ	0xFDD
 15442                           fsr2h	equ	0xFDA
 15443                           fsr2l	equ	0xFD9
 15444                           status	equ	0xFD8
 15445                           
 15446 ;; *************** function _SpeedTest *****************
 15447 ;; Defined at:
 15448 ;;		line 565 in file "Test.c"
 15449 ;; Parameters:    Size  Location     Type
 15450 ;;		None
 15451 ;; Auto vars:     Size  Location     Type
 15452 ;;		None
 15453 ;; Return value:  Size  Location     Type
 15454 ;;                  1    wreg      void 
 15455 ;; Registers used:
 15456 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15457 ;; Tracked objects:
 15458 ;;		On entry : 0/0
 15459 ;;		On exit  : 0/0
 15460 ;;		Unchanged: 0/0
 15461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15464 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15465 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15466 ;;Total ram usage:        1 bytes
 15467 ;; Hardware stack levels used:    1
 15468 ;; Hardware stack levels required when called:   10
 15469 ;; This function calls:
 15470 ;;		_lcdInst
 15471 ;;		_printf
 15472 ;; This function is called by:
 15473 ;;		_Test
 15474 ;; This function uses a non-reentrant model
 15475 ;;
 15476                           
 15477                           	psect	text46
 15478  005344                     __ptext46:
 15479                           	opt stack 0
 15480  005344                     _SpeedTest:
 15481                           	opt stack 19
 15482                           
 15483                           ;Test.c: 567: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;incstack = 0
 15487  005344  0E01               	movlw	1
 15488  005346  EC63  F030         	call	_lcdInst
 15489  00534A  0E68               	movlw	104
 15490  00534C  0100               	movlb	0	; () banked
 15491  00534E  6FAB               	movwf	??_SpeedTest& (0+255),b
 15492  005350  0EE4               	movlw	228
 15493  005352                     u12077:
 15494  005352  2EE8               	decfsz	wreg,f,c
 15495  005354  D7FE               	bra	u12077
 15496  005356  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15497  005358  D7FC               	bra	u12077
 15498  00535A  F000               	nop	
 15499  00535C  0E80               	movlw	128
 15500  00535E  EC63  F030         	call	_lcdInst
 15501                           
 15502                           ;Test.c: 568: printf("S: D WILL RETURN ");
 15503  005362  0E37               	movlw	low STR_119
 15504  005364  0100               	movlb	0	; () banked
 15505  005366  6F8E               	movwf	printf@f& (0+255),b
 15506  005368  0EFB               	movlw	high STR_119
 15507  00536A  0100               	movlb	0	; () banked
 15508  00536C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15509  00536E  ECE7  F00E         	call	_printf	;wreg free
 15510                           
 15511                           ;Test.c: 569: lcdInst(0b11000000);;
 15512  005372  0EC0               	movlw	192
 15513  005374  EC63  F030         	call	_lcdInst
 15514                           
 15515                           ;Test.c: 570: printf("OTHER SETS RA5   ");
 15516  005378  0E01               	movlw	low STR_120
 15517  00537A  0100               	movlb	0	; () banked
 15518  00537C  6F8E               	movwf	printf@f& (0+255),b
 15519  00537E  0EFB               	movlw	high STR_120
 15520  005380  0100               	movlb	0	; () banked
 15521  005382  6F8F               	movwf	(printf@f+1)& (0+255),b
 15522  005384  ECE7  F00E         	call	_printf	;wreg free
 15523  005388                     l1485:
 15524  005388  A281               	btfss	3969,1,c	;volatile
 15525  00538A  D7FE               	goto	l1485
 15526                           
 15527                           ;Test.c: 575: }
 15528                           ;Test.c: 576: if(PORTB >> 4 == 0b1111){
 15529  00538C  3881               	swapf	3969,w,c	;volatile
 15530  00538E  0B0F               	andlw	15
 15531  005390  0A0F               	xorlw	15
 15532  005392  B4D8               	btfsc	status,2,c
 15533  005394  0012               	return	
 15534  005396  D014               	goto	l9272
 15535  005398                     l1492:
 15536                           
 15537                           ;Test.c: 581: LATBbits.LATB2 = 1;
 15538  005398  848A               	bsf	3978,2,c	;volatile
 15539                           
 15540                           ;Test.c: 582: _delay((unsigned long)((5)*(32000000/4000.0)));
 15541  00539A  0E34               	movlw	52
 15542  00539C  0100               	movlb	0	; () banked
 15543  00539E  6FAB               	movwf	??_SpeedTest& (0+255),b
 15544  0053A0  0EF1               	movlw	241
 15545  0053A2                     u12087:
 15546  0053A2  2EE8               	decfsz	wreg,f,c
 15547  0053A4  D7FE               	bra	u12087
 15548  0053A6  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15549  0053A8  D7FC               	bra	u12087
 15550  0053AA  D000               	nop2	
 15551                           
 15552                           ;Test.c: 583: LATBbits.LATB2 = 0;
 15553  0053AC  948A               	bcf	3978,2,c	;volatile
 15554                           
 15555                           ;Test.c: 584: _delay((unsigned long)((5)*(32000000/4000.0)));
 15556  0053AE  0E34               	movlw	52
 15557  0053B0  0100               	movlb	0	; () banked
 15558  0053B2  6FAB               	movwf	??_SpeedTest& (0+255),b
 15559  0053B4  0EF1               	movlw	241
 15560  0053B6                     u12097:
 15561  0053B6  2EE8               	decfsz	wreg,f,c
 15562  0053B8  D7FE               	bra	u12097
 15563  0053BA  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15564  0053BC  D7FC               	bra	u12097
 15565  0053BE  D000               	nop2	
 15566  0053C0                     l9272:
 15567  0053C0  B281               	btfsc	3969,1,c	;volatile
 15568  0053C2  D7EA               	goto	l1492
 15569                           
 15570                           ;Test.c: 587: }
 15571                           ;Test.c: 588: LATBbits.LATB2 = 0;
 15572  0053C4  948A               	bcf	3978,2,c	;volatile
 15573  0053C6  D7E0               	goto	l1485
 15574  0053C8                     __end_of_SpeedTest:
 15575                           	opt stack 0
 15576                           tblptru	equ	0xFF8
 15577                           tblptrh	equ	0xFF7
 15578                           tblptrl	equ	0xFF6
 15579                           tablat	equ	0xFF5
 15580                           prodh	equ	0xFF4
 15581                           prodl	equ	0xFF3
 15582                           intcon	equ	0xFF2
 15583                           intcon2	equ	0xFF1
 15584                           intcon3	equ	0xFF0
 15585                           postinc0	equ	0xFEE
 15586                           wreg	equ	0xFE8
 15587                           postdec1	equ	0xFE5
 15588                           fsr1l	equ	0xFE1
 15589                           indf2	equ	0xFDF
 15590                           postinc2	equ	0xFDE
 15591                           postdec2	equ	0xFDD
 15592                           fsr2h	equ	0xFDA
 15593                           fsr2l	equ	0xFD9
 15594                           status	equ	0xFD8
 15595                           
 15596 ;; *************** function _PortTestPusher *****************
 15597 ;; Defined at:
 15598 ;;		line 706 in file "Test.c"
 15599 ;; Parameters:    Size  Location     Type
 15600 ;;		None
 15601 ;; Auto vars:     Size  Location     Type
 15602 ;;		None
 15603 ;; Return value:  Size  Location     Type
 15604 ;;                  1    wreg      void 
 15605 ;; Registers used:
 15606 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15607 ;; Tracked objects:
 15608 ;;		On entry : 0/0
 15609 ;;		On exit  : 0/0
 15610 ;;		Unchanged: 0/0
 15611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15615 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15616 ;;Total ram usage:        1 bytes
 15617 ;; Hardware stack levels used:    1
 15618 ;; Hardware stack levels required when called:   10
 15619 ;; This function calls:
 15620 ;;		_lcdInst
 15621 ;;		_printf
 15622 ;; This function is called by:
 15623 ;;		_Test
 15624 ;; This function uses a non-reentrant model
 15625 ;;
 15626                           
 15627                           	psect	text47
 15628  00581E                     __ptext47:
 15629                           	opt stack 0
 15630  00581E                     _PortTestPusher:
 15631                           	opt stack 19
 15632                           
 15633                           ;Test.c: 707: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15634                           
 15635                           ;incstack = 0
 15636  00581E  0E01               	movlw	1
 15637  005820  EC63  F030         	call	_lcdInst
 15638  005824  0E68               	movlw	104
 15639  005826  0100               	movlb	0	; () banked
 15640  005828  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15641  00582A  0EE4               	movlw	228
 15642  00582C                     u12107:
 15643  00582C  2EE8               	decfsz	wreg,f,c
 15644  00582E  D7FE               	bra	u12107
 15645  005830  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15646  005832  D7FC               	bra	u12107
 15647  005834  F000               	nop	
 15648  005836  0E80               	movlw	128
 15649  005838  EC63  F030         	call	_lcdInst
 15650                           
 15651                           ;Test.c: 708: printf("D WILL RETURN    ");
 15652  00583C  0EEF               	movlw	low STR_112
 15653  00583E  0100               	movlb	0	; () banked
 15654  005840  6F8E               	movwf	printf@f& (0+255),b
 15655  005842  0EFA               	movlw	high STR_112
 15656  005844  0100               	movlb	0	; () banked
 15657  005846  6F8F               	movwf	(printf@f+1)& (0+255),b
 15658  005848  ECE7  F00E         	call	_printf	;wreg free
 15659                           
 15660                           ;Test.c: 709: lcdInst(0b11000000);;
 15661  00584C  0EC0               	movlw	192
 15662  00584E  EC63  F030         	call	_lcdInst
 15663                           
 15664                           ;Test.c: 710: printf("OTHER SETS PUSHER");
 15665  005852  0E5B               	movlw	low STR_128
 15666  005854  0100               	movlb	0	; () banked
 15667  005856  6F8E               	movwf	printf@f& (0+255),b
 15668  005858  0EFB               	movlw	high STR_128
 15669  00585A  0100               	movlb	0	; () banked
 15670  00585C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15671  00585E  ECE7  F00E         	call	_printf	;wreg free
 15672  005862                     l1546:
 15673  005862  A281               	btfss	3969,1,c	;volatile
 15674  005864  D7FE               	goto	l1546
 15675                           
 15676                           ;Test.c: 715: }
 15677                           ;Test.c: 716: if(PORTB >> 4 == 0b1111){
 15678  005866  3881               	swapf	3969,w,c	;volatile
 15679  005868  0B0F               	andlw	15
 15680  00586A  0A0F               	xorlw	15
 15681  00586C  B4D8               	btfsc	status,2,c
 15682  00586E  0012               	return	
 15683                           
 15684                           ;Test.c: 719: else{
 15685                           ;Test.c: 720: LATAbits.LATA4 = 1;
 15686                           
 15687                           ;Test.c: 718: }
 15688                           
 15689                           ;Test.c: 717: break;
 15690  005870  8889               	bsf	3977,4,c	;volatile
 15691  005872                     l1552:
 15692  005872  B281               	btfsc	3969,1,c	;volatile
 15693  005874  D7FE               	goto	l1552
 15694                           
 15695                           ;Test.c: 723: }
 15696                           ;Test.c: 724: LATAbits.LATA4 = 0;
 15697  005876  9889               	bcf	3977,4,c	;volatile
 15698  005878  D7F4               	goto	l1546
 15699  00587A                     __end_of_PortTestPusher:
 15700                           	opt stack 0
 15701                           tblptru	equ	0xFF8
 15702                           tblptrh	equ	0xFF7
 15703                           tblptrl	equ	0xFF6
 15704                           tablat	equ	0xFF5
 15705                           prodh	equ	0xFF4
 15706                           prodl	equ	0xFF3
 15707                           intcon	equ	0xFF2
 15708                           intcon2	equ	0xFF1
 15709                           intcon3	equ	0xFF0
 15710                           postinc0	equ	0xFEE
 15711                           wreg	equ	0xFE8
 15712                           postdec1	equ	0xFE5
 15713                           fsr1l	equ	0xFE1
 15714                           indf2	equ	0xFDF
 15715                           postinc2	equ	0xFDE
 15716                           postdec2	equ	0xFDD
 15717                           fsr2h	equ	0xFDA
 15718                           fsr2l	equ	0xFD9
 15719                           status	equ	0xFD8
 15720                           
 15721 ;; *************** function _PortTestDC *****************
 15722 ;; Defined at:
 15723 ;;		line 439 in file "Test.c"
 15724 ;; Parameters:    Size  Location     Type
 15725 ;;		None
 15726 ;; Auto vars:     Size  Location     Type
 15727 ;;		None
 15728 ;; Return value:  Size  Location     Type
 15729 ;;                  1    wreg      void 
 15730 ;; Registers used:
 15731 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15732 ;; Tracked objects:
 15733 ;;		On entry : 0/0
 15734 ;;		On exit  : 0/0
 15735 ;;		Unchanged: 0/0
 15736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15740 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15741 ;;Total ram usage:        1 bytes
 15742 ;; Hardware stack levels used:    1
 15743 ;; Hardware stack levels required when called:   10
 15744 ;; This function calls:
 15745 ;;		_lcdInst
 15746 ;;		_printf
 15747 ;; This function is called by:
 15748 ;;		_Test
 15749 ;; This function uses a non-reentrant model
 15750 ;;
 15751                           
 15752                           	psect	text48
 15753  004B14                     __ptext48:
 15754                           	opt stack 0
 15755  004B14                     _PortTestDC:
 15756                           	opt stack 19
 15757                           
 15758                           ;Test.c: 440: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15759                           
 15760                           ;incstack = 0
 15761  004B14  0E01               	movlw	1
 15762  004B16  EC63  F030         	call	_lcdInst
 15763  004B1A  0E68               	movlw	104
 15764  004B1C  0100               	movlb	0	; () banked
 15765  004B1E  6FAB               	movwf	??_PortTestDC& (0+255),b
 15766  004B20  0EE4               	movlw	228
 15767  004B22                     u12117:
 15768  004B22  2EE8               	decfsz	wreg,f,c
 15769  004B24  D7FE               	bra	u12117
 15770  004B26  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15771  004B28  D7FC               	bra	u12117
 15772  004B2A  F000               	nop	
 15773  004B2C  0E80               	movlw	128
 15774  004B2E  EC63  F030         	call	_lcdInst
 15775                           
 15776                           ;Test.c: 441: printf("D WILL RETURN    ");
 15777  004B32  0EEF               	movlw	low STR_112
 15778  004B34  0100               	movlb	0	; () banked
 15779  004B36  6F8E               	movwf	printf@f& (0+255),b
 15780  004B38  0EFA               	movlw	high STR_112
 15781  004B3A  0100               	movlb	0	; () banked
 15782  004B3C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15783  004B3E  ECE7  F00E         	call	_printf	;wreg free
 15784                           
 15785                           ;Test.c: 442: lcdInst(0b11000000);;
 15786  004B42  0EC0               	movlw	192
 15787  004B44  EC63  F030         	call	_lcdInst
 15788                           
 15789                           ;Test.c: 443: printf("OTHER SETS DC   ");
 15790  004B48  0EF7               	movlw	low STR_113
 15791  004B4A  0100               	movlb	0	; () banked
 15792  004B4C  6F8E               	movwf	printf@f& (0+255),b
 15793  004B4E  0EFB               	movlw	high STR_113
 15794  004B50  0100               	movlb	0	; () banked
 15795  004B52  6F8F               	movwf	(printf@f+1)& (0+255),b
 15796  004B54  ECE7  F00E         	call	_printf	;wreg free
 15797  004B58                     l1428:
 15798  004B58  A281               	btfss	3969,1,c	;volatile
 15799  004B5A  D7FE               	goto	l1428
 15800                           
 15801                           ;Test.c: 448: }
 15802                           ;Test.c: 449: if(PORTB >> 4 == 0b1111){
 15803  004B5C  3881               	swapf	3969,w,c	;volatile
 15804  004B5E  0B0F               	andlw	15
 15805  004B60  0A0F               	xorlw	15
 15806  004B62  B4D8               	btfsc	status,2,c
 15807  004B64  0012               	return	
 15808                           
 15809                           ;Test.c: 452: else if(PORTB >> 4 == 0b0000){
 15810                           
 15811                           ;Test.c: 451: }
 15812                           
 15813                           ;Test.c: 450: break;
 15814  004B66  CF81 F0AB          	movff	3969,??_PortTestDC	;volatile
 15815  004B6A  0100               	movlb	0	; () banked
 15816  004B6C  3BAB               	swapf	??_PortTestDC& (0+255),f,b
 15817  004B6E  0E0F               	movlw	15
 15818  004B70  17AB               	andwf	??_PortTestDC& (0+255),f,b
 15819  004B72  A4D8               	btfss	status,2,c
 15820  004B74  D010               	goto	l9238
 15821                           
 15822                           ; BSR set to: 0
 15823                           ;Test.c: 454: LATBbits.LATB2 = !LATBbits.LATB2;
 15824  004B76  B48A               	btfsc	3978,2,c	;volatile
 15825  004B78  D004               	goto	u8740
 15826  004B7A  0100               	movlb	0	; () banked
 15827  004B7C  6BAB               	clrf	??_PortTestDC& (0+255),b
 15828  004B7E  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15829  004B80  D002               	goto	u8758
 15830  004B82                     u8740:
 15831  004B82  0100               	movlb	0	; () banked
 15832  004B84  6BAB               	clrf	??_PortTestDC& (0+255),b
 15833  004B86                     u8758:
 15834  004B86  0100               	movlb	0	; () banked
 15835  004B88  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15836  004B8A  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15837  004B8C  508A               	movf	3978,w,c	;volatile
 15838  004B8E  0100               	movlb	0	; () banked
 15839  004B90  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15840  004B92  0BFB               	andlw	-5
 15841  004B94  D011               	goto	L14
 15842  004B96                     l9238:
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;Test.c: 456: else if(PORTB >> 4 == 0b0001){
 15846  004B96  3881               	swapf	3969,w,c	;volatile
 15847  004B98  0B0F               	andlw	15
 15848  004B9A  06E8               	decf	wreg,f,c
 15849  004B9C  A4D8               	btfss	status,2,c
 15850  004B9E  D00F               	goto	l9242
 15851                           
 15852                           ; BSR set to: 0
 15853                           ;Test.c: 458: LATBbits.LATB0 = !LATBbits.LATB0;
 15854  004BA0  B08A               	btfsc	3978,0,c	;volatile
 15855  004BA2  D004               	goto	u8770
 15856  004BA4  0100               	movlb	0	; () banked
 15857  004BA6  6BAB               	clrf	??_PortTestDC& (0+255),b
 15858  004BA8  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15859  004BAA  D002               	goto	u8788
 15860  004BAC                     u8770:
 15861  004BAC  0100               	movlb	0	; () banked
 15862  004BAE  6BAB               	clrf	??_PortTestDC& (0+255),b
 15863  004BB0                     u8788:
 15864  004BB0  508A               	movf	3978,w,c	;volatile
 15865  004BB2  0100               	movlb	0	; () banked
 15866  004BB4  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15867  004BB6  0BFE               	andlw	-2
 15868  004BB8                     L14:
 15869  004BB8  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15870  004BBA  6E8A               	movwf	3978,c	;volatile
 15871                           
 15872                           ;Test.c: 459: }
 15873  004BBC  D013               	goto	l1447
 15874  004BBE                     l9242:
 15875                           
 15876                           ; BSR set to: 0
 15877                           ;Test.c: 460: else if(PORTB >> 4 == 0b0100){
 15878  004BBE  3881               	swapf	3969,w,c	;volatile
 15879  004BC0  0B0F               	andlw	15
 15880  004BC2  0A04               	xorlw	4
 15881  004BC4  A4D8               	btfss	status,2,c
 15882  004BC6  D005               	goto	l9246
 15883                           
 15884                           ; BSR set to: 0
 15885                           ;Test.c: 461: LATBbits.LATB2 = 1;
 15886  004BC8  848A               	bsf	3978,2,c	;volatile
 15887  004BCA                     l1439:
 15888  004BCA  B281               	btfsc	3969,1,c	;volatile
 15889  004BCC  D7FE               	goto	l1439
 15890                           
 15891                           ;Test.c: 463: LATBbits.LATB2 = 0;
 15892  004BCE  948A               	bcf	3978,2,c	;volatile
 15893                           
 15894                           ;Test.c: 464: }
 15895  004BD0  D009               	goto	l1447
 15896  004BD2                     l9246:
 15897                           
 15898                           ;Test.c: 465: else if(PORTB >> 4 == 0b0101){
 15899  004BD2  3881               	swapf	3969,w,c	;volatile
 15900  004BD4  0B0F               	andlw	15
 15901  004BD6  0A05               	xorlw	5
 15902  004BD8  A4D8               	btfss	status,2,c
 15903  004BDA  D004               	goto	l1447
 15904                           
 15905                           ;Test.c: 466: LATBbits.LATB0 = 1;
 15906  004BDC  808A               	bsf	3978,0,c	;volatile
 15907  004BDE                     l1444:
 15908  004BDE  B281               	btfsc	3969,1,c	;volatile
 15909  004BE0  D7FE               	goto	l1444
 15910                           
 15911                           ;Test.c: 468: LATBbits.LATB0 = 0;
 15912  004BE2  908A               	bcf	3978,0,c	;volatile
 15913  004BE4                     l1447:
 15914  004BE4  A281               	btfss	3969,1,c	;volatile
 15915  004BE6  D7B8               	goto	l1428
 15916  004BE8  D7FD               	goto	l1447
 15917  004BEA                     __end_of_PortTestDC:
 15918                           	opt stack 0
 15919                           tblptru	equ	0xFF8
 15920                           tblptrh	equ	0xFF7
 15921                           tblptrl	equ	0xFF6
 15922                           tablat	equ	0xFF5
 15923                           prodh	equ	0xFF4
 15924                           prodl	equ	0xFF3
 15925                           intcon	equ	0xFF2
 15926                           intcon2	equ	0xFF1
 15927                           intcon3	equ	0xFF0
 15928                           postinc0	equ	0xFEE
 15929                           wreg	equ	0xFE8
 15930                           postdec1	equ	0xFE5
 15931                           fsr1l	equ	0xFE1
 15932                           indf2	equ	0xFDF
 15933                           postinc2	equ	0xFDE
 15934                           postdec2	equ	0xFDD
 15935                           fsr2h	equ	0xFDA
 15936                           fsr2l	equ	0xFD9
 15937                           status	equ	0xFD8
 15938                           
 15939 ;; *************** function _PlatformTest *****************
 15940 ;; Defined at:
 15941 ;;		line 474 in file "Test.c"
 15942 ;; Parameters:    Size  Location     Type
 15943 ;;		None
 15944 ;; Auto vars:     Size  Location     Type
 15945 ;;  i               2   51[BANK0 ] int 
 15946 ;;  i               2   49[BANK0 ] int 
 15947 ;;  res             2   47[BANK0 ] int 
 15948 ;;  res             2   45[BANK0 ] int 
 15949 ;;  on              2   53[BANK0 ] int 
 15950 ;; Return value:  Size  Location     Type
 15951 ;;                  1    wreg      void 
 15952 ;; Registers used:
 15953 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15954 ;; Tracked objects:
 15955 ;;		On entry : 0/0
 15956 ;;		On exit  : 0/0
 15957 ;;		Unchanged: 0/0
 15958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15960 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15962 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15963 ;;Total ram usage:       12 bytes
 15964 ;; Hardware stack levels used:    1
 15965 ;; Hardware stack levels required when called:   10
 15966 ;; This function calls:
 15967 ;;		_lcdInst
 15968 ;;		_printf
 15969 ;;		_readADC
 15970 ;;		_stopSignals
 15971 ;; This function is called by:
 15972 ;;		_Test
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           	psect	text49
 15977  0030D2                     __ptext49:
 15978                           	opt stack 0
 15979  0030D2                     _PlatformTest:
 15980                           	opt stack 19
 15981                           
 15982                           ;Test.c: 475: LATCbits.LATC5 = 1;
 15983                           
 15984                           ;incstack = 0
 15985  0030D2  8A8B               	bsf	3979,5,c	;volatile
 15986                           
 15987                           ;Test.c: 477: (INTCONbits.GIE = 1);
 15988  0030D4  8EF2               	bsf	intcon,7,c	;volatile
 15989                           
 15990                           ;Test.c: 478: machine_state = Sorting_state;
 15991  0030D6  0E01               	movlw	1
 15992  0030D8  0100               	movlb	0	; () banked
 15993  0030DA  6FFC               	movwf	_machine_state& (0+255),b
 15994                           
 15995                           ;Test.c: 479: f_arm_position = 0;
 15996  0030DC  0E00               	movlw	0
 15997  0030DE  0100               	movlb	0	; () banked
 15998  0030E0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15999  0030E2  0E00               	movlw	0
 16000  0030E4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 16001                           
 16002                           ;Test.c: 480: timer2_counter = 0;
 16003  0030E6  0E00               	movlw	0
 16004  0030E8  6E74               	movwf	_timer2_counter+1,c	;volatile
 16005  0030EA  0E00               	movlw	0
 16006  0030EC  6E73               	movwf	_timer2_counter,c	;volatile
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;Test.c: 481: LATBbits.LATB3 = 0;
 16010  0030EE  968A               	bcf	3978,3,c	;volatile
 16011                           
 16012                           ; BSR set to: 0
 16013                           ;Test.c: 482: TMR2IE = 1;
 16014  0030F0  829D               	bsf	3997,1,c	;volatile
 16015                           
 16016                           ; BSR set to: 0
 16017                           ;Test.c: 483: TMR2ON = 1;
 16018  0030F2  84CA               	bsf	4042,2,c	;volatile
 16019                           
 16020                           ;Test.c: 484: was_low_2 = 0;
 16021  0030F4  0E00               	movlw	0
 16022  0030F6  6E7A               	movwf	_was_low_2+1,c	;volatile
 16023  0030F8  0E00               	movlw	0
 16024  0030FA  6E79               	movwf	_was_low_2,c	;volatile
 16025                           
 16026                           ;Test.c: 486: int on = 1;
 16027  0030FC  0E00               	movlw	0
 16028  0030FE  0100               	movlb	0	; () banked
 16029  003100  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 16030  003102  0E01               	movlw	1
 16031  003104  6FB5               	movwf	PlatformTest@on& (0+255),b
 16032                           
 16033                           ; BSR set to: 0
 16034                           ;Test.c: 487: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16035  003106  0E01               	movlw	1
 16036  003108  EC63  F030         	call	_lcdInst
 16037  00310C  0E68               	movlw	104
 16038  00310E  0100               	movlb	0	; () banked
 16039  003110  6FAB               	movwf	??_PlatformTest& (0+255),b
 16040  003112  0EE4               	movlw	228
 16041  003114                     u12127:
 16042  003114  2EE8               	decfsz	wreg,f,c
 16043  003116  D7FE               	bra	u12127
 16044  003118  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16045  00311A  D7FC               	bra	u12127
 16046  00311C  F000               	nop	
 16047  00311E  0E80               	movlw	128
 16048  003120  EC63  F030         	call	_lcdInst
 16049                           
 16050                           ;Test.c: 488: printf("1: DC | A: ARM  ");
 16051  003124  0E2A               	movlw	low STR_114
 16052  003126  0100               	movlb	0	; () banked
 16053  003128  6F8E               	movwf	printf@f& (0+255),b
 16054  00312A  0EFC               	movlw	high STR_114
 16055  00312C  0100               	movlb	0	; () banked
 16056  00312E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16057  003130  ECE7  F00E         	call	_printf	;wreg free
 16058                           
 16059                           ;Test.c: 490: while(PORTBbits.RB1 == 0){
 16060  003134  D058               	goto	l9328
 16061  003136                     l9310:
 16062                           
 16063                           ;Test.c: 491: readADC(0);
 16064  003136  0E00               	movlw	0
 16065  003138  EC5C  F02F         	call	_readADC
 16066                           
 16067                           ;Test.c: 492: int res = ADRESH<<8 | ADRESL;
 16068  00313C  50C3               	movf	4035,w,c	;volatile
 16069  00313E  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 16070  003142  0100               	movlb	0	; () banked
 16071  003144  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 16072  003146  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 16073  00314A  0100               	movlb	0	; () banked
 16074  00314C  6BAB               	clrf	??_PlatformTest& (0+255),b
 16075  00314E  0100               	movlb	0	; () banked
 16076  003150  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 16077  003152  0100               	movlb	0	; () banked
 16078  003154  6FAD               	movwf	PlatformTest@res& (0+255),b
 16079  003156  0100               	movlb	0	; () banked
 16080  003158  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 16081  00315A  0100               	movlb	0	; () banked
 16082  00315C  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 16083                           
 16084                           ; BSR set to: 0
 16085                           ;Test.c: 493: IR_signal = (res > 700) ? 1 : 0;
 16086  00315E  0100               	movlb	0	; () banked
 16087  003160  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 16088  003162  D00A               	goto	u8900
 16089  003164  0EBD               	movlw	189
 16090  003166  0100               	movlb	0	; () banked
 16091  003168  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 16092  00316A  0E02               	movlw	2
 16093  00316C  0100               	movlb	0	; () banked
 16094  00316E  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 16095  003170  A0D8               	btfss	status,0,c
 16096  003172  D002               	goto	u8900
 16097  003174  0E01               	movlw	1
 16098  003176  D001               	goto	u8910
 16099  003178                     u8900:
 16100  003178  0E00               	movlw	0
 16101  00317A                     u8910:
 16102  00317A  0100               	movlb	0	; () banked
 16103  00317C  6FE2               	movwf	_IR_signal& (0+255),b
 16104  00317E  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 16105                           
 16106                           ;Test.c: 495: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16107  003180  0E01               	movlw	1
 16108  003182  EC63  F030         	call	_lcdInst
 16109  003186  0E68               	movlw	104
 16110  003188  0100               	movlb	0	; () banked
 16111  00318A  6FAB               	movwf	??_PlatformTest& (0+255),b
 16112  00318C  0EE4               	movlw	228
 16113  00318E                     u12137:
 16114  00318E  2EE8               	decfsz	wreg,f,c
 16115  003190  D7FE               	bra	u12137
 16116  003192  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16117  003194  D7FC               	bra	u12137
 16118  003196  F000               	nop	
 16119  003198  0E80               	movlw	128
 16120  00319A  EC63  F030         	call	_lcdInst
 16121                           
 16122                           ;Test.c: 496: printf("1: DC | A: ARM  ");
 16123  00319E  0E2A               	movlw	low STR_114
 16124  0031A0  0100               	movlb	0	; () banked
 16125  0031A2  6F8E               	movwf	printf@f& (0+255),b
 16126  0031A4  0EFC               	movlw	high STR_114
 16127  0031A6  0100               	movlb	0	; () banked
 16128  0031A8  6F8F               	movwf	(printf@f+1)& (0+255),b
 16129  0031AA  ECE7  F00E         	call	_printf	;wreg free
 16130                           
 16131                           ;Test.c: 497: lcdInst(0b11000000);;
 16132  0031AE  0EC0               	movlw	192
 16133  0031B0  EC63  F030         	call	_lcdInst
 16134                           
 16135                           ;Test.c: 498: printf("5:H|6:L|IR:%d   ", res);
 16136  0031B4  0E19               	movlw	low STR_116
 16137  0031B6  0100               	movlb	0	; () banked
 16138  0031B8  6F8E               	movwf	printf@f& (0+255),b
 16139  0031BA  0EFC               	movlw	high STR_116
 16140  0031BC  0100               	movlb	0	; () banked
 16141  0031BE  6F8F               	movwf	(printf@f+1)& (0+255),b
 16142  0031C0  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 16143  0031C4  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 16144  0031C8  ECE7  F00E         	call	_printf	;wreg free
 16145                           
 16146                           ;Test.c: 499: _delay((unsigned long)((100)*(32000000/4000.0)));
 16147  0031CC  0E05               	movlw	5
 16148  0031CE  0100               	movlb	0	; () banked
 16149  0031D0  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16150  0031D2  0E0F               	movlw	15
 16151  0031D4  0100               	movlb	0	; () banked
 16152  0031D6  6FAB               	movwf	??_PlatformTest& (0+255),b
 16153  0031D8  0EF1               	movlw	241
 16154  0031DA                     u12147:
 16155  0031DA  2EE8               	decfsz	wreg,f,c
 16156  0031DC  D7FE               	bra	u12147
 16157  0031DE  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16158  0031E0  D7FC               	bra	u12147
 16159  0031E2  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16160  0031E4  D7FA               	bra	u12147
 16161  0031E6                     l9328:
 16162  0031E6  B281               	btfsc	3969,1,c	;volatile
 16163  0031E8  D059               	goto	l9348
 16164  0031EA  D7A5               	goto	l9310
 16165  0031EC                     l9330:
 16166                           
 16167                           ;Test.c: 504: readADC(0);
 16168  0031EC  0E00               	movlw	0
 16169  0031EE  EC5C  F02F         	call	_readADC
 16170                           
 16171                           ;Test.c: 505: int res = ADRESH<<8 | ADRESL;
 16172  0031F2  50C3               	movf	4035,w,c	;volatile
 16173  0031F4  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 16174  0031F8  0100               	movlb	0	; () banked
 16175  0031FA  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 16176  0031FC  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 16177  003200  0100               	movlb	0	; () banked
 16178  003202  6BAB               	clrf	??_PlatformTest& (0+255),b
 16179  003204  0100               	movlb	0	; () banked
 16180  003206  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 16181  003208  0100               	movlb	0	; () banked
 16182  00320A  6FAF               	movwf	PlatformTest@res_1808& (0+255),b
 16183  00320C  0100               	movlb	0	; () banked
 16184  00320E  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 16185  003210  0100               	movlb	0	; () banked
 16186  003212  6FB0               	movwf	(PlatformTest@res_1808+1)& (0+255),b
 16187                           
 16188                           ; BSR set to: 0
 16189                           ;Test.c: 506: IR_signal = (res > 700) ? 1 : 0;
 16190  003214  0100               	movlb	0	; () banked
 16191  003216  BFB0               	btfsc	(PlatformTest@res_1808+1)& (0+255),7,b
 16192  003218  D00A               	goto	u8930
 16193  00321A  0EBD               	movlw	189
 16194  00321C  0100               	movlb	0	; () banked
 16195  00321E  5DAF               	subwf	PlatformTest@res_1808& (0+255),w,b
 16196  003220  0E02               	movlw	2
 16197  003222  0100               	movlb	0	; () banked
 16198  003224  59B0               	subwfb	(PlatformTest@res_1808+1)& (0+255),w,b
 16199  003226  A0D8               	btfss	status,0,c
 16200  003228  D002               	goto	u8930
 16201  00322A  0E01               	movlw	1
 16202  00322C  D001               	goto	u8940
 16203  00322E                     u8930:
 16204  00322E  0E00               	movlw	0
 16205  003230                     u8940:
 16206  003230  0100               	movlb	0	; () banked
 16207  003232  6FE2               	movwf	_IR_signal& (0+255),b
 16208  003234  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 16209                           
 16210                           ;Test.c: 508: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16211  003236  0E01               	movlw	1
 16212  003238  EC63  F030         	call	_lcdInst
 16213  00323C  0E68               	movlw	104
 16214  00323E  0100               	movlb	0	; () banked
 16215  003240  6FAB               	movwf	??_PlatformTest& (0+255),b
 16216  003242  0EE4               	movlw	228
 16217  003244                     u12157:
 16218  003244  2EE8               	decfsz	wreg,f,c
 16219  003246  D7FE               	bra	u12157
 16220  003248  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16221  00324A  D7FC               	bra	u12157
 16222  00324C  F000               	nop	
 16223  00324E  0E80               	movlw	128
 16224  003250  EC63  F030         	call	_lcdInst
 16225                           
 16226                           ;Test.c: 509: printf("1: DC | A: ARM  ");
 16227  003254  0E2A               	movlw	low STR_114
 16228  003256  0100               	movlb	0	; () banked
 16229  003258  6F8E               	movwf	printf@f& (0+255),b
 16230  00325A  0EFC               	movlw	high STR_114
 16231  00325C  0100               	movlb	0	; () banked
 16232  00325E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16233  003260  ECE7  F00E         	call	_printf	;wreg free
 16234                           
 16235                           ;Test.c: 510: lcdInst(0b11000000);;
 16236  003264  0EC0               	movlw	192
 16237  003266  EC63  F030         	call	_lcdInst
 16238                           
 16239                           ;Test.c: 511: printf("5:H|6:L|IR:%d   ", res);
 16240  00326A  0E19               	movlw	low STR_116
 16241  00326C  0100               	movlb	0	; () banked
 16242  00326E  6F8E               	movwf	printf@f& (0+255),b
 16243  003270  0EFC               	movlw	high STR_116
 16244  003272  0100               	movlb	0	; () banked
 16245  003274  6F8F               	movwf	(printf@f+1)& (0+255),b
 16246  003276  C0AF  F090         	movff	PlatformTest@res_1808,?_printf+2
 16247  00327A  C0B0  F091         	movff	PlatformTest@res_1808+1,?_printf+3
 16248  00327E  ECE7  F00E         	call	_printf	;wreg free
 16249                           
 16250                           ;Test.c: 512: _delay((unsigned long)((100)*(32000000/4000.0)));
 16251  003282  0E05               	movlw	5
 16252  003284  0100               	movlb	0	; () banked
 16253  003286  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16254  003288  0E0F               	movlw	15
 16255  00328A  0100               	movlb	0	; () banked
 16256  00328C  6FAB               	movwf	??_PlatformTest& (0+255),b
 16257  00328E  0EF1               	movlw	241
 16258  003290                     u12167:
 16259  003290  2EE8               	decfsz	wreg,f,c
 16260  003292  D7FE               	bra	u12167
 16261  003294  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16262  003296  D7FC               	bra	u12167
 16263  003298  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16264  00329A  D7FA               	bra	u12167
 16265  00329C                     l9348:
 16266  00329C  A281               	btfss	3969,1,c	;volatile
 16267  00329E  D7A6               	goto	l9330
 16268                           
 16269                           ;Test.c: 513: }
 16270                           ;Test.c: 514: if(PORTB >> 4 == 0b1111){
 16271  0032A0  3881               	swapf	3969,w,c	;volatile
 16272  0032A2  0B0F               	andlw	15
 16273  0032A4  0A0F               	xorlw	15
 16274  0032A6  B4D8               	btfsc	status,2,c
 16275  0032A8  D08F               	goto	l1462
 16276                           
 16277                           ;Test.c: 517: else if(PORTB >> 4 == 0b0000){
 16278                           
 16279                           ;Test.c: 516: }
 16280                           
 16281                           ;Test.c: 515: break;
 16282  0032AA  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 16283  0032AE  0100               	movlb	0	; () banked
 16284  0032B0  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 16285  0032B2  0E0F               	movlw	15
 16286  0032B4  17AB               	andwf	??_PlatformTest& (0+255),f,b
 16287  0032B6  A4D8               	btfss	status,2,c
 16288  0032B8  D012               	goto	l9360
 16289                           
 16290                           ; BSR set to: 0
 16291                           ;Test.c: 518: LATBbits.LATB2 = !LATBbits.LATB2;
 16292  0032BA  B48A               	btfsc	3978,2,c	;volatile
 16293  0032BC  D004               	goto	u8980
 16294  0032BE  0100               	movlb	0	; () banked
 16295  0032C0  6BAB               	clrf	??_PlatformTest& (0+255),b
 16296  0032C2  2BAB               	incf	??_PlatformTest& (0+255),f,b
 16297  0032C4  D002               	goto	u8998
 16298  0032C6                     u8980:
 16299  0032C6  0100               	movlb	0	; () banked
 16300  0032C8  6BAB               	clrf	??_PlatformTest& (0+255),b
 16301  0032CA                     u8998:
 16302  0032CA  0100               	movlb	0	; () banked
 16303  0032CC  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16304  0032CE  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16305  0032D0  508A               	movf	3978,w,c	;volatile
 16306  0032D2  0100               	movlb	0	; () banked
 16307  0032D4  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16308  0032D6  0BFB               	andlw	-5
 16309  0032D8  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16310  0032DA  6E8A               	movwf	3978,c	;volatile
 16311                           
 16312                           ;Test.c: 519: }
 16313  0032DC  D072               	goto	l1477
 16314  0032DE                     l9360:
 16315                           
 16316                           ; BSR set to: 0
 16317                           ;Test.c: 520: else if(PORTB >> 4 == 0b0011){
 16318  0032DE  3881               	swapf	3969,w,c	;volatile
 16319  0032E0  0B0F               	andlw	15
 16320  0032E2  0A03               	xorlw	3
 16321  0032E4  A4D8               	btfss	status,2,c
 16322  0032E6  D020               	goto	l9372
 16323                           
 16324                           ; BSR set to: 0
 16325                           ;Test.c: 521: if(on){
 16326  0032E8  0100               	movlb	0	; () banked
 16327  0032EA  51B5               	movf	PlatformTest@on& (0+255),w,b
 16328  0032EC  0100               	movlb	0	; () banked
 16329  0032EE  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16330  0032F0  B4D8               	btfsc	status,2,c
 16331  0032F2  D010               	goto	l9368
 16332                           
 16333                           ; BSR set to: 0
 16334                           ;Test.c: 522: f_arm_position = 1;
 16335  0032F4  0E00               	movlw	0
 16336  0032F6  0100               	movlb	0	; () banked
 16337  0032F8  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16338  0032FA  0E01               	movlw	1
 16339  0032FC  D00F               	goto	L15
 16340  0032FE                     l9366:
 16341                           
 16342                           ; BSR set to: 0
 16343                           ;Test.c: 523: on = !on;
 16344  0032FE  0100               	movlb	0	; () banked
 16345  003300  51B5               	movf	PlatformTest@on& (0+255),w,b
 16346  003302  0100               	movlb	0	; () banked
 16347  003304  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16348  003306  A4D8               	btfss	status,2,c
 16349  003308  D00D               	goto	u9040
 16350  00330A  D00A               	goto	u9041
 16351  00330C                     u9030:
 16352  00330C  0100               	movlb	0	; () banked
 16353  00330E  6FB5               	movwf	PlatformTest@on& (0+255),b
 16354  003310  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 16355                           
 16356                           ;Test.c: 524: }
 16357  003312  D057               	goto	l1477
 16358  003314                     l9368:
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;Test.c: 525: else{
 16362                           ;Test.c: 526: f_arm_position = 0;
 16363  003314  0E00               	movlw	0
 16364  003316  0100               	movlb	0	; () banked
 16365  003318  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16366  00331A  0E00               	movlw	0
 16367  00331C                     L15:
 16368  00331C  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 16369  00331E  D7EF               	goto	l9366
 16370  003320                     u9041:
 16371  003320  0E01               	movlw	1
 16372  003322  D7F4               	goto	u9030
 16373  003324                     u9040:
 16374  003324  0E00               	movlw	0
 16375  003326  D7F2               	goto	u9030
 16376  003328                     l9372:
 16377                           
 16378                           ; BSR set to: 0
 16379                           ;Test.c: 530: else if(PORTB >> 4 == 0b0101){
 16380  003328  3881               	swapf	3969,w,c	;volatile
 16381  00332A  0B0F               	andlw	15
 16382  00332C  0A05               	xorlw	5
 16383  00332E  A4D8               	btfss	status,2,c
 16384  003330  D022               	goto	l9388
 16385                           
 16386                           ; BSR set to: 0
 16387                           ;Test.c: 532: (INTCONbits.GIE = 0);
 16388  003332  9EF2               	bcf	intcon,7,c	;volatile
 16389                           
 16390                           ;Test.c: 533: TMR2IE = 0;
 16391  003334  929D               	bcf	3997,1,c	;volatile
 16392                           
 16393                           ; BSR set to: 0
 16394                           ;Test.c: 534: for(int i = 0; i<3000; i++){
 16395  003336  0E00               	movlw	0
 16396  003338  0100               	movlb	0	; () banked
 16397  00333A  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 16398  00333C  0E00               	movlw	0
 16399  00333E  6FB1               	movwf	PlatformTest@i& (0+255),b
 16400  003340                     l9378:
 16401                           
 16402                           ; BSR set to: 0
 16403  003340  0100               	movlb	0	; () banked
 16404  003342  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 16405  003344  D008               	goto	l1471
 16406  003346  0EB8               	movlw	184
 16407  003348  0100               	movlb	0	; () banked
 16408  00334A  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 16409  00334C  0E0B               	movlw	11
 16410  00334E  0100               	movlb	0	; () banked
 16411  003350  59B2               	subwfb	(PlatformTest@i+1)& (0+255),w,b
 16412  003352  B0D8               	btfsc	status,0,c
 16413  003354  D00D               	goto	l1472
 16414  003356                     l1471:
 16415                           
 16416                           ; BSR set to: 0
 16417                           ;Test.c: 535: LATAbits.LATA4 = 1;
 16418  003356  8889               	bsf	3977,4,c	;volatile
 16419                           
 16420                           ; BSR set to: 0
 16421                           ;Test.c: 536: _delay((unsigned long)((75)*(32000000/4000000.0)));
 16422  003358  0EC8               	movlw	200
 16423  00335A                     u12177:
 16424  00335A  2EE8               	decfsz	wreg,f,c
 16425  00335C  D7FE               	bra	u12177
 16426                           
 16427                           ;Test.c: 537: LATAbits.LATA4 = 0;
 16428  00335E  9889               	bcf	3977,4,c	;volatile
 16429                           
 16430                           ;Test.c: 538: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16431  003360  0E42               	movlw	66
 16432  003362                     u12187:
 16433  003362  2EE8               	decfsz	wreg,f,c
 16434  003364  D7FE               	bra	u12187
 16435  003366  D000               	nop2	
 16436  003368  0100               	movlb	0	; () banked
 16437  00336A  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 16438  00336C  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 16439  00336E  D7E8               	goto	l9378
 16440  003370                     l1472:
 16441                           
 16442                           ; BSR set to: 0
 16443                           ;Test.c: 539: }
 16444                           ;Test.c: 540: TMR2IE = 1;
 16445  003370  829D               	bsf	3997,1,c	;volatile
 16446                           
 16447                           ;Test.c: 541: (INTCONbits.GIE = 1);
 16448  003372  8EF2               	bsf	intcon,7,c	;volatile
 16449                           
 16450                           ;Test.c: 542: }
 16451  003374  D026               	goto	l1477
 16452  003376                     l9388:
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;Test.c: 543: else if (PORTB >> 4 == 0b0110){
 16456  003376  3881               	swapf	3969,w,c	;volatile
 16457  003378  0B0F               	andlw	15
 16458  00337A  0A06               	xorlw	6
 16459  00337C  A4D8               	btfss	status,2,c
 16460  00337E  D021               	goto	l1477
 16461                           
 16462                           ; BSR set to: 0
 16463                           ;Test.c: 545: (INTCONbits.GIE = 0);
 16464  003380  9EF2               	bcf	intcon,7,c	;volatile
 16465                           
 16466                           ;Test.c: 546: TMR2IE = 0;
 16467  003382  929D               	bcf	3997,1,c	;volatile
 16468                           
 16469                           ; BSR set to: 0
 16470                           ;Test.c: 547: for(int i = 0; i<3000; i++){
 16471  003384  0E00               	movlw	0
 16472  003386  0100               	movlb	0	; () banked
 16473  003388  6FB4               	movwf	(PlatformTest@i_1812+1)& (0+255),b
 16474  00338A  0E00               	movlw	0
 16475  00338C  6FB3               	movwf	PlatformTest@i_1812& (0+255),b
 16476  00338E                     l9394:
 16477                           
 16478                           ; BSR set to: 0
 16479  00338E  0100               	movlb	0	; () banked
 16480  003390  BFB4               	btfsc	(PlatformTest@i_1812+1)& (0+255),7,b
 16481  003392  D008               	goto	l1475
 16482  003394  0EB8               	movlw	184
 16483  003396  0100               	movlb	0	; () banked
 16484  003398  5DB3               	subwf	PlatformTest@i_1812& (0+255),w,b
 16485  00339A  0E0B               	movlw	11
 16486  00339C  0100               	movlb	0	; () banked
 16487  00339E  59B4               	subwfb	(PlatformTest@i_1812+1)& (0+255),w,b
 16488  0033A0  B0D8               	btfsc	status,0,c
 16489  0033A2  D00D               	goto	l1476
 16490  0033A4                     l1475:
 16491                           
 16492                           ; BSR set to: 0
 16493                           ;Test.c: 548: LATAbits.LATA4 = 1;
 16494  0033A4  8889               	bsf	3977,4,c	;volatile
 16495                           
 16496                           ; BSR set to: 0
 16497                           ;Test.c: 549: _delay((unsigned long)((58)*(32000000/4000000.0)));
 16498  0033A6  0E9A               	movlw	154
 16499  0033A8                     u12197:
 16500  0033A8  2EE8               	decfsz	wreg,f,c
 16501  0033AA  D7FE               	bra	u12197
 16502  0033AC  D000               	nop2	
 16503                           
 16504                           ;Test.c: 550: LATAbits.LATA4 = 0;
 16505  0033AE  9889               	bcf	3977,4,c	;volatile
 16506                           
 16507                           ;Test.c: 551: _delay((unsigned long)((42)*(32000000/4000000.0)));
 16508  0033B0  0E70               	movlw	112
 16509  0033B2                     u12207:
 16510  0033B2  2EE8               	decfsz	wreg,f,c
 16511  0033B4  D7FE               	bra	u12207
 16512  0033B6  0100               	movlb	0	; () banked
 16513  0033B8  4BB3               	infsnz	PlatformTest@i_1812& (0+255),f,b
 16514  0033BA  2BB4               	incf	(PlatformTest@i_1812+1)& (0+255),f,b
 16515  0033BC  D7E8               	goto	l9394
 16516  0033BE                     l1476:
 16517                           
 16518                           ; BSR set to: 0
 16519                           ;Test.c: 552: }
 16520                           ;Test.c: 553: (INTCONbits.GIE = 1);
 16521  0033BE  8EF2               	bsf	intcon,7,c	;volatile
 16522                           
 16523                           ;Test.c: 554: TMR2IE = 1;
 16524  0033C0  829D               	bsf	3997,1,c	;volatile
 16525  0033C2                     l1477:
 16526  0033C2  A281               	btfss	3969,1,c	;volatile
 16527  0033C4  D76B               	goto	l9348
 16528  0033C6  D7FD               	goto	l1477
 16529  0033C8                     l1462:
 16530                           
 16531                           ;Test.c: 558: }
 16532                           ;Test.c: 560: LATCbits.LATC5 = 0;
 16533  0033C8  9A8B               	bcf	3979,5,c	;volatile
 16534                           
 16535                           ;Test.c: 561: stopSignals();
 16536  0033CA  EC18  F030         	call	_stopSignals	;wreg free
 16537                           
 16538                           ;Test.c: 562: machine_state = Testing_state;
 16539  0033CE  0E03               	movlw	3
 16540  0033D0  0100               	movlb	0	; () banked
 16541  0033D2  6FFC               	movwf	_machine_state& (0+255),b
 16542                           
 16543                           ; BSR set to: 0
 16544  0033D4  0012               	return		;funcret
 16545  0033D6                     __end_of_PlatformTest:
 16546                           	opt stack 0
 16547                           tblptru	equ	0xFF8
 16548                           tblptrh	equ	0xFF7
 16549                           tblptrl	equ	0xFF6
 16550                           tablat	equ	0xFF5
 16551                           prodh	equ	0xFF4
 16552                           prodl	equ	0xFF3
 16553                           intcon	equ	0xFF2
 16554                           intcon2	equ	0xFF1
 16555                           intcon3	equ	0xFF0
 16556                           postinc0	equ	0xFEE
 16557                           wreg	equ	0xFE8
 16558                           postdec1	equ	0xFE5
 16559                           fsr1l	equ	0xFE1
 16560                           indf2	equ	0xFDF
 16561                           postinc2	equ	0xFDE
 16562                           postdec2	equ	0xFDD
 16563                           fsr2h	equ	0xFDA
 16564                           fsr2l	equ	0xFD9
 16565                           status	equ	0xFD8
 16566                           
 16567 ;; *************** function _BothServos *****************
 16568 ;; Defined at:
 16569 ;;		line 379 in file "Test.c"
 16570 ;; Parameters:    Size  Location     Type
 16571 ;;		None
 16572 ;; Auto vars:     Size  Location     Type
 16573 ;;		None
 16574 ;; Return value:  Size  Location     Type
 16575 ;;                  1    wreg      void 
 16576 ;; Registers used:
 16577 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16578 ;; Tracked objects:
 16579 ;;		On entry : 0/0
 16580 ;;		On exit  : 0/0
 16581 ;;		Unchanged: 0/0
 16582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16585 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16587 ;;Total ram usage:        2 bytes
 16588 ;; Hardware stack levels used:    1
 16589 ;; Hardware stack levels required when called:   10
 16590 ;; This function calls:
 16591 ;;		_initServos
 16592 ;;		_lcdInst
 16593 ;;		_printf
 16594 ;;		_stopSignals
 16595 ;;		_updateServoPosition
 16596 ;; This function is called by:
 16597 ;;		_Test
 16598 ;; This function uses a non-reentrant model
 16599 ;;
 16600                           
 16601                           	psect	text50
 16602  002206                     __ptext50:
 16603                           	opt stack 0
 16604  002206                     _BothServos:
 16605                           	opt stack 19
 16606                           
 16607                           ;Test.c: 380: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16608                           
 16609                           ; BSR set to: 0
 16610                           ;incstack = 0
 16611  002206  0E01               	movlw	1
 16612  002208  EC63  F030         	call	_lcdInst
 16613  00220C  0E68               	movlw	104
 16614  00220E  0100               	movlb	0	; () banked
 16615  002210  6FAB               	movwf	??_BothServos& (0+255),b
 16616  002212  0EE4               	movlw	228
 16617  002214                     u12217:
 16618  002214  2EE8               	decfsz	wreg,f,c
 16619  002216  D7FE               	bra	u12217
 16620  002218  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16621  00221A  D7FC               	bra	u12217
 16622  00221C  F000               	nop	
 16623  00221E  0E80               	movlw	128
 16624  002220  EC63  F030         	call	_lcdInst
 16625                           
 16626                           ;Test.c: 381: printf("TST: BOTH SERVOS");
 16627  002224  0EC3               	movlw	low STR_111
 16628  002226  0100               	movlb	0	; () banked
 16629  002228  6F8E               	movwf	printf@f& (0+255),b
 16630  00222A  0EFC               	movlw	high STR_111
 16631  00222C  0100               	movlb	0	; () banked
 16632  00222E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16633  002230  ECE7  F00E         	call	_printf	;wreg free
 16634                           
 16635                           ;Test.c: 382: TMR1ON = 1;
 16636  002234  80CD               	bsf	4045,0,c	;volatile
 16637                           
 16638                           ;Test.c: 383: TMR3ON = 1;
 16639  002236  80B1               	bsf	4017,0,c	;volatile
 16640                           
 16641                           ;Test.c: 384: machine_state = Sorting_state;
 16642  002238  0E01               	movlw	1
 16643  00223A  0100               	movlb	0	; () banked
 16644  00223C  6FFC               	movwf	_machine_state& (0+255),b
 16645                           
 16646                           ; BSR set to: 0
 16647                           ;Test.c: 385: was_low_1 = 0;
 16648  00223E  0E00               	movlw	0
 16649  002240  6E78               	movwf	_was_low_1+1,c	;volatile
 16650  002242  0E00               	movlw	0
 16651  002244  6E77               	movwf	_was_low_1,c	;volatile
 16652                           
 16653                           ; BSR set to: 0
 16654                           ;Test.c: 386: was_low_3 = 0;
 16655  002246  0E00               	movlw	0
 16656  002248  6E7C               	movwf	_was_low_3+1,c	;volatile
 16657  00224A  0E00               	movlw	0
 16658  00224C  6E7B               	movwf	_was_low_3,c	;volatile
 16659                           
 16660                           ; BSR set to: 0
 16661                           ;Test.c: 392: initServos();
 16662  00224E  EC25  F02A         	call	_initServos	;wreg free
 16663                           
 16664                           ;Test.c: 393: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16665  002252  0E3D               	movlw	61
 16666  002254  0100               	movlb	0	; () banked
 16667  002256  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16668  002258  0EE1               	movlw	225
 16669  00225A  0100               	movlb	0	; () banked
 16670  00225C  6FAB               	movwf	??_BothServos& (0+255),b
 16671  00225E  0E3F               	movlw	63
 16672  002260                     u12227:
 16673  002260  2EE8               	decfsz	wreg,f,c
 16674  002262  D7FE               	bra	u12227
 16675  002264  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16676  002266  D7FC               	bra	u12227
 16677  002268  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16678  00226A  D7FA               	bra	u12227
 16679  00226C  D000               	nop2	
 16680                           
 16681                           ;Test.c: 395: updateServoPosition(400, 1);
 16682  00226E  0E01               	movlw	1
 16683  002270  0100               	movlb	0	; () banked
 16684  002272  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16685  002274  0E90               	movlw	144
 16686  002276  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16687  002278  0E00               	movlw	0
 16688  00227A  0100               	movlb	0	; () banked
 16689  00227C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16690  00227E  0E01               	movlw	1
 16691  002280  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16692  002282  EC5F  F029         	call	_updateServoPosition	;wreg free
 16693                           
 16694                           ;Test.c: 396: updateServoPosition(1050, 3);
 16695  002286  0E04               	movlw	4
 16696  002288  0100               	movlb	0	; () banked
 16697  00228A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16698  00228C  0E1A               	movlw	26
 16699  00228E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16700  002290  0E00               	movlw	0
 16701  002292  0100               	movlb	0	; () banked
 16702  002294  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16703  002296  0E03               	movlw	3
 16704  002298  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16705  00229A  EC5F  F029         	call	_updateServoPosition	;wreg free
 16706                           
 16707                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16708  00229E  0E1F               	movlw	31
 16709  0022A0  0100               	movlb	0	; () banked
 16710  0022A2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16711  0022A4  0E71               	movlw	113
 16712  0022A6  0100               	movlb	0	; () banked
 16713  0022A8  6FAB               	movwf	??_BothServos& (0+255),b
 16714  0022AA  0E1E               	movlw	30
 16715  0022AC                     u12237:
 16716  0022AC  2EE8               	decfsz	wreg,f,c
 16717  0022AE  D7FE               	bra	u12237
 16718  0022B0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16719  0022B2  D7FC               	bra	u12237
 16720  0022B4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16721  0022B6  D7FA               	bra	u12237
 16722  0022B8  F000               	nop	
 16723                           
 16724                           ;Test.c: 398: updateServoPosition(1260, 3);
 16725  0022BA  0E04               	movlw	4
 16726  0022BC  0100               	movlb	0	; () banked
 16727  0022BE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16728  0022C0  0EEC               	movlw	236
 16729  0022C2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16730  0022C4  0E00               	movlw	0
 16731  0022C6  0100               	movlb	0	; () banked
 16732  0022C8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16733  0022CA  0E03               	movlw	3
 16734  0022CC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16735  0022CE  EC5F  F029         	call	_updateServoPosition	;wreg free
 16736                           
 16737                           ;Test.c: 399: _delay((unsigned long)((700)*(32000000/4000.0)));
 16738  0022D2  0E1D               	movlw	29
 16739  0022D4  0100               	movlb	0	; () banked
 16740  0022D6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16741  0022D8  0E69               	movlw	105
 16742  0022DA  0100               	movlb	0	; () banked
 16743  0022DC  6FAB               	movwf	??_BothServos& (0+255),b
 16744  0022DE  0EA5               	movlw	165
 16745  0022E0                     u12247:
 16746  0022E0  2EE8               	decfsz	wreg,f,c
 16747  0022E2  D7FE               	bra	u12247
 16748  0022E4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16749  0022E6  D7FC               	bra	u12247
 16750  0022E8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16751  0022EA  D7FA               	bra	u12247
 16752                           
 16753                           ;Test.c: 400: updateServoPosition(1050, 3);
 16754  0022EC  0E04               	movlw	4
 16755  0022EE  0100               	movlb	0	; () banked
 16756  0022F0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16757  0022F2  0E1A               	movlw	26
 16758  0022F4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16759  0022F6  0E00               	movlw	0
 16760  0022F8  0100               	movlb	0	; () banked
 16761  0022FA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16762  0022FC  0E03               	movlw	3
 16763  0022FE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16764  002300  EC5F  F029         	call	_updateServoPosition	;wreg free
 16765                           
 16766                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16767  002304  0E1F               	movlw	31
 16768  002306  0100               	movlb	0	; () banked
 16769  002308  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16770  00230A  0E71               	movlw	113
 16771  00230C  0100               	movlb	0	; () banked
 16772  00230E  6FAB               	movwf	??_BothServos& (0+255),b
 16773  002310  0E1E               	movlw	30
 16774  002312                     u12257:
 16775  002312  2EE8               	decfsz	wreg,f,c
 16776  002314  D7FE               	bra	u12257
 16777  002316  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16778  002318  D7FC               	bra	u12257
 16779  00231A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16780  00231C  D7FA               	bra	u12257
 16781  00231E  F000               	nop	
 16782                           
 16783                           ;Test.c: 403: updateServoPosition(850, 1);
 16784  002320  0E03               	movlw	3
 16785  002322  0100               	movlb	0	; () banked
 16786  002324  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16787  002326  0E52               	movlw	82
 16788  002328  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16789  00232A  0E00               	movlw	0
 16790  00232C  0100               	movlb	0	; () banked
 16791  00232E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16792  002330  0E01               	movlw	1
 16793  002332  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16794  002334  EC5F  F029         	call	_updateServoPosition	;wreg free
 16795                           
 16796                           ;Test.c: 404: updateServoPosition(1050, 3);
 16797  002338  0E04               	movlw	4
 16798  00233A  0100               	movlb	0	; () banked
 16799  00233C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16800  00233E  0E1A               	movlw	26
 16801  002340  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16802  002342  0E00               	movlw	0
 16803  002344  0100               	movlb	0	; () banked
 16804  002346  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16805  002348  0E03               	movlw	3
 16806  00234A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16807  00234C  EC5F  F029         	call	_updateServoPosition	;wreg free
 16808                           
 16809                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16810  002350  0E1F               	movlw	31
 16811  002352  0100               	movlb	0	; () banked
 16812  002354  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16813  002356  0E71               	movlw	113
 16814  002358  0100               	movlb	0	; () banked
 16815  00235A  6FAB               	movwf	??_BothServos& (0+255),b
 16816  00235C  0E1E               	movlw	30
 16817  00235E                     u12267:
 16818  00235E  2EE8               	decfsz	wreg,f,c
 16819  002360  D7FE               	bra	u12267
 16820  002362  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16821  002364  D7FC               	bra	u12267
 16822  002366  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16823  002368  D7FA               	bra	u12267
 16824  00236A  F000               	nop	
 16825                           
 16826                           ;Test.c: 406: updateServoPosition(1260, 3);
 16827  00236C  0E04               	movlw	4
 16828  00236E  0100               	movlb	0	; () banked
 16829  002370  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16830  002372  0EEC               	movlw	236
 16831  002374  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16832  002376  0E00               	movlw	0
 16833  002378  0100               	movlb	0	; () banked
 16834  00237A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16835  00237C  0E03               	movlw	3
 16836  00237E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16837  002380  EC5F  F029         	call	_updateServoPosition	;wreg free
 16838                           
 16839                           ;Test.c: 407: _delay((unsigned long)((700)*(32000000/4000.0)));
 16840  002384  0E1D               	movlw	29
 16841  002386  0100               	movlb	0	; () banked
 16842  002388  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16843  00238A  0E69               	movlw	105
 16844  00238C  0100               	movlb	0	; () banked
 16845  00238E  6FAB               	movwf	??_BothServos& (0+255),b
 16846  002390  0EA5               	movlw	165
 16847  002392                     u12277:
 16848  002392  2EE8               	decfsz	wreg,f,c
 16849  002394  D7FE               	bra	u12277
 16850  002396  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16851  002398  D7FC               	bra	u12277
 16852  00239A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16853  00239C  D7FA               	bra	u12277
 16854                           
 16855                           ;Test.c: 408: updateServoPosition(1050, 3);
 16856  00239E  0E04               	movlw	4
 16857  0023A0  0100               	movlb	0	; () banked
 16858  0023A2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16859  0023A4  0E1A               	movlw	26
 16860  0023A6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16861  0023A8  0E00               	movlw	0
 16862  0023AA  0100               	movlb	0	; () banked
 16863  0023AC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16864  0023AE  0E03               	movlw	3
 16865  0023B0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16866  0023B2  EC5F  F029         	call	_updateServoPosition	;wreg free
 16867                           
 16868                           ;Test.c: 409: _delay((unsigned long)((750)*(32000000/4000.0)));
 16869  0023B6  0E1F               	movlw	31
 16870  0023B8  0100               	movlb	0	; () banked
 16871  0023BA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16872  0023BC  0E71               	movlw	113
 16873  0023BE  0100               	movlb	0	; () banked
 16874  0023C0  6FAB               	movwf	??_BothServos& (0+255),b
 16875  0023C2  0E1E               	movlw	30
 16876  0023C4                     u12287:
 16877  0023C4  2EE8               	decfsz	wreg,f,c
 16878  0023C6  D7FE               	bra	u12287
 16879  0023C8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16880  0023CA  D7FC               	bra	u12287
 16881  0023CC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16882  0023CE  D7FA               	bra	u12287
 16883  0023D0  F000               	nop	
 16884                           
 16885                           ;Test.c: 411: updateServoPosition(400, 1);
 16886  0023D2  0E01               	movlw	1
 16887  0023D4  0100               	movlb	0	; () banked
 16888  0023D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16889  0023D8  0E90               	movlw	144
 16890  0023DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16891  0023DC  0E00               	movlw	0
 16892  0023DE  0100               	movlb	0	; () banked
 16893  0023E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16894  0023E2  0E01               	movlw	1
 16895  0023E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16896  0023E6  EC5F  F029         	call	_updateServoPosition	;wreg free
 16897                           
 16898                           ;Test.c: 412: updateServoPosition(1050, 3);
 16899  0023EA  0E04               	movlw	4
 16900  0023EC  0100               	movlb	0	; () banked
 16901  0023EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16902  0023F0  0E1A               	movlw	26
 16903  0023F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16904  0023F4  0E00               	movlw	0
 16905  0023F6  0100               	movlb	0	; () banked
 16906  0023F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16907  0023FA  0E03               	movlw	3
 16908  0023FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16909  0023FE  EC5F  F029         	call	_updateServoPosition	;wreg free
 16910                           
 16911                           ;Test.c: 413: _delay((unsigned long)((750)*(32000000/4000.0)));
 16912  002402  0E1F               	movlw	31
 16913  002404  0100               	movlb	0	; () banked
 16914  002406  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16915  002408  0E71               	movlw	113
 16916  00240A  0100               	movlb	0	; () banked
 16917  00240C  6FAB               	movwf	??_BothServos& (0+255),b
 16918  00240E  0E1E               	movlw	30
 16919  002410                     u12297:
 16920  002410  2EE8               	decfsz	wreg,f,c
 16921  002412  D7FE               	bra	u12297
 16922  002414  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16923  002416  D7FC               	bra	u12297
 16924  002418  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16925  00241A  D7FA               	bra	u12297
 16926  00241C  F000               	nop	
 16927                           
 16928                           ;Test.c: 414: updateServoPosition(1260, 3);
 16929  00241E  0E04               	movlw	4
 16930  002420  0100               	movlb	0	; () banked
 16931  002422  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16932  002424  0EEC               	movlw	236
 16933  002426  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16934  002428  0E00               	movlw	0
 16935  00242A  0100               	movlb	0	; () banked
 16936  00242C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16937  00242E  0E03               	movlw	3
 16938  002430  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16939  002432  EC5F  F029         	call	_updateServoPosition	;wreg free
 16940                           
 16941                           ;Test.c: 415: _delay((unsigned long)((700)*(32000000/4000.0)));
 16942  002436  0E1D               	movlw	29
 16943  002438  0100               	movlb	0	; () banked
 16944  00243A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16945  00243C  0E69               	movlw	105
 16946  00243E  0100               	movlb	0	; () banked
 16947  002440  6FAB               	movwf	??_BothServos& (0+255),b
 16948  002442  0EA5               	movlw	165
 16949  002444                     u12307:
 16950  002444  2EE8               	decfsz	wreg,f,c
 16951  002446  D7FE               	bra	u12307
 16952  002448  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16953  00244A  D7FC               	bra	u12307
 16954  00244C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16955  00244E  D7FA               	bra	u12307
 16956                           
 16957                           ;Test.c: 416: updateServoPosition(1050, 3);
 16958  002450  0E04               	movlw	4
 16959  002452  0100               	movlb	0	; () banked
 16960  002454  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16961  002456  0E1A               	movlw	26
 16962  002458  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16963  00245A  0E00               	movlw	0
 16964  00245C  0100               	movlb	0	; () banked
 16965  00245E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16966  002460  0E03               	movlw	3
 16967  002462  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16968  002464  EC5F  F029         	call	_updateServoPosition	;wreg free
 16969                           
 16970                           ;Test.c: 417: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16971  002468  0E3D               	movlw	61
 16972  00246A  0100               	movlb	0	; () banked
 16973  00246C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16974  00246E  0EE1               	movlw	225
 16975  002470  0100               	movlb	0	; () banked
 16976  002472  6FAB               	movwf	??_BothServos& (0+255),b
 16977  002474  0E3F               	movlw	63
 16978  002476                     u12317:
 16979  002476  2EE8               	decfsz	wreg,f,c
 16980  002478  D7FE               	bra	u12317
 16981  00247A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16982  00247C  D7FC               	bra	u12317
 16983  00247E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16984  002480  D7FA               	bra	u12317
 16985  002482  D000               	nop2	
 16986                           
 16987                           ;Test.c: 419: updateServoPosition(1550, 1);
 16988  002484  0E06               	movlw	6
 16989  002486  0100               	movlb	0	; () banked
 16990  002488  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16991  00248A  0E0E               	movlw	14
 16992  00248C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16993  00248E  0E00               	movlw	0
 16994  002490  0100               	movlb	0	; () banked
 16995  002492  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16996  002494  0E01               	movlw	1
 16997  002496  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16998  002498  EC5F  F029         	call	_updateServoPosition	;wreg free
 16999                           
 17000                           ;Test.c: 420: updateServoPosition(1050, 3);
 17001  00249C  0E04               	movlw	4
 17002  00249E  0100               	movlb	0	; () banked
 17003  0024A0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17004  0024A2  0E1A               	movlw	26
 17005  0024A4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17006  0024A6  0E00               	movlw	0
 17007  0024A8  0100               	movlb	0	; () banked
 17008  0024AA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17009  0024AC  0E03               	movlw	3
 17010  0024AE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17011  0024B0  EC5F  F029         	call	_updateServoPosition	;wreg free
 17012                           
 17013                           ;Test.c: 421: _delay((unsigned long)((750)*(32000000/4000.0)));
 17014  0024B4  0E1F               	movlw	31
 17015  0024B6  0100               	movlb	0	; () banked
 17016  0024B8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17017  0024BA  0E71               	movlw	113
 17018  0024BC  0100               	movlb	0	; () banked
 17019  0024BE  6FAB               	movwf	??_BothServos& (0+255),b
 17020  0024C0  0E1E               	movlw	30
 17021  0024C2                     u12327:
 17022  0024C2  2EE8               	decfsz	wreg,f,c
 17023  0024C4  D7FE               	bra	u12327
 17024  0024C6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17025  0024C8  D7FC               	bra	u12327
 17026  0024CA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17027  0024CC  D7FA               	bra	u12327
 17028  0024CE  F000               	nop	
 17029                           
 17030                           ;Test.c: 422: updateServoPosition(1390, 3);
 17031  0024D0  0E05               	movlw	5
 17032  0024D2  0100               	movlb	0	; () banked
 17033  0024D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17034  0024D6  0E6E               	movlw	110
 17035  0024D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17036  0024DA  0E00               	movlw	0
 17037  0024DC  0100               	movlb	0	; () banked
 17038  0024DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17039  0024E0  0E03               	movlw	3
 17040  0024E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17041  0024E4  EC5F  F029         	call	_updateServoPosition	;wreg free
 17042                           
 17043                           ;Test.c: 423: _delay((unsigned long)((700)*(32000000/4000.0)));
 17044  0024E8  0E1D               	movlw	29
 17045  0024EA  0100               	movlb	0	; () banked
 17046  0024EC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17047  0024EE  0E69               	movlw	105
 17048  0024F0  0100               	movlb	0	; () banked
 17049  0024F2  6FAB               	movwf	??_BothServos& (0+255),b
 17050  0024F4  0EA5               	movlw	165
 17051  0024F6                     u12337:
 17052  0024F6  2EE8               	decfsz	wreg,f,c
 17053  0024F8  D7FE               	bra	u12337
 17054  0024FA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17055  0024FC  D7FC               	bra	u12337
 17056  0024FE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17057  002500  D7FA               	bra	u12337
 17058                           
 17059                           ;Test.c: 424: updateServoPosition(1050, 3);
 17060  002502  0E04               	movlw	4
 17061  002504  0100               	movlb	0	; () banked
 17062  002506  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17063  002508  0E1A               	movlw	26
 17064  00250A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17065  00250C  0E00               	movlw	0
 17066  00250E  0100               	movlb	0	; () banked
 17067  002510  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17068  002512  0E03               	movlw	3
 17069  002514  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17070  002516  EC5F  F029         	call	_updateServoPosition	;wreg free
 17071                           
 17072                           ;Test.c: 425: _delay((unsigned long)((750)*(32000000/4000.0)));
 17073  00251A  0E1F               	movlw	31
 17074  00251C  0100               	movlb	0	; () banked
 17075  00251E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17076  002520  0E71               	movlw	113
 17077  002522  0100               	movlb	0	; () banked
 17078  002524  6FAB               	movwf	??_BothServos& (0+255),b
 17079  002526  0E1E               	movlw	30
 17080  002528                     u12347:
 17081  002528  2EE8               	decfsz	wreg,f,c
 17082  00252A  D7FE               	bra	u12347
 17083  00252C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17084  00252E  D7FC               	bra	u12347
 17085  002530  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17086  002532  D7FA               	bra	u12347
 17087  002534  F000               	nop	
 17088                           
 17089                           ;Test.c: 427: updateServoPosition(2500, 1);
 17090  002536  0E09               	movlw	9
 17091  002538  0100               	movlb	0	; () banked
 17092  00253A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17093  00253C  0EC4               	movlw	196
 17094  00253E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17095  002540  0E00               	movlw	0
 17096  002542  0100               	movlb	0	; () banked
 17097  002544  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17098  002546  0E01               	movlw	1
 17099  002548  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17100  00254A  EC5F  F029         	call	_updateServoPosition	;wreg free
 17101                           
 17102                           ;Test.c: 428: updateServoPosition(1050, 3);
 17103  00254E  0E04               	movlw	4
 17104  002550  0100               	movlb	0	; () banked
 17105  002552  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17106  002554  0E1A               	movlw	26
 17107  002556  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17108  002558  0E00               	movlw	0
 17109  00255A  0100               	movlb	0	; () banked
 17110  00255C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17111  00255E  0E03               	movlw	3
 17112  002560  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17113  002562  EC5F  F029         	call	_updateServoPosition	;wreg free
 17114                           
 17115                           ;Test.c: 429: _delay((unsigned long)((750)*(32000000/4000.0)));
 17116  002566  0E1F               	movlw	31
 17117  002568  0100               	movlb	0	; () banked
 17118  00256A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17119  00256C  0E71               	movlw	113
 17120  00256E  0100               	movlb	0	; () banked
 17121  002570  6FAB               	movwf	??_BothServos& (0+255),b
 17122  002572  0E1E               	movlw	30
 17123  002574                     u12357:
 17124  002574  2EE8               	decfsz	wreg,f,c
 17125  002576  D7FE               	bra	u12357
 17126  002578  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17127  00257A  D7FC               	bra	u12357
 17128  00257C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17129  00257E  D7FA               	bra	u12357
 17130  002580  F000               	nop	
 17131                           
 17132                           ;Test.c: 430: updateServoPosition(1390, 3);
 17133  002582  0E05               	movlw	5
 17134  002584  0100               	movlb	0	; () banked
 17135  002586  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17136  002588  0E6E               	movlw	110
 17137  00258A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17138  00258C  0E00               	movlw	0
 17139  00258E  0100               	movlb	0	; () banked
 17140  002590  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17141  002592  0E03               	movlw	3
 17142  002594  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17143  002596  EC5F  F029         	call	_updateServoPosition	;wreg free
 17144                           
 17145                           ;Test.c: 431: _delay((unsigned long)((700)*(32000000/4000.0)));
 17146  00259A  0E1D               	movlw	29
 17147  00259C  0100               	movlb	0	; () banked
 17148  00259E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17149  0025A0  0E69               	movlw	105
 17150  0025A2  0100               	movlb	0	; () banked
 17151  0025A4  6FAB               	movwf	??_BothServos& (0+255),b
 17152  0025A6  0EA5               	movlw	165
 17153  0025A8                     u12367:
 17154  0025A8  2EE8               	decfsz	wreg,f,c
 17155  0025AA  D7FE               	bra	u12367
 17156  0025AC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17157  0025AE  D7FC               	bra	u12367
 17158  0025B0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17159  0025B2  D7FA               	bra	u12367
 17160                           
 17161                           ;Test.c: 432: updateServoPosition(1050, 3);
 17162  0025B4  0E04               	movlw	4
 17163  0025B6  0100               	movlb	0	; () banked
 17164  0025B8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17165  0025BA  0E1A               	movlw	26
 17166  0025BC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17167  0025BE  0E00               	movlw	0
 17168  0025C0  0100               	movlb	0	; () banked
 17169  0025C2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17170  0025C4  0E03               	movlw	3
 17171  0025C6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17172  0025C8  EC5F  F029         	call	_updateServoPosition	;wreg free
 17173                           
 17174                           ;Test.c: 433: _delay((unsigned long)((750)*(32000000/4000.0)));
 17175  0025CC  0E1F               	movlw	31
 17176  0025CE  0100               	movlb	0	; () banked
 17177  0025D0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17178  0025D2  0E71               	movlw	113
 17179  0025D4  0100               	movlb	0	; () banked
 17180  0025D6  6FAB               	movwf	??_BothServos& (0+255),b
 17181  0025D8  0E1E               	movlw	30
 17182  0025DA                     u12377:
 17183  0025DA  2EE8               	decfsz	wreg,f,c
 17184  0025DC  D7FE               	bra	u12377
 17185  0025DE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17186  0025E0  D7FC               	bra	u12377
 17187  0025E2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17188  0025E4  D7FA               	bra	u12377
 17189  0025E6  F000               	nop	
 17190                           
 17191                           ;Test.c: 435: stopSignals();
 17192  0025E8  EC18  F030         	call	_stopSignals	;wreg free
 17193                           
 17194                           ;Test.c: 436: machine_state = Testing_state;
 17195  0025EC  0E03               	movlw	3
 17196  0025EE  0100               	movlb	0	; () banked
 17197  0025F0  6FFC               	movwf	_machine_state& (0+255),b
 17198                           
 17199                           ; BSR set to: 0
 17200  0025F2  0012               	return		;funcret
 17201  0025F4                     __end_of_BothServos:
 17202                           	opt stack 0
 17203                           tblptru	equ	0xFF8
 17204                           tblptrh	equ	0xFF7
 17205                           tblptrl	equ	0xFF6
 17206                           tablat	equ	0xFF5
 17207                           prodh	equ	0xFF4
 17208                           prodl	equ	0xFF3
 17209                           intcon	equ	0xFF2
 17210                           intcon2	equ	0xFF1
 17211                           intcon3	equ	0xFF0
 17212                           postinc0	equ	0xFEE
 17213                           wreg	equ	0xFE8
 17214                           postdec1	equ	0xFE5
 17215                           fsr1l	equ	0xFE1
 17216                           indf2	equ	0xFDF
 17217                           postinc2	equ	0xFDE
 17218                           postdec2	equ	0xFDD
 17219                           fsr2h	equ	0xFDA
 17220                           fsr2l	equ	0xFD9
 17221                           status	equ	0xFD8
 17222                           
 17223 ;; *************** function _stopSignals *****************
 17224 ;; Defined at:
 17225 ;;		line 71 in file "main.c"
 17226 ;; Parameters:    Size  Location     Type
 17227 ;;		None
 17228 ;; Auto vars:     Size  Location     Type
 17229 ;;		None
 17230 ;; Return value:  Size  Location     Type
 17231 ;;                  1    wreg      void 
 17232 ;; Registers used:
 17233 ;;		wreg, status,2
 17234 ;; Tracked objects:
 17235 ;;		On entry : 0/0
 17236 ;;		On exit  : 0/0
 17237 ;;		Unchanged: 0/0
 17238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17243 ;;Total ram usage:        0 bytes
 17244 ;; Hardware stack levels used:    1
 17245 ;; Hardware stack levels required when called:    7
 17246 ;; This function calls:
 17247 ;;		Nothing
 17248 ;; This function is called by:
 17249 ;;		_main
 17250 ;;		_BothServos
 17251 ;;		_PlatformTest
 17252 ;;		_arm
 17253 ;; This function uses a non-reentrant model
 17254 ;;
 17255                           
 17256                           	psect	text51
 17257  006030                     __ptext51:
 17258                           	opt stack 0
 17259  006030                     _stopSignals:
 17260                           	opt stack 23
 17261                           
 17262                           ;main.c: 72: LATA = 0x00;
 17263                           
 17264                           ; BSR set to: 0
 17265                           ;incstack = 0
 17266  006030  0E00               	movlw	0
 17267  006032  6E89               	movwf	3977,c	;volatile
 17268                           
 17269                           ;main.c: 73: LATB = 0x00;
 17270  006034  0E00               	movlw	0
 17271  006036  6E8A               	movwf	3978,c	;volatile
 17272                           
 17273                           ;main.c: 74: LATC = 0x00;
 17274  006038  0E00               	movlw	0
 17275  00603A  6E8B               	movwf	3979,c	;volatile
 17276                           
 17277                           ;main.c: 75: LATD = 0x00;
 17278  00603C  0E00               	movlw	0
 17279  00603E  6E8C               	movwf	3980,c	;volatile
 17280                           
 17281                           ;main.c: 76: LATE = 0x00;
 17282  006040  0E00               	movlw	0
 17283  006042  6E8D               	movwf	3981,c	;volatile
 17284                           
 17285                           ;main.c: 77: TMR1IE = 0;
 17286  006044  909D               	bcf	3997,0,c	;volatile
 17287                           
 17288                           ;main.c: 78: TMR2IE = 0;
 17289  006046  929D               	bcf	3997,1,c	;volatile
 17290                           
 17291                           ;main.c: 79: TMR3IE = 0;
 17292  006048  92A0               	bcf	4000,1,c	;volatile
 17293  00604A  0012               	return		;funcret
 17294  00604C                     __end_of_stopSignals:
 17295                           	opt stack 0
 17296                           tblptru	equ	0xFF8
 17297                           tblptrh	equ	0xFF7
 17298                           tblptrl	equ	0xFF6
 17299                           tablat	equ	0xFF5
 17300                           prodh	equ	0xFF4
 17301                           prodl	equ	0xFF3
 17302                           intcon	equ	0xFF2
 17303                           intcon2	equ	0xFF1
 17304                           intcon3	equ	0xFF0
 17305                           postinc0	equ	0xFEE
 17306                           wreg	equ	0xFE8
 17307                           postdec1	equ	0xFE5
 17308                           fsr1l	equ	0xFE1
 17309                           indf2	equ	0xFDF
 17310                           postinc2	equ	0xFDE
 17311                           postdec2	equ	0xFDD
 17312                           fsr2h	equ	0xFDA
 17313                           fsr2l	equ	0xFD9
 17314                           status	equ	0xFD8
 17315                           
 17316 ;; *************** function _initServos *****************
 17317 ;; Defined at:
 17318 ;;		line 524 in file "sort.c"
 17319 ;; Parameters:    Size  Location     Type
 17320 ;;		None
 17321 ;; Auto vars:     Size  Location     Type
 17322 ;;		None
 17323 ;; Return value:  Size  Location     Type
 17324 ;;                  1    wreg      void 
 17325 ;; Registers used:
 17326 ;;		wreg, status,2, status,0, cstack
 17327 ;; Tracked objects:
 17328 ;;		On entry : 0/0
 17329 ;;		On exit  : 0/0
 17330 ;;		Unchanged: 0/0
 17331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17336 ;;Total ram usage:        1 bytes
 17337 ;; Hardware stack levels used:    1
 17338 ;; Hardware stack levels required when called:    8
 17339 ;; This function calls:
 17340 ;;		_updateServoPosition
 17341 ;; This function is called by:
 17342 ;;		_Loading
 17343 ;;		_BothServos
 17344 ;; This function uses a non-reentrant model
 17345 ;;
 17346                           
 17347                           	psect	text52
 17348  00544A                     __ptext52:
 17349                           	opt stack 0
 17350  00544A                     _initServos:
 17351                           	opt stack 20
 17352                           
 17353                           ;sort.c: 526: updateServoPosition(1200, 1);
 17354                           
 17355                           ;incstack = 0
 17356  00544A  0E04               	movlw	4
 17357  00544C  0100               	movlb	0	; () banked
 17358  00544E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17359  005450  0EB0               	movlw	176
 17360  005452  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17361  005454  0E00               	movlw	0
 17362  005456  0100               	movlb	0	; () banked
 17363  005458  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17364  00545A  0E01               	movlw	1
 17365  00545C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17366  00545E  EC5F  F029         	call	_updateServoPosition	;wreg free
 17367                           
 17368                           ;sort.c: 527: updateServoPosition(1050, 3);
 17369  005462  0E04               	movlw	4
 17370  005464  0100               	movlb	0	; () banked
 17371  005466  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17372  005468  0E1A               	movlw	26
 17373  00546A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17374  00546C  0E00               	movlw	0
 17375  00546E  0100               	movlb	0	; () banked
 17376  005470  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17377  005472  0E03               	movlw	3
 17378  005474  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17379  005476  EC5F  F029         	call	_updateServoPosition	;wreg free
 17380                           
 17381                           ;sort.c: 528: TMR1ON = 1;
 17382  00547A  80CD               	bsf	4045,0,c	;volatile
 17383                           
 17384                           ;sort.c: 529: was_low_1 = 0;
 17385  00547C  0E00               	movlw	0
 17386  00547E  6E78               	movwf	_was_low_1+1,c	;volatile
 17387  005480  0E00               	movlw	0
 17388  005482  6E77               	movwf	_was_low_1,c	;volatile
 17389                           
 17390                           ;sort.c: 531: _delay((unsigned long)((5)*(32000000/4000.0)));
 17391  005484  0E34               	movlw	52
 17392  005486  0100               	movlb	0	; () banked
 17393  005488  6F88               	movwf	??_initServos& (0+255),b
 17394  00548A  0EF1               	movlw	241
 17395  00548C                     u12387:
 17396  00548C  2EE8               	decfsz	wreg,f,c
 17397  00548E  D7FE               	bra	u12387
 17398  005490  2F88               	decfsz	??_initServos& (0+255),f,b
 17399  005492  D7FC               	bra	u12387
 17400  005494  D000               	nop2	
 17401                           
 17402                           ;sort.c: 533: TMR3ON = 1;
 17403  005496  80B1               	bsf	4017,0,c	;volatile
 17404                           
 17405                           ;sort.c: 534: was_low_3 = 0;
 17406  005498  0E00               	movlw	0
 17407  00549A  6E7C               	movwf	_was_low_3+1,c	;volatile
 17408  00549C  0E00               	movlw	0
 17409  00549E  6E7B               	movwf	_was_low_3,c	;volatile
 17410                           
 17411                           ;sort.c: 537: _delay((unsigned long)((1)*(32000000/4000.0)));
 17412  0054A0  0E0B               	movlw	11
 17413  0054A2  0100               	movlb	0	; () banked
 17414  0054A4  6F88               	movwf	??_initServos& (0+255),b
 17415  0054A6  0E62               	movlw	98
 17416  0054A8                     u12397:
 17417  0054A8  2EE8               	decfsz	wreg,f,c
 17418  0054AA  D7FE               	bra	u12397
 17419  0054AC  2F88               	decfsz	??_initServos& (0+255),f,b
 17420  0054AE  D7FC               	bra	u12397
 17421  0054B0  F000               	nop	
 17422                           
 17423                           ;sort.c: 538: LATBbits.LATB3 = 0;
 17424  0054B2  968A               	bcf	3978,3,c	;volatile
 17425                           
 17426                           ;sort.c: 539: TMR2ON = 1;
 17427  0054B4  84CA               	bsf	4042,2,c	;volatile
 17428                           
 17429                           ;sort.c: 540: was_low_2 = 0;
 17430  0054B6  0E00               	movlw	0
 17431  0054B8  6E7A               	movwf	_was_low_2+1,c	;volatile
 17432  0054BA  0E00               	movlw	0
 17433  0054BC  6E79               	movwf	_was_low_2,c	;volatile
 17434                           
 17435                           ;sort.c: 542: LATCbits.LATC0 = 1;
 17436  0054BE  808B               	bsf	3979,0,c	;volatile
 17437  0054C0  0012               	return		;funcret
 17438  0054C2                     __end_of_initServos:
 17439                           	opt stack 0
 17440                           tblptru	equ	0xFF8
 17441                           tblptrh	equ	0xFF7
 17442                           tblptrl	equ	0xFF6
 17443                           tablat	equ	0xFF5
 17444                           prodh	equ	0xFF4
 17445                           prodl	equ	0xFF3
 17446                           intcon	equ	0xFF2
 17447                           intcon2	equ	0xFF1
 17448                           intcon3	equ	0xFF0
 17449                           postinc0	equ	0xFEE
 17450                           wreg	equ	0xFE8
 17451                           postdec1	equ	0xFE5
 17452                           fsr1l	equ	0xFE1
 17453                           indf2	equ	0xFDF
 17454                           postinc2	equ	0xFDE
 17455                           postdec2	equ	0xFDD
 17456                           fsr2h	equ	0xFDA
 17457                           fsr2l	equ	0xFD9
 17458                           status	equ	0xFD8
 17459                           
 17460 ;; *************** function _updateServoPosition *****************
 17461 ;; Defined at:
 17462 ;;		line 655 in file "sort.c"
 17463 ;; Parameters:    Size  Location     Type
 17464 ;;  time_us         2    0[BANK0 ] int 
 17465 ;;  timer           2    2[BANK0 ] int 
 17466 ;; Auto vars:     Size  Location     Type
 17467 ;;  my_time         2    6[BANK0 ] unsigned int 
 17468 ;; Return value:  Size  Location     Type
 17469 ;;                  1    wreg      void 
 17470 ;; Registers used:
 17471 ;;		wreg, status,2, status,0
 17472 ;; Tracked objects:
 17473 ;;		On entry : 0/0
 17474 ;;		On exit  : 0/0
 17475 ;;		Unchanged: 0/0
 17476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17477 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17479 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17480 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17481 ;;Total ram usage:        8 bytes
 17482 ;; Hardware stack levels used:    1
 17483 ;; Hardware stack levels required when called:    7
 17484 ;; This function calls:
 17485 ;;		Nothing
 17486 ;; This function is called by:
 17487 ;;		_Distribution
 17488 ;;		_initServos
 17489 ;;		_actuatorTest
 17490 ;;		_BothServos
 17491 ;; This function uses a non-reentrant model
 17492 ;;
 17493                           
 17494                           	psect	text53
 17495  0052BE                     __ptext53:
 17496                           	opt stack 0
 17497  0052BE                     _updateServoPosition:
 17498                           	opt stack 20
 17499                           
 17500                           ;sort.c: 656: unsigned int my_time = 65535 - time_us;
 17501                           
 17502                           ;incstack = 0
 17503  0052BE  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 17504  0052C2  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 17505  0052C6  0100               	movlb	0	; () banked
 17506  0052C8  1F84               	comf	??_updateServoPosition& (0+255),f,b
 17507  0052CA  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 17508  0052CC  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 17509  0052CE  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 17510  0052D0  0EFF               	movlw	255
 17511  0052D2  0100               	movlb	0	; () banked
 17512  0052D4  2584               	addwf	??_updateServoPosition& (0+255),w,b
 17513  0052D6  0100               	movlb	0	; () banked
 17514  0052D8  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 17515  0052DA  0EFF               	movlw	255
 17516  0052DC  0100               	movlb	0	; () banked
 17517  0052DE  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 17518  0052E0  0100               	movlb	0	; () banked
 17519  0052E2  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 17520                           
 17521                           ;sort.c: 657: switch(timer){
 17522  0052E4  D01D               	goto	l7162
 17523  0052E6                     l7156:
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;sort.c: 659: servoTimes[0] = my_time >> 8;
 17527  0052E6  0100               	movlb	0	; () banked
 17528  0052E8  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17529  0052EA  0101               	movlb	1	; () banked
 17530  0052EC  6F1C               	movwf	_servoTimes& (0+255),b
 17531  0052EE  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 17532                           
 17533                           ;sort.c: 660: servoTimes[1] = my_time & 0xFF;
 17534  0052F0  0100               	movlb	0	; () banked
 17535  0052F2  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17536  0052F4  0101               	movlb	1	; () banked
 17537  0052F6  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 17538  0052F8  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 17539                           
 17540                           ; BSR set to: 1
 17541                           ;sort.c: 662: pan_servo_state = time_us;
 17542  0052FA  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 17543  0052FE  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 17544  005302                     l967:
 17545                           
 17546                           ;sort.c: 664: servoTimes[2] = my_time >> 8;
 17547  005302  0100               	movlb	0	; () banked
 17548  005304  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17549  005306  0101               	movlb	1	; () banked
 17550  005308  6F20               	movwf	(_servoTimes+4)& (0+255),b
 17551  00530A  6B21               	clrf	(_servoTimes+5)& (0+255),b
 17552                           
 17553                           ;sort.c: 665: servoTimes[3] = my_time & 0xFF;
 17554  00530C  0100               	movlb	0	; () banked
 17555  00530E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17556  005310  0101               	movlb	1	; () banked
 17557  005312  6F22               	movwf	(_servoTimes+6)& (0+255),b
 17558  005314  6B23               	clrf	(_servoTimes+7)& (0+255),b
 17559                           
 17560                           ; BSR set to: 1
 17561                           ;sort.c: 667: tilt_servo_state = time_us;
 17562  005316  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 17563  00531A  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 17564                           
 17565                           ;sort.c: 668: }
 17566  00531E  0012               	return	
 17567  005320                     l7162:
 17568  005320  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 17569  005324  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 17570                           
 17571                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17572                           ; Switch size 1, requested type "space"
 17573                           ; Number of cases is 1, Range of values is 0 to 0
 17574                           ; switch strategies available:
 17575                           ; Name         Instructions Cycles
 17576                           ; simple_byte            4     3 (average)
 17577                           ;	Chosen strategy is simple_byte
 17578  005328  0100               	movlb	0	; () banked
 17579  00532A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 17580  00532C  0A00               	xorlw	0	; case 0
 17581  00532E  A4D8               	btfss	status,2,c
 17582  005330  0012               	return	
 17583                           
 17584                           ; BSR set to: 0
 17585                           ; Switch size 1, requested type "space"
 17586                           ; Number of cases is 2, Range of values is 1 to 3
 17587                           ; switch strategies available:
 17588                           ; Name         Instructions Cycles
 17589                           ; simple_byte            7     4 (average)
 17590                           ;	Chosen strategy is simple_byte
 17591  005332  0100               	movlb	0	; () banked
 17592  005334  5184               	movf	??_updateServoPosition& (0+255),w,b
 17593  005336  0A01               	xorlw	1	; case 1
 17594  005338  B4D8               	btfsc	status,2,c
 17595  00533A  D7D5               	goto	l7156
 17596  00533C  0A02               	xorlw	2	; case 3
 17597  00533E  A4D8               	btfss	status,2,c
 17598  005340  0012               	return	
 17599  005342  D7DF               	goto	l967
 17600  005344                     __end_of_updateServoPosition:
 17601                           	opt stack 0
 17602                           tblptru	equ	0xFF8
 17603                           tblptrh	equ	0xFF7
 17604                           tblptrl	equ	0xFF6
 17605                           tablat	equ	0xFF5
 17606                           prodh	equ	0xFF4
 17607                           prodl	equ	0xFF3
 17608                           intcon	equ	0xFF2
 17609                           intcon2	equ	0xFF1
 17610                           intcon3	equ	0xFF0
 17611                           postinc0	equ	0xFEE
 17612                           wreg	equ	0xFE8
 17613                           postdec1	equ	0xFE5
 17614                           fsr1l	equ	0xFE1
 17615                           indf2	equ	0xFDF
 17616                           postinc2	equ	0xFDE
 17617                           postdec2	equ	0xFDD
 17618                           fsr2h	equ	0xFDA
 17619                           fsr2l	equ	0xFD9
 17620                           status	equ	0xFD8
 17621                           
 17622 ;; *************** function _BlockerTest *****************
 17623 ;; Defined at:
 17624 ;;		line 605 in file "Test.c"
 17625 ;; Parameters:    Size  Location     Type
 17626 ;;		None
 17627 ;; Auto vars:     Size  Location     Type
 17628 ;;  i               2   45[BANK0 ] int 
 17629 ;;  cond_flag       2   51[BANK0 ] int 
 17630 ;;  cam_flag        2   49[BANK0 ] int 
 17631 ;;  res             2   47[BANK0 ] int 
 17632 ;; Return value:  Size  Location     Type
 17633 ;;                  1    wreg      void 
 17634 ;; Registers used:
 17635 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17636 ;; Tracked objects:
 17637 ;;		On entry : 0/0
 17638 ;;		On exit  : 0/0
 17639 ;;		Unchanged: 0/0
 17640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17642 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;Total ram usage:       10 bytes
 17646 ;; Hardware stack levels used:    1
 17647 ;; Hardware stack levels required when called:   10
 17648 ;; This function calls:
 17649 ;;		_lcdInst
 17650 ;;		_printf
 17651 ;;		_readADC
 17652 ;; This function is called by:
 17653 ;;		_Test
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           	psect	text54
 17658  00413C                     __ptext54:
 17659                           	opt stack 0
 17660  00413C                     _BlockerTest:
 17661                           	opt stack 19
 17662                           
 17663                           ;Test.c: 606: readADC(2);
 17664                           
 17665                           ;incstack = 0
 17666  00413C  0E02               	movlw	2
 17667  00413E  EC5C  F02F         	call	_readADC
 17668                           
 17669                           ;Test.c: 607: int res = ADRESH<<8 | ADRESL;
 17670  004142  50C3               	movf	4035,w,c	;volatile
 17671  004144  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17672  004148  0100               	movlb	0	; () banked
 17673  00414A  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17674  00414C  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17675  004150  0100               	movlb	0	; () banked
 17676  004152  6BAB               	clrf	??_BlockerTest& (0+255),b
 17677  004154  0100               	movlb	0	; () banked
 17678  004156  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17679  004158  0100               	movlb	0	; () banked
 17680  00415A  6FAF               	movwf	BlockerTest@res& (0+255),b
 17681  00415C  0100               	movlb	0	; () banked
 17682  00415E  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17683  004160  0100               	movlb	0	; () banked
 17684  004162  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17685                           
 17686                           ; BSR set to: 0
 17687                           ;Test.c: 609: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17688  004164  0E01               	movlw	1
 17689  004166  EC63  F030         	call	_lcdInst
 17690  00416A  0E68               	movlw	104
 17691  00416C  0100               	movlb	0	; () banked
 17692  00416E  6FAB               	movwf	??_BlockerTest& (0+255),b
 17693  004170  0EE4               	movlw	228
 17694  004172                     u12407:
 17695  004172  2EE8               	decfsz	wreg,f,c
 17696  004174  D7FE               	bra	u12407
 17697  004176  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 17698  004178  D7FC               	bra	u12407
 17699  00417A  F000               	nop	
 17700  00417C  0E80               	movlw	128
 17701  00417E  EC63  F030         	call	_lcdInst
 17702                           
 17703                           ;Test.c: 610: printf("D:RET|2:C %d  ", res);
 17704  004182  0E89               	movlw	low STR_121
 17705  004184  0100               	movlb	0	; () banked
 17706  004186  6F8E               	movwf	printf@f& (0+255),b
 17707  004188  0EFE               	movlw	high STR_121
 17708  00418A  0100               	movlb	0	; () banked
 17709  00418C  6F8F               	movwf	(printf@f+1)& (0+255),b
 17710  00418E  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17711  004192  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17712  004196  ECE7  F00E         	call	_printf	;wreg free
 17713                           
 17714                           ;Test.c: 611: lcdInst(0b11000000);;
 17715  00419A  0EC0               	movlw	192
 17716  00419C  EC63  F030         	call	_lcdInst
 17717                           
 17718                           ;Test.c: 612: printf("OTHER: CAM TOGGLE");
 17719  0041A0  0E49               	movlw	low STR_122
 17720  0041A2  0100               	movlb	0	; () banked
 17721  0041A4  6F8E               	movwf	printf@f& (0+255),b
 17722  0041A6  0EFB               	movlw	high STR_122
 17723  0041A8  0100               	movlb	0	; () banked
 17724  0041AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 17725  0041AC  ECE7  F00E         	call	_printf	;wreg free
 17726                           
 17727                           ;Test.c: 613: int cam_flag = 1;
 17728  0041B0  0E00               	movlw	0
 17729  0041B2  0100               	movlb	0	; () banked
 17730  0041B4  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17731  0041B6  0E01               	movlw	1
 17732  0041B8  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17733                           
 17734                           ; BSR set to: 0
 17735                           ;Test.c: 614: int cond_flag = 0;
 17736  0041BA  0E00               	movlw	0
 17737  0041BC  0100               	movlb	0	; () banked
 17738  0041BE  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17739  0041C0  0E00               	movlw	0
 17740  0041C2  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;Test.c: 617: while(PORTBbits.RB1 == 0){
 17744                           
 17745                           ;Test.c: 616: while(1){
 17746  0041C4  D023               	goto	l9532
 17747  0041C6                     l9524:
 17748                           
 17749                           ;Test.c: 618: readADC(2);
 17750  0041C6  0E02               	movlw	2
 17751  0041C8  EC5C  F02F         	call	_readADC
 17752                           
 17753                           ;Test.c: 619: res = ADRESH<<8 | ADRESL;
 17754  0041CC  50C3               	movf	4035,w,c	;volatile
 17755  0041CE  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17756  0041D2  0100               	movlb	0	; () banked
 17757  0041D4  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17758  0041D6  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17759  0041DA  0100               	movlb	0	; () banked
 17760  0041DC  6BAB               	clrf	??_BlockerTest& (0+255),b
 17761  0041DE  0100               	movlb	0	; () banked
 17762  0041E0  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17763  0041E2  0100               	movlb	0	; () banked
 17764  0041E4  6FAF               	movwf	BlockerTest@res& (0+255),b
 17765  0041E6  0100               	movlb	0	; () banked
 17766  0041E8  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17767  0041EA  0100               	movlb	0	; () banked
 17768  0041EC  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17769                           
 17770                           ; BSR set to: 0
 17771                           ;Test.c: 620: lcdInst(0b10000000);;
 17772  0041EE  0E80               	movlw	128
 17773  0041F0  EC63  F030         	call	_lcdInst
 17774                           
 17775                           ;Test.c: 621: printf("D:RET|2:C %d  ", res);
 17776  0041F4  0E89               	movlw	low STR_121
 17777  0041F6  0100               	movlb	0	; () banked
 17778  0041F8  6F8E               	movwf	printf@f& (0+255),b
 17779  0041FA  0EFE               	movlw	high STR_121
 17780  0041FC  0100               	movlb	0	; () banked
 17781  0041FE  6F8F               	movwf	(printf@f+1)& (0+255),b
 17782  004200  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17783  004204  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17784  004208  ECE7  F00E         	call	_printf	;wreg free
 17785  00420C                     l9532:
 17786  00420C  A281               	btfss	3969,1,c	;volatile
 17787  00420E  D7DB               	goto	l9524
 17788                           
 17789                           ;Test.c: 622: }
 17790                           ;Test.c: 623: if(PORTB >> 4 == 0b1111){
 17791  004210  3881               	swapf	3969,w,c	;volatile
 17792  004212  0B0F               	andlw	15
 17793  004214  0A0F               	xorlw	15
 17794  004216  B4D8               	btfsc	status,2,c
 17795  004218  0012               	return	
 17796                           
 17797                           ;Test.c: 626: else if(PORTB >> 4 == 0b0001){
 17798                           
 17799                           ;Test.c: 625: }
 17800                           
 17801                           ;Test.c: 624: break;
 17802  00421A  3881               	swapf	3969,w,c	;volatile
 17803  00421C  0B0F               	andlw	15
 17804  00421E  06E8               	decf	wreg,f,c
 17805  004220  A4D8               	btfss	status,2,c
 17806  004222  D016               	goto	l9550
 17807                           
 17808                           ;Test.c: 627: if(cond_flag){
 17809  004224  0100               	movlb	0	; () banked
 17810  004226  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17811  004228  0100               	movlb	0	; () banked
 17812  00422A  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17813  00422C  B4D8               	btfsc	status,2,c
 17814  00422E  D007               	goto	l1509
 17815                           
 17816                           ; BSR set to: 0
 17817                           ;Test.c: 628: LATCbits.LATC7 = 1;
 17818  004230  8E8B               	bsf	3979,7,c	;volatile
 17819  004232  D006               	goto	l9548
 17820  004234                     u9171:
 17821  004234  0E01               	movlw	1
 17822  004236                     u9180:
 17823  004236  0100               	movlb	0	; () banked
 17824  004238  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17825  00423A  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17826                           
 17827                           ;Test.c: 630: }
 17828  00423C  D05F               	goto	l9578
 17829  00423E                     l1509:
 17830                           
 17831                           ; BSR set to: 0
 17832                           ;Test.c: 631: else{
 17833                           ;Test.c: 632: LATCbits.LATC7 = 0;
 17834  00423E  9E8B               	bcf	3979,7,c	;volatile
 17835  004240                     l9548:
 17836                           
 17837                           ; BSR set to: 0
 17838                           ;Test.c: 633: cond_flag = !cond_flag;
 17839  004240  0100               	movlb	0	; () banked
 17840  004242  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17841  004244  0100               	movlb	0	; () banked
 17842  004246  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17843  004248  B4D8               	btfsc	status,2,c
 17844  00424A  D7F4               	goto	u9171
 17845  00424C  0E00               	movlw	0
 17846  00424E  D7F3               	goto	u9180
 17847  004250                     l9550:
 17848                           
 17849                           ;Test.c: 636: else{
 17850                           ;Test.c: 637: if(cam_flag){
 17851  004250  0100               	movlb	0	; () banked
 17852  004252  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17853  004254  0100               	movlb	0	; () banked
 17854  004256  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17855  004258  B4D8               	btfsc	status,2,c
 17856  00425A  D007               	goto	l9556
 17857                           
 17858                           ; BSR set to: 0
 17859                           ;Test.c: 638: LATCbits.LATC0 = 1;
 17860  00425C  808B               	bsf	3979,0,c	;volatile
 17861  00425E  D023               	goto	l9568
 17862  004260                     u9221:
 17863  004260  0E01               	movlw	1
 17864  004262                     u9230:
 17865  004262  0100               	movlb	0	; () banked
 17866  004264  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17867  004266  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17868                           
 17869                           ;Test.c: 640: }
 17870  004268  D049               	goto	l9578
 17871  00426A                     l9556:
 17872                           
 17873                           ; BSR set to: 0
 17874                           ;Test.c: 641: else{
 17875                           ;Test.c: 642: for(int i=0;i<5000;i++)
 17876  00426A  0E00               	movlw	0
 17877  00426C  0100               	movlb	0	; () banked
 17878  00426E  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17879  004270  0E00               	movlw	0
 17880  004272  6FAD               	movwf	BlockerTest@i& (0+255),b
 17881  004274                     l9558:
 17882                           
 17883                           ; BSR set to: 0
 17884  004274  0100               	movlb	0	; () banked
 17885  004276  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17886  004278  D008               	goto	l1514
 17887  00427A  0E88               	movlw	136
 17888  00427C  0100               	movlb	0	; () banked
 17889  00427E  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17890  004280  0E13               	movlw	19
 17891  004282  0100               	movlb	0	; () banked
 17892  004284  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17893  004286  B0D8               	btfsc	status,0,c
 17894  004288  D00D               	goto	l1515
 17895  00428A                     l1514:
 17896                           
 17897                           ; BSR set to: 0
 17898                           ;Test.c: 643: {
 17899                           ;Test.c: 644: LATCbits.LATC0 = 1;
 17900  00428A  808B               	bsf	3979,0,c	;volatile
 17901                           
 17902                           ; BSR set to: 0
 17903                           ;Test.c: 645: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17904  00428C  0E1A               	movlw	26
 17905  00428E                     u12417:
 17906  00428E  2EE8               	decfsz	wreg,f,c
 17907  004290  D7FE               	bra	u12417
 17908  004292  D000               	nop2	
 17909                           
 17910                           ;Test.c: 646: LATCbits.LATC0 = 0;
 17911  004294  908B               	bcf	3979,0,c	;volatile
 17912                           
 17913                           ;Test.c: 647: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17914  004296  0EF0               	movlw	240
 17915  004298                     u12427:
 17916  004298  2EE8               	decfsz	wreg,f,c
 17917  00429A  D7FE               	bra	u12427
 17918  00429C  0100               	movlb	0	; () banked
 17919  00429E  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17920  0042A0  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17921  0042A2  D7E8               	goto	l9558
 17922  0042A4                     l1515:
 17923                           
 17924                           ; BSR set to: 0
 17925                           ;Test.c: 648: }
 17926                           ;Test.c: 649: LATCbits.LATC0 = 0;
 17927  0042A4  908B               	bcf	3979,0,c	;volatile
 17928  0042A6                     l9568:
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;Test.c: 650: cam_flag = !cam_flag;
 17932  0042A6  0100               	movlb	0	; () banked
 17933  0042A8  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17934  0042AA  0100               	movlb	0	; () banked
 17935  0042AC  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17936  0042AE  B4D8               	btfsc	status,2,c
 17937  0042B0  D7D7               	goto	u9221
 17938  0042B2  0E00               	movlw	0
 17939  0042B4  D7D6               	goto	u9230
 17940  0042B6                     l9570:
 17941                           
 17942                           ;Test.c: 655: readADC(2);
 17943  0042B6  0E02               	movlw	2
 17944  0042B8  EC5C  F02F         	call	_readADC
 17945                           
 17946                           ;Test.c: 656: res = ADRESH<<8 | ADRESL;
 17947  0042BC  50C3               	movf	4035,w,c	;volatile
 17948  0042BE  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17949  0042C2  0100               	movlb	0	; () banked
 17950  0042C4  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17951  0042C6  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17952  0042CA  0100               	movlb	0	; () banked
 17953  0042CC  6BAB               	clrf	??_BlockerTest& (0+255),b
 17954  0042CE  0100               	movlb	0	; () banked
 17955  0042D0  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17956  0042D2  0100               	movlb	0	; () banked
 17957  0042D4  6FAF               	movwf	BlockerTest@res& (0+255),b
 17958  0042D6  0100               	movlb	0	; () banked
 17959  0042D8  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17960  0042DA  0100               	movlb	0	; () banked
 17961  0042DC  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;Test.c: 657: lcdInst(0b10000000);;
 17965  0042DE  0E80               	movlw	128
 17966  0042E0  EC63  F030         	call	_lcdInst
 17967                           
 17968                           ;Test.c: 658: printf("D:RET|2:C %d  ", res);
 17969  0042E4  0E89               	movlw	low STR_121
 17970  0042E6  0100               	movlb	0	; () banked
 17971  0042E8  6F8E               	movwf	printf@f& (0+255),b
 17972  0042EA  0EFE               	movlw	high STR_121
 17973  0042EC  0100               	movlb	0	; () banked
 17974  0042EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 17975  0042F0  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17976  0042F4  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17977  0042F8  ECE7  F00E         	call	_printf	;wreg free
 17978  0042FC                     l9578:
 17979  0042FC  A281               	btfss	3969,1,c	;volatile
 17980  0042FE  D786               	goto	l9532
 17981  004300  D7DA               	goto	l9570
 17982  004302                     __end_of_BlockerTest:
 17983                           	opt stack 0
 17984                           tblptru	equ	0xFF8
 17985                           tblptrh	equ	0xFF7
 17986                           tblptrl	equ	0xFF6
 17987                           tablat	equ	0xFF5
 17988                           prodh	equ	0xFF4
 17989                           prodl	equ	0xFF3
 17990                           intcon	equ	0xFF2
 17991                           intcon2	equ	0xFF1
 17992                           intcon3	equ	0xFF0
 17993                           postinc0	equ	0xFEE
 17994                           wreg	equ	0xFE8
 17995                           postdec1	equ	0xFE5
 17996                           fsr1l	equ	0xFE1
 17997                           indf2	equ	0xFDF
 17998                           postinc2	equ	0xFDE
 17999                           postdec2	equ	0xFDD
 18000                           fsr2h	equ	0xFDA
 18001                           fsr2l	equ	0xFD9
 18002                           status	equ	0xFD8
 18003                           
 18004 ;; *************** function _readADC *****************
 18005 ;; Defined at:
 18006 ;;		line 15 in file "ADCFunctionality.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;  channel         1    wreg     unsigned char 
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;  channel         1    1[BANK0 ] unsigned char 
 18011 ;; Return value:  Size  Location     Type
 18012 ;;                  1    wreg      void 
 18013 ;; Registers used:
 18014 ;;		wreg, status,2, status,0, cstack
 18015 ;; Tracked objects:
 18016 ;;		On entry : 0/0
 18017 ;;		On exit  : 0/0
 18018 ;;		Unchanged: 0/0
 18019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18024 ;;Total ram usage:        2 bytes
 18025 ;; Hardware stack levels used:    1
 18026 ;; Hardware stack levels required when called:    7
 18027 ;; This function calls:
 18028 ;;		Nothing
 18029 ;; This function is called by:
 18030 ;;		_readIR
 18031 ;;		_readMAG
 18032 ;;		_readCOND
 18033 ;;		_sensorTest
 18034 ;;		_PlatformTest
 18035 ;;		_BlockerTest
 18036 ;; This function uses a non-reentrant model
 18037 ;;
 18038                           
 18039                           	psect	text55
 18040  005EB8                     __ptext55:
 18041                           	opt stack 0
 18042  005EB8                     _readADC:
 18043                           	opt stack 20
 18044                           
 18045                           ;incstack = 0
 18046                           ;readADC@channel stored from wreg
 18047  005EB8  0100               	movlb	0	; () banked
 18048  005EBA  6F81               	movwf	readADC@channel& (0+255),b
 18049                           
 18050                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 18051  005EBC  0100               	movlb	0	; () banked
 18052  005EBE  4581               	rlncf	readADC@channel& (0+255),w,b
 18053  005EC0  46E8               	rlncf	wreg,f,c
 18054  005EC2  0BFC               	andlw	252
 18055  005EC4  6EC2               	movwf	4034,c	;volatile
 18056                           
 18057                           ; BSR set to: 0
 18058                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 18059  005EC6  80C2               	bsf	4034,0,c	;volatile
 18060                           
 18061                           ; BSR set to: 0
 18062                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 18063  005EC8  82C2               	bsf	4034,1,c	;volatile
 18064                           
 18065                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 18066  005ECA  D009               	goto	l6784
 18067  005ECC                     l6782:
 18068  005ECC  0E34               	movlw	52
 18069  005ECE  0100               	movlb	0	; () banked
 18070  005ED0  6F80               	movwf	??_readADC& (0+255),b
 18071  005ED2  0EF1               	movlw	241
 18072  005ED4                     u12437:
 18073  005ED4  2EE8               	decfsz	wreg,f,c
 18074  005ED6  D7FE               	bra	u12437
 18075  005ED8  2F80               	decfsz	??_readADC& (0+255),f,b
 18076  005EDA  D7FC               	bra	u12437
 18077  005EDC  D000               	nop2	
 18078  005EDE                     l6784:
 18079  005EDE  A2C2               	btfss	4034,1,c	;volatile
 18080  005EE0  0012               	return	
 18081  005EE2  D7F4               	goto	l6782
 18082  005EE4                     __end_of_readADC:
 18083                           	opt stack 0
 18084                           tblptru	equ	0xFF8
 18085                           tblptrh	equ	0xFF7
 18086                           tblptrl	equ	0xFF6
 18087                           tablat	equ	0xFF5
 18088                           prodh	equ	0xFF4
 18089                           prodl	equ	0xFF3
 18090                           intcon	equ	0xFF2
 18091                           intcon2	equ	0xFF1
 18092                           intcon3	equ	0xFF0
 18093                           postinc0	equ	0xFEE
 18094                           wreg	equ	0xFE8
 18095                           postdec1	equ	0xFE5
 18096                           fsr1l	equ	0xFE1
 18097                           indf2	equ	0xFDF
 18098                           postinc2	equ	0xFDE
 18099                           postdec2	equ	0xFDD
 18100                           fsr2h	equ	0xFDA
 18101                           fsr2l	equ	0xFD9
 18102                           status	equ	0xFD8
 18103                           
 18104 ;; *************** function _printf *****************
 18105 ;; Defined at:
 18106 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18107 ;; Parameters:    Size  Location     Type
 18108 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 18109 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 18110 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 18111 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 18112 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 18113 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 18114 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 18115 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 18116 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 18117 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 18118 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 18119 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 18120 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 18121 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 18122 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 18123 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 18124 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 18125 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 18126 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 18127 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 18128 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 18129 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 18130 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 18131 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 18132 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 18133 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 18134 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 18135 ;; Auto vars:     Size  Location     Type
 18136 ;;  tmpval          4    0        struct .
 18137 ;;  width           2   41[BANK0 ] int 
 18138 ;;  val             2   37[BANK0 ] unsigned int 
 18139 ;;  len             2   35[BANK0 ] unsigned int 
 18140 ;;  ap              2   33[BANK0 ] PTR void [1]
 18141 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18142 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 18143 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 18144 ;;  c               1   40[BANK0 ] char 
 18145 ;;  flag            1   39[BANK0 ] unsigned char 
 18146 ;;  prec            1   30[BANK0 ] char 
 18147 ;; Return value:  Size  Location     Type
 18148 ;;                  2   14[BANK0 ] int 
 18149 ;; Registers used:
 18150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18151 ;; Tracked objects:
 18152 ;;		On entry : 0/0
 18153 ;;		On exit  : 0/0
 18154 ;;		Unchanged: 0/0
 18155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18156 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18157 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18158 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18159 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18160 ;;Total ram usage:       29 bytes
 18161 ;; Hardware stack levels used:    1
 18162 ;; Hardware stack levels required when called:    9
 18163 ;; This function calls:
 18164 ;;		___lwdiv
 18165 ;;		___lwmod
 18166 ;;		___wmul
 18167 ;;		_isdigit
 18168 ;;		_putch
 18169 ;; This function is called by:
 18170 ;;		_UI
 18171 ;;		_change_state_to_menu_start
 18172 ;;		_change_state_to_menu_12
 18173 ;;		_change_state_to_menu_22
 18174 ;;		_printRTC
 18175 ;;		_EEPROM_write
 18176 ;;		_Test
 18177 ;;		_algorithmTest
 18178 ;;		_sensorTest
 18179 ;;		_actuatorTest
 18180 ;;		_BothServos
 18181 ;;		_PortTestDC
 18182 ;;		_PlatformTest
 18183 ;;		_SpeedTest
 18184 ;;		_BlockerTest
 18185 ;;		_arm
 18186 ;;		_PortTestPusher
 18187 ;; This function uses a non-reentrant model
 18188 ;;
 18189                           
 18190                           	psect	text56
 18191  001DCE                     __ptext56:
 18192                           	opt stack 0
 18193  001DCE                     _printf:
 18194                           	opt stack 18
 18195                           
 18196                           ;doprnt.c: 466: va_list ap;
 18197                           ;doprnt.c: 499: signed char c;
 18198                           ;doprnt.c: 501: int width;
 18199                           ;doprnt.c: 506: signed char prec;
 18200                           ;doprnt.c: 508: unsigned char flag;
 18201                           ;doprnt.c: 523: union {
 18202                           ;doprnt.c: 524: unsigned long vd;
 18203                           ;doprnt.c: 525: double integ;
 18204                           ;doprnt.c: 526: } tmpval;
 18205                           ;doprnt.c: 528: unsigned int val;
 18206                           ;doprnt.c: 529: unsigned len;
 18207                           ;doprnt.c: 530: const char * cp;
 18208                           ;doprnt.c: 533: *ap = __va_start();
 18209                           
 18210                           ;incstack = 0
 18211  001DCE  0E90               	movlw	low (?_printf+2)
 18212  001DD0  0100               	movlb	0	; () banked
 18213  001DD2  6FA1               	movwf	printf@ap& (0+255),b
 18214  001DD4  0E00               	movlw	high (?_printf+2)
 18215  001DD6  0100               	movlb	0	; () banked
 18216  001DD8  6FA2               	movwf	(printf@ap+1)& (0+255),b
 18217                           
 18218                           ;doprnt.c: 536: while(c = *f++) {
 18219  001DDA  D205               	goto	l7116
 18220  001DDC                     l6986:
 18221                           
 18222                           ; BSR set to: 0
 18223                           ;doprnt.c: 538: if(c != '%')
 18224  001DDC  0E25               	movlw	37
 18225  001DDE  0100               	movlb	0	; () banked
 18226  001DE0  19A8               	xorwf	printf@c& (0+255),w,b
 18227  001DE2  B4D8               	btfsc	status,2,c
 18228  001DE4  D005               	goto	l6990
 18229                           
 18230                           ; BSR set to: 0
 18231                           ;doprnt.c: 540: {
 18232                           ;doprnt.c: 541: (putch(c) );
 18233  001DE6  0100               	movlb	0	; () banked
 18234  001DE8  51A8               	movf	printf@c& (0+255),w,b
 18235  001DEA  EC5B  F030         	call	_putch
 18236                           
 18237                           ;doprnt.c: 542: continue;
 18238  001DEE  D1FB               	goto	l7116
 18239  001DF0                     l6990:
 18240                           
 18241                           ;doprnt.c: 543: }
 18242                           ;doprnt.c: 546: width = 0;
 18243  001DF0  0E00               	movlw	0
 18244  001DF2  0100               	movlb	0	; () banked
 18245  001DF4  6FAA               	movwf	(printf@width+1)& (0+255),b
 18246  001DF6  0E00               	movlw	0
 18247  001DF8  6FA9               	movwf	printf@width& (0+255),b
 18248                           
 18249                           ;doprnt.c: 548: flag = 0;
 18250  001DFA  0E00               	movlw	0
 18251  001DFC  0100               	movlb	0	; () banked
 18252  001DFE  6FA7               	movwf	printf@flag& (0+255),b
 18253                           
 18254                           ; BSR set to: 0
 18255                           ;doprnt.c: 551: switch(*f) {
 18256                           
 18257                           ;doprnt.c: 550: for(;;) {
 18258  001E00  D005               	goto	l6996
 18259  001E02                     l6992:
 18260                           
 18261                           ;doprnt.c: 580: flag |= 0x04;
 18262  001E02  0100               	movlb	0	; () banked
 18263  001E04  85A7               	bsf	printf@flag& (0+255),2,b
 18264                           
 18265                           ;doprnt.c: 581: f++;
 18266  001E06  0100               	movlb	0	; () banked
 18267  001E08  4B8E               	infsnz	printf@f& (0+255),f,b
 18268  001E0A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18269  001E0C                     l6996:
 18270  001E0C  C08E  FFF6         	movff	printf@f,tblptrl
 18271  001E10  C08F  FFF7         	movff	printf@f+1,tblptrh
 18272  001E14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18273  001E14  6AF8               	clrf	tblptru,c
 18274  001E16                     	endif
 18275  001E16                     	if	0	;tblptru may be non-zero
 18276  001E16                     	endif
 18277  001E16  0008               	tblrd		*
 18278  001E18  50F5               	movf	tablat,w,c
 18279                           
 18280                           ; Switch size 1, requested type "space"
 18281                           ; Number of cases is 1, Range of values is 48 to 48
 18282                           ; switch strategies available:
 18283                           ; Name         Instructions Cycles
 18284                           ; simple_byte            4     3 (average)
 18285                           ;	Chosen strategy is simple_byte
 18286  001E1A  0A30               	xorlw	48	; case 48
 18287  001E1C  B4D8               	btfsc	status,2,c
 18288  001E1E  D7F1               	goto	l6992
 18289                           
 18290                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18291                           
 18292                           ;doprnt.c: 586: }
 18293                           
 18294                           ;doprnt.c: 585: break;
 18295  001E20  C08E  FFF6         	movff	printf@f,tblptrl
 18296  001E24  C08F  FFF7         	movff	printf@f+1,tblptrh
 18297  001E28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18298  001E28  6AF8               	clrf	tblptru,c
 18299  001E2A                     	endif
 18300  001E2A                     	if	0	;tblptru may be non-zero
 18301  001E2A                     	endif
 18302  001E2A  0008               	tblrd		*
 18303  001E2C  50F5               	movf	tablat,w,c
 18304  001E2E  EC72  F02F         	call	_isdigit
 18305  001E32  A0D8               	btfss	status,0,c
 18306  001E34  D0D2               	goto	l7044
 18307                           
 18308                           ;doprnt.c: 598: width = 0;
 18309  001E36  0E00               	movlw	0
 18310  001E38  0100               	movlb	0	; () banked
 18311  001E3A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18312  001E3C  0E00               	movlw	0
 18313  001E3E  6FA9               	movwf	printf@width& (0+255),b
 18314  001E40                     l7002:
 18315                           
 18316                           ;doprnt.c: 600: width *= 10;
 18317  001E40  C0A9  F080         	movff	printf@width,___wmul@multiplier
 18318  001E44  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 18319  001E48  0E00               	movlw	0
 18320  001E4A  0100               	movlb	0	; () banked
 18321  001E4C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18322  001E4E  0E0A               	movlw	10
 18323  001E50  6F82               	movwf	___wmul@multiplicand& (0+255),b
 18324  001E52  ECDC  F02D         	call	___wmul	;wreg free
 18325  001E56  C080  F0A9         	movff	?___wmul,printf@width
 18326  001E5A  C081  F0AA         	movff	?___wmul+1,printf@width+1
 18327                           
 18328                           ;doprnt.c: 601: width += *f++ - '0';
 18329  001E5E  0ED0               	movlw	208
 18330  001E60  0100               	movlb	0	; () banked
 18331  001E62  6F9A               	movwf	??_printf& (0+255),b
 18332  001E64  0EFF               	movlw	255
 18333  001E66  0100               	movlb	0	; () banked
 18334  001E68  6F9B               	movwf	(??_printf+1)& (0+255),b
 18335  001E6A  C08E  FFF6         	movff	printf@f,tblptrl
 18336  001E6E  C08F  FFF7         	movff	printf@f+1,tblptrh
 18337  001E72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18338  001E72  6AF8               	clrf	tblptru,c
 18339  001E74                     	endif
 18340  001E74                     	if	0	;tblptru may be non-zero
 18341  001E74                     	endif
 18342  001E74  0008               	tblrd		*
 18343  001E76  50F5               	movf	tablat,w,c
 18344  001E78  0100               	movlb	0	; () banked
 18345  001E7A  6F9C               	movwf	(??_printf+2)& (0+255),b
 18346  001E7C  6B9D               	clrf	(??_printf+3)& (0+255),b
 18347  001E7E  0100               	movlb	0	; () banked
 18348  001E80  519A               	movf	??_printf& (0+255),w,b
 18349  001E82  0100               	movlb	0	; () banked
 18350  001E84  279C               	addwf	(??_printf+2)& (0+255),f,b
 18351  001E86  0100               	movlb	0	; () banked
 18352  001E88  519B               	movf	(??_printf+1)& (0+255),w,b
 18353  001E8A  0100               	movlb	0	; () banked
 18354  001E8C  239D               	addwfc	(??_printf+3)& (0+255),f,b
 18355  001E8E  0100               	movlb	0	; () banked
 18356  001E90  519C               	movf	(??_printf+2)& (0+255),w,b
 18357  001E92  0100               	movlb	0	; () banked
 18358  001E94  27A9               	addwf	printf@width& (0+255),f,b
 18359  001E96  0100               	movlb	0	; () banked
 18360  001E98  519D               	movf	(??_printf+3)& (0+255),w,b
 18361  001E9A  0100               	movlb	0	; () banked
 18362  001E9C  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 18363                           
 18364                           ; BSR set to: 0
 18365  001E9E  0100               	movlb	0	; () banked
 18366  001EA0  4B8E               	infsnz	printf@f& (0+255),f,b
 18367  001EA2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18368                           
 18369                           ; BSR set to: 0
 18370                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18371  001EA4  C08E  FFF6         	movff	printf@f,tblptrl
 18372  001EA8  C08F  FFF7         	movff	printf@f+1,tblptrh
 18373  001EAC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18374  001EAC  6AF8               	clrf	tblptru,c
 18375  001EAE                     	endif
 18376  001EAE                     	if	0	;tblptru may be non-zero
 18377  001EAE                     	endif
 18378  001EAE  0008               	tblrd		*
 18379  001EB0  50F5               	movf	tablat,w,c
 18380  001EB2  EC72  F02F         	call	_isdigit
 18381  001EB6  A0D8               	btfss	status,0,c
 18382  001EB8  D090               	goto	l7044
 18383  001EBA  D7C2               	goto	l7002
 18384  001EBC                     l7010:
 18385                           
 18386                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18387  001EBC  C0A1  FFD9         	movff	printf@ap,fsr2l
 18388  001EC0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18389  001EC4  CFDE F09F          	movff	postinc2,printf@cp
 18390  001EC8  CFDD F0A0          	movff	postdec2,printf@cp+1
 18391  001ECC  0E02               	movlw	2
 18392  001ECE  0100               	movlb	0	; () banked
 18393  001ED0  27A1               	addwf	printf@ap& (0+255),f,b
 18394  001ED2  0E00               	movlw	0
 18395  001ED4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18396                           
 18397                           ; BSR set to: 0
 18398                           ;doprnt.c: 740: if(!cp)
 18399  001ED6  0100               	movlb	0	; () banked
 18400  001ED8  519F               	movf	printf@cp& (0+255),w,b
 18401  001EDA  0100               	movlb	0	; () banked
 18402  001EDC  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 18403  001EDE  A4D8               	btfss	status,2,c
 18404  001EE0  D006               	goto	l7018
 18405                           
 18406                           ; BSR set to: 0
 18407                           ;doprnt.c: 741: cp = "(null)";
 18408  001EE2  0EB5               	movlw	low STR_129
 18409  001EE4  0100               	movlb	0	; () banked
 18410  001EE6  6F9F               	movwf	printf@cp& (0+255),b
 18411  001EE8  0EFF               	movlw	high STR_129
 18412  001EEA  0100               	movlb	0	; () banked
 18413  001EEC  6FA0               	movwf	(printf@cp+1)& (0+255),b
 18414  001EEE                     l7018:
 18415                           
 18416                           ; BSR set to: 0
 18417                           ;doprnt.c: 745: len = 0;
 18418  001EEE  0E00               	movlw	0
 18419  001EF0  0100               	movlb	0	; () banked
 18420  001EF2  6FA4               	movwf	(printf@len+1)& (0+255),b
 18421  001EF4  0E00               	movlw	0
 18422  001EF6  6FA3               	movwf	printf@len& (0+255),b
 18423                           
 18424                           ;doprnt.c: 746: while(cp[len])
 18425  001EF8  D003               	goto	l7022
 18426  001EFA                     l7020:
 18427                           
 18428                           ;doprnt.c: 747: len++;
 18429  001EFA  0100               	movlb	0	; () banked
 18430  001EFC  4BA3               	infsnz	printf@len& (0+255),f,b
 18431  001EFE  2BA4               	incf	(printf@len+1)& (0+255),f,b
 18432  001F00                     l7022:
 18433                           
 18434                           ; BSR set to: 0
 18435  001F00  0100               	movlb	0	; () banked
 18436  001F02  51A3               	movf	printf@len& (0+255),w,b
 18437  001F04  0100               	movlb	0	; () banked
 18438  001F06  259F               	addwf	printf@cp& (0+255),w,b
 18439  001F08  0100               	movlb	0	; () banked
 18440  001F0A  6F9A               	movwf	??_printf& (0+255),b
 18441  001F0C  0100               	movlb	0	; () banked
 18442  001F0E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18443  001F10  0100               	movlb	0	; () banked
 18444  001F12  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 18445  001F14  0100               	movlb	0	; () banked
 18446  001F16  6F9B               	movwf	(??_printf+1)& (0+255),b
 18447  001F18  C09A  FFF6         	movff	??_printf,tblptrl
 18448  001F1C  C09B  FFF7         	movff	??_printf+1,tblptrh
 18449  001F20  0E00               	movlw	low (__mediumconst shr (0+16))
 18450  001F22  6EF8               	movwf	tblptru,c
 18451  001F24  0E0F               	movlw	(high __ramtop+-1)
 18452  001F26  64F7               	cpfsgt	tblptrh,c
 18453  001F28  D003               	bra	u5787
 18454  001F2A  0008               	tblrd		*
 18455  001F2C  50F5               	movf	tablat,w,c
 18456  001F2E  D005               	bra	u5780
 18457  001F30                     u5787:
 18458  001F30  CFF6 FFE9          	movff	tblptrl,fsr0l
 18459  001F34  CFF7 FFEA          	movff	tblptrh,fsr0h
 18460  001F38  50EF               	movf	indf0,w,c
 18461  001F3A                     u5780:
 18462  001F3A  0900               	iorlw	0
 18463  001F3C  A4D8               	btfss	status,2,c
 18464  001F3E  D7DD               	goto	l7020
 18465                           
 18466                           ;doprnt.c: 757: if(width > len)
 18467  001F40  0100               	movlb	0	; () banked
 18468  001F42  51A9               	movf	printf@width& (0+255),w,b
 18469  001F44  0100               	movlb	0	; () banked
 18470  001F46  5DA3               	subwf	printf@len& (0+255),w,b
 18471  001F48  0100               	movlb	0	; () banked
 18472  001F4A  51AA               	movf	(printf@width+1)& (0+255),w,b
 18473  001F4C  0100               	movlb	0	; () banked
 18474  001F4E  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 18475  001F50  B0D8               	btfsc	status,0,c
 18476  001F52  D009               	goto	l7028
 18477                           
 18478                           ; BSR set to: 0
 18479                           ;doprnt.c: 758: width -= len;
 18480  001F54  0100               	movlb	0	; () banked
 18481  001F56  51A3               	movf	printf@len& (0+255),w,b
 18482  001F58  0100               	movlb	0	; () banked
 18483  001F5A  5FA9               	subwf	printf@width& (0+255),f,b
 18484  001F5C  0100               	movlb	0	; () banked
 18485  001F5E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18486  001F60  0100               	movlb	0	; () banked
 18487  001F62  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18488  001F64  D009               	goto	l7032
 18489  001F66                     l7028:
 18490                           
 18491                           ; BSR set to: 0
 18492                           ;doprnt.c: 759: else
 18493                           ;doprnt.c: 760: width = 0;
 18494  001F66  0E00               	movlw	0
 18495  001F68  0100               	movlb	0	; () banked
 18496  001F6A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18497  001F6C  0E00               	movlw	0
 18498  001F6E  6FA9               	movwf	printf@width& (0+255),b
 18499                           
 18500                           ; BSR set to: 0
 18501                           ;doprnt.c: 764: while(width--)
 18502  001F70  D003               	goto	l7032
 18503  001F72                     l7030:
 18504                           
 18505                           ; BSR set to: 0
 18506                           ;doprnt.c: 765: (putch(' ') );
 18507  001F72  0E20               	movlw	32
 18508  001F74  EC5B  F030         	call	_putch
 18509  001F78                     l7032:
 18510  001F78  0100               	movlb	0	; () banked
 18511  001F7A  07A9               	decf	printf@width& (0+255),f,b
 18512  001F7C  A0D8               	btfss	status,0,c
 18513  001F7E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18514  001F80  0100               	movlb	0	; () banked
 18515  001F82  29A9               	incf	printf@width& (0+255),w,b
 18516  001F84  E1F6               	bnz	l7030
 18517  001F86  0100               	movlb	0	; () banked
 18518  001F88  29AA               	incf	(printf@width+1)& (0+255),w,b
 18519  001F8A  B4D8               	btfsc	status,2,c
 18520  001F8C  D017               	goto	l7038
 18521  001F8E  D7F1               	goto	l7030
 18522  001F90                     l7034:
 18523                           
 18524                           ; BSR set to: 0
 18525                           ;doprnt.c: 768: (putch(*cp++) );
 18526  001F90  C09F  FFF6         	movff	printf@cp,tblptrl
 18527  001F94  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 18528  001F98  0E00               	movlw	low (__mediumconst shr (0+16))
 18529  001F9A  6EF8               	movwf	tblptru,c
 18530  001F9C  0E0F               	movlw	(high __ramtop+-1)
 18531  001F9E  64F7               	cpfsgt	tblptrh,c
 18532  001FA0  D003               	bra	u5827
 18533  001FA2  0008               	tblrd		*
 18534  001FA4  50F5               	movf	tablat,w,c
 18535  001FA6  D005               	bra	u5820
 18536  001FA8                     u5827:
 18537  001FA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 18538  001FAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 18539  001FB0  50EF               	movf	indf0,w,c
 18540  001FB2                     u5820:
 18541  001FB2  EC5B  F030         	call	_putch
 18542  001FB6  0100               	movlb	0	; () banked
 18543  001FB8  4B9F               	infsnz	printf@cp& (0+255),f,b
 18544  001FBA  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 18545  001FBC                     l7038:
 18546                           
 18547                           ; BSR set to: 0
 18548  001FBC  0100               	movlb	0	; () banked
 18549  001FBE  07A3               	decf	printf@len& (0+255),f,b
 18550  001FC0  A0D8               	btfss	status,0,c
 18551  001FC2  07A4               	decf	(printf@len+1)& (0+255),f,b
 18552  001FC4  0100               	movlb	0	; () banked
 18553  001FC6  29A3               	incf	printf@len& (0+255),w,b
 18554  001FC8  E1E3               	bnz	l7034
 18555  001FCA  0100               	movlb	0	; () banked
 18556  001FCC  29A4               	incf	(printf@len+1)& (0+255),w,b
 18557  001FCE  B4D8               	btfsc	status,2,c
 18558  001FD0  D10A               	goto	l7116
 18559  001FD2  D7DE               	goto	l7034
 18560  001FD4                     l7040:
 18561                           
 18562                           ; BSR set to: 0
 18563                           ;doprnt.c: 818: flag |= 0x40;
 18564  001FD4  0100               	movlb	0	; () banked
 18565  001FD6  8DA7               	bsf	printf@flag& (0+255),6,b
 18566                           
 18567                           ; BSR set to: 0
 18568                           ;doprnt.c: 822: }
 18569                           
 18570                           ;doprnt.c: 819: break;
 18571  001FD8  D01D               	goto	l1586
 18572  001FDA                     l7044:
 18573  001FDA  C08E  FFF6         	movff	printf@f,tblptrl
 18574  001FDE  C08F  FFF7         	movff	printf@f+1,tblptrh
 18575  001FE2  0100               	movlb	0	; () banked
 18576  001FE4  4B8E               	infsnz	printf@f& (0+255),f,b
 18577  001FE6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18578  001FE8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18579  001FE8  6AF8               	clrf	tblptru,c
 18580  001FEA                     	endif
 18581  001FEA                     	if	0	;tblptru may be non-zero
 18582  001FEA                     	endif
 18583  001FEA  0008               	tblrd		*
 18584  001FEC  CFF5 F0A8          	movff	tablat,printf@c
 18585  001FF0  0100               	movlb	0	; () banked
 18586  001FF2  51A8               	movf	printf@c& (0+255),w,b
 18587                           
 18588                           ; Switch size 1, requested type "space"
 18589                           ; Number of cases is 5, Range of values is 0 to 117
 18590                           ; switch strategies available:
 18591                           ; Name         Instructions Cycles
 18592                           ; simple_byte           16     9 (average)
 18593                           ;	Chosen strategy is simple_byte
 18594  001FF4  0A00               	xorlw	0	; case 0
 18595  001FF6  B4D8               	btfsc	status,2,c
 18596  001FF8  0012               	return	
 18597  001FFA  0A64               	xorlw	100	; case 100
 18598  001FFC  B4D8               	btfsc	status,2,c
 18599  001FFE  D00A               	goto	l1586
 18600  002000  0A0D               	xorlw	13	; case 105
 18601  002002  B4D8               	btfsc	status,2,c
 18602  002004  D007               	goto	l1586
 18603  002006  0A1A               	xorlw	26	; case 115
 18604  002008  B4D8               	btfsc	status,2,c
 18605  00200A  D758               	goto	l7010
 18606  00200C  0A06               	xorlw	6	; case 117
 18607  00200E  B4D8               	btfsc	status,2,c
 18608  002010  D7E1               	goto	l7040
 18609  002012  D0E9               	goto	l7116
 18610  002014                     l1586:
 18611                           
 18612                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18613  002014  0100               	movlb	0	; () banked
 18614  002016  BDA7               	btfsc	printf@flag& (0+255),6,b
 18615  002018  D019               	goto	l7056
 18616                           
 18617                           ; BSR set to: 0
 18618                           ;doprnt.c: 1253: {
 18619                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18620  00201A  C0A1  FFD9         	movff	printf@ap,fsr2l
 18621  00201E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18622  002022  CFDE F0A5          	movff	postinc2,printf@val
 18623  002026  CFDD F0A6          	movff	postdec2,printf@val+1
 18624                           
 18625                           ; BSR set to: 0
 18626  00202A  0E02               	movlw	2
 18627  00202C  0100               	movlb	0	; () banked
 18628  00202E  27A1               	addwf	printf@ap& (0+255),f,b
 18629  002030  0E00               	movlw	0
 18630  002032  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18631                           
 18632                           ; BSR set to: 0
 18633                           ;doprnt.c: 1261: if((int)val < 0) {
 18634  002034  0100               	movlb	0	; () banked
 18635  002036  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 18636  002038  D016               	goto	l7060
 18637                           
 18638                           ; BSR set to: 0
 18639                           ;doprnt.c: 1262: flag |= 0x03;
 18640  00203A  0E03               	movlw	3
 18641  00203C  0100               	movlb	0	; () banked
 18642  00203E  13A7               	iorwf	printf@flag& (0+255),f,b
 18643                           
 18644                           ; BSR set to: 0
 18645                           ;doprnt.c: 1263: val = -val;
 18646  002040  0100               	movlb	0	; () banked
 18647  002042  6DA5               	negf	printf@val& (0+255),b
 18648  002044  1FA6               	comf	(printf@val+1)& (0+255),f,b
 18649  002046  B0D8               	btfsc	status,0,c
 18650  002048  2BA6               	incf	(printf@val+1)& (0+255),f,b
 18651                           
 18652                           ; BSR set to: 0
 18653                           ;doprnt.c: 1264: }
 18654                           ;doprnt.c: 1266: }
 18655  00204A  D00D               	goto	l7060
 18656  00204C                     l7056:
 18657                           
 18658                           ; BSR set to: 0
 18659                           ;doprnt.c: 1268: else
 18660                           ;doprnt.c: 1273: {
 18661                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18662  00204C  C0A1  FFD9         	movff	printf@ap,fsr2l
 18663  002050  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18664  002054  CFDE F0A5          	movff	postinc2,printf@val
 18665  002058  CFDD F0A6          	movff	postdec2,printf@val+1
 18666                           
 18667                           ; BSR set to: 0
 18668  00205C  0E02               	movlw	2
 18669  00205E  0100               	movlb	0	; () banked
 18670  002060  27A1               	addwf	printf@ap& (0+255),f,b
 18671  002062  0E00               	movlw	0
 18672  002064  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18673  002066                     l7060:
 18674                           
 18675                           ; BSR set to: 0
 18676                           ;doprnt.c: 1287: }
 18677                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18678  002066  0E01               	movlw	1
 18679  002068  0100               	movlb	0	; () banked
 18680  00206A  6FA8               	movwf	printf@c& (0+255),b
 18681  00206C                     l7062:
 18682                           
 18683                           ; BSR set to: 0
 18684  00206C  0E05               	movlw	5
 18685  00206E  0100               	movlb	0	; () banked
 18686  002070  19A8               	xorwf	printf@c& (0+255),w,b
 18687  002072  B4D8               	btfsc	status,2,c
 18688  002074  D019               	goto	l7074
 18689                           
 18690                           ; BSR set to: 0
 18691                           ;doprnt.c: 1306: if(val < dpowers[c])
 18692                           
 18693                           ; BSR set to: 0
 18694                           
 18695                           ; BSR set to: 0
 18696  002076  0100               	movlb	0	; () banked
 18697  002078  51A8               	movf	printf@c& (0+255),w,b
 18698  00207A  0D02               	mullw	2
 18699  00207C  0EB8               	movlw	low _dpowers
 18700  00207E  24F3               	addwf	prodl,w,c
 18701  002080  6EF6               	movwf	tblptrl,c
 18702  002082  0EFA               	movlw	high _dpowers
 18703  002084  20F4               	addwfc	prodh,w,c
 18704  002086  6EF7               	movwf	tblptrh,c
 18705  002088                     	if	1	;There are 3 active tblptr bytes
 18706  002088  6AF8               	clrf	tblptru,c
 18707  00208A  0E00               	movlw	low (__mediumconst shr (0+16))
 18708  00208C  22F8               	addwfc	tblptru,f,c
 18709  00208E                     	endif
 18710  00208E  0009               	tblrd		*+
 18711  002090  50F5               	movf	tablat,w,c
 18712  002092  0100               	movlb	0	; () banked
 18713  002094  5DA5               	subwf	printf@val& (0+255),w,b
 18714  002096  0009               	tblrd		*+
 18715  002098  50F5               	movf	tablat,w,c
 18716  00209A  0100               	movlb	0	; () banked
 18717  00209C  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18718  00209E  A0D8               	btfss	status,0,c
 18719  0020A0  D003               	goto	l7074
 18720                           
 18721                           ; BSR set to: 0
 18722                           
 18723                           ; BSR set to: 0
 18724                           
 18725                           ; BSR set to: 0
 18726                           ;doprnt.c: 1307: break;
 18727  0020A2  0100               	movlb	0	; () banked
 18728  0020A4  2BA8               	incf	printf@c& (0+255),f,b
 18729  0020A6  D7E2               	goto	l7062
 18730  0020A8                     l7074:
 18731                           
 18732                           ; BSR set to: 0
 18733                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18734  0020A8  0100               	movlb	0	; () banked
 18735  0020AA  51A9               	movf	printf@width& (0+255),w,b
 18736  0020AC  0100               	movlb	0	; () banked
 18737  0020AE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18738  0020B0  B4D8               	btfsc	status,2,c
 18739  0020B2  D00B               	goto	l7080
 18740                           
 18741                           ; BSR set to: 0
 18742  0020B4  C0A7  F09A         	movff	printf@flag,??_printf
 18743  0020B8  0E03               	movlw	3
 18744  0020BA  0100               	movlb	0	; () banked
 18745  0020BC  179A               	andwf	??_printf& (0+255),f,b
 18746  0020BE  B4D8               	btfsc	status,2,c
 18747  0020C0  D004               	goto	l7080
 18748                           
 18749                           ; BSR set to: 0
 18750                           ;doprnt.c: 1346: width--;
 18751  0020C2  0100               	movlb	0	; () banked
 18752  0020C4  07A9               	decf	printf@width& (0+255),f,b
 18753  0020C6  A0D8               	btfss	status,0,c
 18754  0020C8  07AA               	decf	(printf@width+1)& (0+255),f,b
 18755  0020CA                     l7080:
 18756                           
 18757                           ; BSR set to: 0
 18758                           ;doprnt.c: 1381: if(width > c)
 18759  0020CA  0E80               	movlw	128
 18760  0020CC  0100               	movlb	0	; () banked
 18761  0020CE  BFA8               	btfsc	printf@c& (0+255),7,b
 18762  0020D0  0E7F               	movlw	127
 18763  0020D2  0100               	movlb	0	; () banked
 18764  0020D4  6F9A               	movwf	??_printf& (0+255),b
 18765  0020D6  0100               	movlb	0	; () banked
 18766  0020D8  51A9               	movf	printf@width& (0+255),w,b
 18767  0020DA  0100               	movlb	0	; () banked
 18768  0020DC  5DA8               	subwf	printf@c& (0+255),w,b
 18769  0020DE  0100               	movlb	0	; () banked
 18770  0020E0  51AA               	movf	(printf@width+1)& (0+255),w,b
 18771  0020E2  0A80               	xorlw	128
 18772  0020E4  0100               	movlb	0	; () banked
 18773  0020E6  599A               	subwfb	??_printf& (0+255),w,b
 18774  0020E8  B0D8               	btfsc	status,0,c
 18775  0020EA  D00B               	goto	l7084
 18776                           
 18777                           ; BSR set to: 0
 18778                           ;doprnt.c: 1382: width -= c;
 18779  0020EC  0100               	movlb	0	; () banked
 18780  0020EE  51A8               	movf	printf@c& (0+255),w,b
 18781  0020F0  0100               	movlb	0	; () banked
 18782  0020F2  5FA9               	subwf	printf@width& (0+255),f,b
 18783  0020F4  0E00               	movlw	0
 18784  0020F6  0100               	movlb	0	; () banked
 18785  0020F8  BFA8               	btfsc	printf@c& (0+255),7,b
 18786  0020FA  0EFF               	movlw	255
 18787  0020FC  0100               	movlb	0	; () banked
 18788  0020FE  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18789  002100  D005               	goto	l7086
 18790  002102                     l7084:
 18791                           
 18792                           ; BSR set to: 0
 18793                           ;doprnt.c: 1383: else
 18794                           ;doprnt.c: 1384: width = 0;
 18795  002102  0E00               	movlw	0
 18796  002104  0100               	movlb	0	; () banked
 18797  002106  6FAA               	movwf	(printf@width+1)& (0+255),b
 18798  002108  0E00               	movlw	0
 18799  00210A  6FA9               	movwf	printf@width& (0+255),b
 18800  00210C                     l7086:
 18801                           
 18802                           ; BSR set to: 0
 18803                           ;doprnt.c: 1387: if(flag & 0x04) {
 18804  00210C  0100               	movlb	0	; () banked
 18805  00210E  A5A7               	btfss	printf@flag& (0+255),2,b
 18806  002110  D018               	goto	l7098
 18807                           
 18808                           ; BSR set to: 0
 18809                           ;doprnt.c: 1392: if(flag & 0x03)
 18810  002112  C0A7  F09A         	movff	printf@flag,??_printf
 18811  002116  0E03               	movlw	3
 18812  002118  0100               	movlb	0	; () banked
 18813  00211A  179A               	andwf	??_printf& (0+255),f,b
 18814  00211C  B4D8               	btfsc	status,2,c
 18815  00211E  D003               	goto	l7092
 18816                           
 18817                           ; BSR set to: 0
 18818                           ;doprnt.c: 1393: (putch('-') );
 18819  002120  0E2D               	movlw	45
 18820  002122  EC5B  F030         	call	_putch
 18821  002126                     l7092:
 18822                           
 18823                           ;doprnt.c: 1415: if(width)
 18824  002126  0100               	movlb	0	; () banked
 18825  002128  51A9               	movf	printf@width& (0+255),w,b
 18826  00212A  0100               	movlb	0	; () banked
 18827  00212C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18828  00212E  B4D8               	btfsc	status,2,c
 18829  002130  D025               	goto	l7108
 18830                           
 18831                           ; BSR set to: 0
 18832                           ;doprnt.c: 1417: (putch('0') );
 18833                           
 18834                           ; BSR set to: 0
 18835                           
 18836                           ;doprnt.c: 1416: do
 18837  002132  0E30               	movlw	48
 18838  002134  EC5B  F030         	call	_putch
 18839                           
 18840                           ;doprnt.c: 1418: while(--width);
 18841  002138  0100               	movlb	0	; () banked
 18842  00213A  07A9               	decf	printf@width& (0+255),f,b
 18843  00213C  A0D8               	btfss	status,0,c
 18844  00213E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18845  002140  D7F2               	goto	l7092
 18846  002142                     l7098:
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;doprnt.c: 1422: {
 18850                           ;doprnt.c: 1424: if(width
 18851                           ;doprnt.c: 1428: )
 18852  002142  0100               	movlb	0	; () banked
 18853  002144  51A9               	movf	printf@width& (0+255),w,b
 18854  002146  0100               	movlb	0	; () banked
 18855  002148  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18856  00214A  B4D8               	btfsc	status,2,c
 18857  00214C  D00D               	goto	l7104
 18858  00214E                     l7100:
 18859                           
 18860                           ; BSR set to: 0
 18861                           ;doprnt.c: 1430: (putch(' ') );
 18862  00214E  0E20               	movlw	32
 18863  002150  EC5B  F030         	call	_putch
 18864                           
 18865                           ;doprnt.c: 1431: while(--width);
 18866  002154  0100               	movlb	0	; () banked
 18867  002156  07A9               	decf	printf@width& (0+255),f,b
 18868  002158  A0D8               	btfss	status,0,c
 18869  00215A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18870  00215C  0100               	movlb	0	; () banked
 18871  00215E  51A9               	movf	printf@width& (0+255),w,b
 18872  002160  0100               	movlb	0	; () banked
 18873  002162  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18874  002164  A4D8               	btfss	status,2,c
 18875  002166  D7F3               	goto	l7100
 18876  002168                     l7104:
 18877                           
 18878                           ; BSR set to: 0
 18879                           ;doprnt.c: 1438: if(flag & 0x03)
 18880  002168  C0A7  F09A         	movff	printf@flag,??_printf
 18881  00216C  0E03               	movlw	3
 18882  00216E  0100               	movlb	0	; () banked
 18883  002170  179A               	andwf	??_printf& (0+255),f,b
 18884  002172  B4D8               	btfsc	status,2,c
 18885  002174  D003               	goto	l7108
 18886                           
 18887                           ; BSR set to: 0
 18888                           ;doprnt.c: 1439: (putch('-') );
 18889  002176  0E2D               	movlw	45
 18890  002178  EC5B  F030         	call	_putch
 18891  00217C                     l7108:
 18892                           
 18893                           ;doprnt.c: 1469: }
 18894                           ;doprnt.c: 1472: prec = c;
 18895  00217C  C0A8  F09E         	movff	printf@c,printf@prec
 18896                           
 18897                           ;doprnt.c: 1474: while(prec--) {
 18898  002180  D02C               	goto	l7114
 18899  002182                     l7110:
 18900                           
 18901                           ;doprnt.c: 1478: {
 18902                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18903  002182  0100               	movlb	0	; () banked
 18904  002184  519E               	movf	printf@prec& (0+255),w,b
 18905  002186  0D02               	mullw	2
 18906  002188  0EB8               	movlw	low _dpowers
 18907  00218A  24F3               	addwf	prodl,w,c
 18908  00218C  6EF6               	movwf	tblptrl,c
 18909  00218E  0EFA               	movlw	high _dpowers
 18910  002190  20F4               	addwfc	prodh,w,c
 18911  002192  6EF7               	movwf	tblptrh,c
 18912  002194                     	if	1	;There are 3 active tblptr bytes
 18913  002194  6AF8               	clrf	tblptru,c
 18914  002196  0E00               	movlw	low (__mediumconst shr (0+16))
 18915  002198  22F8               	addwfc	tblptru,f,c
 18916  00219A                     	endif
 18917  00219A  0009               	tblrd		*+
 18918  00219C  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18919  0021A0  000A               	tblrd		*-
 18920  0021A2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18921  0021A6  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18922  0021AA  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18923  0021AE  EC61  F02A         	call	___lwdiv	;wreg free
 18924  0021B2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18925  0021B6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18926  0021BA  0E00               	movlw	0
 18927  0021BC  0100               	movlb	0	; () banked
 18928  0021BE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18929  0021C0  0E0A               	movlw	10
 18930  0021C2  6F89               	movwf	___lwmod@divisor& (0+255),b
 18931  0021C4  ECAE  F02B         	call	___lwmod	;wreg free
 18932  0021C8  0100               	movlb	0	; () banked
 18933  0021CA  5187               	movf	?___lwmod& (0+255),w,b
 18934  0021CC  0F30               	addlw	48
 18935  0021CE  0100               	movlb	0	; () banked
 18936  0021D0  6FA8               	movwf	printf@c& (0+255),b
 18937                           
 18938                           ; BSR set to: 0
 18939                           ;doprnt.c: 1523: }
 18940                           ;doprnt.c: 1524: (putch(c) );
 18941  0021D2  0100               	movlb	0	; () banked
 18942  0021D4  51A8               	movf	printf@c& (0+255),w,b
 18943  0021D6  EC5B  F030         	call	_putch
 18944  0021DA                     l7114:
 18945  0021DA  0100               	movlb	0	; () banked
 18946  0021DC  079E               	decf	printf@prec& (0+255),f,b
 18947  0021DE  0100               	movlb	0	; () banked
 18948  0021E0  299E               	incf	printf@prec& (0+255),w,b
 18949  0021E2  A4D8               	btfss	status,2,c
 18950  0021E4  D7CE               	goto	l7110
 18951  0021E6                     l7116:
 18952  0021E6  C08E  FFF6         	movff	printf@f,tblptrl
 18953  0021EA  C08F  FFF7         	movff	printf@f+1,tblptrh
 18954  0021EE  0100               	movlb	0	; () banked
 18955  0021F0  4B8E               	infsnz	printf@f& (0+255),f,b
 18956  0021F2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18957  0021F4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18958  0021F4  6AF8               	clrf	tblptru,c
 18959  0021F6                     	endif
 18960  0021F6                     	if	0	;tblptru may be non-zero
 18961  0021F6                     	endif
 18962  0021F6  0008               	tblrd		*
 18963  0021F8  CFF5 F0A8          	movff	tablat,printf@c
 18964  0021FC  0100               	movlb	0	; () banked
 18965  0021FE  51A8               	movf	printf@c& (0+255),w,b
 18966  002200  B4D8               	btfsc	status,2,c
 18967  002202  0012               	return	
 18968  002204  D5EB               	goto	l6986
 18969  002206                     __end_of_printf:
 18970                           	opt stack 0
 18971                           tblptru	equ	0xFF8
 18972                           tblptrh	equ	0xFF7
 18973                           tblptrl	equ	0xFF6
 18974                           tablat	equ	0xFF5
 18975                           prodh	equ	0xFF4
 18976                           prodl	equ	0xFF3
 18977                           intcon	equ	0xFF2
 18978                           intcon2	equ	0xFF1
 18979                           intcon3	equ	0xFF0
 18980                           indf0	equ	0xFEF
 18981                           postinc0	equ	0xFEE
 18982                           fsr0h	equ	0xFEA
 18983                           fsr0l	equ	0xFE9
 18984                           wreg	equ	0xFE8
 18985                           postdec1	equ	0xFE5
 18986                           fsr1l	equ	0xFE1
 18987                           indf2	equ	0xFDF
 18988                           postinc2	equ	0xFDE
 18989                           postdec2	equ	0xFDD
 18990                           fsr2h	equ	0xFDA
 18991                           fsr2l	equ	0xFD9
 18992                           status	equ	0xFD8
 18993                           
 18994 ;; *************** function _putch *****************
 18995 ;; Defined at:
 18996 ;;		line 20 in file "lcd.c"
 18997 ;; Parameters:    Size  Location     Type
 18998 ;;  data            1    wreg     unsigned char 
 18999 ;; Auto vars:     Size  Location     Type
 19000 ;;  data            1    2[BANK0 ] unsigned char 
 19001 ;; Return value:  Size  Location     Type
 19002 ;;                  1    wreg      void 
 19003 ;; Registers used:
 19004 ;;		wreg, status,2, status,0, cstack
 19005 ;; Tracked objects:
 19006 ;;		On entry : 0/0
 19007 ;;		On exit  : 0/0
 19008 ;;		Unchanged: 0/0
 19009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19013 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19014 ;;Total ram usage:        1 bytes
 19015 ;; Hardware stack levels used:    1
 19016 ;; Hardware stack levels required when called:    8
 19017 ;; This function calls:
 19018 ;;		_lcdNibble
 19019 ;; This function is called by:
 19020 ;;		_printf
 19021 ;; This function uses a non-reentrant model
 19022 ;;
 19023                           
 19024                           	psect	text57
 19025  0060B6                     __ptext57:
 19026                           	opt stack 0
 19027  0060B6                     _putch:
 19028                           	opt stack 18
 19029                           
 19030                           ;incstack = 0
 19031                           ;putch@data stored from wreg
 19032  0060B6  0100               	movlb	0	; () banked
 19033  0060B8  6F82               	movwf	putch@data& (0+255),b
 19034                           
 19035                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19036  0060BA  848C               	bsf	3980,2,c	;volatile
 19037                           
 19038                           ;lcd.c: 22: lcdNibble(data);
 19039  0060BC  0100               	movlb	0	; () banked
 19040  0060BE  5182               	movf	putch@data& (0+255),w,b
 19041  0060C0  EC46  F02B         	call	_lcdNibble
 19042  0060C4  0012               	return		;funcret
 19043  0060C6                     __end_of_putch:
 19044                           	opt stack 0
 19045                           tblptru	equ	0xFF8
 19046                           tblptrh	equ	0xFF7
 19047                           tblptrl	equ	0xFF6
 19048                           tablat	equ	0xFF5
 19049                           prodh	equ	0xFF4
 19050                           prodl	equ	0xFF3
 19051                           intcon	equ	0xFF2
 19052                           intcon2	equ	0xFF1
 19053                           intcon3	equ	0xFF0
 19054                           indf0	equ	0xFEF
 19055                           postinc0	equ	0xFEE
 19056                           fsr0h	equ	0xFEA
 19057                           fsr0l	equ	0xFE9
 19058                           wreg	equ	0xFE8
 19059                           postdec1	equ	0xFE5
 19060                           fsr1l	equ	0xFE1
 19061                           indf2	equ	0xFDF
 19062                           postinc2	equ	0xFDE
 19063                           postdec2	equ	0xFDD
 19064                           fsr2h	equ	0xFDA
 19065                           fsr2l	equ	0xFD9
 19066                           status	equ	0xFD8
 19067                           
 19068 ;; *************** function _isdigit *****************
 19069 ;; Defined at:
 19070 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19071 ;; Parameters:    Size  Location     Type
 19072 ;;  c               1    wreg     unsigned char 
 19073 ;; Auto vars:     Size  Location     Type
 19074 ;;  c               1    2[BANK0 ] unsigned char 
 19075 ;; Return value:  Size  Location     Type
 19076 ;;		None               void
 19077 ;; Registers used:
 19078 ;;		wreg, status,2, status,0
 19079 ;; Tracked objects:
 19080 ;;		On entry : 0/0
 19081 ;;		On exit  : 0/0
 19082 ;;		Unchanged: 0/0
 19083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19085 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19087 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19088 ;;Total ram usage:        3 bytes
 19089 ;; Hardware stack levels used:    1
 19090 ;; Hardware stack levels required when called:    7
 19091 ;; This function calls:
 19092 ;;		Nothing
 19093 ;; This function is called by:
 19094 ;;		_printf
 19095 ;; This function uses a non-reentrant model
 19096 ;;
 19097                           
 19098                           	psect	text58
 19099  005EE4                     __ptext58:
 19100                           	opt stack 0
 19101  005EE4                     _isdigit:
 19102                           	opt stack 19
 19103                           
 19104                           ;incstack = 0
 19105                           ;isdigit@c stored from wreg
 19106  005EE4  0100               	movlb	0	; () banked
 19107  005EE6  6F82               	movwf	isdigit@c& (0+255),b
 19108  005EE8  0E00               	movlw	0
 19109  005EEA  0100               	movlb	0	; () banked
 19110  005EEC  6F81               	movwf	_isdigit$2081& (0+255),b
 19111                           
 19112                           ; BSR set to: 0
 19113  005EEE  0E3A               	movlw	58
 19114  005EF0  0100               	movlb	0	; () banked
 19115  005EF2  6182               	cpfslt	isdigit@c& (0+255),b
 19116  005EF4  D007               	goto	l6824
 19117                           
 19118                           ; BSR set to: 0
 19119  005EF6  0E2F               	movlw	47
 19120  005EF8  0100               	movlb	0	; () banked
 19121  005EFA  6582               	cpfsgt	isdigit@c& (0+255),b
 19122  005EFC  D003               	goto	l6824
 19123                           
 19124                           ; BSR set to: 0
 19125  005EFE  0E01               	movlw	1
 19126  005F00  0100               	movlb	0	; () banked
 19127  005F02  6F81               	movwf	_isdigit$2081& (0+255),b
 19128  005F04                     l6824:
 19129                           
 19130                           ; BSR set to: 0
 19131  005F04  C081  F080         	movff	_isdigit$2081,??_isdigit
 19132  005F08  0100               	movlb	0	; () banked
 19133  005F0A  3180               	rrcf	??_isdigit& (0+255),w,b
 19134  005F0C  0012               	return	
 19135  005F0E                     __end_of_isdigit:
 19136                           	opt stack 0
 19137                           tblptru	equ	0xFF8
 19138                           tblptrh	equ	0xFF7
 19139                           tblptrl	equ	0xFF6
 19140                           tablat	equ	0xFF5
 19141                           prodh	equ	0xFF4
 19142                           prodl	equ	0xFF3
 19143                           intcon	equ	0xFF2
 19144                           intcon2	equ	0xFF1
 19145                           intcon3	equ	0xFF0
 19146                           indf0	equ	0xFEF
 19147                           postinc0	equ	0xFEE
 19148                           fsr0h	equ	0xFEA
 19149                           fsr0l	equ	0xFE9
 19150                           wreg	equ	0xFE8
 19151                           postdec1	equ	0xFE5
 19152                           fsr1l	equ	0xFE1
 19153                           indf2	equ	0xFDF
 19154                           postinc2	equ	0xFDE
 19155                           postdec2	equ	0xFDD
 19156                           fsr2h	equ	0xFDA
 19157                           fsr2l	equ	0xFD9
 19158                           status	equ	0xFD8
 19159                           
 19160 ;; *************** function ___wmul *****************
 19161 ;; Defined at:
 19162 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19163 ;; Parameters:    Size  Location     Type
 19164 ;;  multiplier      2    0[BANK0 ] unsigned int 
 19165 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 19166 ;; Auto vars:     Size  Location     Type
 19167 ;;  product         2    4[BANK0 ] unsigned int 
 19168 ;; Return value:  Size  Location     Type
 19169 ;;                  2    0[BANK0 ] unsigned int 
 19170 ;; Registers used:
 19171 ;;		wreg, status,2, status,0, prodl, prodh
 19172 ;; Tracked objects:
 19173 ;;		On entry : 0/0
 19174 ;;		On exit  : 0/0
 19175 ;;		Unchanged: 0/0
 19176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19177 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19180 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;Total ram usage:        6 bytes
 19182 ;; Hardware stack levels used:    1
 19183 ;; Hardware stack levels required when called:    7
 19184 ;; This function calls:
 19185 ;;		Nothing
 19186 ;; This function is called by:
 19187 ;;		_printf
 19188 ;; This function uses a non-reentrant model
 19189 ;;
 19190                           
 19191                           	psect	text59
 19192  005BB8                     __ptext59:
 19193                           	opt stack 0
 19194  005BB8                     ___wmul:
 19195                           	opt stack 19
 19196                           
 19197                           ; BSR set to: 0
 19198                           ;incstack = 0
 19199  005BB8  0100               	movlb	0	; () banked
 19200  005BBA  5180               	movf	___wmul@multiplier& (0+255),w,b
 19201  005BBC  0100               	movlb	0	; () banked
 19202  005BBE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 19203  005BC0  CFF3 F084          	movff	prodl,___wmul@product
 19204  005BC4  CFF4 F085          	movff	prodh,___wmul@product+1
 19205  005BC8  0100               	movlb	0	; () banked
 19206  005BCA  5180               	movf	___wmul@multiplier& (0+255),w,b
 19207  005BCC  0100               	movlb	0	; () banked
 19208  005BCE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 19209  005BD0  50F3               	movf	prodl,w,c
 19210  005BD2  0100               	movlb	0	; () banked
 19211  005BD4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 19212  005BD6  0100               	movlb	0	; () banked
 19213  005BD8  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 19214  005BDA  0100               	movlb	0	; () banked
 19215  005BDC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 19216  005BDE  50F3               	movf	prodl,w,c
 19217  005BE0  0100               	movlb	0	; () banked
 19218  005BE2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 19219                           
 19220                           ; BSR set to: 0
 19221  005BE4  C084  F080         	movff	___wmul@product,?___wmul
 19222  005BE8  C085  F081         	movff	___wmul@product+1,?___wmul+1
 19223  005BEC  0012               	return	
 19224  005BEE                     __end_of___wmul:
 19225                           	opt stack 0
 19226                           tblptru	equ	0xFF8
 19227                           tblptrh	equ	0xFF7
 19228                           tblptrl	equ	0xFF6
 19229                           tablat	equ	0xFF5
 19230                           prodh	equ	0xFF4
 19231                           prodl	equ	0xFF3
 19232                           intcon	equ	0xFF2
 19233                           intcon2	equ	0xFF1
 19234                           intcon3	equ	0xFF0
 19235                           indf0	equ	0xFEF
 19236                           postinc0	equ	0xFEE
 19237                           fsr0h	equ	0xFEA
 19238                           fsr0l	equ	0xFE9
 19239                           wreg	equ	0xFE8
 19240                           postdec1	equ	0xFE5
 19241                           fsr1l	equ	0xFE1
 19242                           indf2	equ	0xFDF
 19243                           postinc2	equ	0xFDE
 19244                           postdec2	equ	0xFDD
 19245                           fsr2h	equ	0xFDA
 19246                           fsr2l	equ	0xFD9
 19247                           status	equ	0xFD8
 19248                           
 19249 ;; *************** function ___lwmod *****************
 19250 ;; Defined at:
 19251 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19252 ;; Parameters:    Size  Location     Type
 19253 ;;  dividend        2    7[BANK0 ] unsigned int 
 19254 ;;  divisor         2    9[BANK0 ] unsigned int 
 19255 ;; Auto vars:     Size  Location     Type
 19256 ;;  counter         1   11[BANK0 ] unsigned char 
 19257 ;; Return value:  Size  Location     Type
 19258 ;;                  2    7[BANK0 ] unsigned int 
 19259 ;; Registers used:
 19260 ;;		wreg, status,2, status,0
 19261 ;; Tracked objects:
 19262 ;;		On entry : 0/0
 19263 ;;		On exit  : 0/0
 19264 ;;		Unchanged: 0/0
 19265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19266 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19269 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19270 ;;Total ram usage:        5 bytes
 19271 ;; Hardware stack levels used:    1
 19272 ;; Hardware stack levels required when called:    7
 19273 ;; This function calls:
 19274 ;;		Nothing
 19275 ;; This function is called by:
 19276 ;;		_printf
 19277 ;; This function uses a non-reentrant model
 19278 ;;
 19279                           
 19280                           	psect	text60
 19281  00575C                     __ptext60:
 19282                           	opt stack 0
 19283  00575C                     ___lwmod:
 19284                           	opt stack 19
 19285                           
 19286                           ; BSR set to: 0
 19287                           ;incstack = 0
 19288  00575C  0100               	movlb	0	; () banked
 19289  00575E  5189               	movf	___lwmod@divisor& (0+255),w,b
 19290  005760  0100               	movlb	0	; () banked
 19291  005762  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 19292  005764  B4D8               	btfsc	status,2,c
 19293  005766  D026               	goto	l2043
 19294                           
 19295                           ; BSR set to: 0
 19296  005768  0E01               	movlw	1
 19297  00576A  0100               	movlb	0	; () banked
 19298  00576C  6F8B               	movwf	___lwmod@counter& (0+255),b
 19299  00576E  D006               	goto	l6862
 19300  005770                     l6860:
 19301                           
 19302                           ; BSR set to: 0
 19303  005770  0100               	movlb	0	; () banked
 19304  005772  90D8               	bcf	status,0,c
 19305  005774  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 19306  005776  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 19307  005778  0100               	movlb	0	; () banked
 19308  00577A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 19309  00577C                     l6862:
 19310                           
 19311                           ; BSR set to: 0
 19312  00577C  0100               	movlb	0	; () banked
 19313  00577E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 19314  005780  D7F7               	goto	l6860
 19315  005782                     l6864:
 19316                           
 19317                           ; BSR set to: 0
 19318  005782  0100               	movlb	0	; () banked
 19319  005784  5189               	movf	___lwmod@divisor& (0+255),w,b
 19320  005786  0100               	movlb	0	; () banked
 19321  005788  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 19322  00578A  0100               	movlb	0	; () banked
 19323  00578C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19324  00578E  0100               	movlb	0	; () banked
 19325  005790  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 19326  005792  A0D8               	btfss	status,0,c
 19327  005794  D008               	goto	l6868
 19328                           
 19329                           ; BSR set to: 0
 19330  005796  0100               	movlb	0	; () banked
 19331  005798  5189               	movf	___lwmod@divisor& (0+255),w,b
 19332  00579A  0100               	movlb	0	; () banked
 19333  00579C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 19334  00579E  0100               	movlb	0	; () banked
 19335  0057A0  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19336  0057A2  0100               	movlb	0	; () banked
 19337  0057A4  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 19338  0057A6                     l6868:
 19339                           
 19340                           ; BSR set to: 0
 19341  0057A6  0100               	movlb	0	; () banked
 19342  0057A8  90D8               	bcf	status,0,c
 19343  0057AA  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 19344  0057AC  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 19345                           
 19346                           ; BSR set to: 0
 19347  0057AE  0100               	movlb	0	; () banked
 19348  0057B0  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 19349  0057B2  D7E7               	goto	l6864
 19350  0057B4                     l2043:
 19351                           
 19352                           ; BSR set to: 0
 19353  0057B4  C087  F087         	movff	___lwmod@dividend,?___lwmod
 19354  0057B8  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 19355                           
 19356                           ; BSR set to: 0
 19357  0057BC  0012               	return		;funcret
 19358  0057BE                     __end_of___lwmod:
 19359                           	opt stack 0
 19360                           tblptru	equ	0xFF8
 19361                           tblptrh	equ	0xFF7
 19362                           tblptrl	equ	0xFF6
 19363                           tablat	equ	0xFF5
 19364                           prodh	equ	0xFF4
 19365                           prodl	equ	0xFF3
 19366                           intcon	equ	0xFF2
 19367                           intcon2	equ	0xFF1
 19368                           intcon3	equ	0xFF0
 19369                           indf0	equ	0xFEF
 19370                           postinc0	equ	0xFEE
 19371                           fsr0h	equ	0xFEA
 19372                           fsr0l	equ	0xFE9
 19373                           wreg	equ	0xFE8
 19374                           postdec1	equ	0xFE5
 19375                           fsr1l	equ	0xFE1
 19376                           indf2	equ	0xFDF
 19377                           postinc2	equ	0xFDE
 19378                           postdec2	equ	0xFDD
 19379                           fsr2h	equ	0xFDA
 19380                           fsr2l	equ	0xFD9
 19381                           status	equ	0xFD8
 19382                           
 19383 ;; *************** function ___lwdiv *****************
 19384 ;; Defined at:
 19385 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19386 ;; Parameters:    Size  Location     Type
 19387 ;;  dividend        2    0[BANK0 ] unsigned int 
 19388 ;;  divisor         2    2[BANK0 ] unsigned int 
 19389 ;; Auto vars:     Size  Location     Type
 19390 ;;  quotient        2    4[BANK0 ] unsigned int 
 19391 ;;  counter         1    6[BANK0 ] unsigned char 
 19392 ;; Return value:  Size  Location     Type
 19393 ;;                  2    0[BANK0 ] unsigned int 
 19394 ;; Registers used:
 19395 ;;		wreg, status,2, status,0
 19396 ;; Tracked objects:
 19397 ;;		On entry : 0/0
 19398 ;;		On exit  : 0/0
 19399 ;;		Unchanged: 0/0
 19400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19401 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19402 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19404 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19405 ;;Total ram usage:        7 bytes
 19406 ;; Hardware stack levels used:    1
 19407 ;; Hardware stack levels required when called:    7
 19408 ;; This function calls:
 19409 ;;		Nothing
 19410 ;; This function is called by:
 19411 ;;		_printf
 19412 ;; This function uses a non-reentrant model
 19413 ;;
 19414                           
 19415                           	psect	text61
 19416  0054C2                     __ptext61:
 19417                           	opt stack 0
 19418  0054C2                     ___lwdiv:
 19419                           	opt stack 19
 19420                           
 19421                           ; BSR set to: 0
 19422                           ;incstack = 0
 19423  0054C2  0E00               	movlw	0
 19424  0054C4  0100               	movlb	0	; () banked
 19425  0054C6  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 19426  0054C8  0E00               	movlw	0
 19427  0054CA  6F84               	movwf	___lwdiv@quotient& (0+255),b
 19428                           
 19429                           ; BSR set to: 0
 19430  0054CC  0100               	movlb	0	; () banked
 19431  0054CE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19432  0054D0  0100               	movlb	0	; () banked
 19433  0054D2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19434  0054D4  B4D8               	btfsc	status,2,c
 19435  0054D6  D02C               	goto	l2033
 19436                           
 19437                           ; BSR set to: 0
 19438  0054D8  0E01               	movlw	1
 19439  0054DA  0100               	movlb	0	; () banked
 19440  0054DC  6F86               	movwf	___lwdiv@counter& (0+255),b
 19441  0054DE  D006               	goto	l6842
 19442  0054E0                     l6840:
 19443                           
 19444                           ; BSR set to: 0
 19445  0054E0  0100               	movlb	0	; () banked
 19446  0054E2  90D8               	bcf	status,0,c
 19447  0054E4  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 19448  0054E6  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19449  0054E8  0100               	movlb	0	; () banked
 19450  0054EA  2B86               	incf	___lwdiv@counter& (0+255),f,b
 19451  0054EC                     l6842:
 19452                           
 19453                           ; BSR set to: 0
 19454  0054EC  0100               	movlb	0	; () banked
 19455  0054EE  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19456  0054F0  D7F7               	goto	l6840
 19457  0054F2                     l6844:
 19458                           
 19459                           ; BSR set to: 0
 19460  0054F2  0100               	movlb	0	; () banked
 19461  0054F4  90D8               	bcf	status,0,c
 19462  0054F6  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 19463  0054F8  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19464                           
 19465                           ; BSR set to: 0
 19466  0054FA  0100               	movlb	0	; () banked
 19467  0054FC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19468  0054FE  0100               	movlb	0	; () banked
 19469  005500  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 19470  005502  0100               	movlb	0	; () banked
 19471  005504  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19472  005506  0100               	movlb	0	; () banked
 19473  005508  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19474  00550A  A0D8               	btfss	status,0,c
 19475  00550C  D00A               	goto	l6852
 19476                           
 19477                           ; BSR set to: 0
 19478  00550E  0100               	movlb	0	; () banked
 19479  005510  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19480  005512  0100               	movlb	0	; () banked
 19481  005514  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 19482  005516  0100               	movlb	0	; () banked
 19483  005518  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19484  00551A  0100               	movlb	0	; () banked
 19485  00551C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19486                           
 19487                           ; BSR set to: 0
 19488  00551E  0100               	movlb	0	; () banked
 19489  005520  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 19490  005522                     l6852:
 19491                           
 19492                           ; BSR set to: 0
 19493  005522  0100               	movlb	0	; () banked
 19494  005524  90D8               	bcf	status,0,c
 19495  005526  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19496  005528  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 19497                           
 19498                           ; BSR set to: 0
 19499  00552A  0100               	movlb	0	; () banked
 19500  00552C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 19501  00552E  D7E1               	goto	l6844
 19502  005530                     l2033:
 19503                           
 19504                           ; BSR set to: 0
 19505  005530  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 19506  005534  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19507                           
 19508                           ; BSR set to: 0
 19509  005538  0012               	return		;funcret
 19510  00553A                     __end_of___lwdiv:
 19511                           	opt stack 0
 19512                           tblptru	equ	0xFF8
 19513                           tblptrh	equ	0xFF7
 19514                           tblptrl	equ	0xFF6
 19515                           tablat	equ	0xFF5
 19516                           prodh	equ	0xFF4
 19517                           prodl	equ	0xFF3
 19518                           intcon	equ	0xFF2
 19519                           intcon2	equ	0xFF1
 19520                           intcon3	equ	0xFF0
 19521                           indf0	equ	0xFEF
 19522                           postinc0	equ	0xFEE
 19523                           fsr0h	equ	0xFEA
 19524                           fsr0l	equ	0xFE9
 19525                           wreg	equ	0xFE8
 19526                           postdec1	equ	0xFE5
 19527                           fsr1l	equ	0xFE1
 19528                           indf2	equ	0xFDF
 19529                           postinc2	equ	0xFDE
 19530                           postdec2	equ	0xFDD
 19531                           fsr2h	equ	0xFDA
 19532                           fsr2l	equ	0xFD9
 19533                           status	equ	0xFD8
 19534                           
 19535 ;; *************** function _lcdInst *****************
 19536 ;; Defined at:
 19537 ;;		line 15 in file "lcd.c"
 19538 ;; Parameters:    Size  Location     Type
 19539 ;;  data            1    wreg     unsigned char 
 19540 ;; Auto vars:     Size  Location     Type
 19541 ;;  data            1    2[BANK0 ] unsigned char 
 19542 ;; Return value:  Size  Location     Type
 19543 ;;                  1    wreg      void 
 19544 ;; Registers used:
 19545 ;;		wreg, status,2, status,0, cstack
 19546 ;; Tracked objects:
 19547 ;;		On entry : 0/0
 19548 ;;		On exit  : 0/0
 19549 ;;		Unchanged: 0/0
 19550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19554 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19555 ;;Total ram usage:        1 bytes
 19556 ;; Hardware stack levels used:    1
 19557 ;; Hardware stack levels required when called:    8
 19558 ;; This function calls:
 19559 ;;		_lcdNibble
 19560 ;; This function is called by:
 19561 ;;		_UI
 19562 ;;		_change_state_to_menu_start
 19563 ;;		_change_state_to_menu_12
 19564 ;;		_change_state_to_menu_22
 19565 ;;		_initLCD
 19566 ;;		_printRTC
 19567 ;;		_Loading
 19568 ;;		_EEPROM_write
 19569 ;;		_Test
 19570 ;;		_algorithmTest
 19571 ;;		_sensorTest
 19572 ;;		_actuatorTest
 19573 ;;		_BothServos
 19574 ;;		_PortTestDC
 19575 ;;		_PlatformTest
 19576 ;;		_SpeedTest
 19577 ;;		_BlockerTest
 19578 ;;		_arm
 19579 ;;		_PortTestPusher
 19580 ;; This function uses a non-reentrant model
 19581 ;;
 19582                           
 19583                           	psect	text62
 19584  0060C6                     __ptext62:
 19585                           	opt stack 0
 19586  0060C6                     _lcdInst:
 19587                           	opt stack 20
 19588                           
 19589                           ; BSR set to: 0
 19590                           ;incstack = 0
 19591                           ;lcdInst@data stored from wreg
 19592  0060C6  0100               	movlb	0	; () banked
 19593  0060C8  6F82               	movwf	lcdInst@data& (0+255),b
 19594                           
 19595                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19596  0060CA  948C               	bcf	3980,2,c	;volatile
 19597                           
 19598                           ;lcd.c: 17: lcdNibble(data);
 19599  0060CC  0100               	movlb	0	; () banked
 19600  0060CE  5182               	movf	lcdInst@data& (0+255),w,b
 19601  0060D0  EC46  F02B         	call	_lcdNibble
 19602  0060D4  0012               	return		;funcret
 19603  0060D6                     __end_of_lcdInst:
 19604                           	opt stack 0
 19605                           tblptru	equ	0xFF8
 19606                           tblptrh	equ	0xFF7
 19607                           tblptrl	equ	0xFF6
 19608                           tablat	equ	0xFF5
 19609                           prodh	equ	0xFF4
 19610                           prodl	equ	0xFF3
 19611                           intcon	equ	0xFF2
 19612                           intcon2	equ	0xFF1
 19613                           intcon3	equ	0xFF0
 19614                           indf0	equ	0xFEF
 19615                           postinc0	equ	0xFEE
 19616                           fsr0h	equ	0xFEA
 19617                           fsr0l	equ	0xFE9
 19618                           wreg	equ	0xFE8
 19619                           postdec1	equ	0xFE5
 19620                           fsr1l	equ	0xFE1
 19621                           indf2	equ	0xFDF
 19622                           postinc2	equ	0xFDE
 19623                           postdec2	equ	0xFDD
 19624                           fsr2h	equ	0xFDA
 19625                           fsr2l	equ	0xFD9
 19626                           status	equ	0xFD8
 19627                           
 19628 ;; *************** function _lcdNibble *****************
 19629 ;; Defined at:
 19630 ;;		line 25 in file "lcd.c"
 19631 ;; Parameters:    Size  Location     Type
 19632 ;;  data            1    wreg     unsigned char 
 19633 ;; Auto vars:     Size  Location     Type
 19634 ;;  data            1    1[BANK0 ] unsigned char 
 19635 ;;  temp            1    0[BANK0 ] unsigned char 
 19636 ;; Return value:  Size  Location     Type
 19637 ;;                  1    wreg      void 
 19638 ;; Registers used:
 19639 ;;		wreg, status,2, status,0
 19640 ;; Tracked objects:
 19641 ;;		On entry : 0/0
 19642 ;;		On exit  : 0/0
 19643 ;;		Unchanged: 0/0
 19644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19646 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19649 ;;Total ram usage:        2 bytes
 19650 ;; Hardware stack levels used:    1
 19651 ;; Hardware stack levels required when called:    7
 19652 ;; This function calls:
 19653 ;;		Nothing
 19654 ;; This function is called by:
 19655 ;;		_lcdInst
 19656 ;;		_putch
 19657 ;; This function uses a non-reentrant model
 19658 ;;
 19659                           
 19660                           	psect	text63
 19661  00568C                     __ptext63:
 19662                           	opt stack 0
 19663  00568C                     _lcdNibble:
 19664                           	opt stack 20
 19665                           
 19666                           ;incstack = 0
 19667                           ;lcdNibble@data stored from wreg
 19668  00568C  0100               	movlb	0	; () banked
 19669  00568E  6F81               	movwf	lcdNibble@data& (0+255),b
 19670                           
 19671                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 19672  005690  9EF2               	bcf	intcon,7,c	;volatile
 19673                           
 19674                           ;lcd.c: 28: char temp = data & 0xF0;
 19675  005692  0100               	movlb	0	; () banked
 19676  005694  5181               	movf	lcdNibble@data& (0+255),w,b
 19677  005696  0BF0               	andlw	240
 19678  005698  0100               	movlb	0	; () banked
 19679  00569A  6F80               	movwf	lcdNibble@temp& (0+255),b
 19680                           
 19681                           ;lcd.c: 29: LATD = LATD & 0x0F;
 19682  00569C  508C               	movf	3980,w,c	;volatile
 19683  00569E  0B0F               	andlw	15
 19684  0056A0  6E8C               	movwf	3980,c	;volatile
 19685                           
 19686                           ;lcd.c: 30: LATD = temp | LATD;
 19687  0056A2  0100               	movlb	0	; () banked
 19688  0056A4  5180               	movf	lcdNibble@temp& (0+255),w,b
 19689  0056A6  108C               	iorwf	3980,w,c	;volatile
 19690  0056A8  6E8C               	movwf	3980,c	;volatile
 19691                           
 19692                           ; BSR set to: 0
 19693                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 19694  0056AA  868C               	bsf	3980,3,c	;volatile
 19695                           
 19696                           ; BSR set to: 0
 19697                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19698  0056AC  0E42               	movlw	66
 19699  0056AE                     u12447:
 19700  0056AE  2EE8               	decfsz	wreg,f,c
 19701  0056B0  D7FE               	bra	u12447
 19702  0056B2  D000               	nop2	
 19703                           
 19704                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 19705  0056B4  968C               	bcf	3980,3,c	;volatile
 19706                           
 19707                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19708  0056B6  0E42               	movlw	66
 19709  0056B8                     u12457:
 19710  0056B8  2EE8               	decfsz	wreg,f,c
 19711  0056BA  D7FE               	bra	u12457
 19712  0056BC  D000               	nop2	
 19713                           
 19714                           ;lcd.c: 37: data = data << 4;
 19715  0056BE  0100               	movlb	0	; () banked
 19716  0056C0  3981               	swapf	lcdNibble@data& (0+255),w,b
 19717  0056C2  0BF0               	andlw	240
 19718  0056C4  0100               	movlb	0	; () banked
 19719  0056C6  6F81               	movwf	lcdNibble@data& (0+255),b
 19720                           
 19721                           ;lcd.c: 39: temp = data & 0xF0;
 19722  0056C8  0100               	movlb	0	; () banked
 19723  0056CA  5181               	movf	lcdNibble@data& (0+255),w,b
 19724  0056CC  0BF0               	andlw	240
 19725  0056CE  0100               	movlb	0	; () banked
 19726  0056D0  6F80               	movwf	lcdNibble@temp& (0+255),b
 19727                           
 19728                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19729  0056D2  508C               	movf	3980,w,c	;volatile
 19730  0056D4  0B0F               	andlw	15
 19731  0056D6  6E8C               	movwf	3980,c	;volatile
 19732                           
 19733                           ;lcd.c: 41: LATD = temp | LATD;
 19734  0056D8  0100               	movlb	0	; () banked
 19735  0056DA  5180               	movf	lcdNibble@temp& (0+255),w,b
 19736  0056DC  108C               	iorwf	3980,w,c	;volatile
 19737  0056DE  6E8C               	movwf	3980,c	;volatile
 19738                           
 19739                           ; BSR set to: 0
 19740                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19741  0056E0  868C               	bsf	3980,3,c	;volatile
 19742                           
 19743                           ; BSR set to: 0
 19744                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19745  0056E2  0E42               	movlw	66
 19746  0056E4                     u12467:
 19747  0056E4  2EE8               	decfsz	wreg,f,c
 19748  0056E6  D7FE               	bra	u12467
 19749  0056E8  D000               	nop2	
 19750                           
 19751                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19752  0056EA  968C               	bcf	3980,3,c	;volatile
 19753                           
 19754                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19755  0056EC  0E42               	movlw	66
 19756  0056EE                     u12477:
 19757  0056EE  2EE8               	decfsz	wreg,f,c
 19758  0056F0  D7FE               	bra	u12477
 19759  0056F2  D000               	nop2	
 19760                           
 19761                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19762  0056F4  8EF2               	bsf	intcon,7,c	;volatile
 19763  0056F6  0012               	return		;funcret
 19764  0056F8                     __end_of_lcdNibble:
 19765                           	opt stack 0
 19766                           tblptru	equ	0xFF8
 19767                           tblptrh	equ	0xFF7
 19768                           tblptrl	equ	0xFF6
 19769                           tablat	equ	0xFF5
 19770                           prodh	equ	0xFF4
 19771                           prodl	equ	0xFF3
 19772                           intcon	equ	0xFF2
 19773                           intcon2	equ	0xFF1
 19774                           intcon3	equ	0xFF0
 19775                           indf0	equ	0xFEF
 19776                           postinc0	equ	0xFEE
 19777                           fsr0h	equ	0xFEA
 19778                           fsr0l	equ	0xFE9
 19779                           wreg	equ	0xFE8
 19780                           postdec1	equ	0xFE5
 19781                           fsr1l	equ	0xFE1
 19782                           indf2	equ	0xFDF
 19783                           postinc2	equ	0xFDE
 19784                           postdec2	equ	0xFDD
 19785                           fsr2h	equ	0xFDA
 19786                           fsr2l	equ	0xFD9
 19787                           status	equ	0xFD8
 19788                           
 19789 ;; *************** function _handler *****************
 19790 ;; Defined at:
 19791 ;;		line 16 in file "interruptHandler.c"
 19792 ;; Parameters:    Size  Location     Type
 19793 ;;		None
 19794 ;; Auto vars:     Size  Location     Type
 19795 ;;		None
 19796 ;; Return value:  Size  Location     Type
 19797 ;;                  1    wreg      void 
 19798 ;; Registers used:
 19799 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19800 ;; Tracked objects:
 19801 ;;		On entry : 0/0
 19802 ;;		On exit  : 0/0
 19803 ;;		Unchanged: 0/0
 19804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19807 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19808 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19809 ;;Total ram usage:       16 bytes
 19810 ;; Hardware stack levels used:    1
 19811 ;; Hardware stack levels required when called:    6
 19812 ;; This function calls:
 19813 ;;		_printSortTimer
 19814 ;;		_updateArmState
 19815 ;;		_updateMenu
 19816 ;;		_updateServoStates
 19817 ;;		i2_change_state_to_menu_start
 19818 ;; This function is called by:
 19819 ;;		Interrupt level 2
 19820 ;; This function uses a non-reentrant model
 19821 ;;
 19822                           
 19823                           	psect	intcode
 19824  000008                     __pintcode:
 19825                           	opt stack 0
 19826  000008                     _handler:
 19827                           	opt stack 18
 19828                           
 19829                           ;incstack = 0
 19830  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19831  00000A  EDCB  F01D         	call	int_func,f	;refresh shadow registers
 19832                           tblptru	equ	0xFF8
 19833                           tblptrh	equ	0xFF7
 19834                           tblptrl	equ	0xFF6
 19835                           tablat	equ	0xFF5
 19836                           prodh	equ	0xFF4
 19837                           prodl	equ	0xFF3
 19838                           intcon	equ	0xFF2
 19839                           intcon2	equ	0xFF1
 19840                           intcon3	equ	0xFF0
 19841                           indf0	equ	0xFEF
 19842                           postinc0	equ	0xFEE
 19843                           fsr0h	equ	0xFEA
 19844                           fsr0l	equ	0xFE9
 19845                           wreg	equ	0xFE8
 19846                           postdec1	equ	0xFE5
 19847                           fsr1l	equ	0xFE1
 19848                           indf2	equ	0xFDF
 19849                           postinc2	equ	0xFDE
 19850                           postdec2	equ	0xFDD
 19851                           fsr2h	equ	0xFDA
 19852                           fsr2l	equ	0xFD9
 19853                           status	equ	0xFD8
 19854                           
 19855                           	psect	intcode_body
 19856  003B96                     __pintcode_body:
 19857                           	opt stack 18
 19858  003B96                     int_func:
 19859                           	opt stack 18
 19860  003B96  0006               	pop		; remove dummy address from shadow register refresh
 19861  003B98  CFFA F04B          	movff	pclath,??_handler+2
 19862  003B9C  CFFB F04C          	movff	pclatu,??_handler+3
 19863  003BA0  CFE9 F04D          	movff	fsr0l,??_handler+4
 19864  003BA4  CFEA F04E          	movff	fsr0h,??_handler+5
 19865  003BA8  CFE1 F04F          	movff	fsr1l,??_handler+6
 19866  003BAC  CFE2 F050          	movff	fsr1h,??_handler+7
 19867  003BB0  CFD9 F051          	movff	fsr2l,??_handler+8
 19868  003BB4  CFDA F052          	movff	fsr2h,??_handler+9
 19869  003BB8  CFF3 F053          	movff	prodl,??_handler+10
 19870  003BBC  CFF4 F054          	movff	prodh,??_handler+11
 19871  003BC0  CFF6 F055          	movff	tblptrl,??_handler+12
 19872  003BC4  CFF7 F056          	movff	tblptrh,??_handler+13
 19873  003BC8  CFF8 F057          	movff	tblptru,??_handler+14
 19874  003BCC  CFF5 F058          	movff	tablat,??_handler+15
 19875                           
 19876                           ;interruptHandler.c: 18: if(INT1IF){
 19877  003BD0  A0F0               	btfss	intcon3,0,c	;volatile
 19878  003BD2  D034               	goto	i2l10648
 19879                           
 19880                           ;interruptHandler.c: 19: INT1IF = 0;
 19881  003BD4  90F0               	bcf	intcon3,0,c	;volatile
 19882                           
 19883                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19884  003BD6  3881               	swapf	3969,w,c	;volatile
 19885  003BD8  0B0F               	andlw	15
 19886  003BDA  0B0F               	andlw	15
 19887  003BDC  6E49               	movwf	??_handler& (0+255),c
 19888  003BDE  6A4A               	clrf	(??_handler+1)& (0+255),c
 19889  003BE0  0EA7               	movlw	low _keys
 19890  003BE2  2449               	addwf	??_handler,w,c
 19891  003BE4  6EF6               	movwf	tblptrl,c
 19892  003BE6  0EFA               	movlw	high _keys
 19893  003BE8  204A               	addwfc	??_handler+1,w,c
 19894  003BEA  6EF7               	movwf	tblptrh,c
 19895  003BEC                     	if	1	;There are 3 active tblptr bytes
 19896  003BEC  6AF8               	clrf	tblptru,c
 19897  003BEE  0E00               	movlw	low (__mediumconst shr (0+16))
 19898  003BF0  22F8               	addwfc	tblptru,f,c
 19899  003BF2                     	endif
 19900  003BF2  0008               	tblrd		*
 19901  003BF4  CFF5 F07D          	movff	tablat,_input	;volatile
 19902                           
 19903                           ;interruptHandler.c: 21: if(input == '*'){
 19904  003BF8  0E2A               	movlw	42
 19905  003BFA  187D               	xorwf	_input,w,c	;volatile
 19906  003BFC  B4D8               	btfsc	status,2,c
 19907  003BFE  D00D               	goto	i2l10642
 19908  003C00  D018               	goto	i2l10644
 19909  003C02                     i2l10632:
 19910                           
 19911                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19912  003C02  0E03               	movlw	3
 19913  003C04  D007               	goto	L16
 19914  003C06                     i2l10634:
 19915                           
 19916                           ; BSR set to: 0
 19917                           ;interruptHandler.c: 27: machine_state = UI_state;
 19918  003C06  0E00               	movlw	0
 19919  003C08  0100               	movlb	0	; () banked
 19920  003C0A  6FFC               	movwf	_machine_state& (0+255),b
 19921                           
 19922                           ; BSR set to: 0
 19923                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19924  003C0C  EC9B  F02F         	call	i2_change_state_to_menu_start	;wreg free
 19925                           
 19926                           ;interruptHandler.c: 29: break;
 19927  003C10  D015               	goto	i2l10648
 19928  003C12                     i2l10638:
 19929                           
 19930                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19931  003C12  0E02               	movlw	2
 19932  003C14                     L16:
 19933  003C14  0100               	movlb	0	; () banked
 19934  003C16  6FFC               	movwf	_machine_state& (0+255),b
 19935                           
 19936                           ; BSR set to: 0
 19937                           ;interruptHandler.c: 33: }
 19938                           
 19939                           ;interruptHandler.c: 32: break;
 19940  003C18  D011               	goto	i2l10648
 19941  003C1A                     i2l10642:
 19942  003C1A  0100               	movlb	0	; () banked
 19943  003C1C  51FC               	movf	_machine_state& (0+255),w,b
 19944                           
 19945                           ; Switch size 1, requested type "space"
 19946                           ; Number of cases is 3, Range of values is 0 to 3
 19947                           ; switch strategies available:
 19948                           ; Name         Instructions Cycles
 19949                           ; simple_byte           10     6 (average)
 19950                           ;	Chosen strategy is simple_byte
 19951  003C1E  0A00               	xorlw	0	; case 0
 19952  003C20  B4D8               	btfsc	status,2,c
 19953  003C22  D7EF               	goto	i2l10632
 19954  003C24  0A01               	xorlw	1	; case 1
 19955  003C26  B4D8               	btfsc	status,2,c
 19956  003C28  D7F4               	goto	i2l10638
 19957  003C2A  0A02               	xorlw	2	; case 3
 19958  003C2C  B4D8               	btfsc	status,2,c
 19959  003C2E  D7EB               	goto	i2l10634
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;interruptHandler.c: 34: }
 19963  003C30  D005               	goto	i2l10648
 19964  003C32                     i2l10644:
 19965                           
 19966                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19967  003C32  0100               	movlb	0	; () banked
 19968  003C34  51FC               	movf	_machine_state& (0+255),w,b
 19969  003C36  B4D8               	btfsc	status,2,c
 19970                           
 19971                           ; BSR set to: 0
 19972                           ;interruptHandler.c: 36: updateMenu();
 19973  003C38  EC50  F01B         	call	_updateMenu	;wreg free
 19974  003C3C                     i2l10648:
 19975                           
 19976                           ;interruptHandler.c: 37: }
 19977                           ;interruptHandler.c: 38: }
 19978                           ;interruptHandler.c: 41: if(TMR0IF){
 19979  003C3C  A4F2               	btfss	intcon,2,c	;volatile
 19980  003C3E  D00C               	goto	i2l10662
 19981                           
 19982                           ;interruptHandler.c: 42: TMR0IF = 0;
 19983  003C40  94F2               	bcf	intcon,2,c	;volatile
 19984                           
 19985                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19986  003C42  0100               	movlb	0	; () banked
 19987  003C44  05FC               	decf	_machine_state& (0+255),w,b
 19988  003C46  A4D8               	btfss	status,2,c
 19989  003C48  D007               	goto	i2l10662
 19990                           
 19991                           ; BSR set to: 0
 19992                           ;interruptHandler.c: 44: printSortTimer();
 19993  003C4A  ECED  F014         	call	_printSortTimer	;wreg free
 19994                           
 19995                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19996  003C4E  0E85               	movlw	133
 19997  003C50  6ED7               	movwf	4055,c	;volatile
 19998                           
 19999                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 20000  003C52  0EEE               	movlw	238
 20001  003C54  6ED6               	movwf	4054,c	;volatile
 20002                           
 20003                           ;interruptHandler.c: 48: TMR0ON = 1;
 20004  003C56  8ED5               	bsf	4053,7,c	;volatile
 20005  003C58                     i2l10662:
 20006                           
 20007                           ;interruptHandler.c: 49: }
 20008                           ;interruptHandler.c: 50: }
 20009                           ;interruptHandler.c: 53: if(TMR1IF){
 20010  003C58  A09E               	btfss	3998,0,c	;volatile
 20011  003C5A  D02A               	goto	i2l10690
 20012                           
 20013                           ;interruptHandler.c: 54: TMR1IF = 0;
 20014  003C5C  909E               	bcf	3998,0,c	;volatile
 20015                           
 20016                           ;interruptHandler.c: 55: TMR1ON = 0;
 20017  003C5E  90CD               	bcf	4045,0,c	;volatile
 20018                           
 20019                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 20020  003C60  0100               	movlb	0	; () banked
 20021  003C62  05FC               	decf	_machine_state& (0+255),w,b
 20022  003C64  A4D8               	btfss	status,2,c
 20023  003C66  D024               	goto	i2l10690
 20024                           
 20025                           ; BSR set to: 0
 20026                           ;interruptHandler.c: 57: if(was_low_1){
 20027  003C68  5077               	movf	_was_low_1,w,c	;volatile
 20028  003C6A  1078               	iorwf	_was_low_1+1,w,c	;volatile
 20029  003C6C  B4D8               	btfsc	status,2,c
 20030  003C6E  D00A               	goto	i2l1086
 20031                           
 20032                           ; BSR set to: 0
 20033                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 20034  003C70  828B               	bsf	3979,1,c	;volatile
 20035                           
 20036                           ; BSR set to: 0
 20037                           ;interruptHandler.c: 59: was_low_1 = 0;
 20038  003C72  0E00               	movlw	0
 20039  003C74  6E78               	movwf	_was_low_1+1,c	;volatile
 20040  003C76  0E00               	movlw	0
 20041  003C78  6E77               	movwf	_was_low_1,c	;volatile
 20042                           
 20043                           ; BSR set to: 0
 20044                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 20045  003C7A  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 20046                           
 20047                           ; BSR set to: 0
 20048                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 20049  003C7E  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 20050                           
 20051                           ;interruptHandler.c: 62: }
 20052  003C82  D00F               	goto	i2l10684
 20053  003C84                     i2l1086:
 20054                           
 20055                           ; BSR set to: 0
 20056                           ;interruptHandler.c: 63: else{
 20057                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 20058  003C84  928B               	bcf	3979,1,c	;volatile
 20059                           
 20060                           ; BSR set to: 0
 20061                           ;interruptHandler.c: 65: was_low_1 = 1;
 20062  003C86  0E00               	movlw	0
 20063  003C88  6E78               	movwf	_was_low_1+1,c	;volatile
 20064  003C8A  0E01               	movlw	1
 20065  003C8C  6E77               	movwf	_was_low_1,c	;volatile
 20066                           
 20067                           ; BSR set to: 0
 20068                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 20069  003C8E  0101               	movlb	1	; () banked
 20070  003C90  511C               	movf	_servoTimes& (0+255),w,b
 20071  003C92  0800               	sublw	0
 20072  003C94  0F20               	addlw	32
 20073  003C96  6ECF               	movwf	4047,c	;volatile
 20074                           
 20075                           ; BSR set to: 1
 20076                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 20077  003C98  0101               	movlb	1	; () banked
 20078  003C9A  511E               	movf	(_servoTimes+2)& (0+255),w,b
 20079  003C9C  0800               	sublw	0
 20080  003C9E  0F20               	addlw	32
 20081  003CA0  6ECE               	movwf	4046,c	;volatile
 20082  003CA2                     i2l10684:
 20083                           
 20084                           ;interruptHandler.c: 68: }
 20085                           ;interruptHandler.c: 69: TMR1ON = 1;
 20086  003CA2  80CD               	bsf	4045,0,c	;volatile
 20087                           
 20088                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 20089  003CA4  0E0A               	movlw	10
 20090  003CA6  266D               	addwf	_servo_timer_counter,f,c	;volatile
 20091  003CA8  0E00               	movlw	0
 20092  003CAA  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 20093                           
 20094                           ;interruptHandler.c: 72: updateServoStates();
 20095  003CAC  ECBA  F01F         	call	_updateServoStates	;wreg free
 20096  003CB0                     i2l10690:
 20097                           
 20098                           ;interruptHandler.c: 73: }
 20099                           ;interruptHandler.c: 74: }
 20100                           ;interruptHandler.c: 77: if(TMR2IF){
 20101  003CB0  A29E               	btfss	3998,1,c	;volatile
 20102  003CB2  D026               	goto	i2l10716
 20103                           
 20104                           ;interruptHandler.c: 80: TMR2IF = 0;
 20105  003CB4  929E               	bcf	3998,1,c	;volatile
 20106                           
 20107                           ;interruptHandler.c: 81: TMR2ON = 0;
 20108  003CB6  94CA               	bcf	4042,2,c	;volatile
 20109                           
 20110                           ;interruptHandler.c: 82: timer2_counter++;
 20111  003CB8  4A73               	infsnz	_timer2_counter,f,c	;volatile
 20112  003CBA  2A74               	incf	_timer2_counter+1,f,c	;volatile
 20113                           
 20114                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 20115  003CBC  0100               	movlb	0	; () banked
 20116  003CBE  05FC               	decf	_machine_state& (0+255),w,b
 20117  003CC0  A4D8               	btfss	status,2,c
 20118  003CC2  D01E               	goto	i2l10716
 20119                           
 20120                           ; BSR set to: 0
 20121                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 20122  003CC4  5079               	movf	_was_low_2,w,c	;volatile
 20123  003CC6  107A               	iorwf	_was_low_2+1,w,c	;volatile
 20124  003CC8  B4D8               	btfsc	status,2,c
 20125  003CCA  D00A               	goto	i2l10706
 20126                           
 20127                           ; BSR set to: 0
 20128  003CCC  0E02               	movlw	2
 20129  003CCE  1873               	xorwf	_timer2_counter,w,c	;volatile
 20130  003CD0  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 20131  003CD2  A4D8               	btfss	status,2,c
 20132  003CD4  D005               	goto	i2l10706
 20133                           
 20134                           ; BSR set to: 0
 20135                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 20136  003CD6  868A               	bsf	3978,3,c	;volatile
 20137                           
 20138                           ; BSR set to: 0
 20139                           ;interruptHandler.c: 87: was_low_2 = 0;
 20140  003CD8  0E00               	movlw	0
 20141  003CDA  6E7A               	movwf	_was_low_2+1,c	;volatile
 20142  003CDC  0E00               	movlw	0
 20143  003CDE  D008               	goto	L17
 20144  003CE0                     i2l10706:
 20145                           
 20146                           ; BSR set to: 0
 20147                           ;interruptHandler.c: 90: else if(!was_low_2){
 20148  003CE0  5079               	movf	_was_low_2,w,c	;volatile
 20149  003CE2  107A               	iorwf	_was_low_2+1,w,c	;volatile
 20150  003CE4  A4D8               	btfss	status,2,c
 20151  003CE6  D009               	goto	i2l10712
 20152                           
 20153                           ; BSR set to: 0
 20154                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 20155  003CE8  968A               	bcf	3978,3,c	;volatile
 20156                           
 20157                           ; BSR set to: 0
 20158                           ;interruptHandler.c: 92: was_low_2 = 1;
 20159  003CEA  0E00               	movlw	0
 20160  003CEC  6E7A               	movwf	_was_low_2+1,c	;volatile
 20161  003CEE  0E01               	movlw	1
 20162  003CF0                     L17:
 20163  003CF0  6E79               	movwf	_was_low_2,c	;volatile
 20164                           
 20165                           ;interruptHandler.c: 93: timer2_counter = 0;
 20166  003CF2  0E00               	movlw	0
 20167  003CF4  6E74               	movwf	_timer2_counter+1,c	;volatile
 20168  003CF6  0E00               	movlw	0
 20169  003CF8  6E73               	movwf	_timer2_counter,c	;volatile
 20170  003CFA                     i2l10712:
 20171                           
 20172                           ; BSR set to: 0
 20173                           ;interruptHandler.c: 94: }
 20174                           ;interruptHandler.c: 95: updateArmState();
 20175  003CFA  EC6C  F02D         	call	_updateArmState	;wreg free
 20176                           
 20177                           ;interruptHandler.c: 96: TMR2ON = 1;
 20178  003CFE  84CA               	bsf	4042,2,c	;volatile
 20179  003D00                     i2l10716:
 20180                           
 20181                           ;interruptHandler.c: 97: }
 20182                           ;interruptHandler.c: 98: }
 20183                           ;interruptHandler.c: 101: if(TMR3IF){
 20184  003D00  A2A1               	btfss	4001,1,c	;volatile
 20185  003D02  D024               	goto	i2l1097
 20186                           
 20187                           ;interruptHandler.c: 102: TMR3IF = 0;
 20188  003D04  92A1               	bcf	4001,1,c	;volatile
 20189                           
 20190                           ;interruptHandler.c: 103: TMR3ON = 0;
 20191  003D06  90B1               	bcf	4017,0,c	;volatile
 20192                           
 20193                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 20194  003D08  0100               	movlb	0	; () banked
 20195  003D0A  05FC               	decf	_machine_state& (0+255),w,b
 20196  003D0C  A4D8               	btfss	status,2,c
 20197  003D0E  D01E               	goto	i2l1097
 20198                           
 20199                           ; BSR set to: 0
 20200                           ;interruptHandler.c: 105: if(was_low_3){
 20201  003D10  507B               	movf	_was_low_3,w,c	;volatile
 20202  003D12  107C               	iorwf	_was_low_3+1,w,c	;volatile
 20203  003D14  B4D8               	btfsc	status,2,c
 20204  003D16  D00A               	goto	i2l1095
 20205                           
 20206                           ; BSR set to: 0
 20207                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 20208  003D18  848B               	bsf	3979,2,c	;volatile
 20209                           
 20210                           ; BSR set to: 0
 20211                           ;interruptHandler.c: 107: was_low_3 = 0;
 20212  003D1A  0E00               	movlw	0
 20213  003D1C  6E7C               	movwf	_was_low_3+1,c	;volatile
 20214  003D1E  0E00               	movlw	0
 20215  003D20  6E7B               	movwf	_was_low_3,c	;volatile
 20216                           
 20217                           ; BSR set to: 0
 20218                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 20219  003D22  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 20220                           
 20221                           ; BSR set to: 0
 20222                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 20223  003D26  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 20224                           
 20225                           ;interruptHandler.c: 110: }
 20226  003D2A  D00F               	goto	i2l10738
 20227  003D2C                     i2l1095:
 20228                           
 20229                           ; BSR set to: 0
 20230                           ;interruptHandler.c: 111: else{
 20231                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 20232  003D2C  948B               	bcf	3979,2,c	;volatile
 20233                           
 20234                           ; BSR set to: 0
 20235                           ;interruptHandler.c: 113: was_low_3 = 1;
 20236  003D2E  0E00               	movlw	0
 20237  003D30  6E7C               	movwf	_was_low_3+1,c	;volatile
 20238  003D32  0E01               	movlw	1
 20239  003D34  6E7B               	movwf	_was_low_3,c	;volatile
 20240                           
 20241                           ; BSR set to: 0
 20242                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 20243  003D36  0101               	movlb	1	; () banked
 20244  003D38  5120               	movf	(_servoTimes+4)& (0+255),w,b
 20245  003D3A  0800               	sublw	0
 20246  003D3C  0F20               	addlw	32
 20247  003D3E  6EB3               	movwf	4019,c	;volatile
 20248                           
 20249                           ; BSR set to: 1
 20250                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 20251  003D40  0101               	movlb	1	; () banked
 20252  003D42  5122               	movf	(_servoTimes+6)& (0+255),w,b
 20253  003D44  0800               	sublw	0
 20254  003D46  0F20               	addlw	32
 20255  003D48  6EB2               	movwf	4018,c	;volatile
 20256  003D4A                     i2l10738:
 20257                           
 20258                           ;interruptHandler.c: 116: }
 20259                           ;interruptHandler.c: 117: TMR3ON = 1;
 20260  003D4A  80B1               	bsf	4017,0,c	;volatile
 20261  003D4C                     i2l1097:
 20262  003D4C  C058  FFF5         	movff	??_handler+15,tablat
 20263  003D50  C057  FFF8         	movff	??_handler+14,tblptru
 20264  003D54  C056  FFF7         	movff	??_handler+13,tblptrh
 20265  003D58  C055  FFF6         	movff	??_handler+12,tblptrl
 20266  003D5C  C054  FFF4         	movff	??_handler+11,prodh
 20267  003D60  C053  FFF3         	movff	??_handler+10,prodl
 20268  003D64  C052  FFDA         	movff	??_handler+9,fsr2h
 20269  003D68  C051  FFD9         	movff	??_handler+8,fsr2l
 20270  003D6C  C050  FFE2         	movff	??_handler+7,fsr1h
 20271  003D70  C04F  FFE1         	movff	??_handler+6,fsr1l
 20272  003D74  C04E  FFEA         	movff	??_handler+5,fsr0h
 20273  003D78  C04D  FFE9         	movff	??_handler+4,fsr0l
 20274  003D7C  C04C  FFFB         	movff	??_handler+3,pclatu
 20275  003D80  C04B  FFFA         	movff	??_handler+2,pclath
 20276  003D84  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20277  003D86  0011               	retfie		f
 20278  003D88                     __end_of_handler:
 20279                           	opt stack 0
 20280                           pclatu	equ	0xFFB
 20281                           pclath	equ	0xFFA
 20282                           tblptru	equ	0xFF8
 20283                           tblptrh	equ	0xFF7
 20284                           tblptrl	equ	0xFF6
 20285                           tablat	equ	0xFF5
 20286                           prodh	equ	0xFF4
 20287                           prodl	equ	0xFF3
 20288                           intcon	equ	0xFF2
 20289                           intcon2	equ	0xFF1
 20290                           intcon3	equ	0xFF0
 20291                           indf0	equ	0xFEF
 20292                           postinc0	equ	0xFEE
 20293                           fsr0h	equ	0xFEA
 20294                           fsr0l	equ	0xFE9
 20295                           wreg	equ	0xFE8
 20296                           postdec1	equ	0xFE5
 20297                           fsr1h	equ	0xFE2
 20298                           fsr1l	equ	0xFE1
 20299                           indf2	equ	0xFDF
 20300                           postinc2	equ	0xFDE
 20301                           postdec2	equ	0xFDD
 20302                           fsr2h	equ	0xFDA
 20303                           fsr2l	equ	0xFD9
 20304                           status	equ	0xFD8
 20305                           
 20306 ;; *************** function _updateServoStates *****************
 20307 ;; Defined at:
 20308 ;;		line 670 in file "sort.c"
 20309 ;; Parameters:    Size  Location     Type
 20310 ;;		None
 20311 ;; Auto vars:     Size  Location     Type
 20312 ;;		None
 20313 ;; Return value:  Size  Location     Type
 20314 ;;                  1    wreg      void 
 20315 ;; Registers used:
 20316 ;;		wreg, status,2, status,0, cstack
 20317 ;; Tracked objects:
 20318 ;;		On entry : 0/0
 20319 ;;		On exit  : 0/0
 20320 ;;		Unchanged: 0/0
 20321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20325 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20326 ;;Total ram usage:        2 bytes
 20327 ;; Hardware stack levels used:    1
 20328 ;; Hardware stack levels required when called:    1
 20329 ;; This function calls:
 20330 ;;		i2_updateServoPosition
 20331 ;; This function is called by:
 20332 ;;		_handler
 20333 ;; This function uses a non-reentrant model
 20334 ;;
 20335                           
 20336                           	psect	text65
 20337  003F74                     __ptext65:
 20338                           	opt stack 0
 20339  003F74                     _updateServoStates:
 20340                           	opt stack 22
 20341                           
 20342                           ;sort.c: 672: if(servo_timer_counter >= servo_timer_target){
 20343                           
 20344                           ;incstack = 0
 20345  003F74  506F               	movf	_servo_timer_target,w,c	;volatile
 20346  003F76  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 20347  003F78  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 20348  003F7A  0A80               	xorlw	128
 20349  003F7C  6E09               	movwf	??_updateServoStates& (0+255),c
 20350  003F7E  5070               	movf	_servo_timer_target+1,w,c	;volatile
 20351  003F80  0A80               	xorlw	128
 20352  003F82  5809               	subwfb	??_updateServoStates& (0+255),w,c
 20353  003F84  A0D8               	btfss	status,0,c
 20354  003F86  0012               	return	
 20355                           
 20356                           ;sort.c: 674: if(f_panning_to_bin){
 20357  003F88  5069               	movf	_f_panning_to_bin,w,c	;volatile
 20358  003F8A  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 20359  003F8C  A4D8               	btfss	status,2,c
 20360  003F8E  D036               	goto	i2l10506
 20361  003F90  D05F               	goto	i2l10510
 20362  003F92                     i2l10480:
 20363                           
 20364                           ;sort.c: 678: updateServoPosition(1260, 3);
 20365  003F92  0E04               	movlw	4
 20366  003F94  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20367  003F96  0EEC               	movlw	236
 20368  003F98  6E01               	movwf	i2updateServoPosition@time_us,c
 20369  003F9A  0E00               	movlw	0
 20370  003F9C  6E04               	movwf	i2updateServoPosition@timer+1,c
 20371  003F9E  0E03               	movlw	3
 20372  003FA0  6E03               	movwf	i2updateServoPosition@timer,c
 20373  003FA2  ECD6  F02A         	call	i2_updateServoPosition	;wreg free
 20374  003FA6  D025               	goto	i2l10500
 20375  003FA8                     i2l10484:
 20376                           
 20377                           ;sort.c: 680: servo_timer_target = 700;
 20378  003FA8  0E02               	movlw	2
 20379  003FAA  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20380  003FAC  0EBC               	movlw	188
 20381  003FAE  6E6F               	movwf	_servo_timer_target,c	;volatile
 20382                           
 20383                           ;sort.c: 681: break;
 20384  003FB0  D04A               	goto	i2l10508
 20385  003FB2                     i2l10486:
 20386                           
 20387                           ;sort.c: 683: updateServoPosition(1260, 3);
 20388  003FB2  0E04               	movlw	4
 20389  003FB4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20390  003FB6  0EEC               	movlw	236
 20391  003FB8  6E01               	movwf	i2updateServoPosition@time_us,c
 20392  003FBA  0E00               	movlw	0
 20393  003FBC  6E04               	movwf	i2updateServoPosition@timer+1,c
 20394  003FBE  0E03               	movlw	3
 20395  003FC0  6E03               	movwf	i2updateServoPosition@timer,c
 20396  003FC2  ECD6  F02A         	call	i2_updateServoPosition	;wreg free
 20397  003FC6  D015               	goto	i2l10500
 20398  003FC8                     i2l10492:
 20399                           
 20400                           ;sort.c: 689: updateServoPosition(1390, 3);
 20401  003FC8  0E05               	movlw	5
 20402  003FCA  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20403  003FCC  0E6E               	movlw	110
 20404  003FCE  6E01               	movwf	i2updateServoPosition@time_us,c
 20405  003FD0  0E00               	movlw	0
 20406  003FD2  6E04               	movwf	i2updateServoPosition@timer+1,c
 20407  003FD4  0E03               	movlw	3
 20408  003FD6  6E03               	movwf	i2updateServoPosition@timer,c
 20409  003FD8  ECD6  F02A         	call	i2_updateServoPosition	;wreg free
 20410  003FDC  D00A               	goto	i2l10500
 20411  003FDE                     i2l10498:
 20412                           
 20413                           ;sort.c: 694: updateServoPosition(1390, 3);
 20414  003FDE  0E05               	movlw	5
 20415  003FE0  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20416  003FE2  0E6E               	movlw	110
 20417  003FE4  6E01               	movwf	i2updateServoPosition@time_us,c
 20418  003FE6  0E00               	movlw	0
 20419  003FE8  6E04               	movwf	i2updateServoPosition@timer+1,c
 20420  003FEA  0E03               	movlw	3
 20421  003FEC  6E03               	movwf	i2updateServoPosition@timer,c
 20422  003FEE  ECD6  F02A         	call	i2_updateServoPosition	;wreg free
 20423  003FF2                     i2l10500:
 20424                           
 20425                           ;sort.c: 695: servo_timer_counter = 0;
 20426  003FF2  0E00               	movlw	0
 20427  003FF4  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20428  003FF6  0E00               	movlw	0
 20429  003FF8  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20430  003FFA  D7D6               	goto	i2l10484
 20431  003FFC                     i2l10506:
 20432  003FFC  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 20433  004000  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 20434                           
 20435                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 20436                           ; Switch size 1, requested type "space"
 20437                           ; Number of cases is 4, Range of values is 1 to 9
 20438                           ; switch strategies available:
 20439                           ; Name         Instructions Cycles
 20440                           ; simple_byte           13     7 (average)
 20441                           ;	Chosen strategy is simple_byte
 20442  004004  500A               	movf	??_updateServoStates+1,w,c
 20443  004006  0A01               	xorlw	1	; case 1
 20444  004008  B4D8               	btfsc	status,2,c
 20445  00400A  D00A               	goto	i2l11184
 20446  00400C  0A02               	xorlw	2	; case 3
 20447  00400E  B4D8               	btfsc	status,2,c
 20448  004010  D00C               	goto	i2l11186
 20449  004012  0A05               	xorlw	5	; case 6
 20450  004014  B4D8               	btfsc	status,2,c
 20451  004016  D00E               	goto	i2l11188
 20452  004018  0A0F               	xorlw	15	; case 9
 20453  00401A  B4D8               	btfsc	status,2,c
 20454  00401C  D010               	goto	i2l11190
 20455  00401E  D013               	goto	i2l10508
 20456  004020                     i2l11184:
 20457                           
 20458                           ; Switch size 1, requested type "space"
 20459                           ; Number of cases is 1, Range of values is 144 to 144
 20460                           ; switch strategies available:
 20461                           ; Name         Instructions Cycles
 20462                           ; simple_byte            4     3 (average)
 20463                           ;	Chosen strategy is simple_byte
 20464  004020  5009               	movf	??_updateServoStates,w,c
 20465  004022  0A90               	xorlw	144	; case 144
 20466  004024  B4D8               	btfsc	status,2,c
 20467  004026  D7B5               	goto	i2l10480
 20468  004028  D00E               	goto	i2l10508
 20469  00402A                     i2l11186:
 20470                           
 20471                           ; Switch size 1, requested type "space"
 20472                           ; Number of cases is 1, Range of values is 82 to 82
 20473                           ; switch strategies available:
 20474                           ; Name         Instructions Cycles
 20475                           ; simple_byte            4     3 (average)
 20476                           ;	Chosen strategy is simple_byte
 20477  00402A  5009               	movf	??_updateServoStates,w,c
 20478  00402C  0A52               	xorlw	82	; case 82
 20479  00402E  B4D8               	btfsc	status,2,c
 20480  004030  D7C0               	goto	i2l10486
 20481  004032  D009               	goto	i2l10508
 20482  004034                     i2l11188:
 20483                           
 20484                           ; Switch size 1, requested type "space"
 20485                           ; Number of cases is 1, Range of values is 14 to 14
 20486                           ; switch strategies available:
 20487                           ; Name         Instructions Cycles
 20488                           ; simple_byte            4     3 (average)
 20489                           ;	Chosen strategy is simple_byte
 20490  004034  5009               	movf	??_updateServoStates,w,c
 20491  004036  0A0E               	xorlw	14	; case 14
 20492  004038  B4D8               	btfsc	status,2,c
 20493  00403A  D7C6               	goto	i2l10492
 20494  00403C  D004               	goto	i2l10508
 20495  00403E                     i2l11190:
 20496                           
 20497                           ; Switch size 1, requested type "space"
 20498                           ; Number of cases is 1, Range of values is 196 to 196
 20499                           ; switch strategies available:
 20500                           ; Name         Instructions Cycles
 20501                           ; simple_byte            4     3 (average)
 20502                           ;	Chosen strategy is simple_byte
 20503  00403E  5009               	movf	??_updateServoStates,w,c
 20504  004040  0AC4               	xorlw	196	; case 196
 20505  004042  B4D8               	btfsc	status,2,c
 20506  004044  D7CC               	goto	i2l10498
 20507  004046                     i2l10508:
 20508                           
 20509                           ;sort.c: 701: f_panning_to_bin = 0;
 20510  004046  0E00               	movlw	0
 20511  004048  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 20512  00404A  0E00               	movlw	0
 20513  00404C  6E69               	movwf	_f_panning_to_bin,c	;volatile
 20514                           
 20515                           ;sort.c: 702: }
 20516  00404E  0012               	return	
 20517  004050                     i2l10510:
 20518                           
 20519                           ;sort.c: 703: else if(pan_servo_state == 1200){
 20520  004050  0EB0               	movlw	176
 20521  004052  186B               	xorwf	_pan_servo_state,w,c	;volatile
 20522  004054  E15A               	bnz	i2l10540
 20523  004056  0E04               	movlw	4
 20524  004058  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 20525  00405A  A4D8               	btfss	status,2,c
 20526  00405C  D056               	goto	i2l10540
 20527                           
 20528                           ;sort.c: 705: servo_timer_counter = 0;
 20529  00405E  0E00               	movlw	0
 20530  004060  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20531  004062  0E00               	movlw	0
 20532  004064  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20533                           
 20534                           ;sort.c: 706: }
 20535  004066  0012               	return	
 20536  004068                     i2l10514:
 20537                           
 20538                           ;sort.c: 711: updateServoPosition(1050, 3);
 20539  004068  0E04               	movlw	4
 20540  00406A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20541  00406C  0E1A               	movlw	26
 20542  00406E  6E01               	movwf	i2updateServoPosition@time_us,c
 20543  004070  0E00               	movlw	0
 20544  004072  6E04               	movwf	i2updateServoPosition@timer+1,c
 20545  004074  0E03               	movlw	3
 20546  004076  6E03               	movwf	i2updateServoPosition@timer,c
 20547  004078  ECD6  F02A         	call	i2_updateServoPosition	;wreg free
 20548                           
 20549                           ;sort.c: 712: servo_timer_counter = 0;
 20550  00407C  0E00               	movlw	0
 20551  00407E  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20552  004080  0E00               	movlw	0
 20553  004082  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20554                           
 20555                           ;sort.c: 713: servo_timer_target = 750;
 20556  004084  0E02               	movlw	2
 20557  004086  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20558  004088  0EEE               	movlw	238
 20559  00408A  6E6F               	movwf	_servo_timer_target,c	;volatile
 20560                           
 20561                           ;sort.c: 714: break;
 20562  00408C  0012               	return	
 20563  00408E                     i2l10520:
 20564                           
 20565                           ;sort.c: 716: updateServoPosition(1050, 3);
 20566  00408E  0E04               	movlw	4
 20567  004090  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20568  004092  0E1A               	movlw	26
 20569  004094  6E01               	movwf	i2updateServoPosition@time_us,c
 20570  004096  0E00               	movlw	0
 20571  004098  6E04               	movwf	i2updateServoPosition@timer+1,c
 20572  00409A  0E03               	movlw	3
 20573  00409C  6E03               	movwf	i2updateServoPosition@timer,c
 20574  00409E  ECD6  F02A         	call	i2_updateServoPosition	;wreg free
 20575                           
 20576                           ;sort.c: 717: servo_timer_counter = 0;
 20577  0040A2  0E00               	movlw	0
 20578  0040A4  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20579  0040A6  0E00               	movlw	0
 20580  0040A8  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20581                           
 20582                           ;sort.c: 718: servo_timer_target = 750;
 20583  0040AA  0E02               	movlw	2
 20584  0040AC  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20585  0040AE  0EEE               	movlw	238
 20586  0040B0  6E6F               	movwf	_servo_timer_target,c	;volatile
 20587                           
 20588                           ;sort.c: 719: break;
 20589  0040B2  0012               	return	
 20590  0040B4                     i2l10526:
 20591                           
 20592                           ;sort.c: 722: updateServoPosition(1200, 1);
 20593  0040B4  0E04               	movlw	4
 20594  0040B6  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20595  0040B8  0EB0               	movlw	176
 20596  0040BA  6E01               	movwf	i2updateServoPosition@time_us,c
 20597  0040BC  0E00               	movlw	0
 20598  0040BE  6E04               	movwf	i2updateServoPosition@timer+1,c
 20599  0040C0  0E01               	movlw	1
 20600  0040C2  6E03               	movwf	i2updateServoPosition@timer,c
 20601  0040C4  ECD6  F02A         	call	i2_updateServoPosition	;wreg free
 20602                           
 20603                           ;sort.c: 723: updateServoPosition(1050, 3);
 20604  0040C8  0E04               	movlw	4
 20605  0040CA  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20606  0040CC  0E1A               	movlw	26
 20607  0040CE  6E01               	movwf	i2updateServoPosition@time_us,c
 20608  0040D0  0E00               	movlw	0
 20609  0040D2  6E04               	movwf	i2updateServoPosition@timer+1,c
 20610  0040D4  0E03               	movlw	3
 20611  0040D6  6E03               	movwf	i2updateServoPosition@timer,c
 20612  0040D8  ECD6  F02A         	call	i2_updateServoPosition	;wreg free
 20613                           
 20614                           ;sort.c: 724: servo_timer_counter = 0;
 20615  0040DC  0E00               	movlw	0
 20616  0040DE  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20617  0040E0  0E00               	movlw	0
 20618  0040E2  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20619                           
 20620                           ;sort.c: 725: servo_timer_target = 9999;
 20621  0040E4  0E27               	movlw	39
 20622  0040E6  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20623  0040E8  0E0F               	movlw	15
 20624  0040EA  6E6F               	movwf	_servo_timer_target,c	;volatile
 20625                           
 20626                           ;sort.c: 727: f_can_distributed = 1;
 20627  0040EC  0E00               	movlw	0
 20628  0040EE  0101               	movlb	1	; () banked
 20629  0040F0  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 20630  0040F2  0E01               	movlw	1
 20631  0040F4  6F35               	movwf	_f_can_distributed& (0+255),b
 20632                           
 20633                           ; BSR set to: 1
 20634                           ;sort.c: 728: if(f_lastCan == 1){
 20635  0040F6  0100               	movlb	0	; () banked
 20636  0040F8  05EC               	decf	_f_lastCan& (0+255),w,b
 20637  0040FA  0100               	movlb	0	; () banked
 20638  0040FC  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
 20639  0040FE  A4D8               	btfss	status,2,c
 20640  004100  0012               	return	
 20641                           
 20642                           ; BSR set to: 0
 20643                           ;sort.c: 729: machine_state = DoneSorting_state;
 20644  004102  0E02               	movlw	2
 20645  004104  0100               	movlb	0	; () banked
 20646  004106  6FFC               	movwf	_machine_state& (0+255),b
 20647                           
 20648                           ; BSR set to: 0
 20649                           ;sort.c: 735: }
 20650                           
 20651                           ; BSR set to: 0
 20652                           ;sort.c: 734: break;
 20653                           
 20654                           ;sort.c: 733: default:
 20655                           
 20656                           ; BSR set to: 0
 20657                           ;sort.c: 730: }
 20658                           ;sort.c: 731: break;
 20659  004108  0012               	return	
 20660  00410A                     i2l10540:
 20661  00410A  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 20662  00410E  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 20663                           
 20664                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20665                           ; Switch size 1, requested type "space"
 20666                           ; Number of cases is 2, Range of values is 4 to 5
 20667                           ; switch strategies available:
 20668                           ; Name         Instructions Cycles
 20669                           ; simple_byte            7     4 (average)
 20670                           ;	Chosen strategy is simple_byte
 20671  004112  500A               	movf	??_updateServoStates+1,w,c
 20672  004114  0A04               	xorlw	4	; case 4
 20673  004116  B4D8               	btfsc	status,2,c
 20674  004118  D004               	goto	i2l11192
 20675  00411A  0A01               	xorlw	1	; case 5
 20676  00411C  A4D8               	btfss	status,2,c
 20677  00411E  0012               	return	
 20678  004120  D008               	goto	i2l11194
 20679  004122                     i2l11192:
 20680                           
 20681                           ; Switch size 1, requested type "space"
 20682                           ; Number of cases is 2, Range of values is 26 to 236
 20683                           ; switch strategies available:
 20684                           ; Name         Instructions Cycles
 20685                           ; simple_byte            7     4 (average)
 20686                           ;	Chosen strategy is simple_byte
 20687  004122  5009               	movf	??_updateServoStates,w,c
 20688  004124  0A1A               	xorlw	26	; case 26
 20689  004126  B4D8               	btfsc	status,2,c
 20690  004128  D7C5               	goto	i2l10526
 20691  00412A  0AF6               	xorlw	246	; case 236
 20692  00412C  A4D8               	btfss	status,2,c
 20693  00412E  0012               	return	
 20694  004130  D79B               	goto	i2l10514
 20695  004132                     i2l11194:
 20696                           
 20697                           ; Switch size 1, requested type "space"
 20698                           ; Number of cases is 1, Range of values is 110 to 110
 20699                           ; switch strategies available:
 20700                           ; Name         Instructions Cycles
 20701                           ; simple_byte            4     3 (average)
 20702                           ;	Chosen strategy is simple_byte
 20703  004132  5009               	movf	??_updateServoStates,w,c
 20704  004134  0A6E               	xorlw	110	; case 110
 20705  004136  A4D8               	btfss	status,2,c
 20706  004138  0012               	return	
 20707  00413A  D7A9               	goto	i2l10520
 20708  00413C                     __end_of_updateServoStates:
 20709                           	opt stack 0
 20710                           pclatu	equ	0xFFB
 20711                           pclath	equ	0xFFA
 20712                           tblptru	equ	0xFF8
 20713                           tblptrh	equ	0xFF7
 20714                           tblptrl	equ	0xFF6
 20715                           tablat	equ	0xFF5
 20716                           prodh	equ	0xFF4
 20717                           prodl	equ	0xFF3
 20718                           intcon	equ	0xFF2
 20719                           intcon2	equ	0xFF1
 20720                           intcon3	equ	0xFF0
 20721                           indf0	equ	0xFEF
 20722                           postinc0	equ	0xFEE
 20723                           fsr0h	equ	0xFEA
 20724                           fsr0l	equ	0xFE9
 20725                           wreg	equ	0xFE8
 20726                           postdec1	equ	0xFE5
 20727                           fsr1h	equ	0xFE2
 20728                           fsr1l	equ	0xFE1
 20729                           indf2	equ	0xFDF
 20730                           postinc2	equ	0xFDE
 20731                           postdec2	equ	0xFDD
 20732                           fsr2h	equ	0xFDA
 20733                           fsr2l	equ	0xFD9
 20734                           status	equ	0xFD8
 20735                           
 20736 ;; *************** function i2_updateServoPosition *****************
 20737 ;; Defined at:
 20738 ;;		line 655 in file "sort.c"
 20739 ;; Parameters:    Size  Location     Type
 20740 ;;  time_us         2    0[COMRAM] int 
 20741 ;;  timer           2    2[COMRAM] int 
 20742 ;; Auto vars:     Size  Location     Type
 20743 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20744 ;; Return value:  Size  Location     Type
 20745 ;;                  1    wreg      void 
 20746 ;; Registers used:
 20747 ;;		wreg, status,2, status,0
 20748 ;; Tracked objects:
 20749 ;;		On entry : 0/0
 20750 ;;		On exit  : 0/0
 20751 ;;		Unchanged: 0/0
 20752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20756 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20757 ;;Total ram usage:        8 bytes
 20758 ;; Hardware stack levels used:    1
 20759 ;; This function calls:
 20760 ;;		Nothing
 20761 ;; This function is called by:
 20762 ;;		_updateServoStates
 20763 ;; This function uses a non-reentrant model
 20764 ;;
 20765                           
 20766                           	psect	text66
 20767  0055AC                     __ptext66:
 20768                           	opt stack 0
 20769  0055AC                     i2_updateServoPosition:
 20770                           	opt stack 22
 20771                           
 20772                           ;sort.c: 656: unsigned int my_time = 65535 - time_us;
 20773                           
 20774                           ;incstack = 0
 20775  0055AC  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20776  0055B0  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20777  0055B4  1E05               	comf	??i2_updateServoPosition,f,c
 20778  0055B6  1E06               	comf	??i2_updateServoPosition+1,f,c
 20779  0055B8  4A05               	infsnz	??i2_updateServoPosition,f,c
 20780  0055BA  2A06               	incf	??i2_updateServoPosition+1,f,c
 20781  0055BC  0EFF               	movlw	255
 20782  0055BE  2405               	addwf	??i2_updateServoPosition,w,c
 20783  0055C0  6E07               	movwf	i2updateServoPosition@my_time,c
 20784  0055C2  0EFF               	movlw	255
 20785  0055C4  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20786  0055C6  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20787                           
 20788                           ;sort.c: 657: switch(timer){
 20789  0055C8  D019               	goto	i2l9634
 20790  0055CA                     i2l9628:
 20791                           
 20792                           ;sort.c: 659: servoTimes[0] = my_time >> 8;
 20793  0055CA  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20794  0055CC  0101               	movlb	1	; () banked
 20795  0055CE  6F1C               	movwf	_servoTimes& (0+255),b
 20796  0055D0  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 20797                           
 20798                           ;sort.c: 660: servoTimes[1] = my_time & 0xFF;
 20799  0055D2  5007               	movf	i2updateServoPosition@my_time,w,c
 20800  0055D4  0101               	movlb	1	; () banked
 20801  0055D6  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 20802  0055D8  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 20803                           
 20804                           ; BSR set to: 1
 20805                           ;sort.c: 662: pan_servo_state = time_us;
 20806  0055DA  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20807  0055DE  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20808  0055E2                     i2l967:
 20809                           
 20810                           ;sort.c: 664: servoTimes[2] = my_time >> 8;
 20811  0055E2  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20812  0055E4  0101               	movlb	1	; () banked
 20813  0055E6  6F20               	movwf	(_servoTimes+4)& (0+255),b
 20814  0055E8  6B21               	clrf	(_servoTimes+5)& (0+255),b
 20815                           
 20816                           ;sort.c: 665: servoTimes[3] = my_time & 0xFF;
 20817  0055EA  5007               	movf	i2updateServoPosition@my_time,w,c
 20818  0055EC  0101               	movlb	1	; () banked
 20819  0055EE  6F22               	movwf	(_servoTimes+6)& (0+255),b
 20820  0055F0  6B23               	clrf	(_servoTimes+7)& (0+255),b
 20821                           
 20822                           ; BSR set to: 1
 20823                           ;sort.c: 667: tilt_servo_state = time_us;
 20824  0055F2  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20825  0055F6  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20826                           
 20827                           ;sort.c: 668: }
 20828  0055FA  0012               	return	
 20829  0055FC                     i2l9634:
 20830  0055FC  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20831  005600  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20832                           
 20833                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20834                           ; Switch size 1, requested type "space"
 20835                           ; Number of cases is 1, Range of values is 0 to 0
 20836                           ; switch strategies available:
 20837                           ; Name         Instructions Cycles
 20838                           ; simple_byte            4     3 (average)
 20839                           ;	Chosen strategy is simple_byte
 20840  005604  5006               	movf	??i2_updateServoPosition+1,w,c
 20841  005606  0A00               	xorlw	0	; case 0
 20842  005608  A4D8               	btfss	status,2,c
 20843  00560A  0012               	return	
 20844                           
 20845                           ; Switch size 1, requested type "space"
 20846                           ; Number of cases is 2, Range of values is 1 to 3
 20847                           ; switch strategies available:
 20848                           ; Name         Instructions Cycles
 20849                           ; simple_byte            7     4 (average)
 20850                           ;	Chosen strategy is simple_byte
 20851  00560C  5005               	movf	??i2_updateServoPosition,w,c
 20852  00560E  0A01               	xorlw	1	; case 1
 20853  005610  B4D8               	btfsc	status,2,c
 20854  005612  D7DB               	goto	i2l9628
 20855  005614  0A02               	xorlw	2	; case 3
 20856  005616  A4D8               	btfss	status,2,c
 20857  005618  0012               	return	
 20858  00561A  D7E3               	goto	i2l967
 20859  00561C                     __end_ofi2_updateServoPosition:
 20860                           	opt stack 0
 20861                           pclatu	equ	0xFFB
 20862                           pclath	equ	0xFFA
 20863                           tblptru	equ	0xFF8
 20864                           tblptrh	equ	0xFF7
 20865                           tblptrl	equ	0xFF6
 20866                           tablat	equ	0xFF5
 20867                           prodh	equ	0xFF4
 20868                           prodl	equ	0xFF3
 20869                           intcon	equ	0xFF2
 20870                           intcon2	equ	0xFF1
 20871                           intcon3	equ	0xFF0
 20872                           indf0	equ	0xFEF
 20873                           postinc0	equ	0xFEE
 20874                           fsr0h	equ	0xFEA
 20875                           fsr0l	equ	0xFE9
 20876                           wreg	equ	0xFE8
 20877                           postdec1	equ	0xFE5
 20878                           fsr1h	equ	0xFE2
 20879                           fsr1l	equ	0xFE1
 20880                           indf2	equ	0xFDF
 20881                           postinc2	equ	0xFDE
 20882                           postdec2	equ	0xFDD
 20883                           fsr2h	equ	0xFDA
 20884                           fsr2l	equ	0xFD9
 20885                           status	equ	0xFD8
 20886                           
 20887 ;; *************** function _updateMenu *****************
 20888 ;; Defined at:
 20889 ;;		line 216 in file "UI.c"
 20890 ;; Parameters:    Size  Location     Type
 20891 ;;		None
 20892 ;; Auto vars:     Size  Location     Type
 20893 ;;		None
 20894 ;; Return value:  Size  Location     Type
 20895 ;;                  1    wreg      void 
 20896 ;; Registers used:
 20897 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20898 ;; Tracked objects:
 20899 ;;		On entry : 0/0
 20900 ;;		On exit  : 0/0
 20901 ;;		Unchanged: 0/0
 20902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20905 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20906 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20907 ;;Total ram usage:        2 bytes
 20908 ;; Hardware stack levels used:    1
 20909 ;; Hardware stack levels required when called:    5
 20910 ;; This function calls:
 20911 ;;		_change_state_to_logs_11
 20912 ;;		_change_state_to_logs_12
 20913 ;;		_change_state_to_logs_22
 20914 ;;		_change_state_to_logs_23
 20915 ;;		_change_state_to_logs_33
 20916 ;;		_change_state_to_logs_34
 20917 ;;		_change_state_to_menu_11
 20918 ;;		_change_state_to_menu_23
 20919 ;;		_dispLogs
 20920 ;;		_inputHandler
 20921 ;;		i2_change_state_to_menu_12
 20922 ;;		i2_change_state_to_menu_22
 20923 ;;		i2_change_state_to_menu_start
 20924 ;; This function is called by:
 20925 ;;		_handler
 20926 ;; This function uses a non-reentrant model
 20927 ;;
 20928                           
 20929                           	psect	text67
 20930  0036A0                     __ptext67:
 20931                           	opt stack 0
 20932  0036A0                     _updateMenu:
 20933                           	opt stack 18
 20934                           
 20935                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20936                           
 20937                           ;incstack = 0
 20938  0036A0  0E00               	movlw	0
 20939  0036A2  6E76               	movwf	_up+1,c
 20940  0036A4  0E00               	movlw	0
 20941  0036A6  6E75               	movwf	_up,c
 20942  0036A8  0E00               	movlw	0
 20943  0036AA  6E66               	movwf	_down+1,c
 20944  0036AC  0E00               	movlw	0
 20945  0036AE  6E65               	movwf	_down,c
 20946  0036B0  0E00               	movlw	0
 20947  0036B2  6E68               	movwf	_enter+1,c
 20948  0036B4  0E00               	movlw	0
 20949  0036B6  6E67               	movwf	_enter,c
 20950  0036B8  0E00               	movlw	0
 20951  0036BA  6E5C               	movwf	_back+1,c
 20952  0036BC  0E00               	movlw	0
 20953  0036BE  6E5B               	movwf	_back,c
 20954                           
 20955                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20956  0036C0  9EF2               	bcf	intcon,7,c	;volatile
 20957                           
 20958                           ;UI.c: 220: if (inputHandler()
 20959                           ;UI.c: 223: ){
 20960  0036C2  ECC4  F01E         	call	_inputHandler	;wreg free
 20961  0036C6  502A               	movf	?_inputHandler,w,c
 20962  0036C8  102B               	iorwf	?_inputHandler+1,w,c
 20963  0036CA  A4D8               	btfss	status,2,c
 20964  0036CC  D112               	goto	i2l10196
 20965  0036CE  D146               	goto	i2l275
 20966  0036D0                     i2l10048:
 20967                           
 20968                           ;UI.c: 227: change_state_to_menu_11();
 20969  0036D0  EC88  F02E         	call	_change_state_to_menu_11	;wreg free
 20970                           
 20971                           ;UI.c: 228: break;
 20972  0036D4  D143               	goto	i2l275
 20973  0036D6                     i2l10050:
 20974                           
 20975                           ;UI.c: 231: if(up){
 20976  0036D6  5075               	movf	_up,w,c
 20977  0036D8  1076               	iorwf	_up+1,w,c
 20978  0036DA  B4D8               	btfsc	status,2,c
 20979  0036DC  D003               	goto	i2l10054
 20980                           
 20981                           ;UI.c: 232: change_state_to_menu_23();
 20982  0036DE  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 20983                           
 20984                           ;UI.c: 233: }
 20985  0036E2  D13C               	goto	i2l275
 20986  0036E4                     i2l10054:
 20987                           
 20988                           ;UI.c: 234: else if(down){
 20989  0036E4  5065               	movf	_down,w,c
 20990  0036E6  1066               	iorwf	_down+1,w,c
 20991  0036E8  B4D8               	btfsc	status,2,c
 20992  0036EA  D003               	goto	i2l10058
 20993                           
 20994                           ;UI.c: 235: change_state_to_menu_12();
 20995  0036EC  EC58  F02E         	call	i2_change_state_to_menu_12	;wreg free
 20996                           
 20997                           ;UI.c: 236: }
 20998  0036F0  D135               	goto	i2l275
 20999  0036F2                     i2l10058:
 21000                           
 21001                           ;UI.c: 237: else if(enter){
 21002  0036F2  5067               	movf	_enter,w,c
 21003  0036F4  1068               	iorwf	_enter+1,w,c
 21004  0036F6  B4D8               	btfsc	status,2,c
 21005  0036F8  D131               	goto	i2l275
 21006                           
 21007                           ;UI.c: 238: change_state_to_menu_start();
 21008  0036FA  EC9B  F02F         	call	i2_change_state_to_menu_start	;wreg free
 21009                           
 21010                           ;UI.c: 239: }
 21011                           ;UI.c: 240: break;
 21012  0036FE  D12E               	goto	i2l275
 21013  003700                     i2l10062:
 21014                           
 21015                           ;UI.c: 243: if(up){
 21016  003700  5075               	movf	_up,w,c
 21017  003702  1076               	iorwf	_up+1,w,c
 21018  003704  B4D8               	btfsc	status,2,c
 21019  003706  D003               	goto	i2l10066
 21020                           
 21021                           ;UI.c: 244: change_state_to_menu_11();
 21022  003708  EC88  F02E         	call	_change_state_to_menu_11	;wreg free
 21023                           
 21024                           ;UI.c: 245: }
 21025  00370C  D127               	goto	i2l275
 21026  00370E                     i2l10066:
 21027                           
 21028                           ;UI.c: 246: else if(down){
 21029  00370E  5065               	movf	_down,w,c
 21030  003710  1066               	iorwf	_down+1,w,c
 21031  003712  B4D8               	btfsc	status,2,c
 21032  003714  D011               	goto	i2l10082
 21033                           
 21034                           ;UI.c: 247: change_state_to_menu_23();
 21035  003716  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 21036                           
 21037                           ;UI.c: 248: }
 21038  00371A  D120               	goto	i2l275
 21039  00371C                     i2l10074:
 21040                           
 21041                           ;UI.c: 255: if(up){
 21042  00371C  5075               	movf	_up,w,c
 21043  00371E  1076               	iorwf	_up+1,w,c
 21044  003720  B4D8               	btfsc	status,2,c
 21045  003722  D003               	goto	i2l10078
 21046                           
 21047                           ;UI.c: 256: change_state_to_menu_11();
 21048  003724  EC88  F02E         	call	_change_state_to_menu_11	;wreg free
 21049                           
 21050                           ;UI.c: 257: }
 21051  003728  D119               	goto	i2l275
 21052  00372A                     i2l10078:
 21053                           
 21054                           ;UI.c: 258: else if(down){
 21055  00372A  5065               	movf	_down,w,c
 21056  00372C  1066               	iorwf	_down+1,w,c
 21057  00372E  B4D8               	btfsc	status,2,c
 21058  003730  D003               	goto	i2l10082
 21059                           
 21060                           ;UI.c: 259: change_state_to_menu_23();
 21061  003732  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 21062                           
 21063                           ;UI.c: 260: }
 21064  003736  D112               	goto	i2l275
 21065  003738                     i2l10082:
 21066                           
 21067                           ;UI.c: 261: else if(enter){
 21068  003738  5067               	movf	_enter,w,c
 21069  00373A  1068               	iorwf	_enter+1,w,c
 21070  00373C  B4D8               	btfsc	status,2,c
 21071  00373E  D10E               	goto	i2l275
 21072                           
 21073                           ;UI.c: 262: machine_state = Sorting_state;
 21074  003740  0E01               	movlw	1
 21075  003742  0100               	movlb	0	; () banked
 21076  003744  6FFC               	movwf	_machine_state& (0+255),b
 21077                           
 21078                           ; BSR set to: 0
 21079                           ;UI.c: 263: }
 21080                           ;UI.c: 264: break;
 21081                           
 21082                           ; BSR set to: 0
 21083                           
 21084                           ; BSR set to: 0
 21085  003746  D10A               	goto	i2l275
 21086  003748                     i2l10086:
 21087                           
 21088                           ;UI.c: 267: if(up){
 21089  003748  5075               	movf	_up,w,c
 21090  00374A  1076               	iorwf	_up+1,w,c
 21091  00374C  B4D8               	btfsc	status,2,c
 21092  00374E  D003               	goto	i2l10090
 21093                           
 21094                           ;UI.c: 268: change_state_to_menu_22();
 21095  003750  EC40  F02E         	call	i2_change_state_to_menu_22	;wreg free
 21096                           
 21097                           ;UI.c: 269: }
 21098  003754  D103               	goto	i2l275
 21099  003756                     i2l10090:
 21100                           
 21101                           ;UI.c: 270: else if(down){
 21102  003756  5065               	movf	_down,w,c
 21103  003758  1066               	iorwf	_down+1,w,c
 21104  00375A  B4D8               	btfsc	status,2,c
 21105  00375C  D003               	goto	i2l10094
 21106                           
 21107                           ;UI.c: 271: change_state_to_menu_11();
 21108  00375E  EC88  F02E         	call	_change_state_to_menu_11	;wreg free
 21109                           
 21110                           ;UI.c: 272: }
 21111  003762  D0FC               	goto	i2l275
 21112  003764                     i2l10094:
 21113                           
 21114                           ;UI.c: 273: else if(enter){
 21115  003764  5067               	movf	_enter,w,c
 21116  003766  1068               	iorwf	_enter+1,w,c
 21117  003768  B4D8               	btfsc	status,2,c
 21118  00376A  D0F8               	goto	i2l275
 21119                           
 21120                           ;UI.c: 274: change_state_to_logs_11();
 21121  00376C  EC00  F02F         	call	_change_state_to_logs_11	;wreg free
 21122                           
 21123                           ;UI.c: 275: }
 21124                           ;UI.c: 276: break;
 21125  003770  D0F5               	goto	i2l275
 21126  003772                     i2l10098:
 21127                           
 21128                           ;UI.c: 279: if(up){
 21129  003772  5075               	movf	_up,w,c
 21130  003774  1076               	iorwf	_up+1,w,c
 21131  003776  B4D8               	btfsc	status,2,c
 21132  003778  D003               	goto	i2l10102
 21133                           
 21134                           ;UI.c: 280: change_state_to_logs_34();
 21135  00377A  ECA0  F02E         	call	_change_state_to_logs_34	;wreg free
 21136                           
 21137                           ;UI.c: 281: }
 21138  00377E  D0EE               	goto	i2l275
 21139  003780                     i2l10102:
 21140                           
 21141                           ;UI.c: 282: else if(down){
 21142  003780  5065               	movf	_down,w,c
 21143  003782  1066               	iorwf	_down+1,w,c
 21144  003784  B4D8               	btfsc	status,2,c
 21145  003786  D003               	goto	i2l10106
 21146                           
 21147                           ;UI.c: 283: change_state_to_logs_12();
 21148  003788  ECE8  F02E         	call	_change_state_to_logs_12	;wreg free
 21149                           
 21150                           ;UI.c: 284: }
 21151  00378C  D0E7               	goto	i2l275
 21152  00378E                     i2l10106:
 21153                           
 21154                           ;UI.c: 285: else if(enter){
 21155  00378E  5067               	movf	_enter,w,c
 21156  003790  1068               	iorwf	_enter+1,w,c
 21157  003792  B4D8               	btfsc	status,2,c
 21158  003794  D007               	goto	i2l10110
 21159                           
 21160                           ;UI.c: 286: dispLogs(1);
 21161  003796  0E00               	movlw	0
 21162  003798  6E13               	movwf	dispLogs@myLog+1,c
 21163  00379A  0E01               	movlw	1
 21164  00379C  6E12               	movwf	dispLogs@myLog,c
 21165  00379E  ECD5  F02F         	call	_dispLogs	;wreg free
 21166                           
 21167                           ;UI.c: 287: }
 21168  0037A2  D0DC               	goto	i2l275
 21169  0037A4                     i2l10110:
 21170                           
 21171                           ;UI.c: 288: else if(back){
 21172  0037A4  505B               	movf	_back,w,c
 21173  0037A6  105C               	iorwf	_back+1,w,c
 21174  0037A8  B4D8               	btfsc	status,2,c
 21175  0037AA  D0D8               	goto	i2l275
 21176                           
 21177                           ;UI.c: 289: change_state_to_menu_23();
 21178  0037AC  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 21179                           
 21180                           ;UI.c: 290: }
 21181                           ;UI.c: 291: break;
 21182  0037B0  D0D5               	goto	i2l275
 21183  0037B2                     i2l10114:
 21184                           
 21185                           ;UI.c: 294: if(up){
 21186  0037B2  5075               	movf	_up,w,c
 21187  0037B4  1076               	iorwf	_up+1,w,c
 21188  0037B6  B4D8               	btfsc	status,2,c
 21189  0037B8  D003               	goto	i2l10118
 21190                           
 21191                           ;UI.c: 295: change_state_to_logs_11();
 21192  0037BA  EC00  F02F         	call	_change_state_to_logs_11	;wreg free
 21193                           
 21194                           ;UI.c: 296: }
 21195  0037BE  D0CE               	goto	i2l275
 21196  0037C0                     i2l10118:
 21197                           
 21198                           ;UI.c: 297: else if(down){
 21199  0037C0  5065               	movf	_down,w,c
 21200  0037C2  1066               	iorwf	_down+1,w,c
 21201  0037C4  B4D8               	btfsc	status,2,c
 21202  0037C6  D003               	goto	i2l10122
 21203                           
 21204                           ;UI.c: 298: change_state_to_logs_23();
 21205  0037C8  EC2F  F02F         	call	_change_state_to_logs_23	;wreg free
 21206                           
 21207                           ;UI.c: 299: }
 21208  0037CC  D0C7               	goto	i2l275
 21209  0037CE                     i2l10122:
 21210                           
 21211                           ;UI.c: 300: else if(enter){
 21212  0037CE  5067               	movf	_enter,w,c
 21213  0037D0  1068               	iorwf	_enter+1,w,c
 21214  0037D2  B4D8               	btfsc	status,2,c
 21215  0037D4  D007               	goto	i2l10126
 21216                           
 21217                           ;UI.c: 301: dispLogs(2);
 21218  0037D6  0E00               	movlw	0
 21219  0037D8  6E13               	movwf	dispLogs@myLog+1,c
 21220  0037DA  0E02               	movlw	2
 21221  0037DC  6E12               	movwf	dispLogs@myLog,c
 21222  0037DE  ECD5  F02F         	call	_dispLogs	;wreg free
 21223                           
 21224                           ;UI.c: 302: }
 21225  0037E2  D0BC               	goto	i2l275
 21226  0037E4                     i2l10126:
 21227                           
 21228                           ;UI.c: 303: else if(back){
 21229  0037E4  505B               	movf	_back,w,c
 21230  0037E6  105C               	iorwf	_back+1,w,c
 21231  0037E8  B4D8               	btfsc	status,2,c
 21232  0037EA  D0B8               	goto	i2l275
 21233                           
 21234                           ;UI.c: 304: change_state_to_menu_23();
 21235  0037EC  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 21236                           
 21237                           ;UI.c: 305: }
 21238                           ;UI.c: 306: break;
 21239  0037F0  D0B5               	goto	i2l275
 21240  0037F2                     i2l10130:
 21241                           
 21242                           ;UI.c: 309: if(up){
 21243  0037F2  5075               	movf	_up,w,c
 21244  0037F4  1076               	iorwf	_up+1,w,c
 21245  0037F6  B4D8               	btfsc	status,2,c
 21246  0037F8  D003               	goto	i2l10134
 21247                           
 21248                           ;UI.c: 310: change_state_to_logs_11();
 21249  0037FA  EC00  F02F         	call	_change_state_to_logs_11	;wreg free
 21250                           
 21251                           ;UI.c: 311: }
 21252  0037FE  D0AE               	goto	i2l275
 21253  003800                     i2l10134:
 21254                           
 21255                           ;UI.c: 312: else if(down){
 21256  003800  5065               	movf	_down,w,c
 21257  003802  1066               	iorwf	_down+1,w,c
 21258  003804  B4D8               	btfsc	status,2,c
 21259  003806  D003               	goto	i2l10138
 21260                           
 21261                           ;UI.c: 313: change_state_to_logs_23();
 21262  003808  EC2F  F02F         	call	_change_state_to_logs_23	;wreg free
 21263                           
 21264                           ;UI.c: 314: }
 21265  00380C  D0A7               	goto	i2l275
 21266  00380E                     i2l10138:
 21267                           
 21268                           ;UI.c: 315: else if(enter){
 21269  00380E  5067               	movf	_enter,w,c
 21270  003810  1068               	iorwf	_enter+1,w,c
 21271  003812  B4D8               	btfsc	status,2,c
 21272  003814  D007               	goto	i2l10142
 21273                           
 21274                           ;UI.c: 316: dispLogs(2);
 21275  003816  0E00               	movlw	0
 21276  003818  6E13               	movwf	dispLogs@myLog+1,c
 21277  00381A  0E02               	movlw	2
 21278  00381C  6E12               	movwf	dispLogs@myLog,c
 21279  00381E  ECD5  F02F         	call	_dispLogs	;wreg free
 21280                           
 21281                           ;UI.c: 317: }
 21282  003822  D09C               	goto	i2l275
 21283  003824                     i2l10142:
 21284                           
 21285                           ;UI.c: 318: else if(back){
 21286  003824  505B               	movf	_back,w,c
 21287  003826  105C               	iorwf	_back+1,w,c
 21288  003828  B4D8               	btfsc	status,2,c
 21289  00382A  D098               	goto	i2l275
 21290                           
 21291                           ;UI.c: 319: change_state_to_menu_23();
 21292  00382C  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 21293                           
 21294                           ;UI.c: 320: }
 21295                           ;UI.c: 321: break;
 21296  003830  D095               	goto	i2l275
 21297  003832                     i2l10146:
 21298                           
 21299                           ;UI.c: 324: if(up){
 21300  003832  5075               	movf	_up,w,c
 21301  003834  1076               	iorwf	_up+1,w,c
 21302  003836  B4D8               	btfsc	status,2,c
 21303  003838  D003               	goto	i2l10150
 21304                           
 21305                           ;UI.c: 325: change_state_to_logs_22();
 21306  00383A  ECD0  F02E         	call	_change_state_to_logs_22	;wreg free
 21307                           
 21308                           ;UI.c: 326: }
 21309  00383E  D08E               	goto	i2l275
 21310  003840                     i2l10150:
 21311                           
 21312                           ;UI.c: 327: else if(down){
 21313  003840  5065               	movf	_down,w,c
 21314  003842  1066               	iorwf	_down+1,w,c
 21315  003844  B4D8               	btfsc	status,2,c
 21316  003846  D003               	goto	i2l10154
 21317                           
 21318                           ;UI.c: 328: change_state_to_logs_34();
 21319  003848  ECA0  F02E         	call	_change_state_to_logs_34	;wreg free
 21320                           
 21321                           ;UI.c: 329: }
 21322  00384C  D087               	goto	i2l275
 21323  00384E                     i2l10154:
 21324                           
 21325                           ;UI.c: 330: else if(enter){
 21326  00384E  5067               	movf	_enter,w,c
 21327  003850  1068               	iorwf	_enter+1,w,c
 21328  003852  B4D8               	btfsc	status,2,c
 21329  003854  D007               	goto	i2l10158
 21330                           
 21331                           ;UI.c: 331: dispLogs(3);
 21332  003856  0E00               	movlw	0
 21333  003858  6E13               	movwf	dispLogs@myLog+1,c
 21334  00385A  0E03               	movlw	3
 21335  00385C  6E12               	movwf	dispLogs@myLog,c
 21336  00385E  ECD5  F02F         	call	_dispLogs	;wreg free
 21337                           
 21338                           ;UI.c: 332: }
 21339  003862  D07C               	goto	i2l275
 21340  003864                     i2l10158:
 21341                           
 21342                           ;UI.c: 333: else if(back){
 21343  003864  505B               	movf	_back,w,c
 21344  003866  105C               	iorwf	_back+1,w,c
 21345  003868  B4D8               	btfsc	status,2,c
 21346  00386A  D078               	goto	i2l275
 21347                           
 21348                           ;UI.c: 334: change_state_to_menu_23();
 21349  00386C  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 21350                           
 21351                           ;UI.c: 335: }
 21352                           ;UI.c: 336: break;
 21353  003870  D075               	goto	i2l275
 21354  003872                     i2l10162:
 21355                           
 21356                           ;UI.c: 339: if(up){
 21357  003872  5075               	movf	_up,w,c
 21358  003874  1076               	iorwf	_up+1,w,c
 21359  003876  B4D8               	btfsc	status,2,c
 21360  003878  D003               	goto	i2l10166
 21361                           
 21362                           ;UI.c: 340: change_state_to_logs_22();
 21363  00387A  ECD0  F02E         	call	_change_state_to_logs_22	;wreg free
 21364                           
 21365                           ;UI.c: 341: }
 21366  00387E  D06E               	goto	i2l275
 21367  003880                     i2l10166:
 21368                           
 21369                           ;UI.c: 342: else if(down){
 21370  003880  5065               	movf	_down,w,c
 21371  003882  1066               	iorwf	_down+1,w,c
 21372  003884  B4D8               	btfsc	status,2,c
 21373  003886  D003               	goto	i2l10170
 21374                           
 21375                           ;UI.c: 343: change_state_to_logs_34();
 21376  003888  ECA0  F02E         	call	_change_state_to_logs_34	;wreg free
 21377                           
 21378                           ;UI.c: 344: }
 21379  00388C  D067               	goto	i2l275
 21380  00388E                     i2l10170:
 21381                           
 21382                           ;UI.c: 345: else if(enter){
 21383  00388E  5067               	movf	_enter,w,c
 21384  003890  1068               	iorwf	_enter+1,w,c
 21385  003892  B4D8               	btfsc	status,2,c
 21386  003894  D007               	goto	i2l10174
 21387                           
 21388                           ;UI.c: 346: dispLogs(3);
 21389  003896  0E00               	movlw	0
 21390  003898  6E13               	movwf	dispLogs@myLog+1,c
 21391  00389A  0E03               	movlw	3
 21392  00389C  6E12               	movwf	dispLogs@myLog,c
 21393  00389E  ECD5  F02F         	call	_dispLogs	;wreg free
 21394                           
 21395                           ;UI.c: 347: }
 21396  0038A2  D05C               	goto	i2l275
 21397  0038A4                     i2l10174:
 21398                           
 21399                           ;UI.c: 348: else if(back){
 21400  0038A4  505B               	movf	_back,w,c
 21401  0038A6  105C               	iorwf	_back+1,w,c
 21402  0038A8  B4D8               	btfsc	status,2,c
 21403  0038AA  D058               	goto	i2l275
 21404                           
 21405                           ;UI.c: 349: change_state_to_menu_23();
 21406  0038AC  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 21407                           
 21408                           ;UI.c: 350: }
 21409                           ;UI.c: 351: break;
 21410  0038B0  D055               	goto	i2l275
 21411  0038B2                     i2l10178:
 21412                           
 21413                           ;UI.c: 354: if(up){
 21414  0038B2  5075               	movf	_up,w,c
 21415  0038B4  1076               	iorwf	_up+1,w,c
 21416  0038B6  B4D8               	btfsc	status,2,c
 21417  0038B8  D003               	goto	i2l10182
 21418                           
 21419                           ;UI.c: 355: change_state_to_logs_33();
 21420  0038BA  ECB8  F02E         	call	_change_state_to_logs_33	;wreg free
 21421                           
 21422                           ;UI.c: 356: }
 21423  0038BE  D04E               	goto	i2l275
 21424  0038C0                     i2l10182:
 21425                           
 21426                           ;UI.c: 357: else if(down){
 21427  0038C0  5065               	movf	_down,w,c
 21428  0038C2  1066               	iorwf	_down+1,w,c
 21429  0038C4  B4D8               	btfsc	status,2,c
 21430  0038C6  D003               	goto	i2l10186
 21431                           
 21432                           ;UI.c: 358: change_state_to_logs_11();
 21433  0038C8  EC00  F02F         	call	_change_state_to_logs_11	;wreg free
 21434                           
 21435                           ;UI.c: 359: }
 21436  0038CC  D047               	goto	i2l275
 21437  0038CE                     i2l10186:
 21438                           
 21439                           ;UI.c: 360: else if(enter){
 21440  0038CE  5067               	movf	_enter,w,c
 21441  0038D0  1068               	iorwf	_enter+1,w,c
 21442  0038D2  B4D8               	btfsc	status,2,c
 21443  0038D4  D007               	goto	i2l10190
 21444                           
 21445                           ;UI.c: 361: dispLogs(4);
 21446  0038D6  0E00               	movlw	0
 21447  0038D8  6E13               	movwf	dispLogs@myLog+1,c
 21448  0038DA  0E04               	movlw	4
 21449  0038DC  6E12               	movwf	dispLogs@myLog,c
 21450  0038DE  ECD5  F02F         	call	_dispLogs	;wreg free
 21451                           
 21452                           ;UI.c: 362: }
 21453  0038E2  D03C               	goto	i2l275
 21454  0038E4                     i2l10190:
 21455                           
 21456                           ;UI.c: 363: else if(back){
 21457  0038E4  505B               	movf	_back,w,c
 21458  0038E6  105C               	iorwf	_back+1,w,c
 21459  0038E8  B4D8               	btfsc	status,2,c
 21460  0038EA  D038               	goto	i2l275
 21461                           
 21462                           ;UI.c: 364: change_state_to_menu_23();
 21463  0038EC  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 21464                           
 21465                           ;UI.c: 370: }
 21466                           
 21467                           ;UI.c: 369: break;
 21468                           
 21469                           ;UI.c: 368: default:
 21470                           
 21471                           ;UI.c: 365: }
 21472                           ;UI.c: 366: break;
 21473  0038F0  D035               	goto	i2l275
 21474  0038F2                     i2l10196:
 21475  0038F2  C0E8  F043         	movff	_cur_state,??_updateMenu
 21476  0038F6  C0E9  F044         	movff	_cur_state+1,??_updateMenu+1
 21477                           
 21478                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 21479                           ; Switch size 1, requested type "space"
 21480                           ; Number of cases is 3, Range of values is 0 to 4
 21481                           ; switch strategies available:
 21482                           ; Name         Instructions Cycles
 21483                           ; simple_byte           10     6 (average)
 21484                           ;	Chosen strategy is simple_byte
 21485  0038FA  5044               	movf	??_updateMenu+1,w,c
 21486  0038FC  0A00               	xorlw	0	; case 0
 21487  0038FE  B4D8               	btfsc	status,2,c
 21488  003900  D007               	goto	i2l11198
 21489  003902  0A03               	xorlw	3	; case 3
 21490  003904  B4D8               	btfsc	status,2,c
 21491  003906  D015               	goto	i2l11200
 21492  003908  0A07               	xorlw	7	; case 4
 21493  00390A  B4D8               	btfsc	status,2,c
 21494  00390C  D020               	goto	i2l11202
 21495  00390E  D026               	goto	i2l275
 21496  003910                     i2l11198:
 21497                           
 21498                           ; Switch size 1, requested type "space"
 21499                           ; Number of cases is 5, Range of values is 0 to 23
 21500                           ; switch strategies available:
 21501                           ; Name         Instructions Cycles
 21502                           ; simple_byte           16     9 (average)
 21503                           ;	Chosen strategy is simple_byte
 21504  003910  5043               	movf	??_updateMenu,w,c
 21505  003912  0A00               	xorlw	0	; case 0
 21506  003914  B4D8               	btfsc	status,2,c
 21507  003916  D6DC               	goto	i2l10048
 21508  003918  0A0B               	xorlw	11	; case 11
 21509  00391A  B4D8               	btfsc	status,2,c
 21510  00391C  D6DC               	goto	i2l10050
 21511  00391E  0A07               	xorlw	7	; case 12
 21512  003920  B4D8               	btfsc	status,2,c
 21513  003922  D6EE               	goto	i2l10062
 21514  003924  0A1A               	xorlw	26	; case 22
 21515  003926  B4D8               	btfsc	status,2,c
 21516  003928  D6F9               	goto	i2l10074
 21517  00392A  0A01               	xorlw	1	; case 23
 21518  00392C  B4D8               	btfsc	status,2,c
 21519  00392E  D70C               	goto	i2l10086
 21520  003930  D015               	goto	i2l275
 21521  003932                     i2l11200:
 21522                           
 21523                           ; Switch size 1, requested type "space"
 21524                           ; Number of cases is 4, Range of values is 243 to 255
 21525                           ; switch strategies available:
 21526                           ; Name         Instructions Cycles
 21527                           ; simple_byte           13     7 (average)
 21528                           ;	Chosen strategy is simple_byte
 21529  003932  5043               	movf	??_updateMenu,w,c
 21530  003934  0AF3               	xorlw	243	; case 243
 21531  003936  B4D8               	btfsc	status,2,c
 21532  003938  D71C               	goto	i2l10098
 21533  00393A  0A07               	xorlw	7	; case 244
 21534  00393C  B4D8               	btfsc	status,2,c
 21535  00393E  D739               	goto	i2l10114
 21536  003940  0A0A               	xorlw	10	; case 254
 21537  003942  B4D8               	btfsc	status,2,c
 21538  003944  D756               	goto	i2l10130
 21539  003946  0A01               	xorlw	1	; case 255
 21540  003948  B4D8               	btfsc	status,2,c
 21541  00394A  D773               	goto	i2l10146
 21542  00394C  D007               	goto	i2l275
 21543  00394E                     i2l11202:
 21544                           
 21545                           ; Switch size 1, requested type "space"
 21546                           ; Number of cases is 2, Range of values is 9 to 10
 21547                           ; switch strategies available:
 21548                           ; Name         Instructions Cycles
 21549                           ; simple_byte            7     4 (average)
 21550                           ;	Chosen strategy is simple_byte
 21551  00394E  5043               	movf	??_updateMenu,w,c
 21552  003950  0A09               	xorlw	9	; case 9
 21553  003952  B4D8               	btfsc	status,2,c
 21554  003954  D78E               	goto	i2l10162
 21555  003956  0A03               	xorlw	3	; case 10
 21556  003958  B4D8               	btfsc	status,2,c
 21557  00395A  D7AB               	goto	i2l10178
 21558  00395C                     i2l275:
 21559                           
 21560                           ;UI.c: 371: }
 21561                           ;UI.c: 372: (INTCONbits.GIE = 1);
 21562  00395C  8EF2               	bsf	intcon,7,c	;volatile
 21563  00395E  0012               	return		;funcret
 21564  003960                     __end_of_updateMenu:
 21565                           	opt stack 0
 21566                           pclatu	equ	0xFFB
 21567                           pclath	equ	0xFFA
 21568                           tblptru	equ	0xFF8
 21569                           tblptrh	equ	0xFF7
 21570                           tblptrl	equ	0xFF6
 21571                           tablat	equ	0xFF5
 21572                           prodh	equ	0xFF4
 21573                           prodl	equ	0xFF3
 21574                           intcon	equ	0xFF2
 21575                           intcon2	equ	0xFF1
 21576                           intcon3	equ	0xFF0
 21577                           indf0	equ	0xFEF
 21578                           postinc0	equ	0xFEE
 21579                           fsr0h	equ	0xFEA
 21580                           fsr0l	equ	0xFE9
 21581                           wreg	equ	0xFE8
 21582                           postdec1	equ	0xFE5
 21583                           fsr1h	equ	0xFE2
 21584                           fsr1l	equ	0xFE1
 21585                           indf2	equ	0xFDF
 21586                           postinc2	equ	0xFDE
 21587                           postdec2	equ	0xFDD
 21588                           fsr2h	equ	0xFDA
 21589                           fsr2l	equ	0xFD9
 21590                           status	equ	0xFD8
 21591                           
 21592 ;; *************** function i2_change_state_to_menu_start *****************
 21593 ;; Defined at:
 21594 ;;		line 477 in file "UI.c"
 21595 ;; Parameters:    Size  Location     Type
 21596 ;;		None
 21597 ;; Auto vars:     Size  Location     Type
 21598 ;;		None
 21599 ;; Return value:  Size  Location     Type
 21600 ;;                  1    wreg      void 
 21601 ;; Registers used:
 21602 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21603 ;; Tracked objects:
 21604 ;;		On entry : 0/0
 21605 ;;		On exit  : 0/0
 21606 ;;		Unchanged: 0/0
 21607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21612 ;;Total ram usage:        0 bytes
 21613 ;; Hardware stack levels used:    1
 21614 ;; Hardware stack levels required when called:    4
 21615 ;; This function calls:
 21616 ;;		i2_lcdInst
 21617 ;;		i2_printRTC
 21618 ;;		i2_printf
 21619 ;; This function is called by:
 21620 ;;		_updateMenu
 21621 ;;		_handler
 21622 ;; This function uses a non-reentrant model
 21623 ;;
 21624                           
 21625                           	psect	text68
 21626  005F36                     __ptext68:
 21627                           	opt stack 0
 21628  005F36                     i2_change_state_to_menu_start:
 21629                           	opt stack 19
 21630                           
 21631                           ;UI.c: 478: cur_state = 0;
 21632                           
 21633                           ;incstack = 0
 21634  005F36  0E00               	movlw	0
 21635  005F38  0100               	movlb	0	; () banked
 21636  005F3A  6FE9               	movwf	(_cur_state+1)& (0+255),b
 21637  005F3C  0E00               	movlw	0
 21638  005F3E  6FE8               	movwf	_cur_state& (0+255),b
 21639                           
 21640                           ; BSR set to: 0
 21641                           ;UI.c: 480: lcdInst(0b10000000);;
 21642  005F40  0E80               	movlw	128
 21643  005F42  EC71  F030         	call	i2_lcdInst
 21644                           
 21645                           ;UI.c: 481: printRTC();
 21646  005F46  ECB0  F01C         	call	i2_printRTC	;wreg free
 21647                           
 21648                           ;UI.c: 482: lcdInst(0b11000000);;
 21649  005F4A  0EC0               	movlw	192
 21650  005F4C  EC71  F030         	call	i2_lcdInst
 21651                           
 21652                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 21653  005F50  0E06               	movlw	low STR_30
 21654  005F52  6E0D               	movwf	i2printf@f,c
 21655  005F54  0EFE               	movlw	high STR_30
 21656  005F56  6E0E               	movwf	i2printf@f+1,c
 21657  005F58  ECB2  F016         	call	i2_printf	;wreg free
 21658  005F5C  0012               	return		;funcret
 21659  005F5E                     __end_ofi2_change_state_to_menu_start:
 21660                           	opt stack 0
 21661                           pclatu	equ	0xFFB
 21662                           pclath	equ	0xFFA
 21663                           tblptru	equ	0xFF8
 21664                           tblptrh	equ	0xFF7
 21665                           tblptrl	equ	0xFF6
 21666                           tablat	equ	0xFF5
 21667                           prodh	equ	0xFF4
 21668                           prodl	equ	0xFF3
 21669                           intcon	equ	0xFF2
 21670                           intcon2	equ	0xFF1
 21671                           intcon3	equ	0xFF0
 21672                           indf0	equ	0xFEF
 21673                           postinc0	equ	0xFEE
 21674                           fsr0h	equ	0xFEA
 21675                           fsr0l	equ	0xFE9
 21676                           wreg	equ	0xFE8
 21677                           postdec1	equ	0xFE5
 21678                           fsr1h	equ	0xFE2
 21679                           fsr1l	equ	0xFE1
 21680                           indf2	equ	0xFDF
 21681                           postinc2	equ	0xFDE
 21682                           postdec2	equ	0xFDD
 21683                           fsr2h	equ	0xFDA
 21684                           fsr2l	equ	0xFD9
 21685                           status	equ	0xFD8
 21686                           
 21687 ;; *************** function i2_printRTC *****************
 21688 ;; Defined at:
 21689 ;;		line 63 in file "RTC.c"
 21690 ;; Parameters:    Size  Location     Type
 21691 ;;		None
 21692 ;; Auto vars:     Size  Location     Type
 21693 ;;  printRTC       14   44[COMRAM] int [7]
 21694 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 21695 ;;  printRTC        2   64[COMRAM] int 
 21696 ;;  printRTC        2   58[COMRAM] int 
 21697 ;; Return value:  Size  Location     Type
 21698 ;;                  1    wreg      void 
 21699 ;; Registers used:
 21700 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21701 ;; Tracked objects:
 21702 ;;		On entry : 0/0
 21703 ;;		On exit  : 0/0
 21704 ;;		Unchanged: 0/0
 21705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21707 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21708 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21709 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21710 ;;Total ram usage:       25 bytes
 21711 ;; Hardware stack levels used:    1
 21712 ;; Hardware stack levels required when called:    3
 21713 ;; This function calls:
 21714 ;;		i2_getRTC
 21715 ;;		i2_lcdInst
 21716 ;;		i2_printf
 21717 ;;		i2_strcpy
 21718 ;; This function is called by:
 21719 ;;		i2_change_state_to_menu_start
 21720 ;; This function uses a non-reentrant model
 21721 ;;
 21722                           
 21723                           	psect	text69
 21724  003960                     __ptext69:
 21725                           	opt stack 0
 21726  003960                     i2_printRTC:
 21727                           	opt stack 19
 21728                           
 21729                           ;RTC.c: 64: getRTC();
 21730                           
 21731                           ;incstack = 0
 21732  003960  EC9D  F02A         	call	i2_getRTC	;wreg free
 21733                           
 21734                           ;RTC.c: 65: char month[] = "MMM";
 21735  003964  C153  F03D         	movff	printRTC@F3242,i2printRTC@month
 21736  003968  C154  F03E         	movff	printRTC@F3242+1,i2printRTC@month+1
 21737  00396C  C155  F03F         	movff	printRTC@F3242+2,i2printRTC@month+2
 21738  003970  C156  F040         	movff	printRTC@F3242+3,i2printRTC@month+3
 21739                           
 21740                           ;RTC.c: 66: int INT_time[7];
 21741                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21742  003974  0E00               	movlw	0
 21743  003976  6E42               	movwf	i2printRTC@i+1,c
 21744  003978  0E00               	movlw	0
 21745  00397A  6E41               	movwf	i2printRTC@i,c
 21746  00397C  BE42               	btfsc	i2printRTC@i+1,7,c
 21747  00397E  D006               	goto	i2l7840
 21748  003980  5042               	movf	i2printRTC@i+1,w,c
 21749  003982  E135               	bnz	i2l634
 21750  003984  0E07               	movlw	7
 21751  003986  5C41               	subwf	i2printRTC@i,w,c
 21752  003988  B0D8               	btfsc	status,0,c
 21753  00398A  D031               	goto	i2l634
 21754  00398C                     i2l7840:
 21755                           
 21756                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21757  00398C  0E24               	movlw	low _time
 21758  00398E  2441               	addwf	i2printRTC@i,w,c
 21759  003990  6ED9               	movwf	fsr2l,c
 21760  003992  0E01               	movlw	high _time
 21761  003994  2042               	addwfc	i2printRTC@i+1,w,c
 21762  003996  6EDA               	movwf	fsr2h,c
 21763  003998  50DF               	movf	indf2,w,c
 21764  00399A  6E2A               	movwf	??i2_printRTC& (0+255),c
 21765  00399C  3A2A               	swapf	??i2_printRTC,f,c
 21766  00399E  0E0F               	movlw	15
 21767  0039A0  162A               	andwf	??i2_printRTC,f,c
 21768  0039A2  0E0F               	movlw	15
 21769  0039A4  162A               	andwf	??i2_printRTC,f,c
 21770  0039A6  502A               	movf	??i2_printRTC,w,c
 21771  0039A8  0D0A               	mullw	10
 21772  0039AA  0E24               	movlw	low _time
 21773  0039AC  2441               	addwf	i2printRTC@i,w,c
 21774  0039AE  6ED9               	movwf	fsr2l,c
 21775  0039B0  0E01               	movlw	high _time
 21776  0039B2  2042               	addwfc	i2printRTC@i+1,w,c
 21777  0039B4  6EDA               	movwf	fsr2h,c
 21778  0039B6  50DF               	movf	indf2,w,c
 21779  0039B8  0B0F               	andlw	15
 21780  0039BA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21781  0039BC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21782  0039BE  50F3               	movf	prodl,w,c
 21783  0039C0  262B               	addwf	??i2_printRTC+1,f,c
 21784  0039C2  50F4               	movf	prodh,w,c
 21785  0039C4  222C               	addwfc	??i2_printRTC+2,f,c
 21786  0039C6  90D8               	bcf	status,0,c
 21787  0039C8  3441               	rlcf	i2printRTC@i,w,c
 21788  0039CA  6ED9               	movwf	fsr2l,c
 21789  0039CC  3442               	rlcf	i2printRTC@i+1,w,c
 21790  0039CE  6EDA               	movwf	fsr2h,c
 21791  0039D0  0E2D               	movlw	low i2printRTC@INT_time
 21792  0039D2  26D9               	addwf	fsr2l,f,c
 21793  0039D4  0E00               	movlw	high i2printRTC@INT_time
 21794  0039D6  22DA               	addwfc	fsr2h,f,c
 21795  0039D8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21796  0039DC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21797  0039E0  4A41               	infsnz	i2printRTC@i,f,c
 21798  0039E2  2A42               	incf	i2printRTC@i+1,f,c
 21799  0039E4  BE42               	btfsc	i2printRTC@i+1,7,c
 21800  0039E6  D7D2               	goto	i2l7840
 21801  0039E8  5042               	movf	i2printRTC@i+1,w,c
 21802  0039EA  E101               	bnz	i2u680_40
 21803  0039EC  D7CB               	goto	L18
 21804  0039EE                     i2u680_40:
 21805  0039EE                     i2l634:
 21806                           
 21807                           ;RTC.c: 69: }
 21808                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21809  0039EE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21810  0039F2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21811                           
 21812                           ;RTC.c: 72: switch(RTC_month){
 21813  0039F6  D084               	goto	i2l7872
 21814  0039F8                     i2l7846:
 21815                           
 21816                           ;RTC.c: 74: strcpy(month, "JAN");
 21817  0039F8  0E3D               	movlw	low i2printRTC@month
 21818  0039FA  6E01               	movwf	i2strcpy@to,c
 21819  0039FC  0E00               	movlw	high i2printRTC@month
 21820  0039FE  6E02               	movwf	i2strcpy@to+1,c
 21821  003A00  0EDA               	movlw	low STR_8
 21822  003A02  6E03               	movwf	i2strcpy@from,c
 21823  003A04  0EFF               	movlw	high STR_8
 21824  003A06  6E04               	movwf	i2strcpy@from+1,c
 21825  003A08  ECF7  F02D         	call	i2_strcpy	;wreg free
 21826                           
 21827                           ;RTC.c: 75: break;
 21828  003A0C  D0A6               	goto	i2l7874
 21829  003A0E                     i2l7848:
 21830                           
 21831                           ;RTC.c: 77: strcpy(month, "FEB");
 21832  003A0E  0E3D               	movlw	low i2printRTC@month
 21833  003A10  6E01               	movwf	i2strcpy@to,c
 21834  003A12  0E00               	movlw	high i2printRTC@month
 21835  003A14  6E02               	movwf	i2strcpy@to+1,c
 21836  003A16  0ECA               	movlw	low STR_9
 21837  003A18  6E03               	movwf	i2strcpy@from,c
 21838  003A1A  0EFF               	movlw	high STR_9
 21839  003A1C  6E04               	movwf	i2strcpy@from+1,c
 21840  003A1E  ECF7  F02D         	call	i2_strcpy	;wreg free
 21841                           
 21842                           ;RTC.c: 78: break;
 21843  003A22  D09B               	goto	i2l7874
 21844  003A24                     i2l7850:
 21845                           
 21846                           ;RTC.c: 80: strcpy(month, "MAR");
 21847  003A24  0E3D               	movlw	low i2printRTC@month
 21848  003A26  6E01               	movwf	i2strcpy@to,c
 21849  003A28  0E00               	movlw	high i2printRTC@month
 21850  003A2A  6E02               	movwf	i2strcpy@to+1,c
 21851  003A2C  0EE6               	movlw	low STR_10
 21852  003A2E  6E03               	movwf	i2strcpy@from,c
 21853  003A30  0EFF               	movlw	high STR_10
 21854  003A32  6E04               	movwf	i2strcpy@from+1,c
 21855  003A34  ECF7  F02D         	call	i2_strcpy	;wreg free
 21856                           
 21857                           ;RTC.c: 81: break;
 21858  003A38  D090               	goto	i2l7874
 21859  003A3A                     i2l7852:
 21860                           
 21861                           ;RTC.c: 83: strcpy(month, "APR");
 21862  003A3A  0E3D               	movlw	low i2printRTC@month
 21863  003A3C  6E01               	movwf	i2strcpy@to,c
 21864  003A3E  0E00               	movlw	high i2printRTC@month
 21865  003A40  6E02               	movwf	i2strcpy@to+1,c
 21866  003A42  0EEA               	movlw	low STR_11
 21867  003A44  6E03               	movwf	i2strcpy@from,c
 21868  003A46  0EFF               	movlw	high STR_11
 21869  003A48  6E04               	movwf	i2strcpy@from+1,c
 21870  003A4A  ECF7  F02D         	call	i2_strcpy	;wreg free
 21871                           
 21872                           ;RTC.c: 84: break;
 21873  003A4E  D085               	goto	i2l7874
 21874  003A50                     i2l7854:
 21875                           
 21876                           ;RTC.c: 86: strcpy(month, "MAY");
 21877  003A50  0E3D               	movlw	low i2printRTC@month
 21878  003A52  6E01               	movwf	i2strcpy@to,c
 21879  003A54  0E00               	movlw	high i2printRTC@month
 21880  003A56  6E02               	movwf	i2strcpy@to+1,c
 21881  003A58  0EFA               	movlw	low STR_12
 21882  003A5A  6E03               	movwf	i2strcpy@from,c
 21883  003A5C  0EFF               	movlw	high STR_12
 21884  003A5E  6E04               	movwf	i2strcpy@from+1,c
 21885  003A60  ECF7  F02D         	call	i2_strcpy	;wreg free
 21886                           
 21887                           ;RTC.c: 87: break;
 21888  003A64  D07A               	goto	i2l7874
 21889  003A66                     i2l7856:
 21890                           
 21891                           ;RTC.c: 89: strcpy(month, "JUN");
 21892  003A66  0E3D               	movlw	low i2printRTC@month
 21893  003A68  6E01               	movwf	i2strcpy@to,c
 21894  003A6A  0E00               	movlw	high i2printRTC@month
 21895  003A6C  6E02               	movwf	i2strcpy@to+1,c
 21896  003A6E  0EDE               	movlw	low STR_13
 21897  003A70  6E03               	movwf	i2strcpy@from,c
 21898  003A72  0EFF               	movlw	high STR_13
 21899  003A74  6E04               	movwf	i2strcpy@from+1,c
 21900  003A76  ECF7  F02D         	call	i2_strcpy	;wreg free
 21901                           
 21902                           ;RTC.c: 90: break;
 21903  003A7A  D06F               	goto	i2l7874
 21904  003A7C                     i2l7858:
 21905                           
 21906                           ;RTC.c: 92: strcpy(month, "JUL");
 21907  003A7C  0E3D               	movlw	low i2printRTC@month
 21908  003A7E  6E01               	movwf	i2strcpy@to,c
 21909  003A80  0E00               	movlw	high i2printRTC@month
 21910  003A82  6E02               	movwf	i2strcpy@to+1,c
 21911  003A84  0ED6               	movlw	low STR_14
 21912  003A86  6E03               	movwf	i2strcpy@from,c
 21913  003A88  0EFF               	movlw	high STR_14
 21914  003A8A  6E04               	movwf	i2strcpy@from+1,c
 21915  003A8C  ECF7  F02D         	call	i2_strcpy	;wreg free
 21916                           
 21917                           ;RTC.c: 93: break;
 21918  003A90  D064               	goto	i2l7874
 21919  003A92                     i2l7860:
 21920                           
 21921                           ;RTC.c: 95: strcpy(month, "AUG");
 21922  003A92  0E3D               	movlw	low i2printRTC@month
 21923  003A94  6E01               	movwf	i2strcpy@to,c
 21924  003A96  0E00               	movlw	high i2printRTC@month
 21925  003A98  6E02               	movwf	i2strcpy@to+1,c
 21926  003A9A  0ED2               	movlw	low STR_15
 21927  003A9C  6E03               	movwf	i2strcpy@from,c
 21928  003A9E  0EFF               	movlw	high STR_15
 21929  003AA0  6E04               	movwf	i2strcpy@from+1,c
 21930  003AA2  ECF7  F02D         	call	i2_strcpy	;wreg free
 21931                           
 21932                           ;RTC.c: 96: break;
 21933  003AA6  D059               	goto	i2l7874
 21934  003AA8                     i2l7862:
 21935                           
 21936                           ;RTC.c: 98: strcpy(month, "SEP");
 21937  003AA8  0E3D               	movlw	low i2printRTC@month
 21938  003AAA  6E01               	movwf	i2strcpy@to,c
 21939  003AAC  0E00               	movlw	high i2printRTC@month
 21940  003AAE  6E02               	movwf	i2strcpy@to+1,c
 21941  003AB0  0EE2               	movlw	low STR_16
 21942  003AB2  6E03               	movwf	i2strcpy@from,c
 21943  003AB4  0EFF               	movlw	high STR_16
 21944  003AB6  6E04               	movwf	i2strcpy@from+1,c
 21945  003AB8  ECF7  F02D         	call	i2_strcpy	;wreg free
 21946                           
 21947                           ;RTC.c: 99: break;
 21948  003ABC  D04E               	goto	i2l7874
 21949  003ABE                     i2l7864:
 21950                           
 21951                           ;RTC.c: 101: strcpy(month, "OCT");
 21952  003ABE  0E3D               	movlw	low i2printRTC@month
 21953  003AC0  6E01               	movwf	i2strcpy@to,c
 21954  003AC2  0E00               	movlw	high i2printRTC@month
 21955  003AC4  6E02               	movwf	i2strcpy@to+1,c
 21956  003AC6  0EF2               	movlw	low STR_17
 21957  003AC8  6E03               	movwf	i2strcpy@from,c
 21958  003ACA  0EFF               	movlw	high STR_17
 21959  003ACC  6E04               	movwf	i2strcpy@from+1,c
 21960  003ACE  ECF7  F02D         	call	i2_strcpy	;wreg free
 21961                           
 21962                           ;RTC.c: 102: break;
 21963  003AD2  D043               	goto	i2l7874
 21964  003AD4                     i2l7866:
 21965                           
 21966                           ;RTC.c: 104: strcpy(month, "NOV");
 21967  003AD4  0E3D               	movlw	low i2printRTC@month
 21968  003AD6  6E01               	movwf	i2strcpy@to,c
 21969  003AD8  0E00               	movlw	high i2printRTC@month
 21970  003ADA  6E02               	movwf	i2strcpy@to+1,c
 21971  003ADC  0EF6               	movlw	low STR_18
 21972  003ADE  6E03               	movwf	i2strcpy@from,c
 21973  003AE0  0EFF               	movlw	high STR_18
 21974  003AE2  6E04               	movwf	i2strcpy@from+1,c
 21975  003AE4  ECF7  F02D         	call	i2_strcpy	;wreg free
 21976                           
 21977                           ;RTC.c: 105: break;
 21978  003AE8  D038               	goto	i2l7874
 21979  003AEA                     i2l7868:
 21980                           
 21981                           ;RTC.c: 107: strcpy(month, "DEC");
 21982  003AEA  0E3D               	movlw	low i2printRTC@month
 21983  003AEC  6E01               	movwf	i2strcpy@to,c
 21984  003AEE  0E00               	movlw	high i2printRTC@month
 21985  003AF0  6E02               	movwf	i2strcpy@to+1,c
 21986  003AF2  0ECE               	movlw	low STR_19
 21987  003AF4  6E03               	movwf	i2strcpy@from,c
 21988  003AF6  0EFF               	movlw	high STR_19
 21989  003AF8  6E04               	movwf	i2strcpy@from+1,c
 21990  003AFA  ECF7  F02D         	call	i2_strcpy	;wreg free
 21991                           
 21992                           ;RTC.c: 109: }
 21993                           
 21994                           ;RTC.c: 108: break;
 21995  003AFE  D02D               	goto	i2l7874
 21996  003B00                     i2l7872:
 21997  003B00  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21998  003B04  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21999                           
 22000                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22001                           ; Switch size 1, requested type "space"
 22002                           ; Number of cases is 1, Range of values is 0 to 0
 22003                           ; switch strategies available:
 22004                           ; Name         Instructions Cycles
 22005                           ; simple_byte            4     3 (average)
 22006                           ;	Chosen strategy is simple_byte
 22007  003B08  502B               	movf	??i2_printRTC+1,w,c
 22008  003B0A  0A00               	xorlw	0	; case 0
 22009  003B0C  A4D8               	btfss	status,2,c
 22010  003B0E  D025               	goto	i2l7874
 22011                           
 22012                           ; Switch size 1, requested type "space"
 22013                           ; Number of cases is 12, Range of values is 1 to 12
 22014                           ; switch strategies available:
 22015                           ; Name         Instructions Cycles
 22016                           ; simple_byte           37    19 (average)
 22017                           ;	Chosen strategy is simple_byte
 22018  003B10  502A               	movf	??i2_printRTC,w,c
 22019  003B12  0A01               	xorlw	1	; case 1
 22020  003B14  B4D8               	btfsc	status,2,c
 22021  003B16  D770               	goto	i2l7846
 22022  003B18  0A03               	xorlw	3	; case 2
 22023  003B1A  B4D8               	btfsc	status,2,c
 22024  003B1C  D778               	goto	i2l7848
 22025  003B1E  0A01               	xorlw	1	; case 3
 22026  003B20  B4D8               	btfsc	status,2,c
 22027  003B22  D780               	goto	i2l7850
 22028  003B24  0A07               	xorlw	7	; case 4
 22029  003B26  B4D8               	btfsc	status,2,c
 22030  003B28  D788               	goto	i2l7852
 22031  003B2A  0A01               	xorlw	1	; case 5
 22032  003B2C  B4D8               	btfsc	status,2,c
 22033  003B2E  D790               	goto	i2l7854
 22034  003B30  0A03               	xorlw	3	; case 6
 22035  003B32  B4D8               	btfsc	status,2,c
 22036  003B34  D798               	goto	i2l7856
 22037  003B36  0A01               	xorlw	1	; case 7
 22038  003B38  B4D8               	btfsc	status,2,c
 22039  003B3A  D7A0               	goto	i2l7858
 22040  003B3C  0A0F               	xorlw	15	; case 8
 22041  003B3E  B4D8               	btfsc	status,2,c
 22042  003B40  D7A8               	goto	i2l7860
 22043  003B42  0A01               	xorlw	1	; case 9
 22044  003B44  B4D8               	btfsc	status,2,c
 22045  003B46  D7B0               	goto	i2l7862
 22046  003B48  0A03               	xorlw	3	; case 10
 22047  003B4A  B4D8               	btfsc	status,2,c
 22048  003B4C  D7B8               	goto	i2l7864
 22049  003B4E  0A01               	xorlw	1	; case 11
 22050  003B50  B4D8               	btfsc	status,2,c
 22051  003B52  D7C0               	goto	i2l7866
 22052  003B54  0A07               	xorlw	7	; case 12
 22053  003B56  B4D8               	btfsc	status,2,c
 22054  003B58  D7C8               	goto	i2l7868
 22055  003B5A                     i2l7874:
 22056                           
 22057                           ;RTC.c: 110: lcdInst(0b10000000);;
 22058  003B5A  0E80               	movlw	128
 22059  003B5C  EC71  F030         	call	i2_lcdInst
 22060                           
 22061                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 22062  003B60  0EC2               	movlw	low STR_21
 22063  003B62  6E0D               	movwf	i2printf@f,c
 22064  003B64  0EFA               	movlw	high STR_21
 22065  003B66  6E0E               	movwf	i2printf@f+1,c
 22066  003B68  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 22067  003B6C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 22068  003B70  0E3D               	movlw	low i2printRTC@month
 22069  003B72  6E11               	movwf	?i2_printf+4,c
 22070  003B74  0E00               	movlw	high i2printRTC@month
 22071  003B76  6E12               	movwf	?i2_printf+5,c
 22072  003B78  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 22073  003B7C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 22074  003B80  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 22075  003B84  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 22076  003B88  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 22077  003B8C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 22078  003B90  ECB2  F016         	call	i2_printf	;wreg free
 22079  003B94  0012               	return		;funcret
 22080  003B96                     __end_ofi2_printRTC:
 22081                           	opt stack 0
 22082                           pclatu	equ	0xFFB
 22083                           pclath	equ	0xFFA
 22084                           tblptru	equ	0xFF8
 22085                           tblptrh	equ	0xFF7
 22086                           tblptrl	equ	0xFF6
 22087                           tablat	equ	0xFF5
 22088                           prodh	equ	0xFF4
 22089                           prodl	equ	0xFF3
 22090                           intcon	equ	0xFF2
 22091                           intcon2	equ	0xFF1
 22092                           intcon3	equ	0xFF0
 22093                           indf0	equ	0xFEF
 22094                           postinc0	equ	0xFEE
 22095                           fsr0h	equ	0xFEA
 22096                           fsr0l	equ	0xFE9
 22097                           wreg	equ	0xFE8
 22098                           postdec1	equ	0xFE5
 22099                           fsr1h	equ	0xFE2
 22100                           fsr1l	equ	0xFE1
 22101                           indf2	equ	0xFDF
 22102                           postinc2	equ	0xFDE
 22103                           postdec2	equ	0xFDD
 22104                           fsr2h	equ	0xFDA
 22105                           fsr2l	equ	0xFD9
 22106                           status	equ	0xFD8
 22107                           
 22108 ;; *************** function i2_strcpy *****************
 22109 ;; Defined at:
 22110 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 22111 ;; Parameters:    Size  Location     Type
 22112 ;;  to              2    0[COMRAM] PTR unsigned char 
 22113 ;;		 -> printRTC@month(4), UI@month(4), 
 22114 ;;  from            2    2[COMRAM] PTR const unsigned char 
 22115 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 22116 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 22117 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 22118 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 22119 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 22120 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 22121 ;;		 -> STR_8(4), 
 22122 ;; Auto vars:     Size  Location     Type
 22123 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 22124 ;;		 -> printRTC@month(4), UI@month(4), 
 22125 ;; Return value:  Size  Location     Type
 22126 ;;                  2    0[COMRAM] PTR unsigned char 
 22127 ;; Registers used:
 22128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22129 ;; Tracked objects:
 22130 ;;		On entry : 0/0
 22131 ;;		On exit  : 0/0
 22132 ;;		Unchanged: 0/0
 22133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22135 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22137 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22138 ;;Total ram usage:        6 bytes
 22139 ;; Hardware stack levels used:    1
 22140 ;; This function calls:
 22141 ;;		Nothing
 22142 ;; This function is called by:
 22143 ;;		i2_printRTC
 22144 ;; This function uses a non-reentrant model
 22145 ;;
 22146                           
 22147                           	psect	text70
 22148  005BEE                     __ptext70:
 22149                           	opt stack 0
 22150  005BEE                     i2_strcpy:
 22151                           	opt stack 21
 22152                           
 22153                           ;incstack = 0
 22154  005BEE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 22155  005BF2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 22156  005BF6  D004               	goto	i2l7398
 22157  005BF8                     i2l7396:
 22158  005BF8  4A05               	infsnz	i2strcpy@cp,f,c
 22159  005BFA  2A06               	incf	i2strcpy@cp+1,f,c
 22160  005BFC  4A03               	infsnz	i2strcpy@from,f,c
 22161  005BFE  2A04               	incf	i2strcpy@from+1,f,c
 22162  005C00                     i2l7398:
 22163  005C00  C003  FFF6         	movff	i2strcpy@from,tblptrl
 22164  005C04  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 22165  005C08                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22166  005C08  6AF8               	clrf	tblptru,c
 22167  005C0A                     	endif
 22168  005C0A                     	if	0	;tblptru may be non-zero
 22169  005C0A                     	endif
 22170  005C0A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 22171  005C0E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 22172  005C12  0008               	tblrd		*
 22173  005C14  CFF5 FFDF          	movff	tablat,indf2
 22174  005C18  50DF               	movf	indf2,w,c
 22175  005C1A  B4D8               	btfsc	status,2,c
 22176  005C1C  0012               	return	
 22177  005C1E  D7EC               	goto	i2l7396
 22178  005C20                     __end_ofi2_strcpy:
 22179                           	opt stack 0
 22180                           pclatu	equ	0xFFB
 22181                           pclath	equ	0xFFA
 22182                           tblptru	equ	0xFF8
 22183                           tblptrh	equ	0xFF7
 22184                           tblptrl	equ	0xFF6
 22185                           tablat	equ	0xFF5
 22186                           prodh	equ	0xFF4
 22187                           prodl	equ	0xFF3
 22188                           intcon	equ	0xFF2
 22189                           intcon2	equ	0xFF1
 22190                           intcon3	equ	0xFF0
 22191                           indf0	equ	0xFEF
 22192                           postinc0	equ	0xFEE
 22193                           fsr0h	equ	0xFEA
 22194                           fsr0l	equ	0xFE9
 22195                           wreg	equ	0xFE8
 22196                           postdec1	equ	0xFE5
 22197                           fsr1h	equ	0xFE2
 22198                           fsr1l	equ	0xFE1
 22199                           indf2	equ	0xFDF
 22200                           postinc2	equ	0xFDE
 22201                           postdec2	equ	0xFDD
 22202                           fsr2h	equ	0xFDA
 22203                           fsr2l	equ	0xFD9
 22204                           status	equ	0xFD8
 22205                           
 22206 ;; *************** function _inputHandler *****************
 22207 ;; Defined at:
 22208 ;;		line 375 in file "UI.c"
 22209 ;; Parameters:    Size  Location     Type
 22210 ;;		None
 22211 ;; Auto vars:     Size  Location     Type
 22212 ;;		None
 22213 ;; Return value:  Size  Location     Type
 22214 ;;                  2   41[COMRAM] int 
 22215 ;; Registers used:
 22216 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22217 ;; Tracked objects:
 22218 ;;		On entry : 0/0
 22219 ;;		On exit  : 0/0
 22220 ;;		Unchanged: 0/0
 22221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22222 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22224 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22225 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22226 ;;Total ram usage:        4 bytes
 22227 ;; Hardware stack levels used:    1
 22228 ;; Hardware stack levels required when called:    4
 22229 ;; This function calls:
 22230 ;;		_change_state_to_logs_11
 22231 ;;		_change_state_to_logs_12
 22232 ;;		_change_state_to_logs_22
 22233 ;;		_change_state_to_logs_23
 22234 ;;		_change_state_to_logs_33
 22235 ;;		_change_state_to_logs_34
 22236 ;;		_change_state_to_menu_11
 22237 ;;		_change_state_to_menu_23
 22238 ;;		i2_change_state_to_menu_12
 22239 ;;		i2_change_state_to_menu_22
 22240 ;; This function is called by:
 22241 ;;		_updateMenu
 22242 ;; This function uses a non-reentrant model
 22243 ;;
 22244                           
 22245                           	psect	text71
 22246  003D88                     __ptext71:
 22247                           	opt stack 0
 22248  003D88                     _inputHandler:
 22249                           	opt stack 18
 22250                           
 22251                           ;UI.c: 380: if(firstboot){
 22252                           
 22253                           ;incstack = 0
 22254  003D88  0101               	movlb	1	; () banked
 22255  003D8A  513B               	movf	_firstboot& (0+255),w,b
 22256  003D8C  0101               	movlb	1	; () banked
 22257  003D8E  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 22258  003D90  B4D8               	btfsc	status,2,c
 22259  003D92  D00C               	goto	i2l7942
 22260                           
 22261                           ; BSR set to: 1
 22262                           ;UI.c: 381: change_state_to_menu_11();
 22263  003D94  EC88  F02E         	call	_change_state_to_menu_11	;wreg free
 22264                           
 22265                           ;UI.c: 382: firstboot = 0;
 22266  003D98  0E00               	movlw	0
 22267  003D9A  0101               	movlb	1	; () banked
 22268  003D9C  6F3C               	movwf	(_firstboot+1)& (0+255),b
 22269  003D9E  0E00               	movlw	0
 22270  003DA0  6F3B               	movwf	_firstboot& (0+255),b
 22271                           
 22272                           ; BSR set to: 1
 22273                           ;UI.c: 383: return 0;
 22274  003DA2  0E00               	movlw	0
 22275  003DA4  6E2B               	movwf	?_inputHandler+1,c
 22276  003DA6  0E00               	movlw	0
 22277  003DA8  6E2A               	movwf	?_inputHandler,c
 22278                           
 22279                           ; BSR set to: 1
 22280  003DAA  0012               	return	
 22281  003DAC                     i2l7942:
 22282                           
 22283                           ; BSR set to: 1
 22284                           ;UI.c: 384: }
 22285                           ;UI.c: 385: if (logstate){
 22286  003DAC  0100               	movlb	0	; () banked
 22287  003DAE  51F8               	movf	_logstate& (0+255),w,b
 22288  003DB0  0100               	movlb	0	; () banked
 22289  003DB2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 22290  003DB4  B4D8               	btfsc	status,2,c
 22291  003DB6  D0C7               	goto	i2l8060
 22292                           
 22293                           ; BSR set to: 0
 22294                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 22295  003DB8  0E43               	movlw	67
 22296  003DBA  187D               	xorwf	_input,w,c	;volatile
 22297  003DBC  A4D8               	btfss	status,2,c
 22298  003DBE  D012               	goto	i2l7960
 22299                           
 22300                           ; BSR set to: 0
 22301  003DC0  B281               	btfsc	3969,1,c	;volatile
 22302  003DC2  D009               	goto	i2l7952
 22303  003DC4  D00F               	goto	i2l7960
 22304  003DC6                     i2l7950:
 22305                           
 22306                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 22307  003DC6  0E68               	movlw	104
 22308  003DC8  6E2C               	movwf	??_inputHandler& (0+255),c
 22309  003DCA  0EE4               	movlw	228
 22310  003DCC                     i2u1248_47:
 22311  003DCC  2EE8               	decfsz	wreg,f,c
 22312  003DCE  D7FE               	bra	i2u1248_47
 22313  003DD0  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 22314  003DD2  D7FC               	bra	i2u1248_47
 22315  003DD4  D000               	nop2	
 22316  003DD6                     i2l7952:
 22317  003DD6  B281               	btfsc	3969,1,c	;volatile
 22318  003DD8  D7F6               	goto	i2l7950
 22319  003DDA                     i2l7954:
 22320                           
 22321                           ;UI.c: 390: }
 22322                           ;UI.c: 391: return 0;
 22323  003DDA  0E00               	movlw	0
 22324  003DDC  6E2B               	movwf	?_inputHandler+1,c
 22325  003DDE  0E00               	movlw	0
 22326  003DE0  6E2A               	movwf	?_inputHandler,c
 22327  003DE2  0012               	return	
 22328  003DE4                     i2l7960:
 22329                           
 22330                           ;UI.c: 393: else if (input == 'D'){
 22331  003DE4  0E44               	movlw	68
 22332  003DE6  187D               	xorwf	_input,w,c	;volatile
 22333  003DE8  A4D8               	btfss	status,2,c
 22334  003DEA  D7F7               	goto	i2l7954
 22335                           
 22336                           ;UI.c: 395: logstate = 0;
 22337  003DEC  0E00               	movlw	0
 22338  003DEE  0100               	movlb	0	; () banked
 22339  003DF0  6FF9               	movwf	(_logstate+1)& (0+255),b
 22340  003DF2  0E00               	movlw	0
 22341  003DF4  6FF8               	movwf	_logstate& (0+255),b
 22342                           
 22343                           ;UI.c: 396: switch(cur_state){
 22344  003DF6  D012               	goto	i2l7978
 22345  003DF8                     i2l7964:
 22346                           
 22347                           ;UI.c: 398: change_state_to_logs_11();
 22348  003DF8  EC00  F02F         	call	_change_state_to_logs_11	;wreg free
 22349                           
 22350                           ;UI.c: 399: break;
 22351  003DFC  D7EE               	goto	i2l7954
 22352  003DFE                     i2l7966:
 22353                           
 22354                           ;UI.c: 401: change_state_to_logs_12();
 22355  003DFE  ECE8  F02E         	call	_change_state_to_logs_12	;wreg free
 22356                           
 22357                           ;UI.c: 402: break;
 22358  003E02  D7EB               	goto	i2l7954
 22359  003E04                     i2l7968:
 22360                           
 22361                           ;UI.c: 404: change_state_to_logs_22();
 22362  003E04  ECD0  F02E         	call	_change_state_to_logs_22	;wreg free
 22363                           
 22364                           ;UI.c: 405: break;
 22365  003E08  D7E8               	goto	i2l7954
 22366  003E0A                     i2l7970:
 22367                           
 22368                           ;UI.c: 407: change_state_to_logs_23();
 22369  003E0A  EC2F  F02F         	call	_change_state_to_logs_23	;wreg free
 22370                           
 22371                           ;UI.c: 408: break;
 22372  003E0E  D7E5               	goto	i2l7954
 22373  003E10                     i2l7972:
 22374                           
 22375                           ;UI.c: 410: change_state_to_logs_33();
 22376  003E10  ECB8  F02E         	call	_change_state_to_logs_33	;wreg free
 22377                           
 22378                           ;UI.c: 411: break;
 22379  003E14  D7E2               	goto	i2l7954
 22380  003E16                     i2l7974:
 22381                           
 22382                           ;UI.c: 413: change_state_to_logs_34();
 22383  003E16  ECA0  F02E         	call	_change_state_to_logs_34	;wreg free
 22384                           
 22385                           ;UI.c: 415: }
 22386                           
 22387                           ;UI.c: 414: break;
 22388  003E1A  D7DF               	goto	i2l7954
 22389  003E1C                     i2l7978:
 22390  003E1C  C0E8  F02C         	movff	_cur_state,??_inputHandler
 22391  003E20  C0E9  F02D         	movff	_cur_state+1,??_inputHandler+1
 22392                           
 22393                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 22394                           ; Switch size 1, requested type "space"
 22395                           ; Number of cases is 2, Range of values is 3 to 4
 22396                           ; switch strategies available:
 22397                           ; Name         Instructions Cycles
 22398                           ; simple_byte            7     4 (average)
 22399                           ;	Chosen strategy is simple_byte
 22400  003E24  502D               	movf	??_inputHandler+1,w,c
 22401  003E26  0A03               	xorlw	3	; case 3
 22402  003E28  B4D8               	btfsc	status,2,c
 22403  003E2A  D004               	goto	i2l11206
 22404  003E2C  0A07               	xorlw	7	; case 4
 22405  003E2E  B4D8               	btfsc	status,2,c
 22406  003E30  D00F               	goto	i2l11208
 22407  003E32  D7D3               	goto	i2l7954
 22408  003E34                     i2l11206:
 22409                           
 22410                           ; Switch size 1, requested type "space"
 22411                           ; Number of cases is 4, Range of values is 243 to 255
 22412                           ; switch strategies available:
 22413                           ; Name         Instructions Cycles
 22414                           ; simple_byte           13     7 (average)
 22415                           ;	Chosen strategy is simple_byte
 22416  003E34  502C               	movf	??_inputHandler,w,c
 22417  003E36  0AF3               	xorlw	243	; case 243
 22418  003E38  B4D8               	btfsc	status,2,c
 22419  003E3A  D7DE               	goto	i2l7964
 22420  003E3C  0A07               	xorlw	7	; case 244
 22421  003E3E  B4D8               	btfsc	status,2,c
 22422  003E40  D7DE               	goto	i2l7966
 22423  003E42  0A0A               	xorlw	10	; case 254
 22424  003E44  B4D8               	btfsc	status,2,c
 22425  003E46  D7DE               	goto	i2l7968
 22426  003E48  0A01               	xorlw	1	; case 255
 22427  003E4A  B4D8               	btfsc	status,2,c
 22428  003E4C  D7DE               	goto	i2l7970
 22429  003E4E  D7C5               	goto	i2l7954
 22430  003E50                     i2l11208:
 22431                           
 22432                           ; Switch size 1, requested type "space"
 22433                           ; Number of cases is 2, Range of values is 9 to 10
 22434                           ; switch strategies available:
 22435                           ; Name         Instructions Cycles
 22436                           ; simple_byte            7     4 (average)
 22437                           ;	Chosen strategy is simple_byte
 22438  003E50  502C               	movf	??_inputHandler,w,c
 22439  003E52  0A09               	xorlw	9	; case 9
 22440  003E54  B4D8               	btfsc	status,2,c
 22441  003E56  D7DC               	goto	i2l7972
 22442  003E58  0A03               	xorlw	3	; case 10
 22443  003E5A  B4D8               	btfsc	status,2,c
 22444  003E5C  D7DC               	goto	i2l7974
 22445  003E5E  D7BD               	goto	i2l7954
 22446  003E60                     i2l7990:
 22447                           
 22448                           ;UI.c: 425: if(cur_state == 11){
 22449  003E60  0E0B               	movlw	11
 22450  003E62  0100               	movlb	0	; () banked
 22451  003E64  19E8               	xorwf	_cur_state& (0+255),w,b
 22452  003E66  0100               	movlb	0	; () banked
 22453  003E68  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22454  003E6A  A4D8               	btfss	status,2,c
 22455  003E6C  D005               	goto	i2l7998
 22456                           
 22457                           ; BSR set to: 0
 22458                           ;UI.c: 426: return 0;
 22459  003E6E  0E00               	movlw	0
 22460  003E70  6E2B               	movwf	?_inputHandler+1,c
 22461  003E72  0E00               	movlw	0
 22462  003E74  6E2A               	movwf	?_inputHandler,c
 22463                           
 22464                           ; BSR set to: 0
 22465  003E76  0012               	return	
 22466  003E78                     i2l7998:
 22467                           
 22468                           ; BSR set to: 0
 22469                           ;UI.c: 428: else{
 22470                           ;UI.c: 429: change_state_to_menu_11();
 22471  003E78  EC88  F02E         	call	_change_state_to_menu_11	;wreg free
 22472                           
 22473                           ;UI.c: 430: }
 22474                           ;UI.c: 431: return 0;
 22475  003E7C  0E00               	movlw	0
 22476  003E7E  6E2B               	movwf	?_inputHandler+1,c
 22477  003E80  0E00               	movlw	0
 22478  003E82  6E2A               	movwf	?_inputHandler,c
 22479  003E84  0012               	return	
 22480  003E86                     i2l8004:
 22481                           
 22482                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 22483  003E86  0E16               	movlw	22
 22484  003E88  0100               	movlb	0	; () banked
 22485  003E8A  19E8               	xorwf	_cur_state& (0+255),w,b
 22486  003E8C  0100               	movlb	0	; () banked
 22487  003E8E  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22488  003E90  B4D8               	btfsc	status,2,c
 22489  003E92  D007               	goto	i2l8008
 22490                           
 22491                           ; BSR set to: 0
 22492  003E94  0E0C               	movlw	12
 22493  003E96  0100               	movlb	0	; () banked
 22494  003E98  19E8               	xorwf	_cur_state& (0+255),w,b
 22495  003E9A  0100               	movlb	0	; () banked
 22496  003E9C  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22497  003E9E  A4D8               	btfss	status,2,c
 22498  003EA0  D005               	goto	i2l8014
 22499  003EA2                     i2l8008:
 22500                           
 22501                           ; BSR set to: 0
 22502                           ;UI.c: 434: return 0;
 22503  003EA2  0E00               	movlw	0
 22504  003EA4  6E2B               	movwf	?_inputHandler+1,c
 22505  003EA6  0E00               	movlw	0
 22506  003EA8  6E2A               	movwf	?_inputHandler,c
 22507                           
 22508                           ; BSR set to: 0
 22509  003EAA  0012               	return	
 22510  003EAC                     i2l8014:
 22511                           
 22512                           ; BSR set to: 0
 22513                           ;UI.c: 436: else if(cur_state == 23){
 22514  003EAC  0E17               	movlw	23
 22515  003EAE  0100               	movlb	0	; () banked
 22516  003EB0  19E8               	xorwf	_cur_state& (0+255),w,b
 22517  003EB2  0100               	movlb	0	; () banked
 22518  003EB4  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22519  003EB6  A4D8               	btfss	status,2,c
 22520  003EB8  D003               	goto	i2l8018
 22521                           
 22522                           ; BSR set to: 0
 22523                           ;UI.c: 437: change_state_to_menu_22();
 22524  003EBA  EC40  F02E         	call	i2_change_state_to_menu_22	;wreg free
 22525                           
 22526                           ;UI.c: 438: }
 22527  003EBE  D002               	goto	i2l8020
 22528  003EC0                     i2l8018:
 22529                           
 22530                           ;UI.c: 439: else{
 22531                           ;UI.c: 440: change_state_to_menu_12();
 22532  003EC0  EC58  F02E         	call	i2_change_state_to_menu_12	;wreg free
 22533  003EC4                     i2l8020:
 22534                           
 22535                           ;UI.c: 441: }
 22536                           ;UI.c: 442: return 0;
 22537  003EC4  0E00               	movlw	0
 22538  003EC6  6E2B               	movwf	?_inputHandler+1,c
 22539  003EC8  0E00               	movlw	0
 22540  003ECA  6E2A               	movwf	?_inputHandler,c
 22541  003ECC  0012               	return	
 22542  003ECE                     i2l8024:
 22543                           
 22544                           ;UI.c: 444: if(cur_state == 23){
 22545  003ECE  0E17               	movlw	23
 22546  003ED0  0100               	movlb	0	; () banked
 22547  003ED2  19E8               	xorwf	_cur_state& (0+255),w,b
 22548  003ED4  0100               	movlb	0	; () banked
 22549  003ED6  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22550  003ED8  A4D8               	btfss	status,2,c
 22551  003EDA  D005               	goto	i2l8032
 22552                           
 22553                           ; BSR set to: 0
 22554                           ;UI.c: 445: return 0;
 22555  003EDC  0E00               	movlw	0
 22556  003EDE  6E2B               	movwf	?_inputHandler+1,c
 22557  003EE0  0E00               	movlw	0
 22558  003EE2  6E2A               	movwf	?_inputHandler,c
 22559                           
 22560                           ; BSR set to: 0
 22561  003EE4  0012               	return	
 22562  003EE6                     i2l8032:
 22563                           
 22564                           ; BSR set to: 0
 22565                           ;UI.c: 447: else{
 22566                           ;UI.c: 448: change_state_to_menu_23();
 22567  003EE6  EC70  F02E         	call	_change_state_to_menu_23	;wreg free
 22568                           
 22569                           ;UI.c: 449: }
 22570                           ;UI.c: 450: return 0;
 22571  003EEA  0E00               	movlw	0
 22572  003EEC  6E2B               	movwf	?_inputHandler+1,c
 22573  003EEE  0E00               	movlw	0
 22574  003EF0  6E2A               	movwf	?_inputHandler,c
 22575  003EF2  0012               	return	
 22576  003EF4                     i2l8038:
 22577                           
 22578                           ;UI.c: 453: up = 1;
 22579  003EF4  0E00               	movlw	0
 22580  003EF6  6E76               	movwf	_up+1,c
 22581  003EF8  0E01               	movlw	1
 22582  003EFA  6E75               	movwf	_up,c
 22583                           
 22584                           ;UI.c: 454: return 1;
 22585  003EFC  0E00               	movlw	0
 22586  003EFE  6E2B               	movwf	?_inputHandler+1,c
 22587  003F00  0E01               	movlw	1
 22588  003F02  6E2A               	movwf	?_inputHandler,c
 22589  003F04  0012               	return	
 22590  003F06                     i2l8042:
 22591                           
 22592                           ;UI.c: 456: down = 1;
 22593  003F06  0E00               	movlw	0
 22594  003F08  6E66               	movwf	_down+1,c
 22595  003F0A  0E01               	movlw	1
 22596  003F0C  6E65               	movwf	_down,c
 22597                           
 22598                           ;UI.c: 457: return 1;
 22599  003F0E  0E00               	movlw	0
 22600  003F10  6E2B               	movwf	?_inputHandler+1,c
 22601  003F12  0E01               	movlw	1
 22602  003F14  6E2A               	movwf	?_inputHandler,c
 22603  003F16  0012               	return	
 22604  003F18                     i2l8046:
 22605                           
 22606                           ;UI.c: 459: enter = 1;
 22607  003F18  0E00               	movlw	0
 22608  003F1A  6E68               	movwf	_enter+1,c
 22609  003F1C  0E01               	movlw	1
 22610  003F1E  6E67               	movwf	_enter,c
 22611                           
 22612                           ;UI.c: 460: return 1;
 22613  003F20  0E00               	movlw	0
 22614  003F22  6E2B               	movwf	?_inputHandler+1,c
 22615  003F24  0E01               	movlw	1
 22616  003F26  6E2A               	movwf	?_inputHandler,c
 22617  003F28  0012               	return	
 22618  003F2A                     i2l8050:
 22619                           
 22620                           ;UI.c: 462: back = 1;
 22621  003F2A  0E00               	movlw	0
 22622  003F2C  6E5C               	movwf	_back+1,c
 22623  003F2E  0E01               	movlw	1
 22624  003F30  6E5B               	movwf	_back,c
 22625                           
 22626                           ;UI.c: 463: return 1;
 22627  003F32  0E00               	movlw	0
 22628  003F34  6E2B               	movwf	?_inputHandler+1,c
 22629  003F36  0E01               	movlw	1
 22630  003F38  6E2A               	movwf	?_inputHandler,c
 22631  003F3A  0012               	return	
 22632  003F3C                     i2l8054:
 22633                           
 22634                           ;UI.c: 466: return 1;
 22635  003F3C  0E00               	movlw	0
 22636  003F3E  6E2B               	movwf	?_inputHandler+1,c
 22637  003F40  0E01               	movlw	1
 22638  003F42  6E2A               	movwf	?_inputHandler,c
 22639                           
 22640                           ;UI.c: 467: }
 22641  003F44  0012               	return	
 22642  003F46                     i2l8060:
 22643  003F46  507D               	movf	_input,w,c	;volatile
 22644                           
 22645                           ; Switch size 1, requested type "space"
 22646                           ; Number of cases is 7, Range of values is 49 to 68
 22647                           ; switch strategies available:
 22648                           ; Name         Instructions Cycles
 22649                           ; simple_byte           22    12 (average)
 22650                           ;	Chosen strategy is simple_byte
 22651  003F48  0A31               	xorlw	49	; case 49
 22652  003F4A  B4D8               	btfsc	status,2,c
 22653  003F4C  D789               	goto	i2l7990
 22654  003F4E  0A03               	xorlw	3	; case 50
 22655  003F50  B4D8               	btfsc	status,2,c
 22656  003F52  D799               	goto	i2l8004
 22657  003F54  0A01               	xorlw	1	; case 51
 22658  003F56  B4D8               	btfsc	status,2,c
 22659  003F58  D7BA               	goto	i2l8024
 22660  003F5A  0A72               	xorlw	114	; case 65
 22661  003F5C  B4D8               	btfsc	status,2,c
 22662  003F5E  D7CA               	goto	i2l8038
 22663  003F60  0A03               	xorlw	3	; case 66
 22664  003F62  B4D8               	btfsc	status,2,c
 22665  003F64  D7D0               	goto	i2l8042
 22666  003F66  0A01               	xorlw	1	; case 67
 22667  003F68  B4D8               	btfsc	status,2,c
 22668  003F6A  D7D6               	goto	i2l8046
 22669  003F6C  0A07               	xorlw	7	; case 68
 22670  003F6E  B4D8               	btfsc	status,2,c
 22671  003F70  D7DC               	goto	i2l8050
 22672  003F72  D7E4               	goto	i2l8054
 22673  003F74                     __end_of_inputHandler:
 22674                           	opt stack 0
 22675                           pclatu	equ	0xFFB
 22676                           pclath	equ	0xFFA
 22677                           tblptru	equ	0xFF8
 22678                           tblptrh	equ	0xFF7
 22679                           tblptrl	equ	0xFF6
 22680                           tablat	equ	0xFF5
 22681                           prodh	equ	0xFF4
 22682                           prodl	equ	0xFF3
 22683                           intcon	equ	0xFF2
 22684                           intcon2	equ	0xFF1
 22685                           intcon3	equ	0xFF0
 22686                           indf0	equ	0xFEF
 22687                           postinc0	equ	0xFEE
 22688                           fsr0h	equ	0xFEA
 22689                           fsr0l	equ	0xFE9
 22690                           wreg	equ	0xFE8
 22691                           postdec1	equ	0xFE5
 22692                           fsr1h	equ	0xFE2
 22693                           fsr1l	equ	0xFE1
 22694                           indf2	equ	0xFDF
 22695                           postinc2	equ	0xFDE
 22696                           postdec2	equ	0xFDD
 22697                           fsr2h	equ	0xFDA
 22698                           fsr2l	equ	0xFD9
 22699                           status	equ	0xFD8
 22700                           
 22701 ;; *************** function i2_change_state_to_menu_22 *****************
 22702 ;; Defined at:
 22703 ;;		line 501 in file "UI.c"
 22704 ;; Parameters:    Size  Location     Type
 22705 ;;		None
 22706 ;; Auto vars:     Size  Location     Type
 22707 ;;		None
 22708 ;; Return value:  Size  Location     Type
 22709 ;;                  1    wreg      void 
 22710 ;; Registers used:
 22711 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22712 ;; Tracked objects:
 22713 ;;		On entry : 0/0
 22714 ;;		On exit  : 0/0
 22715 ;;		Unchanged: 0/0
 22716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22721 ;;Total ram usage:        0 bytes
 22722 ;; Hardware stack levels used:    1
 22723 ;; Hardware stack levels required when called:    3
 22724 ;; This function calls:
 22725 ;;		i2_lcdInst
 22726 ;;		i2_printf
 22727 ;; This function is called by:
 22728 ;;		_updateMenu
 22729 ;;		_inputHandler
 22730 ;; This function uses a non-reentrant model
 22731 ;;
 22732                           
 22733                           	psect	text72
 22734  005C80                     __ptext72:
 22735                           	opt stack 0
 22736  005C80                     i2_change_state_to_menu_22:
 22737                           	opt stack 19
 22738                           
 22739                           ;UI.c: 502: cur_state = 22;
 22740                           
 22741                           ;incstack = 0
 22742  005C80  0E00               	movlw	0
 22743  005C82  0100               	movlb	0	; () banked
 22744  005C84  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22745  005C86  0E16               	movlw	22
 22746  005C88  6FE8               	movwf	_cur_state& (0+255),b
 22747                           
 22748                           ; BSR set to: 0
 22749                           ;UI.c: 504: lcdInst(0b10000000);;
 22750  005C8A  0E80               	movlw	128
 22751  005C8C  EC71  F030         	call	i2_lcdInst
 22752                           
 22753                           ;UI.c: 505: printf("2. SORT        <");
 22754  005C90  0ED3               	movlw	low STR_34
 22755  005C92  6E0D               	movwf	i2printf@f,c
 22756  005C94  0EFD               	movlw	high STR_34
 22757  005C96  6E0E               	movwf	i2printf@f+1,c
 22758  005C98  ECB2  F016         	call	i2_printf	;wreg free
 22759                           
 22760                           ;UI.c: 506: lcdInst(0b11000000);;
 22761  005C9C  0EC0               	movlw	192
 22762  005C9E  EC71  F030         	call	i2_lcdInst
 22763                           
 22764                           ;UI.c: 507: printf("3. LOGS         ");
 22765  005CA2  0E18               	movlw	low STR_36
 22766  005CA4  6E0D               	movwf	i2printf@f,c
 22767  005CA6  0EFD               	movlw	high STR_36
 22768  005CA8  6E0E               	movwf	i2printf@f+1,c
 22769  005CAA  ECB2  F016         	call	i2_printf	;wreg free
 22770  005CAE  0012               	return		;funcret
 22771  005CB0                     __end_ofi2_change_state_to_menu_22:
 22772                           	opt stack 0
 22773                           pclatu	equ	0xFFB
 22774                           pclath	equ	0xFFA
 22775                           tblptru	equ	0xFF8
 22776                           tblptrh	equ	0xFF7
 22777                           tblptrl	equ	0xFF6
 22778                           tablat	equ	0xFF5
 22779                           prodh	equ	0xFF4
 22780                           prodl	equ	0xFF3
 22781                           intcon	equ	0xFF2
 22782                           intcon2	equ	0xFF1
 22783                           intcon3	equ	0xFF0
 22784                           indf0	equ	0xFEF
 22785                           postinc0	equ	0xFEE
 22786                           fsr0h	equ	0xFEA
 22787                           fsr0l	equ	0xFE9
 22788                           wreg	equ	0xFE8
 22789                           postdec1	equ	0xFE5
 22790                           fsr1h	equ	0xFE2
 22791                           fsr1l	equ	0xFE1
 22792                           indf2	equ	0xFDF
 22793                           postinc2	equ	0xFDE
 22794                           postdec2	equ	0xFDD
 22795                           fsr2h	equ	0xFDA
 22796                           fsr2l	equ	0xFD9
 22797                           status	equ	0xFD8
 22798                           
 22799 ;; *************** function i2_change_state_to_menu_12 *****************
 22800 ;; Defined at:
 22801 ;;		line 493 in file "UI.c"
 22802 ;; Parameters:    Size  Location     Type
 22803 ;;		None
 22804 ;; Auto vars:     Size  Location     Type
 22805 ;;		None
 22806 ;; Return value:  Size  Location     Type
 22807 ;;                  1    wreg      void 
 22808 ;; Registers used:
 22809 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22810 ;; Tracked objects:
 22811 ;;		On entry : 0/0
 22812 ;;		On exit  : 0/0
 22813 ;;		Unchanged: 0/0
 22814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22819 ;;Total ram usage:        0 bytes
 22820 ;; Hardware stack levels used:    1
 22821 ;; Hardware stack levels required when called:    3
 22822 ;; This function calls:
 22823 ;;		i2_lcdInst
 22824 ;;		i2_printf
 22825 ;; This function is called by:
 22826 ;;		_updateMenu
 22827 ;;		_inputHandler
 22828 ;; This function uses a non-reentrant model
 22829 ;;
 22830                           
 22831                           	psect	text73
 22832  005CB0                     __ptext73:
 22833                           	opt stack 0
 22834  005CB0                     i2_change_state_to_menu_12:
 22835                           	opt stack 19
 22836                           
 22837                           ;UI.c: 494: cur_state = 12;
 22838                           
 22839                           ;incstack = 0
 22840  005CB0  0E00               	movlw	0
 22841  005CB2  0100               	movlb	0	; () banked
 22842  005CB4  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22843  005CB6  0E0C               	movlw	12
 22844  005CB8  6FE8               	movwf	_cur_state& (0+255),b
 22845                           
 22846                           ; BSR set to: 0
 22847                           ;UI.c: 496: lcdInst(0b10000000);;
 22848  005CBA  0E80               	movlw	128
 22849  005CBC  EC71  F030         	call	i2_lcdInst
 22850                           
 22851                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22852  005CC0  0E3A               	movlw	low STR_33
 22853  005CC2  6E0D               	movwf	i2printf@f,c
 22854  005CC4  0EFD               	movlw	high STR_33
 22855  005CC6  6E0E               	movwf	i2printf@f+1,c
 22856  005CC8  ECB2  F016         	call	i2_printf	;wreg free
 22857                           
 22858                           ;UI.c: 498: lcdInst(0b11000000);;
 22859  005CCC  0EC0               	movlw	192
 22860  005CCE  EC71  F030         	call	i2_lcdInst
 22861                           
 22862                           ;UI.c: 499: printf("2. SORT        <");
 22863  005CD2  0ED3               	movlw	low STR_34
 22864  005CD4  6E0D               	movwf	i2printf@f,c
 22865  005CD6  0EFD               	movlw	high STR_34
 22866  005CD8  6E0E               	movwf	i2printf@f+1,c
 22867  005CDA  ECB2  F016         	call	i2_printf	;wreg free
 22868  005CDE  0012               	return		;funcret
 22869  005CE0                     __end_ofi2_change_state_to_menu_12:
 22870                           	opt stack 0
 22871                           pclatu	equ	0xFFB
 22872                           pclath	equ	0xFFA
 22873                           tblptru	equ	0xFF8
 22874                           tblptrh	equ	0xFF7
 22875                           tblptrl	equ	0xFF6
 22876                           tablat	equ	0xFF5
 22877                           prodh	equ	0xFF4
 22878                           prodl	equ	0xFF3
 22879                           intcon	equ	0xFF2
 22880                           intcon2	equ	0xFF1
 22881                           intcon3	equ	0xFF0
 22882                           indf0	equ	0xFEF
 22883                           postinc0	equ	0xFEE
 22884                           fsr0h	equ	0xFEA
 22885                           fsr0l	equ	0xFE9
 22886                           wreg	equ	0xFE8
 22887                           postdec1	equ	0xFE5
 22888                           fsr1h	equ	0xFE2
 22889                           fsr1l	equ	0xFE1
 22890                           indf2	equ	0xFDF
 22891                           postinc2	equ	0xFDE
 22892                           postdec2	equ	0xFDD
 22893                           fsr2h	equ	0xFDA
 22894                           fsr2l	equ	0xFD9
 22895                           status	equ	0xFD8
 22896                           
 22897 ;; *************** function _change_state_to_menu_23 *****************
 22898 ;; Defined at:
 22899 ;;		line 509 in file "UI.c"
 22900 ;; Parameters:    Size  Location     Type
 22901 ;;		None
 22902 ;; Auto vars:     Size  Location     Type
 22903 ;;		None
 22904 ;; Return value:  Size  Location     Type
 22905 ;;                  1    wreg      void 
 22906 ;; Registers used:
 22907 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22908 ;; Tracked objects:
 22909 ;;		On entry : 0/0
 22910 ;;		On exit  : 0/0
 22911 ;;		Unchanged: 0/0
 22912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22917 ;;Total ram usage:        0 bytes
 22918 ;; Hardware stack levels used:    1
 22919 ;; Hardware stack levels required when called:    3
 22920 ;; This function calls:
 22921 ;;		i2_lcdInst
 22922 ;;		i2_printf
 22923 ;; This function is called by:
 22924 ;;		_updateMenu
 22925 ;;		_inputHandler
 22926 ;; This function uses a non-reentrant model
 22927 ;;
 22928                           
 22929                           	psect	text74
 22930  005CE0                     __ptext74:
 22931                           	opt stack 0
 22932  005CE0                     _change_state_to_menu_23:
 22933                           	opt stack 18
 22934                           
 22935                           ;UI.c: 510: cur_state = 23;
 22936                           
 22937                           ;incstack = 0
 22938  005CE0  0E00               	movlw	0
 22939  005CE2  0100               	movlb	0	; () banked
 22940  005CE4  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22941  005CE6  0E17               	movlw	23
 22942  005CE8  6FE8               	movwf	_cur_state& (0+255),b
 22943                           
 22944                           ; BSR set to: 0
 22945                           ;UI.c: 512: lcdInst(0b10000000);;
 22946  005CEA  0E80               	movlw	128
 22947  005CEC  EC71  F030         	call	i2_lcdInst
 22948                           
 22949                           ;UI.c: 513: printf("2. SORT         ");
 22950  005CF0  0E29               	movlw	low STR_32
 22951  005CF2  6E0D               	movwf	i2printf@f,c
 22952  005CF4  0EFD               	movlw	high STR_32
 22953  005CF6  6E0E               	movwf	i2printf@f+1,c
 22954  005CF8  ECB2  F016         	call	i2_printf	;wreg free
 22955                           
 22956                           ;UI.c: 514: lcdInst(0b11000000);;
 22957  005CFC  0EC0               	movlw	192
 22958  005CFE  EC71  F030         	call	i2_lcdInst
 22959                           
 22960                           ;UI.c: 515: printf("3. LOGS        <");
 22961  005D02  0EC2               	movlw	low STR_38
 22962  005D04  6E0D               	movwf	i2printf@f,c
 22963  005D06  0EFD               	movlw	high STR_38
 22964  005D08  6E0E               	movwf	i2printf@f+1,c
 22965  005D0A  ECB2  F016         	call	i2_printf	;wreg free
 22966  005D0E  0012               	return		;funcret
 22967  005D10                     __end_of_change_state_to_menu_23:
 22968                           	opt stack 0
 22969                           pclatu	equ	0xFFB
 22970                           pclath	equ	0xFFA
 22971                           tblptru	equ	0xFF8
 22972                           tblptrh	equ	0xFF7
 22973                           tblptrl	equ	0xFF6
 22974                           tablat	equ	0xFF5
 22975                           prodh	equ	0xFF4
 22976                           prodl	equ	0xFF3
 22977                           intcon	equ	0xFF2
 22978                           intcon2	equ	0xFF1
 22979                           intcon3	equ	0xFF0
 22980                           indf0	equ	0xFEF
 22981                           postinc0	equ	0xFEE
 22982                           fsr0h	equ	0xFEA
 22983                           fsr0l	equ	0xFE9
 22984                           wreg	equ	0xFE8
 22985                           postdec1	equ	0xFE5
 22986                           fsr1h	equ	0xFE2
 22987                           fsr1l	equ	0xFE1
 22988                           indf2	equ	0xFDF
 22989                           postinc2	equ	0xFDE
 22990                           postdec2	equ	0xFDD
 22991                           fsr2h	equ	0xFDA
 22992                           fsr2l	equ	0xFD9
 22993                           status	equ	0xFD8
 22994                           
 22995 ;; *************** function _change_state_to_menu_11 *****************
 22996 ;; Defined at:
 22997 ;;		line 485 in file "UI.c"
 22998 ;; Parameters:    Size  Location     Type
 22999 ;;		None
 23000 ;; Auto vars:     Size  Location     Type
 23001 ;;		None
 23002 ;; Return value:  Size  Location     Type
 23003 ;;                  1    wreg      void 
 23004 ;; Registers used:
 23005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23006 ;; Tracked objects:
 23007 ;;		On entry : 0/0
 23008 ;;		On exit  : 0/0
 23009 ;;		Unchanged: 0/0
 23010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23015 ;;Total ram usage:        0 bytes
 23016 ;; Hardware stack levels used:    1
 23017 ;; Hardware stack levels required when called:    3
 23018 ;; This function calls:
 23019 ;;		i2_lcdInst
 23020 ;;		i2_printf
 23021 ;; This function is called by:
 23022 ;;		_updateMenu
 23023 ;;		_inputHandler
 23024 ;; This function uses a non-reentrant model
 23025 ;;
 23026                           
 23027                           	psect	text75
 23028  005D10                     __ptext75:
 23029                           	opt stack 0
 23030  005D10                     _change_state_to_menu_11:
 23031                           	opt stack 18
 23032                           
 23033                           ;UI.c: 486: cur_state = 11;
 23034                           
 23035                           ;incstack = 0
 23036  005D10  0E00               	movlw	0
 23037  005D12  0100               	movlb	0	; () banked
 23038  005D14  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23039  005D16  0E0B               	movlw	11
 23040  005D18  6FE8               	movwf	_cur_state& (0+255),b
 23041                           
 23042                           ; BSR set to: 0
 23043                           ;UI.c: 488: lcdInst(0b10000000);;
 23044  005D1A  0E80               	movlw	128
 23045  005D1C  EC71  F030         	call	i2_lcdInst
 23046                           
 23047                           ;UI.c: 489: printf("1. DATE/TIME   <");
 23048  005D20  0EE4               	movlw	low STR_31
 23049  005D22  6E0D               	movwf	i2printf@f,c
 23050  005D24  0EFD               	movlw	high STR_31
 23051  005D26  6E0E               	movwf	i2printf@f+1,c
 23052  005D28  ECB2  F016         	call	i2_printf	;wreg free
 23053                           
 23054                           ;UI.c: 490: lcdInst(0b11000000);;
 23055  005D2C  0EC0               	movlw	192
 23056  005D2E  EC71  F030         	call	i2_lcdInst
 23057                           
 23058                           ;UI.c: 491: printf("2. SORT         ");
 23059  005D32  0E29               	movlw	low STR_32
 23060  005D34  6E0D               	movwf	i2printf@f,c
 23061  005D36  0EFD               	movlw	high STR_32
 23062  005D38  6E0E               	movwf	i2printf@f+1,c
 23063  005D3A  ECB2  F016         	call	i2_printf	;wreg free
 23064  005D3E  0012               	return		;funcret
 23065  005D40                     __end_of_change_state_to_menu_11:
 23066                           	opt stack 0
 23067                           pclatu	equ	0xFFB
 23068                           pclath	equ	0xFFA
 23069                           tblptru	equ	0xFF8
 23070                           tblptrh	equ	0xFF7
 23071                           tblptrl	equ	0xFF6
 23072                           tablat	equ	0xFF5
 23073                           prodh	equ	0xFF4
 23074                           prodl	equ	0xFF3
 23075                           intcon	equ	0xFF2
 23076                           intcon2	equ	0xFF1
 23077                           intcon3	equ	0xFF0
 23078                           indf0	equ	0xFEF
 23079                           postinc0	equ	0xFEE
 23080                           fsr0h	equ	0xFEA
 23081                           fsr0l	equ	0xFE9
 23082                           wreg	equ	0xFE8
 23083                           postdec1	equ	0xFE5
 23084                           fsr1h	equ	0xFE2
 23085                           fsr1l	equ	0xFE1
 23086                           indf2	equ	0xFDF
 23087                           postinc2	equ	0xFDE
 23088                           postdec2	equ	0xFDD
 23089                           fsr2h	equ	0xFDA
 23090                           fsr2l	equ	0xFD9
 23091                           status	equ	0xFD8
 23092                           
 23093 ;; *************** function _change_state_to_logs_34 *****************
 23094 ;; Defined at:
 23095 ;;		line 552 in file "UI.c"
 23096 ;; Parameters:    Size  Location     Type
 23097 ;;		None
 23098 ;; Auto vars:     Size  Location     Type
 23099 ;;		None
 23100 ;; Return value:  Size  Location     Type
 23101 ;;                  1    wreg      void 
 23102 ;; Registers used:
 23103 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23104 ;; Tracked objects:
 23105 ;;		On entry : 0/0
 23106 ;;		On exit  : 0/0
 23107 ;;		Unchanged: 0/0
 23108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23113 ;;Total ram usage:        0 bytes
 23114 ;; Hardware stack levels used:    1
 23115 ;; Hardware stack levels required when called:    3
 23116 ;; This function calls:
 23117 ;;		i2_lcdInst
 23118 ;;		i2_printf
 23119 ;; This function is called by:
 23120 ;;		_updateMenu
 23121 ;;		_inputHandler
 23122 ;; This function uses a non-reentrant model
 23123 ;;
 23124                           
 23125                           	psect	text76
 23126  005D40                     __ptext76:
 23127                           	opt stack 0
 23128  005D40                     _change_state_to_logs_34:
 23129                           	opt stack 18
 23130                           
 23131                           ;UI.c: 553: cur_state = 1034;
 23132                           
 23133                           ;incstack = 0
 23134  005D40  0E04               	movlw	4
 23135  005D42  0100               	movlb	0	; () banked
 23136  005D44  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23137  005D46  0E0A               	movlw	10
 23138  005D48  6FE8               	movwf	_cur_state& (0+255),b
 23139                           
 23140                           ; BSR set to: 0
 23141                           ;UI.c: 554: lcdInst(0b10000000);;
 23142  005D4A  0E80               	movlw	128
 23143  005D4C  EC71  F030         	call	i2_lcdInst
 23144                           
 23145                           ;UI.c: 555: printf("LOG 3           ");
 23146  005D50  0EF6               	movlw	low STR_44
 23147  005D52  6E0D               	movwf	i2printf@f,c
 23148  005D54  0EFC               	movlw	high STR_44
 23149  005D56  6E0E               	movwf	i2printf@f+1,c
 23150  005D58  ECB2  F016         	call	i2_printf	;wreg free
 23151                           
 23152                           ;UI.c: 556: lcdInst(0b11000000);;
 23153  005D5C  0EC0               	movlw	192
 23154  005D5E  EC71  F030         	call	i2_lcdInst
 23155                           
 23156                           ;UI.c: 557: printf("LOG 4          <");
 23157  005D62  0EB1               	movlw	low STR_50
 23158  005D64  6E0D               	movwf	i2printf@f,c
 23159  005D66  0EFD               	movlw	high STR_50
 23160  005D68  6E0E               	movwf	i2printf@f+1,c
 23161  005D6A  ECB2  F016         	call	i2_printf	;wreg free
 23162  005D6E  0012               	return		;funcret
 23163  005D70                     __end_of_change_state_to_logs_34:
 23164                           	opt stack 0
 23165                           pclatu	equ	0xFFB
 23166                           pclath	equ	0xFFA
 23167                           tblptru	equ	0xFF8
 23168                           tblptrh	equ	0xFF7
 23169                           tblptrl	equ	0xFF6
 23170                           tablat	equ	0xFF5
 23171                           prodh	equ	0xFF4
 23172                           prodl	equ	0xFF3
 23173                           intcon	equ	0xFF2
 23174                           intcon2	equ	0xFF1
 23175                           intcon3	equ	0xFF0
 23176                           indf0	equ	0xFEF
 23177                           postinc0	equ	0xFEE
 23178                           fsr0h	equ	0xFEA
 23179                           fsr0l	equ	0xFE9
 23180                           wreg	equ	0xFE8
 23181                           postdec1	equ	0xFE5
 23182                           fsr1h	equ	0xFE2
 23183                           fsr1l	equ	0xFE1
 23184                           indf2	equ	0xFDF
 23185                           postinc2	equ	0xFDE
 23186                           postdec2	equ	0xFDD
 23187                           fsr2h	equ	0xFDA
 23188                           fsr2l	equ	0xFD9
 23189                           status	equ	0xFD8
 23190                           
 23191 ;; *************** function _change_state_to_logs_33 *****************
 23192 ;; Defined at:
 23193 ;;		line 545 in file "UI.c"
 23194 ;; Parameters:    Size  Location     Type
 23195 ;;		None
 23196 ;; Auto vars:     Size  Location     Type
 23197 ;;		None
 23198 ;; Return value:  Size  Location     Type
 23199 ;;                  1    wreg      void 
 23200 ;; Registers used:
 23201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23202 ;; Tracked objects:
 23203 ;;		On entry : 0/0
 23204 ;;		On exit  : 0/0
 23205 ;;		Unchanged: 0/0
 23206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23211 ;;Total ram usage:        0 bytes
 23212 ;; Hardware stack levels used:    1
 23213 ;; Hardware stack levels required when called:    3
 23214 ;; This function calls:
 23215 ;;		i2_lcdInst
 23216 ;;		i2_printf
 23217 ;; This function is called by:
 23218 ;;		_updateMenu
 23219 ;;		_inputHandler
 23220 ;; This function uses a non-reentrant model
 23221 ;;
 23222                           
 23223                           	psect	text77
 23224  005D70                     __ptext77:
 23225                           	opt stack 0
 23226  005D70                     _change_state_to_logs_33:
 23227                           	opt stack 18
 23228                           
 23229                           ;UI.c: 546: cur_state = 1033;
 23230                           
 23231                           ;incstack = 0
 23232  005D70  0E04               	movlw	4
 23233  005D72  0100               	movlb	0	; () banked
 23234  005D74  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23235  005D76  0E09               	movlw	9
 23236  005D78  6FE8               	movwf	_cur_state& (0+255),b
 23237                           
 23238                           ; BSR set to: 0
 23239                           ;UI.c: 547: lcdInst(0b10000000);;
 23240  005D7A  0E80               	movlw	128
 23241  005D7C  EC71  F030         	call	i2_lcdInst
 23242                           
 23243                           ;UI.c: 548: printf("LOG 3          <");
 23244  005D80  0EA0               	movlw	low STR_46
 23245  005D82  6E0D               	movwf	i2printf@f,c
 23246  005D84  0EFD               	movlw	high STR_46
 23247  005D86  6E0E               	movwf	i2printf@f+1,c
 23248  005D88  ECB2  F016         	call	i2_printf	;wreg free
 23249                           
 23250                           ;UI.c: 549: lcdInst(0b11000000);;
 23251  005D8C  0EC0               	movlw	192
 23252  005D8E  EC71  F030         	call	i2_lcdInst
 23253                           
 23254                           ;UI.c: 550: printf("LOG 4           ");
 23255  005D92  0E07               	movlw	low STR_48
 23256  005D94  6E0D               	movwf	i2printf@f,c
 23257  005D96  0EFD               	movlw	high STR_48
 23258  005D98  6E0E               	movwf	i2printf@f+1,c
 23259  005D9A  ECB2  F016         	call	i2_printf	;wreg free
 23260  005D9E  0012               	return		;funcret
 23261  005DA0                     __end_of_change_state_to_logs_33:
 23262                           	opt stack 0
 23263                           pclatu	equ	0xFFB
 23264                           pclath	equ	0xFFA
 23265                           tblptru	equ	0xFF8
 23266                           tblptrh	equ	0xFF7
 23267                           tblptrl	equ	0xFF6
 23268                           tablat	equ	0xFF5
 23269                           prodh	equ	0xFF4
 23270                           prodl	equ	0xFF3
 23271                           intcon	equ	0xFF2
 23272                           intcon2	equ	0xFF1
 23273                           intcon3	equ	0xFF0
 23274                           indf0	equ	0xFEF
 23275                           postinc0	equ	0xFEE
 23276                           fsr0h	equ	0xFEA
 23277                           fsr0l	equ	0xFE9
 23278                           wreg	equ	0xFE8
 23279                           postdec1	equ	0xFE5
 23280                           fsr1h	equ	0xFE2
 23281                           fsr1l	equ	0xFE1
 23282                           indf2	equ	0xFDF
 23283                           postinc2	equ	0xFDE
 23284                           postdec2	equ	0xFDD
 23285                           fsr2h	equ	0xFDA
 23286                           fsr2l	equ	0xFD9
 23287                           status	equ	0xFD8
 23288                           
 23289 ;; *************** function _change_state_to_logs_23 *****************
 23290 ;; Defined at:
 23291 ;;		line 538 in file "UI.c"
 23292 ;; Parameters:    Size  Location     Type
 23293 ;;		None
 23294 ;; Auto vars:     Size  Location     Type
 23295 ;;		None
 23296 ;; Return value:  Size  Location     Type
 23297 ;;                  1    wreg      void 
 23298 ;; Registers used:
 23299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23300 ;; Tracked objects:
 23301 ;;		On entry : 0/0
 23302 ;;		On exit  : 0/0
 23303 ;;		Unchanged: 0/0
 23304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23309 ;;Total ram usage:        0 bytes
 23310 ;; Hardware stack levels used:    1
 23311 ;; Hardware stack levels required when called:    3
 23312 ;; This function calls:
 23313 ;;		i2_lcdInst
 23314 ;;		i2_printf
 23315 ;; This function is called by:
 23316 ;;		_updateMenu
 23317 ;;		_inputHandler
 23318 ;; This function uses a non-reentrant model
 23319 ;;
 23320                           
 23321                           	psect	text78
 23322  005E5E                     __ptext78:
 23323                           	opt stack 0
 23324  005E5E                     _change_state_to_logs_23:
 23325                           	opt stack 18
 23326                           
 23327                           ;UI.c: 539: cur_state = 1023;
 23328                           
 23329                           ;incstack = 0
 23330  005E5E  0E03               	movlw	3
 23331  005E60  0100               	movlb	0	; () banked
 23332  005E62  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23333  005E64  69E8               	setf	_cur_state& (0+255),b
 23334                           
 23335                           ; BSR set to: 0
 23336                           ;UI.c: 540: lcdInst(0b10000000);;
 23337  005E66  0E80               	movlw	128
 23338  005E68  EC71  F030         	call	i2_lcdInst
 23339                           
 23340                           ;UI.c: 541: printf("LOG 2           ");
 23341  005E6C  0EE5               	movlw	low STR_40
 23342  005E6E  6E0D               	movwf	i2printf@f,c
 23343  005E70  0EFC               	movlw	high STR_40
 23344  005E72  6E0E               	movwf	i2printf@f+1,c
 23345  005E74  ECB2  F016         	call	i2_printf	;wreg free
 23346                           
 23347                           ;UI.c: 542: lcdInst(0b11000000);;
 23348  005E78  0EC0               	movlw	192
 23349  005E7A  EC71  F030         	call	i2_lcdInst
 23350                           
 23351                           ;UI.c: 543: printf("LOG 3          <");
 23352  005E7E  0EA0               	movlw	low STR_46
 23353  005E80  6E0D               	movwf	i2printf@f,c
 23354  005E82  0EFD               	movlw	high STR_46
 23355  005E84  6E0E               	movwf	i2printf@f+1,c
 23356  005E86  ECB2  F016         	call	i2_printf	;wreg free
 23357  005E8A  0012               	return		;funcret
 23358  005E8C                     __end_of_change_state_to_logs_23:
 23359                           	opt stack 0
 23360                           pclatu	equ	0xFFB
 23361                           pclath	equ	0xFFA
 23362                           tblptru	equ	0xFF8
 23363                           tblptrh	equ	0xFF7
 23364                           tblptrl	equ	0xFF6
 23365                           tablat	equ	0xFF5
 23366                           prodh	equ	0xFF4
 23367                           prodl	equ	0xFF3
 23368                           intcon	equ	0xFF2
 23369                           intcon2	equ	0xFF1
 23370                           intcon3	equ	0xFF0
 23371                           indf0	equ	0xFEF
 23372                           postinc0	equ	0xFEE
 23373                           fsr0h	equ	0xFEA
 23374                           fsr0l	equ	0xFE9
 23375                           wreg	equ	0xFE8
 23376                           postdec1	equ	0xFE5
 23377                           fsr1h	equ	0xFE2
 23378                           fsr1l	equ	0xFE1
 23379                           indf2	equ	0xFDF
 23380                           postinc2	equ	0xFDE
 23381                           postdec2	equ	0xFDD
 23382                           fsr2h	equ	0xFDA
 23383                           fsr2l	equ	0xFD9
 23384                           status	equ	0xFD8
 23385                           
 23386 ;; *************** function _change_state_to_logs_22 *****************
 23387 ;; Defined at:
 23388 ;;		line 531 in file "UI.c"
 23389 ;; Parameters:    Size  Location     Type
 23390 ;;		None
 23391 ;; Auto vars:     Size  Location     Type
 23392 ;;		None
 23393 ;; Return value:  Size  Location     Type
 23394 ;;                  1    wreg      void 
 23395 ;; Registers used:
 23396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23397 ;; Tracked objects:
 23398 ;;		On entry : 0/0
 23399 ;;		On exit  : 0/0
 23400 ;;		Unchanged: 0/0
 23401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23406 ;;Total ram usage:        0 bytes
 23407 ;; Hardware stack levels used:    1
 23408 ;; Hardware stack levels required when called:    3
 23409 ;; This function calls:
 23410 ;;		i2_lcdInst
 23411 ;;		i2_printf
 23412 ;; This function is called by:
 23413 ;;		_updateMenu
 23414 ;;		_inputHandler
 23415 ;; This function uses a non-reentrant model
 23416 ;;
 23417                           
 23418                           	psect	text79
 23419  005DA0                     __ptext79:
 23420                           	opt stack 0
 23421  005DA0                     _change_state_to_logs_22:
 23422                           	opt stack 18
 23423                           
 23424                           ;UI.c: 532: cur_state = 1022;
 23425                           
 23426                           ;incstack = 0
 23427  005DA0  0E03               	movlw	3
 23428  005DA2  0100               	movlb	0	; () banked
 23429  005DA4  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23430  005DA6  0EFE               	movlw	254
 23431  005DA8  6FE8               	movwf	_cur_state& (0+255),b
 23432                           
 23433                           ; BSR set to: 0
 23434                           ;UI.c: 533: lcdInst(0b10000000);;
 23435  005DAA  0E80               	movlw	128
 23436  005DAC  EC71  F030         	call	i2_lcdInst
 23437                           
 23438                           ;UI.c: 534: printf("LOG 2          <");
 23439  005DB0  0E8F               	movlw	low STR_42
 23440  005DB2  6E0D               	movwf	i2printf@f,c
 23441  005DB4  0EFD               	movlw	high STR_42
 23442  005DB6  6E0E               	movwf	i2printf@f+1,c
 23443  005DB8  ECB2  F016         	call	i2_printf	;wreg free
 23444                           
 23445                           ;UI.c: 535: lcdInst(0b11000000);;
 23446  005DBC  0EC0               	movlw	192
 23447  005DBE  EC71  F030         	call	i2_lcdInst
 23448                           
 23449                           ;UI.c: 536: printf("LOG 3           ");
 23450  005DC2  0EF6               	movlw	low STR_44
 23451  005DC4  6E0D               	movwf	i2printf@f,c
 23452  005DC6  0EFC               	movlw	high STR_44
 23453  005DC8  6E0E               	movwf	i2printf@f+1,c
 23454  005DCA  ECB2  F016         	call	i2_printf	;wreg free
 23455  005DCE  0012               	return		;funcret
 23456  005DD0                     __end_of_change_state_to_logs_22:
 23457                           	opt stack 0
 23458                           pclatu	equ	0xFFB
 23459                           pclath	equ	0xFFA
 23460                           tblptru	equ	0xFF8
 23461                           tblptrh	equ	0xFF7
 23462                           tblptrl	equ	0xFF6
 23463                           tablat	equ	0xFF5
 23464                           prodh	equ	0xFF4
 23465                           prodl	equ	0xFF3
 23466                           intcon	equ	0xFF2
 23467                           intcon2	equ	0xFF1
 23468                           intcon3	equ	0xFF0
 23469                           indf0	equ	0xFEF
 23470                           postinc0	equ	0xFEE
 23471                           fsr0h	equ	0xFEA
 23472                           fsr0l	equ	0xFE9
 23473                           wreg	equ	0xFE8
 23474                           postdec1	equ	0xFE5
 23475                           fsr1h	equ	0xFE2
 23476                           fsr1l	equ	0xFE1
 23477                           indf2	equ	0xFDF
 23478                           postinc2	equ	0xFDE
 23479                           postdec2	equ	0xFDD
 23480                           fsr2h	equ	0xFDA
 23481                           fsr2l	equ	0xFD9
 23482                           status	equ	0xFD8
 23483                           
 23484 ;; *************** function _change_state_to_logs_12 *****************
 23485 ;; Defined at:
 23486 ;;		line 524 in file "UI.c"
 23487 ;; Parameters:    Size  Location     Type
 23488 ;;		None
 23489 ;; Auto vars:     Size  Location     Type
 23490 ;;		None
 23491 ;; Return value:  Size  Location     Type
 23492 ;;                  1    wreg      void 
 23493 ;; Registers used:
 23494 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23495 ;; Tracked objects:
 23496 ;;		On entry : 0/0
 23497 ;;		On exit  : 0/0
 23498 ;;		Unchanged: 0/0
 23499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23504 ;;Total ram usage:        0 bytes
 23505 ;; Hardware stack levels used:    1
 23506 ;; Hardware stack levels required when called:    3
 23507 ;; This function calls:
 23508 ;;		i2_lcdInst
 23509 ;;		i2_printf
 23510 ;; This function is called by:
 23511 ;;		_updateMenu
 23512 ;;		_inputHandler
 23513 ;; This function uses a non-reentrant model
 23514 ;;
 23515                           
 23516                           	psect	text80
 23517  005DD0                     __ptext80:
 23518                           	opt stack 0
 23519  005DD0                     _change_state_to_logs_12:
 23520                           	opt stack 18
 23521                           
 23522                           ;UI.c: 525: cur_state = 1012;
 23523                           
 23524                           ;incstack = 0
 23525  005DD0  0E03               	movlw	3
 23526  005DD2  0100               	movlb	0	; () banked
 23527  005DD4  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23528  005DD6  0EF4               	movlw	244
 23529  005DD8  6FE8               	movwf	_cur_state& (0+255),b
 23530                           
 23531                           ; BSR set to: 0
 23532                           ;UI.c: 526: lcdInst(0b10000000);;
 23533  005DDA  0E80               	movlw	128
 23534  005DDC  EC71  F030         	call	i2_lcdInst
 23535                           
 23536                           ;UI.c: 527: printf("LOG 1           ");
 23537  005DE0  0ED4               	movlw	low STR_41
 23538  005DE2  6E0D               	movwf	i2printf@f,c
 23539  005DE4  0EFC               	movlw	high STR_41
 23540  005DE6  6E0E               	movwf	i2printf@f+1,c
 23541  005DE8  ECB2  F016         	call	i2_printf	;wreg free
 23542                           
 23543                           ;UI.c: 528: lcdInst(0b11000000);;
 23544  005DEC  0EC0               	movlw	192
 23545  005DEE  EC71  F030         	call	i2_lcdInst
 23546                           
 23547                           ;UI.c: 529: printf("LOG 2          <");
 23548  005DF2  0E8F               	movlw	low STR_42
 23549  005DF4  6E0D               	movwf	i2printf@f,c
 23550  005DF6  0EFD               	movlw	high STR_42
 23551  005DF8  6E0E               	movwf	i2printf@f+1,c
 23552  005DFA  ECB2  F016         	call	i2_printf	;wreg free
 23553  005DFE  0012               	return		;funcret
 23554  005E00                     __end_of_change_state_to_logs_12:
 23555                           	opt stack 0
 23556                           pclatu	equ	0xFFB
 23557                           pclath	equ	0xFFA
 23558                           tblptru	equ	0xFF8
 23559                           tblptrh	equ	0xFF7
 23560                           tblptrl	equ	0xFF6
 23561                           tablat	equ	0xFF5
 23562                           prodh	equ	0xFF4
 23563                           prodl	equ	0xFF3
 23564                           intcon	equ	0xFF2
 23565                           intcon2	equ	0xFF1
 23566                           intcon3	equ	0xFF0
 23567                           indf0	equ	0xFEF
 23568                           postinc0	equ	0xFEE
 23569                           fsr0h	equ	0xFEA
 23570                           fsr0l	equ	0xFE9
 23571                           wreg	equ	0xFE8
 23572                           postdec1	equ	0xFE5
 23573                           fsr1h	equ	0xFE2
 23574                           fsr1l	equ	0xFE1
 23575                           indf2	equ	0xFDF
 23576                           postinc2	equ	0xFDE
 23577                           postdec2	equ	0xFDD
 23578                           fsr2h	equ	0xFDA
 23579                           fsr2l	equ	0xFD9
 23580                           status	equ	0xFD8
 23581                           
 23582 ;; *************** function _change_state_to_logs_11 *****************
 23583 ;; Defined at:
 23584 ;;		line 517 in file "UI.c"
 23585 ;; Parameters:    Size  Location     Type
 23586 ;;		None
 23587 ;; Auto vars:     Size  Location     Type
 23588 ;;		None
 23589 ;; Return value:  Size  Location     Type
 23590 ;;                  1    wreg      void 
 23591 ;; Registers used:
 23592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23593 ;; Tracked objects:
 23594 ;;		On entry : 0/0
 23595 ;;		On exit  : 0/0
 23596 ;;		Unchanged: 0/0
 23597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23602 ;;Total ram usage:        0 bytes
 23603 ;; Hardware stack levels used:    1
 23604 ;; Hardware stack levels required when called:    3
 23605 ;; This function calls:
 23606 ;;		i2_lcdInst
 23607 ;;		i2_printf
 23608 ;; This function is called by:
 23609 ;;		_updateMenu
 23610 ;;		_inputHandler
 23611 ;; This function uses a non-reentrant model
 23612 ;;
 23613                           
 23614                           	psect	text81
 23615  005E00                     __ptext81:
 23616                           	opt stack 0
 23617  005E00                     _change_state_to_logs_11:
 23618                           	opt stack 18
 23619                           
 23620                           ;UI.c: 518: cur_state = 1011;
 23621                           
 23622                           ;incstack = 0
 23623  005E00  0E03               	movlw	3
 23624  005E02  0100               	movlb	0	; () banked
 23625  005E04  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23626  005E06  0EF3               	movlw	243
 23627  005E08  6FE8               	movwf	_cur_state& (0+255),b
 23628                           
 23629                           ; BSR set to: 0
 23630                           ;UI.c: 519: lcdInst(0b10000000);;
 23631  005E0A  0E80               	movlw	128
 23632  005E0C  EC71  F030         	call	i2_lcdInst
 23633                           
 23634                           ;UI.c: 520: printf("LOG 1          <");
 23635  005E10  0E7E               	movlw	low STR_39
 23636  005E12  6E0D               	movwf	i2printf@f,c
 23637  005E14  0EFD               	movlw	high STR_39
 23638  005E16  6E0E               	movwf	i2printf@f+1,c
 23639  005E18  ECB2  F016         	call	i2_printf	;wreg free
 23640                           
 23641                           ;UI.c: 521: lcdInst(0b11000000);;
 23642  005E1C  0EC0               	movlw	192
 23643  005E1E  EC71  F030         	call	i2_lcdInst
 23644                           
 23645                           ;UI.c: 522: printf("LOG 2           ");
 23646  005E22  0EE5               	movlw	low STR_40
 23647  005E24  6E0D               	movwf	i2printf@f,c
 23648  005E26  0EFC               	movlw	high STR_40
 23649  005E28  6E0E               	movwf	i2printf@f+1,c
 23650  005E2A  ECB2  F016         	call	i2_printf	;wreg free
 23651  005E2E  0012               	return		;funcret
 23652  005E30                     __end_of_change_state_to_logs_11:
 23653                           	opt stack 0
 23654                           pclatu	equ	0xFFB
 23655                           pclath	equ	0xFFA
 23656                           tblptru	equ	0xFF8
 23657                           tblptrh	equ	0xFF7
 23658                           tblptrl	equ	0xFF6
 23659                           tablat	equ	0xFF5
 23660                           prodh	equ	0xFF4
 23661                           prodl	equ	0xFF3
 23662                           intcon	equ	0xFF2
 23663                           intcon2	equ	0xFF1
 23664                           intcon3	equ	0xFF0
 23665                           indf0	equ	0xFEF
 23666                           postinc0	equ	0xFEE
 23667                           fsr0h	equ	0xFEA
 23668                           fsr0l	equ	0xFE9
 23669                           wreg	equ	0xFE8
 23670                           postdec1	equ	0xFE5
 23671                           fsr1h	equ	0xFE2
 23672                           fsr1l	equ	0xFE1
 23673                           indf2	equ	0xFDF
 23674                           postinc2	equ	0xFDE
 23675                           postdec2	equ	0xFDD
 23676                           fsr2h	equ	0xFDA
 23677                           fsr2l	equ	0xFD9
 23678                           status	equ	0xFD8
 23679                           
 23680 ;; *************** function _dispLogs *****************
 23681 ;; Defined at:
 23682 ;;		line 470 in file "UI.c"
 23683 ;; Parameters:    Size  Location     Type
 23684 ;;  myLog           2   17[COMRAM] int 
 23685 ;; Auto vars:     Size  Location     Type
 23686 ;;		None
 23687 ;; Return value:  Size  Location     Type
 23688 ;;                  1    wreg      void 
 23689 ;; Registers used:
 23690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23691 ;; Tracked objects:
 23692 ;;		On entry : 0/0
 23693 ;;		On exit  : 0/0
 23694 ;;		Unchanged: 0/0
 23695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23700 ;;Total ram usage:        2 bytes
 23701 ;; Hardware stack levels used:    1
 23702 ;; Hardware stack levels required when called:    2
 23703 ;; This function calls:
 23704 ;;		_retrieveLog
 23705 ;; This function is called by:
 23706 ;;		_updateMenu
 23707 ;; This function uses a non-reentrant model
 23708 ;;
 23709                           
 23710                           	psect	text82
 23711  005FAA                     __ptext82:
 23712                           	opt stack 0
 23713  005FAA                     _dispLogs:
 23714                           	opt stack 20
 23715                           
 23716                           ;UI.c: 471: logstate = 1;
 23717                           
 23718                           ;incstack = 0
 23719  005FAA  0E00               	movlw	0
 23720  005FAC  0100               	movlb	0	; () banked
 23721  005FAE  6FF9               	movwf	(_logstate+1)& (0+255),b
 23722  005FB0  0E01               	movlw	1
 23723  005FB2  6FF8               	movwf	_logstate& (0+255),b
 23724                           
 23725                           ; BSR set to: 0
 23726                           ;UI.c: 472: log = myLog;
 23727  005FB4  C012  F0F0         	movff	dispLogs@myLog,_log
 23728  005FB8  C013  F0F1         	movff	dispLogs@myLog+1,_log+1
 23729                           
 23730                           ; BSR set to: 0
 23731                           ;UI.c: 473: retrieveLog(myLog - 1);
 23732  005FBC  0EFF               	movlw	255
 23733  005FBE  2412               	addwf	dispLogs@myLog,w,c
 23734  005FC0  6E07               	movwf	retrieveLog@logNum,c
 23735  005FC2  0EFF               	movlw	255
 23736  005FC4  2013               	addwfc	dispLogs@myLog+1,w,c
 23737  005FC6  6E08               	movwf	retrieveLog@logNum+1,c
 23738  005FC8  EC1F  F022         	call	_retrieveLog	;wreg free
 23739  005FCC  0012               	return		;funcret
 23740  005FCE                     __end_of_dispLogs:
 23741                           	opt stack 0
 23742                           pclatu	equ	0xFFB
 23743                           pclath	equ	0xFFA
 23744                           tblptru	equ	0xFF8
 23745                           tblptrh	equ	0xFF7
 23746                           tblptrl	equ	0xFF6
 23747                           tablat	equ	0xFF5
 23748                           prodh	equ	0xFF4
 23749                           prodl	equ	0xFF3
 23750                           intcon	equ	0xFF2
 23751                           intcon2	equ	0xFF1
 23752                           intcon3	equ	0xFF0
 23753                           indf0	equ	0xFEF
 23754                           postinc0	equ	0xFEE
 23755                           fsr0h	equ	0xFEA
 23756                           fsr0l	equ	0xFE9
 23757                           wreg	equ	0xFE8
 23758                           postdec1	equ	0xFE5
 23759                           fsr1h	equ	0xFE2
 23760                           fsr1l	equ	0xFE1
 23761                           indf2	equ	0xFDF
 23762                           postinc2	equ	0xFDE
 23763                           postdec2	equ	0xFDD
 23764                           fsr2h	equ	0xFDA
 23765                           fsr2l	equ	0xFD9
 23766                           status	equ	0xFD8
 23767                           
 23768 ;; *************** function _retrieveLog *****************
 23769 ;; Defined at:
 23770 ;;		line 138 in file "EEPROM.c"
 23771 ;; Parameters:    Size  Location     Type
 23772 ;;  logNum          2    6[COMRAM] int 
 23773 ;; Auto vars:     Size  Location     Type
 23774 ;;  i               2   13[COMRAM] int 
 23775 ;;  addr            2   15[COMRAM] unsigned short 
 23776 ;;  byte3           1   12[COMRAM] unsigned char 
 23777 ;;  byte2           1   11[COMRAM] unsigned char 
 23778 ;;  byte1           1   10[COMRAM] unsigned char 
 23779 ;; Return value:  Size  Location     Type
 23780 ;;                  1    wreg      void 
 23781 ;; Registers used:
 23782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23783 ;; Tracked objects:
 23784 ;;		On entry : 0/0
 23785 ;;		On exit  : 0/0
 23786 ;;		Unchanged: 0/0
 23787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23789 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23790 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23791 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23792 ;;Total ram usage:       11 bytes
 23793 ;; Hardware stack levels used:    1
 23794 ;; Hardware stack levels required when called:    1
 23795 ;; This function calls:
 23796 ;;		i2_EEPROM_read
 23797 ;;		i2___wmul
 23798 ;; This function is called by:
 23799 ;;		_dispLogs
 23800 ;; This function uses a non-reentrant model
 23801 ;;
 23802                           
 23803                           	psect	text83
 23804  00443E                     __ptext83:
 23805                           	opt stack 0
 23806  00443E                     _retrieveLog:
 23807                           	opt stack 20
 23808                           
 23809                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23810                           
 23811                           ;incstack = 0
 23812  00443E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23813  004442  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23814  004446  0E00               	movlw	0
 23815  004448  6E04               	movwf	i2___wmul@multiplicand+1,c
 23816  00444A  0E0B               	movlw	11
 23817  00444C  6E03               	movwf	i2___wmul@multiplicand,c
 23818  00444E  ECAF  F02F         	call	i2___wmul	;wreg free
 23819  004452  0E01               	movlw	1
 23820  004454  2401               	addwf	?i2___wmul,w,c
 23821  004456  6E10               	movwf	retrieveLog@addr,c
 23822  004458  0E00               	movlw	0
 23823  00445A  2002               	addwfc	?i2___wmul+1,w,c
 23824  00445C  6E11               	movwf	retrieveLog@addr+1,c
 23825                           
 23826                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23827  00445E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23828  004462  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23829  004466  EC3D  F030         	call	i2_EEPROM_read	;wreg free
 23830  00446A  6E0B               	movwf	retrieveLog@byte1,c
 23831                           
 23832                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23833  00446C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23834  004470  0E80               	movlw	128
 23835  004472  1609               	andwf	??_retrieveLog,f,c
 23836  004474  5009               	movf	??_retrieveLog,w,c
 23837  004476  0100               	movlb	0	; () banked
 23838  004478  6FF2               	movwf	_log_completion& (0+255),b
 23839  00447A  6BF3               	clrf	(_log_completion+1)& (0+255),b
 23840                           
 23841                           ; BSR set to: 0
 23842                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23843  00447C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23844  004480  0E0F               	movlw	15
 23845  004482  1609               	andwf	??_retrieveLog,f,c
 23846  004484  5009               	movf	??_retrieveLog,w,c
 23847  004486  0101               	movlb	1	; () banked
 23848  004488  6F45               	movwf	_log_count_total& (0+255),b
 23849  00448A  6B46               	clrf	(_log_count_total+1)& (0+255),b
 23850                           
 23851                           ; BSR set to: 1
 23852                           ;EEPROM.c: 150: addr++;
 23853  00448C  4A10               	infsnz	retrieveLog@addr,f,c
 23854  00448E  2A11               	incf	retrieveLog@addr+1,f,c
 23855                           
 23856                           ; BSR set to: 1
 23857                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23858  004490  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23859  004494  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23860  004498  EC3D  F030         	call	i2_EEPROM_read	;wreg free
 23861  00449C  6E0C               	movwf	retrieveLog@byte2,c
 23862                           
 23863                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23864  00449E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23865  0044A2  3A09               	swapf	??_retrieveLog,f,c
 23866  0044A4  0E0F               	movlw	15
 23867  0044A6  1609               	andwf	??_retrieveLog,f,c
 23868  0044A8  0E0F               	movlw	15
 23869  0044AA  1609               	andwf	??_retrieveLog,f,c
 23870  0044AC  5009               	movf	??_retrieveLog,w,c
 23871  0044AE  0100               	movlb	0	; () banked
 23872  0044B0  6FF4               	movwf	_log_count_pop_no_tab& (0+255),b
 23873  0044B2  6BF5               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23874                           
 23875                           ; BSR set to: 0
 23876                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23877  0044B4  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23878  0044B8  0E0F               	movlw	15
 23879  0044BA  1609               	andwf	??_retrieveLog,f,c
 23880  0044BC  5009               	movf	??_retrieveLog,w,c
 23881  0044BE  0101               	movlb	1	; () banked
 23882  0044C0  6F43               	movwf	_log_count_pop_w_tab& (0+255),b
 23883  0044C2  6B44               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23884                           
 23885                           ; BSR set to: 1
 23886                           ;EEPROM.c: 156: addr++;
 23887  0044C4  4A10               	infsnz	retrieveLog@addr,f,c
 23888  0044C6  2A11               	incf	retrieveLog@addr+1,f,c
 23889                           
 23890                           ; BSR set to: 1
 23891                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23892  0044C8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23893  0044CC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23894  0044D0  EC3D  F030         	call	i2_EEPROM_read	;wreg free
 23895  0044D4  6E0D               	movwf	retrieveLog@byte3,c
 23896                           
 23897                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23898  0044D6  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23899  0044DA  3A09               	swapf	??_retrieveLog,f,c
 23900  0044DC  0E0F               	movlw	15
 23901  0044DE  1609               	andwf	??_retrieveLog,f,c
 23902  0044E0  0E0F               	movlw	15
 23903  0044E2  1609               	andwf	??_retrieveLog,f,c
 23904  0044E4  5009               	movf	??_retrieveLog,w,c
 23905  0044E6  0101               	movlb	1	; () banked
 23906  0044E8  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 23907  0044EA  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23908                           
 23909                           ; BSR set to: 1
 23910                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23911  0044EC  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23912  0044F0  0E0F               	movlw	15
 23913  0044F2  1609               	andwf	??_retrieveLog,f,c
 23914  0044F4  5009               	movf	??_retrieveLog,w,c
 23915  0044F6  0101               	movlb	1	; () banked
 23916  0044F8  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 23917  0044FA  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23918                           
 23919                           ; BSR set to: 1
 23920                           ;EEPROM.c: 160: addr++;
 23921  0044FC  4A10               	infsnz	retrieveLog@addr,f,c
 23922  0044FE  2A11               	incf	retrieveLog@addr+1,f,c
 23923                           
 23924                           ; BSR set to: 1
 23925                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23926  004500  0E00               	movlw	0
 23927  004502  6E0F               	movwf	retrieveLog@i+1,c
 23928  004504  0E00               	movlw	0
 23929  004506  6E0E               	movwf	retrieveLog@i,c
 23930  004508                     i2l7574:
 23931                           
 23932                           ; BSR set to: 1
 23933  004508  BE0F               	btfsc	retrieveLog@i+1,7,c
 23934  00450A  D006               	goto	i2l7578
 23935  00450C  500F               	movf	retrieveLog@i+1,w,c
 23936  00450E  E11E               	bnz	i2l7586
 23937  004510  0E07               	movlw	7
 23938  004512  5C0E               	subwf	retrieveLog@i,w,c
 23939  004514  B0D8               	btfsc	status,0,c
 23940  004516  D01A               	goto	i2l7586
 23941  004518                     i2l7578:
 23942                           
 23943                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23944  004518  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23945  00451C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23946  004520  EC3D  F030         	call	i2_EEPROM_read	;wreg free
 23947  004524  6E09               	movwf	??_retrieveLog& (0+255),c
 23948  004526  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23949  004528  90D8               	bcf	status,0,c
 23950  00452A  340E               	rlcf	retrieveLog@i,w,c
 23951  00452C  6ED9               	movwf	fsr2l,c
 23952  00452E  340F               	rlcf	retrieveLog@i+1,w,c
 23953  004530  6EDA               	movwf	fsr2h,c
 23954  004532  0E00               	movlw	low _log_startTime
 23955  004534  26D9               	addwf	fsr2l,f,c
 23956  004536  0E01               	movlw	high _log_startTime
 23957  004538  22DA               	addwfc	fsr2h,f,c
 23958  00453A  C009  FFDE         	movff	??_retrieveLog,postinc2
 23959  00453E  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23960                           
 23961                           ;EEPROM.c: 165: addr++;
 23962  004542  4A10               	infsnz	retrieveLog@addr,f,c
 23963  004544  2A11               	incf	retrieveLog@addr+1,f,c
 23964  004546  4A0E               	infsnz	retrieveLog@i,f,c
 23965  004548  2A0F               	incf	retrieveLog@i+1,f,c
 23966  00454A  D7DE               	goto	i2l7574
 23967  00454C                     i2l7586:
 23968                           
 23969                           ;EEPROM.c: 166: }
 23970                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23971  00454C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23972  004550  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23973  004554  EC3D  F030         	call	i2_EEPROM_read	;wreg free
 23974  004558  6E09               	movwf	??_retrieveLog& (0+255),c
 23975  00455A  5009               	movf	??_retrieveLog,w,c
 23976  00455C  0100               	movlb	0	; () banked
 23977  00455E  6FF6               	movwf	_log_total_time& (0+255),b
 23978  004560  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23979                           
 23980                           ; BSR set to: 0
 23981  004562  0012               	return		;funcret
 23982  004564                     __end_of_retrieveLog:
 23983                           	opt stack 0
 23984                           pclatu	equ	0xFFB
 23985                           pclath	equ	0xFFA
 23986                           tblptru	equ	0xFF8
 23987                           tblptrh	equ	0xFF7
 23988                           tblptrl	equ	0xFF6
 23989                           tablat	equ	0xFF5
 23990                           prodh	equ	0xFF4
 23991                           prodl	equ	0xFF3
 23992                           intcon	equ	0xFF2
 23993                           intcon2	equ	0xFF1
 23994                           intcon3	equ	0xFF0
 23995                           indf0	equ	0xFEF
 23996                           postinc0	equ	0xFEE
 23997                           fsr0h	equ	0xFEA
 23998                           fsr0l	equ	0xFE9
 23999                           wreg	equ	0xFE8
 24000                           postdec1	equ	0xFE5
 24001                           fsr1h	equ	0xFE2
 24002                           fsr1l	equ	0xFE1
 24003                           indf2	equ	0xFDF
 24004                           postinc2	equ	0xFDE
 24005                           postdec2	equ	0xFDD
 24006                           fsr2h	equ	0xFDA
 24007                           fsr2l	equ	0xFD9
 24008                           status	equ	0xFD8
 24009                           
 24010 ;; *************** function i2_EEPROM_read *****************
 24011 ;; Defined at:
 24012 ;;		line 72 in file "EEPROM.c"
 24013 ;; Parameters:    Size  Location     Type
 24014 ;;  address         2    0[COMRAM] unsigned short 
 24015 ;; Auto vars:     Size  Location     Type
 24016 ;;		None
 24017 ;; Return value:  Size  Location     Type
 24018 ;;                  1    wreg      unsigned char 
 24019 ;; Registers used:
 24020 ;;		wreg, status,2
 24021 ;; Tracked objects:
 24022 ;;		On entry : 0/0
 24023 ;;		On exit  : 0/0
 24024 ;;		Unchanged: 0/0
 24025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24029 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24030 ;;Total ram usage:        2 bytes
 24031 ;; Hardware stack levels used:    1
 24032 ;; This function calls:
 24033 ;;		Nothing
 24034 ;; This function is called by:
 24035 ;;		_retrieveLog
 24036 ;; This function uses a non-reentrant model
 24037 ;;
 24038                           
 24039                           	psect	text84
 24040  00607A                     __ptext84:
 24041                           	opt stack 0
 24042  00607A                     i2_EEPROM_read:
 24043                           	opt stack 20
 24044                           
 24045                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 24046                           
 24047                           ; BSR set to: 0
 24048                           ;incstack = 0
 24049  00607A  5002               	movf	i2EEPROM_read@address+1,w,c
 24050  00607C  6EAA               	movwf	4010,c	;volatile
 24051                           
 24052                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 24053  00607E  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 24054                           
 24055                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 24056  006082  9EA6               	bcf	4006,7,c	;volatile
 24057                           
 24058                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 24059  006084  9CA6               	bcf	4006,6,c	;volatile
 24060                           
 24061                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 24062  006086  80A6               	bsf	4006,0,c	;volatile
 24063  006088                     i2l1178:
 24064  006088  B0A6               	btfsc	4006,0,c	;volatile
 24065  00608A  D7FE               	goto	i2l1178
 24066                           
 24067                           ;EEPROM.c: 85: return EEDATA;
 24068  00608C  50A8               	movf	4008,w,c	;volatile
 24069  00608E  0012               	return	
 24070  006090                     __end_ofi2_EEPROM_read:
 24071                           	opt stack 0
 24072                           pclatu	equ	0xFFB
 24073                           pclath	equ	0xFFA
 24074                           tblptru	equ	0xFF8
 24075                           tblptrh	equ	0xFF7
 24076                           tblptrl	equ	0xFF6
 24077                           tablat	equ	0xFF5
 24078                           prodh	equ	0xFF4
 24079                           prodl	equ	0xFF3
 24080                           intcon	equ	0xFF2
 24081                           intcon2	equ	0xFF1
 24082                           intcon3	equ	0xFF0
 24083                           indf0	equ	0xFEF
 24084                           postinc0	equ	0xFEE
 24085                           fsr0h	equ	0xFEA
 24086                           fsr0l	equ	0xFE9
 24087                           wreg	equ	0xFE8
 24088                           postdec1	equ	0xFE5
 24089                           fsr1h	equ	0xFE2
 24090                           fsr1l	equ	0xFE1
 24091                           indf2	equ	0xFDF
 24092                           postinc2	equ	0xFDE
 24093                           postdec2	equ	0xFDD
 24094                           fsr2h	equ	0xFDA
 24095                           fsr2l	equ	0xFD9
 24096                           status	equ	0xFD8
 24097                           
 24098 ;; *************** function _updateArmState *****************
 24099 ;; Defined at:
 24100 ;;		line 739 in file "sort.c"
 24101 ;; Parameters:    Size  Location     Type
 24102 ;;		None
 24103 ;; Auto vars:     Size  Location     Type
 24104 ;;		None
 24105 ;; Return value:  Size  Location     Type
 24106 ;;                  1    wreg      void 
 24107 ;; Registers used:
 24108 ;;		wreg, status,2, status,0
 24109 ;; Tracked objects:
 24110 ;;		On entry : 0/0
 24111 ;;		On exit  : 0/0
 24112 ;;		Unchanged: 0/0
 24113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24116 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24117 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24118 ;;Total ram usage:        2 bytes
 24119 ;; Hardware stack levels used:    1
 24120 ;; This function calls:
 24121 ;;		Nothing
 24122 ;; This function is called by:
 24123 ;;		_handler
 24124 ;; This function uses a non-reentrant model
 24125 ;;
 24126                           
 24127                           	psect	text85
 24128  005AD8                     __ptext85:
 24129                           	opt stack 0
 24130  005AD8                     _updateArmState:
 24131                           	opt stack 23
 24132                           
 24133                           ;sort.c: 746: if(!was_low_2){
 24134                           
 24135                           ;incstack = 0
 24136  005AD8  5079               	movf	_was_low_2,w,c	;volatile
 24137  005ADA  107A               	iorwf	_was_low_2+1,w,c	;volatile
 24138  005ADC  B4D8               	btfsc	status,2,c
 24139  005ADE  D007               	goto	i2l10576
 24140  005AE0  D016               	goto	i2l994
 24141  005AE2                     i2l10570:
 24142                           
 24143                           ;sort.c: 751: PR2 = 0x20;
 24144  005AE2  0E20               	movlw	32
 24145  005AE4  6ECB               	movwf	4043,c	;volatile
 24146                           
 24147                           ;sort.c: 752: break;
 24148  005AE6  0012               	return	
 24149  005AE8                     i2l10572:
 24150                           
 24151                           ;sort.c: 755: PR2 = 0x40;
 24152  005AE8  0E40               	movlw	64
 24153  005AEA  6ECB               	movwf	4043,c	;volatile
 24154                           
 24155                           ;sort.c: 757: }
 24156                           
 24157                           ;sort.c: 756: break;
 24158  005AEC  0012               	return	
 24159  005AEE                     i2l10576:
 24160  005AEE  C0EA  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 24161  005AF2  C0EB  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 24162                           
 24163                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 24164                           ; Switch size 1, requested type "space"
 24165                           ; Number of cases is 1, Range of values is 0 to 0
 24166                           ; switch strategies available:
 24167                           ; Name         Instructions Cycles
 24168                           ; simple_byte            4     3 (average)
 24169                           ;	Chosen strategy is simple_byte
 24170  005AF6  5002               	movf	??_updateArmState+1,w,c
 24171  005AF8  0A00               	xorlw	0	; case 0
 24172  005AFA  A4D8               	btfss	status,2,c
 24173  005AFC  0012               	return	
 24174                           
 24175                           ; Switch size 1, requested type "space"
 24176                           ; Number of cases is 2, Range of values is 0 to 1
 24177                           ; switch strategies available:
 24178                           ; Name         Instructions Cycles
 24179                           ; simple_byte            7     4 (average)
 24180                           ;	Chosen strategy is simple_byte
 24181  005AFE  5001               	movf	??_updateArmState,w,c
 24182  005B00  0A00               	xorlw	0	; case 0
 24183  005B02  B4D8               	btfsc	status,2,c
 24184  005B04  D7EE               	goto	i2l10570
 24185  005B06  0A01               	xorlw	1	; case 1
 24186  005B08  A4D8               	btfss	status,2,c
 24187                           
 24188                           ;sort.c: 758: }
 24189  005B0A  0012               	return	
 24190  005B0C  D7ED               	goto	i2l10572
 24191  005B0E                     i2l994:
 24192                           
 24193                           ;sort.c: 759: else{
 24194                           ;sort.c: 761: PR2 = 0xFF;
 24195  005B0E  68CB               	setf	4043,c	;volatile
 24196  005B10  0012               	return	
 24197  005B12                     __end_of_updateArmState:
 24198                           	opt stack 0
 24199                           pclatu	equ	0xFFB
 24200                           pclath	equ	0xFFA
 24201                           tblptru	equ	0xFF8
 24202                           tblptrh	equ	0xFF7
 24203                           tblptrl	equ	0xFF6
 24204                           tablat	equ	0xFF5
 24205                           prodh	equ	0xFF4
 24206                           prodl	equ	0xFF3
 24207                           intcon	equ	0xFF2
 24208                           intcon2	equ	0xFF1
 24209                           intcon3	equ	0xFF0
 24210                           indf0	equ	0xFEF
 24211                           postinc0	equ	0xFEE
 24212                           fsr0h	equ	0xFEA
 24213                           fsr0l	equ	0xFE9
 24214                           wreg	equ	0xFE8
 24215                           postdec1	equ	0xFE5
 24216                           fsr1h	equ	0xFE2
 24217                           fsr1l	equ	0xFE1
 24218                           indf2	equ	0xFDF
 24219                           postinc2	equ	0xFDE
 24220                           postdec2	equ	0xFDD
 24221                           fsr2h	equ	0xFDA
 24222                           fsr2l	equ	0xFD9
 24223                           status	equ	0xFD8
 24224                           
 24225 ;; *************** function _printSortTimer *****************
 24226 ;; Defined at:
 24227 ;;		line 544 in file "sort.c"
 24228 ;; Parameters:    Size  Location     Type
 24229 ;;		None
 24230 ;; Auto vars:     Size  Location     Type
 24231 ;;  i               2   70[COMRAM] int 
 24232 ;;  curTime        14   44[COMRAM] int [7]
 24233 ;;  timeDiff        2   68[COMRAM] unsigned int 
 24234 ;;  sec             2   64[COMRAM] int 
 24235 ;;  min             2   62[COMRAM] int 
 24236 ;;  cur_sec         2   60[COMRAM] unsigned int 
 24237 ;;  start_sec       2   58[COMRAM] unsigned int 
 24238 ;; Return value:  Size  Location     Type
 24239 ;;                  1    wreg      void 
 24240 ;; Registers used:
 24241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24242 ;; Tracked objects:
 24243 ;;		On entry : 0/0
 24244 ;;		On exit  : 0/0
 24245 ;;		Unchanged: 0/0
 24246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24248 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24249 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24250 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24251 ;;Total ram usage:       31 bytes
 24252 ;; Hardware stack levels used:    1
 24253 ;; Hardware stack levels required when called:    3
 24254 ;; This function calls:
 24255 ;;		i2___awmod
 24256 ;;		i2___lwdiv
 24257 ;;		i2___lwmod
 24258 ;;		i2___wmul
 24259 ;;		i2_getRTC
 24260 ;;		i2_lcdInst
 24261 ;;		i2_printf
 24262 ;; This function is called by:
 24263 ;;		_handler
 24264 ;; This function uses a non-reentrant model
 24265 ;;
 24266                           
 24267                           	psect	text86
 24268  0029DA                     __ptext86:
 24269                           	opt stack 0
 24270  0029DA                     _printSortTimer:
 24271                           	opt stack 20
 24272                           
 24273                           ;sort.c: 545: getRTC();
 24274                           
 24275                           ;incstack = 0
 24276  0029DA  EC9D  F02A         	call	i2_getRTC	;wreg free
 24277                           
 24278                           ;sort.c: 546: int curTime[7];
 24279                           ;sort.c: 547: for(int i = 0; i < 7; i++){
 24280  0029DE  0E00               	movlw	0
 24281  0029E0  6E48               	movwf	printSortTimer@i+1,c
 24282  0029E2  0E00               	movlw	0
 24283  0029E4  6E47               	movwf	printSortTimer@i,c
 24284  0029E6                     i2l10376:
 24285  0029E6  BE48               	btfsc	printSortTimer@i+1,7,c
 24286  0029E8  D006               	goto	i2l10380
 24287  0029EA  5048               	movf	printSortTimer@i+1,w,c
 24288  0029EC  E131               	bnz	i2l10386
 24289  0029EE  0E07               	movlw	7
 24290  0029F0  5C47               	subwf	printSortTimer@i,w,c
 24291  0029F2  B0D8               	btfsc	status,0,c
 24292  0029F4  D02D               	goto	i2l10386
 24293  0029F6                     i2l10380:
 24294                           
 24295                           ;sort.c: 548: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 24296  0029F6  0E24               	movlw	low _time
 24297  0029F8  2447               	addwf	printSortTimer@i,w,c
 24298  0029FA  6ED9               	movwf	fsr2l,c
 24299  0029FC  0E01               	movlw	high _time
 24300  0029FE  2048               	addwfc	printSortTimer@i+1,w,c
 24301  002A00  6EDA               	movwf	fsr2h,c
 24302  002A02  50DF               	movf	indf2,w,c
 24303  002A04  6E2A               	movwf	??_printSortTimer& (0+255),c
 24304  002A06  3A2A               	swapf	??_printSortTimer,f,c
 24305  002A08  0E0F               	movlw	15
 24306  002A0A  162A               	andwf	??_printSortTimer,f,c
 24307  002A0C  0E0F               	movlw	15
 24308  002A0E  162A               	andwf	??_printSortTimer,f,c
 24309  002A10  502A               	movf	??_printSortTimer,w,c
 24310  002A12  0D0A               	mullw	10
 24311  002A14  0E24               	movlw	low _time
 24312  002A16  2447               	addwf	printSortTimer@i,w,c
 24313  002A18  6ED9               	movwf	fsr2l,c
 24314  002A1A  0E01               	movlw	high _time
 24315  002A1C  2048               	addwfc	printSortTimer@i+1,w,c
 24316  002A1E  6EDA               	movwf	fsr2h,c
 24317  002A20  50DF               	movf	indf2,w,c
 24318  002A22  0B0F               	andlw	15
 24319  002A24  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 24320  002A26  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 24321  002A28  50F3               	movf	prodl,w,c
 24322  002A2A  262B               	addwf	??_printSortTimer+1,f,c
 24323  002A2C  50F4               	movf	prodh,w,c
 24324  002A2E  222C               	addwfc	??_printSortTimer+2,f,c
 24325  002A30  90D8               	bcf	status,0,c
 24326  002A32  3447               	rlcf	printSortTimer@i,w,c
 24327  002A34  6ED9               	movwf	fsr2l,c
 24328  002A36  3448               	rlcf	printSortTimer@i+1,w,c
 24329  002A38  6EDA               	movwf	fsr2h,c
 24330  002A3A  0E2D               	movlw	low printSortTimer@curTime
 24331  002A3C  26D9               	addwf	fsr2l,f,c
 24332  002A3E  0E00               	movlw	high printSortTimer@curTime
 24333  002A40  22DA               	addwfc	fsr2h,f,c
 24334  002A42  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 24335  002A46  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 24336  002A4A  4A47               	infsnz	printSortTimer@i,f,c
 24337  002A4C  2A48               	incf	printSortTimer@i+1,f,c
 24338  002A4E  D7CB               	goto	i2l10376
 24339  002A50                     i2l10386:
 24340                           
 24341                           ;sort.c: 549: }
 24342                           ;sort.c: 550: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 24343  002A50  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 24344  002A54  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 24345  002A58  0E00               	movlw	0
 24346  002A5A  6E04               	movwf	i2___wmul@multiplicand+1,c
 24347  002A5C  0E3C               	movlw	60
 24348  002A5E  6E03               	movwf	i2___wmul@multiplicand,c
 24349  002A60  ECAF  F02F         	call	i2___wmul	;wreg free
 24350  002A64  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24351  002A68  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24352  002A6C  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 24353  002A70  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 24354  002A74  0E0E               	movlw	14
 24355  002A76  6E04               	movwf	i2___wmul@multiplicand+1,c
 24356  002A78  0E10               	movlw	16
 24357  002A7A  6E03               	movwf	i2___wmul@multiplicand,c
 24358  002A7C  ECAF  F02F         	call	i2___wmul	;wreg free
 24359  002A80  5001               	movf	?i2___wmul,w,c
 24360  002A82  262A               	addwf	??_printSortTimer,f,c
 24361  002A84  5002               	movf	?i2___wmul+1,w,c
 24362  002A86  222B               	addwfc	??_printSortTimer+1,f,c
 24363  002A88  0101               	movlb	1	; () banked
 24364  002A8A  510E               	movf	_startTime& (0+255),w,b
 24365  002A8C  242A               	addwf	??_printSortTimer,w,c
 24366  002A8E  6E3B               	movwf	printSortTimer@start_sec,c
 24367  002A90  0101               	movlb	1	; () banked
 24368  002A92  510F               	movf	(_startTime+1)& (0+255),w,b
 24369  002A94  202B               	addwfc	??_printSortTimer+1,w,c
 24370  002A96  6E3C               	movwf	printSortTimer@start_sec+1,c
 24371                           
 24372                           ;sort.c: 551: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 24373  002A98  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 24374  002A9C  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 24375  002AA0  0E00               	movlw	0
 24376  002AA2  6E04               	movwf	i2___wmul@multiplicand+1,c
 24377  002AA4  0E3C               	movlw	60
 24378  002AA6  6E03               	movwf	i2___wmul@multiplicand,c
 24379  002AA8  ECAF  F02F         	call	i2___wmul	;wreg free
 24380  002AAC  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24381  002AB0  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24382  002AB4  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 24383  002AB8  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 24384  002ABC  0E0E               	movlw	14
 24385  002ABE  6E04               	movwf	i2___wmul@multiplicand+1,c
 24386  002AC0  0E10               	movlw	16
 24387  002AC2  6E03               	movwf	i2___wmul@multiplicand,c
 24388  002AC4  ECAF  F02F         	call	i2___wmul	;wreg free
 24389  002AC8  5001               	movf	?i2___wmul,w,c
 24390  002ACA  262A               	addwf	??_printSortTimer,f,c
 24391  002ACC  5002               	movf	?i2___wmul+1,w,c
 24392  002ACE  222B               	addwfc	??_printSortTimer+1,f,c
 24393  002AD0  502D               	movf	printSortTimer@curTime,w,c
 24394  002AD2  242A               	addwf	??_printSortTimer,w,c
 24395  002AD4  6E3D               	movwf	printSortTimer@cur_sec,c
 24396  002AD6  502E               	movf	printSortTimer@curTime+1,w,c
 24397  002AD8  202B               	addwfc	??_printSortTimer+1,w,c
 24398  002ADA  6E3E               	movwf	printSortTimer@cur_sec+1,c
 24399                           
 24400                           ;sort.c: 552: unsigned int timeDiff = cur_sec - start_sec;
 24401  002ADC  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 24402  002AE0  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 24403  002AE4  1E2A               	comf	??_printSortTimer,f,c
 24404  002AE6  1E2B               	comf	??_printSortTimer+1,f,c
 24405  002AE8  4A2A               	infsnz	??_printSortTimer,f,c
 24406  002AEA  2A2B               	incf	??_printSortTimer+1,f,c
 24407  002AEC  503D               	movf	printSortTimer@cur_sec,w,c
 24408  002AEE  242A               	addwf	??_printSortTimer,w,c
 24409  002AF0  6E45               	movwf	printSortTimer@timeDiff,c
 24410  002AF2  503E               	movf	printSortTimer@cur_sec+1,w,c
 24411  002AF4  202B               	addwfc	??_printSortTimer+1,w,c
 24412  002AF6  6E46               	movwf	printSortTimer@timeDiff+1,c
 24413                           
 24414                           ;sort.c: 554: total_time = timeDiff;
 24415  002AF8  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 24416  002AFC  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 24417                           
 24418                           ;sort.c: 556: if(f_most_recent_sort_time){
 24419  002B00  0101               	movlb	1	; () banked
 24420  002B02  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 24421  002B04  0101               	movlb	1	; () banked
 24422  002B06  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 24423  002B08  B4D8               	btfsc	status,2,c
 24424  002B0A  D009               	goto	i2l10398
 24425                           
 24426                           ; BSR set to: 1
 24427                           ;sort.c: 557: most_recent_sort_time = total_time;
 24428  002B0C  C0FA  F147         	movff	_total_time,_most_recent_sort_time
 24429  002B10  C0FB  F148         	movff	_total_time+1,_most_recent_sort_time+1
 24430                           
 24431                           ; BSR set to: 1
 24432                           ;sort.c: 558: f_most_recent_sort_time = 0;
 24433  002B14  0E00               	movlw	0
 24434  002B16  0101               	movlb	1	; () banked
 24435  002B18  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 24436  002B1A  0E00               	movlw	0
 24437  002B1C  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 24438  002B1E                     i2l10398:
 24439                           
 24440                           ; BSR set to: 1
 24441                           ;sort.c: 559: }
 24442                           ;sort.c: 562: if(total_time >= 20){
 24443  002B1E  0100               	movlb	0	; () banked
 24444  002B20  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24445  002B22  D036               	goto	i2l933
 24446  002B24  0100               	movlb	0	; () banked
 24447  002B26  51FB               	movf	(_total_time+1)& (0+255),w,b
 24448  002B28  E105               	bnz	i2u1041_40
 24449  002B2A  0E14               	movlw	20
 24450  002B2C  0100               	movlb	0	; () banked
 24451  002B2E  5DFA               	subwf	_total_time& (0+255),w,b
 24452  002B30  A0D8               	btfss	status,0,c
 24453  002B32  D02E               	goto	i2l933
 24454  002B34                     i2u1041_40:
 24455                           
 24456                           ; BSR set to: 0
 24457                           ;sort.c: 563: if(LATBbits.LATB2 == 0){
 24458  002B34  B48A               	btfsc	3978,2,c	;volatile
 24459  002B36  D011               	goto	i2l10410
 24460                           
 24461                           ; BSR set to: 0
 24462                           ;sort.c: 564: motor_toggle_count++;
 24463  002B38  0101               	movlb	1	; () banked
 24464  002B3A  4B49               	infsnz	_motor_toggle_count& (0+255),f,b
 24465  002B3C  2B4A               	incf	(_motor_toggle_count+1)& (0+255),f,b
 24466                           
 24467                           ; BSR set to: 1
 24468                           ;sort.c: 565: if(motor_toggle_count == 2){
 24469  002B3E  0E02               	movlw	2
 24470  002B40  0101               	movlb	1	; () banked
 24471  002B42  1949               	xorwf	_motor_toggle_count& (0+255),w,b
 24472  002B44  0101               	movlb	1	; () banked
 24473  002B46  114A               	iorwf	(_motor_toggle_count+1)& (0+255),w,b
 24474  002B48  A4D8               	btfss	status,2,c
 24475  002B4A  D022               	goto	i2l933
 24476                           
 24477                           ; BSR set to: 1
 24478                           ;sort.c: 566: motor_toggle_count = 0;
 24479  002B4C  0E00               	movlw	0
 24480  002B4E  0101               	movlb	1	; () banked
 24481  002B50  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
 24482  002B52  0E00               	movlw	0
 24483  002B54  6F49               	movwf	_motor_toggle_count& (0+255),b
 24484                           
 24485                           ; BSR set to: 1
 24486                           ;sort.c: 571: LATBbits.LATB2 = 1;
 24487  002B56  848A               	bsf	3978,2,c	;volatile
 24488                           
 24489                           ; BSR set to: 1
 24490                           ;sort.c: 572: }
 24491                           ;sort.c: 573: }
 24492  002B58  D01B               	goto	i2l933
 24493  002B5A                     i2l10410:
 24494                           
 24495                           ;sort.c: 574: else if(total_time % 20 == 0){
 24496  002B5A  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24497  002B5E  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24498  002B62  0E00               	movlw	0
 24499  002B64  6E04               	movwf	i2___awmod@divisor+1,c
 24500  002B66  0E14               	movlw	20
 24501  002B68  6E03               	movwf	i2___awmod@divisor,c
 24502  002B6A  EC0E  F02B         	call	i2___awmod	;wreg free
 24503  002B6E  5001               	movf	?i2___awmod,w,c
 24504  002B70  1002               	iorwf	?i2___awmod+1,w,c
 24505  002B72  A4D8               	btfss	status,2,c
 24506  002B74  D00D               	goto	i2l933
 24507                           
 24508                           ;sort.c: 575: LATBbits.LATB2 = !LATBbits.LATB2;
 24509  002B76  B48A               	btfsc	3978,2,c	;volatile
 24510  002B78  D003               	goto	i2u1045_40
 24511  002B7A  6A2A               	clrf	??_printSortTimer& (0+255),c
 24512  002B7C  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24513  002B7E  D001               	goto	i2u1046_48
 24514  002B80                     i2u1045_40:
 24515  002B80  6A2A               	clrf	??_printSortTimer& (0+255),c
 24516  002B82                     i2u1046_48:
 24517  002B82  462A               	rlncf	??_printSortTimer,f,c
 24518  002B84  462A               	rlncf	??_printSortTimer,f,c
 24519  002B86  508A               	movf	3978,w,c	;volatile
 24520  002B88  182A               	xorwf	??_printSortTimer,w,c
 24521  002B8A  0BFB               	andlw	-5
 24522  002B8C  182A               	xorwf	??_printSortTimer,w,c
 24523  002B8E  6E8A               	movwf	3978,c	;volatile
 24524  002B90                     i2l933:
 24525                           
 24526                           ;sort.c: 576: }
 24527                           ;sort.c: 577: }
 24528                           ;sort.c: 581: if((total_time >= 20 && total_time <= 21) && count_total == 0){
 24529  002B90  0100               	movlb	0	; () banked
 24530  002B92  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24531  002B94  D027               	goto	i2l10428
 24532  002B96  0100               	movlb	0	; () banked
 24533  002B98  51FB               	movf	(_total_time+1)& (0+255),w,b
 24534  002B9A  E105               	bnz	i2u1047_40
 24535  002B9C  0E14               	movlw	20
 24536  002B9E  0100               	movlb	0	; () banked
 24537  002BA0  5DFA               	subwf	_total_time& (0+255),w,b
 24538  002BA2  A0D8               	btfss	status,0,c
 24539  002BA4  D01F               	goto	i2l10428
 24540  002BA6                     i2u1047_40:
 24541                           
 24542                           ; BSR set to: 0
 24543  002BA6  0100               	movlb	0	; () banked
 24544  002BA8  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24545  002BAA  D008               	goto	i2l10416
 24546  002BAC  0100               	movlb	0	; () banked
 24547  002BAE  51FB               	movf	(_total_time+1)& (0+255),w,b
 24548  002BB0  E119               	bnz	i2l10428
 24549  002BB2  0E16               	movlw	22
 24550  002BB4  0100               	movlb	0	; () banked
 24551  002BB6  5DFA               	subwf	_total_time& (0+255),w,b
 24552  002BB8  B0D8               	btfsc	status,0,c
 24553  002BBA  D014               	goto	i2l10428
 24554  002BBC                     i2l10416:
 24555                           
 24556                           ; BSR set to: 0
 24557  002BBC  0100               	movlb	0	; () banked
 24558  002BBE  51FE               	movf	_count_total& (0+255),w,b
 24559  002BC0  0100               	movlb	0	; () banked
 24560  002BC2  11FF               	iorwf	(_count_total+1)& (0+255),w,b
 24561  002BC4  A4D8               	btfss	status,2,c
 24562  002BC6  D00E               	goto	i2l10428
 24563                           
 24564                           ; BSR set to: 0
 24565                           ;sort.c: 582: LATBbits.LATB0 = 1;
 24566  002BC8  808A               	bsf	3978,0,c	;volatile
 24567                           
 24568                           ; BSR set to: 0
 24569                           ;sort.c: 583: agitator_toggle_count++;
 24570  002BCA  4A59               	infsnz	_agitator_toggle_count,f,c
 24571  002BCC  2A5A               	incf	_agitator_toggle_count+1,f,c
 24572                           
 24573                           ; BSR set to: 0
 24574                           ;sort.c: 584: if(agitator_toggle_count == 2){
 24575  002BCE  0E02               	movlw	2
 24576  002BD0  1859               	xorwf	_agitator_toggle_count,w,c
 24577  002BD2  105A               	iorwf	_agitator_toggle_count+1,w,c
 24578  002BD4  A4D8               	btfss	status,2,c
 24579  002BD6  D03D               	goto	i2l10444
 24580                           
 24581                           ; BSR set to: 0
 24582                           ;sort.c: 585: agitator_toggle_count = 0;
 24583  002BD8  0E00               	movlw	0
 24584  002BDA  6E5A               	movwf	_agitator_toggle_count+1,c
 24585  002BDC  0E00               	movlw	0
 24586  002BDE  6E59               	movwf	_agitator_toggle_count,c
 24587                           
 24588                           ; BSR set to: 0
 24589                           ;sort.c: 586: LATBbits.LATB0 = 0;
 24590  002BE0  908A               	bcf	3978,0,c	;volatile
 24591                           
 24592                           ; BSR set to: 0
 24593                           ;sort.c: 587: }
 24594                           ;sort.c: 588: }
 24595  002BE2  D037               	goto	i2l10444
 24596  002BE4                     i2l10428:
 24597                           
 24598                           ; BSR set to: 0
 24599                           ;sort.c: 589: else if(total_time >= 30){
 24600  002BE4  0100               	movlb	0	; () banked
 24601  002BE6  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24602  002BE8  D034               	goto	i2l10444
 24603  002BEA  0100               	movlb	0	; () banked
 24604  002BEC  51FB               	movf	(_total_time+1)& (0+255),w,b
 24605  002BEE  E105               	bnz	i2u1051_40
 24606  002BF0  0E1E               	movlw	30
 24607  002BF2  0100               	movlb	0	; () banked
 24608  002BF4  5DFA               	subwf	_total_time& (0+255),w,b
 24609  002BF6  A0D8               	btfss	status,0,c
 24610  002BF8  D02C               	goto	i2l10444
 24611  002BFA                     i2u1051_40:
 24612                           
 24613                           ; BSR set to: 0
 24614                           ;sort.c: 590: if(total_time % 30 == 0){
 24615  002BFA  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24616  002BFE  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24617  002C02  0E00               	movlw	0
 24618  002C04  6E04               	movwf	i2___awmod@divisor+1,c
 24619  002C06  0E1E               	movlw	30
 24620  002C08  6E03               	movwf	i2___awmod@divisor,c
 24621  002C0A  EC0E  F02B         	call	i2___awmod	;wreg free
 24622  002C0E  5001               	movf	?i2___awmod,w,c
 24623  002C10  1002               	iorwf	?i2___awmod+1,w,c
 24624  002C12  A4D8               	btfss	status,2,c
 24625  002C14  D00C               	goto	i2l942
 24626                           
 24627                           ;sort.c: 591: LATBbits.LATB0 = !LATBbits.LATB0;
 24628  002C16  B08A               	btfsc	3978,0,c	;volatile
 24629  002C18  D003               	goto	i2u1053_40
 24630  002C1A  6A2A               	clrf	??_printSortTimer& (0+255),c
 24631  002C1C  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24632  002C1E  D001               	goto	i2u1054_48
 24633  002C20                     i2u1053_40:
 24634  002C20  6A2A               	clrf	??_printSortTimer& (0+255),c
 24635  002C22                     i2u1054_48:
 24636  002C22  508A               	movf	3978,w,c	;volatile
 24637  002C24  182A               	xorwf	??_printSortTimer,w,c
 24638  002C26  0BFE               	andlw	-2
 24639  002C28  182A               	xorwf	??_printSortTimer,w,c
 24640  002C2A  6E8A               	movwf	3978,c	;volatile
 24641  002C2C  D00E               	goto	i2l10442
 24642  002C2E                     i2l942:
 24643                           
 24644                           ;sort.c: 594: else if(LATBbits.LATB0 == 1){
 24645  002C2E  A08A               	btfss	3978,0,c	;volatile
 24646  002C30  D010               	goto	i2l10444
 24647                           
 24648                           ;sort.c: 595: agitator_toggle_count++;
 24649  002C32  4A59               	infsnz	_agitator_toggle_count,f,c
 24650  002C34  2A5A               	incf	_agitator_toggle_count+1,f,c
 24651                           
 24652                           ;sort.c: 596: if(agitator_toggle_count == 2){
 24653  002C36  0E02               	movlw	2
 24654  002C38  1859               	xorwf	_agitator_toggle_count,w,c
 24655  002C3A  105A               	iorwf	_agitator_toggle_count+1,w,c
 24656  002C3C  A4D8               	btfss	status,2,c
 24657  002C3E  D009               	goto	i2l10444
 24658                           
 24659                           ;sort.c: 597: LATBbits.LATB0 = 0;
 24660  002C40  908A               	bcf	3978,0,c	;volatile
 24661                           
 24662                           ;sort.c: 598: time_recent_agitator = total_time;
 24663  002C42  C0FA  F14B         	movff	_total_time,_time_recent_agitator
 24664  002C46  C0FB  F14C         	movff	_total_time+1,_time_recent_agitator+1
 24665  002C4A                     i2l10442:
 24666                           
 24667                           ;sort.c: 599: agitator_toggle_count = 0;
 24668  002C4A  0E00               	movlw	0
 24669  002C4C  6E5A               	movwf	_agitator_toggle_count+1,c
 24670  002C4E  0E00               	movlw	0
 24671  002C50  6E59               	movwf	_agitator_toggle_count,c
 24672  002C52                     i2l10444:
 24673                           
 24674                           ;sort.c: 600: }
 24675                           ;sort.c: 605: }
 24676                           ;sort.c: 609: }
 24677                           ;sort.c: 611: if(total_time - most_recent_sort_time == 42){
 24678  002C52  C147  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 24679  002C56  C148  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 24680  002C5A  1E2A               	comf	??_printSortTimer,f,c
 24681  002C5C  1E2B               	comf	??_printSortTimer+1,f,c
 24682  002C5E  4A2A               	infsnz	??_printSortTimer,f,c
 24683  002C60  2A2B               	incf	??_printSortTimer+1,f,c
 24684  002C62  0100               	movlb	0	; () banked
 24685  002C64  51FA               	movf	_total_time& (0+255),w,b
 24686  002C66  262A               	addwf	??_printSortTimer,f,c
 24687  002C68  0100               	movlb	0	; () banked
 24688  002C6A  51FB               	movf	(_total_time+1)& (0+255),w,b
 24689  002C6C  222B               	addwfc	??_printSortTimer+1,f,c
 24690  002C6E  0E2A               	movlw	42
 24691  002C70  182A               	xorwf	??_printSortTimer,w,c
 24692  002C72  102B               	iorwf	??_printSortTimer+1,w,c
 24693  002C74  A4D8               	btfss	status,2,c
 24694  002C76  D01D               	goto	i2l10456
 24695                           
 24696                           ; BSR set to: 0
 24697                           ;sort.c: 612: if((count_pop_no_tab > 0) && (count_pop_w_tab > 0) && (count_can_w_lab > 0
      +                          ) && (count_can_no_lab > 0)){
 24698  002C78  BE62               	btfsc	_count_pop_no_tab+1,7,c
 24699  002C7A  D025               	goto	i2l10460
 24700  002C7C  5062               	movf	_count_pop_no_tab+1,w,c
 24701  002C7E  E103               	bnz	i2u1058_40
 24702  002C80  0461               	decf	_count_pop_no_tab,w,c
 24703  002C82  A0D8               	btfss	status,0,c
 24704  002C84  D020               	goto	i2l10460
 24705  002C86                     i2u1058_40:
 24706                           
 24707                           ; BSR set to: 0
 24708  002C86  BE64               	btfsc	_count_pop_w_tab+1,7,c
 24709  002C88  D01E               	goto	i2l10460
 24710  002C8A  5064               	movf	_count_pop_w_tab+1,w,c
 24711  002C8C  E103               	bnz	i2u1059_40
 24712  002C8E  0463               	decf	_count_pop_w_tab,w,c
 24713  002C90  A0D8               	btfss	status,0,c
 24714  002C92  D019               	goto	i2l10460
 24715  002C94                     i2u1059_40:
 24716                           
 24717                           ; BSR set to: 0
 24718  002C94  BE60               	btfsc	_count_can_w_lab+1,7,c
 24719  002C96  D017               	goto	i2l10460
 24720  002C98  5060               	movf	_count_can_w_lab+1,w,c
 24721  002C9A  E103               	bnz	i2u1060_40
 24722  002C9C  045F               	decf	_count_can_w_lab,w,c
 24723  002C9E  A0D8               	btfss	status,0,c
 24724  002CA0  D012               	goto	i2l10460
 24725  002CA2                     i2u1060_40:
 24726                           
 24727                           ; BSR set to: 0
 24728  002CA2  BE5E               	btfsc	_count_can_no_lab+1,7,c
 24729  002CA4  D010               	goto	i2l10460
 24730  002CA6  505E               	movf	_count_can_no_lab+1,w,c
 24731  002CA8  E10B               	bnz	L19
 24732  002CAA  045D               	decf	_count_can_no_lab,w,c
 24733  002CAC  A0D8               	btfss	status,0,c
 24734  002CAE  D00B               	goto	i2l10460
 24735  002CB0  D007               	goto	L19
 24736  002CB2                     i2l10456:
 24737                           
 24738                           ; BSR set to: 0
 24739                           ;sort.c: 617: else if (total_time == 179){
 24740  002CB2  0EB3               	movlw	179
 24741  002CB4  0100               	movlb	0	; () banked
 24742  002CB6  19FA               	xorwf	_total_time& (0+255),w,b
 24743  002CB8  0100               	movlb	0	; () banked
 24744  002CBA  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 24745  002CBC  A4D8               	btfss	status,2,c
 24746  002CBE  D003               	goto	i2l10460
 24747  002CC0                     L19:
 24748                           
 24749                           ; BSR set to: 0
 24750                           ;sort.c: 618: machine_state = DoneSorting_state;
 24751  002CC0  0E02               	movlw	2
 24752  002CC2  0100               	movlb	0	; () banked
 24753  002CC4  6FFC               	movwf	_machine_state& (0+255),b
 24754  002CC6                     i2l10460:
 24755                           
 24756                           ; BSR set to: 0
 24757                           ;sort.c: 620: }
 24758                           ;sort.c: 622: int min = (timeDiff % 3600) / 60;
 24759  002CC6  0E0E               	movlw	14
 24760  002CC8  6E04               	movwf	i2___lwmod@divisor+1,c
 24761  002CCA  0E10               	movlw	16
 24762  002CCC  6E03               	movwf	i2___lwmod@divisor,c
 24763  002CCE  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24764  002CD2  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24765  002CD6  EC4B  F02D         	call	i2___lwmod	;wreg free
 24766  002CDA  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 24767  002CDE  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 24768  002CE2  0E00               	movlw	0
 24769  002CE4  6E09               	movwf	i2___lwdiv@divisor+1,c
 24770  002CE6  0E3C               	movlw	60
 24771  002CE8  6E08               	movwf	i2___lwdiv@divisor,c
 24772  002CEA  EC6A  F02C         	call	i2___lwdiv	;wreg free
 24773  002CEE  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 24774  002CF2  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 24775                           
 24776                           ;sort.c: 623: int sec = (timeDiff % 3600) % 60;
 24777  002CF6  0E0E               	movlw	14
 24778  002CF8  6E04               	movwf	i2___lwmod@divisor+1,c
 24779  002CFA  0E10               	movlw	16
 24780  002CFC  6E03               	movwf	i2___lwmod@divisor,c
 24781  002CFE  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24782  002D02  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24783  002D06  EC4B  F02D         	call	i2___lwmod	;wreg free
 24784  002D0A  C001  F043         	movff	?i2___lwmod,_printSortTimer$2578
 24785  002D0E  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2578+1
 24786                           
 24787                           ;sort.c: 623: int sec = (timeDiff % 3600) % 60;
 24788  002D12  C043  F001         	movff	_printSortTimer$2578,i2___lwmod@dividend
 24789  002D16  C044  F002         	movff	_printSortTimer$2578+1,i2___lwmod@dividend+1
 24790  002D1A  0E00               	movlw	0
 24791  002D1C  6E04               	movwf	i2___lwmod@divisor+1,c
 24792  002D1E  0E3C               	movlw	60
 24793  002D20  6E03               	movwf	i2___lwmod@divisor,c
 24794  002D22  EC4B  F02D         	call	i2___lwmod	;wreg free
 24795  002D26  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 24796  002D2A  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 24797                           
 24798                           ;sort.c: 625: lcdInst(0b10000000);;
 24799  002D2E  0E80               	movlw	128
 24800  002D30  EC71  F030         	call	i2_lcdInst
 24801                           
 24802                           ;sort.c: 626: printf("SORTING...     ");
 24803  002D34  0E59               	movlw	low STR_64
 24804  002D36  6E0D               	movwf	i2printf@f,c
 24805  002D38  0EFE               	movlw	high STR_64
 24806  002D3A  6E0E               	movwf	i2printf@f+1,c
 24807  002D3C  ECB2  F016         	call	i2_printf	;wreg free
 24808                           
 24809                           ;sort.c: 627: lcdInst(0b11000000);;
 24810  002D40  0EC0               	movlw	192
 24811  002D42  EC71  F030         	call	i2_lcdInst
 24812                           
 24813                           ;sort.c: 628: printf("TIME %d:%02d   ", min, sec);
 24814  002D46  0E69               	movlw	low STR_65
 24815  002D48  6E0D               	movwf	i2printf@f,c
 24816  002D4A  0EFE               	movlw	high STR_65
 24817  002D4C  6E0E               	movwf	i2printf@f+1,c
 24818  002D4E  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 24819  002D52  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 24820  002D56  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 24821  002D5A  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 24822  002D5E  ECB2  F016         	call	i2_printf	;wreg free
 24823  002D62  0012               	return		;funcret
 24824  002D64                     __end_of_printSortTimer:
 24825                           	opt stack 0
 24826                           pclatu	equ	0xFFB
 24827                           pclath	equ	0xFFA
 24828                           tblptru	equ	0xFF8
 24829                           tblptrh	equ	0xFF7
 24830                           tblptrl	equ	0xFF6
 24831                           tablat	equ	0xFF5
 24832                           prodh	equ	0xFF4
 24833                           prodl	equ	0xFF3
 24834                           intcon	equ	0xFF2
 24835                           intcon2	equ	0xFF1
 24836                           intcon3	equ	0xFF0
 24837                           indf0	equ	0xFEF
 24838                           postinc0	equ	0xFEE
 24839                           fsr0h	equ	0xFEA
 24840                           fsr0l	equ	0xFE9
 24841                           wreg	equ	0xFE8
 24842                           postdec1	equ	0xFE5
 24843                           fsr1h	equ	0xFE2
 24844                           fsr1l	equ	0xFE1
 24845                           indf2	equ	0xFDF
 24846                           postinc2	equ	0xFDE
 24847                           postdec2	equ	0xFDD
 24848                           fsr2h	equ	0xFDA
 24849                           fsr2l	equ	0xFD9
 24850                           status	equ	0xFD8
 24851                           
 24852 ;; *************** function i2_printf *****************
 24853 ;; Defined at:
 24854 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 24855 ;; Parameters:    Size  Location     Type
 24856 ;;  f               2   12[COMRAM] PTR const unsigned char 
 24857 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 24858 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 24859 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 24860 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 24861 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 24862 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 24863 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 24864 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 24865 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 24866 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 24867 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 24868 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 24869 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 24870 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 24871 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 24872 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 24873 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 24874 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 24875 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 24876 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 24877 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 24878 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 24879 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 24880 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 24881 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 24882 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 24883 ;; Auto vars:     Size  Location     Type
 24884 ;;  printf          4    0        struct .
 24885 ;;  printf          2   39[COMRAM] int 
 24886 ;;  printf          2   35[COMRAM] unsigned int 
 24887 ;;  printf          2   33[COMRAM] unsigned int 
 24888 ;;  printf          2   31[COMRAM] PTR void [1]
 24889 ;;		 -> ?i2_printf(2), ?_printf(2), 
 24890 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 24891 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 24892 ;;  printf          1   38[COMRAM] char 
 24893 ;;  printf          1   37[COMRAM] unsigned char 
 24894 ;;  printf          1   28[COMRAM] char 
 24895 ;; Return value:  Size  Location     Type
 24896 ;;                  2   12[COMRAM] int 
 24897 ;; Registers used:
 24898 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24899 ;; Tracked objects:
 24900 ;;		On entry : 0/0
 24901 ;;		On exit  : 0/0
 24902 ;;		Unchanged: 0/0
 24903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24904 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24905 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24906 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24907 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24908 ;;Total ram usage:       29 bytes
 24909 ;; Hardware stack levels used:    1
 24910 ;; Hardware stack levels required when called:    2
 24911 ;; This function calls:
 24912 ;;		i2___lwdiv
 24913 ;;		i2___lwmod
 24914 ;;		i2___wmul
 24915 ;;		i2_isdigit
 24916 ;;		i2_putch
 24917 ;; This function is called by:
 24918 ;;		_change_state_to_menu_11
 24919 ;;		_change_state_to_menu_23
 24920 ;;		_change_state_to_logs_11
 24921 ;;		_change_state_to_logs_12
 24922 ;;		_change_state_to_logs_22
 24923 ;;		_change_state_to_logs_23
 24924 ;;		_change_state_to_logs_33
 24925 ;;		_change_state_to_logs_34
 24926 ;;		_printSortTimer
 24927 ;;		i2_change_state_to_menu_start
 24928 ;;		i2_change_state_to_menu_12
 24929 ;;		i2_change_state_to_menu_22
 24930 ;;		i2_printRTC
 24931 ;; This function uses a non-reentrant model
 24932 ;;
 24933                           
 24934                           	psect	text87
 24935  002D64                     __ptext87:
 24936                           	opt stack 0
 24937  002D64                     i2_printf:
 24938                           	opt stack 20
 24939                           
 24940                           ;doprnt.c: 466: va_list ap;
 24941                           ;doprnt.c: 499: signed char c;
 24942                           ;doprnt.c: 501: int width;
 24943                           ;doprnt.c: 506: signed char prec;
 24944                           ;doprnt.c: 508: unsigned char flag;
 24945                           ;doprnt.c: 523: union {
 24946                           ;doprnt.c: 524: unsigned long vd;
 24947                           ;doprnt.c: 525: double integ;
 24948                           ;doprnt.c: 526: } tmpval;
 24949                           ;doprnt.c: 528: unsigned int val;
 24950                           ;doprnt.c: 529: unsigned len;
 24951                           ;doprnt.c: 530: const char * cp;
 24952                           ;doprnt.c: 533: *ap = __va_start();
 24953                           
 24954                           ;incstack = 0
 24955  002D64  0E0F               	movlw	low (?i2_printf+2)
 24956  002D66  6E20               	movwf	i2printf@ap,c
 24957  002D68  0E00               	movlw	high (?i2_printf+2)
 24958  002D6A  6E21               	movwf	i2printf@ap+1,c
 24959                           
 24960                           ;doprnt.c: 536: while(c = *f++) {
 24961  002D6C  D1A4               	goto	i2l7392
 24962  002D6E                     i2l7262:
 24963                           
 24964                           ;doprnt.c: 538: if(c != '%')
 24965  002D6E  0E25               	movlw	37
 24966  002D70  1827               	xorwf	i2printf@c,w,c
 24967  002D72  B4D8               	btfsc	status,2,c
 24968  002D74  D004               	goto	i2l7266
 24969                           
 24970                           ;doprnt.c: 540: {
 24971                           ;doprnt.c: 541: (putch(c) );
 24972  002D76  5027               	movf	i2printf@c,w,c
 24973  002D78  EC6B  F030         	call	i2_putch
 24974                           
 24975                           ;doprnt.c: 542: continue;
 24976  002D7C  D19C               	goto	i2l7392
 24977  002D7E                     i2l7266:
 24978                           
 24979                           ;doprnt.c: 543: }
 24980                           ;doprnt.c: 546: width = 0;
 24981  002D7E  0E00               	movlw	0
 24982  002D80  6E29               	movwf	i2printf@width+1,c
 24983  002D82  0E00               	movlw	0
 24984  002D84  6E28               	movwf	i2printf@width,c
 24985                           
 24986                           ;doprnt.c: 548: flag = 0;
 24987  002D86  0E00               	movlw	0
 24988  002D88  6E26               	movwf	i2printf@flag,c
 24989                           
 24990                           ;doprnt.c: 551: switch(*f) {
 24991                           
 24992                           ;doprnt.c: 550: for(;;) {
 24993  002D8A  D003               	goto	i2l7272
 24994  002D8C                     i2l7268:
 24995                           
 24996                           ;doprnt.c: 580: flag |= 0x04;
 24997  002D8C  8426               	bsf	i2printf@flag,2,c
 24998                           
 24999                           ;doprnt.c: 581: f++;
 25000  002D8E  4A0D               	infsnz	i2printf@f,f,c
 25001  002D90  2A0E               	incf	i2printf@f+1,f,c
 25002  002D92                     i2l7272:
 25003  002D92  C00D  FFF6         	movff	i2printf@f,tblptrl
 25004  002D96  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25005  002D9A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25006  002D9A  6AF8               	clrf	tblptru,c
 25007  002D9C                     	endif
 25008  002D9C                     	if	0	;tblptru may be non-zero
 25009  002D9C                     	endif
 25010  002D9C  0008               	tblrd		*
 25011  002D9E  50F5               	movf	tablat,w,c
 25012                           
 25013                           ; Switch size 1, requested type "space"
 25014                           ; Number of cases is 1, Range of values is 48 to 48
 25015                           ; switch strategies available:
 25016                           ; Name         Instructions Cycles
 25017                           ; simple_byte            4     3 (average)
 25018                           ;	Chosen strategy is simple_byte
 25019  002DA0  0A30               	xorlw	48	; case 48
 25020  002DA2  B4D8               	btfsc	status,2,c
 25021  002DA4  D7F3               	goto	i2l7268
 25022                           
 25023                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 25024                           
 25025                           ;doprnt.c: 586: }
 25026                           
 25027                           ;doprnt.c: 585: break;
 25028  002DA6  C00D  FFF6         	movff	i2printf@f,tblptrl
 25029  002DAA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25030  002DAE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25031  002DAE  6AF8               	clrf	tblptru,c
 25032  002DB0                     	endif
 25033  002DB0                     	if	0	;tblptru may be non-zero
 25034  002DB0                     	endif
 25035  002DB0  0008               	tblrd		*
 25036  002DB2  50F5               	movf	tablat,w,c
 25037  002DB4  EC09  F030         	call	i2_isdigit
 25038  002DB8  A0D8               	btfss	status,0,c
 25039  002DBA  D0A6               	goto	i2l7320
 25040                           
 25041                           ;doprnt.c: 598: width = 0;
 25042  002DBC  0E00               	movlw	0
 25043  002DBE  6E29               	movwf	i2printf@width+1,c
 25044  002DC0  0E00               	movlw	0
 25045  002DC2  6E28               	movwf	i2printf@width,c
 25046  002DC4                     i2l7278:
 25047                           
 25048                           ;doprnt.c: 600: width *= 10;
 25049  002DC4  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 25050  002DC8  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 25051  002DCC  0E00               	movlw	0
 25052  002DCE  6E04               	movwf	i2___wmul@multiplicand+1,c
 25053  002DD0  0E0A               	movlw	10
 25054  002DD2  6E03               	movwf	i2___wmul@multiplicand,c
 25055  002DD4  ECAF  F02F         	call	i2___wmul	;wreg free
 25056  002DD8  C001  F028         	movff	?i2___wmul,i2printf@width
 25057  002DDC  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 25058                           
 25059                           ;doprnt.c: 601: width += *f++ - '0';
 25060  002DE0  0ED0               	movlw	208
 25061  002DE2  6E19               	movwf	??i2_printf& (0+255),c
 25062  002DE4  0EFF               	movlw	255
 25063  002DE6  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 25064  002DE8  C00D  FFF6         	movff	i2printf@f,tblptrl
 25065  002DEC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25066  002DF0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25067  002DF0  6AF8               	clrf	tblptru,c
 25068  002DF2                     	endif
 25069  002DF2                     	if	0	;tblptru may be non-zero
 25070  002DF2                     	endif
 25071  002DF2  0008               	tblrd		*
 25072  002DF4  50F5               	movf	tablat,w,c
 25073  002DF6  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 25074  002DF8  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 25075  002DFA  5019               	movf	??i2_printf,w,c
 25076  002DFC  261B               	addwf	??i2_printf+2,f,c
 25077  002DFE  501A               	movf	??i2_printf+1,w,c
 25078  002E00  221C               	addwfc	??i2_printf+3,f,c
 25079  002E02  501B               	movf	??i2_printf+2,w,c
 25080  002E04  2628               	addwf	i2printf@width,f,c
 25081  002E06  501C               	movf	??i2_printf+3,w,c
 25082  002E08  2229               	addwfc	i2printf@width+1,f,c
 25083  002E0A  4A0D               	infsnz	i2printf@f,f,c
 25084  002E0C  2A0E               	incf	i2printf@f+1,f,c
 25085                           
 25086                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 25087  002E0E  C00D  FFF6         	movff	i2printf@f,tblptrl
 25088  002E12  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25089  002E16                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25090  002E16  6AF8               	clrf	tblptru,c
 25091  002E18                     	endif
 25092  002E18                     	if	0	;tblptru may be non-zero
 25093  002E18                     	endif
 25094  002E18  0008               	tblrd		*
 25095  002E1A  50F5               	movf	tablat,w,c
 25096  002E1C  EC09  F030         	call	i2_isdigit
 25097  002E20  A0D8               	btfss	status,0,c
 25098  002E22  D072               	goto	i2l7320
 25099  002E24  D7CF               	goto	i2l7278
 25100  002E26                     i2l7286:
 25101                           
 25102                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 25103  002E26  C020  FFD9         	movff	i2printf@ap,fsr2l
 25104  002E2A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25105  002E2E  CFDE F01E          	movff	postinc2,i2printf@cp
 25106  002E32  CFDD F01F          	movff	postdec2,i2printf@cp+1
 25107  002E36  0E02               	movlw	2
 25108  002E38  2620               	addwf	i2printf@ap,f,c
 25109  002E3A  0E00               	movlw	0
 25110  002E3C  2221               	addwfc	i2printf@ap+1,f,c
 25111                           
 25112                           ;doprnt.c: 740: if(!cp)
 25113  002E3E  501E               	movf	i2printf@cp,w,c
 25114  002E40  101F               	iorwf	i2printf@cp+1,w,c
 25115  002E42  A4D8               	btfss	status,2,c
 25116  002E44  D004               	goto	i2l7294
 25117                           
 25118                           ;doprnt.c: 741: cp = "(null)";
 25119  002E46  0EB5               	movlw	low STR_129
 25120  002E48  6E1E               	movwf	i2printf@cp,c
 25121  002E4A  0EFF               	movlw	high STR_129
 25122  002E4C  6E1F               	movwf	i2printf@cp+1,c
 25123  002E4E                     i2l7294:
 25124                           
 25125                           ;doprnt.c: 745: len = 0;
 25126  002E4E  0E00               	movlw	0
 25127  002E50  6E23               	movwf	i2printf@len+1,c
 25128  002E52  0E00               	movlw	0
 25129  002E54  6E22               	movwf	i2printf@len,c
 25130                           
 25131                           ;doprnt.c: 746: while(cp[len])
 25132  002E56  D002               	goto	i2l7298
 25133  002E58                     i2l7296:
 25134                           
 25135                           ;doprnt.c: 747: len++;
 25136  002E58  4A22               	infsnz	i2printf@len,f,c
 25137  002E5A  2A23               	incf	i2printf@len+1,f,c
 25138  002E5C                     i2l7298:
 25139  002E5C  5022               	movf	i2printf@len,w,c
 25140  002E5E  241E               	addwf	i2printf@cp,w,c
 25141  002E60  6E19               	movwf	??i2_printf& (0+255),c
 25142  002E62  5023               	movf	i2printf@len+1,w,c
 25143  002E64  201F               	addwfc	i2printf@cp+1,w,c
 25144  002E66  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 25145  002E68  C019  FFF6         	movff	??i2_printf,tblptrl
 25146  002E6C  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 25147  002E70  0E00               	movlw	low (__mediumconst shr (0+16))
 25148  002E72  6EF8               	movwf	tblptru,c
 25149  002E74  0E0F               	movlw	(high __ramtop+-1)
 25150  002E76  64F7               	cpfsgt	tblptrh,c
 25151  002E78  D003               	bra	i2u623_47
 25152  002E7A  0008               	tblrd		*
 25153  002E7C  50F5               	movf	tablat,w,c
 25154  002E7E  D005               	bra	i2u623_40
 25155  002E80                     i2u623_47:
 25156  002E80  CFF6 FFE9          	movff	tblptrl,fsr0l
 25157  002E84  CFF7 FFEA          	movff	tblptrh,fsr0h
 25158  002E88  50EF               	movf	indf0,w,c
 25159  002E8A                     i2u623_40:
 25160  002E8A  0900               	iorlw	0
 25161  002E8C  A4D8               	btfss	status,2,c
 25162  002E8E  D7E4               	goto	i2l7296
 25163                           
 25164                           ;doprnt.c: 757: if(width > len)
 25165  002E90  5028               	movf	i2printf@width,w,c
 25166  002E92  5C22               	subwf	i2printf@len,w,c
 25167  002E94  5029               	movf	i2printf@width+1,w,c
 25168  002E96  5823               	subwfb	i2printf@len+1,w,c
 25169  002E98  B0D8               	btfsc	status,0,c
 25170  002E9A  D005               	goto	i2l7304
 25171                           
 25172                           ;doprnt.c: 758: width -= len;
 25173  002E9C  5022               	movf	i2printf@len,w,c
 25174  002E9E  5E28               	subwf	i2printf@width,f,c
 25175  002EA0  5023               	movf	i2printf@len+1,w,c
 25176  002EA2  5A29               	subwfb	i2printf@width+1,f,c
 25177  002EA4  D008               	goto	i2l7308
 25178  002EA6                     i2l7304:
 25179                           
 25180                           ;doprnt.c: 759: else
 25181                           ;doprnt.c: 760: width = 0;
 25182  002EA6  0E00               	movlw	0
 25183  002EA8  6E29               	movwf	i2printf@width+1,c
 25184  002EAA  0E00               	movlw	0
 25185  002EAC  6E28               	movwf	i2printf@width,c
 25186                           
 25187                           ;doprnt.c: 764: while(width--)
 25188  002EAE  D003               	goto	i2l7308
 25189  002EB0                     i2l7306:
 25190                           
 25191                           ;doprnt.c: 765: (putch(' ') );
 25192  002EB0  0E20               	movlw	32
 25193  002EB2  EC6B  F030         	call	i2_putch
 25194  002EB6                     i2l7308:
 25195  002EB6  0628               	decf	i2printf@width,f,c
 25196  002EB8  A0D8               	btfss	status,0,c
 25197  002EBA  0629               	decf	i2printf@width+1,f,c
 25198  002EBC  2828               	incf	i2printf@width,w,c
 25199  002EBE  E1F8               	bnz	i2l7306
 25200  002EC0  2829               	incf	i2printf@width+1,w,c
 25201  002EC2  B4D8               	btfsc	status,2,c
 25202  002EC4  D016               	goto	i2l7314
 25203  002EC6  D7F4               	goto	i2l7306
 25204  002EC8                     i2l7310:
 25205                           
 25206                           ;doprnt.c: 768: (putch(*cp++) );
 25207  002EC8  C01E  FFF6         	movff	i2printf@cp,tblptrl
 25208  002ECC  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 25209  002ED0  0E00               	movlw	low (__mediumconst shr (0+16))
 25210  002ED2  6EF8               	movwf	tblptru,c
 25211  002ED4  0E0F               	movlw	(high __ramtop+-1)
 25212  002ED6  64F7               	cpfsgt	tblptrh,c
 25213  002ED8  D003               	bra	i2u627_47
 25214  002EDA  0008               	tblrd		*
 25215  002EDC  50F5               	movf	tablat,w,c
 25216  002EDE  D005               	bra	i2u627_40
 25217  002EE0                     i2u627_47:
 25218  002EE0  CFF6 FFE9          	movff	tblptrl,fsr0l
 25219  002EE4  CFF7 FFEA          	movff	tblptrh,fsr0h
 25220  002EE8  50EF               	movf	indf0,w,c
 25221  002EEA                     i2u627_40:
 25222  002EEA  EC6B  F030         	call	i2_putch
 25223  002EEE  4A1E               	infsnz	i2printf@cp,f,c
 25224  002EF0  2A1F               	incf	i2printf@cp+1,f,c
 25225  002EF2                     i2l7314:
 25226  002EF2  0622               	decf	i2printf@len,f,c
 25227  002EF4  A0D8               	btfss	status,0,c
 25228  002EF6  0623               	decf	i2printf@len+1,f,c
 25229  002EF8  2822               	incf	i2printf@len,w,c
 25230  002EFA  E1E6               	bnz	i2l7310
 25231  002EFC  2823               	incf	i2printf@len+1,w,c
 25232  002EFE  B4D8               	btfsc	status,2,c
 25233  002F00  D0DA               	goto	i2l7392
 25234  002F02  D7E2               	goto	i2l7310
 25235  002F04                     i2l7316:
 25236                           
 25237                           ;doprnt.c: 818: flag |= 0x40;
 25238  002F04  8C26               	bsf	i2printf@flag,6,c
 25239                           
 25240                           ;doprnt.c: 822: }
 25241                           
 25242                           ;doprnt.c: 819: break;
 25243  002F06  D01B               	goto	i2l1586
 25244  002F08                     i2l7320:
 25245  002F08  C00D  FFF6         	movff	i2printf@f,tblptrl
 25246  002F0C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25247  002F10  4A0D               	infsnz	i2printf@f,f,c
 25248  002F12  2A0E               	incf	i2printf@f+1,f,c
 25249  002F14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25250  002F14  6AF8               	clrf	tblptru,c
 25251  002F16                     	endif
 25252  002F16                     	if	0	;tblptru may be non-zero
 25253  002F16                     	endif
 25254  002F16  0008               	tblrd		*
 25255  002F18  CFF5 F027          	movff	tablat,i2printf@c
 25256  002F1C  5027               	movf	i2printf@c,w,c
 25257                           
 25258                           ; Switch size 1, requested type "space"
 25259                           ; Number of cases is 5, Range of values is 0 to 117
 25260                           ; switch strategies available:
 25261                           ; Name         Instructions Cycles
 25262                           ; simple_byte           16     9 (average)
 25263                           ;	Chosen strategy is simple_byte
 25264  002F1E  0A00               	xorlw	0	; case 0
 25265  002F20  B4D8               	btfsc	status,2,c
 25266  002F22  0012               	return	
 25267  002F24  0A64               	xorlw	100	; case 100
 25268  002F26  B4D8               	btfsc	status,2,c
 25269  002F28  D00A               	goto	i2l1586
 25270  002F2A  0A0D               	xorlw	13	; case 105
 25271  002F2C  B4D8               	btfsc	status,2,c
 25272  002F2E  D007               	goto	i2l1586
 25273  002F30  0A1A               	xorlw	26	; case 115
 25274  002F32  B4D8               	btfsc	status,2,c
 25275  002F34  D778               	goto	i2l7286
 25276  002F36  0A06               	xorlw	6	; case 117
 25277  002F38  B4D8               	btfsc	status,2,c
 25278  002F3A  D7E4               	goto	i2l7316
 25279  002F3C  D0BC               	goto	i2l7392
 25280  002F3E                     i2l1586:
 25281                           
 25282                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 25283  002F3E  BC26               	btfsc	i2printf@flag,6,c
 25284  002F40  D015               	goto	i2l7332
 25285                           
 25286                           ;doprnt.c: 1253: {
 25287                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 25288  002F42  C020  FFD9         	movff	i2printf@ap,fsr2l
 25289  002F46  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25290  002F4A  CFDE F024          	movff	postinc2,i2printf@val
 25291  002F4E  CFDD F025          	movff	postdec2,i2printf@val+1
 25292  002F52  0E02               	movlw	2
 25293  002F54  2620               	addwf	i2printf@ap,f,c
 25294  002F56  0E00               	movlw	0
 25295  002F58  2221               	addwfc	i2printf@ap+1,f,c
 25296                           
 25297                           ;doprnt.c: 1261: if((int)val < 0) {
 25298  002F5A  AE25               	btfss	i2printf@val+1,7,c
 25299  002F5C  D013               	goto	i2l7336
 25300                           
 25301                           ;doprnt.c: 1262: flag |= 0x03;
 25302  002F5E  0E03               	movlw	3
 25303  002F60  1226               	iorwf	i2printf@flag,f,c
 25304                           
 25305                           ;doprnt.c: 1263: val = -val;
 25306  002F62  6C24               	negf	i2printf@val,c
 25307  002F64  1E25               	comf	i2printf@val+1,f,c
 25308  002F66  B0D8               	btfsc	status,0,c
 25309  002F68  2A25               	incf	i2printf@val+1,f,c
 25310                           
 25311                           ;doprnt.c: 1264: }
 25312                           ;doprnt.c: 1266: }
 25313  002F6A  D00C               	goto	i2l7336
 25314  002F6C                     i2l7332:
 25315                           
 25316                           ;doprnt.c: 1268: else
 25317                           ;doprnt.c: 1273: {
 25318                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 25319  002F6C  C020  FFD9         	movff	i2printf@ap,fsr2l
 25320  002F70  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25321  002F74  CFDE F024          	movff	postinc2,i2printf@val
 25322  002F78  CFDD F025          	movff	postdec2,i2printf@val+1
 25323  002F7C  0E02               	movlw	2
 25324  002F7E  2620               	addwf	i2printf@ap,f,c
 25325  002F80  0E00               	movlw	0
 25326  002F82  2221               	addwfc	i2printf@ap+1,f,c
 25327  002F84                     i2l7336:
 25328                           
 25329                           ;doprnt.c: 1287: }
 25330                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 25331  002F84  0E01               	movlw	1
 25332  002F86  6E27               	movwf	i2printf@c,c
 25333  002F88                     i2l7338:
 25334  002F88  0E05               	movlw	5
 25335  002F8A  1827               	xorwf	i2printf@c,w,c
 25336  002F8C  B4D8               	btfsc	status,2,c
 25337  002F8E  D015               	goto	i2l7350
 25338                           
 25339                           ;doprnt.c: 1306: if(val < dpowers[c])
 25340  002F90  5027               	movf	i2printf@c,w,c
 25341  002F92  0D02               	mullw	2
 25342  002F94  0EB8               	movlw	low _dpowers
 25343  002F96  24F3               	addwf	prodl,w,c
 25344  002F98  6EF6               	movwf	tblptrl,c
 25345  002F9A  0EFA               	movlw	high _dpowers
 25346  002F9C  20F4               	addwfc	prodh,w,c
 25347  002F9E  6EF7               	movwf	tblptrh,c
 25348  002FA0                     	if	1	;There are 3 active tblptr bytes
 25349  002FA0  6AF8               	clrf	tblptru,c
 25350  002FA2  0E00               	movlw	low (__mediumconst shr (0+16))
 25351  002FA4  22F8               	addwfc	tblptru,f,c
 25352  002FA6                     	endif
 25353  002FA6  0009               	tblrd		*+
 25354  002FA8  50F5               	movf	tablat,w,c
 25355  002FAA  5C24               	subwf	i2printf@val,w,c
 25356  002FAC  0009               	tblrd		*+
 25357  002FAE  50F5               	movf	tablat,w,c
 25358  002FB0  5825               	subwfb	i2printf@val+1,w,c
 25359  002FB2  A0D8               	btfss	status,0,c
 25360  002FB4  D002               	goto	i2l7350
 25361                           
 25362                           ;doprnt.c: 1307: break;
 25363  002FB6  2A27               	incf	i2printf@c,f,c
 25364  002FB8  D7E7               	goto	i2l7338
 25365  002FBA                     i2l7350:
 25366                           
 25367                           ;doprnt.c: 1345: if(width && flag & 0x03)
 25368  002FBA  5028               	movf	i2printf@width,w,c
 25369  002FBC  1029               	iorwf	i2printf@width+1,w,c
 25370  002FBE  B4D8               	btfsc	status,2,c
 25371  002FC0  D009               	goto	i2l7356
 25372  002FC2  C026  F019         	movff	i2printf@flag,??i2_printf
 25373  002FC6  0E03               	movlw	3
 25374  002FC8  1619               	andwf	??i2_printf,f,c
 25375  002FCA  B4D8               	btfsc	status,2,c
 25376  002FCC  D003               	goto	i2l7356
 25377                           
 25378                           ;doprnt.c: 1346: width--;
 25379  002FCE  0628               	decf	i2printf@width,f,c
 25380  002FD0  A0D8               	btfss	status,0,c
 25381  002FD2  0629               	decf	i2printf@width+1,f,c
 25382  002FD4                     i2l7356:
 25383                           
 25384                           ;doprnt.c: 1381: if(width > c)
 25385  002FD4  0E80               	movlw	128
 25386  002FD6  BE27               	btfsc	i2printf@c,7,c
 25387  002FD8  0E7F               	movlw	127
 25388  002FDA  6E19               	movwf	??i2_printf& (0+255),c
 25389  002FDC  5028               	movf	i2printf@width,w,c
 25390  002FDE  5C27               	subwf	i2printf@c,w,c
 25391  002FE0  5029               	movf	i2printf@width+1,w,c
 25392  002FE2  0A80               	xorlw	128
 25393  002FE4  5819               	subwfb	??i2_printf& (0+255),w,c
 25394  002FE6  B0D8               	btfsc	status,0,c
 25395  002FE8  D007               	goto	i2l7360
 25396                           
 25397                           ;doprnt.c: 1382: width -= c;
 25398  002FEA  5027               	movf	i2printf@c,w,c
 25399  002FEC  5E28               	subwf	i2printf@width,f,c
 25400  002FEE  0E00               	movlw	0
 25401  002FF0  BE27               	btfsc	i2printf@c,7,c
 25402  002FF2  0EFF               	movlw	255
 25403  002FF4  5A29               	subwfb	i2printf@width+1,f,c
 25404  002FF6  D004               	goto	i2l7362
 25405  002FF8                     i2l7360:
 25406                           
 25407                           ;doprnt.c: 1383: else
 25408                           ;doprnt.c: 1384: width = 0;
 25409  002FF8  0E00               	movlw	0
 25410  002FFA  6E29               	movwf	i2printf@width+1,c
 25411  002FFC  0E00               	movlw	0
 25412  002FFE  6E28               	movwf	i2printf@width,c
 25413  003000                     i2l7362:
 25414                           
 25415                           ;doprnt.c: 1387: if(flag & 0x04) {
 25416  003000  A426               	btfss	i2printf@flag,2,c
 25417  003002  D014               	goto	i2l7374
 25418                           
 25419                           ;doprnt.c: 1392: if(flag & 0x03)
 25420  003004  C026  F019         	movff	i2printf@flag,??i2_printf
 25421  003008  0E03               	movlw	3
 25422  00300A  1619               	andwf	??i2_printf,f,c
 25423  00300C  B4D8               	btfsc	status,2,c
 25424  00300E  D003               	goto	i2l7368
 25425                           
 25426                           ;doprnt.c: 1393: (putch('-') );
 25427  003010  0E2D               	movlw	45
 25428  003012  EC6B  F030         	call	i2_putch
 25429  003016                     i2l7368:
 25430                           
 25431                           ;doprnt.c: 1415: if(width)
 25432  003016  5028               	movf	i2printf@width,w,c
 25433  003018  1029               	iorwf	i2printf@width+1,w,c
 25434  00301A  B4D8               	btfsc	status,2,c
 25435  00301C  D01E               	goto	i2l7384
 25436                           
 25437                           ;doprnt.c: 1417: (putch('0') );
 25438                           
 25439                           ;doprnt.c: 1416: do
 25440  00301E  0E30               	movlw	48
 25441  003020  EC6B  F030         	call	i2_putch
 25442                           
 25443                           ;doprnt.c: 1418: while(--width);
 25444  003024  0628               	decf	i2printf@width,f,c
 25445  003026  A0D8               	btfss	status,0,c
 25446  003028  0629               	decf	i2printf@width+1,f,c
 25447  00302A  D7F5               	goto	i2l7368
 25448  00302C                     i2l7374:
 25449                           
 25450                           ;doprnt.c: 1422: {
 25451                           ;doprnt.c: 1424: if(width
 25452                           ;doprnt.c: 1428: )
 25453  00302C  5028               	movf	i2printf@width,w,c
 25454  00302E  1029               	iorwf	i2printf@width+1,w,c
 25455  003030  B4D8               	btfsc	status,2,c
 25456  003032  D00A               	goto	i2l7380
 25457  003034                     i2l7376:
 25458                           
 25459                           ;doprnt.c: 1430: (putch(' ') );
 25460  003034  0E20               	movlw	32
 25461  003036  EC6B  F030         	call	i2_putch
 25462                           
 25463                           ;doprnt.c: 1431: while(--width);
 25464  00303A  0628               	decf	i2printf@width,f,c
 25465  00303C  A0D8               	btfss	status,0,c
 25466  00303E  0629               	decf	i2printf@width+1,f,c
 25467  003040  5028               	movf	i2printf@width,w,c
 25468  003042  1029               	iorwf	i2printf@width+1,w,c
 25469  003044  A4D8               	btfss	status,2,c
 25470  003046  D7F6               	goto	i2l7376
 25471  003048                     i2l7380:
 25472                           
 25473                           ;doprnt.c: 1438: if(flag & 0x03)
 25474  003048  C026  F019         	movff	i2printf@flag,??i2_printf
 25475  00304C  0E03               	movlw	3
 25476  00304E  1619               	andwf	??i2_printf,f,c
 25477  003050  B4D8               	btfsc	status,2,c
 25478  003052  D003               	goto	i2l7384
 25479                           
 25480                           ;doprnt.c: 1439: (putch('-') );
 25481  003054  0E2D               	movlw	45
 25482  003056  EC6B  F030         	call	i2_putch
 25483  00305A                     i2l7384:
 25484                           
 25485                           ;doprnt.c: 1469: }
 25486                           ;doprnt.c: 1472: prec = c;
 25487  00305A  C027  F01D         	movff	i2printf@c,i2printf@prec
 25488                           
 25489                           ;doprnt.c: 1474: while(prec--) {
 25490  00305E  D027               	goto	i2l7390
 25491  003060                     i2l7386:
 25492                           
 25493                           ;doprnt.c: 1478: {
 25494                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 25495  003060  501D               	movf	i2printf@prec,w,c
 25496  003062  0D02               	mullw	2
 25497  003064  0EB8               	movlw	low _dpowers
 25498  003066  24F3               	addwf	prodl,w,c
 25499  003068  6EF6               	movwf	tblptrl,c
 25500  00306A  0EFA               	movlw	high _dpowers
 25501  00306C  20F4               	addwfc	prodh,w,c
 25502  00306E  6EF7               	movwf	tblptrh,c
 25503  003070                     	if	1	;There are 3 active tblptr bytes
 25504  003070  6AF8               	clrf	tblptru,c
 25505  003072  0E00               	movlw	low (__mediumconst shr (0+16))
 25506  003074  22F8               	addwfc	tblptru,f,c
 25507  003076                     	endif
 25508  003076  0009               	tblrd		*+
 25509  003078  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 25510  00307C  000A               	tblrd		*-
 25511  00307E  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 25512  003082  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 25513  003086  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 25514  00308A  EC6A  F02C         	call	i2___lwdiv	;wreg free
 25515  00308E  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 25516  003092  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 25517  003096  0E00               	movlw	0
 25518  003098  6E04               	movwf	i2___lwmod@divisor+1,c
 25519  00309A  0E0A               	movlw	10
 25520  00309C  6E03               	movwf	i2___lwmod@divisor,c
 25521  00309E  EC4B  F02D         	call	i2___lwmod	;wreg free
 25522  0030A2  5001               	movf	?i2___lwmod,w,c
 25523  0030A4  0F30               	addlw	48
 25524  0030A6  6E27               	movwf	i2printf@c,c
 25525                           
 25526                           ;doprnt.c: 1523: }
 25527                           ;doprnt.c: 1524: (putch(c) );
 25528  0030A8  5027               	movf	i2printf@c,w,c
 25529  0030AA  EC6B  F030         	call	i2_putch
 25530  0030AE                     i2l7390:
 25531  0030AE  061D               	decf	i2printf@prec,f,c
 25532  0030B0  281D               	incf	i2printf@prec,w,c
 25533  0030B2  A4D8               	btfss	status,2,c
 25534  0030B4  D7D5               	goto	i2l7386
 25535  0030B6                     i2l7392:
 25536  0030B6  C00D  FFF6         	movff	i2printf@f,tblptrl
 25537  0030BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25538  0030BE  4A0D               	infsnz	i2printf@f,f,c
 25539  0030C0  2A0E               	incf	i2printf@f+1,f,c
 25540  0030C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25541  0030C2  6AF8               	clrf	tblptru,c
 25542  0030C4                     	endif
 25543  0030C4                     	if	0	;tblptru may be non-zero
 25544  0030C4                     	endif
 25545  0030C4  0008               	tblrd		*
 25546  0030C6  CFF5 F027          	movff	tablat,i2printf@c
 25547  0030CA  5027               	movf	i2printf@c,w,c
 25548  0030CC  B4D8               	btfsc	status,2,c
 25549  0030CE  0012               	return	
 25550  0030D0  D64E               	goto	i2l7262
 25551  0030D2                     __end_ofi2_printf:
 25552                           	opt stack 0
 25553                           pclatu	equ	0xFFB
 25554                           pclath	equ	0xFFA
 25555                           tblptru	equ	0xFF8
 25556                           tblptrh	equ	0xFF7
 25557                           tblptrl	equ	0xFF6
 25558                           tablat	equ	0xFF5
 25559                           prodh	equ	0xFF4
 25560                           prodl	equ	0xFF3
 25561                           intcon	equ	0xFF2
 25562                           intcon2	equ	0xFF1
 25563                           intcon3	equ	0xFF0
 25564                           indf0	equ	0xFEF
 25565                           postinc0	equ	0xFEE
 25566                           fsr0h	equ	0xFEA
 25567                           fsr0l	equ	0xFE9
 25568                           wreg	equ	0xFE8
 25569                           postdec1	equ	0xFE5
 25570                           fsr1h	equ	0xFE2
 25571                           fsr1l	equ	0xFE1
 25572                           indf2	equ	0xFDF
 25573                           postinc2	equ	0xFDE
 25574                           postdec2	equ	0xFDD
 25575                           fsr2h	equ	0xFDA
 25576                           fsr2l	equ	0xFD9
 25577                           status	equ	0xFD8
 25578                           
 25579 ;; *************** function i2_putch *****************
 25580 ;; Defined at:
 25581 ;;		line 20 in file "lcd.c"
 25582 ;; Parameters:    Size  Location     Type
 25583 ;;  data            1    wreg     unsigned char 
 25584 ;; Auto vars:     Size  Location     Type
 25585 ;;  data            1    2[COMRAM] unsigned char 
 25586 ;; Return value:  Size  Location     Type
 25587 ;;                  1    wreg      void 
 25588 ;; Registers used:
 25589 ;;		wreg, status,2, status,0, cstack
 25590 ;; Tracked objects:
 25591 ;;		On entry : 0/0
 25592 ;;		On exit  : 0/0
 25593 ;;		Unchanged: 0/0
 25594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25598 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25599 ;;Total ram usage:        1 bytes
 25600 ;; Hardware stack levels used:    1
 25601 ;; Hardware stack levels required when called:    1
 25602 ;; This function calls:
 25603 ;;		i2_lcdNibble
 25604 ;; This function is called by:
 25605 ;;		i2_printf
 25606 ;; This function uses a non-reentrant model
 25607 ;;
 25608                           
 25609                           	psect	text88
 25610  0060D6                     __ptext88:
 25611                           	opt stack 0
 25612  0060D6                     i2_putch:
 25613                           	opt stack 20
 25614                           
 25615                           ;incstack = 0
 25616                           ;i2putch@data stored from wreg
 25617  0060D6  6E03               	movwf	i2putch@data,c
 25618                           
 25619                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 25620  0060D8  848C               	bsf	3980,2,c	;volatile
 25621                           
 25622                           ;lcd.c: 22: lcdNibble(data);
 25623  0060DA  5003               	movf	i2putch@data,w,c
 25624  0060DC  EC3D  F02C         	call	i2_lcdNibble
 25625  0060E0  0012               	return		;funcret
 25626  0060E2                     __end_ofi2_putch:
 25627                           	opt stack 0
 25628                           pclatu	equ	0xFFB
 25629                           pclath	equ	0xFFA
 25630                           tblptru	equ	0xFF8
 25631                           tblptrh	equ	0xFF7
 25632                           tblptrl	equ	0xFF6
 25633                           tablat	equ	0xFF5
 25634                           prodh	equ	0xFF4
 25635                           prodl	equ	0xFF3
 25636                           intcon	equ	0xFF2
 25637                           intcon2	equ	0xFF1
 25638                           intcon3	equ	0xFF0
 25639                           indf0	equ	0xFEF
 25640                           postinc0	equ	0xFEE
 25641                           fsr0h	equ	0xFEA
 25642                           fsr0l	equ	0xFE9
 25643                           wreg	equ	0xFE8
 25644                           postdec1	equ	0xFE5
 25645                           fsr1h	equ	0xFE2
 25646                           fsr1l	equ	0xFE1
 25647                           indf2	equ	0xFDF
 25648                           postinc2	equ	0xFDE
 25649                           postdec2	equ	0xFDD
 25650                           fsr2h	equ	0xFDA
 25651                           fsr2l	equ	0xFD9
 25652                           status	equ	0xFD8
 25653                           
 25654 ;; *************** function i2_isdigit *****************
 25655 ;; Defined at:
 25656 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 25657 ;; Parameters:    Size  Location     Type
 25658 ;;  c               1    wreg     unsigned char 
 25659 ;; Auto vars:     Size  Location     Type
 25660 ;;  c               1    2[COMRAM] unsigned char 
 25661 ;; Return value:  Size  Location     Type
 25662 ;;		None               void
 25663 ;; Registers used:
 25664 ;;		wreg, status,2, status,0
 25665 ;; Tracked objects:
 25666 ;;		On entry : 0/0
 25667 ;;		On exit  : 0/0
 25668 ;;		Unchanged: 0/0
 25669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25673 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25674 ;;Total ram usage:        3 bytes
 25675 ;; Hardware stack levels used:    1
 25676 ;; This function calls:
 25677 ;;		Nothing
 25678 ;; This function is called by:
 25679 ;;		i2_printf
 25680 ;; This function uses a non-reentrant model
 25681 ;;
 25682                           
 25683                           	psect	text89
 25684  006012                     __ptext89:
 25685                           	opt stack 0
 25686  006012                     i2_isdigit:
 25687                           	opt stack 21
 25688                           
 25689                           ;incstack = 0
 25690                           ;i2isdigit@c stored from wreg
 25691  006012  6E03               	movwf	i2isdigit@c,c
 25692  006014  0E00               	movlw	0
 25693  006016  6E02               	movwf	i2_isdigit$2081,c
 25694  006018  0E3A               	movlw	58
 25695  00601A  6003               	cpfslt	i2isdigit@c,c
 25696  00601C  D005               	goto	i2l6916
 25697  00601E  0E2F               	movlw	47
 25698  006020  6403               	cpfsgt	i2isdigit@c,c
 25699  006022  D002               	goto	i2l6916
 25700  006024  0E01               	movlw	1
 25701  006026  6E02               	movwf	i2_isdigit$2081,c
 25702  006028                     i2l6916:
 25703  006028  C002  F001         	movff	i2_isdigit$2081,??i2_isdigit
 25704  00602C  3001               	rrcf	??i2_isdigit,w,c
 25705  00602E  0012               	return	
 25706  006030                     __end_ofi2_isdigit:
 25707                           	opt stack 0
 25708                           pclatu	equ	0xFFB
 25709                           pclath	equ	0xFFA
 25710                           tblptru	equ	0xFF8
 25711                           tblptrh	equ	0xFF7
 25712                           tblptrl	equ	0xFF6
 25713                           tablat	equ	0xFF5
 25714                           prodh	equ	0xFF4
 25715                           prodl	equ	0xFF3
 25716                           intcon	equ	0xFF2
 25717                           intcon2	equ	0xFF1
 25718                           intcon3	equ	0xFF0
 25719                           indf0	equ	0xFEF
 25720                           postinc0	equ	0xFEE
 25721                           fsr0h	equ	0xFEA
 25722                           fsr0l	equ	0xFE9
 25723                           wreg	equ	0xFE8
 25724                           postdec1	equ	0xFE5
 25725                           fsr1h	equ	0xFE2
 25726                           fsr1l	equ	0xFE1
 25727                           indf2	equ	0xFDF
 25728                           postinc2	equ	0xFDE
 25729                           postdec2	equ	0xFDD
 25730                           fsr2h	equ	0xFDA
 25731                           fsr2l	equ	0xFD9
 25732                           status	equ	0xFD8
 25733                           
 25734 ;; *************** function i2___wmul *****************
 25735 ;; Defined at:
 25736 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 25737 ;; Parameters:    Size  Location     Type
 25738 ;;  multiplier      2    0[COMRAM] unsigned int 
 25739 ;;  multiplicand    2    2[COMRAM] unsigned int 
 25740 ;; Auto vars:     Size  Location     Type
 25741 ;;  __wmul          2    4[COMRAM] unsigned int 
 25742 ;; Return value:  Size  Location     Type
 25743 ;;                  2    0[COMRAM] unsigned int 
 25744 ;; Registers used:
 25745 ;;		wreg, status,2, status,0, prodl, prodh
 25746 ;; Tracked objects:
 25747 ;;		On entry : 0/0
 25748 ;;		On exit  : 0/0
 25749 ;;		Unchanged: 0/0
 25750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25751 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25752 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25754 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25755 ;;Total ram usage:        6 bytes
 25756 ;; Hardware stack levels used:    1
 25757 ;; This function calls:
 25758 ;;		Nothing
 25759 ;; This function is called by:
 25760 ;;		_printSortTimer
 25761 ;;		_retrieveLog
 25762 ;;		i2_printf
 25763 ;; This function uses a non-reentrant model
 25764 ;;
 25765                           
 25766                           	psect	text90
 25767  005F5E                     __ptext90:
 25768                           	opt stack 0
 25769  005F5E                     i2___wmul:
 25770                           	opt stack 21
 25771                           
 25772                           ;incstack = 0
 25773  005F5E  5001               	movf	i2___wmul@multiplier,w,c
 25774  005F60  0203               	mulwf	i2___wmul@multiplicand,c
 25775  005F62  CFF3 F005          	movff	prodl,i2___wmul@product
 25776  005F66  CFF4 F006          	movff	prodh,i2___wmul@product+1
 25777  005F6A  5001               	movf	i2___wmul@multiplier,w,c
 25778  005F6C  0204               	mulwf	i2___wmul@multiplicand+1,c
 25779  005F6E  50F3               	movf	prodl,w,c
 25780  005F70  2606               	addwf	i2___wmul@product+1,f,c
 25781  005F72  5002               	movf	i2___wmul@multiplier+1,w,c
 25782  005F74  0203               	mulwf	i2___wmul@multiplicand,c
 25783  005F76  50F3               	movf	prodl,w,c
 25784  005F78  2606               	addwf	i2___wmul@product+1,f,c
 25785  005F7A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 25786  005F7E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 25787  005F82  0012               	return	
 25788  005F84                     __end_ofi2___wmul:
 25789                           	opt stack 0
 25790                           pclatu	equ	0xFFB
 25791                           pclath	equ	0xFFA
 25792                           tblptru	equ	0xFF8
 25793                           tblptrh	equ	0xFF7
 25794                           tblptrl	equ	0xFF6
 25795                           tablat	equ	0xFF5
 25796                           prodh	equ	0xFF4
 25797                           prodl	equ	0xFF3
 25798                           intcon	equ	0xFF2
 25799                           intcon2	equ	0xFF1
 25800                           intcon3	equ	0xFF0
 25801                           indf0	equ	0xFEF
 25802                           postinc0	equ	0xFEE
 25803                           fsr0h	equ	0xFEA
 25804                           fsr0l	equ	0xFE9
 25805                           wreg	equ	0xFE8
 25806                           postdec1	equ	0xFE5
 25807                           fsr1h	equ	0xFE2
 25808                           fsr1l	equ	0xFE1
 25809                           indf2	equ	0xFDF
 25810                           postinc2	equ	0xFDE
 25811                           postdec2	equ	0xFDD
 25812                           fsr2h	equ	0xFDA
 25813                           fsr2l	equ	0xFD9
 25814                           status	equ	0xFD8
 25815                           
 25816 ;; *************** function i2___lwmod *****************
 25817 ;; Defined at:
 25818 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 25819 ;; Parameters:    Size  Location     Type
 25820 ;;  dividend        2    0[COMRAM] unsigned int 
 25821 ;;  divisor         2    2[COMRAM] unsigned int 
 25822 ;; Auto vars:     Size  Location     Type
 25823 ;;  __lwmod         1    4[COMRAM] unsigned char 
 25824 ;; Return value:  Size  Location     Type
 25825 ;;                  2    0[COMRAM] unsigned int 
 25826 ;; Registers used:
 25827 ;;		wreg, status,2, status,0
 25828 ;; Tracked objects:
 25829 ;;		On entry : 0/0
 25830 ;;		On exit  : 0/0
 25831 ;;		Unchanged: 0/0
 25832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25833 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25834 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25836 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25837 ;;Total ram usage:        5 bytes
 25838 ;; Hardware stack levels used:    1
 25839 ;; This function calls:
 25840 ;;		Nothing
 25841 ;; This function is called by:
 25842 ;;		_printSortTimer
 25843 ;;		i2_printf
 25844 ;; This function uses a non-reentrant model
 25845 ;;
 25846                           
 25847                           	psect	text91
 25848  005A96                     __ptext91:
 25849                           	opt stack 0
 25850  005A96                     i2___lwmod:
 25851                           	opt stack 21
 25852                           
 25853                           ;incstack = 0
 25854  005A96  5003               	movf	i2___lwmod@divisor,w,c
 25855  005A98  1004               	iorwf	i2___lwmod@divisor+1,w,c
 25856  005A9A  B4D8               	btfsc	status,2,c
 25857  005A9C  D018               	goto	i2l2043
 25858  005A9E  0E01               	movlw	1
 25859  005AA0  6E05               	movwf	i2___lwmod@counter,c
 25860  005AA2  D004               	goto	i2l6948
 25861  005AA4                     i2l6946:
 25862  005AA4  90D8               	bcf	status,0,c
 25863  005AA6  3603               	rlcf	i2___lwmod@divisor,f,c
 25864  005AA8  3604               	rlcf	i2___lwmod@divisor+1,f,c
 25865  005AAA  2A05               	incf	i2___lwmod@counter,f,c
 25866  005AAC                     i2l6948:
 25867  005AAC  AE04               	btfss	i2___lwmod@divisor+1,7,c
 25868  005AAE  D7FA               	goto	i2l6946
 25869  005AB0                     i2l6950:
 25870  005AB0  5003               	movf	i2___lwmod@divisor,w,c
 25871  005AB2  5C01               	subwf	i2___lwmod@dividend,w,c
 25872  005AB4  5004               	movf	i2___lwmod@divisor+1,w,c
 25873  005AB6  5802               	subwfb	i2___lwmod@dividend+1,w,c
 25874  005AB8  A0D8               	btfss	status,0,c
 25875  005ABA  D004               	goto	i2l6954
 25876  005ABC  5003               	movf	i2___lwmod@divisor,w,c
 25877  005ABE  5E01               	subwf	i2___lwmod@dividend,f,c
 25878  005AC0  5004               	movf	i2___lwmod@divisor+1,w,c
 25879  005AC2  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 25880  005AC4                     i2l6954:
 25881  005AC4  90D8               	bcf	status,0,c
 25882  005AC6  3204               	rrcf	i2___lwmod@divisor+1,f,c
 25883  005AC8  3203               	rrcf	i2___lwmod@divisor,f,c
 25884  005ACA  2E05               	decfsz	i2___lwmod@counter,f,c
 25885  005ACC  D7F1               	goto	i2l6950
 25886  005ACE                     i2l2043:
 25887  005ACE  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 25888  005AD2  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 25889  005AD6  0012               	return		;funcret
 25890  005AD8                     __end_ofi2___lwmod:
 25891                           	opt stack 0
 25892                           pclatu	equ	0xFFB
 25893                           pclath	equ	0xFFA
 25894                           tblptru	equ	0xFF8
 25895                           tblptrh	equ	0xFF7
 25896                           tblptrl	equ	0xFF6
 25897                           tablat	equ	0xFF5
 25898                           prodh	equ	0xFF4
 25899                           prodl	equ	0xFF3
 25900                           intcon	equ	0xFF2
 25901                           intcon2	equ	0xFF1
 25902                           intcon3	equ	0xFF0
 25903                           indf0	equ	0xFEF
 25904                           postinc0	equ	0xFEE
 25905                           fsr0h	equ	0xFEA
 25906                           fsr0l	equ	0xFE9
 25907                           wreg	equ	0xFE8
 25908                           postdec1	equ	0xFE5
 25909                           fsr1h	equ	0xFE2
 25910                           fsr1l	equ	0xFE1
 25911                           indf2	equ	0xFDF
 25912                           postinc2	equ	0xFDE
 25913                           postdec2	equ	0xFDD
 25914                           fsr2h	equ	0xFDA
 25915                           fsr2l	equ	0xFD9
 25916                           status	equ	0xFD8
 25917                           
 25918 ;; *************** function i2___lwdiv *****************
 25919 ;; Defined at:
 25920 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25921 ;; Parameters:    Size  Location     Type
 25922 ;;  dividend        2    5[COMRAM] unsigned int 
 25923 ;;  divisor         2    7[COMRAM] unsigned int 
 25924 ;; Auto vars:     Size  Location     Type
 25925 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25926 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25927 ;; Return value:  Size  Location     Type
 25928 ;;                  2    5[COMRAM] unsigned int 
 25929 ;; Registers used:
 25930 ;;		wreg, status,2, status,0
 25931 ;; Tracked objects:
 25932 ;;		On entry : 0/0
 25933 ;;		On exit  : 0/0
 25934 ;;		Unchanged: 0/0
 25935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25936 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25937 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25939 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25940 ;;Total ram usage:        7 bytes
 25941 ;; Hardware stack levels used:    1
 25942 ;; This function calls:
 25943 ;;		Nothing
 25944 ;; This function is called by:
 25945 ;;		_printSortTimer
 25946 ;;		i2_printf
 25947 ;; This function uses a non-reentrant model
 25948 ;;
 25949                           
 25950                           	psect	text92
 25951  0058D4                     __ptext92:
 25952                           	opt stack 0
 25953  0058D4                     i2___lwdiv:
 25954                           	opt stack 21
 25955                           
 25956                           ;incstack = 0
 25957  0058D4  0E00               	movlw	0
 25958  0058D6  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25959  0058D8  0E00               	movlw	0
 25960  0058DA  6E0A               	movwf	i2___lwdiv@quotient,c
 25961  0058DC  5008               	movf	i2___lwdiv@divisor,w,c
 25962  0058DE  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25963  0058E0  B4D8               	btfsc	status,2,c
 25964  0058E2  D01C               	goto	i2l2033
 25965  0058E4  0E01               	movlw	1
 25966  0058E6  6E0C               	movwf	i2___lwdiv@counter,c
 25967  0058E8  D004               	goto	i2l6928
 25968  0058EA                     i2l6926:
 25969  0058EA  90D8               	bcf	status,0,c
 25970  0058EC  3608               	rlcf	i2___lwdiv@divisor,f,c
 25971  0058EE  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25972  0058F0  2A0C               	incf	i2___lwdiv@counter,f,c
 25973  0058F2                     i2l6928:
 25974  0058F2  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25975  0058F4  D7FA               	goto	i2l6926
 25976  0058F6                     i2l6930:
 25977  0058F6  90D8               	bcf	status,0,c
 25978  0058F8  360A               	rlcf	i2___lwdiv@quotient,f,c
 25979  0058FA  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25980  0058FC  5008               	movf	i2___lwdiv@divisor,w,c
 25981  0058FE  5C06               	subwf	i2___lwdiv@dividend,w,c
 25982  005900  5009               	movf	i2___lwdiv@divisor+1,w,c
 25983  005902  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25984  005904  A0D8               	btfss	status,0,c
 25985  005906  D005               	goto	i2l6938
 25986  005908  5008               	movf	i2___lwdiv@divisor,w,c
 25987  00590A  5E06               	subwf	i2___lwdiv@dividend,f,c
 25988  00590C  5009               	movf	i2___lwdiv@divisor+1,w,c
 25989  00590E  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25990  005910  800A               	bsf	i2___lwdiv@quotient,0,c
 25991  005912                     i2l6938:
 25992  005912  90D8               	bcf	status,0,c
 25993  005914  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25994  005916  3208               	rrcf	i2___lwdiv@divisor,f,c
 25995  005918  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25996  00591A  D7ED               	goto	i2l6930
 25997  00591C                     i2l2033:
 25998  00591C  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25999  005920  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 26000  005924  0012               	return		;funcret
 26001  005926                     __end_ofi2___lwdiv:
 26002                           	opt stack 0
 26003                           pclatu	equ	0xFFB
 26004                           pclath	equ	0xFFA
 26005                           tblptru	equ	0xFF8
 26006                           tblptrh	equ	0xFF7
 26007                           tblptrl	equ	0xFF6
 26008                           tablat	equ	0xFF5
 26009                           prodh	equ	0xFF4
 26010                           prodl	equ	0xFF3
 26011                           intcon	equ	0xFF2
 26012                           intcon2	equ	0xFF1
 26013                           intcon3	equ	0xFF0
 26014                           indf0	equ	0xFEF
 26015                           postinc0	equ	0xFEE
 26016                           fsr0h	equ	0xFEA
 26017                           fsr0l	equ	0xFE9
 26018                           wreg	equ	0xFE8
 26019                           postdec1	equ	0xFE5
 26020                           fsr1h	equ	0xFE2
 26021                           fsr1l	equ	0xFE1
 26022                           indf2	equ	0xFDF
 26023                           postinc2	equ	0xFDE
 26024                           postdec2	equ	0xFDD
 26025                           fsr2h	equ	0xFDA
 26026                           fsr2l	equ	0xFD9
 26027                           status	equ	0xFD8
 26028                           
 26029 ;; *************** function i2_lcdInst *****************
 26030 ;; Defined at:
 26031 ;;		line 15 in file "lcd.c"
 26032 ;; Parameters:    Size  Location     Type
 26033 ;;  data            1    wreg     unsigned char 
 26034 ;; Auto vars:     Size  Location     Type
 26035 ;;  data            1    2[COMRAM] unsigned char 
 26036 ;; Return value:  Size  Location     Type
 26037 ;;                  1    wreg      void 
 26038 ;; Registers used:
 26039 ;;		wreg, status,2, status,0, cstack
 26040 ;; Tracked objects:
 26041 ;;		On entry : 0/0
 26042 ;;		On exit  : 0/0
 26043 ;;		Unchanged: 0/0
 26044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26048 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26049 ;;Total ram usage:        1 bytes
 26050 ;; Hardware stack levels used:    1
 26051 ;; Hardware stack levels required when called:    1
 26052 ;; This function calls:
 26053 ;;		i2_lcdNibble
 26054 ;; This function is called by:
 26055 ;;		_change_state_to_menu_11
 26056 ;;		_change_state_to_menu_23
 26057 ;;		_change_state_to_logs_11
 26058 ;;		_change_state_to_logs_12
 26059 ;;		_change_state_to_logs_22
 26060 ;;		_change_state_to_logs_23
 26061 ;;		_change_state_to_logs_33
 26062 ;;		_change_state_to_logs_34
 26063 ;;		_printSortTimer
 26064 ;;		i2_change_state_to_menu_start
 26065 ;;		i2_change_state_to_menu_12
 26066 ;;		i2_change_state_to_menu_22
 26067 ;;		i2_printRTC
 26068 ;; This function uses a non-reentrant model
 26069 ;;
 26070                           
 26071                           	psect	text93
 26072  0060E2                     __ptext93:
 26073                           	opt stack 0
 26074  0060E2                     i2_lcdInst:
 26075                           	opt stack 20
 26076                           
 26077                           ;incstack = 0
 26078                           ;i2lcdInst@data stored from wreg
 26079  0060E2  6E03               	movwf	i2lcdInst@data,c
 26080                           
 26081                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 26082  0060E4  948C               	bcf	3980,2,c	;volatile
 26083                           
 26084                           ;lcd.c: 17: lcdNibble(data);
 26085  0060E6  5003               	movf	i2lcdInst@data,w,c
 26086  0060E8  EC3D  F02C         	call	i2_lcdNibble
 26087  0060EC  0012               	return		;funcret
 26088  0060EE                     __end_ofi2_lcdInst:
 26089                           	opt stack 0
 26090                           pclatu	equ	0xFFB
 26091                           pclath	equ	0xFFA
 26092                           tblptru	equ	0xFF8
 26093                           tblptrh	equ	0xFF7
 26094                           tblptrl	equ	0xFF6
 26095                           tablat	equ	0xFF5
 26096                           prodh	equ	0xFF4
 26097                           prodl	equ	0xFF3
 26098                           intcon	equ	0xFF2
 26099                           intcon2	equ	0xFF1
 26100                           intcon3	equ	0xFF0
 26101                           indf0	equ	0xFEF
 26102                           postinc0	equ	0xFEE
 26103                           fsr0h	equ	0xFEA
 26104                           fsr0l	equ	0xFE9
 26105                           wreg	equ	0xFE8
 26106                           postdec1	equ	0xFE5
 26107                           fsr1h	equ	0xFE2
 26108                           fsr1l	equ	0xFE1
 26109                           indf2	equ	0xFDF
 26110                           postinc2	equ	0xFDE
 26111                           postdec2	equ	0xFDD
 26112                           fsr2h	equ	0xFDA
 26113                           fsr2l	equ	0xFD9
 26114                           status	equ	0xFD8
 26115                           
 26116 ;; *************** function i2_lcdNibble *****************
 26117 ;; Defined at:
 26118 ;;		line 25 in file "lcd.c"
 26119 ;; Parameters:    Size  Location     Type
 26120 ;;  data            1    wreg     unsigned char 
 26121 ;; Auto vars:     Size  Location     Type
 26122 ;;  data            1    1[COMRAM] unsigned char 
 26123 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 26124 ;; Return value:  Size  Location     Type
 26125 ;;                  1    wreg      void 
 26126 ;; Registers used:
 26127 ;;		wreg, status,2, status,0
 26128 ;; Tracked objects:
 26129 ;;		On entry : 0/0
 26130 ;;		On exit  : 0/0
 26131 ;;		Unchanged: 0/0
 26132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26134 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26136 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26137 ;;Total ram usage:        2 bytes
 26138 ;; Hardware stack levels used:    1
 26139 ;; This function calls:
 26140 ;;		Nothing
 26141 ;; This function is called by:
 26142 ;;		i2_lcdInst
 26143 ;;		i2_putch
 26144 ;; This function uses a non-reentrant model
 26145 ;;
 26146                           
 26147                           	psect	text94
 26148  00587A                     __ptext94:
 26149                           	opt stack 0
 26150  00587A                     i2_lcdNibble:
 26151                           	opt stack 20
 26152                           
 26153                           ;incstack = 0
 26154                           ;i2lcdNibble@data stored from wreg
 26155  00587A  6E02               	movwf	i2lcdNibble@data,c
 26156                           
 26157                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 26158  00587C  9EF2               	bcf	intcon,7,c	;volatile
 26159                           
 26160                           ;lcd.c: 28: char temp = data & 0xF0;
 26161  00587E  5002               	movf	i2lcdNibble@data,w,c
 26162  005880  0BF0               	andlw	240
 26163  005882  6E01               	movwf	i2lcdNibble@temp,c
 26164                           
 26165                           ;lcd.c: 29: LATD = LATD & 0x0F;
 26166  005884  508C               	movf	3980,w,c	;volatile
 26167  005886  0B0F               	andlw	15
 26168  005888  6E8C               	movwf	3980,c	;volatile
 26169                           
 26170                           ;lcd.c: 30: LATD = temp | LATD;
 26171  00588A  5001               	movf	i2lcdNibble@temp,w,c
 26172  00588C  108C               	iorwf	3980,w,c	;volatile
 26173  00588E  6E8C               	movwf	3980,c	;volatile
 26174                           
 26175                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 26176  005890  868C               	bsf	3980,3,c	;volatile
 26177                           
 26178                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26179  005892  0E42               	movlw	66
 26180  005894                     i2u1249_47:
 26181  005894  2EE8               	decfsz	wreg,f,c
 26182  005896  D7FE               	bra	i2u1249_47
 26183  005898  D000               	nop2	
 26184                           
 26185                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 26186  00589A  968C               	bcf	3980,3,c	;volatile
 26187                           
 26188                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26189  00589C  0E42               	movlw	66
 26190  00589E                     i2u1250_47:
 26191  00589E  2EE8               	decfsz	wreg,f,c
 26192  0058A0  D7FE               	bra	i2u1250_47
 26193  0058A2  D000               	nop2	
 26194                           
 26195                           ;lcd.c: 37: data = data << 4;
 26196  0058A4  3802               	swapf	i2lcdNibble@data,w,c
 26197  0058A6  0BF0               	andlw	240
 26198  0058A8  6E02               	movwf	i2lcdNibble@data,c
 26199                           
 26200                           ;lcd.c: 39: temp = data & 0xF0;
 26201  0058AA  5002               	movf	i2lcdNibble@data,w,c
 26202  0058AC  0BF0               	andlw	240
 26203  0058AE  6E01               	movwf	i2lcdNibble@temp,c
 26204                           
 26205                           ;lcd.c: 40: LATD = LATD & 0x0F;
 26206  0058B0  508C               	movf	3980,w,c	;volatile
 26207  0058B2  0B0F               	andlw	15
 26208  0058B4  6E8C               	movwf	3980,c	;volatile
 26209                           
 26210                           ;lcd.c: 41: LATD = temp | LATD;
 26211  0058B6  5001               	movf	i2lcdNibble@temp,w,c
 26212  0058B8  108C               	iorwf	3980,w,c	;volatile
 26213  0058BA  6E8C               	movwf	3980,c	;volatile
 26214                           
 26215                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 26216  0058BC  868C               	bsf	3980,3,c	;volatile
 26217                           
 26218                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26219  0058BE  0E42               	movlw	66
 26220  0058C0                     i2u1251_47:
 26221  0058C0  2EE8               	decfsz	wreg,f,c
 26222  0058C2  D7FE               	bra	i2u1251_47
 26223  0058C4  D000               	nop2	
 26224                           
 26225                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 26226  0058C6  968C               	bcf	3980,3,c	;volatile
 26227                           
 26228                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26229  0058C8  0E42               	movlw	66
 26230  0058CA                     i2u1252_47:
 26231  0058CA  2EE8               	decfsz	wreg,f,c
 26232  0058CC  D7FE               	bra	i2u1252_47
 26233  0058CE  D000               	nop2	
 26234                           
 26235                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 26236  0058D0  8EF2               	bsf	intcon,7,c	;volatile
 26237  0058D2  0012               	return		;funcret
 26238  0058D4                     __end_ofi2_lcdNibble:
 26239                           	opt stack 0
 26240                           pclatu	equ	0xFFB
 26241                           pclath	equ	0xFFA
 26242                           tblptru	equ	0xFF8
 26243                           tblptrh	equ	0xFF7
 26244                           tblptrl	equ	0xFF6
 26245                           tablat	equ	0xFF5
 26246                           prodh	equ	0xFF4
 26247                           prodl	equ	0xFF3
 26248                           intcon	equ	0xFF2
 26249                           intcon2	equ	0xFF1
 26250                           intcon3	equ	0xFF0
 26251                           indf0	equ	0xFEF
 26252                           postinc0	equ	0xFEE
 26253                           fsr0h	equ	0xFEA
 26254                           fsr0l	equ	0xFE9
 26255                           wreg	equ	0xFE8
 26256                           postdec1	equ	0xFE5
 26257                           fsr1h	equ	0xFE2
 26258                           fsr1l	equ	0xFE1
 26259                           indf2	equ	0xFDF
 26260                           postinc2	equ	0xFDE
 26261                           postdec2	equ	0xFDD
 26262                           fsr2h	equ	0xFDA
 26263                           fsr2l	equ	0xFD9
 26264                           status	equ	0xFD8
 26265                           
 26266 ;; *************** function i2_getRTC *****************
 26267 ;; Defined at:
 26268 ;;		line 44 in file "RTC.c"
 26269 ;; Parameters:    Size  Location     Type
 26270 ;;		None
 26271 ;; Auto vars:     Size  Location     Type
 26272 ;;  getRTC          2    3[COMRAM] int 
 26273 ;; Return value:  Size  Location     Type
 26274 ;;                  1    wreg      void 
 26275 ;; Registers used:
 26276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26277 ;; Tracked objects:
 26278 ;;		On entry : 0/0
 26279 ;;		On exit  : 0/0
 26280 ;;		Unchanged: 0/0
 26281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26285 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26286 ;;Total ram usage:        2 bytes
 26287 ;; Hardware stack levels used:    1
 26288 ;; Hardware stack levels required when called:    2
 26289 ;; This function calls:
 26290 ;;		i2_I2C_Master_Read
 26291 ;;		i2_I2C_Master_Start
 26292 ;;		i2_I2C_Master_Stop
 26293 ;;		i2_I2C_Master_Write
 26294 ;; This function is called by:
 26295 ;;		_printSortTimer
 26296 ;;		i2_printRTC
 26297 ;; This function uses a non-reentrant model
 26298 ;;
 26299                           
 26300                           	psect	text95
 26301  00553A                     __ptext95:
 26302                           	opt stack 0
 26303  00553A                     i2_getRTC:
 26304                           	opt stack 19
 26305                           
 26306                           ;RTC.c: 48: I2C_Master_Start();
 26307                           
 26308                           ;incstack = 0
 26309  00553A  EC91  F030         	call	i2_I2C_Master_Start	;wreg free
 26310                           
 26311                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 26312  00553E  0E00               	movlw	0
 26313  005540  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26314  005542  0ED0               	movlw	208
 26315  005544  6E02               	movwf	i2I2C_Master_Write@d,c
 26316  005546  EC7C  F030         	call	i2_I2C_Master_Write	;wreg free
 26317                           
 26318                           ;RTC.c: 50: I2C_Master_Write(0x00);
 26319  00554A  0E00               	movlw	0
 26320  00554C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26321  00554E  0E00               	movlw	0
 26322  005550  6E02               	movwf	i2I2C_Master_Write@d,c
 26323  005552  EC7C  F030         	call	i2_I2C_Master_Write	;wreg free
 26324                           
 26325                           ;RTC.c: 51: I2C_Master_Stop();
 26326  005556  EC8D  F030         	call	i2_I2C_Master_Stop	;wreg free
 26327                           
 26328                           ;RTC.c: 54: I2C_Master_Start();
 26329  00555A  EC91  F030         	call	i2_I2C_Master_Start	;wreg free
 26330                           
 26331                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 26332  00555E  0E00               	movlw	0
 26333  005560  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26334  005562  0ED1               	movlw	209
 26335  005564  6E02               	movwf	i2I2C_Master_Write@d,c
 26336  005566  EC7C  F030         	call	i2_I2C_Master_Write	;wreg free
 26337                           
 26338                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 26339  00556A  0E00               	movlw	0
 26340  00556C  6E05               	movwf	i2getRTC@i+1,c
 26341  00556E  0E00               	movlw	0
 26342  005570  6E04               	movwf	i2getRTC@i,c
 26343  005572                     i2l7234:
 26344  005572  BE05               	btfsc	i2getRTC@i+1,7,c
 26345  005574  D006               	goto	i2l7238
 26346  005576  5005               	movf	i2getRTC@i+1,w,c
 26347  005578  E111               	bnz	i2l7244
 26348  00557A  0E06               	movlw	6
 26349  00557C  5C04               	subwf	i2getRTC@i,w,c
 26350  00557E  B0D8               	btfsc	status,0,c
 26351  005580  D00D               	goto	i2l7244
 26352  005582                     i2l7238:
 26353                           
 26354                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 26355  005582  0E24               	movlw	low _time
 26356  005584  2404               	addwf	i2getRTC@i,w,c
 26357  005586  6ED9               	movwf	fsr2l,c
 26358  005588  0E01               	movlw	high _time
 26359  00558A  2005               	addwfc	i2getRTC@i+1,w,c
 26360  00558C  6EDA               	movwf	fsr2h,c
 26361  00558E  0E01               	movlw	1
 26362  005590  ECC2  F02F         	call	i2_I2C_Master_Read
 26363  005594  6EDF               	movwf	indf2,c
 26364  005596  4A04               	infsnz	i2getRTC@i,f,c
 26365  005598  2A05               	incf	i2getRTC@i+1,f,c
 26366  00559A  D7EB               	goto	i2l7234
 26367  00559C                     i2l7244:
 26368                           
 26369                           ;RTC.c: 58: }
 26370                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 26371  00559C  0E00               	movlw	0
 26372  00559E  ECC2  F02F         	call	i2_I2C_Master_Read
 26373  0055A2  0101               	movlb	1	; () banked
 26374  0055A4  6F2A               	movwf	(_time+6)& (0+255),b
 26375                           
 26376                           ;RTC.c: 60: I2C_Master_Stop();
 26377  0055A6  EC8D  F030         	call	i2_I2C_Master_Stop	;wreg free
 26378  0055AA  0012               	return		;funcret
 26379  0055AC                     __end_ofi2_getRTC:
 26380                           	opt stack 0
 26381                           pclatu	equ	0xFFB
 26382                           pclath	equ	0xFFA
 26383                           tblptru	equ	0xFF8
 26384                           tblptrh	equ	0xFF7
 26385                           tblptrl	equ	0xFF6
 26386                           tablat	equ	0xFF5
 26387                           prodh	equ	0xFF4
 26388                           prodl	equ	0xFF3
 26389                           intcon	equ	0xFF2
 26390                           intcon2	equ	0xFF1
 26391                           intcon3	equ	0xFF0
 26392                           indf0	equ	0xFEF
 26393                           postinc0	equ	0xFEE
 26394                           fsr0h	equ	0xFEA
 26395                           fsr0l	equ	0xFE9
 26396                           wreg	equ	0xFE8
 26397                           postdec1	equ	0xFE5
 26398                           fsr1h	equ	0xFE2
 26399                           fsr1l	equ	0xFE1
 26400                           indf2	equ	0xFDF
 26401                           postinc2	equ	0xFDE
 26402                           postdec2	equ	0xFDD
 26403                           fsr2h	equ	0xFDA
 26404                           fsr2l	equ	0xFD9
 26405                           status	equ	0xFD8
 26406                           
 26407 ;; *************** function i2_I2C_Master_Write *****************
 26408 ;; Defined at:
 26409 ;;		line 49 in file "I2C.c"
 26410 ;; Parameters:    Size  Location     Type
 26411 ;;  d               2    1[COMRAM] unsigned int 
 26412 ;; Auto vars:     Size  Location     Type
 26413 ;;		None
 26414 ;; Return value:  Size  Location     Type
 26415 ;;                  1    wreg      void 
 26416 ;; Registers used:
 26417 ;;		wreg, status,2, status,0, cstack
 26418 ;; Tracked objects:
 26419 ;;		On entry : 0/0
 26420 ;;		On exit  : 0/0
 26421 ;;		Unchanged: 0/0
 26422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26426 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26427 ;;Total ram usage:        2 bytes
 26428 ;; Hardware stack levels used:    1
 26429 ;; Hardware stack levels required when called:    1
 26430 ;; This function calls:
 26431 ;;		i2_I2C_Master_Wait
 26432 ;; This function is called by:
 26433 ;;		i2_getRTC
 26434 ;; This function uses a non-reentrant model
 26435 ;;
 26436                           
 26437                           	psect	text96
 26438  0060F8                     __ptext96:
 26439                           	opt stack 0
 26440  0060F8                     i2_I2C_Master_Write:
 26441                           	opt stack 19
 26442                           
 26443                           ;I2C.c: 51: I2C_Master_Wait();
 26444                           
 26445                           ;incstack = 0
 26446  0060F8  EC52  F030         	call	i2_I2C_Master_Wait	;wreg free
 26447                           
 26448                           ;I2C.c: 52: SSPBUF = d;
 26449  0060FC  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 26450  006100  0012               	return		;funcret
 26451  006102                     __end_ofi2_I2C_Master_Write:
 26452                           	opt stack 0
 26453                           pclatu	equ	0xFFB
 26454                           pclath	equ	0xFFA
 26455                           tblptru	equ	0xFF8
 26456                           tblptrh	equ	0xFF7
 26457                           tblptrl	equ	0xFF6
 26458                           tablat	equ	0xFF5
 26459                           prodh	equ	0xFF4
 26460                           prodl	equ	0xFF3
 26461                           intcon	equ	0xFF2
 26462                           intcon2	equ	0xFF1
 26463                           intcon3	equ	0xFF0
 26464                           indf0	equ	0xFEF
 26465                           postinc0	equ	0xFEE
 26466                           fsr0h	equ	0xFEA
 26467                           fsr0l	equ	0xFE9
 26468                           wreg	equ	0xFE8
 26469                           postdec1	equ	0xFE5
 26470                           fsr1h	equ	0xFE2
 26471                           fsr1l	equ	0xFE1
 26472                           indf2	equ	0xFDF
 26473                           postinc2	equ	0xFDE
 26474                           postdec2	equ	0xFDD
 26475                           fsr2h	equ	0xFDA
 26476                           fsr2l	equ	0xFD9
 26477                           status	equ	0xFD8
 26478                           
 26479 ;; *************** function i2_I2C_Master_Stop *****************
 26480 ;; Defined at:
 26481 ;;		line 43 in file "I2C.c"
 26482 ;; Parameters:    Size  Location     Type
 26483 ;;		None
 26484 ;; Auto vars:     Size  Location     Type
 26485 ;;		None
 26486 ;; Return value:  Size  Location     Type
 26487 ;;                  1    wreg      void 
 26488 ;; Registers used:
 26489 ;;		wreg, status,2, status,0, cstack
 26490 ;; Tracked objects:
 26491 ;;		On entry : 0/0
 26492 ;;		On exit  : 0/0
 26493 ;;		Unchanged: 0/0
 26494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26499 ;;Total ram usage:        0 bytes
 26500 ;; Hardware stack levels used:    1
 26501 ;; Hardware stack levels required when called:    1
 26502 ;; This function calls:
 26503 ;;		i2_I2C_Master_Wait
 26504 ;; This function is called by:
 26505 ;;		i2_getRTC
 26506 ;; This function uses a non-reentrant model
 26507 ;;
 26508                           
 26509                           	psect	text97
 26510  00611A                     __ptext97:
 26511                           	opt stack 0
 26512  00611A                     i2_I2C_Master_Stop:
 26513                           	opt stack 19
 26514                           
 26515                           ;I2C.c: 45: I2C_Master_Wait();
 26516                           
 26517                           ;incstack = 0
 26518  00611A  EC52  F030         	call	i2_I2C_Master_Wait	;wreg free
 26519                           
 26520                           ;I2C.c: 46: PEN = 1;
 26521  00611E  84C5               	bsf	4037,2,c	;volatile
 26522  006120  0012               	return		;funcret
 26523  006122                     __end_ofi2_I2C_Master_Stop:
 26524                           	opt stack 0
 26525                           pclatu	equ	0xFFB
 26526                           pclath	equ	0xFFA
 26527                           tblptru	equ	0xFF8
 26528                           tblptrh	equ	0xFF7
 26529                           tblptrl	equ	0xFF6
 26530                           tablat	equ	0xFF5
 26531                           prodh	equ	0xFF4
 26532                           prodl	equ	0xFF3
 26533                           intcon	equ	0xFF2
 26534                           intcon2	equ	0xFF1
 26535                           intcon3	equ	0xFF0
 26536                           indf0	equ	0xFEF
 26537                           postinc0	equ	0xFEE
 26538                           fsr0h	equ	0xFEA
 26539                           fsr0l	equ	0xFE9
 26540                           wreg	equ	0xFE8
 26541                           postdec1	equ	0xFE5
 26542                           fsr1h	equ	0xFE2
 26543                           fsr1l	equ	0xFE1
 26544                           indf2	equ	0xFDF
 26545                           postinc2	equ	0xFDE
 26546                           postdec2	equ	0xFDD
 26547                           fsr2h	equ	0xFDA
 26548                           fsr2l	equ	0xFD9
 26549                           status	equ	0xFD8
 26550                           
 26551 ;; *************** function i2_I2C_Master_Start *****************
 26552 ;; Defined at:
 26553 ;;		line 31 in file "I2C.c"
 26554 ;; Parameters:    Size  Location     Type
 26555 ;;		None
 26556 ;; Auto vars:     Size  Location     Type
 26557 ;;		None
 26558 ;; Return value:  Size  Location     Type
 26559 ;;                  1    wreg      void 
 26560 ;; Registers used:
 26561 ;;		wreg, status,2, status,0, cstack
 26562 ;; Tracked objects:
 26563 ;;		On entry : 0/0
 26564 ;;		On exit  : 0/0
 26565 ;;		Unchanged: 0/0
 26566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26571 ;;Total ram usage:        0 bytes
 26572 ;; Hardware stack levels used:    1
 26573 ;; Hardware stack levels required when called:    1
 26574 ;; This function calls:
 26575 ;;		i2_I2C_Master_Wait
 26576 ;; This function is called by:
 26577 ;;		i2_getRTC
 26578 ;; This function uses a non-reentrant model
 26579 ;;
 26580                           
 26581                           	psect	text98
 26582  006122                     __ptext98:
 26583                           	opt stack 0
 26584  006122                     i2_I2C_Master_Start:
 26585                           	opt stack 19
 26586                           
 26587                           ;I2C.c: 33: I2C_Master_Wait();
 26588                           
 26589                           ;incstack = 0
 26590  006122  EC52  F030         	call	i2_I2C_Master_Wait	;wreg free
 26591                           
 26592                           ;I2C.c: 34: SEN = 1;
 26593  006126  80C5               	bsf	4037,0,c	;volatile
 26594  006128  0012               	return		;funcret
 26595  00612A                     __end_ofi2_I2C_Master_Start:
 26596                           	opt stack 0
 26597                           pclatu	equ	0xFFB
 26598                           pclath	equ	0xFFA
 26599                           tblptru	equ	0xFF8
 26600                           tblptrh	equ	0xFF7
 26601                           tblptrl	equ	0xFF6
 26602                           tablat	equ	0xFF5
 26603                           prodh	equ	0xFF4
 26604                           prodl	equ	0xFF3
 26605                           intcon	equ	0xFF2
 26606                           intcon2	equ	0xFF1
 26607                           intcon3	equ	0xFF0
 26608                           indf0	equ	0xFEF
 26609                           postinc0	equ	0xFEE
 26610                           fsr0h	equ	0xFEA
 26611                           fsr0l	equ	0xFE9
 26612                           wreg	equ	0xFE8
 26613                           postdec1	equ	0xFE5
 26614                           fsr1h	equ	0xFE2
 26615                           fsr1l	equ	0xFE1
 26616                           indf2	equ	0xFDF
 26617                           postinc2	equ	0xFDE
 26618                           postdec2	equ	0xFDD
 26619                           fsr2h	equ	0xFDA
 26620                           fsr2l	equ	0xFD9
 26621                           status	equ	0xFD8
 26622                           
 26623 ;; *************** function i2_I2C_Master_Read *****************
 26624 ;; Defined at:
 26625 ;;		line 55 in file "I2C.c"
 26626 ;; Parameters:    Size  Location     Type
 26627 ;;  a               1    wreg     unsigned char 
 26628 ;; Auto vars:     Size  Location     Type
 26629 ;;  a               1    1[COMRAM] unsigned char 
 26630 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 26631 ;; Return value:  Size  Location     Type
 26632 ;;                  1    wreg      unsigned char 
 26633 ;; Registers used:
 26634 ;;		wreg, status,2, status,0, cstack
 26635 ;; Tracked objects:
 26636 ;;		On entry : 0/0
 26637 ;;		On exit  : 0/0
 26638 ;;		Unchanged: 0/0
 26639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26643 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26644 ;;Total ram usage:        2 bytes
 26645 ;; Hardware stack levels used:    1
 26646 ;; Hardware stack levels required when called:    1
 26647 ;; This function calls:
 26648 ;;		i2_I2C_Master_Wait
 26649 ;; This function is called by:
 26650 ;;		i2_getRTC
 26651 ;; This function uses a non-reentrant model
 26652 ;;
 26653                           
 26654                           	psect	text99
 26655  005F84                     __ptext99:
 26656                           	opt stack 0
 26657  005F84                     i2_I2C_Master_Read:
 26658                           	opt stack 19
 26659                           
 26660                           ;incstack = 0
 26661                           ;i2I2C_Master_Read@a stored from wreg
 26662  005F84  6E02               	movwf	i2I2C_Master_Read@a,c
 26663                           
 26664                           ;I2C.c: 57: unsigned char temp;
 26665                           ;I2C.c: 58: I2C_Master_Wait();
 26666  005F86  EC52  F030         	call	i2_I2C_Master_Wait	;wreg free
 26667                           
 26668                           ;I2C.c: 59: RCEN = 1;
 26669  005F8A  86C5               	bsf	4037,3,c	;volatile
 26670                           
 26671                           ;I2C.c: 60: I2C_Master_Wait();
 26672  005F8C  EC52  F030         	call	i2_I2C_Master_Wait	;wreg free
 26673                           
 26674                           ;I2C.c: 61: temp = SSPBUF;
 26675  005F90  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 26676                           
 26677                           ;I2C.c: 62: I2C_Master_Wait();
 26678  005F94  EC52  F030         	call	i2_I2C_Master_Wait	;wreg free
 26679                           
 26680                           ;I2C.c: 63: ACKDT = (a)?0:1;
 26681  005F98  5002               	movf	i2I2C_Master_Read@a,w,c
 26682  005F9A  A4D8               	btfss	status,2,c
 26683  005F9C  D002               	goto	i2u558_40
 26684  005F9E  8AC5               	bsf	4037,5,c	;volatile
 26685  005FA0  D001               	goto	i2l6892
 26686  005FA2                     i2u558_40:
 26687  005FA2  9AC5               	bcf	4037,5,c	;volatile
 26688  005FA4                     i2l6892:
 26689                           
 26690                           ;I2C.c: 64: ACKEN = 1;
 26691  005FA4  88C5               	bsf	4037,4,c	;volatile
 26692                           
 26693                           ;I2C.c: 65: return temp;
 26694  005FA6  5003               	movf	i2I2C_Master_Read@temp,w,c
 26695  005FA8  0012               	return	
 26696  005FAA                     __end_ofi2_I2C_Master_Read:
 26697                           	opt stack 0
 26698                           pclatu	equ	0xFFB
 26699                           pclath	equ	0xFFA
 26700                           tblptru	equ	0xFF8
 26701                           tblptrh	equ	0xFF7
 26702                           tblptrl	equ	0xFF6
 26703                           tablat	equ	0xFF5
 26704                           prodh	equ	0xFF4
 26705                           prodl	equ	0xFF3
 26706                           intcon	equ	0xFF2
 26707                           intcon2	equ	0xFF1
 26708                           intcon3	equ	0xFF0
 26709                           indf0	equ	0xFEF
 26710                           postinc0	equ	0xFEE
 26711                           fsr0h	equ	0xFEA
 26712                           fsr0l	equ	0xFE9
 26713                           wreg	equ	0xFE8
 26714                           postdec1	equ	0xFE5
 26715                           fsr1h	equ	0xFE2
 26716                           fsr1l	equ	0xFE1
 26717                           indf2	equ	0xFDF
 26718                           postinc2	equ	0xFDE
 26719                           postdec2	equ	0xFDD
 26720                           fsr2h	equ	0xFDA
 26721                           fsr2l	equ	0xFD9
 26722                           status	equ	0xFD8
 26723                           
 26724 ;; *************** function i2_I2C_Master_Wait *****************
 26725 ;; Defined at:
 26726 ;;		line 26 in file "I2C.c"
 26727 ;; Parameters:    Size  Location     Type
 26728 ;;		None
 26729 ;; Auto vars:     Size  Location     Type
 26730 ;;		None
 26731 ;; Return value:  Size  Location     Type
 26732 ;;                  1    wreg      void 
 26733 ;; Registers used:
 26734 ;;		wreg, status,2, status,0
 26735 ;; Tracked objects:
 26736 ;;		On entry : 0/0
 26737 ;;		On exit  : 0/0
 26738 ;;		Unchanged: 0/0
 26739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26742 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26743 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26744 ;;Total ram usage:        1 bytes
 26745 ;; Hardware stack levels used:    1
 26746 ;; This function calls:
 26747 ;;		Nothing
 26748 ;; This function is called by:
 26749 ;;		i2_I2C_Master_Start
 26750 ;;		i2_I2C_Master_Stop
 26751 ;;		i2_I2C_Master_Write
 26752 ;;		i2_I2C_Master_Read
 26753 ;; This function uses a non-reentrant model
 26754 ;;
 26755                           
 26756                           	psect	text100
 26757  0060A4                     __ptext100:
 26758                           	opt stack 0
 26759  0060A4                     i2_I2C_Master_Wait:
 26760                           	opt stack 19
 26761  0060A4                     i2l78:
 26762  0060A4  B4C7               	btfsc	4039,2,c	;volatile
 26763  0060A6  D7FE               	goto	i2l78
 26764  0060A8  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 26765  0060AC  0E1F               	movlw	31
 26766  0060AE  1601               	andwf	??i2_I2C_Master_Wait,f,c
 26767  0060B0  B4D8               	btfsc	status,2,c
 26768  0060B2  0012               	return	
 26769  0060B4  D7F7               	goto	i2l78
 26770  0060B6                     __end_ofi2_I2C_Master_Wait:
 26771                           	opt stack 0
 26772                           pclatu	equ	0xFFB
 26773                           pclath	equ	0xFFA
 26774                           tblptru	equ	0xFF8
 26775                           tblptrh	equ	0xFF7
 26776                           tblptrl	equ	0xFF6
 26777                           tablat	equ	0xFF5
 26778                           prodh	equ	0xFF4
 26779                           prodl	equ	0xFF3
 26780                           intcon	equ	0xFF2
 26781                           intcon2	equ	0xFF1
 26782                           intcon3	equ	0xFF0
 26783                           indf0	equ	0xFEF
 26784                           postinc0	equ	0xFEE
 26785                           fsr0h	equ	0xFEA
 26786                           fsr0l	equ	0xFE9
 26787                           wreg	equ	0xFE8
 26788                           postdec1	equ	0xFE5
 26789                           fsr1h	equ	0xFE2
 26790                           fsr1l	equ	0xFE1
 26791                           indf2	equ	0xFDF
 26792                           postinc2	equ	0xFDE
 26793                           postdec2	equ	0xFDD
 26794                           fsr2h	equ	0xFDA
 26795                           fsr2l	equ	0xFD9
 26796                           status	equ	0xFD8
 26797                           
 26798 ;; *************** function i2___awmod *****************
 26799 ;; Defined at:
 26800 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 26801 ;; Parameters:    Size  Location     Type
 26802 ;;  dividend        2    0[COMRAM] int 
 26803 ;;  divisor         2    2[COMRAM] int 
 26804 ;; Auto vars:     Size  Location     Type
 26805 ;;  __awmod         1    5[COMRAM] unsigned char 
 26806 ;;  __awmod         1    4[COMRAM] unsigned char 
 26807 ;; Return value:  Size  Location     Type
 26808 ;;                  2    0[COMRAM] int 
 26809 ;; Registers used:
 26810 ;;		wreg, status,2, status,0
 26811 ;; Tracked objects:
 26812 ;;		On entry : 0/0
 26813 ;;		On exit  : 0/0
 26814 ;;		Unchanged: 0/0
 26815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26816 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26817 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26819 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26820 ;;Total ram usage:        6 bytes
 26821 ;; Hardware stack levels used:    1
 26822 ;; This function calls:
 26823 ;;		Nothing
 26824 ;; This function is called by:
 26825 ;;		_printSortTimer
 26826 ;; This function uses a non-reentrant model
 26827 ;;
 26828                           
 26829                           	psect	text101
 26830  00561C                     __ptext101:
 26831                           	opt stack 0
 26832  00561C                     i2___awmod:
 26833                           	opt stack 22
 26834                           
 26835                           ;incstack = 0
 26836  00561C  0E00               	movlw	0
 26837  00561E  6E06               	movwf	i2___awmod@sign,c
 26838  005620  AE02               	btfss	i2___awmod@dividend+1,7,c
 26839  005622  D006               	goto	i2l9648
 26840  005624  6C01               	negf	i2___awmod@dividend,c
 26841  005626  1E02               	comf	i2___awmod@dividend+1,f,c
 26842  005628  B0D8               	btfsc	status,0,c
 26843  00562A  2A02               	incf	i2___awmod@dividend+1,f,c
 26844  00562C  0E01               	movlw	1
 26845  00562E  6E06               	movwf	i2___awmod@sign,c
 26846  005630                     i2l9648:
 26847  005630  AE04               	btfss	i2___awmod@divisor+1,7,c
 26848  005632  D004               	goto	i2l9652
 26849  005634  6C03               	negf	i2___awmod@divisor,c
 26850  005636  1E04               	comf	i2___awmod@divisor+1,f,c
 26851  005638  B0D8               	btfsc	status,0,c
 26852  00563A  2A04               	incf	i2___awmod@divisor+1,f,c
 26853  00563C                     i2l9652:
 26854  00563C  5003               	movf	i2___awmod@divisor,w,c
 26855  00563E  1004               	iorwf	i2___awmod@divisor+1,w,c
 26856  005640  B4D8               	btfsc	status,2,c
 26857  005642  D018               	goto	i2l9668
 26858  005644  0E01               	movlw	1
 26859  005646  6E05               	movwf	i2___awmod@counter,c
 26860  005648  D004               	goto	i2l9658
 26861  00564A                     i2l9656:
 26862  00564A  90D8               	bcf	status,0,c
 26863  00564C  3603               	rlcf	i2___awmod@divisor,f,c
 26864  00564E  3604               	rlcf	i2___awmod@divisor+1,f,c
 26865  005650  2A05               	incf	i2___awmod@counter,f,c
 26866  005652                     i2l9658:
 26867  005652  AE04               	btfss	i2___awmod@divisor+1,7,c
 26868  005654  D7FA               	goto	i2l9656
 26869  005656                     i2l9660:
 26870  005656  5003               	movf	i2___awmod@divisor,w,c
 26871  005658  5C01               	subwf	i2___awmod@dividend,w,c
 26872  00565A  5004               	movf	i2___awmod@divisor+1,w,c
 26873  00565C  5802               	subwfb	i2___awmod@dividend+1,w,c
 26874  00565E  A0D8               	btfss	status,0,c
 26875  005660  D004               	goto	i2l9664
 26876  005662  5003               	movf	i2___awmod@divisor,w,c
 26877  005664  5E01               	subwf	i2___awmod@dividend,f,c
 26878  005666  5004               	movf	i2___awmod@divisor+1,w,c
 26879  005668  5A02               	subwfb	i2___awmod@dividend+1,f,c
 26880  00566A                     i2l9664:
 26881  00566A  90D8               	bcf	status,0,c
 26882  00566C  3204               	rrcf	i2___awmod@divisor+1,f,c
 26883  00566E  3203               	rrcf	i2___awmod@divisor,f,c
 26884  005670  2E05               	decfsz	i2___awmod@counter,f,c
 26885  005672  D7F1               	goto	i2l9660
 26886  005674                     i2l9668:
 26887  005674  5006               	movf	i2___awmod@sign,w,c
 26888  005676  B4D8               	btfsc	status,2,c
 26889  005678  D004               	goto	i2l9672
 26890  00567A  6C01               	negf	i2___awmod@dividend,c
 26891  00567C  1E02               	comf	i2___awmod@dividend+1,f,c
 26892  00567E  B0D8               	btfsc	status,0,c
 26893  005680  2A02               	incf	i2___awmod@dividend+1,f,c
 26894  005682                     i2l9672:
 26895  005682  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26896  005686  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26897  00568A  0012               	return	
 26898  00568C                     __end_ofi2___awmod:
 26899                           	opt stack 0
 26900                           pclatu	equ	0xFFB
 26901                           pclath	equ	0xFFA
 26902                           tblptru	equ	0xFF8
 26903                           tblptrh	equ	0xFF7
 26904                           tblptrl	equ	0xFF6
 26905                           tablat	equ	0xFF5
 26906                           prodh	equ	0xFF4
 26907                           prodl	equ	0xFF3
 26908                           intcon	equ	0xFF2
 26909                           intcon2	equ	0xFF1
 26910                           intcon3	equ	0xFF0
 26911                           indf0	equ	0xFEF
 26912                           postinc0	equ	0xFEE
 26913                           fsr0h	equ	0xFEA
 26914                           fsr0l	equ	0xFE9
 26915                           wreg	equ	0xFE8
 26916                           postdec1	equ	0xFE5
 26917                           fsr1h	equ	0xFE2
 26918                           fsr1l	equ	0xFE1
 26919                           indf2	equ	0xFDF
 26920                           postinc2	equ	0xFDE
 26921                           postdec2	equ	0xFDD
 26922                           fsr2h	equ	0xFDA
 26923                           fsr2l	equ	0xFD9
 26924                           status	equ	0xFD8
 26925                           pclatu	equ	0xFFB
 26926                           pclath	equ	0xFFA
 26927                           tblptru	equ	0xFF8
 26928                           tblptrh	equ	0xFF7
 26929                           tblptrl	equ	0xFF6
 26930                           tablat	equ	0xFF5
 26931                           prodh	equ	0xFF4
 26932                           prodl	equ	0xFF3
 26933                           intcon	equ	0xFF2
 26934                           intcon2	equ	0xFF1
 26935                           intcon3	equ	0xFF0
 26936                           indf0	equ	0xFEF
 26937                           postinc0	equ	0xFEE
 26938                           fsr0h	equ	0xFEA
 26939                           fsr0l	equ	0xFE9
 26940                           wreg	equ	0xFE8
 26941                           postdec1	equ	0xFE5
 26942                           fsr1h	equ	0xFE2
 26943                           fsr1l	equ	0xFE1
 26944                           indf2	equ	0xFDF
 26945                           postinc2	equ	0xFDE
 26946                           postdec2	equ	0xFDD
 26947                           fsr2h	equ	0xFDA
 26948                           fsr2l	equ	0xFD9
 26949                           status	equ	0xFD8
 26950                           
 26951                           	psect	rparam
 26952  0000                     pclatu	equ	0xFFB
 26953                           pclath	equ	0xFFA
 26954                           tblptru	equ	0xFF8
 26955                           tblptrh	equ	0xFF7
 26956                           tblptrl	equ	0xFF6
 26957                           tablat	equ	0xFF5
 26958                           prodh	equ	0xFF4
 26959                           prodl	equ	0xFF3
 26960                           intcon	equ	0xFF2
 26961                           intcon2	equ	0xFF1
 26962                           intcon3	equ	0xFF0
 26963                           indf0	equ	0xFEF
 26964                           postinc0	equ	0xFEE
 26965                           fsr0h	equ	0xFEA
 26966                           fsr0l	equ	0xFE9
 26967                           wreg	equ	0xFE8
 26968                           postdec1	equ	0xFE5
 26969                           fsr1h	equ	0xFE2
 26970                           fsr1l	equ	0xFE1
 26971                           indf2	equ	0xFDF
 26972                           postinc2	equ	0xFDE
 26973                           postdec2	equ	0xFDD
 26974                           fsr2h	equ	0xFDA
 26975                           fsr2l	equ	0xFD9
 26976                           status	equ	0xFD8
 26977                           
 26978                           	psect	temp
 26979  00007E                     btemp:
 26980                           	opt stack 0
 26981  00007E                     	ds	1
 26982  0000                     int$flags	set	btemp
 26983                           pclatu	equ	0xFFB
 26984                           pclath	equ	0xFFA
 26985                           tblptru	equ	0xFF8
 26986                           tblptrh	equ	0xFF7
 26987                           tblptrl	equ	0xFF6
 26988                           tablat	equ	0xFF5
 26989                           prodh	equ	0xFF4
 26990                           prodl	equ	0xFF3
 26991                           intcon	equ	0xFF2
 26992                           intcon2	equ	0xFF1
 26993                           intcon3	equ	0xFF0
 26994                           indf0	equ	0xFEF
 26995                           postinc0	equ	0xFEE
 26996                           fsr0h	equ	0xFEA
 26997                           fsr0l	equ	0xFE9
 26998                           wreg	equ	0xFE8
 26999                           postdec1	equ	0xFE5
 27000                           fsr1h	equ	0xFE2
 27001                           fsr1l	equ	0xFE1
 27002                           indf2	equ	0xFDF
 27003                           postinc2	equ	0xFDE
 27004                           postdec2	equ	0xFDD
 27005                           fsr2h	equ	0xFDA
 27006                           fsr2l	equ	0xFD9
 27007                           status	equ	0xFD8


Data Sizes:
    Strings     1340
    Constant    27
    Data        8
    BSS         154
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      87
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_129(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_128(CODE[18]), STR_127(CODE[18]), STR_126(CODE[17]), STR_125(CODE[17]), 
		 -> STR_124(CODE[15]), STR_123(CODE[15]), STR_122(CODE[18]), STR_121(CODE[15]), 
		 -> STR_120(CODE[18]), STR_119(CODE[18]), STR_118(CODE[17]), STR_117(CODE[17]), 
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), 
		 -> STR_112(CODE[18]), STR_111(CODE[17]), STR_110(CODE[15]), STR_109(CODE[15]), 
		 -> STR_108(CODE[15]), STR_107(CODE[17]), STR_106(CODE[17]), STR_105(CODE[17]), 
		 -> STR_104(CODE[16]), STR_103(CODE[17]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[15]), 
		 -> STR_96(CODE[11]), STR_95(CODE[17]), STR_94(CODE[11]), STR_93(CODE[17]), 
		 -> STR_92(CODE[14]), STR_91(CODE[15]), STR_90(CODE[14]), STR_89(CODE[10]), 
		 -> STR_88(CODE[9]), STR_87(CODE[9]), STR_86(CODE[10]), STR_85(CODE[10]), 
		 -> STR_84(CODE[16]), STR_83(CODE[15]), STR_82(CODE[3]), STR_81(CODE[18]), 
		 -> STR_80(CODE[3]), STR_79(CODE[18]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[16]), 
		 -> STR_64(CODE[16]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _ID->___ftge
    _readIR->_readADC
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  242814
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   31055
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             20    20      0   19797
                                             49 BANK0     20    20      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       2     2      0       1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                5     3      2     924
                                              6 BANK0      5     3      2
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                  37    37      0    5865
                                             27 BANK0     37    37      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                           _readCOND
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     2      2     770
                                              2 BANK0      4     2      2
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11606
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10859
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10859
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47248
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13403
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1216
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  117581
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           6     6      0    9192
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9104
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9035
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15671
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9308
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19821
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9310
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8900
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   84276
                                             72 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    5188
                                             41 COMRAM    31    31      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _readCOND
         _readADC
       _readIR
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      57       7       34.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     154      34        0.0%
DATA                 0      0     154       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 12 17:37:08 2017

                                    _i 013D                     i2_I2C_Master_Start 6122  
                   i2_I2C_Master_Write 60F8                                     _ID 1192  
                                   l78 6090                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 5B12                                    ID@i 00A9  
                                  ID@j 00BC                                    ID@n 00BE  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l200 0102  
                                  l192 00E2                                    l195 00E6  
                                  l515 4D60                                    l634 348C  
                                  l900 1714                                    l901 172E  
                                  l806 18AC                                    l904 17C6  
                                  l816 1982                                    l841 1BCC  
                                  l826 1A9E                                    l818 19D6  
                                  l851 1D68                                    l819 19BC  
                                  l853 1CBA                                    l829 1AD8  
                                  l863 1DC0                                    l855 1CCC  
                                  l847 1D6A                                    l839 1B6A  
                                  l872 12D2                                    l856 1CE0  
                                  l848 1C96                                    l881 14BA  
                                  l857 1CF4                                    l874 1340  
                                  l858 1D08                                    l859 1D1E  
                                  l877 15DE                                    l878 145A  
                                  l967 5302                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 413C                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 4776  
                                  _log 00F0                                    _sel 00FD  
                                  _var 014D                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 4302                    _log_count_can_w_lab 0141  
      __end_of_change_state_to_menu_11 5D40        __end_of_change_state_to_menu_12 5B82  
      __end_of_change_state_to_menu_22 5B4A        __end_of_change_state_to_menu_23 5D10  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5E30        __end_of_change_state_to_logs_12 5E00  
      __end_of_change_state_to_logs_22 5DD0        __end_of_change_state_to_logs_23 5E8C  
      __end_of_change_state_to_logs_33 5DA0        __end_of_change_state_to_logs_34 5D70  
                                 ??_ID 009B                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l2033 5530                                   l1305 4A9C  
                                 l1410 104A                                   l1314 2652  
                                 l2043 57B4                                   l1331 2842  
                                 l1323 273A                                   l1308 4AA0  
                                 l1317 2656                                   l1165 4896  
                                 l1334 283C                                   l1415 1120  
                                 l1344 28D8                                   l1361 0944  
                                 l1514 428A                                   l1530 4828  
                                 l1338 2844                                   l1282 46B6  
                                 l1178 605C                                   l1515 42A4  
                                 l1371 0A54                                   l1187 4428  
                                 l1444 4BDE                                   l1428 4B58  
                                 l1372 0AA2                                   l1364 0948  
                                 l1509 423E                                   l1373 0B08  
                                 l1285 46D6                                   l1462 33C8  
                                 l1374 0B56                                   l1471 3356  
                                 l1439 4BCA                                   l1447 4BE4  
                                 l1472 3370                                   l1552 5872  
                                 l1368 09EE                                   l1529 4866  
                                 l1546 5862                                   l1538 4860  
                                 l1475 33A4                                   l1476 33BE  
                                 l1492 5398                                   l1477 33C2  
                                 l1485 5388                                   ?_arm 0001  
                                 l1398 0EB0                                   l1586 2014  
                                 l1850 463C                                   l7010 1EBC  
                                 l7002 1E40                                   l7100 214E  
                                 l7020 1EFA                                   l1980 4FB6  
                                 l7110 2182                                   l7030 1F72  
                                 l7022 1F00                                   l7104 2168  
                                 l7040 1FD4                                   l7032 1F78  
                                 l7120 5B8C                                   l7200 4662  
                                 l7114 21DA                                   l7034 1F90  
                                 l7018 1EEE                                   l7122 5B98  
                                 l7210 4F3A                                   l7108 217C  
                                 l7060 2066                                   l7028 1F66  
                                 l7044 1FDA                                   l7116 21E6  
                                 l7132 528E                                   l7212 4F4A  
                                 l7062 206C                                   l7038 1FBC  
                                 l7222 4FA4                                   l7214 4F50  
                                 l7080 20CA                                   l7056 204C  
                                 l9000 0E88                                   l7128 5278  
                                 l8200 1A6A                                   l7074 20A8  
                                 l7162 5320                                   l9002 0E8E  
                                 l7138 52AE                                   l7092 2126  
                                 l7084 2102                                   l7156 52E6  
                                 l9020 0EF8                                   l7180 45D0  
                                 l7172 457E                                   l8108 186A  
                                 l7086 210C                                   l9110 10A4  
                                 l9030 0F20                                   l9006 0E98  
                                 l7430 3496                                   l8206 1A88  
                                 l8134 18FA                                   l8118 18B4  
                                 _ADIE 007CEE                                   l9120 10CC  
                                 l9024 0F02                                   l7440 352C  
                                 l7432 34B4                                   l7424 340A  
                                 l7184 45F0                                   l7176 4592  
                                 l8240 1B4E                                   l8232 1B18  
                                 l8216 1AB8                                   l7098 2142  
                                 l9130 110A                                   l9114 10BC  
                                 l9106 109A                                   l9050 0F86  
                                 l9034 0F2A                                   l9202 482E  
                                 l7450 35C2                                   l7442 354A  
                                 l7434 34D2                                   l7194 4646  
                                 l7186 4620                                   l7178 45A0  
                                 l7610 4FEC                                   l8306 1D2A  
                                 l8314 1D72                                   l8218 1AC2  
                                 l9140 113A                                   l9124 10E4  
                                 l9116 10C2                                   l9060 0FAE  
                                 l9028 0F1A                                   l9204 4848  
                                 l7452 35E0                                   l7444 3568  
                                 l7436 34F0                                   l7188 462E  
                                 l8500 16A6                                   l8308 1D60  
                                 l8252 1BA6                                   l8244 1B6E  
                                 l8260 1C28                                   l8228 1AF2  
                                 l8156 196C                                   l9310 3136  
                                 l9150 1162                                   l9142 1140  
                                 l9054 0F9E                                   l9046 0F7C  
                                 l9038 0F42                                   l9206 4852  
                                 l6806 5E56                                   l7446 3586  
                                 l7438 350E                                   l7710 53F4  
                                 l7606 4FD6                                   l8238 1B42  
                                 l8326 1DB4                                   l8166 199C  
                                 l6840 54E0                                   l6824 5F04  
                                 l9160 118A                                   l9152 1168  
                                 l9080 1022                                   l9072 1000  
                                 l9064 0FC6                                   l9056 0FA4  
                                 l7448 35A4                                   l7456 35FE  
                                 l7800 4E06                                   l8520 16FE  
                                 l8512 16DA                                   l8504 16B4  
                                 l8416 140E                                   l8360 122A  
                                 l7616 5062                                   l8328 1DC2  
                                 l8168 19A6                                   l6842 54EC  
                                 l9330 31EC                                   l9242 4BBE  
                                 l9146 114A                                   l9082 1028  
                                 l7458 365C                                   l8418 1418  
                                 l8362 1232                                   l7722 5426  
                                 l7706 53DE                                   l6852 5522  
                                 l6844 54F2                                   l6860 5770  
                                 l9156 1172                                   l9076 100A  
                                 l8700 28D4                                   l7652 4902  
                                 l7660 4924                                   l8516 16E8  
                                 l8428 1466                                   l6862 577C  
                                 l6782 5ECC                                   l9246 4BD2  
                                 l9238 4B96                                   l9086 1032  
                                 l9190 47EA                                   l7750 4E80  
                                 l7806 4E4A                                   l7726 543E  
                                 l8278 1CA2                                   l6864 5782  
                                 l6784 5EDE                                   l9360 32DE  
                                 l9328 31E6                                   l9272 53C0  
                                 l8720 2954                                   l8712 2924  
                                 l7760 4EB0                                   l7744 4E6A  
                                 l9600 50C4                                   l7664 493A  
                                 l7656 490C                                   l8560 498E  
                                 l8544 1784                                   l8552 17C8  
                                 l8456 15C2                                   l8448 158C  
                                 l8376 128E                                   l9194 4810  
                                 l8634 267C                                   l8562 49A8  
                                 l8570 4A0A                                   l7674 5F14  
                                 l6962 5140                                   l8474 1624  
                                 l8490 1678                                   l8458 15CA  
                                 l8394 12FC                                   l6868 57A6  
                                 l9524 41C6                                   l9532 420C  
                                 l9372 3328                                   l9348 329C  
                                 l9196 481A                                   l8732 299C  
                                 l8724 298A                                   l8652 2734  
                                 l7756 4E9E                                   l7772 4EEE  
                                 l9612 510A                                   l9604 50E8  
                                 l7668 4944                                   l8564 49C2  
                                 l6964 5164                                   l6990 1DF0  
                                 l9550 4250                                   l9366 32FE  
                                 l8902 0C88                                   l8654 2742  
                                 l7758 4EAA                                   l8558 4974  
                                 l7678 5F2A                                   l6992 1E02  
                                 l9368 3314                                   l8736 29D2  
                                 l8672 27FA                                   l7776 4F02  
                                 l7768 4EE0                                   l9608 50F6  
                                 l8568 49DC                                   l6968 5188  
                                 l8488 1670                                   l6986 1DDC  
                                 l9570 42B6                                   l9394 338E  
                                 l9378 3340                                   l8922 0CFC  
                                 l8914 0CDA                                   l8906 0CA0  
                                 l9730 016E                                   l9722 0144  
                                 l9714 0128                                   l6996 1E0C  
                                 l9556 426A                                   l9548 4240  
                                 l9388 3376                                   l8940 0D5E  
                                 l8932 0D24                                   l8924 0D02  
                                 l9820 036E                                   l9812 02F6  
                                 l9708 00FE                                   l7892 5204  
                                 l7788 5A6E                                   l7796 4DC6  
                                 l9558 4274                                   l8950 0D86  
                                 l8918 0CE4                                   l8870 0BF4  
                                 l8862 0BD2                                   l8782 09C2  
                                 l8694 2892                                   l9910 0694  
                                 l9902 0672                                   l9830 0404  
                                 l9822 038C                                   l9814 0314  
                                 l9750 01D6                                   l9726 015C  
                                 l9718 013A                                   l9568 42A6  
                                 l8944 0D68                                   l8928 0D0C  
                                 l8880 0C1C                                   l8872 0BFA  
                                 l8776 09B2                                   l9592 509E  
                                 l9832 0422                                   l9824 03AA  
                                 l9816 0332                                   l9840 047C  
                                 l9744 01C6                                   l9760 01FC  
                                 l7888 51EE                                   l9578 42FC  
                                 l8970 0DEC                                   l8954 0D90  
                                 l8866 0BDC                                   l8786 09DA  
                                 l8778 09B8                                   l9906 067C  
                                 l9850 052C                                   l9834 0440  
                                 l9826 03C8                                   l9818 0350  
                                 l9842 04E0                                   l9754 01EE  
                                 l9746 01CC                                   l7898 5230  
                                 l8980 0E14                                   l8948 0D80  
                                 l8892 0C60                                   l8876 0C04  
                                 l9596 50B2                                   l9588 508E  
                                 l9932 0704                                   l9860 0556  
                                 l9836 045E                                   l9828 03E6  
                                 l8974 0E04                                   l8966 0DE2  
                                 l8958 0DA8                                   l9598 50BE  
                                 l9950 0750                                   l9942 072E  
                                 l9854 0544                                   l9846 0522  
                                 l9782 0270                                   l9774 024E  
                                 STR_1 FB7F                                   l8992 0E66  
                                 l8984 0E2C                                   l8976 0E0A  
                                 l8896 0C78                                   l8888 0C56  
                                 l9936 071C                                   l9928 06FA  
                                 l9864 0560                                   l9792 028C  
                                 STR_2 FF56                                   STR_3 FB6D  
                                 l8898 0C7E                                   l9946 0738  
                                 l9778 0258                                   STR_4 FE79  
                                 STR_5 FB6D                                   l8996 0E70  
                                 l9972 07C0                                   l9892 0648  
                                 l9868 0578                                   l9796 02A4  
                                 l9788 0282                                   STR_6 FDF5  
                                 STR_7 FFC3                                   l9990 080C  
                                 l9982 07EA                                   STR_8 FFDA  
                                 STR_9 FFCA                                   l9976 07D8  
                                 l9968 07B6                                   l9896 0660  
                                 l9888 063E                                   l9986 07F4  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 _PEIE 007F96                                   u8020 29C0  
                                 u5700 517E                                   _RCEN 007E2B  
                                 u5701 517A                                   u8110 0AA2  
                                 u6510 348C                                   u5710 5180  
                                 u5720 5A02                                   u5480 5E54  
                                 u5721 59FE                                   u8130 0B56  
                                 u5730 5A04                                   u5820 1FB2  
                                 u8028 29C4                                   u7500 13E4  
                                 u7260 1BDE                                   u9030 330C  
                                 u6470 59B6                                   u9040 3324  
                                 u6480 59B8                                   u5680 515A  
                                 u7280 1C04                                   u9041 3320  
                                 u8090 09EE                                   u5690 515C  
                                 u7530 1458                                   u7290 1C06  
                                 u5827 1FA8                                   u5780 1F3A  
                                 u9221 4260                                   i2l78 60A4  
                                 u9230 4262                                   u7470 138E  
                                 u7278 1BE2                                   u6495 57EE  
                                 u7560 153A                                   u7480 1390  
                                 u8610 4806                                   u7570 153C  
                                 u7490 13E2                                   u5787 1F30  
                                 u9171 4234                                   u9180 4236  
                                 u8620 4808                                   u7840 26BE  
                                 u7760 1790                                   u6960 1876  
                                 u7930 2824                                   u7850 26C0  
                                 u8900 3178                                   u8740 4B82  
                                 u8660 483E                                   u7780 17C6  
                                 u6980 18AC                                   u8910 317A  
                                 u8670 4840                                   u7880 2784  
                                 u7881 2780                                   u8930 322E  
                                 u8770 4BAC                                   u7890 2786  
                                 u7778 1794                                   u6978 187A  
                                 u8940 3230                                   u7948 2828  
                                 u8758 4B86                                   u7990 2978  
                                 u8980 32C6                                   u8788 4BB0  
                                 u7998 297C                                   u8998 32CA  
                                 _RSEN 007E29                            _stopSignals 6030  
                                 _Test 4670                                   _back 005B  
                                 _main 4CBE                                   _down 0065  
                         ___ftpack@arg 0080                                   _keys FAA7  
                         ___ftpack@exp 0083                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5FCE  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 013F  
                      __end_ofi2_putch 60E2                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 3960  
                          i2_lcdNibble 587A                        __end_of_Loading 1DCE  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
                                ID@res 00B6             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10012 0874  
                                l10030 08C0                                  l10022 089E  
                                l10016 088C                                  l10008 086A  
                                l10026 08A8                                  l10034 08CC  
                                l10312 43E2                                  l10350 46F4  
                                l10342 46DC                                  l10326 4672  
                                l10360 4712                                  l10352 46FA  
                                l10344 46E2                                  l10354 4700  
                                l10346 46E8                                  l10602 4D32  
                                l10356 4706                                  l10348 46EE  
                                l10364 4718                                  l10604 4D38  
                                l10620 4D62                                  l10358 470C  
                                l10366 476A                                  l10286 434E  
                                l10614 4D56                                  l10606 4D3E  
                                l10288 4362                                  l10616 4D5C  
                                l10594 4D08                                  l10596 4D1E  
                 __end_of_EEPROM_write 495C                            ID@time_1154 00A3  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4F0C  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAC2  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FE06                                  STR_15 FFD2  
                                STR_23 FF48                                  STR_31 FDE4  
                                STR_16 FFE2                                  STR_24 FD4B  
                                STR_32 FD29                                  STR_40 FCE5  
                                STR_17 FFF2                                  STR_25 FE28  
                                STR_33 FD3A                                  STR_41 FCD4  
                                STR_18 FFF6                                  STR_34 FDD3  
                                STR_50 FDB1                                  STR_42 FD8F  
                                STR_26 FD5C                                  STR_43 FD8F  
                                STR_35 FDD3                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE17  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD6D                                  STR_36 FD18  
                                STR_44 FCF6                        __end_of___awmod 5114  
                                STR_45 FCE5                                  STR_37 FD29  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE25                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FF01  
                                STR_38 FDC2                                  STR_46 FDA0  
                                STR_47 FDA0                                  STR_55 FFFA  
                                STR_63 FAC2                                  STR_71 FF3A  
                                STR_39 FD7E                                  STR_56 FFDE  
                                STR_80 FE25                                  STR_64 FE59  
                                STR_48 FD07                                  STR_72 FC5D  
                                STR_49 FCF6                                  STR_57 FFD6  
                                STR_73 FF1E                                  STR_65 FE69  
                                STR_81 FB13                                  STR_58 FFD2  
                                STR_90 FF3A                                  STR_82 FE25  
                                STR_74 FF64                                  STR_66 FADA  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FEF2                                  STR_75 FEE3  
                                STR_83 FEB6                                  STR_76 FF2C  
                                STR_92 FF10                                  STR_84 FE39  
                                STR_68 FC90                                  STR_77 FFAD  
                                STR_85 FF86                                  STR_69 FCA1  
                                STR_93 FC6E                                  STR_86 FF86  
                                STR_78 FF3A                                  STR_94 FF70  
                                STR_87 FFA4                                  STR_95 FC7F  
                                STR_79 FB25                                  STR_88 FFA4  
                                STR_96 FF7B                                  STR_89 FF90  
                                STR_97 FED4                                  STR_98 FBE6  
                                STR_99 FBD5           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4FC8  
         i2updateServoPosition@time_us 0001                                  u11007 1C42  
                                u11017 1C84                                  u11107 1D0C  
                                u11027 1CBE                                  u10340 4428  
                                u11117 1D16                                  u11037 1CC6  
                                u12007 105C                                  u11207 1634  
                                u11127 1D22                                  u11047 1CD0  
                                _T0CON 000FD5                                  u12017 10AC  
                                u11217 1718                                  u11137 1D8C  
                                u11057 1CDA                                  u12107 582C  
                                u12027 10D4                                  u11307 002A  
                                u11227 1722                                  u11147 5C3E  
                                u11067 1CE4                        ___awdiv@divisor 0088  
                                u12117 4B22                                  u12037 1124  
                                u11317 0114                                  u11237 1748  
                                u11157 53FC                                  u11077 1CEE  
                                u12207 33B2                                  u12127 3114  
                                u12047 112E                                  u11407 0568  
                                u11327 014C                                  u11247 5F20  
                                u11167 11AC                                  u11087 1CF8  
                                _T1CON 000FCD                                  u12217 2214  
                                u12137 318E                                  u12057 1152  
                                u11417 0592                                  u11337 0188  
                                u11257 5A14                                  u11177 11EE  
                                u11097 1D00                                  u12307 2444  
                                u12227 2260                                  u12147 31DA  
                                u12067 117A                                  u11507 0826  
                                u11427 0650                                  u11347 01DE  
                                u11267 5A48                                  u11187 12E2  
                                u12317 2476                                  u12237 22AC  
                                u12157 3244                                  u12077 5352  
                                u11517 087C                                  u11437 0684  
                                u11357 020A                                  u11277 48B8  
                                u11197 14CA                                  u12407 4172  
                                u12327 24C2                                  u12247 22E0  
                                u12167 3290                                  u12087 53A2  
                                u11607 27EE                                  u11527 08B0  
                                u11447 06AE                                  u11367 0260  
                                u11287 4914                                  _T2CON 000FCA  
                                u12417 428E                                  u12337 24F6  
                                u12257 2312                                  u12177 335A  
                                u12097 53B6                                  u11617 2856  
                                u11537 4680                                  u11457 070C  
                                u11377 0294                                  u11297 494C  
                                u12427 4298                                  u12347 2528  
                                u12267 235E                                  u12187 3362  
                                u11707 4AB2                                  u11627 2884  
                                u11547 2602                                  u11467 0740  
                                u11387 02BE                                  u10907 19CA  
                                u12437 5ED4                                  u12357 2574  
                                u12277 2392                                  u12197 33A8  
                                u11717 08F4                                  u11637 28C8  
                                u11557 2646                                  u11477 076A  
                                u11397 0534                                  u10917 19E6  
                                u12447 56AE                                  u12367 25A8  
                                u12287 23C4                                  u11807 0B36  
                                u11727 0938                                  u11647 28EA  
                                u11567 2668                                  u11487 07C8  
                                u10927 1A1C                                  _T3CON 000FB1  
                                u12457 56B8                                  u12377 25DA  
                                u12297 2410                                  u11817 0B66  
                                u11737 095A                                  u11657 2918  
                                u11577 26D4                                  u11497 07FC  
                                u10937 1AA2                                  u10857 17F8  
                                u12467 56E4                                  u12387 548C  
                                u11907 0DF4                                  u11827 0BE4  
                                u11747 09CA                                  u11667 2932  
                                u11587 2728                                  u10947 1AAA  
                                u10867 1928                                  u12477 56EE  
                                u12397 54A8                                  u11917 0E1C  
                                u11837 0C0C                                  u11757 09FE  
                                u11677 4784                                  u11597 279A  
                                u10957 1ADC                                  u10877 1986  
                                u11927 0E78                                  u11847 0C68  
                                u11767 0A64                                  u11687 4A4C  
                                u10967 1AE6                                  u10887 198E  
                                u11937 0EA0                                  u11857 0C90  
                                u11777 0A82                                  u11697 4A90  
                                u10977 1B00                                  u10897 19C0  
                                u11947 0F0A                                  u11867 0CEC  
                                u11787 0AB2                                  u10987 1BBE  
                                u11957 0F32                                  u11877 0D14  
                                u11797 0B18                                  u10997 1C1A  
                                u11967 0F8E                                  u11887 0D70  
                                u11977 0FB6                                  u11897 0D98  
                                u11987 1012                                  u11997 103A  
                      __end_of___lwdiv 553A                        __end_of___lwmod 57BE  
                                i2l275 395C                                  i2l634 39EE  
                                i2l933 2B90                                  i2l942 2C2E  
                      ___awdiv@counter 008A                                  i2l967 55E2  
                                i2l994 5B0E                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 2206  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 60D6  
                      __end_of_handler 3D88                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 5EE4                        __end_of_initLCD 5A52  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                          ___awtoft@sign 0091  
                                _getIR 53C8                        __end_of_loadRTC 5238  
                      __end_of_readMAG 5A0C                        __end_of_dpowers FAC2  
                                _first 0139                                  _enter 0067  
                                arm@on 00AC                        __end_of_isdigit 5F0E  
                                _input 007D                          ___ftpack@sign 0084  
                                _putch 60B6                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5F84  
                     __end_ofi2_getRTC 55AC                    _log_count_pop_w_tab 0143  
                                status 000FD8                            readCOND@res 0084  
                   __size_ofi2___awmod 0070                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 30D2  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 5C20                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 5926                         readIR@ana_port 0082  
                         __end_of_Test 4776                     __size_ofi2_lcdInst 000C  
                         __end_of_main 4D86                           __end_of_keys FAB8  
                         __end_of_sort 5FF0                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 413C                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C5  
                        __activetblptr 000003                                 ID@res1 00B2  
                               ID@res2 00B4             __size_of_updateServoStates 01C8  
                               ID@time 00B1             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0086  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FBB3  
                               STR_101 FC3B                                 STR_110 FE98  
                               STR_102 FC4C                                 STR_111 FCC3  
                               STR_103 FB91                                 STR_104 FE49  
                               STR_120 FB01                                 STR_112 FAEF  
                               STR_121 FE89                                 STR_113 FBF7  
                               STR_105 FBC4                                 STR_114 FC2A  
                               STR_106 FBA2                                 STR_122 FB49  
                               _ADRESH 000FC4                                 STR_107 FBC4  
                               STR_115 FC2A                                 STR_123 FE89  
                               STR_124 FE89                                 STR_108 FEC5  
                               STR_116 FC19                                 _EEADRH 000FAA  
                               STR_117 FC2A                                 STR_109 FEA7  
                               STR_125 FC08                                 STR_118 FC19  
                               STR_126 FCB2                                 _ADRESL 000FC3  
                               STR_127 FAEF                                 STR_119 FB37  
                               STR_128 FB5B                                 STR_129 FFB5  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                     __end_of___awtoft 5A96                                 ?_putch 0001  
                     __end_of___ftpack 4670                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 5CB0  
            i2_change_state_to_menu_22 5C80                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l2033 591C                                 i2l2043 5ACE  
                               i2l1086 3C84                                 i2l1095 3D2C  
                               i2l1097 3D4C                                 i2l1178 6088  
                               i2l1586 2F3E                                 i2l8020 3EC4  
                               i2l8004 3E86                                 i2l7310 2EC8  
                               i2l8014 3EAC                                 i2l7304 2EA6  
                               i2l7320 2F08                                 i2l8032 3EE6  
                               i2l8024 3ECE                                 i2l8008 3EA2  
                               i2l7234 5572                                 i2l7314 2EF2  
                               i2l7306 2EB0                                 i2l8050 3F2A  
                               i2l8042 3F06                                 i2l8018 3EC0  
                               i2l7244 559C                                 i2l7332 2F6C  
                               i2l7316 2F04                                 i2l7308 2EB6  
                               i2l8060 3F46                                 i2l7238 5582  
                               i2l7350 2FBA                                 i2l7262 2D6E  
                               i2l8054 3F3C                                 i2l8046 3F18  
                               i2l8038 3EF4                                 i2l7360 2FF8  
                               i2l7336 2F84                                 i2l7272 2D92  
                               i2l7362 3000                                 i2l7338 2F88  
                               i2l7266 2D7E                                 i2l7380 3048  
                               i2l7356 2FD4                                 i2l7268 2D8C  
                               i2l7390 30AE                                 i2l7374 302C  
                               i2l7294 2E4E                                 i2l7286 2E26  
                               i2l7278 2DC4                                 i2l7376 3034  
                               i2l7384 305A                                 i2l7368 3016  
                               i2l7296 2E58                                 i2l7392 30B6  
                               i2l6930 58F6                                 i2l7386 3060  
                               i2l7298 2E5C                                 i2l6916 6028  
                               i2l7396 5BF8                                 i2l6926 58EA  
                               i2l6950 5AB0                                 i2l7574 4508  
                               i2l7398 5C00                                 i2l6928 58F2  
                               i2l7840 398C                                 i2l6938 5912  
                               i2l6954 5AC4                                 i2l6946 5AA4  
                               i2l7586 454C                                 i2l7578 4518  
                               i2l7850 3A24                                 i2l6892 5FA4  
                               i2l6948 5AAC                                 i2l7860 3A92  
                               i2l7852 3A3A                                 i2l7950 3DC6  
                               i2l7942 3DAC                                 i2l7862 3AA8  
                               i2l7854 3A50                                 i2l7846 39F8  
                               i2l7952 3DD6                                 i2l7960 3DE4  
                               i2l7864 3ABE                                 i2l7856 3A66  
                               i2l7848 3A0E                                 i2l7872 3B00  
                               i2l7970 3E0A                                 i2l7954 3DDA  
                               i2l7866 3AD4                                 i2l7858 3A7C  
                               i2l7874 3B5A                                 i2l9634 55FC  
                               i2l9660 5656                                 i2l9652 563C  
                               i2l7972 3E10                                 i2l7964 3DF8  
                               i2l7868 3AEA                                 i2l9628 55CA  
                               i2l7990 3E60                                 i2l7974 3E16  
                               i2l7966 3DFE                                 i2l9672 5682  
                               i2l9664 566A                                 i2l9656 564A  
                               i2l9648 5630                                 i2l7968 3E04  
                               i2l9658 5652                                 i2l7978 3E1C  
                               i2l9668 5674                                 i2l7998 3E78  
              _f_most_recent_sort_time 0137                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                               _IR_res 00E0                              ??_Loading 00B1  
                     __end_of_delay_ms 5F36                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 5FCE  
                               ___ftge 4D86                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4A3E  
                               ___wmul 5BB8                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 5C20  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                     __end_of_readCOND 59C0                                 _getRTC 5238  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 6012                                 _initUI 5C50  
                               _readIR 5114                                 _logRun 4302  
                               getIR@i 0089                                 clear_0 594C  
                               clear_1 5958                                 clear_2 5964  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 4B14                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1DCE  
                            ??_handler 0049                __size_of_initGlobalVars 00D4  
                         ?_retrieveLog 0007                                 _strcpy 5B82  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5F5E  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5F36  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___awmod 568C                      __end_ofi2___lwdiv 5926  
                     __end_of_printRTC 36A0                           __mediumconst FAA6  
                    __end_ofi2___lwmod 5AD8                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F4                         i2___awmod@sign 0006  
                __end_of_algorithmTest 4B14                      __end_ofi2_lcdInst 60EE  
                    __end_ofi2_isdigit 6030                             __accesstop 0080  
              __end_of__initialization 596A                          ?_inputHandler 002A  
                           ___ftge@ff1 0092                             ___ftge@ff2 0095  
                _most_recent_sort_time 0147                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                             ___awtoft@c 008E  
                        i2_EEPROM_read 607A                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                _agitator_toggle_count 0059                  __size_of_EEPROM_write 00E8  
                         __pidataBANK1 6102                    BlockerTest@cam_flag 00B1  
                        __end_of_getIR 544A                            i2printRTC@i 0041  
                        _initSortTimer 4FC8            __end_of_updateServoPosition 5344  
                        __end_of_putch 60C6                        ID@reflectivity1 009D  
                      ID@reflectivity2 00A1                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 17D4  
                           __end_of_UI 08DA                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 5EB8          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5E8C                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0088  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08DA                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                              ID@cond1 009F                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0070  
        __end_ofi2_updateServoPosition 561C                           _EEPROM_write 4874  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3252 014F  
                    __end_of_SpeedTest 53C8                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1160 00A7  
                              _ID$1144 00A4                                _ID$1161 00A8  
                              _ID$1153 00A5                                _ID$1158 00A6  
                         ?i2_lcdNibble 0001                                UI@i_413 00C9  
                              UI@i_440 00CF                                UI@i_416 00CA  
                              UI@i_417 00CB                                UI@i_451 00D4  
                              UI@i_443 00D0                                UI@i_435 00CC  
                              UI@i_452 00D5                                UI@i_444 00D1  
                              UI@i_436 00CD                                UI@i_447 00D2  
                              UI@i_439 00CE                                UI@i_448 00D3  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0082                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2443 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10110 37A4  
                              i2l10102 3780                                i2l10130 37F2  
                              i2l10122 37CE                                i2l10114 37B2  
                              i2l10106 378E                                i2l10050 36D6  
                              i2l10150 3840                                i2l10142 3824  
                              i2l10134 3800                                i2l10126 37E4  
                              i2l10118 37C0                                i2l10062 3700  
                              i2l10054 36E4                                i2l11200 3932  
                              i2l10048 36D0                                i2l10410 2B5A  
                              i2l11202 394E                                i2l10170 388E  
                              i2l10162 3872                                i2l10154 384E  
                              i2l10146 3832                                i2l10138 380E  
                              i2l10090 3756                                i2l10082 3738  
                              i2l10074 371C                                i2l10066 370E  
                              i2l10058 36F2                                i2l10500 3FF2  
                              i2l11206 3E34                                i2l10190 38E4  
                              i2l10182 38C0                                i2l10174 38A4  
                              i2l10166 3880                                i2l10158 3864  
                              i2l10094 3764                                i2l10086 3748  
                              i2l10078 372A                                i2l10510 4050  
                              i2l10416 2BBC                                i2l11208 3E50  
                              i2l10520 408E                                i2l10442 2C4A  
                              i2l10186 38CE                                i2l10178 38B2  
                              i2l10098 3772                                i2l10514 4068  
                              i2l10506 3FFC                                i2l10460 2CC6  
                              i2l10444 2C52                                i2l10428 2BE4  
                              i2l10380 29F6                                i2l10196 38F2  
                              i2l10540 410A                                i2l10508 4046  
                              i2l10526 40B4                                i2l11190 403E  
                              i2l10456 2CB2                                i2l10376 29E6  
                              i2l11192 4122                                i2l11184 4020  
                              i2l10480 3F92                                i2l10712 3CFA  
                              i2l10632 3C02                                i2l10386 2A50  
                              i2l10570 5AE2                                i2l11194 4132  
                              i2l11186 402A                                i2l10706 3CE0  
                              i2l10634 3C06                                i2l10642 3C1A  
                              i2l10572 5AE8                                i2l11188 4034  
                              i2l10492 3FC8                                i2l10484 3FA8  
                              i2l10716 3D00                                i2l10644 3C32  
                              i2l10398 2B1E                                i2l11198 3910  
                              i2l10486 3FB2                                i2l10662 3C58  
                              i2l10638 3C12                                i2l10576 5AEE  
                              i2l10648 3C3C                                i2l10498 3FDE  
                              i2l10738 3D4A                                i2l10690 3CB0  
                              i2l10684 3CA2                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E6  
                            ?_readCOND 0001                             _initEEPROM 6064  
                              i2_putch 60D6                              ?_initTime 0080  
                      _f_loadingNewCan 00EE                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 56F8                                _Loading 17D4  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 4E4E                                ___awmod 5072  
                           _initServos 544A                                ___lldiv 4F0C  
                      __size_of___wmul 0036                        __size_of_getMAG 0030  
                              ___lwdiv 54C2                                ___lwmod 575C  
                      __size_of_getRTC 0086                        printSortTimer@i 0047  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 0098  
                              __pcinit 5926                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 4BEA  
                              _lcdInst 60C6                                _handler 0008  
                              __ptext0 4CBE                                __ptext1 5FCE  
                              __ptext2 17D4                                __ptext3 4FC8  
                              __ptext4 4BEA                                __ptext5 5C20  
                              __ptext6 53C8                                __ptext7 1192  
                              __ptext8 5114                                __ptext9 5974  
                      __size_of_printf 0438                                _readADC 5EB8  
                      __size_of_strcpy 0036                                _initLCD 5A0C  
                              _cur_can 012B                                _loadRTC 51AC  
                              _readMAG 59C0                                _dpowers FAB8  
                   actuatorTest@i_1770 00B3                     actuatorTest@i_1763 00AE  
                         __size_of_arm 00FE                     actuatorTest@i_1772 00B4  
                   actuatorTest@i_1764 00AF                     actuatorTest@i_1756 00AD  
                   actuatorTest@i_1773 00B5                     actuatorTest@i_1782 00BA  
                   actuatorTest@i_1766 00B0                     actuatorTest@i_1783 00BB  
                   actuatorTest@i_1775 00B6                     actuatorTest@i_1767 00B1  
                   actuatorTest@i_1792 00C0                     actuatorTest@i_1776 00B7  
                   actuatorTest@i_1793 00C1                     actuatorTest@i_1785 00BC  
                   actuatorTest@i_1769 00B2                     actuatorTest@i_1786 00BD  
                   actuatorTest@i_1778 00B8                     actuatorTest@i_1795 00C2  
                   actuatorTest@i_1779 00B9                     actuatorTest@i_1796 00C3  
                   actuatorTest@i_1788 00BE                     actuatorTest@i_1789 00BF  
                              _isdigit 5EE4                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0126  
                   _motor_toggle_count 0149                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
   initGlobalVars@time_recent_agitator 0080                           _Distribution 495C  
                 PlatformTest@res_1808 00AF                         __pintcode_body 3B96  
                 end_of_initialization 596A                             ??_readCOND 0082  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3B96  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestDC 00D6                              i2u1041_40 2B34  
                            i2u1051_40 2BFA                              i2u1060_40 2CA2  
                            i2u1053_40 2C20                              i2u1045_40 2B80  
                            i2u1054_48 2C22                              i2u1047_40 2BA6  
                            i2u1046_48 2B82                              i2u1058_40 2C86  
                            i2u1250_47 589E                              i2u1059_40 2C94  
                            i2u1251_47 58C0                              i2u1252_47 58CA  
                            i2u1248_47 3DCC                              i2u1249_47 5894  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 4CBE  
                           _sensorTest 25F4                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3F74                           ??_BothServos 00AB  
                __end_of_machineConfig 575C                   __end_of_PlatformTest 33D6  
                 _time_recent_agitator 014B                             _updateMenu 36A0  
                    i2_I2C_Master_Read 5F84                              _IR_signal 00E2  
                    i2_I2C_Master_Wait 60A4                      i2_I2C_Master_Stop 611A  
                            i2___awmod 561C                      i2___lwdiv@divisor 0008  
                      _log_count_total 0145                         _PortTestPusher 581E  
                            i2___lwdiv 58D4                              i2___lwmod 5A96  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 3B96  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 60E2                          Loading@i_1140 00BD  
                        Loading@i_1142 00BF                          Loading@i_1127 00B7  
                        Loading@i_1136 00B9                          Loading@i_1139 00BB  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 6012                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 25F4                    __end_of_EEPROM_read 6064  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 4E4E                           _Loading$1138 00B6  
                       __end_of___wmul 5BEE                         __end_of_getMAG 5C50  
                       __end_of_getRTC 52BE                   __size_ofi2_lcdNibble 005A  
                       _timer2_counter 0073                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 5C80  
                       __end_of_readIR 51AC                         __end_of_logRun 443E  
                     i2___wmul@product 0005                         __end_of_printf 2206  
                         i2printf@flag 0026                         __end_of_strcpy 5BB8  
            __end_ofi2_I2C_Master_Read 5FAA              __end_ofi2_I2C_Master_Wait 60B6  
                         i2printf@prec 001D                    start_initialization 5926  
            __end_ofi2_I2C_Master_Stop 6122                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
               __end_of_PortTestPusher 587A                            __end_of_arm 4874  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1421 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___awmod 0001                   BlockerTest@cond_flag 00B3  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___ftge 0098                              _SpeedTest 5344  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 014F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0084                               ??_logRun 00B1  
                             ID@i_1152 00AB                               ID@i_1163 00AF  
                             ID@i_1164 00BA                               ID@i_1157 00AD  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  __size_of_initEEPROM 0016                   __size_of_BlockerTest 01C6  
                  _printSortTimer$2578 0043                      __size_of___awtoft 0044  
                    __size_of___ftpack 010C                            __pbssCOMRAM 0059  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 038A                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2081 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                      __size_of_readCOND 004C  
                          _EEPROM_read 604C                       _I2C_Master_Start 6112  
                   __end_of_PortTestDC 4BEA                              _f_lastCan 00EC  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 60EE                      __size_of_initTime 0022  
                i2_updateServoPosition 55AC                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAA6  
                            _lcdNibble 568C                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                              __ptext100 60A4  
                            __ptext101 561C                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0304                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013B                              _cur_state 00E8  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0082  
                          ??i2___awmod 0005                          _algorithmTest 4A3E  
                          ??i2___lwdiv 000A                            _COND_signal 00DE  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0642                              getIR@port 0086  
                          __size_of_UI 08C8                    __size_of_sensorTest 03E6  
           __end_ofi2_I2C_Master_Start 612A             __end_ofi2_I2C_Master_Write 6102  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 3D88                            ??i2_isdigit 0001  
                         _PlatformTest 30D2                           BlockerTest@i 00AD  
                             _PIR2bits 000FA1                               i2u623_40 2E8A  
                      PlatformTest@res 00AD                               i2u623_47 2E80  
                             i2u627_40 2EEA                               i2u627_47 2EE0  
                             i2u558_40 5FA2                               i2u680_40 39EE  
                  __size_of_updateMenu 02C0                         _log_completion 00F2  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0077                              _was_low_2 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 5F5E  
                        lcdNibble@data 0081                               i2_getRTC 553A  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                __size_of_updateArmState 003A  
                             Loading@i 00C1                               Loading@j 00C3  
                             i2_printf 2D64                               i2_strcpy 5BEE  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 593A                     i2___awmod@dividend 0001  
                         ??_initEEPROM 00B1                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 6090                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 05FA                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 5072  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 5D10  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 5B4A  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 5B12  
              _change_state_to_menu_23 5CE0                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 5E00                _change_state_to_logs_12 5DD0  
              _change_state_to_logs_22 5DA0                _change_state_to_logs_23 5E5E  
              _change_state_to_logs_33 5D70                _change_state_to_logs_34 5D40  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 5A52                               ___ftpack 4564  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3D80                     __end_of_initEEPROM 607A  
                      _I2C_Master_Init 57BE                       __size_of_readADC 002C  
                      _I2C_Master_Read 5E30                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 6090  
                      _I2C_Master_Stop 610A                       __size_of_isdigit 002A  
                             _delay_ms 5F0E                         _printSortTimer 29DA  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 4564                               __ptext10 5F0E  
                             __ptext11 4D86                               __ptext20 4F0C  
                             __ptext12 5A52                               __ptext21 5E8C  
                             __ptext13 4564                               __ptext30 5238  
                             __ptext22 5FF0                               __ptext14 495C  
                             __ptext31 60EE                               __ptext23 5A0C  
                             __ptext15 56F8                               __ptext40 4670  
                             __ptext32 610A                               __ptext24 6064  
                             __ptext16 4302                               __ptext41 25F4  
                             __ptext33 6112                               __ptext25 4874  
                             __ptext17 5C50                               __ptext50 2206  
                             __ptext42 59C0                               __ptext34 5E30  
                             __ptext26 604C                               __ptext18 51AC  
                             __ptext51 6030                               __ptext43 4776  
                             __ptext35 6090                               __ptext27 0012  
                             __ptext19 57BE                               __ptext60 575C  
                             __ptext52 544A                               __ptext44 4A3E  
                             __ptext36 5B12                               __ptext28 33D6  
                             __ptext61 54C2                               __ptext53 52BE  
                             __ptext45 08DA                               __ptext37 5B4A  
                             __ptext29 5B82                               __ptext70 5BEE  
                             __ptext62 60C6                               __ptext54 413C  
                             __ptext46 5344                               __ptext38 5072  
                             __ptext71 3D88                               __ptext63 568C  
                             __ptext55 5EB8                               __ptext47 581E  
                             __ptext39 4E4E                               __ptext80 5DD0  
                             __ptext72 5C80                               __ptext56 1DCE  
                             __ptext48 4B14                               __ptext81 5E00  
                             __ptext73 5CB0                               __ptext65 3F74  
                             __ptext57 60B6                               __ptext49 30D2  
                             __ptext90 5F5E                               __ptext82 5FAA  
                             __ptext74 5CE0                               __ptext66 55AC  
                             __ptext58 5EE4                               __ptext91 5A96  
                             __ptext83 443E                               __ptext75 5D10  
                             __ptext67 36A0                               __ptext59 5BB8  
                             __ptext92 58D4                               __ptext84 607A  
                             __ptext76 5D40                               __ptext68 5F36  
                             __ptext93 60E2                               __ptext85 5AD8  
                             __ptext77 5D70                               __ptext69 3960  
                             __ptext94 587A                               __ptext86 29DA  
                             __ptext78 5E5E                               __ptext95 553A  
                             __ptext87 2D64                               __ptext79 5DA0  
                             __ptext96 60F8                               __ptext88 60D6  
                             __ptext97 611A                               __ptext89 6012  
                             __ptext98 6122                               __ptext99 5F84  
                             _dispLogs 5FAA                          ?_actuatorTest 0001  
                   PlatformTest@i_1812 00B3                               _readCOND 5974  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2081 0002                     __end_of_initServos 54C2  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5FF0                          __size_of_main 00C8  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 52BE  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 33D6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 5CE0  
    __end_ofi2_change_state_to_menu_22 5CB0                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                      i2___awmod@divisor 0003  
               __end_of_printSortTimer 2D64                              putch@data 0082  
                    i2___awmod@counter 0005               __end_of_I2C_Master_Start 611A  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 60F8  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E4                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                   sensorTest@res_1733 00AF                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                       BlockerTest@res 00AF                     __end_of_sensorTest 29DA  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 604C  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 3960                __end_of_I2C_Master_Init 581E  
              __end_of_I2C_Master_Read 5E5E                __end_of_I2C_Master_Wait 60A4  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 6112  
                          lcdInst@data 0082                          printRTC@F3242 0153  
                         retrieveLog@i 000E                            _retrieveLog 443E  
                  __end_ofi2_lcdNibble 58D4                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 5AD8  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 56F8  
                      ___lwmod@counter 008B                      _updateServoStates 3F74  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00EA  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
