

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 06:23:40 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  004F0A                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3228
   152  004F0A  4D                 	db	77
   153  004F0B  4D                 	db	77
   154  004F0C  4D                 	db	77
   155  004F0D  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3219
   158  004F0E  4D                 	db	77
   159  004F0F  4D                 	db	77
   160  004F10  4D                 	db	77
   161  004F11  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FAEE                     __pmediumconst:
   165                           	opt stack 0
   166  00FAEE  00                 	db	0
   167  00FAEF                     _keys:
   168                           	opt stack 0
   169  00FAEF  31                 	db	49
   170  00FAF0  32                 	db	50
   171  00FAF1  33                 	db	51
   172  00FAF2  41                 	db	65
   173  00FAF3  34                 	db	52
   174  00FAF4  35                 	db	53
   175  00FAF5  36                 	db	54
   176  00FAF6  42                 	db	66
   177  00FAF7  37                 	db	55
   178  00FAF8  38                 	db	56
   179  00FAF9  39                 	db	57
   180  00FAFA  43                 	db	67
   181  00FAFB  2A                 	db	42
   182  00FAFC  30                 	db	48
   183  00FAFD  23                 	db	35
   184  00FAFE  44                 	db	68
   185  00FAFF  00                 	db	0
   186  00FB00                     __end_of_keys:
   187                           	opt stack 0
   188  00FB00                     _dpowers:
   189                           	opt stack 0
   190  00FB00  0001               	dw	1
   191  00FB02  000A               	dw	10
   192  00FB04  0064               	dw	100
   193  00FB06  03E8               	dw	1000
   194  00FB08  2710               	dw	10000
   195  00FB0A                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB0A                     STR_21:
   269  00FB0A  25                 	db	37
   270  00FB0B  30                 	db	48	;'0'
   271  00FB0C  32                 	db	50	;'2'
   272  00FB0D  64                 	db	100	;'d'
   273  00FB0E  25                 	db	37
   274  00FB0F  73                 	db	115	;'s'
   275  00FB10  20                 	db	32
   276  00FB11  7C                 	db	124
   277  00FB12  20                 	db	32
   278  00FB13  25                 	db	37
   279  00FB14  30                 	db	48	;'0'
   280  00FB15  32                 	db	50	;'2'
   281  00FB16  64                 	db	100	;'d'
   282  00FB17  3A                 	db	58	;':'
   283  00FB18  25                 	db	37
   284  00FB19  30                 	db	48	;'0'
   285  00FB1A  32                 	db	50	;'2'
   286  00FB1B  64                 	db	100	;'d'
   287  00FB1C  3A                 	db	58	;':'
   288  00FB1D  25                 	db	37
   289  00FB1E  30                 	db	48	;'0'
   290  00FB1F  32                 	db	50	;'2'
   291  00FB20  64                 	db	100	;'d'
   292  00FB21  00                 	db	0
   293  00FB22                     STR_66:
   294  00FB22  28                 	db	40
   295  00FB23  64                 	db	100	;'d'
   296  00FB24  61                 	db	97	;'a'
   297  00FB25  74                 	db	116	;'t'
   298  00FB26  61                 	db	97	;'a'
   299  00FB27  3A                 	db	58	;':'
   300  00FB28  20                 	db	32
   301  00FB29  25                 	db	37
   302  00FB2A  75                 	db	117	;'u'
   303  00FB2B  2C                 	db	44
   304  00FB2C  20                 	db	32
   305  00FB2D  61                 	db	97	;'a'
   306  00FB2E  64                 	db	100	;'d'
   307  00FB2F  64                 	db	100	;'d'
   308  00FB30  72                 	db	114	;'r'
   309  00FB31  3A                 	db	58	;':'
   310  00FB32  20                 	db	32
   311  00FB33  25                 	db	37
   312  00FB34  75                 	db	117	;'u'
   313  00FB35  29                 	db	41
   314  00FB36  00                 	db	0
   315  00FB37                     STR_111:
   316  00FB37  44                 	db	68	;'D'
   317  00FB38  20                 	db	32
   318  00FB39  57                 	db	87	;'W'
   319  00FB3A  49                 	db	73	;'I'
   320  00FB3B  4C                 	db	76	;'L'
   321  00FB3C  4C                 	db	76	;'L'
   322  00FB3D  20                 	db	32
   323  00FB3E  52                 	db	82	;'R'
   324  00FB3F  45                 	db	69	;'E'
   325  00FB40  54                 	db	84	;'T'
   326  00FB41  55                 	db	85	;'U'
   327  00FB42  52                 	db	82	;'R'
   328  00FB43  4E                 	db	78	;'N'
   329  00FB44  20                 	db	32
   330  00FB45  20                 	db	32
   331  00FB46  20                 	db	32
   332  00FB47  20                 	db	32
   333  00FB48  00                 	db	0
   334  00FB49                     STR_112:
   335  00FB49  4F                 	db	79	;'O'
   336  00FB4A  54                 	db	84	;'T'
   337  00FB4B  48                 	db	72	;'H'
   338  00FB4C  45                 	db	69	;'E'
   339  00FB4D  52                 	db	82	;'R'
   340  00FB4E  20                 	db	32
   341  00FB4F  53                 	db	83	;'S'
   342  00FB50  45                 	db	69	;'E'
   343  00FB51  54                 	db	84	;'T'
   344  00FB52  53                 	db	83	;'S'
   345  00FB53  20                 	db	32
   346  00FB54  52                 	db	82	;'R'
   347  00FB55  41                 	db	65	;'A'
   348  00FB56  35                 	db	53	;'5'
   349  00FB57  20                 	db	32
   350  00FB58  20                 	db	32
   351  00FB59  20                 	db	32
   352  00FB5A  00                 	db	0
   353  00FB5B                     STR_120:
   354  00FB5B  53                 	db	83	;'S'
   355  00FB5C  3A                 	db	58	;':'
   356  00FB5D  20                 	db	32
   357  00FB5E  44                 	db	68	;'D'
   358  00FB5F  20                 	db	32
   359  00FB60  57                 	db	87	;'W'
   360  00FB61  49                 	db	73	;'I'
   361  00FB62  4C                 	db	76	;'L'
   362  00FB63  4C                 	db	76	;'L'
   363  00FB64  20                 	db	32
   364  00FB65  52                 	db	82	;'R'
   365  00FB66  45                 	db	69	;'E'
   366  00FB67  54                 	db	84	;'T'
   367  00FB68  55                 	db	85	;'U'
   368  00FB69  52                 	db	82	;'R'
   369  00FB6A  4E                 	db	78	;'N'
   370  00FB6B  20                 	db	32
   371  00FB6C  00                 	db	0
   372  00FB6D                     STR_123:
   373  00FB6D  4F                 	db	79	;'O'
   374  00FB6E  54                 	db	84	;'T'
   375  00FB6F  48                 	db	72	;'H'
   376  00FB70  45                 	db	69	;'E'
   377  00FB71  52                 	db	82	;'R'
   378  00FB72  3A                 	db	58	;':'
   379  00FB73  20                 	db	32
   380  00FB74  43                 	db	67	;'C'
   381  00FB75  41                 	db	65	;'A'
   382  00FB76  4D                 	db	77	;'M'
   383  00FB77  20                 	db	32
   384  00FB78  54                 	db	84	;'T'
   385  00FB79  4F                 	db	79	;'O'
   386  00FB7A  47                 	db	71	;'G'
   387  00FB7B  47                 	db	71	;'G'
   388  00FB7C  4C                 	db	76	;'L'
   389  00FB7D  45                 	db	69	;'E'
   390  00FB7E  00                 	db	0
   391  00FB7F                     STR_122:
   392  00FB7F  44                 	db	68	;'D'
   393  00FB80  3A                 	db	58	;':'
   394  00FB81  20                 	db	32
   395  00FB82  52                 	db	82	;'R'
   396  00FB83  45                 	db	69	;'E'
   397  00FB84  54                 	db	84	;'T'
   398  00FB85  7C                 	db	124
   399  00FB86  32                 	db	50	;'2'
   400  00FB87  3A                 	db	58	;':'
   401  00FB88  20                 	db	32
   402  00FB89  43                 	db	67	;'C'
   403  00FB8A  4F                 	db	79	;'O'
   404  00FB8B  4E                 	db	78	;'N'
   405  00FB8C  44                 	db	68	;'D'
   406  00FB8D  20                 	db	32
   407  00FB8E  25                 	db	37
   408  00FB8F  64                 	db	100	;'d'
   409  00FB90  00                 	db	0
   410  00FB91                     STR_3:
   411  00FB91  2D                 	db	45
   412  00FB92  2D                 	db	45
   413  00FB93  20                 	db	32
   414  00FB94  4C                 	db	76	;'L'
   415  00FB95  4F                 	db	79	;'O'
   416  00FB96  47                 	db	71	;'G'
   417  00FB97  20                 	db	32
   418  00FB98  25                 	db	37
   419  00FB99  32                 	db	50	;'2'
   420  00FB9A  64                 	db	100	;'d'
   421  00FB9B  20                 	db	32
   422  00FB9C  48                 	db	72	;'H'
   423  00FB9D  45                 	db	69	;'E'
   424  00FB9E  52                 	db	82	;'R'
   425  00FB9F  45                 	db	69	;'E'
   426  00FBA0  2D                 	db	45
   427  00FBA1  2D                 	db	45
   428  00FBA2  00                 	db	0
   429  00FBA3                     STR_1:
   430  00FBA3  52                 	db	82	;'R'
   431  00FBA4  45                 	db	69	;'E'
   432  00FBA5  53                 	db	83	;'S'
   433  00FBA6  55                 	db	85	;'U'
   434  00FBA7  4C                 	db	76	;'L'
   435  00FBA8  54                 	db	84	;'T'
   436  00FBA9  53                 	db	83	;'S'
   437  00FBAA  20                 	db	32
   438  00FBAB  49                 	db	73	;'I'
   439  00FBAC  4E                 	db	78	;'N'
   440  00FBAD  20                 	db	32
   441  00FBAE  4C                 	db	76	;'L'
   442  00FBAF  4F                 	db	79	;'O'
   443  00FBB0  47                 	db	71	;'G'
   444  00FBB1  20                 	db	32
   445  00FBB2  25                 	db	37
   446  00FBB3  64                 	db	100	;'d'
   447  00FBB4  00                 	db	0
   448  00FBB5                     STR_102:
   449  00FBB5  4D                 	db	77	;'M'
   450  00FBB6  49                 	db	73	;'I'
   451  00FBB7  44                 	db	68	;'D'
   452  00FBB8  20                 	db	32
   453  00FBB9  2D                 	db	45
   454  00FBBA  2D                 	db	45
   455  00FBBB  20                 	db	32
   456  00FBBC  32                 	db	50	;'2'
   457  00FBBD  73                 	db	115	;'s'
   458  00FBBE  20                 	db	32
   459  00FBBF  20                 	db	32
   460  00FBC0  20                 	db	32
   461  00FBC1  20                 	db	32
   462  00FBC2  20                 	db	32
   463  00FBC3  20                 	db	32
   464  00FBC4  20                 	db	32
   465  00FBC5  00                 	db	0
   466  00FBC6                     STR_105:
   467  00FBC6  44                 	db	68	;'D'
   468  00FBC7  52                 	db	82	;'R'
   469  00FBC8  4F                 	db	79	;'O'
   470  00FBC9  50                 	db	80	;'P'
   471  00FBCA  20                 	db	32
   472  00FBCB  2D                 	db	45
   473  00FBCC  2D                 	db	45
   474  00FBCD  20                 	db	32
   475  00FBCE  32                 	db	50	;'2'
   476  00FBCF  73                 	db	115	;'s'
   477  00FBD0  20                 	db	32
   478  00FBD1  20                 	db	32
   479  00FBD2  20                 	db	32
   480  00FBD3  20                 	db	32
   481  00FBD4  20                 	db	32
   482  00FBD5  20                 	db	32
   483  00FBD6  00                 	db	0
   484  00FBD7                     STR_99:
   485  00FBD7  4C                 	db	76	;'L'
   486  00FBD8  45                 	db	69	;'E'
   487  00FBD9  46                 	db	70	;'F'
   488  00FBDA  54                 	db	84	;'T'
   489  00FBDB  20                 	db	32
   490  00FBDC  2D                 	db	45
   491  00FBDD  2D                 	db	45
   492  00FBDE  20                 	db	32
   493  00FBDF  32                 	db	50	;'2'
   494  00FBE0  73                 	db	115	;'s'
   495  00FBE1  20                 	db	32
   496  00FBE2  20                 	db	32
   497  00FBE3  20                 	db	32
   498  00FBE4  20                 	db	32
   499  00FBE5  20                 	db	32
   500  00FBE6  20                 	db	32
   501  00FBE7  00                 	db	0
   502  00FBE8                     STR_104:
   503  00FBE8  4C                 	db	76	;'L'
   504  00FBE9  45                 	db	69	;'E'
   505  00FBEA  56                 	db	86	;'V'
   506  00FBEB  45                 	db	69	;'E'
   507  00FBEC  4C                 	db	76	;'L'
   508  00FBED  20                 	db	32
   509  00FBEE  2D                 	db	45
   510  00FBEF  2D                 	db	45
   511  00FBF0  20                 	db	32
   512  00FBF1  32                 	db	50	;'2'
   513  00FBF2  73                 	db	115	;'s'
   514  00FBF3  20                 	db	32
   515  00FBF4  20                 	db	32
   516  00FBF5  20                 	db	32
   517  00FBF6  20                 	db	32
   518  00FBF7  20                 	db	32
   519  00FBF8  00                 	db	0
   520  00FBF9                     STR_98:
   521  00FBF9  52                 	db	82	;'R'
   522  00FBFA  49                 	db	73	;'I'
   523  00FBFB  47                 	db	71	;'G'
   524  00FBFC  48                 	db	72	;'H'
   525  00FBFD  54                 	db	84	;'T'
   526  00FBFE  20                 	db	32
   527  00FBFF  2D                 	db	45
   528  00FC00  2D                 	db	45
   529  00FC01  20                 	db	32
   530  00FC02  32                 	db	50	;'2'
   531  00FC03  73                 	db	115	;'s'
   532  00FC04  20                 	db	32
   533  00FC05  20                 	db	32
   534  00FC06  20                 	db	32
   535  00FC07  20                 	db	32
   536  00FC08  20                 	db	32
   537  00FC09  00                 	db	0
   538  00FC0A                     STR_97:
   539  00FC0A  4D                 	db	77	;'M'
   540  00FC0B  49                 	db	73	;'I'
   541  00FC0C  44                 	db	68	;'D'
   542  00FC0D  44                 	db	68	;'D'
   543  00FC0E  4C                 	db	76	;'L'
   544  00FC0F  45                 	db	69	;'E'
   545  00FC10  20                 	db	32
   546  00FC11  2D                 	db	45
   547  00FC12  2D                 	db	45
   548  00FC13  20                 	db	32
   549  00FC14  32                 	db	50	;'2'
   550  00FC15  73                 	db	115	;'s'
   551  00FC16  20                 	db	32
   552  00FC17  20                 	db	32
   553  00FC18  20                 	db	32
   554  00FC19  20                 	db	32
   555  00FC1A  00                 	db	0
   556  00FC1B  44                 	db	68	;'D'
   557  00FC1C  20                 	db	32
   558  00FC1D  57                 	db	87	;'W'
   559  00FC1E  49                 	db	73	;'I'
   560  00FC1F  4C                 	db	76	;'L'
   561  00FC20  4C                 	db	76	;'L'
   562  00FC21  20                 	db	32
   563  00FC22  52                 	db	82	;'R'
   564  00FC23  45                 	db	69	;'E'
   565  00FC24  54                 	db	84	;'T'
   566  00FC25  55                 	db	85	;'U'
   567  00FC26  52                 	db	82	;'R'
   568  00FC27  4E                 	db	78	;'N'
   569  00FC28  20                 	db	32
   570  00FC29  20                 	db	32
   571  00FC2A  20                 	db	32
   572  00FC2B  00                 	db	0
   573  00FC2C                     STR_100:
   574  00FC2C  4D                 	db	77	;'M'
   575  00FC2D  49                 	db	73	;'I'
   576  00FC2E  44                 	db	68	;'D'
   577  00FC2F  2D                 	db	45
   578  00FC30  4C                 	db	76	;'L'
   579  00FC31  45                 	db	69	;'E'
   580  00FC32  46                 	db	70	;'F'
   581  00FC33  54                 	db	84	;'T'
   582  00FC34  20                 	db	32
   583  00FC35  2D                 	db	45
   584  00FC36  2D                 	db	45
   585  00FC37  20                 	db	32
   586  00FC38  32                 	db	50	;'2'
   587  00FC39  73                 	db	115	;'s'
   588  00FC3A  20                 	db	32
   589  00FC3B  20                 	db	32
   590  00FC3C  00                 	db	0
   591  00FC3D                     STR_101:
   592  00FC3D  4D                 	db	77	;'M'
   593  00FC3E  49                 	db	73	;'I'
   594  00FC3F  44                 	db	68	;'D'
   595  00FC40  2D                 	db	45
   596  00FC41  52                 	db	82	;'R'
   597  00FC42  49                 	db	73	;'I'
   598  00FC43  47                 	db	71	;'G'
   599  00FC44  48                 	db	72	;'H'
   600  00FC45  54                 	db	84	;'T'
   601  00FC46  20                 	db	32
   602  00FC47  2D                 	db	45
   603  00FC48  2D                 	db	45
   604  00FC49  20                 	db	32
   605  00FC4A  32                 	db	50	;'2'
   606  00FC4B  73                 	db	115	;'s'
   607  00FC4C  20                 	db	32
   608  00FC4D  00                 	db	0
   609  00FC4E  45                 	db	69	;'E'
   610  00FC4F  4C                 	db	76	;'L'
   611  00FC50  53                 	db	83	;'S'
   612  00FC51  45                 	db	69	;'E'
   613  00FC52  20                 	db	32
   614  00FC53  54                 	db	84	;'T'
   615  00FC54  4F                 	db	79	;'O'
   616  00FC55  47                 	db	71	;'G'
   617  00FC56  47                 	db	71	;'G'
   618  00FC57  4C                 	db	76	;'L'
   619  00FC58  45                 	db	69	;'E'
   620  00FC59  53                 	db	83	;'S'
   621  00FC5A  20                 	db	32
   622  00FC5B  52                 	db	82	;'R'
   623  00FC5C  41                 	db	65	;'A'
   624  00FC5D  35                 	db	53	;'5'
   625  00FC5E  00                 	db	0
   626  00FC5F                     STR_72:
   627  00FC5F  41                 	db	65	;'A'
   628  00FC60  4C                 	db	76	;'L'
   629  00FC61  47                 	db	71	;'G'
   630  00FC62  31                 	db	49	;'1'
   631  00FC63  3A                 	db	58	;':'
   632  00FC64  20                 	db	32
   633  00FC65  39                 	db	57	;'9'
   634  00FC66  20                 	db	32
   635  00FC67  50                 	db	80	;'P'
   636  00FC68  4F                 	db	79	;'O'
   637  00FC69  50                 	db	80	;'P'
   638  00FC6A  4E                 	db	78	;'N'
   639  00FC6B  4F                 	db	79	;'O'
   640  00FC6C  54                 	db	84	;'T'
   641  00FC6D  41                 	db	65	;'A'
   642  00FC6E  42                 	db	66	;'B'
   643  00FC6F  00                 	db	0
   644  00FC70                     STR_92:
   645  00FC70  54                 	db	84	;'T'
   646  00FC71  53                 	db	83	;'S'
   647  00FC72  54                 	db	84	;'T'
   648  00FC73  3A                 	db	58	;':'
   649  00FC74  20                 	db	32
   650  00FC75  43                 	db	67	;'C'
   651  00FC76  4F                 	db	79	;'O'
   652  00FC77  4E                 	db	78	;'N'
   653  00FC78  44                 	db	68	;'D'
   654  00FC79  20                 	db	32
   655  00FC7A  53                 	db	83	;'S'
   656  00FC7B  4F                 	db	79	;'O'
   657  00FC7C  4C                 	db	76	;'L'
   658  00FC7D  4E                 	db	78	;'N'
   659  00FC7E  27                 	db	39
   660  00FC7F  44                 	db	68	;'D'
   661  00FC80  00                 	db	0
   662  00FC81                     STR_94:
   663  00FC81  54                 	db	84	;'T'
   664  00FC82  53                 	db	83	;'S'
   665  00FC83  54                 	db	84	;'T'
   666  00FC84  3A                 	db	58	;':'
   667  00FC85  20                 	db	32
   668  00FC86  50                 	db	80	;'P'
   669  00FC87  55                 	db	85	;'U'
   670  00FC88  53                 	db	83	;'S'
   671  00FC89  48                 	db	72	;'H'
   672  00FC8A  20                 	db	32
   673  00FC8B  53                 	db	83	;'S'
   674  00FC8C  4F                 	db	79	;'O'
   675  00FC8D  4C                 	db	76	;'L'
   676  00FC8E  4E                 	db	78	;'N'
   677  00FC8F  27                 	db	39
   678  00FC90  44                 	db	68	;'D'
   679  00FC91  00                 	db	0
   680  00FC92                     STR_68:
   681  00FC92  32                 	db	50	;'2'
   682  00FC93  2E                 	db	46
   683  00FC94  53                 	db	83	;'S'
   684  00FC95  4E                 	db	78	;'N'
   685  00FC96  52                 	db	82	;'R'
   686  00FC97  7C                 	db	124
   687  00FC98  34                 	db	52	;'4'
   688  00FC99  2E                 	db	46
   689  00FC9A  48                 	db	72	;'H'
   690  00FC9B  49                 	db	73	;'I'
   691  00FC9C  7C                 	db	124
   692  00FC9D  35                 	db	53	;'5'
   693  00FC9E  2E                 	db	46
   694  00FC9F  4D                 	db	77	;'M'
   695  00FCA0  45                 	db	69	;'E'
   696  00FCA1  44                 	db	68	;'D'
   697  00FCA2  00                 	db	0
   698  00FCA3                     STR_69:
   699  00FCA3  42                 	db	66	;'B'
   700  00FCA4  2E                 	db	46
   701  00FCA5  50                 	db	80	;'P'
   702  00FCA6  53                 	db	83	;'S'
   703  00FCA7  48                 	db	72	;'H'
   704  00FCA8  7C                 	db	124
   705  00FCA9  38                 	db	56	;'8'
   706  00FCAA  2E                 	db	46
   707  00FCAB  53                 	db	83	;'S'
   708  00FCAC  56                 	db	86	;'V'
   709  00FCAD  7C                 	db	124
   710  00FCAE  39                 	db	57	;'9'
   711  00FCAF  2E                 	db	46
   712  00FCB0  42                 	db	66	;'B'
   713  00FCB1  4C                 	db	76	;'L'
   714  00FCB2  4B                 	db	75	;'K'
   715  00FCB3  00                 	db	0
   716  00FCB4                     STR_110:
   717  00FCB4  54                 	db	84	;'T'
   718  00FCB5  53                 	db	83	;'S'
   719  00FCB6  54                 	db	84	;'T'
   720  00FCB7  3A                 	db	58	;':'
   721  00FCB8  20                 	db	32
   722  00FCB9  42                 	db	66	;'B'
   723  00FCBA  4F                 	db	79	;'O'
   724  00FCBB  54                 	db	84	;'T'
   725  00FCBC  48                 	db	72	;'H'
   726  00FCBD  20                 	db	32
   727  00FCBE  53                 	db	83	;'S'
   728  00FCBF  45                 	db	69	;'E'
   729  00FCC0  52                 	db	82	;'R'
   730  00FCC1  56                 	db	86	;'V'
   731  00FCC2  4F                 	db	79	;'O'
   732  00FCC3  53                 	db	83	;'S'
   733  00FCC4  00                 	db	0
   734  00FCC5                     STR_41:
   735  00FCC5  4C                 	db	76	;'L'
   736  00FCC6  4F                 	db	79	;'O'
   737  00FCC7  47                 	db	71	;'G'
   738  00FCC8  20                 	db	32
   739  00FCC9  31                 	db	49	;'1'
   740  00FCCA  20                 	db	32
   741  00FCCB  20                 	db	32
   742  00FCCC  20                 	db	32
   743  00FCCD  20                 	db	32
   744  00FCCE  20                 	db	32
   745  00FCCF  20                 	db	32
   746  00FCD0  20                 	db	32
   747  00FCD1  20                 	db	32
   748  00FCD2  20                 	db	32
   749  00FCD3  20                 	db	32
   750  00FCD4  20                 	db	32
   751  00FCD5  00                 	db	0
   752  00FCD6                     STR_40:
   753  00FCD6  4C                 	db	76	;'L'
   754  00FCD7  4F                 	db	79	;'O'
   755  00FCD8  47                 	db	71	;'G'
   756  00FCD9  20                 	db	32
   757  00FCDA  32                 	db	50	;'2'
   758  00FCDB  20                 	db	32
   759  00FCDC  20                 	db	32
   760  00FCDD  20                 	db	32
   761  00FCDE  20                 	db	32
   762  00FCDF  20                 	db	32
   763  00FCE0  20                 	db	32
   764  00FCE1  20                 	db	32
   765  00FCE2  20                 	db	32
   766  00FCE3  20                 	db	32
   767  00FCE4  20                 	db	32
   768  00FCE5  20                 	db	32
   769  00FCE6  00                 	db	0
   770  00FCE7                     STR_44:
   771  00FCE7  4C                 	db	76	;'L'
   772  00FCE8  4F                 	db	79	;'O'
   773  00FCE9  47                 	db	71	;'G'
   774  00FCEA  20                 	db	32
   775  00FCEB  33                 	db	51	;'3'
   776  00FCEC  20                 	db	32
   777  00FCED  20                 	db	32
   778  00FCEE  20                 	db	32
   779  00FCEF  20                 	db	32
   780  00FCF0  20                 	db	32
   781  00FCF1  20                 	db	32
   782  00FCF2  20                 	db	32
   783  00FCF3  20                 	db	32
   784  00FCF4  20                 	db	32
   785  00FCF5  20                 	db	32
   786  00FCF6  20                 	db	32
   787  00FCF7  00                 	db	0
   788  00FCF8                     STR_48:
   789  00FCF8  4C                 	db	76	;'L'
   790  00FCF9  4F                 	db	79	;'O'
   791  00FCFA  47                 	db	71	;'G'
   792  00FCFB  20                 	db	32
   793  00FCFC  34                 	db	52	;'4'
   794  00FCFD  20                 	db	32
   795  00FCFE  20                 	db	32
   796  00FCFF  20                 	db	32
   797  00FD00  20                 	db	32
   798  00FD01  20                 	db	32
   799  00FD02  20                 	db	32
   800  00FD03  20                 	db	32
   801  00FD04  20                 	db	32
   802  00FD05  20                 	db	32
   803  00FD06  20                 	db	32
   804  00FD07  20                 	db	32
   805  00FD08  00                 	db	0
   806  00FD09                     STR_36:
   807  00FD09  33                 	db	51	;'3'
   808  00FD0A  2E                 	db	46
   809  00FD0B  20                 	db	32
   810  00FD0C  4C                 	db	76	;'L'
   811  00FD0D  4F                 	db	79	;'O'
   812  00FD0E  47                 	db	71	;'G'
   813  00FD0F  53                 	db	83	;'S'
   814  00FD10  20                 	db	32
   815  00FD11  20                 	db	32
   816  00FD12  20                 	db	32
   817  00FD13  20                 	db	32
   818  00FD14  20                 	db	32
   819  00FD15  20                 	db	32
   820  00FD16  20                 	db	32
   821  00FD17  20                 	db	32
   822  00FD18  20                 	db	32
   823  00FD19  00                 	db	0
   824  00FD1A                     STR_32:
   825  00FD1A  32                 	db	50	;'2'
   826  00FD1B  2E                 	db	46
   827  00FD1C  20                 	db	32
   828  00FD1D  53                 	db	83	;'S'
   829  00FD1E  4F                 	db	79	;'O'
   830  00FD1F  52                 	db	82	;'R'
   831  00FD20  54                 	db	84	;'T'
   832  00FD21  20                 	db	32
   833  00FD22  20                 	db	32
   834  00FD23  20                 	db	32
   835  00FD24  20                 	db	32
   836  00FD25  20                 	db	32
   837  00FD26  20                 	db	32
   838  00FD27  20                 	db	32
   839  00FD28  20                 	db	32
   840  00FD29  20                 	db	32
   841  00FD2A  00                 	db	0
   842  00FD2B                     STR_33:
   843  00FD2B  31                 	db	49	;'1'
   844  00FD2C  2E                 	db	46
   845  00FD2D  20                 	db	32
   846  00FD2E  44                 	db	68	;'D'
   847  00FD2F  41                 	db	65	;'A'
   848  00FD30  54                 	db	84	;'T'
   849  00FD31  45                 	db	69	;'E'
   850  00FD32  2F                 	db	47
   851  00FD33  54                 	db	84	;'T'
   852  00FD34  49                 	db	73	;'I'
   853  00FD35  4D                 	db	77	;'M'
   854  00FD36  45                 	db	69	;'E'
   855  00FD37  20                 	db	32
   856  00FD38  20                 	db	32
   857  00FD39  20                 	db	32
   858  00FD3A  20                 	db	32
   859  00FD3B  00                 	db	0
   860  00FD3C                     STR_24:
   861  00FD3C  20                 	db	32
   862  00FD3D  2D                 	db	45
   863  00FD3E  2D                 	db	45
   864  00FD3F  20                 	db	32
   865  00FD40  50                 	db	80	;'P'
   866  00FD41  4F                 	db	79	;'O'
   867  00FD42  50                 	db	80	;'P'
   868  00FD43  20                 	db	32
   869  00FD44  20                 	db	32
   870  00FD45  43                 	db	67	;'C'
   871  00FD46  41                 	db	65	;'A'
   872  00FD47  4E                 	db	78	;'N'
   873  00FD48  20                 	db	32
   874  00FD49  2D                 	db	45
   875  00FD4A  2D                 	db	45
   876  00FD4B  20                 	db	32
   877  00FD4C  00                 	db	0
   878  00FD4D                     STR_26:
   879  00FD4D  20                 	db	32
   880  00FD4E  2D                 	db	45
   881  00FD4F  2D                 	db	45
   882  00FD50  20                 	db	32
   883  00FD51  53                 	db	83	;'S'
   884  00FD52  4F                 	db	79	;'O'
   885  00FD53  55                 	db	85	;'U'
   886  00FD54  50                 	db	80	;'P'
   887  00FD55  20                 	db	32
   888  00FD56  43                 	db	67	;'C'
   889  00FD57  41                 	db	65	;'A'
   890  00FD58  4E                 	db	78	;'N'
   891  00FD59  20                 	db	32
   892  00FD5A  2D                 	db	45
   893  00FD5B  2D                 	db	45
   894  00FD5C  20                 	db	32
   895  00FD5D  00                 	db	0
   896  00FD5E                     STR_28:
   897  00FD5E  2D                 	db	45
   898  00FD5F  2D                 	db	45
   899  00FD60  20                 	db	32
   900  00FD61  54                 	db	84	;'T'
   901  00FD62  4F                 	db	79	;'O'
   902  00FD63  54                 	db	84	;'T'
   903  00FD64  41                 	db	65	;'A'
   904  00FD65  4C                 	db	76	;'L'
   905  00FD66  20                 	db	32
   906  00FD67  43                 	db	67	;'C'
   907  00FD68  41                 	db	65	;'A'
   908  00FD69  4E                 	db	78	;'N'
   909  00FD6A  53                 	db	83	;'S'
   910  00FD6B  20                 	db	32
   911  00FD6C  2D                 	db	45
   912  00FD6D  2D                 	db	45
   913  00FD6E  00                 	db	0
   914  00FD6F                     STR_39:
   915  00FD6F  4C                 	db	76	;'L'
   916  00FD70  4F                 	db	79	;'O'
   917  00FD71  47                 	db	71	;'G'
   918  00FD72  20                 	db	32
   919  00FD73  31                 	db	49	;'1'
   920  00FD74  20                 	db	32
   921  00FD75  20                 	db	32
   922  00FD76  20                 	db	32
   923  00FD77  20                 	db	32
   924  00FD78  20                 	db	32
   925  00FD79  20                 	db	32
   926  00FD7A  20                 	db	32
   927  00FD7B  20                 	db	32
   928  00FD7C  20                 	db	32
   929  00FD7D  20                 	db	32
   930  00FD7E  3C                 	db	60	;'<'
   931  00FD7F  00                 	db	0
   932  00FD80                     STR_42:
   933  00FD80  4C                 	db	76	;'L'
   934  00FD81  4F                 	db	79	;'O'
   935  00FD82  47                 	db	71	;'G'
   936  00FD83  20                 	db	32
   937  00FD84  32                 	db	50	;'2'
   938  00FD85  20                 	db	32
   939  00FD86  20                 	db	32
   940  00FD87  20                 	db	32
   941  00FD88  20                 	db	32
   942  00FD89  20                 	db	32
   943  00FD8A  20                 	db	32
   944  00FD8B  20                 	db	32
   945  00FD8C  20                 	db	32
   946  00FD8D  20                 	db	32
   947  00FD8E  20                 	db	32
   948  00FD8F  3C                 	db	60	;'<'
   949  00FD90  00                 	db	0
   950  00FD91                     STR_46:
   951  00FD91  4C                 	db	76	;'L'
   952  00FD92  4F                 	db	79	;'O'
   953  00FD93  47                 	db	71	;'G'
   954  00FD94  20                 	db	32
   955  00FD95  33                 	db	51	;'3'
   956  00FD96  20                 	db	32
   957  00FD97  20                 	db	32
   958  00FD98  20                 	db	32
   959  00FD99  20                 	db	32
   960  00FD9A  20                 	db	32
   961  00FD9B  20                 	db	32
   962  00FD9C  20                 	db	32
   963  00FD9D  20                 	db	32
   964  00FD9E  20                 	db	32
   965  00FD9F  20                 	db	32
   966  00FDA0  3C                 	db	60	;'<'
   967  00FDA1  00                 	db	0
   968  00FDA2                     STR_50:
   969  00FDA2  4C                 	db	76	;'L'
   970  00FDA3  4F                 	db	79	;'O'
   971  00FDA4  47                 	db	71	;'G'
   972  00FDA5  20                 	db	32
   973  00FDA6  34                 	db	52	;'4'
   974  00FDA7  20                 	db	32
   975  00FDA8  20                 	db	32
   976  00FDA9  20                 	db	32
   977  00FDAA  20                 	db	32
   978  00FDAB  20                 	db	32
   979  00FDAC  20                 	db	32
   980  00FDAD  20                 	db	32
   981  00FDAE  20                 	db	32
   982  00FDAF  20                 	db	32
   983  00FDB0  20                 	db	32
   984  00FDB1  3C                 	db	60	;'<'
   985  00FDB2  00                 	db	0
   986  00FDB3                     STR_38:
   987  00FDB3  33                 	db	51	;'3'
   988  00FDB4  2E                 	db	46
   989  00FDB5  20                 	db	32
   990  00FDB6  4C                 	db	76	;'L'
   991  00FDB7  4F                 	db	79	;'O'
   992  00FDB8  47                 	db	71	;'G'
   993  00FDB9  53                 	db	83	;'S'
   994  00FDBA  20                 	db	32
   995  00FDBB  20                 	db	32
   996  00FDBC  20                 	db	32
   997  00FDBD  20                 	db	32
   998  00FDBE  20                 	db	32
   999  00FDBF  20                 	db	32
  1000  00FDC0  20                 	db	32
  1001  00FDC1  20                 	db	32
  1002  00FDC2  3C                 	db	60	;'<'
  1003  00FDC3  00                 	db	0
  1004  00FDC4                     STR_34:
  1005  00FDC4  32                 	db	50	;'2'
  1006  00FDC5  2E                 	db	46
  1007  00FDC6  20                 	db	32
  1008  00FDC7  53                 	db	83	;'S'
  1009  00FDC8  4F                 	db	79	;'O'
  1010  00FDC9  52                 	db	82	;'R'
  1011  00FDCA  54                 	db	84	;'T'
  1012  00FDCB  20                 	db	32
  1013  00FDCC  20                 	db	32
  1014  00FDCD  20                 	db	32
  1015  00FDCE  20                 	db	32
  1016  00FDCF  20                 	db	32
  1017  00FDD0  20                 	db	32
  1018  00FDD1  20                 	db	32
  1019  00FDD2  20                 	db	32
  1020  00FDD3  3C                 	db	60	;'<'
  1021  00FDD4  00                 	db	0
  1022  00FDD5                     STR_31:
  1023  00FDD5  31                 	db	49	;'1'
  1024  00FDD6  2E                 	db	46
  1025  00FDD7  20                 	db	32
  1026  00FDD8  44                 	db	68	;'D'
  1027  00FDD9  41                 	db	65	;'A'
  1028  00FDDA  54                 	db	84	;'T'
  1029  00FDDB  45                 	db	69	;'E'
  1030  00FDDC  2F                 	db	47
  1031  00FDDD  54                 	db	84	;'T'
  1032  00FDDE  49                 	db	73	;'I'
  1033  00FDDF  4D                 	db	77	;'M'
  1034  00FDE0  45                 	db	69	;'E'
  1035  00FDE1  20                 	db	32
  1036  00FDE2  20                 	db	32
  1037  00FDE3  20                 	db	32
  1038  00FDE4  3C                 	db	60	;'<'
  1039  00FDE5  00                 	db	0
  1040  00FDE6                     STR_6:
  1041  00FDE6  50                 	db	80	;'P'
  1042  00FDE7  41                 	db	65	;'A'
  1043  00FDE8  55                 	db	85	;'U'
  1044  00FDE9  53                 	db	83	;'S'
  1045  00FDEA  45                 	db	69	;'E'
  1046  00FDEB  20                 	db	32
  1047  00FDEC  3C                 	db	60	;'<'
  1048  00FDED  20                 	db	32
  1049  00FDEE  7C                 	db	124
  1050  00FDEF  20                 	db	32
  1051  00FDF0  42                 	db	66	;'B'
  1052  00FDF1  41                 	db	65	;'A'
  1053  00FDF2  43                 	db	67	;'C'
  1054  00FDF3  4B                 	db	75	;'K'
  1055  00FDF4  20                 	db	32
  1056  00FDF5  3E                 	db	62	;'>'
  1057  00FDF6  00                 	db	0
  1058  00FDF7                     STR_30:
  1059  00FDF7  50                 	db	80	;'P'
  1060  00FDF8  55                 	db	85	;'U'
  1061  00FDF9  53                 	db	83	;'S'
  1062  00FDFA  48                 	db	72	;'H'
  1063  00FDFB  20                 	db	32
  1064  00FDFC  54                 	db	84	;'T'
  1065  00FDFD  4F                 	db	79	;'O'
  1066  00FDFE  20                 	db	32
  1067  00FDFF  43                 	db	67	;'C'
  1068  00FE00  4F                 	db	79	;'O'
  1069  00FE01  4E                 	db	78	;'N'
  1070  00FE02  54                 	db	84	;'T'
  1071  00FE03  49                 	db	73	;'I'
  1072  00FE04  4E                 	db	78	;'N'
  1073  00FE05  55                 	db	85	;'U'
  1074  00FE06  45                 	db	69	;'E'
  1075  00FE07  00                 	db	0
  1076  00FE08                     STR_27:
  1077  00FE08  4E                 	db	78	;'N'
  1078  00FE09  4C                 	db	76	;'L'
  1079  00FE0A  41                 	db	65	;'A'
  1080  00FE0B  42                 	db	66	;'B'
  1081  00FE0C  3A                 	db	58	;':'
  1082  00FE0D  20                 	db	32
  1083  00FE0E  25                 	db	37
  1084  00FE0F  64                 	db	100	;'d'
  1085  00FE10  7C                 	db	124
  1086  00FE11  4C                 	db	76	;'L'
  1087  00FE12  41                 	db	65	;'A'
  1088  00FE13  42                 	db	66	;'B'
  1089  00FE14  3A                 	db	58	;':'
  1090  00FE15  20                 	db	32
  1091  00FE16  25                 	db	37
  1092  00FE17  64                 	db	100	;'d'
  1093  00FE18  00                 	db	0
  1094  00FE19                     STR_25:
  1095  00FE19  4E                 	db	78	;'N'
  1096  00FE1A  54                 	db	84	;'T'
  1097  00FE1B  41                 	db	65	;'A'
  1098  00FE1C  42                 	db	66	;'B'
  1099  00FE1D  3A                 	db	58	;':'
  1100  00FE1E  20                 	db	32
  1101  00FE1F  25                 	db	37
  1102  00FE20  64                 	db	100	;'d'
  1103  00FE21  7C                 	db	124
  1104  00FE22  54                 	db	84	;'T'
  1105  00FE23  41                 	db	65	;'A'
  1106  00FE24  42                 	db	66	;'B'
  1107  00FE25  3A                 	db	58	;':'
  1108  00FE26  20                 	db	32
  1109  00FE27  25                 	db	37
  1110  00FE28  64                 	db	100	;'d'
  1111  00FE29  00                 	db	0
  1112  00FE2A                     STR_83:
  1113  00FE2A  4D                 	db	77	;'M'
  1114  00FE2B  41                 	db	65	;'A'
  1115  00FE2C  47                 	db	71	;'G'
  1116  00FE2D  5F                 	db	95	;'_'
  1117  00FE2E  73                 	db	115	;'s'
  1118  00FE2F  69                 	db	105	;'i'
  1119  00FE30  67                 	db	103	;'g'
  1120  00FE31  6E                 	db	110	;'n'
  1121  00FE32  61                 	db	97	;'a'
  1122  00FE33  6C                 	db	108	;'l'
  1123  00FE34  3A                 	db	58	;':'
  1124  00FE35  20                 	db	32
  1125  00FE36  25                 	db	37
  1126  00FE37  64                 	db	100	;'d'
  1127  00FE38  20                 	db	32
  1128  00FE39  00                 	db	0
  1129  00FE3A                     STR_103:
  1130  00FE3A  54                 	db	84	;'T'
  1131  00FE3B  53                 	db	83	;'S'
  1132  00FE3C  54                 	db	84	;'T'
  1133  00FE3D  3A                 	db	58	;':'
  1134  00FE3E  20                 	db	32
  1135  00FE3F  54                 	db	84	;'T'
  1136  00FE40  49                 	db	73	;'I'
  1137  00FE41  4C                 	db	76	;'L'
  1138  00FE42  54                 	db	84	;'T'
  1139  00FE43  20                 	db	32
  1140  00FE44  53                 	db	83	;'S'
  1141  00FE45  45                 	db	69	;'E'
  1142  00FE46  52                 	db	82	;'R'
  1143  00FE47  56                 	db	86	;'V'
  1144  00FE48  4F                 	db	79	;'O'
  1145  00FE49  00                 	db	0
  1146  00FE4A                     STR_4:
  1147  00FE4A  44                 	db	68	;'D'
  1148  00FE4B  49                 	db	73	;'I'
  1149  00FE4C  44                 	db	68	;'D'
  1150  00FE4D  4E                 	db	78	;'N'
  1151  00FE4E  27                 	db	39
  1152  00FE4F  54                 	db	84	;'T'
  1153  00FE50  20                 	db	32
  1154  00FE51  43                 	db	67	;'C'
  1155  00FE52  4F                 	db	79	;'O'
  1156  00FE53  4D                 	db	77	;'M'
  1157  00FE54  50                 	db	80	;'P'
  1158  00FE55  4C                 	db	76	;'L'
  1159  00FE56  45                 	db	69	;'E'
  1160  00FE57  54                 	db	84	;'T'
  1161  00FE58  45                 	db	69	;'E'
  1162  00FE59  00                 	db	0
  1163  00FE5A                     STR_80:
  1164  00FE5A  49                 	db	73	;'I'
  1165  00FE5B  52                 	db	82	;'R'
  1166  00FE5C  5F                 	db	95	;'_'
  1167  00FE5D  73                 	db	115	;'s'
  1168  00FE5E  69                 	db	105	;'i'
  1169  00FE5F  67                 	db	103	;'g'
  1170  00FE60  6E                 	db	110	;'n'
  1171  00FE61  61                 	db	97	;'a'
  1172  00FE62  6C                 	db	108	;'l'
  1173  00FE63  3A                 	db	58	;':'
  1174  00FE64  20                 	db	32
  1175  00FE65  25                 	db	37
  1176  00FE66  64                 	db	100	;'d'
  1177  00FE67  20                 	db	32
  1178  00FE68  00                 	db	0
  1179  00FE69                     STR_109:
  1180  00FE69  43                 	db	67	;'C'
  1181  00FE6A  41                 	db	65	;'A'
  1182  00FE6B  4D                 	db	77	;'M'
  1183  00FE6C  20                 	db	32
  1184  00FE6D  44                 	db	68	;'D'
  1185  00FE6E  57                 	db	87	;'W'
  1186  00FE6F  4E                 	db	78	;'N'
  1187  00FE70  20                 	db	32
  1188  00FE71  7C                 	db	124
  1189  00FE72  52                 	db	82	;'R'
  1190  00FE73  43                 	db	67	;'C'
  1191  00FE74  30                 	db	48	;'0'
  1192  00FE75  3D                 	db	61	;'='
  1193  00FE76  30                 	db	48	;'0'
  1194  00FE77  00                 	db	0
  1195  00FE78                     STR_108:
  1196  00FE78  43                 	db	67	;'C'
  1197  00FE79  41                 	db	65	;'A'
  1198  00FE7A  4D                 	db	77	;'M'
  1199  00FE7B  20                 	db	32
  1200  00FE7C  55                 	db	85	;'U'
  1201  00FE7D  50                 	db	80	;'P'
  1202  00FE7E  20                 	db	32
  1203  00FE7F  20                 	db	32
  1204  00FE80  7C                 	db	124
  1205  00FE81  52                 	db	82	;'R'
  1206  00FE82  43                 	db	67	;'C'
  1207  00FE83  30                 	db	48	;'0'
  1208  00FE84  3D                 	db	61	;'='
  1209  00FE85  31                 	db	49	;'1'
  1210  00FE86  00                 	db	0
  1211  00FE87                     STR_82:
  1212  00FE87  54                 	db	84	;'T'
  1213  00FE88  53                 	db	83	;'S'
  1214  00FE89  54                 	db	84	;'T'
  1215  00FE8A  3A                 	db	58	;':'
  1216  00FE8B  20                 	db	32
  1217  00FE8C  4D                 	db	77	;'M'
  1218  00FE8D  41                 	db	65	;'A'
  1219  00FE8E  47                 	db	71	;'G'
  1220  00FE8F  4E                 	db	78	;'N'
  1221  00FE90  45                 	db	69	;'E'
  1222  00FE91  54                 	db	84	;'T'
  1223  00FE92  49                 	db	73	;'I'
  1224  00FE93  53                 	db	83	;'S'
  1225  00FE94  4D                 	db	77	;'M'
  1226  00FE95  00                 	db	0
  1227  00FE96                     STR_107:
  1228  00FE96  54                 	db	84	;'T'
  1229  00FE97  53                 	db	83	;'S'
  1230  00FE98  54                 	db	84	;'T'
  1231  00FE99  3A                 	db	58	;':'
  1232  00FE9A  20                 	db	32
  1233  00FE9B  43                 	db	67	;'C'
  1234  00FE9C  41                 	db	65	;'A'
  1235  00FE9D  4D                 	db	77	;'M'
  1236  00FE9E  20                 	db	32
  1237  00FE9F  53                 	db	83	;'S'
  1238  00FEA0  45                 	db	69	;'E'
  1239  00FEA1  52                 	db	82	;'R'
  1240  00FEA2  56                 	db	86	;'V'
  1241  00FEA3  4F                 	db	79	;'O'
  1242  00FEA4  00                 	db	0
  1243  00FEA5                     STR_96:
  1244  00FEA5  54                 	db	84	;'T'
  1245  00FEA6  53                 	db	83	;'S'
  1246  00FEA7  54                 	db	84	;'T'
  1247  00FEA8  3A                 	db	58	;':'
  1248  00FEA9  20                 	db	32
  1249  00FEAA  50                 	db	80	;'P'
  1250  00FEAB  41                 	db	65	;'A'
  1251  00FEAC  4E                 	db	78	;'N'
  1252  00FEAD  20                 	db	32
  1253  00FEAE  53                 	db	83	;'S'
  1254  00FEAF  45                 	db	69	;'E'
  1255  00FEB0  52                 	db	82	;'R'
  1256  00FEB1  56                 	db	86	;'V'
  1257  00FEB2  4F                 	db	79	;'O'
  1258  00FEB3  00                 	db	0
  1259  00FEB4                     STR_75:
  1260  00FEB4  41                 	db	65	;'A'
  1261  00FEB5  4C                 	db	76	;'L'
  1262  00FEB6  47                 	db	71	;'G'
  1263  00FEB7  34                 	db	52	;'4'
  1264  00FEB8  3A                 	db	58	;':'
  1265  00FEB9  20                 	db	32
  1266  00FEBA  41                 	db	65	;'A'
  1267  00FEBB  4C                 	db	76	;'L'
  1268  00FEBC  4C                 	db	76	;'L'
  1269  00FEBD  20                 	db	32
  1270  00FEBE  43                 	db	67	;'C'
  1271  00FEBF  41                 	db	65	;'A'
  1272  00FEC0  4E                 	db	78	;'N'
  1273  00FEC1  53                 	db	83	;'S'
  1274  00FEC2  00                 	db	0
  1275  00FEC3                     STR_90:
  1276  00FEC3  54                 	db	84	;'T'
  1277  00FEC4  53                 	db	83	;'S'
  1278  00FEC5  54                 	db	84	;'T'
  1279  00FEC6  3A                 	db	58	;':'
  1280  00FEC7  20                 	db	32
  1281  00FEC8  44                 	db	68	;'D'
  1282  00FEC9  43                 	db	67	;'C'
  1283  00FECA  20                 	db	32
  1284  00FECB  4D                 	db	77	;'M'
  1285  00FECC  4F                 	db	79	;'O'
  1286  00FECD  54                 	db	84	;'T'
  1287  00FECE  4F                 	db	79	;'O'
  1288  00FECF  52                 	db	82	;'R'
  1289  00FED0  53                 	db	83	;'S'
  1290  00FED1  00                 	db	0
  1291  00FED2                     STR_70:
  1292  00FED2  41                 	db	65	;'A'
  1293  00FED3  4C                 	db	76	;'L'
  1294  00FED4  47                 	db	71	;'G'
  1295  00FED5  4F                 	db	79	;'O'
  1296  00FED6  52                 	db	82	;'R'
  1297  00FED7  49                 	db	73	;'I'
  1298  00FED8  54                 	db	84	;'T'
  1299  00FED9  48                 	db	72	;'H'
  1300  00FEDA  4D                 	db	77	;'M'
  1301  00FEDB  20                 	db	32
  1302  00FEDC  54                 	db	84	;'T'
  1303  00FEDD  45                 	db	69	;'E'
  1304  00FEDE  53                 	db	83	;'S'
  1305  00FEDF  54                 	db	84	;'T'
  1306  00FEE0  00                 	db	0
  1307  00FEE1                     STR_91:
  1308  00FEE1  50                 	db	80	;'P'
  1309  00FEE2  49                 	db	73	;'I'
  1310  00FEE3  4E                 	db	78	;'N'
  1311  00FEE4  20                 	db	32
  1312  00FEE5  52                 	db	82	;'R'
  1313  00FEE6  41                 	db	65	;'A'
  1314  00FEE7  35                 	db	53	;'5'
  1315  00FEE8  20                 	db	32
  1316  00FEE9  48                 	db	72	;'H'
  1317  00FEEA  49                 	db	73	;'I'
  1318  00FEEB  47                 	db	71	;'G'
  1319  00FEEC  48                 	db	72	;'H'
  1320  00FEED  2E                 	db	46
  1321  00FEEE  00                 	db	0
  1322  00FEEF                     STR_73:
  1323  00FEEF  41                 	db	65	;'A'
  1324  00FEF0  4C                 	db	76	;'L'
  1325  00FEF1  47                 	db	71	;'G'
  1326  00FEF2  32                 	db	50	;'2'
  1327  00FEF3  3A                 	db	58	;':'
  1328  00FEF4  20                 	db	32
  1329  00FEF5  31                 	db	49	;'1'
  1330  00FEF6  32                 	db	50	;'2'
  1331  00FEF7  20                 	db	32
  1332  00FEF8  43                 	db	67	;'C'
  1333  00FEF9  41                 	db	65	;'A'
  1334  00FEFA  4E                 	db	78	;'N'
  1335  00FEFB  53                 	db	83	;'S'
  1336  00FEFC  00                 	db	0
  1337  00FEFD                     STR_76:
  1338  00FEFD  41                 	db	65	;'A'
  1339  00FEFE  4C                 	db	76	;'L'
  1340  00FEFF  47                 	db	71	;'G'
  1341  00FF00  35                 	db	53	;'5'
  1342  00FF01  3A                 	db	58	;':'
  1343  00FF02  20                 	db	32
  1344  00FF03  4E                 	db	78	;'N'
  1345  00FF04  4F                 	db	79	;'O'
  1346  00FF05  20                 	db	32
  1347  00FF06  43                 	db	67	;'C'
  1348  00FF07  41                 	db	65	;'A'
  1349  00FF08  4E                 	db	78	;'N'
  1350  00FF09  53                 	db	83	;'S'
  1351  00FF0A  00                 	db	0
  1352  00FF0B                     STR_71:
  1353  00FF0B  50                 	db	80	;'P'
  1354  00FF0C  55                 	db	85	;'U'
  1355  00FF0D  53                 	db	83	;'S'
  1356  00FF0E  48                 	db	72	;'H'
  1357  00FF0F  20                 	db	32
  1358  00FF10  54                 	db	84	;'T'
  1359  00FF11  4F                 	db	79	;'O'
  1360  00FF12  20                 	db	32
  1361  00FF13  53                 	db	83	;'S'
  1362  00FF14  54                 	db	84	;'T'
  1363  00FF15  41                 	db	65	;'A'
  1364  00FF16  52                 	db	82	;'R'
  1365  00FF17  54                 	db	84	;'T'
  1366  00FF18  00                 	db	0
  1367  00FF19                     STR_23:
  1368  00FF19  25                 	db	37
  1369  00FF1A  64                 	db	100	;'d'
  1370  00FF1B  20                 	db	32
  1371  00FF1C  4D                 	db	77	;'M'
  1372  00FF1D  49                 	db	73	;'I'
  1373  00FF1E  4E                 	db	78	;'N'
  1374  00FF1F  20                 	db	32
  1375  00FF20  25                 	db	37
  1376  00FF21  64                 	db	100	;'d'
  1377  00FF22  20                 	db	32
  1378  00FF23  53                 	db	83	;'S'
  1379  00FF24  45                 	db	69	;'E'
  1380  00FF25  43                 	db	67	;'C'
  1381  00FF26  00                 	db	0
  1382  00FF27                     STR_2:
  1383  00FF27  54                 	db	84	;'T'
  1384  00FF28  49                 	db	73	;'I'
  1385  00FF29  4D                 	db	77	;'M'
  1386  00FF2A  45                 	db	69	;'E'
  1387  00FF2B  3A                 	db	58	;':'
  1388  00FF2C  20                 	db	32
  1389  00FF2D  25                 	db	37
  1390  00FF2E  64                 	db	100	;'d'
  1391  00FF2F  3A                 	db	58	;':'
  1392  00FF30  25                 	db	37
  1393  00FF31  30                 	db	48	;'0'
  1394  00FF32  32                 	db	50	;'2'
  1395  00FF33  64                 	db	100	;'d'
  1396  00FF34  00                 	db	0
  1397  00FF35                     STR_79:
  1398  00FF35  54                 	db	84	;'T'
  1399  00FF36  53                 	db	83	;'S'
  1400  00FF37  54                 	db	84	;'T'
  1401  00FF38  3A                 	db	58	;':'
  1402  00FF39  20                 	db	32
  1403  00FF3A  49                 	db	73	;'I'
  1404  00FF3B  52                 	db	82	;'R'
  1405  00FF3C  20                 	db	32
  1406  00FF3D  53                 	db	83	;'S'
  1407  00FF3E  4E                 	db	78	;'N'
  1408  00FF3F  53                 	db	83	;'S'
  1409  00FF40  52                 	db	82	;'R'
  1410  00FF41  00                 	db	0
  1411  00FF42                     STR_65:
  1412  00FF42  54                 	db	84	;'T'
  1413  00FF43  49                 	db	73	;'I'
  1414  00FF44  4D                 	db	77	;'M'
  1415  00FF45  45                 	db	69	;'E'
  1416  00FF46  20                 	db	32
  1417  00FF47  25                 	db	37
  1418  00FF48  64                 	db	100	;'d'
  1419  00FF49  3A                 	db	58	;':'
  1420  00FF4A  25                 	db	37
  1421  00FF4B  30                 	db	48	;'0'
  1422  00FF4C  32                 	db	50	;'2'
  1423  00FF4D  64                 	db	100	;'d'
  1424  00FF4E  00                 	db	0
  1425  00FF4F                     STR_74:
  1426  00FF4F  41                 	db	65	;'A'
  1427  00FF50  4C                 	db	76	;'L'
  1428  00FF51  47                 	db	71	;'G'
  1429  00FF52  33                 	db	51	;'3'
  1430  00FF53  3A                 	db	58	;':'
  1431  00FF54  20                 	db	32
  1432  00FF55  31                 	db	49	;'1'
  1433  00FF56  20                 	db	32
  1434  00FF57  43                 	db	67	;'C'
  1435  00FF58  41                 	db	65	;'A'
  1436  00FF59  4E                 	db	78	;'N'
  1437  00FF5A  00                 	db	0
  1438  00FF5B                     STR_93:
  1439  00FF5B  50                 	db	80	;'P'
  1440  00FF5C  49                 	db	73	;'I'
  1441  00FF5D  4E                 	db	78	;'N'
  1442  00FF5E  20                 	db	32
  1443  00FF5F  52                 	db	82	;'R'
  1444  00FF60  41                 	db	65	;'A'
  1445  00FF61  33                 	db	51	;'3'
  1446  00FF62  2E                 	db	46
  1447  00FF63  2E                 	db	46
  1448  00FF64  2E                 	db	46
  1449  00FF65  00                 	db	0
  1450  00FF66                     STR_95:
  1451  00FF66  50                 	db	80	;'P'
  1452  00FF67  49                 	db	73	;'I'
  1453  00FF68  4E                 	db	78	;'N'
  1454  00FF69  20                 	db	32
  1455  00FF6A  52                 	db	82	;'R'
  1456  00FF6B  41                 	db	65	;'A'
  1457  00FF6C  34                 	db	52	;'4'
  1458  00FF6D  2E                 	db	46
  1459  00FF6E  2E                 	db	46
  1460  00FF6F  2E                 	db	46
  1461  00FF70  00                 	db	0
  1462  00FF71                     STR_113:
  1463  00FF71  50                 	db	80	;'P'
  1464  00FF72  55                 	db	85	;'U'
  1465  00FF73  53                 	db	83	;'S'
  1466  00FF74  48                 	db	72	;'H'
  1467  00FF75  45                 	db	69	;'E'
  1468  00FF76  52                 	db	82	;'R'
  1469  00FF77  20                 	db	32
  1470  00FF78  54                 	db	84	;'T'
  1471  00FF79  53                 	db	83	;'S'
  1472  00FF7A  54                 	db	84	;'T'
  1473  00FF7B  00                 	db	0
  1474  00FF7C                     STR_64:
  1475  00FF7C  53                 	db	83	;'S'
  1476  00FF7D  4F                 	db	79	;'O'
  1477  00FF7E  52                 	db	82	;'R'
  1478  00FF7F  54                 	db	84	;'T'
  1479  00FF80  49                 	db	73	;'I'
  1480  00FF81  4E                 	db	78	;'N'
  1481  00FF82  47                 	db	71	;'G'
  1482  00FF83  2E                 	db	46
  1483  00FF84  2E                 	db	46
  1484  00FF85  2E                 	db	46
  1485  00FF86  00                 	db	0
  1486  00FF87                     STR_84:
  1487  00FF87  54                 	db	84	;'T'
  1488  00FF88  53                 	db	83	;'S'
  1489  00FF89  54                 	db	84	;'T'
  1490  00FF8A  3A                 	db	58	;':'
  1491  00FF8B  20                 	db	32
  1492  00FF8C  43                 	db	67	;'C'
  1493  00FF8D  4F                 	db	79	;'O'
  1494  00FF8E  4E                 	db	78	;'N'
  1495  00FF8F  44                 	db	68	;'D'
  1496  00FF90  00                 	db	0
  1497  00FF91                     STR_88:
  1498  00FF91  41                 	db	65	;'A'
  1499  00FF92  43                 	db	67	;'C'
  1500  00FF93  54                 	db	84	;'T'
  1501  00FF94  55                 	db	85	;'U'
  1502  00FF95  41                 	db	65	;'A'
  1503  00FF96  54                 	db	84	;'T'
  1504  00FF97  4F                 	db	79	;'O'
  1505  00FF98  52                 	db	82	;'R'
  1506  00FF99  53                 	db	83	;'S'
  1507  00FF9A  00                 	db	0
  1508  00FF9B                     STR_22:
  1509  00FF9B  44                 	db	68	;'D'
  1510  00FF9C  55                 	db	85	;'U'
  1511  00FF9D  52                 	db	82	;'R'
  1512  00FF9E  41                 	db	65	;'A'
  1513  00FF9F  54                 	db	84	;'T'
  1514  00FFA0  49                 	db	73	;'I'
  1515  00FFA1  4F                 	db	79	;'O'
  1516  00FFA2  4E                 	db	78	;'N'
  1517  00FFA3  3A                 	db	58	;':'
  1518  00FFA4  00                 	db	0
  1519  00FFA5                     STR_86:
  1520  00FFA5  43                 	db	67	;'C'
  1521  00FFA6  4F                 	db	79	;'O'
  1522  00FFA7  4E                 	db	78	;'N'
  1523  00FFA8  44                 	db	68	;'D'
  1524  00FFA9  3A                 	db	58	;':'
  1525  00FFAA  20                 	db	32
  1526  00FFAB  25                 	db	37
  1527  00FFAC  64                 	db	100	;'d'
  1528  00FFAD  00                 	db	0
  1529  00FFAE                     STR_77:
  1530  00FFAE  53                 	db	83	;'S'
  1531  00FFAF  45                 	db	69	;'E'
  1532  00FFB0  4E                 	db	78	;'N'
  1533  00FFB1  53                 	db	83	;'S'
  1534  00FFB2  4F                 	db	79	;'O'
  1535  00FFB3  52                 	db	82	;'R'
  1536  00FFB4  53                 	db	83	;'S'
  1537  00FFB5  00                 	db	0
  1538  00FFB6                     STR_126:
  1539  00FFB6  28                 	db	40
  1540  00FFB7  6E                 	db	110	;'n'
  1541  00FFB8  75                 	db	117	;'u'
  1542  00FFB9  6C                 	db	108	;'l'
  1543  00FFBA  6C                 	db	108	;'l'
  1544  00FFBB  29                 	db	41
  1545  00FFBC  00                 	db	0
  1546  00FFBD                     STR_67:
  1547  00FFBD  46                 	db	70	;'F'
  1548  00FFBE  41                 	db	65	;'A'
  1549  00FFBF  49                 	db	73	;'I'
  1550  00FFC0  4C                 	db	76	;'L'
  1551  00FFC1  45                 	db	69	;'E'
  1552  00FFC2  44                 	db	68	;'D'
  1553  00FFC3  00                 	db	0
  1554  00FFC4                     STR_7:
  1555  00FFC4  53                 	db	83	;'S'
  1556  00FFC5  54                 	db	84	;'T'
  1557  00FFC6  41                 	db	65	;'A'
  1558  00FFC7  52                 	db	82	;'R'
  1559  00FFC8  54                 	db	84	;'T'
  1560  00FFC9  3A                 	db	58	;':'
  1561  00FFCA  00                 	db	0
  1562  00FFCB                     STR_9:
  1563  00FFCB  46                 	db	70	;'F'
  1564  00FFCC  45                 	db	69	;'E'
  1565  00FFCD  42                 	db	66	;'B'
  1566  00FFCE  00                 	db	0
  1567  00FFCF                     STR_19:
  1568  00FFCF  44                 	db	68	;'D'
  1569  00FFD0  45                 	db	69	;'E'
  1570  00FFD1  43                 	db	67	;'C'
  1571  00FFD2  00                 	db	0
  1572  00FFD3                     STR_15:
  1573  00FFD3  41                 	db	65	;'A'
  1574  00FFD4  55                 	db	85	;'U'
  1575  00FFD5  47                 	db	71	;'G'
  1576  00FFD6  00                 	db	0
  1577  00FFD7                     STR_14:
  1578  00FFD7  4A                 	db	74	;'J'
  1579  00FFD8  55                 	db	85	;'U'
  1580  00FFD9  4C                 	db	76	;'L'
  1581  00FFDA  00                 	db	0
  1582  00FFDB                     STR_8:
  1583  00FFDB  4A                 	db	74	;'J'
  1584  00FFDC  41                 	db	65	;'A'
  1585  00FFDD  4E                 	db	78	;'N'
  1586  00FFDE  00                 	db	0
  1587  00FFDF                     STR_13:
  1588  00FFDF  4A                 	db	74	;'J'
  1589  00FFE0  55                 	db	85	;'U'
  1590  00FFE1  4E                 	db	78	;'N'
  1591  00FFE2  00                 	db	0
  1592  00FFE3                     STR_16:
  1593  00FFE3  53                 	db	83	;'S'
  1594  00FFE4  45                 	db	69	;'E'
  1595  00FFE5  50                 	db	80	;'P'
  1596  00FFE6  00                 	db	0
  1597  00FFE7                     STR_10:
  1598  00FFE7  4D                 	db	77	;'M'
  1599  00FFE8  41                 	db	65	;'A'
  1600  00FFE9  52                 	db	82	;'R'
  1601  00FFEA  00                 	db	0
  1602  00FFEB                     STR_11:
  1603  00FFEB  41                 	db	65	;'A'
  1604  00FFEC  50                 	db	80	;'P'
  1605  00FFED  52                 	db	82	;'R'
  1606  00FFEE  00                 	db	0
  1607  00FFEF                     STR_20:
  1608  00FFEF  45                 	db	69	;'E'
  1609  00FFF0  52                 	db	82	;'R'
  1610  00FFF1  52                 	db	82	;'R'
  1611  00FFF2  00                 	db	0
  1612  00FFF3                     STR_17:
  1613  00FFF3  4F                 	db	79	;'O'
  1614  00FFF4  43                 	db	67	;'C'
  1615  00FFF5  54                 	db	84	;'T'
  1616  00FFF6  00                 	db	0
  1617  00FFF7                     STR_18:
  1618  00FFF7  4E                 	db	78	;'N'
  1619  00FFF8  4F                 	db	79	;'O'
  1620  00FFF9  56                 	db	86	;'V'
  1621  00FFFA  00                 	db	0
  1622  00FFFB                     STR_12:
  1623  00FFFB  4D                 	db	77	;'M'
  1624  00FFFC  41                 	db	65	;'A'
  1625  00FFFD  59                 	db	89	;'Y'
  1626  00FFFE  00                 	db	0
  1627  0000                     
  1628                           ; #config settings
  1629  00FFFF  00                 	db	0	; dummy byte at the end
  1630  0000                     
  1631                           	psect	cinit
  1632  0047C4                     __pcinit:
  1633                           	opt stack 0
  1634  0047C4                     start_initialization:
  1635                           	opt stack 0
  1636  0047C4                     __initialization:
  1637                           	opt stack 0
  1638                           
  1639                           ; Initialize objects allocated to BANK1 (8 bytes)
  1640                           ; load TBLPTR registers with __pidataBANK1
  1641  0047C4  0E0A               	movlw	low __pidataBANK1
  1642  0047C6  6EF6               	movwf	tblptrl,c
  1643  0047C8  0E4F               	movlw	high __pidataBANK1
  1644  0047CA  6EF7               	movwf	tblptrh,c
  1645  0047CC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1646  0047CE  6EF8               	movwf	tblptru,c
  1647  0047D0  EE01  F035         	lfsr	0,__pdataBANK1
  1648  0047D4  EE10 F008          	lfsr	1,8
  1649  0047D8                     copy_data0:
  1650  0047D8  0009               	tblrd		*+
  1651  0047DA  CFF5 FFEE          	movff	tablat,postinc0
  1652  0047DE  50E5               	movf	postdec1,w,c
  1653  0047E0  50E1               	movf	fsr1l,w,c
  1654  0047E2  E1FA               	bnz	copy_data0
  1655                           
  1656                           ; Clear objects allocated to BANK1 (53 bytes)
  1657  0047E4  EE01  F000         	lfsr	0,__pbssBANK1
  1658  0047E8  0E35               	movlw	53
  1659  0047EA                     clear_0:
  1660  0047EA  6AEE               	clrf	postinc0,c
  1661  0047EC  06E8               	decf	wreg,f,c
  1662  0047EE  E1FD               	bnz	clear_0
  1663                           
  1664                           ; Clear objects allocated to BANK0 (38 bytes)
  1665  0047F0  EE00  F0DA         	lfsr	0,__pbssBANK0
  1666  0047F4  0E26               	movlw	38
  1667  0047F6                     clear_1:
  1668  0047F6  6AEE               	clrf	postinc0,c
  1669  0047F8  06E8               	decf	wreg,f,c
  1670  0047FA  E1FD               	bnz	clear_1
  1671                           
  1672                           ; Clear objects allocated to COMRAM (37 bytes)
  1673  0047FC  EE00  F059         	lfsr	0,__pbssCOMRAM
  1674  004800  0E25               	movlw	37
  1675  004802                     clear_2:
  1676  004802  6AEE               	clrf	postinc0,c
  1677  004804  06E8               	decf	wreg,f,c
  1678  004806  E1FD               	bnz	clear_2
  1679  004808                     end_of_initialization:
  1680                           	opt stack 0
  1681  004808                     __end_of__initialization:
  1682                           	opt stack 0
  1683  004808  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1684  00480A  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1685  00480C  0100               	movlb	0
  1686  00480E  EF77  F01E         	goto	_main	;jump to C main() function
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           postinc0	equ	0xFEE
  1692                           wreg	equ	0xFE8
  1693                           postdec1	equ	0xFE5
  1694                           fsr1l	equ	0xFE1
  1695                           
  1696                           	psect	bssCOMRAM
  1697  000059                     __pbssCOMRAM:
  1698                           	opt stack 0
  1699  000059                     _back:
  1700                           	opt stack 0
  1701  000059                     	ds	2
  1702  00005B                     _count_pop_no_tab:
  1703                           	opt stack 0
  1704  00005B                     	ds	2
  1705  00005D                     _count_pop_w_tab:
  1706                           	opt stack 0
  1707  00005D                     	ds	2
  1708  00005F                     _debug:
  1709                           	opt stack 0
  1710  00005F                     	ds	2
  1711  000061                     _down:
  1712                           	opt stack 0
  1713  000061                     	ds	2
  1714  000063                     _enter:
  1715                           	opt stack 0
  1716  000063                     	ds	2
  1717  000065                     _f_ID_receive:
  1718                           	opt stack 0
  1719  000065                     	ds	2
  1720  000067                     _f_can_coming_to_ID:
  1721                           	opt stack 0
  1722  000067                     	ds	2
  1723  000069                     _f_can_coming_to_distribution:
  1724                           	opt stack 0
  1725  000069                     	ds	2
  1726  00006B                     _f_most_recent_sort_time:
  1727                           	opt stack 0
  1728  00006B                     	ds	2
  1729  00006D                     _first:
  1730                           	opt stack 0
  1731  00006D                     	ds	2
  1732  00006F                     _firstboot:
  1733                           	opt stack 0
  1734  00006F                     	ds	2
  1735  000071                     _log_count_can_no_lab:
  1736                           	opt stack 0
  1737  000071                     	ds	2
  1738  000073                     _log_count_can_w_lab:
  1739                           	opt stack 0
  1740  000073                     	ds	2
  1741  000075                     _log_count_total:
  1742                           	opt stack 0
  1743  000075                     	ds	2
  1744  000077                     _up:
  1745                           	opt stack 0
  1746  000077                     	ds	2
  1747  000079                     _was_low_1:
  1748                           	opt stack 0
  1749  000079                     	ds	2
  1750  00007B                     _was_low_3:
  1751                           	opt stack 0
  1752  00007B                     	ds	2
  1753  00007D                     _input:
  1754                           	opt stack 0
  1755  00007D                     	ds	1
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           
  1765                           	psect	bssBANK0
  1766  0000DA                     __pbssBANK0:
  1767                           	opt stack 0
  1768  0000DA                     _sensor_outputs:
  1769                           	opt stack 0
  1770  0000DA                     	ds	4
  1771  0000DE                     _IR_signal:
  1772                           	opt stack 0
  1773  0000DE                     	ds	2
  1774  0000E0                     _MAG_signal:
  1775                           	opt stack 0
  1776  0000E0                     	ds	2
  1777  0000E2                     _RTCflag:
  1778                           	opt stack 0
  1779  0000E2                     	ds	2
  1780  0000E4                     _cur_can:
  1781                           	opt stack 0
  1782  0000E4                     	ds	2
  1783  0000E6                     _cur_state:
  1784                           	opt stack 0
  1785  0000E6                     	ds	2
  1786  0000E8                     _f_lastCan:
  1787                           	opt stack 0
  1788  0000E8                     	ds	2
  1789  0000EA                     _f_loadingNewCan:
  1790                           	opt stack 0
  1791  0000EA                     	ds	2
  1792  0000EC                     _log:
  1793                           	opt stack 0
  1794  0000EC                     	ds	2
  1795  0000EE                     _log_completion:
  1796                           	opt stack 0
  1797  0000EE                     	ds	2
  1798  0000F0                     _log_count_pop_no_tab:
  1799                           	opt stack 0
  1800  0000F0                     	ds	2
  1801  0000F2                     _log_count_pop_w_tab:
  1802                           	opt stack 0
  1803  0000F2                     	ds	2
  1804  0000F4                     _log_total_time:
  1805                           	opt stack 0
  1806  0000F4                     	ds	2
  1807  0000F6                     _logstate:
  1808                           	opt stack 0
  1809  0000F6                     	ds	2
  1810  0000F8                     _total_time:
  1811                           	opt stack 0
  1812  0000F8                     	ds	2
  1813  0000FA                     _var:
  1814                           	opt stack 0
  1815  0000FA                     	ds	2
  1816  0000FC                     _machine_state:
  1817                           	opt stack 0
  1818  0000FC                     	ds	1
  1819  0000FD                     _sel:
  1820                           	opt stack 0
  1821  0000FD                     	ds	1
  1822  0000FE                     _count_total:
  1823                           	opt stack 0
  1824  0000FE                     	ds	2
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1l	equ	0xFE1
  1833                           
  1834                           	psect	bssBANK1
  1835  000100                     __pbssBANK1:
  1836                           	opt stack 0
  1837  000100                     _log_startTime:
  1838                           	opt stack 0
  1839  000100                     	ds	14
  1840  00010E                     _startTime:
  1841                           	opt stack 0
  1842  00010E                     	ds	14
  1843  00011C                     _servoTimes:
  1844                           	opt stack 0
  1845  00011C                     	ds	8
  1846  000124                     _time:
  1847                           	opt stack 0
  1848  000124                     	ds	7
  1849  00012B                     _count_can_no_lab:
  1850                           	opt stack 0
  1851  00012B                     	ds	2
  1852  00012D                     _count_can_w_lab:
  1853                           	opt stack 0
  1854  00012D                     	ds	2
  1855  00012F                     _f_can_distributed:
  1856                           	opt stack 0
  1857  00012F                     	ds	2
  1858  000131                     _i:
  1859                           	opt stack 0
  1860  000131                     	ds	2
  1861  000133                     _most_recent_sort_time:
  1862                           	opt stack 0
  1863  000133                     	ds	2
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           
  1873                           	psect	dataBANK1
  1874  000135                     __pdataBANK1:
  1875                           	opt stack 0
  1876  000135                     UI@F3228:
  1877                           	opt stack 0
  1878  000135                     	ds	4
  1879  000139                     printRTC@F3219:
  1880                           	opt stack 0
  1881  000139                     	ds	4
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           fsr1l	equ	0xFE1
  1890                           
  1891                           	psect	cstackBANK0
  1892  000080                     __pcstackBANK0:
  1893                           	opt stack 0
  1894  000080                     ??_delay_ms:
  1895  000080                     ??_PortTests:
  1896  000080                     ??_isdigit:
  1897  000080                     ??_readADC:
  1898  000080                     ??_I2C_Master_Wait:
  1899  000080                     ?___wmul:
  1900                           	opt stack 0
  1901  000080                     ?___awmod:
  1902                           	opt stack 0
  1903  000080                     ?___lwdiv:
  1904                           	opt stack 0
  1905  000080                     ?___lldiv:
  1906                           	opt stack 0
  1907  000080                     lcdNibble@temp:
  1908                           	opt stack 0
  1909  000080                     initTime@m:
  1910                           	opt stack 0
  1911  000080                     updateServoPosition@time_us:
  1912                           	opt stack 0
  1913  000080                     EEPROM_read@address:
  1914                           	opt stack 0
  1915  000080                     ___wmul@multiplier:
  1916                           	opt stack 0
  1917  000080                     ___awmod@dividend:
  1918                           	opt stack 0
  1919  000080                     ___lwdiv@dividend:
  1920                           	opt stack 0
  1921  000080                     strcpy@to:
  1922                           	opt stack 0
  1923  000080                     ___lldiv@dividend:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0x0
  1927  000080                     	ds	1
  1928  000081                     readADC@channel:
  1929                           	opt stack 0
  1930  000081                     I2C_Master_Read@a:
  1931                           	opt stack 0
  1932  000081                     lcdNibble@data:
  1933                           	opt stack 0
  1934  000081                     initTime@h:
  1935                           	opt stack 0
  1936  000081                     delay_ms@milliseconds:
  1937                           	opt stack 0
  1938  000081                     _isdigit$1975:
  1939                           	opt stack 0
  1940  000081                     I2C_Master_Write@d:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x1
  1944  000081                     	ds	1
  1945  000082                     ??_ID:
  1946  000082                     ??_readIR:
  1947  000082                     ??_readMAG:
  1948  000082                     I2C_Master_Read@temp:
  1949                           	opt stack 0
  1950  000082                     lcdInst@data:
  1951                           	opt stack 0
  1952  000082                     putch@data:
  1953                           	opt stack 0
  1954  000082                     initTime@w:
  1955                           	opt stack 0
  1956  000082                     isdigit@c:
  1957                           	opt stack 0
  1958  000082                     updateServoPosition@timer:
  1959                           	opt stack 0
  1960  000082                     ___wmul@multiplicand:
  1961                           	opt stack 0
  1962  000082                     ___awmod@divisor:
  1963                           	opt stack 0
  1964  000082                     ___lwdiv@divisor:
  1965                           	opt stack 0
  1966  000082                     strcpy@from:
  1967                           	opt stack 0
  1968                           
  1969                           ; 2 bytes @ 0x2
  1970  000082                     	ds	1
  1971  000083                     ??_initLCD:
  1972  000083                     initTime@DD:
  1973                           	opt stack 0
  1974  000083                     getRTC@i:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x3
  1978  000083                     	ds	1
  1979  000084                     ??_updateServoPosition:
  1980  000084                     initTime@MM:
  1981                           	opt stack 0
  1982  000084                     ___awmod@counter:
  1983                           	opt stack 0
  1984  000084                     readIR@res:
  1985                           	opt stack 0
  1986  000084                     readMAG@res:
  1987                           	opt stack 0
  1988  000084                     ID@i:
  1989                           	opt stack 0
  1990  000084                     ___wmul@product:
  1991                           	opt stack 0
  1992  000084                     ___lwdiv@quotient:
  1993                           	opt stack 0
  1994  000084                     strcpy@cp:
  1995                           	opt stack 0
  1996  000084                     ___lldiv@divisor:
  1997                           	opt stack 0
  1998                           
  1999                           ; 4 bytes @ 0x4
  2000  000084                     	ds	1
  2001  000085                     ??_initSortTimer:
  2002  000085                     initTime@YY:
  2003                           	opt stack 0
  2004  000085                     ___awmod@sign:
  2005                           	opt stack 0
  2006                           
  2007                           ; 1 bytes @ 0x5
  2008  000085                     	ds	1
  2009  000086                     ??_getIR:
  2010  000086                     ??_getMAG:
  2011  000086                     ?___awdiv:
  2012                           	opt stack 0
  2013  000086                     initTime@s:
  2014                           	opt stack 0
  2015  000086                     ___lwdiv@counter:
  2016                           	opt stack 0
  2017  000086                     ID@i_1118:
  2018                           	opt stack 0
  2019  000086                     updateServoPosition@my_time:
  2020                           	opt stack 0
  2021  000086                     ___awdiv@dividend:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x6
  2025  000086                     	ds	1
  2026  000087                     ?___lwmod:
  2027                           	opt stack 0
  2028  000087                     getIR@i:
  2029                           	opt stack 0
  2030  000087                     ___lwmod@dividend:
  2031                           	opt stack 0
  2032                           
  2033                           ; 2 bytes @ 0x7
  2034  000087                     	ds	1
  2035  000088                     ??_Distribution:
  2036  000088                     ??_initServos:
  2037  000088                     initSortTimer@i:
  2038                           	opt stack 0
  2039  000088                     ___awdiv@divisor:
  2040                           	opt stack 0
  2041  000088                     ___lldiv@quotient:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x8
  2045  000088                     	ds	1
  2046  000089                     ___lwmod@divisor:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x9
  2050  000089                     	ds	1
  2051  00008A                     ___awdiv@counter:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0xA
  2055  00008A                     	ds	1
  2056  00008B                     ___awdiv@sign:
  2057                           	opt stack 0
  2058  00008B                     ___lwmod@counter:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0xB
  2062  00008B                     	ds	1
  2063  00008C                     ___lldiv@counter:
  2064                           	opt stack 0
  2065  00008C                     ___awdiv@quotient:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0xC
  2069  00008C                     	ds	1
  2070  00008D                     I2C_Master_Init@c:
  2071                           	opt stack 0
  2072                           
  2073                           ; 4 bytes @ 0xD
  2074  00008D                     	ds	1
  2075  00008E                     ?_printf:
  2076                           	opt stack 0
  2077  00008E                     printf@f:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0xE
  2081  00008E                     	ds	3
  2082  000091                     ??_I2C_Master_Init:
  2083                           
  2084                           ; 1 bytes @ 0x11
  2085  000091                     	ds	4
  2086  000095                     ??_loadRTC:
  2087                           
  2088                           ; 1 bytes @ 0x15
  2089  000095                     	ds	1
  2090  000096                     loadRTC@i:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x16
  2094  000096                     	ds	4
  2095  00009A                     ??_printf:
  2096                           
  2097                           ; 1 bytes @ 0x1A
  2098  00009A                     	ds	4
  2099  00009E                     printf@prec:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x1E
  2103  00009E                     	ds	1
  2104  00009F                     printf@cp:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x1F
  2108  00009F                     	ds	2
  2109  0000A1                     printf@ap:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x21
  2113  0000A1                     	ds	2
  2114  0000A3                     printf@len:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x23
  2118  0000A3                     	ds	2
  2119  0000A5                     printf@val:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x25
  2123  0000A5                     	ds	2
  2124  0000A7                     printf@flag:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x27
  2128  0000A7                     	ds	1
  2129  0000A8                     printf@c:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x28
  2133  0000A8                     	ds	1
  2134  0000A9                     printf@width:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x29
  2138  0000A9                     	ds	2
  2139  0000AB                     ??_printRTC:
  2140  0000AB                     ??_algorithmTest:
  2141  0000AB                     ??_sensorTest:
  2142  0000AB                     ??_actuatorTest:
  2143  0000AB                     ??_PortTestA5:
  2144  0000AB                     ??_SpeedTest:
  2145  0000AB                     ??_PusherTest:
  2146  0000AB                     ??_BothServos:
  2147  0000AB                     ??_BlockerTest:
  2148  0000AB                     EEPROM_write@address:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0x2B
  2152  0000AB                     	ds	1
  2153  0000AC                     BlockerTest@i:
  2154                           	opt stack 0
  2155                           
  2156                           ; 2 bytes @ 0x2C
  2157  0000AC                     	ds	1
  2158  0000AD                     EEPROM_write@data:
  2159                           	opt stack 0
  2160  0000AD                     actuatorTest@i_1651:
  2161                           	opt stack 0
  2162  0000AD                     sensorTest@res:
  2163                           	opt stack 0
  2164  0000AD                     PusherTest@res:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x2D
  2168  0000AD                     	ds	1
  2169  0000AE                     ??_EEPROM_write:
  2170  0000AE                     actuatorTest@i_1658:
  2171                           	opt stack 0
  2172  0000AE                     BlockerTest@cam_flag:
  2173                           	opt stack 0
  2174  0000AE                     printRTC@INT_time:
  2175                           	opt stack 0
  2176                           
  2177                           ; 14 bytes @ 0x2E
  2178  0000AE                     	ds	1
  2179  0000AF                     EEPROM_write@i:
  2180                           	opt stack 0
  2181  0000AF                     actuatorTest@i_1659:
  2182                           	opt stack 0
  2183  0000AF                     PusherTest@res_1706:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x2F
  2187  0000AF                     	ds	1
  2188  0000B0                     EEPROM_write@i_1337:
  2189                           	opt stack 0
  2190  0000B0                     actuatorTest@i_1661:
  2191                           	opt stack 0
  2192  0000B0                     BlockerTest@cond_flag:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x30
  2196  0000B0                     	ds	1
  2197  0000B1                     ??_Loading:
  2198  0000B1                     logRun@num:
  2199                           	opt stack 0
  2200  0000B1                     actuatorTest@i_1662:
  2201                           	opt stack 0
  2202  0000B1                     PusherTest@i:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x31
  2206  0000B1                     	ds	1
  2207  0000B2                     logRun@byte1:
  2208                           	opt stack 0
  2209  0000B2                     actuatorTest@i_1664:
  2210                           	opt stack 0
  2211                           
  2212                           ; 1 bytes @ 0x32
  2213  0000B2                     	ds	1
  2214  0000B3                     logRun@byte2:
  2215                           	opt stack 0
  2216  0000B3                     actuatorTest@i_1665:
  2217                           	opt stack 0
  2218  0000B3                     Loading@addr:
  2219                           	opt stack 0
  2220  0000B3                     PusherTest@i_1710:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x33
  2224  0000B3                     	ds	1
  2225  0000B4                     logRun@byte3:
  2226                           	opt stack 0
  2227  0000B4                     actuatorTest@i_1667:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x34
  2231  0000B4                     	ds	1
  2232  0000B5                     Loading@byte1:
  2233                           	opt stack 0
  2234  0000B5                     logRun@byte_i:
  2235                           	opt stack 0
  2236  0000B5                     actuatorTest@i_1668:
  2237                           	opt stack 0
  2238                           
  2239                           ; 1 bytes @ 0x35
  2240  0000B5                     	ds	1
  2241  0000B6                     logRun@byte11:
  2242                           	opt stack 0
  2243  0000B6                     actuatorTest@i_1670:
  2244                           	opt stack 0
  2245  0000B6                     Loading@i_1103:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x36
  2249  0000B6                     	ds	1
  2250  0000B7                     actuatorTest@i_1671:
  2251                           	opt stack 0
  2252  0000B7                     logRun@i:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x37
  2256  0000B7                     	ds	1
  2257  0000B8                     actuatorTest@i_1673:
  2258                           	opt stack 0
  2259  0000B8                     Loading@i_1104:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x38
  2263  0000B8                     	ds	1
  2264  0000B9                     actuatorTest@i_1674:
  2265                           	opt stack 0
  2266  0000B9                     logRun@addr:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x39
  2270  0000B9                     	ds	1
  2271  0000BA                     actuatorTest@i_1677:
  2272                           	opt stack 0
  2273  0000BA                     Loading@i_1106:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x3A
  2277  0000BA                     	ds	1
  2278  0000BB                     actuatorTest@i_1678:
  2279                           	opt stack 0
  2280                           
  2281                           ; 1 bytes @ 0x3B
  2282  0000BB                     	ds	1
  2283  0000BC                     actuatorTest@i_1680:
  2284                           	opt stack 0
  2285  0000BC                     printRTC@RTC_month:
  2286                           	opt stack 0
  2287  0000BC                     Loading@i_1107:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x3C
  2291  0000BC                     	ds	1
  2292  0000BD                     actuatorTest@i_1681:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x3D
  2296  0000BD                     	ds	1
  2297  0000BE                     actuatorTest@i_1683:
  2298                           	opt stack 0
  2299  0000BE                     Loading@i:
  2300                           	opt stack 0
  2301  0000BE                     printRTC@month:
  2302                           	opt stack 0
  2303                           
  2304                           ; 4 bytes @ 0x3E
  2305  0000BE                     	ds	1
  2306  0000BF                     actuatorTest@i_1684:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x3F
  2310  0000BF                     	ds	1
  2311  0000C0                     actuatorTest@i_1687:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x40
  2315  0000C0                     	ds	1
  2316  0000C1                     actuatorTest@i_1688:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x41
  2320  0000C1                     	ds	1
  2321  0000C2                     actuatorTest@i_1690:
  2322                           	opt stack 0
  2323  0000C2                     printRTC@i:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0x42
  2327  0000C2                     	ds	1
  2328  0000C3                     actuatorTest@i_1691:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x43
  2332  0000C3                     	ds	1
  2333  0000C4                     ??_UI:
  2334  0000C4                     actuatorTest@i:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x44
  2338  0000C4                     	ds	2
  2339  0000C6                     ??_Test:
  2340  0000C6                     _UI$2331:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x46
  2344  0000C6                     	ds	2
  2345  0000C8                     UI@i:
  2346                           	opt stack 0
  2347                           
  2348                           ; 1 bytes @ 0x48
  2349  0000C8                     	ds	1
  2350  0000C9                     UI@i_409:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x49
  2354  0000C9                     	ds	1
  2355  0000CA                     UI@i_412:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0x4A
  2359  0000CA                     	ds	1
  2360  0000CB                     UI@i_413:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x4B
  2364  0000CB                     	ds	1
  2365  0000CC                     UI@i_431:
  2366                           	opt stack 0
  2367                           
  2368                           ; 1 bytes @ 0x4C
  2369  0000CC                     	ds	1
  2370  0000CD                     UI@i_432:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x4D
  2374  0000CD                     	ds	1
  2375  0000CE                     UI@i_435:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x4E
  2379  0000CE                     	ds	1
  2380  0000CF                     UI@i_436:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x4F
  2384  0000CF                     	ds	1
  2385  0000D0                     UI@i_439:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x50
  2389  0000D0                     	ds	1
  2390  0000D1                     UI@i_440:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x51
  2394  0000D1                     	ds	1
  2395  0000D2                     UI@i_443:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x52
  2399  0000D2                     	ds	1
  2400  0000D3                     UI@i_444:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x53
  2404  0000D3                     	ds	1
  2405  0000D4                     UI@i_447:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x54
  2409  0000D4                     	ds	1
  2410  0000D5                     UI@i_448:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x55
  2414  0000D5                     	ds	1
  2415  0000D6                     UI@month:
  2416                           	opt stack 0
  2417                           
  2418                           ; 4 bytes @ 0x56
  2419  0000D6                     	ds	4
  2420  0000DA                     tblptru	equ	0xFF8
  2421                           tblptrh	equ	0xFF7
  2422                           tblptrl	equ	0xFF6
  2423                           tablat	equ	0xFF5
  2424                           postinc0	equ	0xFEE
  2425                           wreg	equ	0xFE8
  2426                           postdec1	equ	0xFE5
  2427                           fsr1l	equ	0xFE1
  2428                           
  2429                           ; 1 bytes @ 0x5A
  2430                           
  2431                           	psect	cstackCOMRAM
  2432  000001                     __pcstackCOMRAM:
  2433                           	opt stack 0
  2434  000001                     ??i2_I2C_Master_Wait:
  2435  000001                     ??i2_isdigit:
  2436  000001                     ?i2___wmul:
  2437                           	opt stack 0
  2438  000001                     ?i2___lwmod:
  2439                           	opt stack 0
  2440  000001                     i2lcdNibble@temp:
  2441                           	opt stack 0
  2442  000001                     i2EEPROM_read@address:
  2443                           	opt stack 0
  2444  000001                     i2___wmul@multiplier:
  2445                           	opt stack 0
  2446  000001                     i2___lwmod@dividend:
  2447                           	opt stack 0
  2448  000001                     i2strcpy@to:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x0
  2452  000001                     	ds	1
  2453  000002                     i2I2C_Master_Read@a:
  2454                           	opt stack 0
  2455  000002                     i2lcdNibble@data:
  2456                           	opt stack 0
  2457  000002                     i2_isdigit$1975:
  2458                           	opt stack 0
  2459  000002                     i2I2C_Master_Write@d:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x1
  2463  000002                     	ds	1
  2464  000003                     i2I2C_Master_Read@temp:
  2465                           	opt stack 0
  2466  000003                     i2lcdInst@data:
  2467                           	opt stack 0
  2468  000003                     i2putch@data:
  2469                           	opt stack 0
  2470  000003                     i2isdigit@c:
  2471                           	opt stack 0
  2472  000003                     i2___wmul@multiplicand:
  2473                           	opt stack 0
  2474  000003                     i2___lwmod@divisor:
  2475                           	opt stack 0
  2476  000003                     i2strcpy@from:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x2
  2480  000003                     	ds	1
  2481  000004                     i2getRTC@i:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x3
  2485  000004                     	ds	1
  2486  000005                     i2___lwmod@counter:
  2487                           	opt stack 0
  2488  000005                     i2___wmul@product:
  2489                           	opt stack 0
  2490  000005                     i2strcpy@cp:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x4
  2494  000005                     	ds	1
  2495  000006                     ?i2___lwdiv:
  2496                           	opt stack 0
  2497  000006                     i2___lwdiv@dividend:
  2498                           	opt stack 0
  2499                           
  2500                           ; 2 bytes @ 0x5
  2501  000006                     	ds	1
  2502  000007                     retrieveLog@logNum:
  2503                           	opt stack 0
  2504                           
  2505                           ; 2 bytes @ 0x6
  2506  000007                     	ds	1
  2507  000008                     i2___lwdiv@divisor:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x7
  2511  000008                     	ds	1
  2512  000009                     ??_retrieveLog:
  2513                           
  2514                           ; 1 bytes @ 0x8
  2515  000009                     	ds	1
  2516  00000A                     i2___lwdiv@quotient:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x9
  2520  00000A                     	ds	1
  2521  00000B                     retrieveLog@byte1:
  2522                           	opt stack 0
  2523                           
  2524                           ; 1 bytes @ 0xA
  2525  00000B                     	ds	1
  2526  00000C                     retrieveLog@byte2:
  2527                           	opt stack 0
  2528  00000C                     i2___lwdiv@counter:
  2529                           	opt stack 0
  2530                           
  2531                           ; 1 bytes @ 0xB
  2532  00000C                     	ds	1
  2533  00000D                     ?i2_printf:
  2534                           	opt stack 0
  2535  00000D                     retrieveLog@byte3:
  2536                           	opt stack 0
  2537  00000D                     i2printf@f:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0xC
  2541  00000D                     	ds	1
  2542  00000E                     retrieveLog@i:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0xD
  2546  00000E                     	ds	2
  2547  000010                     retrieveLog@addr:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0xF
  2551  000010                     	ds	2
  2552  000012                     dispLogs@myLog:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x11
  2556  000012                     	ds	2
  2557  000014                     
  2558                           ; 1 bytes @ 0x13
  2559  000014                     	ds	5
  2560  000019                     ??i2_printf:
  2561                           
  2562                           ; 1 bytes @ 0x18
  2563  000019                     	ds	4
  2564  00001D                     i2printf@prec:
  2565                           	opt stack 0
  2566                           
  2567                           ; 1 bytes @ 0x1C
  2568  00001D                     	ds	1
  2569  00001E                     i2printf@cp:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x1D
  2573  00001E                     	ds	2
  2574  000020                     i2printf@ap:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x1F
  2578  000020                     	ds	2
  2579  000022                     i2printf@len:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x21
  2583  000022                     	ds	2
  2584  000024                     i2printf@val:
  2585                           	opt stack 0
  2586                           
  2587                           ; 2 bytes @ 0x23
  2588  000024                     	ds	2
  2589  000026                     i2printf@flag:
  2590                           	opt stack 0
  2591                           
  2592                           ; 1 bytes @ 0x25
  2593  000026                     	ds	1
  2594  000027                     i2printf@c:
  2595                           	opt stack 0
  2596                           
  2597                           ; 1 bytes @ 0x26
  2598  000027                     	ds	1
  2599  000028                     i2printf@width:
  2600                           	opt stack 0
  2601                           
  2602                           ; 2 bytes @ 0x27
  2603  000028                     	ds	2
  2604  00002A                     ??_printSortTimer:
  2605  00002A                     ??i2_printRTC:
  2606  00002A                     ?_inputHandler:
  2607                           	opt stack 0
  2608                           
  2609                           ; 2 bytes @ 0x29
  2610  00002A                     	ds	2
  2611  00002C                     ??_inputHandler:
  2612                           
  2613                           ; 1 bytes @ 0x2B
  2614  00002C                     	ds	1
  2615  00002D                     printSortTimer@curTime:
  2616                           	opt stack 0
  2617  00002D                     i2printRTC@INT_time:
  2618                           	opt stack 0
  2619                           
  2620                           ; 14 bytes @ 0x2C
  2621  00002D                     	ds	14
  2622  00003B                     printSortTimer@start_sec:
  2623                           	opt stack 0
  2624  00003B                     i2printRTC@RTC_month:
  2625                           	opt stack 0
  2626                           
  2627                           ; 2 bytes @ 0x3A
  2628  00003B                     	ds	2
  2629  00003D                     printSortTimer@cur_sec:
  2630                           	opt stack 0
  2631  00003D                     i2printRTC@month:
  2632                           	opt stack 0
  2633                           
  2634                           ; 4 bytes @ 0x3C
  2635  00003D                     	ds	2
  2636  00003F                     printSortTimer@min:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x3E
  2640  00003F                     	ds	2
  2641  000041                     printSortTimer@sec:
  2642                           	opt stack 0
  2643  000041                     i2printRTC@i:
  2644                           	opt stack 0
  2645                           
  2646                           ; 2 bytes @ 0x40
  2647  000041                     	ds	2
  2648  000043                     ??_updateMenu:
  2649  000043                     _printSortTimer$2451:
  2650                           	opt stack 0
  2651                           
  2652                           ; 2 bytes @ 0x42
  2653  000043                     	ds	2
  2654  000045                     printSortTimer@timeDiff:
  2655                           	opt stack 0
  2656                           
  2657                           ; 2 bytes @ 0x44
  2658  000045                     	ds	2
  2659  000047                     printSortTimer@i:
  2660                           	opt stack 0
  2661                           
  2662                           ; 2 bytes @ 0x46
  2663  000047                     	ds	2
  2664  000049                     ??_handler:
  2665                           
  2666                           ; 1 bytes @ 0x48
  2667  000049                     	ds	16
  2668                           tblptru	equ	0xFF8
  2669                           tblptrh	equ	0xFF7
  2670                           tblptrl	equ	0xFF6
  2671                           tablat	equ	0xFF5
  2672                           postinc0	equ	0xFEE
  2673                           wreg	equ	0xFE8
  2674                           postdec1	equ	0xFE5
  2675                           fsr1l	equ	0xFE1
  2676                           
  2677 ;;
  2678 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2679 ;;
  2680 ;; *************** function _main *****************
  2681 ;; Defined at:
  2682 ;;		line 19 in file "main.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;Total ram usage:        0 bytes
  2701 ;; Hardware stack levels required when called:   13
  2702 ;; This function calls:
  2703 ;;		_I2C_Master_Init
  2704 ;;		_Test
  2705 ;;		_UI
  2706 ;;		_initLCD
  2707 ;;		_initTime
  2708 ;;		_initUI
  2709 ;;		_logRun
  2710 ;;		_machineConfig
  2711 ;;		_sort
  2712 ;;		_stopSignals
  2713 ;; This function is called by:
  2714 ;;		Startup code after reset
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text0
  2719  003CEE                     __ptext0:
  2720                           	opt stack 0
  2721  003CEE                     _main:
  2722                           	opt stack 18
  2723                           
  2724                           ;main.c: 20: machineConfig();
  2725                           
  2726                           ;incstack = 0
  2727  003CEE  EC05  F023         	call	_machineConfig	;wreg free
  2728                           
  2729                           ;main.c: 21: initLCD();
  2730  003CF2  EC55  F024         	call	_initLCD	;wreg free
  2731                           
  2732                           ;main.c: 24: RTCflag = 0;
  2733  003CF6  0E00               	movlw	0
  2734  003CF8  0100               	movlb	0	; () banked
  2735  003CFA  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2736  003CFC  0E00               	movlw	0
  2737  003CFE  6FE2               	movwf	_RTCflag& (0+255),b
  2738                           
  2739                           ;main.c: 25: if(RTCflag){
  2740  003D00  0100               	movlb	0	; () banked
  2741  003D02  51E2               	movf	_RTCflag& (0+255),w,b
  2742  003D04  0100               	movlb	0	; () banked
  2743  003D06  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2744  003D08  B4D8               	btfsc	status,2,c
  2745  003D0A  D016               	goto	l8747
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2749  003D0C  0E20               	movlw	32
  2750  003D0E  0100               	movlb	0	; () banked
  2751  003D10  6F80               	movwf	initTime@m& (0+255),b
  2752  003D12  0E15               	movlw	21
  2753  003D14  0100               	movlb	0	; () banked
  2754  003D16  6F81               	movwf	initTime@h& (0+255),b
  2755  003D18  0E04               	movlw	4
  2756  003D1A  0100               	movlb	0	; () banked
  2757  003D1C  6F82               	movwf	initTime@w& (0+255),b
  2758  003D1E  0E15               	movlw	21
  2759  003D20  0100               	movlb	0	; () banked
  2760  003D22  6F83               	movwf	initTime@DD& (0+255),b
  2761  003D24  0E03               	movlw	3
  2762  003D26  0100               	movlb	0	; () banked
  2763  003D28  6F84               	movwf	initTime@MM& (0+255),b
  2764  003D2A  0E17               	movlw	23
  2765  003D2C  0100               	movlb	0	; () banked
  2766  003D2E  6F85               	movwf	initTime@YY& (0+255),b
  2767  003D30  0E42               	movlw	66
  2768  003D32  EC08  F027         	call	_initTime
  2769                           
  2770                           ;main.c: 27: }
  2771  003D36  D00B               	goto	l8749
  2772  003D38                     l8747:
  2773                           
  2774                           ;main.c: 28: else{
  2775                           ;main.c: 29: I2C_Master_Init(10000);
  2776  003D38  0E10               	movlw	16
  2777  003D3A  0100               	movlb	0	; () banked
  2778  003D3C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2779  003D3E  0E27               	movlw	39
  2780  003D40  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2781  003D42  0E00               	movlw	0
  2782  003D44  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2783  003D46  0E00               	movlw	0
  2784  003D48  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2785  003D4A  ECD5  F022         	call	_I2C_Master_Init	;wreg free
  2786  003D4E                     l8749:
  2787                           
  2788                           ;main.c: 30: }
  2789                           ;main.c: 32: initUI();
  2790  003D4E  EC11  F026         	call	_initUI	;wreg free
  2791                           
  2792                           ;main.c: 33: first = 1;
  2793  003D52  0E00               	movlw	0
  2794  003D54  6E6E               	movwf	_first+1,c
  2795  003D56  0E01               	movlw	1
  2796  003D58  6E6D               	movwf	_first,c
  2797                           
  2798                           ;main.c: 44: switch(machine_state){
  2799                           
  2800                           ;main.c: 43: while(1){
  2801  003D5A  D017               	goto	l8771
  2802  003D5C                     l8753:
  2803                           
  2804                           ;main.c: 46: UI();
  2805  003D5C  EC65  F004         	call	_UI	;wreg free
  2806                           
  2807                           ;main.c: 47: break;
  2808  003D60  D014               	goto	l8771
  2809  003D62                     l8755:
  2810                           
  2811                           ;main.c: 49: sort();
  2812  003D62  ECF7  F026         	call	_sort	;wreg free
  2813                           
  2814                           ;main.c: 50: break;
  2815  003D66  D011               	goto	l8771
  2816  003D68                     l8757:
  2817                           
  2818                           ;main.c: 52: stopSignals();
  2819  003D68  EC28  F027         	call	_stopSignals	;wreg free
  2820                           
  2821                           ;main.c: 53: logRun();
  2822  003D6C  ECE0  F01B         	call	_logRun	;wreg free
  2823                           
  2824                           ;main.c: 54: first = 1;
  2825  003D70  0E00               	movlw	0
  2826  003D72  6E6E               	movwf	_first+1,c
  2827  003D74  0E01               	movlw	1
  2828  003D76  6E6D               	movwf	_first,c
  2829                           
  2830                           ;main.c: 55: UI();
  2831  003D78  EC65  F004         	call	_UI	;wreg free
  2832                           
  2833                           ;main.c: 56: break;
  2834  003D7C  D006               	goto	l8771
  2835  003D7E                     l8765:
  2836                           
  2837                           ;main.c: 58: Test();
  2838  003D7E  EC10  F01D         	call	_Test	;wreg free
  2839                           
  2840                           ;main.c: 59: break;
  2841  003D82  D003               	goto	l8771
  2842  003D84                     l8767:
  2843                           
  2844                           ;main.c: 61: stopSignals();
  2845  003D84  EC28  F027         	call	_stopSignals	;wreg free
  2846  003D88                     l491:
  2847  003D88  D7FF               	goto	l491
  2848  003D8A                     l8771:
  2849  003D8A  0100               	movlb	0	; () banked
  2850  003D8C  51FC               	movf	_machine_state& (0+255),w,b
  2851                           
  2852                           ; Switch size 1, requested type "space"
  2853                           ; Number of cases is 5, Range of values is 0 to 4
  2854                           ; switch strategies available:
  2855                           ; Name         Instructions Cycles
  2856                           ; simple_byte           16     9 (average)
  2857                           ;	Chosen strategy is simple_byte
  2858  003D8E  0A00               	xorlw	0	; case 0
  2859  003D90  B4D8               	btfsc	status,2,c
  2860  003D92  D7E4               	goto	l8753
  2861  003D94  0A01               	xorlw	1	; case 1
  2862  003D96  B4D8               	btfsc	status,2,c
  2863  003D98  D7E4               	goto	l8755
  2864  003D9A  0A03               	xorlw	3	; case 2
  2865  003D9C  B4D8               	btfsc	status,2,c
  2866  003D9E  D7E4               	goto	l8757
  2867  003DA0  0A01               	xorlw	1	; case 3
  2868  003DA2  B4D8               	btfsc	status,2,c
  2869  003DA4  D7EC               	goto	l8765
  2870  003DA6  0A07               	xorlw	7	; case 4
  2871  003DA8  B4D8               	btfsc	status,2,c
  2872  003DAA  D7EC               	goto	l8767
  2873                           
  2874                           ; BSR set to: 0
  2875                           
  2876                           ; BSR set to: 0
  2877  003DAC  D7EE               	goto	l8771
  2878  003DAE                     __end_of_main:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           postdec1	equ	0xFE5
  2887                           fsr1l	equ	0xFE1
  2888                           status	equ	0xFD8
  2889                           
  2890 ;; *************** function _stopSignals *****************
  2891 ;; Defined at:
  2892 ;;		line 70 in file "main.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;		None
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;Total ram usage:        0 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    7
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_main
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text1
  2921  004E50                     __ptext1:
  2922                           	opt stack 0
  2923  004E50                     _stopSignals:
  2924                           	opt stack 23
  2925                           
  2926                           ;main.c: 71: LATA = 0x00;
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;incstack = 0
  2930  004E50  0E00               	movlw	0
  2931  004E52  6E89               	movwf	3977,c	;volatile
  2932                           
  2933                           ;main.c: 72: LATB = 0x00;
  2934  004E54  0E00               	movlw	0
  2935  004E56  6E8A               	movwf	3978,c	;volatile
  2936                           
  2937                           ;main.c: 73: LATC = 0x00;
  2938  004E58  0E00               	movlw	0
  2939  004E5A  6E8B               	movwf	3979,c	;volatile
  2940                           
  2941                           ;main.c: 74: LATD = 0x00;
  2942  004E5C  0E00               	movlw	0
  2943  004E5E  6E8C               	movwf	3980,c	;volatile
  2944                           
  2945                           ;main.c: 75: LATE = 0x00;
  2946  004E60  0E00               	movlw	0
  2947  004E62  6E8D               	movwf	3981,c	;volatile
  2948                           
  2949                           ;main.c: 76: TMR1ON = 0;
  2950  004E64  90CD               	bcf	4045,0,c	;volatile
  2951                           
  2952                           ;main.c: 77: TMR3ON = 0;
  2953  004E66  90B1               	bcf	4017,0,c	;volatile
  2954  004E68  0012               	return		;funcret
  2955  004E6A                     __end_of_stopSignals:
  2956                           	opt stack 0
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           postinc0	equ	0xFEE
  2962                           wreg	equ	0xFE8
  2963                           postdec1	equ	0xFE5
  2964                           fsr1l	equ	0xFE1
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _sort *****************
  2968 ;; Defined at:
  2969 ;;		line 58 in file "sort.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;Total ram usage:        0 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:   12
  2990 ;; This function calls:
  2991 ;;		_Distribution
  2992 ;;		_ID
  2993 ;;		_Loading
  2994 ;; This function is called by:
  2995 ;;		_main
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text2
  3000  004DEE                     __ptext2:
  3001                           	opt stack 0
  3002  004DEE                     _sort:
  3003                           	opt stack 18
  3004                           
  3005                           ;sort.c: 59: if(machine_state == Sorting_state){
  3006                           
  3007                           ;incstack = 0
  3008  004DEE  0100               	movlb	0	; () banked
  3009  004DF0  05FC               	decf	_machine_state& (0+255),w,b
  3010  004DF2  B4D8               	btfsc	status,2,c
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;sort.c: 60: Loading();
  3014  004DF4  EC4D  F00E         	call	_Loading	;wreg free
  3015                           
  3016                           ;sort.c: 61: }
  3017                           ;sort.c: 62: if(machine_state == Sorting_state){
  3018  004DF8  0100               	movlb	0	; () banked
  3019  004DFA  05FC               	decf	_machine_state& (0+255),w,b
  3020  004DFC  B4D8               	btfsc	status,2,c
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;sort.c: 63: ID();
  3024  004DFE  EC79  F019         	call	_ID	;wreg free
  3025                           
  3026                           ;sort.c: 64: }
  3027                           ;sort.c: 65: if(machine_state == Sorting_state){
  3028  004E02  0100               	movlb	0	; () banked
  3029  004E04  05FC               	decf	_machine_state& (0+255),w,b
  3030  004E06  A4D8               	btfss	status,2,c
  3031  004E08  0012               	return	
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;sort.c: 66: Distribution();
  3035  004E0A  EC6F  F016         	call	_Distribution	;wreg free
  3036  004E0E  0012               	return	
  3037  004E10                     __end_of_sort:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postdec1	equ	0xFE5
  3046                           fsr1l	equ	0xFE1
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _Loading *****************
  3050 ;; Defined at:
  3051 ;;		line 70 in file "sort.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  i               2   60[BANK0 ] int 
  3056 ;;  i               2   58[BANK0 ] int 
  3057 ;;  i               2   56[BANK0 ] int 
  3058 ;;  i               2   54[BANK0 ] int 
  3059 ;;  i               2   62[BANK0 ] int 
  3060 ;;  addr            2   51[BANK0 ] unsigned short 
  3061 ;;  byte1           1   53[BANK0 ] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;Total ram usage:       15 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:   11
  3078 ;; This function calls:
  3079 ;;		_EEPROM_read
  3080 ;;		_EEPROM_write
  3081 ;;		_delay_ms
  3082 ;;		_getIR
  3083 ;;		_getMAG
  3084 ;;		_initGlobalVars
  3085 ;;		_initServos
  3086 ;;		_initSortTimer
  3087 ;;		_lcdInst
  3088 ;;		_readIR
  3089 ;; This function is called by:
  3090 ;;		_sort
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text3
  3095  001C9A                     __ptext3:
  3096                           	opt stack 0
  3097  001C9A                     _Loading:
  3098                           	opt stack 18
  3099                           
  3100                           ;sort.c: 71: if(first){
  3101                           
  3102                           ;incstack = 0
  3103  001C9A  506D               	movf	_first,w,c
  3104  001C9C  106E               	iorwf	_first+1,w,c
  3105  001C9E  B4D8               	btfsc	status,2,c
  3106  001CA0  D074               	goto	l6815
  3107                           
  3108                           ;sort.c: 72: initGlobalVars();
  3109  001CA2  EC47  F021         	call	_initGlobalVars	;wreg free
  3110                           
  3111                           ;sort.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3112  001CA6  0E01               	movlw	1
  3113  001CA8  EC67  F027         	call	_lcdInst
  3114  001CAC  0E68               	movlw	104
  3115  001CAE  0100               	movlb	0	; () banked
  3116  001CB0  6FB1               	movwf	??_Loading& (0+255),b
  3117  001CB2  0EE4               	movlw	228
  3118  001CB4                     u8097:
  3119  001CB4  2EE8               	decfsz	wreg,f,c
  3120  001CB6  D7FE               	bra	u8097
  3121  001CB8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3122  001CBA  D7FC               	bra	u8097
  3123  001CBC  F000               	nop	
  3124                           
  3125                           ;sort.c: 74: initSortTimer();
  3126  001CBE  EC94  F01F         	call	_initSortTimer	;wreg free
  3127                           
  3128                           ;sort.c: 75: LATCbits.LATC5 = 1;
  3129  001CC2  8A8B               	bsf	3979,5,c	;volatile
  3130                           
  3131                           ;sort.c: 80: sel = EEPROM_read(0);
  3132  001CC4  0E00               	movlw	0
  3133  001CC6  0100               	movlb	0	; () banked
  3134  001CC8  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3135  001CCA  0E00               	movlw	0
  3136  001CCC  6F80               	movwf	EEPROM_read@address& (0+255),b
  3137  001CCE  EC35  F027         	call	_EEPROM_read	;wreg free
  3138  001CD2  0100               	movlb	0	; () banked
  3139  001CD4  6FFD               	movwf	_sel& (0+255),b
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;sort.c: 81: unsigned short addr = 1 + 11 * sel;
  3143  001CD6  0100               	movlb	0	; () banked
  3144  001CD8  51FD               	movf	_sel& (0+255),w,b
  3145  001CDA  0D0B               	mullw	11
  3146  001CDC  0E01               	movlw	1
  3147  001CDE  24F3               	addwf	prodl,w,c
  3148  001CE0  0100               	movlb	0	; () banked
  3149  001CE2  6FB3               	movwf	Loading@addr& (0+255),b
  3150  001CE4  0E00               	movlw	0
  3151  001CE6  20F4               	addwfc	prodh,w,c
  3152  001CE8  0100               	movlb	0	; () banked
  3153  001CEA  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;sort.c: 82: unsigned char byte1 = 0b01111111;
  3157  001CEC  0E7F               	movlw	127
  3158  001CEE  0100               	movlb	0	; () banked
  3159  001CF0  6FB5               	movwf	Loading@byte1& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;sort.c: 83: EEPROM_write(addr, byte1);
  3163  001CF2  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3164  001CF6  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3165  001CFA  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3166  001CFE  EC9A  F01D         	call	_EEPROM_write	;wreg free
  3167                           
  3168                           ;sort.c: 86: LATAbits.LATA5 = 0;
  3169  001D02  9A89               	bcf	3977,5,c	;volatile
  3170                           
  3171                           ;sort.c: 88: for(int i=0; i<46; i++){
  3172  001D04  0E00               	movlw	0
  3173  001D06  0100               	movlb	0	; () banked
  3174  001D08  6FBF               	movwf	(Loading@i+1)& (0+255),b
  3175  001D0A  0E00               	movlw	0
  3176  001D0C  6FBE               	movwf	Loading@i& (0+255),b
  3177                           
  3178                           ; BSR set to: 0
  3179  001D0E  0100               	movlb	0	; () banked
  3180  001D10  BFBF               	btfsc	(Loading@i+1)& (0+255),7,b
  3181  001D12  D008               	goto	l6803
  3182  001D14  0100               	movlb	0	; () banked
  3183  001D16  51BF               	movf	(Loading@i+1)& (0+255),w,b
  3184  001D18  E126               	bnz	l740
  3185  001D1A  0E2E               	movlw	46
  3186  001D1C  0100               	movlb	0	; () banked
  3187  001D1E  5DBE               	subwf	Loading@i& (0+255),w,b
  3188  001D20  B0D8               	btfsc	status,0,c
  3189  001D22  D021               	goto	l740
  3190  001D24                     l6803:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;sort.c: 89: LATAbits.LATA5 = !LATAbits.LATA5;
  3194  001D24  BA89               	btfsc	3977,5,c	;volatile
  3195  001D26  D004               	goto	u5360
  3196  001D28  0100               	movlb	0	; () banked
  3197  001D2A  6BB1               	clrf	??_Loading& (0+255),b
  3198  001D2C  2BB1               	incf	??_Loading& (0+255),f,b
  3199  001D2E  D002               	goto	u5378
  3200  001D30                     u5360:
  3201  001D30  0100               	movlb	0	; () banked
  3202  001D32  6BB1               	clrf	??_Loading& (0+255),b
  3203  001D34                     u5378:
  3204  001D34  0100               	movlb	0	; () banked
  3205  001D36  3BB1               	swapf	??_Loading& (0+255),f,b
  3206  001D38  47B1               	rlncf	??_Loading& (0+255),f,b
  3207  001D3A  5089               	movf	3977,w,c	;volatile
  3208  001D3C  0100               	movlb	0	; () banked
  3209  001D3E  19B1               	xorwf	??_Loading& (0+255),w,b
  3210  001D40  0BDF               	andlw	-33
  3211  001D42  19B1               	xorwf	??_Loading& (0+255),w,b
  3212  001D44  6E89               	movwf	3977,c	;volatile
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 90: delay_ms(45-i);
  3216  001D46  0100               	movlb	0	; () banked
  3217  001D48  51BE               	movf	Loading@i& (0+255),w,b
  3218  001D4A  0800               	sublw	0
  3219  001D4C  0F2D               	addlw	45
  3220  001D4E  EC97  F026         	call	_delay_ms
  3221  001D52  0100               	movlb	0	; () banked
  3222  001D54  4BBE               	infsnz	Loading@i& (0+255),f,b
  3223  001D56  2BBF               	incf	(Loading@i+1)& (0+255),f,b
  3224                           
  3225                           ; BSR set to: 0
  3226  001D58  0100               	movlb	0	; () banked
  3227  001D5A  BFBF               	btfsc	(Loading@i+1)& (0+255),7,b
  3228  001D5C  D7E3               	goto	l6803
  3229  001D5E  0100               	movlb	0	; () banked
  3230  001D60  51BF               	movf	(Loading@i+1)& (0+255),w,b
  3231  001D62  E101               	bnz	u5380
  3232  001D64  D7DA               	goto	L1
  3233  001D66                     u5380:
  3234  001D66                     l740:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;sort.c: 91: }
  3238                           ;sort.c: 92: LATAbits.LATA5 = 1;
  3239  001D66  8A89               	bsf	3977,5,c	;volatile
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;sort.c: 95: initServos();
  3243  001D68  EC61  F023         	call	_initServos	;wreg free
  3244                           
  3245                           ;sort.c: 96: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3246  001D6C  0ECB               	movlw	203
  3247  001D6E  0100               	movlb	0	; () banked
  3248  001D70  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3249  001D72  0EEC               	movlw	236
  3250  001D74  0100               	movlb	0	; () banked
  3251  001D76  6FB1               	movwf	??_Loading& (0+255),b
  3252  001D78  0E84               	movlw	132
  3253  001D7A                     u8107:
  3254  001D7A  2EE8               	decfsz	wreg,f,c
  3255  001D7C  D7FE               	bra	u8107
  3256  001D7E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3257  001D80  D7FC               	bra	u8107
  3258  001D82  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3259  001D84  D7FA               	bra	u8107
  3260  001D86  F000               	nop	
  3261                           
  3262                           ;sort.c: 97: }
  3263  001D88  0012               	return	
  3264  001D8A                     l6815:
  3265                           
  3266                           ;sort.c: 98: else{
  3267                           ;sort.c: 101: if(!f_loadingNewCan){
  3268  001D8A  0100               	movlb	0	; () banked
  3269  001D8C  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3270  001D8E  0100               	movlb	0	; () banked
  3271  001D90  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3272  001D92  A4D8               	btfss	status,2,c
  3273  001D94  D018               	goto	l6831
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;sort.c: 103: getIR();
  3277  001D96  ECFE  F021         	call	_getIR	;wreg free
  3278                           
  3279                           ;sort.c: 105: if(!f_loadingNewCan){
  3280  001D9A  0100               	movlb	0	; () banked
  3281  001D9C  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3282  001D9E  0100               	movlb	0	; () banked
  3283  001DA0  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3284  001DA2  B4D8               	btfsc	status,2,c
  3285  001DA4  0012               	return	
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;sort.c: 109: else{
  3289                           ;sort.c: 110: count_total++;
  3290                           
  3291                           ; BSR set to: 0
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;sort.c: 107: }
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;sort.c: 106: return;
  3298  001DA6  0100               	movlb	0	; () banked
  3299  001DA8  4BFE               	infsnz	_count_total& (0+255),f,b
  3300  001DAA  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;sort.c: 111: if(count_total == 12){
  3304  001DAC  0E0C               	movlw	12
  3305  001DAE  0100               	movlb	0	; () banked
  3306  001DB0  19FE               	xorwf	_count_total& (0+255),w,b
  3307  001DB2  0100               	movlb	0	; () banked
  3308  001DB4  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3309  001DB6  A4D8               	btfss	status,2,c
  3310  001DB8  0012               	return	
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;sort.c: 112: f_lastCan = 1;
  3314  001DBA  0E00               	movlw	0
  3315  001DBC  0100               	movlb	0	; () banked
  3316  001DBE  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3317  001DC0  0E01               	movlw	1
  3318  001DC2  6FE8               	movwf	_f_lastCan& (0+255),b
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;sort.c: 113: }
  3322                           ;sort.c: 114: }
  3323                           ;sort.c: 115: }
  3324                           
  3325                           ; BSR set to: 0
  3326  001DC4  0012               	return	
  3327  001DC6                     l6831:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;sort.c: 118: else if(f_ID_receive){
  3331  001DC6  5065               	movf	_f_ID_receive,w,c
  3332  001DC8  1066               	iorwf	_f_ID_receive+1,w,c
  3333  001DCA  B4D8               	btfsc	status,2,c
  3334  001DCC  0012               	return	
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;sort.c: 119: f_loadingNewCan = 0;
  3338  001DCE  0E00               	movlw	0
  3339  001DD0  0100               	movlb	0	; () banked
  3340  001DD2  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3341  001DD4  0E00               	movlw	0
  3342  001DD6  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;sort.c: 120: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3346  001DD8  0E3D               	movlw	61
  3347  001DDA  0100               	movlb	0	; () banked
  3348  001DDC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3349  001DDE  0EE1               	movlw	225
  3350  001DE0  0100               	movlb	0	; () banked
  3351  001DE2  6FB1               	movwf	??_Loading& (0+255),b
  3352  001DE4  0E3F               	movlw	63
  3353  001DE6                     u8117:
  3354  001DE6  2EE8               	decfsz	wreg,f,c
  3355  001DE8  D7FE               	bra	u8117
  3356  001DEA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3357  001DEC  D7FC               	bra	u8117
  3358  001DEE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3359  001DF0  D7FA               	bra	u8117
  3360  001DF2  D000               	nop2	
  3361                           
  3362                           ;sort.c: 121: LATAbits.LATA5 = 0;
  3363  001DF4  9A89               	bcf	3977,5,c	;volatile
  3364                           
  3365                           ;sort.c: 125: getMAG();
  3366  001DF6  EC07  F025         	call	_getMAG	;wreg free
  3367                           
  3368                           ;sort.c: 126: sensor_outputs[0] = MAG_signal;
  3369  001DFA  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3370  001DFE  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3371                           
  3372                           ;sort.c: 128: if(sensor_outputs[0]){
  3373  001E02  0100               	movlb	0	; () banked
  3374  001E04  51DA               	movf	_sensor_outputs& (0+255),w,b
  3375  001E06  0100               	movlb	0	; () banked
  3376  001E08  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3377  001E0A  B4D8               	btfsc	status,2,c
  3378  001E0C  D01D               	goto	l6857
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;sort.c: 129: for(int i = 0; i<2500; i++){
  3382  001E0E  0E00               	movlw	0
  3383  001E10  0100               	movlb	0	; () banked
  3384  001E12  6FB7               	movwf	(Loading@i_1103+1)& (0+255),b
  3385  001E14  0E00               	movlw	0
  3386  001E16  6FB6               	movwf	Loading@i_1103& (0+255),b
  3387  001E18                     l6847:
  3388                           
  3389                           ; BSR set to: 0
  3390  001E18  0100               	movlb	0	; () banked
  3391  001E1A  BFB7               	btfsc	(Loading@i_1103+1)& (0+255),7,b
  3392  001E1C  D008               	goto	l750
  3393  001E1E  0EC4               	movlw	196
  3394  001E20  0100               	movlb	0	; () banked
  3395  001E22  5DB6               	subwf	Loading@i_1103& (0+255),w,b
  3396  001E24  0E09               	movlw	9
  3397  001E26  0100               	movlb	0	; () banked
  3398  001E28  59B7               	subwfb	(Loading@i_1103+1)& (0+255),w,b
  3399  001E2A  B0D8               	btfsc	status,0,c
  3400  001E2C  D02A               	goto	l6869
  3401  001E2E                     l750:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;sort.c: 130: LATAbits.LATA4 = 1;
  3405  001E2E  8889               	bsf	3977,4,c	;volatile
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;sort.c: 131: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3409  001E30  0EC8               	movlw	200
  3410  001E32                     u8127:
  3411  001E32  2EE8               	decfsz	wreg,f,c
  3412  001E34  D7FE               	bra	u8127
  3413                           
  3414                           ;sort.c: 132: LATAbits.LATA4 = 0;
  3415  001E36  9889               	bcf	3977,4,c	;volatile
  3416                           
  3417                           ;sort.c: 133: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3418  001E38  0E42               	movlw	66
  3419  001E3A                     u8137:
  3420  001E3A  2EE8               	decfsz	wreg,f,c
  3421  001E3C  D7FE               	bra	u8137
  3422  001E3E  D000               	nop2	
  3423  001E40  0100               	movlb	0	; () banked
  3424  001E42  4BB6               	infsnz	Loading@i_1103& (0+255),f,b
  3425  001E44  2BB7               	incf	(Loading@i_1103+1)& (0+255),f,b
  3426  001E46  D7E8               	goto	l6847
  3427  001E48                     l6857:
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;sort.c: 136: else{
  3431                           ;sort.c: 137: for(int i = 0; i<2500; i++){
  3432  001E48  0E00               	movlw	0
  3433  001E4A  0100               	movlb	0	; () banked
  3434  001E4C  6FB9               	movwf	(Loading@i_1104+1)& (0+255),b
  3435  001E4E  0E00               	movlw	0
  3436  001E50  6FB8               	movwf	Loading@i_1104& (0+255),b
  3437  001E52                     l6859:
  3438                           
  3439                           ; BSR set to: 0
  3440  001E52  0100               	movlb	0	; () banked
  3441  001E54  BFB9               	btfsc	(Loading@i_1104+1)& (0+255),7,b
  3442  001E56  D008               	goto	l753
  3443  001E58  0EC4               	movlw	196
  3444  001E5A  0100               	movlb	0	; () banked
  3445  001E5C  5DB8               	subwf	Loading@i_1104& (0+255),w,b
  3446  001E5E  0E09               	movlw	9
  3447  001E60  0100               	movlb	0	; () banked
  3448  001E62  59B9               	subwfb	(Loading@i_1104+1)& (0+255),w,b
  3449  001E64  B0D8               	btfsc	status,0,c
  3450  001E66  D00D               	goto	l6869
  3451  001E68                     l753:
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;sort.c: 138: LATAbits.LATA4 = 1;
  3455  001E68  8889               	bsf	3977,4,c	;volatile
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;sort.c: 139: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3459  001E6A  0E9A               	movlw	154
  3460  001E6C                     u8147:
  3461  001E6C  2EE8               	decfsz	wreg,f,c
  3462  001E6E  D7FE               	bra	u8147
  3463  001E70  D000               	nop2	
  3464                           
  3465                           ;sort.c: 140: LATAbits.LATA4 = 0;
  3466  001E72  9889               	bcf	3977,4,c	;volatile
  3467                           
  3468                           ;sort.c: 141: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3469  001E74  0E70               	movlw	112
  3470  001E76                     u8157:
  3471  001E76  2EE8               	decfsz	wreg,f,c
  3472  001E78  D7FE               	bra	u8157
  3473  001E7A  0100               	movlb	0	; () banked
  3474  001E7C  4BB8               	infsnz	Loading@i_1104& (0+255),f,b
  3475  001E7E  2BB9               	incf	(Loading@i_1104+1)& (0+255),f,b
  3476  001E80  D7E8               	goto	l6859
  3477  001E82                     l6869:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;sort.c: 142: }
  3481                           ;sort.c: 143: }
  3482                           ;sort.c: 145: _delay((unsigned long)((200)*(32000000/4000.0)));
  3483  001E82  0E09               	movlw	9
  3484  001E84  0100               	movlb	0	; () banked
  3485  001E86  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3486  001E88  0E1E               	movlw	30
  3487  001E8A  0100               	movlb	0	; () banked
  3488  001E8C  6FB1               	movwf	??_Loading& (0+255),b
  3489  001E8E  0EE4               	movlw	228
  3490  001E90                     u8167:
  3491  001E90  2EE8               	decfsz	wreg,f,c
  3492  001E92  D7FE               	bra	u8167
  3493  001E94  2FB1               	decfsz	??_Loading& (0+255),f,b
  3494  001E96  D7FC               	bra	u8167
  3495  001E98  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3496  001E9A  D7FA               	bra	u8167
  3497  001E9C  F000               	nop	
  3498                           
  3499                           ;sort.c: 147: readIR();
  3500  001E9E  EC09  F024         	call	_readIR	;wreg free
  3501                           
  3502                           ;sort.c: 148: if(IR_signal==1){
  3503  001EA2  0100               	movlb	0	; () banked
  3504  001EA4  05DE               	decf	_IR_signal& (0+255),w,b
  3505  001EA6  0100               	movlb	0	; () banked
  3506  001EA8  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3507  001EAA  A4D8               	btfss	status,2,c
  3508  001EAC  D090               	goto	l6925
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;sort.c: 149: _delay((unsigned long)((100)*(32000000/4000.0)));
  3512  001EAE  0E05               	movlw	5
  3513  001EB0  0100               	movlb	0	; () banked
  3514  001EB2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3515  001EB4  0E0F               	movlw	15
  3516  001EB6  0100               	movlb	0	; () banked
  3517  001EB8  6FB1               	movwf	??_Loading& (0+255),b
  3518  001EBA  0EF1               	movlw	241
  3519  001EBC                     u8177:
  3520  001EBC  2EE8               	decfsz	wreg,f,c
  3521  001EBE  D7FE               	bra	u8177
  3522  001EC0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3523  001EC2  D7FC               	bra	u8177
  3524  001EC4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3525  001EC6  D7FA               	bra	u8177
  3526                           
  3527                           ;sort.c: 150: readIR();
  3528  001EC8  EC09  F024         	call	_readIR	;wreg free
  3529                           
  3530                           ;sort.c: 151: if(IR_signal==1){
  3531  001ECC  0100               	movlb	0	; () banked
  3532  001ECE  05DE               	decf	_IR_signal& (0+255),w,b
  3533  001ED0  0100               	movlb	0	; () banked
  3534  001ED2  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3535  001ED4  A4D8               	btfss	status,2,c
  3536  001ED6  D040               	goto	l6907
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;sort.c: 152: if(sensor_outputs[0]){
  3540  001ED8  0100               	movlb	0	; () banked
  3541  001EDA  51DA               	movf	_sensor_outputs& (0+255),w,b
  3542  001EDC  0100               	movlb	0	; () banked
  3543  001EDE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3544  001EE0  B4D8               	btfsc	status,2,c
  3545  001EE2  D01D               	goto	l6895
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;sort.c: 153: for(int i = 0; i<2500; i++){
  3549  001EE4  0E00               	movlw	0
  3550  001EE6  0100               	movlb	0	; () banked
  3551  001EE8  6FBB               	movwf	(Loading@i_1106+1)& (0+255),b
  3552  001EEA  0E00               	movlw	0
  3553  001EEC  6FBA               	movwf	Loading@i_1106& (0+255),b
  3554  001EEE                     l6885:
  3555                           
  3556                           ; BSR set to: 0
  3557  001EEE  0100               	movlb	0	; () banked
  3558  001EF0  BFBB               	btfsc	(Loading@i_1106+1)& (0+255),7,b
  3559  001EF2  D008               	goto	l758
  3560  001EF4  0EC4               	movlw	196
  3561  001EF6  0100               	movlb	0	; () banked
  3562  001EF8  5DBA               	subwf	Loading@i_1106& (0+255),w,b
  3563  001EFA  0E09               	movlw	9
  3564  001EFC  0100               	movlb	0	; () banked
  3565  001EFE  59BB               	subwfb	(Loading@i_1106+1)& (0+255),w,b
  3566  001F00  B0D8               	btfsc	status,0,c
  3567  001F02  D02A               	goto	l6907
  3568  001F04                     l758:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;sort.c: 154: LATAbits.LATA4 = 1;
  3572  001F04  8889               	bsf	3977,4,c	;volatile
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;sort.c: 155: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3576  001F06  0EC8               	movlw	200
  3577  001F08                     u8187:
  3578  001F08  2EE8               	decfsz	wreg,f,c
  3579  001F0A  D7FE               	bra	u8187
  3580                           
  3581                           ;sort.c: 156: LATAbits.LATA4 = 0;
  3582  001F0C  9889               	bcf	3977,4,c	;volatile
  3583                           
  3584                           ;sort.c: 157: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3585  001F0E  0E42               	movlw	66
  3586  001F10                     u8197:
  3587  001F10  2EE8               	decfsz	wreg,f,c
  3588  001F12  D7FE               	bra	u8197
  3589  001F14  D000               	nop2	
  3590  001F16  0100               	movlb	0	; () banked
  3591  001F18  4BBA               	infsnz	Loading@i_1106& (0+255),f,b
  3592  001F1A  2BBB               	incf	(Loading@i_1106+1)& (0+255),f,b
  3593  001F1C  D7E8               	goto	l6885
  3594  001F1E                     l6895:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;sort.c: 160: else{
  3598                           ;sort.c: 161: for(int i = 0; i<2500; i++){
  3599  001F1E  0E00               	movlw	0
  3600  001F20  0100               	movlb	0	; () banked
  3601  001F22  6FBD               	movwf	(Loading@i_1107+1)& (0+255),b
  3602  001F24  0E00               	movlw	0
  3603  001F26  6FBC               	movwf	Loading@i_1107& (0+255),b
  3604  001F28                     l6897:
  3605                           
  3606                           ; BSR set to: 0
  3607  001F28  0100               	movlb	0	; () banked
  3608  001F2A  BFBD               	btfsc	(Loading@i_1107+1)& (0+255),7,b
  3609  001F2C  D008               	goto	l761
  3610  001F2E  0EC4               	movlw	196
  3611  001F30  0100               	movlb	0	; () banked
  3612  001F32  5DBC               	subwf	Loading@i_1107& (0+255),w,b
  3613  001F34  0E09               	movlw	9
  3614  001F36  0100               	movlb	0	; () banked
  3615  001F38  59BD               	subwfb	(Loading@i_1107+1)& (0+255),w,b
  3616  001F3A  B0D8               	btfsc	status,0,c
  3617  001F3C  D00D               	goto	l6907
  3618  001F3E                     l761:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;sort.c: 162: LATAbits.LATA4 = 1;
  3622  001F3E  8889               	bsf	3977,4,c	;volatile
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;sort.c: 163: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3626  001F40  0E9A               	movlw	154
  3627  001F42                     u8207:
  3628  001F42  2EE8               	decfsz	wreg,f,c
  3629  001F44  D7FE               	bra	u8207
  3630  001F46  D000               	nop2	
  3631                           
  3632                           ;sort.c: 164: LATAbits.LATA4 = 0;
  3633  001F48  9889               	bcf	3977,4,c	;volatile
  3634                           
  3635                           ;sort.c: 165: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3636  001F4A  0E70               	movlw	112
  3637  001F4C                     u8217:
  3638  001F4C  2EE8               	decfsz	wreg,f,c
  3639  001F4E  D7FE               	bra	u8217
  3640  001F50  0100               	movlb	0	; () banked
  3641  001F52  4BBC               	infsnz	Loading@i_1107& (0+255),f,b
  3642  001F54  2BBD               	incf	(Loading@i_1107+1)& (0+255),f,b
  3643  001F56  D7E8               	goto	l6897
  3644  001F58                     l6907:
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;sort.c: 166: }
  3648                           ;sort.c: 167: }
  3649                           ;sort.c: 168: }
  3650                           ;sort.c: 170: _delay((unsigned long)((200)*(32000000/4000.0)));
  3651  001F58  0E09               	movlw	9
  3652  001F5A  0100               	movlb	0	; () banked
  3653  001F5C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3654  001F5E  0E1E               	movlw	30
  3655  001F60  0100               	movlb	0	; () banked
  3656  001F62  6FB1               	movwf	??_Loading& (0+255),b
  3657  001F64  0EE4               	movlw	228
  3658  001F66                     u8227:
  3659  001F66  2EE8               	decfsz	wreg,f,c
  3660  001F68  D7FE               	bra	u8227
  3661  001F6A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3662  001F6C  D7FC               	bra	u8227
  3663  001F6E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3664  001F70  D7FA               	bra	u8227
  3665  001F72  F000               	nop	
  3666                           
  3667                           ;sort.c: 172: readIR();
  3668  001F74  EC09  F024         	call	_readIR	;wreg free
  3669                           
  3670                           ;sort.c: 173: if(IR_signal==1){
  3671  001F78  0100               	movlb	0	; () banked
  3672  001F7A  05DE               	decf	_IR_signal& (0+255),w,b
  3673  001F7C  0100               	movlb	0	; () banked
  3674  001F7E  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3675  001F80  A4D8               	btfss	status,2,c
  3676  001F82  D025               	goto	l6925
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;sort.c: 174: _delay((unsigned long)((100)*(32000000/4000.0)));
  3680  001F84  0E05               	movlw	5
  3681  001F86  0100               	movlb	0	; () banked
  3682  001F88  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3683  001F8A  0E0F               	movlw	15
  3684  001F8C  0100               	movlb	0	; () banked
  3685  001F8E  6FB1               	movwf	??_Loading& (0+255),b
  3686  001F90  0EF1               	movlw	241
  3687  001F92                     u8237:
  3688  001F92  2EE8               	decfsz	wreg,f,c
  3689  001F94  D7FE               	bra	u8237
  3690  001F96  2FB1               	decfsz	??_Loading& (0+255),f,b
  3691  001F98  D7FC               	bra	u8237
  3692  001F9A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3693  001F9C  D7FA               	bra	u8237
  3694                           
  3695                           ;sort.c: 175: readIR();
  3696  001F9E  EC09  F024         	call	_readIR	;wreg free
  3697                           
  3698                           ;sort.c: 176: if(IR_signal==1){
  3699  001FA2  0100               	movlb	0	; () banked
  3700  001FA4  05DE               	decf	_IR_signal& (0+255),w,b
  3701  001FA6  0100               	movlb	0	; () banked
  3702  001FA8  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3703  001FAA  A4D8               	btfss	status,2,c
  3704  001FAC  D010               	goto	l6925
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;sort.c: 177: LATAbits.LATA4 = 1;
  3708  001FAE  8889               	bsf	3977,4,c	;volatile
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;sort.c: 178: _delay((unsigned long)((250)*(32000000/4000.0)));
  3712  001FB0  0E0B               	movlw	11
  3713  001FB2  0100               	movlb	0	; () banked
  3714  001FB4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3715  001FB6  0E26               	movlw	38
  3716  001FB8  0100               	movlb	0	; () banked
  3717  001FBA  6FB1               	movwf	??_Loading& (0+255),b
  3718  001FBC  0E5D               	movlw	93
  3719  001FBE                     u8247:
  3720  001FBE  2EE8               	decfsz	wreg,f,c
  3721  001FC0  D7FE               	bra	u8247
  3722  001FC2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3723  001FC4  D7FC               	bra	u8247
  3724  001FC6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3725  001FC8  D7FA               	bra	u8247
  3726  001FCA  D000               	nop2	
  3727                           
  3728                           ;sort.c: 179: LATAbits.LATA4 = 0;
  3729  001FCC  9889               	bcf	3977,4,c	;volatile
  3730  001FCE                     l6925:
  3731                           
  3732                           ;sort.c: 180: }
  3733                           ;sort.c: 181: }
  3734                           ;sort.c: 182: }
  3735                           ;sort.c: 183: f_can_coming_to_ID = 1;
  3736  001FCE  0E00               	movlw	0
  3737  001FD0  6E68               	movwf	_f_can_coming_to_ID+1,c
  3738  001FD2  0E01               	movlw	1
  3739  001FD4  6E67               	movwf	_f_can_coming_to_ID,c
  3740  001FD6  0012               	return	
  3741  001FD8                     __end_of_Loading:
  3742                           	opt stack 0
  3743                           tblptru	equ	0xFF8
  3744                           tblptrh	equ	0xFF7
  3745                           tblptrl	equ	0xFF6
  3746                           tablat	equ	0xFF5
  3747                           prodh	equ	0xFF4
  3748                           prodl	equ	0xFF3
  3749                           postinc0	equ	0xFEE
  3750                           wreg	equ	0xFE8
  3751                           postdec1	equ	0xFE5
  3752                           fsr1l	equ	0xFE1
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function _initSortTimer *****************
  3756 ;; Defined at:
  3757 ;;		line 346 in file "sort.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;		None
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  i               2    8[BANK0 ] int 
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  1    wreg      void 
  3764 ;; Registers used:
  3765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;Total ram usage:        5 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:   10
  3778 ;; This function calls:
  3779 ;;		_getRTC
  3780 ;; This function is called by:
  3781 ;;		_Loading
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text4
  3786  003F28                     __ptext4:
  3787                           	opt stack 0
  3788  003F28                     _initSortTimer:
  3789                           	opt stack 18
  3790                           
  3791                           ;sort.c: 348: getRTC();
  3792                           
  3793                           ;incstack = 0
  3794  003F28  EC80  F020         	call	_getRTC	;wreg free
  3795                           
  3796                           ;sort.c: 349: for(int i = 0; i < 7; i++){
  3797  003F2C  0E00               	movlw	0
  3798  003F2E  0100               	movlb	0	; () banked
  3799  003F30  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3800  003F32  0E00               	movlw	0
  3801  003F34  6F88               	movwf	initSortTimer@i& (0+255),b
  3802  003F36                     l6387:
  3803                           
  3804                           ; BSR set to: 0
  3805  003F36  0100               	movlb	0	; () banked
  3806  003F38  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3807  003F3A  D008               	goto	l6391
  3808  003F3C  0100               	movlb	0	; () banked
  3809  003F3E  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3810  003F40  E140               	bnz	l6397
  3811  003F42  0E07               	movlw	7
  3812  003F44  0100               	movlb	0	; () banked
  3813  003F46  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3814  003F48  B0D8               	btfsc	status,0,c
  3815  003F4A  D03B               	goto	l6397
  3816  003F4C                     l6391:
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;sort.c: 350: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3820  003F4C  0E24               	movlw	low _time
  3821  003F4E  0100               	movlb	0	; () banked
  3822  003F50  2588               	addwf	initSortTimer@i& (0+255),w,b
  3823  003F52  6ED9               	movwf	fsr2l,c
  3824  003F54  0E01               	movlw	high _time
  3825  003F56  0100               	movlb	0	; () banked
  3826  003F58  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3827  003F5A  6EDA               	movwf	fsr2h,c
  3828  003F5C  50DF               	movf	indf2,w,c
  3829  003F5E  0100               	movlb	0	; () banked
  3830  003F60  6F85               	movwf	??_initSortTimer& (0+255),b
  3831  003F62  0100               	movlb	0	; () banked
  3832  003F64  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3833  003F66  0E0F               	movlw	15
  3834  003F68  1785               	andwf	??_initSortTimer& (0+255),f,b
  3835  003F6A  0E0F               	movlw	15
  3836  003F6C  0100               	movlb	0	; () banked
  3837  003F6E  1785               	andwf	??_initSortTimer& (0+255),f,b
  3838  003F70  0100               	movlb	0	; () banked
  3839  003F72  5185               	movf	??_initSortTimer& (0+255),w,b
  3840  003F74  0D0A               	mullw	10
  3841  003F76  0E24               	movlw	low _time
  3842  003F78  0100               	movlb	0	; () banked
  3843  003F7A  2588               	addwf	initSortTimer@i& (0+255),w,b
  3844  003F7C  6ED9               	movwf	fsr2l,c
  3845  003F7E  0E01               	movlw	high _time
  3846  003F80  0100               	movlb	0	; () banked
  3847  003F82  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3848  003F84  6EDA               	movwf	fsr2h,c
  3849  003F86  50DF               	movf	indf2,w,c
  3850  003F88  0B0F               	andlw	15
  3851  003F8A  0100               	movlb	0	; () banked
  3852  003F8C  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3853  003F8E  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3854  003F90  50F3               	movf	prodl,w,c
  3855  003F92  0100               	movlb	0	; () banked
  3856  003F94  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3857  003F96  50F4               	movf	prodh,w,c
  3858  003F98  0100               	movlb	0	; () banked
  3859  003F9A  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3860  003F9C  90D8               	bcf	status,0,c
  3861  003F9E  0100               	movlb	0	; () banked
  3862  003FA0  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3863  003FA2  6ED9               	movwf	fsr2l,c
  3864  003FA4  0100               	movlb	0	; () banked
  3865  003FA6  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3866  003FA8  6EDA               	movwf	fsr2h,c
  3867  003FAA  0E0E               	movlw	low _startTime
  3868  003FAC  26D9               	addwf	fsr2l,f,c
  3869  003FAE  0E01               	movlw	high _startTime
  3870  003FB0  22DA               	addwfc	fsr2h,f,c
  3871  003FB2  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3872  003FB6  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3873                           
  3874                           ; BSR set to: 0
  3875  003FBA  0100               	movlb	0	; () banked
  3876  003FBC  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3877  003FBE  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3878  003FC0  D7BA               	goto	l6387
  3879  003FC2                     l6397:
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;sort.c: 351: }
  3883                           ;sort.c: 353: T0CON = 0b00010111;
  3884  003FC2  0E17               	movlw	23
  3885  003FC4  6ED5               	movwf	4053,c	;volatile
  3886                           
  3887                           ;sort.c: 362: TMR0H = 0b10000101;
  3888  003FC6  0E85               	movlw	133
  3889  003FC8  6ED7               	movwf	4055,c	;volatile
  3890                           
  3891                           ;sort.c: 363: TMR0L = 0b11101110;
  3892  003FCA  0EEE               	movlw	238
  3893  003FCC  6ED6               	movwf	4054,c	;volatile
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;sort.c: 364: TMR0ON = 1;
  3897  003FCE  8ED5               	bsf	4053,7,c	;volatile
  3898                           
  3899                           ; BSR set to: 0
  3900  003FD0  0012               	return		;funcret
  3901  003FD2                     __end_of_initSortTimer:
  3902                           	opt stack 0
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           postinc0	equ	0xFEE
  3910                           wreg	equ	0xFE8
  3911                           postdec1	equ	0xFE5
  3912                           fsr1l	equ	0xFE1
  3913                           indf2	equ	0xFDF
  3914                           postinc2	equ	0xFDE
  3915                           postdec2	equ	0xFDD
  3916                           fsr2h	equ	0xFDA
  3917                           fsr2l	equ	0xFD9
  3918                           status	equ	0xFD8
  3919                           
  3920 ;; *************** function _initGlobalVars *****************
  3921 ;; Defined at:
  3922 ;;		line 323 in file "sort.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;		None
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;		None
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      void 
  3929 ;; Registers used:
  3930 ;;		wreg, status,2
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;Total ram usage:        0 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    7
  3943 ;; This function calls:
  3944 ;;		Nothing
  3945 ;; This function is called by:
  3946 ;;		_Loading
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           	psect	text5
  3951  00428E                     __ptext5:
  3952                           	opt stack 0
  3953  00428E                     _initGlobalVars:
  3954                           	opt stack 21
  3955                           
  3956                           ;sort.c: 325: first = 0;
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;incstack = 0
  3960  00428E  0E00               	movlw	0
  3961  004290  6E6E               	movwf	_first+1,c
  3962  004292  0E00               	movlw	0
  3963  004294  6E6D               	movwf	_first,c
  3964                           
  3965                           ;sort.c: 328: f_loadingNewCan = 0;
  3966  004296  0E00               	movlw	0
  3967  004298  0100               	movlb	0	; () banked
  3968  00429A  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3969  00429C  0E00               	movlw	0
  3970  00429E  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3971                           
  3972                           ;sort.c: 329: f_lastCan = 0;
  3973  0042A0  0E00               	movlw	0
  3974  0042A2  0100               	movlb	0	; () banked
  3975  0042A4  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3976  0042A6  0E00               	movlw	0
  3977  0042A8  6FE8               	movwf	_f_lastCan& (0+255),b
  3978                           
  3979                           ;sort.c: 330: f_ID_receive = 1;
  3980  0042AA  0E00               	movlw	0
  3981  0042AC  6E66               	movwf	_f_ID_receive+1,c
  3982  0042AE  0E01               	movlw	1
  3983  0042B0  6E65               	movwf	_f_ID_receive,c
  3984                           
  3985                           ;sort.c: 331: f_can_coming_to_ID = 0;
  3986  0042B2  0E00               	movlw	0
  3987  0042B4  6E68               	movwf	_f_can_coming_to_ID+1,c
  3988  0042B6  0E00               	movlw	0
  3989  0042B8  6E67               	movwf	_f_can_coming_to_ID,c
  3990                           
  3991                           ;sort.c: 332: f_can_coming_to_distribution = 0;
  3992  0042BA  0E00               	movlw	0
  3993  0042BC  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  3994  0042BE  0E00               	movlw	0
  3995  0042C0  6E69               	movwf	_f_can_coming_to_distribution,c
  3996                           
  3997                           ;sort.c: 333: f_can_distributed = 0;
  3998  0042C2  0E00               	movlw	0
  3999  0042C4  0101               	movlb	1	; () banked
  4000  0042C6  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  4001  0042C8  0E00               	movlw	0
  4002  0042CA  6F2F               	movwf	_f_can_distributed& (0+255),b
  4003                           
  4004                           ;sort.c: 334: f_most_recent_sort_time = 0;
  4005  0042CC  0E00               	movlw	0
  4006  0042CE  6E6C               	movwf	_f_most_recent_sort_time+1,c
  4007  0042D0  0E00               	movlw	0
  4008  0042D2  6E6B               	movwf	_f_most_recent_sort_time,c
  4009                           
  4010                           ;sort.c: 337: count_total = 0;
  4011  0042D4  0E00               	movlw	0
  4012  0042D6  0100               	movlb	0	; () banked
  4013  0042D8  6FFF               	movwf	(_count_total+1)& (0+255),b
  4014  0042DA  0E00               	movlw	0
  4015  0042DC  6FFE               	movwf	_count_total& (0+255),b
  4016                           
  4017                           ;sort.c: 338: count_pop_no_tab = 0;
  4018  0042DE  0E00               	movlw	0
  4019  0042E0  6E5C               	movwf	_count_pop_no_tab+1,c
  4020  0042E2  0E00               	movlw	0
  4021  0042E4  6E5B               	movwf	_count_pop_no_tab,c
  4022                           
  4023                           ;sort.c: 339: count_pop_w_tab = 0;
  4024  0042E6  0E00               	movlw	0
  4025  0042E8  6E5E               	movwf	_count_pop_w_tab+1,c
  4026  0042EA  0E00               	movlw	0
  4027  0042EC  6E5D               	movwf	_count_pop_w_tab,c
  4028                           
  4029                           ;sort.c: 340: count_can_w_lab = 0;
  4030  0042EE  0E00               	movlw	0
  4031  0042F0  0101               	movlb	1	; () banked
  4032  0042F2  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  4033  0042F4  0E00               	movlw	0
  4034  0042F6  6F2D               	movwf	_count_can_w_lab& (0+255),b
  4035                           
  4036                           ;sort.c: 341: count_can_no_lab = 0;
  4037  0042F8  0E00               	movlw	0
  4038  0042FA  0101               	movlb	1	; () banked
  4039  0042FC  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  4040  0042FE  0E00               	movlw	0
  4041  004300  6F2B               	movwf	_count_can_no_lab& (0+255),b
  4042                           
  4043                           ;sort.c: 344: most_recent_sort_time = 999;
  4044  004302  0E03               	movlw	3
  4045  004304  0101               	movlb	1	; () banked
  4046  004306  6F34               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4047  004308  0EE7               	movlw	231
  4048  00430A  6F33               	movwf	_most_recent_sort_time& (0+255),b
  4049                           
  4050                           ; BSR set to: 1
  4051  00430C  0012               	return		;funcret
  4052  00430E                     __end_of_initGlobalVars:
  4053                           	opt stack 0
  4054                           tblptru	equ	0xFF8
  4055                           tblptrh	equ	0xFF7
  4056                           tblptrl	equ	0xFF6
  4057                           tablat	equ	0xFF5
  4058                           prodh	equ	0xFF4
  4059                           prodl	equ	0xFF3
  4060                           postinc0	equ	0xFEE
  4061                           wreg	equ	0xFE8
  4062                           postdec1	equ	0xFE5
  4063                           fsr1l	equ	0xFE1
  4064                           indf2	equ	0xFDF
  4065                           postinc2	equ	0xFDE
  4066                           postdec2	equ	0xFDD
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _getMAG *****************
  4072 ;; Defined at:
  4073 ;;		line 425 in file "sort.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;Total ram usage:        2 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    9
  4094 ;; This function calls:
  4095 ;;		_readMAG
  4096 ;; This function is called by:
  4097 ;;		_Loading
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           	psect	text6
  4102  004A0E                     __ptext6:
  4103                           	opt stack 0
  4104  004A0E                     _getMAG:
  4105                           	opt stack 19
  4106                           
  4107                           ;sort.c: 426: readMAG();
  4108                           
  4109                           ; BSR set to: 1
  4110                           ;incstack = 0
  4111  004A0E  EC2F  F024         	call	_readMAG	;wreg free
  4112                           
  4113                           ;sort.c: 428: if(MAG_signal==1){
  4114  004A12  0100               	movlb	0	; () banked
  4115  004A14  05E0               	decf	_MAG_signal& (0+255),w,b
  4116  004A16  0100               	movlb	0	; () banked
  4117  004A18  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4118  004A1A  A4D8               	btfss	status,2,c
  4119  004A1C  0012               	return	
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;sort.c: 429: _delay((unsigned long)((500)*(32000000/4000.0)));
  4123  004A1E  0E15               	movlw	21
  4124  004A20  0100               	movlb	0	; () banked
  4125  004A22  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4126  004A24  0E4B               	movlw	75
  4127  004A26  0100               	movlb	0	; () banked
  4128  004A28  6F86               	movwf	??_getMAG& (0+255),b
  4129  004A2A  0EBE               	movlw	190
  4130  004A2C                     u8257:
  4131  004A2C  2EE8               	decfsz	wreg,f,c
  4132  004A2E  D7FE               	bra	u8257
  4133  004A30  2F86               	decfsz	??_getMAG& (0+255),f,b
  4134  004A32  D7FC               	bra	u8257
  4135  004A34  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4136  004A36  D7FA               	bra	u8257
  4137  004A38  F000               	nop	
  4138                           
  4139                           ;sort.c: 430: readMAG();
  4140  004A3A  EC2F  F024         	call	_readMAG	;wreg free
  4141  004A3E  0012               	return	
  4142  004A40                     __end_of_getMAG:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           postinc0	equ	0xFEE
  4151                           wreg	equ	0xFE8
  4152                           postdec1	equ	0xFE5
  4153                           fsr1l	equ	0xFE1
  4154                           indf2	equ	0xFDF
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _getIR *****************
  4162 ;; Defined at:
  4163 ;;		line 409 in file "sort.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  i               2    7[BANK0 ] int 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;Total ram usage:        3 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    9
  4184 ;; This function calls:
  4185 ;;		_readIR
  4186 ;; This function is called by:
  4187 ;;		_Loading
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text7
  4192  0043FC                     __ptext7:
  4193                           	opt stack 0
  4194  0043FC                     _getIR:
  4195                           	opt stack 19
  4196                           
  4197                           ;sort.c: 410: readIR();
  4198                           
  4199                           ;incstack = 0
  4200  0043FC  EC09  F024         	call	_readIR	;wreg free
  4201                           
  4202                           ;sort.c: 411: for(int i = 0; i < 150; i++){
  4203  004400  0E00               	movlw	0
  4204  004402  0100               	movlb	0	; () banked
  4205  004404  6F88               	movwf	(getIR@i+1)& (0+255),b
  4206  004406  0E00               	movlw	0
  4207  004408  6F87               	movwf	getIR@i& (0+255),b
  4208  00440A                     l6479:
  4209                           
  4210                           ; BSR set to: 0
  4211  00440A  0100               	movlb	0	; () banked
  4212  00440C  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4213  00440E  D008               	goto	l6483
  4214  004410  0100               	movlb	0	; () banked
  4215  004412  5188               	movf	(getIR@i+1)& (0+255),w,b
  4216  004414  E11A               	bnz	l6495
  4217  004416  0E96               	movlw	150
  4218  004418  0100               	movlb	0	; () banked
  4219  00441A  5D87               	subwf	getIR@i& (0+255),w,b
  4220  00441C  B0D8               	btfsc	status,0,c
  4221  00441E  D015               	goto	l6495
  4222  004420                     l6483:
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;sort.c: 412: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4226  004420  0E06               	movlw	6
  4227  004422  0100               	movlb	0	; () banked
  4228  004424  6F86               	movwf	??_getIR& (0+255),b
  4229  004426  0E30               	movlw	48
  4230  004428                     u8267:
  4231  004428  2EE8               	decfsz	wreg,f,c
  4232  00442A  D7FE               	bra	u8267
  4233  00442C  2F86               	decfsz	??_getIR& (0+255),f,b
  4234  00442E  D7FC               	bra	u8267
  4235  004430  F000               	nop	
  4236                           
  4237                           ;sort.c: 413: readIR();
  4238  004432  EC09  F024         	call	_readIR	;wreg free
  4239                           
  4240                           ;sort.c: 414: if(!IR_signal){
  4241  004436  0100               	movlb	0	; () banked
  4242  004438  51DE               	movf	_IR_signal& (0+255),w,b
  4243  00443A  0100               	movlb	0	; () banked
  4244  00443C  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4245  00443E  B4D8               	btfsc	status,2,c
  4246  004440  D004               	goto	l6495
  4247                           
  4248                           ; BSR set to: 0
  4249                           
  4250                           ; BSR set to: 0
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;sort.c: 415: break;
  4254  004442  0100               	movlb	0	; () banked
  4255  004444  4B87               	infsnz	getIR@i& (0+255),f,b
  4256  004446  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4257  004448  D7E0               	goto	l6479
  4258  00444A                     l6495:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;sort.c: 416: }
  4262                           ;sort.c: 417: }
  4263                           ;sort.c: 418: if(IR_signal==1){
  4264  00444A  0100               	movlb	0	; () banked
  4265  00444C  05DE               	decf	_IR_signal& (0+255),w,b
  4266  00444E  0100               	movlb	0	; () banked
  4267  004450  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4268  004452  A4D8               	btfss	status,2,c
  4269  004454  D006               	goto	l6499
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;sort.c: 419: f_loadingNewCan = 1;
  4273  004456  0E00               	movlw	0
  4274  004458  0100               	movlb	0	; () banked
  4275  00445A  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4276  00445C  0E01               	movlw	1
  4277  00445E  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4278                           
  4279                           ;sort.c: 420: }
  4280  004460  0012               	return	
  4281  004462                     l6499:
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;sort.c: 421: else{
  4285                           ;sort.c: 422: f_loadingNewCan = 0;
  4286  004462  0E00               	movlw	0
  4287  004464  0100               	movlb	0	; () banked
  4288  004466  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4289  004468  0E00               	movlw	0
  4290  00446A  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4291  00446C  0012               	return	
  4292  00446E                     __end_of_getIR:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1l	equ	0xFE1
  4304                           indf2	equ	0xFDF
  4305                           postinc2	equ	0xFDE
  4306                           postdec2	equ	0xFDD
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _readIR *****************
  4312 ;; Defined at:
  4313 ;;		line 23 in file "ADCFunctionality.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  res             2    4[BANK0 ] int 
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, status,2, status,0, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;Total ram usage:        4 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    8
  4334 ;; This function calls:
  4335 ;;		_readADC
  4336 ;; This function is called by:
  4337 ;;		_Loading
  4338 ;;		_getIR
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text8
  4343  004812                     __ptext8:
  4344                           	opt stack 0
  4345  004812                     _readIR:
  4346                           	opt stack 20
  4347                           
  4348                           ;ADCFunctionality.c: 24: readADC(0);
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;incstack = 0
  4352  004812  0E00               	movlw	0
  4353  004814  EC6C  F026         	call	_readADC
  4354                           
  4355                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4356  004818  50C3               	movf	4035,w,c	;volatile
  4357  00481A  CFC4 F082          	movff	4036,??_readIR	;volatile
  4358  00481E  0100               	movlb	0	; () banked
  4359  004820  6B83               	clrf	(??_readIR+1)& (0+255),b
  4360  004822  C082  F083         	movff	??_readIR,??_readIR+1
  4361  004826  0100               	movlb	0	; () banked
  4362  004828  6B82               	clrf	??_readIR& (0+255),b
  4363  00482A  0100               	movlb	0	; () banked
  4364  00482C  1182               	iorwf	??_readIR& (0+255),w,b
  4365  00482E  0100               	movlb	0	; () banked
  4366  004830  6F84               	movwf	readIR@res& (0+255),b
  4367  004832  0100               	movlb	0	; () banked
  4368  004834  5183               	movf	(??_readIR+1)& (0+255),w,b
  4369  004836  0100               	movlb	0	; () banked
  4370  004838  6F85               	movwf	(readIR@res+1)& (0+255),b
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4374  00483A  0100               	movlb	0	; () banked
  4375  00483C  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4376  00483E  D00A               	goto	u4300
  4377  004840  0E21               	movlw	33
  4378  004842  0100               	movlb	0	; () banked
  4379  004844  5D84               	subwf	readIR@res& (0+255),w,b
  4380  004846  0E03               	movlw	3
  4381  004848  0100               	movlb	0	; () banked
  4382  00484A  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4383  00484C  A0D8               	btfss	status,0,c
  4384  00484E  D002               	goto	u4300
  4385  004850  0E01               	movlw	1
  4386  004852  D001               	goto	u4310
  4387  004854                     u4300:
  4388  004854  0E00               	movlw	0
  4389  004856                     u4310:
  4390  004856  0100               	movlb	0	; () banked
  4391  004858  6FDE               	movwf	_IR_signal& (0+255),b
  4392  00485A  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4393                           
  4394                           ; BSR set to: 0
  4395  00485C  0012               	return		;funcret
  4396  00485E                     __end_of_readIR:
  4397                           	opt stack 0
  4398                           tblptru	equ	0xFF8
  4399                           tblptrh	equ	0xFF7
  4400                           tblptrl	equ	0xFF6
  4401                           tablat	equ	0xFF5
  4402                           prodh	equ	0xFF4
  4403                           prodl	equ	0xFF3
  4404                           postinc0	equ	0xFEE
  4405                           wreg	equ	0xFE8
  4406                           postdec1	equ	0xFE5
  4407                           fsr1l	equ	0xFE1
  4408                           indf2	equ	0xFDF
  4409                           postinc2	equ	0xFDE
  4410                           postdec2	equ	0xFDD
  4411                           fsr2h	equ	0xFDA
  4412                           fsr2l	equ	0xFD9
  4413                           status	equ	0xFD8
  4414                           
  4415 ;; *************** function _ID *****************
  4416 ;; Defined at:
  4417 ;;		line 187 in file "sort.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;		None
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  i               2    6[BANK0 ] int 
  4422 ;;  i               2    4[BANK0 ] int 
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg, status,2, status,0, cstack
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;Total ram usage:        6 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:    8
  4439 ;; This function calls:
  4440 ;;		_delay_ms
  4441 ;; This function is called by:
  4442 ;;		_sort
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text9
  4447  0032F2                     __ptext9:
  4448                           	opt stack 0
  4449  0032F2                     _ID:
  4450                           	opt stack 21
  4451                           
  4452                           ;sort.c: 188: if(f_can_coming_to_ID){
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;incstack = 0
  4456  0032F2  5067               	movf	_f_can_coming_to_ID,w,c
  4457  0032F4  1068               	iorwf	_f_can_coming_to_ID+1,w,c
  4458  0032F6  B4D8               	btfsc	status,2,c
  4459  0032F8  0012               	return	
  4460                           
  4461                           ;sort.c: 190: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4462  0032FA  0E3D               	movlw	61
  4463  0032FC  0100               	movlb	0	; () banked
  4464  0032FE  6F83               	movwf	(??_ID+1)& (0+255),b
  4465  003300  0EE1               	movlw	225
  4466  003302  0100               	movlb	0	; () banked
  4467  003304  6F82               	movwf	??_ID& (0+255),b
  4468  003306  0E3F               	movlw	63
  4469  003308                     u8277:
  4470  003308  2EE8               	decfsz	wreg,f,c
  4471  00330A  D7FE               	bra	u8277
  4472  00330C  2F82               	decfsz	??_ID& (0+255),f,b
  4473  00330E  D7FC               	bra	u8277
  4474  003310  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4475  003312  D7FA               	bra	u8277
  4476  003314  D000               	nop2	
  4477                           
  4478                           ;sort.c: 192: LATAbits.LATA3 = 1;
  4479  003316  8689               	bsf	3977,3,c	;volatile
  4480                           
  4481                           ;sort.c: 193: _delay((unsigned long)((600)*(32000000/4000.0)));
  4482  003318  0E19               	movlw	25
  4483  00331A  0100               	movlb	0	; () banked
  4484  00331C  6F83               	movwf	(??_ID+1)& (0+255),b
  4485  00331E  0E5A               	movlw	90
  4486  003320  0100               	movlb	0	; () banked
  4487  003322  6F82               	movwf	??_ID& (0+255),b
  4488  003324  0EB1               	movlw	177
  4489  003326                     u8287:
  4490  003326  2EE8               	decfsz	wreg,f,c
  4491  003328  D7FE               	bra	u8287
  4492  00332A  2F82               	decfsz	??_ID& (0+255),f,b
  4493  00332C  D7FC               	bra	u8287
  4494  00332E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4495  003330  D7FA               	bra	u8287
  4496  003332  D000               	nop2	
  4497                           
  4498                           ;sort.c: 194: sensor_outputs[1] = PORTAbits.RA2;
  4499  003334  A480               	btfss	3968,2,c	;volatile
  4500  003336  D004               	goto	u5580
  4501  003338  0100               	movlb	0	; () banked
  4502  00333A  6B82               	clrf	??_ID& (0+255),b
  4503  00333C  2B82               	incf	??_ID& (0+255),f,b
  4504  00333E  D002               	goto	u5588
  4505  003340                     u5580:
  4506  003340  0100               	movlb	0	; () banked
  4507  003342  6B82               	clrf	??_ID& (0+255),b
  4508  003344                     u5588:
  4509  003344  0100               	movlb	0	; () banked
  4510  003346  5182               	movf	??_ID& (0+255),w,b
  4511  003348  0100               	movlb	0	; () banked
  4512  00334A  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4513  00334C  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;sort.c: 202: if(!sensor_outputs[0]){
  4517  00334E  0100               	movlb	0	; () banked
  4518  003350  51DA               	movf	_sensor_outputs& (0+255),w,b
  4519  003352  0100               	movlb	0	; () banked
  4520  003354  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4521  003356  A4D8               	btfss	status,2,c
  4522  003358  D014               	goto	l6947
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;sort.c: 203: if(!sensor_outputs[1]){
  4526  00335A  0100               	movlb	0	; () banked
  4527  00335C  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4528  00335E  0100               	movlb	0	; () banked
  4529  003360  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4530  003362  A4D8               	btfss	status,2,c
  4531  003364  D007               	goto	l6943
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;sort.c: 204: count_pop_no_tab++;
  4535  003366  4A5B               	infsnz	_count_pop_no_tab,f,c
  4536  003368  2A5C               	incf	_count_pop_no_tab+1,f,c
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;sort.c: 205: cur_can = 0;
  4540  00336A  0E00               	movlw	0
  4541  00336C  0100               	movlb	0	; () banked
  4542  00336E  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4543  003370  0E00               	movlw	0
  4544  003372  D006               	goto	L2
  4545  003374                     l6943:
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;sort.c: 207: else{
  4549                           ;sort.c: 208: count_pop_w_tab++;
  4550  003374  4A5D               	infsnz	_count_pop_w_tab,f,c
  4551  003376  2A5E               	incf	_count_pop_w_tab+1,f,c
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;sort.c: 209: cur_can = 1;
  4555  003378  0E00               	movlw	0
  4556  00337A  0100               	movlb	0	; () banked
  4557  00337C  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4558  00337E  0E01               	movlw	1
  4559  003380                     L2:
  4560  003380  6FE4               	movwf	_cur_can& (0+255),b
  4561  003382                     l6947:
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;sort.c: 210: }
  4565                           ;sort.c: 211: }
  4566                           ;sort.c: 212: if(sensor_outputs[0]){
  4567  003382  0100               	movlb	0	; () banked
  4568  003384  51DA               	movf	_sensor_outputs& (0+255),w,b
  4569  003386  0100               	movlb	0	; () banked
  4570  003388  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4571  00338A  B4D8               	btfsc	status,2,c
  4572  00338C  D016               	goto	l6959
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;sort.c: 213: if(!sensor_outputs[1]){
  4576  00338E  0100               	movlb	0	; () banked
  4577  003390  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4578  003392  0100               	movlb	0	; () banked
  4579  003394  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4580  003396  A4D8               	btfss	status,2,c
  4581  003398  D008               	goto	l6955
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;sort.c: 214: count_can_w_lab++;
  4585  00339A  0101               	movlb	1	; () banked
  4586  00339C  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4587  00339E  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4588                           
  4589                           ; BSR set to: 1
  4590                           ;sort.c: 215: cur_can = 2;
  4591  0033A0  0E00               	movlw	0
  4592  0033A2  0100               	movlb	0	; () banked
  4593  0033A4  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4594  0033A6  0E02               	movlw	2
  4595  0033A8  D007               	goto	L3
  4596  0033AA                     l6955:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;sort.c: 217: else{
  4600                           ;sort.c: 218: count_can_no_lab++;
  4601  0033AA  0101               	movlb	1	; () banked
  4602  0033AC  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4603  0033AE  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4604                           
  4605                           ; BSR set to: 1
  4606                           ;sort.c: 219: cur_can = 3;
  4607  0033B0  0E00               	movlw	0
  4608  0033B2  0100               	movlb	0	; () banked
  4609  0033B4  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4610  0033B6  0E03               	movlw	3
  4611  0033B8                     L3:
  4612  0033B8  6FE4               	movwf	_cur_can& (0+255),b
  4613  0033BA                     l6959:
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;sort.c: 220: }
  4617                           ;sort.c: 221: }
  4618                           ;sort.c: 222: LATAbits.LATA3 = 0;
  4619  0033BA  9689               	bcf	3977,3,c	;volatile
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;sort.c: 223: _delay((unsigned long)((200)*(32000000/4000.0)));
  4623  0033BC  0E09               	movlw	9
  4624  0033BE  0100               	movlb	0	; () banked
  4625  0033C0  6F83               	movwf	(??_ID+1)& (0+255),b
  4626  0033C2  0E1E               	movlw	30
  4627  0033C4  0100               	movlb	0	; () banked
  4628  0033C6  6F82               	movwf	??_ID& (0+255),b
  4629  0033C8  0EE4               	movlw	228
  4630  0033CA                     u8297:
  4631  0033CA  2EE8               	decfsz	wreg,f,c
  4632  0033CC  D7FE               	bra	u8297
  4633  0033CE  2F82               	decfsz	??_ID& (0+255),f,b
  4634  0033D0  D7FC               	bra	u8297
  4635  0033D2  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4636  0033D4  D7FA               	bra	u8297
  4637  0033D6  F000               	nop	
  4638                           
  4639                           ;sort.c: 224: LATAbits.LATA3 = 1;
  4640  0033D8  8689               	bsf	3977,3,c	;volatile
  4641                           
  4642                           ;sort.c: 227: for(int i=0;i<10000;i++)
  4643  0033DA  0E00               	movlw	0
  4644  0033DC  0100               	movlb	0	; () banked
  4645  0033DE  6F85               	movwf	(ID@i+1)& (0+255),b
  4646  0033E0  0E00               	movlw	0
  4647  0033E2  6F84               	movwf	ID@i& (0+255),b
  4648  0033E4  0100               	movlb	0	; () banked
  4649  0033E6  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  4650  0033E8  D008               	goto	l774
  4651  0033EA  0E10               	movlw	16
  4652  0033EC  0100               	movlb	0	; () banked
  4653  0033EE  5D84               	subwf	ID@i& (0+255),w,b
  4654  0033F0  0E27               	movlw	39
  4655  0033F2  0100               	movlb	0	; () banked
  4656  0033F4  5985               	subwfb	(ID@i+1)& (0+255),w,b
  4657  0033F6  B0D8               	btfsc	status,0,c
  4658  0033F8  D00D               	goto	l775
  4659  0033FA                     l774:
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;sort.c: 228: {
  4663                           ;sort.c: 229: LATCbits.LATC0 = 1;
  4664  0033FA  808B               	bsf	3979,0,c	;volatile
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;sort.c: 230: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4668  0033FC  0E1A               	movlw	26
  4669  0033FE                     u8307:
  4670  0033FE  2EE8               	decfsz	wreg,f,c
  4671  003400  D7FE               	bra	u8307
  4672  003402  D000               	nop2	
  4673                           
  4674                           ;sort.c: 231: LATCbits.LATC0 = 0;
  4675  003404  908B               	bcf	3979,0,c	;volatile
  4676                           
  4677                           ;sort.c: 232: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4678  003406  0EF0               	movlw	240
  4679  003408                     u8317:
  4680  003408  2EE8               	decfsz	wreg,f,c
  4681  00340A  D7FE               	bra	u8317
  4682  00340C  0100               	movlb	0	; () banked
  4683  00340E  4B84               	infsnz	ID@i& (0+255),f,b
  4684  003410  2B85               	incf	(ID@i+1)& (0+255),f,b
  4685  003412  D7E8               	goto	L4
  4686  003414                     l775:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;sort.c: 233: }
  4690                           ;sort.c: 234: LATCbits.LATC0 = 0;
  4691  003414  908B               	bcf	3979,0,c	;volatile
  4692                           
  4693                           ;sort.c: 236: LATAbits.LATA3 = 0;
  4694  003416  9689               	bcf	3977,3,c	;volatile
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;sort.c: 240: f_can_coming_to_distribution = 1;
  4698  003418  0E00               	movlw	0
  4699  00341A  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  4700  00341C  0E01               	movlw	1
  4701  00341E  6E69               	movwf	_f_can_coming_to_distribution,c
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;sort.c: 241: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4705  003420  0E3D               	movlw	61
  4706  003422  0100               	movlb	0	; () banked
  4707  003424  6F83               	movwf	(??_ID+1)& (0+255),b
  4708  003426  0EE1               	movlw	225
  4709  003428  0100               	movlb	0	; () banked
  4710  00342A  6F82               	movwf	??_ID& (0+255),b
  4711  00342C  0E3F               	movlw	63
  4712  00342E                     u8327:
  4713  00342E  2EE8               	decfsz	wreg,f,c
  4714  003430  D7FE               	bra	u8327
  4715  003432  2F82               	decfsz	??_ID& (0+255),f,b
  4716  003434  D7FC               	bra	u8327
  4717  003436  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4718  003438  D7FA               	bra	u8327
  4719  00343A  D000               	nop2	
  4720                           
  4721                           ;sort.c: 242: LATCbits.LATC0 = 1;
  4722  00343C  808B               	bsf	3979,0,c	;volatile
  4723                           
  4724                           ;sort.c: 245: if(!f_lastCan){
  4725  00343E  0100               	movlb	0	; () banked
  4726  003440  51E8               	movf	_f_lastCan& (0+255),w,b
  4727  003442  0100               	movlb	0	; () banked
  4728  003444  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  4729  003446  A4D8               	btfss	status,2,c
  4730  003448  D032               	goto	l6997
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;sort.c: 246: for(int i=0; i<46; i++){
  4734  00344A  0E00               	movlw	0
  4735  00344C  0100               	movlb	0	; () banked
  4736  00344E  6F87               	movwf	(ID@i_1118+1)& (0+255),b
  4737  003450  0E00               	movlw	0
  4738  003452  6F86               	movwf	ID@i_1118& (0+255),b
  4739                           
  4740                           ; BSR set to: 0
  4741  003454  0100               	movlb	0	; () banked
  4742  003456  BF87               	btfsc	(ID@i_1118+1)& (0+255),7,b
  4743  003458  D008               	goto	l6989
  4744  00345A  0100               	movlb	0	; () banked
  4745  00345C  5187               	movf	(ID@i_1118+1)& (0+255),w,b
  4746  00345E  E126               	bnz	l778
  4747  003460  0E2E               	movlw	46
  4748  003462  0100               	movlb	0	; () banked
  4749  003464  5D86               	subwf	ID@i_1118& (0+255),w,b
  4750  003466  B0D8               	btfsc	status,0,c
  4751  003468  D021               	goto	l778
  4752  00346A                     l6989:
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;sort.c: 247: LATAbits.LATA5 = !LATAbits.LATA5;
  4756  00346A  BA89               	btfsc	3977,5,c	;volatile
  4757  00346C  D004               	goto	u5670
  4758  00346E  0100               	movlb	0	; () banked
  4759  003470  6B82               	clrf	??_ID& (0+255),b
  4760  003472  2B82               	incf	??_ID& (0+255),f,b
  4761  003474  D002               	goto	u5688
  4762  003476                     u5670:
  4763  003476  0100               	movlb	0	; () banked
  4764  003478  6B82               	clrf	??_ID& (0+255),b
  4765  00347A                     u5688:
  4766  00347A  0100               	movlb	0	; () banked
  4767  00347C  3B82               	swapf	??_ID& (0+255),f,b
  4768  00347E  4782               	rlncf	??_ID& (0+255),f,b
  4769  003480  5089               	movf	3977,w,c	;volatile
  4770  003482  0100               	movlb	0	; () banked
  4771  003484  1982               	xorwf	??_ID& (0+255),w,b
  4772  003486  0BDF               	andlw	-33
  4773  003488  1982               	xorwf	??_ID& (0+255),w,b
  4774  00348A  6E89               	movwf	3977,c	;volatile
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;sort.c: 248: delay_ms(45-i);
  4778  00348C  0100               	movlb	0	; () banked
  4779  00348E  5186               	movf	ID@i_1118& (0+255),w,b
  4780  003490  0800               	sublw	0
  4781  003492  0F2D               	addlw	45
  4782  003494  EC97  F026         	call	_delay_ms
  4783  003498  0100               	movlb	0	; () banked
  4784  00349A  4B86               	infsnz	ID@i_1118& (0+255),f,b
  4785  00349C  2B87               	incf	(ID@i_1118+1)& (0+255),f,b
  4786                           
  4787                           ; BSR set to: 0
  4788  00349E  0100               	movlb	0	; () banked
  4789  0034A0  BF87               	btfsc	(ID@i_1118+1)& (0+255),7,b
  4790  0034A2  D7E3               	goto	l6989
  4791  0034A4  0100               	movlb	0	; () banked
  4792  0034A6  5187               	movf	(ID@i_1118+1)& (0+255),w,b
  4793  0034A8  E101               	bnz	u5690
  4794  0034AA  D7DA               	goto	L5
  4795  0034AC                     u5690:
  4796  0034AC                     l778:
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;sort.c: 249: }
  4800                           ;sort.c: 250: LATAbits.LATA5 = 1;
  4801  0034AC  8A89               	bsf	3977,5,c	;volatile
  4802  0034AE                     l6997:
  4803                           
  4804                           ; BSR set to: 0
  4805                           ;sort.c: 251: }
  4806                           ;sort.c: 253: f_can_coming_to_ID = 0;
  4807  0034AE  0E00               	movlw	0
  4808  0034B0  6E68               	movwf	_f_can_coming_to_ID+1,c
  4809  0034B2  0E00               	movlw	0
  4810  0034B4  6E67               	movwf	_f_can_coming_to_ID,c
  4811  0034B6  0012               	return	
  4812  0034B8                     __end_of_ID:
  4813                           	opt stack 0
  4814                           tblptru	equ	0xFF8
  4815                           tblptrh	equ	0xFF7
  4816                           tblptrl	equ	0xFF6
  4817                           tablat	equ	0xFF5
  4818                           prodh	equ	0xFF4
  4819                           prodl	equ	0xFF3
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           postdec1	equ	0xFE5
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _delay_ms *****************
  4832 ;; Defined at:
  4833 ;;		line 446 in file "sort.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  milliseconds    1    wreg     unsigned char 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      void 
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;Total ram usage:        2 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    7
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_Loading
  4858 ;;		_ID
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text10
  4863  004D2E                     __ptext10:
  4864                           	opt stack 0
  4865  004D2E                     _delay_ms:
  4866                           	opt stack 21
  4867                           
  4868                           ;incstack = 0
  4869                           ;delay_ms@milliseconds stored from wreg
  4870  004D2E  0100               	movlb	0	; () banked
  4871  004D30  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  4872                           
  4873                           ;sort.c: 447: while(milliseconds > 0)
  4874  004D32  D00B               	goto	l6459
  4875  004D34                     l6455:
  4876                           
  4877                           ;sort.c: 448: {
  4878                           ;sort.c: 449: milliseconds--;
  4879  004D34  0100               	movlb	0	; () banked
  4880  004D36  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;sort.c: 450: _delay((unsigned long)((990)*(32000000/4000000.0)));
  4884  004D38  0E0B               	movlw	11
  4885  004D3A  0100               	movlb	0	; () banked
  4886  004D3C  6F80               	movwf	??_delay_ms& (0+255),b
  4887  004D3E  0E47               	movlw	71
  4888  004D40                     u8337:
  4889  004D40  2EE8               	decfsz	wreg,f,c
  4890  004D42  D7FE               	bra	u8337
  4891  004D44  2F80               	decfsz	??_delay_ms& (0+255),f,b
  4892  004D46  D7FC               	bra	u8337
  4893  004D48  D000               	nop2	
  4894  004D4A                     l6459:
  4895  004D4A  0100               	movlb	0	; () banked
  4896  004D4C  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  4897  004D4E  0100               	movlb	0	; () banked
  4898  004D50  B4D8               	btfsc	status,2,c
  4899  004D52  0012               	return	
  4900  004D54  D7EF               	goto	l6455
  4901  004D56                     __end_of_delay_ms:
  4902                           	opt stack 0
  4903                           tblptru	equ	0xFF8
  4904                           tblptrh	equ	0xFF7
  4905                           tblptrl	equ	0xFF6
  4906                           tablat	equ	0xFF5
  4907                           prodh	equ	0xFF4
  4908                           prodl	equ	0xFF3
  4909                           postinc0	equ	0xFEE
  4910                           wreg	equ	0xFE8
  4911                           postdec1	equ	0xFE5
  4912                           fsr1l	equ	0xFE1
  4913                           indf2	equ	0xFDF
  4914                           postinc2	equ	0xFDE
  4915                           postdec2	equ	0xFDD
  4916                           fsr2h	equ	0xFDA
  4917                           fsr2l	equ	0xFD9
  4918                           status	equ	0xFD8
  4919                           
  4920 ;; *************** function _Distribution *****************
  4921 ;; Defined at:
  4922 ;;		line 256 in file "sort.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;		None
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;		None
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  1    wreg      void 
  4929 ;; Registers used:
  4930 ;;		wreg, status,2, status,0, cstack
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;Total ram usage:        2 bytes
  4941 ;; Hardware stack levels used:    1
  4942 ;; Hardware stack levels required when called:    8
  4943 ;; This function calls:
  4944 ;;		_updateServoPosition
  4945 ;; This function is called by:
  4946 ;;		_sort
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           	psect	text11
  4951  002CDE                     __ptext11:
  4952                           	opt stack 0
  4953  002CDE                     _Distribution:
  4954                           	opt stack 21
  4955                           
  4956                           ;sort.c: 257: if(f_can_coming_to_distribution){
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;incstack = 0
  4960  002CDE  5069               	movf	_f_can_coming_to_distribution,w,c
  4961  002CE0  106A               	iorwf	_f_can_coming_to_distribution+1,w,c
  4962  002CE2  B4D8               	btfsc	status,2,c
  4963  002CE4  0012               	return	
  4964  002CE6  D034               	goto	l7013
  4965  002CE8                     l7003:
  4966                           
  4967                           ;sort.c: 267: updateServoPosition(500, 1);
  4968  002CE8  0E01               	movlw	1
  4969  002CEA  0100               	movlb	0	; () banked
  4970  002CEC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4971  002CEE  0EF4               	movlw	244
  4972  002CF0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4973  002CF2  0E00               	movlw	0
  4974  002CF4  0100               	movlb	0	; () banked
  4975  002CF6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4976  002CF8  0E01               	movlw	1
  4977  002CFA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4978  002CFC  ECC3  F021         	call	_updateServoPosition	;wreg free
  4979                           
  4980                           ;sort.c: 268: break;
  4981  002D00  D03E               	goto	l7015
  4982  002D02                     l7005:
  4983                           
  4984                           ;sort.c: 270: updateServoPosition(850, 1);
  4985  002D02  0E03               	movlw	3
  4986  002D04  0100               	movlb	0	; () banked
  4987  002D06  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4988  002D08  0E52               	movlw	82
  4989  002D0A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4990  002D0C  0E00               	movlw	0
  4991  002D0E  0100               	movlb	0	; () banked
  4992  002D10  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4993  002D12  0E01               	movlw	1
  4994  002D14  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4995  002D16  ECC3  F021         	call	_updateServoPosition	;wreg free
  4996                           
  4997                           ;sort.c: 271: break;
  4998  002D1A  D031               	goto	l7015
  4999  002D1C                     l7007:
  5000                           
  5001                           ;sort.c: 273: updateServoPosition(1670, 1);
  5002  002D1C  0E06               	movlw	6
  5003  002D1E  0100               	movlb	0	; () banked
  5004  002D20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5005  002D22  0E86               	movlw	134
  5006  002D24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5007  002D26  0E00               	movlw	0
  5008  002D28  0100               	movlb	0	; () banked
  5009  002D2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5010  002D2C  0E01               	movlw	1
  5011  002D2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5012  002D30  ECC3  F021         	call	_updateServoPosition	;wreg free
  5013                           
  5014                           ;sort.c: 274: break;
  5015  002D34  D024               	goto	l7015
  5016  002D36                     l7009:
  5017                           
  5018                           ;sort.c: 276: updateServoPosition(2400, 1);
  5019  002D36  0E09               	movlw	9
  5020  002D38  0100               	movlb	0	; () banked
  5021  002D3A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5022  002D3C  0E60               	movlw	96
  5023  002D3E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5024  002D40  0E00               	movlw	0
  5025  002D42  0100               	movlb	0	; () banked
  5026  002D44  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5027  002D46  0E01               	movlw	1
  5028  002D48  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5029  002D4A  ECC3  F021         	call	_updateServoPosition	;wreg free
  5030                           
  5031                           ;sort.c: 280: }
  5032                           
  5033                           ;sort.c: 279: break;
  5034                           
  5035                           ;sort.c: 278: default:
  5036                           
  5037                           ;sort.c: 277: break;
  5038  002D4E  D017               	goto	l7015
  5039  002D50                     l7013:
  5040  002D50  C0E4  F088         	movff	_cur_can,??_Distribution
  5041  002D54  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5042                           
  5043                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5044                           ; Switch size 1, requested type "space"
  5045                           ; Number of cases is 1, Range of values is 0 to 0
  5046                           ; switch strategies available:
  5047                           ; Name         Instructions Cycles
  5048                           ; simple_byte            4     3 (average)
  5049                           ;	Chosen strategy is simple_byte
  5050  002D58  0100               	movlb	0	; () banked
  5051  002D5A  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5052  002D5C  0A00               	xorlw	0	; case 0
  5053  002D5E  A4D8               	btfss	status,2,c
  5054  002D60  D00E               	goto	l7015
  5055                           
  5056                           ; BSR set to: 0
  5057                           ; Switch size 1, requested type "space"
  5058                           ; Number of cases is 4, Range of values is 0 to 3
  5059                           ; switch strategies available:
  5060                           ; Name         Instructions Cycles
  5061                           ; simple_byte           13     7 (average)
  5062                           ;	Chosen strategy is simple_byte
  5063  002D62  0100               	movlb	0	; () banked
  5064  002D64  5188               	movf	??_Distribution& (0+255),w,b
  5065  002D66  0A00               	xorlw	0	; case 0
  5066  002D68  B4D8               	btfsc	status,2,c
  5067  002D6A  D7BE               	goto	l7003
  5068  002D6C  0A01               	xorlw	1	; case 1
  5069  002D6E  B4D8               	btfsc	status,2,c
  5070  002D70  D7C8               	goto	l7005
  5071  002D72  0A03               	xorlw	3	; case 2
  5072  002D74  B4D8               	btfsc	status,2,c
  5073  002D76  D7D2               	goto	l7007
  5074  002D78  0A01               	xorlw	1	; case 3
  5075  002D7A  B4D8               	btfsc	status,2,c
  5076  002D7C  D7DC               	goto	l7009
  5077  002D7E                     l7015:
  5078                           
  5079                           ;sort.c: 281: updateServoPosition(1050, 3);
  5080  002D7E  0E04               	movlw	4
  5081  002D80  0100               	movlb	0	; () banked
  5082  002D82  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5083  002D84  0E1A               	movlw	26
  5084  002D86  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5085  002D88  0E00               	movlw	0
  5086  002D8A  0100               	movlb	0	; () banked
  5087  002D8C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5088  002D8E  0E03               	movlw	3
  5089  002D90  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5090  002D92  ECC3  F021         	call	_updateServoPosition	;wreg free
  5091                           
  5092                           ;sort.c: 282: _delay((unsigned long)((750)*(32000000/4000.0)));
  5093  002D96  0E1F               	movlw	31
  5094  002D98  0100               	movlb	0	; () banked
  5095  002D9A  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5096  002D9C  0E71               	movlw	113
  5097  002D9E  0100               	movlb	0	; () banked
  5098  002DA0  6F88               	movwf	??_Distribution& (0+255),b
  5099  002DA2  0E1E               	movlw	30
  5100  002DA4                     u8347:
  5101  002DA4  2EE8               	decfsz	wreg,f,c
  5102  002DA6  D7FE               	bra	u8347
  5103  002DA8  2F88               	decfsz	??_Distribution& (0+255),f,b
  5104  002DAA  D7FC               	bra	u8347
  5105  002DAC  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5106  002DAE  D7FA               	bra	u8347
  5107  002DB0  F000               	nop	
  5108                           
  5109                           ;sort.c: 290: switch(cur_can){
  5110  002DB2  D034               	goto	l7029
  5111  002DB4                     l7019:
  5112                           
  5113                           ;sort.c: 292: updateServoPosition(1260, 3);
  5114  002DB4  0E04               	movlw	4
  5115  002DB6  0100               	movlb	0	; () banked
  5116  002DB8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5117  002DBA  0EEC               	movlw	236
  5118  002DBC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5119  002DBE  0E00               	movlw	0
  5120  002DC0  0100               	movlb	0	; () banked
  5121  002DC2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5122  002DC4  0E03               	movlw	3
  5123  002DC6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5124  002DC8  ECC3  F021         	call	_updateServoPosition	;wreg free
  5125                           
  5126                           ;sort.c: 293: break;
  5127  002DCC  D03E               	goto	l7031
  5128  002DCE                     l7021:
  5129                           
  5130                           ;sort.c: 295: updateServoPosition(1260, 3);
  5131  002DCE  0E04               	movlw	4
  5132  002DD0  0100               	movlb	0	; () banked
  5133  002DD2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5134  002DD4  0EEC               	movlw	236
  5135  002DD6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5136  002DD8  0E00               	movlw	0
  5137  002DDA  0100               	movlb	0	; () banked
  5138  002DDC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5139  002DDE  0E03               	movlw	3
  5140  002DE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5141  002DE2  ECC3  F021         	call	_updateServoPosition	;wreg free
  5142                           
  5143                           ;sort.c: 296: break;
  5144  002DE6  D031               	goto	l7031
  5145  002DE8                     l7023:
  5146                           
  5147                           ;sort.c: 298: updateServoPosition(1400, 3);
  5148  002DE8  0E05               	movlw	5
  5149  002DEA  0100               	movlb	0	; () banked
  5150  002DEC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5151  002DEE  0E78               	movlw	120
  5152  002DF0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5153  002DF2  0E00               	movlw	0
  5154  002DF4  0100               	movlb	0	; () banked
  5155  002DF6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5156  002DF8  0E03               	movlw	3
  5157  002DFA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5158  002DFC  ECC3  F021         	call	_updateServoPosition	;wreg free
  5159                           
  5160                           ;sort.c: 299: break;
  5161  002E00  D024               	goto	l7031
  5162  002E02                     l7025:
  5163                           
  5164                           ;sort.c: 301: updateServoPosition(1400, 3);
  5165  002E02  0E05               	movlw	5
  5166  002E04  0100               	movlb	0	; () banked
  5167  002E06  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5168  002E08  0E78               	movlw	120
  5169  002E0A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5170  002E0C  0E00               	movlw	0
  5171  002E0E  0100               	movlb	0	; () banked
  5172  002E10  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5173  002E12  0E03               	movlw	3
  5174  002E14  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5175  002E16  ECC3  F021         	call	_updateServoPosition	;wreg free
  5176                           
  5177                           ;sort.c: 305: }
  5178                           
  5179                           ;sort.c: 304: break;
  5180                           
  5181                           ;sort.c: 303: default:
  5182                           
  5183                           ;sort.c: 302: break;
  5184  002E1A  D017               	goto	l7031
  5185  002E1C                     l7029:
  5186  002E1C  C0E4  F088         	movff	_cur_can,??_Distribution
  5187  002E20  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5188                           
  5189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5190                           ; Switch size 1, requested type "space"
  5191                           ; Number of cases is 1, Range of values is 0 to 0
  5192                           ; switch strategies available:
  5193                           ; Name         Instructions Cycles
  5194                           ; simple_byte            4     3 (average)
  5195                           ;	Chosen strategy is simple_byte
  5196  002E24  0100               	movlb	0	; () banked
  5197  002E26  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5198  002E28  0A00               	xorlw	0	; case 0
  5199  002E2A  A4D8               	btfss	status,2,c
  5200  002E2C  D00E               	goto	l7031
  5201                           
  5202                           ; BSR set to: 0
  5203                           ; Switch size 1, requested type "space"
  5204                           ; Number of cases is 4, Range of values is 0 to 3
  5205                           ; switch strategies available:
  5206                           ; Name         Instructions Cycles
  5207                           ; simple_byte           13     7 (average)
  5208                           ;	Chosen strategy is simple_byte
  5209  002E2E  0100               	movlb	0	; () banked
  5210  002E30  5188               	movf	??_Distribution& (0+255),w,b
  5211  002E32  0A00               	xorlw	0	; case 0
  5212  002E34  B4D8               	btfsc	status,2,c
  5213  002E36  D7BE               	goto	l7019
  5214  002E38  0A01               	xorlw	1	; case 1
  5215  002E3A  B4D8               	btfsc	status,2,c
  5216  002E3C  D7C8               	goto	l7021
  5217  002E3E  0A03               	xorlw	3	; case 2
  5218  002E40  B4D8               	btfsc	status,2,c
  5219  002E42  D7D2               	goto	l7023
  5220  002E44  0A01               	xorlw	1	; case 3
  5221  002E46  B4D8               	btfsc	status,2,c
  5222  002E48  D7DC               	goto	l7025
  5223  002E4A                     l7031:
  5224                           
  5225                           ;sort.c: 306: _delay((unsigned long)((2500)*(32000000/4000.0)));
  5226  002E4A  0E66               	movlw	102
  5227  002E4C  0100               	movlb	0	; () banked
  5228  002E4E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5229  002E50  0E76               	movlw	118
  5230  002E52  0100               	movlb	0	; () banked
  5231  002E54  6F88               	movwf	??_Distribution& (0+255),b
  5232  002E56  0EC1               	movlw	193
  5233  002E58                     u8357:
  5234  002E58  2EE8               	decfsz	wreg,f,c
  5235  002E5A  D7FE               	bra	u8357
  5236  002E5C  2F88               	decfsz	??_Distribution& (0+255),f,b
  5237  002E5E  D7FC               	bra	u8357
  5238  002E60  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5239  002E62  D7FA               	bra	u8357
  5240                           
  5241                           ;sort.c: 309: updateServoPosition(1050, 3);
  5242  002E64  0E04               	movlw	4
  5243  002E66  0100               	movlb	0	; () banked
  5244  002E68  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5245  002E6A  0E1A               	movlw	26
  5246  002E6C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5247  002E6E  0E00               	movlw	0
  5248  002E70  0100               	movlb	0	; () banked
  5249  002E72  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5250  002E74  0E03               	movlw	3
  5251  002E76  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5252  002E78  ECC3  F021         	call	_updateServoPosition	;wreg free
  5253                           
  5254                           ;sort.c: 310: _delay((unsigned long)((750)*(32000000/4000.0)));
  5255  002E7C  0E1F               	movlw	31
  5256  002E7E  0100               	movlb	0	; () banked
  5257  002E80  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5258  002E82  0E71               	movlw	113
  5259  002E84  0100               	movlb	0	; () banked
  5260  002E86  6F88               	movwf	??_Distribution& (0+255),b
  5261  002E88  0E1E               	movlw	30
  5262  002E8A                     u8367:
  5263  002E8A  2EE8               	decfsz	wreg,f,c
  5264  002E8C  D7FE               	bra	u8367
  5265  002E8E  2F88               	decfsz	??_Distribution& (0+255),f,b
  5266  002E90  D7FC               	bra	u8367
  5267  002E92  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5268  002E94  D7FA               	bra	u8367
  5269  002E96  F000               	nop	
  5270                           
  5271                           ;sort.c: 311: updateServoPosition(1200, 1);
  5272  002E98  0E04               	movlw	4
  5273  002E9A  0100               	movlb	0	; () banked
  5274  002E9C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5275  002E9E  0EB0               	movlw	176
  5276  002EA0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5277  002EA2  0E00               	movlw	0
  5278  002EA4  0100               	movlb	0	; () banked
  5279  002EA6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5280  002EA8  0E01               	movlw	1
  5281  002EAA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5282  002EAC  ECC3  F021         	call	_updateServoPosition	;wreg free
  5283                           
  5284                           ;sort.c: 312: updateServoPosition(1050, 3);
  5285  002EB0  0E04               	movlw	4
  5286  002EB2  0100               	movlb	0	; () banked
  5287  002EB4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5288  002EB6  0E1A               	movlw	26
  5289  002EB8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5290  002EBA  0E00               	movlw	0
  5291  002EBC  0100               	movlb	0	; () banked
  5292  002EBE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5293  002EC0  0E03               	movlw	3
  5294  002EC2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5295  002EC4  ECC3  F021         	call	_updateServoPosition	;wreg free
  5296                           
  5297                           ;sort.c: 314: f_can_coming_to_distribution = 0;
  5298  002EC8  0E00               	movlw	0
  5299  002ECA  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  5300  002ECC  0E00               	movlw	0
  5301  002ECE  6E69               	movwf	_f_can_coming_to_distribution,c
  5302                           
  5303                           ;sort.c: 315: f_can_distributed = 1;
  5304  002ED0  0E00               	movlw	0
  5305  002ED2  0101               	movlb	1	; () banked
  5306  002ED4  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  5307  002ED6  0E01               	movlw	1
  5308  002ED8  6F2F               	movwf	_f_can_distributed& (0+255),b
  5309                           
  5310                           ; BSR set to: 1
  5311                           ;sort.c: 316: f_most_recent_sort_time = 1;
  5312  002EDA  0E00               	movlw	0
  5313  002EDC  6E6C               	movwf	_f_most_recent_sort_time+1,c
  5314  002EDE  0E01               	movlw	1
  5315  002EE0  6E6B               	movwf	_f_most_recent_sort_time,c
  5316                           
  5317                           ; BSR set to: 1
  5318                           ;sort.c: 317: if(f_lastCan == 1){
  5319  002EE2  0100               	movlb	0	; () banked
  5320  002EE4  05E8               	decf	_f_lastCan& (0+255),w,b
  5321  002EE6  0100               	movlb	0	; () banked
  5322  002EE8  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5323  002EEA  A4D8               	btfss	status,2,c
  5324  002EEC  0012               	return	
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;sort.c: 318: machine_state = DoneSorting_state;
  5328  002EEE  0E02               	movlw	2
  5329  002EF0  0100               	movlb	0	; () banked
  5330  002EF2  6FFC               	movwf	_machine_state& (0+255),b
  5331                           
  5332                           ; BSR set to: 0
  5333  002EF4  0012               	return	
  5334  002EF6                     __end_of_Distribution:
  5335                           	opt stack 0
  5336                           tblptru	equ	0xFF8
  5337                           tblptrh	equ	0xFF7
  5338                           tblptrl	equ	0xFF6
  5339                           tablat	equ	0xFF5
  5340                           prodh	equ	0xFF4
  5341                           prodl	equ	0xFF3
  5342                           postinc0	equ	0xFEE
  5343                           wreg	equ	0xFE8
  5344                           postdec1	equ	0xFE5
  5345                           fsr1l	equ	0xFE1
  5346                           indf2	equ	0xFDF
  5347                           postinc2	equ	0xFDE
  5348                           postdec2	equ	0xFDD
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8
  5352                           
  5353 ;; *************** function _machineConfig *****************
  5354 ;; Defined at:
  5355 ;;		line 15 in file "MachineConfig.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    7
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_main
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text12
  5384  00460A                     __ptext12:
  5385                           	opt stack 0
  5386  00460A                     _machineConfig:
  5387                           	opt stack 23
  5388                           
  5389                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5390                           
  5391                           ;incstack = 0
  5392  00460A  0EF0               	movlw	240
  5393  00460C  6ED3               	movwf	4051,c	;volatile
  5394                           
  5395                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5396  00460E  8C9B               	bsf	3995,6,c	;volatile
  5397                           
  5398                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5399  004610  0E07               	movlw	7
  5400  004612  6E92               	movwf	3986,c	;volatile
  5401                           
  5402                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5403  004614  0EF2               	movlw	242
  5404  004616  6E93               	movwf	3987,c	;volatile
  5405                           
  5406                           ;MachineConfig.c: 27: TRISC = 0x00;
  5407  004618  0E00               	movlw	0
  5408  00461A  6E94               	movwf	3988,c	;volatile
  5409                           
  5410                           ;MachineConfig.c: 31: TRISD = 0x00;
  5411  00461C  0E00               	movlw	0
  5412  00461E  6E95               	movwf	3989,c	;volatile
  5413                           
  5414                           ;MachineConfig.c: 34: TRISE = 0x00;
  5415  004620  0E00               	movlw	0
  5416  004622  6E96               	movwf	3990,c	;volatile
  5417                           
  5418                           ;MachineConfig.c: 37: LATA = 0x00;
  5419  004624  0E00               	movlw	0
  5420  004626  6E89               	movwf	3977,c	;volatile
  5421                           
  5422                           ;MachineConfig.c: 38: LATB = 0x00;
  5423  004628  0E00               	movlw	0
  5424  00462A  6E8A               	movwf	3978,c	;volatile
  5425                           
  5426                           ;MachineConfig.c: 39: LATC = 0x00;
  5427  00462C  0E00               	movlw	0
  5428  00462E  6E8B               	movwf	3979,c	;volatile
  5429                           
  5430                           ;MachineConfig.c: 40: LATD = 0x00;
  5431  004630  0E00               	movlw	0
  5432  004632  6E8C               	movwf	3980,c	;volatile
  5433                           
  5434                           ;MachineConfig.c: 41: LATE = 0x00;
  5435  004634  0E00               	movlw	0
  5436  004636  6E8D               	movwf	3981,c	;volatile
  5437                           
  5438                           ;MachineConfig.c: 43: nRBPU = 0;
  5439  004638  9EF1               	bcf	intcon2,7,c	;volatile
  5440                           
  5441                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5442  00463A  0E00               	movlw	0
  5443  00463C  6EC2               	movwf	4034,c	;volatile
  5444                           
  5445                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5446  00463E  0E0D               	movlw	13
  5447  004640  6EC1               	movwf	4033,c	;volatile
  5448                           
  5449                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5450  004642  0E00               	movlw	0
  5451  004644  6EB5               	movwf	4021,c	;volatile
  5452                           
  5453                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5454  004646  96B4               	bcf	4020,3,c	;volatile
  5455                           
  5456                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5457  004648  0EB1               	movlw	177
  5458  00464A  6EC0               	movwf	4032,c	;volatile
  5459                           
  5460                           ;MachineConfig.c: 55: INT1IE = 1;
  5461  00464C  86F0               	bsf	intcon3,3,c	;volatile
  5462                           
  5463                           ;MachineConfig.c: 57: TMR0IE = 1;
  5464  00464E  8AF2               	bsf	intcon,5,c	;volatile
  5465                           
  5466                           ;MachineConfig.c: 58: TMR1IE = 1;
  5467  004650  809D               	bsf	3997,0,c	;volatile
  5468                           
  5469                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5470  004652  0EB0               	movlw	176
  5471  004654  6ECD               	movwf	4045,c	;volatile
  5472                           
  5473                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5474  004656  0EB0               	movlw	176
  5475  004658  6EB1               	movwf	4017,c	;volatile
  5476                           
  5477                           ;MachineConfig.c: 61: TMR2IE = 1;
  5478  00465A  829D               	bsf	3997,1,c	;volatile
  5479                           
  5480                           ;MachineConfig.c: 62: TMR3IE = 1;
  5481  00465C  82A0               	bsf	4000,1,c	;volatile
  5482                           
  5483                           ;MachineConfig.c: 63: PEIE = 1;
  5484  00465E  8CF2               	bsf	intcon,6,c	;volatile
  5485                           
  5486                           ;MachineConfig.c: 64: ADIE = 0;
  5487  004660  9C9D               	bcf	3997,6,c	;volatile
  5488                           
  5489                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5490  004662  9EF2               	bcf	intcon,7,c	;volatile
  5491  004664  0012               	return		;funcret
  5492  004666                     __end_of_machineConfig:
  5493                           	opt stack 0
  5494                           tblptru	equ	0xFF8
  5495                           tblptrh	equ	0xFF7
  5496                           tblptrl	equ	0xFF6
  5497                           tablat	equ	0xFF5
  5498                           prodh	equ	0xFF4
  5499                           prodl	equ	0xFF3
  5500                           intcon	equ	0xFF2
  5501                           intcon2	equ	0xFF1
  5502                           intcon3	equ	0xFF0
  5503                           postinc0	equ	0xFEE
  5504                           wreg	equ	0xFE8
  5505                           postdec1	equ	0xFE5
  5506                           fsr1l	equ	0xFE1
  5507                           indf2	equ	0xFDF
  5508                           postinc2	equ	0xFDE
  5509                           postdec2	equ	0xFDD
  5510                           fsr2h	equ	0xFDA
  5511                           fsr2l	equ	0xFD9
  5512                           status	equ	0xFD8
  5513                           
  5514 ;; *************** function _logRun *****************
  5515 ;; Defined at:
  5516 ;;		line 84 in file "EEPROM.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;		None
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5521 ;;  i               2   55[BANK0 ] int 
  5522 ;;  num             1   49[BANK0 ] unsigned char 
  5523 ;;  addr            2   57[BANK0 ] unsigned short 
  5524 ;;  byte11          1   54[BANK0 ] unsigned char 
  5525 ;;  byte3           1   52[BANK0 ] unsigned char 
  5526 ;;  byte2           1   51[BANK0 ] unsigned char 
  5527 ;;  byte1           1   50[BANK0 ] unsigned char 
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  1    wreg      void 
  5530 ;; Registers used:
  5531 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;Total ram usage:       10 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; Hardware stack levels required when called:   11
  5544 ;; This function calls:
  5545 ;;		_EEPROM_read
  5546 ;;		_EEPROM_write
  5547 ;; This function is called by:
  5548 ;;		_main
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           	psect	text13
  5553  0037C0                     __ptext13:
  5554                           	opt stack 0
  5555  0037C0                     _logRun:
  5556                           	opt stack 19
  5557                           
  5558                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5559                           
  5560                           ;incstack = 0
  5561  0037C0  0E00               	movlw	0
  5562  0037C2  0100               	movlb	0	; () banked
  5563  0037C4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5564  0037C6  0E00               	movlw	0
  5565  0037C8  6F80               	movwf	EEPROM_read@address& (0+255),b
  5566  0037CA  EC35  F027         	call	_EEPROM_read	;wreg free
  5567  0037CE  0100               	movlb	0	; () banked
  5568  0037D0  6FFD               	movwf	_sel& (0+255),b
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5572  0037D2  0100               	movlb	0	; () banked
  5573  0037D4  51FD               	movf	_sel& (0+255),w,b
  5574  0037D6  0D0B               	mullw	11
  5575  0037D8  0E01               	movlw	1
  5576  0037DA  24F3               	addwf	prodl,w,c
  5577  0037DC  0100               	movlb	0	; () banked
  5578  0037DE  6FB9               	movwf	logRun@addr& (0+255),b
  5579  0037E0  0E00               	movlw	0
  5580  0037E2  20F4               	addwfc	prodh,w,c
  5581  0037E4  0100               	movlb	0	; () banked
  5582  0037E6  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;EEPROM.c: 101: if (sel < 3){
  5586  0037E8  0E03               	movlw	3
  5587  0037EA  0100               	movlb	0	; () banked
  5588  0037EC  61FD               	cpfslt	_sel& (0+255),b
  5589  0037EE  D00E               	goto	l8605
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5593  0037F0  0100               	movlb	0	; () banked
  5594  0037F2  29FD               	incf	_sel& (0+255),w,b
  5595  0037F4  0100               	movlb	0	; () banked
  5596  0037F6  6FB1               	movwf	logRun@num& (0+255),b
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5600  0037F8  0E00               	movlw	0
  5601  0037FA  0100               	movlb	0	; () banked
  5602  0037FC  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5603  0037FE  0E00               	movlw	0
  5604  003800  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5605  003802  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5606  003806  EC9A  F01D         	call	_EEPROM_write	;wreg free
  5607                           
  5608                           ;EEPROM.c: 104: }
  5609  00380A  D00A               	goto	l8607
  5610  00380C                     l8605:
  5611                           
  5612                           ;EEPROM.c: 105: else{
  5613                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5614  00380C  0E00               	movlw	0
  5615  00380E  0100               	movlb	0	; () banked
  5616  003810  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5617  003812  0E00               	movlw	0
  5618  003814  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5619  003816  0E00               	movlw	0
  5620  003818  0100               	movlb	0	; () banked
  5621  00381A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5622  00381C  EC9A  F01D         	call	_EEPROM_write	;wreg free
  5623  003820                     l8607:
  5624                           
  5625                           ;EEPROM.c: 107: }
  5626                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5627  003820  0100               	movlb	0	; () banked
  5628  003822  51FE               	movf	_count_total& (0+255),w,b
  5629  003824  0980               	iorlw	128
  5630  003826  0100               	movlb	0	; () banked
  5631  003828  6FB2               	movwf	logRun@byte1& (0+255),b
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5635  00382A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5636  00382E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5637  003832  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5638  003836  EC9A  F01D         	call	_EEPROM_write	;wreg free
  5639                           
  5640                           ;EEPROM.c: 112: addr++;
  5641  00383A  0100               	movlb	0	; () banked
  5642  00383C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5643  00383E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5647  003840  385B               	swapf	_count_pop_no_tab,w,c
  5648  003842  0BF0               	andlw	240
  5649  003844  105D               	iorwf	_count_pop_w_tab,w,c
  5650  003846  0100               	movlb	0	; () banked
  5651  003848  6FB3               	movwf	logRun@byte2& (0+255),b
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5655  00384A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5656  00384E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5657  003852  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5658  003856  EC9A  F01D         	call	_EEPROM_write	;wreg free
  5659                           
  5660                           ;EEPROM.c: 117: addr++;
  5661  00385A  0100               	movlb	0	; () banked
  5662  00385C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5663  00385E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5667  003860  0101               	movlb	1	; () banked
  5668  003862  392D               	swapf	_count_can_w_lab& (0+255),w,b
  5669  003864  0BF0               	andlw	240
  5670  003866  0101               	movlb	1	; () banked
  5671  003868  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  5672  00386A  0100               	movlb	0	; () banked
  5673  00386C  6FB4               	movwf	logRun@byte3& (0+255),b
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5677  00386E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5678  003872  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5679  003876  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5680  00387A  EC9A  F01D         	call	_EEPROM_write	;wreg free
  5681                           
  5682                           ;EEPROM.c: 120: addr++;
  5683  00387E  0100               	movlb	0	; () banked
  5684  003880  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5685  003882  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5689  003884  0E00               	movlw	0
  5690  003886  0100               	movlb	0	; () banked
  5691  003888  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5692  00388A  0E00               	movlw	0
  5693  00388C  6FB7               	movwf	logRun@i& (0+255),b
  5694                           
  5695                           ; BSR set to: 0
  5696  00388E  0100               	movlb	0	; () banked
  5697  003890  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5698  003892  D008               	goto	l8631
  5699  003894  0100               	movlb	0	; () banked
  5700  003896  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5701  003898  E128               	bnz	l993
  5702  00389A  0E07               	movlw	7
  5703  00389C  0100               	movlb	0	; () banked
  5704  00389E  5DB7               	subwf	logRun@i& (0+255),w,b
  5705  0038A0  B0D8               	btfsc	status,0,c
  5706  0038A2  D023               	goto	l993
  5707  0038A4                     l8631:
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5711  0038A4  90D8               	bcf	status,0,c
  5712  0038A6  0100               	movlb	0	; () banked
  5713  0038A8  35B7               	rlcf	logRun@i& (0+255),w,b
  5714  0038AA  6ED9               	movwf	fsr2l,c
  5715  0038AC  0100               	movlb	0	; () banked
  5716  0038AE  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5717  0038B0  6EDA               	movwf	fsr2h,c
  5718  0038B2  0E0E               	movlw	low _startTime
  5719  0038B4  26D9               	addwf	fsr2l,f,c
  5720  0038B6  0E01               	movlw	high _startTime
  5721  0038B8  22DA               	addwfc	fsr2h,f,c
  5722  0038BA  50DF               	movf	indf2,w,c
  5723  0038BC  0100               	movlb	0	; () banked
  5724  0038BE  6FB5               	movwf	logRun@byte_i& (0+255),b
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5728  0038C0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5729  0038C4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5730  0038C8  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5731  0038CC  EC9A  F01D         	call	_EEPROM_write	;wreg free
  5732                           
  5733                           ;EEPROM.c: 126: addr++;
  5734  0038D0  0100               	movlb	0	; () banked
  5735  0038D2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5736  0038D4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5737                           
  5738                           ; BSR set to: 0
  5739  0038D6  0100               	movlb	0	; () banked
  5740  0038D8  4BB7               	infsnz	logRun@i& (0+255),f,b
  5741  0038DA  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5742                           
  5743                           ; BSR set to: 0
  5744  0038DC  0100               	movlb	0	; () banked
  5745  0038DE  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5746  0038E0  D7E1               	goto	l8631
  5747  0038E2  0100               	movlb	0	; () banked
  5748  0038E4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5749  0038E6  E101               	bnz	u7850
  5750  0038E8  D7D8               	goto	L6
  5751  0038EA                     u7850:
  5752  0038EA                     l993:
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;EEPROM.c: 127: }
  5756                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5757  0038EA  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5761  0038EE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5762  0038F2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5763  0038F6  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5764  0038FA  EC9A  F01D         	call	_EEPROM_write	;wreg free
  5765  0038FE  0012               	return		;funcret
  5766  003900                     __end_of_logRun:
  5767                           	opt stack 0
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           intcon	equ	0xFF2
  5775                           intcon2	equ	0xFF1
  5776                           intcon3	equ	0xFF0
  5777                           postinc0	equ	0xFEE
  5778                           wreg	equ	0xFE8
  5779                           postdec1	equ	0xFE5
  5780                           fsr1l	equ	0xFE1
  5781                           indf2	equ	0xFDF
  5782                           postinc2	equ	0xFDE
  5783                           postdec2	equ	0xFDD
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _EEPROM_write *****************
  5789 ;; Defined at:
  5790 ;;		line 32 in file "EEPROM.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  address         2   43[BANK0 ] unsigned short 
  5793 ;;  data            1   45[BANK0 ] unsigned char 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;  i               1   48[BANK0 ] unsigned char 
  5796 ;;  i               1   47[BANK0 ] unsigned char 
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  1    wreg      void 
  5799 ;; Registers used:
  5800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5806 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;Total ram usage:        6 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:   10
  5813 ;; This function calls:
  5814 ;;		_EEPROM_read
  5815 ;;		_lcdInst
  5816 ;;		_printf
  5817 ;; This function is called by:
  5818 ;;		_Loading
  5819 ;;		_logRun
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text14
  5824  003B34                     __ptext14:
  5825                           	opt stack 0
  5826  003B34                     _EEPROM_write:
  5827                           	opt stack 18
  5828                           
  5829                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5830                           
  5831                           ;incstack = 0
  5832  003B34  84A6               	bsf	4006,2,c	;volatile
  5833                           
  5834                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5835  003B36  0100               	movlb	0	; () banked
  5836  003B38  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5837  003B3A  6EAA               	movwf	4010,c	;volatile
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5841  003B3C  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;EEPROM.c: 39: EEDATA = data;
  5845  003B40  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5849  003B44  9EA6               	bcf	4006,7,c	;volatile
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5853  003B46  9CA6               	bcf	4006,6,c	;volatile
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5857  003B48  9EF2               	bcf	intcon,7,c	;volatile
  5858                           
  5859                           ;EEPROM.c: 45: EECON2 = 0x55;
  5860  003B4A  0E55               	movlw	85
  5861  003B4C  6EA7               	movwf	4007,c	;volatile
  5862                           
  5863                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5864  003B4E  0EAA               	movlw	170
  5865  003B50  6EA7               	movwf	4007,c	;volatile
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5869  003B52  82A6               	bsf	4006,1,c	;volatile
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5873  003B54  8EF2               	bsf	intcon,7,c	;volatile
  5874  003B56                     l971:
  5875  003B56  A8A1               	btfss	4001,4,c	;volatile
  5876  003B58  D7FE               	goto	l971
  5877                           
  5878                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5879  003B5A  98A1               	bcf	4001,4,c	;volatile
  5880                           
  5881                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5882  003B5C  94A6               	bcf	4006,2,c	;volatile
  5883                           
  5884                           ;EEPROM.c: 57: if(debug){
  5885  003B5E  505F               	movf	_debug,w,c
  5886  003B60  1060               	iorwf	_debug+1,w,c
  5887  003B62  B4D8               	btfsc	status,2,c
  5888  003B64  0012               	return	
  5889                           
  5890                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5891  003B66  0E01               	movlw	1
  5892  003B68  EC67  F027         	call	_lcdInst
  5893  003B6C  0E68               	movlw	104
  5894  003B6E  0100               	movlb	0	; () banked
  5895  003B70  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5896  003B72  0EE4               	movlw	228
  5897  003B74                     u8377:
  5898  003B74  2EE8               	decfsz	wreg,f,c
  5899  003B76  D7FE               	bra	u8377
  5900  003B78  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5901  003B7A  D7FC               	bra	u8377
  5902  003B7C  F000               	nop	
  5903                           
  5904                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5905  003B7E  0E80               	movlw	128
  5906  003B80  EC67  F027         	call	_lcdInst
  5907                           
  5908                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5909  003B84  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5910  003B88  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5911  003B8C  EC35  F027         	call	_EEPROM_read	;wreg free
  5912  003B90  0100               	movlb	0	; () banked
  5913  003B92  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5914  003B94  A4D8               	btfss	status,2,c
  5915  003B96  D024               	goto	l6441
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5919  003B98  0E22               	movlw	low STR_66
  5920  003B9A  0100               	movlb	0	; () banked
  5921  003B9C  6F8E               	movwf	printf@f& (0+255),b
  5922  003B9E  0EFB               	movlw	high STR_66
  5923  003BA0  0100               	movlb	0	; () banked
  5924  003BA2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5925  003BA4  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5926  003BA8  0100               	movlb	0	; () banked
  5927  003BAA  6B91               	clrf	(?_printf+3)& (0+255),b
  5928  003BAC  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5929  003BB0  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5930  003BB4  ECB8  F008         	call	_printf	;wreg free
  5931                           
  5932                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5933  003BB8  0E00               	movlw	0
  5934  003BBA  0100               	movlb	0	; () banked
  5935  003BBC  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5936  003BBE                     l6433:
  5937                           
  5938                           ; BSR set to: 0
  5939  003BBE  0E63               	movlw	99
  5940  003BC0  0100               	movlb	0	; () banked
  5941  003BC2  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5942  003BC4  D001               	goto	l6437
  5943  003BC6  0012               	return	
  5944  003BC8                     l6437:
  5945                           
  5946                           ; BSR set to: 0
  5947  003BC8  0E68               	movlw	104
  5948  003BCA  0100               	movlb	0	; () banked
  5949  003BCC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5950  003BCE  0EE4               	movlw	228
  5951  003BD0                     u8387:
  5952  003BD0  2EE8               	decfsz	wreg,f,c
  5953  003BD2  D7FE               	bra	u8387
  5954  003BD4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5955  003BD6  D7FC               	bra	u8387
  5956  003BD8  F000               	nop	
  5957  003BDA  0100               	movlb	0	; () banked
  5958  003BDC  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5959  003BDE  D7EF               	goto	l6433
  5960  003BE0                     l6441:
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5964  003BE0  0EBD               	movlw	low STR_67
  5965  003BE2  0100               	movlb	0	; () banked
  5966  003BE4  6F8E               	movwf	printf@f& (0+255),b
  5967  003BE6  0EFF               	movlw	high STR_67
  5968  003BE8  0100               	movlb	0	; () banked
  5969  003BEA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5970  003BEC  ECB8  F008         	call	_printf	;wreg free
  5971  003BF0  0E00               	movlw	0
  5972  003BF2  0100               	movlb	0	; () banked
  5973  003BF4  6FB0               	movwf	EEPROM_write@i_1337& (0+255),b
  5974  003BF6                     l6445:
  5975                           
  5976                           ; BSR set to: 0
  5977  003BF6  0E63               	movlw	99
  5978  003BF8  0100               	movlb	0	; () banked
  5979  003BFA  65B0               	cpfsgt	EEPROM_write@i_1337& (0+255),b
  5980  003BFC  D001               	goto	l6449
  5981  003BFE  0012               	return	
  5982  003C00                     l6449:
  5983                           
  5984                           ; BSR set to: 0
  5985  003C00  0E68               	movlw	104
  5986  003C02  0100               	movlb	0	; () banked
  5987  003C04  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5988  003C06  0EE4               	movlw	228
  5989  003C08                     u8397:
  5990  003C08  2EE8               	decfsz	wreg,f,c
  5991  003C0A  D7FE               	bra	u8397
  5992  003C0C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5993  003C0E  D7FC               	bra	u8397
  5994  003C10  F000               	nop	
  5995  003C12  0100               	movlb	0	; () banked
  5996  003C14  2BB0               	incf	EEPROM_write@i_1337& (0+255),f,b
  5997  003C16  D7EF               	goto	l6445
  5998  003C18                     __end_of_EEPROM_write:
  5999                           	opt stack 0
  6000                           tblptru	equ	0xFF8
  6001                           tblptrh	equ	0xFF7
  6002                           tblptrl	equ	0xFF6
  6003                           tablat	equ	0xFF5
  6004                           prodh	equ	0xFF4
  6005                           prodl	equ	0xFF3
  6006                           intcon	equ	0xFF2
  6007                           intcon2	equ	0xFF1
  6008                           intcon3	equ	0xFF0
  6009                           postinc0	equ	0xFEE
  6010                           wreg	equ	0xFE8
  6011                           postdec1	equ	0xFE5
  6012                           fsr1l	equ	0xFE1
  6013                           indf2	equ	0xFDF
  6014                           postinc2	equ	0xFDE
  6015                           postdec2	equ	0xFDD
  6016                           fsr2h	equ	0xFDA
  6017                           fsr2l	equ	0xFD9
  6018                           status	equ	0xFD8
  6019                           
  6020 ;; *************** function _EEPROM_read *****************
  6021 ;; Defined at:
  6022 ;;		line 68 in file "EEPROM.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  address         2    0[BANK0 ] unsigned short 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;		None
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      unsigned char 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6036 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6040 ;;Total ram usage:        2 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    7
  6043 ;; This function calls:
  6044 ;;		Nothing
  6045 ;; This function is called by:
  6046 ;;		_Loading
  6047 ;;		_EEPROM_write
  6048 ;;		_logRun
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           	psect	text15
  6053  004E6A                     __ptext15:
  6054                           	opt stack 0
  6055  004E6A                     _EEPROM_read:
  6056                           	opt stack 20
  6057                           
  6058                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6059                           
  6060                           ;incstack = 0
  6061  004E6A  0100               	movlb	0	; () banked
  6062  004E6C  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6063  004E6E  6EAA               	movwf	4010,c	;volatile
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6067  004E70  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6071  004E74  9EA6               	bcf	4006,7,c	;volatile
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6075  004E76  9CA6               	bcf	4006,6,c	;volatile
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6079  004E78  80A6               	bsf	4006,0,c	;volatile
  6080  004E7A                     l984:
  6081  004E7A  B0A6               	btfsc	4006,0,c	;volatile
  6082  004E7C  D7FE               	goto	l984
  6083                           
  6084                           ;EEPROM.c: 81: return EEDATA;
  6085  004E7E  50A8               	movf	4008,w,c	;volatile
  6086  004E80  0012               	return	
  6087  004E82                     __end_of_EEPROM_read:
  6088                           	opt stack 0
  6089                           tblptru	equ	0xFF8
  6090                           tblptrh	equ	0xFF7
  6091                           tblptrl	equ	0xFF6
  6092                           tablat	equ	0xFF5
  6093                           prodh	equ	0xFF4
  6094                           prodl	equ	0xFF3
  6095                           intcon	equ	0xFF2
  6096                           intcon2	equ	0xFF1
  6097                           intcon3	equ	0xFF0
  6098                           postinc0	equ	0xFEE
  6099                           wreg	equ	0xFE8
  6100                           postdec1	equ	0xFE5
  6101                           fsr1l	equ	0xFE1
  6102                           indf2	equ	0xFDF
  6103                           postinc2	equ	0xFDE
  6104                           postdec2	equ	0xFDD
  6105                           fsr2h	equ	0xFDA
  6106                           fsr2l	equ	0xFD9
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function _initUI *****************
  6110 ;; Defined at:
  6111 ;;		line 62 in file "UI.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;		None
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;		None
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      void 
  6118 ;; Registers used:
  6119 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;Total ram usage:        0 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:   12
  6132 ;; This function calls:
  6133 ;;		_change_state_to_menu_start
  6134 ;;		_loadRTC
  6135 ;; This function is called by:
  6136 ;;		_main
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           	psect	text16
  6141  004C22                     __ptext16:
  6142                           	opt stack 0
  6143  004C22                     _initUI:
  6144                           	opt stack 18
  6145                           
  6146                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6147                           
  6148                           ;incstack = 0
  6149  004C22  8EF2               	bsf	intcon,7,c	;volatile
  6150                           
  6151                           ;UI.c: 64: machine_state = UI_state;
  6152  004C24  0E00               	movlw	0
  6153  004C26  0100               	movlb	0	; () banked
  6154  004C28  6FFC               	movwf	_machine_state& (0+255),b
  6155                           
  6156                           ;UI.c: 65: logstate = 0;
  6157  004C2A  0E00               	movlw	0
  6158  004C2C  0100               	movlb	0	; () banked
  6159  004C2E  6FF7               	movwf	(_logstate+1)& (0+255),b
  6160  004C30  0E00               	movlw	0
  6161  004C32  6FF6               	movwf	_logstate& (0+255),b
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;UI.c: 67: if(RTCflag){
  6165  004C34  0100               	movlb	0	; () banked
  6166  004C36  51E2               	movf	_RTCflag& (0+255),w,b
  6167  004C38  0100               	movlb	0	; () banked
  6168  004C3A  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  6169  004C3C  A4D8               	btfss	status,2,c
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;UI.c: 68: loadRTC();
  6173  004C3E  EC3A  F020         	call	_loadRTC	;wreg free
  6174                           
  6175                           ;UI.c: 69: }
  6176                           ;UI.c: 71: change_state_to_menu_start();
  6177  004C42  EC56  F026         	call	_change_state_to_menu_start	;wreg free
  6178                           
  6179                           ;UI.c: 72: firstboot = 1;
  6180  004C46  0E00               	movlw	0
  6181  004C48  6E70               	movwf	_firstboot+1,c
  6182  004C4A  0E01               	movlw	1
  6183  004C4C  6E6F               	movwf	_firstboot,c
  6184  004C4E  0012               	return		;funcret
  6185  004C50                     __end_of_initUI:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           intcon2	equ	0xFF1
  6195                           intcon3	equ	0xFF0
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           postdec1	equ	0xFE5
  6199                           fsr1l	equ	0xFE1
  6200                           indf2	equ	0xFDF
  6201                           postinc2	equ	0xFDE
  6202                           postdec2	equ	0xFDD
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8
  6206                           
  6207 ;; *************** function _loadRTC *****************
  6208 ;; Defined at:
  6209 ;;		line 28 in file "RTC.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;		None
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;  i               2   22[BANK0 ] int 
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  1    wreg      void 
  6216 ;; Registers used:
  6217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;Total ram usage:        3 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    9
  6230 ;; This function calls:
  6231 ;;		_I2C_Master_Init
  6232 ;;		_I2C_Master_Start
  6233 ;;		_I2C_Master_Stop
  6234 ;;		_I2C_Master_Write
  6235 ;; This function is called by:
  6236 ;;		_initUI
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text17
  6241  004074                     __ptext17:
  6242                           	opt stack 0
  6243  004074                     _loadRTC:
  6244                           	opt stack 20
  6245                           
  6246                           ;RTC.c: 30: I2C_Master_Init(10000);
  6247                           
  6248                           ;incstack = 0
  6249  004074  0E10               	movlw	16
  6250  004076  0100               	movlb	0	; () banked
  6251  004078  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6252  00407A  0E27               	movlw	39
  6253  00407C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6254  00407E  0E00               	movlw	0
  6255  004080  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6256  004082  0E00               	movlw	0
  6257  004084  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6258  004086  ECD5  F022         	call	_I2C_Master_Init	;wreg free
  6259                           
  6260                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6261  00408A  9EF2               	bcf	intcon,7,c	;volatile
  6262                           
  6263                           ;RTC.c: 34: I2C_Master_Start();
  6264  00408C  EC8D  F027         	call	_I2C_Master_Start	;wreg free
  6265                           
  6266                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6267  004090  0E00               	movlw	0
  6268  004092  0100               	movlb	0	; () banked
  6269  004094  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6270  004096  0ED0               	movlw	208
  6271  004098  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6272  00409A  EC7B  F027         	call	_I2C_Master_Write	;wreg free
  6273                           
  6274                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6275  00409E  0E00               	movlw	0
  6276  0040A0  0100               	movlb	0	; () banked
  6277  0040A2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6278  0040A4  0E00               	movlw	0
  6279  0040A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6280  0040A8  EC7B  F027         	call	_I2C_Master_Write	;wreg free
  6281                           
  6282                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6283  0040AC  0E00               	movlw	0
  6284  0040AE  0100               	movlb	0	; () banked
  6285  0040B0  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6286  0040B2  0E00               	movlw	0
  6287  0040B4  6F96               	movwf	loadRTC@i& (0+255),b
  6288  0040B6                     l6587:
  6289                           
  6290                           ; BSR set to: 0
  6291  0040B6  0100               	movlb	0	; () banked
  6292  0040B8  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6293  0040BA  D008               	goto	l6591
  6294  0040BC  0100               	movlb	0	; () banked
  6295  0040BE  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6296  0040C0  E11B               	bnz	l6597
  6297  0040C2  0E07               	movlw	7
  6298  0040C4  0100               	movlb	0	; () banked
  6299  0040C6  5D96               	subwf	loadRTC@i& (0+255),w,b
  6300  0040C8  B0D8               	btfsc	status,0,c
  6301  0040CA  D016               	goto	l6597
  6302  0040CC                     l6591:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6306  0040CC  0E24               	movlw	low _time
  6307  0040CE  0100               	movlb	0	; () banked
  6308  0040D0  2596               	addwf	loadRTC@i& (0+255),w,b
  6309  0040D2  6ED9               	movwf	fsr2l,c
  6310  0040D4  0E01               	movlw	high _time
  6311  0040D6  0100               	movlb	0	; () banked
  6312  0040D8  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6313  0040DA  6EDA               	movwf	fsr2h,c
  6314  0040DC  50DF               	movf	indf2,w,c
  6315  0040DE  0100               	movlb	0	; () banked
  6316  0040E0  6F95               	movwf	??_loadRTC& (0+255),b
  6317  0040E2  0100               	movlb	0	; () banked
  6318  0040E4  5195               	movf	??_loadRTC& (0+255),w,b
  6319  0040E6  0100               	movlb	0	; () banked
  6320  0040E8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6321  0040EA  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6322  0040EC  EC7B  F027         	call	_I2C_Master_Write	;wreg free
  6323  0040F0  0100               	movlb	0	; () banked
  6324  0040F2  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6325  0040F4  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6326  0040F6  D7DF               	goto	l6587
  6327  0040F8                     l6597:
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;RTC.c: 39: }
  6331                           ;RTC.c: 40: I2C_Master_Stop();
  6332  0040F8  EC89  F027         	call	_I2C_Master_Stop	;wreg free
  6333                           
  6334                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6335  0040FC  8EF2               	bsf	intcon,7,c	;volatile
  6336  0040FE  0012               	return		;funcret
  6337  004100                     __end_of_loadRTC:
  6338                           	opt stack 0
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           intcon	equ	0xFF2
  6346                           intcon2	equ	0xFF1
  6347                           intcon3	equ	0xFF0
  6348                           postinc0	equ	0xFEE
  6349                           wreg	equ	0xFE8
  6350                           postdec1	equ	0xFE5
  6351                           fsr1l	equ	0xFE1
  6352                           indf2	equ	0xFDF
  6353                           postinc2	equ	0xFDE
  6354                           postdec2	equ	0xFDD
  6355                           fsr2h	equ	0xFDA
  6356                           fsr2l	equ	0xFD9
  6357                           status	equ	0xFD8
  6358                           
  6359 ;; *************** function _I2C_Master_Init *****************
  6360 ;; Defined at:
  6361 ;;		line 15 in file "I2C.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  c               4   13[BANK0 ] const unsigned long 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;		None
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  1    wreg      void 
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, status,0, cstack
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6375 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;Total ram usage:        8 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    8
  6382 ;; This function calls:
  6383 ;;		___lldiv
  6384 ;; This function is called by:
  6385 ;;		_main
  6386 ;;		_loadRTC
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           	psect	text18
  6391  0045AA                     __ptext18:
  6392                           	opt stack 0
  6393  0045AA                     _I2C_Master_Init:
  6394                           	opt stack 20
  6395                           
  6396                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6397                           
  6398                           ;incstack = 0
  6399  0045AA  0E00               	movlw	0
  6400  0045AC  6EC7               	movwf	4039,c	;volatile
  6401                           
  6402                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6403  0045AE  0E28               	movlw	40
  6404  0045B0  6EC6               	movwf	4038,c	;volatile
  6405                           
  6406                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6407  0045B2  0E00               	movlw	0
  6408  0045B4  6EC5               	movwf	4037,c	;volatile
  6409                           
  6410                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6411  0045B6  0E00               	movlw	0
  6412  0045B8  0100               	movlb	0	; () banked
  6413  0045BA  6F80               	movwf	___lldiv@dividend& (0+255),b
  6414  0045BC  0E48               	movlw	72
  6415  0045BE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6416  0045C0  0EE8               	movlw	232
  6417  0045C2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6418  0045C4  0E01               	movlw	1
  6419  0045C6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6420  0045C8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6421  0045CC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6422  0045D0  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6423  0045D4  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6424  0045D8  0E02               	movlw	2
  6425  0045DA                     u4995:
  6426  0045DA  90D8               	bcf	status,0,c
  6427  0045DC  0100               	movlb	0	; () banked
  6428  0045DE  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6429  0045E0  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6430  0045E2  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6431  0045E4  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6432  0045E6  2EE8               	decfsz	wreg,f,c
  6433  0045E8  D7F8               	goto	u4995
  6434  0045EA  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6435  0045EE  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6436  0045F2  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6437  0045F6  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6438  0045FA  EC36  F01F         	call	___lldiv	;wreg free
  6439  0045FE  0100               	movlb	0	; () banked
  6440  004600  0580               	decf	?___lldiv& (0+255),w,b
  6441  004602  6EC8               	movwf	4040,c	;volatile
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;I2C.c: 22: TRISC3 = 1;
  6445  004604  8694               	bsf	3988,3,c	;volatile
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;I2C.c: 23: TRISC4 = 1;
  6449  004606  8894               	bsf	3988,4,c	;volatile
  6450                           
  6451                           ; BSR set to: 0
  6452  004608  0012               	return		;funcret
  6453  00460A                     __end_of_I2C_Master_Init:
  6454                           	opt stack 0
  6455                           tblptru	equ	0xFF8
  6456                           tblptrh	equ	0xFF7
  6457                           tblptrl	equ	0xFF6
  6458                           tablat	equ	0xFF5
  6459                           prodh	equ	0xFF4
  6460                           prodl	equ	0xFF3
  6461                           intcon	equ	0xFF2
  6462                           intcon2	equ	0xFF1
  6463                           intcon3	equ	0xFF0
  6464                           postinc0	equ	0xFEE
  6465                           wreg	equ	0xFE8
  6466                           postdec1	equ	0xFE5
  6467                           fsr1l	equ	0xFE1
  6468                           indf2	equ	0xFDF
  6469                           postinc2	equ	0xFDE
  6470                           postdec2	equ	0xFDD
  6471                           fsr2h	equ	0xFDA
  6472                           fsr2l	equ	0xFD9
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function ___lldiv *****************
  6476 ;; Defined at:
  6477 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  dividend        4    0[BANK0 ] unsigned long 
  6480 ;;  divisor         4    4[BANK0 ] unsigned long 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  quotient        4    8[BANK0 ] unsigned long 
  6483 ;;  counter         1   12[BANK0 ] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  4    0[BANK0 ] unsigned long 
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6493 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;Total ram usage:       13 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    7
  6500 ;; This function calls:
  6501 ;;		Nothing
  6502 ;; This function is called by:
  6503 ;;		_I2C_Master_Init
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text19
  6508  003E6C                     __ptext19:
  6509                           	opt stack 0
  6510  003E6C                     ___lldiv:
  6511                           	opt stack 20
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;incstack = 0
  6515  003E6C  0E00               	movlw	0
  6516  003E6E  0100               	movlb	0	; () banked
  6517  003E70  6F88               	movwf	___lldiv@quotient& (0+255),b
  6518  003E72  0E00               	movlw	0
  6519  003E74  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6520  003E76  0E00               	movlw	0
  6521  003E78  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6522  003E7A  0E00               	movlw	0
  6523  003E7C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6524                           
  6525                           ; BSR set to: 0
  6526  003E7E  0100               	movlb	0	; () banked
  6527  003E80  5184               	movf	___lldiv@divisor& (0+255),w,b
  6528  003E82  0100               	movlb	0	; () banked
  6529  003E84  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6530  003E86  0100               	movlb	0	; () banked
  6531  003E88  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6532  003E8A  0100               	movlb	0	; () banked
  6533  003E8C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6534  003E8E  B4D8               	btfsc	status,2,c
  6535  003E90  D042               	goto	l1743
  6536                           
  6537                           ; BSR set to: 0
  6538  003E92  0E01               	movlw	1
  6539  003E94  0100               	movlb	0	; () banked
  6540  003E96  6F8C               	movwf	___lldiv@counter& (0+255),b
  6541  003E98  D008               	goto	l6011
  6542  003E9A                     l6009:
  6543                           
  6544                           ; BSR set to: 0
  6545  003E9A  0100               	movlb	0	; () banked
  6546  003E9C  90D8               	bcf	status,0,c
  6547  003E9E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6548  003EA0  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6549  003EA2  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6550  003EA4  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6551  003EA6  0100               	movlb	0	; () banked
  6552  003EA8  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6553  003EAA                     l6011:
  6554                           
  6555                           ; BSR set to: 0
  6556  003EAA  0100               	movlb	0	; () banked
  6557  003EAC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6558  003EAE  D7F5               	goto	l6009
  6559  003EB0                     l6013:
  6560                           
  6561                           ; BSR set to: 0
  6562  003EB0  0100               	movlb	0	; () banked
  6563  003EB2  90D8               	bcf	status,0,c
  6564  003EB4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6565  003EB6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6566  003EB8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6567  003EBA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6568                           
  6569                           ; BSR set to: 0
  6570  003EBC  0100               	movlb	0	; () banked
  6571  003EBE  5184               	movf	___lldiv@divisor& (0+255),w,b
  6572  003EC0  0100               	movlb	0	; () banked
  6573  003EC2  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6574  003EC4  0100               	movlb	0	; () banked
  6575  003EC6  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6576  003EC8  0100               	movlb	0	; () banked
  6577  003ECA  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6578  003ECC  0100               	movlb	0	; () banked
  6579  003ECE  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6580  003ED0  0100               	movlb	0	; () banked
  6581  003ED2  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6582  003ED4  0100               	movlb	0	; () banked
  6583  003ED6  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6584  003ED8  0100               	movlb	0	; () banked
  6585  003EDA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6586  003EDC  A0D8               	btfss	status,0,c
  6587  003EDE  D012               	goto	l6021
  6588                           
  6589                           ; BSR set to: 0
  6590  003EE0  0100               	movlb	0	; () banked
  6591  003EE2  5184               	movf	___lldiv@divisor& (0+255),w,b
  6592  003EE4  0100               	movlb	0	; () banked
  6593  003EE6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6594  003EE8  0100               	movlb	0	; () banked
  6595  003EEA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6596  003EEC  0100               	movlb	0	; () banked
  6597  003EEE  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6598  003EF0  0100               	movlb	0	; () banked
  6599  003EF2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6600  003EF4  0100               	movlb	0	; () banked
  6601  003EF6  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6602  003EF8  0100               	movlb	0	; () banked
  6603  003EFA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6604  003EFC  0100               	movlb	0	; () banked
  6605  003EFE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6606                           
  6607                           ; BSR set to: 0
  6608  003F00  0100               	movlb	0	; () banked
  6609  003F02  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6610  003F04                     l6021:
  6611                           
  6612                           ; BSR set to: 0
  6613  003F04  0100               	movlb	0	; () banked
  6614  003F06  90D8               	bcf	status,0,c
  6615  003F08  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6616  003F0A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6617  003F0C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6618  003F0E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6619                           
  6620                           ; BSR set to: 0
  6621  003F10  0100               	movlb	0	; () banked
  6622  003F12  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6623  003F14  D7CD               	goto	l6013
  6624  003F16                     l1743:
  6625                           
  6626                           ; BSR set to: 0
  6627  003F16  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6628  003F1A  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6629  003F1E  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6630  003F22  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6631                           
  6632                           ; BSR set to: 0
  6633  003F26  0012               	return		;funcret
  6634  003F28                     __end_of___lldiv:
  6635                           	opt stack 0
  6636                           tblptru	equ	0xFF8
  6637                           tblptrh	equ	0xFF7
  6638                           tblptrl	equ	0xFF6
  6639                           tablat	equ	0xFF5
  6640                           prodh	equ	0xFF4
  6641                           prodl	equ	0xFF3
  6642                           intcon	equ	0xFF2
  6643                           intcon2	equ	0xFF1
  6644                           intcon3	equ	0xFF0
  6645                           postinc0	equ	0xFEE
  6646                           wreg	equ	0xFE8
  6647                           postdec1	equ	0xFE5
  6648                           fsr1l	equ	0xFE1
  6649                           indf2	equ	0xFDF
  6650                           postinc2	equ	0xFDE
  6651                           postdec2	equ	0xFDD
  6652                           fsr2h	equ	0xFDA
  6653                           fsr2l	equ	0xFD9
  6654                           status	equ	0xFD8
  6655                           
  6656 ;; *************** function _change_state_to_menu_start *****************
  6657 ;; Defined at:
  6658 ;;		line 474 in file "UI.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;		None
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;		None
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  1    wreg      void 
  6665 ;; Registers used:
  6666 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6676 ;;Total ram usage:        0 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:   11
  6679 ;; This function calls:
  6680 ;;		_lcdInst
  6681 ;;		_printRTC
  6682 ;;		_printf
  6683 ;; This function is called by:
  6684 ;;		_initUI
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	text20
  6689  004CAC                     __ptext20:
  6690                           	opt stack 0
  6691  004CAC                     _change_state_to_menu_start:
  6692                           	opt stack 18
  6693                           
  6694                           ;UI.c: 475: cur_state = 0;
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;incstack = 0
  6698  004CAC  0E00               	movlw	0
  6699  004CAE  0100               	movlb	0	; () banked
  6700  004CB0  6FE7               	movwf	(_cur_state+1)& (0+255),b
  6701  004CB2  0E00               	movlw	0
  6702  004CB4  6FE6               	movwf	_cur_state& (0+255),b
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;UI.c: 477: lcdInst(0b10000000);;
  6706  004CB6  0E80               	movlw	128
  6707  004CB8  EC67  F027         	call	_lcdInst
  6708                           
  6709                           ;UI.c: 478: printRTC();
  6710  004CBC  EC6B  F011         	call	_printRTC	;wreg free
  6711                           
  6712                           ;UI.c: 479: lcdInst(0b11000000);;
  6713  004CC0  0EC0               	movlw	192
  6714  004CC2  EC67  F027         	call	_lcdInst
  6715                           
  6716                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6717  004CC6  0EF7               	movlw	low STR_30
  6718  004CC8  0100               	movlb	0	; () banked
  6719  004CCA  6F8E               	movwf	printf@f& (0+255),b
  6720  004CCC  0EFD               	movlw	high STR_30
  6721  004CCE  0100               	movlb	0	; () banked
  6722  004CD0  6F8F               	movwf	(printf@f+1)& (0+255),b
  6723  004CD2  ECB8  F008         	call	_printf	;wreg free
  6724  004CD6  0012               	return		;funcret
  6725  004CD8                     __end_of_change_state_to_menu_start:
  6726                           	opt stack 0
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           intcon	equ	0xFF2
  6734                           intcon2	equ	0xFF1
  6735                           intcon3	equ	0xFF0
  6736                           postinc0	equ	0xFEE
  6737                           wreg	equ	0xFE8
  6738                           postdec1	equ	0xFE5
  6739                           fsr1l	equ	0xFE1
  6740                           indf2	equ	0xFDF
  6741                           postinc2	equ	0xFDE
  6742                           postdec2	equ	0xFDD
  6743                           fsr2h	equ	0xFDA
  6744                           fsr2l	equ	0xFD9
  6745                           status	equ	0xFD8
  6746                           
  6747 ;; *************** function _initTime *****************
  6748 ;; Defined at:
  6749 ;;		line 17 in file "RTC.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;  s               1    wreg     unsigned char 
  6752 ;;  m               1    0[BANK0 ] unsigned char 
  6753 ;;  h               1    1[BANK0 ] unsigned char 
  6754 ;;  w               1    2[BANK0 ] unsigned char 
  6755 ;;  DD              1    3[BANK0 ] unsigned char 
  6756 ;;  MM              1    4[BANK0 ] unsigned char 
  6757 ;;  YY              1    5[BANK0 ] unsigned char 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  s               1    6[BANK0 ] unsigned char 
  6760 ;; Return value:  Size  Location     Type
  6761 ;;                  1    wreg      void 
  6762 ;; Registers used:
  6763 ;;		wreg
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6769 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;Total ram usage:        7 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    7
  6776 ;; This function calls:
  6777 ;;		Nothing
  6778 ;; This function is called by:
  6779 ;;		_main
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           	psect	text21
  6784  004E10                     __ptext21:
  6785                           	opt stack 0
  6786  004E10                     _initTime:
  6787                           	opt stack 23
  6788                           
  6789                           ;incstack = 0
  6790                           ;initTime@s stored from wreg
  6791  004E10  0100               	movlb	0	; () banked
  6792  004E12  6F86               	movwf	initTime@s& (0+255),b
  6793                           
  6794                           ;RTC.c: 19: time[0] = s;
  6795  004E14  C086  F124         	movff	initTime@s,_time
  6796                           
  6797                           ;RTC.c: 20: time[1] = m;
  6798  004E18  C080  F125         	movff	initTime@m,_time+1
  6799                           
  6800                           ;RTC.c: 21: time[2] = h;
  6801  004E1C  C081  F126         	movff	initTime@h,_time+2
  6802                           
  6803                           ;RTC.c: 22: time[3] = w;
  6804  004E20  C082  F127         	movff	initTime@w,_time+3
  6805                           
  6806                           ;RTC.c: 23: time[4] = DD;
  6807  004E24  C083  F128         	movff	initTime@DD,_time+4
  6808                           
  6809                           ;RTC.c: 24: time[5] = MM;
  6810  004E28  C084  F129         	movff	initTime@MM,_time+5
  6811                           
  6812                           ;RTC.c: 25: time[6] = YY;
  6813  004E2C  C085  F12A         	movff	initTime@YY,_time+6
  6814  004E30  0012               	return		;funcret
  6815  004E32                     __end_of_initTime:
  6816                           	opt stack 0
  6817                           tblptru	equ	0xFF8
  6818                           tblptrh	equ	0xFF7
  6819                           tblptrl	equ	0xFF6
  6820                           tablat	equ	0xFF5
  6821                           prodh	equ	0xFF4
  6822                           prodl	equ	0xFF3
  6823                           intcon	equ	0xFF2
  6824                           intcon2	equ	0xFF1
  6825                           intcon3	equ	0xFF0
  6826                           postinc0	equ	0xFEE
  6827                           wreg	equ	0xFE8
  6828                           postdec1	equ	0xFE5
  6829                           fsr1l	equ	0xFE1
  6830                           indf2	equ	0xFDF
  6831                           postinc2	equ	0xFDE
  6832                           postdec2	equ	0xFDD
  6833                           fsr2h	equ	0xFDA
  6834                           fsr2l	equ	0xFD9
  6835                           status	equ	0xFD8
  6836                           
  6837 ;; *************** function _initLCD *****************
  6838 ;; Defined at:
  6839 ;;		line 48 in file "lcd.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;		None
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;		None
  6844 ;; Return value:  Size  Location     Type
  6845 ;;                  1    wreg      void 
  6846 ;; Registers used:
  6847 ;;		wreg, status,2, status,0, cstack
  6848 ;; Tracked objects:
  6849 ;;		On entry : 0/0
  6850 ;;		On exit  : 0/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6857 ;;Total ram usage:        1 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; Hardware stack levels required when called:    9
  6860 ;; This function calls:
  6861 ;;		_lcdInst
  6862 ;; This function is called by:
  6863 ;;		_main
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text22
  6868  0048AA                     __ptext22:
  6869                           	opt stack 0
  6870  0048AA                     _initLCD:
  6871                           	opt stack 21
  6872                           
  6873                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6874                           
  6875                           ;incstack = 0
  6876  0048AA  0E9C               	movlw	156
  6877  0048AC  0100               	movlb	0	; () banked
  6878  0048AE  6F83               	movwf	??_initLCD& (0+255),b
  6879  0048B0  0ED7               	movlw	215
  6880  0048B2                     u8407:
  6881  0048B2  2EE8               	decfsz	wreg,f,c
  6882  0048B4  D7FE               	bra	u8407
  6883  0048B6  2F83               	decfsz	??_initLCD& (0+255),f,b
  6884  0048B8  D7FC               	bra	u8407
  6885                           
  6886                           ;lcd.c: 50: lcdInst(0b00110011);
  6887  0048BA  0E33               	movlw	51
  6888  0048BC  EC67  F027         	call	_lcdInst
  6889                           
  6890                           ;lcd.c: 51: lcdInst(0b00110010);
  6891  0048C0  0E32               	movlw	50
  6892  0048C2  EC67  F027         	call	_lcdInst
  6893                           
  6894                           ;lcd.c: 53: lcdInst(0b00101000);
  6895  0048C6  0E28               	movlw	40
  6896  0048C8  EC67  F027         	call	_lcdInst
  6897                           
  6898                           ;lcd.c: 54: lcdInst(0b00001100);
  6899  0048CC  0E0C               	movlw	12
  6900  0048CE  EC67  F027         	call	_lcdInst
  6901                           
  6902                           ;lcd.c: 55: lcdInst(0b00000110);
  6903  0048D2  0E06               	movlw	6
  6904  0048D4  EC67  F027         	call	_lcdInst
  6905                           
  6906                           ;lcd.c: 56: lcdInst(0b00000001);
  6907  0048D8  0E01               	movlw	1
  6908  0048DA  EC67  F027         	call	_lcdInst
  6909                           
  6910                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6911  0048DE  0E9C               	movlw	156
  6912  0048E0  0100               	movlb	0	; () banked
  6913  0048E2  6F83               	movwf	??_initLCD& (0+255),b
  6914  0048E4  0ED7               	movlw	215
  6915  0048E6                     u8417:
  6916  0048E6  2EE8               	decfsz	wreg,f,c
  6917  0048E8  D7FE               	bra	u8417
  6918  0048EA  2F83               	decfsz	??_initLCD& (0+255),f,b
  6919  0048EC  D7FC               	bra	u8417
  6920  0048EE  0012               	return		;funcret
  6921  0048F0                     __end_of_initLCD:
  6922                           	opt stack 0
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           intcon	equ	0xFF2
  6930                           intcon2	equ	0xFF1
  6931                           intcon3	equ	0xFF0
  6932                           postinc0	equ	0xFEE
  6933                           wreg	equ	0xFE8
  6934                           postdec1	equ	0xFE5
  6935                           fsr1l	equ	0xFE1
  6936                           indf2	equ	0xFDF
  6937                           postinc2	equ	0xFDE
  6938                           postdec2	equ	0xFDD
  6939                           fsr2h	equ	0xFDA
  6940                           fsr2l	equ	0xFD9
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _UI *****************
  6944 ;; Defined at:
  6945 ;;		line 76 in file "UI.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;		None
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;  i               1   73[BANK0 ] unsigned char 
  6950 ;;  i               1   85[BANK0 ] unsigned char 
  6951 ;;  i               1   84[BANK0 ] unsigned char 
  6952 ;;  i               1   83[BANK0 ] unsigned char 
  6953 ;;  i               1   82[BANK0 ] unsigned char 
  6954 ;;  i               1   81[BANK0 ] unsigned char 
  6955 ;;  i               1   80[BANK0 ] unsigned char 
  6956 ;;  i               1   79[BANK0 ] unsigned char 
  6957 ;;  i               1   78[BANK0 ] unsigned char 
  6958 ;;  i               1   77[BANK0 ] unsigned char 
  6959 ;;  i               1   76[BANK0 ] unsigned char 
  6960 ;;  i               1   75[BANK0 ] unsigned char 
  6961 ;;  i               1   74[BANK0 ] unsigned char 
  6962 ;;  month           4   86[BANK0 ] unsigned char [4]
  6963 ;;  i               1   72[BANK0 ] unsigned char 
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  1    wreg      void 
  6966 ;; Registers used:
  6967 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6974 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;Total ram usage:       22 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:   11
  6980 ;; This function calls:
  6981 ;;		___awdiv
  6982 ;;		___awmod
  6983 ;;		_change_state_to_menu_12
  6984 ;;		_change_state_to_menu_22
  6985 ;;		_lcdInst
  6986 ;;		_printRTC
  6987 ;;		_printf
  6988 ;;		_strcpy
  6989 ;; This function is called by:
  6990 ;;		_main
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           	psect	text23
  6995  0008CA                     __ptext23:
  6996                           	opt stack 0
  6997  0008CA                     _UI:
  6998                           	opt stack 19
  6999                           
  7000                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7001                           
  7002                           ;incstack = 0
  7003  0008CA  0E02               	movlw	2
  7004  0008CC  0100               	movlb	0	; () banked
  7005  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7006  0008D0  A4D8               	btfss	status,2,c
  7007  0008D2  D075               	goto	l8029
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7011  0008D4  0E01               	movlw	1
  7012  0008D6  EC67  F027         	call	_lcdInst
  7013  0008DA  0E68               	movlw	104
  7014  0008DC  0100               	movlb	0	; () banked
  7015  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7016  0008E0  0EE4               	movlw	228
  7017  0008E2                     u8427:
  7018  0008E2  2EE8               	decfsz	wreg,f,c
  7019  0008E4  D7FE               	bra	u8427
  7020  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7021  0008E8  D7FC               	bra	u8427
  7022  0008EA  F000               	nop	
  7023                           
  7024                           ;UI.c: 79: lcdInst(0b10000000);;
  7025  0008EC  0E80               	movlw	128
  7026  0008EE  EC67  F027         	call	_lcdInst
  7027                           
  7028                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7029  0008F2  0EA3               	movlw	low STR_1
  7030  0008F4  0100               	movlb	0	; () banked
  7031  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7032  0008F8  0EFB               	movlw	high STR_1
  7033  0008FA  0100               	movlb	0	; () banked
  7034  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7035  0008FE  0E01               	movlw	1
  7036  000900  0100               	movlb	0	; () banked
  7037  000902  25FD               	addwf	_sel& (0+255),w,b
  7038  000904  0100               	movlb	0	; () banked
  7039  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7040  000908  0100               	movlb	0	; () banked
  7041  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7042  00090C  0E00               	movlw	0
  7043  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7044  000910  ECB8  F008         	call	_printf	;wreg free
  7045                           
  7046                           ;UI.c: 81: lcdInst(0b11000000);;
  7047  000914  0EC0               	movlw	192
  7048  000916  EC67  F027         	call	_lcdInst
  7049                           
  7050                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7051  00091A  0E0E               	movlw	14
  7052  00091C  0100               	movlb	0	; () banked
  7053  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7054  000920  0E10               	movlw	16
  7055  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7056  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7057  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7058  00092C  ECE9  F01F         	call	___awmod	;wreg free
  7059  000930  C080  F0C6         	movff	?___awmod,_UI$2331
  7060  000934  C081  F0C7         	movff	?___awmod+1,_UI$2331+1
  7061                           
  7062                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7063  000938  0E27               	movlw	low STR_2
  7064  00093A  0100               	movlb	0	; () banked
  7065  00093C  6F8E               	movwf	printf@f& (0+255),b
  7066  00093E  0EFF               	movlw	high STR_2
  7067  000940  0100               	movlb	0	; () banked
  7068  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7069  000944  0E0E               	movlw	14
  7070  000946  0100               	movlb	0	; () banked
  7071  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7072  00094A  0E10               	movlw	16
  7073  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7074  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7075  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7076  000956  ECE9  F01F         	call	___awmod	;wreg free
  7077  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7078  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7079  000962  0E00               	movlw	0
  7080  000964  0100               	movlb	0	; () banked
  7081  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7082  000968  0E3C               	movlw	60
  7083  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7084  00096C  ECD7  F01E         	call	___awdiv	;wreg free
  7085  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7086  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7087  000978  C0C6  F080         	movff	_UI$2331,___awmod@dividend
  7088  00097C  C0C7  F081         	movff	_UI$2331+1,___awmod@dividend+1
  7089  000980  0E00               	movlw	0
  7090  000982  0100               	movlb	0	; () banked
  7091  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7092  000986  0E3C               	movlw	60
  7093  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7094  00098A  ECE9  F01F         	call	___awmod	;wreg free
  7095  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7096  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7097  000996  ECB8  F008         	call	_printf	;wreg free
  7098                           
  7099                           ;UI.c: 83: machine_state = UI_state;
  7100  00099A  0E00               	movlw	0
  7101  00099C  0100               	movlb	0	; () banked
  7102  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7103  0009A0                     l180:
  7104  0009A0  A281               	btfss	3969,1,c	;volatile
  7105  0009A2  D7FE               	goto	l180
  7106                           
  7107                           ;UI.c: 86: }
  7108                           ;UI.c: 87: if(cur_state==12){
  7109  0009A4  0E0C               	movlw	12
  7110  0009A6  0100               	movlb	0	; () banked
  7111  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  7112  0009AA  0100               	movlb	0	; () banked
  7113  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7114  0009AE  A4D8               	btfss	status,2,c
  7115  0009B0  D003               	goto	l8027
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;UI.c: 88: change_state_to_menu_12();
  7119  0009B2  ECB5  F024         	call	_change_state_to_menu_12	;wreg free
  7120                           
  7121                           ;UI.c: 89: }
  7122  0009B6  D3D5               	goto	l8349
  7123  0009B8                     l8027:
  7124                           
  7125                           ;UI.c: 90: else{
  7126                           ;UI.c: 91: change_state_to_menu_22();
  7127  0009B8  EC99  F024         	call	_change_state_to_menu_22	;wreg free
  7128                           
  7129                           ;UI.c: 92: }
  7130                           ;UI.c: 93: }
  7131  0009BC  D3D2               	goto	l8349
  7132  0009BE                     l8029:
  7133                           
  7134                           ;UI.c: 94: else if(cur_state == 0){
  7135  0009BE  0100               	movlb	0	; () banked
  7136  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  7137  0009C2  0100               	movlb	0	; () banked
  7138  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7139  0009C6  A4D8               	btfss	status,2,c
  7140  0009C8  D3CC               	goto	l8349
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7144  0009CA  0E00               	movlw	0
  7145  0009CC  0100               	movlb	0	; () banked
  7146  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7147  0009D0                     l8033:
  7148                           
  7149                           ; BSR set to: 0
  7150  0009D0  0E63               	movlw	99
  7151  0009D2  0100               	movlb	0	; () banked
  7152  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7153  0009D6  D001               	goto	l8037
  7154  0009D8  D00C               	goto	l8041
  7155  0009DA                     l8037:
  7156                           
  7157                           ; BSR set to: 0
  7158  0009DA  0E68               	movlw	104
  7159  0009DC  0100               	movlb	0	; () banked
  7160  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7161  0009E0  0EE4               	movlw	228
  7162  0009E2                     u8437:
  7163  0009E2  2EE8               	decfsz	wreg,f,c
  7164  0009E4  D7FE               	bra	u8437
  7165  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7166  0009E8  D7FC               	bra	u8437
  7167  0009EA  F000               	nop	
  7168  0009EC  0100               	movlb	0	; () banked
  7169  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7170  0009F0  D7EF               	goto	l8033
  7171  0009F2                     l8041:
  7172                           
  7173                           ; BSR set to: 0
  7174                           ;UI.c: 96: if(cur_state == 0){
  7175  0009F2  0100               	movlb	0	; () banked
  7176  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  7177  0009F6  0100               	movlb	0	; () banked
  7178  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7179  0009FA  A4D8               	btfss	status,2,c
  7180  0009FC  D3B2               	goto	l8349
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;UI.c: 97: printRTC();
  7184  0009FE  EC6B  F011         	call	_printRTC	;wreg free
  7185                           
  7186                           ;UI.c: 98: }
  7187                           ;UI.c: 99: }
  7188                           ;UI.c: 100: while(logstate){
  7189  000A02  D3AF               	goto	l8349
  7190  000A04                     l8045:
  7191                           
  7192                           ;UI.c: 102: if(!log_completion){
  7193  000A04  0100               	movlb	0	; () banked
  7194  000A06  51EE               	movf	_log_completion& (0+255),w,b
  7195  000A08  0100               	movlb	0	; () banked
  7196  000A0A  11EF               	iorwf	(_log_completion+1)& (0+255),w,b
  7197  000A0C  A4D8               	btfss	status,2,c
  7198  000A0E  D041               	goto	l8075
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7202  000A10  0E01               	movlw	1
  7203  000A12  EC67  F027         	call	_lcdInst
  7204  000A16  0E68               	movlw	104
  7205  000A18  0100               	movlb	0	; () banked
  7206  000A1A  6FC4               	movwf	??_UI& (0+255),b
  7207  000A1C  0EE4               	movlw	228
  7208  000A1E                     u8447:
  7209  000A1E  2EE8               	decfsz	wreg,f,c
  7210  000A20  D7FE               	bra	u8447
  7211  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  7212  000A24  D7FC               	bra	u8447
  7213  000A26  F000               	nop	
  7214                           
  7215                           ;UI.c: 104: lcdInst(0b10000000);;
  7216  000A28  0E80               	movlw	128
  7217  000A2A  EC67  F027         	call	_lcdInst
  7218                           
  7219                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7220  000A2E  0E91               	movlw	low STR_3
  7221  000A30  0100               	movlb	0	; () banked
  7222  000A32  6F8E               	movwf	printf@f& (0+255),b
  7223  000A34  0EFB               	movlw	high STR_3
  7224  000A36  0100               	movlb	0	; () banked
  7225  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  7226  000A3A  C0EC  F090         	movff	_log,?_printf+2
  7227  000A3E  C0ED  F091         	movff	_log+1,?_printf+3
  7228  000A42  ECB8  F008         	call	_printf	;wreg free
  7229                           
  7230                           ;UI.c: 106: lcdInst(0b11000000);;
  7231  000A46  0EC0               	movlw	192
  7232  000A48  EC67  F027         	call	_lcdInst
  7233                           
  7234                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7235  000A4C  0E4A               	movlw	low STR_4
  7236  000A4E  0100               	movlb	0	; () banked
  7237  000A50  6F8E               	movwf	printf@f& (0+255),b
  7238  000A52  0EFE               	movlw	high STR_4
  7239  000A54  0100               	movlb	0	; () banked
  7240  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  7241  000A58  ECB8  F008         	call	_printf	;wreg free
  7242  000A5C                     l8059:
  7243  000A5C  0E00               	movlw	0
  7244  000A5E  0100               	movlb	0	; () banked
  7245  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  7246  000A62                     l8061:
  7247                           
  7248                           ; BSR set to: 0
  7249  000A62  0E63               	movlw	99
  7250  000A64  0100               	movlb	0	; () banked
  7251  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  7252  000A68  D001               	goto	l8065
  7253  000A6A  D00C               	goto	l8069
  7254  000A6C                     l8065:
  7255                           
  7256                           ; BSR set to: 0
  7257  000A6C  0E68               	movlw	104
  7258  000A6E  0100               	movlb	0	; () banked
  7259  000A70  6FC4               	movwf	??_UI& (0+255),b
  7260  000A72  0EE4               	movlw	228
  7261  000A74                     u8457:
  7262  000A74  2EE8               	decfsz	wreg,f,c
  7263  000A76  D7FE               	bra	u8457
  7264  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  7265  000A7A  D7FC               	bra	u8457
  7266  000A7C  F000               	nop	
  7267  000A7E  0100               	movlb	0	; () banked
  7268  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  7269  000A82  D7EF               	goto	l8061
  7270  000A84                     l8069:
  7271                           
  7272                           ; BSR set to: 0
  7273  000A84  0100               	movlb	0	; () banked
  7274  000A86  51F6               	movf	_logstate& (0+255),w,b
  7275  000A88  0100               	movlb	0	; () banked
  7276  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7277  000A8C  B4D8               	btfsc	status,2,c
  7278  000A8E  0012               	return	
  7279  000A90  D7E5               	goto	l8059
  7280  000A92                     l8075:
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;UI.c: 111: else{
  7284                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7285  000A92  0E01               	movlw	1
  7286  000A94  EC67  F027         	call	_lcdInst
  7287  000A98  0E68               	movlw	104
  7288  000A9A  0100               	movlb	0	; () banked
  7289  000A9C  6FC4               	movwf	??_UI& (0+255),b
  7290  000A9E  0EE4               	movlw	228
  7291  000AA0                     u8467:
  7292  000AA0  2EE8               	decfsz	wreg,f,c
  7293  000AA2  D7FE               	bra	u8467
  7294  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  7295  000AA6  D7FC               	bra	u8467
  7296  000AA8  F000               	nop	
  7297                           
  7298                           ;UI.c: 113: lcdInst(0b10000000);;
  7299  000AAA  0E80               	movlw	128
  7300  000AAC  EC67  F027         	call	_lcdInst
  7301                           
  7302                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7303  000AB0  0E91               	movlw	low STR_3
  7304  000AB2  0100               	movlb	0	; () banked
  7305  000AB4  6F8E               	movwf	printf@f& (0+255),b
  7306  000AB6  0EFB               	movlw	high STR_3
  7307  000AB8  0100               	movlb	0	; () banked
  7308  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  7309  000ABC  C0EC  F090         	movff	_log,?_printf+2
  7310  000AC0  C0ED  F091         	movff	_log+1,?_printf+3
  7311  000AC4  ECB8  F008         	call	_printf	;wreg free
  7312                           
  7313                           ;UI.c: 115: lcdInst(0b11000000);;
  7314  000AC8  0EC0               	movlw	192
  7315  000ACA  EC67  F027         	call	_lcdInst
  7316                           
  7317                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7318  000ACE  0EE6               	movlw	low STR_6
  7319  000AD0  0100               	movlb	0	; () banked
  7320  000AD2  6F8E               	movwf	printf@f& (0+255),b
  7321  000AD4  0EFD               	movlw	high STR_6
  7322  000AD6  0100               	movlb	0	; () banked
  7323  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7324  000ADA  ECB8  F008         	call	_printf	;wreg free
  7325                           
  7326                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7327  000ADE  0E00               	movlw	0
  7328  000AE0  0100               	movlb	0	; () banked
  7329  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  7330  000AE4                     l8089:
  7331                           
  7332                           ; BSR set to: 0
  7333  000AE4  0E63               	movlw	99
  7334  000AE6  0100               	movlb	0	; () banked
  7335  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  7336  000AEA  D001               	goto	l8093
  7337  000AEC  D00C               	goto	l8097
  7338  000AEE                     l8093:
  7339                           
  7340                           ; BSR set to: 0
  7341  000AEE  0E68               	movlw	104
  7342  000AF0  0100               	movlb	0	; () banked
  7343  000AF2  6FC4               	movwf	??_UI& (0+255),b
  7344  000AF4  0EE4               	movlw	228
  7345  000AF6                     u8477:
  7346  000AF6  2EE8               	decfsz	wreg,f,c
  7347  000AF8  D7FE               	bra	u8477
  7348  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  7349  000AFC  D7FC               	bra	u8477
  7350  000AFE  F000               	nop	
  7351  000B00  0100               	movlb	0	; () banked
  7352  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  7353  000B04  D7EF               	goto	l8089
  7354  000B06                     l8097:
  7355                           
  7356                           ; BSR set to: 0
  7357  000B06  0100               	movlb	0	; () banked
  7358  000B08  51F6               	movf	_logstate& (0+255),w,b
  7359  000B0A  0100               	movlb	0	; () banked
  7360  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7361  000B0E  B4D8               	btfsc	status,2,c
  7362  000B10  0012               	return	
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7366                           
  7367                           ; BSR set to: 0
  7368                           
  7369                           ; BSR set to: 0
  7370  000B12  0E00               	movlw	0
  7371  000B14  0100               	movlb	0	; () banked
  7372  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  7373  000B18                     l8103:
  7374                           
  7375                           ; BSR set to: 0
  7376  000B18  0E63               	movlw	99
  7377  000B1A  0100               	movlb	0	; () banked
  7378  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  7379  000B1E  D001               	goto	l8107
  7380  000B20  D00C               	goto	l8111
  7381  000B22                     l8107:
  7382                           
  7383                           ; BSR set to: 0
  7384  000B22  0E68               	movlw	104
  7385  000B24  0100               	movlb	0	; () banked
  7386  000B26  6FC4               	movwf	??_UI& (0+255),b
  7387  000B28  0EE4               	movlw	228
  7388  000B2A                     u8487:
  7389  000B2A  2EE8               	decfsz	wreg,f,c
  7390  000B2C  D7FE               	bra	u8487
  7391  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  7392  000B30  D7FC               	bra	u8487
  7393  000B32  F000               	nop	
  7394  000B34  0100               	movlb	0	; () banked
  7395  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  7396  000B38  D7EF               	goto	l8103
  7397  000B3A                     l8111:
  7398                           
  7399                           ; BSR set to: 0
  7400  000B3A  0100               	movlb	0	; () banked
  7401  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7402  000B3E  0100               	movlb	0	; () banked
  7403  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7404  000B42  B4D8               	btfsc	status,2,c
  7405  000B44  0012               	return	
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7409                           
  7410                           ; BSR set to: 0
  7411                           
  7412                           ; BSR set to: 0
  7413  000B46  0E01               	movlw	1
  7414  000B48  EC67  F027         	call	_lcdInst
  7415  000B4C  0E68               	movlw	104
  7416  000B4E  0100               	movlb	0	; () banked
  7417  000B50  6FC4               	movwf	??_UI& (0+255),b
  7418  000B52  0EE4               	movlw	228
  7419  000B54                     u8497:
  7420  000B54  2EE8               	decfsz	wreg,f,c
  7421  000B56  D7FE               	bra	u8497
  7422  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7423  000B5A  D7FC               	bra	u8497
  7424  000B5C  F000               	nop	
  7425                           
  7426                           ;UI.c: 122: lcdInst(0b10000000);;
  7427  000B5E  0E80               	movlw	128
  7428  000B60  EC67  F027         	call	_lcdInst
  7429                           
  7430                           ;UI.c: 123: printf("START:");
  7431  000B64  0EC4               	movlw	low STR_7
  7432  000B66  0100               	movlb	0	; () banked
  7433  000B68  6F8E               	movwf	printf@f& (0+255),b
  7434  000B6A  0EFF               	movlw	high STR_7
  7435  000B6C  0100               	movlb	0	; () banked
  7436  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7437  000B70  ECB8  F008         	call	_printf	;wreg free
  7438                           
  7439                           ;UI.c: 124: lcdInst(0b11000000);;
  7440  000B74  0EC0               	movlw	192
  7441  000B76  EC67  F027         	call	_lcdInst
  7442                           
  7443                           ;UI.c: 125: char month[] = "MMM";
  7444  000B7A  C135  F0D6         	movff	UI@F3228,UI@month
  7445  000B7E  C136  F0D7         	movff	UI@F3228+1,UI@month+1
  7446  000B82  C137  F0D8         	movff	UI@F3228+2,UI@month+2
  7447  000B86  C138  F0D9         	movff	UI@F3228+3,UI@month+3
  7448                           
  7449                           ;UI.c: 126: switch(log_startTime[5]){
  7450  000B8A  D0C3               	goto	l8155
  7451  000B8C                     l8127:
  7452                           
  7453                           ;UI.c: 128: strcpy(month, "JAN");
  7454  000B8C  0ED6               	movlw	low UI@month
  7455  000B8E  0100               	movlb	0	; () banked
  7456  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7457  000B92  0E00               	movlw	high UI@month
  7458  000B94  0100               	movlb	0	; () banked
  7459  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7460  000B98  0EDB               	movlw	low STR_8
  7461  000B9A  0100               	movlb	0	; () banked
  7462  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7463  000B9E  0EFF               	movlw	high STR_8
  7464  000BA0  0100               	movlb	0	; () banked
  7465  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7466  000BA4  ECD1  F024         	call	_strcpy	;wreg free
  7467                           
  7468                           ;UI.c: 129: break;
  7469  000BA8  D0E6               	goto	l8157
  7470  000BAA                     l8129:
  7471                           
  7472                           ;UI.c: 131: strcpy(month, "FEB");
  7473  000BAA  0ED6               	movlw	low UI@month
  7474  000BAC  0100               	movlb	0	; () banked
  7475  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7476  000BB0  0E00               	movlw	high UI@month
  7477  000BB2  0100               	movlb	0	; () banked
  7478  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7479  000BB6  0ECB               	movlw	low STR_9
  7480  000BB8  0100               	movlb	0	; () banked
  7481  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7482  000BBC  0EFF               	movlw	high STR_9
  7483  000BBE  0100               	movlb	0	; () banked
  7484  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7485  000BC2  ECD1  F024         	call	_strcpy	;wreg free
  7486                           
  7487                           ;UI.c: 132: break;
  7488  000BC6  D0D7               	goto	l8157
  7489  000BC8                     l8131:
  7490                           
  7491                           ;UI.c: 134: strcpy(month, "MAR");
  7492  000BC8  0ED6               	movlw	low UI@month
  7493  000BCA  0100               	movlb	0	; () banked
  7494  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7495  000BCE  0E00               	movlw	high UI@month
  7496  000BD0  0100               	movlb	0	; () banked
  7497  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7498  000BD4  0EE7               	movlw	low STR_10
  7499  000BD6  0100               	movlb	0	; () banked
  7500  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7501  000BDA  0EFF               	movlw	high STR_10
  7502  000BDC  0100               	movlb	0	; () banked
  7503  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7504  000BE0  ECD1  F024         	call	_strcpy	;wreg free
  7505                           
  7506                           ;UI.c: 135: break;
  7507  000BE4  D0C8               	goto	l8157
  7508  000BE6                     l8133:
  7509                           
  7510                           ;UI.c: 137: strcpy(month, "APR");
  7511  000BE6  0ED6               	movlw	low UI@month
  7512  000BE8  0100               	movlb	0	; () banked
  7513  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7514  000BEC  0E00               	movlw	high UI@month
  7515  000BEE  0100               	movlb	0	; () banked
  7516  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7517  000BF2  0EEB               	movlw	low STR_11
  7518  000BF4  0100               	movlb	0	; () banked
  7519  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7520  000BF8  0EFF               	movlw	high STR_11
  7521  000BFA  0100               	movlb	0	; () banked
  7522  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7523  000BFE  ECD1  F024         	call	_strcpy	;wreg free
  7524                           
  7525                           ;UI.c: 138: break;
  7526  000C02  D0B9               	goto	l8157
  7527  000C04                     l8135:
  7528                           
  7529                           ;UI.c: 140: strcpy(month, "MAY");
  7530  000C04  0ED6               	movlw	low UI@month
  7531  000C06  0100               	movlb	0	; () banked
  7532  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7533  000C0A  0E00               	movlw	high UI@month
  7534  000C0C  0100               	movlb	0	; () banked
  7535  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7536  000C10  0EFB               	movlw	low STR_12
  7537  000C12  0100               	movlb	0	; () banked
  7538  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7539  000C16  0EFF               	movlw	high STR_12
  7540  000C18  0100               	movlb	0	; () banked
  7541  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7542  000C1C  ECD1  F024         	call	_strcpy	;wreg free
  7543                           
  7544                           ;UI.c: 141: break;
  7545  000C20  D0AA               	goto	l8157
  7546  000C22                     l8137:
  7547                           
  7548                           ;UI.c: 143: strcpy(month, "JUN");
  7549  000C22  0ED6               	movlw	low UI@month
  7550  000C24  0100               	movlb	0	; () banked
  7551  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7552  000C28  0E00               	movlw	high UI@month
  7553  000C2A  0100               	movlb	0	; () banked
  7554  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7555  000C2E  0EDF               	movlw	low STR_13
  7556  000C30  0100               	movlb	0	; () banked
  7557  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7558  000C34  0EFF               	movlw	high STR_13
  7559  000C36  0100               	movlb	0	; () banked
  7560  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7561  000C3A  ECD1  F024         	call	_strcpy	;wreg free
  7562                           
  7563                           ;UI.c: 144: break;
  7564  000C3E  D09B               	goto	l8157
  7565  000C40                     l8139:
  7566                           
  7567                           ;UI.c: 146: strcpy(month, "JUL");
  7568  000C40  0ED6               	movlw	low UI@month
  7569  000C42  0100               	movlb	0	; () banked
  7570  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7571  000C46  0E00               	movlw	high UI@month
  7572  000C48  0100               	movlb	0	; () banked
  7573  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7574  000C4C  0ED7               	movlw	low STR_14
  7575  000C4E  0100               	movlb	0	; () banked
  7576  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7577  000C52  0EFF               	movlw	high STR_14
  7578  000C54  0100               	movlb	0	; () banked
  7579  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7580  000C58  ECD1  F024         	call	_strcpy	;wreg free
  7581                           
  7582                           ;UI.c: 147: break;
  7583  000C5C  D08C               	goto	l8157
  7584  000C5E                     l8141:
  7585                           
  7586                           ;UI.c: 149: strcpy(month, "AUG");
  7587  000C5E  0ED6               	movlw	low UI@month
  7588  000C60  0100               	movlb	0	; () banked
  7589  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7590  000C64  0E00               	movlw	high UI@month
  7591  000C66  0100               	movlb	0	; () banked
  7592  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7593  000C6A  0ED3               	movlw	low STR_15
  7594  000C6C  0100               	movlb	0	; () banked
  7595  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7596  000C70  0EFF               	movlw	high STR_15
  7597  000C72  0100               	movlb	0	; () banked
  7598  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7599  000C76  ECD1  F024         	call	_strcpy	;wreg free
  7600                           
  7601                           ;UI.c: 150: break;
  7602  000C7A  D07D               	goto	l8157
  7603  000C7C                     l8143:
  7604                           
  7605                           ;UI.c: 152: strcpy(month, "SEP");
  7606  000C7C  0ED6               	movlw	low UI@month
  7607  000C7E  0100               	movlb	0	; () banked
  7608  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7609  000C82  0E00               	movlw	high UI@month
  7610  000C84  0100               	movlb	0	; () banked
  7611  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7612  000C88  0EE3               	movlw	low STR_16
  7613  000C8A  0100               	movlb	0	; () banked
  7614  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7615  000C8E  0EFF               	movlw	high STR_16
  7616  000C90  0100               	movlb	0	; () banked
  7617  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7618  000C94  ECD1  F024         	call	_strcpy	;wreg free
  7619                           
  7620                           ;UI.c: 153: break;
  7621  000C98  D06E               	goto	l8157
  7622  000C9A                     l8145:
  7623                           
  7624                           ;UI.c: 155: strcpy(month, "OCT");
  7625  000C9A  0ED6               	movlw	low UI@month
  7626  000C9C  0100               	movlb	0	; () banked
  7627  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7628  000CA0  0E00               	movlw	high UI@month
  7629  000CA2  0100               	movlb	0	; () banked
  7630  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7631  000CA6  0EF3               	movlw	low STR_17
  7632  000CA8  0100               	movlb	0	; () banked
  7633  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7634  000CAC  0EFF               	movlw	high STR_17
  7635  000CAE  0100               	movlb	0	; () banked
  7636  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7637  000CB2  ECD1  F024         	call	_strcpy	;wreg free
  7638                           
  7639                           ;UI.c: 156: break;
  7640  000CB6  D05F               	goto	l8157
  7641  000CB8                     l8147:
  7642                           
  7643                           ;UI.c: 158: strcpy(month, "NOV");
  7644  000CB8  0ED6               	movlw	low UI@month
  7645  000CBA  0100               	movlb	0	; () banked
  7646  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7647  000CBE  0E00               	movlw	high UI@month
  7648  000CC0  0100               	movlb	0	; () banked
  7649  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7650  000CC4  0EF7               	movlw	low STR_18
  7651  000CC6  0100               	movlb	0	; () banked
  7652  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7653  000CCA  0EFF               	movlw	high STR_18
  7654  000CCC  0100               	movlb	0	; () banked
  7655  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7656  000CD0  ECD1  F024         	call	_strcpy	;wreg free
  7657                           
  7658                           ;UI.c: 159: break;
  7659  000CD4  D050               	goto	l8157
  7660  000CD6                     l8149:
  7661                           
  7662                           ;UI.c: 161: strcpy(month, "DEC");
  7663  000CD6  0ED6               	movlw	low UI@month
  7664  000CD8  0100               	movlb	0	; () banked
  7665  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7666  000CDC  0E00               	movlw	high UI@month
  7667  000CDE  0100               	movlb	0	; () banked
  7668  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7669  000CE2  0ECF               	movlw	low STR_19
  7670  000CE4  0100               	movlb	0	; () banked
  7671  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7672  000CE8  0EFF               	movlw	high STR_19
  7673  000CEA  0100               	movlb	0	; () banked
  7674  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7675  000CEE  ECD1  F024         	call	_strcpy	;wreg free
  7676                           
  7677                           ;UI.c: 162: break;
  7678  000CF2  D041               	goto	l8157
  7679  000CF4                     l8151:
  7680                           
  7681                           ;UI.c: 164: strcpy(month, "ERR");
  7682  000CF4  0ED6               	movlw	low UI@month
  7683  000CF6  0100               	movlb	0	; () banked
  7684  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7685  000CFA  0E00               	movlw	high UI@month
  7686  000CFC  0100               	movlb	0	; () banked
  7687  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7688  000D00  0EEF               	movlw	low STR_20
  7689  000D02  0100               	movlb	0	; () banked
  7690  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7691  000D06  0EFF               	movlw	high STR_20
  7692  000D08  0100               	movlb	0	; () banked
  7693  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7694  000D0C  ECD1  F024         	call	_strcpy	;wreg free
  7695                           
  7696                           ;UI.c: 166: }
  7697                           
  7698                           ;UI.c: 165: break;
  7699  000D10  D032               	goto	l8157
  7700  000D12                     l8155:
  7701  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7702  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7703  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7704                           
  7705                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7706                           ; Switch size 1, requested type "space"
  7707                           ; Number of cases is 1, Range of values is 0 to 0
  7708                           ; switch strategies available:
  7709                           ; Name         Instructions Cycles
  7710                           ; simple_byte            4     3 (average)
  7711                           ;	Chosen strategy is simple_byte
  7712  000D1E  0100               	movlb	0	; () banked
  7713  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7714  000D22  0A00               	xorlw	0	; case 0
  7715  000D24  A4D8               	btfss	status,2,c
  7716  000D26  D7E6               	goto	l8151
  7717                           
  7718                           ; BSR set to: 0
  7719                           ; Switch size 1, requested type "space"
  7720                           ; Number of cases is 12, Range of values is 1 to 12
  7721                           ; switch strategies available:
  7722                           ; Name         Instructions Cycles
  7723                           ; simple_byte           37    19 (average)
  7724                           ;	Chosen strategy is simple_byte
  7725  000D28  0100               	movlb	0	; () banked
  7726  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7727  000D2C  0A01               	xorlw	1	; case 1
  7728  000D2E  B4D8               	btfsc	status,2,c
  7729  000D30  D72D               	goto	l8127
  7730  000D32  0A03               	xorlw	3	; case 2
  7731  000D34  B4D8               	btfsc	status,2,c
  7732  000D36  D739               	goto	l8129
  7733  000D38  0A01               	xorlw	1	; case 3
  7734  000D3A  B4D8               	btfsc	status,2,c
  7735  000D3C  D745               	goto	l8131
  7736  000D3E  0A07               	xorlw	7	; case 4
  7737  000D40  B4D8               	btfsc	status,2,c
  7738  000D42  D751               	goto	l8133
  7739  000D44  0A01               	xorlw	1	; case 5
  7740  000D46  B4D8               	btfsc	status,2,c
  7741  000D48  D75D               	goto	l8135
  7742  000D4A  0A03               	xorlw	3	; case 6
  7743  000D4C  B4D8               	btfsc	status,2,c
  7744  000D4E  D769               	goto	l8137
  7745  000D50  0A01               	xorlw	1	; case 7
  7746  000D52  B4D8               	btfsc	status,2,c
  7747  000D54  D775               	goto	l8139
  7748  000D56  0A0F               	xorlw	15	; case 8
  7749  000D58  B4D8               	btfsc	status,2,c
  7750  000D5A  D781               	goto	l8141
  7751  000D5C  0A01               	xorlw	1	; case 9
  7752  000D5E  B4D8               	btfsc	status,2,c
  7753  000D60  D78D               	goto	l8143
  7754  000D62  0A03               	xorlw	3	; case 10
  7755  000D64  B4D8               	btfsc	status,2,c
  7756  000D66  D799               	goto	l8145
  7757  000D68  0A01               	xorlw	1	; case 11
  7758  000D6A  B4D8               	btfsc	status,2,c
  7759  000D6C  D7A5               	goto	l8147
  7760  000D6E  0A07               	xorlw	7	; case 12
  7761  000D70  B4D8               	btfsc	status,2,c
  7762  000D72  D7B1               	goto	l8149
  7763  000D74  D7BF               	goto	l8151
  7764  000D76                     l8157:
  7765                           
  7766                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7767  000D76  0E0A               	movlw	low STR_21
  7768  000D78  0100               	movlb	0	; () banked
  7769  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7770  000D7C  0EFB               	movlw	high STR_21
  7771  000D7E  0100               	movlb	0	; () banked
  7772  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7773  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7774  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7775  000D8A  0ED6               	movlw	low UI@month
  7776  000D8C  0100               	movlb	0	; () banked
  7777  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7778  000D90  0E00               	movlw	high UI@month
  7779  000D92  0100               	movlb	0	; () banked
  7780  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7781  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7782  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7783  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7784  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7785  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7786  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7787  000DAE  ECB8  F008         	call	_printf	;wreg free
  7788                           
  7789                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7790  000DB2  0E00               	movlw	0
  7791  000DB4  0100               	movlb	0	; () banked
  7792  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7793  000DB8                     l8161:
  7794                           
  7795                           ; BSR set to: 0
  7796  000DB8  0E63               	movlw	99
  7797  000DBA  0100               	movlb	0	; () banked
  7798  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7799  000DBE  D001               	goto	l8165
  7800  000DC0  D00C               	goto	l8169
  7801  000DC2                     l8165:
  7802                           
  7803                           ; BSR set to: 0
  7804  000DC2  0E68               	movlw	104
  7805  000DC4  0100               	movlb	0	; () banked
  7806  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7807  000DC8  0EE4               	movlw	228
  7808  000DCA                     u8507:
  7809  000DCA  2EE8               	decfsz	wreg,f,c
  7810  000DCC  D7FE               	bra	u8507
  7811  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7812  000DD0  D7FC               	bra	u8507
  7813  000DD2  F000               	nop	
  7814  000DD4  0100               	movlb	0	; () banked
  7815  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7816  000DD8  D7EF               	goto	l8161
  7817  000DDA                     l8169:
  7818                           
  7819                           ; BSR set to: 0
  7820  000DDA  0100               	movlb	0	; () banked
  7821  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7822  000DDE  0100               	movlb	0	; () banked
  7823  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7824  000DE2  B4D8               	btfsc	status,2,c
  7825  000DE4  0012               	return	
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7829                           
  7830                           ; BSR set to: 0
  7831                           
  7832                           ; BSR set to: 0
  7833  000DE6  0E00               	movlw	0
  7834  000DE8  0100               	movlb	0	; () banked
  7835  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7836  000DEC                     l8175:
  7837                           
  7838                           ; BSR set to: 0
  7839  000DEC  0E63               	movlw	99
  7840  000DEE  0100               	movlb	0	; () banked
  7841  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7842  000DF2  D001               	goto	l8179
  7843  000DF4  D00C               	goto	l8183
  7844  000DF6                     l8179:
  7845                           
  7846                           ; BSR set to: 0
  7847  000DF6  0E68               	movlw	104
  7848  000DF8  0100               	movlb	0	; () banked
  7849  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7850  000DFC  0EE4               	movlw	228
  7851  000DFE                     u8517:
  7852  000DFE  2EE8               	decfsz	wreg,f,c
  7853  000E00  D7FE               	bra	u8517
  7854  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7855  000E04  D7FC               	bra	u8517
  7856  000E06  F000               	nop	
  7857  000E08  0100               	movlb	0	; () banked
  7858  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7859  000E0C  D7EF               	goto	l8175
  7860  000E0E                     l8183:
  7861                           
  7862                           ; BSR set to: 0
  7863  000E0E  0100               	movlb	0	; () banked
  7864  000E10  51F6               	movf	_logstate& (0+255),w,b
  7865  000E12  0100               	movlb	0	; () banked
  7866  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7867  000E16  B4D8               	btfsc	status,2,c
  7868  000E18  0012               	return	
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7872                           
  7873                           ; BSR set to: 0
  7874                           
  7875                           ; BSR set to: 0
  7876  000E1A  0E01               	movlw	1
  7877  000E1C  EC67  F027         	call	_lcdInst
  7878  000E20  0E68               	movlw	104
  7879  000E22  0100               	movlb	0	; () banked
  7880  000E24  6FC4               	movwf	??_UI& (0+255),b
  7881  000E26  0EE4               	movlw	228
  7882  000E28                     u8527:
  7883  000E28  2EE8               	decfsz	wreg,f,c
  7884  000E2A  D7FE               	bra	u8527
  7885  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7886  000E2E  D7FC               	bra	u8527
  7887  000E30  F000               	nop	
  7888                           
  7889                           ;UI.c: 173: lcdInst(0b10000000);;
  7890  000E32  0E80               	movlw	128
  7891  000E34  EC67  F027         	call	_lcdInst
  7892                           
  7893                           ;UI.c: 174: printf("DURATION:");
  7894  000E38  0E9B               	movlw	low STR_22
  7895  000E3A  0100               	movlb	0	; () banked
  7896  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7897  000E3E  0EFF               	movlw	high STR_22
  7898  000E40  0100               	movlb	0	; () banked
  7899  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7900  000E44  ECB8  F008         	call	_printf	;wreg free
  7901                           
  7902                           ;UI.c: 175: lcdInst(0b11000000);;
  7903  000E48  0EC0               	movlw	192
  7904  000E4A  EC67  F027         	call	_lcdInst
  7905                           
  7906                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7907  000E4E  0E0E               	movlw	14
  7908  000E50  0100               	movlb	0	; () banked
  7909  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7910  000E54  0E10               	movlw	16
  7911  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7912  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7913  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7914  000E60  ECE9  F01F         	call	___awmod	;wreg free
  7915  000E64  C080  F0C6         	movff	?___awmod,_UI$2331
  7916  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2331+1
  7917                           
  7918                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7919  000E6C  0E19               	movlw	low STR_23
  7920  000E6E  0100               	movlb	0	; () banked
  7921  000E70  6F8E               	movwf	printf@f& (0+255),b
  7922  000E72  0EFF               	movlw	high STR_23
  7923  000E74  0100               	movlb	0	; () banked
  7924  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7925  000E78  0E0E               	movlw	14
  7926  000E7A  0100               	movlb	0	; () banked
  7927  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7928  000E7E  0E10               	movlw	16
  7929  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7930  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7931  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7932  000E8A  ECE9  F01F         	call	___awmod	;wreg free
  7933  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7934  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7935  000E96  0E00               	movlw	0
  7936  000E98  0100               	movlb	0	; () banked
  7937  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7938  000E9C  0E3C               	movlw	60
  7939  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7940  000EA0  ECD7  F01E         	call	___awdiv	;wreg free
  7941  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7942  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7943  000EAC  C0C6  F080         	movff	_UI$2331,___awmod@dividend
  7944  000EB0  C0C7  F081         	movff	_UI$2331+1,___awmod@dividend+1
  7945  000EB4  0E00               	movlw	0
  7946  000EB6  0100               	movlb	0	; () banked
  7947  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7948  000EBA  0E3C               	movlw	60
  7949  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7950  000EBE  ECE9  F01F         	call	___awmod	;wreg free
  7951  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7952  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7953  000ECA  ECB8  F008         	call	_printf	;wreg free
  7954                           
  7955                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7956  000ECE  0E00               	movlw	0
  7957  000ED0  0100               	movlb	0	; () banked
  7958  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7959  000ED4                     l8203:
  7960                           
  7961                           ; BSR set to: 0
  7962  000ED4  0E63               	movlw	99
  7963  000ED6  0100               	movlb	0	; () banked
  7964  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7965  000EDA  D001               	goto	l8207
  7966  000EDC  D00C               	goto	l8211
  7967  000EDE                     l8207:
  7968                           
  7969                           ; BSR set to: 0
  7970  000EDE  0E68               	movlw	104
  7971  000EE0  0100               	movlb	0	; () banked
  7972  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7973  000EE4  0EE4               	movlw	228
  7974  000EE6                     u8537:
  7975  000EE6  2EE8               	decfsz	wreg,f,c
  7976  000EE8  D7FE               	bra	u8537
  7977  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7978  000EEC  D7FC               	bra	u8537
  7979  000EEE  F000               	nop	
  7980  000EF0  0100               	movlb	0	; () banked
  7981  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7982  000EF4  D7EF               	goto	l8203
  7983  000EF6                     l8211:
  7984                           
  7985                           ; BSR set to: 0
  7986  000EF6  0100               	movlb	0	; () banked
  7987  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7988  000EFA  0100               	movlb	0	; () banked
  7989  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7990  000EFE  B4D8               	btfsc	status,2,c
  7991  000F00  0012               	return	
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7995                           
  7996                           ; BSR set to: 0
  7997                           
  7998                           ; BSR set to: 0
  7999  000F02  0E00               	movlw	0
  8000  000F04  0100               	movlb	0	; () banked
  8001  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  8002  000F08                     l8217:
  8003                           
  8004                           ; BSR set to: 0
  8005  000F08  0E63               	movlw	99
  8006  000F0A  0100               	movlb	0	; () banked
  8007  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  8008  000F0E  D001               	goto	l8221
  8009  000F10  D00C               	goto	l8225
  8010  000F12                     l8221:
  8011                           
  8012                           ; BSR set to: 0
  8013  000F12  0E68               	movlw	104
  8014  000F14  0100               	movlb	0	; () banked
  8015  000F16  6FC4               	movwf	??_UI& (0+255),b
  8016  000F18  0EE4               	movlw	228
  8017  000F1A                     u8547:
  8018  000F1A  2EE8               	decfsz	wreg,f,c
  8019  000F1C  D7FE               	bra	u8547
  8020  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  8021  000F20  D7FC               	bra	u8547
  8022  000F22  F000               	nop	
  8023  000F24  0100               	movlb	0	; () banked
  8024  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  8025  000F28  D7EF               	goto	l8217
  8026  000F2A                     l8225:
  8027                           
  8028                           ; BSR set to: 0
  8029  000F2A  0100               	movlb	0	; () banked
  8030  000F2C  51F6               	movf	_logstate& (0+255),w,b
  8031  000F2E  0100               	movlb	0	; () banked
  8032  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8033  000F32  B4D8               	btfsc	status,2,c
  8034  000F34  0012               	return	
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8038                           
  8039                           ; BSR set to: 0
  8040                           
  8041                           ; BSR set to: 0
  8042  000F36  0E01               	movlw	1
  8043  000F38  EC67  F027         	call	_lcdInst
  8044  000F3C  0E68               	movlw	104
  8045  000F3E  0100               	movlb	0	; () banked
  8046  000F40  6FC4               	movwf	??_UI& (0+255),b
  8047  000F42  0EE4               	movlw	228
  8048  000F44                     u8557:
  8049  000F44  2EE8               	decfsz	wreg,f,c
  8050  000F46  D7FE               	bra	u8557
  8051  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  8052  000F4A  D7FC               	bra	u8557
  8053  000F4C  F000               	nop	
  8054                           
  8055                           ;UI.c: 182: lcdInst(0b10000000);;
  8056  000F4E  0E80               	movlw	128
  8057  000F50  EC67  F027         	call	_lcdInst
  8058                           
  8059                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8060  000F54  0E3C               	movlw	low STR_24
  8061  000F56  0100               	movlb	0	; () banked
  8062  000F58  6F8E               	movwf	printf@f& (0+255),b
  8063  000F5A  0EFD               	movlw	high STR_24
  8064  000F5C  0100               	movlb	0	; () banked
  8065  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8066  000F60  ECB8  F008         	call	_printf	;wreg free
  8067                           
  8068                           ;UI.c: 184: lcdInst(0b11000000);;
  8069  000F64  0EC0               	movlw	192
  8070  000F66  EC67  F027         	call	_lcdInst
  8071                           
  8072                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8073  000F6A  0E19               	movlw	low STR_25
  8074  000F6C  0100               	movlb	0	; () banked
  8075  000F6E  6F8E               	movwf	printf@f& (0+255),b
  8076  000F70  0EFE               	movlw	high STR_25
  8077  000F72  0100               	movlb	0	; () banked
  8078  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  8079  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8080  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8081  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8082  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8083  000F86  ECB8  F008         	call	_printf	;wreg free
  8084                           
  8085                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8086  000F8A  0E00               	movlw	0
  8087  000F8C  0100               	movlb	0	; () banked
  8088  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  8089  000F90                     l8243:
  8090                           
  8091                           ; BSR set to: 0
  8092  000F90  0E63               	movlw	99
  8093  000F92  0100               	movlb	0	; () banked
  8094  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  8095  000F96  D001               	goto	l8247
  8096  000F98  D00C               	goto	l8251
  8097  000F9A                     l8247:
  8098                           
  8099                           ; BSR set to: 0
  8100  000F9A  0E68               	movlw	104
  8101  000F9C  0100               	movlb	0	; () banked
  8102  000F9E  6FC4               	movwf	??_UI& (0+255),b
  8103  000FA0  0EE4               	movlw	228
  8104  000FA2                     u8567:
  8105  000FA2  2EE8               	decfsz	wreg,f,c
  8106  000FA4  D7FE               	bra	u8567
  8107  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  8108  000FA8  D7FC               	bra	u8567
  8109  000FAA  F000               	nop	
  8110  000FAC  0100               	movlb	0	; () banked
  8111  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  8112  000FB0  D7EF               	goto	l8243
  8113  000FB2                     l8251:
  8114                           
  8115                           ; BSR set to: 0
  8116  000FB2  0100               	movlb	0	; () banked
  8117  000FB4  51F6               	movf	_logstate& (0+255),w,b
  8118  000FB6  0100               	movlb	0	; () banked
  8119  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8120  000FBA  B4D8               	btfsc	status,2,c
  8121  000FBC  0012               	return	
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8125                           
  8126                           ; BSR set to: 0
  8127                           
  8128                           ; BSR set to: 0
  8129  000FBE  0E00               	movlw	0
  8130  000FC0  0100               	movlb	0	; () banked
  8131  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  8132  000FC4                     l8257:
  8133                           
  8134                           ; BSR set to: 0
  8135  000FC4  0E63               	movlw	99
  8136  000FC6  0100               	movlb	0	; () banked
  8137  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  8138  000FCA  D001               	goto	l8261
  8139  000FCC  D00C               	goto	l8265
  8140  000FCE                     l8261:
  8141                           
  8142                           ; BSR set to: 0
  8143  000FCE  0E68               	movlw	104
  8144  000FD0  0100               	movlb	0	; () banked
  8145  000FD2  6FC4               	movwf	??_UI& (0+255),b
  8146  000FD4  0EE4               	movlw	228
  8147  000FD6                     u8577:
  8148  000FD6  2EE8               	decfsz	wreg,f,c
  8149  000FD8  D7FE               	bra	u8577
  8150  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  8151  000FDC  D7FC               	bra	u8577
  8152  000FDE  F000               	nop	
  8153  000FE0  0100               	movlb	0	; () banked
  8154  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  8155  000FE4  D7EF               	goto	l8257
  8156  000FE6                     l8265:
  8157                           
  8158                           ; BSR set to: 0
  8159  000FE6  0100               	movlb	0	; () banked
  8160  000FE8  51F6               	movf	_logstate& (0+255),w,b
  8161  000FEA  0100               	movlb	0	; () banked
  8162  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8163  000FEE  B4D8               	btfsc	status,2,c
  8164  000FF0  0012               	return	
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8168                           
  8169                           ; BSR set to: 0
  8170                           
  8171                           ; BSR set to: 0
  8172  000FF2  0E01               	movlw	1
  8173  000FF4  EC67  F027         	call	_lcdInst
  8174  000FF8  0E68               	movlw	104
  8175  000FFA  0100               	movlb	0	; () banked
  8176  000FFC  6FC4               	movwf	??_UI& (0+255),b
  8177  000FFE  0EE4               	movlw	228
  8178  001000                     u8587:
  8179  001000  2EE8               	decfsz	wreg,f,c
  8180  001002  D7FE               	bra	u8587
  8181  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  8182  001006  D7FC               	bra	u8587
  8183  001008  F000               	nop	
  8184                           
  8185                           ;UI.c: 191: lcdInst(0b10000000);;
  8186  00100A  0E80               	movlw	128
  8187  00100C  EC67  F027         	call	_lcdInst
  8188                           
  8189                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8190  001010  0E4D               	movlw	low STR_26
  8191  001012  0100               	movlb	0	; () banked
  8192  001014  6F8E               	movwf	printf@f& (0+255),b
  8193  001016  0EFD               	movlw	high STR_26
  8194  001018  0100               	movlb	0	; () banked
  8195  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8196  00101C  ECB8  F008         	call	_printf	;wreg free
  8197                           
  8198                           ;UI.c: 193: lcdInst(0b11000000);;
  8199  001020  0EC0               	movlw	192
  8200  001022  EC67  F027         	call	_lcdInst
  8201                           
  8202                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8203  001026  0E08               	movlw	low STR_27
  8204  001028  0100               	movlb	0	; () banked
  8205  00102A  6F8E               	movwf	printf@f& (0+255),b
  8206  00102C  0EFE               	movlw	high STR_27
  8207  00102E  0100               	movlb	0	; () banked
  8208  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  8209  001032  C071  F090         	movff	_log_count_can_no_lab,?_printf+2
  8210  001036  C072  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8211  00103A  C073  F092         	movff	_log_count_can_w_lab,?_printf+4
  8212  00103E  C074  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8213  001042  ECB8  F008         	call	_printf	;wreg free
  8214                           
  8215                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8216  001046  0E00               	movlw	0
  8217  001048  0100               	movlb	0	; () banked
  8218  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  8219  00104C                     l8283:
  8220                           
  8221                           ; BSR set to: 0
  8222  00104C  0E63               	movlw	99
  8223  00104E  0100               	movlb	0	; () banked
  8224  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  8225  001052  D001               	goto	l8287
  8226  001054  D00C               	goto	l8291
  8227  001056                     l8287:
  8228                           
  8229                           ; BSR set to: 0
  8230  001056  0E68               	movlw	104
  8231  001058  0100               	movlb	0	; () banked
  8232  00105A  6FC4               	movwf	??_UI& (0+255),b
  8233  00105C  0EE4               	movlw	228
  8234  00105E                     u8597:
  8235  00105E  2EE8               	decfsz	wreg,f,c
  8236  001060  D7FE               	bra	u8597
  8237  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  8238  001064  D7FC               	bra	u8597
  8239  001066  F000               	nop	
  8240  001068  0100               	movlb	0	; () banked
  8241  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  8242  00106C  D7EF               	goto	l8283
  8243  00106E                     l8291:
  8244                           
  8245                           ; BSR set to: 0
  8246  00106E  0100               	movlb	0	; () banked
  8247  001070  51F6               	movf	_logstate& (0+255),w,b
  8248  001072  0100               	movlb	0	; () banked
  8249  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8250  001076  B4D8               	btfsc	status,2,c
  8251  001078  0012               	return	
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8255                           
  8256                           ; BSR set to: 0
  8257                           
  8258                           ; BSR set to: 0
  8259  00107A  0E00               	movlw	0
  8260  00107C  0100               	movlb	0	; () banked
  8261  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  8262  001080                     l8297:
  8263                           
  8264                           ; BSR set to: 0
  8265  001080  0E63               	movlw	99
  8266  001082  0100               	movlb	0	; () banked
  8267  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  8268  001086  D001               	goto	l8301
  8269  001088  D00C               	goto	l8305
  8270  00108A                     l8301:
  8271                           
  8272                           ; BSR set to: 0
  8273  00108A  0E68               	movlw	104
  8274  00108C  0100               	movlb	0	; () banked
  8275  00108E  6FC4               	movwf	??_UI& (0+255),b
  8276  001090  0EE4               	movlw	228
  8277  001092                     u8607:
  8278  001092  2EE8               	decfsz	wreg,f,c
  8279  001094  D7FE               	bra	u8607
  8280  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  8281  001098  D7FC               	bra	u8607
  8282  00109A  F000               	nop	
  8283  00109C  0100               	movlb	0	; () banked
  8284  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  8285  0010A0  D7EF               	goto	l8297
  8286  0010A2                     l8305:
  8287                           
  8288                           ; BSR set to: 0
  8289  0010A2  0100               	movlb	0	; () banked
  8290  0010A4  51F6               	movf	_logstate& (0+255),w,b
  8291  0010A6  0100               	movlb	0	; () banked
  8292  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8293  0010AA  B4D8               	btfsc	status,2,c
  8294  0010AC  0012               	return	
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8298                           
  8299                           ; BSR set to: 0
  8300                           
  8301                           ; BSR set to: 0
  8302  0010AE  0E01               	movlw	1
  8303  0010B0  EC67  F027         	call	_lcdInst
  8304  0010B4  0E68               	movlw	104
  8305  0010B6  0100               	movlb	0	; () banked
  8306  0010B8  6FC4               	movwf	??_UI& (0+255),b
  8307  0010BA  0EE4               	movlw	228
  8308  0010BC                     u8617:
  8309  0010BC  2EE8               	decfsz	wreg,f,c
  8310  0010BE  D7FE               	bra	u8617
  8311  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  8312  0010C2  D7FC               	bra	u8617
  8313  0010C4  F000               	nop	
  8314                           
  8315                           ;UI.c: 200: lcdInst(0b10000000);;
  8316  0010C6  0E80               	movlw	128
  8317  0010C8  EC67  F027         	call	_lcdInst
  8318                           
  8319                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8320  0010CC  0E5E               	movlw	low STR_28
  8321  0010CE  0100               	movlb	0	; () banked
  8322  0010D0  6F8E               	movwf	printf@f& (0+255),b
  8323  0010D2  0EFD               	movlw	high STR_28
  8324  0010D4  0100               	movlb	0	; () banked
  8325  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8326  0010D8  ECB8  F008         	call	_printf	;wreg free
  8327                           
  8328                           ;UI.c: 202: lcdInst(0b11000000);;
  8329  0010DC  0EC0               	movlw	192
  8330  0010DE  EC67  F027         	call	_lcdInst
  8331                           
  8332                           ;UI.c: 203: printf("%d", log_count_total);
  8333  0010E2  0E16               	movlw	low (STR_27+14)
  8334  0010E4  0100               	movlb	0	; () banked
  8335  0010E6  6F8E               	movwf	printf@f& (0+255),b
  8336  0010E8  0EFE               	movlw	high (STR_27+14)
  8337  0010EA  0100               	movlb	0	; () banked
  8338  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8339  0010EE  C075  F090         	movff	_log_count_total,?_printf+2
  8340  0010F2  C076  F091         	movff	_log_count_total+1,?_printf+3
  8341  0010F6  ECB8  F008         	call	_printf	;wreg free
  8342                           
  8343                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8344  0010FA  0E00               	movlw	0
  8345  0010FC  0100               	movlb	0	; () banked
  8346  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  8347  001100                     l8323:
  8348                           
  8349                           ; BSR set to: 0
  8350  001100  0E63               	movlw	99
  8351  001102  0100               	movlb	0	; () banked
  8352  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  8353  001106  D001               	goto	l8327
  8354  001108  D00C               	goto	l8331
  8355  00110A                     l8327:
  8356                           
  8357                           ; BSR set to: 0
  8358  00110A  0E68               	movlw	104
  8359  00110C  0100               	movlb	0	; () banked
  8360  00110E  6FC4               	movwf	??_UI& (0+255),b
  8361  001110  0EE4               	movlw	228
  8362  001112                     u8627:
  8363  001112  2EE8               	decfsz	wreg,f,c
  8364  001114  D7FE               	bra	u8627
  8365  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  8366  001118  D7FC               	bra	u8627
  8367  00111A  F000               	nop	
  8368  00111C  0100               	movlb	0	; () banked
  8369  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  8370  001120  D7EF               	goto	l8323
  8371  001122                     l8331:
  8372                           
  8373                           ; BSR set to: 0
  8374  001122  0100               	movlb	0	; () banked
  8375  001124  51F6               	movf	_logstate& (0+255),w,b
  8376  001126  0100               	movlb	0	; () banked
  8377  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8378  00112A  B4D8               	btfsc	status,2,c
  8379  00112C  0012               	return	
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8383                           
  8384                           ; BSR set to: 0
  8385                           
  8386                           ; BSR set to: 0
  8387  00112E  0E00               	movlw	0
  8388  001130  0100               	movlb	0	; () banked
  8389  001132  6FD5               	movwf	UI@i_448& (0+255),b
  8390  001134                     l8337:
  8391                           
  8392                           ; BSR set to: 0
  8393  001134  0E63               	movlw	99
  8394  001136  0100               	movlb	0	; () banked
  8395  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  8396  00113A  D001               	goto	l8341
  8397  00113C  D00C               	goto	l8345
  8398  00113E                     l8341:
  8399                           
  8400                           ; BSR set to: 0
  8401  00113E  0E68               	movlw	104
  8402  001140  0100               	movlb	0	; () banked
  8403  001142  6FC4               	movwf	??_UI& (0+255),b
  8404  001144  0EE4               	movlw	228
  8405  001146                     u8637:
  8406  001146  2EE8               	decfsz	wreg,f,c
  8407  001148  D7FE               	bra	u8637
  8408  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8409  00114C  D7FC               	bra	u8637
  8410  00114E  F000               	nop	
  8411  001150  0100               	movlb	0	; () banked
  8412  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  8413  001154  D7EF               	goto	l8337
  8414  001156                     l8345:
  8415                           
  8416                           ; BSR set to: 0
  8417  001156  0100               	movlb	0	; () banked
  8418  001158  51F6               	movf	_logstate& (0+255),w,b
  8419  00115A  0100               	movlb	0	; () banked
  8420  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8421  00115E  B4D8               	btfsc	status,2,c
  8422  001160  0012               	return	
  8423  001162                     l8349:
  8424  001162  0100               	movlb	0	; () banked
  8425  001164  51F6               	movf	_logstate& (0+255),w,b
  8426  001166  0100               	movlb	0	; () banked
  8427  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8428  00116A  B4D8               	btfsc	status,2,c
  8429  00116C  0012               	return	
  8430  00116E  D44A               	goto	l8045
  8431  001170                     __end_of_UI:
  8432                           	opt stack 0
  8433                           tblptru	equ	0xFF8
  8434                           tblptrh	equ	0xFF7
  8435                           tblptrl	equ	0xFF6
  8436                           tablat	equ	0xFF5
  8437                           prodh	equ	0xFF4
  8438                           prodl	equ	0xFF3
  8439                           intcon	equ	0xFF2
  8440                           intcon2	equ	0xFF1
  8441                           intcon3	equ	0xFF0
  8442                           postinc0	equ	0xFEE
  8443                           wreg	equ	0xFE8
  8444                           postdec1	equ	0xFE5
  8445                           fsr1l	equ	0xFE1
  8446                           indf2	equ	0xFDF
  8447                           postinc2	equ	0xFDE
  8448                           postdec2	equ	0xFDD
  8449                           fsr2h	equ	0xFDA
  8450                           fsr2l	equ	0xFD9
  8451                           status	equ	0xFD8
  8452                           
  8453 ;; *************** function _printRTC *****************
  8454 ;; Defined at:
  8455 ;;		line 63 in file "RTC.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;		None
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;  i               2   66[BANK0 ] int 
  8460 ;;  INT_time       14   46[BANK0 ] int [7]
  8461 ;;  month           4   62[BANK0 ] unsigned char [4]
  8462 ;;  RTC_month       2   60[BANK0 ] int 
  8463 ;; Return value:  Size  Location     Type
  8464 ;;                  1    wreg      void 
  8465 ;; Registers used:
  8466 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8473 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8474 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;Total ram usage:       25 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:   10
  8479 ;; This function calls:
  8480 ;;		_getRTC
  8481 ;;		_lcdInst
  8482 ;;		_printf
  8483 ;;		_strcpy
  8484 ;; This function is called by:
  8485 ;;		_UI
  8486 ;;		_change_state_to_menu_start
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text24
  8491  0022D6                     __ptext24:
  8492                           	opt stack 0
  8493  0022D6                     _printRTC:
  8494                           	opt stack 18
  8495                           
  8496                           ;RTC.c: 64: getRTC();
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;incstack = 0
  8500  0022D6  EC80  F020         	call	_getRTC	;wreg free
  8501                           
  8502                           ;RTC.c: 65: char month[] = "MMM";
  8503  0022DA  C139  F0BE         	movff	printRTC@F3219,printRTC@month
  8504  0022DE  C13A  F0BF         	movff	printRTC@F3219+1,printRTC@month+1
  8505  0022E2  C13B  F0C0         	movff	printRTC@F3219+2,printRTC@month+2
  8506  0022E6  C13C  F0C1         	movff	printRTC@F3219+3,printRTC@month+3
  8507                           
  8508                           ;RTC.c: 66: int INT_time[7];
  8509                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8510  0022EA  0E00               	movlw	0
  8511  0022EC  0100               	movlb	0	; () banked
  8512  0022EE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8513  0022F0  0E00               	movlw	0
  8514  0022F2  6FC2               	movwf	printRTC@i& (0+255),b
  8515                           
  8516                           ; BSR set to: 0
  8517  0022F4  0100               	movlb	0	; () banked
  8518  0022F6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8519  0022F8  D008               	goto	l6217
  8520  0022FA  0100               	movlb	0	; () banked
  8521  0022FC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8522  0022FE  E146               	bnz	l606
  8523  002300  0E07               	movlw	7
  8524  002302  0100               	movlb	0	; () banked
  8525  002304  5DC2               	subwf	printRTC@i& (0+255),w,b
  8526  002306  B0D8               	btfsc	status,0,c
  8527  002308  D041               	goto	l606
  8528  00230A                     l6217:
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8532  00230A  0E24               	movlw	low _time
  8533  00230C  0100               	movlb	0	; () banked
  8534  00230E  25C2               	addwf	printRTC@i& (0+255),w,b
  8535  002310  6ED9               	movwf	fsr2l,c
  8536  002312  0E01               	movlw	high _time
  8537  002314  0100               	movlb	0	; () banked
  8538  002316  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8539  002318  6EDA               	movwf	fsr2h,c
  8540  00231A  50DF               	movf	indf2,w,c
  8541  00231C  0100               	movlb	0	; () banked
  8542  00231E  6FAB               	movwf	??_printRTC& (0+255),b
  8543  002320  0100               	movlb	0	; () banked
  8544  002322  3BAB               	swapf	??_printRTC& (0+255),f,b
  8545  002324  0E0F               	movlw	15
  8546  002326  17AB               	andwf	??_printRTC& (0+255),f,b
  8547  002328  0E0F               	movlw	15
  8548  00232A  0100               	movlb	0	; () banked
  8549  00232C  17AB               	andwf	??_printRTC& (0+255),f,b
  8550  00232E  0100               	movlb	0	; () banked
  8551  002330  51AB               	movf	??_printRTC& (0+255),w,b
  8552  002332  0D0A               	mullw	10
  8553  002334  0E24               	movlw	low _time
  8554  002336  0100               	movlb	0	; () banked
  8555  002338  25C2               	addwf	printRTC@i& (0+255),w,b
  8556  00233A  6ED9               	movwf	fsr2l,c
  8557  00233C  0E01               	movlw	high _time
  8558  00233E  0100               	movlb	0	; () banked
  8559  002340  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8560  002342  6EDA               	movwf	fsr2h,c
  8561  002344  50DF               	movf	indf2,w,c
  8562  002346  0B0F               	andlw	15
  8563  002348  0100               	movlb	0	; () banked
  8564  00234A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8565  00234C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8566  00234E  50F3               	movf	prodl,w,c
  8567  002350  0100               	movlb	0	; () banked
  8568  002352  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8569  002354  50F4               	movf	prodh,w,c
  8570  002356  0100               	movlb	0	; () banked
  8571  002358  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8572  00235A  90D8               	bcf	status,0,c
  8573  00235C  0100               	movlb	0	; () banked
  8574  00235E  35C2               	rlcf	printRTC@i& (0+255),w,b
  8575  002360  6ED9               	movwf	fsr2l,c
  8576  002362  0100               	movlb	0	; () banked
  8577  002364  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8578  002366  6EDA               	movwf	fsr2h,c
  8579  002368  0EAE               	movlw	low printRTC@INT_time
  8580  00236A  26D9               	addwf	fsr2l,f,c
  8581  00236C  0E00               	movlw	high printRTC@INT_time
  8582  00236E  22DA               	addwfc	fsr2h,f,c
  8583  002370  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8584  002374  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8585                           
  8586                           ; BSR set to: 0
  8587  002378  0100               	movlb	0	; () banked
  8588  00237A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8589  00237C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8590                           
  8591                           ; BSR set to: 0
  8592  00237E  0100               	movlb	0	; () banked
  8593  002380  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8594  002382  D7C3               	goto	l6217
  8595  002384  0100               	movlb	0	; () banked
  8596  002386  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8597  002388  E101               	bnz	u5010
  8598  00238A  D7BA               	goto	L7
  8599  00238C                     u5010:
  8600  00238C                     l606:
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;RTC.c: 69: }
  8604                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8605  00238C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8606  002390  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8607                           
  8608                           ;RTC.c: 71: switch(RTC_month){
  8609  002394  D0B4               	goto	l6249
  8610  002396                     l6223:
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;RTC.c: 73: strcpy(month, "JAN");
  8614  002396  0EBE               	movlw	low printRTC@month
  8615  002398  0100               	movlb	0	; () banked
  8616  00239A  6F80               	movwf	strcpy@to& (0+255),b
  8617  00239C  0E00               	movlw	high printRTC@month
  8618  00239E  0100               	movlb	0	; () banked
  8619  0023A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8620  0023A2  0EDB               	movlw	low STR_8
  8621  0023A4  0100               	movlb	0	; () banked
  8622  0023A6  6F82               	movwf	strcpy@from& (0+255),b
  8623  0023A8  0EFF               	movlw	high STR_8
  8624  0023AA  0100               	movlb	0	; () banked
  8625  0023AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8626  0023AE  ECD1  F024         	call	_strcpy	;wreg free
  8627                           
  8628                           ;RTC.c: 74: break;
  8629  0023B2  D0D4               	goto	l6251
  8630  0023B4                     l6225:
  8631                           
  8632                           ;RTC.c: 76: strcpy(month, "FEB");
  8633  0023B4  0EBE               	movlw	low printRTC@month
  8634  0023B6  0100               	movlb	0	; () banked
  8635  0023B8  6F80               	movwf	strcpy@to& (0+255),b
  8636  0023BA  0E00               	movlw	high printRTC@month
  8637  0023BC  0100               	movlb	0	; () banked
  8638  0023BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8639  0023C0  0ECB               	movlw	low STR_9
  8640  0023C2  0100               	movlb	0	; () banked
  8641  0023C4  6F82               	movwf	strcpy@from& (0+255),b
  8642  0023C6  0EFF               	movlw	high STR_9
  8643  0023C8  0100               	movlb	0	; () banked
  8644  0023CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8645  0023CC  ECD1  F024         	call	_strcpy	;wreg free
  8646                           
  8647                           ;RTC.c: 77: break;
  8648  0023D0  D0C5               	goto	l6251
  8649  0023D2                     l6227:
  8650                           
  8651                           ;RTC.c: 79: strcpy(month, "MAR");
  8652  0023D2  0EBE               	movlw	low printRTC@month
  8653  0023D4  0100               	movlb	0	; () banked
  8654  0023D6  6F80               	movwf	strcpy@to& (0+255),b
  8655  0023D8  0E00               	movlw	high printRTC@month
  8656  0023DA  0100               	movlb	0	; () banked
  8657  0023DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8658  0023DE  0EE7               	movlw	low STR_10
  8659  0023E0  0100               	movlb	0	; () banked
  8660  0023E2  6F82               	movwf	strcpy@from& (0+255),b
  8661  0023E4  0EFF               	movlw	high STR_10
  8662  0023E6  0100               	movlb	0	; () banked
  8663  0023E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8664  0023EA  ECD1  F024         	call	_strcpy	;wreg free
  8665                           
  8666                           ;RTC.c: 80: break;
  8667  0023EE  D0B6               	goto	l6251
  8668  0023F0                     l6229:
  8669                           
  8670                           ;RTC.c: 82: strcpy(month, "APR");
  8671  0023F0  0EBE               	movlw	low printRTC@month
  8672  0023F2  0100               	movlb	0	; () banked
  8673  0023F4  6F80               	movwf	strcpy@to& (0+255),b
  8674  0023F6  0E00               	movlw	high printRTC@month
  8675  0023F8  0100               	movlb	0	; () banked
  8676  0023FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8677  0023FC  0EEB               	movlw	low STR_11
  8678  0023FE  0100               	movlb	0	; () banked
  8679  002400  6F82               	movwf	strcpy@from& (0+255),b
  8680  002402  0EFF               	movlw	high STR_11
  8681  002404  0100               	movlb	0	; () banked
  8682  002406  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8683  002408  ECD1  F024         	call	_strcpy	;wreg free
  8684                           
  8685                           ;RTC.c: 83: break;
  8686  00240C  D0A7               	goto	l6251
  8687  00240E                     l6231:
  8688                           
  8689                           ;RTC.c: 85: strcpy(month, "MAY");
  8690  00240E  0EBE               	movlw	low printRTC@month
  8691  002410  0100               	movlb	0	; () banked
  8692  002412  6F80               	movwf	strcpy@to& (0+255),b
  8693  002414  0E00               	movlw	high printRTC@month
  8694  002416  0100               	movlb	0	; () banked
  8695  002418  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8696  00241A  0EFB               	movlw	low STR_12
  8697  00241C  0100               	movlb	0	; () banked
  8698  00241E  6F82               	movwf	strcpy@from& (0+255),b
  8699  002420  0EFF               	movlw	high STR_12
  8700  002422  0100               	movlb	0	; () banked
  8701  002424  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8702  002426  ECD1  F024         	call	_strcpy	;wreg free
  8703                           
  8704                           ;RTC.c: 86: break;
  8705  00242A  D098               	goto	l6251
  8706  00242C                     l6233:
  8707                           
  8708                           ;RTC.c: 88: strcpy(month, "JUN");
  8709  00242C  0EBE               	movlw	low printRTC@month
  8710  00242E  0100               	movlb	0	; () banked
  8711  002430  6F80               	movwf	strcpy@to& (0+255),b
  8712  002432  0E00               	movlw	high printRTC@month
  8713  002434  0100               	movlb	0	; () banked
  8714  002436  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8715  002438  0EDF               	movlw	low STR_13
  8716  00243A  0100               	movlb	0	; () banked
  8717  00243C  6F82               	movwf	strcpy@from& (0+255),b
  8718  00243E  0EFF               	movlw	high STR_13
  8719  002440  0100               	movlb	0	; () banked
  8720  002442  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8721  002444  ECD1  F024         	call	_strcpy	;wreg free
  8722                           
  8723                           ;RTC.c: 89: break;
  8724  002448  D089               	goto	l6251
  8725  00244A                     l6235:
  8726                           
  8727                           ;RTC.c: 91: strcpy(month, "JUL");
  8728  00244A  0EBE               	movlw	low printRTC@month
  8729  00244C  0100               	movlb	0	; () banked
  8730  00244E  6F80               	movwf	strcpy@to& (0+255),b
  8731  002450  0E00               	movlw	high printRTC@month
  8732  002452  0100               	movlb	0	; () banked
  8733  002454  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8734  002456  0ED7               	movlw	low STR_14
  8735  002458  0100               	movlb	0	; () banked
  8736  00245A  6F82               	movwf	strcpy@from& (0+255),b
  8737  00245C  0EFF               	movlw	high STR_14
  8738  00245E  0100               	movlb	0	; () banked
  8739  002460  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8740  002462  ECD1  F024         	call	_strcpy	;wreg free
  8741                           
  8742                           ;RTC.c: 92: break;
  8743  002466  D07A               	goto	l6251
  8744  002468                     l6237:
  8745                           
  8746                           ;RTC.c: 94: strcpy(month, "AUG");
  8747  002468  0EBE               	movlw	low printRTC@month
  8748  00246A  0100               	movlb	0	; () banked
  8749  00246C  6F80               	movwf	strcpy@to& (0+255),b
  8750  00246E  0E00               	movlw	high printRTC@month
  8751  002470  0100               	movlb	0	; () banked
  8752  002472  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8753  002474  0ED3               	movlw	low STR_15
  8754  002476  0100               	movlb	0	; () banked
  8755  002478  6F82               	movwf	strcpy@from& (0+255),b
  8756  00247A  0EFF               	movlw	high STR_15
  8757  00247C  0100               	movlb	0	; () banked
  8758  00247E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8759  002480  ECD1  F024         	call	_strcpy	;wreg free
  8760                           
  8761                           ;RTC.c: 95: break;
  8762  002484  D06B               	goto	l6251
  8763  002486                     l6239:
  8764                           
  8765                           ;RTC.c: 97: strcpy(month, "SEP");
  8766  002486  0EBE               	movlw	low printRTC@month
  8767  002488  0100               	movlb	0	; () banked
  8768  00248A  6F80               	movwf	strcpy@to& (0+255),b
  8769  00248C  0E00               	movlw	high printRTC@month
  8770  00248E  0100               	movlb	0	; () banked
  8771  002490  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8772  002492  0EE3               	movlw	low STR_16
  8773  002494  0100               	movlb	0	; () banked
  8774  002496  6F82               	movwf	strcpy@from& (0+255),b
  8775  002498  0EFF               	movlw	high STR_16
  8776  00249A  0100               	movlb	0	; () banked
  8777  00249C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8778  00249E  ECD1  F024         	call	_strcpy	;wreg free
  8779                           
  8780                           ;RTC.c: 98: break;
  8781  0024A2  D05C               	goto	l6251
  8782  0024A4                     l6241:
  8783                           
  8784                           ;RTC.c: 100: strcpy(month, "OCT");
  8785  0024A4  0EBE               	movlw	low printRTC@month
  8786  0024A6  0100               	movlb	0	; () banked
  8787  0024A8  6F80               	movwf	strcpy@to& (0+255),b
  8788  0024AA  0E00               	movlw	high printRTC@month
  8789  0024AC  0100               	movlb	0	; () banked
  8790  0024AE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8791  0024B0  0EF3               	movlw	low STR_17
  8792  0024B2  0100               	movlb	0	; () banked
  8793  0024B4  6F82               	movwf	strcpy@from& (0+255),b
  8794  0024B6  0EFF               	movlw	high STR_17
  8795  0024B8  0100               	movlb	0	; () banked
  8796  0024BA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8797  0024BC  ECD1  F024         	call	_strcpy	;wreg free
  8798                           
  8799                           ;RTC.c: 101: break;
  8800  0024C0  D04D               	goto	l6251
  8801  0024C2                     l6243:
  8802                           
  8803                           ;RTC.c: 103: strcpy(month, "NOV");
  8804  0024C2  0EBE               	movlw	low printRTC@month
  8805  0024C4  0100               	movlb	0	; () banked
  8806  0024C6  6F80               	movwf	strcpy@to& (0+255),b
  8807  0024C8  0E00               	movlw	high printRTC@month
  8808  0024CA  0100               	movlb	0	; () banked
  8809  0024CC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8810  0024CE  0EF7               	movlw	low STR_18
  8811  0024D0  0100               	movlb	0	; () banked
  8812  0024D2  6F82               	movwf	strcpy@from& (0+255),b
  8813  0024D4  0EFF               	movlw	high STR_18
  8814  0024D6  0100               	movlb	0	; () banked
  8815  0024D8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8816  0024DA  ECD1  F024         	call	_strcpy	;wreg free
  8817                           
  8818                           ;RTC.c: 104: break;
  8819  0024DE  D03E               	goto	l6251
  8820  0024E0                     l6245:
  8821                           
  8822                           ;RTC.c: 106: strcpy(month, "DEC");
  8823  0024E0  0EBE               	movlw	low printRTC@month
  8824  0024E2  0100               	movlb	0	; () banked
  8825  0024E4  6F80               	movwf	strcpy@to& (0+255),b
  8826  0024E6  0E00               	movlw	high printRTC@month
  8827  0024E8  0100               	movlb	0	; () banked
  8828  0024EA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8829  0024EC  0ECF               	movlw	low STR_19
  8830  0024EE  0100               	movlb	0	; () banked
  8831  0024F0  6F82               	movwf	strcpy@from& (0+255),b
  8832  0024F2  0EFF               	movlw	high STR_19
  8833  0024F4  0100               	movlb	0	; () banked
  8834  0024F6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8835  0024F8  ECD1  F024         	call	_strcpy	;wreg free
  8836                           
  8837                           ;RTC.c: 108: }
  8838                           
  8839                           ;RTC.c: 107: break;
  8840  0024FC  D02F               	goto	l6251
  8841  0024FE                     l6249:
  8842  0024FE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8843  002502  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8844                           
  8845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8846                           ; Switch size 1, requested type "space"
  8847                           ; Number of cases is 1, Range of values is 0 to 0
  8848                           ; switch strategies available:
  8849                           ; Name         Instructions Cycles
  8850                           ; simple_byte            4     3 (average)
  8851                           ;	Chosen strategy is simple_byte
  8852  002506  0100               	movlb	0	; () banked
  8853  002508  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8854  00250A  0A00               	xorlw	0	; case 0
  8855  00250C  A4D8               	btfss	status,2,c
  8856  00250E  D026               	goto	l6251
  8857                           
  8858                           ; BSR set to: 0
  8859                           ; Switch size 1, requested type "space"
  8860                           ; Number of cases is 12, Range of values is 1 to 12
  8861                           ; switch strategies available:
  8862                           ; Name         Instructions Cycles
  8863                           ; simple_byte           37    19 (average)
  8864                           ;	Chosen strategy is simple_byte
  8865  002510  0100               	movlb	0	; () banked
  8866  002512  51AB               	movf	??_printRTC& (0+255),w,b
  8867  002514  0A01               	xorlw	1	; case 1
  8868  002516  B4D8               	btfsc	status,2,c
  8869  002518  D73E               	goto	l6223
  8870  00251A  0A03               	xorlw	3	; case 2
  8871  00251C  B4D8               	btfsc	status,2,c
  8872  00251E  D74A               	goto	l6225
  8873  002520  0A01               	xorlw	1	; case 3
  8874  002522  B4D8               	btfsc	status,2,c
  8875  002524  D756               	goto	l6227
  8876  002526  0A07               	xorlw	7	; case 4
  8877  002528  B4D8               	btfsc	status,2,c
  8878  00252A  D762               	goto	l6229
  8879  00252C  0A01               	xorlw	1	; case 5
  8880  00252E  B4D8               	btfsc	status,2,c
  8881  002530  D76E               	goto	l6231
  8882  002532  0A03               	xorlw	3	; case 6
  8883  002534  B4D8               	btfsc	status,2,c
  8884  002536  D77A               	goto	l6233
  8885  002538  0A01               	xorlw	1	; case 7
  8886  00253A  B4D8               	btfsc	status,2,c
  8887  00253C  D786               	goto	l6235
  8888  00253E  0A0F               	xorlw	15	; case 8
  8889  002540  B4D8               	btfsc	status,2,c
  8890  002542  D792               	goto	l6237
  8891  002544  0A01               	xorlw	1	; case 9
  8892  002546  B4D8               	btfsc	status,2,c
  8893  002548  D79E               	goto	l6239
  8894  00254A  0A03               	xorlw	3	; case 10
  8895  00254C  B4D8               	btfsc	status,2,c
  8896  00254E  D7AA               	goto	l6241
  8897  002550  0A01               	xorlw	1	; case 11
  8898  002552  B4D8               	btfsc	status,2,c
  8899  002554  D7B6               	goto	l6243
  8900  002556  0A07               	xorlw	7	; case 12
  8901  002558  B4D8               	btfsc	status,2,c
  8902  00255A  D7C2               	goto	l6245
  8903  00255C                     l6251:
  8904                           
  8905                           ;RTC.c: 109: lcdInst(0b10000000);;
  8906  00255C  0E80               	movlw	128
  8907  00255E  EC67  F027         	call	_lcdInst
  8908                           
  8909                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8910  002562  0E0A               	movlw	low STR_21
  8911  002564  0100               	movlb	0	; () banked
  8912  002566  6F8E               	movwf	printf@f& (0+255),b
  8913  002568  0EFB               	movlw	high STR_21
  8914  00256A  0100               	movlb	0	; () banked
  8915  00256C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8916  00256E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8917  002572  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8918  002576  0EBE               	movlw	low printRTC@month
  8919  002578  0100               	movlb	0	; () banked
  8920  00257A  6F92               	movwf	(?_printf+4)& (0+255),b
  8921  00257C  0E00               	movlw	high printRTC@month
  8922  00257E  0100               	movlb	0	; () banked
  8923  002580  6F93               	movwf	(?_printf+5)& (0+255),b
  8924  002582  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8925  002586  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8926  00258A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8927  00258E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8928  002592  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8929  002596  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8930  00259A  ECB8  F008         	call	_printf	;wreg free
  8931  00259E  0012               	return		;funcret
  8932  0025A0                     __end_of_printRTC:
  8933                           	opt stack 0
  8934                           tblptru	equ	0xFF8
  8935                           tblptrh	equ	0xFF7
  8936                           tblptrl	equ	0xFF6
  8937                           tablat	equ	0xFF5
  8938                           prodh	equ	0xFF4
  8939                           prodl	equ	0xFF3
  8940                           intcon	equ	0xFF2
  8941                           intcon2	equ	0xFF1
  8942                           intcon3	equ	0xFF0
  8943                           postinc0	equ	0xFEE
  8944                           wreg	equ	0xFE8
  8945                           postdec1	equ	0xFE5
  8946                           fsr1l	equ	0xFE1
  8947                           indf2	equ	0xFDF
  8948                           postinc2	equ	0xFDE
  8949                           postdec2	equ	0xFDD
  8950                           fsr2h	equ	0xFDA
  8951                           fsr2l	equ	0xFD9
  8952                           status	equ	0xFD8
  8953                           
  8954 ;; *************** function _strcpy *****************
  8955 ;; Defined at:
  8956 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8957 ;; Parameters:    Size  Location     Type
  8958 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8959 ;;		 -> printRTC@month(4), UI@month(4), 
  8960 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8961 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8962 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8963 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8964 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8965 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8966 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8967 ;;		 -> STR_8(4), 
  8968 ;; Auto vars:     Size  Location     Type
  8969 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8970 ;;		 -> printRTC@month(4), UI@month(4), 
  8971 ;; Return value:  Size  Location     Type
  8972 ;;                  2    0[BANK0 ] PTR unsigned char 
  8973 ;; Registers used:
  8974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8980 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8984 ;;Total ram usage:        6 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    7
  8987 ;; This function calls:
  8988 ;;		Nothing
  8989 ;; This function is called by:
  8990 ;;		_UI
  8991 ;;		_printRTC
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text25
  8996  0049A2                     __ptext25:
  8997                           	opt stack 0
  8998  0049A2                     _strcpy:
  8999                           	opt stack 20
  9000                           
  9001                           ;incstack = 0
  9002  0049A2  C080  F084         	movff	strcpy@to,strcpy@cp
  9003  0049A6  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9004  0049AA  D006               	goto	l5961
  9005  0049AC                     l5959:
  9006  0049AC  0100               	movlb	0	; () banked
  9007  0049AE  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9008  0049B0  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9009  0049B2  0100               	movlb	0	; () banked
  9010  0049B4  4B82               	infsnz	strcpy@from& (0+255),f,b
  9011  0049B6  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9012  0049B8                     l5961:
  9013  0049B8  C082  FFF6         	movff	strcpy@from,tblptrl
  9014  0049BC  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9015  0049C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9016  0049C0  6AF8               	clrf	tblptru,c
  9017  0049C2                     	endif
  9018  0049C2                     	if	0	;tblptru may be non-zero
  9019  0049C2                     	endif
  9020  0049C2  C084  FFD9         	movff	strcpy@cp,fsr2l
  9021  0049C6  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9022  0049CA  0008               	tblrd		*
  9023  0049CC  CFF5 FFDF          	movff	tablat,indf2
  9024  0049D0  50DF               	movf	indf2,w,c
  9025  0049D2  B4D8               	btfsc	status,2,c
  9026  0049D4  0012               	return	
  9027  0049D6  D7EA               	goto	l5959
  9028  0049D8                     __end_of_strcpy:
  9029                           	opt stack 0
  9030                           tblptru	equ	0xFF8
  9031                           tblptrh	equ	0xFF7
  9032                           tblptrl	equ	0xFF6
  9033                           tablat	equ	0xFF5
  9034                           prodh	equ	0xFF4
  9035                           prodl	equ	0xFF3
  9036                           intcon	equ	0xFF2
  9037                           intcon2	equ	0xFF1
  9038                           intcon3	equ	0xFF0
  9039                           postinc0	equ	0xFEE
  9040                           wreg	equ	0xFE8
  9041                           postdec1	equ	0xFE5
  9042                           fsr1l	equ	0xFE1
  9043                           indf2	equ	0xFDF
  9044                           postinc2	equ	0xFDE
  9045                           postdec2	equ	0xFDD
  9046                           fsr2h	equ	0xFDA
  9047                           fsr2l	equ	0xFD9
  9048                           status	equ	0xFD8
  9049                           
  9050 ;; *************** function _getRTC *****************
  9051 ;; Defined at:
  9052 ;;		line 44 in file "RTC.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;		None
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;  i               2    3[BANK0 ] int 
  9057 ;; Return value:  Size  Location     Type
  9058 ;;                  1    wreg      void 
  9059 ;; Registers used:
  9060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9061 ;; Tracked objects:
  9062 ;;		On entry : 0/0
  9063 ;;		On exit  : 0/0
  9064 ;;		Unchanged: 0/0
  9065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9070 ;;Total ram usage:        2 bytes
  9071 ;; Hardware stack levels used:    1
  9072 ;; Hardware stack levels required when called:    9
  9073 ;; This function calls:
  9074 ;;		_I2C_Master_Read
  9075 ;;		_I2C_Master_Start
  9076 ;;		_I2C_Master_Stop
  9077 ;;		_I2C_Master_Write
  9078 ;; This function is called by:
  9079 ;;		_printRTC
  9080 ;;		_initSortTimer
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           	psect	text26
  9085  004100                     __ptext26:
  9086                           	opt stack 0
  9087  004100                     _getRTC:
  9088                           	opt stack 18
  9089                           
  9090                           ;RTC.c: 48: I2C_Master_Start();
  9091                           
  9092                           ;incstack = 0
  9093  004100  EC8D  F027         	call	_I2C_Master_Start	;wreg free
  9094                           
  9095                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9096  004104  0E00               	movlw	0
  9097  004106  0100               	movlb	0	; () banked
  9098  004108  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9099  00410A  0ED0               	movlw	208
  9100  00410C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9101  00410E  EC7B  F027         	call	_I2C_Master_Write	;wreg free
  9102                           
  9103                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9104  004112  0E00               	movlw	0
  9105  004114  0100               	movlb	0	; () banked
  9106  004116  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9107  004118  0E00               	movlw	0
  9108  00411A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9109  00411C  EC7B  F027         	call	_I2C_Master_Write	;wreg free
  9110                           
  9111                           ;RTC.c: 51: I2C_Master_Stop();
  9112  004120  EC89  F027         	call	_I2C_Master_Stop	;wreg free
  9113                           
  9114                           ;RTC.c: 54: I2C_Master_Start();
  9115  004124  EC8D  F027         	call	_I2C_Master_Start	;wreg free
  9116                           
  9117                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9118  004128  0E00               	movlw	0
  9119  00412A  0100               	movlb	0	; () banked
  9120  00412C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9121  00412E  0ED1               	movlw	209
  9122  004130  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9123  004132  EC7B  F027         	call	_I2C_Master_Write	;wreg free
  9124                           
  9125                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9126  004136  0E00               	movlw	0
  9127  004138  0100               	movlb	0	; () banked
  9128  00413A  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9129  00413C  0E00               	movlw	0
  9130  00413E  6F83               	movwf	getRTC@i& (0+255),b
  9131  004140                     l5967:
  9132                           
  9133                           ; BSR set to: 0
  9134  004140  0100               	movlb	0	; () banked
  9135  004142  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9136  004144  D008               	goto	l5971
  9137  004146  0100               	movlb	0	; () banked
  9138  004148  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9139  00414A  E115               	bnz	l5977
  9140  00414C  0E06               	movlw	6
  9141  00414E  0100               	movlb	0	; () banked
  9142  004150  5D83               	subwf	getRTC@i& (0+255),w,b
  9143  004152  B0D8               	btfsc	status,0,c
  9144  004154  D010               	goto	l5977
  9145  004156                     l5971:
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9149  004156  0E24               	movlw	low _time
  9150  004158  0100               	movlb	0	; () banked
  9151  00415A  2583               	addwf	getRTC@i& (0+255),w,b
  9152  00415C  6ED9               	movwf	fsr2l,c
  9153  00415E  0E01               	movlw	high _time
  9154  004160  0100               	movlb	0	; () banked
  9155  004162  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9156  004164  6EDA               	movwf	fsr2h,c
  9157  004166  0E01               	movlw	1
  9158  004168  EC28  F026         	call	_I2C_Master_Read
  9159  00416C  6EDF               	movwf	indf2,c
  9160  00416E  0100               	movlb	0	; () banked
  9161  004170  4B83               	infsnz	getRTC@i& (0+255),f,b
  9162  004172  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9163  004174  D7E5               	goto	l5967
  9164  004176                     l5977:
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;RTC.c: 58: }
  9168                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9169  004176  0E00               	movlw	0
  9170  004178  EC28  F026         	call	_I2C_Master_Read
  9171  00417C  0101               	movlb	1	; () banked
  9172  00417E  6F2A               	movwf	(_time+6)& (0+255),b
  9173                           
  9174                           ;RTC.c: 60: I2C_Master_Stop();
  9175  004180  EC89  F027         	call	_I2C_Master_Stop	;wreg free
  9176  004184  0012               	return		;funcret
  9177  004186                     __end_of_getRTC:
  9178                           	opt stack 0
  9179                           tblptru	equ	0xFF8
  9180                           tblptrh	equ	0xFF7
  9181                           tblptrl	equ	0xFF6
  9182                           tablat	equ	0xFF5
  9183                           prodh	equ	0xFF4
  9184                           prodl	equ	0xFF3
  9185                           intcon	equ	0xFF2
  9186                           intcon2	equ	0xFF1
  9187                           intcon3	equ	0xFF0
  9188                           postinc0	equ	0xFEE
  9189                           wreg	equ	0xFE8
  9190                           postdec1	equ	0xFE5
  9191                           fsr1l	equ	0xFE1
  9192                           indf2	equ	0xFDF
  9193                           postinc2	equ	0xFDE
  9194                           postdec2	equ	0xFDD
  9195                           fsr2h	equ	0xFDA
  9196                           fsr2l	equ	0xFD9
  9197                           status	equ	0xFD8
  9198                           
  9199 ;; *************** function _I2C_Master_Write *****************
  9200 ;; Defined at:
  9201 ;;		line 49 in file "I2C.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;  d               2    1[BANK0 ] unsigned int 
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;		None
  9206 ;; Return value:  Size  Location     Type
  9207 ;;                  1    wreg      void 
  9208 ;; Registers used:
  9209 ;;		wreg, status,2, status,0, cstack
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9215 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9219 ;;Total ram usage:        2 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    8
  9222 ;; This function calls:
  9223 ;;		_I2C_Master_Wait
  9224 ;; This function is called by:
  9225 ;;		_loadRTC
  9226 ;;		_getRTC
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           	psect	text27
  9231  004EF6                     __ptext27:
  9232                           	opt stack 0
  9233  004EF6                     _I2C_Master_Write:
  9234                           	opt stack 18
  9235                           
  9236                           ;I2C.c: 51: I2C_Master_Wait();
  9237                           
  9238                           ;incstack = 0
  9239  004EF6  EC4C  F027         	call	_I2C_Master_Wait	;wreg free
  9240                           
  9241                           ;I2C.c: 52: SSPBUF = d;
  9242  004EFA  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9243  004EFE  0012               	return		;funcret
  9244  004F00                     __end_of_I2C_Master_Write:
  9245                           	opt stack 0
  9246                           tblptru	equ	0xFF8
  9247                           tblptrh	equ	0xFF7
  9248                           tblptrl	equ	0xFF6
  9249                           tablat	equ	0xFF5
  9250                           prodh	equ	0xFF4
  9251                           prodl	equ	0xFF3
  9252                           intcon	equ	0xFF2
  9253                           intcon2	equ	0xFF1
  9254                           intcon3	equ	0xFF0
  9255                           postinc0	equ	0xFEE
  9256                           wreg	equ	0xFE8
  9257                           postdec1	equ	0xFE5
  9258                           fsr1l	equ	0xFE1
  9259                           indf2	equ	0xFDF
  9260                           postinc2	equ	0xFDE
  9261                           postdec2	equ	0xFDD
  9262                           fsr2h	equ	0xFDA
  9263                           fsr2l	equ	0xFD9
  9264                           status	equ	0xFD8
  9265                           
  9266 ;; *************** function _I2C_Master_Stop *****************
  9267 ;; Defined at:
  9268 ;;		line 43 in file "I2C.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;		None
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;		None
  9273 ;; Return value:  Size  Location     Type
  9274 ;;                  1    wreg      void 
  9275 ;; Registers used:
  9276 ;;		wreg, status,2, status,0, cstack
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;Total ram usage:        0 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    8
  9289 ;; This function calls:
  9290 ;;		_I2C_Master_Wait
  9291 ;; This function is called by:
  9292 ;;		_loadRTC
  9293 ;;		_getRTC
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           	psect	text28
  9298  004F12                     __ptext28:
  9299                           	opt stack 0
  9300  004F12                     _I2C_Master_Stop:
  9301                           	opt stack 18
  9302                           
  9303                           ;I2C.c: 45: I2C_Master_Wait();
  9304                           
  9305                           ;incstack = 0
  9306  004F12  EC4C  F027         	call	_I2C_Master_Wait	;wreg free
  9307                           
  9308                           ;I2C.c: 46: PEN = 1;
  9309  004F16  84C5               	bsf	4037,2,c	;volatile
  9310  004F18  0012               	return		;funcret
  9311  004F1A                     __end_of_I2C_Master_Stop:
  9312                           	opt stack 0
  9313                           tblptru	equ	0xFF8
  9314                           tblptrh	equ	0xFF7
  9315                           tblptrl	equ	0xFF6
  9316                           tablat	equ	0xFF5
  9317                           prodh	equ	0xFF4
  9318                           prodl	equ	0xFF3
  9319                           intcon	equ	0xFF2
  9320                           intcon2	equ	0xFF1
  9321                           intcon3	equ	0xFF0
  9322                           postinc0	equ	0xFEE
  9323                           wreg	equ	0xFE8
  9324                           postdec1	equ	0xFE5
  9325                           fsr1l	equ	0xFE1
  9326                           indf2	equ	0xFDF
  9327                           postinc2	equ	0xFDE
  9328                           postdec2	equ	0xFDD
  9329                           fsr2h	equ	0xFDA
  9330                           fsr2l	equ	0xFD9
  9331                           status	equ	0xFD8
  9332                           
  9333 ;; *************** function _I2C_Master_Start *****************
  9334 ;; Defined at:
  9335 ;;		line 31 in file "I2C.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;		None
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;		None
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  1    wreg      void 
  9342 ;; Registers used:
  9343 ;;		wreg, status,2, status,0, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9353 ;;Total ram usage:        0 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    8
  9356 ;; This function calls:
  9357 ;;		_I2C_Master_Wait
  9358 ;; This function is called by:
  9359 ;;		_loadRTC
  9360 ;;		_getRTC
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           	psect	text29
  9365  004F1A                     __ptext29:
  9366                           	opt stack 0
  9367  004F1A                     _I2C_Master_Start:
  9368                           	opt stack 18
  9369                           
  9370                           ;I2C.c: 33: I2C_Master_Wait();
  9371                           
  9372                           ;incstack = 0
  9373  004F1A  EC4C  F027         	call	_I2C_Master_Wait	;wreg free
  9374                           
  9375                           ;I2C.c: 34: SEN = 1;
  9376  004F1E  80C5               	bsf	4037,0,c	;volatile
  9377  004F20  0012               	return		;funcret
  9378  004F22                     __end_of_I2C_Master_Start:
  9379                           	opt stack 0
  9380                           tblptru	equ	0xFF8
  9381                           tblptrh	equ	0xFF7
  9382                           tblptrl	equ	0xFF6
  9383                           tablat	equ	0xFF5
  9384                           prodh	equ	0xFF4
  9385                           prodl	equ	0xFF3
  9386                           intcon	equ	0xFF2
  9387                           intcon2	equ	0xFF1
  9388                           intcon3	equ	0xFF0
  9389                           postinc0	equ	0xFEE
  9390                           wreg	equ	0xFE8
  9391                           postdec1	equ	0xFE5
  9392                           fsr1l	equ	0xFE1
  9393                           indf2	equ	0xFDF
  9394                           postinc2	equ	0xFDE
  9395                           postdec2	equ	0xFDD
  9396                           fsr2h	equ	0xFDA
  9397                           fsr2l	equ	0xFD9
  9398                           status	equ	0xFD8
  9399                           
  9400 ;; *************** function _I2C_Master_Read *****************
  9401 ;; Defined at:
  9402 ;;		line 55 in file "I2C.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;  a               1    wreg     unsigned char 
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;  a               1    1[BANK0 ] unsigned char 
  9407 ;;  temp            1    2[BANK0 ] unsigned char 
  9408 ;; Return value:  Size  Location     Type
  9409 ;;                  1    wreg      unsigned char 
  9410 ;; Registers used:
  9411 ;;		wreg, status,2, status,0, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9421 ;;Total ram usage:        2 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    8
  9424 ;; This function calls:
  9425 ;;		_I2C_Master_Wait
  9426 ;; This function is called by:
  9427 ;;		_getRTC
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           	psect	text30
  9432  004C50                     __ptext30:
  9433                           	opt stack 0
  9434  004C50                     _I2C_Master_Read:
  9435                           	opt stack 18
  9436                           
  9437                           ;incstack = 0
  9438                           ;I2C_Master_Read@a stored from wreg
  9439  004C50  0100               	movlb	0	; () banked
  9440  004C52  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9441                           
  9442                           ;I2C.c: 57: unsigned char temp;
  9443                           ;I2C.c: 58: I2C_Master_Wait();
  9444  004C54  EC4C  F027         	call	_I2C_Master_Wait	;wreg free
  9445                           
  9446                           ;I2C.c: 59: RCEN = 1;
  9447  004C58  86C5               	bsf	4037,3,c	;volatile
  9448                           
  9449                           ;I2C.c: 60: I2C_Master_Wait();
  9450  004C5A  EC4C  F027         	call	_I2C_Master_Wait	;wreg free
  9451                           
  9452                           ;I2C.c: 61: temp = SSPBUF;
  9453  004C5E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9454                           
  9455                           ;I2C.c: 62: I2C_Master_Wait();
  9456  004C62  EC4C  F027         	call	_I2C_Master_Wait	;wreg free
  9457                           
  9458                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9459  004C66  0100               	movlb	0	; () banked
  9460  004C68  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9461  004C6A  0100               	movlb	0	; () banked
  9462  004C6C  A4D8               	btfss	status,2,c
  9463  004C6E  D002               	goto	u4100
  9464  004C70  8AC5               	bsf	4037,5,c	;volatile
  9465  004C72  D001               	goto	l5655
  9466  004C74                     u4100:
  9467  004C74  9AC5               	bcf	4037,5,c	;volatile
  9468  004C76                     l5655:
  9469                           
  9470                           ;I2C.c: 64: ACKEN = 1;
  9471  004C76  88C5               	bsf	4037,4,c	;volatile
  9472                           
  9473                           ;I2C.c: 65: return temp;
  9474  004C78  0100               	movlb	0	; () banked
  9475  004C7A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9476  004C7C  0012               	return	
  9477  004C7E                     __end_of_I2C_Master_Read:
  9478                           	opt stack 0
  9479                           tblptru	equ	0xFF8
  9480                           tblptrh	equ	0xFF7
  9481                           tblptrl	equ	0xFF6
  9482                           tablat	equ	0xFF5
  9483                           prodh	equ	0xFF4
  9484                           prodl	equ	0xFF3
  9485                           intcon	equ	0xFF2
  9486                           intcon2	equ	0xFF1
  9487                           intcon3	equ	0xFF0
  9488                           postinc0	equ	0xFEE
  9489                           wreg	equ	0xFE8
  9490                           postdec1	equ	0xFE5
  9491                           fsr1l	equ	0xFE1
  9492                           indf2	equ	0xFDF
  9493                           postinc2	equ	0xFDE
  9494                           postdec2	equ	0xFDD
  9495                           fsr2h	equ	0xFDA
  9496                           fsr2l	equ	0xFD9
  9497                           status	equ	0xFD8
  9498                           
  9499 ;; *************** function _I2C_Master_Wait *****************
  9500 ;; Defined at:
  9501 ;;		line 26 in file "I2C.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;		None
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;		None
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  1    wreg      void 
  9508 ;; Registers used:
  9509 ;;		wreg, status,2, status,0
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;Total ram usage:        1 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    7
  9522 ;; This function calls:
  9523 ;;		Nothing
  9524 ;; This function is called by:
  9525 ;;		_I2C_Master_Start
  9526 ;;		_I2C_Master_Stop
  9527 ;;		_I2C_Master_Write
  9528 ;;		_I2C_Master_Read
  9529 ;;		_I2C_Master_RepeatedStart
  9530 ;; This function uses a non-reentrant model
  9531 ;;
  9532                           
  9533                           	psect	text31
  9534  004E98                     __ptext31:
  9535                           	opt stack 0
  9536  004E98                     _I2C_Master_Wait:
  9537                           	opt stack 18
  9538  004E98                     l66:
  9539  004E98  B4C7               	btfsc	4039,2,c	;volatile
  9540  004E9A  D7FE               	goto	l66
  9541  004E9C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9542  004EA0  0E1F               	movlw	31
  9543  004EA2  0100               	movlb	0	; () banked
  9544  004EA4  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9545  004EA6  B4D8               	btfsc	status,2,c
  9546  004EA8  0012               	return	
  9547  004EAA  D7F6               	goto	l66
  9548  004EAC                     __end_of_I2C_Master_Wait:
  9549                           	opt stack 0
  9550                           tblptru	equ	0xFF8
  9551                           tblptrh	equ	0xFF7
  9552                           tblptrl	equ	0xFF6
  9553                           tablat	equ	0xFF5
  9554                           prodh	equ	0xFF4
  9555                           prodl	equ	0xFF3
  9556                           intcon	equ	0xFF2
  9557                           intcon2	equ	0xFF1
  9558                           intcon3	equ	0xFF0
  9559                           postinc0	equ	0xFEE
  9560                           wreg	equ	0xFE8
  9561                           postdec1	equ	0xFE5
  9562                           fsr1l	equ	0xFE1
  9563                           indf2	equ	0xFDF
  9564                           postinc2	equ	0xFDE
  9565                           postdec2	equ	0xFDD
  9566                           fsr2h	equ	0xFDA
  9567                           fsr2l	equ	0xFD9
  9568                           status	equ	0xFD8
  9569                           
  9570 ;; *************** function _change_state_to_menu_22 *****************
  9571 ;; Defined at:
  9572 ;;		line 498 in file "UI.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;		None
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;		None
  9577 ;; Return value:  Size  Location     Type
  9578 ;;                  1    wreg      void 
  9579 ;; Registers used:
  9580 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;Total ram usage:        0 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:   10
  9593 ;; This function calls:
  9594 ;;		_lcdInst
  9595 ;;		_printf
  9596 ;; This function is called by:
  9597 ;;		_UI
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text32
  9602  004932                     __ptext32:
  9603                           	opt stack 0
  9604  004932                     _change_state_to_menu_22:
  9605                           	opt stack 19
  9606                           
  9607                           ;UI.c: 499: cur_state = 22;
  9608                           
  9609                           ; BSR set to: 0
  9610                           ;incstack = 0
  9611  004932  0E00               	movlw	0
  9612  004934  0100               	movlb	0	; () banked
  9613  004936  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9614  004938  0E16               	movlw	22
  9615  00493A  6FE6               	movwf	_cur_state& (0+255),b
  9616                           
  9617                           ; BSR set to: 0
  9618                           ;UI.c: 501: lcdInst(0b10000000);;
  9619  00493C  0E80               	movlw	128
  9620  00493E  EC67  F027         	call	_lcdInst
  9621                           
  9622                           ;UI.c: 502: printf("2. SORT        <");
  9623  004942  0EC4               	movlw	low STR_34
  9624  004944  0100               	movlb	0	; () banked
  9625  004946  6F8E               	movwf	printf@f& (0+255),b
  9626  004948  0EFD               	movlw	high STR_34
  9627  00494A  0100               	movlb	0	; () banked
  9628  00494C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9629  00494E  ECB8  F008         	call	_printf	;wreg free
  9630                           
  9631                           ;UI.c: 503: lcdInst(0b11000000);;
  9632  004952  0EC0               	movlw	192
  9633  004954  EC67  F027         	call	_lcdInst
  9634                           
  9635                           ;UI.c: 504: printf("3. LOGS         ");
  9636  004958  0E09               	movlw	low STR_36
  9637  00495A  0100               	movlb	0	; () banked
  9638  00495C  6F8E               	movwf	printf@f& (0+255),b
  9639  00495E  0EFD               	movlw	high STR_36
  9640  004960  0100               	movlb	0	; () banked
  9641  004962  6F8F               	movwf	(printf@f+1)& (0+255),b
  9642  004964  ECB8  F008         	call	_printf	;wreg free
  9643  004968  0012               	return		;funcret
  9644  00496A                     __end_of_change_state_to_menu_22:
  9645                           	opt stack 0
  9646                           tblptru	equ	0xFF8
  9647                           tblptrh	equ	0xFF7
  9648                           tblptrl	equ	0xFF6
  9649                           tablat	equ	0xFF5
  9650                           prodh	equ	0xFF4
  9651                           prodl	equ	0xFF3
  9652                           intcon	equ	0xFF2
  9653                           intcon2	equ	0xFF1
  9654                           intcon3	equ	0xFF0
  9655                           postinc0	equ	0xFEE
  9656                           wreg	equ	0xFE8
  9657                           postdec1	equ	0xFE5
  9658                           fsr1l	equ	0xFE1
  9659                           indf2	equ	0xFDF
  9660                           postinc2	equ	0xFDE
  9661                           postdec2	equ	0xFDD
  9662                           fsr2h	equ	0xFDA
  9663                           fsr2l	equ	0xFD9
  9664                           status	equ	0xFD8
  9665                           
  9666 ;; *************** function _change_state_to_menu_12 *****************
  9667 ;; Defined at:
  9668 ;;		line 490 in file "UI.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9686 ;;Total ram usage:        0 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:   10
  9689 ;; This function calls:
  9690 ;;		_lcdInst
  9691 ;;		_printf
  9692 ;; This function is called by:
  9693 ;;		_UI
  9694 ;; This function uses a non-reentrant model
  9695 ;;
  9696                           
  9697                           	psect	text33
  9698  00496A                     __ptext33:
  9699                           	opt stack 0
  9700  00496A                     _change_state_to_menu_12:
  9701                           	opt stack 19
  9702                           
  9703                           ;UI.c: 491: cur_state = 12;
  9704                           
  9705                           ;incstack = 0
  9706  00496A  0E00               	movlw	0
  9707  00496C  0100               	movlb	0	; () banked
  9708  00496E  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9709  004970  0E0C               	movlw	12
  9710  004972  6FE6               	movwf	_cur_state& (0+255),b
  9711                           
  9712                           ; BSR set to: 0
  9713                           ;UI.c: 493: lcdInst(0b10000000);;
  9714  004974  0E80               	movlw	128
  9715  004976  EC67  F027         	call	_lcdInst
  9716                           
  9717                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9718  00497A  0E2B               	movlw	low STR_33
  9719  00497C  0100               	movlb	0	; () banked
  9720  00497E  6F8E               	movwf	printf@f& (0+255),b
  9721  004980  0EFD               	movlw	high STR_33
  9722  004982  0100               	movlb	0	; () banked
  9723  004984  6F8F               	movwf	(printf@f+1)& (0+255),b
  9724  004986  ECB8  F008         	call	_printf	;wreg free
  9725                           
  9726                           ;UI.c: 495: lcdInst(0b11000000);;
  9727  00498A  0EC0               	movlw	192
  9728  00498C  EC67  F027         	call	_lcdInst
  9729                           
  9730                           ;UI.c: 496: printf("2. SORT        <");
  9731  004990  0EC4               	movlw	low STR_34
  9732  004992  0100               	movlb	0	; () banked
  9733  004994  6F8E               	movwf	printf@f& (0+255),b
  9734  004996  0EFD               	movlw	high STR_34
  9735  004998  0100               	movlb	0	; () banked
  9736  00499A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9737  00499C  ECB8  F008         	call	_printf	;wreg free
  9738  0049A0  0012               	return		;funcret
  9739  0049A2                     __end_of_change_state_to_menu_12:
  9740                           	opt stack 0
  9741                           tblptru	equ	0xFF8
  9742                           tblptrh	equ	0xFF7
  9743                           tblptrl	equ	0xFF6
  9744                           tablat	equ	0xFF5
  9745                           prodh	equ	0xFF4
  9746                           prodl	equ	0xFF3
  9747                           intcon	equ	0xFF2
  9748                           intcon2	equ	0xFF1
  9749                           intcon3	equ	0xFF0
  9750                           postinc0	equ	0xFEE
  9751                           wreg	equ	0xFE8
  9752                           postdec1	equ	0xFE5
  9753                           fsr1l	equ	0xFE1
  9754                           indf2	equ	0xFDF
  9755                           postinc2	equ	0xFDE
  9756                           postdec2	equ	0xFDD
  9757                           fsr2h	equ	0xFDA
  9758                           fsr2l	equ	0xFD9
  9759                           status	equ	0xFD8
  9760                           
  9761 ;; *************** function ___awmod *****************
  9762 ;; Defined at:
  9763 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9764 ;; Parameters:    Size  Location     Type
  9765 ;;  dividend        2    0[BANK0 ] int 
  9766 ;;  divisor         2    2[BANK0 ] int 
  9767 ;; Auto vars:     Size  Location     Type
  9768 ;;  sign            1    5[BANK0 ] unsigned char 
  9769 ;;  counter         1    4[BANK0 ] unsigned char 
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  2    0[BANK0 ] int 
  9772 ;; Registers used:
  9773 ;;		wreg, status,2, status,0
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;Total ram usage:        6 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:    7
  9786 ;; This function calls:
  9787 ;;		Nothing
  9788 ;; This function is called by:
  9789 ;;		_UI
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text34
  9794  003FD2                     __ptext34:
  9795                           	opt stack 0
  9796  003FD2                     ___awmod:
  9797                           	opt stack 22
  9798                           
  9799                           ;incstack = 0
  9800  003FD2  0E00               	movlw	0
  9801  003FD4  0100               	movlb	0	; () banked
  9802  003FD6  6F85               	movwf	___awmod@sign& (0+255),b
  9803                           
  9804                           ; BSR set to: 0
  9805  003FD8  0100               	movlb	0	; () banked
  9806  003FDA  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9807  003FDC  D008               	goto	l7955
  9808                           
  9809                           ; BSR set to: 0
  9810  003FDE  0100               	movlb	0	; () banked
  9811  003FE0  6D80               	negf	___awmod@dividend& (0+255),b
  9812  003FE2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9813  003FE4  B0D8               	btfsc	status,0,c
  9814  003FE6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9815                           
  9816                           ; BSR set to: 0
  9817  003FE8  0E01               	movlw	1
  9818  003FEA  0100               	movlb	0	; () banked
  9819  003FEC  6F85               	movwf	___awmod@sign& (0+255),b
  9820  003FEE                     l7955:
  9821                           
  9822                           ; BSR set to: 0
  9823  003FEE  0100               	movlb	0	; () banked
  9824  003FF0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9825  003FF2  D005               	goto	l7959
  9826                           
  9827                           ; BSR set to: 0
  9828  003FF4  0100               	movlb	0	; () banked
  9829  003FF6  6D82               	negf	___awmod@divisor& (0+255),b
  9830  003FF8  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9831  003FFA  B0D8               	btfsc	status,0,c
  9832  003FFC  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9833  003FFE                     l7959:
  9834                           
  9835                           ; BSR set to: 0
  9836  003FFE  0100               	movlb	0	; () banked
  9837  004000  5182               	movf	___awmod@divisor& (0+255),w,b
  9838  004002  0100               	movlb	0	; () banked
  9839  004004  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9840  004006  B4D8               	btfsc	status,2,c
  9841  004008  D026               	goto	l7975
  9842                           
  9843                           ; BSR set to: 0
  9844  00400A  0E01               	movlw	1
  9845  00400C  0100               	movlb	0	; () banked
  9846  00400E  6F84               	movwf	___awmod@counter& (0+255),b
  9847  004010  D006               	goto	l7965
  9848  004012                     l7963:
  9849                           
  9850                           ; BSR set to: 0
  9851  004012  0100               	movlb	0	; () banked
  9852  004014  90D8               	bcf	status,0,c
  9853  004016  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9854  004018  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9855  00401A  0100               	movlb	0	; () banked
  9856  00401C  2B84               	incf	___awmod@counter& (0+255),f,b
  9857  00401E                     l7965:
  9858                           
  9859                           ; BSR set to: 0
  9860  00401E  0100               	movlb	0	; () banked
  9861  004020  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9862  004022  D7F7               	goto	l7963
  9863  004024                     l7967:
  9864                           
  9865                           ; BSR set to: 0
  9866  004024  0100               	movlb	0	; () banked
  9867  004026  5182               	movf	___awmod@divisor& (0+255),w,b
  9868  004028  0100               	movlb	0	; () banked
  9869  00402A  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9870  00402C  0100               	movlb	0	; () banked
  9871  00402E  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9872  004030  0100               	movlb	0	; () banked
  9873  004032  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9874  004034  A0D8               	btfss	status,0,c
  9875  004036  D008               	goto	l7971
  9876                           
  9877                           ; BSR set to: 0
  9878  004038  0100               	movlb	0	; () banked
  9879  00403A  5182               	movf	___awmod@divisor& (0+255),w,b
  9880  00403C  0100               	movlb	0	; () banked
  9881  00403E  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9882  004040  0100               	movlb	0	; () banked
  9883  004042  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9884  004044  0100               	movlb	0	; () banked
  9885  004046  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9886  004048                     l7971:
  9887                           
  9888                           ; BSR set to: 0
  9889  004048  0100               	movlb	0	; () banked
  9890  00404A  90D8               	bcf	status,0,c
  9891  00404C  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9892  00404E  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9893                           
  9894                           ; BSR set to: 0
  9895  004050  0100               	movlb	0	; () banked
  9896  004052  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9897  004054  D7E7               	goto	l7967
  9898  004056                     l7975:
  9899                           
  9900                           ; BSR set to: 0
  9901  004056  0100               	movlb	0	; () banked
  9902  004058  5185               	movf	___awmod@sign& (0+255),w,b
  9903  00405A  0100               	movlb	0	; () banked
  9904  00405C  B4D8               	btfsc	status,2,c
  9905  00405E  D005               	goto	l7979
  9906                           
  9907                           ; BSR set to: 0
  9908  004060  0100               	movlb	0	; () banked
  9909  004062  6D80               	negf	___awmod@dividend& (0+255),b
  9910  004064  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9911  004066  B0D8               	btfsc	status,0,c
  9912  004068  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9913  00406A                     l7979:
  9914                           
  9915                           ; BSR set to: 0
  9916  00406A  C080  F080         	movff	___awmod@dividend,?___awmod
  9917  00406E  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9918  004072  0012               	return	
  9919  004074                     __end_of___awmod:
  9920                           	opt stack 0
  9921                           tblptru	equ	0xFF8
  9922                           tblptrh	equ	0xFF7
  9923                           tblptrl	equ	0xFF6
  9924                           tablat	equ	0xFF5
  9925                           prodh	equ	0xFF4
  9926                           prodl	equ	0xFF3
  9927                           intcon	equ	0xFF2
  9928                           intcon2	equ	0xFF1
  9929                           intcon3	equ	0xFF0
  9930                           postinc0	equ	0xFEE
  9931                           wreg	equ	0xFE8
  9932                           postdec1	equ	0xFE5
  9933                           fsr1l	equ	0xFE1
  9934                           indf2	equ	0xFDF
  9935                           postinc2	equ	0xFDE
  9936                           postdec2	equ	0xFDD
  9937                           fsr2h	equ	0xFDA
  9938                           fsr2l	equ	0xFD9
  9939                           status	equ	0xFD8
  9940                           
  9941 ;; *************** function ___awdiv *****************
  9942 ;; Defined at:
  9943 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9944 ;; Parameters:    Size  Location     Type
  9945 ;;  dividend        2    6[BANK0 ] int 
  9946 ;;  divisor         2    8[BANK0 ] int 
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;  quotient        2   12[BANK0 ] int 
  9949 ;;  sign            1   11[BANK0 ] unsigned char 
  9950 ;;  counter         1   10[BANK0 ] unsigned char 
  9951 ;; Return value:  Size  Location     Type
  9952 ;;                  2    6[BANK0 ] int 
  9953 ;; Registers used:
  9954 ;;		wreg, status,2, status,0
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9960 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;Total ram usage:        8 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    7
  9967 ;; This function calls:
  9968 ;;		Nothing
  9969 ;; This function is called by:
  9970 ;;		_UI
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	text35
  9975  003DAE                     __ptext35:
  9976                           	opt stack 0
  9977  003DAE                     ___awdiv:
  9978                           	opt stack 22
  9979                           
  9980                           ; BSR set to: 0
  9981                           ;incstack = 0
  9982  003DAE  0E00               	movlw	0
  9983  003DB0  0100               	movlb	0	; () banked
  9984  003DB2  6F8B               	movwf	___awdiv@sign& (0+255),b
  9985                           
  9986                           ; BSR set to: 0
  9987  003DB4  0100               	movlb	0	; () banked
  9988  003DB6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9989  003DB8  D008               	goto	l7911
  9990                           
  9991                           ; BSR set to: 0
  9992  003DBA  0100               	movlb	0	; () banked
  9993  003DBC  6D88               	negf	___awdiv@divisor& (0+255),b
  9994  003DBE  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9995  003DC0  B0D8               	btfsc	status,0,c
  9996  003DC2  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9997                           
  9998                           ; BSR set to: 0
  9999  003DC4  0E01               	movlw	1
 10000  003DC6  0100               	movlb	0	; () banked
 10001  003DC8  6F8B               	movwf	___awdiv@sign& (0+255),b
 10002  003DCA                     l7911:
 10003                           
 10004                           ; BSR set to: 0
 10005  003DCA  0100               	movlb	0	; () banked
 10006  003DCC  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10007  003DCE  D008               	goto	l7917
 10008                           
 10009                           ; BSR set to: 0
 10010  003DD0  0100               	movlb	0	; () banked
 10011  003DD2  6D86               	negf	___awdiv@dividend& (0+255),b
 10012  003DD4  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10013  003DD6  B0D8               	btfsc	status,0,c
 10014  003DD8  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10015                           
 10016                           ; BSR set to: 0
 10017  003DDA  0E01               	movlw	1
 10018  003DDC  0100               	movlb	0	; () banked
 10019  003DDE  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10020  003DE0                     l7917:
 10021                           
 10022                           ; BSR set to: 0
 10023  003DE0  0E00               	movlw	0
 10024  003DE2  0100               	movlb	0	; () banked
 10025  003DE4  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10026  003DE6  0E00               	movlw	0
 10027  003DE8  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10028                           
 10029                           ; BSR set to: 0
 10030  003DEA  0100               	movlb	0	; () banked
 10031  003DEC  5188               	movf	___awdiv@divisor& (0+255),w,b
 10032  003DEE  0100               	movlb	0	; () banked
 10033  003DF0  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10034  003DF2  B4D8               	btfsc	status,2,c
 10035  003DF4  D02C               	goto	l7939
 10036                           
 10037                           ; BSR set to: 0
 10038  003DF6  0E01               	movlw	1
 10039  003DF8  0100               	movlb	0	; () banked
 10040  003DFA  6F8A               	movwf	___awdiv@counter& (0+255),b
 10041  003DFC  D006               	goto	l7925
 10042  003DFE                     l7923:
 10043                           
 10044                           ; BSR set to: 0
 10045  003DFE  0100               	movlb	0	; () banked
 10046  003E00  90D8               	bcf	status,0,c
 10047  003E02  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10048  003E04  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10049  003E06  0100               	movlb	0	; () banked
 10050  003E08  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10051  003E0A                     l7925:
 10052                           
 10053                           ; BSR set to: 0
 10054  003E0A  0100               	movlb	0	; () banked
 10055  003E0C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10056  003E0E  D7F7               	goto	l7923
 10057  003E10                     l7927:
 10058                           
 10059                           ; BSR set to: 0
 10060  003E10  0100               	movlb	0	; () banked
 10061  003E12  90D8               	bcf	status,0,c
 10062  003E14  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10063  003E16  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10064                           
 10065                           ; BSR set to: 0
 10066  003E18  0100               	movlb	0	; () banked
 10067  003E1A  5188               	movf	___awdiv@divisor& (0+255),w,b
 10068  003E1C  0100               	movlb	0	; () banked
 10069  003E1E  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10070  003E20  0100               	movlb	0	; () banked
 10071  003E22  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10072  003E24  0100               	movlb	0	; () banked
 10073  003E26  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10074  003E28  A0D8               	btfss	status,0,c
 10075  003E2A  D00A               	goto	l7935
 10076                           
 10077                           ; BSR set to: 0
 10078  003E2C  0100               	movlb	0	; () banked
 10079  003E2E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10080  003E30  0100               	movlb	0	; () banked
 10081  003E32  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10082  003E34  0100               	movlb	0	; () banked
 10083  003E36  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10084  003E38  0100               	movlb	0	; () banked
 10085  003E3A  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10086                           
 10087                           ; BSR set to: 0
 10088  003E3C  0100               	movlb	0	; () banked
 10089  003E3E  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10090  003E40                     l7935:
 10091                           
 10092                           ; BSR set to: 0
 10093  003E40  0100               	movlb	0	; () banked
 10094  003E42  90D8               	bcf	status,0,c
 10095  003E44  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10096  003E46  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10097                           
 10098                           ; BSR set to: 0
 10099  003E48  0100               	movlb	0	; () banked
 10100  003E4A  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10101  003E4C  D7E1               	goto	l7927
 10102  003E4E                     l7939:
 10103                           
 10104                           ; BSR set to: 0
 10105  003E4E  0100               	movlb	0	; () banked
 10106  003E50  518B               	movf	___awdiv@sign& (0+255),w,b
 10107  003E52  0100               	movlb	0	; () banked
 10108  003E54  B4D8               	btfsc	status,2,c
 10109  003E56  D005               	goto	l7943
 10110                           
 10111                           ; BSR set to: 0
 10112  003E58  0100               	movlb	0	; () banked
 10113  003E5A  6D8C               	negf	___awdiv@quotient& (0+255),b
 10114  003E5C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10115  003E5E  B0D8               	btfsc	status,0,c
 10116  003E60  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10117  003E62                     l7943:
 10118                           
 10119                           ; BSR set to: 0
 10120  003E62  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10121  003E66  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10122  003E6A  0012               	return	
 10123  003E6C                     __end_of___awdiv:
 10124                           	opt stack 0
 10125                           tblptru	equ	0xFF8
 10126                           tblptrh	equ	0xFF7
 10127                           tblptrl	equ	0xFF6
 10128                           tablat	equ	0xFF5
 10129                           prodh	equ	0xFF4
 10130                           prodl	equ	0xFF3
 10131                           intcon	equ	0xFF2
 10132                           intcon2	equ	0xFF1
 10133                           intcon3	equ	0xFF0
 10134                           postinc0	equ	0xFEE
 10135                           wreg	equ	0xFE8
 10136                           postdec1	equ	0xFE5
 10137                           fsr1l	equ	0xFE1
 10138                           indf2	equ	0xFDF
 10139                           postinc2	equ	0xFDE
 10140                           postdec2	equ	0xFDD
 10141                           fsr2h	equ	0xFDA
 10142                           fsr2l	equ	0xFD9
 10143                           status	equ	0xFD8
 10144                           
 10145 ;; *************** function _Test *****************
 10146 ;; Defined at:
 10147 ;;		line 30 in file "Test.c"
 10148 ;; Parameters:    Size  Location     Type
 10149 ;;		None
 10150 ;; Auto vars:     Size  Location     Type
 10151 ;;		None
 10152 ;; Return value:  Size  Location     Type
 10153 ;;                  1    wreg      void 
 10154 ;; Registers used:
 10155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10156 ;; Tracked objects:
 10157 ;;		On entry : 0/0
 10158 ;;		On exit  : 0/0
 10159 ;;		Unchanged: 0/0
 10160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10165 ;;Total ram usage:        2 bytes
 10166 ;; Hardware stack levels used:    1
 10167 ;; Hardware stack levels required when called:   11
 10168 ;; This function calls:
 10169 ;;		_BlockerTest
 10170 ;;		_BothServos
 10171 ;;		_EEPROMTest
 10172 ;;		_PortTestA5
 10173 ;;		_PortTests
 10174 ;;		_PusherTest
 10175 ;;		_SpeedTest
 10176 ;;		_actuatorTest
 10177 ;;		_algorithmTest
 10178 ;;		_lcdInst
 10179 ;;		_printf
 10180 ;;		_sensorTest
 10181 ;; This function is called by:
 10182 ;;		_main
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           	psect	text36
 10187  003A20                     __ptext36:
 10188                           	opt stack 0
 10189  003A20                     _Test:
 10190                           	opt stack 19
 10191  003A20                     
 10192                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10193  003A20  0E01               	movlw	1
 10194  003A22  EC67  F027         	call	_lcdInst
 10195  003A26  0E68               	movlw	104
 10196  003A28  0100               	movlb	0	; () banked
 10197  003A2A  6FC6               	movwf	??_Test& (0+255),b
 10198  003A2C  0EE4               	movlw	228
 10199  003A2E                     u8647:
 10200  003A2E  2EE8               	decfsz	wreg,f,c
 10201  003A30  D7FE               	bra	u8647
 10202  003A32  2FC6               	decfsz	??_Test& (0+255),f,b
 10203  003A34  D7FC               	bra	u8647
 10204  003A36  F000               	nop	
 10205  003A38  0E80               	movlw	128
 10206  003A3A  EC67  F027         	call	_lcdInst
 10207                           
 10208                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10209  003A3E  0E92               	movlw	low STR_68
 10210  003A40  0100               	movlb	0	; () banked
 10211  003A42  6F8E               	movwf	printf@f& (0+255),b
 10212  003A44  0EFC               	movlw	high STR_68
 10213  003A46  0100               	movlb	0	; () banked
 10214  003A48  6F8F               	movwf	(printf@f+1)& (0+255),b
 10215  003A4A  ECB8  F008         	call	_printf	;wreg free
 10216                           
 10217                           ;Test.c: 35: lcdInst(0b11000000);;
 10218  003A4E  0EC0               	movlw	192
 10219  003A50  EC67  F027         	call	_lcdInst
 10220                           
 10221                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10222  003A54  0EA3               	movlw	low STR_69
 10223  003A56  0100               	movlb	0	; () banked
 10224  003A58  6F8E               	movwf	printf@f& (0+255),b
 10225  003A5A  0EFC               	movlw	high STR_69
 10226  003A5C  0100               	movlb	0	; () banked
 10227  003A5E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10228  003A60  ECB8  F008         	call	_printf	;wreg free
 10229                           
 10230                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10231  003A64  0E05               	movlw	5
 10232  003A66  0100               	movlb	0	; () banked
 10233  003A68  6FC7               	movwf	(??_Test+1)& (0+255),b
 10234  003A6A  0E0F               	movlw	15
 10235  003A6C  0100               	movlb	0	; () banked
 10236  003A6E  6FC6               	movwf	??_Test& (0+255),b
 10237  003A70  0EF1               	movlw	241
 10238  003A72                     u8657:
 10239  003A72  2EE8               	decfsz	wreg,f,c
 10240  003A74  D7FE               	bra	u8657
 10241  003A76  2FC6               	decfsz	??_Test& (0+255),f,b
 10242  003A78  D7FC               	bra	u8657
 10243  003A7A  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10244  003A7C  D7FA               	bra	u8657
 10245  003A7E                     l1085:
 10246  003A7E  A281               	btfss	3969,1,c	;volatile
 10247  003A80  D7FE               	goto	l1085
 10248                           
 10249                           ;Test.c: 39: var = PORTB >> 4;
 10250  003A82  CF81 F0C6          	movff	3969,??_Test	;volatile
 10251  003A86  0100               	movlb	0	; () banked
 10252  003A88  3BC6               	swapf	??_Test& (0+255),f,b
 10253  003A8A  0E0F               	movlw	15
 10254  003A8C  17C6               	andwf	??_Test& (0+255),f,b
 10255  003A8E  0100               	movlb	0	; () banked
 10256  003A90  51C6               	movf	??_Test& (0+255),w,b
 10257  003A92  0100               	movlb	0	; () banked
 10258  003A94  6FFA               	movwf	_var& (0+255),b
 10259  003A96  6BFB               	clrf	(_var+1)& (0+255),b
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;Test.c: 40: var++;
 10263  003A98  0100               	movlb	0	; () banked
 10264  003A9A  4BFA               	infsnz	_var& (0+255),f,b
 10265  003A9C  2BFB               	incf	(_var+1)& (0+255),f,b
 10266  003A9E                     l1088:
 10267  003A9E  A281               	btfss	3969,1,c	;volatile
 10268  003AA0  D01F               	goto	l8683
 10269  003AA2  D7FD               	goto	l1088
 10270  003AA4                     l8661:
 10271                           
 10272                           ;Test.c: 44: algorithmTest();
 10273  003AA4  EC0C  F01E         	call	_algorithmTest	;wreg free
 10274                           
 10275                           ;Test.c: 45: break;
 10276  003AA8  D7BB               	goto	l8643
 10277  003AAA                     l8663:
 10278                           
 10279                           ;Test.c: 47: sensorTest();
 10280  003AAA  ECEC  F00F         	call	_sensorTest	;wreg free
 10281                           
 10282                           ;Test.c: 48: break;
 10283  003AAE  D7B8               	goto	l8643
 10284  003AB0                     l8665:
 10285                           
 10286                           ;Test.c: 50: actuatorTest();
 10287  003AB0  EC09  F000         	call	_actuatorTest	;wreg free
 10288                           
 10289                           ;Test.c: 51: break;
 10290  003AB4  D7B5               	goto	l8643
 10291  003AB6                     l8667:
 10292                           
 10293                           ;Test.c: 53: PortTestA5();
 10294  003AB6  EC33  F023         	call	_PortTestA5	;wreg free
 10295                           
 10296                           ;Test.c: 54: break;
 10297  003ABA  D7B2               	goto	l8643
 10298  003ABC                     l8669:
 10299                           
 10300                           ;Test.c: 57: SpeedTest();
 10301  003ABC  ECC3  F020         	call	_SpeedTest	;wreg free
 10302                           
 10303                           ;Test.c: 58: break;
 10304  003AC0  D7AF               	goto	l8643
 10305  003AC2                     l8671:
 10306                           
 10307                           ;Test.c: 60: EEPROMTest();
 10308  003AC2  EC99  F027         	call	_EEPROMTest	;wreg free
 10309                           
 10310                           ;Test.c: 61: break;
 10311  003AC6  D7AC               	goto	l8643
 10312  003AC8                     l8673:
 10313                           
 10314                           ;Test.c: 63: PusherTest();
 10315  003AC8  EC30  F014         	call	_PusherTest	;wreg free
 10316                           
 10317                           ;Test.c: 64: break;
 10318  003ACC  D7A9               	goto	l8643
 10319  003ACE                     l8675:
 10320                           
 10321                           ;Test.c: 66: PortTests();
 10322  003ACE  EC05  F021         	call	_PortTests	;wreg free
 10323                           
 10324                           ;Test.c: 67: break;
 10325  003AD2  D7A6               	goto	l8643
 10326  003AD4                     l8677:
 10327                           
 10328                           ;Test.c: 69: BothServos();
 10329  003AD4  ECD4  F00A         	call	_BothServos	;wreg free
 10330                           
 10331                           ;Test.c: 70: break;
 10332  003AD8  D7A3               	goto	l8643
 10333  003ADA                     l8679:
 10334                           
 10335                           ;Test.c: 72: BlockerTest();
 10336  003ADA  EC5C  F01A         	call	_BlockerTest	;wreg free
 10337                           
 10338                           ;Test.c: 76: }
 10339                           
 10340                           ;Test.c: 75: break;
 10341                           
 10342                           ;Test.c: 74: default:
 10343                           
 10344                           ;Test.c: 73: break;
 10345  003ADE  D7A0               	goto	l8643
 10346  003AE0                     l8683:
 10347  003AE0  C0FA  F0C6         	movff	_var,??_Test
 10348  003AE4  C0FB  F0C7         	movff	_var+1,??_Test+1
 10349                           
 10350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10351                           ; Switch size 1, requested type "space"
 10352                           ; Number of cases is 1, Range of values is 0 to 0
 10353                           ; switch strategies available:
 10354                           ; Name         Instructions Cycles
 10355                           ; simple_byte            4     3 (average)
 10356                           ;	Chosen strategy is simple_byte
 10357  003AE8  0100               	movlb	0	; () banked
 10358  003AEA  51C7               	movf	(??_Test+1)& (0+255),w,b
 10359  003AEC  0A00               	xorlw	0	; case 0
 10360  003AEE  A4D8               	btfss	status,2,c
 10361  003AF0  D797               	goto	l8643
 10362                           
 10363                           ; BSR set to: 0
 10364                           ; Switch size 1, requested type "space"
 10365                           ; Number of cases is 10, Range of values is 1 to 11
 10366                           ; switch strategies available:
 10367                           ; Name         Instructions Cycles
 10368                           ; simple_byte           31    16 (average)
 10369                           ;	Chosen strategy is simple_byte
 10370  003AF2  0100               	movlb	0	; () banked
 10371  003AF4  51C6               	movf	??_Test& (0+255),w,b
 10372  003AF6  0A01               	xorlw	1	; case 1
 10373  003AF8  B4D8               	btfsc	status,2,c
 10374  003AFA  D7D4               	goto	l8661
 10375  003AFC  0A03               	xorlw	3	; case 2
 10376  003AFE  B4D8               	btfsc	status,2,c
 10377  003B00  D7D4               	goto	l8663
 10378  003B02  0A01               	xorlw	1	; case 3
 10379  003B04  B4D8               	btfsc	status,2,c
 10380  003B06  D7D4               	goto	l8665
 10381  003B08  0A06               	xorlw	6	; case 5
 10382  003B0A  B4D8               	btfsc	status,2,c
 10383  003B0C  D7D4               	goto	l8667
 10384  003B0E  0A03               	xorlw	3	; case 6
 10385  003B10  B4D8               	btfsc	status,2,c
 10386  003B12  D7D4               	goto	l8669
 10387  003B14  0A01               	xorlw	1	; case 7
 10388  003B16  B4D8               	btfsc	status,2,c
 10389  003B18  D7D4               	goto	l8671
 10390  003B1A  0A0F               	xorlw	15	; case 8
 10391  003B1C  B4D8               	btfsc	status,2,c
 10392  003B1E  D7D4               	goto	l8673
 10393  003B20  0A01               	xorlw	1	; case 9
 10394  003B22  B4D8               	btfsc	status,2,c
 10395  003B24  D7D4               	goto	l8675
 10396  003B26  0A03               	xorlw	3	; case 10
 10397  003B28  B4D8               	btfsc	status,2,c
 10398  003B2A  D7D4               	goto	l8677
 10399  003B2C  0A01               	xorlw	1	; case 11
 10400  003B2E  B4D8               	btfsc	status,2,c
 10401  003B30  D7D4               	goto	l8679
 10402                           
 10403                           ; BSR set to: 0
 10404                           
 10405                           ; BSR set to: 0
 10406  003B32  D776               	goto	l8643
 10407  003B34                     __end_of_Test:
 10408                           	opt stack 0
 10409                           tblptru	equ	0xFF8
 10410                           tblptrh	equ	0xFF7
 10411                           tblptrl	equ	0xFF6
 10412                           tablat	equ	0xFF5
 10413                           prodh	equ	0xFF4
 10414                           prodl	equ	0xFF3
 10415                           intcon	equ	0xFF2
 10416                           intcon2	equ	0xFF1
 10417                           intcon3	equ	0xFF0
 10418                           postinc0	equ	0xFEE
 10419                           wreg	equ	0xFE8
 10420                           postdec1	equ	0xFE5
 10421                           fsr1l	equ	0xFE1
 10422                           indf2	equ	0xFDF
 10423                           postinc2	equ	0xFDE
 10424                           postdec2	equ	0xFDD
 10425                           fsr2h	equ	0xFDA
 10426                           fsr2l	equ	0xFD9
 10427                           status	equ	0xFD8
 10428                           
 10429 ;; *************** function _sensorTest *****************
 10430 ;; Defined at:
 10431 ;;		line 124 in file "Test.c"
 10432 ;; Parameters:    Size  Location     Type
 10433 ;;		None
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  res             2   45[BANK0 ] int 
 10436 ;; Return value:  Size  Location     Type
 10437 ;;                  1    wreg      void 
 10438 ;; Registers used:
 10439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10440 ;; Tracked objects:
 10441 ;;		On entry : 0/0
 10442 ;;		On exit  : 0/0
 10443 ;;		Unchanged: 0/0
 10444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;Total ram usage:        4 bytes
 10450 ;; Hardware stack levels used:    1
 10451 ;; Hardware stack levels required when called:   10
 10452 ;; This function calls:
 10453 ;;		_lcdInst
 10454 ;;		_printf
 10455 ;;		_readADC
 10456 ;;		_readMAG
 10457 ;; This function is called by:
 10458 ;;		_Test
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           	psect	text37
 10463  001FD8                     __ptext37:
 10464                           	opt stack 0
 10465  001FD8                     _sensorTest:
 10466                           	opt stack 19
 10467                           
 10468                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10469                           
 10470                           ; BSR set to: 0
 10471                           ;incstack = 0
 10472  001FD8  0E01               	movlw	1
 10473  001FDA  EC67  F027         	call	_lcdInst
 10474  001FDE  0E68               	movlw	104
 10475  001FE0  0100               	movlb	0	; () banked
 10476  001FE2  6FAB               	movwf	??_sensorTest& (0+255),b
 10477  001FE4  0EE4               	movlw	228
 10478  001FE6                     u8667:
 10479  001FE6  2EE8               	decfsz	wreg,f,c
 10480  001FE8  D7FE               	bra	u8667
 10481  001FEA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10482  001FEC  D7FC               	bra	u8667
 10483  001FEE  F000               	nop	
 10484  001FF0  0E80               	movlw	128
 10485  001FF2  EC67  F027         	call	_lcdInst
 10486                           
 10487                           ;Test.c: 127: printf("SENSORS");
 10488  001FF6  0EAE               	movlw	low STR_77
 10489  001FF8  0100               	movlb	0	; () banked
 10490  001FFA  6F8E               	movwf	printf@f& (0+255),b
 10491  001FFC  0EFF               	movlw	high STR_77
 10492  001FFE  0100               	movlb	0	; () banked
 10493  002000  6F8F               	movwf	(printf@f+1)& (0+255),b
 10494  002002  ECB8  F008         	call	_printf	;wreg free
 10495                           
 10496                           ;Test.c: 128: lcdInst(0b11000000);;
 10497  002006  0EC0               	movlw	192
 10498  002008  EC67  F027         	call	_lcdInst
 10499                           
 10500                           ;Test.c: 129: printf("PUSH TO START");
 10501  00200C  0E0B               	movlw	low STR_71
 10502  00200E  0100               	movlb	0	; () banked
 10503  002010  6F8E               	movwf	printf@f& (0+255),b
 10504  002012  0EFF               	movlw	high STR_71
 10505  002014  0100               	movlb	0	; () banked
 10506  002016  6F8F               	movwf	(printf@f+1)& (0+255),b
 10507  002018  ECB8  F008         	call	_printf	;wreg free
 10508                           
 10509                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10510  00201C  0E05               	movlw	5
 10511  00201E  0100               	movlb	0	; () banked
 10512  002020  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10513  002022  0E0F               	movlw	15
 10514  002024  0100               	movlb	0	; () banked
 10515  002026  6FAB               	movwf	??_sensorTest& (0+255),b
 10516  002028  0EF1               	movlw	241
 10517  00202A                     u8677:
 10518  00202A  2EE8               	decfsz	wreg,f,c
 10519  00202C  D7FE               	bra	u8677
 10520  00202E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10521  002030  D7FC               	bra	u8677
 10522  002032  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10523  002034  D7FA               	bra	u8677
 10524  002036                     l1118:
 10525  002036  A281               	btfss	3969,1,c	;volatile
 10526  002038  D7FE               	goto	l1118
 10527  00203A                     l1121:
 10528  00203A  B281               	btfsc	3969,1,c	;volatile
 10529  00203C  D7FE               	goto	l1121
 10530                           
 10531                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10532  00203E  0E01               	movlw	1
 10533  002040  EC67  F027         	call	_lcdInst
 10534  002044  0E68               	movlw	104
 10535  002046  0100               	movlb	0	; () banked
 10536  002048  6FAB               	movwf	??_sensorTest& (0+255),b
 10537  00204A  0EE4               	movlw	228
 10538  00204C                     u8687:
 10539  00204C  2EE8               	decfsz	wreg,f,c
 10540  00204E  D7FE               	bra	u8687
 10541  002050  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10542  002052  D7FC               	bra	u8687
 10543  002054  F000               	nop	
 10544  002056  0E80               	movlw	128
 10545  002058  EC67  F027         	call	_lcdInst
 10546                           
 10547                           ;Test.c: 138: printf("TST: IR SNSR");
 10548  00205C  0E35               	movlw	low STR_79
 10549  00205E  0100               	movlb	0	; () banked
 10550  002060  6F8E               	movwf	printf@f& (0+255),b
 10551  002062  0EFF               	movlw	high STR_79
 10552  002064  0100               	movlb	0	; () banked
 10553  002066  6F8F               	movwf	(printf@f+1)& (0+255),b
 10554  002068  ECB8  F008         	call	_printf	;wreg free
 10555                           
 10556                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10557  00206C  0E05               	movlw	5
 10558  00206E  0100               	movlb	0	; () banked
 10559  002070  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10560  002072  0E0F               	movlw	15
 10561  002074  0100               	movlb	0	; () banked
 10562  002076  6FAB               	movwf	??_sensorTest& (0+255),b
 10563  002078  0EF1               	movlw	241
 10564  00207A                     u8697:
 10565  00207A  2EE8               	decfsz	wreg,f,c
 10566  00207C  D7FE               	bra	u8697
 10567  00207E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10568  002080  D7FC               	bra	u8697
 10569  002082  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10570  002084  D7FA               	bra	u8697
 10571                           
 10572                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10573  002086  8A8B               	bsf	3979,5,c	;volatile
 10574                           
 10575                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10576  002088  D05C               	goto	l7129
 10577  00208A                     l7111:
 10578                           
 10579                           ;Test.c: 143: readADC(0);
 10580  00208A  0E00               	movlw	0
 10581  00208C  EC6C  F026         	call	_readADC
 10582                           
 10583                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10584  002090  50C3               	movf	4035,w,c	;volatile
 10585  002092  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10586  002096  0100               	movlb	0	; () banked
 10587  002098  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10588  00209A  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10589  00209E  0100               	movlb	0	; () banked
 10590  0020A0  6BAB               	clrf	??_sensorTest& (0+255),b
 10591  0020A2  0100               	movlb	0	; () banked
 10592  0020A4  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10593  0020A6  0100               	movlb	0	; () banked
 10594  0020A8  6FAD               	movwf	sensorTest@res& (0+255),b
 10595  0020AA  0100               	movlb	0	; () banked
 10596  0020AC  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10597  0020AE  0100               	movlb	0	; () banked
 10598  0020B0  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10602  0020B2  0100               	movlb	0	; () banked
 10603  0020B4  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10604  0020B6  D00A               	goto	u5760
 10605  0020B8  0E21               	movlw	33
 10606  0020BA  0100               	movlb	0	; () banked
 10607  0020BC  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10608  0020BE  0E03               	movlw	3
 10609  0020C0  0100               	movlb	0	; () banked
 10610  0020C2  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10611  0020C4  A0D8               	btfss	status,0,c
 10612  0020C6  D002               	goto	u5760
 10613  0020C8  0E01               	movlw	1
 10614  0020CA  D001               	goto	u5770
 10615  0020CC                     u5760:
 10616  0020CC  0E00               	movlw	0
 10617  0020CE                     u5770:
 10618  0020CE  0100               	movlb	0	; () banked
 10619  0020D0  6FDE               	movwf	_IR_signal& (0+255),b
 10620  0020D2  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10621                           
 10622                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10623  0020D4  0E01               	movlw	1
 10624  0020D6  EC67  F027         	call	_lcdInst
 10625  0020DA  0E68               	movlw	104
 10626  0020DC  0100               	movlb	0	; () banked
 10627  0020DE  6FAB               	movwf	??_sensorTest& (0+255),b
 10628  0020E0  0EE4               	movlw	228
 10629  0020E2                     u8707:
 10630  0020E2  2EE8               	decfsz	wreg,f,c
 10631  0020E4  D7FE               	bra	u8707
 10632  0020E6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10633  0020E8  D7FC               	bra	u8707
 10634  0020EA  F000               	nop	
 10635  0020EC  0E80               	movlw	128
 10636  0020EE  EC67  F027         	call	_lcdInst
 10637                           
 10638                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10639  0020F2  0E5A               	movlw	low STR_80
 10640  0020F4  0100               	movlb	0	; () banked
 10641  0020F6  6F8E               	movwf	printf@f& (0+255),b
 10642  0020F8  0EFE               	movlw	high STR_80
 10643  0020FA  0100               	movlb	0	; () banked
 10644  0020FC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10645  0020FE  C0DE  F090         	movff	_IR_signal,?_printf+2
 10646  002102  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 10647  002106  ECB8  F008         	call	_printf	;wreg free
 10648                           
 10649                           ;Test.c: 149: lcdInst(0b11000000);;
 10650  00210A  0EC0               	movlw	192
 10651  00210C  EC67  F027         	call	_lcdInst
 10652                           
 10653                           ;Test.c: 150: printf("%d", res);
 10654  002110  0E16               	movlw	low (STR_27+14)
 10655  002112  0100               	movlb	0	; () banked
 10656  002114  6F8E               	movwf	printf@f& (0+255),b
 10657  002116  0EFE               	movlw	high (STR_27+14)
 10658  002118  0100               	movlb	0	; () banked
 10659  00211A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10660  00211C  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10661  002120  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10662  002124  ECB8  F008         	call	_printf	;wreg free
 10663                           
 10664                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10665  002128  0E05               	movlw	5
 10666  00212A  0100               	movlb	0	; () banked
 10667  00212C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10668  00212E  0E0F               	movlw	15
 10669  002130  0100               	movlb	0	; () banked
 10670  002132  6FAB               	movwf	??_sensorTest& (0+255),b
 10671  002134  0EF1               	movlw	241
 10672  002136                     u8717:
 10673  002136  2EE8               	decfsz	wreg,f,c
 10674  002138  D7FE               	bra	u8717
 10675  00213A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10676  00213C  D7FC               	bra	u8717
 10677  00213E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10678  002140  D7FA               	bra	u8717
 10679  002142                     l7129:
 10680  002142  A281               	btfss	3969,1,c	;volatile
 10681  002144  D7A2               	goto	l7111
 10682                           
 10683                           ;Test.c: 152: }
 10684                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10685  002146  9A8B               	bcf	3979,5,c	;volatile
 10686                           
 10687                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10688  002148  0E01               	movlw	1
 10689  00214A  EC67  F027         	call	_lcdInst
 10690  00214E  0E68               	movlw	104
 10691  002150  0100               	movlb	0	; () banked
 10692  002152  6FAB               	movwf	??_sensorTest& (0+255),b
 10693  002154  0EE4               	movlw	228
 10694  002156                     u8727:
 10695  002156  2EE8               	decfsz	wreg,f,c
 10696  002158  D7FE               	bra	u8727
 10697  00215A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10698  00215C  D7FC               	bra	u8727
 10699  00215E  F000               	nop	
 10700  002160  0E80               	movlw	128
 10701  002162  EC67  F027         	call	_lcdInst
 10702                           
 10703                           ;Test.c: 162: printf("TST: MAGNETISM");
 10704  002166  0E87               	movlw	low STR_82
 10705  002168  0100               	movlb	0	; () banked
 10706  00216A  6F8E               	movwf	printf@f& (0+255),b
 10707  00216C  0EFE               	movlw	high STR_82
 10708  00216E  0100               	movlb	0	; () banked
 10709  002170  6F8F               	movwf	(printf@f+1)& (0+255),b
 10710  002172  ECB8  F008         	call	_printf	;wreg free
 10711                           
 10712                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10713  002176  0E05               	movlw	5
 10714  002178  0100               	movlb	0	; () banked
 10715  00217A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10716  00217C  0E0F               	movlw	15
 10717  00217E  0100               	movlb	0	; () banked
 10718  002180  6FAB               	movwf	??_sensorTest& (0+255),b
 10719  002182  0EF1               	movlw	241
 10720  002184                     u8737:
 10721  002184  2EE8               	decfsz	wreg,f,c
 10722  002186  D7FE               	bra	u8737
 10723  002188  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10724  00218A  D7FC               	bra	u8737
 10725  00218C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10726  00218E  D7FA               	bra	u8737
 10727                           
 10728                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 10729  002190  D021               	goto	l7147
 10730  002192                     l7141:
 10731                           
 10732                           ;Test.c: 165: readMAG();
 10733  002192  EC2F  F024         	call	_readMAG	;wreg free
 10734                           
 10735                           ;Test.c: 166: lcdInst(0b10000000);;
 10736  002196  0E80               	movlw	128
 10737  002198  EC67  F027         	call	_lcdInst
 10738                           
 10739                           ;Test.c: 167: lcdInst(0b11000000);;
 10740  00219C  0EC0               	movlw	192
 10741  00219E  EC67  F027         	call	_lcdInst
 10742                           
 10743                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 10744  0021A2  0E2A               	movlw	low STR_83
 10745  0021A4  0100               	movlb	0	; () banked
 10746  0021A6  6F8E               	movwf	printf@f& (0+255),b
 10747  0021A8  0EFE               	movlw	high STR_83
 10748  0021AA  0100               	movlb	0	; () banked
 10749  0021AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10750  0021AE  C0E0  F090         	movff	_MAG_signal,?_printf+2
 10751  0021B2  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 10752  0021B6  ECB8  F008         	call	_printf	;wreg free
 10753                           
 10754                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10755  0021BA  0E05               	movlw	5
 10756  0021BC  0100               	movlb	0	; () banked
 10757  0021BE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10758  0021C0  0E0F               	movlw	15
 10759  0021C2  0100               	movlb	0	; () banked
 10760  0021C4  6FAB               	movwf	??_sensorTest& (0+255),b
 10761  0021C6  0EF1               	movlw	241
 10762  0021C8                     u8747:
 10763  0021C8  2EE8               	decfsz	wreg,f,c
 10764  0021CA  D7FE               	bra	u8747
 10765  0021CC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10766  0021CE  D7FC               	bra	u8747
 10767  0021D0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10768  0021D2  D7FA               	bra	u8747
 10769  0021D4                     l7147:
 10770  0021D4  A281               	btfss	3969,1,c	;volatile
 10771  0021D6  D7DD               	goto	l7141
 10772                           
 10773                           ;Test.c: 170: }
 10774                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10775  0021D8  0E01               	movlw	1
 10776  0021DA  EC67  F027         	call	_lcdInst
 10777  0021DE  0E68               	movlw	104
 10778  0021E0  0100               	movlb	0	; () banked
 10779  0021E2  6FAB               	movwf	??_sensorTest& (0+255),b
 10780  0021E4  0EE4               	movlw	228
 10781  0021E6                     u8757:
 10782  0021E6  2EE8               	decfsz	wreg,f,c
 10783  0021E8  D7FE               	bra	u8757
 10784  0021EA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10785  0021EC  D7FC               	bra	u8757
 10786  0021EE  F000               	nop	
 10787  0021F0  0E80               	movlw	128
 10788  0021F2  EC67  F027         	call	_lcdInst
 10789                           
 10790                           ;Test.c: 176: printf("TST: COND");
 10791  0021F6  0E87               	movlw	low STR_84
 10792  0021F8  0100               	movlb	0	; () banked
 10793  0021FA  6F8E               	movwf	printf@f& (0+255),b
 10794  0021FC  0EFF               	movlw	high STR_84
 10795  0021FE  0100               	movlb	0	; () banked
 10796  002200  6F8F               	movwf	(printf@f+1)& (0+255),b
 10797  002202  ECB8  F008         	call	_printf	;wreg free
 10798                           
 10799                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 10800  002206  0E05               	movlw	5
 10801  002208  0100               	movlb	0	; () banked
 10802  00220A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10803  00220C  0E0F               	movlw	15
 10804  00220E  0100               	movlb	0	; () banked
 10805  002210  6FAB               	movwf	??_sensorTest& (0+255),b
 10806  002212  0EF1               	movlw	241
 10807  002214                     u8767:
 10808  002214  2EE8               	decfsz	wreg,f,c
 10809  002216  D7FE               	bra	u8767
 10810  002218  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10811  00221A  D7FC               	bra	u8767
 10812  00221C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10813  00221E  D7FA               	bra	u8767
 10814  002220                     l7159:
 10815                           
 10816                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10817  002220  0E01               	movlw	1
 10818  002222  EC67  F027         	call	_lcdInst
 10819  002226  0E68               	movlw	104
 10820  002228  0100               	movlb	0	; () banked
 10821  00222A  6FAB               	movwf	??_sensorTest& (0+255),b
 10822  00222C  0EE4               	movlw	228
 10823  00222E                     u8777:
 10824  00222E  2EE8               	decfsz	wreg,f,c
 10825  002230  D7FE               	bra	u8777
 10826  002232  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10827  002234  D7FC               	bra	u8777
 10828  002236  F000               	nop	
 10829  002238  0E80               	movlw	128
 10830  00223A  EC67  F027         	call	_lcdInst
 10831                           
 10832                           ;Test.c: 180: printf("TST: COND");
 10833  00223E  0E87               	movlw	low STR_84
 10834  002240  0100               	movlb	0	; () banked
 10835  002242  6F8E               	movwf	printf@f& (0+255),b
 10836  002244  0EFF               	movlw	high STR_84
 10837  002246  0100               	movlb	0	; () banked
 10838  002248  6F8F               	movwf	(printf@f+1)& (0+255),b
 10839  00224A  ECB8  F008         	call	_printf	;wreg free
 10840                           
 10841                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 10842  00224E  D01B               	goto	l7171
 10843  002250                     l7167:
 10844                           
 10845                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10846  002250  0E80               	movlw	128
 10847  002252  EC67  F027         	call	_lcdInst
 10848  002256  0EC0               	movlw	192
 10849  002258  EC67  F027         	call	_lcdInst
 10850                           
 10851                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 10852  00225C  0EA5               	movlw	low STR_86
 10853  00225E  0100               	movlb	0	; () banked
 10854  002260  6F8E               	movwf	printf@f& (0+255),b
 10855  002262  0EFF               	movlw	high STR_86
 10856  002264  0100               	movlb	0	; () banked
 10857  002266  6F8F               	movwf	(printf@f+1)& (0+255),b
 10858  002268  A480               	btfss	3968,2,c	;volatile
 10859  00226A  D004               	goto	u5800
 10860  00226C  0100               	movlb	0	; () banked
 10861  00226E  6BAB               	clrf	??_sensorTest& (0+255),b
 10862  002270  2BAB               	incf	??_sensorTest& (0+255),f,b
 10863  002272  D002               	goto	u5808
 10864  002274                     u5800:
 10865  002274  0100               	movlb	0	; () banked
 10866  002276  6BAB               	clrf	??_sensorTest& (0+255),b
 10867  002278                     u5808:
 10868  002278  0100               	movlb	0	; () banked
 10869  00227A  51AB               	movf	??_sensorTest& (0+255),w,b
 10870  00227C  0100               	movlb	0	; () banked
 10871  00227E  6F90               	movwf	(?_printf+2)& (0+255),b
 10872  002280  6B91               	clrf	(?_printf+3)& (0+255),b
 10873  002282  ECB8  F008         	call	_printf	;wreg free
 10874  002286                     l7171:
 10875  002286  A281               	btfss	3969,1,c	;volatile
 10876  002288  D7E3               	goto	l7167
 10877                           
 10878                           ;Test.c: 187: }
 10879                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 10880  00228A  3881               	swapf	3969,w,c	;volatile
 10881  00228C  0B0F               	andlw	15
 10882  00228E  0A0F               	xorlw	15
 10883  002290  B4D8               	btfsc	status,2,c
 10884  002292  0012               	return	
 10885                           
 10886                           ;Test.c: 191: else{
 10887                           ;Test.c: 192: LATAbits.LATA3 = 1;
 10888                           
 10889                           ;Test.c: 190: }
 10890                           
 10891                           ;Test.c: 189: break;
 10892  002294  8689               	bsf	3977,3,c	;volatile
 10893                           
 10894                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 10895  002296  D01B               	goto	l7183
 10896  002298                     l7179:
 10897                           
 10898                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10899  002298  0E80               	movlw	128
 10900  00229A  EC67  F027         	call	_lcdInst
 10901  00229E  0EC0               	movlw	192
 10902  0022A0  EC67  F027         	call	_lcdInst
 10903                           
 10904                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 10905  0022A4  0EA5               	movlw	low STR_86
 10906  0022A6  0100               	movlb	0	; () banked
 10907  0022A8  6F8E               	movwf	printf@f& (0+255),b
 10908  0022AA  0EFF               	movlw	high STR_86
 10909  0022AC  0100               	movlb	0	; () banked
 10910  0022AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10911  0022B0  A480               	btfss	3968,2,c	;volatile
 10912  0022B2  D004               	goto	u5830
 10913  0022B4  0100               	movlb	0	; () banked
 10914  0022B6  6BAB               	clrf	??_sensorTest& (0+255),b
 10915  0022B8  2BAB               	incf	??_sensorTest& (0+255),f,b
 10916  0022BA  D002               	goto	u5838
 10917  0022BC                     u5830:
 10918  0022BC  0100               	movlb	0	; () banked
 10919  0022BE  6BAB               	clrf	??_sensorTest& (0+255),b
 10920  0022C0                     u5838:
 10921  0022C0  0100               	movlb	0	; () banked
 10922  0022C2  51AB               	movf	??_sensorTest& (0+255),w,b
 10923  0022C4  0100               	movlb	0	; () banked
 10924  0022C6  6F90               	movwf	(?_printf+2)& (0+255),b
 10925  0022C8  6B91               	clrf	(?_printf+3)& (0+255),b
 10926  0022CA  ECB8  F008         	call	_printf	;wreg free
 10927  0022CE                     l7183:
 10928  0022CE  B281               	btfsc	3969,1,c	;volatile
 10929  0022D0  D7E3               	goto	l7179
 10930                           
 10931                           ;Test.c: 197: }
 10932                           ;Test.c: 198: LATAbits.LATA3 = !1;
 10933  0022D2  9689               	bcf	3977,3,c	;volatile
 10934  0022D4  D7A5               	goto	l7159
 10935  0022D6                     __end_of_sensorTest:
 10936                           	opt stack 0
 10937                           tblptru	equ	0xFF8
 10938                           tblptrh	equ	0xFF7
 10939                           tblptrl	equ	0xFF6
 10940                           tablat	equ	0xFF5
 10941                           prodh	equ	0xFF4
 10942                           prodl	equ	0xFF3
 10943                           intcon	equ	0xFF2
 10944                           intcon2	equ	0xFF1
 10945                           intcon3	equ	0xFF0
 10946                           postinc0	equ	0xFEE
 10947                           wreg	equ	0xFE8
 10948                           postdec1	equ	0xFE5
 10949                           fsr1l	equ	0xFE1
 10950                           indf2	equ	0xFDF
 10951                           postinc2	equ	0xFDE
 10952                           postdec2	equ	0xFDD
 10953                           fsr2h	equ	0xFDA
 10954                           fsr2l	equ	0xFD9
 10955                           status	equ	0xFD8
 10956                           
 10957 ;; *************** function _readMAG *****************
 10958 ;; Defined at:
 10959 ;;		line 29 in file "ADCFunctionality.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;  res             2    4[BANK0 ] int 
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  1    wreg      void 
 10966 ;; Registers used:
 10967 ;;		wreg, status,2, status,0, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10976 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10977 ;;Total ram usage:        4 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:    8
 10980 ;; This function calls:
 10981 ;;		_readADC
 10982 ;; This function is called by:
 10983 ;;		_getMAG
 10984 ;;		_sensorTest
 10985 ;; This function uses a non-reentrant model
 10986 ;;
 10987                           
 10988                           	psect	text38
 10989  00485E                     __ptext38:
 10990                           	opt stack 0
 10991  00485E                     _readMAG:
 10992                           	opt stack 19
 10993                           
 10994                           ;ADCFunctionality.c: 30: readADC(1);
 10995                           
 10996                           ;incstack = 0
 10997  00485E  0E01               	movlw	1
 10998  004860  EC6C  F026         	call	_readADC
 10999                           
 11000                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11001  004864  50C3               	movf	4035,w,c	;volatile
 11002  004866  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11003  00486A  0100               	movlb	0	; () banked
 11004  00486C  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11005  00486E  C082  F083         	movff	??_readMAG,??_readMAG+1
 11006  004872  0100               	movlb	0	; () banked
 11007  004874  6B82               	clrf	??_readMAG& (0+255),b
 11008  004876  0100               	movlb	0	; () banked
 11009  004878  1182               	iorwf	??_readMAG& (0+255),w,b
 11010  00487A  0100               	movlb	0	; () banked
 11011  00487C  6F84               	movwf	readMAG@res& (0+255),b
 11012  00487E  0100               	movlb	0	; () banked
 11013  004880  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11014  004882  0100               	movlb	0	; () banked
 11015  004884  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11019  004886  0100               	movlb	0	; () banked
 11020  004888  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11021  00488A  D008               	goto	u4321
 11022  00488C  0100               	movlb	0	; () banked
 11023  00488E  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11024  004890  E107               	bnz	u4320
 11025  004892  0E96               	movlw	150
 11026  004894  0100               	movlb	0	; () banked
 11027  004896  5D84               	subwf	readMAG@res& (0+255),w,b
 11028  004898  B0D8               	btfsc	status,0,c
 11029  00489A  D002               	goto	u4320
 11030  00489C                     u4321:
 11031  00489C  0E01               	movlw	1
 11032  00489E  D001               	goto	u4330
 11033  0048A0                     u4320:
 11034  0048A0  0E00               	movlw	0
 11035  0048A2                     u4330:
 11036  0048A2  0100               	movlb	0	; () banked
 11037  0048A4  6FE0               	movwf	_MAG_signal& (0+255),b
 11038  0048A6  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 11039                           
 11040                           ; BSR set to: 0
 11041  0048A8  0012               	return		;funcret
 11042  0048AA                     __end_of_readMAG:
 11043                           	opt stack 0
 11044                           tblptru	equ	0xFF8
 11045                           tblptrh	equ	0xFF7
 11046                           tblptrl	equ	0xFF6
 11047                           tablat	equ	0xFF5
 11048                           prodh	equ	0xFF4
 11049                           prodl	equ	0xFF3
 11050                           intcon	equ	0xFF2
 11051                           intcon2	equ	0xFF1
 11052                           intcon3	equ	0xFF0
 11053                           postinc0	equ	0xFEE
 11054                           wreg	equ	0xFE8
 11055                           postdec1	equ	0xFE5
 11056                           fsr1l	equ	0xFE1
 11057                           indf2	equ	0xFDF
 11058                           postinc2	equ	0xFDE
 11059                           postdec2	equ	0xFDD
 11060                           fsr2h	equ	0xFDA
 11061                           fsr2l	equ	0xFD9
 11062                           status	equ	0xFD8
 11063                           
 11064 ;; *************** function _algorithmTest *****************
 11065 ;; Defined at:
 11066 ;;		line 80 in file "Test.c"
 11067 ;; Parameters:    Size  Location     Type
 11068 ;;		None
 11069 ;; Auto vars:     Size  Location     Type
 11070 ;;		None
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  1    wreg      void 
 11073 ;; Registers used:
 11074 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11075 ;; Tracked objects:
 11076 ;;		On entry : 0/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11083 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11084 ;;Total ram usage:        2 bytes
 11085 ;; Hardware stack levels used:    1
 11086 ;; Hardware stack levels required when called:   10
 11087 ;; This function calls:
 11088 ;;		_lcdInst
 11089 ;;		_printf
 11090 ;; This function is called by:
 11091 ;;		_Test
 11092 ;; This function uses a non-reentrant model
 11093 ;;
 11094                           
 11095                           	psect	text39
 11096  003C18                     __ptext39:
 11097                           	opt stack 0
 11098  003C18                     _algorithmTest:
 11099                           	opt stack 19
 11100                           
 11101                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11102                           
 11103                           ; BSR set to: 0
 11104                           ;incstack = 0
 11105  003C18  0E01               	movlw	1
 11106  003C1A  EC67  F027         	call	_lcdInst
 11107  003C1E  0E68               	movlw	104
 11108  003C20  0100               	movlb	0	; () banked
 11109  003C22  6FAB               	movwf	??_algorithmTest& (0+255),b
 11110  003C24  0EE4               	movlw	228
 11111  003C26                     u8787:
 11112  003C26  2EE8               	decfsz	wreg,f,c
 11113  003C28  D7FE               	bra	u8787
 11114  003C2A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11115  003C2C  D7FC               	bra	u8787
 11116  003C2E  F000               	nop	
 11117  003C30  0E80               	movlw	128
 11118  003C32  EC67  F027         	call	_lcdInst
 11119                           
 11120                           ;Test.c: 83: printf("ALGORITHM TEST");
 11121  003C36  0ED2               	movlw	low STR_70
 11122  003C38  0100               	movlb	0	; () banked
 11123  003C3A  6F8E               	movwf	printf@f& (0+255),b
 11124  003C3C  0EFE               	movlw	high STR_70
 11125  003C3E  0100               	movlb	0	; () banked
 11126  003C40  6F8F               	movwf	(printf@f+1)& (0+255),b
 11127  003C42  ECB8  F008         	call	_printf	;wreg free
 11128                           
 11129                           ;Test.c: 84: lcdInst(0b11000000);;
 11130  003C46  0EC0               	movlw	192
 11131  003C48  EC67  F027         	call	_lcdInst
 11132                           
 11133                           ;Test.c: 85: printf("PUSH TO START");
 11134  003C4C  0E0B               	movlw	low STR_71
 11135  003C4E  0100               	movlb	0	; () banked
 11136  003C50  6F8E               	movwf	printf@f& (0+255),b
 11137  003C52  0EFF               	movlw	high STR_71
 11138  003C54  0100               	movlb	0	; () banked
 11139  003C56  6F8F               	movwf	(printf@f+1)& (0+255),b
 11140  003C58  ECB8  F008         	call	_printf	;wreg free
 11141                           
 11142                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11143  003C5C  0E05               	movlw	5
 11144  003C5E  0100               	movlb	0	; () banked
 11145  003C60  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11146  003C62  0E0F               	movlw	15
 11147  003C64  0100               	movlb	0	; () banked
 11148  003C66  6FAB               	movwf	??_algorithmTest& (0+255),b
 11149  003C68  0EF1               	movlw	241
 11150  003C6A                     u8797:
 11151  003C6A  2EE8               	decfsz	wreg,f,c
 11152  003C6C  D7FE               	bra	u8797
 11153  003C6E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11154  003C70  D7FC               	bra	u8797
 11155  003C72  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11156  003C74  D7FA               	bra	u8797
 11157  003C76                     l1109:
 11158  003C76  A281               	btfss	3969,1,c	;volatile
 11159  003C78  D7FE               	goto	l1109
 11160  003C7A                     l1112:
 11161  003C7A  B281               	btfsc	3969,1,c	;volatile
 11162  003C7C  D7FE               	goto	l1112
 11163                           
 11164                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11165  003C7E  0E01               	movlw	1
 11166  003C80  EC67  F027         	call	_lcdInst
 11167  003C84  0E68               	movlw	104
 11168  003C86  0100               	movlb	0	; () banked
 11169  003C88  6FAB               	movwf	??_algorithmTest& (0+255),b
 11170  003C8A  0EE4               	movlw	228
 11171  003C8C                     u8807:
 11172  003C8C  2EE8               	decfsz	wreg,f,c
 11173  003C8E  D7FE               	bra	u8807
 11174  003C90  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11175  003C92  D7FC               	bra	u8807
 11176  003C94  F000               	nop	
 11177  003C96  0E80               	movlw	128
 11178  003C98  EC67  F027         	call	_lcdInst
 11179                           
 11180                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11181  003C9C  0E5F               	movlw	low STR_72
 11182  003C9E  0100               	movlb	0	; () banked
 11183  003CA0  6F8E               	movwf	printf@f& (0+255),b
 11184  003CA2  0EFC               	movlw	high STR_72
 11185  003CA4  0100               	movlb	0	; () banked
 11186  003CA6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11187  003CA8  ECB8  F008         	call	_printf	;wreg free
 11188                           
 11189                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11190  003CAC  0EEF               	movlw	low STR_73
 11191  003CAE  0100               	movlb	0	; () banked
 11192  003CB0  6F8E               	movwf	printf@f& (0+255),b
 11193  003CB2  0EFE               	movlw	high STR_73
 11194  003CB4  0100               	movlb	0	; () banked
 11195  003CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11196  003CB8  ECB8  F008         	call	_printf	;wreg free
 11197                           
 11198                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11199  003CBC  0E4F               	movlw	low STR_74
 11200  003CBE  0100               	movlb	0	; () banked
 11201  003CC0  6F8E               	movwf	printf@f& (0+255),b
 11202  003CC2  0EFF               	movlw	high STR_74
 11203  003CC4  0100               	movlb	0	; () banked
 11204  003CC6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11205  003CC8  ECB8  F008         	call	_printf	;wreg free
 11206                           
 11207                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11208  003CCC  0EB4               	movlw	low STR_75
 11209  003CCE  0100               	movlb	0	; () banked
 11210  003CD0  6F8E               	movwf	printf@f& (0+255),b
 11211  003CD2  0EFE               	movlw	high STR_75
 11212  003CD4  0100               	movlb	0	; () banked
 11213  003CD6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11214  003CD8  ECB8  F008         	call	_printf	;wreg free
 11215                           
 11216                           ;Test.c: 121: printf("ALG5: NO CANS");
 11217  003CDC  0EFD               	movlw	low STR_76
 11218  003CDE  0100               	movlb	0	; () banked
 11219  003CE0  6F8E               	movwf	printf@f& (0+255),b
 11220  003CE2  0EFE               	movlw	high STR_76
 11221  003CE4  0100               	movlb	0	; () banked
 11222  003CE6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11223  003CE8  ECB8  F008         	call	_printf	;wreg free
 11224  003CEC  0012               	return		;funcret
 11225  003CEE                     __end_of_algorithmTest:
 11226                           	opt stack 0
 11227                           tblptru	equ	0xFF8
 11228                           tblptrh	equ	0xFF7
 11229                           tblptrl	equ	0xFF6
 11230                           tablat	equ	0xFF5
 11231                           prodh	equ	0xFF4
 11232                           prodl	equ	0xFF3
 11233                           intcon	equ	0xFF2
 11234                           intcon2	equ	0xFF1
 11235                           intcon3	equ	0xFF0
 11236                           postinc0	equ	0xFEE
 11237                           wreg	equ	0xFE8
 11238                           postdec1	equ	0xFE5
 11239                           fsr1l	equ	0xFE1
 11240                           indf2	equ	0xFDF
 11241                           postinc2	equ	0xFDE
 11242                           postdec2	equ	0xFDD
 11243                           fsr2h	equ	0xFDA
 11244                           fsr2l	equ	0xFD9
 11245                           status	equ	0xFD8
 11246                           
 11247 ;; *************** function _actuatorTest *****************
 11248 ;; Defined at:
 11249 ;;		line 203 in file "Test.c"
 11250 ;; Parameters:    Size  Location     Type
 11251 ;;		None
 11252 ;; Auto vars:     Size  Location     Type
 11253 ;;  i               1   45[BANK0 ] unsigned char 
 11254 ;;  i               1   67[BANK0 ] unsigned char 
 11255 ;;  i               1   66[BANK0 ] unsigned char 
 11256 ;;  i               1   65[BANK0 ] unsigned char 
 11257 ;;  i               1   64[BANK0 ] unsigned char 
 11258 ;;  i               1   63[BANK0 ] unsigned char 
 11259 ;;  i               1   62[BANK0 ] unsigned char 
 11260 ;;  i               1   61[BANK0 ] unsigned char 
 11261 ;;  i               1   60[BANK0 ] unsigned char 
 11262 ;;  i               1   59[BANK0 ] unsigned char 
 11263 ;;  i               1   58[BANK0 ] unsigned char 
 11264 ;;  i               1   57[BANK0 ] unsigned char 
 11265 ;;  i               1   56[BANK0 ] unsigned char 
 11266 ;;  i               1   55[BANK0 ] unsigned char 
 11267 ;;  i               1   54[BANK0 ] unsigned char 
 11268 ;;  i               1   53[BANK0 ] unsigned char 
 11269 ;;  i               1   52[BANK0 ] unsigned char 
 11270 ;;  i               1   51[BANK0 ] unsigned char 
 11271 ;;  i               1   50[BANK0 ] unsigned char 
 11272 ;;  i               1   49[BANK0 ] unsigned char 
 11273 ;;  i               1   48[BANK0 ] unsigned char 
 11274 ;;  i               1   47[BANK0 ] unsigned char 
 11275 ;;  i               1   46[BANK0 ] unsigned char 
 11276 ;;  i               2   68[BANK0 ] int 
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  1    wreg      void 
 11279 ;; Registers used:
 11280 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11281 ;; Tracked objects:
 11282 ;;		On entry : 0/0
 11283 ;;		On exit  : 0/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11287 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11289 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;Total ram usage:       27 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:   10
 11293 ;; This function calls:
 11294 ;;		_lcdInst
 11295 ;;		_printf
 11296 ;;		_updateServoPosition
 11297 ;; This function is called by:
 11298 ;;		_Test
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text40
 11303  000012                     __ptext40:
 11304                           	opt stack 0
 11305  000012                     _actuatorTest:
 11306                           	opt stack 19
 11307                           
 11308                           ;Test.c: 205: int i = 0;
 11309                           
 11310                           ;incstack = 0
 11311  000012  0E00               	movlw	0
 11312  000014  0100               	movlb	0	; () banked
 11313  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11314  000018  0E00               	movlw	0
 11315  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11319  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11323  00001E  0E01               	movlw	1
 11324  000020  EC67  F027         	call	_lcdInst
 11325  000024  0E68               	movlw	104
 11326  000026  0100               	movlb	0	; () banked
 11327  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11328  00002A  0EE4               	movlw	228
 11329  00002C                     u8817:
 11330  00002C  2EE8               	decfsz	wreg,f,c
 11331  00002E  D7FE               	bra	u8817
 11332  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11333  000032  D7FC               	bra	u8817
 11334  000034  F000               	nop	
 11335  000036  0E80               	movlw	128
 11336  000038  EC67  F027         	call	_lcdInst
 11337                           
 11338                           ;Test.c: 209: printf("ACTUATORS");
 11339  00003C  0E91               	movlw	low STR_88
 11340  00003E  0100               	movlb	0	; () banked
 11341  000040  6F8E               	movwf	printf@f& (0+255),b
 11342  000042  0EFF               	movlw	high STR_88
 11343  000044  0100               	movlb	0	; () banked
 11344  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11345  000048  ECB8  F008         	call	_printf	;wreg free
 11346                           
 11347                           ;Test.c: 210: lcdInst(0b11000000);;
 11348  00004C  0EC0               	movlw	192
 11349  00004E  EC67  F027         	call	_lcdInst
 11350                           
 11351                           ;Test.c: 211: printf("PUSH TO START");
 11352  000052  0E0B               	movlw	low STR_71
 11353  000054  0100               	movlb	0	; () banked
 11354  000056  6F8E               	movwf	printf@f& (0+255),b
 11355  000058  0EFF               	movlw	high STR_71
 11356  00005A  0100               	movlb	0	; () banked
 11357  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11358  00005E  ECB8  F008         	call	_printf	;wreg free
 11359                           
 11360                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11361  000062  0E05               	movlw	5
 11362  000064  0100               	movlb	0	; () banked
 11363  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11364  000068  0E0F               	movlw	15
 11365  00006A  0100               	movlb	0	; () banked
 11366  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11367  00006E  0EF1               	movlw	241
 11368  000070                     u8827:
 11369  000070  2EE8               	decfsz	wreg,f,c
 11370  000072  D7FE               	bra	u8827
 11371  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11372  000076  D7FC               	bra	u8827
 11373  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11374  00007A  D7FA               	bra	u8827
 11375  00007C                     l1144:
 11376  00007C  A281               	btfss	3969,1,c	;volatile
 11377  00007E  D7FE               	goto	l1144
 11378  000080                     l1147:
 11379  000080  B281               	btfsc	3969,1,c	;volatile
 11380  000082  D7FE               	goto	l1147
 11381                           
 11382                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11383  000084  0E01               	movlw	1
 11384  000086  EC67  F027         	call	_lcdInst
 11385  00008A  0E68               	movlw	104
 11386  00008C  0100               	movlb	0	; () banked
 11387  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11388  000090  0EE4               	movlw	228
 11389  000092                     u8837:
 11390  000092  2EE8               	decfsz	wreg,f,c
 11391  000094  D7FE               	bra	u8837
 11392  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11393  000098  D7FC               	bra	u8837
 11394  00009A  F000               	nop	
 11395  00009C  0E80               	movlw	128
 11396  00009E  EC67  F027         	call	_lcdInst
 11397                           
 11398                           ;Test.c: 220: printf("TST: DC MOTORS");
 11399  0000A2  0EC3               	movlw	low STR_90
 11400  0000A4  0100               	movlb	0	; () banked
 11401  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11402  0000A8  0EFE               	movlw	high STR_90
 11403  0000AA  0100               	movlb	0	; () banked
 11404  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11405  0000AE  ECB8  F008         	call	_printf	;wreg free
 11406                           
 11407                           ;Test.c: 221: lcdInst(0b11000000);;
 11408  0000B2  0EC0               	movlw	192
 11409  0000B4  EC67  F027         	call	_lcdInst
 11410                           
 11411                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11412  0000B8  0EE1               	movlw	low STR_91
 11413  0000BA  0100               	movlb	0	; () banked
 11414  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11415  0000BE  0EFE               	movlw	high STR_91
 11416  0000C0  0100               	movlb	0	; () banked
 11417  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11418  0000C4  ECB8  F008         	call	_printf	;wreg free
 11419                           
 11420                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11421  0000C8  8A89               	bsf	3977,5,c	;volatile
 11422                           
 11423                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11424  0000CA  0E00               	movlw	0
 11425  0000CC  0100               	movlb	0	; () banked
 11426  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11427  0000D0  0E00               	movlw	0
 11428  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11429                           
 11430                           ; BSR set to: 0
 11431  0000D4  0100               	movlb	0	; () banked
 11432  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11433  0000D8  D008               	goto	l7223
 11434  0000DA  0100               	movlb	0	; () banked
 11435  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11436  0000DE  E123               	bnz	l1151
 11437  0000E0  0E05               	movlw	5
 11438  0000E2  0100               	movlb	0	; () banked
 11439  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11440  0000E6  B0D8               	btfsc	status,0,c
 11441  0000E8  D01E               	goto	l1151
 11442  0000EA                     l7223:
 11443                           
 11444                           ; BSR set to: 0
 11445  0000EA  0E00               	movlw	0
 11446  0000EC  0100               	movlb	0	; () banked
 11447  0000EE  6FAD               	movwf	actuatorTest@i_1651& (0+255),b
 11448  0000F0                     l7225:
 11449                           
 11450                           ; BSR set to: 0
 11451  0000F0  0E63               	movlw	99
 11452  0000F2  0100               	movlb	0	; () banked
 11453  0000F4  65AD               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11454  0000F6  D001               	goto	l7229
 11455  0000F8  D00C               	goto	l7233
 11456  0000FA                     l7229:
 11457                           
 11458                           ; BSR set to: 0
 11459  0000FA  0E68               	movlw	104
 11460  0000FC  0100               	movlb	0	; () banked
 11461  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11462  000100  0EE4               	movlw	228
 11463  000102                     u8847:
 11464  000102  2EE8               	decfsz	wreg,f,c
 11465  000104  D7FE               	bra	u8847
 11466  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11467  000108  D7FC               	bra	u8847
 11468  00010A  F000               	nop	
 11469  00010C  0100               	movlb	0	; () banked
 11470  00010E  2BAD               	incf	actuatorTest@i_1651& (0+255),f,b
 11471  000110  D7EF               	goto	l7225
 11472  000112                     l7233:
 11473                           
 11474                           ; BSR set to: 0
 11475  000112  0100               	movlb	0	; () banked
 11476  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11477  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11478                           
 11479                           ; BSR set to: 0
 11480  000118  0100               	movlb	0	; () banked
 11481  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11482  00011C  D7E6               	goto	l7223
 11483  00011E  0100               	movlb	0	; () banked
 11484  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11485  000122  E101               	bnz	u5900
 11486  000124  D7DD               	goto	L8
 11487  000126                     u5900:
 11488  000126                     l1151:
 11489                           
 11490                           ; BSR set to: 0
 11491                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11492  000126  9A89               	bcf	3977,5,c	;volatile
 11493                           
 11494                           ; BSR set to: 0
 11495                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11496  000128  0E01               	movlw	1
 11497  00012A  EC67  F027         	call	_lcdInst
 11498  00012E  0E68               	movlw	104
 11499  000130  0100               	movlb	0	; () banked
 11500  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11501  000134  0EE4               	movlw	228
 11502  000136                     u8857:
 11503  000136  2EE8               	decfsz	wreg,f,c
 11504  000138  D7FE               	bra	u8857
 11505  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11506  00013C  D7FC               	bra	u8857
 11507  00013E  F000               	nop	
 11508  000140  0E80               	movlw	128
 11509  000142  EC67  F027         	call	_lcdInst
 11510                           
 11511                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11512  000146  0E70               	movlw	low STR_92
 11513  000148  0100               	movlb	0	; () banked
 11514  00014A  6F8E               	movwf	printf@f& (0+255),b
 11515  00014C  0EFC               	movlw	high STR_92
 11516  00014E  0100               	movlb	0	; () banked
 11517  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11518  000152  ECB8  F008         	call	_printf	;wreg free
 11519                           
 11520                           ;Test.c: 233: lcdInst(0b11000000);;
 11521  000156  0EC0               	movlw	192
 11522  000158  EC67  F027         	call	_lcdInst
 11523                           
 11524                           ;Test.c: 234: printf("PIN RA3...");
 11525  00015C  0E5B               	movlw	low STR_93
 11526  00015E  0100               	movlb	0	; () banked
 11527  000160  6F8E               	movwf	printf@f& (0+255),b
 11528  000162  0EFF               	movlw	high STR_93
 11529  000164  0100               	movlb	0	; () banked
 11530  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11531  000168  ECB8  F008         	call	_printf	;wreg free
 11532                           
 11533                           ;Test.c: 235: for(i=0;i<5;i++){
 11534  00016C  0E00               	movlw	0
 11535  00016E  0100               	movlb	0	; () banked
 11536  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11537  000172  0E00               	movlw	0
 11538  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11539                           
 11540                           ; BSR set to: 0
 11541  000176  0100               	movlb	0	; () banked
 11542  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11543  00017A  D008               	goto	l1154
 11544  00017C  0100               	movlb	0	; () banked
 11545  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11546  000180  E12C               	bnz	l1155
 11547  000182  0E05               	movlw	5
 11548  000184  0100               	movlb	0	; () banked
 11549  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11550  000188  B0D8               	btfsc	status,0,c
 11551  00018A  D027               	goto	l1155
 11552  00018C                     l1154:
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11556  00018C  8689               	bsf	3977,3,c	;volatile
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11560  00018E  0E0D               	movlw	13
 11561  000190  0100               	movlb	0	; () banked
 11562  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11563  000194  0E2D               	movlw	45
 11564  000196  0100               	movlb	0	; () banked
 11565  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11566  00019A  0ED7               	movlw	215
 11567  00019C                     u8867:
 11568  00019C  2EE8               	decfsz	wreg,f,c
 11569  00019E  D7FE               	bra	u8867
 11570  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11571  0001A2  D7FC               	bra	u8867
 11572  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11573  0001A6  D7FA               	bra	u8867
 11574  0001A8  D000               	nop2	
 11575                           
 11576                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11577  0001AA  9689               	bcf	3977,3,c	;volatile
 11578                           
 11579                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11580  0001AC  0E1D               	movlw	29
 11581  0001AE  0100               	movlb	0	; () banked
 11582  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11583  0001B2  0E69               	movlw	105
 11584  0001B4  0100               	movlb	0	; () banked
 11585  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11586  0001B8  0EA5               	movlw	165
 11587  0001BA                     u8877:
 11588  0001BA  2EE8               	decfsz	wreg,f,c
 11589  0001BC  D7FE               	bra	u8877
 11590  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11591  0001C0  D7FC               	bra	u8877
 11592  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11593  0001C4  D7FA               	bra	u8877
 11594  0001C6  0100               	movlb	0	; () banked
 11595  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11596  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11597  0001CC  0100               	movlb	0	; () banked
 11598  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11599  0001D0  D7DD               	goto	l1154
 11600  0001D2  0100               	movlb	0	; () banked
 11601  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11602  0001D6  E101               	bnz	u5920
 11603  0001D8  D7D4               	goto	L9
 11604  0001DA                     u5920:
 11605  0001DA                     l1155:
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;Test.c: 240: }
 11609                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11610  0001DA  9689               	bcf	3977,3,c	;volatile
 11611                           
 11612                           ; BSR set to: 0
 11613                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11614  0001DC  0E01               	movlw	1
 11615  0001DE  EC67  F027         	call	_lcdInst
 11616  0001E2  0E68               	movlw	104
 11617  0001E4  0100               	movlb	0	; () banked
 11618  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11619  0001E8  0EE4               	movlw	228
 11620  0001EA                     u8887:
 11621  0001EA  2EE8               	decfsz	wreg,f,c
 11622  0001EC  D7FE               	bra	u8887
 11623  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11624  0001F0  D7FC               	bra	u8887
 11625  0001F2  F000               	nop	
 11626  0001F4  0E80               	movlw	128
 11627  0001F6  EC67  F027         	call	_lcdInst
 11628                           
 11629                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11630  0001FA  0E81               	movlw	low STR_94
 11631  0001FC  0100               	movlb	0	; () banked
 11632  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11633  000200  0EFC               	movlw	high STR_94
 11634  000202  0100               	movlb	0	; () banked
 11635  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11636  000206  ECB8  F008         	call	_printf	;wreg free
 11637                           
 11638                           ;Test.c: 249: lcdInst(0b11000000);;
 11639  00020A  0EC0               	movlw	192
 11640  00020C  EC67  F027         	call	_lcdInst
 11641                           
 11642                           ;Test.c: 250: printf("PIN RA4...");
 11643  000210  0E66               	movlw	low STR_95
 11644  000212  0100               	movlb	0	; () banked
 11645  000214  6F8E               	movwf	printf@f& (0+255),b
 11646  000216  0EFF               	movlw	high STR_95
 11647  000218  0100               	movlb	0	; () banked
 11648  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11649  00021C  ECB8  F008         	call	_printf	;wreg free
 11650                           
 11651                           ;Test.c: 251: for(i=0;i<5;i++){
 11652  000220  0E00               	movlw	0
 11653  000222  0100               	movlb	0	; () banked
 11654  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11655  000226  0E00               	movlw	0
 11656  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11657                           
 11658                           ; BSR set to: 0
 11659  00022A  0100               	movlb	0	; () banked
 11660  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11661  00022E  D008               	goto	l1156
 11662  000230  0100               	movlb	0	; () banked
 11663  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11664  000234  E12C               	bnz	l1157
 11665  000236  0E05               	movlw	5
 11666  000238  0100               	movlb	0	; () banked
 11667  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11668  00023C  B0D8               	btfsc	status,0,c
 11669  00023E  D027               	goto	l1157
 11670  000240                     l1156:
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11674  000240  8889               	bsf	3977,4,c	;volatile
 11675                           
 11676                           ; BSR set to: 0
 11677                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11678  000242  0E0D               	movlw	13
 11679  000244  0100               	movlb	0	; () banked
 11680  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11681  000248  0E2D               	movlw	45
 11682  00024A  0100               	movlb	0	; () banked
 11683  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11684  00024E  0ED7               	movlw	215
 11685  000250                     u8897:
 11686  000250  2EE8               	decfsz	wreg,f,c
 11687  000252  D7FE               	bra	u8897
 11688  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11689  000256  D7FC               	bra	u8897
 11690  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11691  00025A  D7FA               	bra	u8897
 11692  00025C  D000               	nop2	
 11693                           
 11694                           ;Test.c: 254: LATAbits.LATA4 = !1;
 11695  00025E  9889               	bcf	3977,4,c	;volatile
 11696                           
 11697                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11698  000260  0E1D               	movlw	29
 11699  000262  0100               	movlb	0	; () banked
 11700  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11701  000266  0E69               	movlw	105
 11702  000268  0100               	movlb	0	; () banked
 11703  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11704  00026C  0EA5               	movlw	165
 11705  00026E                     u8907:
 11706  00026E  2EE8               	decfsz	wreg,f,c
 11707  000270  D7FE               	bra	u8907
 11708  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11709  000274  D7FC               	bra	u8907
 11710  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11711  000278  D7FA               	bra	u8907
 11712  00027A  0100               	movlb	0	; () banked
 11713  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11714  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11715  000280  0100               	movlb	0	; () banked
 11716  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11717  000284  D7DD               	goto	l1156
 11718  000286  0100               	movlb	0	; () banked
 11719  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11720  00028A  E101               	bnz	u5940
 11721  00028C  D7D4               	goto	L10
 11722  00028E                     u5940:
 11723  00028E                     l1157:
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;Test.c: 256: }
 11727                           ;Test.c: 257: LATAbits.LATA4 = !1;
 11728  00028E  9889               	bcf	3977,4,c	;volatile
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11732  000290  0E01               	movlw	1
 11733  000292  EC67  F027         	call	_lcdInst
 11734  000296  0E68               	movlw	104
 11735  000298  0100               	movlb	0	; () banked
 11736  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11737  00029C  0EE4               	movlw	228
 11738  00029E                     u8917:
 11739  00029E  2EE8               	decfsz	wreg,f,c
 11740  0002A0  D7FE               	bra	u8917
 11741  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11742  0002A4  D7FC               	bra	u8917
 11743  0002A6  F000               	nop	
 11744  0002A8  0E80               	movlw	128
 11745  0002AA  EC67  F027         	call	_lcdInst
 11746                           
 11747                           ;Test.c: 261: machine_state = Sorting_state;
 11748  0002AE  0E01               	movlw	1
 11749  0002B0  0100               	movlb	0	; () banked
 11750  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;Test.c: 262: was_low_1 = 0;
 11754  0002B4  0E00               	movlw	0
 11755  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11756  0002B8  0E00               	movlw	0
 11757  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;Test.c: 263: was_low_1 = 0;
 11761  0002BC  0E00               	movlw	0
 11762  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11763  0002C0  0E00               	movlw	0
 11764  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;Test.c: 270: printf("TST: PAN SERVO");
 11768  0002C4  0EA5               	movlw	low STR_96
 11769  0002C6  0100               	movlb	0	; () banked
 11770  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11771  0002CA  0EFE               	movlw	high STR_96
 11772  0002CC  0100               	movlb	0	; () banked
 11773  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11774  0002D0  ECB8  F008         	call	_printf	;wreg free
 11775                           
 11776                           ;Test.c: 271: lcdInst(0b11000000);;
 11777  0002D4  0EC0               	movlw	192
 11778  0002D6  EC67  F027         	call	_lcdInst
 11779                           
 11780                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 11781  0002DA  0E0A               	movlw	low STR_97
 11782  0002DC  0100               	movlb	0	; () banked
 11783  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11784  0002E0  0EFC               	movlw	high STR_97
 11785  0002E2  0100               	movlb	0	; () banked
 11786  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11787  0002E6  ECB8  F008         	call	_printf	;wreg free
 11788                           
 11789                           ;Test.c: 273: updateServoPosition(1200, 1);
 11790  0002EA  0E04               	movlw	4
 11791  0002EC  0100               	movlb	0	; () banked
 11792  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11793  0002F0  0EB0               	movlw	176
 11794  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11795  0002F4  0E00               	movlw	0
 11796  0002F6  0100               	movlb	0	; () banked
 11797  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11798  0002FA  0E01               	movlw	1
 11799  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11800  0002FE  ECC3  F021         	call	_updateServoPosition	;wreg free
 11801                           
 11802                           ;Test.c: 274: TMR1ON = 1;
 11803  000302  80CD               	bsf	4045,0,c	;volatile
 11804                           
 11805                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11806  000304  0E00               	movlw	0
 11807  000306  0100               	movlb	0	; () banked
 11808  000308  6FAE               	movwf	actuatorTest@i_1658& (0+255),b
 11809  00030A                     l7309:
 11810                           
 11811                           ; BSR set to: 0
 11812  00030A  0E63               	movlw	99
 11813  00030C  0100               	movlb	0	; () banked
 11814  00030E  65AE               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11815  000310  D001               	goto	l7313
 11816  000312  D00C               	goto	l7317
 11817  000314                     l7313:
 11818                           
 11819                           ; BSR set to: 0
 11820  000314  0E68               	movlw	104
 11821  000316  0100               	movlb	0	; () banked
 11822  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11823  00031A  0EE4               	movlw	228
 11824  00031C                     u8927:
 11825  00031C  2EE8               	decfsz	wreg,f,c
 11826  00031E  D7FE               	bra	u8927
 11827  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11828  000322  D7FC               	bra	u8927
 11829  000324  F000               	nop	
 11830  000326  0100               	movlb	0	; () banked
 11831  000328  2BAE               	incf	actuatorTest@i_1658& (0+255),f,b
 11832  00032A  D7EF               	goto	l7309
 11833  00032C                     l7317:
 11834                           
 11835                           ; BSR set to: 0
 11836  00032C  0E00               	movlw	0
 11837  00032E  0100               	movlb	0	; () banked
 11838  000330  6FAF               	movwf	actuatorTest@i_1659& (0+255),b
 11839  000332                     l7319:
 11840                           
 11841                           ; BSR set to: 0
 11842  000332  0E63               	movlw	99
 11843  000334  0100               	movlb	0	; () banked
 11844  000336  65AF               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11845  000338  D001               	goto	l7323
 11846  00033A  D00C               	goto	l7327
 11847  00033C                     l7323:
 11848                           
 11849                           ; BSR set to: 0
 11850  00033C  0E68               	movlw	104
 11851  00033E  0100               	movlb	0	; () banked
 11852  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11853  000342  0EE4               	movlw	228
 11854  000344                     u8937:
 11855  000344  2EE8               	decfsz	wreg,f,c
 11856  000346  D7FE               	bra	u8937
 11857  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11858  00034A  D7FC               	bra	u8937
 11859  00034C  F000               	nop	
 11860  00034E  0100               	movlb	0	; () banked
 11861  000350  2BAF               	incf	actuatorTest@i_1659& (0+255),f,b
 11862  000352  D7EF               	goto	l7319
 11863  000354                     l7327:
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11867  000354  0E80               	movlw	128
 11868  000356  EC67  F027         	call	_lcdInst
 11869  00035A  0EC0               	movlw	192
 11870  00035C  EC67  F027         	call	_lcdInst
 11871                           
 11872                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 11873  000360  0EF9               	movlw	low STR_98
 11874  000362  0100               	movlb	0	; () banked
 11875  000364  6F8E               	movwf	printf@f& (0+255),b
 11876  000366  0EFB               	movlw	high STR_98
 11877  000368  0100               	movlb	0	; () banked
 11878  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11879  00036C  ECB8  F008         	call	_printf	;wreg free
 11880                           
 11881                           ;Test.c: 279: updateServoPosition(500, 1);
 11882  000370  0E01               	movlw	1
 11883  000372  0100               	movlb	0	; () banked
 11884  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11885  000376  0EF4               	movlw	244
 11886  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11887  00037A  0E00               	movlw	0
 11888  00037C  0100               	movlb	0	; () banked
 11889  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11890  000380  0E01               	movlw	1
 11891  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11892  000384  ECC3  F021         	call	_updateServoPosition	;wreg free
 11893                           
 11894                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11895  000388  0E00               	movlw	0
 11896  00038A  0100               	movlb	0	; () banked
 11897  00038C  6FB0               	movwf	actuatorTest@i_1661& (0+255),b
 11898  00038E                     l7335:
 11899                           
 11900                           ; BSR set to: 0
 11901  00038E  0E63               	movlw	99
 11902  000390  0100               	movlb	0	; () banked
 11903  000392  65B0               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11904  000394  D001               	goto	l7339
 11905  000396  D00C               	goto	l7343
 11906  000398                     l7339:
 11907                           
 11908                           ; BSR set to: 0
 11909  000398  0E68               	movlw	104
 11910  00039A  0100               	movlb	0	; () banked
 11911  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11912  00039E  0EE4               	movlw	228
 11913  0003A0                     u8947:
 11914  0003A0  2EE8               	decfsz	wreg,f,c
 11915  0003A2  D7FE               	bra	u8947
 11916  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11917  0003A6  D7FC               	bra	u8947
 11918  0003A8  F000               	nop	
 11919  0003AA  0100               	movlb	0	; () banked
 11920  0003AC  2BB0               	incf	actuatorTest@i_1661& (0+255),f,b
 11921  0003AE  D7EF               	goto	l7335
 11922  0003B0                     l7343:
 11923                           
 11924                           ; BSR set to: 0
 11925  0003B0  0E00               	movlw	0
 11926  0003B2  0100               	movlb	0	; () banked
 11927  0003B4  6FB1               	movwf	actuatorTest@i_1662& (0+255),b
 11928  0003B6                     l7345:
 11929                           
 11930                           ; BSR set to: 0
 11931  0003B6  0E63               	movlw	99
 11932  0003B8  0100               	movlb	0	; () banked
 11933  0003BA  65B1               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11934  0003BC  D001               	goto	l7349
 11935  0003BE  D00C               	goto	l7353
 11936  0003C0                     l7349:
 11937                           
 11938                           ; BSR set to: 0
 11939  0003C0  0E68               	movlw	104
 11940  0003C2  0100               	movlb	0	; () banked
 11941  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11942  0003C6  0EE4               	movlw	228
 11943  0003C8                     u8957:
 11944  0003C8  2EE8               	decfsz	wreg,f,c
 11945  0003CA  D7FE               	bra	u8957
 11946  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11947  0003CE  D7FC               	bra	u8957
 11948  0003D0  F000               	nop	
 11949  0003D2  0100               	movlb	0	; () banked
 11950  0003D4  2BB1               	incf	actuatorTest@i_1662& (0+255),f,b
 11951  0003D6  D7EF               	goto	l7345
 11952  0003D8                     l7353:
 11953                           
 11954                           ; BSR set to: 0
 11955                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11956  0003D8  0E80               	movlw	128
 11957  0003DA  EC67  F027         	call	_lcdInst
 11958  0003DE  0EC0               	movlw	192
 11959  0003E0  EC67  F027         	call	_lcdInst
 11960                           
 11961                           ;Test.c: 283: printf("LEFT -- 2s      ");
 11962  0003E4  0ED7               	movlw	low STR_99
 11963  0003E6  0100               	movlb	0	; () banked
 11964  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11965  0003EA  0EFB               	movlw	high STR_99
 11966  0003EC  0100               	movlb	0	; () banked
 11967  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11968  0003F0  ECB8  F008         	call	_printf	;wreg free
 11969                           
 11970                           ;Test.c: 284: updateServoPosition(2400, 1);
 11971  0003F4  0E09               	movlw	9
 11972  0003F6  0100               	movlb	0	; () banked
 11973  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11974  0003FA  0E60               	movlw	96
 11975  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11976  0003FE  0E00               	movlw	0
 11977  000400  0100               	movlb	0	; () banked
 11978  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11979  000404  0E01               	movlw	1
 11980  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11981  000408  ECC3  F021         	call	_updateServoPosition	;wreg free
 11982                           
 11983                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11984  00040C  0E00               	movlw	0
 11985  00040E  0100               	movlb	0	; () banked
 11986  000410  6FB2               	movwf	actuatorTest@i_1664& (0+255),b
 11987  000412                     l7361:
 11988                           
 11989                           ; BSR set to: 0
 11990  000412  0E63               	movlw	99
 11991  000414  0100               	movlb	0	; () banked
 11992  000416  65B2               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11993  000418  D001               	goto	l7365
 11994  00041A  D00C               	goto	l7369
 11995  00041C                     l7365:
 11996                           
 11997                           ; BSR set to: 0
 11998  00041C  0E68               	movlw	104
 11999  00041E  0100               	movlb	0	; () banked
 12000  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12001  000422  0EE4               	movlw	228
 12002  000424                     u8967:
 12003  000424  2EE8               	decfsz	wreg,f,c
 12004  000426  D7FE               	bra	u8967
 12005  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12006  00042A  D7FC               	bra	u8967
 12007  00042C  F000               	nop	
 12008  00042E  0100               	movlb	0	; () banked
 12009  000430  2BB2               	incf	actuatorTest@i_1664& (0+255),f,b
 12010  000432  D7EF               	goto	l7361
 12011  000434                     l7369:
 12012                           
 12013                           ; BSR set to: 0
 12014  000434  0E00               	movlw	0
 12015  000436  0100               	movlb	0	; () banked
 12016  000438  6FB3               	movwf	actuatorTest@i_1665& (0+255),b
 12017  00043A                     l7371:
 12018                           
 12019                           ; BSR set to: 0
 12020  00043A  0E63               	movlw	99
 12021  00043C  0100               	movlb	0	; () banked
 12022  00043E  65B3               	cpfsgt	actuatorTest@i_1665& (0+255),b
 12023  000440  D001               	goto	l7375
 12024  000442  D00C               	goto	l7379
 12025  000444                     l7375:
 12026                           
 12027                           ; BSR set to: 0
 12028  000444  0E68               	movlw	104
 12029  000446  0100               	movlb	0	; () banked
 12030  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12031  00044A  0EE4               	movlw	228
 12032  00044C                     u8977:
 12033  00044C  2EE8               	decfsz	wreg,f,c
 12034  00044E  D7FE               	bra	u8977
 12035  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12036  000452  D7FC               	bra	u8977
 12037  000454  F000               	nop	
 12038  000456  0100               	movlb	0	; () banked
 12039  000458  2BB3               	incf	actuatorTest@i_1665& (0+255),f,b
 12040  00045A  D7EF               	goto	l7371
 12041  00045C                     l7379:
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12045  00045C  0E80               	movlw	128
 12046  00045E  EC67  F027         	call	_lcdInst
 12047  000462  0EC0               	movlw	192
 12048  000464  EC67  F027         	call	_lcdInst
 12049                           
 12050                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12051  000468  0E2C               	movlw	low STR_100
 12052  00046A  0100               	movlb	0	; () banked
 12053  00046C  6F8E               	movwf	printf@f& (0+255),b
 12054  00046E  0EFC               	movlw	high STR_100
 12055  000470  0100               	movlb	0	; () banked
 12056  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12057  000474  ECB8  F008         	call	_printf	;wreg free
 12058                           
 12059                           ;Test.c: 289: updateServoPosition(1670, 1);
 12060  000478  0E06               	movlw	6
 12061  00047A  0100               	movlb	0	; () banked
 12062  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12063  00047E  0E86               	movlw	134
 12064  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12065  000482  0E00               	movlw	0
 12066  000484  0100               	movlb	0	; () banked
 12067  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12068  000488  0E01               	movlw	1
 12069  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12070  00048C  ECC3  F021         	call	_updateServoPosition	;wreg free
 12071                           
 12072                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12073  000490  0E00               	movlw	0
 12074  000492  0100               	movlb	0	; () banked
 12075  000494  6FB4               	movwf	actuatorTest@i_1667& (0+255),b
 12076  000496                     l7387:
 12077                           
 12078                           ; BSR set to: 0
 12079  000496  0E63               	movlw	99
 12080  000498  0100               	movlb	0	; () banked
 12081  00049A  65B4               	cpfsgt	actuatorTest@i_1667& (0+255),b
 12082  00049C  D001               	goto	l7391
 12083  00049E  D00C               	goto	l7395
 12084  0004A0                     l7391:
 12085                           
 12086                           ; BSR set to: 0
 12087  0004A0  0E68               	movlw	104
 12088  0004A2  0100               	movlb	0	; () banked
 12089  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12090  0004A6  0EE4               	movlw	228
 12091  0004A8                     u8987:
 12092  0004A8  2EE8               	decfsz	wreg,f,c
 12093  0004AA  D7FE               	bra	u8987
 12094  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12095  0004AE  D7FC               	bra	u8987
 12096  0004B0  F000               	nop	
 12097  0004B2  0100               	movlb	0	; () banked
 12098  0004B4  2BB4               	incf	actuatorTest@i_1667& (0+255),f,b
 12099  0004B6  D7EF               	goto	l7387
 12100  0004B8                     l7395:
 12101                           
 12102                           ; BSR set to: 0
 12103  0004B8  0E00               	movlw	0
 12104  0004BA  0100               	movlb	0	; () banked
 12105  0004BC  6FB5               	movwf	actuatorTest@i_1668& (0+255),b
 12106  0004BE                     l7397:
 12107                           
 12108                           ; BSR set to: 0
 12109  0004BE  0E63               	movlw	99
 12110  0004C0  0100               	movlb	0	; () banked
 12111  0004C2  65B5               	cpfsgt	actuatorTest@i_1668& (0+255),b
 12112  0004C4  D001               	goto	l7401
 12113  0004C6  D00C               	goto	l7405
 12114  0004C8                     l7401:
 12115                           
 12116                           ; BSR set to: 0
 12117  0004C8  0E68               	movlw	104
 12118  0004CA  0100               	movlb	0	; () banked
 12119  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12120  0004CE  0EE4               	movlw	228
 12121  0004D0                     u8997:
 12122  0004D0  2EE8               	decfsz	wreg,f,c
 12123  0004D2  D7FE               	bra	u8997
 12124  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12125  0004D6  D7FC               	bra	u8997
 12126  0004D8  F000               	nop	
 12127  0004DA  0100               	movlb	0	; () banked
 12128  0004DC  2BB5               	incf	actuatorTest@i_1668& (0+255),f,b
 12129  0004DE  D7EF               	goto	l7397
 12130  0004E0                     l7405:
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12134  0004E0  0E80               	movlw	128
 12135  0004E2  EC67  F027         	call	_lcdInst
 12136  0004E6  0EC0               	movlw	192
 12137  0004E8  EC67  F027         	call	_lcdInst
 12138                           
 12139                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12140  0004EC  0E3D               	movlw	low STR_101
 12141  0004EE  0100               	movlb	0	; () banked
 12142  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12143  0004F2  0EFC               	movlw	high STR_101
 12144  0004F4  0100               	movlb	0	; () banked
 12145  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12146  0004F8  ECB8  F008         	call	_printf	;wreg free
 12147                           
 12148                           ;Test.c: 294: updateServoPosition(850, 1);
 12149  0004FC  0E03               	movlw	3
 12150  0004FE  0100               	movlb	0	; () banked
 12151  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12152  000502  0E52               	movlw	82
 12153  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12154  000506  0E00               	movlw	0
 12155  000508  0100               	movlb	0	; () banked
 12156  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12157  00050C  0E01               	movlw	1
 12158  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12159  000510  ECC3  F021         	call	_updateServoPosition	;wreg free
 12160                           
 12161                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12162  000514  0E00               	movlw	0
 12163  000516  0100               	movlb	0	; () banked
 12164  000518  6FB6               	movwf	actuatorTest@i_1670& (0+255),b
 12165  00051A                     l7413:
 12166                           
 12167                           ; BSR set to: 0
 12168  00051A  0E63               	movlw	99
 12169  00051C  0100               	movlb	0	; () banked
 12170  00051E  65B6               	cpfsgt	actuatorTest@i_1670& (0+255),b
 12171  000520  D001               	goto	l7417
 12172  000522  D00C               	goto	l7421
 12173  000524                     l7417:
 12174                           
 12175                           ; BSR set to: 0
 12176  000524  0E68               	movlw	104
 12177  000526  0100               	movlb	0	; () banked
 12178  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12179  00052A  0EE4               	movlw	228
 12180  00052C                     u9007:
 12181  00052C  2EE8               	decfsz	wreg,f,c
 12182  00052E  D7FE               	bra	u9007
 12183  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12184  000532  D7FC               	bra	u9007
 12185  000534  F000               	nop	
 12186  000536  0100               	movlb	0	; () banked
 12187  000538  2BB6               	incf	actuatorTest@i_1670& (0+255),f,b
 12188  00053A  D7EF               	goto	l7413
 12189  00053C                     l7421:
 12190                           
 12191                           ; BSR set to: 0
 12192  00053C  0E00               	movlw	0
 12193  00053E  0100               	movlb	0	; () banked
 12194  000540  6FB7               	movwf	actuatorTest@i_1671& (0+255),b
 12195  000542                     l7423:
 12196                           
 12197                           ; BSR set to: 0
 12198  000542  0E63               	movlw	99
 12199  000544  0100               	movlb	0	; () banked
 12200  000546  65B7               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12201  000548  D001               	goto	l7427
 12202  00054A  D00C               	goto	l7431
 12203  00054C                     l7427:
 12204                           
 12205                           ; BSR set to: 0
 12206  00054C  0E68               	movlw	104
 12207  00054E  0100               	movlb	0	; () banked
 12208  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12209  000552  0EE4               	movlw	228
 12210  000554                     u9017:
 12211  000554  2EE8               	decfsz	wreg,f,c
 12212  000556  D7FE               	bra	u9017
 12213  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12214  00055A  D7FC               	bra	u9017
 12215  00055C  F000               	nop	
 12216  00055E  0100               	movlb	0	; () banked
 12217  000560  2BB7               	incf	actuatorTest@i_1671& (0+255),f,b
 12218  000562  D7EF               	goto	l7423
 12219  000564                     l7431:
 12220                           
 12221                           ; BSR set to: 0
 12222                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12223  000564  0E80               	movlw	128
 12224  000566  EC67  F027         	call	_lcdInst
 12225  00056A  0EC0               	movlw	192
 12226  00056C  EC67  F027         	call	_lcdInst
 12227                           
 12228                           ;Test.c: 298: printf("MID -- 2s       ");
 12229  000570  0EB5               	movlw	low STR_102
 12230  000572  0100               	movlb	0	; () banked
 12231  000574  6F8E               	movwf	printf@f& (0+255),b
 12232  000576  0EFB               	movlw	high STR_102
 12233  000578  0100               	movlb	0	; () banked
 12234  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12235  00057C  ECB8  F008         	call	_printf	;wreg free
 12236                           
 12237                           ;Test.c: 299: updateServoPosition(1200, 1);
 12238  000580  0E04               	movlw	4
 12239  000582  0100               	movlb	0	; () banked
 12240  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12241  000586  0EB0               	movlw	176
 12242  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12243  00058A  0E00               	movlw	0
 12244  00058C  0100               	movlb	0	; () banked
 12245  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12246  000590  0E01               	movlw	1
 12247  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12248  000594  ECC3  F021         	call	_updateServoPosition	;wreg free
 12249                           
 12250                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12251  000598  0E00               	movlw	0
 12252  00059A  0100               	movlb	0	; () banked
 12253  00059C  6FB8               	movwf	actuatorTest@i_1673& (0+255),b
 12254  00059E                     l7439:
 12255                           
 12256                           ; BSR set to: 0
 12257  00059E  0E63               	movlw	99
 12258  0005A0  0100               	movlb	0	; () banked
 12259  0005A2  65B8               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12260  0005A4  D001               	goto	l7443
 12261  0005A6  D00C               	goto	l7447
 12262  0005A8                     l7443:
 12263                           
 12264                           ; BSR set to: 0
 12265  0005A8  0E68               	movlw	104
 12266  0005AA  0100               	movlb	0	; () banked
 12267  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12268  0005AE  0EE4               	movlw	228
 12269  0005B0                     u9027:
 12270  0005B0  2EE8               	decfsz	wreg,f,c
 12271  0005B2  D7FE               	bra	u9027
 12272  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12273  0005B6  D7FC               	bra	u9027
 12274  0005B8  F000               	nop	
 12275  0005BA  0100               	movlb	0	; () banked
 12276  0005BC  2BB8               	incf	actuatorTest@i_1673& (0+255),f,b
 12277  0005BE  D7EF               	goto	l7439
 12278  0005C0                     l7447:
 12279                           
 12280                           ; BSR set to: 0
 12281  0005C0  0E00               	movlw	0
 12282  0005C2  0100               	movlb	0	; () banked
 12283  0005C4  6FB9               	movwf	actuatorTest@i_1674& (0+255),b
 12284  0005C6                     l7449:
 12285                           
 12286                           ; BSR set to: 0
 12287  0005C6  0E63               	movlw	99
 12288  0005C8  0100               	movlb	0	; () banked
 12289  0005CA  65B9               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12290  0005CC  D001               	goto	l7453
 12291  0005CE  D00C               	goto	l1181
 12292  0005D0                     l7453:
 12293                           
 12294                           ; BSR set to: 0
 12295  0005D0  0E68               	movlw	104
 12296  0005D2  0100               	movlb	0	; () banked
 12297  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12298  0005D6  0EE4               	movlw	228
 12299  0005D8                     u9037:
 12300  0005D8  2EE8               	decfsz	wreg,f,c
 12301  0005DA  D7FE               	bra	u9037
 12302  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12303  0005DE  D7FC               	bra	u9037
 12304  0005E0  F000               	nop	
 12305  0005E2  0100               	movlb	0	; () banked
 12306  0005E4  2BB9               	incf	actuatorTest@i_1674& (0+255),f,b
 12307  0005E6  D7EF               	goto	l7449
 12308  0005E8                     l1181:
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;Test.c: 301: TMR1ON = 0;
 12312  0005E8  90CD               	bcf	4045,0,c	;volatile
 12313                           
 12314                           ; BSR set to: 0
 12315                           ;Test.c: 308: printf("TST: TILT SERVO");
 12316  0005EA  0E3A               	movlw	low STR_103
 12317  0005EC  0100               	movlb	0	; () banked
 12318  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12319  0005F0  0EFE               	movlw	high STR_103
 12320  0005F2  0100               	movlb	0	; () banked
 12321  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12322  0005F6  ECB8  F008         	call	_printf	;wreg free
 12323                           
 12324                           ;Test.c: 309: lcdInst(0b11000000);;
 12325  0005FA  0EC0               	movlw	192
 12326  0005FC  EC67  F027         	call	_lcdInst
 12327                           
 12328                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12329  000600  0EE8               	movlw	low STR_104
 12330  000602  0100               	movlb	0	; () banked
 12331  000604  6F8E               	movwf	printf@f& (0+255),b
 12332  000606  0EFB               	movlw	high STR_104
 12333  000608  0100               	movlb	0	; () banked
 12334  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12335  00060C  ECB8  F008         	call	_printf	;wreg free
 12336                           
 12337                           ;Test.c: 311: updateServoPosition(1050, 3);
 12338  000610  0E04               	movlw	4
 12339  000612  0100               	movlb	0	; () banked
 12340  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12341  000616  0E1A               	movlw	26
 12342  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12343  00061A  0E00               	movlw	0
 12344  00061C  0100               	movlb	0	; () banked
 12345  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12346  000620  0E03               	movlw	3
 12347  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12348  000624  ECC3  F021         	call	_updateServoPosition	;wreg free
 12349                           
 12350                           ;Test.c: 312: TMR3ON = 1;
 12351  000628  80B1               	bsf	4017,0,c	;volatile
 12352                           
 12353                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12354  00062A  0E00               	movlw	0
 12355  00062C  0100               	movlb	0	; () banked
 12356  00062E  6FBA               	movwf	actuatorTest@i_1677& (0+255),b
 12357  000630                     l7467:
 12358                           
 12359                           ; BSR set to: 0
 12360  000630  0E63               	movlw	99
 12361  000632  0100               	movlb	0	; () banked
 12362  000634  65BA               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12363  000636  D001               	goto	l7471
 12364  000638  D00C               	goto	l7475
 12365  00063A                     l7471:
 12366                           
 12367                           ; BSR set to: 0
 12368  00063A  0E68               	movlw	104
 12369  00063C  0100               	movlb	0	; () banked
 12370  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12371  000640  0EE4               	movlw	228
 12372  000642                     u9047:
 12373  000642  2EE8               	decfsz	wreg,f,c
 12374  000644  D7FE               	bra	u9047
 12375  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12376  000648  D7FC               	bra	u9047
 12377  00064A  F000               	nop	
 12378  00064C  0100               	movlb	0	; () banked
 12379  00064E  2BBA               	incf	actuatorTest@i_1677& (0+255),f,b
 12380  000650  D7EF               	goto	l7467
 12381  000652                     l7475:
 12382                           
 12383                           ; BSR set to: 0
 12384  000652  0E00               	movlw	0
 12385  000654  0100               	movlb	0	; () banked
 12386  000656  6FBB               	movwf	actuatorTest@i_1678& (0+255),b
 12387  000658                     l7477:
 12388                           
 12389                           ; BSR set to: 0
 12390  000658  0E63               	movlw	99
 12391  00065A  0100               	movlb	0	; () banked
 12392  00065C  65BB               	cpfsgt	actuatorTest@i_1678& (0+255),b
 12393  00065E  D001               	goto	l7481
 12394  000660  D00C               	goto	l7485
 12395  000662                     l7481:
 12396                           
 12397                           ; BSR set to: 0
 12398  000662  0E68               	movlw	104
 12399  000664  0100               	movlb	0	; () banked
 12400  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12401  000668  0EE4               	movlw	228
 12402  00066A                     u9057:
 12403  00066A  2EE8               	decfsz	wreg,f,c
 12404  00066C  D7FE               	bra	u9057
 12405  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12406  000670  D7FC               	bra	u9057
 12407  000672  F000               	nop	
 12408  000674  0100               	movlb	0	; () banked
 12409  000676  2BBB               	incf	actuatorTest@i_1678& (0+255),f,b
 12410  000678  D7EF               	goto	l7477
 12411  00067A                     l7485:
 12412                           
 12413                           ; BSR set to: 0
 12414                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12415  00067A  0E80               	movlw	128
 12416  00067C  EC67  F027         	call	_lcdInst
 12417  000680  0EC0               	movlw	192
 12418  000682  EC67  F027         	call	_lcdInst
 12419                           
 12420                           ;Test.c: 316: printf("DROP -- 2s      ");
 12421  000686  0EC6               	movlw	low STR_105
 12422  000688  0100               	movlb	0	; () banked
 12423  00068A  6F8E               	movwf	printf@f& (0+255),b
 12424  00068C  0EFB               	movlw	high STR_105
 12425  00068E  0100               	movlb	0	; () banked
 12426  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12427  000692  ECB8  F008         	call	_printf	;wreg free
 12428                           
 12429                           ;Test.c: 317: updateServoPosition(1260, 3);
 12430  000696  0E04               	movlw	4
 12431  000698  0100               	movlb	0	; () banked
 12432  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12433  00069C  0EEC               	movlw	236
 12434  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12435  0006A0  0E00               	movlw	0
 12436  0006A2  0100               	movlb	0	; () banked
 12437  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12438  0006A6  0E03               	movlw	3
 12439  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12440  0006AA  ECC3  F021         	call	_updateServoPosition	;wreg free
 12441                           
 12442                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12443  0006AE  0E00               	movlw	0
 12444  0006B0  0100               	movlb	0	; () banked
 12445  0006B2  6FBC               	movwf	actuatorTest@i_1680& (0+255),b
 12446  0006B4                     l7493:
 12447                           
 12448                           ; BSR set to: 0
 12449  0006B4  0E63               	movlw	99
 12450  0006B6  0100               	movlb	0	; () banked
 12451  0006B8  65BC               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12452  0006BA  D001               	goto	l7497
 12453  0006BC  D00C               	goto	l7501
 12454  0006BE                     l7497:
 12455                           
 12456                           ; BSR set to: 0
 12457  0006BE  0E68               	movlw	104
 12458  0006C0  0100               	movlb	0	; () banked
 12459  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12460  0006C4  0EE4               	movlw	228
 12461  0006C6                     u9067:
 12462  0006C6  2EE8               	decfsz	wreg,f,c
 12463  0006C8  D7FE               	bra	u9067
 12464  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12465  0006CC  D7FC               	bra	u9067
 12466  0006CE  F000               	nop	
 12467  0006D0  0100               	movlb	0	; () banked
 12468  0006D2  2BBC               	incf	actuatorTest@i_1680& (0+255),f,b
 12469  0006D4  D7EF               	goto	l7493
 12470  0006D6                     l7501:
 12471                           
 12472                           ; BSR set to: 0
 12473  0006D6  0E00               	movlw	0
 12474  0006D8  0100               	movlb	0	; () banked
 12475  0006DA  6FBD               	movwf	actuatorTest@i_1681& (0+255),b
 12476  0006DC                     l7503:
 12477                           
 12478                           ; BSR set to: 0
 12479  0006DC  0E63               	movlw	99
 12480  0006DE  0100               	movlb	0	; () banked
 12481  0006E0  65BD               	cpfsgt	actuatorTest@i_1681& (0+255),b
 12482  0006E2  D001               	goto	l7507
 12483  0006E4  D00C               	goto	l7511
 12484  0006E6                     l7507:
 12485                           
 12486                           ; BSR set to: 0
 12487  0006E6  0E68               	movlw	104
 12488  0006E8  0100               	movlb	0	; () banked
 12489  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12490  0006EC  0EE4               	movlw	228
 12491  0006EE                     u9077:
 12492  0006EE  2EE8               	decfsz	wreg,f,c
 12493  0006F0  D7FE               	bra	u9077
 12494  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12495  0006F4  D7FC               	bra	u9077
 12496  0006F6  F000               	nop	
 12497  0006F8  0100               	movlb	0	; () banked
 12498  0006FA  2BBD               	incf	actuatorTest@i_1681& (0+255),f,b
 12499  0006FC  D7EF               	goto	l7503
 12500  0006FE                     l7511:
 12501                           
 12502                           ; BSR set to: 0
 12503                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12504  0006FE  0E80               	movlw	128
 12505  000700  EC67  F027         	call	_lcdInst
 12506  000704  0EC0               	movlw	192
 12507  000706  EC67  F027         	call	_lcdInst
 12508                           
 12509                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12510  00070A  0EE8               	movlw	low STR_104
 12511  00070C  0100               	movlb	0	; () banked
 12512  00070E  6F8E               	movwf	printf@f& (0+255),b
 12513  000710  0EFB               	movlw	high STR_104
 12514  000712  0100               	movlb	0	; () banked
 12515  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12516  000716  ECB8  F008         	call	_printf	;wreg free
 12517                           
 12518                           ;Test.c: 322: updateServoPosition(1050, 3);
 12519  00071A  0E04               	movlw	4
 12520  00071C  0100               	movlb	0	; () banked
 12521  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12522  000720  0E1A               	movlw	26
 12523  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12524  000724  0E00               	movlw	0
 12525  000726  0100               	movlb	0	; () banked
 12526  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12527  00072A  0E03               	movlw	3
 12528  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12529  00072E  ECC3  F021         	call	_updateServoPosition	;wreg free
 12530                           
 12531                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12532  000732  0E00               	movlw	0
 12533  000734  0100               	movlb	0	; () banked
 12534  000736  6FBE               	movwf	actuatorTest@i_1683& (0+255),b
 12535  000738                     l7519:
 12536                           
 12537                           ; BSR set to: 0
 12538  000738  0E63               	movlw	99
 12539  00073A  0100               	movlb	0	; () banked
 12540  00073C  65BE               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12541  00073E  D001               	goto	l7523
 12542  000740  D00C               	goto	l7527
 12543  000742                     l7523:
 12544                           
 12545                           ; BSR set to: 0
 12546  000742  0E68               	movlw	104
 12547  000744  0100               	movlb	0	; () banked
 12548  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12549  000748  0EE4               	movlw	228
 12550  00074A                     u9087:
 12551  00074A  2EE8               	decfsz	wreg,f,c
 12552  00074C  D7FE               	bra	u9087
 12553  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12554  000750  D7FC               	bra	u9087
 12555  000752  F000               	nop	
 12556  000754  0100               	movlb	0	; () banked
 12557  000756  2BBE               	incf	actuatorTest@i_1683& (0+255),f,b
 12558  000758  D7EF               	goto	l7519
 12559  00075A                     l7527:
 12560                           
 12561                           ; BSR set to: 0
 12562  00075A  0E00               	movlw	0
 12563  00075C  0100               	movlb	0	; () banked
 12564  00075E  6FBF               	movwf	actuatorTest@i_1684& (0+255),b
 12565  000760                     l7529:
 12566                           
 12567                           ; BSR set to: 0
 12568  000760  0E63               	movlw	99
 12569  000762  0100               	movlb	0	; () banked
 12570  000764  65BF               	cpfsgt	actuatorTest@i_1684& (0+255),b
 12571  000766  D001               	goto	l7533
 12572  000768  D00C               	goto	l1193
 12573  00076A                     l7533:
 12574                           
 12575                           ; BSR set to: 0
 12576  00076A  0E68               	movlw	104
 12577  00076C  0100               	movlb	0	; () banked
 12578  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12579  000770  0EE4               	movlw	228
 12580  000772                     u9097:
 12581  000772  2EE8               	decfsz	wreg,f,c
 12582  000774  D7FE               	bra	u9097
 12583  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12584  000778  D7FC               	bra	u9097
 12585  00077A  F000               	nop	
 12586  00077C  0100               	movlb	0	; () banked
 12587  00077E  2BBF               	incf	actuatorTest@i_1684& (0+255),f,b
 12588  000780  D7EF               	goto	l7529
 12589  000782                     l1193:
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;Test.c: 324: TMR3ON = 0;
 12593  000782  90B1               	bcf	4017,0,c	;volatile
 12594                           
 12595                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12596  000784  9EF2               	bcf	intcon,7,c	;volatile
 12597                           
 12598                           ; BSR set to: 0
 12599                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12600  000786  0E01               	movlw	1
 12601  000788  EC67  F027         	call	_lcdInst
 12602  00078C  0E68               	movlw	104
 12603  00078E  0100               	movlb	0	; () banked
 12604  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12605  000792  0EE4               	movlw	228
 12606  000794                     u9107:
 12607  000794  2EE8               	decfsz	wreg,f,c
 12608  000796  D7FE               	bra	u9107
 12609  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12610  00079A  D7FC               	bra	u9107
 12611  00079C  F000               	nop	
 12612  00079E  0E80               	movlw	128
 12613  0007A0  EC67  F027         	call	_lcdInst
 12614                           
 12615                           ;Test.c: 331: printf("TST: CAM SERVO");
 12616  0007A4  0E96               	movlw	low STR_107
 12617  0007A6  0100               	movlb	0	; () banked
 12618  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12619  0007AA  0EFE               	movlw	high STR_107
 12620  0007AC  0100               	movlb	0	; () banked
 12621  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12622  0007B0  ECB8  F008         	call	_printf	;wreg free
 12623                           
 12624                           ;Test.c: 332: lcdInst(0b11000000);;
 12625  0007B4  0EC0               	movlw	192
 12626  0007B6  EC67  F027         	call	_lcdInst
 12627                           
 12628                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12629  0007BA  0E78               	movlw	low STR_108
 12630  0007BC  0100               	movlb	0	; () banked
 12631  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12632  0007C0  0EFE               	movlw	high STR_108
 12633  0007C2  0100               	movlb	0	; () banked
 12634  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12635  0007C6  ECB8  F008         	call	_printf	;wreg free
 12636                           
 12637                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12638  0007CA  808B               	bsf	3979,0,c	;volatile
 12639                           
 12640                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12641  0007CC  0E00               	movlw	0
 12642  0007CE  0100               	movlb	0	; () banked
 12643  0007D0  6FC0               	movwf	actuatorTest@i_1687& (0+255),b
 12644  0007D2                     l7553:
 12645                           
 12646                           ; BSR set to: 0
 12647  0007D2  0E63               	movlw	99
 12648  0007D4  0100               	movlb	0	; () banked
 12649  0007D6  65C0               	cpfsgt	actuatorTest@i_1687& (0+255),b
 12650  0007D8  D001               	goto	l7557
 12651  0007DA  D00C               	goto	l7561
 12652  0007DC                     l7557:
 12653                           
 12654                           ; BSR set to: 0
 12655  0007DC  0E68               	movlw	104
 12656  0007DE  0100               	movlb	0	; () banked
 12657  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12658  0007E2  0EE4               	movlw	228
 12659  0007E4                     u9117:
 12660  0007E4  2EE8               	decfsz	wreg,f,c
 12661  0007E6  D7FE               	bra	u9117
 12662  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12663  0007EA  D7FC               	bra	u9117
 12664  0007EC  F000               	nop	
 12665  0007EE  0100               	movlb	0	; () banked
 12666  0007F0  2BC0               	incf	actuatorTest@i_1687& (0+255),f,b
 12667  0007F2  D7EF               	goto	l7553
 12668  0007F4                     l7561:
 12669                           
 12670                           ; BSR set to: 0
 12671  0007F4  0E00               	movlw	0
 12672  0007F6  0100               	movlb	0	; () banked
 12673  0007F8  6FC1               	movwf	actuatorTest@i_1688& (0+255),b
 12674  0007FA                     l7563:
 12675                           
 12676                           ; BSR set to: 0
 12677  0007FA  0E63               	movlw	99
 12678  0007FC  0100               	movlb	0	; () banked
 12679  0007FE  65C1               	cpfsgt	actuatorTest@i_1688& (0+255),b
 12680  000800  D001               	goto	l7567
 12681  000802  D00C               	goto	l7571
 12682  000804                     l7567:
 12683                           
 12684                           ; BSR set to: 0
 12685  000804  0E68               	movlw	104
 12686  000806  0100               	movlb	0	; () banked
 12687  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12688  00080A  0EE4               	movlw	228
 12689  00080C                     u9127:
 12690  00080C  2EE8               	decfsz	wreg,f,c
 12691  00080E  D7FE               	bra	u9127
 12692  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12693  000812  D7FC               	bra	u9127
 12694  000814  F000               	nop	
 12695  000816  0100               	movlb	0	; () banked
 12696  000818  2BC1               	incf	actuatorTest@i_1688& (0+255),f,b
 12697  00081A  D7EF               	goto	l7563
 12698  00081C                     l7571:
 12699                           
 12700                           ; BSR set to: 0
 12701                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12702  00081C  0E80               	movlw	128
 12703  00081E  EC67  F027         	call	_lcdInst
 12704  000822  0EC0               	movlw	192
 12705  000824  EC67  F027         	call	_lcdInst
 12706                           
 12707                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 12708  000828  0E69               	movlw	low STR_109
 12709  00082A  0100               	movlb	0	; () banked
 12710  00082C  6F8E               	movwf	printf@f& (0+255),b
 12711  00082E  0EFE               	movlw	high STR_109
 12712  000830  0100               	movlb	0	; () banked
 12713  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12714  000834  ECB8  F008         	call	_printf	;wreg free
 12715                           
 12716                           ;Test.c: 340: for(i=0;i<10000;i++)
 12717  000838  0E00               	movlw	0
 12718  00083A  0100               	movlb	0	; () banked
 12719  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12720  00083E  0E00               	movlw	0
 12721  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12722  000842                     l7577:
 12723                           
 12724                           ; BSR set to: 0
 12725  000842  0100               	movlb	0	; () banked
 12726  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12727  000846  D008               	goto	l1198
 12728  000848  0E10               	movlw	16
 12729  00084A  0100               	movlb	0	; () banked
 12730  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12731  00084E  0E27               	movlw	39
 12732  000850  0100               	movlb	0	; () banked
 12733  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12734  000854  B0D8               	btfsc	status,0,c
 12735  000856  D00D               	goto	l7587
 12736  000858                     l1198:
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;Test.c: 341: {
 12740                           ;Test.c: 342: LATCbits.LATC0 = 1;
 12741  000858  808B               	bsf	3979,0,c	;volatile
 12742                           
 12743                           ; BSR set to: 0
 12744                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12745  00085A  0E1A               	movlw	26
 12746  00085C                     u9137:
 12747  00085C  2EE8               	decfsz	wreg,f,c
 12748  00085E  D7FE               	bra	u9137
 12749  000860  D000               	nop2	
 12750                           
 12751                           ;Test.c: 344: LATCbits.LATC0 = 0;
 12752  000862  908B               	bcf	3979,0,c	;volatile
 12753                           
 12754                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12755  000864  0EF0               	movlw	240
 12756  000866                     u9147:
 12757  000866  2EE8               	decfsz	wreg,f,c
 12758  000868  D7FE               	bra	u9147
 12759  00086A  0100               	movlb	0	; () banked
 12760  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12761  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12762  000870  D7E8               	goto	l7577
 12763  000872                     l7587:
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;Test.c: 346: }
 12767                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12768  000872  0E00               	movlw	0
 12769  000874  0100               	movlb	0	; () banked
 12770  000876  6FC2               	movwf	actuatorTest@i_1690& (0+255),b
 12771  000878                     l7589:
 12772                           
 12773                           ; BSR set to: 0
 12774  000878  0E63               	movlw	99
 12775  00087A  0100               	movlb	0	; () banked
 12776  00087C  65C2               	cpfsgt	actuatorTest@i_1690& (0+255),b
 12777  00087E  D001               	goto	l7593
 12778  000880  D00C               	goto	l7597
 12779  000882                     l7593:
 12780                           
 12781                           ; BSR set to: 0
 12782  000882  0E68               	movlw	104
 12783  000884  0100               	movlb	0	; () banked
 12784  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12785  000888  0EE4               	movlw	228
 12786  00088A                     u9157:
 12787  00088A  2EE8               	decfsz	wreg,f,c
 12788  00088C  D7FE               	bra	u9157
 12789  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12790  000890  D7FC               	bra	u9157
 12791  000892  F000               	nop	
 12792  000894  0100               	movlb	0	; () banked
 12793  000896  2BC2               	incf	actuatorTest@i_1690& (0+255),f,b
 12794  000898  D7EF               	goto	l7589
 12795  00089A                     l7597:
 12796                           
 12797                           ; BSR set to: 0
 12798  00089A  0E00               	movlw	0
 12799  00089C  0100               	movlb	0	; () banked
 12800  00089E  6FC3               	movwf	actuatorTest@i_1691& (0+255),b
 12801  0008A0                     l7599:
 12802                           
 12803                           ; BSR set to: 0
 12804  0008A0  0E63               	movlw	99
 12805  0008A2  0100               	movlb	0	; () banked
 12806  0008A4  65C3               	cpfsgt	actuatorTest@i_1691& (0+255),b
 12807  0008A6  D001               	goto	l7603
 12808  0008A8  D00C               	goto	l7607
 12809  0008AA                     l7603:
 12810                           
 12811                           ; BSR set to: 0
 12812  0008AA  0E68               	movlw	104
 12813  0008AC  0100               	movlb	0	; () banked
 12814  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12815  0008B0  0EE4               	movlw	228
 12816  0008B2                     u9167:
 12817  0008B2  2EE8               	decfsz	wreg,f,c
 12818  0008B4  D7FE               	bra	u9167
 12819  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12820  0008B8  D7FC               	bra	u9167
 12821  0008BA  F000               	nop	
 12822  0008BC  0100               	movlb	0	; () banked
 12823  0008BE  2BC3               	incf	actuatorTest@i_1691& (0+255),f,b
 12824  0008C0  D7EF               	goto	l7599
 12825  0008C2                     l7607:
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;Test.c: 349: machine_state = Testing_state;
 12829  0008C2  0E03               	movlw	3
 12830  0008C4  0100               	movlb	0	; () banked
 12831  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12832                           
 12833                           ; BSR set to: 0
 12834  0008C8  0012               	return		;funcret
 12835  0008CA                     __end_of_actuatorTest:
 12836                           	opt stack 0
 12837                           tblptru	equ	0xFF8
 12838                           tblptrh	equ	0xFF7
 12839                           tblptrl	equ	0xFF6
 12840                           tablat	equ	0xFF5
 12841                           prodh	equ	0xFF4
 12842                           prodl	equ	0xFF3
 12843                           intcon	equ	0xFF2
 12844                           intcon2	equ	0xFF1
 12845                           intcon3	equ	0xFF0
 12846                           postinc0	equ	0xFEE
 12847                           wreg	equ	0xFE8
 12848                           postdec1	equ	0xFE5
 12849                           fsr1l	equ	0xFE1
 12850                           indf2	equ	0xFDF
 12851                           postinc2	equ	0xFDE
 12852                           postdec2	equ	0xFDD
 12853                           fsr2h	equ	0xFDA
 12854                           fsr2l	equ	0xFD9
 12855                           status	equ	0xFD8
 12856                           
 12857 ;; *************** function _SpeedTest *****************
 12858 ;; Defined at:
 12859 ;;		line 549 in file "Test.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;		None
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;		None
 12864 ;; Return value:  Size  Location     Type
 12865 ;;                  1    wreg      void 
 12866 ;; Registers used:
 12867 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12868 ;; Tracked objects:
 12869 ;;		On entry : 0/0
 12870 ;;		On exit  : 0/0
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12877 ;;Total ram usage:        1 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:   10
 12880 ;; This function calls:
 12881 ;;		_lcdInst
 12882 ;;		_printf
 12883 ;; This function is called by:
 12884 ;;		_Test
 12885 ;; This function uses a non-reentrant model
 12886 ;;
 12887                           
 12888                           	psect	text41
 12889  004186                     __ptext41:
 12890                           	opt stack 0
 12891  004186                     _SpeedTest:
 12892                           	opt stack 19
 12893                           
 12894                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12895                           
 12896                           ; BSR set to: 0
 12897                           ;incstack = 0
 12898  004186  0E01               	movlw	1
 12899  004188  EC67  F027         	call	_lcdInst
 12900  00418C  0E68               	movlw	104
 12901  00418E  0100               	movlb	0	; () banked
 12902  004190  6FAB               	movwf	??_SpeedTest& (0+255),b
 12903  004192  0EE4               	movlw	228
 12904  004194                     u9177:
 12905  004194  2EE8               	decfsz	wreg,f,c
 12906  004196  D7FE               	bra	u9177
 12907  004198  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12908  00419A  D7FC               	bra	u9177
 12909  00419C  F000               	nop	
 12910  00419E  0E80               	movlw	128
 12911  0041A0  EC67  F027         	call	_lcdInst
 12912                           
 12913                           ;Test.c: 552: printf("S: D WILL RETURN ");
 12914  0041A4  0E5B               	movlw	low STR_120
 12915  0041A6  0100               	movlb	0	; () banked
 12916  0041A8  6F8E               	movwf	printf@f& (0+255),b
 12917  0041AA  0EFB               	movlw	high STR_120
 12918  0041AC  0100               	movlb	0	; () banked
 12919  0041AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12920  0041B0  ECB8  F008         	call	_printf	;wreg free
 12921                           
 12922                           ;Test.c: 553: lcdInst(0b11000000);;
 12923  0041B4  0EC0               	movlw	192
 12924  0041B6  EC67  F027         	call	_lcdInst
 12925                           
 12926                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 12927  0041BA  0E49               	movlw	low STR_112
 12928  0041BC  0100               	movlb	0	; () banked
 12929  0041BE  6F8E               	movwf	printf@f& (0+255),b
 12930  0041C0  0EFB               	movlw	high STR_112
 12931  0041C2  0100               	movlb	0	; () banked
 12932  0041C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12933  0041C6  ECB8  F008         	call	_printf	;wreg free
 12934  0041CA                     l1284:
 12935  0041CA  A281               	btfss	3969,1,c	;volatile
 12936  0041CC  D7FE               	goto	l1284
 12937                           
 12938                           ;Test.c: 559: }
 12939                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 12940  0041CE  3881               	swapf	3969,w,c	;volatile
 12941  0041D0  0B0F               	andlw	15
 12942  0041D2  0A0F               	xorlw	15
 12943  0041D4  B4D8               	btfsc	status,2,c
 12944  0041D6  0012               	return	
 12945  0041D8  D014               	goto	l7649
 12946  0041DA                     l1291:
 12947                           
 12948                           ;Test.c: 565: LATAbits.LATA5 = 1;
 12949  0041DA  8A89               	bsf	3977,5,c	;volatile
 12950                           
 12951                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 12952  0041DC  0E34               	movlw	52
 12953  0041DE  0100               	movlb	0	; () banked
 12954  0041E0  6FAB               	movwf	??_SpeedTest& (0+255),b
 12955  0041E2  0EF1               	movlw	241
 12956  0041E4                     u9187:
 12957  0041E4  2EE8               	decfsz	wreg,f,c
 12958  0041E6  D7FE               	bra	u9187
 12959  0041E8  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12960  0041EA  D7FC               	bra	u9187
 12961  0041EC  D000               	nop2	
 12962                           
 12963                           ;Test.c: 567: LATAbits.LATA5 = 0;
 12964  0041EE  9A89               	bcf	3977,5,c	;volatile
 12965                           
 12966                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 12967  0041F0  0E34               	movlw	52
 12968  0041F2  0100               	movlb	0	; () banked
 12969  0041F4  6FAB               	movwf	??_SpeedTest& (0+255),b
 12970  0041F6  0EF1               	movlw	241
 12971  0041F8                     u9197:
 12972  0041F8  2EE8               	decfsz	wreg,f,c
 12973  0041FA  D7FE               	bra	u9197
 12974  0041FC  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12975  0041FE  D7FC               	bra	u9197
 12976  004200  D000               	nop2	
 12977  004202                     l7649:
 12978  004202  B281               	btfsc	3969,1,c	;volatile
 12979  004204  D7EA               	goto	l1291
 12980                           
 12981                           ;Test.c: 571: }
 12982                           ;Test.c: 572: LATAbits.LATA5 = 0;
 12983  004206  9A89               	bcf	3977,5,c	;volatile
 12984  004208  D7E0               	goto	l1284
 12985  00420A                     __end_of_SpeedTest:
 12986                           	opt stack 0
 12987                           tblptru	equ	0xFF8
 12988                           tblptrh	equ	0xFF7
 12989                           tblptrl	equ	0xFF6
 12990                           tablat	equ	0xFF5
 12991                           prodh	equ	0xFF4
 12992                           prodl	equ	0xFF3
 12993                           intcon	equ	0xFF2
 12994                           intcon2	equ	0xFF1
 12995                           intcon3	equ	0xFF0
 12996                           postinc0	equ	0xFEE
 12997                           wreg	equ	0xFE8
 12998                           postdec1	equ	0xFE5
 12999                           fsr1l	equ	0xFE1
 13000                           indf2	equ	0xFDF
 13001                           postinc2	equ	0xFDE
 13002                           postdec2	equ	0xFDD
 13003                           fsr2h	equ	0xFDA
 13004                           fsr2l	equ	0xFD9
 13005                           status	equ	0xFD8
 13006                           
 13007 ;; *************** function _PusherTest *****************
 13008 ;; Defined at:
 13009 ;;		line 467 in file "Test.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;		None
 13012 ;; Auto vars:     Size  Location     Type
 13013 ;;  i               2   51[BANK0 ] int 
 13014 ;;  i               2   49[BANK0 ] int 
 13015 ;;  res             2   47[BANK0 ] int 
 13016 ;;  res             2   45[BANK0 ] int 
 13017 ;; Return value:  Size  Location     Type
 13018 ;;                  1    wreg      void 
 13019 ;; Registers used:
 13020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13021 ;; Tracked objects:
 13022 ;;		On entry : 0/0
 13023 ;;		On exit  : 0/0
 13024 ;;		Unchanged: 0/0
 13025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13027 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13028 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13029 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13030 ;;Total ram usage:       10 bytes
 13031 ;; Hardware stack levels used:    1
 13032 ;; Hardware stack levels required when called:   10
 13033 ;; This function calls:
 13034 ;;		_lcdInst
 13035 ;;		_printf
 13036 ;;		_readADC
 13037 ;; This function is called by:
 13038 ;;		_Test
 13039 ;; This function uses a non-reentrant model
 13040 ;;
 13041                           
 13042                           	psect	text42
 13043  002860                     __ptext42:
 13044                           	opt stack 0
 13045  002860                     _PusherTest:
 13046                           	opt stack 19
 13047                           
 13048                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13049                           
 13050                           ;incstack = 0
 13051  002860  0E01               	movlw	1
 13052  002862  EC67  F027         	call	_lcdInst
 13053  002866  0E68               	movlw	104
 13054  002868  0100               	movlb	0	; () banked
 13055  00286A  6FAB               	movwf	??_PusherTest& (0+255),b
 13056  00286C  0EE4               	movlw	228
 13057  00286E                     u9207:
 13058  00286E  2EE8               	decfsz	wreg,f,c
 13059  002870  D7FE               	bra	u9207
 13060  002872  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13061  002874  D7FC               	bra	u9207
 13062  002876  F000               	nop	
 13063  002878  0E80               	movlw	128
 13064  00287A  EC67  F027         	call	_lcdInst
 13065                           
 13066                           ;Test.c: 469: printf("PUSHER TST");
 13067  00287E  0E71               	movlw	low STR_113
 13068  002880  0100               	movlb	0	; () banked
 13069  002882  6F8E               	movwf	printf@f& (0+255),b
 13070  002884  0EFF               	movlw	high STR_113
 13071  002886  0100               	movlb	0	; () banked
 13072  002888  6F8F               	movwf	(printf@f+1)& (0+255),b
 13073  00288A  ECB8  F008         	call	_printf	;wreg free
 13074                           
 13075                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13076  00288E  8A8B               	bsf	3979,5,c	;volatile
 13077                           
 13078                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13079  002890  D05C               	goto	l7679
 13080  002892                     l7661:
 13081                           
 13082                           ;Test.c: 473: readADC(0);
 13083  002892  0E00               	movlw	0
 13084  002894  EC6C  F026         	call	_readADC
 13085                           
 13086                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13087  002898  50C3               	movf	4035,w,c	;volatile
 13088  00289A  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13089  00289E  0100               	movlb	0	; () banked
 13090  0028A0  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13091  0028A2  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13092  0028A6  0100               	movlb	0	; () banked
 13093  0028A8  6BAB               	clrf	??_PusherTest& (0+255),b
 13094  0028AA  0100               	movlb	0	; () banked
 13095  0028AC  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13096  0028AE  0100               	movlb	0	; () banked
 13097  0028B0  6FAD               	movwf	PusherTest@res& (0+255),b
 13098  0028B2  0100               	movlb	0	; () banked
 13099  0028B4  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13100  0028B6  0100               	movlb	0	; () banked
 13101  0028B8  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13105  0028BA  0100               	movlb	0	; () banked
 13106  0028BC  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13107  0028BE  D00A               	goto	u6470
 13108  0028C0  0E21               	movlw	33
 13109  0028C2  0100               	movlb	0	; () banked
 13110  0028C4  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13111  0028C6  0E03               	movlw	3
 13112  0028C8  0100               	movlb	0	; () banked
 13113  0028CA  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13114  0028CC  A0D8               	btfss	status,0,c
 13115  0028CE  D002               	goto	u6470
 13116  0028D0  0E01               	movlw	1
 13117  0028D2  D001               	goto	u6480
 13118  0028D4                     u6470:
 13119  0028D4  0E00               	movlw	0
 13120  0028D6                     u6480:
 13121  0028D6  0100               	movlb	0	; () banked
 13122  0028D8  6FDE               	movwf	_IR_signal& (0+255),b
 13123  0028DA  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13124                           
 13125                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13126  0028DC  0E01               	movlw	1
 13127  0028DE  EC67  F027         	call	_lcdInst
 13128  0028E2  0E68               	movlw	104
 13129  0028E4  0100               	movlb	0	; () banked
 13130  0028E6  6FAB               	movwf	??_PusherTest& (0+255),b
 13131  0028E8  0EE4               	movlw	228
 13132  0028EA                     u9217:
 13133  0028EA  2EE8               	decfsz	wreg,f,c
 13134  0028EC  D7FE               	bra	u9217
 13135  0028EE  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13136  0028F0  D7FC               	bra	u9217
 13137  0028F2  F000               	nop	
 13138  0028F4  0E80               	movlw	128
 13139  0028F6  EC67  F027         	call	_lcdInst
 13140                           
 13141                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13142  0028FA  0E5A               	movlw	low STR_80
 13143  0028FC  0100               	movlb	0	; () banked
 13144  0028FE  6F8E               	movwf	printf@f& (0+255),b
 13145  002900  0EFE               	movlw	high STR_80
 13146  002902  0100               	movlb	0	; () banked
 13147  002904  6F8F               	movwf	(printf@f+1)& (0+255),b
 13148  002906  C0DE  F090         	movff	_IR_signal,?_printf+2
 13149  00290A  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13150  00290E  ECB8  F008         	call	_printf	;wreg free
 13151                           
 13152                           ;Test.c: 479: lcdInst(0b11000000);;
 13153  002912  0EC0               	movlw	192
 13154  002914  EC67  F027         	call	_lcdInst
 13155                           
 13156                           ;Test.c: 480: printf("%d", res);
 13157  002918  0E16               	movlw	low (STR_27+14)
 13158  00291A  0100               	movlb	0	; () banked
 13159  00291C  6F8E               	movwf	printf@f& (0+255),b
 13160  00291E  0EFE               	movlw	high (STR_27+14)
 13161  002920  0100               	movlb	0	; () banked
 13162  002922  6F8F               	movwf	(printf@f+1)& (0+255),b
 13163  002924  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13164  002928  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13165  00292C  ECB8  F008         	call	_printf	;wreg free
 13166                           
 13167                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13168  002930  0E05               	movlw	5
 13169  002932  0100               	movlb	0	; () banked
 13170  002934  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13171  002936  0E0F               	movlw	15
 13172  002938  0100               	movlb	0	; () banked
 13173  00293A  6FAB               	movwf	??_PusherTest& (0+255),b
 13174  00293C  0EF1               	movlw	241
 13175  00293E                     u9227:
 13176  00293E  2EE8               	decfsz	wreg,f,c
 13177  002940  D7FE               	bra	u9227
 13178  002942  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13179  002944  D7FC               	bra	u9227
 13180  002946  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13181  002948  D7FA               	bra	u9227
 13182  00294A                     l7679:
 13183  00294A  B281               	btfsc	3969,1,c	;volatile
 13184  00294C  D05D               	goto	l7699
 13185  00294E  D7A1               	goto	l7661
 13186  002950                     l7681:
 13187                           
 13188                           ;Test.c: 487: readADC(0);
 13189  002950  0E00               	movlw	0
 13190  002952  EC6C  F026         	call	_readADC
 13191                           
 13192                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13193  002956  50C3               	movf	4035,w,c	;volatile
 13194  002958  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13195  00295C  0100               	movlb	0	; () banked
 13196  00295E  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13197  002960  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13198  002964  0100               	movlb	0	; () banked
 13199  002966  6BAB               	clrf	??_PusherTest& (0+255),b
 13200  002968  0100               	movlb	0	; () banked
 13201  00296A  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13202  00296C  0100               	movlb	0	; () banked
 13203  00296E  6FAF               	movwf	PusherTest@res_1706& (0+255),b
 13204  002970  0100               	movlb	0	; () banked
 13205  002972  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13206  002974  0100               	movlb	0	; () banked
 13207  002976  6FB0               	movwf	(PusherTest@res_1706+1)& (0+255),b
 13208                           
 13209                           ; BSR set to: 0
 13210                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13211  002978  0100               	movlb	0	; () banked
 13212  00297A  BFB0               	btfsc	(PusherTest@res_1706+1)& (0+255),7,b
 13213  00297C  D00A               	goto	u6500
 13214  00297E  0E21               	movlw	33
 13215  002980  0100               	movlb	0	; () banked
 13216  002982  5DAF               	subwf	PusherTest@res_1706& (0+255),w,b
 13217  002984  0E03               	movlw	3
 13218  002986  0100               	movlb	0	; () banked
 13219  002988  59B0               	subwfb	(PusherTest@res_1706+1)& (0+255),w,b
 13220  00298A  A0D8               	btfss	status,0,c
 13221  00298C  D002               	goto	u6500
 13222  00298E  0E01               	movlw	1
 13223  002990  D001               	goto	u6510
 13224  002992                     u6500:
 13225  002992  0E00               	movlw	0
 13226  002994                     u6510:
 13227  002994  0100               	movlb	0	; () banked
 13228  002996  6FDE               	movwf	_IR_signal& (0+255),b
 13229  002998  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13230                           
 13231                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13232  00299A  0E01               	movlw	1
 13233  00299C  EC67  F027         	call	_lcdInst
 13234  0029A0  0E68               	movlw	104
 13235  0029A2  0100               	movlb	0	; () banked
 13236  0029A4  6FAB               	movwf	??_PusherTest& (0+255),b
 13237  0029A6  0EE4               	movlw	228
 13238  0029A8                     u9237:
 13239  0029A8  2EE8               	decfsz	wreg,f,c
 13240  0029AA  D7FE               	bra	u9237
 13241  0029AC  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13242  0029AE  D7FC               	bra	u9237
 13243  0029B0  F000               	nop	
 13244  0029B2  0E80               	movlw	128
 13245  0029B4  EC67  F027         	call	_lcdInst
 13246                           
 13247                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13248  0029B8  0E5A               	movlw	low STR_80
 13249  0029BA  0100               	movlb	0	; () banked
 13250  0029BC  6F8E               	movwf	printf@f& (0+255),b
 13251  0029BE  0EFE               	movlw	high STR_80
 13252  0029C0  0100               	movlb	0	; () banked
 13253  0029C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13254  0029C4  C0DE  F090         	movff	_IR_signal,?_printf+2
 13255  0029C8  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13256  0029CC  ECB8  F008         	call	_printf	;wreg free
 13257                           
 13258                           ;Test.c: 492: lcdInst(0b11000000);;
 13259  0029D0  0EC0               	movlw	192
 13260  0029D2  EC67  F027         	call	_lcdInst
 13261                           
 13262                           ;Test.c: 493: printf("%d", res);
 13263  0029D6  0E16               	movlw	low (STR_27+14)
 13264  0029D8  0100               	movlb	0	; () banked
 13265  0029DA  6F8E               	movwf	printf@f& (0+255),b
 13266  0029DC  0EFE               	movlw	high (STR_27+14)
 13267  0029DE  0100               	movlb	0	; () banked
 13268  0029E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13269  0029E2  C0AF  F090         	movff	PusherTest@res_1706,?_printf+2
 13270  0029E6  C0B0  F091         	movff	PusherTest@res_1706+1,?_printf+3
 13271  0029EA  ECB8  F008         	call	_printf	;wreg free
 13272                           
 13273                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13274  0029EE  0E05               	movlw	5
 13275  0029F0  0100               	movlb	0	; () banked
 13276  0029F2  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13277  0029F4  0E0F               	movlw	15
 13278  0029F6  0100               	movlb	0	; () banked
 13279  0029F8  6FAB               	movwf	??_PusherTest& (0+255),b
 13280  0029FA  0EF1               	movlw	241
 13281  0029FC                     u9247:
 13282  0029FC  2EE8               	decfsz	wreg,f,c
 13283  0029FE  D7FE               	bra	u9247
 13284  002A00  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13285  002A02  D7FC               	bra	u9247
 13286  002A04  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13287  002A06  D7FA               	bra	u9247
 13288  002A08                     l7699:
 13289  002A08  A281               	btfss	3969,1,c	;volatile
 13290  002A0A  D7A2               	goto	l7681
 13291                           
 13292                           ;Test.c: 495: }
 13293                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13294  002A0C  3881               	swapf	3969,w,c	;volatile
 13295  002A0E  0B0F               	andlw	15
 13296  002A10  0A0F               	xorlw	15
 13297  002A12  B4D8               	btfsc	status,2,c
 13298  002A14  D047               	goto	l1253
 13299                           
 13300                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13301                           
 13302                           ;Test.c: 498: }
 13303                           
 13304                           ;Test.c: 497: break;
 13305  002A16  3881               	swapf	3969,w,c	;volatile
 13306  002A18  0B0F               	andlw	15
 13307  002A1A  0A05               	xorlw	5
 13308  002A1C  A4D8               	btfss	status,2,c
 13309  002A1E  D01D               	goto	l7721
 13310                           
 13311                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13312  002A20  0E00               	movlw	0
 13313  002A22  0100               	movlb	0	; () banked
 13314  002A24  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13315  002A26  0E00               	movlw	0
 13316  002A28  6FB1               	movwf	PusherTest@i& (0+255),b
 13317  002A2A                     l7711:
 13318                           
 13319                           ; BSR set to: 0
 13320  002A2A  0100               	movlb	0	; () banked
 13321  002A2C  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13322  002A2E  D008               	goto	l1256
 13323  002A30  0EB8               	movlw	184
 13324  002A32  0100               	movlb	0	; () banked
 13325  002A34  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13326  002A36  0E0B               	movlw	11
 13327  002A38  0100               	movlb	0	; () banked
 13328  002A3A  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13329  002A3C  B0D8               	btfsc	status,0,c
 13330  002A3E  D02F               	goto	l1262
 13331  002A40                     l1256:
 13332                           
 13333                           ; BSR set to: 0
 13334                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13335  002A40  8889               	bsf	3977,4,c	;volatile
 13336                           
 13337                           ; BSR set to: 0
 13338                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13339  002A42  0EC8               	movlw	200
 13340  002A44                     u9257:
 13341  002A44  2EE8               	decfsz	wreg,f,c
 13342  002A46  D7FE               	bra	u9257
 13343                           
 13344                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13345  002A48  9889               	bcf	3977,4,c	;volatile
 13346                           
 13347                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13348  002A4A  0E42               	movlw	66
 13349  002A4C                     u9267:
 13350  002A4C  2EE8               	decfsz	wreg,f,c
 13351  002A4E  D7FE               	bra	u9267
 13352  002A50  D000               	nop2	
 13353  002A52  0100               	movlb	0	; () banked
 13354  002A54  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13355  002A56  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13356  002A58  D7E8               	goto	l7711
 13357  002A5A                     l7721:
 13358                           
 13359                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13360  002A5A  3881               	swapf	3969,w,c	;volatile
 13361  002A5C  0B0F               	andlw	15
 13362  002A5E  0A06               	xorlw	6
 13363  002A60  A4D8               	btfss	status,2,c
 13364  002A62  D01D               	goto	l1262
 13365                           
 13366                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13367  002A64  0E00               	movlw	0
 13368  002A66  0100               	movlb	0	; () banked
 13369  002A68  6FB4               	movwf	(PusherTest@i_1710+1)& (0+255),b
 13370  002A6A  0E00               	movlw	0
 13371  002A6C  6FB3               	movwf	PusherTest@i_1710& (0+255),b
 13372  002A6E                     l7725:
 13373                           
 13374                           ; BSR set to: 0
 13375  002A6E  0100               	movlb	0	; () banked
 13376  002A70  BFB4               	btfsc	(PusherTest@i_1710+1)& (0+255),7,b
 13377  002A72  D008               	goto	l1260
 13378  002A74  0EB8               	movlw	184
 13379  002A76  0100               	movlb	0	; () banked
 13380  002A78  5DB3               	subwf	PusherTest@i_1710& (0+255),w,b
 13381  002A7A  0E0B               	movlw	11
 13382  002A7C  0100               	movlb	0	; () banked
 13383  002A7E  59B4               	subwfb	(PusherTest@i_1710+1)& (0+255),w,b
 13384  002A80  B0D8               	btfsc	status,0,c
 13385  002A82  D00D               	goto	l1262
 13386  002A84                     l1260:
 13387                           
 13388                           ; BSR set to: 0
 13389                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13390  002A84  8889               	bsf	3977,4,c	;volatile
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13394  002A86  0E9A               	movlw	154
 13395  002A88                     u9277:
 13396  002A88  2EE8               	decfsz	wreg,f,c
 13397  002A8A  D7FE               	bra	u9277
 13398  002A8C  D000               	nop2	
 13399                           
 13400                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13401  002A8E  9889               	bcf	3977,4,c	;volatile
 13402                           
 13403                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13404  002A90  0E70               	movlw	112
 13405  002A92                     u9287:
 13406  002A92  2EE8               	decfsz	wreg,f,c
 13407  002A94  D7FE               	bra	u9287
 13408  002A96  0100               	movlb	0	; () banked
 13409  002A98  4BB3               	infsnz	PusherTest@i_1710& (0+255),f,b
 13410  002A9A  2BB4               	incf	(PusherTest@i_1710+1)& (0+255),f,b
 13411  002A9C  D7E8               	goto	l7725
 13412  002A9E                     l1262:
 13413  002A9E  A281               	btfss	3969,1,c	;volatile
 13414  002AA0  D7B3               	goto	l7699
 13415  002AA2  D7FD               	goto	l1262
 13416  002AA4                     l1253:
 13417                           
 13418                           ;Test.c: 519: }
 13419                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13420  002AA4  9A8B               	bcf	3979,5,c	;volatile
 13421  002AA6  0012               	return		;funcret
 13422  002AA8                     __end_of_PusherTest:
 13423                           	opt stack 0
 13424                           tblptru	equ	0xFF8
 13425                           tblptrh	equ	0xFF7
 13426                           tblptrl	equ	0xFF6
 13427                           tablat	equ	0xFF5
 13428                           prodh	equ	0xFF4
 13429                           prodl	equ	0xFF3
 13430                           intcon	equ	0xFF2
 13431                           intcon2	equ	0xFF1
 13432                           intcon3	equ	0xFF0
 13433                           postinc0	equ	0xFEE
 13434                           wreg	equ	0xFE8
 13435                           postdec1	equ	0xFE5
 13436                           fsr1l	equ	0xFE1
 13437                           indf2	equ	0xFDF
 13438                           postinc2	equ	0xFDE
 13439                           postdec2	equ	0xFDD
 13440                           fsr2h	equ	0xFDA
 13441                           fsr2l	equ	0xFD9
 13442                           status	equ	0xFD8
 13443                           
 13444 ;; *************** function _readADC *****************
 13445 ;; Defined at:
 13446 ;;		line 15 in file "ADCFunctionality.c"
 13447 ;; Parameters:    Size  Location     Type
 13448 ;;  channel         1    wreg     unsigned char 
 13449 ;; Auto vars:     Size  Location     Type
 13450 ;;  channel         1    1[BANK0 ] unsigned char 
 13451 ;; Return value:  Size  Location     Type
 13452 ;;                  1    wreg      void 
 13453 ;; Registers used:
 13454 ;;		wreg, status,2, status,0, cstack
 13455 ;; Tracked objects:
 13456 ;;		On entry : 0/0
 13457 ;;		On exit  : 0/0
 13458 ;;		Unchanged: 0/0
 13459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13464 ;;Total ram usage:        2 bytes
 13465 ;; Hardware stack levels used:    1
 13466 ;; Hardware stack levels required when called:    7
 13467 ;; This function calls:
 13468 ;;		Nothing
 13469 ;; This function is called by:
 13470 ;;		_readIR
 13471 ;;		_readMAG
 13472 ;;		_sensorTest
 13473 ;;		_PusherTest
 13474 ;; This function uses a non-reentrant model
 13475 ;;
 13476                           
 13477                           	psect	text43
 13478  004CD8                     __ptext43:
 13479                           	opt stack 0
 13480  004CD8                     _readADC:
 13481                           	opt stack 20
 13482                           
 13483                           ;incstack = 0
 13484                           ;readADC@channel stored from wreg
 13485  004CD8  0100               	movlb	0	; () banked
 13486  004CDA  6F81               	movwf	readADC@channel& (0+255),b
 13487                           
 13488                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13489  004CDC  0100               	movlb	0	; () banked
 13490  004CDE  4581               	rlncf	readADC@channel& (0+255),w,b
 13491  004CE0  46E8               	rlncf	wreg,f,c
 13492  004CE2  0BFC               	andlw	252
 13493  004CE4  6EC2               	movwf	4034,c	;volatile
 13494                           
 13495                           ; BSR set to: 0
 13496                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13497  004CE6  80C2               	bsf	4034,0,c	;volatile
 13498                           
 13499                           ; BSR set to: 0
 13500                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13501  004CE8  82C2               	bsf	4034,1,c	;volatile
 13502                           
 13503                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13504  004CEA  D009               	goto	l5633
 13505  004CEC                     l5631:
 13506  004CEC  0E34               	movlw	52
 13507  004CEE  0100               	movlb	0	; () banked
 13508  004CF0  6F80               	movwf	??_readADC& (0+255),b
 13509  004CF2  0EF1               	movlw	241
 13510  004CF4                     u9297:
 13511  004CF4  2EE8               	decfsz	wreg,f,c
 13512  004CF6  D7FE               	bra	u9297
 13513  004CF8  2F80               	decfsz	??_readADC& (0+255),f,b
 13514  004CFA  D7FC               	bra	u9297
 13515  004CFC  D000               	nop2	
 13516  004CFE                     l5633:
 13517  004CFE  A2C2               	btfss	4034,1,c	;volatile
 13518  004D00  0012               	return	
 13519  004D02  D7F4               	goto	l5631
 13520  004D04                     __end_of_readADC:
 13521                           	opt stack 0
 13522                           tblptru	equ	0xFF8
 13523                           tblptrh	equ	0xFF7
 13524                           tblptrl	equ	0xFF6
 13525                           tablat	equ	0xFF5
 13526                           prodh	equ	0xFF4
 13527                           prodl	equ	0xFF3
 13528                           intcon	equ	0xFF2
 13529                           intcon2	equ	0xFF1
 13530                           intcon3	equ	0xFF0
 13531                           postinc0	equ	0xFEE
 13532                           wreg	equ	0xFE8
 13533                           postdec1	equ	0xFE5
 13534                           fsr1l	equ	0xFE1
 13535                           indf2	equ	0xFDF
 13536                           postinc2	equ	0xFDE
 13537                           postdec2	equ	0xFDD
 13538                           fsr2h	equ	0xFDA
 13539                           fsr2l	equ	0xFD9
 13540                           status	equ	0xFD8
 13541                           
 13542 ;; *************** function _PortTests *****************
 13543 ;; Defined at:
 13544 ;;		line 409 in file "Test.c"
 13545 ;; Parameters:    Size  Location     Type
 13546 ;;		None
 13547 ;; Auto vars:     Size  Location     Type
 13548 ;;		None
 13549 ;; Return value:  Size  Location     Type
 13550 ;;                  1    wreg      void 
 13551 ;; Registers used:
 13552 ;;		wreg, status,2, status,0
 13553 ;; Tracked objects:
 13554 ;;		On entry : 0/0
 13555 ;;		On exit  : 0/0
 13556 ;;		Unchanged: 0/0
 13557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13560 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13562 ;;Total ram usage:        2 bytes
 13563 ;; Hardware stack levels used:    1
 13564 ;; Hardware stack levels required when called:    7
 13565 ;; This function calls:
 13566 ;;		Nothing
 13567 ;; This function is called by:
 13568 ;;		_Test
 13569 ;; This function uses a non-reentrant model
 13570 ;;
 13571                           
 13572                           	psect	text44
 13573  00420A                     __ptext44:
 13574                           	opt stack 0
 13575  00420A                     _PortTests:
 13576                           	opt stack 22
 13577  00420A                     l1211:
 13578  00420A  A281               	btfss	3969,1,c	;volatile
 13579  00420C  D7FE               	goto	l1211
 13580                           
 13581                           ;Test.c: 413: var = PORTB >> 4;
 13582  00420E  CF81 F080          	movff	3969,??_PortTests	;volatile
 13583  004212  0100               	movlb	0	; () banked
 13584  004214  3B80               	swapf	??_PortTests& (0+255),f,b
 13585  004216  0E0F               	movlw	15
 13586  004218  1780               	andwf	??_PortTests& (0+255),f,b
 13587  00421A  0100               	movlb	0	; () banked
 13588  00421C  5180               	movf	??_PortTests& (0+255),w,b
 13589  00421E  0100               	movlb	0	; () banked
 13590  004220  6FFA               	movwf	_var& (0+255),b
 13591  004222  6BFB               	clrf	(_var+1)& (0+255),b
 13592                           
 13593                           ;Test.c: 414: switch(var){
 13594  004224  D00C               	goto	l7739
 13595  004226                     l1215:
 13596                           
 13597                           ; BSR set to: 0
 13598                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13599  004226  808D               	bsf	3981,0,c	;volatile
 13600                           
 13601                           ;Test.c: 417: break;
 13602  004228  D027               	goto	l1223
 13603  00422A                     l1217:
 13604                           
 13605                           ; BSR set to: 0
 13606                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13607  00422A  828D               	bsf	3981,1,c	;volatile
 13608                           
 13609                           ;Test.c: 420: break;
 13610  00422C  D025               	goto	l1223
 13611  00422E                     l1218:
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13615  00422E  808C               	bsf	3980,0,c	;volatile
 13616                           
 13617                           ;Test.c: 423: break;
 13618  004230  D023               	goto	l1223
 13619  004232                     l1219:
 13620                           
 13621                           ; BSR set to: 0
 13622                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13623  004232  8689               	bsf	3977,3,c	;volatile
 13624                           
 13625                           ;Test.c: 426: break;
 13626  004234  D021               	goto	l1223
 13627  004236                     l1220:
 13628                           
 13629                           ; BSR set to: 0
 13630                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13631  004236  8889               	bsf	3977,4,c	;volatile
 13632                           
 13633                           ;Test.c: 429: break;
 13634  004238  D01F               	goto	l1223
 13635  00423A                     l1221:
 13636                           
 13637                           ; BSR set to: 0
 13638                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13639  00423A  8A89               	bsf	3977,5,c	;volatile
 13640                           
 13641                           ; BSR set to: 0
 13642                           ;Test.c: 435: }
 13643                           
 13644                           ; BSR set to: 0
 13645                           ;Test.c: 434: break;
 13646                           
 13647                           ;Test.c: 433: default:
 13648                           
 13649                           ;Test.c: 432: break;
 13650  00423C  D01D               	goto	l1223
 13651  00423E                     l7739:
 13652                           
 13653                           ; BSR set to: 0
 13654  00423E  C0FA  F080         	movff	_var,??_PortTests
 13655  004242  C0FB  F081         	movff	_var+1,??_PortTests+1
 13656                           
 13657                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13658                           ; Switch size 1, requested type "space"
 13659                           ; Number of cases is 1, Range of values is 0 to 0
 13660                           ; switch strategies available:
 13661                           ; Name         Instructions Cycles
 13662                           ; simple_byte            4     3 (average)
 13663                           ;	Chosen strategy is simple_byte
 13664  004246  0100               	movlb	0	; () banked
 13665  004248  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13666  00424A  0A00               	xorlw	0	; case 0
 13667  00424C  A4D8               	btfss	status,2,c
 13668  00424E  D014               	goto	l1223
 13669                           
 13670                           ; BSR set to: 0
 13671                           ; Switch size 1, requested type "space"
 13672                           ; Number of cases is 6, Range of values is 0 to 5
 13673                           ; switch strategies available:
 13674                           ; Name         Instructions Cycles
 13675                           ; simple_byte           19    10 (average)
 13676                           ;	Chosen strategy is simple_byte
 13677  004250  0100               	movlb	0	; () banked
 13678  004252  5180               	movf	??_PortTests& (0+255),w,b
 13679  004254  0A00               	xorlw	0	; case 0
 13680  004256  B4D8               	btfsc	status,2,c
 13681  004258  D7E6               	goto	l1215
 13682  00425A  0A01               	xorlw	1	; case 1
 13683  00425C  B4D8               	btfsc	status,2,c
 13684  00425E  D7E5               	goto	l1217
 13685  004260  0A03               	xorlw	3	; case 2
 13686  004262  B4D8               	btfsc	status,2,c
 13687  004264  D7E4               	goto	l1218
 13688  004266  0A01               	xorlw	1	; case 3
 13689  004268  B4D8               	btfsc	status,2,c
 13690  00426A  D7E3               	goto	l1219
 13691  00426C  0A07               	xorlw	7	; case 4
 13692  00426E  B4D8               	btfsc	status,2,c
 13693  004270  D7E2               	goto	l1220
 13694  004272  0A01               	xorlw	1	; case 5
 13695  004274  B4D8               	btfsc	status,2,c
 13696  004276  D7E1               	goto	l1221
 13697  004278                     l1223:
 13698  004278  B281               	btfsc	3969,1,c	;volatile
 13699  00427A  D7FE               	goto	l1223
 13700                           
 13701                           ;Test.c: 437: __nop();
 13702  00427C  F000               	nop	
 13703                           
 13704                           ;Test.c: 438: __nop();
 13705  00427E  F000               	nop	
 13706                           
 13707                           ;Test.c: 439: LATA = 0x00;
 13708  004280  0E00               	movlw	0
 13709  004282  6E89               	movwf	3977,c	;volatile
 13710                           
 13711                           ;Test.c: 440: LATE = 0x00;
 13712  004284  0E00               	movlw	0
 13713  004286  6E8D               	movwf	3981,c	;volatile
 13714                           
 13715                           ;Test.c: 441: LATD = 0x00; }
 13716  004288  0E00               	movlw	0
 13717  00428A  6E8C               	movwf	3980,c	;volatile
 13718  00428C  D7BE               	goto	l1211
 13719  00428E                     __end_of_PortTests:
 13720                           	opt stack 0
 13721                           tblptru	equ	0xFF8
 13722                           tblptrh	equ	0xFF7
 13723                           tblptrl	equ	0xFF6
 13724                           tablat	equ	0xFF5
 13725                           prodh	equ	0xFF4
 13726                           prodl	equ	0xFF3
 13727                           intcon	equ	0xFF2
 13728                           intcon2	equ	0xFF1
 13729                           intcon3	equ	0xFF0
 13730                           postinc0	equ	0xFEE
 13731                           wreg	equ	0xFE8
 13732                           postdec1	equ	0xFE5
 13733                           fsr1l	equ	0xFE1
 13734                           indf2	equ	0xFDF
 13735                           postinc2	equ	0xFDE
 13736                           postdec2	equ	0xFDD
 13737                           fsr2h	equ	0xFDA
 13738                           fsr2l	equ	0xFD9
 13739                           status	equ	0xFD8
 13740                           
 13741 ;; *************** function _PortTestA5 *****************
 13742 ;; Defined at:
 13743 ;;		line 444 in file "Test.c"
 13744 ;; Parameters:    Size  Location     Type
 13745 ;;		None
 13746 ;; Auto vars:     Size  Location     Type
 13747 ;;		None
 13748 ;; Return value:  Size  Location     Type
 13749 ;;                  1    wreg      void 
 13750 ;; Registers used:
 13751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13752 ;; Tracked objects:
 13753 ;;		On entry : 0/0
 13754 ;;		On exit  : 0/0
 13755 ;;		Unchanged: 0/0
 13756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13760 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13761 ;;Total ram usage:        1 bytes
 13762 ;; Hardware stack levels used:    1
 13763 ;; Hardware stack levels required when called:   10
 13764 ;; This function calls:
 13765 ;;		_lcdInst
 13766 ;;		_printf
 13767 ;; This function is called by:
 13768 ;;		_Test
 13769 ;; This function uses a non-reentrant model
 13770 ;;
 13771                           
 13772                           	psect	text45
 13773  004666                     __ptext45:
 13774                           	opt stack 0
 13775  004666                     _PortTestA5:
 13776                           	opt stack 19
 13777                           
 13778                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13779                           
 13780                           ;incstack = 0
 13781  004666  0E01               	movlw	1
 13782  004668  EC67  F027         	call	_lcdInst
 13783  00466C  0E68               	movlw	104
 13784  00466E  0100               	movlb	0	; () banked
 13785  004670  6FAB               	movwf	??_PortTestA5& (0+255),b
 13786  004672  0EE4               	movlw	228
 13787  004674                     u9307:
 13788  004674  2EE8               	decfsz	wreg,f,c
 13789  004676  D7FE               	bra	u9307
 13790  004678  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13791  00467A  D7FC               	bra	u9307
 13792  00467C  F000               	nop	
 13793  00467E  0E80               	movlw	128
 13794  004680  EC67  F027         	call	_lcdInst
 13795                           
 13796                           ;Test.c: 446: printf("D WILL RETURN    ");
 13797  004684  0E37               	movlw	low STR_111
 13798  004686  0100               	movlb	0	; () banked
 13799  004688  6F8E               	movwf	printf@f& (0+255),b
 13800  00468A  0EFB               	movlw	high STR_111
 13801  00468C  0100               	movlb	0	; () banked
 13802  00468E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13803  004690  ECB8  F008         	call	_printf	;wreg free
 13804                           
 13805                           ;Test.c: 447: lcdInst(0b11000000);;
 13806  004694  0EC0               	movlw	192
 13807  004696  EC67  F027         	call	_lcdInst
 13808                           
 13809                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 13810  00469A  0E49               	movlw	low STR_112
 13811  00469C  0100               	movlb	0	; () banked
 13812  00469E  6F8E               	movwf	printf@f& (0+255),b
 13813  0046A0  0EFB               	movlw	high STR_112
 13814  0046A2  0100               	movlb	0	; () banked
 13815  0046A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13816  0046A6  ECB8  F008         	call	_printf	;wreg free
 13817  0046AA                     l1232:
 13818  0046AA  A281               	btfss	3969,1,c	;volatile
 13819  0046AC  D7FE               	goto	l1232
 13820                           
 13821                           ;Test.c: 453: }
 13822                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 13823  0046AE  3881               	swapf	3969,w,c	;volatile
 13824  0046B0  0B0F               	andlw	15
 13825  0046B2  0A0F               	xorlw	15
 13826  0046B4  B4D8               	btfsc	status,2,c
 13827  0046B6  0012               	return	
 13828                           
 13829                           ;Test.c: 457: else{
 13830                           ;Test.c: 458: LATAbits.LATA5 = 1;
 13831                           
 13832                           ;Test.c: 456: }
 13833                           
 13834                           ;Test.c: 455: break;
 13835  0046B8  8A89               	bsf	3977,5,c	;volatile
 13836  0046BA                     l1238:
 13837  0046BA  B281               	btfsc	3969,1,c	;volatile
 13838  0046BC  D7FE               	goto	l1238
 13839                           
 13840                           ;Test.c: 461: }
 13841                           ;Test.c: 462: LATAbits.LATA5 = 0;
 13842  0046BE  9A89               	bcf	3977,5,c	;volatile
 13843  0046C0  D7F4               	goto	l1232
 13844  0046C2                     __end_of_PortTestA5:
 13845                           	opt stack 0
 13846                           tblptru	equ	0xFF8
 13847                           tblptrh	equ	0xFF7
 13848                           tblptrl	equ	0xFF6
 13849                           tablat	equ	0xFF5
 13850                           prodh	equ	0xFF4
 13851                           prodl	equ	0xFF3
 13852                           intcon	equ	0xFF2
 13853                           intcon2	equ	0xFF1
 13854                           intcon3	equ	0xFF0
 13855                           postinc0	equ	0xFEE
 13856                           wreg	equ	0xFE8
 13857                           postdec1	equ	0xFE5
 13858                           fsr1l	equ	0xFE1
 13859                           indf2	equ	0xFDF
 13860                           postinc2	equ	0xFDE
 13861                           postdec2	equ	0xFDD
 13862                           fsr2h	equ	0xFDA
 13863                           fsr2l	equ	0xFD9
 13864                           status	equ	0xFD8
 13865                           
 13866 ;; *************** function _EEPROMTest *****************
 13867 ;; Defined at:
 13868 ;;		line 577 in file "Test.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;		None
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;		None
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  1    wreg      void 
 13875 ;; Registers used:
 13876 ;;		None
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13886 ;;Total ram usage:        0 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; Hardware stack levels required when called:    7
 13889 ;; This function calls:
 13890 ;;		Nothing
 13891 ;; This function is called by:
 13892 ;;		_Test
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           	psect	text46
 13897  004F32                     __ptext46:
 13898                           	opt stack 0
 13899  004F32                     _EEPROMTest:
 13900                           	opt stack 22
 13901                           
 13902                           ;incstack = 0
 13903  004F32  0012               	return		;funcret
 13904  004F34                     __end_of_EEPROMTest:
 13905                           	opt stack 0
 13906                           tblptru	equ	0xFF8
 13907                           tblptrh	equ	0xFF7
 13908                           tblptrl	equ	0xFF6
 13909                           tablat	equ	0xFF5
 13910                           prodh	equ	0xFF4
 13911                           prodl	equ	0xFF3
 13912                           intcon	equ	0xFF2
 13913                           intcon2	equ	0xFF1
 13914                           intcon3	equ	0xFF0
 13915                           postinc0	equ	0xFEE
 13916                           wreg	equ	0xFE8
 13917                           postdec1	equ	0xFE5
 13918                           fsr1l	equ	0xFE1
 13919                           indf2	equ	0xFDF
 13920                           postinc2	equ	0xFDE
 13921                           postdec2	equ	0xFDD
 13922                           fsr2h	equ	0xFDA
 13923                           fsr2l	equ	0xFD9
 13924                           status	equ	0xFD8
 13925                           
 13926 ;; *************** function _BothServos *****************
 13927 ;; Defined at:
 13928 ;;		line 352 in file "Test.c"
 13929 ;; Parameters:    Size  Location     Type
 13930 ;;		None
 13931 ;; Auto vars:     Size  Location     Type
 13932 ;;		None
 13933 ;; Return value:  Size  Location     Type
 13934 ;;                  1    wreg      void 
 13935 ;; Registers used:
 13936 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13937 ;; Tracked objects:
 13938 ;;		On entry : 0/0
 13939 ;;		On exit  : 0/0
 13940 ;;		Unchanged: 0/0
 13941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13945 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;Total ram usage:        2 bytes
 13947 ;; Hardware stack levels used:    1
 13948 ;; Hardware stack levels required when called:   10
 13949 ;; This function calls:
 13950 ;;		_initServos
 13951 ;;		_lcdInst
 13952 ;;		_printf
 13953 ;;		_updateServoPosition
 13954 ;; This function is called by:
 13955 ;;		_Test
 13956 ;; This function uses a non-reentrant model
 13957 ;;
 13958                           
 13959                           	psect	text47
 13960  0015A8                     __ptext47:
 13961                           	opt stack 0
 13962  0015A8                     _BothServos:
 13963                           	opt stack 19
 13964                           
 13965                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13966                           
 13967                           ;incstack = 0
 13968  0015A8  0E01               	movlw	1
 13969  0015AA  EC67  F027         	call	_lcdInst
 13970  0015AE  0E68               	movlw	104
 13971  0015B0  0100               	movlb	0	; () banked
 13972  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13973  0015B4  0EE4               	movlw	228
 13974  0015B6                     u9317:
 13975  0015B6  2EE8               	decfsz	wreg,f,c
 13976  0015B8  D7FE               	bra	u9317
 13977  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13978  0015BC  D7FC               	bra	u9317
 13979  0015BE  F000               	nop	
 13980  0015C0  0E80               	movlw	128
 13981  0015C2  EC67  F027         	call	_lcdInst
 13982                           
 13983                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 13984  0015C6  0EB4               	movlw	low STR_110
 13985  0015C8  0100               	movlb	0	; () banked
 13986  0015CA  6F8E               	movwf	printf@f& (0+255),b
 13987  0015CC  0EFC               	movlw	high STR_110
 13988  0015CE  0100               	movlb	0	; () banked
 13989  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13990  0015D2  ECB8  F008         	call	_printf	;wreg free
 13991                           
 13992                           ;Test.c: 355: TMR1ON = 1;
 13993  0015D6  80CD               	bsf	4045,0,c	;volatile
 13994                           
 13995                           ;Test.c: 356: TMR3ON = 1;
 13996  0015D8  80B1               	bsf	4017,0,c	;volatile
 13997                           
 13998                           ;Test.c: 357: machine_state = Sorting_state;
 13999  0015DA  0E01               	movlw	1
 14000  0015DC  0100               	movlb	0	; () banked
 14001  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 14002                           
 14003                           ; BSR set to: 0
 14004                           ;Test.c: 358: was_low_1 = 0;
 14005  0015E0  0E00               	movlw	0
 14006  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 14007  0015E4  0E00               	movlw	0
 14008  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;Test.c: 359: was_low_3 = 0;
 14012  0015E8  0E00               	movlw	0
 14013  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 14014  0015EC  0E00               	movlw	0
 14015  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;Test.c: 365: initServos();
 14019  0015F0  EC61  F023         	call	_initServos	;wreg free
 14020                           
 14021                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14022  0015F4  0E3D               	movlw	61
 14023  0015F6  0100               	movlb	0	; () banked
 14024  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14025  0015FA  0EE1               	movlw	225
 14026  0015FC  0100               	movlb	0	; () banked
 14027  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 14028  001600  0E3F               	movlw	63
 14029  001602                     u9327:
 14030  001602  2EE8               	decfsz	wreg,f,c
 14031  001604  D7FE               	bra	u9327
 14032  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14033  001608  D7FC               	bra	u9327
 14034  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14035  00160C  D7FA               	bra	u9327
 14036  00160E  D000               	nop2	
 14037                           
 14038                           ;Test.c: 368: updateServoPosition(500, 1);
 14039  001610  0E01               	movlw	1
 14040  001612  0100               	movlb	0	; () banked
 14041  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14042  001616  0EF4               	movlw	244
 14043  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14044  00161A  0E00               	movlw	0
 14045  00161C  0100               	movlb	0	; () banked
 14046  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14047  001620  0E01               	movlw	1
 14048  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14049  001624  ECC3  F021         	call	_updateServoPosition	;wreg free
 14050                           
 14051                           ;Test.c: 369: updateServoPosition(1050, 3);
 14052  001628  0E04               	movlw	4
 14053  00162A  0100               	movlb	0	; () banked
 14054  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14055  00162E  0E1A               	movlw	26
 14056  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14057  001632  0E00               	movlw	0
 14058  001634  0100               	movlb	0	; () banked
 14059  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14060  001638  0E03               	movlw	3
 14061  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14062  00163C  ECC3  F021         	call	_updateServoPosition	;wreg free
 14063                           
 14064                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14065  001640  0E1F               	movlw	31
 14066  001642  0100               	movlb	0	; () banked
 14067  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14068  001646  0E71               	movlw	113
 14069  001648  0100               	movlb	0	; () banked
 14070  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 14071  00164C  0E1E               	movlw	30
 14072  00164E                     u9337:
 14073  00164E  2EE8               	decfsz	wreg,f,c
 14074  001650  D7FE               	bra	u9337
 14075  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14076  001654  D7FC               	bra	u9337
 14077  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14078  001658  D7FA               	bra	u9337
 14079  00165A  F000               	nop	
 14080                           
 14081                           ;Test.c: 371: updateServoPosition(1260, 3);
 14082  00165C  0E04               	movlw	4
 14083  00165E  0100               	movlb	0	; () banked
 14084  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14085  001662  0EEC               	movlw	236
 14086  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14087  001666  0E00               	movlw	0
 14088  001668  0100               	movlb	0	; () banked
 14089  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14090  00166C  0E03               	movlw	3
 14091  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14092  001670  ECC3  F021         	call	_updateServoPosition	;wreg free
 14093                           
 14094                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14095  001674  0E66               	movlw	102
 14096  001676  0100               	movlb	0	; () banked
 14097  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14098  00167A  0E76               	movlw	118
 14099  00167C  0100               	movlb	0	; () banked
 14100  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 14101  001680  0EC1               	movlw	193
 14102  001682                     u9347:
 14103  001682  2EE8               	decfsz	wreg,f,c
 14104  001684  D7FE               	bra	u9347
 14105  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14106  001688  D7FC               	bra	u9347
 14107  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14108  00168C  D7FA               	bra	u9347
 14109                           
 14110                           ;Test.c: 373: updateServoPosition(1050, 3);
 14111  00168E  0E04               	movlw	4
 14112  001690  0100               	movlb	0	; () banked
 14113  001692  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14114  001694  0E1A               	movlw	26
 14115  001696  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14116  001698  0E00               	movlw	0
 14117  00169A  0100               	movlb	0	; () banked
 14118  00169C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14119  00169E  0E03               	movlw	3
 14120  0016A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14121  0016A2  ECC3  F021         	call	_updateServoPosition	;wreg free
 14122                           
 14123                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14124  0016A6  0E1F               	movlw	31
 14125  0016A8  0100               	movlb	0	; () banked
 14126  0016AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14127  0016AC  0E71               	movlw	113
 14128  0016AE  0100               	movlb	0	; () banked
 14129  0016B0  6FAB               	movwf	??_BothServos& (0+255),b
 14130  0016B2  0E1E               	movlw	30
 14131  0016B4                     u9357:
 14132  0016B4  2EE8               	decfsz	wreg,f,c
 14133  0016B6  D7FE               	bra	u9357
 14134  0016B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14135  0016BA  D7FC               	bra	u9357
 14136  0016BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14137  0016BE  D7FA               	bra	u9357
 14138  0016C0  F000               	nop	
 14139                           
 14140                           ;Test.c: 376: updateServoPosition(850, 1);
 14141  0016C2  0E03               	movlw	3
 14142  0016C4  0100               	movlb	0	; () banked
 14143  0016C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14144  0016C8  0E52               	movlw	82
 14145  0016CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14146  0016CC  0E00               	movlw	0
 14147  0016CE  0100               	movlb	0	; () banked
 14148  0016D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14149  0016D2  0E01               	movlw	1
 14150  0016D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14151  0016D6  ECC3  F021         	call	_updateServoPosition	;wreg free
 14152                           
 14153                           ;Test.c: 377: updateServoPosition(1050, 3);
 14154  0016DA  0E04               	movlw	4
 14155  0016DC  0100               	movlb	0	; () banked
 14156  0016DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14157  0016E0  0E1A               	movlw	26
 14158  0016E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14159  0016E4  0E00               	movlw	0
 14160  0016E6  0100               	movlb	0	; () banked
 14161  0016E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14162  0016EA  0E03               	movlw	3
 14163  0016EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14164  0016EE  ECC3  F021         	call	_updateServoPosition	;wreg free
 14165                           
 14166                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14167  0016F2  0E1F               	movlw	31
 14168  0016F4  0100               	movlb	0	; () banked
 14169  0016F6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14170  0016F8  0E71               	movlw	113
 14171  0016FA  0100               	movlb	0	; () banked
 14172  0016FC  6FAB               	movwf	??_BothServos& (0+255),b
 14173  0016FE  0E1E               	movlw	30
 14174  001700                     u9367:
 14175  001700  2EE8               	decfsz	wreg,f,c
 14176  001702  D7FE               	bra	u9367
 14177  001704  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14178  001706  D7FC               	bra	u9367
 14179  001708  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14180  00170A  D7FA               	bra	u9367
 14181  00170C  F000               	nop	
 14182                           
 14183                           ;Test.c: 379: updateServoPosition(1260, 3);
 14184  00170E  0E04               	movlw	4
 14185  001710  0100               	movlb	0	; () banked
 14186  001712  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14187  001714  0EEC               	movlw	236
 14188  001716  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14189  001718  0E00               	movlw	0
 14190  00171A  0100               	movlb	0	; () banked
 14191  00171C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14192  00171E  0E03               	movlw	3
 14193  001720  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14194  001722  ECC3  F021         	call	_updateServoPosition	;wreg free
 14195                           
 14196                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14197  001726  0E66               	movlw	102
 14198  001728  0100               	movlb	0	; () banked
 14199  00172A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14200  00172C  0E76               	movlw	118
 14201  00172E  0100               	movlb	0	; () banked
 14202  001730  6FAB               	movwf	??_BothServos& (0+255),b
 14203  001732  0EC1               	movlw	193
 14204  001734                     u9377:
 14205  001734  2EE8               	decfsz	wreg,f,c
 14206  001736  D7FE               	bra	u9377
 14207  001738  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14208  00173A  D7FC               	bra	u9377
 14209  00173C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14210  00173E  D7FA               	bra	u9377
 14211                           
 14212                           ;Test.c: 381: updateServoPosition(1050, 3);
 14213  001740  0E04               	movlw	4
 14214  001742  0100               	movlb	0	; () banked
 14215  001744  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14216  001746  0E1A               	movlw	26
 14217  001748  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14218  00174A  0E00               	movlw	0
 14219  00174C  0100               	movlb	0	; () banked
 14220  00174E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14221  001750  0E03               	movlw	3
 14222  001752  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14223  001754  ECC3  F021         	call	_updateServoPosition	;wreg free
 14224                           
 14225                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14226  001758  0E1F               	movlw	31
 14227  00175A  0100               	movlb	0	; () banked
 14228  00175C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14229  00175E  0E71               	movlw	113
 14230  001760  0100               	movlb	0	; () banked
 14231  001762  6FAB               	movwf	??_BothServos& (0+255),b
 14232  001764  0E1E               	movlw	30
 14233  001766                     u9387:
 14234  001766  2EE8               	decfsz	wreg,f,c
 14235  001768  D7FE               	bra	u9387
 14236  00176A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14237  00176C  D7FC               	bra	u9387
 14238  00176E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14239  001770  D7FA               	bra	u9387
 14240  001772  F000               	nop	
 14241                           
 14242                           ;Test.c: 384: updateServoPosition(1200, 1);
 14243  001774  0E04               	movlw	4
 14244  001776  0100               	movlb	0	; () banked
 14245  001778  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14246  00177A  0EB0               	movlw	176
 14247  00177C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14248  00177E  0E00               	movlw	0
 14249  001780  0100               	movlb	0	; () banked
 14250  001782  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14251  001784  0E01               	movlw	1
 14252  001786  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14253  001788  ECC3  F021         	call	_updateServoPosition	;wreg free
 14254                           
 14255                           ;Test.c: 385: updateServoPosition(1050, 3);
 14256  00178C  0E04               	movlw	4
 14257  00178E  0100               	movlb	0	; () banked
 14258  001790  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14259  001792  0E1A               	movlw	26
 14260  001794  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14261  001796  0E00               	movlw	0
 14262  001798  0100               	movlb	0	; () banked
 14263  00179A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14264  00179C  0E03               	movlw	3
 14265  00179E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14266  0017A0  ECC3  F021         	call	_updateServoPosition	;wreg free
 14267                           
 14268                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14269  0017A4  0E3D               	movlw	61
 14270  0017A6  0100               	movlb	0	; () banked
 14271  0017A8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14272  0017AA  0EE1               	movlw	225
 14273  0017AC  0100               	movlb	0	; () banked
 14274  0017AE  6FAB               	movwf	??_BothServos& (0+255),b
 14275  0017B0  0E3F               	movlw	63
 14276  0017B2                     u9397:
 14277  0017B2  2EE8               	decfsz	wreg,f,c
 14278  0017B4  D7FE               	bra	u9397
 14279  0017B6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14280  0017B8  D7FC               	bra	u9397
 14281  0017BA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14282  0017BC  D7FA               	bra	u9397
 14283  0017BE  D000               	nop2	
 14284                           
 14285                           ;Test.c: 388: updateServoPosition(1670, 1);
 14286  0017C0  0E06               	movlw	6
 14287  0017C2  0100               	movlb	0	; () banked
 14288  0017C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14289  0017C6  0E86               	movlw	134
 14290  0017C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14291  0017CA  0E00               	movlw	0
 14292  0017CC  0100               	movlb	0	; () banked
 14293  0017CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14294  0017D0  0E01               	movlw	1
 14295  0017D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14296  0017D4  ECC3  F021         	call	_updateServoPosition	;wreg free
 14297                           
 14298                           ;Test.c: 389: updateServoPosition(1050, 3);
 14299  0017D8  0E04               	movlw	4
 14300  0017DA  0100               	movlb	0	; () banked
 14301  0017DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14302  0017DE  0E1A               	movlw	26
 14303  0017E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14304  0017E2  0E00               	movlw	0
 14305  0017E4  0100               	movlb	0	; () banked
 14306  0017E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14307  0017E8  0E03               	movlw	3
 14308  0017EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14309  0017EC  ECC3  F021         	call	_updateServoPosition	;wreg free
 14310                           
 14311                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14312  0017F0  0E1F               	movlw	31
 14313  0017F2  0100               	movlb	0	; () banked
 14314  0017F4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14315  0017F6  0E71               	movlw	113
 14316  0017F8  0100               	movlb	0	; () banked
 14317  0017FA  6FAB               	movwf	??_BothServos& (0+255),b
 14318  0017FC  0E1E               	movlw	30
 14319  0017FE                     u9407:
 14320  0017FE  2EE8               	decfsz	wreg,f,c
 14321  001800  D7FE               	bra	u9407
 14322  001802  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14323  001804  D7FC               	bra	u9407
 14324  001806  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14325  001808  D7FA               	bra	u9407
 14326  00180A  F000               	nop	
 14327                           
 14328                           ;Test.c: 391: updateServoPosition(1400, 3);
 14329  00180C  0E05               	movlw	5
 14330  00180E  0100               	movlb	0	; () banked
 14331  001810  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14332  001812  0E78               	movlw	120
 14333  001814  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14334  001816  0E00               	movlw	0
 14335  001818  0100               	movlb	0	; () banked
 14336  00181A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14337  00181C  0E03               	movlw	3
 14338  00181E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14339  001820  ECC3  F021         	call	_updateServoPosition	;wreg free
 14340                           
 14341                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14342  001824  0E66               	movlw	102
 14343  001826  0100               	movlb	0	; () banked
 14344  001828  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14345  00182A  0E76               	movlw	118
 14346  00182C  0100               	movlb	0	; () banked
 14347  00182E  6FAB               	movwf	??_BothServos& (0+255),b
 14348  001830  0EC1               	movlw	193
 14349  001832                     u9417:
 14350  001832  2EE8               	decfsz	wreg,f,c
 14351  001834  D7FE               	bra	u9417
 14352  001836  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14353  001838  D7FC               	bra	u9417
 14354  00183A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14355  00183C  D7FA               	bra	u9417
 14356                           
 14357                           ;Test.c: 393: updateServoPosition(1050, 3);
 14358  00183E  0E04               	movlw	4
 14359  001840  0100               	movlb	0	; () banked
 14360  001842  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14361  001844  0E1A               	movlw	26
 14362  001846  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14363  001848  0E00               	movlw	0
 14364  00184A  0100               	movlb	0	; () banked
 14365  00184C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14366  00184E  0E03               	movlw	3
 14367  001850  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14368  001852  ECC3  F021         	call	_updateServoPosition	;wreg free
 14369                           
 14370                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14371  001856  0E1F               	movlw	31
 14372  001858  0100               	movlb	0	; () banked
 14373  00185A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14374  00185C  0E71               	movlw	113
 14375  00185E  0100               	movlb	0	; () banked
 14376  001860  6FAB               	movwf	??_BothServos& (0+255),b
 14377  001862  0E1E               	movlw	30
 14378  001864                     u9427:
 14379  001864  2EE8               	decfsz	wreg,f,c
 14380  001866  D7FE               	bra	u9427
 14381  001868  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14382  00186A  D7FC               	bra	u9427
 14383  00186C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14384  00186E  D7FA               	bra	u9427
 14385  001870  F000               	nop	
 14386                           
 14387                           ;Test.c: 396: updateServoPosition(2400, 1);
 14388  001872  0E09               	movlw	9
 14389  001874  0100               	movlb	0	; () banked
 14390  001876  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14391  001878  0E60               	movlw	96
 14392  00187A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14393  00187C  0E00               	movlw	0
 14394  00187E  0100               	movlb	0	; () banked
 14395  001880  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14396  001882  0E01               	movlw	1
 14397  001884  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14398  001886  ECC3  F021         	call	_updateServoPosition	;wreg free
 14399                           
 14400                           ;Test.c: 397: updateServoPosition(1050, 3);
 14401  00188A  0E04               	movlw	4
 14402  00188C  0100               	movlb	0	; () banked
 14403  00188E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14404  001890  0E1A               	movlw	26
 14405  001892  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14406  001894  0E00               	movlw	0
 14407  001896  0100               	movlb	0	; () banked
 14408  001898  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14409  00189A  0E03               	movlw	3
 14410  00189C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14411  00189E  ECC3  F021         	call	_updateServoPosition	;wreg free
 14412                           
 14413                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14414  0018A2  0E1F               	movlw	31
 14415  0018A4  0100               	movlb	0	; () banked
 14416  0018A6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14417  0018A8  0E71               	movlw	113
 14418  0018AA  0100               	movlb	0	; () banked
 14419  0018AC  6FAB               	movwf	??_BothServos& (0+255),b
 14420  0018AE  0E1E               	movlw	30
 14421  0018B0                     u9437:
 14422  0018B0  2EE8               	decfsz	wreg,f,c
 14423  0018B2  D7FE               	bra	u9437
 14424  0018B4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14425  0018B6  D7FC               	bra	u9437
 14426  0018B8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14427  0018BA  D7FA               	bra	u9437
 14428  0018BC  F000               	nop	
 14429                           
 14430                           ;Test.c: 399: updateServoPosition(1400, 3);
 14431  0018BE  0E05               	movlw	5
 14432  0018C0  0100               	movlb	0	; () banked
 14433  0018C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14434  0018C4  0E78               	movlw	120
 14435  0018C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14436  0018C8  0E00               	movlw	0
 14437  0018CA  0100               	movlb	0	; () banked
 14438  0018CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14439  0018CE  0E03               	movlw	3
 14440  0018D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14441  0018D2  ECC3  F021         	call	_updateServoPosition	;wreg free
 14442                           
 14443                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14444  0018D6  0E66               	movlw	102
 14445  0018D8  0100               	movlb	0	; () banked
 14446  0018DA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14447  0018DC  0E76               	movlw	118
 14448  0018DE  0100               	movlb	0	; () banked
 14449  0018E0  6FAB               	movwf	??_BothServos& (0+255),b
 14450  0018E2  0EC1               	movlw	193
 14451  0018E4                     u9447:
 14452  0018E4  2EE8               	decfsz	wreg,f,c
 14453  0018E6  D7FE               	bra	u9447
 14454  0018E8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14455  0018EA  D7FC               	bra	u9447
 14456  0018EC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14457  0018EE  D7FA               	bra	u9447
 14458                           
 14459                           ;Test.c: 401: updateServoPosition(1050, 3);
 14460  0018F0  0E04               	movlw	4
 14461  0018F2  0100               	movlb	0	; () banked
 14462  0018F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14463  0018F6  0E1A               	movlw	26
 14464  0018F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14465  0018FA  0E00               	movlw	0
 14466  0018FC  0100               	movlb	0	; () banked
 14467  0018FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14468  001900  0E03               	movlw	3
 14469  001902  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14470  001904  ECC3  F021         	call	_updateServoPosition	;wreg free
 14471                           
 14472                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14473  001908  0E1F               	movlw	31
 14474  00190A  0100               	movlb	0	; () banked
 14475  00190C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14476  00190E  0E71               	movlw	113
 14477  001910  0100               	movlb	0	; () banked
 14478  001912  6FAB               	movwf	??_BothServos& (0+255),b
 14479  001914  0E1E               	movlw	30
 14480  001916                     u9457:
 14481  001916  2EE8               	decfsz	wreg,f,c
 14482  001918  D7FE               	bra	u9457
 14483  00191A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14484  00191C  D7FC               	bra	u9457
 14485  00191E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14486  001920  D7FA               	bra	u9457
 14487  001922  F000               	nop	
 14488                           
 14489                           ;Test.c: 404: TMR1ON = 0;
 14490  001924  90CD               	bcf	4045,0,c	;volatile
 14491                           
 14492                           ;Test.c: 405: TMR3ON = 0;
 14493  001926  90B1               	bcf	4017,0,c	;volatile
 14494                           
 14495                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14496  001928  9EF2               	bcf	intcon,7,c	;volatile
 14497  00192A  0012               	return		;funcret
 14498  00192C                     __end_of_BothServos:
 14499                           	opt stack 0
 14500                           tblptru	equ	0xFF8
 14501                           tblptrh	equ	0xFF7
 14502                           tblptrl	equ	0xFF6
 14503                           tablat	equ	0xFF5
 14504                           prodh	equ	0xFF4
 14505                           prodl	equ	0xFF3
 14506                           intcon	equ	0xFF2
 14507                           intcon2	equ	0xFF1
 14508                           intcon3	equ	0xFF0
 14509                           postinc0	equ	0xFEE
 14510                           wreg	equ	0xFE8
 14511                           postdec1	equ	0xFE5
 14512                           fsr1l	equ	0xFE1
 14513                           indf2	equ	0xFDF
 14514                           postinc2	equ	0xFDE
 14515                           postdec2	equ	0xFDD
 14516                           fsr2h	equ	0xFDA
 14517                           fsr2l	equ	0xFD9
 14518                           status	equ	0xFD8
 14519                           
 14520 ;; *************** function _initServos *****************
 14521 ;; Defined at:
 14522 ;;		line 366 in file "sort.c"
 14523 ;; Parameters:    Size  Location     Type
 14524 ;;		None
 14525 ;; Auto vars:     Size  Location     Type
 14526 ;;		None
 14527 ;; Return value:  Size  Location     Type
 14528 ;;                  1    wreg      void 
 14529 ;; Registers used:
 14530 ;;		wreg, status,2, status,0, cstack
 14531 ;; Tracked objects:
 14532 ;;		On entry : 0/0
 14533 ;;		On exit  : 0/0
 14534 ;;		Unchanged: 0/0
 14535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14539 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14540 ;;Total ram usage:        1 bytes
 14541 ;; Hardware stack levels used:    1
 14542 ;; Hardware stack levels required when called:    8
 14543 ;; This function calls:
 14544 ;;		_updateServoPosition
 14545 ;; This function is called by:
 14546 ;;		_Loading
 14547 ;;		_BothServos
 14548 ;; This function uses a non-reentrant model
 14549 ;;
 14550                           
 14551                           	psect	text48
 14552  0046C2                     __ptext48:
 14553                           	opt stack 0
 14554  0046C2                     _initServos:
 14555                           	opt stack 20
 14556                           
 14557                           ;sort.c: 367: updateServoPosition(1200, 1);
 14558                           
 14559                           ;incstack = 0
 14560  0046C2  0E04               	movlw	4
 14561  0046C4  0100               	movlb	0	; () banked
 14562  0046C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14563  0046C8  0EB0               	movlw	176
 14564  0046CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14565  0046CC  0E00               	movlw	0
 14566  0046CE  0100               	movlb	0	; () banked
 14567  0046D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14568  0046D2  0E01               	movlw	1
 14569  0046D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14570  0046D6  ECC3  F021         	call	_updateServoPosition	;wreg free
 14571                           
 14572                           ;sort.c: 368: updateServoPosition(1050, 3);
 14573  0046DA  0E04               	movlw	4
 14574  0046DC  0100               	movlb	0	; () banked
 14575  0046DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14576  0046E0  0E1A               	movlw	26
 14577  0046E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14578  0046E4  0E00               	movlw	0
 14579  0046E6  0100               	movlb	0	; () banked
 14580  0046E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14581  0046EA  0E03               	movlw	3
 14582  0046EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14583  0046EE  ECC3  F021         	call	_updateServoPosition	;wreg free
 14584                           
 14585                           ;sort.c: 369: TMR1ON = 1;
 14586  0046F2  80CD               	bsf	4045,0,c	;volatile
 14587                           
 14588                           ;sort.c: 370: was_low_1 = 0;
 14589  0046F4  0E00               	movlw	0
 14590  0046F6  6E7A               	movwf	_was_low_1+1,c	;volatile
 14591  0046F8  0E00               	movlw	0
 14592  0046FA  6E79               	movwf	_was_low_1,c	;volatile
 14593                           
 14594                           ;sort.c: 371: _delay((unsigned long)((5)*(32000000/4000.0)));
 14595  0046FC  0E34               	movlw	52
 14596  0046FE  0100               	movlb	0	; () banked
 14597  004700  6F88               	movwf	??_initServos& (0+255),b
 14598  004702  0EF1               	movlw	241
 14599  004704                     u9467:
 14600  004704  2EE8               	decfsz	wreg,f,c
 14601  004706  D7FE               	bra	u9467
 14602  004708  2F88               	decfsz	??_initServos& (0+255),f,b
 14603  00470A  D7FC               	bra	u9467
 14604  00470C  D000               	nop2	
 14605                           
 14606                           ;sort.c: 372: TMR3ON = 1;
 14607  00470E  80B1               	bsf	4017,0,c	;volatile
 14608                           
 14609                           ;sort.c: 373: was_low_3 = 0;
 14610  004710  0E00               	movlw	0
 14611  004712  6E7C               	movwf	_was_low_3+1,c	;volatile
 14612  004714  0E00               	movlw	0
 14613  004716  6E7B               	movwf	_was_low_3,c	;volatile
 14614                           
 14615                           ;sort.c: 375: LATCbits.LATC0 = 1;
 14616  004718  808B               	bsf	3979,0,c	;volatile
 14617  00471A  0012               	return		;funcret
 14618  00471C                     __end_of_initServos:
 14619                           	opt stack 0
 14620                           tblptru	equ	0xFF8
 14621                           tblptrh	equ	0xFF7
 14622                           tblptrl	equ	0xFF6
 14623                           tablat	equ	0xFF5
 14624                           prodh	equ	0xFF4
 14625                           prodl	equ	0xFF3
 14626                           intcon	equ	0xFF2
 14627                           intcon2	equ	0xFF1
 14628                           intcon3	equ	0xFF0
 14629                           postinc0	equ	0xFEE
 14630                           wreg	equ	0xFE8
 14631                           postdec1	equ	0xFE5
 14632                           fsr1l	equ	0xFE1
 14633                           indf2	equ	0xFDF
 14634                           postinc2	equ	0xFDE
 14635                           postdec2	equ	0xFDD
 14636                           fsr2h	equ	0xFDA
 14637                           fsr2l	equ	0xFD9
 14638                           status	equ	0xFD8
 14639                           
 14640 ;; *************** function _updateServoPosition *****************
 14641 ;; Defined at:
 14642 ;;		line 434 in file "sort.c"
 14643 ;; Parameters:    Size  Location     Type
 14644 ;;  time_us         2    0[BANK0 ] int 
 14645 ;;  timer           2    2[BANK0 ] int 
 14646 ;; Auto vars:     Size  Location     Type
 14647 ;;  my_time         2    6[BANK0 ] unsigned int 
 14648 ;; Return value:  Size  Location     Type
 14649 ;;                  1    wreg      void 
 14650 ;; Registers used:
 14651 ;;		wreg, status,2, status,0
 14652 ;; Tracked objects:
 14653 ;;		On entry : 0/0
 14654 ;;		On exit  : 0/0
 14655 ;;		Unchanged: 0/0
 14656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14657 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14658 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14660 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14661 ;;Total ram usage:        8 bytes
 14662 ;; Hardware stack levels used:    1
 14663 ;; Hardware stack levels required when called:    7
 14664 ;; This function calls:
 14665 ;;		Nothing
 14666 ;; This function is called by:
 14667 ;;		_Distribution
 14668 ;;		_initServos
 14669 ;;		_actuatorTest
 14670 ;;		_BothServos
 14671 ;; This function uses a non-reentrant model
 14672 ;;
 14673                           
 14674                           	psect	text49
 14675  004386                     __ptext49:
 14676                           	opt stack 0
 14677  004386                     _updateServoPosition:
 14678                           	opt stack 20
 14679                           
 14680                           ;sort.c: 435: unsigned int my_time = 65535 - time_us;
 14681                           
 14682                           ;incstack = 0
 14683  004386  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14684  00438A  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14685  00438E  0100               	movlb	0	; () banked
 14686  004390  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14687  004392  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14688  004394  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14689  004396  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14690  004398  0EFF               	movlw	255
 14691  00439A  0100               	movlb	0	; () banked
 14692  00439C  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14693  00439E  0100               	movlb	0	; () banked
 14694  0043A0  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14695  0043A2  0EFF               	movlw	255
 14696  0043A4  0100               	movlb	0	; () banked
 14697  0043A6  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14698  0043A8  0100               	movlb	0	; () banked
 14699  0043AA  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14700                           
 14701                           ;sort.c: 436: switch(timer){
 14702  0043AC  D015               	goto	l5997
 14703  0043AE                     l5995:
 14704                           
 14705                           ; BSR set to: 0
 14706                           ;sort.c: 438: servoTimes[0] = my_time >> 8;
 14707  0043AE  0100               	movlb	0	; () banked
 14708  0043B0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14709  0043B2  0101               	movlb	1	; () banked
 14710  0043B4  6F1C               	movwf	_servoTimes& (0+255),b
 14711  0043B6  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14712                           
 14713                           ;sort.c: 439: servoTimes[1] = my_time & 0xFF;
 14714  0043B8  0100               	movlb	0	; () banked
 14715  0043BA  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14716  0043BC  0101               	movlb	1	; () banked
 14717  0043BE  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14718  0043C0  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14719  0043C2                     l835:
 14720                           
 14721                           ;sort.c: 441: servoTimes[2] = my_time >> 8;
 14722  0043C2  0100               	movlb	0	; () banked
 14723  0043C4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14724  0043C6  0101               	movlb	1	; () banked
 14725  0043C8  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14726  0043CA  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14727                           
 14728                           ;sort.c: 442: servoTimes[3] = my_time & 0xFF;
 14729  0043CC  0100               	movlb	0	; () banked
 14730  0043CE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14731  0043D0  0101               	movlb	1	; () banked
 14732  0043D2  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14733  0043D4  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14734                           
 14735                           ;sort.c: 443: }
 14736  0043D6  0012               	return	
 14737  0043D8                     l5997:
 14738  0043D8  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14739  0043DC  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14740                           
 14741                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14742                           ; Switch size 1, requested type "space"
 14743                           ; Number of cases is 1, Range of values is 0 to 0
 14744                           ; switch strategies available:
 14745                           ; Name         Instructions Cycles
 14746                           ; simple_byte            4     3 (average)
 14747                           ;	Chosen strategy is simple_byte
 14748  0043E0  0100               	movlb	0	; () banked
 14749  0043E2  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14750  0043E4  0A00               	xorlw	0	; case 0
 14751  0043E6  A4D8               	btfss	status,2,c
 14752  0043E8  0012               	return	
 14753                           
 14754                           ; BSR set to: 0
 14755                           ; Switch size 1, requested type "space"
 14756                           ; Number of cases is 2, Range of values is 1 to 3
 14757                           ; switch strategies available:
 14758                           ; Name         Instructions Cycles
 14759                           ; simple_byte            7     4 (average)
 14760                           ;	Chosen strategy is simple_byte
 14761  0043EA  0100               	movlb	0	; () banked
 14762  0043EC  5184               	movf	??_updateServoPosition& (0+255),w,b
 14763  0043EE  0A01               	xorlw	1	; case 1
 14764  0043F0  B4D8               	btfsc	status,2,c
 14765  0043F2  D7DD               	goto	l5995
 14766  0043F4  0A02               	xorlw	2	; case 3
 14767  0043F6  A4D8               	btfss	status,2,c
 14768  0043F8  0012               	return	
 14769  0043FA  D7E3               	goto	l835
 14770  0043FC                     __end_of_updateServoPosition:
 14771                           	opt stack 0
 14772                           tblptru	equ	0xFF8
 14773                           tblptrh	equ	0xFF7
 14774                           tblptrl	equ	0xFF6
 14775                           tablat	equ	0xFF5
 14776                           prodh	equ	0xFF4
 14777                           prodl	equ	0xFF3
 14778                           intcon	equ	0xFF2
 14779                           intcon2	equ	0xFF1
 14780                           intcon3	equ	0xFF0
 14781                           postinc0	equ	0xFEE
 14782                           wreg	equ	0xFE8
 14783                           postdec1	equ	0xFE5
 14784                           fsr1l	equ	0xFE1
 14785                           indf2	equ	0xFDF
 14786                           postinc2	equ	0xFDE
 14787                           postdec2	equ	0xFDD
 14788                           fsr2h	equ	0xFDA
 14789                           fsr2l	equ	0xFD9
 14790                           status	equ	0xFD8
 14791                           
 14792 ;; *************** function _BlockerTest *****************
 14793 ;; Defined at:
 14794 ;;		line 589 in file "Test.c"
 14795 ;; Parameters:    Size  Location     Type
 14796 ;;		None
 14797 ;; Auto vars:     Size  Location     Type
 14798 ;;  i               2   44[BANK0 ] int 
 14799 ;;  cond_flag       2   48[BANK0 ] int 
 14800 ;;  cam_flag        2   46[BANK0 ] int 
 14801 ;; Return value:  Size  Location     Type
 14802 ;;                  1    wreg      void 
 14803 ;; Registers used:
 14804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14805 ;; Tracked objects:
 14806 ;;		On entry : 0/0
 14807 ;;		On exit  : 0/0
 14808 ;;		Unchanged: 0/0
 14809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14811 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14813 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14814 ;;Total ram usage:        7 bytes
 14815 ;; Hardware stack levels used:    1
 14816 ;; Hardware stack levels required when called:   10
 14817 ;; This function calls:
 14818 ;;		_lcdInst
 14819 ;;		_printf
 14820 ;; This function is called by:
 14821 ;;		_Test
 14822 ;; This function uses a non-reentrant model
 14823 ;;
 14824                           
 14825                           	psect	text50
 14826  0034B8                     __ptext50:
 14827                           	opt stack 0
 14828  0034B8                     _BlockerTest:
 14829                           	opt stack 19
 14830                           
 14831                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14832                           
 14833                           ;incstack = 0
 14834  0034B8  0E01               	movlw	1
 14835  0034BA  EC67  F027         	call	_lcdInst
 14836  0034BE  0E68               	movlw	104
 14837  0034C0  0100               	movlb	0	; () banked
 14838  0034C2  6FAB               	movwf	??_BlockerTest& (0+255),b
 14839  0034C4  0EE4               	movlw	228
 14840  0034C6                     u9477:
 14841  0034C6  2EE8               	decfsz	wreg,f,c
 14842  0034C8  D7FE               	bra	u9477
 14843  0034CA  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 14844  0034CC  D7FC               	bra	u9477
 14845  0034CE  F000               	nop	
 14846  0034D0  0E80               	movlw	128
 14847  0034D2  EC67  F027         	call	_lcdInst
 14848                           
 14849                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 14850  0034D6  0E7F               	movlw	low STR_122
 14851  0034D8  0100               	movlb	0	; () banked
 14852  0034DA  6F8E               	movwf	printf@f& (0+255),b
 14853  0034DC  0EFB               	movlw	high STR_122
 14854  0034DE  0100               	movlb	0	; () banked
 14855  0034E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 14856  0034E2  A480               	btfss	3968,2,c	;volatile
 14857  0034E4  D004               	goto	u6630
 14858  0034E6  0100               	movlb	0	; () banked
 14859  0034E8  6BAB               	clrf	??_BlockerTest& (0+255),b
 14860  0034EA  2BAB               	incf	??_BlockerTest& (0+255),f,b
 14861  0034EC  D002               	goto	u6638
 14862  0034EE                     u6630:
 14863  0034EE  0100               	movlb	0	; () banked
 14864  0034F0  6BAB               	clrf	??_BlockerTest& (0+255),b
 14865  0034F2                     u6638:
 14866  0034F2  0100               	movlb	0	; () banked
 14867  0034F4  51AB               	movf	??_BlockerTest& (0+255),w,b
 14868  0034F6  0100               	movlb	0	; () banked
 14869  0034F8  6F90               	movwf	(?_printf+2)& (0+255),b
 14870  0034FA  6B91               	clrf	(?_printf+3)& (0+255),b
 14871  0034FC  ECB8  F008         	call	_printf	;wreg free
 14872                           
 14873                           ;Test.c: 592: lcdInst(0b11000000);;
 14874  003500  0EC0               	movlw	192
 14875  003502  EC67  F027         	call	_lcdInst
 14876                           
 14877                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 14878  003506  0E6D               	movlw	low STR_123
 14879  003508  0100               	movlb	0	; () banked
 14880  00350A  6F8E               	movwf	printf@f& (0+255),b
 14881  00350C  0EFB               	movlw	high STR_123
 14882  00350E  0100               	movlb	0	; () banked
 14883  003510  6F8F               	movwf	(printf@f+1)& (0+255),b
 14884  003512  ECB8  F008         	call	_printf	;wreg free
 14885                           
 14886                           ;Test.c: 594: int cam_flag = 1;
 14887  003516  0E00               	movlw	0
 14888  003518  0100               	movlb	0	; () banked
 14889  00351A  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 14890  00351C  0E01               	movlw	1
 14891  00351E  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 14892                           
 14893                           ; BSR set to: 0
 14894                           ;Test.c: 595: int cond_flag = 0;
 14895  003520  0E00               	movlw	0
 14896  003522  0100               	movlb	0	; () banked
 14897  003524  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 14898  003526  0E00               	movlw	0
 14899  003528  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 14900                           
 14901                           ; BSR set to: 0
 14902                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 14903                           
 14904                           ;Test.c: 596: while(1){
 14905  00352A  D018               	goto	l7859
 14906  00352C                     l7855:
 14907                           
 14908                           ;Test.c: 598: lcdInst(0b10000000);;
 14909  00352C  0E80               	movlw	128
 14910  00352E  EC67  F027         	call	_lcdInst
 14911                           
 14912                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 14913  003532  0E7F               	movlw	low STR_122
 14914  003534  0100               	movlb	0	; () banked
 14915  003536  6F8E               	movwf	printf@f& (0+255),b
 14916  003538  0EFB               	movlw	high STR_122
 14917  00353A  0100               	movlb	0	; () banked
 14918  00353C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14919  00353E  A480               	btfss	3968,2,c	;volatile
 14920  003540  D004               	goto	u6640
 14921  003542  0100               	movlb	0	; () banked
 14922  003544  6BAB               	clrf	??_BlockerTest& (0+255),b
 14923  003546  2BAB               	incf	??_BlockerTest& (0+255),f,b
 14924  003548  D002               	goto	u6648
 14925  00354A                     u6640:
 14926  00354A  0100               	movlb	0	; () banked
 14927  00354C  6BAB               	clrf	??_BlockerTest& (0+255),b
 14928  00354E                     u6648:
 14929  00354E  0100               	movlb	0	; () banked
 14930  003550  51AB               	movf	??_BlockerTest& (0+255),w,b
 14931  003552  0100               	movlb	0	; () banked
 14932  003554  6F90               	movwf	(?_printf+2)& (0+255),b
 14933  003556  6B91               	clrf	(?_printf+3)& (0+255),b
 14934  003558  ECB8  F008         	call	_printf	;wreg free
 14935  00355C                     l7859:
 14936  00355C  A281               	btfss	3969,1,c	;volatile
 14937  00355E  D7E6               	goto	l7855
 14938                           
 14939                           ;Test.c: 600: }
 14940                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 14941  003560  3881               	swapf	3969,w,c	;volatile
 14942  003562  0B0F               	andlw	15
 14943  003564  0A0F               	xorlw	15
 14944  003566  B4D8               	btfsc	status,2,c
 14945  003568  0012               	return	
 14946                           
 14947                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 14948                           
 14949                           ;Test.c: 603: }
 14950                           
 14951                           ;Test.c: 602: break;
 14952  00356A  3881               	swapf	3969,w,c	;volatile
 14953  00356C  0B0F               	andlw	15
 14954  00356E  06E8               	decf	wreg,f,c
 14955  003570  A4D8               	btfss	status,2,c
 14956  003572  D016               	goto	l7877
 14957                           
 14958                           ;Test.c: 605: if(cond_flag){
 14959  003574  0100               	movlb	0	; () banked
 14960  003576  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 14961  003578  0100               	movlb	0	; () banked
 14962  00357A  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 14963  00357C  B4D8               	btfsc	status,2,c
 14964  00357E  D007               	goto	l1308
 14965                           
 14966                           ; BSR set to: 0
 14967                           ;Test.c: 606: LATAbits.LATA3 = 1;
 14968  003580  8689               	bsf	3977,3,c	;volatile
 14969  003582  D006               	goto	l7875
 14970  003584                     u6691:
 14971  003584  0E01               	movlw	1
 14972  003586                     u6700:
 14973  003586  0100               	movlb	0	; () banked
 14974  003588  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 14975  00358A  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 14976                           
 14977                           ;Test.c: 608: }
 14978  00358C  D054               	goto	l7901
 14979  00358E                     l1308:
 14980                           
 14981                           ; BSR set to: 0
 14982                           ;Test.c: 609: else{
 14983                           ;Test.c: 610: LATAbits.LATA3 = 0;
 14984  00358E  9689               	bcf	3977,3,c	;volatile
 14985  003590                     l7875:
 14986                           
 14987                           ; BSR set to: 0
 14988                           ;Test.c: 611: cond_flag = !cond_flag;
 14989  003590  0100               	movlb	0	; () banked
 14990  003592  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 14991  003594  0100               	movlb	0	; () banked
 14992  003596  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 14993  003598  B4D8               	btfsc	status,2,c
 14994  00359A  D7F4               	goto	u6691
 14995  00359C  0E00               	movlw	0
 14996  00359E  D7F3               	goto	u6700
 14997  0035A0                     l7877:
 14998                           
 14999                           ;Test.c: 614: else{
 15000                           ;Test.c: 615: if(cam_flag){
 15001  0035A0  0100               	movlb	0	; () banked
 15002  0035A2  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15003  0035A4  0100               	movlb	0	; () banked
 15004  0035A6  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15005  0035A8  B4D8               	btfsc	status,2,c
 15006  0035AA  D007               	goto	l7883
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15010  0035AC  808B               	bsf	3979,0,c	;volatile
 15011  0035AE  D023               	goto	l7895
 15012  0035B0                     u6741:
 15013  0035B0  0E01               	movlw	1
 15014  0035B2                     u6750:
 15015  0035B2  0100               	movlb	0	; () banked
 15016  0035B4  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15017  0035B6  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15018                           
 15019                           ;Test.c: 618: }
 15020  0035B8  D03E               	goto	l7901
 15021  0035BA                     l7883:
 15022                           
 15023                           ; BSR set to: 0
 15024                           ;Test.c: 619: else{
 15025                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15026  0035BA  0E00               	movlw	0
 15027  0035BC  0100               	movlb	0	; () banked
 15028  0035BE  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15029  0035C0  0E00               	movlw	0
 15030  0035C2  6FAC               	movwf	BlockerTest@i& (0+255),b
 15031  0035C4                     l7885:
 15032                           
 15033                           ; BSR set to: 0
 15034  0035C4  0100               	movlb	0	; () banked
 15035  0035C6  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15036  0035C8  D008               	goto	l1313
 15037  0035CA  0E88               	movlw	136
 15038  0035CC  0100               	movlb	0	; () banked
 15039  0035CE  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15040  0035D0  0E13               	movlw	19
 15041  0035D2  0100               	movlb	0	; () banked
 15042  0035D4  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15043  0035D6  B0D8               	btfsc	status,0,c
 15044  0035D8  D00D               	goto	l1314
 15045  0035DA                     l1313:
 15046                           
 15047                           ; BSR set to: 0
 15048                           ;Test.c: 621: {
 15049                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15050  0035DA  808B               	bsf	3979,0,c	;volatile
 15051                           
 15052                           ; BSR set to: 0
 15053                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15054  0035DC  0E1A               	movlw	26
 15055  0035DE                     u9487:
 15056  0035DE  2EE8               	decfsz	wreg,f,c
 15057  0035E0  D7FE               	bra	u9487
 15058  0035E2  D000               	nop2	
 15059                           
 15060                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15061  0035E4  908B               	bcf	3979,0,c	;volatile
 15062                           
 15063                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15064  0035E6  0EF0               	movlw	240
 15065  0035E8                     u9497:
 15066  0035E8  2EE8               	decfsz	wreg,f,c
 15067  0035EA  D7FE               	bra	u9497
 15068  0035EC  0100               	movlb	0	; () banked
 15069  0035EE  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15070  0035F0  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15071  0035F2  D7E8               	goto	l7885
 15072  0035F4                     l1314:
 15073                           
 15074                           ; BSR set to: 0
 15075                           ;Test.c: 626: }
 15076                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15077  0035F4  908B               	bcf	3979,0,c	;volatile
 15078  0035F6                     l7895:
 15079                           
 15080                           ; BSR set to: 0
 15081                           ;Test.c: 628: cam_flag = !cam_flag;
 15082  0035F6  0100               	movlb	0	; () banked
 15083  0035F8  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15084  0035FA  0100               	movlb	0	; () banked
 15085  0035FC  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15086  0035FE  B4D8               	btfsc	status,2,c
 15087  003600  D7D7               	goto	u6741
 15088  003602  0E00               	movlw	0
 15089  003604  D7D6               	goto	u6750
 15090  003606                     l7897:
 15091                           
 15092                           ;Test.c: 633: lcdInst(0b10000000);;
 15093  003606  0E80               	movlw	128
 15094  003608  EC67  F027         	call	_lcdInst
 15095                           
 15096                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15097  00360C  0E7F               	movlw	low STR_122
 15098  00360E  0100               	movlb	0	; () banked
 15099  003610  6F8E               	movwf	printf@f& (0+255),b
 15100  003612  0EFB               	movlw	high STR_122
 15101  003614  0100               	movlb	0	; () banked
 15102  003616  6F8F               	movwf	(printf@f+1)& (0+255),b
 15103  003618  A480               	btfss	3968,2,c	;volatile
 15104  00361A  D004               	goto	u6800
 15105  00361C  0100               	movlb	0	; () banked
 15106  00361E  6BAB               	clrf	??_BlockerTest& (0+255),b
 15107  003620  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15108  003622  D002               	goto	u6808
 15109  003624                     u6800:
 15110  003624  0100               	movlb	0	; () banked
 15111  003626  6BAB               	clrf	??_BlockerTest& (0+255),b
 15112  003628                     u6808:
 15113  003628  0100               	movlb	0	; () banked
 15114  00362A  51AB               	movf	??_BlockerTest& (0+255),w,b
 15115  00362C  0100               	movlb	0	; () banked
 15116  00362E  6F90               	movwf	(?_printf+2)& (0+255),b
 15117  003630  6B91               	clrf	(?_printf+3)& (0+255),b
 15118  003632  ECB8  F008         	call	_printf	;wreg free
 15119  003636                     l7901:
 15120  003636  A281               	btfss	3969,1,c	;volatile
 15121  003638  D791               	goto	l7859
 15122  00363A  D7E5               	goto	l7897
 15123  00363C                     __end_of_BlockerTest:
 15124                           	opt stack 0
 15125                           tblptru	equ	0xFF8
 15126                           tblptrh	equ	0xFF7
 15127                           tblptrl	equ	0xFF6
 15128                           tablat	equ	0xFF5
 15129                           prodh	equ	0xFF4
 15130                           prodl	equ	0xFF3
 15131                           intcon	equ	0xFF2
 15132                           intcon2	equ	0xFF1
 15133                           intcon3	equ	0xFF0
 15134                           postinc0	equ	0xFEE
 15135                           wreg	equ	0xFE8
 15136                           postdec1	equ	0xFE5
 15137                           fsr1l	equ	0xFE1
 15138                           indf2	equ	0xFDF
 15139                           postinc2	equ	0xFDE
 15140                           postdec2	equ	0xFDD
 15141                           fsr2h	equ	0xFDA
 15142                           fsr2l	equ	0xFD9
 15143                           status	equ	0xFD8
 15144                           
 15145 ;; *************** function _printf *****************
 15146 ;; Defined at:
 15147 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15148 ;; Parameters:    Size  Location     Type
 15149 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15150 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15151 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15152 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15153 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15154 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15155 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15156 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15157 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15158 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15159 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15160 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15161 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15162 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15163 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15164 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15165 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15166 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15167 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15168 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15169 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15170 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15171 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15172 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15173 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15174 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15175 ;; Auto vars:     Size  Location     Type
 15176 ;;  tmpval          4    0        struct .
 15177 ;;  width           2   41[BANK0 ] int 
 15178 ;;  val             2   37[BANK0 ] unsigned int 
 15179 ;;  len             2   35[BANK0 ] unsigned int 
 15180 ;;  ap              2   33[BANK0 ] PTR void [1]
 15181 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15182 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15183 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15184 ;;  c               1   40[BANK0 ] char 
 15185 ;;  flag            1   39[BANK0 ] unsigned char 
 15186 ;;  prec            1   30[BANK0 ] char 
 15187 ;; Return value:  Size  Location     Type
 15188 ;;                  2   14[BANK0 ] int 
 15189 ;; Registers used:
 15190 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15191 ;; Tracked objects:
 15192 ;;		On entry : 0/0
 15193 ;;		On exit  : 0/0
 15194 ;;		Unchanged: 0/0
 15195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15196 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15197 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15198 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15199 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15200 ;;Total ram usage:       29 bytes
 15201 ;; Hardware stack levels used:    1
 15202 ;; Hardware stack levels required when called:    9
 15203 ;; This function calls:
 15204 ;;		___lwdiv
 15205 ;;		___lwmod
 15206 ;;		___wmul
 15207 ;;		_isdigit
 15208 ;;		_putch
 15209 ;; This function is called by:
 15210 ;;		_UI
 15211 ;;		_change_state_to_menu_start
 15212 ;;		_change_state_to_menu_12
 15213 ;;		_change_state_to_menu_22
 15214 ;;		_printRTC
 15215 ;;		_EEPROM_write
 15216 ;;		_Test
 15217 ;;		_algorithmTest
 15218 ;;		_sensorTest
 15219 ;;		_actuatorTest
 15220 ;;		_BothServos
 15221 ;;		_PortTestA5
 15222 ;;		_PusherTest
 15223 ;;		_SpeedTest
 15224 ;;		_BlockerTest
 15225 ;;		_ToggleTestA5
 15226 ;; This function uses a non-reentrant model
 15227 ;;
 15228                           
 15229                           	psect	text51
 15230  001170                     __ptext51:
 15231                           	opt stack 0
 15232  001170                     _printf:
 15233                           	opt stack 18
 15234                           
 15235                           ;doprnt.c: 466: va_list ap;
 15236                           ;doprnt.c: 499: signed char c;
 15237                           ;doprnt.c: 501: int width;
 15238                           ;doprnt.c: 506: signed char prec;
 15239                           ;doprnt.c: 508: unsigned char flag;
 15240                           ;doprnt.c: 523: union {
 15241                           ;doprnt.c: 524: unsigned long vd;
 15242                           ;doprnt.c: 525: double integ;
 15243                           ;doprnt.c: 526: } tmpval;
 15244                           ;doprnt.c: 528: unsigned int val;
 15245                           ;doprnt.c: 529: unsigned len;
 15246                           ;doprnt.c: 530: const char * cp;
 15247                           ;doprnt.c: 533: *ap = __va_start();
 15248                           
 15249                           ;incstack = 0
 15250  001170  0E90               	movlw	low (?_printf+2)
 15251  001172  0100               	movlb	0	; () banked
 15252  001174  6FA1               	movwf	printf@ap& (0+255),b
 15253  001176  0E00               	movlw	high (?_printf+2)
 15254  001178  0100               	movlb	0	; () banked
 15255  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15256                           
 15257                           ;doprnt.c: 536: while(c = *f++) {
 15258  00117C  D205               	goto	l5955
 15259  00117E                     l5825:
 15260                           
 15261                           ; BSR set to: 0
 15262                           ;doprnt.c: 538: if(c != '%')
 15263  00117E  0E25               	movlw	37
 15264  001180  0100               	movlb	0	; () banked
 15265  001182  19A8               	xorwf	printf@c& (0+255),w,b
 15266  001184  B4D8               	btfsc	status,2,c
 15267  001186  D005               	goto	l5829
 15268                           
 15269                           ; BSR set to: 0
 15270                           ;doprnt.c: 540: {
 15271                           ;doprnt.c: 541: (putch(c) );
 15272  001188  0100               	movlb	0	; () banked
 15273  00118A  51A8               	movf	printf@c& (0+255),w,b
 15274  00118C  EC5F  F027         	call	_putch
 15275                           
 15276                           ;doprnt.c: 542: continue;
 15277  001190  D1FB               	goto	l5955
 15278  001192                     l5829:
 15279                           
 15280                           ;doprnt.c: 543: }
 15281                           ;doprnt.c: 546: width = 0;
 15282  001192  0E00               	movlw	0
 15283  001194  0100               	movlb	0	; () banked
 15284  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 15285  001198  0E00               	movlw	0
 15286  00119A  6FA9               	movwf	printf@width& (0+255),b
 15287                           
 15288                           ;doprnt.c: 548: flag = 0;
 15289  00119C  0E00               	movlw	0
 15290  00119E  0100               	movlb	0	; () banked
 15291  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;doprnt.c: 551: switch(*f) {
 15295                           
 15296                           ;doprnt.c: 550: for(;;) {
 15297  0011A2  D005               	goto	l5835
 15298  0011A4                     l5831:
 15299                           
 15300                           ;doprnt.c: 580: flag |= 0x04;
 15301  0011A4  0100               	movlb	0	; () banked
 15302  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 15303                           
 15304                           ;doprnt.c: 581: f++;
 15305  0011A8  0100               	movlb	0	; () banked
 15306  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 15307  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15308  0011AE                     l5835:
 15309  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 15310  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 15311  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15312  0011B6  6AF8               	clrf	tblptru,c
 15313  0011B8                     	endif
 15314  0011B8                     	if	0	;tblptru may be non-zero
 15315  0011B8                     	endif
 15316  0011B8  0008               	tblrd		*
 15317  0011BA  50F5               	movf	tablat,w,c
 15318                           
 15319                           ; Switch size 1, requested type "space"
 15320                           ; Number of cases is 1, Range of values is 48 to 48
 15321                           ; switch strategies available:
 15322                           ; Name         Instructions Cycles
 15323                           ; simple_byte            4     3 (average)
 15324                           ;	Chosen strategy is simple_byte
 15325  0011BC  0A30               	xorlw	48	; case 48
 15326  0011BE  B4D8               	btfsc	status,2,c
 15327  0011C0  D7F1               	goto	l5831
 15328                           
 15329                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15330                           
 15331                           ;doprnt.c: 586: }
 15332                           
 15333                           ;doprnt.c: 585: break;
 15334  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 15335  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 15336  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15337  0011CA  6AF8               	clrf	tblptru,c
 15338  0011CC                     	endif
 15339  0011CC                     	if	0	;tblptru may be non-zero
 15340  0011CC                     	endif
 15341  0011CC  0008               	tblrd		*
 15342  0011CE  50F5               	movf	tablat,w,c
 15343  0011D0  EC82  F026         	call	_isdigit
 15344  0011D4  A0D8               	btfss	status,0,c
 15345  0011D6  D0D2               	goto	l5883
 15346                           
 15347                           ;doprnt.c: 598: width = 0;
 15348  0011D8  0E00               	movlw	0
 15349  0011DA  0100               	movlb	0	; () banked
 15350  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 15351  0011DE  0E00               	movlw	0
 15352  0011E0  6FA9               	movwf	printf@width& (0+255),b
 15353  0011E2                     l5841:
 15354                           
 15355                           ;doprnt.c: 600: width *= 10;
 15356  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15357  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15358  0011EA  0E00               	movlw	0
 15359  0011EC  0100               	movlb	0	; () banked
 15360  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15361  0011F0  0E0A               	movlw	10
 15362  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15363  0011F4  ECEC  F024         	call	___wmul	;wreg free
 15364  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 15365  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15366                           
 15367                           ;doprnt.c: 601: width += *f++ - '0';
 15368  001200  0ED0               	movlw	208
 15369  001202  0100               	movlb	0	; () banked
 15370  001204  6F9A               	movwf	??_printf& (0+255),b
 15371  001206  0EFF               	movlw	255
 15372  001208  0100               	movlb	0	; () banked
 15373  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 15374  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 15375  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 15376  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15377  001214  6AF8               	clrf	tblptru,c
 15378  001216                     	endif
 15379  001216                     	if	0	;tblptru may be non-zero
 15380  001216                     	endif
 15381  001216  0008               	tblrd		*
 15382  001218  50F5               	movf	tablat,w,c
 15383  00121A  0100               	movlb	0	; () banked
 15384  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 15385  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 15386  001220  0100               	movlb	0	; () banked
 15387  001222  519A               	movf	??_printf& (0+255),w,b
 15388  001224  0100               	movlb	0	; () banked
 15389  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 15390  001228  0100               	movlb	0	; () banked
 15391  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 15392  00122C  0100               	movlb	0	; () banked
 15393  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15394  001230  0100               	movlb	0	; () banked
 15395  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 15396  001234  0100               	movlb	0	; () banked
 15397  001236  27A9               	addwf	printf@width& (0+255),f,b
 15398  001238  0100               	movlb	0	; () banked
 15399  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 15400  00123C  0100               	movlb	0	; () banked
 15401  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15402                           
 15403                           ; BSR set to: 0
 15404  001240  0100               	movlb	0	; () banked
 15405  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 15406  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15407                           
 15408                           ; BSR set to: 0
 15409                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15410  001246  C08E  FFF6         	movff	printf@f,tblptrl
 15411  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 15412  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15413  00124E  6AF8               	clrf	tblptru,c
 15414  001250                     	endif
 15415  001250                     	if	0	;tblptru may be non-zero
 15416  001250                     	endif
 15417  001250  0008               	tblrd		*
 15418  001252  50F5               	movf	tablat,w,c
 15419  001254  EC82  F026         	call	_isdigit
 15420  001258  A0D8               	btfss	status,0,c
 15421  00125A  D090               	goto	l5883
 15422  00125C  D7C2               	goto	l5841
 15423  00125E                     l5849:
 15424                           
 15425                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15426  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 15427  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15428  001266  CFDE F09F          	movff	postinc2,printf@cp
 15429  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 15430  00126E  0E02               	movlw	2
 15431  001270  0100               	movlb	0	; () banked
 15432  001272  27A1               	addwf	printf@ap& (0+255),f,b
 15433  001274  0E00               	movlw	0
 15434  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15435                           
 15436                           ; BSR set to: 0
 15437                           ;doprnt.c: 740: if(!cp)
 15438  001278  0100               	movlb	0	; () banked
 15439  00127A  519F               	movf	printf@cp& (0+255),w,b
 15440  00127C  0100               	movlb	0	; () banked
 15441  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15442  001280  A4D8               	btfss	status,2,c
 15443  001282  D006               	goto	l5857
 15444                           
 15445                           ; BSR set to: 0
 15446                           ;doprnt.c: 741: cp = "(null)";
 15447  001284  0EB6               	movlw	low STR_126
 15448  001286  0100               	movlb	0	; () banked
 15449  001288  6F9F               	movwf	printf@cp& (0+255),b
 15450  00128A  0EFF               	movlw	high STR_126
 15451  00128C  0100               	movlb	0	; () banked
 15452  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15453  001290                     l5857:
 15454                           
 15455                           ; BSR set to: 0
 15456                           ;doprnt.c: 745: len = 0;
 15457  001290  0E00               	movlw	0
 15458  001292  0100               	movlb	0	; () banked
 15459  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 15460  001296  0E00               	movlw	0
 15461  001298  6FA3               	movwf	printf@len& (0+255),b
 15462                           
 15463                           ;doprnt.c: 746: while(cp[len])
 15464  00129A  D003               	goto	l5861
 15465  00129C                     l5859:
 15466                           
 15467                           ;doprnt.c: 747: len++;
 15468  00129C  0100               	movlb	0	; () banked
 15469  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 15470  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15471  0012A2                     l5861:
 15472                           
 15473                           ; BSR set to: 0
 15474  0012A2  0100               	movlb	0	; () banked
 15475  0012A4  51A3               	movf	printf@len& (0+255),w,b
 15476  0012A6  0100               	movlb	0	; () banked
 15477  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 15478  0012AA  0100               	movlb	0	; () banked
 15479  0012AC  6F9A               	movwf	??_printf& (0+255),b
 15480  0012AE  0100               	movlb	0	; () banked
 15481  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 15482  0012B2  0100               	movlb	0	; () banked
 15483  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15484  0012B6  0100               	movlb	0	; () banked
 15485  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 15486  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 15487  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 15488  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 15489  0012C4  6EF8               	movwf	tblptru,c
 15490  0012C6  0E0F               	movlw	(high __ramtop+-1)
 15491  0012C8  64F7               	cpfsgt	tblptrh,c
 15492  0012CA  D003               	bra	u4387
 15493  0012CC  0008               	tblrd		*
 15494  0012CE  50F5               	movf	tablat,w,c
 15495  0012D0  D005               	bra	u4380
 15496  0012D2                     u4387:
 15497  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 15498  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 15499  0012DA  50EF               	movf	indf0,w,c
 15500  0012DC                     u4380:
 15501  0012DC  0900               	iorlw	0
 15502  0012DE  A4D8               	btfss	status,2,c
 15503  0012E0  D7DD               	goto	l5859
 15504                           
 15505                           ;doprnt.c: 757: if(width > len)
 15506  0012E2  0100               	movlb	0	; () banked
 15507  0012E4  51A9               	movf	printf@width& (0+255),w,b
 15508  0012E6  0100               	movlb	0	; () banked
 15509  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 15510  0012EA  0100               	movlb	0	; () banked
 15511  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 15512  0012EE  0100               	movlb	0	; () banked
 15513  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15514  0012F2  B0D8               	btfsc	status,0,c
 15515  0012F4  D009               	goto	l5867
 15516                           
 15517                           ; BSR set to: 0
 15518                           ;doprnt.c: 758: width -= len;
 15519  0012F6  0100               	movlb	0	; () banked
 15520  0012F8  51A3               	movf	printf@len& (0+255),w,b
 15521  0012FA  0100               	movlb	0	; () banked
 15522  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 15523  0012FE  0100               	movlb	0	; () banked
 15524  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 15525  001302  0100               	movlb	0	; () banked
 15526  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15527  001306  D009               	goto	l5871
 15528  001308                     l5867:
 15529                           
 15530                           ; BSR set to: 0
 15531                           ;doprnt.c: 759: else
 15532                           ;doprnt.c: 760: width = 0;
 15533  001308  0E00               	movlw	0
 15534  00130A  0100               	movlb	0	; () banked
 15535  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15536  00130E  0E00               	movlw	0
 15537  001310  6FA9               	movwf	printf@width& (0+255),b
 15538                           
 15539                           ; BSR set to: 0
 15540                           ;doprnt.c: 764: while(width--)
 15541  001312  D003               	goto	l5871
 15542  001314                     l5869:
 15543                           
 15544                           ; BSR set to: 0
 15545                           ;doprnt.c: 765: (putch(' ') );
 15546  001314  0E20               	movlw	32
 15547  001316  EC5F  F027         	call	_putch
 15548  00131A                     l5871:
 15549  00131A  0100               	movlb	0	; () banked
 15550  00131C  07A9               	decf	printf@width& (0+255),f,b
 15551  00131E  A0D8               	btfss	status,0,c
 15552  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 15553  001322  0100               	movlb	0	; () banked
 15554  001324  29A9               	incf	printf@width& (0+255),w,b
 15555  001326  E1F6               	bnz	l5869
 15556  001328  0100               	movlb	0	; () banked
 15557  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 15558  00132C  B4D8               	btfsc	status,2,c
 15559  00132E  D017               	goto	l5877
 15560  001330  D7F1               	goto	l5869
 15561  001332                     l5873:
 15562                           
 15563                           ; BSR set to: 0
 15564                           ;doprnt.c: 768: (putch(*cp++) );
 15565  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 15566  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15567  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 15568  00133C  6EF8               	movwf	tblptru,c
 15569  00133E  0E0F               	movlw	(high __ramtop+-1)
 15570  001340  64F7               	cpfsgt	tblptrh,c
 15571  001342  D003               	bra	u4427
 15572  001344  0008               	tblrd		*
 15573  001346  50F5               	movf	tablat,w,c
 15574  001348  D005               	bra	u4420
 15575  00134A                     u4427:
 15576  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15577  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15578  001352  50EF               	movf	indf0,w,c
 15579  001354                     u4420:
 15580  001354  EC5F  F027         	call	_putch
 15581  001358  0100               	movlb	0	; () banked
 15582  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 15583  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15584  00135E                     l5877:
 15585                           
 15586                           ; BSR set to: 0
 15587  00135E  0100               	movlb	0	; () banked
 15588  001360  07A3               	decf	printf@len& (0+255),f,b
 15589  001362  A0D8               	btfss	status,0,c
 15590  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 15591  001366  0100               	movlb	0	; () banked
 15592  001368  29A3               	incf	printf@len& (0+255),w,b
 15593  00136A  E1E3               	bnz	l5873
 15594  00136C  0100               	movlb	0	; () banked
 15595  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 15596  001370  B4D8               	btfsc	status,2,c
 15597  001372  D10A               	goto	l5955
 15598  001374  D7DE               	goto	l5873
 15599  001376                     l5879:
 15600                           
 15601                           ; BSR set to: 0
 15602                           ;doprnt.c: 818: flag |= 0x40;
 15603  001376  0100               	movlb	0	; () banked
 15604  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 15605                           
 15606                           ; BSR set to: 0
 15607                           ;doprnt.c: 822: }
 15608                           
 15609                           ;doprnt.c: 819: break;
 15610  00137A  D01D               	goto	l1349
 15611  00137C                     l5883:
 15612  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 15613  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 15614  001384  0100               	movlb	0	; () banked
 15615  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 15616  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15617  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15618  00138A  6AF8               	clrf	tblptru,c
 15619  00138C                     	endif
 15620  00138C                     	if	0	;tblptru may be non-zero
 15621  00138C                     	endif
 15622  00138C  0008               	tblrd		*
 15623  00138E  CFF5 F0A8          	movff	tablat,printf@c
 15624  001392  0100               	movlb	0	; () banked
 15625  001394  51A8               	movf	printf@c& (0+255),w,b
 15626                           
 15627                           ; Switch size 1, requested type "space"
 15628                           ; Number of cases is 5, Range of values is 0 to 117
 15629                           ; switch strategies available:
 15630                           ; Name         Instructions Cycles
 15631                           ; simple_byte           16     9 (average)
 15632                           ;	Chosen strategy is simple_byte
 15633  001396  0A00               	xorlw	0	; case 0
 15634  001398  B4D8               	btfsc	status,2,c
 15635  00139A  0012               	return	
 15636  00139C  0A64               	xorlw	100	; case 100
 15637  00139E  B4D8               	btfsc	status,2,c
 15638  0013A0  D00A               	goto	l1349
 15639  0013A2  0A0D               	xorlw	13	; case 105
 15640  0013A4  B4D8               	btfsc	status,2,c
 15641  0013A6  D007               	goto	l1349
 15642  0013A8  0A1A               	xorlw	26	; case 115
 15643  0013AA  B4D8               	btfsc	status,2,c
 15644  0013AC  D758               	goto	l5849
 15645  0013AE  0A06               	xorlw	6	; case 117
 15646  0013B0  B4D8               	btfsc	status,2,c
 15647  0013B2  D7E1               	goto	l5879
 15648  0013B4  D0E9               	goto	l5955
 15649  0013B6                     l1349:
 15650                           
 15651                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15652  0013B6  0100               	movlb	0	; () banked
 15653  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 15654  0013BA  D019               	goto	l5895
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;doprnt.c: 1253: {
 15658                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15659  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 15660  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15661  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 15662  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 15663                           
 15664                           ; BSR set to: 0
 15665  0013CC  0E02               	movlw	2
 15666  0013CE  0100               	movlb	0	; () banked
 15667  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 15668  0013D2  0E00               	movlw	0
 15669  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15670                           
 15671                           ; BSR set to: 0
 15672                           ;doprnt.c: 1261: if((int)val < 0) {
 15673  0013D6  0100               	movlb	0	; () banked
 15674  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 15675  0013DA  D016               	goto	l5899
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;doprnt.c: 1262: flag |= 0x03;
 15679  0013DC  0E03               	movlw	3
 15680  0013DE  0100               	movlb	0	; () banked
 15681  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;doprnt.c: 1263: val = -val;
 15685  0013E2  0100               	movlb	0	; () banked
 15686  0013E4  6DA5               	negf	printf@val& (0+255),b
 15687  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 15688  0013E8  B0D8               	btfsc	status,0,c
 15689  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 15690                           
 15691                           ; BSR set to: 0
 15692                           ;doprnt.c: 1264: }
 15693                           ;doprnt.c: 1266: }
 15694  0013EC  D00D               	goto	l5899
 15695  0013EE                     l5895:
 15696                           
 15697                           ; BSR set to: 0
 15698                           ;doprnt.c: 1268: else
 15699                           ;doprnt.c: 1273: {
 15700                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15701  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 15702  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15703  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 15704  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 15705                           
 15706                           ; BSR set to: 0
 15707  0013FE  0E02               	movlw	2
 15708  001400  0100               	movlb	0	; () banked
 15709  001402  27A1               	addwf	printf@ap& (0+255),f,b
 15710  001404  0E00               	movlw	0
 15711  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15712  001408                     l5899:
 15713                           
 15714                           ; BSR set to: 0
 15715                           ;doprnt.c: 1287: }
 15716                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15717  001408  0E01               	movlw	1
 15718  00140A  0100               	movlb	0	; () banked
 15719  00140C  6FA8               	movwf	printf@c& (0+255),b
 15720  00140E                     l5901:
 15721                           
 15722                           ; BSR set to: 0
 15723  00140E  0E05               	movlw	5
 15724  001410  0100               	movlb	0	; () banked
 15725  001412  19A8               	xorwf	printf@c& (0+255),w,b
 15726  001414  B4D8               	btfsc	status,2,c
 15727  001416  D019               	goto	l5913
 15728                           
 15729                           ; BSR set to: 0
 15730                           ;doprnt.c: 1306: if(val < dpowers[c])
 15731                           
 15732                           ; BSR set to: 0
 15733                           
 15734                           ; BSR set to: 0
 15735  001418  0100               	movlb	0	; () banked
 15736  00141A  51A8               	movf	printf@c& (0+255),w,b
 15737  00141C  0D02               	mullw	2
 15738  00141E  0E00               	movlw	low _dpowers
 15739  001420  24F3               	addwf	prodl,w,c
 15740  001422  6EF6               	movwf	tblptrl,c
 15741  001424  0EFB               	movlw	high _dpowers
 15742  001426  20F4               	addwfc	prodh,w,c
 15743  001428  6EF7               	movwf	tblptrh,c
 15744  00142A                     	if	1	;There are 3 active tblptr bytes
 15745  00142A  6AF8               	clrf	tblptru,c
 15746  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 15747  00142E  22F8               	addwfc	tblptru,f,c
 15748  001430                     	endif
 15749  001430  0009               	tblrd		*+
 15750  001432  50F5               	movf	tablat,w,c
 15751  001434  0100               	movlb	0	; () banked
 15752  001436  5DA5               	subwf	printf@val& (0+255),w,b
 15753  001438  0009               	tblrd		*+
 15754  00143A  50F5               	movf	tablat,w,c
 15755  00143C  0100               	movlb	0	; () banked
 15756  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 15757  001440  A0D8               	btfss	status,0,c
 15758  001442  D003               	goto	l5913
 15759                           
 15760                           ; BSR set to: 0
 15761                           
 15762                           ; BSR set to: 0
 15763                           
 15764                           ; BSR set to: 0
 15765                           ;doprnt.c: 1307: break;
 15766  001444  0100               	movlb	0	; () banked
 15767  001446  2BA8               	incf	printf@c& (0+255),f,b
 15768  001448  D7E2               	goto	l5901
 15769  00144A                     l5913:
 15770                           
 15771                           ; BSR set to: 0
 15772                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15773  00144A  0100               	movlb	0	; () banked
 15774  00144C  51A9               	movf	printf@width& (0+255),w,b
 15775  00144E  0100               	movlb	0	; () banked
 15776  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15777  001452  B4D8               	btfsc	status,2,c
 15778  001454  D00B               	goto	l5919
 15779                           
 15780                           ; BSR set to: 0
 15781  001456  C0A7  F09A         	movff	printf@flag,??_printf
 15782  00145A  0E03               	movlw	3
 15783  00145C  0100               	movlb	0	; () banked
 15784  00145E  179A               	andwf	??_printf& (0+255),f,b
 15785  001460  B4D8               	btfsc	status,2,c
 15786  001462  D004               	goto	l5919
 15787                           
 15788                           ; BSR set to: 0
 15789                           ;doprnt.c: 1346: width--;
 15790  001464  0100               	movlb	0	; () banked
 15791  001466  07A9               	decf	printf@width& (0+255),f,b
 15792  001468  A0D8               	btfss	status,0,c
 15793  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 15794  00146C                     l5919:
 15795                           
 15796                           ; BSR set to: 0
 15797                           ;doprnt.c: 1381: if(width > c)
 15798  00146C  0E80               	movlw	128
 15799  00146E  0100               	movlb	0	; () banked
 15800  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 15801  001472  0E7F               	movlw	127
 15802  001474  0100               	movlb	0	; () banked
 15803  001476  6F9A               	movwf	??_printf& (0+255),b
 15804  001478  0100               	movlb	0	; () banked
 15805  00147A  51A9               	movf	printf@width& (0+255),w,b
 15806  00147C  0100               	movlb	0	; () banked
 15807  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 15808  001480  0100               	movlb	0	; () banked
 15809  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 15810  001484  0A80               	xorlw	128
 15811  001486  0100               	movlb	0	; () banked
 15812  001488  599A               	subwfb	??_printf& (0+255),w,b
 15813  00148A  B0D8               	btfsc	status,0,c
 15814  00148C  D00B               	goto	l5923
 15815                           
 15816                           ; BSR set to: 0
 15817                           ;doprnt.c: 1382: width -= c;
 15818  00148E  0100               	movlb	0	; () banked
 15819  001490  51A8               	movf	printf@c& (0+255),w,b
 15820  001492  0100               	movlb	0	; () banked
 15821  001494  5FA9               	subwf	printf@width& (0+255),f,b
 15822  001496  0E00               	movlw	0
 15823  001498  0100               	movlb	0	; () banked
 15824  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 15825  00149C  0EFF               	movlw	255
 15826  00149E  0100               	movlb	0	; () banked
 15827  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15828  0014A2  D005               	goto	l5925
 15829  0014A4                     l5923:
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;doprnt.c: 1383: else
 15833                           ;doprnt.c: 1384: width = 0;
 15834  0014A4  0E00               	movlw	0
 15835  0014A6  0100               	movlb	0	; () banked
 15836  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 15837  0014AA  0E00               	movlw	0
 15838  0014AC  6FA9               	movwf	printf@width& (0+255),b
 15839  0014AE                     l5925:
 15840                           
 15841                           ; BSR set to: 0
 15842                           ;doprnt.c: 1387: if(flag & 0x04) {
 15843  0014AE  0100               	movlb	0	; () banked
 15844  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 15845  0014B2  D018               	goto	l5937
 15846                           
 15847                           ; BSR set to: 0
 15848                           ;doprnt.c: 1392: if(flag & 0x03)
 15849  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 15850  0014B8  0E03               	movlw	3
 15851  0014BA  0100               	movlb	0	; () banked
 15852  0014BC  179A               	andwf	??_printf& (0+255),f,b
 15853  0014BE  B4D8               	btfsc	status,2,c
 15854  0014C0  D003               	goto	l5931
 15855                           
 15856                           ; BSR set to: 0
 15857                           ;doprnt.c: 1393: (putch('-') );
 15858  0014C2  0E2D               	movlw	45
 15859  0014C4  EC5F  F027         	call	_putch
 15860  0014C8                     l5931:
 15861                           
 15862                           ;doprnt.c: 1415: if(width)
 15863  0014C8  0100               	movlb	0	; () banked
 15864  0014CA  51A9               	movf	printf@width& (0+255),w,b
 15865  0014CC  0100               	movlb	0	; () banked
 15866  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15867  0014D0  B4D8               	btfsc	status,2,c
 15868  0014D2  D025               	goto	l5947
 15869                           
 15870                           ; BSR set to: 0
 15871                           ;doprnt.c: 1417: (putch('0') );
 15872                           
 15873                           ; BSR set to: 0
 15874                           
 15875                           ;doprnt.c: 1416: do
 15876  0014D4  0E30               	movlw	48
 15877  0014D6  EC5F  F027         	call	_putch
 15878                           
 15879                           ;doprnt.c: 1418: while(--width);
 15880  0014DA  0100               	movlb	0	; () banked
 15881  0014DC  07A9               	decf	printf@width& (0+255),f,b
 15882  0014DE  A0D8               	btfss	status,0,c
 15883  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 15884  0014E2  D7F2               	goto	l5931
 15885  0014E4                     l5937:
 15886                           
 15887                           ; BSR set to: 0
 15888                           ;doprnt.c: 1422: {
 15889                           ;doprnt.c: 1424: if(width
 15890                           ;doprnt.c: 1428: )
 15891  0014E4  0100               	movlb	0	; () banked
 15892  0014E6  51A9               	movf	printf@width& (0+255),w,b
 15893  0014E8  0100               	movlb	0	; () banked
 15894  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15895  0014EC  B4D8               	btfsc	status,2,c
 15896  0014EE  D00D               	goto	l5943
 15897  0014F0                     l5939:
 15898                           
 15899                           ; BSR set to: 0
 15900                           ;doprnt.c: 1430: (putch(' ') );
 15901  0014F0  0E20               	movlw	32
 15902  0014F2  EC5F  F027         	call	_putch
 15903                           
 15904                           ;doprnt.c: 1431: while(--width);
 15905  0014F6  0100               	movlb	0	; () banked
 15906  0014F8  07A9               	decf	printf@width& (0+255),f,b
 15907  0014FA  A0D8               	btfss	status,0,c
 15908  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 15909  0014FE  0100               	movlb	0	; () banked
 15910  001500  51A9               	movf	printf@width& (0+255),w,b
 15911  001502  0100               	movlb	0	; () banked
 15912  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15913  001506  A4D8               	btfss	status,2,c
 15914  001508  D7F3               	goto	l5939
 15915  00150A                     l5943:
 15916                           
 15917                           ; BSR set to: 0
 15918                           ;doprnt.c: 1438: if(flag & 0x03)
 15919  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 15920  00150E  0E03               	movlw	3
 15921  001510  0100               	movlb	0	; () banked
 15922  001512  179A               	andwf	??_printf& (0+255),f,b
 15923  001514  B4D8               	btfsc	status,2,c
 15924  001516  D003               	goto	l5947
 15925                           
 15926                           ; BSR set to: 0
 15927                           ;doprnt.c: 1439: (putch('-') );
 15928  001518  0E2D               	movlw	45
 15929  00151A  EC5F  F027         	call	_putch
 15930  00151E                     l5947:
 15931                           
 15932                           ;doprnt.c: 1469: }
 15933                           ;doprnt.c: 1472: prec = c;
 15934  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 15935                           
 15936                           ;doprnt.c: 1474: while(prec--) {
 15937  001522  D02C               	goto	l5953
 15938  001524                     l5949:
 15939                           
 15940                           ;doprnt.c: 1478: {
 15941                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15942  001524  0100               	movlb	0	; () banked
 15943  001526  519E               	movf	printf@prec& (0+255),w,b
 15944  001528  0D02               	mullw	2
 15945  00152A  0E00               	movlw	low _dpowers
 15946  00152C  24F3               	addwf	prodl,w,c
 15947  00152E  6EF6               	movwf	tblptrl,c
 15948  001530  0EFB               	movlw	high _dpowers
 15949  001532  20F4               	addwfc	prodh,w,c
 15950  001534  6EF7               	movwf	tblptrh,c
 15951  001536                     	if	1	;There are 3 active tblptr bytes
 15952  001536  6AF8               	clrf	tblptru,c
 15953  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 15954  00153A  22F8               	addwfc	tblptru,f,c
 15955  00153C                     	endif
 15956  00153C  0009               	tblrd		*+
 15957  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 15958  001542  000A               	tblrd		*-
 15959  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 15960  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 15961  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 15962  001550  EC87  F021         	call	___lwdiv	;wreg free
 15963  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 15964  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 15965  00155C  0E00               	movlw	0
 15966  00155E  0100               	movlb	0	; () banked
 15967  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 15968  001562  0E0A               	movlw	10
 15969  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 15970  001566  ECA4  F022         	call	___lwmod	;wreg free
 15971  00156A  0100               	movlb	0	; () banked
 15972  00156C  5187               	movf	?___lwmod& (0+255),w,b
 15973  00156E  0F30               	addlw	48
 15974  001570  0100               	movlb	0	; () banked
 15975  001572  6FA8               	movwf	printf@c& (0+255),b
 15976                           
 15977                           ; BSR set to: 0
 15978                           ;doprnt.c: 1523: }
 15979                           ;doprnt.c: 1524: (putch(c) );
 15980  001574  0100               	movlb	0	; () banked
 15981  001576  51A8               	movf	printf@c& (0+255),w,b
 15982  001578  EC5F  F027         	call	_putch
 15983  00157C                     l5953:
 15984  00157C  0100               	movlb	0	; () banked
 15985  00157E  079E               	decf	printf@prec& (0+255),f,b
 15986  001580  0100               	movlb	0	; () banked
 15987  001582  299E               	incf	printf@prec& (0+255),w,b
 15988  001584  A4D8               	btfss	status,2,c
 15989  001586  D7CE               	goto	l5949
 15990  001588                     l5955:
 15991  001588  C08E  FFF6         	movff	printf@f,tblptrl
 15992  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 15993  001590  0100               	movlb	0	; () banked
 15994  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 15995  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15996  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15997  001596  6AF8               	clrf	tblptru,c
 15998  001598                     	endif
 15999  001598                     	if	0	;tblptru may be non-zero
 16000  001598                     	endif
 16001  001598  0008               	tblrd		*
 16002  00159A  CFF5 F0A8          	movff	tablat,printf@c
 16003  00159E  0100               	movlb	0	; () banked
 16004  0015A0  51A8               	movf	printf@c& (0+255),w,b
 16005  0015A2  B4D8               	btfsc	status,2,c
 16006  0015A4  0012               	return	
 16007  0015A6  D5EB               	goto	l5825
 16008  0015A8                     __end_of_printf:
 16009                           	opt stack 0
 16010                           tblptru	equ	0xFF8
 16011                           tblptrh	equ	0xFF7
 16012                           tblptrl	equ	0xFF6
 16013                           tablat	equ	0xFF5
 16014                           prodh	equ	0xFF4
 16015                           prodl	equ	0xFF3
 16016                           intcon	equ	0xFF2
 16017                           intcon2	equ	0xFF1
 16018                           intcon3	equ	0xFF0
 16019                           indf0	equ	0xFEF
 16020                           postinc0	equ	0xFEE
 16021                           fsr0h	equ	0xFEA
 16022                           fsr0l	equ	0xFE9
 16023                           wreg	equ	0xFE8
 16024                           postdec1	equ	0xFE5
 16025                           fsr1l	equ	0xFE1
 16026                           indf2	equ	0xFDF
 16027                           postinc2	equ	0xFDE
 16028                           postdec2	equ	0xFDD
 16029                           fsr2h	equ	0xFDA
 16030                           fsr2l	equ	0xFD9
 16031                           status	equ	0xFD8
 16032                           
 16033 ;; *************** function _putch *****************
 16034 ;; Defined at:
 16035 ;;		line 20 in file "lcd.c"
 16036 ;; Parameters:    Size  Location     Type
 16037 ;;  data            1    wreg     unsigned char 
 16038 ;; Auto vars:     Size  Location     Type
 16039 ;;  data            1    2[BANK0 ] unsigned char 
 16040 ;; Return value:  Size  Location     Type
 16041 ;;                  1    wreg      void 
 16042 ;; Registers used:
 16043 ;;		wreg, status,2, status,0, cstack
 16044 ;; Tracked objects:
 16045 ;;		On entry : 0/0
 16046 ;;		On exit  : 0/0
 16047 ;;		Unchanged: 0/0
 16048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16052 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16053 ;;Total ram usage:        1 bytes
 16054 ;; Hardware stack levels used:    1
 16055 ;; Hardware stack levels required when called:    8
 16056 ;; This function calls:
 16057 ;;		_lcdNibble
 16058 ;; This function is called by:
 16059 ;;		_printf
 16060 ;; This function uses a non-reentrant model
 16061 ;;
 16062                           
 16063                           	psect	text52
 16064  004EBE                     __ptext52:
 16065                           	opt stack 0
 16066  004EBE                     _putch:
 16067                           	opt stack 18
 16068                           
 16069                           ;incstack = 0
 16070                           ;putch@data stored from wreg
 16071  004EBE  0100               	movlb	0	; () banked
 16072  004EC0  6F82               	movwf	putch@data& (0+255),b
 16073                           
 16074                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16075  004EC2  848C               	bsf	3980,2,c	;volatile
 16076                           
 16077                           ;lcd.c: 22: lcdNibble(data);
 16078  004EC4  0100               	movlb	0	; () banked
 16079  004EC6  5182               	movf	putch@data& (0+255),w,b
 16080  004EC8  EC70  F022         	call	_lcdNibble
 16081  004ECC  0012               	return		;funcret
 16082  004ECE                     __end_of_putch:
 16083                           	opt stack 0
 16084                           tblptru	equ	0xFF8
 16085                           tblptrh	equ	0xFF7
 16086                           tblptrl	equ	0xFF6
 16087                           tablat	equ	0xFF5
 16088                           prodh	equ	0xFF4
 16089                           prodl	equ	0xFF3
 16090                           intcon	equ	0xFF2
 16091                           intcon2	equ	0xFF1
 16092                           intcon3	equ	0xFF0
 16093                           indf0	equ	0xFEF
 16094                           postinc0	equ	0xFEE
 16095                           fsr0h	equ	0xFEA
 16096                           fsr0l	equ	0xFE9
 16097                           wreg	equ	0xFE8
 16098                           postdec1	equ	0xFE5
 16099                           fsr1l	equ	0xFE1
 16100                           indf2	equ	0xFDF
 16101                           postinc2	equ	0xFDE
 16102                           postdec2	equ	0xFDD
 16103                           fsr2h	equ	0xFDA
 16104                           fsr2l	equ	0xFD9
 16105                           status	equ	0xFD8
 16106                           
 16107 ;; *************** function _isdigit *****************
 16108 ;; Defined at:
 16109 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16110 ;; Parameters:    Size  Location     Type
 16111 ;;  c               1    wreg     unsigned char 
 16112 ;; Auto vars:     Size  Location     Type
 16113 ;;  c               1    2[BANK0 ] unsigned char 
 16114 ;; Return value:  Size  Location     Type
 16115 ;;		None               void
 16116 ;; Registers used:
 16117 ;;		wreg, status,2, status,0
 16118 ;; Tracked objects:
 16119 ;;		On entry : 0/0
 16120 ;;		On exit  : 0/0
 16121 ;;		Unchanged: 0/0
 16122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16124 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16126 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16127 ;;Total ram usage:        3 bytes
 16128 ;; Hardware stack levels used:    1
 16129 ;; Hardware stack levels required when called:    7
 16130 ;; This function calls:
 16131 ;;		Nothing
 16132 ;; This function is called by:
 16133 ;;		_printf
 16134 ;; This function uses a non-reentrant model
 16135 ;;
 16136                           
 16137                           	psect	text53
 16138  004D04                     __ptext53:
 16139                           	opt stack 0
 16140  004D04                     _isdigit:
 16141                           	opt stack 19
 16142                           
 16143                           ;incstack = 0
 16144                           ;isdigit@c stored from wreg
 16145  004D04  0100               	movlb	0	; () banked
 16146  004D06  6F82               	movwf	isdigit@c& (0+255),b
 16147  004D08  0E00               	movlw	0
 16148  004D0A  0100               	movlb	0	; () banked
 16149  004D0C  6F81               	movwf	_isdigit$1975& (0+255),b
 16150                           
 16151                           ; BSR set to: 0
 16152  004D0E  0E3A               	movlw	58
 16153  004D10  0100               	movlb	0	; () banked
 16154  004D12  6182               	cpfslt	isdigit@c& (0+255),b
 16155  004D14  D007               	goto	l5673
 16156                           
 16157                           ; BSR set to: 0
 16158  004D16  0E2F               	movlw	47
 16159  004D18  0100               	movlb	0	; () banked
 16160  004D1A  6582               	cpfsgt	isdigit@c& (0+255),b
 16161  004D1C  D003               	goto	l5673
 16162                           
 16163                           ; BSR set to: 0
 16164  004D1E  0E01               	movlw	1
 16165  004D20  0100               	movlb	0	; () banked
 16166  004D22  6F81               	movwf	_isdigit$1975& (0+255),b
 16167  004D24                     l5673:
 16168                           
 16169                           ; BSR set to: 0
 16170  004D24  C081  F080         	movff	_isdigit$1975,??_isdigit
 16171  004D28  0100               	movlb	0	; () banked
 16172  004D2A  3180               	rrcf	??_isdigit& (0+255),w,b
 16173  004D2C  0012               	return	
 16174  004D2E                     __end_of_isdigit:
 16175                           	opt stack 0
 16176                           tblptru	equ	0xFF8
 16177                           tblptrh	equ	0xFF7
 16178                           tblptrl	equ	0xFF6
 16179                           tablat	equ	0xFF5
 16180                           prodh	equ	0xFF4
 16181                           prodl	equ	0xFF3
 16182                           intcon	equ	0xFF2
 16183                           intcon2	equ	0xFF1
 16184                           intcon3	equ	0xFF0
 16185                           indf0	equ	0xFEF
 16186                           postinc0	equ	0xFEE
 16187                           fsr0h	equ	0xFEA
 16188                           fsr0l	equ	0xFE9
 16189                           wreg	equ	0xFE8
 16190                           postdec1	equ	0xFE5
 16191                           fsr1l	equ	0xFE1
 16192                           indf2	equ	0xFDF
 16193                           postinc2	equ	0xFDE
 16194                           postdec2	equ	0xFDD
 16195                           fsr2h	equ	0xFDA
 16196                           fsr2l	equ	0xFD9
 16197                           status	equ	0xFD8
 16198                           
 16199 ;; *************** function ___wmul *****************
 16200 ;; Defined at:
 16201 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16202 ;; Parameters:    Size  Location     Type
 16203 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16204 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16205 ;; Auto vars:     Size  Location     Type
 16206 ;;  product         2    4[BANK0 ] unsigned int 
 16207 ;; Return value:  Size  Location     Type
 16208 ;;                  2    0[BANK0 ] unsigned int 
 16209 ;; Registers used:
 16210 ;;		wreg, status,2, status,0, prodl, prodh
 16211 ;; Tracked objects:
 16212 ;;		On entry : 0/0
 16213 ;;		On exit  : 0/0
 16214 ;;		Unchanged: 0/0
 16215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16216 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16217 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16219 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16220 ;;Total ram usage:        6 bytes
 16221 ;; Hardware stack levels used:    1
 16222 ;; Hardware stack levels required when called:    7
 16223 ;; This function calls:
 16224 ;;		Nothing
 16225 ;; This function is called by:
 16226 ;;		_printf
 16227 ;; This function uses a non-reentrant model
 16228 ;;
 16229                           
 16230                           	psect	text54
 16231  0049D8                     __ptext54:
 16232                           	opt stack 0
 16233  0049D8                     ___wmul:
 16234                           	opt stack 19
 16235                           
 16236                           ; BSR set to: 0
 16237                           ;incstack = 0
 16238  0049D8  0100               	movlb	0	; () banked
 16239  0049DA  5180               	movf	___wmul@multiplier& (0+255),w,b
 16240  0049DC  0100               	movlb	0	; () banked
 16241  0049DE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16242  0049E0  CFF3 F084          	movff	prodl,___wmul@product
 16243  0049E4  CFF4 F085          	movff	prodh,___wmul@product+1
 16244  0049E8  0100               	movlb	0	; () banked
 16245  0049EA  5180               	movf	___wmul@multiplier& (0+255),w,b
 16246  0049EC  0100               	movlb	0	; () banked
 16247  0049EE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16248  0049F0  50F3               	movf	prodl,w,c
 16249  0049F2  0100               	movlb	0	; () banked
 16250  0049F4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16251  0049F6  0100               	movlb	0	; () banked
 16252  0049F8  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16253  0049FA  0100               	movlb	0	; () banked
 16254  0049FC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16255  0049FE  50F3               	movf	prodl,w,c
 16256  004A00  0100               	movlb	0	; () banked
 16257  004A02  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16258                           
 16259                           ; BSR set to: 0
 16260  004A04  C084  F080         	movff	___wmul@product,?___wmul
 16261  004A08  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16262  004A0C  0012               	return	
 16263  004A0E                     __end_of___wmul:
 16264                           	opt stack 0
 16265                           tblptru	equ	0xFF8
 16266                           tblptrh	equ	0xFF7
 16267                           tblptrl	equ	0xFF6
 16268                           tablat	equ	0xFF5
 16269                           prodh	equ	0xFF4
 16270                           prodl	equ	0xFF3
 16271                           intcon	equ	0xFF2
 16272                           intcon2	equ	0xFF1
 16273                           intcon3	equ	0xFF0
 16274                           indf0	equ	0xFEF
 16275                           postinc0	equ	0xFEE
 16276                           fsr0h	equ	0xFEA
 16277                           fsr0l	equ	0xFE9
 16278                           wreg	equ	0xFE8
 16279                           postdec1	equ	0xFE5
 16280                           fsr1l	equ	0xFE1
 16281                           indf2	equ	0xFDF
 16282                           postinc2	equ	0xFDE
 16283                           postdec2	equ	0xFDD
 16284                           fsr2h	equ	0xFDA
 16285                           fsr2l	equ	0xFD9
 16286                           status	equ	0xFD8
 16287                           
 16288 ;; *************** function ___lwmod *****************
 16289 ;; Defined at:
 16290 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16291 ;; Parameters:    Size  Location     Type
 16292 ;;  dividend        2    7[BANK0 ] unsigned int 
 16293 ;;  divisor         2    9[BANK0 ] unsigned int 
 16294 ;; Auto vars:     Size  Location     Type
 16295 ;;  counter         1   11[BANK0 ] unsigned char 
 16296 ;; Return value:  Size  Location     Type
 16297 ;;                  2    7[BANK0 ] unsigned int 
 16298 ;; Registers used:
 16299 ;;		wreg, status,2, status,0
 16300 ;; Tracked objects:
 16301 ;;		On entry : 0/0
 16302 ;;		On exit  : 0/0
 16303 ;;		Unchanged: 0/0
 16304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16305 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16308 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16309 ;;Total ram usage:        5 bytes
 16310 ;; Hardware stack levels used:    1
 16311 ;; Hardware stack levels required when called:    7
 16312 ;; This function calls:
 16313 ;;		Nothing
 16314 ;; This function is called by:
 16315 ;;		_printf
 16316 ;; This function uses a non-reentrant model
 16317 ;;
 16318                           
 16319                           	psect	text55
 16320  004548                     __ptext55:
 16321                           	opt stack 0
 16322  004548                     ___lwmod:
 16323                           	opt stack 19
 16324                           
 16325                           ; BSR set to: 0
 16326                           ;incstack = 0
 16327  004548  0100               	movlb	0	; () banked
 16328  00454A  5189               	movf	___lwmod@divisor& (0+255),w,b
 16329  00454C  0100               	movlb	0	; () banked
 16330  00454E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16331  004550  B4D8               	btfsc	status,2,c
 16332  004552  D026               	goto	l1806
 16333                           
 16334                           ; BSR set to: 0
 16335  004554  0E01               	movlw	1
 16336  004556  0100               	movlb	0	; () banked
 16337  004558  6F8B               	movwf	___lwmod@counter& (0+255),b
 16338  00455A  D006               	goto	l5711
 16339  00455C                     l5709:
 16340                           
 16341                           ; BSR set to: 0
 16342  00455C  0100               	movlb	0	; () banked
 16343  00455E  90D8               	bcf	status,0,c
 16344  004560  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16345  004562  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16346  004564  0100               	movlb	0	; () banked
 16347  004566  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16348  004568                     l5711:
 16349                           
 16350                           ; BSR set to: 0
 16351  004568  0100               	movlb	0	; () banked
 16352  00456A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16353  00456C  D7F7               	goto	l5709
 16354  00456E                     l5713:
 16355                           
 16356                           ; BSR set to: 0
 16357  00456E  0100               	movlb	0	; () banked
 16358  004570  5189               	movf	___lwmod@divisor& (0+255),w,b
 16359  004572  0100               	movlb	0	; () banked
 16360  004574  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16361  004576  0100               	movlb	0	; () banked
 16362  004578  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16363  00457A  0100               	movlb	0	; () banked
 16364  00457C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16365  00457E  A0D8               	btfss	status,0,c
 16366  004580  D008               	goto	l5717
 16367                           
 16368                           ; BSR set to: 0
 16369  004582  0100               	movlb	0	; () banked
 16370  004584  5189               	movf	___lwmod@divisor& (0+255),w,b
 16371  004586  0100               	movlb	0	; () banked
 16372  004588  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16373  00458A  0100               	movlb	0	; () banked
 16374  00458C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16375  00458E  0100               	movlb	0	; () banked
 16376  004590  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16377  004592                     l5717:
 16378                           
 16379                           ; BSR set to: 0
 16380  004592  0100               	movlb	0	; () banked
 16381  004594  90D8               	bcf	status,0,c
 16382  004596  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16383  004598  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16384                           
 16385                           ; BSR set to: 0
 16386  00459A  0100               	movlb	0	; () banked
 16387  00459C  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16388  00459E  D7E7               	goto	l5713
 16389  0045A0                     l1806:
 16390                           
 16391                           ; BSR set to: 0
 16392  0045A0  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16393  0045A4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16394                           
 16395                           ; BSR set to: 0
 16396  0045A8  0012               	return		;funcret
 16397  0045AA                     __end_of___lwmod:
 16398                           	opt stack 0
 16399                           tblptru	equ	0xFF8
 16400                           tblptrh	equ	0xFF7
 16401                           tblptrl	equ	0xFF6
 16402                           tablat	equ	0xFF5
 16403                           prodh	equ	0xFF4
 16404                           prodl	equ	0xFF3
 16405                           intcon	equ	0xFF2
 16406                           intcon2	equ	0xFF1
 16407                           intcon3	equ	0xFF0
 16408                           indf0	equ	0xFEF
 16409                           postinc0	equ	0xFEE
 16410                           fsr0h	equ	0xFEA
 16411                           fsr0l	equ	0xFE9
 16412                           wreg	equ	0xFE8
 16413                           postdec1	equ	0xFE5
 16414                           fsr1l	equ	0xFE1
 16415                           indf2	equ	0xFDF
 16416                           postinc2	equ	0xFDE
 16417                           postdec2	equ	0xFDD
 16418                           fsr2h	equ	0xFDA
 16419                           fsr2l	equ	0xFD9
 16420                           status	equ	0xFD8
 16421                           
 16422 ;; *************** function ___lwdiv *****************
 16423 ;; Defined at:
 16424 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16425 ;; Parameters:    Size  Location     Type
 16426 ;;  dividend        2    0[BANK0 ] unsigned int 
 16427 ;;  divisor         2    2[BANK0 ] unsigned int 
 16428 ;; Auto vars:     Size  Location     Type
 16429 ;;  quotient        2    4[BANK0 ] unsigned int 
 16430 ;;  counter         1    6[BANK0 ] unsigned char 
 16431 ;; Return value:  Size  Location     Type
 16432 ;;                  2    0[BANK0 ] unsigned int 
 16433 ;; Registers used:
 16434 ;;		wreg, status,2, status,0
 16435 ;; Tracked objects:
 16436 ;;		On entry : 0/0
 16437 ;;		On exit  : 0/0
 16438 ;;		Unchanged: 0/0
 16439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16440 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16441 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16443 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16444 ;;Total ram usage:        7 bytes
 16445 ;; Hardware stack levels used:    1
 16446 ;; Hardware stack levels required when called:    7
 16447 ;; This function calls:
 16448 ;;		Nothing
 16449 ;; This function is called by:
 16450 ;;		_printf
 16451 ;; This function uses a non-reentrant model
 16452 ;;
 16453                           
 16454                           	psect	text56
 16455  00430E                     __ptext56:
 16456                           	opt stack 0
 16457  00430E                     ___lwdiv:
 16458                           	opt stack 19
 16459                           
 16460                           ; BSR set to: 0
 16461                           ;incstack = 0
 16462  00430E  0E00               	movlw	0
 16463  004310  0100               	movlb	0	; () banked
 16464  004312  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16465  004314  0E00               	movlw	0
 16466  004316  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16467                           
 16468                           ; BSR set to: 0
 16469  004318  0100               	movlb	0	; () banked
 16470  00431A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16471  00431C  0100               	movlb	0	; () banked
 16472  00431E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16473  004320  B4D8               	btfsc	status,2,c
 16474  004322  D02C               	goto	l1796
 16475                           
 16476                           ; BSR set to: 0
 16477  004324  0E01               	movlw	1
 16478  004326  0100               	movlb	0	; () banked
 16479  004328  6F86               	movwf	___lwdiv@counter& (0+255),b
 16480  00432A  D006               	goto	l5691
 16481  00432C                     l5689:
 16482                           
 16483                           ; BSR set to: 0
 16484  00432C  0100               	movlb	0	; () banked
 16485  00432E  90D8               	bcf	status,0,c
 16486  004330  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16487  004332  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16488  004334  0100               	movlb	0	; () banked
 16489  004336  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16490  004338                     l5691:
 16491                           
 16492                           ; BSR set to: 0
 16493  004338  0100               	movlb	0	; () banked
 16494  00433A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16495  00433C  D7F7               	goto	l5689
 16496  00433E                     l5693:
 16497                           
 16498                           ; BSR set to: 0
 16499  00433E  0100               	movlb	0	; () banked
 16500  004340  90D8               	bcf	status,0,c
 16501  004342  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16502  004344  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16503                           
 16504                           ; BSR set to: 0
 16505  004346  0100               	movlb	0	; () banked
 16506  004348  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16507  00434A  0100               	movlb	0	; () banked
 16508  00434C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16509  00434E  0100               	movlb	0	; () banked
 16510  004350  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16511  004352  0100               	movlb	0	; () banked
 16512  004354  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16513  004356  A0D8               	btfss	status,0,c
 16514  004358  D00A               	goto	l5701
 16515                           
 16516                           ; BSR set to: 0
 16517  00435A  0100               	movlb	0	; () banked
 16518  00435C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16519  00435E  0100               	movlb	0	; () banked
 16520  004360  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16521  004362  0100               	movlb	0	; () banked
 16522  004364  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16523  004366  0100               	movlb	0	; () banked
 16524  004368  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16525                           
 16526                           ; BSR set to: 0
 16527  00436A  0100               	movlb	0	; () banked
 16528  00436C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16529  00436E                     l5701:
 16530                           
 16531                           ; BSR set to: 0
 16532  00436E  0100               	movlb	0	; () banked
 16533  004370  90D8               	bcf	status,0,c
 16534  004372  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16535  004374  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16536                           
 16537                           ; BSR set to: 0
 16538  004376  0100               	movlb	0	; () banked
 16539  004378  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16540  00437A  D7E1               	goto	l5693
 16541  00437C                     l1796:
 16542                           
 16543                           ; BSR set to: 0
 16544  00437C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16545  004380  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16546                           
 16547                           ; BSR set to: 0
 16548  004384  0012               	return		;funcret
 16549  004386                     __end_of___lwdiv:
 16550                           	opt stack 0
 16551                           tblptru	equ	0xFF8
 16552                           tblptrh	equ	0xFF7
 16553                           tblptrl	equ	0xFF6
 16554                           tablat	equ	0xFF5
 16555                           prodh	equ	0xFF4
 16556                           prodl	equ	0xFF3
 16557                           intcon	equ	0xFF2
 16558                           intcon2	equ	0xFF1
 16559                           intcon3	equ	0xFF0
 16560                           indf0	equ	0xFEF
 16561                           postinc0	equ	0xFEE
 16562                           fsr0h	equ	0xFEA
 16563                           fsr0l	equ	0xFE9
 16564                           wreg	equ	0xFE8
 16565                           postdec1	equ	0xFE5
 16566                           fsr1l	equ	0xFE1
 16567                           indf2	equ	0xFDF
 16568                           postinc2	equ	0xFDE
 16569                           postdec2	equ	0xFDD
 16570                           fsr2h	equ	0xFDA
 16571                           fsr2l	equ	0xFD9
 16572                           status	equ	0xFD8
 16573                           
 16574 ;; *************** function _lcdInst *****************
 16575 ;; Defined at:
 16576 ;;		line 15 in file "lcd.c"
 16577 ;; Parameters:    Size  Location     Type
 16578 ;;  data            1    wreg     unsigned char 
 16579 ;; Auto vars:     Size  Location     Type
 16580 ;;  data            1    2[BANK0 ] unsigned char 
 16581 ;; Return value:  Size  Location     Type
 16582 ;;                  1    wreg      void 
 16583 ;; Registers used:
 16584 ;;		wreg, status,2, status,0, cstack
 16585 ;; Tracked objects:
 16586 ;;		On entry : 0/0
 16587 ;;		On exit  : 0/0
 16588 ;;		Unchanged: 0/0
 16589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16591 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16593 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16594 ;;Total ram usage:        1 bytes
 16595 ;; Hardware stack levels used:    1
 16596 ;; Hardware stack levels required when called:    8
 16597 ;; This function calls:
 16598 ;;		_lcdNibble
 16599 ;; This function is called by:
 16600 ;;		_UI
 16601 ;;		_change_state_to_menu_start
 16602 ;;		_change_state_to_menu_12
 16603 ;;		_change_state_to_menu_22
 16604 ;;		_initLCD
 16605 ;;		_printRTC
 16606 ;;		_Loading
 16607 ;;		_EEPROM_write
 16608 ;;		_Test
 16609 ;;		_algorithmTest
 16610 ;;		_sensorTest
 16611 ;;		_actuatorTest
 16612 ;;		_BothServos
 16613 ;;		_PortTestA5
 16614 ;;		_PusherTest
 16615 ;;		_SpeedTest
 16616 ;;		_BlockerTest
 16617 ;;		_ToggleTestA5
 16618 ;; This function uses a non-reentrant model
 16619 ;;
 16620                           
 16621                           	psect	text57
 16622  004ECE                     __ptext57:
 16623                           	opt stack 0
 16624  004ECE                     _lcdInst:
 16625                           	opt stack 20
 16626                           
 16627                           ; BSR set to: 0
 16628                           ;incstack = 0
 16629                           ;lcdInst@data stored from wreg
 16630  004ECE  0100               	movlb	0	; () banked
 16631  004ED0  6F82               	movwf	lcdInst@data& (0+255),b
 16632                           
 16633                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16634  004ED2  948C               	bcf	3980,2,c	;volatile
 16635                           
 16636                           ;lcd.c: 17: lcdNibble(data);
 16637  004ED4  0100               	movlb	0	; () banked
 16638  004ED6  5182               	movf	lcdInst@data& (0+255),w,b
 16639  004ED8  EC70  F022         	call	_lcdNibble
 16640  004EDC  0012               	return		;funcret
 16641  004EDE                     __end_of_lcdInst:
 16642                           	opt stack 0
 16643                           tblptru	equ	0xFF8
 16644                           tblptrh	equ	0xFF7
 16645                           tblptrl	equ	0xFF6
 16646                           tablat	equ	0xFF5
 16647                           prodh	equ	0xFF4
 16648                           prodl	equ	0xFF3
 16649                           intcon	equ	0xFF2
 16650                           intcon2	equ	0xFF1
 16651                           intcon3	equ	0xFF0
 16652                           indf0	equ	0xFEF
 16653                           postinc0	equ	0xFEE
 16654                           fsr0h	equ	0xFEA
 16655                           fsr0l	equ	0xFE9
 16656                           wreg	equ	0xFE8
 16657                           postdec1	equ	0xFE5
 16658                           fsr1l	equ	0xFE1
 16659                           indf2	equ	0xFDF
 16660                           postinc2	equ	0xFDE
 16661                           postdec2	equ	0xFDD
 16662                           fsr2h	equ	0xFDA
 16663                           fsr2l	equ	0xFD9
 16664                           status	equ	0xFD8
 16665                           
 16666 ;; *************** function _lcdNibble *****************
 16667 ;; Defined at:
 16668 ;;		line 25 in file "lcd.c"
 16669 ;; Parameters:    Size  Location     Type
 16670 ;;  data            1    wreg     unsigned char 
 16671 ;; Auto vars:     Size  Location     Type
 16672 ;;  data            1    1[BANK0 ] unsigned char 
 16673 ;;  temp            1    0[BANK0 ] unsigned char 
 16674 ;; Return value:  Size  Location     Type
 16675 ;;                  1    wreg      void 
 16676 ;; Registers used:
 16677 ;;		wreg, status,2, status,0
 16678 ;; Tracked objects:
 16679 ;;		On entry : 0/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16684 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16686 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16687 ;;Total ram usage:        2 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; Hardware stack levels required when called:    7
 16690 ;; This function calls:
 16691 ;;		Nothing
 16692 ;; This function is called by:
 16693 ;;		_lcdInst
 16694 ;;		_putch
 16695 ;; This function uses a non-reentrant model
 16696 ;;
 16697                           
 16698                           	psect	text58
 16699  0044E0                     __ptext58:
 16700                           	opt stack 0
 16701  0044E0                     _lcdNibble:
 16702                           	opt stack 20
 16703                           
 16704                           ;incstack = 0
 16705                           ;lcdNibble@data stored from wreg
 16706  0044E0  0100               	movlb	0	; () banked
 16707  0044E2  6F81               	movwf	lcdNibble@data& (0+255),b
 16708                           
 16709                           ;lcd.c: 27: char temp = data & 0xF0;
 16710  0044E4  0100               	movlb	0	; () banked
 16711  0044E6  5181               	movf	lcdNibble@data& (0+255),w,b
 16712  0044E8  0BF0               	andlw	240
 16713  0044EA  0100               	movlb	0	; () banked
 16714  0044EC  6F80               	movwf	lcdNibble@temp& (0+255),b
 16715                           
 16716                           ;lcd.c: 28: LATD = LATD & 0x0F;
 16717  0044EE  508C               	movf	3980,w,c	;volatile
 16718  0044F0  0B0F               	andlw	15
 16719  0044F2  6E8C               	movwf	3980,c	;volatile
 16720                           
 16721                           ;lcd.c: 29: LATD = temp | LATD;
 16722  0044F4  0100               	movlb	0	; () banked
 16723  0044F6  5180               	movf	lcdNibble@temp& (0+255),w,b
 16724  0044F8  108C               	iorwf	3980,w,c	;volatile
 16725  0044FA  6E8C               	movwf	3980,c	;volatile
 16726                           
 16727                           ; BSR set to: 0
 16728                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 16729  0044FC  868C               	bsf	3980,3,c	;volatile
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16733  0044FE  0E42               	movlw	66
 16734  004500                     u9507:
 16735  004500  2EE8               	decfsz	wreg,f,c
 16736  004502  D7FE               	bra	u9507
 16737  004504  D000               	nop2	
 16738                           
 16739                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 16740  004506  968C               	bcf	3980,3,c	;volatile
 16741                           
 16742                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16743  004508  0E42               	movlw	66
 16744  00450A                     u9517:
 16745  00450A  2EE8               	decfsz	wreg,f,c
 16746  00450C  D7FE               	bra	u9517
 16747  00450E  D000               	nop2	
 16748                           
 16749                           ;lcd.c: 36: data = data << 4;
 16750  004510  0100               	movlb	0	; () banked
 16751  004512  3981               	swapf	lcdNibble@data& (0+255),w,b
 16752  004514  0BF0               	andlw	240
 16753  004516  0100               	movlb	0	; () banked
 16754  004518  6F81               	movwf	lcdNibble@data& (0+255),b
 16755                           
 16756                           ;lcd.c: 38: temp = data & 0xF0;
 16757  00451A  0100               	movlb	0	; () banked
 16758  00451C  5181               	movf	lcdNibble@data& (0+255),w,b
 16759  00451E  0BF0               	andlw	240
 16760  004520  0100               	movlb	0	; () banked
 16761  004522  6F80               	movwf	lcdNibble@temp& (0+255),b
 16762                           
 16763                           ;lcd.c: 39: LATD = LATD & 0x0F;
 16764  004524  508C               	movf	3980,w,c	;volatile
 16765  004526  0B0F               	andlw	15
 16766  004528  6E8C               	movwf	3980,c	;volatile
 16767                           
 16768                           ;lcd.c: 40: LATD = temp | LATD;
 16769  00452A  0100               	movlb	0	; () banked
 16770  00452C  5180               	movf	lcdNibble@temp& (0+255),w,b
 16771  00452E  108C               	iorwf	3980,w,c	;volatile
 16772  004530  6E8C               	movwf	3980,c	;volatile
 16773                           
 16774                           ; BSR set to: 0
 16775                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 16776  004532  868C               	bsf	3980,3,c	;volatile
 16777                           
 16778                           ; BSR set to: 0
 16779                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16780  004534  0E42               	movlw	66
 16781  004536                     u9527:
 16782  004536  2EE8               	decfsz	wreg,f,c
 16783  004538  D7FE               	bra	u9527
 16784  00453A  D000               	nop2	
 16785                           
 16786                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 16787  00453C  968C               	bcf	3980,3,c	;volatile
 16788                           
 16789                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16790  00453E  0E42               	movlw	66
 16791  004540                     u9537:
 16792  004540  2EE8               	decfsz	wreg,f,c
 16793  004542  D7FE               	bra	u9537
 16794  004544  D000               	nop2	
 16795  004546  0012               	return		;funcret
 16796  004548                     __end_of_lcdNibble:
 16797                           	opt stack 0
 16798                           tblptru	equ	0xFF8
 16799                           tblptrh	equ	0xFF7
 16800                           tblptrl	equ	0xFF6
 16801                           tablat	equ	0xFF5
 16802                           prodh	equ	0xFF4
 16803                           prodl	equ	0xFF3
 16804                           intcon	equ	0xFF2
 16805                           intcon2	equ	0xFF1
 16806                           intcon3	equ	0xFF0
 16807                           indf0	equ	0xFEF
 16808                           postinc0	equ	0xFEE
 16809                           fsr0h	equ	0xFEA
 16810                           fsr0l	equ	0xFE9
 16811                           wreg	equ	0xFE8
 16812                           postdec1	equ	0xFE5
 16813                           fsr1l	equ	0xFE1
 16814                           indf2	equ	0xFDF
 16815                           postinc2	equ	0xFDE
 16816                           postdec2	equ	0xFDD
 16817                           fsr2h	equ	0xFDA
 16818                           fsr2l	equ	0xFD9
 16819                           status	equ	0xFD8
 16820                           
 16821 ;; *************** function _handler *****************
 16822 ;; Defined at:
 16823 ;;		line 16 in file "interruptHandler.c"
 16824 ;; Parameters:    Size  Location     Type
 16825 ;;		None
 16826 ;; Auto vars:     Size  Location     Type
 16827 ;;		None
 16828 ;; Return value:  Size  Location     Type
 16829 ;;                  1    wreg      void 
 16830 ;; Registers used:
 16831 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16832 ;; Tracked objects:
 16833 ;;		On entry : 0/0
 16834 ;;		On exit  : 0/0
 16835 ;;		Unchanged: 0/0
 16836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16839 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16840 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16841 ;;Total ram usage:       16 bytes
 16842 ;; Hardware stack levels used:    1
 16843 ;; Hardware stack levels required when called:    6
 16844 ;; This function calls:
 16845 ;;		_printSortTimer
 16846 ;;		_updateMenu
 16847 ;; This function is called by:
 16848 ;;		Interrupt level 2
 16849 ;; This function uses a non-reentrant model
 16850 ;;
 16851                           
 16852                           	psect	intcode
 16853  000008                     __pintcode:
 16854                           	opt stack 0
 16855  000008                     _handler:
 16856                           	opt stack 18
 16857                           
 16858                           ;incstack = 0
 16859  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16860  00000A  ED1E  F01B         	call	int_func,f	;refresh shadow registers
 16861                           tblptru	equ	0xFF8
 16862                           tblptrh	equ	0xFF7
 16863                           tblptrl	equ	0xFF6
 16864                           tablat	equ	0xFF5
 16865                           prodh	equ	0xFF4
 16866                           prodl	equ	0xFF3
 16867                           intcon	equ	0xFF2
 16868                           intcon2	equ	0xFF1
 16869                           intcon3	equ	0xFF0
 16870                           indf0	equ	0xFEF
 16871                           postinc0	equ	0xFEE
 16872                           fsr0h	equ	0xFEA
 16873                           fsr0l	equ	0xFE9
 16874                           wreg	equ	0xFE8
 16875                           postdec1	equ	0xFE5
 16876                           fsr1l	equ	0xFE1
 16877                           indf2	equ	0xFDF
 16878                           postinc2	equ	0xFDE
 16879                           postdec2	equ	0xFDD
 16880                           fsr2h	equ	0xFDA
 16881                           fsr2l	equ	0xFD9
 16882                           status	equ	0xFD8
 16883                           
 16884                           	psect	intcode_body
 16885  00363C                     __pintcode_body:
 16886                           	opt stack 18
 16887  00363C                     int_func:
 16888                           	opt stack 18
 16889  00363C  0006               	pop		; remove dummy address from shadow register refresh
 16890  00363E  CFFA F04B          	movff	pclath,??_handler+2
 16891  003642  CFFB F04C          	movff	pclatu,??_handler+3
 16892  003646  CFE9 F04D          	movff	fsr0l,??_handler+4
 16893  00364A  CFEA F04E          	movff	fsr0h,??_handler+5
 16894  00364E  CFE1 F04F          	movff	fsr1l,??_handler+6
 16895  003652  CFE2 F050          	movff	fsr1h,??_handler+7
 16896  003656  CFD9 F051          	movff	fsr2l,??_handler+8
 16897  00365A  CFDA F052          	movff	fsr2h,??_handler+9
 16898  00365E  CFF3 F053          	movff	prodl,??_handler+10
 16899  003662  CFF4 F054          	movff	prodh,??_handler+11
 16900  003666  CFF6 F055          	movff	tblptrl,??_handler+12
 16901  00366A  CFF7 F056          	movff	tblptrh,??_handler+13
 16902  00366E  CFF8 F057          	movff	tblptru,??_handler+14
 16903  003672  CFF5 F058          	movff	tablat,??_handler+15
 16904                           
 16905                           ;interruptHandler.c: 18: if(INT1IF){
 16906  003676  A0F0               	btfss	intcon3,0,c	;volatile
 16907  003678  D02B               	goto	i2l8793
 16908                           
 16909                           ;interruptHandler.c: 19: INT1IF = 0;
 16910  00367A  90F0               	bcf	intcon3,0,c	;volatile
 16911                           
 16912                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 16913  00367C  0100               	movlb	0	; () banked
 16914  00367E  51FC               	movf	_machine_state& (0+255),w,b
 16915  003680  A4D8               	btfss	status,2,c
 16916  003682  D01B               	goto	i2l8787
 16917                           
 16918                           ; BSR set to: 0
 16919                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 16920  003684  3881               	swapf	3969,w,c	;volatile
 16921  003686  0B0F               	andlw	15
 16922  003688  0B0F               	andlw	15
 16923  00368A  6E49               	movwf	??_handler& (0+255),c
 16924  00368C  6A4A               	clrf	(??_handler+1)& (0+255),c
 16925  00368E  0EEF               	movlw	low _keys
 16926  003690  2449               	addwf	??_handler,w,c
 16927  003692  6EF6               	movwf	tblptrl,c
 16928  003694  0EFA               	movlw	high _keys
 16929  003696  204A               	addwfc	??_handler+1,w,c
 16930  003698  6EF7               	movwf	tblptrh,c
 16931  00369A                     	if	1	;There are 3 active tblptr bytes
 16932  00369A  6AF8               	clrf	tblptru,c
 16933  00369C  0E00               	movlw	low (__mediumconst shr (0+16))
 16934  00369E  22F8               	addwfc	tblptru,f,c
 16935  0036A0                     	endif
 16936  0036A0  0008               	tblrd		*
 16937  0036A2  CFF5 F07D          	movff	tablat,_input	;volatile
 16938                           
 16939                           ; BSR set to: 0
 16940                           ;interruptHandler.c: 23: if(input == '*'){
 16941  0036A6  0E2A               	movlw	42
 16942  0036A8  187D               	xorwf	_input,w,c	;volatile
 16943  0036AA  A4D8               	btfss	status,2,c
 16944  0036AC  D004               	goto	i2l8785
 16945                           
 16946                           ; BSR set to: 0
 16947                           ;interruptHandler.c: 24: machine_state = Testing_state;
 16948  0036AE  0E03               	movlw	3
 16949  0036B0  0100               	movlb	0	; () banked
 16950  0036B2  6FFC               	movwf	_machine_state& (0+255),b
 16951                           
 16952                           ;interruptHandler.c: 25: }
 16953  0036B4  D002               	goto	i2l8787
 16954  0036B6                     i2l8785:
 16955                           
 16956                           ; BSR set to: 0
 16957                           ;interruptHandler.c: 26: else{
 16958                           ;interruptHandler.c: 27: updateMenu();
 16959  0036B6  ECD0  F012         	call	_updateMenu	;wreg free
 16960  0036BA                     i2l8787:
 16961                           
 16962                           ;interruptHandler.c: 28: }
 16963                           ;interruptHandler.c: 29: }
 16964                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 16965  0036BA  0100               	movlb	0	; () banked
 16966  0036BC  05FC               	decf	_machine_state& (0+255),w,b
 16967  0036BE  A4D8               	btfss	status,2,c
 16968  0036C0  D007               	goto	i2l8793
 16969                           
 16970                           ; BSR set to: 0
 16971                           ;interruptHandler.c: 31: if(input == '*'){
 16972  0036C2  0E2A               	movlw	42
 16973  0036C4  187D               	xorwf	_input,w,c	;volatile
 16974  0036C6  A4D8               	btfss	status,2,c
 16975  0036C8  D003               	goto	i2l8793
 16976                           
 16977                           ; BSR set to: 0
 16978                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 16979  0036CA  0E02               	movlw	2
 16980  0036CC  0100               	movlb	0	; () banked
 16981  0036CE  6FFC               	movwf	_machine_state& (0+255),b
 16982  0036D0                     i2l8793:
 16983                           
 16984                           ;interruptHandler.c: 33: }
 16985                           ;interruptHandler.c: 34: }
 16986                           ;interruptHandler.c: 35: }
 16987                           ;interruptHandler.c: 38: if(TMR0IF){
 16988  0036D0  A4F2               	btfss	intcon,2,c	;volatile
 16989  0036D2  D00C               	goto	i2l8807
 16990                           
 16991                           ;interruptHandler.c: 39: TMR0IF = 0;
 16992  0036D4  94F2               	bcf	intcon,2,c	;volatile
 16993                           
 16994                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 16995  0036D6  0100               	movlb	0	; () banked
 16996  0036D8  05FC               	decf	_machine_state& (0+255),w,b
 16997  0036DA  A4D8               	btfss	status,2,c
 16998  0036DC  D007               	goto	i2l8807
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;interruptHandler.c: 41: printSortTimer();
 17002  0036DE  EC7B  F017         	call	_printSortTimer	;wreg free
 17003                           
 17004                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17005  0036E2  0E85               	movlw	133
 17006  0036E4  6ED7               	movwf	4055,c	;volatile
 17007                           
 17008                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17009  0036E6  0EEE               	movlw	238
 17010  0036E8  6ED6               	movwf	4054,c	;volatile
 17011                           
 17012                           ;interruptHandler.c: 45: TMR0ON = 1;
 17013  0036EA  8ED5               	bsf	4053,7,c	;volatile
 17014  0036EC                     i2l8807:
 17015                           
 17016                           ;interruptHandler.c: 46: }
 17017                           ;interruptHandler.c: 47: }
 17018                           ;interruptHandler.c: 50: if(TMR1IF){
 17019  0036EC  A09E               	btfss	3998,0,c	;volatile
 17020  0036EE  D024               	goto	i2l8831
 17021                           
 17022                           ;interruptHandler.c: 51: TMR1IF = 0;
 17023  0036F0  909E               	bcf	3998,0,c	;volatile
 17024                           
 17025                           ;interruptHandler.c: 52: TMR1ON = 0;
 17026  0036F2  90CD               	bcf	4045,0,c	;volatile
 17027                           
 17028                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17029  0036F4  0100               	movlb	0	; () banked
 17030  0036F6  05FC               	decf	_machine_state& (0+255),w,b
 17031  0036F8  A4D8               	btfss	status,2,c
 17032  0036FA  D01E               	goto	i2l8831
 17033                           
 17034                           ; BSR set to: 0
 17035                           ;interruptHandler.c: 54: if(was_low_1){
 17036  0036FC  5079               	movf	_was_low_1,w,c	;volatile
 17037  0036FE  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17038  003700  B4D8               	btfsc	status,2,c
 17039  003702  D00A               	goto	i2l902
 17040                           
 17041                           ; BSR set to: 0
 17042                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17043  003704  828B               	bsf	3979,1,c	;volatile
 17044                           
 17045                           ; BSR set to: 0
 17046                           ;interruptHandler.c: 56: was_low_1 = 0;
 17047  003706  0E00               	movlw	0
 17048  003708  6E7A               	movwf	_was_low_1+1,c	;volatile
 17049  00370A  0E00               	movlw	0
 17050  00370C  6E79               	movwf	_was_low_1,c	;volatile
 17051                           
 17052                           ; BSR set to: 0
 17053                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17054  00370E  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 17055                           
 17056                           ; BSR set to: 0
 17057                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17058  003712  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 17059                           
 17060                           ;interruptHandler.c: 59: }
 17061  003716  D00F               	goto	i2l8829
 17062  003718                     i2l902:
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;interruptHandler.c: 60: else{
 17066                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17067  003718  928B               	bcf	3979,1,c	;volatile
 17068                           
 17069                           ; BSR set to: 0
 17070                           ;interruptHandler.c: 62: was_low_1 = 1;
 17071  00371A  0E00               	movlw	0
 17072  00371C  6E7A               	movwf	_was_low_1+1,c	;volatile
 17073  00371E  0E01               	movlw	1
 17074  003720  6E79               	movwf	_was_low_1,c	;volatile
 17075                           
 17076                           ; BSR set to: 0
 17077                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17078  003722  0101               	movlb	1	; () banked
 17079  003724  511C               	movf	_servoTimes& (0+255),w,b
 17080  003726  0800               	sublw	0
 17081  003728  0F20               	addlw	32
 17082  00372A  6ECF               	movwf	4047,c	;volatile
 17083                           
 17084                           ; BSR set to: 1
 17085                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17086  00372C  0101               	movlb	1	; () banked
 17087  00372E  511E               	movf	(_servoTimes+2)& (0+255),w,b
 17088  003730  0800               	sublw	0
 17089  003732  0F20               	addlw	32
 17090  003734  6ECE               	movwf	4046,c	;volatile
 17091  003736                     i2l8829:
 17092                           
 17093                           ;interruptHandler.c: 65: }
 17094                           ;interruptHandler.c: 66: TMR1ON = 1;
 17095  003736  80CD               	bsf	4045,0,c	;volatile
 17096  003738                     i2l8831:
 17097                           
 17098                           ;interruptHandler.c: 67: }
 17099                           ;interruptHandler.c: 68: }
 17100                           ;interruptHandler.c: 70: if(TMR3IF){
 17101  003738  A2A1               	btfss	4001,1,c	;volatile
 17102  00373A  D024               	goto	i2l908
 17103                           
 17104                           ;interruptHandler.c: 71: TMR3IF = 0;
 17105  00373C  92A1               	bcf	4001,1,c	;volatile
 17106                           
 17107                           ;interruptHandler.c: 72: TMR3ON = 0;
 17108  00373E  90B1               	bcf	4017,0,c	;volatile
 17109                           
 17110                           ;interruptHandler.c: 73: if(machine_state == Sorting_state){
 17111  003740  0100               	movlb	0	; () banked
 17112  003742  05FC               	decf	_machine_state& (0+255),w,b
 17113  003744  A4D8               	btfss	status,2,c
 17114  003746  D01E               	goto	i2l908
 17115                           
 17116                           ; BSR set to: 0
 17117                           ;interruptHandler.c: 74: if(was_low_3){
 17118  003748  507B               	movf	_was_low_3,w,c	;volatile
 17119  00374A  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17120  00374C  B4D8               	btfsc	status,2,c
 17121  00374E  D00A               	goto	i2l906
 17122                           
 17123                           ; BSR set to: 0
 17124                           ;interruptHandler.c: 75: LATCbits.LATC2 = 1;
 17125  003750  848B               	bsf	3979,2,c	;volatile
 17126                           
 17127                           ; BSR set to: 0
 17128                           ;interruptHandler.c: 76: was_low_3 = 0;
 17129  003752  0E00               	movlw	0
 17130  003754  6E7C               	movwf	_was_low_3+1,c	;volatile
 17131  003756  0E00               	movlw	0
 17132  003758  6E7B               	movwf	_was_low_3,c	;volatile
 17133                           
 17134                           ; BSR set to: 0
 17135                           ;interruptHandler.c: 77: TMR3H = servoTimes[2];
 17136  00375A  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;interruptHandler.c: 78: TMR3L = servoTimes[3];
 17140  00375E  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 17141                           
 17142                           ;interruptHandler.c: 79: }
 17143  003762  D00F               	goto	i2l8853
 17144  003764                     i2l906:
 17145                           
 17146                           ; BSR set to: 0
 17147                           ;interruptHandler.c: 80: else{
 17148                           ;interruptHandler.c: 81: LATCbits.LATC2 = 0;
 17149  003764  948B               	bcf	3979,2,c	;volatile
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;interruptHandler.c: 82: was_low_3 = 1;
 17153  003766  0E00               	movlw	0
 17154  003768  6E7C               	movwf	_was_low_3+1,c	;volatile
 17155  00376A  0E01               	movlw	1
 17156  00376C  6E7B               	movwf	_was_low_3,c	;volatile
 17157                           
 17158                           ; BSR set to: 0
 17159                           ;interruptHandler.c: 83: TMR3H = 20000 - servoTimes[2];
 17160  00376E  0101               	movlb	1	; () banked
 17161  003770  5120               	movf	(_servoTimes+4)& (0+255),w,b
 17162  003772  0800               	sublw	0
 17163  003774  0F20               	addlw	32
 17164  003776  6EB3               	movwf	4019,c	;volatile
 17165                           
 17166                           ; BSR set to: 1
 17167                           ;interruptHandler.c: 84: TMR3L = 20000 - servoTimes[3];
 17168  003778  0101               	movlb	1	; () banked
 17169  00377A  5122               	movf	(_servoTimes+6)& (0+255),w,b
 17170  00377C  0800               	sublw	0
 17171  00377E  0F20               	addlw	32
 17172  003780  6EB2               	movwf	4018,c	;volatile
 17173  003782                     i2l8853:
 17174                           
 17175                           ;interruptHandler.c: 85: }
 17176                           ;interruptHandler.c: 86: TMR3ON = 1;
 17177  003782  80B1               	bsf	4017,0,c	;volatile
 17178  003784                     i2l908:
 17179  003784  C058  FFF5         	movff	??_handler+15,tablat
 17180  003788  C057  FFF8         	movff	??_handler+14,tblptru
 17181  00378C  C056  FFF7         	movff	??_handler+13,tblptrh
 17182  003790  C055  FFF6         	movff	??_handler+12,tblptrl
 17183  003794  C054  FFF4         	movff	??_handler+11,prodh
 17184  003798  C053  FFF3         	movff	??_handler+10,prodl
 17185  00379C  C052  FFDA         	movff	??_handler+9,fsr2h
 17186  0037A0  C051  FFD9         	movff	??_handler+8,fsr2l
 17187  0037A4  C050  FFE2         	movff	??_handler+7,fsr1h
 17188  0037A8  C04F  FFE1         	movff	??_handler+6,fsr1l
 17189  0037AC  C04E  FFEA         	movff	??_handler+5,fsr0h
 17190  0037B0  C04D  FFE9         	movff	??_handler+4,fsr0l
 17191  0037B4  C04C  FFFB         	movff	??_handler+3,pclatu
 17192  0037B8  C04B  FFFA         	movff	??_handler+2,pclath
 17193  0037BC  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17194  0037BE  0011               	retfie		f
 17195  0037C0                     __end_of_handler:
 17196                           	opt stack 0
 17197                           pclatu	equ	0xFFB
 17198                           pclath	equ	0xFFA
 17199                           tblptru	equ	0xFF8
 17200                           tblptrh	equ	0xFF7
 17201                           tblptrl	equ	0xFF6
 17202                           tablat	equ	0xFF5
 17203                           prodh	equ	0xFF4
 17204                           prodl	equ	0xFF3
 17205                           intcon	equ	0xFF2
 17206                           intcon2	equ	0xFF1
 17207                           intcon3	equ	0xFF0
 17208                           indf0	equ	0xFEF
 17209                           postinc0	equ	0xFEE
 17210                           fsr0h	equ	0xFEA
 17211                           fsr0l	equ	0xFE9
 17212                           wreg	equ	0xFE8
 17213                           postdec1	equ	0xFE5
 17214                           fsr1h	equ	0xFE2
 17215                           fsr1l	equ	0xFE1
 17216                           indf2	equ	0xFDF
 17217                           postinc2	equ	0xFDE
 17218                           postdec2	equ	0xFDD
 17219                           fsr2h	equ	0xFDA
 17220                           fsr2l	equ	0xFD9
 17221                           status	equ	0xFD8
 17222                           
 17223 ;; *************** function _updateMenu *****************
 17224 ;; Defined at:
 17225 ;;		line 213 in file "UI.c"
 17226 ;; Parameters:    Size  Location     Type
 17227 ;;		None
 17228 ;; Auto vars:     Size  Location     Type
 17229 ;;		None
 17230 ;; Return value:  Size  Location     Type
 17231 ;;                  1    wreg      void 
 17232 ;; Registers used:
 17233 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17234 ;; Tracked objects:
 17235 ;;		On entry : 0/0
 17236 ;;		On exit  : 0/0
 17237 ;;		Unchanged: 0/0
 17238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17241 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17242 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17243 ;;Total ram usage:        2 bytes
 17244 ;; Hardware stack levels used:    1
 17245 ;; Hardware stack levels required when called:    5
 17246 ;; This function calls:
 17247 ;;		_change_state_to_logs_11
 17248 ;;		_change_state_to_logs_12
 17249 ;;		_change_state_to_logs_22
 17250 ;;		_change_state_to_logs_23
 17251 ;;		_change_state_to_logs_33
 17252 ;;		_change_state_to_logs_34
 17253 ;;		_change_state_to_menu_11
 17254 ;;		_change_state_to_menu_23
 17255 ;;		_dispLogs
 17256 ;;		_inputHandler
 17257 ;;		i2_change_state_to_menu_12
 17258 ;;		i2_change_state_to_menu_22
 17259 ;;		i2_change_state_to_menu_start
 17260 ;; This function is called by:
 17261 ;;		_handler
 17262 ;; This function uses a non-reentrant model
 17263 ;;
 17264                           
 17265                           	psect	text60
 17266  0025A0                     __ptext60:
 17267                           	opt stack 0
 17268  0025A0                     _updateMenu:
 17269                           	opt stack 18
 17270                           
 17271                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 17272                           
 17273                           ;incstack = 0
 17274  0025A0  0E00               	movlw	0
 17275  0025A2  6E78               	movwf	_up+1,c
 17276  0025A4  0E00               	movlw	0
 17277  0025A6  6E77               	movwf	_up,c
 17278  0025A8  0E00               	movlw	0
 17279  0025AA  6E62               	movwf	_down+1,c
 17280  0025AC  0E00               	movlw	0
 17281  0025AE  6E61               	movwf	_down,c
 17282  0025B0  0E00               	movlw	0
 17283  0025B2  6E64               	movwf	_enter+1,c
 17284  0025B4  0E00               	movlw	0
 17285  0025B6  6E63               	movwf	_enter,c
 17286  0025B8  0E00               	movlw	0
 17287  0025BA  6E5A               	movwf	_back+1,c
 17288  0025BC  0E00               	movlw	0
 17289  0025BE  6E59               	movwf	_back,c
 17290                           
 17291                           ;UI.c: 215: (INTCONbits.GIE = 0);
 17292  0025C0  9EF2               	bcf	intcon,7,c	;volatile
 17293                           
 17294                           ;UI.c: 217: if (inputHandler()
 17295                           ;UI.c: 220: ){
 17296  0025C2  EC86  F018         	call	_inputHandler	;wreg free
 17297  0025C6  502A               	movf	?_inputHandler,w,c
 17298  0025C8  102B               	iorwf	?_inputHandler+1,w,c
 17299  0025CA  A4D8               	btfss	status,2,c
 17300  0025CC  D112               	goto	i2l8511
 17301  0025CE  D146               	goto	i2l257
 17302  0025D0                     i2l8363:
 17303                           
 17304                           ;UI.c: 224: change_state_to_menu_11();
 17305  0025D0  EC81  F025         	call	_change_state_to_menu_11	;wreg free
 17306                           
 17307                           ;UI.c: 225: break;
 17308  0025D4  D143               	goto	i2l257
 17309  0025D6                     i2l8365:
 17310                           
 17311                           ;UI.c: 228: if(up){
 17312  0025D6  5077               	movf	_up,w,c
 17313  0025D8  1078               	iorwf	_up+1,w,c
 17314  0025DA  B4D8               	btfsc	status,2,c
 17315  0025DC  D003               	goto	i2l8369
 17316                           
 17317                           ;UI.c: 229: change_state_to_menu_23();
 17318  0025DE  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 17319                           
 17320                           ;UI.c: 230: }
 17321  0025E2  D13C               	goto	i2l257
 17322  0025E4                     i2l8369:
 17323                           
 17324                           ;UI.c: 231: else if(down){
 17325  0025E4  5061               	movf	_down,w,c
 17326  0025E6  1062               	iorwf	_down+1,w,c
 17327  0025E8  B4D8               	btfsc	status,2,c
 17328  0025EA  D003               	goto	i2l8373
 17329                           
 17330                           ;UI.c: 232: change_state_to_menu_12();
 17331  0025EC  EC51  F025         	call	i2_change_state_to_menu_12	;wreg free
 17332                           
 17333                           ;UI.c: 233: }
 17334  0025F0  D135               	goto	i2l257
 17335  0025F2                     i2l8373:
 17336                           
 17337                           ;UI.c: 234: else if(enter){
 17338  0025F2  5063               	movf	_enter,w,c
 17339  0025F4  1064               	iorwf	_enter+1,w,c
 17340  0025F6  B4D8               	btfsc	status,2,c
 17341  0025F8  D131               	goto	i2l257
 17342                           
 17343                           ;UI.c: 235: change_state_to_menu_start();
 17344  0025FA  ECAB  F026         	call	i2_change_state_to_menu_start	;wreg free
 17345                           
 17346                           ;UI.c: 236: }
 17347                           ;UI.c: 237: break;
 17348  0025FE  D12E               	goto	i2l257
 17349  002600                     i2l8377:
 17350                           
 17351                           ;UI.c: 240: if(up){
 17352  002600  5077               	movf	_up,w,c
 17353  002602  1078               	iorwf	_up+1,w,c
 17354  002604  B4D8               	btfsc	status,2,c
 17355  002606  D003               	goto	i2l8381
 17356                           
 17357                           ;UI.c: 241: change_state_to_menu_11();
 17358  002608  EC81  F025         	call	_change_state_to_menu_11	;wreg free
 17359                           
 17360                           ;UI.c: 242: }
 17361  00260C  D127               	goto	i2l257
 17362  00260E                     i2l8381:
 17363                           
 17364                           ;UI.c: 243: else if(down){
 17365  00260E  5061               	movf	_down,w,c
 17366  002610  1062               	iorwf	_down+1,w,c
 17367  002612  B4D8               	btfsc	status,2,c
 17368  002614  D011               	goto	i2l8397
 17369                           
 17370                           ;UI.c: 244: change_state_to_menu_23();
 17371  002616  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 17372                           
 17373                           ;UI.c: 245: }
 17374  00261A  D120               	goto	i2l257
 17375  00261C                     i2l8389:
 17376                           
 17377                           ;UI.c: 252: if(up){
 17378  00261C  5077               	movf	_up,w,c
 17379  00261E  1078               	iorwf	_up+1,w,c
 17380  002620  B4D8               	btfsc	status,2,c
 17381  002622  D003               	goto	i2l8393
 17382                           
 17383                           ;UI.c: 253: change_state_to_menu_11();
 17384  002624  EC81  F025         	call	_change_state_to_menu_11	;wreg free
 17385                           
 17386                           ;UI.c: 254: }
 17387  002628  D119               	goto	i2l257
 17388  00262A                     i2l8393:
 17389                           
 17390                           ;UI.c: 255: else if(down){
 17391  00262A  5061               	movf	_down,w,c
 17392  00262C  1062               	iorwf	_down+1,w,c
 17393  00262E  B4D8               	btfsc	status,2,c
 17394  002630  D003               	goto	i2l8397
 17395                           
 17396                           ;UI.c: 256: change_state_to_menu_23();
 17397  002632  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 17398                           
 17399                           ;UI.c: 257: }
 17400  002636  D112               	goto	i2l257
 17401  002638                     i2l8397:
 17402                           
 17403                           ;UI.c: 258: else if(enter){
 17404  002638  5063               	movf	_enter,w,c
 17405  00263A  1064               	iorwf	_enter+1,w,c
 17406  00263C  B4D8               	btfsc	status,2,c
 17407  00263E  D10E               	goto	i2l257
 17408                           
 17409                           ;UI.c: 259: machine_state = Sorting_state;
 17410  002640  0E01               	movlw	1
 17411  002642  0100               	movlb	0	; () banked
 17412  002644  6FFC               	movwf	_machine_state& (0+255),b
 17413                           
 17414                           ; BSR set to: 0
 17415                           ;UI.c: 260: }
 17416                           ;UI.c: 261: break;
 17417                           
 17418                           ; BSR set to: 0
 17419                           
 17420                           ; BSR set to: 0
 17421  002646  D10A               	goto	i2l257
 17422  002648                     i2l8401:
 17423                           
 17424                           ;UI.c: 264: if(up){
 17425  002648  5077               	movf	_up,w,c
 17426  00264A  1078               	iorwf	_up+1,w,c
 17427  00264C  B4D8               	btfsc	status,2,c
 17428  00264E  D003               	goto	i2l8405
 17429                           
 17430                           ;UI.c: 265: change_state_to_menu_22();
 17431  002650  EC39  F025         	call	i2_change_state_to_menu_22	;wreg free
 17432                           
 17433                           ;UI.c: 266: }
 17434  002654  D103               	goto	i2l257
 17435  002656                     i2l8405:
 17436                           
 17437                           ;UI.c: 267: else if(down){
 17438  002656  5061               	movf	_down,w,c
 17439  002658  1062               	iorwf	_down+1,w,c
 17440  00265A  B4D8               	btfsc	status,2,c
 17441  00265C  D003               	goto	i2l8409
 17442                           
 17443                           ;UI.c: 268: change_state_to_menu_11();
 17444  00265E  EC81  F025         	call	_change_state_to_menu_11	;wreg free
 17445                           
 17446                           ;UI.c: 269: }
 17447  002662  D0FC               	goto	i2l257
 17448  002664                     i2l8409:
 17449                           
 17450                           ;UI.c: 270: else if(enter){
 17451  002664  5063               	movf	_enter,w,c
 17452  002666  1064               	iorwf	_enter+1,w,c
 17453  002668  B4D8               	btfsc	status,2,c
 17454  00266A  D0F8               	goto	i2l257
 17455                           
 17456                           ;UI.c: 271: change_state_to_logs_11();
 17457  00266C  ECF9  F025         	call	_change_state_to_logs_11	;wreg free
 17458                           
 17459                           ;UI.c: 272: }
 17460                           ;UI.c: 273: break;
 17461  002670  D0F5               	goto	i2l257
 17462  002672                     i2l8413:
 17463                           
 17464                           ;UI.c: 276: if(up){
 17465  002672  5077               	movf	_up,w,c
 17466  002674  1078               	iorwf	_up+1,w,c
 17467  002676  B4D8               	btfsc	status,2,c
 17468  002678  D003               	goto	i2l8417
 17469                           
 17470                           ;UI.c: 277: change_state_to_logs_34();
 17471  00267A  EC99  F025         	call	_change_state_to_logs_34	;wreg free
 17472                           
 17473                           ;UI.c: 278: }
 17474  00267E  D0EE               	goto	i2l257
 17475  002680                     i2l8417:
 17476                           
 17477                           ;UI.c: 279: else if(down){
 17478  002680  5061               	movf	_down,w,c
 17479  002682  1062               	iorwf	_down+1,w,c
 17480  002684  B4D8               	btfsc	status,2,c
 17481  002686  D003               	goto	i2l8421
 17482                           
 17483                           ;UI.c: 280: change_state_to_logs_12();
 17484  002688  ECE1  F025         	call	_change_state_to_logs_12	;wreg free
 17485                           
 17486                           ;UI.c: 281: }
 17487  00268C  D0E7               	goto	i2l257
 17488  00268E                     i2l8421:
 17489                           
 17490                           ;UI.c: 282: else if(enter){
 17491  00268E  5063               	movf	_enter,w,c
 17492  002690  1064               	iorwf	_enter+1,w,c
 17493  002692  B4D8               	btfsc	status,2,c
 17494  002694  D007               	goto	i2l8425
 17495                           
 17496                           ;UI.c: 283: dispLogs(1);
 17497  002696  0E00               	movlw	0
 17498  002698  6E13               	movwf	dispLogs@myLog+1,c
 17499  00269A  0E01               	movlw	1
 17500  00269C  6E12               	movwf	dispLogs@myLog,c
 17501  00269E  ECE5  F026         	call	_dispLogs	;wreg free
 17502                           
 17503                           ;UI.c: 284: }
 17504  0026A2  D0DC               	goto	i2l257
 17505  0026A4                     i2l8425:
 17506                           
 17507                           ;UI.c: 285: else if(back){
 17508  0026A4  5059               	movf	_back,w,c
 17509  0026A6  105A               	iorwf	_back+1,w,c
 17510  0026A8  B4D8               	btfsc	status,2,c
 17511  0026AA  D0D8               	goto	i2l257
 17512                           
 17513                           ;UI.c: 286: change_state_to_menu_23();
 17514  0026AC  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 17515                           
 17516                           ;UI.c: 287: }
 17517                           ;UI.c: 288: break;
 17518  0026B0  D0D5               	goto	i2l257
 17519  0026B2                     i2l8429:
 17520                           
 17521                           ;UI.c: 291: if(up){
 17522  0026B2  5077               	movf	_up,w,c
 17523  0026B4  1078               	iorwf	_up+1,w,c
 17524  0026B6  B4D8               	btfsc	status,2,c
 17525  0026B8  D003               	goto	i2l8433
 17526                           
 17527                           ;UI.c: 292: change_state_to_logs_11();
 17528  0026BA  ECF9  F025         	call	_change_state_to_logs_11	;wreg free
 17529                           
 17530                           ;UI.c: 293: }
 17531  0026BE  D0CE               	goto	i2l257
 17532  0026C0                     i2l8433:
 17533                           
 17534                           ;UI.c: 294: else if(down){
 17535  0026C0  5061               	movf	_down,w,c
 17536  0026C2  1062               	iorwf	_down+1,w,c
 17537  0026C4  B4D8               	btfsc	status,2,c
 17538  0026C6  D003               	goto	i2l8437
 17539                           
 17540                           ;UI.c: 295: change_state_to_logs_23();
 17541  0026C8  EC3F  F026         	call	_change_state_to_logs_23	;wreg free
 17542                           
 17543                           ;UI.c: 296: }
 17544  0026CC  D0C7               	goto	i2l257
 17545  0026CE                     i2l8437:
 17546                           
 17547                           ;UI.c: 297: else if(enter){
 17548  0026CE  5063               	movf	_enter,w,c
 17549  0026D0  1064               	iorwf	_enter+1,w,c
 17550  0026D2  B4D8               	btfsc	status,2,c
 17551  0026D4  D007               	goto	i2l8441
 17552                           
 17553                           ;UI.c: 298: dispLogs(2);
 17554  0026D6  0E00               	movlw	0
 17555  0026D8  6E13               	movwf	dispLogs@myLog+1,c
 17556  0026DA  0E02               	movlw	2
 17557  0026DC  6E12               	movwf	dispLogs@myLog,c
 17558  0026DE  ECE5  F026         	call	_dispLogs	;wreg free
 17559                           
 17560                           ;UI.c: 299: }
 17561  0026E2  D0BC               	goto	i2l257
 17562  0026E4                     i2l8441:
 17563                           
 17564                           ;UI.c: 300: else if(back){
 17565  0026E4  5059               	movf	_back,w,c
 17566  0026E6  105A               	iorwf	_back+1,w,c
 17567  0026E8  B4D8               	btfsc	status,2,c
 17568  0026EA  D0B8               	goto	i2l257
 17569                           
 17570                           ;UI.c: 301: change_state_to_menu_23();
 17571  0026EC  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 17572                           
 17573                           ;UI.c: 302: }
 17574                           ;UI.c: 303: break;
 17575  0026F0  D0B5               	goto	i2l257
 17576  0026F2                     i2l8445:
 17577                           
 17578                           ;UI.c: 306: if(up){
 17579  0026F2  5077               	movf	_up,w,c
 17580  0026F4  1078               	iorwf	_up+1,w,c
 17581  0026F6  B4D8               	btfsc	status,2,c
 17582  0026F8  D003               	goto	i2l8449
 17583                           
 17584                           ;UI.c: 307: change_state_to_logs_11();
 17585  0026FA  ECF9  F025         	call	_change_state_to_logs_11	;wreg free
 17586                           
 17587                           ;UI.c: 308: }
 17588  0026FE  D0AE               	goto	i2l257
 17589  002700                     i2l8449:
 17590                           
 17591                           ;UI.c: 309: else if(down){
 17592  002700  5061               	movf	_down,w,c
 17593  002702  1062               	iorwf	_down+1,w,c
 17594  002704  B4D8               	btfsc	status,2,c
 17595  002706  D003               	goto	i2l8453
 17596                           
 17597                           ;UI.c: 310: change_state_to_logs_23();
 17598  002708  EC3F  F026         	call	_change_state_to_logs_23	;wreg free
 17599                           
 17600                           ;UI.c: 311: }
 17601  00270C  D0A7               	goto	i2l257
 17602  00270E                     i2l8453:
 17603                           
 17604                           ;UI.c: 312: else if(enter){
 17605  00270E  5063               	movf	_enter,w,c
 17606  002710  1064               	iorwf	_enter+1,w,c
 17607  002712  B4D8               	btfsc	status,2,c
 17608  002714  D007               	goto	i2l8457
 17609                           
 17610                           ;UI.c: 313: dispLogs(2);
 17611  002716  0E00               	movlw	0
 17612  002718  6E13               	movwf	dispLogs@myLog+1,c
 17613  00271A  0E02               	movlw	2
 17614  00271C  6E12               	movwf	dispLogs@myLog,c
 17615  00271E  ECE5  F026         	call	_dispLogs	;wreg free
 17616                           
 17617                           ;UI.c: 314: }
 17618  002722  D09C               	goto	i2l257
 17619  002724                     i2l8457:
 17620                           
 17621                           ;UI.c: 315: else if(back){
 17622  002724  5059               	movf	_back,w,c
 17623  002726  105A               	iorwf	_back+1,w,c
 17624  002728  B4D8               	btfsc	status,2,c
 17625  00272A  D098               	goto	i2l257
 17626                           
 17627                           ;UI.c: 316: change_state_to_menu_23();
 17628  00272C  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 17629                           
 17630                           ;UI.c: 317: }
 17631                           ;UI.c: 318: break;
 17632  002730  D095               	goto	i2l257
 17633  002732                     i2l8461:
 17634                           
 17635                           ;UI.c: 321: if(up){
 17636  002732  5077               	movf	_up,w,c
 17637  002734  1078               	iorwf	_up+1,w,c
 17638  002736  B4D8               	btfsc	status,2,c
 17639  002738  D003               	goto	i2l8465
 17640                           
 17641                           ;UI.c: 322: change_state_to_logs_22();
 17642  00273A  ECC9  F025         	call	_change_state_to_logs_22	;wreg free
 17643                           
 17644                           ;UI.c: 323: }
 17645  00273E  D08E               	goto	i2l257
 17646  002740                     i2l8465:
 17647                           
 17648                           ;UI.c: 324: else if(down){
 17649  002740  5061               	movf	_down,w,c
 17650  002742  1062               	iorwf	_down+1,w,c
 17651  002744  B4D8               	btfsc	status,2,c
 17652  002746  D003               	goto	i2l8469
 17653                           
 17654                           ;UI.c: 325: change_state_to_logs_34();
 17655  002748  EC99  F025         	call	_change_state_to_logs_34	;wreg free
 17656                           
 17657                           ;UI.c: 326: }
 17658  00274C  D087               	goto	i2l257
 17659  00274E                     i2l8469:
 17660                           
 17661                           ;UI.c: 327: else if(enter){
 17662  00274E  5063               	movf	_enter,w,c
 17663  002750  1064               	iorwf	_enter+1,w,c
 17664  002752  B4D8               	btfsc	status,2,c
 17665  002754  D007               	goto	i2l8473
 17666                           
 17667                           ;UI.c: 328: dispLogs(3);
 17668  002756  0E00               	movlw	0
 17669  002758  6E13               	movwf	dispLogs@myLog+1,c
 17670  00275A  0E03               	movlw	3
 17671  00275C  6E12               	movwf	dispLogs@myLog,c
 17672  00275E  ECE5  F026         	call	_dispLogs	;wreg free
 17673                           
 17674                           ;UI.c: 329: }
 17675  002762  D07C               	goto	i2l257
 17676  002764                     i2l8473:
 17677                           
 17678                           ;UI.c: 330: else if(back){
 17679  002764  5059               	movf	_back,w,c
 17680  002766  105A               	iorwf	_back+1,w,c
 17681  002768  B4D8               	btfsc	status,2,c
 17682  00276A  D078               	goto	i2l257
 17683                           
 17684                           ;UI.c: 331: change_state_to_menu_23();
 17685  00276C  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 17686                           
 17687                           ;UI.c: 332: }
 17688                           ;UI.c: 333: break;
 17689  002770  D075               	goto	i2l257
 17690  002772                     i2l8477:
 17691                           
 17692                           ;UI.c: 336: if(up){
 17693  002772  5077               	movf	_up,w,c
 17694  002774  1078               	iorwf	_up+1,w,c
 17695  002776  B4D8               	btfsc	status,2,c
 17696  002778  D003               	goto	i2l8481
 17697                           
 17698                           ;UI.c: 337: change_state_to_logs_22();
 17699  00277A  ECC9  F025         	call	_change_state_to_logs_22	;wreg free
 17700                           
 17701                           ;UI.c: 338: }
 17702  00277E  D06E               	goto	i2l257
 17703  002780                     i2l8481:
 17704                           
 17705                           ;UI.c: 339: else if(down){
 17706  002780  5061               	movf	_down,w,c
 17707  002782  1062               	iorwf	_down+1,w,c
 17708  002784  B4D8               	btfsc	status,2,c
 17709  002786  D003               	goto	i2l8485
 17710                           
 17711                           ;UI.c: 340: change_state_to_logs_34();
 17712  002788  EC99  F025         	call	_change_state_to_logs_34	;wreg free
 17713                           
 17714                           ;UI.c: 341: }
 17715  00278C  D067               	goto	i2l257
 17716  00278E                     i2l8485:
 17717                           
 17718                           ;UI.c: 342: else if(enter){
 17719  00278E  5063               	movf	_enter,w,c
 17720  002790  1064               	iorwf	_enter+1,w,c
 17721  002792  B4D8               	btfsc	status,2,c
 17722  002794  D007               	goto	i2l8489
 17723                           
 17724                           ;UI.c: 343: dispLogs(3);
 17725  002796  0E00               	movlw	0
 17726  002798  6E13               	movwf	dispLogs@myLog+1,c
 17727  00279A  0E03               	movlw	3
 17728  00279C  6E12               	movwf	dispLogs@myLog,c
 17729  00279E  ECE5  F026         	call	_dispLogs	;wreg free
 17730                           
 17731                           ;UI.c: 344: }
 17732  0027A2  D05C               	goto	i2l257
 17733  0027A4                     i2l8489:
 17734                           
 17735                           ;UI.c: 345: else if(back){
 17736  0027A4  5059               	movf	_back,w,c
 17737  0027A6  105A               	iorwf	_back+1,w,c
 17738  0027A8  B4D8               	btfsc	status,2,c
 17739  0027AA  D058               	goto	i2l257
 17740                           
 17741                           ;UI.c: 346: change_state_to_menu_23();
 17742  0027AC  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 17743                           
 17744                           ;UI.c: 347: }
 17745                           ;UI.c: 348: break;
 17746  0027B0  D055               	goto	i2l257
 17747  0027B2                     i2l8493:
 17748                           
 17749                           ;UI.c: 351: if(up){
 17750  0027B2  5077               	movf	_up,w,c
 17751  0027B4  1078               	iorwf	_up+1,w,c
 17752  0027B6  B4D8               	btfsc	status,2,c
 17753  0027B8  D003               	goto	i2l8497
 17754                           
 17755                           ;UI.c: 352: change_state_to_logs_33();
 17756  0027BA  ECB1  F025         	call	_change_state_to_logs_33	;wreg free
 17757                           
 17758                           ;UI.c: 353: }
 17759  0027BE  D04E               	goto	i2l257
 17760  0027C0                     i2l8497:
 17761                           
 17762                           ;UI.c: 354: else if(down){
 17763  0027C0  5061               	movf	_down,w,c
 17764  0027C2  1062               	iorwf	_down+1,w,c
 17765  0027C4  B4D8               	btfsc	status,2,c
 17766  0027C6  D003               	goto	i2l8501
 17767                           
 17768                           ;UI.c: 355: change_state_to_logs_11();
 17769  0027C8  ECF9  F025         	call	_change_state_to_logs_11	;wreg free
 17770                           
 17771                           ;UI.c: 356: }
 17772  0027CC  D047               	goto	i2l257
 17773  0027CE                     i2l8501:
 17774                           
 17775                           ;UI.c: 357: else if(enter){
 17776  0027CE  5063               	movf	_enter,w,c
 17777  0027D0  1064               	iorwf	_enter+1,w,c
 17778  0027D2  B4D8               	btfsc	status,2,c
 17779  0027D4  D007               	goto	i2l8505
 17780                           
 17781                           ;UI.c: 358: dispLogs(4);
 17782  0027D6  0E00               	movlw	0
 17783  0027D8  6E13               	movwf	dispLogs@myLog+1,c
 17784  0027DA  0E04               	movlw	4
 17785  0027DC  6E12               	movwf	dispLogs@myLog,c
 17786  0027DE  ECE5  F026         	call	_dispLogs	;wreg free
 17787                           
 17788                           ;UI.c: 359: }
 17789  0027E2  D03C               	goto	i2l257
 17790  0027E4                     i2l8505:
 17791                           
 17792                           ;UI.c: 360: else if(back){
 17793  0027E4  5059               	movf	_back,w,c
 17794  0027E6  105A               	iorwf	_back+1,w,c
 17795  0027E8  B4D8               	btfsc	status,2,c
 17796  0027EA  D038               	goto	i2l257
 17797                           
 17798                           ;UI.c: 361: change_state_to_menu_23();
 17799  0027EC  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 17800                           
 17801                           ;UI.c: 367: }
 17802                           
 17803                           ;UI.c: 366: break;
 17804                           
 17805                           ;UI.c: 365: default:
 17806                           
 17807                           ;UI.c: 362: }
 17808                           ;UI.c: 363: break;
 17809  0027F0  D035               	goto	i2l257
 17810  0027F2                     i2l8511:
 17811  0027F2  C0E6  F043         	movff	_cur_state,??_updateMenu
 17812  0027F6  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 17813                           
 17814                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 17815                           ; Switch size 1, requested type "space"
 17816                           ; Number of cases is 3, Range of values is 0 to 4
 17817                           ; switch strategies available:
 17818                           ; Name         Instructions Cycles
 17819                           ; simple_byte           10     6 (average)
 17820                           ;	Chosen strategy is simple_byte
 17821  0027FA  5044               	movf	??_updateMenu+1,w,c
 17822  0027FC  0A00               	xorlw	0	; case 0
 17823  0027FE  B4D8               	btfsc	status,2,c
 17824  002800  D007               	goto	i2l9163
 17825  002802  0A03               	xorlw	3	; case 3
 17826  002804  B4D8               	btfsc	status,2,c
 17827  002806  D015               	goto	i2l9165
 17828  002808  0A07               	xorlw	7	; case 4
 17829  00280A  B4D8               	btfsc	status,2,c
 17830  00280C  D020               	goto	i2l9167
 17831  00280E  D026               	goto	i2l257
 17832  002810                     i2l9163:
 17833                           
 17834                           ; Switch size 1, requested type "space"
 17835                           ; Number of cases is 5, Range of values is 0 to 23
 17836                           ; switch strategies available:
 17837                           ; Name         Instructions Cycles
 17838                           ; simple_byte           16     9 (average)
 17839                           ;	Chosen strategy is simple_byte
 17840  002810  5043               	movf	??_updateMenu,w,c
 17841  002812  0A00               	xorlw	0	; case 0
 17842  002814  B4D8               	btfsc	status,2,c
 17843  002816  D6DC               	goto	i2l8363
 17844  002818  0A0B               	xorlw	11	; case 11
 17845  00281A  B4D8               	btfsc	status,2,c
 17846  00281C  D6DC               	goto	i2l8365
 17847  00281E  0A07               	xorlw	7	; case 12
 17848  002820  B4D8               	btfsc	status,2,c
 17849  002822  D6EE               	goto	i2l8377
 17850  002824  0A1A               	xorlw	26	; case 22
 17851  002826  B4D8               	btfsc	status,2,c
 17852  002828  D6F9               	goto	i2l8389
 17853  00282A  0A01               	xorlw	1	; case 23
 17854  00282C  B4D8               	btfsc	status,2,c
 17855  00282E  D70C               	goto	i2l8401
 17856  002830  D015               	goto	i2l257
 17857  002832                     i2l9165:
 17858                           
 17859                           ; Switch size 1, requested type "space"
 17860                           ; Number of cases is 4, Range of values is 243 to 255
 17861                           ; switch strategies available:
 17862                           ; Name         Instructions Cycles
 17863                           ; simple_byte           13     7 (average)
 17864                           ;	Chosen strategy is simple_byte
 17865  002832  5043               	movf	??_updateMenu,w,c
 17866  002834  0AF3               	xorlw	243	; case 243
 17867  002836  B4D8               	btfsc	status,2,c
 17868  002838  D71C               	goto	i2l8413
 17869  00283A  0A07               	xorlw	7	; case 244
 17870  00283C  B4D8               	btfsc	status,2,c
 17871  00283E  D739               	goto	i2l8429
 17872  002840  0A0A               	xorlw	10	; case 254
 17873  002842  B4D8               	btfsc	status,2,c
 17874  002844  D756               	goto	i2l8445
 17875  002846  0A01               	xorlw	1	; case 255
 17876  002848  B4D8               	btfsc	status,2,c
 17877  00284A  D773               	goto	i2l8461
 17878  00284C  D007               	goto	i2l257
 17879  00284E                     i2l9167:
 17880                           
 17881                           ; Switch size 1, requested type "space"
 17882                           ; Number of cases is 2, Range of values is 9 to 10
 17883                           ; switch strategies available:
 17884                           ; Name         Instructions Cycles
 17885                           ; simple_byte            7     4 (average)
 17886                           ;	Chosen strategy is simple_byte
 17887  00284E  5043               	movf	??_updateMenu,w,c
 17888  002850  0A09               	xorlw	9	; case 9
 17889  002852  B4D8               	btfsc	status,2,c
 17890  002854  D78E               	goto	i2l8477
 17891  002856  0A03               	xorlw	3	; case 10
 17892  002858  B4D8               	btfsc	status,2,c
 17893  00285A  D7AB               	goto	i2l8493
 17894  00285C                     i2l257:
 17895                           
 17896                           ;UI.c: 368: }
 17897                           ;UI.c: 369: (INTCONbits.GIE = 1);
 17898  00285C  8EF2               	bsf	intcon,7,c	;volatile
 17899  00285E  0012               	return		;funcret
 17900  002860                     __end_of_updateMenu:
 17901                           	opt stack 0
 17902                           pclatu	equ	0xFFB
 17903                           pclath	equ	0xFFA
 17904                           tblptru	equ	0xFF8
 17905                           tblptrh	equ	0xFF7
 17906                           tblptrl	equ	0xFF6
 17907                           tablat	equ	0xFF5
 17908                           prodh	equ	0xFF4
 17909                           prodl	equ	0xFF3
 17910                           intcon	equ	0xFF2
 17911                           intcon2	equ	0xFF1
 17912                           intcon3	equ	0xFF0
 17913                           indf0	equ	0xFEF
 17914                           postinc0	equ	0xFEE
 17915                           fsr0h	equ	0xFEA
 17916                           fsr0l	equ	0xFE9
 17917                           wreg	equ	0xFE8
 17918                           postdec1	equ	0xFE5
 17919                           fsr1h	equ	0xFE2
 17920                           fsr1l	equ	0xFE1
 17921                           indf2	equ	0xFDF
 17922                           postinc2	equ	0xFDE
 17923                           postdec2	equ	0xFDD
 17924                           fsr2h	equ	0xFDA
 17925                           fsr2l	equ	0xFD9
 17926                           status	equ	0xFD8
 17927                           
 17928 ;; *************** function i2_change_state_to_menu_start *****************
 17929 ;; Defined at:
 17930 ;;		line 474 in file "UI.c"
 17931 ;; Parameters:    Size  Location     Type
 17932 ;;		None
 17933 ;; Auto vars:     Size  Location     Type
 17934 ;;		None
 17935 ;; Return value:  Size  Location     Type
 17936 ;;                  1    wreg      void 
 17937 ;; Registers used:
 17938 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17939 ;; Tracked objects:
 17940 ;;		On entry : 0/0
 17941 ;;		On exit  : 0/0
 17942 ;;		Unchanged: 0/0
 17943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17948 ;;Total ram usage:        0 bytes
 17949 ;; Hardware stack levels used:    1
 17950 ;; Hardware stack levels required when called:    4
 17951 ;; This function calls:
 17952 ;;		i2_lcdInst
 17953 ;;		i2_printRTC
 17954 ;;		i2_printf
 17955 ;; This function is called by:
 17956 ;;		_updateMenu
 17957 ;; This function uses a non-reentrant model
 17958 ;;
 17959                           
 17960                           	psect	text61
 17961  004D56                     __ptext61:
 17962                           	opt stack 0
 17963  004D56                     i2_change_state_to_menu_start:
 17964                           	opt stack 18
 17965                           
 17966                           ;UI.c: 475: cur_state = 0;
 17967                           
 17968                           ;incstack = 0
 17969  004D56  0E00               	movlw	0
 17970  004D58  0100               	movlb	0	; () banked
 17971  004D5A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 17972  004D5C  0E00               	movlw	0
 17973  004D5E  6FE6               	movwf	_cur_state& (0+255),b
 17974                           
 17975                           ; BSR set to: 0
 17976                           ;UI.c: 477: lcdInst(0b10000000);;
 17977  004D60  0E80               	movlw	128
 17978  004D62  EC75  F027         	call	i2_lcdInst
 17979                           
 17980                           ;UI.c: 478: printRTC();
 17981  004D66  EC54  F015         	call	i2_printRTC	;wreg free
 17982                           
 17983                           ;UI.c: 479: lcdInst(0b11000000);;
 17984  004D6A  0EC0               	movlw	192
 17985  004D6C  EC75  F027         	call	i2_lcdInst
 17986                           
 17987                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 17988  004D70  0EF7               	movlw	low STR_30
 17989  004D72  6E0D               	movwf	i2printf@f,c
 17990  004D74  0EFD               	movlw	high STR_30
 17991  004D76  6E0E               	movwf	i2printf@f+1,c
 17992  004D78  EC96  F00C         	call	i2_printf	;wreg free
 17993  004D7C  0012               	return		;funcret
 17994  004D7E                     __end_ofi2_change_state_to_menu_start:
 17995                           	opt stack 0
 17996                           pclatu	equ	0xFFB
 17997                           pclath	equ	0xFFA
 17998                           tblptru	equ	0xFF8
 17999                           tblptrh	equ	0xFF7
 18000                           tblptrl	equ	0xFF6
 18001                           tablat	equ	0xFF5
 18002                           prodh	equ	0xFF4
 18003                           prodl	equ	0xFF3
 18004                           intcon	equ	0xFF2
 18005                           intcon2	equ	0xFF1
 18006                           intcon3	equ	0xFF0
 18007                           indf0	equ	0xFEF
 18008                           postinc0	equ	0xFEE
 18009                           fsr0h	equ	0xFEA
 18010                           fsr0l	equ	0xFE9
 18011                           wreg	equ	0xFE8
 18012                           postdec1	equ	0xFE5
 18013                           fsr1h	equ	0xFE2
 18014                           fsr1l	equ	0xFE1
 18015                           indf2	equ	0xFDF
 18016                           postinc2	equ	0xFDE
 18017                           postdec2	equ	0xFDD
 18018                           fsr2h	equ	0xFDA
 18019                           fsr2l	equ	0xFD9
 18020                           status	equ	0xFD8
 18021                           
 18022 ;; *************** function i2_printRTC *****************
 18023 ;; Defined at:
 18024 ;;		line 63 in file "RTC.c"
 18025 ;; Parameters:    Size  Location     Type
 18026 ;;		None
 18027 ;; Auto vars:     Size  Location     Type
 18028 ;;  printRTC       14   44[COMRAM] int [7]
 18029 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18030 ;;  printRTC        2   64[COMRAM] int 
 18031 ;;  printRTC        2   58[COMRAM] int 
 18032 ;; Return value:  Size  Location     Type
 18033 ;;                  1    wreg      void 
 18034 ;; Registers used:
 18035 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18036 ;; Tracked objects:
 18037 ;;		On entry : 0/0
 18038 ;;		On exit  : 0/0
 18039 ;;		Unchanged: 0/0
 18040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18042 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18043 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18044 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18045 ;;Total ram usage:       25 bytes
 18046 ;; Hardware stack levels used:    1
 18047 ;; Hardware stack levels required when called:    3
 18048 ;; This function calls:
 18049 ;;		i2_getRTC
 18050 ;;		i2_lcdInst
 18051 ;;		i2_printf
 18052 ;;		i2_strcpy
 18053 ;; This function is called by:
 18054 ;;		i2_change_state_to_menu_start
 18055 ;; This function uses a non-reentrant model
 18056 ;;
 18057                           
 18058                           	psect	text62
 18059  002AA8                     __ptext62:
 18060                           	opt stack 0
 18061  002AA8                     i2_printRTC:
 18062                           	opt stack 18
 18063                           
 18064                           ;RTC.c: 64: getRTC();
 18065                           
 18066                           ;incstack = 0
 18067  002AA8  EC37  F022         	call	i2_getRTC	;wreg free
 18068                           
 18069                           ;RTC.c: 65: char month[] = "MMM";
 18070  002AAC  C139  F03D         	movff	printRTC@F3219,i2printRTC@month
 18071  002AB0  C13A  F03E         	movff	printRTC@F3219+1,i2printRTC@month+1
 18072  002AB4  C13B  F03F         	movff	printRTC@F3219+2,i2printRTC@month+2
 18073  002AB8  C13C  F040         	movff	printRTC@F3219+3,i2printRTC@month+3
 18074                           
 18075                           ;RTC.c: 66: int INT_time[7];
 18076                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18077  002ABC  0E00               	movlw	0
 18078  002ABE  6E42               	movwf	i2printRTC@i+1,c
 18079  002AC0  0E00               	movlw	0
 18080  002AC2  6E41               	movwf	i2printRTC@i,c
 18081  002AC4  BE42               	btfsc	i2printRTC@i+1,7,c
 18082  002AC6  D006               	goto	i2l6539
 18083  002AC8  5042               	movf	i2printRTC@i+1,w,c
 18084  002ACA  E135               	bnz	i2l606
 18085  002ACC  0E07               	movlw	7
 18086  002ACE  5C41               	subwf	i2printRTC@i,w,c
 18087  002AD0  B0D8               	btfsc	status,0,c
 18088  002AD2  D031               	goto	i2l606
 18089  002AD4                     i2l6539:
 18090                           
 18091                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18092  002AD4  0E24               	movlw	low _time
 18093  002AD6  2441               	addwf	i2printRTC@i,w,c
 18094  002AD8  6ED9               	movwf	fsr2l,c
 18095  002ADA  0E01               	movlw	high _time
 18096  002ADC  2042               	addwfc	i2printRTC@i+1,w,c
 18097  002ADE  6EDA               	movwf	fsr2h,c
 18098  002AE0  50DF               	movf	indf2,w,c
 18099  002AE2  6E2A               	movwf	??i2_printRTC& (0+255),c
 18100  002AE4  3A2A               	swapf	??i2_printRTC,f,c
 18101  002AE6  0E0F               	movlw	15
 18102  002AE8  162A               	andwf	??i2_printRTC,f,c
 18103  002AEA  0E0F               	movlw	15
 18104  002AEC  162A               	andwf	??i2_printRTC,f,c
 18105  002AEE  502A               	movf	??i2_printRTC,w,c
 18106  002AF0  0D0A               	mullw	10
 18107  002AF2  0E24               	movlw	low _time
 18108  002AF4  2441               	addwf	i2printRTC@i,w,c
 18109  002AF6  6ED9               	movwf	fsr2l,c
 18110  002AF8  0E01               	movlw	high _time
 18111  002AFA  2042               	addwfc	i2printRTC@i+1,w,c
 18112  002AFC  6EDA               	movwf	fsr2h,c
 18113  002AFE  50DF               	movf	indf2,w,c
 18114  002B00  0B0F               	andlw	15
 18115  002B02  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 18116  002B04  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 18117  002B06  50F3               	movf	prodl,w,c
 18118  002B08  262B               	addwf	??i2_printRTC+1,f,c
 18119  002B0A  50F4               	movf	prodh,w,c
 18120  002B0C  222C               	addwfc	??i2_printRTC+2,f,c
 18121  002B0E  90D8               	bcf	status,0,c
 18122  002B10  3441               	rlcf	i2printRTC@i,w,c
 18123  002B12  6ED9               	movwf	fsr2l,c
 18124  002B14  3442               	rlcf	i2printRTC@i+1,w,c
 18125  002B16  6EDA               	movwf	fsr2h,c
 18126  002B18  0E2D               	movlw	low i2printRTC@INT_time
 18127  002B1A  26D9               	addwf	fsr2l,f,c
 18128  002B1C  0E00               	movlw	high i2printRTC@INT_time
 18129  002B1E  22DA               	addwfc	fsr2h,f,c
 18130  002B20  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 18131  002B24  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 18132  002B28  4A41               	infsnz	i2printRTC@i,f,c
 18133  002B2A  2A42               	incf	i2printRTC@i+1,f,c
 18134  002B2C  BE42               	btfsc	i2printRTC@i+1,7,c
 18135  002B2E  D7D2               	goto	i2l6539
 18136  002B30  5042               	movf	i2printRTC@i+1,w,c
 18137  002B32  E101               	bnz	i2u520_40
 18138  002B34  D7CB               	goto	L11
 18139  002B36                     i2u520_40:
 18140  002B36                     i2l606:
 18141                           
 18142                           ;RTC.c: 69: }
 18143                           ;RTC.c: 70: int RTC_month = INT_time[5];
 18144  002B36  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 18145  002B3A  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 18146                           
 18147                           ;RTC.c: 71: switch(RTC_month){
 18148  002B3E  D084               	goto	i2l6571
 18149  002B40                     i2l6545:
 18150                           
 18151                           ;RTC.c: 73: strcpy(month, "JAN");
 18152  002B40  0E3D               	movlw	low i2printRTC@month
 18153  002B42  6E01               	movwf	i2strcpy@to,c
 18154  002B44  0E00               	movlw	high i2printRTC@month
 18155  002B46  6E02               	movwf	i2strcpy@to+1,c
 18156  002B48  0EDB               	movlw	low STR_8
 18157  002B4A  6E03               	movwf	i2strcpy@from,c
 18158  002B4C  0EFF               	movlw	high STR_8
 18159  002B4E  6E04               	movwf	i2strcpy@from+1,c
 18160  002B50  EC20  F025         	call	i2_strcpy	;wreg free
 18161                           
 18162                           ;RTC.c: 74: break;
 18163  002B54  D0A6               	goto	i2l6573
 18164  002B56                     i2l6547:
 18165                           
 18166                           ;RTC.c: 76: strcpy(month, "FEB");
 18167  002B56  0E3D               	movlw	low i2printRTC@month
 18168  002B58  6E01               	movwf	i2strcpy@to,c
 18169  002B5A  0E00               	movlw	high i2printRTC@month
 18170  002B5C  6E02               	movwf	i2strcpy@to+1,c
 18171  002B5E  0ECB               	movlw	low STR_9
 18172  002B60  6E03               	movwf	i2strcpy@from,c
 18173  002B62  0EFF               	movlw	high STR_9
 18174  002B64  6E04               	movwf	i2strcpy@from+1,c
 18175  002B66  EC20  F025         	call	i2_strcpy	;wreg free
 18176                           
 18177                           ;RTC.c: 77: break;
 18178  002B6A  D09B               	goto	i2l6573
 18179  002B6C                     i2l6549:
 18180                           
 18181                           ;RTC.c: 79: strcpy(month, "MAR");
 18182  002B6C  0E3D               	movlw	low i2printRTC@month
 18183  002B6E  6E01               	movwf	i2strcpy@to,c
 18184  002B70  0E00               	movlw	high i2printRTC@month
 18185  002B72  6E02               	movwf	i2strcpy@to+1,c
 18186  002B74  0EE7               	movlw	low STR_10
 18187  002B76  6E03               	movwf	i2strcpy@from,c
 18188  002B78  0EFF               	movlw	high STR_10
 18189  002B7A  6E04               	movwf	i2strcpy@from+1,c
 18190  002B7C  EC20  F025         	call	i2_strcpy	;wreg free
 18191                           
 18192                           ;RTC.c: 80: break;
 18193  002B80  D090               	goto	i2l6573
 18194  002B82                     i2l6551:
 18195                           
 18196                           ;RTC.c: 82: strcpy(month, "APR");
 18197  002B82  0E3D               	movlw	low i2printRTC@month
 18198  002B84  6E01               	movwf	i2strcpy@to,c
 18199  002B86  0E00               	movlw	high i2printRTC@month
 18200  002B88  6E02               	movwf	i2strcpy@to+1,c
 18201  002B8A  0EEB               	movlw	low STR_11
 18202  002B8C  6E03               	movwf	i2strcpy@from,c
 18203  002B8E  0EFF               	movlw	high STR_11
 18204  002B90  6E04               	movwf	i2strcpy@from+1,c
 18205  002B92  EC20  F025         	call	i2_strcpy	;wreg free
 18206                           
 18207                           ;RTC.c: 83: break;
 18208  002B96  D085               	goto	i2l6573
 18209  002B98                     i2l6553:
 18210                           
 18211                           ;RTC.c: 85: strcpy(month, "MAY");
 18212  002B98  0E3D               	movlw	low i2printRTC@month
 18213  002B9A  6E01               	movwf	i2strcpy@to,c
 18214  002B9C  0E00               	movlw	high i2printRTC@month
 18215  002B9E  6E02               	movwf	i2strcpy@to+1,c
 18216  002BA0  0EFB               	movlw	low STR_12
 18217  002BA2  6E03               	movwf	i2strcpy@from,c
 18218  002BA4  0EFF               	movlw	high STR_12
 18219  002BA6  6E04               	movwf	i2strcpy@from+1,c
 18220  002BA8  EC20  F025         	call	i2_strcpy	;wreg free
 18221                           
 18222                           ;RTC.c: 86: break;
 18223  002BAC  D07A               	goto	i2l6573
 18224  002BAE                     i2l6555:
 18225                           
 18226                           ;RTC.c: 88: strcpy(month, "JUN");
 18227  002BAE  0E3D               	movlw	low i2printRTC@month
 18228  002BB0  6E01               	movwf	i2strcpy@to,c
 18229  002BB2  0E00               	movlw	high i2printRTC@month
 18230  002BB4  6E02               	movwf	i2strcpy@to+1,c
 18231  002BB6  0EDF               	movlw	low STR_13
 18232  002BB8  6E03               	movwf	i2strcpy@from,c
 18233  002BBA  0EFF               	movlw	high STR_13
 18234  002BBC  6E04               	movwf	i2strcpy@from+1,c
 18235  002BBE  EC20  F025         	call	i2_strcpy	;wreg free
 18236                           
 18237                           ;RTC.c: 89: break;
 18238  002BC2  D06F               	goto	i2l6573
 18239  002BC4                     i2l6557:
 18240                           
 18241                           ;RTC.c: 91: strcpy(month, "JUL");
 18242  002BC4  0E3D               	movlw	low i2printRTC@month
 18243  002BC6  6E01               	movwf	i2strcpy@to,c
 18244  002BC8  0E00               	movlw	high i2printRTC@month
 18245  002BCA  6E02               	movwf	i2strcpy@to+1,c
 18246  002BCC  0ED7               	movlw	low STR_14
 18247  002BCE  6E03               	movwf	i2strcpy@from,c
 18248  002BD0  0EFF               	movlw	high STR_14
 18249  002BD2  6E04               	movwf	i2strcpy@from+1,c
 18250  002BD4  EC20  F025         	call	i2_strcpy	;wreg free
 18251                           
 18252                           ;RTC.c: 92: break;
 18253  002BD8  D064               	goto	i2l6573
 18254  002BDA                     i2l6559:
 18255                           
 18256                           ;RTC.c: 94: strcpy(month, "AUG");
 18257  002BDA  0E3D               	movlw	low i2printRTC@month
 18258  002BDC  6E01               	movwf	i2strcpy@to,c
 18259  002BDE  0E00               	movlw	high i2printRTC@month
 18260  002BE0  6E02               	movwf	i2strcpy@to+1,c
 18261  002BE2  0ED3               	movlw	low STR_15
 18262  002BE4  6E03               	movwf	i2strcpy@from,c
 18263  002BE6  0EFF               	movlw	high STR_15
 18264  002BE8  6E04               	movwf	i2strcpy@from+1,c
 18265  002BEA  EC20  F025         	call	i2_strcpy	;wreg free
 18266                           
 18267                           ;RTC.c: 95: break;
 18268  002BEE  D059               	goto	i2l6573
 18269  002BF0                     i2l6561:
 18270                           
 18271                           ;RTC.c: 97: strcpy(month, "SEP");
 18272  002BF0  0E3D               	movlw	low i2printRTC@month
 18273  002BF2  6E01               	movwf	i2strcpy@to,c
 18274  002BF4  0E00               	movlw	high i2printRTC@month
 18275  002BF6  6E02               	movwf	i2strcpy@to+1,c
 18276  002BF8  0EE3               	movlw	low STR_16
 18277  002BFA  6E03               	movwf	i2strcpy@from,c
 18278  002BFC  0EFF               	movlw	high STR_16
 18279  002BFE  6E04               	movwf	i2strcpy@from+1,c
 18280  002C00  EC20  F025         	call	i2_strcpy	;wreg free
 18281                           
 18282                           ;RTC.c: 98: break;
 18283  002C04  D04E               	goto	i2l6573
 18284  002C06                     i2l6563:
 18285                           
 18286                           ;RTC.c: 100: strcpy(month, "OCT");
 18287  002C06  0E3D               	movlw	low i2printRTC@month
 18288  002C08  6E01               	movwf	i2strcpy@to,c
 18289  002C0A  0E00               	movlw	high i2printRTC@month
 18290  002C0C  6E02               	movwf	i2strcpy@to+1,c
 18291  002C0E  0EF3               	movlw	low STR_17
 18292  002C10  6E03               	movwf	i2strcpy@from,c
 18293  002C12  0EFF               	movlw	high STR_17
 18294  002C14  6E04               	movwf	i2strcpy@from+1,c
 18295  002C16  EC20  F025         	call	i2_strcpy	;wreg free
 18296                           
 18297                           ;RTC.c: 101: break;
 18298  002C1A  D043               	goto	i2l6573
 18299  002C1C                     i2l6565:
 18300                           
 18301                           ;RTC.c: 103: strcpy(month, "NOV");
 18302  002C1C  0E3D               	movlw	low i2printRTC@month
 18303  002C1E  6E01               	movwf	i2strcpy@to,c
 18304  002C20  0E00               	movlw	high i2printRTC@month
 18305  002C22  6E02               	movwf	i2strcpy@to+1,c
 18306  002C24  0EF7               	movlw	low STR_18
 18307  002C26  6E03               	movwf	i2strcpy@from,c
 18308  002C28  0EFF               	movlw	high STR_18
 18309  002C2A  6E04               	movwf	i2strcpy@from+1,c
 18310  002C2C  EC20  F025         	call	i2_strcpy	;wreg free
 18311                           
 18312                           ;RTC.c: 104: break;
 18313  002C30  D038               	goto	i2l6573
 18314  002C32                     i2l6567:
 18315                           
 18316                           ;RTC.c: 106: strcpy(month, "DEC");
 18317  002C32  0E3D               	movlw	low i2printRTC@month
 18318  002C34  6E01               	movwf	i2strcpy@to,c
 18319  002C36  0E00               	movlw	high i2printRTC@month
 18320  002C38  6E02               	movwf	i2strcpy@to+1,c
 18321  002C3A  0ECF               	movlw	low STR_19
 18322  002C3C  6E03               	movwf	i2strcpy@from,c
 18323  002C3E  0EFF               	movlw	high STR_19
 18324  002C40  6E04               	movwf	i2strcpy@from+1,c
 18325  002C42  EC20  F025         	call	i2_strcpy	;wreg free
 18326                           
 18327                           ;RTC.c: 108: }
 18328                           
 18329                           ;RTC.c: 107: break;
 18330  002C46  D02D               	goto	i2l6573
 18331  002C48                     i2l6571:
 18332  002C48  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 18333  002C4C  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 18334                           
 18335                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18336                           ; Switch size 1, requested type "space"
 18337                           ; Number of cases is 1, Range of values is 0 to 0
 18338                           ; switch strategies available:
 18339                           ; Name         Instructions Cycles
 18340                           ; simple_byte            4     3 (average)
 18341                           ;	Chosen strategy is simple_byte
 18342  002C50  502B               	movf	??i2_printRTC+1,w,c
 18343  002C52  0A00               	xorlw	0	; case 0
 18344  002C54  A4D8               	btfss	status,2,c
 18345  002C56  D025               	goto	i2l6573
 18346                           
 18347                           ; Switch size 1, requested type "space"
 18348                           ; Number of cases is 12, Range of values is 1 to 12
 18349                           ; switch strategies available:
 18350                           ; Name         Instructions Cycles
 18351                           ; simple_byte           37    19 (average)
 18352                           ;	Chosen strategy is simple_byte
 18353  002C58  502A               	movf	??i2_printRTC,w,c
 18354  002C5A  0A01               	xorlw	1	; case 1
 18355  002C5C  B4D8               	btfsc	status,2,c
 18356  002C5E  D770               	goto	i2l6545
 18357  002C60  0A03               	xorlw	3	; case 2
 18358  002C62  B4D8               	btfsc	status,2,c
 18359  002C64  D778               	goto	i2l6547
 18360  002C66  0A01               	xorlw	1	; case 3
 18361  002C68  B4D8               	btfsc	status,2,c
 18362  002C6A  D780               	goto	i2l6549
 18363  002C6C  0A07               	xorlw	7	; case 4
 18364  002C6E  B4D8               	btfsc	status,2,c
 18365  002C70  D788               	goto	i2l6551
 18366  002C72  0A01               	xorlw	1	; case 5
 18367  002C74  B4D8               	btfsc	status,2,c
 18368  002C76  D790               	goto	i2l6553
 18369  002C78  0A03               	xorlw	3	; case 6
 18370  002C7A  B4D8               	btfsc	status,2,c
 18371  002C7C  D798               	goto	i2l6555
 18372  002C7E  0A01               	xorlw	1	; case 7
 18373  002C80  B4D8               	btfsc	status,2,c
 18374  002C82  D7A0               	goto	i2l6557
 18375  002C84  0A0F               	xorlw	15	; case 8
 18376  002C86  B4D8               	btfsc	status,2,c
 18377  002C88  D7A8               	goto	i2l6559
 18378  002C8A  0A01               	xorlw	1	; case 9
 18379  002C8C  B4D8               	btfsc	status,2,c
 18380  002C8E  D7B0               	goto	i2l6561
 18381  002C90  0A03               	xorlw	3	; case 10
 18382  002C92  B4D8               	btfsc	status,2,c
 18383  002C94  D7B8               	goto	i2l6563
 18384  002C96  0A01               	xorlw	1	; case 11
 18385  002C98  B4D8               	btfsc	status,2,c
 18386  002C9A  D7C0               	goto	i2l6565
 18387  002C9C  0A07               	xorlw	7	; case 12
 18388  002C9E  B4D8               	btfsc	status,2,c
 18389  002CA0  D7C8               	goto	i2l6567
 18390  002CA2                     i2l6573:
 18391                           
 18392                           ;RTC.c: 109: lcdInst(0b10000000);;
 18393  002CA2  0E80               	movlw	128
 18394  002CA4  EC75  F027         	call	i2_lcdInst
 18395                           
 18396                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 18397  002CA8  0E0A               	movlw	low STR_21
 18398  002CAA  6E0D               	movwf	i2printf@f,c
 18399  002CAC  0EFB               	movlw	high STR_21
 18400  002CAE  6E0E               	movwf	i2printf@f+1,c
 18401  002CB0  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 18402  002CB4  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 18403  002CB8  0E3D               	movlw	low i2printRTC@month
 18404  002CBA  6E11               	movwf	?i2_printf+4,c
 18405  002CBC  0E00               	movlw	high i2printRTC@month
 18406  002CBE  6E12               	movwf	?i2_printf+5,c
 18407  002CC0  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 18408  002CC4  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 18409  002CC8  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 18410  002CCC  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 18411  002CD0  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 18412  002CD4  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 18413  002CD8  EC96  F00C         	call	i2_printf	;wreg free
 18414  002CDC  0012               	return		;funcret
 18415  002CDE                     __end_ofi2_printRTC:
 18416                           	opt stack 0
 18417                           pclatu	equ	0xFFB
 18418                           pclath	equ	0xFFA
 18419                           tblptru	equ	0xFF8
 18420                           tblptrh	equ	0xFF7
 18421                           tblptrl	equ	0xFF6
 18422                           tablat	equ	0xFF5
 18423                           prodh	equ	0xFF4
 18424                           prodl	equ	0xFF3
 18425                           intcon	equ	0xFF2
 18426                           intcon2	equ	0xFF1
 18427                           intcon3	equ	0xFF0
 18428                           indf0	equ	0xFEF
 18429                           postinc0	equ	0xFEE
 18430                           fsr0h	equ	0xFEA
 18431                           fsr0l	equ	0xFE9
 18432                           wreg	equ	0xFE8
 18433                           postdec1	equ	0xFE5
 18434                           fsr1h	equ	0xFE2
 18435                           fsr1l	equ	0xFE1
 18436                           indf2	equ	0xFDF
 18437                           postinc2	equ	0xFDE
 18438                           postdec2	equ	0xFDD
 18439                           fsr2h	equ	0xFDA
 18440                           fsr2l	equ	0xFD9
 18441                           status	equ	0xFD8
 18442                           
 18443 ;; *************** function i2_strcpy *****************
 18444 ;; Defined at:
 18445 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 18446 ;; Parameters:    Size  Location     Type
 18447 ;;  to              2    0[COMRAM] PTR unsigned char 
 18448 ;;		 -> printRTC@month(4), UI@month(4), 
 18449 ;;  from            2    2[COMRAM] PTR const unsigned char 
 18450 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 18451 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 18452 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 18453 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 18454 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 18455 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 18456 ;;		 -> STR_8(4), 
 18457 ;; Auto vars:     Size  Location     Type
 18458 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 18459 ;;		 -> printRTC@month(4), UI@month(4), 
 18460 ;; Return value:  Size  Location     Type
 18461 ;;                  2    0[COMRAM] PTR unsigned char 
 18462 ;; Registers used:
 18463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18464 ;; Tracked objects:
 18465 ;;		On entry : 0/0
 18466 ;;		On exit  : 0/0
 18467 ;;		Unchanged: 0/0
 18468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18472 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18473 ;;Total ram usage:        6 bytes
 18474 ;; Hardware stack levels used:    1
 18475 ;; This function calls:
 18476 ;;		Nothing
 18477 ;; This function is called by:
 18478 ;;		i2_printRTC
 18479 ;; This function uses a non-reentrant model
 18480 ;;
 18481                           
 18482                           	psect	text63
 18483  004A40                     __ptext63:
 18484                           	opt stack 0
 18485  004A40                     i2_strcpy:
 18486                           	opt stack 20
 18487                           
 18488                           ;incstack = 0
 18489  004A40  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 18490  004A44  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 18491  004A48  D004               	goto	i2l6197
 18492  004A4A                     i2l6195:
 18493  004A4A  4A05               	infsnz	i2strcpy@cp,f,c
 18494  004A4C  2A06               	incf	i2strcpy@cp+1,f,c
 18495  004A4E  4A03               	infsnz	i2strcpy@from,f,c
 18496  004A50  2A04               	incf	i2strcpy@from+1,f,c
 18497  004A52                     i2l6197:
 18498  004A52  C003  FFF6         	movff	i2strcpy@from,tblptrl
 18499  004A56  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 18500  004A5A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18501  004A5A  6AF8               	clrf	tblptru,c
 18502  004A5C                     	endif
 18503  004A5C                     	if	0	;tblptru may be non-zero
 18504  004A5C                     	endif
 18505  004A5C  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 18506  004A60  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 18507  004A64  0008               	tblrd		*
 18508  004A66  CFF5 FFDF          	movff	tablat,indf2
 18509  004A6A  50DF               	movf	indf2,w,c
 18510  004A6C  B4D8               	btfsc	status,2,c
 18511  004A6E  0012               	return	
 18512  004A70  D7EC               	goto	i2l6195
 18513  004A72                     __end_ofi2_strcpy:
 18514                           	opt stack 0
 18515                           pclatu	equ	0xFFB
 18516                           pclath	equ	0xFFA
 18517                           tblptru	equ	0xFF8
 18518                           tblptrh	equ	0xFF7
 18519                           tblptrl	equ	0xFF6
 18520                           tablat	equ	0xFF5
 18521                           prodh	equ	0xFF4
 18522                           prodl	equ	0xFF3
 18523                           intcon	equ	0xFF2
 18524                           intcon2	equ	0xFF1
 18525                           intcon3	equ	0xFF0
 18526                           indf0	equ	0xFEF
 18527                           postinc0	equ	0xFEE
 18528                           fsr0h	equ	0xFEA
 18529                           fsr0l	equ	0xFE9
 18530                           wreg	equ	0xFE8
 18531                           postdec1	equ	0xFE5
 18532                           fsr1h	equ	0xFE2
 18533                           fsr1l	equ	0xFE1
 18534                           indf2	equ	0xFDF
 18535                           postinc2	equ	0xFDE
 18536                           postdec2	equ	0xFDD
 18537                           fsr2h	equ	0xFDA
 18538                           fsr2l	equ	0xFD9
 18539                           status	equ	0xFD8
 18540                           
 18541 ;; *************** function _inputHandler *****************
 18542 ;; Defined at:
 18543 ;;		line 372 in file "UI.c"
 18544 ;; Parameters:    Size  Location     Type
 18545 ;;		None
 18546 ;; Auto vars:     Size  Location     Type
 18547 ;;		None
 18548 ;; Return value:  Size  Location     Type
 18549 ;;                  2   41[COMRAM] int 
 18550 ;; Registers used:
 18551 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18557 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18560 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18561 ;;Total ram usage:        4 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; Hardware stack levels required when called:    4
 18564 ;; This function calls:
 18565 ;;		_change_state_to_logs_11
 18566 ;;		_change_state_to_logs_12
 18567 ;;		_change_state_to_logs_22
 18568 ;;		_change_state_to_logs_23
 18569 ;;		_change_state_to_logs_33
 18570 ;;		_change_state_to_logs_34
 18571 ;;		_change_state_to_menu_11
 18572 ;;		_change_state_to_menu_23
 18573 ;;		i2_change_state_to_menu_12
 18574 ;;		i2_change_state_to_menu_22
 18575 ;; This function is called by:
 18576 ;;		_updateMenu
 18577 ;; This function uses a non-reentrant model
 18578 ;;
 18579                           
 18580                           	psect	text64
 18581  00310C                     __ptext64:
 18582                           	opt stack 0
 18583  00310C                     _inputHandler:
 18584                           	opt stack 18
 18585                           
 18586                           ;UI.c: 377: if(firstboot){
 18587                           
 18588                           ;incstack = 0
 18589  00310C  506F               	movf	_firstboot,w,c
 18590  00310E  1070               	iorwf	_firstboot+1,w,c
 18591  003110  B4D8               	btfsc	status,2,c
 18592  003112  D00B               	goto	i2l6641
 18593                           
 18594                           ;UI.c: 378: change_state_to_menu_11();
 18595  003114  EC81  F025         	call	_change_state_to_menu_11	;wreg free
 18596                           
 18597                           ;UI.c: 379: firstboot = 0;
 18598  003118  0E00               	movlw	0
 18599  00311A  6E70               	movwf	_firstboot+1,c
 18600  00311C  0E00               	movlw	0
 18601  00311E  6E6F               	movwf	_firstboot,c
 18602                           
 18603                           ;UI.c: 380: return 0;
 18604  003120  0E00               	movlw	0
 18605  003122  6E2B               	movwf	?_inputHandler+1,c
 18606  003124  0E00               	movlw	0
 18607  003126  6E2A               	movwf	?_inputHandler,c
 18608  003128  0012               	return	
 18609  00312A                     i2l6641:
 18610                           
 18611                           ;UI.c: 381: }
 18612                           ;UI.c: 382: if (logstate){
 18613  00312A  0100               	movlb	0	; () banked
 18614  00312C  51F6               	movf	_logstate& (0+255),w,b
 18615  00312E  0100               	movlb	0	; () banked
 18616  003130  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 18617  003132  B4D8               	btfsc	status,2,c
 18618  003134  D0C7               	goto	i2l6759
 18619                           
 18620                           ; BSR set to: 0
 18621                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 18622  003136  0E43               	movlw	67
 18623  003138  187D               	xorwf	_input,w,c	;volatile
 18624  00313A  A4D8               	btfss	status,2,c
 18625  00313C  D012               	goto	i2l6659
 18626                           
 18627                           ; BSR set to: 0
 18628  00313E  B281               	btfsc	3969,1,c	;volatile
 18629  003140  D009               	goto	i2l6651
 18630  003142  D00F               	goto	i2l6659
 18631  003144                     i2l6649:
 18632                           
 18633                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 18634  003144  0E68               	movlw	104
 18635  003146  6E2C               	movwf	??_inputHandler& (0+255),c
 18636  003148  0EE4               	movlw	228
 18637  00314A                     i2u954_47:
 18638  00314A  2EE8               	decfsz	wreg,f,c
 18639  00314C  D7FE               	bra	i2u954_47
 18640  00314E  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 18641  003150  D7FC               	bra	i2u954_47
 18642  003152  D000               	nop2	
 18643  003154                     i2l6651:
 18644  003154  B281               	btfsc	3969,1,c	;volatile
 18645  003156  D7F6               	goto	i2l6649
 18646  003158                     i2l6653:
 18647                           
 18648                           ;UI.c: 387: }
 18649                           ;UI.c: 388: return 0;
 18650  003158  0E00               	movlw	0
 18651  00315A  6E2B               	movwf	?_inputHandler+1,c
 18652  00315C  0E00               	movlw	0
 18653  00315E  6E2A               	movwf	?_inputHandler,c
 18654  003160  0012               	return	
 18655  003162                     i2l6659:
 18656                           
 18657                           ;UI.c: 390: else if (input == 'D'){
 18658  003162  0E44               	movlw	68
 18659  003164  187D               	xorwf	_input,w,c	;volatile
 18660  003166  A4D8               	btfss	status,2,c
 18661  003168  D7F7               	goto	i2l6653
 18662                           
 18663                           ;UI.c: 392: logstate = 0;
 18664  00316A  0E00               	movlw	0
 18665  00316C  0100               	movlb	0	; () banked
 18666  00316E  6FF7               	movwf	(_logstate+1)& (0+255),b
 18667  003170  0E00               	movlw	0
 18668  003172  6FF6               	movwf	_logstate& (0+255),b
 18669                           
 18670                           ;UI.c: 393: switch(cur_state){
 18671  003174  D012               	goto	i2l6677
 18672  003176                     i2l6663:
 18673                           
 18674                           ;UI.c: 395: change_state_to_logs_11();
 18675  003176  ECF9  F025         	call	_change_state_to_logs_11	;wreg free
 18676                           
 18677                           ;UI.c: 396: break;
 18678  00317A  D7EE               	goto	i2l6653
 18679  00317C                     i2l6665:
 18680                           
 18681                           ;UI.c: 398: change_state_to_logs_12();
 18682  00317C  ECE1  F025         	call	_change_state_to_logs_12	;wreg free
 18683                           
 18684                           ;UI.c: 399: break;
 18685  003180  D7EB               	goto	i2l6653
 18686  003182                     i2l6667:
 18687                           
 18688                           ;UI.c: 401: change_state_to_logs_22();
 18689  003182  ECC9  F025         	call	_change_state_to_logs_22	;wreg free
 18690                           
 18691                           ;UI.c: 402: break;
 18692  003186  D7E8               	goto	i2l6653
 18693  003188                     i2l6669:
 18694                           
 18695                           ;UI.c: 404: change_state_to_logs_23();
 18696  003188  EC3F  F026         	call	_change_state_to_logs_23	;wreg free
 18697                           
 18698                           ;UI.c: 405: break;
 18699  00318C  D7E5               	goto	i2l6653
 18700  00318E                     i2l6671:
 18701                           
 18702                           ;UI.c: 407: change_state_to_logs_33();
 18703  00318E  ECB1  F025         	call	_change_state_to_logs_33	;wreg free
 18704                           
 18705                           ;UI.c: 408: break;
 18706  003192  D7E2               	goto	i2l6653
 18707  003194                     i2l6673:
 18708                           
 18709                           ;UI.c: 410: change_state_to_logs_34();
 18710  003194  EC99  F025         	call	_change_state_to_logs_34	;wreg free
 18711                           
 18712                           ;UI.c: 412: }
 18713                           
 18714                           ;UI.c: 411: break;
 18715  003198  D7DF               	goto	i2l6653
 18716  00319A                     i2l6677:
 18717  00319A  C0E6  F02C         	movff	_cur_state,??_inputHandler
 18718  00319E  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 18719                           
 18720                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18721                           ; Switch size 1, requested type "space"
 18722                           ; Number of cases is 2, Range of values is 3 to 4
 18723                           ; switch strategies available:
 18724                           ; Name         Instructions Cycles
 18725                           ; simple_byte            7     4 (average)
 18726                           ;	Chosen strategy is simple_byte
 18727  0031A2  502D               	movf	??_inputHandler+1,w,c
 18728  0031A4  0A03               	xorlw	3	; case 3
 18729  0031A6  B4D8               	btfsc	status,2,c
 18730  0031A8  D004               	goto	i2l9171
 18731  0031AA  0A07               	xorlw	7	; case 4
 18732  0031AC  B4D8               	btfsc	status,2,c
 18733  0031AE  D00F               	goto	i2l9173
 18734  0031B0  D7D3               	goto	i2l6653
 18735  0031B2                     i2l9171:
 18736                           
 18737                           ; Switch size 1, requested type "space"
 18738                           ; Number of cases is 4, Range of values is 243 to 255
 18739                           ; switch strategies available:
 18740                           ; Name         Instructions Cycles
 18741                           ; simple_byte           13     7 (average)
 18742                           ;	Chosen strategy is simple_byte
 18743  0031B2  502C               	movf	??_inputHandler,w,c
 18744  0031B4  0AF3               	xorlw	243	; case 243
 18745  0031B6  B4D8               	btfsc	status,2,c
 18746  0031B8  D7DE               	goto	i2l6663
 18747  0031BA  0A07               	xorlw	7	; case 244
 18748  0031BC  B4D8               	btfsc	status,2,c
 18749  0031BE  D7DE               	goto	i2l6665
 18750  0031C0  0A0A               	xorlw	10	; case 254
 18751  0031C2  B4D8               	btfsc	status,2,c
 18752  0031C4  D7DE               	goto	i2l6667
 18753  0031C6  0A01               	xorlw	1	; case 255
 18754  0031C8  B4D8               	btfsc	status,2,c
 18755  0031CA  D7DE               	goto	i2l6669
 18756  0031CC  D7C5               	goto	i2l6653
 18757  0031CE                     i2l9173:
 18758                           
 18759                           ; Switch size 1, requested type "space"
 18760                           ; Number of cases is 2, Range of values is 9 to 10
 18761                           ; switch strategies available:
 18762                           ; Name         Instructions Cycles
 18763                           ; simple_byte            7     4 (average)
 18764                           ;	Chosen strategy is simple_byte
 18765  0031CE  502C               	movf	??_inputHandler,w,c
 18766  0031D0  0A09               	xorlw	9	; case 9
 18767  0031D2  B4D8               	btfsc	status,2,c
 18768  0031D4  D7DC               	goto	i2l6671
 18769  0031D6  0A03               	xorlw	3	; case 10
 18770  0031D8  B4D8               	btfsc	status,2,c
 18771  0031DA  D7DC               	goto	i2l6673
 18772  0031DC  D7BD               	goto	i2l6653
 18773  0031DE                     i2l6689:
 18774                           
 18775                           ;UI.c: 422: if(cur_state == 11){
 18776  0031DE  0E0B               	movlw	11
 18777  0031E0  0100               	movlb	0	; () banked
 18778  0031E2  19E6               	xorwf	_cur_state& (0+255),w,b
 18779  0031E4  0100               	movlb	0	; () banked
 18780  0031E6  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18781  0031E8  A4D8               	btfss	status,2,c
 18782  0031EA  D005               	goto	i2l6697
 18783                           
 18784                           ; BSR set to: 0
 18785                           ;UI.c: 423: return 0;
 18786  0031EC  0E00               	movlw	0
 18787  0031EE  6E2B               	movwf	?_inputHandler+1,c
 18788  0031F0  0E00               	movlw	0
 18789  0031F2  6E2A               	movwf	?_inputHandler,c
 18790                           
 18791                           ; BSR set to: 0
 18792  0031F4  0012               	return	
 18793  0031F6                     i2l6697:
 18794                           
 18795                           ; BSR set to: 0
 18796                           ;UI.c: 425: else{
 18797                           ;UI.c: 426: change_state_to_menu_11();
 18798  0031F6  EC81  F025         	call	_change_state_to_menu_11	;wreg free
 18799                           
 18800                           ;UI.c: 427: }
 18801                           ;UI.c: 428: return 0;
 18802  0031FA  0E00               	movlw	0
 18803  0031FC  6E2B               	movwf	?_inputHandler+1,c
 18804  0031FE  0E00               	movlw	0
 18805  003200  6E2A               	movwf	?_inputHandler,c
 18806  003202  0012               	return	
 18807  003204                     i2l6703:
 18808                           
 18809                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 18810  003204  0E16               	movlw	22
 18811  003206  0100               	movlb	0	; () banked
 18812  003208  19E6               	xorwf	_cur_state& (0+255),w,b
 18813  00320A  0100               	movlb	0	; () banked
 18814  00320C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18815  00320E  B4D8               	btfsc	status,2,c
 18816  003210  D007               	goto	i2l6707
 18817                           
 18818                           ; BSR set to: 0
 18819  003212  0E0C               	movlw	12
 18820  003214  0100               	movlb	0	; () banked
 18821  003216  19E6               	xorwf	_cur_state& (0+255),w,b
 18822  003218  0100               	movlb	0	; () banked
 18823  00321A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18824  00321C  A4D8               	btfss	status,2,c
 18825  00321E  D005               	goto	i2l6713
 18826  003220                     i2l6707:
 18827                           
 18828                           ; BSR set to: 0
 18829                           ;UI.c: 431: return 0;
 18830  003220  0E00               	movlw	0
 18831  003222  6E2B               	movwf	?_inputHandler+1,c
 18832  003224  0E00               	movlw	0
 18833  003226  6E2A               	movwf	?_inputHandler,c
 18834                           
 18835                           ; BSR set to: 0
 18836  003228  0012               	return	
 18837  00322A                     i2l6713:
 18838                           
 18839                           ; BSR set to: 0
 18840                           ;UI.c: 433: else if(cur_state == 23){
 18841  00322A  0E17               	movlw	23
 18842  00322C  0100               	movlb	0	; () banked
 18843  00322E  19E6               	xorwf	_cur_state& (0+255),w,b
 18844  003230  0100               	movlb	0	; () banked
 18845  003232  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18846  003234  A4D8               	btfss	status,2,c
 18847  003236  D003               	goto	i2l6717
 18848                           
 18849                           ; BSR set to: 0
 18850                           ;UI.c: 434: change_state_to_menu_22();
 18851  003238  EC39  F025         	call	i2_change_state_to_menu_22	;wreg free
 18852                           
 18853                           ;UI.c: 435: }
 18854  00323C  D002               	goto	i2l6719
 18855  00323E                     i2l6717:
 18856                           
 18857                           ;UI.c: 436: else{
 18858                           ;UI.c: 437: change_state_to_menu_12();
 18859  00323E  EC51  F025         	call	i2_change_state_to_menu_12	;wreg free
 18860  003242                     i2l6719:
 18861                           
 18862                           ;UI.c: 438: }
 18863                           ;UI.c: 439: return 0;
 18864  003242  0E00               	movlw	0
 18865  003244  6E2B               	movwf	?_inputHandler+1,c
 18866  003246  0E00               	movlw	0
 18867  003248  6E2A               	movwf	?_inputHandler,c
 18868  00324A  0012               	return	
 18869  00324C                     i2l6723:
 18870                           
 18871                           ;UI.c: 441: if(cur_state == 23){
 18872  00324C  0E17               	movlw	23
 18873  00324E  0100               	movlb	0	; () banked
 18874  003250  19E6               	xorwf	_cur_state& (0+255),w,b
 18875  003252  0100               	movlb	0	; () banked
 18876  003254  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18877  003256  A4D8               	btfss	status,2,c
 18878  003258  D005               	goto	i2l6731
 18879                           
 18880                           ; BSR set to: 0
 18881                           ;UI.c: 442: return 0;
 18882  00325A  0E00               	movlw	0
 18883  00325C  6E2B               	movwf	?_inputHandler+1,c
 18884  00325E  0E00               	movlw	0
 18885  003260  6E2A               	movwf	?_inputHandler,c
 18886                           
 18887                           ; BSR set to: 0
 18888  003262  0012               	return	
 18889  003264                     i2l6731:
 18890                           
 18891                           ; BSR set to: 0
 18892                           ;UI.c: 444: else{
 18893                           ;UI.c: 445: change_state_to_menu_23();
 18894  003264  EC69  F025         	call	_change_state_to_menu_23	;wreg free
 18895                           
 18896                           ;UI.c: 446: }
 18897                           ;UI.c: 447: return 0;
 18898  003268  0E00               	movlw	0
 18899  00326A  6E2B               	movwf	?_inputHandler+1,c
 18900  00326C  0E00               	movlw	0
 18901  00326E  6E2A               	movwf	?_inputHandler,c
 18902  003270  0012               	return	
 18903  003272                     i2l6737:
 18904                           
 18905                           ;UI.c: 450: up = 1;
 18906  003272  0E00               	movlw	0
 18907  003274  6E78               	movwf	_up+1,c
 18908  003276  0E01               	movlw	1
 18909  003278  6E77               	movwf	_up,c
 18910                           
 18911                           ;UI.c: 451: return 1;
 18912  00327A  0E00               	movlw	0
 18913  00327C  6E2B               	movwf	?_inputHandler+1,c
 18914  00327E  0E01               	movlw	1
 18915  003280  6E2A               	movwf	?_inputHandler,c
 18916  003282  0012               	return	
 18917  003284                     i2l6741:
 18918                           
 18919                           ;UI.c: 453: down = 1;
 18920  003284  0E00               	movlw	0
 18921  003286  6E62               	movwf	_down+1,c
 18922  003288  0E01               	movlw	1
 18923  00328A  6E61               	movwf	_down,c
 18924                           
 18925                           ;UI.c: 454: return 1;
 18926  00328C  0E00               	movlw	0
 18927  00328E  6E2B               	movwf	?_inputHandler+1,c
 18928  003290  0E01               	movlw	1
 18929  003292  6E2A               	movwf	?_inputHandler,c
 18930  003294  0012               	return	
 18931  003296                     i2l6745:
 18932                           
 18933                           ;UI.c: 456: enter = 1;
 18934  003296  0E00               	movlw	0
 18935  003298  6E64               	movwf	_enter+1,c
 18936  00329A  0E01               	movlw	1
 18937  00329C  6E63               	movwf	_enter,c
 18938                           
 18939                           ;UI.c: 457: return 1;
 18940  00329E  0E00               	movlw	0
 18941  0032A0  6E2B               	movwf	?_inputHandler+1,c
 18942  0032A2  0E01               	movlw	1
 18943  0032A4  6E2A               	movwf	?_inputHandler,c
 18944  0032A6  0012               	return	
 18945  0032A8                     i2l6749:
 18946                           
 18947                           ;UI.c: 459: back = 1;
 18948  0032A8  0E00               	movlw	0
 18949  0032AA  6E5A               	movwf	_back+1,c
 18950  0032AC  0E01               	movlw	1
 18951  0032AE  6E59               	movwf	_back,c
 18952                           
 18953                           ;UI.c: 460: return 1;
 18954  0032B0  0E00               	movlw	0
 18955  0032B2  6E2B               	movwf	?_inputHandler+1,c
 18956  0032B4  0E01               	movlw	1
 18957  0032B6  6E2A               	movwf	?_inputHandler,c
 18958  0032B8  0012               	return	
 18959  0032BA                     i2l6753:
 18960                           
 18961                           ;UI.c: 463: return 1;
 18962  0032BA  0E00               	movlw	0
 18963  0032BC  6E2B               	movwf	?_inputHandler+1,c
 18964  0032BE  0E01               	movlw	1
 18965  0032C0  6E2A               	movwf	?_inputHandler,c
 18966                           
 18967                           ;UI.c: 464: }
 18968  0032C2  0012               	return	
 18969  0032C4                     i2l6759:
 18970  0032C4  507D               	movf	_input,w,c	;volatile
 18971                           
 18972                           ; Switch size 1, requested type "space"
 18973                           ; Number of cases is 7, Range of values is 49 to 68
 18974                           ; switch strategies available:
 18975                           ; Name         Instructions Cycles
 18976                           ; simple_byte           22    12 (average)
 18977                           ;	Chosen strategy is simple_byte
 18978  0032C6  0A31               	xorlw	49	; case 49
 18979  0032C8  B4D8               	btfsc	status,2,c
 18980  0032CA  D789               	goto	i2l6689
 18981  0032CC  0A03               	xorlw	3	; case 50
 18982  0032CE  B4D8               	btfsc	status,2,c
 18983  0032D0  D799               	goto	i2l6703
 18984  0032D2  0A01               	xorlw	1	; case 51
 18985  0032D4  B4D8               	btfsc	status,2,c
 18986  0032D6  D7BA               	goto	i2l6723
 18987  0032D8  0A72               	xorlw	114	; case 65
 18988  0032DA  B4D8               	btfsc	status,2,c
 18989  0032DC  D7CA               	goto	i2l6737
 18990  0032DE  0A03               	xorlw	3	; case 66
 18991  0032E0  B4D8               	btfsc	status,2,c
 18992  0032E2  D7D0               	goto	i2l6741
 18993  0032E4  0A01               	xorlw	1	; case 67
 18994  0032E6  B4D8               	btfsc	status,2,c
 18995  0032E8  D7D6               	goto	i2l6745
 18996  0032EA  0A07               	xorlw	7	; case 68
 18997  0032EC  B4D8               	btfsc	status,2,c
 18998  0032EE  D7DC               	goto	i2l6749
 18999  0032F0  D7E4               	goto	i2l6753
 19000  0032F2                     __end_of_inputHandler:
 19001                           	opt stack 0
 19002                           pclatu	equ	0xFFB
 19003                           pclath	equ	0xFFA
 19004                           tblptru	equ	0xFF8
 19005                           tblptrh	equ	0xFF7
 19006                           tblptrl	equ	0xFF6
 19007                           tablat	equ	0xFF5
 19008                           prodh	equ	0xFF4
 19009                           prodl	equ	0xFF3
 19010                           intcon	equ	0xFF2
 19011                           intcon2	equ	0xFF1
 19012                           intcon3	equ	0xFF0
 19013                           indf0	equ	0xFEF
 19014                           postinc0	equ	0xFEE
 19015                           fsr0h	equ	0xFEA
 19016                           fsr0l	equ	0xFE9
 19017                           wreg	equ	0xFE8
 19018                           postdec1	equ	0xFE5
 19019                           fsr1h	equ	0xFE2
 19020                           fsr1l	equ	0xFE1
 19021                           indf2	equ	0xFDF
 19022                           postinc2	equ	0xFDE
 19023                           postdec2	equ	0xFDD
 19024                           fsr2h	equ	0xFDA
 19025                           fsr2l	equ	0xFD9
 19026                           status	equ	0xFD8
 19027                           
 19028 ;; *************** function i2_change_state_to_menu_22 *****************
 19029 ;; Defined at:
 19030 ;;		line 498 in file "UI.c"
 19031 ;; Parameters:    Size  Location     Type
 19032 ;;		None
 19033 ;; Auto vars:     Size  Location     Type
 19034 ;;		None
 19035 ;; Return value:  Size  Location     Type
 19036 ;;                  1    wreg      void 
 19037 ;; Registers used:
 19038 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19039 ;; Tracked objects:
 19040 ;;		On entry : 0/0
 19041 ;;		On exit  : 0/0
 19042 ;;		Unchanged: 0/0
 19043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19048 ;;Total ram usage:        0 bytes
 19049 ;; Hardware stack levels used:    1
 19050 ;; Hardware stack levels required when called:    3
 19051 ;; This function calls:
 19052 ;;		i2_lcdInst
 19053 ;;		i2_printf
 19054 ;; This function is called by:
 19055 ;;		_updateMenu
 19056 ;;		_inputHandler
 19057 ;; This function uses a non-reentrant model
 19058 ;;
 19059                           
 19060                           	psect	text65
 19061  004A72                     __ptext65:
 19062                           	opt stack 0
 19063  004A72                     i2_change_state_to_menu_22:
 19064                           	opt stack 19
 19065                           
 19066                           ;UI.c: 499: cur_state = 22;
 19067                           
 19068                           ;incstack = 0
 19069  004A72  0E00               	movlw	0
 19070  004A74  0100               	movlb	0	; () banked
 19071  004A76  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19072  004A78  0E16               	movlw	22
 19073  004A7A  6FE6               	movwf	_cur_state& (0+255),b
 19074                           
 19075                           ; BSR set to: 0
 19076                           ;UI.c: 501: lcdInst(0b10000000);;
 19077  004A7C  0E80               	movlw	128
 19078  004A7E  EC75  F027         	call	i2_lcdInst
 19079                           
 19080                           ;UI.c: 502: printf("2. SORT        <");
 19081  004A82  0EC4               	movlw	low STR_34
 19082  004A84  6E0D               	movwf	i2printf@f,c
 19083  004A86  0EFD               	movlw	high STR_34
 19084  004A88  6E0E               	movwf	i2printf@f+1,c
 19085  004A8A  EC96  F00C         	call	i2_printf	;wreg free
 19086                           
 19087                           ;UI.c: 503: lcdInst(0b11000000);;
 19088  004A8E  0EC0               	movlw	192
 19089  004A90  EC75  F027         	call	i2_lcdInst
 19090                           
 19091                           ;UI.c: 504: printf("3. LOGS         ");
 19092  004A94  0E09               	movlw	low STR_36
 19093  004A96  6E0D               	movwf	i2printf@f,c
 19094  004A98  0EFD               	movlw	high STR_36
 19095  004A9A  6E0E               	movwf	i2printf@f+1,c
 19096  004A9C  EC96  F00C         	call	i2_printf	;wreg free
 19097  004AA0  0012               	return		;funcret
 19098  004AA2                     __end_ofi2_change_state_to_menu_22:
 19099                           	opt stack 0
 19100                           pclatu	equ	0xFFB
 19101                           pclath	equ	0xFFA
 19102                           tblptru	equ	0xFF8
 19103                           tblptrh	equ	0xFF7
 19104                           tblptrl	equ	0xFF6
 19105                           tablat	equ	0xFF5
 19106                           prodh	equ	0xFF4
 19107                           prodl	equ	0xFF3
 19108                           intcon	equ	0xFF2
 19109                           intcon2	equ	0xFF1
 19110                           intcon3	equ	0xFF0
 19111                           indf0	equ	0xFEF
 19112                           postinc0	equ	0xFEE
 19113                           fsr0h	equ	0xFEA
 19114                           fsr0l	equ	0xFE9
 19115                           wreg	equ	0xFE8
 19116                           postdec1	equ	0xFE5
 19117                           fsr1h	equ	0xFE2
 19118                           fsr1l	equ	0xFE1
 19119                           indf2	equ	0xFDF
 19120                           postinc2	equ	0xFDE
 19121                           postdec2	equ	0xFDD
 19122                           fsr2h	equ	0xFDA
 19123                           fsr2l	equ	0xFD9
 19124                           status	equ	0xFD8
 19125                           
 19126 ;; *************** function i2_change_state_to_menu_12 *****************
 19127 ;; Defined at:
 19128 ;;		line 490 in file "UI.c"
 19129 ;; Parameters:    Size  Location     Type
 19130 ;;		None
 19131 ;; Auto vars:     Size  Location     Type
 19132 ;;		None
 19133 ;; Return value:  Size  Location     Type
 19134 ;;                  1    wreg      void 
 19135 ;; Registers used:
 19136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19137 ;; Tracked objects:
 19138 ;;		On entry : 0/0
 19139 ;;		On exit  : 0/0
 19140 ;;		Unchanged: 0/0
 19141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19146 ;;Total ram usage:        0 bytes
 19147 ;; Hardware stack levels used:    1
 19148 ;; Hardware stack levels required when called:    3
 19149 ;; This function calls:
 19150 ;;		i2_lcdInst
 19151 ;;		i2_printf
 19152 ;; This function is called by:
 19153 ;;		_updateMenu
 19154 ;;		_inputHandler
 19155 ;; This function uses a non-reentrant model
 19156 ;;
 19157                           
 19158                           	psect	text66
 19159  004AA2                     __ptext66:
 19160                           	opt stack 0
 19161  004AA2                     i2_change_state_to_menu_12:
 19162                           	opt stack 19
 19163                           
 19164                           ;UI.c: 491: cur_state = 12;
 19165                           
 19166                           ;incstack = 0
 19167  004AA2  0E00               	movlw	0
 19168  004AA4  0100               	movlb	0	; () banked
 19169  004AA6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19170  004AA8  0E0C               	movlw	12
 19171  004AAA  6FE6               	movwf	_cur_state& (0+255),b
 19172                           
 19173                           ; BSR set to: 0
 19174                           ;UI.c: 493: lcdInst(0b10000000);;
 19175  004AAC  0E80               	movlw	128
 19176  004AAE  EC75  F027         	call	i2_lcdInst
 19177                           
 19178                           ;UI.c: 494: printf("1. DATE/TIME    ");
 19179  004AB2  0E2B               	movlw	low STR_33
 19180  004AB4  6E0D               	movwf	i2printf@f,c
 19181  004AB6  0EFD               	movlw	high STR_33
 19182  004AB8  6E0E               	movwf	i2printf@f+1,c
 19183  004ABA  EC96  F00C         	call	i2_printf	;wreg free
 19184                           
 19185                           ;UI.c: 495: lcdInst(0b11000000);;
 19186  004ABE  0EC0               	movlw	192
 19187  004AC0  EC75  F027         	call	i2_lcdInst
 19188                           
 19189                           ;UI.c: 496: printf("2. SORT        <");
 19190  004AC4  0EC4               	movlw	low STR_34
 19191  004AC6  6E0D               	movwf	i2printf@f,c
 19192  004AC8  0EFD               	movlw	high STR_34
 19193  004ACA  6E0E               	movwf	i2printf@f+1,c
 19194  004ACC  EC96  F00C         	call	i2_printf	;wreg free
 19195  004AD0  0012               	return		;funcret
 19196  004AD2                     __end_ofi2_change_state_to_menu_12:
 19197                           	opt stack 0
 19198                           pclatu	equ	0xFFB
 19199                           pclath	equ	0xFFA
 19200                           tblptru	equ	0xFF8
 19201                           tblptrh	equ	0xFF7
 19202                           tblptrl	equ	0xFF6
 19203                           tablat	equ	0xFF5
 19204                           prodh	equ	0xFF4
 19205                           prodl	equ	0xFF3
 19206                           intcon	equ	0xFF2
 19207                           intcon2	equ	0xFF1
 19208                           intcon3	equ	0xFF0
 19209                           indf0	equ	0xFEF
 19210                           postinc0	equ	0xFEE
 19211                           fsr0h	equ	0xFEA
 19212                           fsr0l	equ	0xFE9
 19213                           wreg	equ	0xFE8
 19214                           postdec1	equ	0xFE5
 19215                           fsr1h	equ	0xFE2
 19216                           fsr1l	equ	0xFE1
 19217                           indf2	equ	0xFDF
 19218                           postinc2	equ	0xFDE
 19219                           postdec2	equ	0xFDD
 19220                           fsr2h	equ	0xFDA
 19221                           fsr2l	equ	0xFD9
 19222                           status	equ	0xFD8
 19223                           
 19224 ;; *************** function _change_state_to_menu_23 *****************
 19225 ;; Defined at:
 19226 ;;		line 506 in file "UI.c"
 19227 ;; Parameters:    Size  Location     Type
 19228 ;;		None
 19229 ;; Auto vars:     Size  Location     Type
 19230 ;;		None
 19231 ;; Return value:  Size  Location     Type
 19232 ;;                  1    wreg      void 
 19233 ;; Registers used:
 19234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19235 ;; Tracked objects:
 19236 ;;		On entry : 0/0
 19237 ;;		On exit  : 0/0
 19238 ;;		Unchanged: 0/0
 19239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19244 ;;Total ram usage:        0 bytes
 19245 ;; Hardware stack levels used:    1
 19246 ;; Hardware stack levels required when called:    3
 19247 ;; This function calls:
 19248 ;;		i2_lcdInst
 19249 ;;		i2_printf
 19250 ;; This function is called by:
 19251 ;;		_updateMenu
 19252 ;;		_inputHandler
 19253 ;; This function uses a non-reentrant model
 19254 ;;
 19255                           
 19256                           	psect	text67
 19257  004AD2                     __ptext67:
 19258                           	opt stack 0
 19259  004AD2                     _change_state_to_menu_23:
 19260                           	opt stack 18
 19261                           
 19262                           ;UI.c: 507: cur_state = 23;
 19263                           
 19264                           ;incstack = 0
 19265  004AD2  0E00               	movlw	0
 19266  004AD4  0100               	movlb	0	; () banked
 19267  004AD6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19268  004AD8  0E17               	movlw	23
 19269  004ADA  6FE6               	movwf	_cur_state& (0+255),b
 19270                           
 19271                           ; BSR set to: 0
 19272                           ;UI.c: 509: lcdInst(0b10000000);;
 19273  004ADC  0E80               	movlw	128
 19274  004ADE  EC75  F027         	call	i2_lcdInst
 19275                           
 19276                           ;UI.c: 510: printf("2. SORT         ");
 19277  004AE2  0E1A               	movlw	low STR_32
 19278  004AE4  6E0D               	movwf	i2printf@f,c
 19279  004AE6  0EFD               	movlw	high STR_32
 19280  004AE8  6E0E               	movwf	i2printf@f+1,c
 19281  004AEA  EC96  F00C         	call	i2_printf	;wreg free
 19282                           
 19283                           ;UI.c: 511: lcdInst(0b11000000);;
 19284  004AEE  0EC0               	movlw	192
 19285  004AF0  EC75  F027         	call	i2_lcdInst
 19286                           
 19287                           ;UI.c: 512: printf("3. LOGS        <");
 19288  004AF4  0EB3               	movlw	low STR_38
 19289  004AF6  6E0D               	movwf	i2printf@f,c
 19290  004AF8  0EFD               	movlw	high STR_38
 19291  004AFA  6E0E               	movwf	i2printf@f+1,c
 19292  004AFC  EC96  F00C         	call	i2_printf	;wreg free
 19293  004B00  0012               	return		;funcret
 19294  004B02                     __end_of_change_state_to_menu_23:
 19295                           	opt stack 0
 19296                           pclatu	equ	0xFFB
 19297                           pclath	equ	0xFFA
 19298                           tblptru	equ	0xFF8
 19299                           tblptrh	equ	0xFF7
 19300                           tblptrl	equ	0xFF6
 19301                           tablat	equ	0xFF5
 19302                           prodh	equ	0xFF4
 19303                           prodl	equ	0xFF3
 19304                           intcon	equ	0xFF2
 19305                           intcon2	equ	0xFF1
 19306                           intcon3	equ	0xFF0
 19307                           indf0	equ	0xFEF
 19308                           postinc0	equ	0xFEE
 19309                           fsr0h	equ	0xFEA
 19310                           fsr0l	equ	0xFE9
 19311                           wreg	equ	0xFE8
 19312                           postdec1	equ	0xFE5
 19313                           fsr1h	equ	0xFE2
 19314                           fsr1l	equ	0xFE1
 19315                           indf2	equ	0xFDF
 19316                           postinc2	equ	0xFDE
 19317                           postdec2	equ	0xFDD
 19318                           fsr2h	equ	0xFDA
 19319                           fsr2l	equ	0xFD9
 19320                           status	equ	0xFD8
 19321                           
 19322 ;; *************** function _change_state_to_menu_11 *****************
 19323 ;; Defined at:
 19324 ;;		line 482 in file "UI.c"
 19325 ;; Parameters:    Size  Location     Type
 19326 ;;		None
 19327 ;; Auto vars:     Size  Location     Type
 19328 ;;		None
 19329 ;; Return value:  Size  Location     Type
 19330 ;;                  1    wreg      void 
 19331 ;; Registers used:
 19332 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19333 ;; Tracked objects:
 19334 ;;		On entry : 0/0
 19335 ;;		On exit  : 0/0
 19336 ;;		Unchanged: 0/0
 19337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19342 ;;Total ram usage:        0 bytes
 19343 ;; Hardware stack levels used:    1
 19344 ;; Hardware stack levels required when called:    3
 19345 ;; This function calls:
 19346 ;;		i2_lcdInst
 19347 ;;		i2_printf
 19348 ;; This function is called by:
 19349 ;;		_updateMenu
 19350 ;;		_inputHandler
 19351 ;; This function uses a non-reentrant model
 19352 ;;
 19353                           
 19354                           	psect	text68
 19355  004B02                     __ptext68:
 19356                           	opt stack 0
 19357  004B02                     _change_state_to_menu_11:
 19358                           	opt stack 18
 19359                           
 19360                           ;UI.c: 483: cur_state = 11;
 19361                           
 19362                           ;incstack = 0
 19363  004B02  0E00               	movlw	0
 19364  004B04  0100               	movlb	0	; () banked
 19365  004B06  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19366  004B08  0E0B               	movlw	11
 19367  004B0A  6FE6               	movwf	_cur_state& (0+255),b
 19368                           
 19369                           ; BSR set to: 0
 19370                           ;UI.c: 485: lcdInst(0b10000000);;
 19371  004B0C  0E80               	movlw	128
 19372  004B0E  EC75  F027         	call	i2_lcdInst
 19373                           
 19374                           ;UI.c: 486: printf("1. DATE/TIME   <");
 19375  004B12  0ED5               	movlw	low STR_31
 19376  004B14  6E0D               	movwf	i2printf@f,c
 19377  004B16  0EFD               	movlw	high STR_31
 19378  004B18  6E0E               	movwf	i2printf@f+1,c
 19379  004B1A  EC96  F00C         	call	i2_printf	;wreg free
 19380                           
 19381                           ;UI.c: 487: lcdInst(0b11000000);;
 19382  004B1E  0EC0               	movlw	192
 19383  004B20  EC75  F027         	call	i2_lcdInst
 19384                           
 19385                           ;UI.c: 488: printf("2. SORT         ");
 19386  004B24  0E1A               	movlw	low STR_32
 19387  004B26  6E0D               	movwf	i2printf@f,c
 19388  004B28  0EFD               	movlw	high STR_32
 19389  004B2A  6E0E               	movwf	i2printf@f+1,c
 19390  004B2C  EC96  F00C         	call	i2_printf	;wreg free
 19391  004B30  0012               	return		;funcret
 19392  004B32                     __end_of_change_state_to_menu_11:
 19393                           	opt stack 0
 19394                           pclatu	equ	0xFFB
 19395                           pclath	equ	0xFFA
 19396                           tblptru	equ	0xFF8
 19397                           tblptrh	equ	0xFF7
 19398                           tblptrl	equ	0xFF6
 19399                           tablat	equ	0xFF5
 19400                           prodh	equ	0xFF4
 19401                           prodl	equ	0xFF3
 19402                           intcon	equ	0xFF2
 19403                           intcon2	equ	0xFF1
 19404                           intcon3	equ	0xFF0
 19405                           indf0	equ	0xFEF
 19406                           postinc0	equ	0xFEE
 19407                           fsr0h	equ	0xFEA
 19408                           fsr0l	equ	0xFE9
 19409                           wreg	equ	0xFE8
 19410                           postdec1	equ	0xFE5
 19411                           fsr1h	equ	0xFE2
 19412                           fsr1l	equ	0xFE1
 19413                           indf2	equ	0xFDF
 19414                           postinc2	equ	0xFDE
 19415                           postdec2	equ	0xFDD
 19416                           fsr2h	equ	0xFDA
 19417                           fsr2l	equ	0xFD9
 19418                           status	equ	0xFD8
 19419                           
 19420 ;; *************** function _change_state_to_logs_34 *****************
 19421 ;; Defined at:
 19422 ;;		line 549 in file "UI.c"
 19423 ;; Parameters:    Size  Location     Type
 19424 ;;		None
 19425 ;; Auto vars:     Size  Location     Type
 19426 ;;		None
 19427 ;; Return value:  Size  Location     Type
 19428 ;;                  1    wreg      void 
 19429 ;; Registers used:
 19430 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19431 ;; Tracked objects:
 19432 ;;		On entry : 0/0
 19433 ;;		On exit  : 0/0
 19434 ;;		Unchanged: 0/0
 19435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19440 ;;Total ram usage:        0 bytes
 19441 ;; Hardware stack levels used:    1
 19442 ;; Hardware stack levels required when called:    3
 19443 ;; This function calls:
 19444 ;;		i2_lcdInst
 19445 ;;		i2_printf
 19446 ;; This function is called by:
 19447 ;;		_updateMenu
 19448 ;;		_inputHandler
 19449 ;; This function uses a non-reentrant model
 19450 ;;
 19451                           
 19452                           	psect	text69
 19453  004B32                     __ptext69:
 19454                           	opt stack 0
 19455  004B32                     _change_state_to_logs_34:
 19456                           	opt stack 18
 19457                           
 19458                           ;UI.c: 550: cur_state = 1034;
 19459                           
 19460                           ;incstack = 0
 19461  004B32  0E04               	movlw	4
 19462  004B34  0100               	movlb	0	; () banked
 19463  004B36  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19464  004B38  0E0A               	movlw	10
 19465  004B3A  6FE6               	movwf	_cur_state& (0+255),b
 19466                           
 19467                           ; BSR set to: 0
 19468                           ;UI.c: 551: lcdInst(0b10000000);;
 19469  004B3C  0E80               	movlw	128
 19470  004B3E  EC75  F027         	call	i2_lcdInst
 19471                           
 19472                           ;UI.c: 552: printf("LOG 3           ");
 19473  004B42  0EE7               	movlw	low STR_44
 19474  004B44  6E0D               	movwf	i2printf@f,c
 19475  004B46  0EFC               	movlw	high STR_44
 19476  004B48  6E0E               	movwf	i2printf@f+1,c
 19477  004B4A  EC96  F00C         	call	i2_printf	;wreg free
 19478                           
 19479                           ;UI.c: 553: lcdInst(0b11000000);;
 19480  004B4E  0EC0               	movlw	192
 19481  004B50  EC75  F027         	call	i2_lcdInst
 19482                           
 19483                           ;UI.c: 554: printf("LOG 4          <");
 19484  004B54  0EA2               	movlw	low STR_50
 19485  004B56  6E0D               	movwf	i2printf@f,c
 19486  004B58  0EFD               	movlw	high STR_50
 19487  004B5A  6E0E               	movwf	i2printf@f+1,c
 19488  004B5C  EC96  F00C         	call	i2_printf	;wreg free
 19489  004B60  0012               	return		;funcret
 19490  004B62                     __end_of_change_state_to_logs_34:
 19491                           	opt stack 0
 19492                           pclatu	equ	0xFFB
 19493                           pclath	equ	0xFFA
 19494                           tblptru	equ	0xFF8
 19495                           tblptrh	equ	0xFF7
 19496                           tblptrl	equ	0xFF6
 19497                           tablat	equ	0xFF5
 19498                           prodh	equ	0xFF4
 19499                           prodl	equ	0xFF3
 19500                           intcon	equ	0xFF2
 19501                           intcon2	equ	0xFF1
 19502                           intcon3	equ	0xFF0
 19503                           indf0	equ	0xFEF
 19504                           postinc0	equ	0xFEE
 19505                           fsr0h	equ	0xFEA
 19506                           fsr0l	equ	0xFE9
 19507                           wreg	equ	0xFE8
 19508                           postdec1	equ	0xFE5
 19509                           fsr1h	equ	0xFE2
 19510                           fsr1l	equ	0xFE1
 19511                           indf2	equ	0xFDF
 19512                           postinc2	equ	0xFDE
 19513                           postdec2	equ	0xFDD
 19514                           fsr2h	equ	0xFDA
 19515                           fsr2l	equ	0xFD9
 19516                           status	equ	0xFD8
 19517                           
 19518 ;; *************** function _change_state_to_logs_33 *****************
 19519 ;; Defined at:
 19520 ;;		line 542 in file "UI.c"
 19521 ;; Parameters:    Size  Location     Type
 19522 ;;		None
 19523 ;; Auto vars:     Size  Location     Type
 19524 ;;		None
 19525 ;; Return value:  Size  Location     Type
 19526 ;;                  1    wreg      void 
 19527 ;; Registers used:
 19528 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19529 ;; Tracked objects:
 19530 ;;		On entry : 0/0
 19531 ;;		On exit  : 0/0
 19532 ;;		Unchanged: 0/0
 19533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19538 ;;Total ram usage:        0 bytes
 19539 ;; Hardware stack levels used:    1
 19540 ;; Hardware stack levels required when called:    3
 19541 ;; This function calls:
 19542 ;;		i2_lcdInst
 19543 ;;		i2_printf
 19544 ;; This function is called by:
 19545 ;;		_updateMenu
 19546 ;;		_inputHandler
 19547 ;; This function uses a non-reentrant model
 19548 ;;
 19549                           
 19550                           	psect	text70
 19551  004B62                     __ptext70:
 19552                           	opt stack 0
 19553  004B62                     _change_state_to_logs_33:
 19554                           	opt stack 18
 19555                           
 19556                           ;UI.c: 543: cur_state = 1033;
 19557                           
 19558                           ;incstack = 0
 19559  004B62  0E04               	movlw	4
 19560  004B64  0100               	movlb	0	; () banked
 19561  004B66  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19562  004B68  0E09               	movlw	9
 19563  004B6A  6FE6               	movwf	_cur_state& (0+255),b
 19564                           
 19565                           ; BSR set to: 0
 19566                           ;UI.c: 544: lcdInst(0b10000000);;
 19567  004B6C  0E80               	movlw	128
 19568  004B6E  EC75  F027         	call	i2_lcdInst
 19569                           
 19570                           ;UI.c: 545: printf("LOG 3          <");
 19571  004B72  0E91               	movlw	low STR_46
 19572  004B74  6E0D               	movwf	i2printf@f,c
 19573  004B76  0EFD               	movlw	high STR_46
 19574  004B78  6E0E               	movwf	i2printf@f+1,c
 19575  004B7A  EC96  F00C         	call	i2_printf	;wreg free
 19576                           
 19577                           ;UI.c: 546: lcdInst(0b11000000);;
 19578  004B7E  0EC0               	movlw	192
 19579  004B80  EC75  F027         	call	i2_lcdInst
 19580                           
 19581                           ;UI.c: 547: printf("LOG 4           ");
 19582  004B84  0EF8               	movlw	low STR_48
 19583  004B86  6E0D               	movwf	i2printf@f,c
 19584  004B88  0EFC               	movlw	high STR_48
 19585  004B8A  6E0E               	movwf	i2printf@f+1,c
 19586  004B8C  EC96  F00C         	call	i2_printf	;wreg free
 19587  004B90  0012               	return		;funcret
 19588  004B92                     __end_of_change_state_to_logs_33:
 19589                           	opt stack 0
 19590                           pclatu	equ	0xFFB
 19591                           pclath	equ	0xFFA
 19592                           tblptru	equ	0xFF8
 19593                           tblptrh	equ	0xFF7
 19594                           tblptrl	equ	0xFF6
 19595                           tablat	equ	0xFF5
 19596                           prodh	equ	0xFF4
 19597                           prodl	equ	0xFF3
 19598                           intcon	equ	0xFF2
 19599                           intcon2	equ	0xFF1
 19600                           intcon3	equ	0xFF0
 19601                           indf0	equ	0xFEF
 19602                           postinc0	equ	0xFEE
 19603                           fsr0h	equ	0xFEA
 19604                           fsr0l	equ	0xFE9
 19605                           wreg	equ	0xFE8
 19606                           postdec1	equ	0xFE5
 19607                           fsr1h	equ	0xFE2
 19608                           fsr1l	equ	0xFE1
 19609                           indf2	equ	0xFDF
 19610                           postinc2	equ	0xFDE
 19611                           postdec2	equ	0xFDD
 19612                           fsr2h	equ	0xFDA
 19613                           fsr2l	equ	0xFD9
 19614                           status	equ	0xFD8
 19615                           
 19616 ;; *************** function _change_state_to_logs_23 *****************
 19617 ;; Defined at:
 19618 ;;		line 535 in file "UI.c"
 19619 ;; Parameters:    Size  Location     Type
 19620 ;;		None
 19621 ;; Auto vars:     Size  Location     Type
 19622 ;;		None
 19623 ;; Return value:  Size  Location     Type
 19624 ;;                  1    wreg      void 
 19625 ;; Registers used:
 19626 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19627 ;; Tracked objects:
 19628 ;;		On entry : 0/0
 19629 ;;		On exit  : 0/0
 19630 ;;		Unchanged: 0/0
 19631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19636 ;;Total ram usage:        0 bytes
 19637 ;; Hardware stack levels used:    1
 19638 ;; Hardware stack levels required when called:    3
 19639 ;; This function calls:
 19640 ;;		i2_lcdInst
 19641 ;;		i2_printf
 19642 ;; This function is called by:
 19643 ;;		_updateMenu
 19644 ;;		_inputHandler
 19645 ;; This function uses a non-reentrant model
 19646 ;;
 19647                           
 19648                           	psect	text71
 19649  004C7E                     __ptext71:
 19650                           	opt stack 0
 19651  004C7E                     _change_state_to_logs_23:
 19652                           	opt stack 18
 19653                           
 19654                           ;UI.c: 536: cur_state = 1023;
 19655                           
 19656                           ;incstack = 0
 19657  004C7E  0E03               	movlw	3
 19658  004C80  0100               	movlb	0	; () banked
 19659  004C82  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19660  004C84  69E6               	setf	_cur_state& (0+255),b
 19661                           
 19662                           ; BSR set to: 0
 19663                           ;UI.c: 537: lcdInst(0b10000000);;
 19664  004C86  0E80               	movlw	128
 19665  004C88  EC75  F027         	call	i2_lcdInst
 19666                           
 19667                           ;UI.c: 538: printf("LOG 2           ");
 19668  004C8C  0ED6               	movlw	low STR_40
 19669  004C8E  6E0D               	movwf	i2printf@f,c
 19670  004C90  0EFC               	movlw	high STR_40
 19671  004C92  6E0E               	movwf	i2printf@f+1,c
 19672  004C94  EC96  F00C         	call	i2_printf	;wreg free
 19673                           
 19674                           ;UI.c: 539: lcdInst(0b11000000);;
 19675  004C98  0EC0               	movlw	192
 19676  004C9A  EC75  F027         	call	i2_lcdInst
 19677                           
 19678                           ;UI.c: 540: printf("LOG 3          <");
 19679  004C9E  0E91               	movlw	low STR_46
 19680  004CA0  6E0D               	movwf	i2printf@f,c
 19681  004CA2  0EFD               	movlw	high STR_46
 19682  004CA4  6E0E               	movwf	i2printf@f+1,c
 19683  004CA6  EC96  F00C         	call	i2_printf	;wreg free
 19684  004CAA  0012               	return		;funcret
 19685  004CAC                     __end_of_change_state_to_logs_23:
 19686                           	opt stack 0
 19687                           pclatu	equ	0xFFB
 19688                           pclath	equ	0xFFA
 19689                           tblptru	equ	0xFF8
 19690                           tblptrh	equ	0xFF7
 19691                           tblptrl	equ	0xFF6
 19692                           tablat	equ	0xFF5
 19693                           prodh	equ	0xFF4
 19694                           prodl	equ	0xFF3
 19695                           intcon	equ	0xFF2
 19696                           intcon2	equ	0xFF1
 19697                           intcon3	equ	0xFF0
 19698                           indf0	equ	0xFEF
 19699                           postinc0	equ	0xFEE
 19700                           fsr0h	equ	0xFEA
 19701                           fsr0l	equ	0xFE9
 19702                           wreg	equ	0xFE8
 19703                           postdec1	equ	0xFE5
 19704                           fsr1h	equ	0xFE2
 19705                           fsr1l	equ	0xFE1
 19706                           indf2	equ	0xFDF
 19707                           postinc2	equ	0xFDE
 19708                           postdec2	equ	0xFDD
 19709                           fsr2h	equ	0xFDA
 19710                           fsr2l	equ	0xFD9
 19711                           status	equ	0xFD8
 19712                           
 19713 ;; *************** function _change_state_to_logs_22 *****************
 19714 ;; Defined at:
 19715 ;;		line 528 in file "UI.c"
 19716 ;; Parameters:    Size  Location     Type
 19717 ;;		None
 19718 ;; Auto vars:     Size  Location     Type
 19719 ;;		None
 19720 ;; Return value:  Size  Location     Type
 19721 ;;                  1    wreg      void 
 19722 ;; Registers used:
 19723 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19724 ;; Tracked objects:
 19725 ;;		On entry : 0/0
 19726 ;;		On exit  : 0/0
 19727 ;;		Unchanged: 0/0
 19728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19733 ;;Total ram usage:        0 bytes
 19734 ;; Hardware stack levels used:    1
 19735 ;; Hardware stack levels required when called:    3
 19736 ;; This function calls:
 19737 ;;		i2_lcdInst
 19738 ;;		i2_printf
 19739 ;; This function is called by:
 19740 ;;		_updateMenu
 19741 ;;		_inputHandler
 19742 ;; This function uses a non-reentrant model
 19743 ;;
 19744                           
 19745                           	psect	text72
 19746  004B92                     __ptext72:
 19747                           	opt stack 0
 19748  004B92                     _change_state_to_logs_22:
 19749                           	opt stack 18
 19750                           
 19751                           ;UI.c: 529: cur_state = 1022;
 19752                           
 19753                           ;incstack = 0
 19754  004B92  0E03               	movlw	3
 19755  004B94  0100               	movlb	0	; () banked
 19756  004B96  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19757  004B98  0EFE               	movlw	254
 19758  004B9A  6FE6               	movwf	_cur_state& (0+255),b
 19759                           
 19760                           ; BSR set to: 0
 19761                           ;UI.c: 530: lcdInst(0b10000000);;
 19762  004B9C  0E80               	movlw	128
 19763  004B9E  EC75  F027         	call	i2_lcdInst
 19764                           
 19765                           ;UI.c: 531: printf("LOG 2          <");
 19766  004BA2  0E80               	movlw	low STR_42
 19767  004BA4  6E0D               	movwf	i2printf@f,c
 19768  004BA6  0EFD               	movlw	high STR_42
 19769  004BA8  6E0E               	movwf	i2printf@f+1,c
 19770  004BAA  EC96  F00C         	call	i2_printf	;wreg free
 19771                           
 19772                           ;UI.c: 532: lcdInst(0b11000000);;
 19773  004BAE  0EC0               	movlw	192
 19774  004BB0  EC75  F027         	call	i2_lcdInst
 19775                           
 19776                           ;UI.c: 533: printf("LOG 3           ");
 19777  004BB4  0EE7               	movlw	low STR_44
 19778  004BB6  6E0D               	movwf	i2printf@f,c
 19779  004BB8  0EFC               	movlw	high STR_44
 19780  004BBA  6E0E               	movwf	i2printf@f+1,c
 19781  004BBC  EC96  F00C         	call	i2_printf	;wreg free
 19782  004BC0  0012               	return		;funcret
 19783  004BC2                     __end_of_change_state_to_logs_22:
 19784                           	opt stack 0
 19785                           pclatu	equ	0xFFB
 19786                           pclath	equ	0xFFA
 19787                           tblptru	equ	0xFF8
 19788                           tblptrh	equ	0xFF7
 19789                           tblptrl	equ	0xFF6
 19790                           tablat	equ	0xFF5
 19791                           prodh	equ	0xFF4
 19792                           prodl	equ	0xFF3
 19793                           intcon	equ	0xFF2
 19794                           intcon2	equ	0xFF1
 19795                           intcon3	equ	0xFF0
 19796                           indf0	equ	0xFEF
 19797                           postinc0	equ	0xFEE
 19798                           fsr0h	equ	0xFEA
 19799                           fsr0l	equ	0xFE9
 19800                           wreg	equ	0xFE8
 19801                           postdec1	equ	0xFE5
 19802                           fsr1h	equ	0xFE2
 19803                           fsr1l	equ	0xFE1
 19804                           indf2	equ	0xFDF
 19805                           postinc2	equ	0xFDE
 19806                           postdec2	equ	0xFDD
 19807                           fsr2h	equ	0xFDA
 19808                           fsr2l	equ	0xFD9
 19809                           status	equ	0xFD8
 19810                           
 19811 ;; *************** function _change_state_to_logs_12 *****************
 19812 ;; Defined at:
 19813 ;;		line 521 in file "UI.c"
 19814 ;; Parameters:    Size  Location     Type
 19815 ;;		None
 19816 ;; Auto vars:     Size  Location     Type
 19817 ;;		None
 19818 ;; Return value:  Size  Location     Type
 19819 ;;                  1    wreg      void 
 19820 ;; Registers used:
 19821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19822 ;; Tracked objects:
 19823 ;;		On entry : 0/0
 19824 ;;		On exit  : 0/0
 19825 ;;		Unchanged: 0/0
 19826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19831 ;;Total ram usage:        0 bytes
 19832 ;; Hardware stack levels used:    1
 19833 ;; Hardware stack levels required when called:    3
 19834 ;; This function calls:
 19835 ;;		i2_lcdInst
 19836 ;;		i2_printf
 19837 ;; This function is called by:
 19838 ;;		_updateMenu
 19839 ;;		_inputHandler
 19840 ;; This function uses a non-reentrant model
 19841 ;;
 19842                           
 19843                           	psect	text73
 19844  004BC2                     __ptext73:
 19845                           	opt stack 0
 19846  004BC2                     _change_state_to_logs_12:
 19847                           	opt stack 18
 19848                           
 19849                           ;UI.c: 522: cur_state = 1012;
 19850                           
 19851                           ;incstack = 0
 19852  004BC2  0E03               	movlw	3
 19853  004BC4  0100               	movlb	0	; () banked
 19854  004BC6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19855  004BC8  0EF4               	movlw	244
 19856  004BCA  6FE6               	movwf	_cur_state& (0+255),b
 19857                           
 19858                           ; BSR set to: 0
 19859                           ;UI.c: 523: lcdInst(0b10000000);;
 19860  004BCC  0E80               	movlw	128
 19861  004BCE  EC75  F027         	call	i2_lcdInst
 19862                           
 19863                           ;UI.c: 524: printf("LOG 1           ");
 19864  004BD2  0EC5               	movlw	low STR_41
 19865  004BD4  6E0D               	movwf	i2printf@f,c
 19866  004BD6  0EFC               	movlw	high STR_41
 19867  004BD8  6E0E               	movwf	i2printf@f+1,c
 19868  004BDA  EC96  F00C         	call	i2_printf	;wreg free
 19869                           
 19870                           ;UI.c: 525: lcdInst(0b11000000);;
 19871  004BDE  0EC0               	movlw	192
 19872  004BE0  EC75  F027         	call	i2_lcdInst
 19873                           
 19874                           ;UI.c: 526: printf("LOG 2          <");
 19875  004BE4  0E80               	movlw	low STR_42
 19876  004BE6  6E0D               	movwf	i2printf@f,c
 19877  004BE8  0EFD               	movlw	high STR_42
 19878  004BEA  6E0E               	movwf	i2printf@f+1,c
 19879  004BEC  EC96  F00C         	call	i2_printf	;wreg free
 19880  004BF0  0012               	return		;funcret
 19881  004BF2                     __end_of_change_state_to_logs_12:
 19882                           	opt stack 0
 19883                           pclatu	equ	0xFFB
 19884                           pclath	equ	0xFFA
 19885                           tblptru	equ	0xFF8
 19886                           tblptrh	equ	0xFF7
 19887                           tblptrl	equ	0xFF6
 19888                           tablat	equ	0xFF5
 19889                           prodh	equ	0xFF4
 19890                           prodl	equ	0xFF3
 19891                           intcon	equ	0xFF2
 19892                           intcon2	equ	0xFF1
 19893                           intcon3	equ	0xFF0
 19894                           indf0	equ	0xFEF
 19895                           postinc0	equ	0xFEE
 19896                           fsr0h	equ	0xFEA
 19897                           fsr0l	equ	0xFE9
 19898                           wreg	equ	0xFE8
 19899                           postdec1	equ	0xFE5
 19900                           fsr1h	equ	0xFE2
 19901                           fsr1l	equ	0xFE1
 19902                           indf2	equ	0xFDF
 19903                           postinc2	equ	0xFDE
 19904                           postdec2	equ	0xFDD
 19905                           fsr2h	equ	0xFDA
 19906                           fsr2l	equ	0xFD9
 19907                           status	equ	0xFD8
 19908                           
 19909 ;; *************** function _change_state_to_logs_11 *****************
 19910 ;; Defined at:
 19911 ;;		line 514 in file "UI.c"
 19912 ;; Parameters:    Size  Location     Type
 19913 ;;		None
 19914 ;; Auto vars:     Size  Location     Type
 19915 ;;		None
 19916 ;; Return value:  Size  Location     Type
 19917 ;;                  1    wreg      void 
 19918 ;; Registers used:
 19919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19920 ;; Tracked objects:
 19921 ;;		On entry : 0/0
 19922 ;;		On exit  : 0/0
 19923 ;;		Unchanged: 0/0
 19924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19929 ;;Total ram usage:        0 bytes
 19930 ;; Hardware stack levels used:    1
 19931 ;; Hardware stack levels required when called:    3
 19932 ;; This function calls:
 19933 ;;		i2_lcdInst
 19934 ;;		i2_printf
 19935 ;; This function is called by:
 19936 ;;		_updateMenu
 19937 ;;		_inputHandler
 19938 ;; This function uses a non-reentrant model
 19939 ;;
 19940                           
 19941                           	psect	text74
 19942  004BF2                     __ptext74:
 19943                           	opt stack 0
 19944  004BF2                     _change_state_to_logs_11:
 19945                           	opt stack 18
 19946                           
 19947                           ;UI.c: 515: cur_state = 1011;
 19948                           
 19949                           ;incstack = 0
 19950  004BF2  0E03               	movlw	3
 19951  004BF4  0100               	movlb	0	; () banked
 19952  004BF6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19953  004BF8  0EF3               	movlw	243
 19954  004BFA  6FE6               	movwf	_cur_state& (0+255),b
 19955                           
 19956                           ; BSR set to: 0
 19957                           ;UI.c: 516: lcdInst(0b10000000);;
 19958  004BFC  0E80               	movlw	128
 19959  004BFE  EC75  F027         	call	i2_lcdInst
 19960                           
 19961                           ;UI.c: 517: printf("LOG 1          <");
 19962  004C02  0E6F               	movlw	low STR_39
 19963  004C04  6E0D               	movwf	i2printf@f,c
 19964  004C06  0EFD               	movlw	high STR_39
 19965  004C08  6E0E               	movwf	i2printf@f+1,c
 19966  004C0A  EC96  F00C         	call	i2_printf	;wreg free
 19967                           
 19968                           ;UI.c: 518: lcdInst(0b11000000);;
 19969  004C0E  0EC0               	movlw	192
 19970  004C10  EC75  F027         	call	i2_lcdInst
 19971                           
 19972                           ;UI.c: 519: printf("LOG 2           ");
 19973  004C14  0ED6               	movlw	low STR_40
 19974  004C16  6E0D               	movwf	i2printf@f,c
 19975  004C18  0EFC               	movlw	high STR_40
 19976  004C1A  6E0E               	movwf	i2printf@f+1,c
 19977  004C1C  EC96  F00C         	call	i2_printf	;wreg free
 19978  004C20  0012               	return		;funcret
 19979  004C22                     __end_of_change_state_to_logs_11:
 19980                           	opt stack 0
 19981                           pclatu	equ	0xFFB
 19982                           pclath	equ	0xFFA
 19983                           tblptru	equ	0xFF8
 19984                           tblptrh	equ	0xFF7
 19985                           tblptrl	equ	0xFF6
 19986                           tablat	equ	0xFF5
 19987                           prodh	equ	0xFF4
 19988                           prodl	equ	0xFF3
 19989                           intcon	equ	0xFF2
 19990                           intcon2	equ	0xFF1
 19991                           intcon3	equ	0xFF0
 19992                           indf0	equ	0xFEF
 19993                           postinc0	equ	0xFEE
 19994                           fsr0h	equ	0xFEA
 19995                           fsr0l	equ	0xFE9
 19996                           wreg	equ	0xFE8
 19997                           postdec1	equ	0xFE5
 19998                           fsr1h	equ	0xFE2
 19999                           fsr1l	equ	0xFE1
 20000                           indf2	equ	0xFDF
 20001                           postinc2	equ	0xFDE
 20002                           postdec2	equ	0xFDD
 20003                           fsr2h	equ	0xFDA
 20004                           fsr2l	equ	0xFD9
 20005                           status	equ	0xFD8
 20006                           
 20007 ;; *************** function _dispLogs *****************
 20008 ;; Defined at:
 20009 ;;		line 467 in file "UI.c"
 20010 ;; Parameters:    Size  Location     Type
 20011 ;;  myLog           2   17[COMRAM] int 
 20012 ;; Auto vars:     Size  Location     Type
 20013 ;;		None
 20014 ;; Return value:  Size  Location     Type
 20015 ;;                  1    wreg      void 
 20016 ;; Registers used:
 20017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20018 ;; Tracked objects:
 20019 ;;		On entry : 0/0
 20020 ;;		On exit  : 0/0
 20021 ;;		Unchanged: 0/0
 20022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20023 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20026 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20027 ;;Total ram usage:        2 bytes
 20028 ;; Hardware stack levels used:    1
 20029 ;; Hardware stack levels required when called:    2
 20030 ;; This function calls:
 20031 ;;		_retrieveLog
 20032 ;; This function is called by:
 20033 ;;		_updateMenu
 20034 ;; This function uses a non-reentrant model
 20035 ;;
 20036                           
 20037                           	psect	text75
 20038  004DCA                     __ptext75:
 20039                           	opt stack 0
 20040  004DCA                     _dispLogs:
 20041                           	opt stack 20
 20042                           
 20043                           ;UI.c: 468: logstate = 1;
 20044                           
 20045                           ;incstack = 0
 20046  004DCA  0E00               	movlw	0
 20047  004DCC  0100               	movlb	0	; () banked
 20048  004DCE  6FF7               	movwf	(_logstate+1)& (0+255),b
 20049  004DD0  0E01               	movlw	1
 20050  004DD2  6FF6               	movwf	_logstate& (0+255),b
 20051                           
 20052                           ; BSR set to: 0
 20053                           ;UI.c: 469: log = myLog;
 20054  004DD4  C012  F0EC         	movff	dispLogs@myLog,_log
 20055  004DD8  C013  F0ED         	movff	dispLogs@myLog+1,_log+1
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;UI.c: 470: retrieveLog(myLog - 1);
 20059  004DDC  0EFF               	movlw	255
 20060  004DDE  2412               	addwf	dispLogs@myLog,w,c
 20061  004DE0  6E07               	movwf	retrieveLog@logNum,c
 20062  004DE2  0EFF               	movlw	255
 20063  004DE4  2013               	addwfc	dispLogs@myLog+1,w,c
 20064  004DE6  6E08               	movwf	retrieveLog@logNum+1,c
 20065  004DE8  EC80  F01C         	call	_retrieveLog	;wreg free
 20066  004DEC  0012               	return		;funcret
 20067  004DEE                     __end_of_dispLogs:
 20068                           	opt stack 0
 20069                           pclatu	equ	0xFFB
 20070                           pclath	equ	0xFFA
 20071                           tblptru	equ	0xFF8
 20072                           tblptrh	equ	0xFF7
 20073                           tblptrl	equ	0xFF6
 20074                           tablat	equ	0xFF5
 20075                           prodh	equ	0xFF4
 20076                           prodl	equ	0xFF3
 20077                           intcon	equ	0xFF2
 20078                           intcon2	equ	0xFF1
 20079                           intcon3	equ	0xFF0
 20080                           indf0	equ	0xFEF
 20081                           postinc0	equ	0xFEE
 20082                           fsr0h	equ	0xFEA
 20083                           fsr0l	equ	0xFE9
 20084                           wreg	equ	0xFE8
 20085                           postdec1	equ	0xFE5
 20086                           fsr1h	equ	0xFE2
 20087                           fsr1l	equ	0xFE1
 20088                           indf2	equ	0xFDF
 20089                           postinc2	equ	0xFDE
 20090                           postdec2	equ	0xFDD
 20091                           fsr2h	equ	0xFDA
 20092                           fsr2l	equ	0xFD9
 20093                           status	equ	0xFD8
 20094                           
 20095 ;; *************** function _retrieveLog *****************
 20096 ;; Defined at:
 20097 ;;		line 134 in file "EEPROM.c"
 20098 ;; Parameters:    Size  Location     Type
 20099 ;;  logNum          2    6[COMRAM] int 
 20100 ;; Auto vars:     Size  Location     Type
 20101 ;;  i               2   13[COMRAM] int 
 20102 ;;  addr            2   15[COMRAM] unsigned short 
 20103 ;;  byte3           1   12[COMRAM] unsigned char 
 20104 ;;  byte2           1   11[COMRAM] unsigned char 
 20105 ;;  byte1           1   10[COMRAM] unsigned char 
 20106 ;; Return value:  Size  Location     Type
 20107 ;;                  1    wreg      void 
 20108 ;; Registers used:
 20109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20110 ;; Tracked objects:
 20111 ;;		On entry : 0/0
 20112 ;;		On exit  : 0/0
 20113 ;;		Unchanged: 0/0
 20114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20116 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20117 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20118 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20119 ;;Total ram usage:       11 bytes
 20120 ;; Hardware stack levels used:    1
 20121 ;; Hardware stack levels required when called:    1
 20122 ;; This function calls:
 20123 ;;		i2_EEPROM_read
 20124 ;;		i2___wmul
 20125 ;; This function is called by:
 20126 ;;		_dispLogs
 20127 ;; This function uses a non-reentrant model
 20128 ;;
 20129                           
 20130                           	psect	text76
 20131  003900                     __ptext76:
 20132                           	opt stack 0
 20133  003900                     _retrieveLog:
 20134                           	opt stack 20
 20135                           
 20136                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 20137                           
 20138                           ;incstack = 0
 20139  003900  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 20140  003904  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 20141  003908  0E00               	movlw	0
 20142  00390A  6E04               	movwf	i2___wmul@multiplicand+1,c
 20143  00390C  0E0B               	movlw	11
 20144  00390E  6E03               	movwf	i2___wmul@multiplicand,c
 20145  003910  ECBF  F026         	call	i2___wmul	;wreg free
 20146  003914  0E01               	movlw	1
 20147  003916  2401               	addwf	?i2___wmul,w,c
 20148  003918  6E10               	movwf	retrieveLog@addr,c
 20149  00391A  0E00               	movlw	0
 20150  00391C  2002               	addwfc	?i2___wmul+1,w,c
 20151  00391E  6E11               	movwf	retrieveLog@addr+1,c
 20152                           
 20153                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 20154  003920  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20155  003924  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20156  003928  EC41  F027         	call	i2_EEPROM_read	;wreg free
 20157  00392C  6E0B               	movwf	retrieveLog@byte1,c
 20158                           
 20159                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 20160  00392E  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20161  003932  0E80               	movlw	128
 20162  003934  1609               	andwf	??_retrieveLog,f,c
 20163  003936  5009               	movf	??_retrieveLog,w,c
 20164  003938  0100               	movlb	0	; () banked
 20165  00393A  6FEE               	movwf	_log_completion& (0+255),b
 20166  00393C  6BEF               	clrf	(_log_completion+1)& (0+255),b
 20167                           
 20168                           ; BSR set to: 0
 20169                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 20170  00393E  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20171  003942  0E0F               	movlw	15
 20172  003944  1609               	andwf	??_retrieveLog,f,c
 20173  003946  5009               	movf	??_retrieveLog,w,c
 20174  003948  6E75               	movwf	_log_count_total,c
 20175  00394A  6A76               	clrf	_log_count_total+1,c
 20176                           
 20177                           ; BSR set to: 0
 20178                           ;EEPROM.c: 146: addr++;
 20179  00394C  4A10               	infsnz	retrieveLog@addr,f,c
 20180  00394E  2A11               	incf	retrieveLog@addr+1,f,c
 20181                           
 20182                           ; BSR set to: 0
 20183                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 20184  003950  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20185  003954  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20186  003958  EC41  F027         	call	i2_EEPROM_read	;wreg free
 20187  00395C  6E0C               	movwf	retrieveLog@byte2,c
 20188                           
 20189                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 20190  00395E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20191  003962  3A09               	swapf	??_retrieveLog,f,c
 20192  003964  0E0F               	movlw	15
 20193  003966  1609               	andwf	??_retrieveLog,f,c
 20194  003968  0E0F               	movlw	15
 20195  00396A  1609               	andwf	??_retrieveLog,f,c
 20196  00396C  5009               	movf	??_retrieveLog,w,c
 20197  00396E  0100               	movlb	0	; () banked
 20198  003970  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 20199  003972  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 20200                           
 20201                           ; BSR set to: 0
 20202                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 20203  003974  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20204  003978  0E0F               	movlw	15
 20205  00397A  1609               	andwf	??_retrieveLog,f,c
 20206  00397C  5009               	movf	??_retrieveLog,w,c
 20207  00397E  0100               	movlb	0	; () banked
 20208  003980  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 20209  003982  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 20210                           
 20211                           ; BSR set to: 0
 20212                           ;EEPROM.c: 152: addr++;
 20213  003984  4A10               	infsnz	retrieveLog@addr,f,c
 20214  003986  2A11               	incf	retrieveLog@addr+1,f,c
 20215                           
 20216                           ; BSR set to: 0
 20217                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 20218  003988  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20219  00398C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20220  003990  EC41  F027         	call	i2_EEPROM_read	;wreg free
 20221  003994  6E0D               	movwf	retrieveLog@byte3,c
 20222                           
 20223                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 20224  003996  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20225  00399A  3A09               	swapf	??_retrieveLog,f,c
 20226  00399C  0E0F               	movlw	15
 20227  00399E  1609               	andwf	??_retrieveLog,f,c
 20228  0039A0  0E0F               	movlw	15
 20229  0039A2  1609               	andwf	??_retrieveLog,f,c
 20230  0039A4  5009               	movf	??_retrieveLog,w,c
 20231  0039A6  6E73               	movwf	_log_count_can_w_lab,c
 20232  0039A8  6A74               	clrf	_log_count_can_w_lab+1,c
 20233                           
 20234                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 20235  0039AA  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20236  0039AE  0E0F               	movlw	15
 20237  0039B0  1609               	andwf	??_retrieveLog,f,c
 20238  0039B2  5009               	movf	??_retrieveLog,w,c
 20239  0039B4  6E71               	movwf	_log_count_can_no_lab,c
 20240  0039B6  6A72               	clrf	_log_count_can_no_lab+1,c
 20241                           
 20242                           ;EEPROM.c: 156: addr++;
 20243  0039B8  4A10               	infsnz	retrieveLog@addr,f,c
 20244  0039BA  2A11               	incf	retrieveLog@addr+1,f,c
 20245                           
 20246                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 20247  0039BC  0E00               	movlw	0
 20248  0039BE  6E0F               	movwf	retrieveLog@i+1,c
 20249  0039C0  0E00               	movlw	0
 20250  0039C2  6E0E               	movwf	retrieveLog@i,c
 20251  0039C4                     i2l6367:
 20252  0039C4  BE0F               	btfsc	retrieveLog@i+1,7,c
 20253  0039C6  D006               	goto	i2l6371
 20254  0039C8  500F               	movf	retrieveLog@i+1,w,c
 20255  0039CA  E11E               	bnz	i2l6379
 20256  0039CC  0E07               	movlw	7
 20257  0039CE  5C0E               	subwf	retrieveLog@i,w,c
 20258  0039D0  B0D8               	btfsc	status,0,c
 20259  0039D2  D01A               	goto	i2l6379
 20260  0039D4                     i2l6371:
 20261                           
 20262                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 20263  0039D4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20264  0039D8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20265  0039DC  EC41  F027         	call	i2_EEPROM_read	;wreg free
 20266  0039E0  6E09               	movwf	??_retrieveLog& (0+255),c
 20267  0039E2  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 20268  0039E4  90D8               	bcf	status,0,c
 20269  0039E6  340E               	rlcf	retrieveLog@i,w,c
 20270  0039E8  6ED9               	movwf	fsr2l,c
 20271  0039EA  340F               	rlcf	retrieveLog@i+1,w,c
 20272  0039EC  6EDA               	movwf	fsr2h,c
 20273  0039EE  0E00               	movlw	low _log_startTime
 20274  0039F0  26D9               	addwf	fsr2l,f,c
 20275  0039F2  0E01               	movlw	high _log_startTime
 20276  0039F4  22DA               	addwfc	fsr2h,f,c
 20277  0039F6  C009  FFDE         	movff	??_retrieveLog,postinc2
 20278  0039FA  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 20279                           
 20280                           ;EEPROM.c: 161: addr++;
 20281  0039FE  4A10               	infsnz	retrieveLog@addr,f,c
 20282  003A00  2A11               	incf	retrieveLog@addr+1,f,c
 20283  003A02  4A0E               	infsnz	retrieveLog@i,f,c
 20284  003A04  2A0F               	incf	retrieveLog@i+1,f,c
 20285  003A06  D7DE               	goto	i2l6367
 20286  003A08                     i2l6379:
 20287                           
 20288                           ;EEPROM.c: 162: }
 20289                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 20290  003A08  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20291  003A0C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20292  003A10  EC41  F027         	call	i2_EEPROM_read	;wreg free
 20293  003A14  6E09               	movwf	??_retrieveLog& (0+255),c
 20294  003A16  5009               	movf	??_retrieveLog,w,c
 20295  003A18  0100               	movlb	0	; () banked
 20296  003A1A  6FF4               	movwf	_log_total_time& (0+255),b
 20297  003A1C  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 20298                           
 20299                           ; BSR set to: 0
 20300  003A1E  0012               	return		;funcret
 20301  003A20                     __end_of_retrieveLog:
 20302                           	opt stack 0
 20303                           pclatu	equ	0xFFB
 20304                           pclath	equ	0xFFA
 20305                           tblptru	equ	0xFF8
 20306                           tblptrh	equ	0xFF7
 20307                           tblptrl	equ	0xFF6
 20308                           tablat	equ	0xFF5
 20309                           prodh	equ	0xFF4
 20310                           prodl	equ	0xFF3
 20311                           intcon	equ	0xFF2
 20312                           intcon2	equ	0xFF1
 20313                           intcon3	equ	0xFF0
 20314                           indf0	equ	0xFEF
 20315                           postinc0	equ	0xFEE
 20316                           fsr0h	equ	0xFEA
 20317                           fsr0l	equ	0xFE9
 20318                           wreg	equ	0xFE8
 20319                           postdec1	equ	0xFE5
 20320                           fsr1h	equ	0xFE2
 20321                           fsr1l	equ	0xFE1
 20322                           indf2	equ	0xFDF
 20323                           postinc2	equ	0xFDE
 20324                           postdec2	equ	0xFDD
 20325                           fsr2h	equ	0xFDA
 20326                           fsr2l	equ	0xFD9
 20327                           status	equ	0xFD8
 20328                           
 20329 ;; *************** function i2_EEPROM_read *****************
 20330 ;; Defined at:
 20331 ;;		line 68 in file "EEPROM.c"
 20332 ;; Parameters:    Size  Location     Type
 20333 ;;  address         2    0[COMRAM] unsigned short 
 20334 ;; Auto vars:     Size  Location     Type
 20335 ;;		None
 20336 ;; Return value:  Size  Location     Type
 20337 ;;                  1    wreg      unsigned char 
 20338 ;; Registers used:
 20339 ;;		wreg, status,2
 20340 ;; Tracked objects:
 20341 ;;		On entry : 0/0
 20342 ;;		On exit  : 0/0
 20343 ;;		Unchanged: 0/0
 20344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20349 ;;Total ram usage:        2 bytes
 20350 ;; Hardware stack levels used:    1
 20351 ;; This function calls:
 20352 ;;		Nothing
 20353 ;; This function is called by:
 20354 ;;		_retrieveLog
 20355 ;; This function uses a non-reentrant model
 20356 ;;
 20357                           
 20358                           	psect	text77
 20359  004E82                     __ptext77:
 20360                           	opt stack 0
 20361  004E82                     i2_EEPROM_read:
 20362                           	opt stack 20
 20363                           
 20364                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 20365                           
 20366                           ; BSR set to: 0
 20367                           ;incstack = 0
 20368  004E82  5002               	movf	i2EEPROM_read@address+1,w,c
 20369  004E84  6EAA               	movwf	4010,c	;volatile
 20370                           
 20371                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 20372  004E86  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 20373                           
 20374                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 20375  004E8A  9EA6               	bcf	4006,7,c	;volatile
 20376                           
 20377                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 20378  004E8C  9CA6               	bcf	4006,6,c	;volatile
 20379                           
 20380                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 20381  004E8E  80A6               	bsf	4006,0,c	;volatile
 20382  004E90                     i2l984:
 20383  004E90  B0A6               	btfsc	4006,0,c	;volatile
 20384  004E92  D7FE               	goto	i2l984
 20385                           
 20386                           ;EEPROM.c: 81: return EEDATA;
 20387  004E94  50A8               	movf	4008,w,c	;volatile
 20388  004E96  0012               	return	
 20389  004E98                     __end_ofi2_EEPROM_read:
 20390                           	opt stack 0
 20391                           pclatu	equ	0xFFB
 20392                           pclath	equ	0xFFA
 20393                           tblptru	equ	0xFF8
 20394                           tblptrh	equ	0xFF7
 20395                           tblptrl	equ	0xFF6
 20396                           tablat	equ	0xFF5
 20397                           prodh	equ	0xFF4
 20398                           prodl	equ	0xFF3
 20399                           intcon	equ	0xFF2
 20400                           intcon2	equ	0xFF1
 20401                           intcon3	equ	0xFF0
 20402                           indf0	equ	0xFEF
 20403                           postinc0	equ	0xFEE
 20404                           fsr0h	equ	0xFEA
 20405                           fsr0l	equ	0xFE9
 20406                           wreg	equ	0xFE8
 20407                           postdec1	equ	0xFE5
 20408                           fsr1h	equ	0xFE2
 20409                           fsr1l	equ	0xFE1
 20410                           indf2	equ	0xFDF
 20411                           postinc2	equ	0xFDE
 20412                           postdec2	equ	0xFDD
 20413                           fsr2h	equ	0xFDA
 20414                           fsr2l	equ	0xFD9
 20415                           status	equ	0xFD8
 20416                           
 20417 ;; *************** function _printSortTimer *****************
 20418 ;; Defined at:
 20419 ;;		line 377 in file "sort.c"
 20420 ;; Parameters:    Size  Location     Type
 20421 ;;		None
 20422 ;; Auto vars:     Size  Location     Type
 20423 ;;  i               2   70[COMRAM] int 
 20424 ;;  curTime        14   44[COMRAM] int [7]
 20425 ;;  timeDiff        2   68[COMRAM] unsigned int 
 20426 ;;  sec             2   64[COMRAM] int 
 20427 ;;  min             2   62[COMRAM] int 
 20428 ;;  cur_sec         2   60[COMRAM] unsigned int 
 20429 ;;  start_sec       2   58[COMRAM] unsigned int 
 20430 ;; Return value:  Size  Location     Type
 20431 ;;                  1    wreg      void 
 20432 ;; Registers used:
 20433 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20434 ;; Tracked objects:
 20435 ;;		On entry : 0/0
 20436 ;;		On exit  : 0/0
 20437 ;;		Unchanged: 0/0
 20438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20440 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20441 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20442 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20443 ;;Total ram usage:       31 bytes
 20444 ;; Hardware stack levels used:    1
 20445 ;; Hardware stack levels required when called:    3
 20446 ;; This function calls:
 20447 ;;		i2___lwdiv
 20448 ;;		i2___lwmod
 20449 ;;		i2___wmul
 20450 ;;		i2_getRTC
 20451 ;;		i2_lcdInst
 20452 ;;		i2_printf
 20453 ;; This function is called by:
 20454 ;;		_handler
 20455 ;; This function uses a non-reentrant model
 20456 ;;
 20457                           
 20458                           	psect	text78
 20459  002EF6                     __ptext78:
 20460                           	opt stack 0
 20461  002EF6                     _printSortTimer:
 20462                           	opt stack 20
 20463                           
 20464                           ;sort.c: 378: getRTC();
 20465                           
 20466                           ;incstack = 0
 20467  002EF6  EC37  F022         	call	i2_getRTC	;wreg free
 20468                           
 20469                           ;sort.c: 379: int curTime[7];
 20470                           ;sort.c: 380: for(int i = 0; i < 7; i++){
 20471  002EFA  0E00               	movlw	0
 20472  002EFC  6E48               	movwf	printSortTimer@i+1,c
 20473  002EFE  0E00               	movlw	0
 20474  002F00  6E47               	movwf	printSortTimer@i,c
 20475  002F02                     i2l8693:
 20476  002F02  BE48               	btfsc	printSortTimer@i+1,7,c
 20477  002F04  D006               	goto	i2l8697
 20478  002F06  5048               	movf	printSortTimer@i+1,w,c
 20479  002F08  E131               	bnz	i2l8703
 20480  002F0A  0E07               	movlw	7
 20481  002F0C  5C47               	subwf	printSortTimer@i,w,c
 20482  002F0E  B0D8               	btfsc	status,0,c
 20483  002F10  D02D               	goto	i2l8703
 20484  002F12                     i2l8697:
 20485                           
 20486                           ;sort.c: 381: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20487  002F12  0E24               	movlw	low _time
 20488  002F14  2447               	addwf	printSortTimer@i,w,c
 20489  002F16  6ED9               	movwf	fsr2l,c
 20490  002F18  0E01               	movlw	high _time
 20491  002F1A  2048               	addwfc	printSortTimer@i+1,w,c
 20492  002F1C  6EDA               	movwf	fsr2h,c
 20493  002F1E  50DF               	movf	indf2,w,c
 20494  002F20  6E2A               	movwf	??_printSortTimer& (0+255),c
 20495  002F22  3A2A               	swapf	??_printSortTimer,f,c
 20496  002F24  0E0F               	movlw	15
 20497  002F26  162A               	andwf	??_printSortTimer,f,c
 20498  002F28  0E0F               	movlw	15
 20499  002F2A  162A               	andwf	??_printSortTimer,f,c
 20500  002F2C  502A               	movf	??_printSortTimer,w,c
 20501  002F2E  0D0A               	mullw	10
 20502  002F30  0E24               	movlw	low _time
 20503  002F32  2447               	addwf	printSortTimer@i,w,c
 20504  002F34  6ED9               	movwf	fsr2l,c
 20505  002F36  0E01               	movlw	high _time
 20506  002F38  2048               	addwfc	printSortTimer@i+1,w,c
 20507  002F3A  6EDA               	movwf	fsr2h,c
 20508  002F3C  50DF               	movf	indf2,w,c
 20509  002F3E  0B0F               	andlw	15
 20510  002F40  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 20511  002F42  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 20512  002F44  50F3               	movf	prodl,w,c
 20513  002F46  262B               	addwf	??_printSortTimer+1,f,c
 20514  002F48  50F4               	movf	prodh,w,c
 20515  002F4A  222C               	addwfc	??_printSortTimer+2,f,c
 20516  002F4C  90D8               	bcf	status,0,c
 20517  002F4E  3447               	rlcf	printSortTimer@i,w,c
 20518  002F50  6ED9               	movwf	fsr2l,c
 20519  002F52  3448               	rlcf	printSortTimer@i+1,w,c
 20520  002F54  6EDA               	movwf	fsr2h,c
 20521  002F56  0E2D               	movlw	low printSortTimer@curTime
 20522  002F58  26D9               	addwf	fsr2l,f,c
 20523  002F5A  0E00               	movlw	high printSortTimer@curTime
 20524  002F5C  22DA               	addwfc	fsr2h,f,c
 20525  002F5E  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 20526  002F62  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 20527  002F66  4A47               	infsnz	printSortTimer@i,f,c
 20528  002F68  2A48               	incf	printSortTimer@i+1,f,c
 20529  002F6A  D7CB               	goto	i2l8693
 20530  002F6C                     i2l8703:
 20531                           
 20532                           ;sort.c: 382: }
 20533                           ;sort.c: 383: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 20534  002F6C  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 20535  002F70  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 20536  002F74  0E00               	movlw	0
 20537  002F76  6E04               	movwf	i2___wmul@multiplicand+1,c
 20538  002F78  0E3C               	movlw	60
 20539  002F7A  6E03               	movwf	i2___wmul@multiplicand,c
 20540  002F7C  ECBF  F026         	call	i2___wmul	;wreg free
 20541  002F80  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20542  002F84  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20543  002F88  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 20544  002F8C  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 20545  002F90  0E0E               	movlw	14
 20546  002F92  6E04               	movwf	i2___wmul@multiplicand+1,c
 20547  002F94  0E10               	movlw	16
 20548  002F96  6E03               	movwf	i2___wmul@multiplicand,c
 20549  002F98  ECBF  F026         	call	i2___wmul	;wreg free
 20550  002F9C  5001               	movf	?i2___wmul,w,c
 20551  002F9E  262A               	addwf	??_printSortTimer,f,c
 20552  002FA0  5002               	movf	?i2___wmul+1,w,c
 20553  002FA2  222B               	addwfc	??_printSortTimer+1,f,c
 20554  002FA4  0101               	movlb	1	; () banked
 20555  002FA6  510E               	movf	_startTime& (0+255),w,b
 20556  002FA8  242A               	addwf	??_printSortTimer,w,c
 20557  002FAA  6E3B               	movwf	printSortTimer@start_sec,c
 20558  002FAC  0101               	movlb	1	; () banked
 20559  002FAE  510F               	movf	(_startTime+1)& (0+255),w,b
 20560  002FB0  202B               	addwfc	??_printSortTimer+1,w,c
 20561  002FB2  6E3C               	movwf	printSortTimer@start_sec+1,c
 20562                           
 20563                           ;sort.c: 384: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 20564  002FB4  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 20565  002FB8  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 20566  002FBC  0E00               	movlw	0
 20567  002FBE  6E04               	movwf	i2___wmul@multiplicand+1,c
 20568  002FC0  0E3C               	movlw	60
 20569  002FC2  6E03               	movwf	i2___wmul@multiplicand,c
 20570  002FC4  ECBF  F026         	call	i2___wmul	;wreg free
 20571  002FC8  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20572  002FCC  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20573  002FD0  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 20574  002FD4  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 20575  002FD8  0E0E               	movlw	14
 20576  002FDA  6E04               	movwf	i2___wmul@multiplicand+1,c
 20577  002FDC  0E10               	movlw	16
 20578  002FDE  6E03               	movwf	i2___wmul@multiplicand,c
 20579  002FE0  ECBF  F026         	call	i2___wmul	;wreg free
 20580  002FE4  5001               	movf	?i2___wmul,w,c
 20581  002FE6  262A               	addwf	??_printSortTimer,f,c
 20582  002FE8  5002               	movf	?i2___wmul+1,w,c
 20583  002FEA  222B               	addwfc	??_printSortTimer+1,f,c
 20584  002FEC  502D               	movf	printSortTimer@curTime,w,c
 20585  002FEE  242A               	addwf	??_printSortTimer,w,c
 20586  002FF0  6E3D               	movwf	printSortTimer@cur_sec,c
 20587  002FF2  502E               	movf	printSortTimer@curTime+1,w,c
 20588  002FF4  202B               	addwfc	??_printSortTimer+1,w,c
 20589  002FF6  6E3E               	movwf	printSortTimer@cur_sec+1,c
 20590                           
 20591                           ;sort.c: 385: unsigned int timeDiff = cur_sec - start_sec;
 20592  002FF8  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 20593  002FFC  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 20594  003000  1E2A               	comf	??_printSortTimer,f,c
 20595  003002  1E2B               	comf	??_printSortTimer+1,f,c
 20596  003004  4A2A               	infsnz	??_printSortTimer,f,c
 20597  003006  2A2B               	incf	??_printSortTimer+1,f,c
 20598  003008  503D               	movf	printSortTimer@cur_sec,w,c
 20599  00300A  242A               	addwf	??_printSortTimer,w,c
 20600  00300C  6E45               	movwf	printSortTimer@timeDiff,c
 20601  00300E  503E               	movf	printSortTimer@cur_sec+1,w,c
 20602  003010  202B               	addwfc	??_printSortTimer+1,w,c
 20603  003012  6E46               	movwf	printSortTimer@timeDiff+1,c
 20604                           
 20605                           ;sort.c: 387: total_time = timeDiff;
 20606  003014  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 20607  003018  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 20608                           
 20609                           ;sort.c: 389: if(f_most_recent_sort_time){
 20610  00301C  506B               	movf	_f_most_recent_sort_time,w,c
 20611  00301E  106C               	iorwf	_f_most_recent_sort_time+1,w,c
 20612  003020  B4D8               	btfsc	status,2,c
 20613  003022  D008               	goto	i2l8715
 20614                           
 20615                           ;sort.c: 390: most_recent_sort_time = total_time;
 20616  003024  C0F8  F133         	movff	_total_time,_most_recent_sort_time
 20617  003028  C0F9  F134         	movff	_total_time+1,_most_recent_sort_time+1
 20618                           
 20619                           ;sort.c: 391: f_most_recent_sort_time = 0;
 20620  00302C  0E00               	movlw	0
 20621  00302E  6E6C               	movwf	_f_most_recent_sort_time+1,c
 20622  003030  0E00               	movlw	0
 20623  003032  6E6B               	movwf	_f_most_recent_sort_time,c
 20624  003034                     i2l8715:
 20625                           
 20626                           ;sort.c: 392: }
 20627                           ;sort.c: 395: if((total_time - most_recent_sort_time == 179) | (total_time == 179)){
 20628  003034  C133  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 20629  003038  C134  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 20630  00303C  1E2A               	comf	??_printSortTimer,f,c
 20631  00303E  1E2B               	comf	??_printSortTimer+1,f,c
 20632  003040  4A2A               	infsnz	??_printSortTimer,f,c
 20633  003042  2A2B               	incf	??_printSortTimer+1,f,c
 20634  003044  0100               	movlb	0	; () banked
 20635  003046  51F8               	movf	_total_time& (0+255),w,b
 20636  003048  262A               	addwf	??_printSortTimer,f,c
 20637  00304A  0100               	movlb	0	; () banked
 20638  00304C  51F9               	movf	(_total_time+1)& (0+255),w,b
 20639  00304E  222B               	addwfc	??_printSortTimer+1,f,c
 20640  003050  0EB3               	movlw	179
 20641  003052  182A               	xorwf	??_printSortTimer,w,c
 20642  003054  102B               	iorwf	??_printSortTimer+1,w,c
 20643  003056  B4D8               	btfsc	status,2,c
 20644  003058  D007               	goto	i2l8719
 20645                           
 20646                           ; BSR set to: 0
 20647  00305A  0EB3               	movlw	179
 20648  00305C  0100               	movlb	0	; () banked
 20649  00305E  19F8               	xorwf	_total_time& (0+255),w,b
 20650  003060  0100               	movlb	0	; () banked
 20651  003062  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 20652  003064  A4D8               	btfss	status,2,c
 20653  003066  D003               	goto	i2l8721
 20654  003068                     i2l8719:
 20655                           
 20656                           ; BSR set to: 0
 20657                           ;sort.c: 396: machine_state = DoneSorting_state;
 20658  003068  0E02               	movlw	2
 20659  00306A  0100               	movlb	0	; () banked
 20660  00306C  6FFC               	movwf	_machine_state& (0+255),b
 20661  00306E                     i2l8721:
 20662                           
 20663                           ; BSR set to: 0
 20664                           ;sort.c: 398: }
 20665                           ;sort.c: 400: int min = (timeDiff % 3600) / 60;
 20666  00306E  0E0E               	movlw	14
 20667  003070  6E04               	movwf	i2___lwmod@divisor+1,c
 20668  003072  0E10               	movlw	16
 20669  003074  6E03               	movwf	i2___lwmod@divisor,c
 20670  003076  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20671  00307A  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20672  00307E  EC78  F024         	call	i2___lwmod	;wreg free
 20673  003082  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 20674  003086  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 20675  00308A  0E00               	movlw	0
 20676  00308C  6E09               	movwf	i2___lwdiv@divisor+1,c
 20677  00308E  0E3C               	movlw	60
 20678  003090  6E08               	movwf	i2___lwdiv@divisor,c
 20679  003092  ECB9  F023         	call	i2___lwdiv	;wreg free
 20680  003096  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 20681  00309A  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 20682                           
 20683                           ;sort.c: 401: int sec = (timeDiff % 3600) % 60;
 20684  00309E  0E0E               	movlw	14
 20685  0030A0  6E04               	movwf	i2___lwmod@divisor+1,c
 20686  0030A2  0E10               	movlw	16
 20687  0030A4  6E03               	movwf	i2___lwmod@divisor,c
 20688  0030A6  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20689  0030AA  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20690  0030AE  EC78  F024         	call	i2___lwmod	;wreg free
 20691  0030B2  C001  F043         	movff	?i2___lwmod,_printSortTimer$2451
 20692  0030B6  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2451+1
 20693                           
 20694                           ;sort.c: 401: int sec = (timeDiff % 3600) % 60;
 20695  0030BA  C043  F001         	movff	_printSortTimer$2451,i2___lwmod@dividend
 20696  0030BE  C044  F002         	movff	_printSortTimer$2451+1,i2___lwmod@dividend+1
 20697  0030C2  0E00               	movlw	0
 20698  0030C4  6E04               	movwf	i2___lwmod@divisor+1,c
 20699  0030C6  0E3C               	movlw	60
 20700  0030C8  6E03               	movwf	i2___lwmod@divisor,c
 20701  0030CA  EC78  F024         	call	i2___lwmod	;wreg free
 20702  0030CE  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 20703  0030D2  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 20704                           
 20705                           ;sort.c: 403: lcdInst(0b10000000);;
 20706  0030D6  0E80               	movlw	128
 20707  0030D8  EC75  F027         	call	i2_lcdInst
 20708                           
 20709                           ;sort.c: 404: printf("SORTING...");
 20710  0030DC  0E7C               	movlw	low STR_64
 20711  0030DE  6E0D               	movwf	i2printf@f,c
 20712  0030E0  0EFF               	movlw	high STR_64
 20713  0030E2  6E0E               	movwf	i2printf@f+1,c
 20714  0030E4  EC96  F00C         	call	i2_printf	;wreg free
 20715                           
 20716                           ;sort.c: 405: lcdInst(0b11000000);;
 20717  0030E8  0EC0               	movlw	192
 20718  0030EA  EC75  F027         	call	i2_lcdInst
 20719                           
 20720                           ;sort.c: 406: printf("TIME %d:%02d", min, sec);
 20721  0030EE  0E42               	movlw	low STR_65
 20722  0030F0  6E0D               	movwf	i2printf@f,c
 20723  0030F2  0EFF               	movlw	high STR_65
 20724  0030F4  6E0E               	movwf	i2printf@f+1,c
 20725  0030F6  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 20726  0030FA  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 20727  0030FE  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 20728  003102  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 20729  003106  EC96  F00C         	call	i2_printf	;wreg free
 20730  00310A  0012               	return		;funcret
 20731  00310C                     __end_of_printSortTimer:
 20732                           	opt stack 0
 20733                           pclatu	equ	0xFFB
 20734                           pclath	equ	0xFFA
 20735                           tblptru	equ	0xFF8
 20736                           tblptrh	equ	0xFF7
 20737                           tblptrl	equ	0xFF6
 20738                           tablat	equ	0xFF5
 20739                           prodh	equ	0xFF4
 20740                           prodl	equ	0xFF3
 20741                           intcon	equ	0xFF2
 20742                           intcon2	equ	0xFF1
 20743                           intcon3	equ	0xFF0
 20744                           indf0	equ	0xFEF
 20745                           postinc0	equ	0xFEE
 20746                           fsr0h	equ	0xFEA
 20747                           fsr0l	equ	0xFE9
 20748                           wreg	equ	0xFE8
 20749                           postdec1	equ	0xFE5
 20750                           fsr1h	equ	0xFE2
 20751                           fsr1l	equ	0xFE1
 20752                           indf2	equ	0xFDF
 20753                           postinc2	equ	0xFDE
 20754                           postdec2	equ	0xFDD
 20755                           fsr2h	equ	0xFDA
 20756                           fsr2l	equ	0xFD9
 20757                           status	equ	0xFD8
 20758                           
 20759 ;; *************** function i2_printf *****************
 20760 ;; Defined at:
 20761 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 20762 ;; Parameters:    Size  Location     Type
 20763 ;;  f               2   12[COMRAM] PTR const unsigned char 
 20764 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 20765 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 20766 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 20767 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 20768 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 20769 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 20770 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 20771 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 20772 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 20773 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 20774 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 20775 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 20776 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 20777 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 20778 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 20779 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 20780 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 20781 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 20782 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 20783 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 20784 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 20785 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 20786 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 20787 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 20788 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 20789 ;; Auto vars:     Size  Location     Type
 20790 ;;  printf          4    0        struct .
 20791 ;;  printf          2   39[COMRAM] int 
 20792 ;;  printf          2   35[COMRAM] unsigned int 
 20793 ;;  printf          2   33[COMRAM] unsigned int 
 20794 ;;  printf          2   31[COMRAM] PTR void [1]
 20795 ;;		 -> ?i2_printf(2), ?_printf(2), 
 20796 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 20797 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 20798 ;;  printf          1   38[COMRAM] char 
 20799 ;;  printf          1   37[COMRAM] unsigned char 
 20800 ;;  printf          1   28[COMRAM] char 
 20801 ;; Return value:  Size  Location     Type
 20802 ;;                  2   12[COMRAM] int 
 20803 ;; Registers used:
 20804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20805 ;; Tracked objects:
 20806 ;;		On entry : 0/0
 20807 ;;		On exit  : 0/0
 20808 ;;		Unchanged: 0/0
 20809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20810 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20811 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20812 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20813 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20814 ;;Total ram usage:       29 bytes
 20815 ;; Hardware stack levels used:    1
 20816 ;; Hardware stack levels required when called:    2
 20817 ;; This function calls:
 20818 ;;		i2___lwdiv
 20819 ;;		i2___lwmod
 20820 ;;		i2___wmul
 20821 ;;		i2_isdigit
 20822 ;;		i2_putch
 20823 ;; This function is called by:
 20824 ;;		_change_state_to_menu_11
 20825 ;;		_change_state_to_menu_23
 20826 ;;		_change_state_to_logs_11
 20827 ;;		_change_state_to_logs_12
 20828 ;;		_change_state_to_logs_22
 20829 ;;		_change_state_to_logs_23
 20830 ;;		_change_state_to_logs_33
 20831 ;;		_change_state_to_logs_34
 20832 ;;		_printSortTimer
 20833 ;;		i2_change_state_to_menu_start
 20834 ;;		i2_change_state_to_menu_12
 20835 ;;		i2_change_state_to_menu_22
 20836 ;;		i2_printRTC
 20837 ;; This function uses a non-reentrant model
 20838 ;;
 20839                           
 20840                           	psect	text79
 20841  00192C                     __ptext79:
 20842                           	opt stack 0
 20843  00192C                     i2_printf:
 20844                           	opt stack 19
 20845                           
 20846                           ;doprnt.c: 466: va_list ap;
 20847                           ;doprnt.c: 499: signed char c;
 20848                           ;doprnt.c: 501: int width;
 20849                           ;doprnt.c: 506: signed char prec;
 20850                           ;doprnt.c: 508: unsigned char flag;
 20851                           ;doprnt.c: 523: union {
 20852                           ;doprnt.c: 524: unsigned long vd;
 20853                           ;doprnt.c: 525: double integ;
 20854                           ;doprnt.c: 526: } tmpval;
 20855                           ;doprnt.c: 528: unsigned int val;
 20856                           ;doprnt.c: 529: unsigned len;
 20857                           ;doprnt.c: 530: const char * cp;
 20858                           ;doprnt.c: 533: *ap = __va_start();
 20859                           
 20860                           ;incstack = 0
 20861  00192C  0E0F               	movlw	low (?i2_printf+2)
 20862  00192E  6E20               	movwf	i2printf@ap,c
 20863  001930  0E00               	movlw	high (?i2_printf+2)
 20864  001932  6E21               	movwf	i2printf@ap+1,c
 20865                           
 20866                           ;doprnt.c: 536: while(c = *f++) {
 20867  001934  D1A4               	goto	i2l6191
 20868  001936                     i2l6061:
 20869                           
 20870                           ;doprnt.c: 538: if(c != '%')
 20871  001936  0E25               	movlw	37
 20872  001938  1827               	xorwf	i2printf@c,w,c
 20873  00193A  B4D8               	btfsc	status,2,c
 20874  00193C  D004               	goto	i2l6065
 20875                           
 20876                           ;doprnt.c: 540: {
 20877                           ;doprnt.c: 541: (putch(c) );
 20878  00193E  5027               	movf	i2printf@c,w,c
 20879  001940  EC6F  F027         	call	i2_putch
 20880                           
 20881                           ;doprnt.c: 542: continue;
 20882  001944  D19C               	goto	i2l6191
 20883  001946                     i2l6065:
 20884                           
 20885                           ;doprnt.c: 543: }
 20886                           ;doprnt.c: 546: width = 0;
 20887  001946  0E00               	movlw	0
 20888  001948  6E29               	movwf	i2printf@width+1,c
 20889  00194A  0E00               	movlw	0
 20890  00194C  6E28               	movwf	i2printf@width,c
 20891                           
 20892                           ;doprnt.c: 548: flag = 0;
 20893  00194E  0E00               	movlw	0
 20894  001950  6E26               	movwf	i2printf@flag,c
 20895                           
 20896                           ;doprnt.c: 551: switch(*f) {
 20897                           
 20898                           ;doprnt.c: 550: for(;;) {
 20899  001952  D003               	goto	i2l6071
 20900  001954                     i2l6067:
 20901                           
 20902                           ;doprnt.c: 580: flag |= 0x04;
 20903  001954  8426               	bsf	i2printf@flag,2,c
 20904                           
 20905                           ;doprnt.c: 581: f++;
 20906  001956  4A0D               	infsnz	i2printf@f,f,c
 20907  001958  2A0E               	incf	i2printf@f+1,f,c
 20908  00195A                     i2l6071:
 20909  00195A  C00D  FFF6         	movff	i2printf@f,tblptrl
 20910  00195E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20911  001962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20912  001962  6AF8               	clrf	tblptru,c
 20913  001964                     	endif
 20914  001964                     	if	0	;tblptru may be non-zero
 20915  001964                     	endif
 20916  001964  0008               	tblrd		*
 20917  001966  50F5               	movf	tablat,w,c
 20918                           
 20919                           ; Switch size 1, requested type "space"
 20920                           ; Number of cases is 1, Range of values is 48 to 48
 20921                           ; switch strategies available:
 20922                           ; Name         Instructions Cycles
 20923                           ; simple_byte            4     3 (average)
 20924                           ;	Chosen strategy is simple_byte
 20925  001968  0A30               	xorlw	48	; case 48
 20926  00196A  B4D8               	btfsc	status,2,c
 20927  00196C  D7F3               	goto	i2l6067
 20928                           
 20929                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 20930                           
 20931                           ;doprnt.c: 586: }
 20932                           
 20933                           ;doprnt.c: 585: break;
 20934  00196E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20935  001972  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20936  001976                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20937  001976  6AF8               	clrf	tblptru,c
 20938  001978                     	endif
 20939  001978                     	if	0	;tblptru may be non-zero
 20940  001978                     	endif
 20941  001978  0008               	tblrd		*
 20942  00197A  50F5               	movf	tablat,w,c
 20943  00197C  EC19  F027         	call	i2_isdigit
 20944  001980  A0D8               	btfss	status,0,c
 20945  001982  D0A6               	goto	i2l6119
 20946                           
 20947                           ;doprnt.c: 598: width = 0;
 20948  001984  0E00               	movlw	0
 20949  001986  6E29               	movwf	i2printf@width+1,c
 20950  001988  0E00               	movlw	0
 20951  00198A  6E28               	movwf	i2printf@width,c
 20952  00198C                     i2l6077:
 20953                           
 20954                           ;doprnt.c: 600: width *= 10;
 20955  00198C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 20956  001990  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 20957  001994  0E00               	movlw	0
 20958  001996  6E04               	movwf	i2___wmul@multiplicand+1,c
 20959  001998  0E0A               	movlw	10
 20960  00199A  6E03               	movwf	i2___wmul@multiplicand,c
 20961  00199C  ECBF  F026         	call	i2___wmul	;wreg free
 20962  0019A0  C001  F028         	movff	?i2___wmul,i2printf@width
 20963  0019A4  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 20964                           
 20965                           ;doprnt.c: 601: width += *f++ - '0';
 20966  0019A8  0ED0               	movlw	208
 20967  0019AA  6E19               	movwf	??i2_printf& (0+255),c
 20968  0019AC  0EFF               	movlw	255
 20969  0019AE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20970  0019B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20971  0019B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20972  0019B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20973  0019B8  6AF8               	clrf	tblptru,c
 20974  0019BA                     	endif
 20975  0019BA                     	if	0	;tblptru may be non-zero
 20976  0019BA                     	endif
 20977  0019BA  0008               	tblrd		*
 20978  0019BC  50F5               	movf	tablat,w,c
 20979  0019BE  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 20980  0019C0  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 20981  0019C2  5019               	movf	??i2_printf,w,c
 20982  0019C4  261B               	addwf	??i2_printf+2,f,c
 20983  0019C6  501A               	movf	??i2_printf+1,w,c
 20984  0019C8  221C               	addwfc	??i2_printf+3,f,c
 20985  0019CA  501B               	movf	??i2_printf+2,w,c
 20986  0019CC  2628               	addwf	i2printf@width,f,c
 20987  0019CE  501C               	movf	??i2_printf+3,w,c
 20988  0019D0  2229               	addwfc	i2printf@width+1,f,c
 20989  0019D2  4A0D               	infsnz	i2printf@f,f,c
 20990  0019D4  2A0E               	incf	i2printf@f+1,f,c
 20991                           
 20992                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 20993  0019D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 20994  0019DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20995  0019DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20996  0019DE  6AF8               	clrf	tblptru,c
 20997  0019E0                     	endif
 20998  0019E0                     	if	0	;tblptru may be non-zero
 20999  0019E0                     	endif
 21000  0019E0  0008               	tblrd		*
 21001  0019E2  50F5               	movf	tablat,w,c
 21002  0019E4  EC19  F027         	call	i2_isdigit
 21003  0019E8  A0D8               	btfss	status,0,c
 21004  0019EA  D072               	goto	i2l6119
 21005  0019EC  D7CF               	goto	i2l6077
 21006  0019EE                     i2l6085:
 21007                           
 21008                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 21009  0019EE  C020  FFD9         	movff	i2printf@ap,fsr2l
 21010  0019F2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21011  0019F6  CFDE F01E          	movff	postinc2,i2printf@cp
 21012  0019FA  CFDD F01F          	movff	postdec2,i2printf@cp+1
 21013  0019FE  0E02               	movlw	2
 21014  001A00  2620               	addwf	i2printf@ap,f,c
 21015  001A02  0E00               	movlw	0
 21016  001A04  2221               	addwfc	i2printf@ap+1,f,c
 21017                           
 21018                           ;doprnt.c: 740: if(!cp)
 21019  001A06  501E               	movf	i2printf@cp,w,c
 21020  001A08  101F               	iorwf	i2printf@cp+1,w,c
 21021  001A0A  A4D8               	btfss	status,2,c
 21022  001A0C  D004               	goto	i2l6093
 21023                           
 21024                           ;doprnt.c: 741: cp = "(null)";
 21025  001A0E  0EB6               	movlw	low STR_126
 21026  001A10  6E1E               	movwf	i2printf@cp,c
 21027  001A12  0EFF               	movlw	high STR_126
 21028  001A14  6E1F               	movwf	i2printf@cp+1,c
 21029  001A16                     i2l6093:
 21030                           
 21031                           ;doprnt.c: 745: len = 0;
 21032  001A16  0E00               	movlw	0
 21033  001A18  6E23               	movwf	i2printf@len+1,c
 21034  001A1A  0E00               	movlw	0
 21035  001A1C  6E22               	movwf	i2printf@len,c
 21036                           
 21037                           ;doprnt.c: 746: while(cp[len])
 21038  001A1E  D002               	goto	i2l6097
 21039  001A20                     i2l6095:
 21040                           
 21041                           ;doprnt.c: 747: len++;
 21042  001A20  4A22               	infsnz	i2printf@len,f,c
 21043  001A22  2A23               	incf	i2printf@len+1,f,c
 21044  001A24                     i2l6097:
 21045  001A24  5022               	movf	i2printf@len,w,c
 21046  001A26  241E               	addwf	i2printf@cp,w,c
 21047  001A28  6E19               	movwf	??i2_printf& (0+255),c
 21048  001A2A  5023               	movf	i2printf@len+1,w,c
 21049  001A2C  201F               	addwfc	i2printf@cp+1,w,c
 21050  001A2E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21051  001A30  C019  FFF6         	movff	??i2_printf,tblptrl
 21052  001A34  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 21053  001A38  0E00               	movlw	low (__mediumconst shr (0+16))
 21054  001A3A  6EF8               	movwf	tblptru,c
 21055  001A3C  0E0F               	movlw	(high __ramtop+-1)
 21056  001A3E  64F7               	cpfsgt	tblptrh,c
 21057  001A40  D003               	bra	i2u475_47
 21058  001A42  0008               	tblrd		*
 21059  001A44  50F5               	movf	tablat,w,c
 21060  001A46  D005               	bra	i2u475_40
 21061  001A48                     i2u475_47:
 21062  001A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 21063  001A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 21064  001A50  50EF               	movf	indf0,w,c
 21065  001A52                     i2u475_40:
 21066  001A52  0900               	iorlw	0
 21067  001A54  A4D8               	btfss	status,2,c
 21068  001A56  D7E4               	goto	i2l6095
 21069                           
 21070                           ;doprnt.c: 757: if(width > len)
 21071  001A58  5028               	movf	i2printf@width,w,c
 21072  001A5A  5C22               	subwf	i2printf@len,w,c
 21073  001A5C  5029               	movf	i2printf@width+1,w,c
 21074  001A5E  5823               	subwfb	i2printf@len+1,w,c
 21075  001A60  B0D8               	btfsc	status,0,c
 21076  001A62  D005               	goto	i2l6103
 21077                           
 21078                           ;doprnt.c: 758: width -= len;
 21079  001A64  5022               	movf	i2printf@len,w,c
 21080  001A66  5E28               	subwf	i2printf@width,f,c
 21081  001A68  5023               	movf	i2printf@len+1,w,c
 21082  001A6A  5A29               	subwfb	i2printf@width+1,f,c
 21083  001A6C  D008               	goto	i2l6107
 21084  001A6E                     i2l6103:
 21085                           
 21086                           ;doprnt.c: 759: else
 21087                           ;doprnt.c: 760: width = 0;
 21088  001A6E  0E00               	movlw	0
 21089  001A70  6E29               	movwf	i2printf@width+1,c
 21090  001A72  0E00               	movlw	0
 21091  001A74  6E28               	movwf	i2printf@width,c
 21092                           
 21093                           ;doprnt.c: 764: while(width--)
 21094  001A76  D003               	goto	i2l6107
 21095  001A78                     i2l6105:
 21096                           
 21097                           ;doprnt.c: 765: (putch(' ') );
 21098  001A78  0E20               	movlw	32
 21099  001A7A  EC6F  F027         	call	i2_putch
 21100  001A7E                     i2l6107:
 21101  001A7E  0628               	decf	i2printf@width,f,c
 21102  001A80  A0D8               	btfss	status,0,c
 21103  001A82  0629               	decf	i2printf@width+1,f,c
 21104  001A84  2828               	incf	i2printf@width,w,c
 21105  001A86  E1F8               	bnz	i2l6105
 21106  001A88  2829               	incf	i2printf@width+1,w,c
 21107  001A8A  B4D8               	btfsc	status,2,c
 21108  001A8C  D016               	goto	i2l6113
 21109  001A8E  D7F4               	goto	i2l6105
 21110  001A90                     i2l6109:
 21111                           
 21112                           ;doprnt.c: 768: (putch(*cp++) );
 21113  001A90  C01E  FFF6         	movff	i2printf@cp,tblptrl
 21114  001A94  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 21115  001A98  0E00               	movlw	low (__mediumconst shr (0+16))
 21116  001A9A  6EF8               	movwf	tblptru,c
 21117  001A9C  0E0F               	movlw	(high __ramtop+-1)
 21118  001A9E  64F7               	cpfsgt	tblptrh,c
 21119  001AA0  D003               	bra	i2u479_47
 21120  001AA2  0008               	tblrd		*
 21121  001AA4  50F5               	movf	tablat,w,c
 21122  001AA6  D005               	bra	i2u479_40
 21123  001AA8                     i2u479_47:
 21124  001AA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 21125  001AAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 21126  001AB0  50EF               	movf	indf0,w,c
 21127  001AB2                     i2u479_40:
 21128  001AB2  EC6F  F027         	call	i2_putch
 21129  001AB6  4A1E               	infsnz	i2printf@cp,f,c
 21130  001AB8  2A1F               	incf	i2printf@cp+1,f,c
 21131  001ABA                     i2l6113:
 21132  001ABA  0622               	decf	i2printf@len,f,c
 21133  001ABC  A0D8               	btfss	status,0,c
 21134  001ABE  0623               	decf	i2printf@len+1,f,c
 21135  001AC0  2822               	incf	i2printf@len,w,c
 21136  001AC2  E1E6               	bnz	i2l6109
 21137  001AC4  2823               	incf	i2printf@len+1,w,c
 21138  001AC6  B4D8               	btfsc	status,2,c
 21139  001AC8  D0DA               	goto	i2l6191
 21140  001ACA  D7E2               	goto	i2l6109
 21141  001ACC                     i2l6115:
 21142                           
 21143                           ;doprnt.c: 818: flag |= 0x40;
 21144  001ACC  8C26               	bsf	i2printf@flag,6,c
 21145                           
 21146                           ;doprnt.c: 822: }
 21147                           
 21148                           ;doprnt.c: 819: break;
 21149  001ACE  D01B               	goto	i2l1349
 21150  001AD0                     i2l6119:
 21151  001AD0  C00D  FFF6         	movff	i2printf@f,tblptrl
 21152  001AD4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21153  001AD8  4A0D               	infsnz	i2printf@f,f,c
 21154  001ADA  2A0E               	incf	i2printf@f+1,f,c
 21155  001ADC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21156  001ADC  6AF8               	clrf	tblptru,c
 21157  001ADE                     	endif
 21158  001ADE                     	if	0	;tblptru may be non-zero
 21159  001ADE                     	endif
 21160  001ADE  0008               	tblrd		*
 21161  001AE0  CFF5 F027          	movff	tablat,i2printf@c
 21162  001AE4  5027               	movf	i2printf@c,w,c
 21163                           
 21164                           ; Switch size 1, requested type "space"
 21165                           ; Number of cases is 5, Range of values is 0 to 117
 21166                           ; switch strategies available:
 21167                           ; Name         Instructions Cycles
 21168                           ; simple_byte           16     9 (average)
 21169                           ;	Chosen strategy is simple_byte
 21170  001AE6  0A00               	xorlw	0	; case 0
 21171  001AE8  B4D8               	btfsc	status,2,c
 21172  001AEA  0012               	return	
 21173  001AEC  0A64               	xorlw	100	; case 100
 21174  001AEE  B4D8               	btfsc	status,2,c
 21175  001AF0  D00A               	goto	i2l1349
 21176  001AF2  0A0D               	xorlw	13	; case 105
 21177  001AF4  B4D8               	btfsc	status,2,c
 21178  001AF6  D007               	goto	i2l1349
 21179  001AF8  0A1A               	xorlw	26	; case 115
 21180  001AFA  B4D8               	btfsc	status,2,c
 21181  001AFC  D778               	goto	i2l6085
 21182  001AFE  0A06               	xorlw	6	; case 117
 21183  001B00  B4D8               	btfsc	status,2,c
 21184  001B02  D7E4               	goto	i2l6115
 21185  001B04  D0BC               	goto	i2l6191
 21186  001B06                     i2l1349:
 21187                           
 21188                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 21189  001B06  BC26               	btfsc	i2printf@flag,6,c
 21190  001B08  D015               	goto	i2l6131
 21191                           
 21192                           ;doprnt.c: 1253: {
 21193                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 21194  001B0A  C020  FFD9         	movff	i2printf@ap,fsr2l
 21195  001B0E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21196  001B12  CFDE F024          	movff	postinc2,i2printf@val
 21197  001B16  CFDD F025          	movff	postdec2,i2printf@val+1
 21198  001B1A  0E02               	movlw	2
 21199  001B1C  2620               	addwf	i2printf@ap,f,c
 21200  001B1E  0E00               	movlw	0
 21201  001B20  2221               	addwfc	i2printf@ap+1,f,c
 21202                           
 21203                           ;doprnt.c: 1261: if((int)val < 0) {
 21204  001B22  AE25               	btfss	i2printf@val+1,7,c
 21205  001B24  D013               	goto	i2l6135
 21206                           
 21207                           ;doprnt.c: 1262: flag |= 0x03;
 21208  001B26  0E03               	movlw	3
 21209  001B28  1226               	iorwf	i2printf@flag,f,c
 21210                           
 21211                           ;doprnt.c: 1263: val = -val;
 21212  001B2A  6C24               	negf	i2printf@val,c
 21213  001B2C  1E25               	comf	i2printf@val+1,f,c
 21214  001B2E  B0D8               	btfsc	status,0,c
 21215  001B30  2A25               	incf	i2printf@val+1,f,c
 21216                           
 21217                           ;doprnt.c: 1264: }
 21218                           ;doprnt.c: 1266: }
 21219  001B32  D00C               	goto	i2l6135
 21220  001B34                     i2l6131:
 21221                           
 21222                           ;doprnt.c: 1268: else
 21223                           ;doprnt.c: 1273: {
 21224                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21225  001B34  C020  FFD9         	movff	i2printf@ap,fsr2l
 21226  001B38  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21227  001B3C  CFDE F024          	movff	postinc2,i2printf@val
 21228  001B40  CFDD F025          	movff	postdec2,i2printf@val+1
 21229  001B44  0E02               	movlw	2
 21230  001B46  2620               	addwf	i2printf@ap,f,c
 21231  001B48  0E00               	movlw	0
 21232  001B4A  2221               	addwfc	i2printf@ap+1,f,c
 21233  001B4C                     i2l6135:
 21234                           
 21235                           ;doprnt.c: 1287: }
 21236                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21237  001B4C  0E01               	movlw	1
 21238  001B4E  6E27               	movwf	i2printf@c,c
 21239  001B50                     i2l6137:
 21240  001B50  0E05               	movlw	5
 21241  001B52  1827               	xorwf	i2printf@c,w,c
 21242  001B54  B4D8               	btfsc	status,2,c
 21243  001B56  D015               	goto	i2l6149
 21244                           
 21245                           ;doprnt.c: 1306: if(val < dpowers[c])
 21246  001B58  5027               	movf	i2printf@c,w,c
 21247  001B5A  0D02               	mullw	2
 21248  001B5C  0E00               	movlw	low _dpowers
 21249  001B5E  24F3               	addwf	prodl,w,c
 21250  001B60  6EF6               	movwf	tblptrl,c
 21251  001B62  0EFB               	movlw	high _dpowers
 21252  001B64  20F4               	addwfc	prodh,w,c
 21253  001B66  6EF7               	movwf	tblptrh,c
 21254  001B68                     	if	1	;There are 3 active tblptr bytes
 21255  001B68  6AF8               	clrf	tblptru,c
 21256  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
 21257  001B6C  22F8               	addwfc	tblptru,f,c
 21258  001B6E                     	endif
 21259  001B6E  0009               	tblrd		*+
 21260  001B70  50F5               	movf	tablat,w,c
 21261  001B72  5C24               	subwf	i2printf@val,w,c
 21262  001B74  0009               	tblrd		*+
 21263  001B76  50F5               	movf	tablat,w,c
 21264  001B78  5825               	subwfb	i2printf@val+1,w,c
 21265  001B7A  A0D8               	btfss	status,0,c
 21266  001B7C  D002               	goto	i2l6149
 21267                           
 21268                           ;doprnt.c: 1307: break;
 21269  001B7E  2A27               	incf	i2printf@c,f,c
 21270  001B80  D7E7               	goto	i2l6137
 21271  001B82                     i2l6149:
 21272                           
 21273                           ;doprnt.c: 1345: if(width && flag & 0x03)
 21274  001B82  5028               	movf	i2printf@width,w,c
 21275  001B84  1029               	iorwf	i2printf@width+1,w,c
 21276  001B86  B4D8               	btfsc	status,2,c
 21277  001B88  D009               	goto	i2l6155
 21278  001B8A  C026  F019         	movff	i2printf@flag,??i2_printf
 21279  001B8E  0E03               	movlw	3
 21280  001B90  1619               	andwf	??i2_printf,f,c
 21281  001B92  B4D8               	btfsc	status,2,c
 21282  001B94  D003               	goto	i2l6155
 21283                           
 21284                           ;doprnt.c: 1346: width--;
 21285  001B96  0628               	decf	i2printf@width,f,c
 21286  001B98  A0D8               	btfss	status,0,c
 21287  001B9A  0629               	decf	i2printf@width+1,f,c
 21288  001B9C                     i2l6155:
 21289                           
 21290                           ;doprnt.c: 1381: if(width > c)
 21291  001B9C  0E80               	movlw	128
 21292  001B9E  BE27               	btfsc	i2printf@c,7,c
 21293  001BA0  0E7F               	movlw	127
 21294  001BA2  6E19               	movwf	??i2_printf& (0+255),c
 21295  001BA4  5028               	movf	i2printf@width,w,c
 21296  001BA6  5C27               	subwf	i2printf@c,w,c
 21297  001BA8  5029               	movf	i2printf@width+1,w,c
 21298  001BAA  0A80               	xorlw	128
 21299  001BAC  5819               	subwfb	??i2_printf& (0+255),w,c
 21300  001BAE  B0D8               	btfsc	status,0,c
 21301  001BB0  D007               	goto	i2l6159
 21302                           
 21303                           ;doprnt.c: 1382: width -= c;
 21304  001BB2  5027               	movf	i2printf@c,w,c
 21305  001BB4  5E28               	subwf	i2printf@width,f,c
 21306  001BB6  0E00               	movlw	0
 21307  001BB8  BE27               	btfsc	i2printf@c,7,c
 21308  001BBA  0EFF               	movlw	255
 21309  001BBC  5A29               	subwfb	i2printf@width+1,f,c
 21310  001BBE  D004               	goto	i2l6161
 21311  001BC0                     i2l6159:
 21312                           
 21313                           ;doprnt.c: 1383: else
 21314                           ;doprnt.c: 1384: width = 0;
 21315  001BC0  0E00               	movlw	0
 21316  001BC2  6E29               	movwf	i2printf@width+1,c
 21317  001BC4  0E00               	movlw	0
 21318  001BC6  6E28               	movwf	i2printf@width,c
 21319  001BC8                     i2l6161:
 21320                           
 21321                           ;doprnt.c: 1387: if(flag & 0x04) {
 21322  001BC8  A426               	btfss	i2printf@flag,2,c
 21323  001BCA  D014               	goto	i2l6173
 21324                           
 21325                           ;doprnt.c: 1392: if(flag & 0x03)
 21326  001BCC  C026  F019         	movff	i2printf@flag,??i2_printf
 21327  001BD0  0E03               	movlw	3
 21328  001BD2  1619               	andwf	??i2_printf,f,c
 21329  001BD4  B4D8               	btfsc	status,2,c
 21330  001BD6  D003               	goto	i2l6167
 21331                           
 21332                           ;doprnt.c: 1393: (putch('-') );
 21333  001BD8  0E2D               	movlw	45
 21334  001BDA  EC6F  F027         	call	i2_putch
 21335  001BDE                     i2l6167:
 21336                           
 21337                           ;doprnt.c: 1415: if(width)
 21338  001BDE  5028               	movf	i2printf@width,w,c
 21339  001BE0  1029               	iorwf	i2printf@width+1,w,c
 21340  001BE2  B4D8               	btfsc	status,2,c
 21341  001BE4  D01E               	goto	i2l6183
 21342                           
 21343                           ;doprnt.c: 1417: (putch('0') );
 21344                           
 21345                           ;doprnt.c: 1416: do
 21346  001BE6  0E30               	movlw	48
 21347  001BE8  EC6F  F027         	call	i2_putch
 21348                           
 21349                           ;doprnt.c: 1418: while(--width);
 21350  001BEC  0628               	decf	i2printf@width,f,c
 21351  001BEE  A0D8               	btfss	status,0,c
 21352  001BF0  0629               	decf	i2printf@width+1,f,c
 21353  001BF2  D7F5               	goto	i2l6167
 21354  001BF4                     i2l6173:
 21355                           
 21356                           ;doprnt.c: 1422: {
 21357                           ;doprnt.c: 1424: if(width
 21358                           ;doprnt.c: 1428: )
 21359  001BF4  5028               	movf	i2printf@width,w,c
 21360  001BF6  1029               	iorwf	i2printf@width+1,w,c
 21361  001BF8  B4D8               	btfsc	status,2,c
 21362  001BFA  D00A               	goto	i2l6179
 21363  001BFC                     i2l6175:
 21364                           
 21365                           ;doprnt.c: 1430: (putch(' ') );
 21366  001BFC  0E20               	movlw	32
 21367  001BFE  EC6F  F027         	call	i2_putch
 21368                           
 21369                           ;doprnt.c: 1431: while(--width);
 21370  001C02  0628               	decf	i2printf@width,f,c
 21371  001C04  A0D8               	btfss	status,0,c
 21372  001C06  0629               	decf	i2printf@width+1,f,c
 21373  001C08  5028               	movf	i2printf@width,w,c
 21374  001C0A  1029               	iorwf	i2printf@width+1,w,c
 21375  001C0C  A4D8               	btfss	status,2,c
 21376  001C0E  D7F6               	goto	i2l6175
 21377  001C10                     i2l6179:
 21378                           
 21379                           ;doprnt.c: 1438: if(flag & 0x03)
 21380  001C10  C026  F019         	movff	i2printf@flag,??i2_printf
 21381  001C14  0E03               	movlw	3
 21382  001C16  1619               	andwf	??i2_printf,f,c
 21383  001C18  B4D8               	btfsc	status,2,c
 21384  001C1A  D003               	goto	i2l6183
 21385                           
 21386                           ;doprnt.c: 1439: (putch('-') );
 21387  001C1C  0E2D               	movlw	45
 21388  001C1E  EC6F  F027         	call	i2_putch
 21389  001C22                     i2l6183:
 21390                           
 21391                           ;doprnt.c: 1469: }
 21392                           ;doprnt.c: 1472: prec = c;
 21393  001C22  C027  F01D         	movff	i2printf@c,i2printf@prec
 21394                           
 21395                           ;doprnt.c: 1474: while(prec--) {
 21396  001C26  D027               	goto	i2l6189
 21397  001C28                     i2l6185:
 21398                           
 21399                           ;doprnt.c: 1478: {
 21400                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 21401  001C28  501D               	movf	i2printf@prec,w,c
 21402  001C2A  0D02               	mullw	2
 21403  001C2C  0E00               	movlw	low _dpowers
 21404  001C2E  24F3               	addwf	prodl,w,c
 21405  001C30  6EF6               	movwf	tblptrl,c
 21406  001C32  0EFB               	movlw	high _dpowers
 21407  001C34  20F4               	addwfc	prodh,w,c
 21408  001C36  6EF7               	movwf	tblptrh,c
 21409  001C38                     	if	1	;There are 3 active tblptr bytes
 21410  001C38  6AF8               	clrf	tblptru,c
 21411  001C3A  0E00               	movlw	low (__mediumconst shr (0+16))
 21412  001C3C  22F8               	addwfc	tblptru,f,c
 21413  001C3E                     	endif
 21414  001C3E  0009               	tblrd		*+
 21415  001C40  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 21416  001C44  000A               	tblrd		*-
 21417  001C46  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 21418  001C4A  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 21419  001C4E  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 21420  001C52  ECB9  F023         	call	i2___lwdiv	;wreg free
 21421  001C56  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 21422  001C5A  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 21423  001C5E  0E00               	movlw	0
 21424  001C60  6E04               	movwf	i2___lwmod@divisor+1,c
 21425  001C62  0E0A               	movlw	10
 21426  001C64  6E03               	movwf	i2___lwmod@divisor,c
 21427  001C66  EC78  F024         	call	i2___lwmod	;wreg free
 21428  001C6A  5001               	movf	?i2___lwmod,w,c
 21429  001C6C  0F30               	addlw	48
 21430  001C6E  6E27               	movwf	i2printf@c,c
 21431                           
 21432                           ;doprnt.c: 1523: }
 21433                           ;doprnt.c: 1524: (putch(c) );
 21434  001C70  5027               	movf	i2printf@c,w,c
 21435  001C72  EC6F  F027         	call	i2_putch
 21436  001C76                     i2l6189:
 21437  001C76  061D               	decf	i2printf@prec,f,c
 21438  001C78  281D               	incf	i2printf@prec,w,c
 21439  001C7A  A4D8               	btfss	status,2,c
 21440  001C7C  D7D5               	goto	i2l6185
 21441  001C7E                     i2l6191:
 21442  001C7E  C00D  FFF6         	movff	i2printf@f,tblptrl
 21443  001C82  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21444  001C86  4A0D               	infsnz	i2printf@f,f,c
 21445  001C88  2A0E               	incf	i2printf@f+1,f,c
 21446  001C8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21447  001C8A  6AF8               	clrf	tblptru,c
 21448  001C8C                     	endif
 21449  001C8C                     	if	0	;tblptru may be non-zero
 21450  001C8C                     	endif
 21451  001C8C  0008               	tblrd		*
 21452  001C8E  CFF5 F027          	movff	tablat,i2printf@c
 21453  001C92  5027               	movf	i2printf@c,w,c
 21454  001C94  B4D8               	btfsc	status,2,c
 21455  001C96  0012               	return	
 21456  001C98  D64E               	goto	i2l6061
 21457  001C9A                     __end_ofi2_printf:
 21458                           	opt stack 0
 21459                           pclatu	equ	0xFFB
 21460                           pclath	equ	0xFFA
 21461                           tblptru	equ	0xFF8
 21462                           tblptrh	equ	0xFF7
 21463                           tblptrl	equ	0xFF6
 21464                           tablat	equ	0xFF5
 21465                           prodh	equ	0xFF4
 21466                           prodl	equ	0xFF3
 21467                           intcon	equ	0xFF2
 21468                           intcon2	equ	0xFF1
 21469                           intcon3	equ	0xFF0
 21470                           indf0	equ	0xFEF
 21471                           postinc0	equ	0xFEE
 21472                           fsr0h	equ	0xFEA
 21473                           fsr0l	equ	0xFE9
 21474                           wreg	equ	0xFE8
 21475                           postdec1	equ	0xFE5
 21476                           fsr1h	equ	0xFE2
 21477                           fsr1l	equ	0xFE1
 21478                           indf2	equ	0xFDF
 21479                           postinc2	equ	0xFDE
 21480                           postdec2	equ	0xFDD
 21481                           fsr2h	equ	0xFDA
 21482                           fsr2l	equ	0xFD9
 21483                           status	equ	0xFD8
 21484                           
 21485 ;; *************** function i2_putch *****************
 21486 ;; Defined at:
 21487 ;;		line 20 in file "lcd.c"
 21488 ;; Parameters:    Size  Location     Type
 21489 ;;  data            1    wreg     unsigned char 
 21490 ;; Auto vars:     Size  Location     Type
 21491 ;;  data            1    2[COMRAM] unsigned char 
 21492 ;; Return value:  Size  Location     Type
 21493 ;;                  1    wreg      void 
 21494 ;; Registers used:
 21495 ;;		wreg, status,2, status,0, cstack
 21496 ;; Tracked objects:
 21497 ;;		On entry : 0/0
 21498 ;;		On exit  : 0/0
 21499 ;;		Unchanged: 0/0
 21500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21502 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21504 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21505 ;;Total ram usage:        1 bytes
 21506 ;; Hardware stack levels used:    1
 21507 ;; Hardware stack levels required when called:    1
 21508 ;; This function calls:
 21509 ;;		i2_lcdNibble
 21510 ;; This function is called by:
 21511 ;;		i2_printf
 21512 ;; This function uses a non-reentrant model
 21513 ;;
 21514                           
 21515                           	psect	text80
 21516  004EDE                     __ptext80:
 21517                           	opt stack 0
 21518  004EDE                     i2_putch:
 21519                           	opt stack 19
 21520                           
 21521                           ;incstack = 0
 21522                           ;i2putch@data stored from wreg
 21523  004EDE  6E03               	movwf	i2putch@data,c
 21524                           
 21525                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 21526  004EE0  848C               	bsf	3980,2,c	;volatile
 21527                           
 21528                           ;lcd.c: 22: lcdNibble(data);
 21529  004EE2  5003               	movf	i2putch@data,w,c
 21530  004EE4  EC8E  F023         	call	i2_lcdNibble
 21531  004EE8  0012               	return		;funcret
 21532  004EEA                     __end_ofi2_putch:
 21533                           	opt stack 0
 21534                           pclatu	equ	0xFFB
 21535                           pclath	equ	0xFFA
 21536                           tblptru	equ	0xFF8
 21537                           tblptrh	equ	0xFF7
 21538                           tblptrl	equ	0xFF6
 21539                           tablat	equ	0xFF5
 21540                           prodh	equ	0xFF4
 21541                           prodl	equ	0xFF3
 21542                           intcon	equ	0xFF2
 21543                           intcon2	equ	0xFF1
 21544                           intcon3	equ	0xFF0
 21545                           indf0	equ	0xFEF
 21546                           postinc0	equ	0xFEE
 21547                           fsr0h	equ	0xFEA
 21548                           fsr0l	equ	0xFE9
 21549                           wreg	equ	0xFE8
 21550                           postdec1	equ	0xFE5
 21551                           fsr1h	equ	0xFE2
 21552                           fsr1l	equ	0xFE1
 21553                           indf2	equ	0xFDF
 21554                           postinc2	equ	0xFDE
 21555                           postdec2	equ	0xFDD
 21556                           fsr2h	equ	0xFDA
 21557                           fsr2l	equ	0xFD9
 21558                           status	equ	0xFD8
 21559                           
 21560 ;; *************** function i2_isdigit *****************
 21561 ;; Defined at:
 21562 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 21563 ;; Parameters:    Size  Location     Type
 21564 ;;  c               1    wreg     unsigned char 
 21565 ;; Auto vars:     Size  Location     Type
 21566 ;;  c               1    2[COMRAM] unsigned char 
 21567 ;; Return value:  Size  Location     Type
 21568 ;;		None               void
 21569 ;; Registers used:
 21570 ;;		wreg, status,2, status,0
 21571 ;; Tracked objects:
 21572 ;;		On entry : 0/0
 21573 ;;		On exit  : 0/0
 21574 ;;		Unchanged: 0/0
 21575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21578 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21579 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21580 ;;Total ram usage:        3 bytes
 21581 ;; Hardware stack levels used:    1
 21582 ;; This function calls:
 21583 ;;		Nothing
 21584 ;; This function is called by:
 21585 ;;		i2_printf
 21586 ;; This function uses a non-reentrant model
 21587 ;;
 21588                           
 21589                           	psect	text81
 21590  004E32                     __ptext81:
 21591                           	opt stack 0
 21592  004E32                     i2_isdigit:
 21593                           	opt stack 20
 21594                           
 21595                           ;incstack = 0
 21596                           ;i2isdigit@c stored from wreg
 21597  004E32  6E03               	movwf	i2isdigit@c,c
 21598  004E34  0E00               	movlw	0
 21599  004E36  6E02               	movwf	i2_isdigit$1975,c
 21600  004E38  0E3A               	movlw	58
 21601  004E3A  6003               	cpfslt	i2isdigit@c,c
 21602  004E3C  D005               	goto	i2l5765
 21603  004E3E  0E2F               	movlw	47
 21604  004E40  6403               	cpfsgt	i2isdigit@c,c
 21605  004E42  D002               	goto	i2l5765
 21606  004E44  0E01               	movlw	1
 21607  004E46  6E02               	movwf	i2_isdigit$1975,c
 21608  004E48                     i2l5765:
 21609  004E48  C002  F001         	movff	i2_isdigit$1975,??i2_isdigit
 21610  004E4C  3001               	rrcf	??i2_isdigit,w,c
 21611  004E4E  0012               	return	
 21612  004E50                     __end_ofi2_isdigit:
 21613                           	opt stack 0
 21614                           pclatu	equ	0xFFB
 21615                           pclath	equ	0xFFA
 21616                           tblptru	equ	0xFF8
 21617                           tblptrh	equ	0xFF7
 21618                           tblptrl	equ	0xFF6
 21619                           tablat	equ	0xFF5
 21620                           prodh	equ	0xFF4
 21621                           prodl	equ	0xFF3
 21622                           intcon	equ	0xFF2
 21623                           intcon2	equ	0xFF1
 21624                           intcon3	equ	0xFF0
 21625                           indf0	equ	0xFEF
 21626                           postinc0	equ	0xFEE
 21627                           fsr0h	equ	0xFEA
 21628                           fsr0l	equ	0xFE9
 21629                           wreg	equ	0xFE8
 21630                           postdec1	equ	0xFE5
 21631                           fsr1h	equ	0xFE2
 21632                           fsr1l	equ	0xFE1
 21633                           indf2	equ	0xFDF
 21634                           postinc2	equ	0xFDE
 21635                           postdec2	equ	0xFDD
 21636                           fsr2h	equ	0xFDA
 21637                           fsr2l	equ	0xFD9
 21638                           status	equ	0xFD8
 21639                           
 21640 ;; *************** function i2___wmul *****************
 21641 ;; Defined at:
 21642 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 21643 ;; Parameters:    Size  Location     Type
 21644 ;;  multiplier      2    0[COMRAM] unsigned int 
 21645 ;;  multiplicand    2    2[COMRAM] unsigned int 
 21646 ;; Auto vars:     Size  Location     Type
 21647 ;;  __wmul          2    4[COMRAM] unsigned int 
 21648 ;; Return value:  Size  Location     Type
 21649 ;;                  2    0[COMRAM] unsigned int 
 21650 ;; Registers used:
 21651 ;;		wreg, status,2, status,0, prodl, prodh
 21652 ;; Tracked objects:
 21653 ;;		On entry : 0/0
 21654 ;;		On exit  : 0/0
 21655 ;;		Unchanged: 0/0
 21656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21657 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21658 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21660 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21661 ;;Total ram usage:        6 bytes
 21662 ;; Hardware stack levels used:    1
 21663 ;; This function calls:
 21664 ;;		Nothing
 21665 ;; This function is called by:
 21666 ;;		_printSortTimer
 21667 ;;		_retrieveLog
 21668 ;;		i2_printf
 21669 ;; This function uses a non-reentrant model
 21670 ;;
 21671                           
 21672                           	psect	text82
 21673  004D7E                     __ptext82:
 21674                           	opt stack 0
 21675  004D7E                     i2___wmul:
 21676                           	opt stack 20
 21677                           
 21678                           ;incstack = 0
 21679  004D7E  5001               	movf	i2___wmul@multiplier,w,c
 21680  004D80  0203               	mulwf	i2___wmul@multiplicand,c
 21681  004D82  CFF3 F005          	movff	prodl,i2___wmul@product
 21682  004D86  CFF4 F006          	movff	prodh,i2___wmul@product+1
 21683  004D8A  5001               	movf	i2___wmul@multiplier,w,c
 21684  004D8C  0204               	mulwf	i2___wmul@multiplicand+1,c
 21685  004D8E  50F3               	movf	prodl,w,c
 21686  004D90  2606               	addwf	i2___wmul@product+1,f,c
 21687  004D92  5002               	movf	i2___wmul@multiplier+1,w,c
 21688  004D94  0203               	mulwf	i2___wmul@multiplicand,c
 21689  004D96  50F3               	movf	prodl,w,c
 21690  004D98  2606               	addwf	i2___wmul@product+1,f,c
 21691  004D9A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 21692  004D9E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 21693  004DA2  0012               	return	
 21694  004DA4                     __end_ofi2___wmul:
 21695                           	opt stack 0
 21696                           pclatu	equ	0xFFB
 21697                           pclath	equ	0xFFA
 21698                           tblptru	equ	0xFF8
 21699                           tblptrh	equ	0xFF7
 21700                           tblptrl	equ	0xFF6
 21701                           tablat	equ	0xFF5
 21702                           prodh	equ	0xFF4
 21703                           prodl	equ	0xFF3
 21704                           intcon	equ	0xFF2
 21705                           intcon2	equ	0xFF1
 21706                           intcon3	equ	0xFF0
 21707                           indf0	equ	0xFEF
 21708                           postinc0	equ	0xFEE
 21709                           fsr0h	equ	0xFEA
 21710                           fsr0l	equ	0xFE9
 21711                           wreg	equ	0xFE8
 21712                           postdec1	equ	0xFE5
 21713                           fsr1h	equ	0xFE2
 21714                           fsr1l	equ	0xFE1
 21715                           indf2	equ	0xFDF
 21716                           postinc2	equ	0xFDE
 21717                           postdec2	equ	0xFDD
 21718                           fsr2h	equ	0xFDA
 21719                           fsr2l	equ	0xFD9
 21720                           status	equ	0xFD8
 21721                           
 21722 ;; *************** function i2___lwmod *****************
 21723 ;; Defined at:
 21724 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 21725 ;; Parameters:    Size  Location     Type
 21726 ;;  dividend        2    0[COMRAM] unsigned int 
 21727 ;;  divisor         2    2[COMRAM] unsigned int 
 21728 ;; Auto vars:     Size  Location     Type
 21729 ;;  __lwmod         1    4[COMRAM] unsigned char 
 21730 ;; Return value:  Size  Location     Type
 21731 ;;                  2    0[COMRAM] unsigned int 
 21732 ;; Registers used:
 21733 ;;		wreg, status,2, status,0
 21734 ;; Tracked objects:
 21735 ;;		On entry : 0/0
 21736 ;;		On exit  : 0/0
 21737 ;;		Unchanged: 0/0
 21738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21739 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21742 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21743 ;;Total ram usage:        5 bytes
 21744 ;; Hardware stack levels used:    1
 21745 ;; This function calls:
 21746 ;;		Nothing
 21747 ;; This function is called by:
 21748 ;;		_printSortTimer
 21749 ;;		i2_printf
 21750 ;; This function uses a non-reentrant model
 21751 ;;
 21752                           
 21753                           	psect	text83
 21754  0048F0                     __ptext83:
 21755                           	opt stack 0
 21756  0048F0                     i2___lwmod:
 21757                           	opt stack 20
 21758                           
 21759                           ;incstack = 0
 21760  0048F0  5003               	movf	i2___lwmod@divisor,w,c
 21761  0048F2  1004               	iorwf	i2___lwmod@divisor+1,w,c
 21762  0048F4  B4D8               	btfsc	status,2,c
 21763  0048F6  D018               	goto	i2l1806
 21764  0048F8  0E01               	movlw	1
 21765  0048FA  6E05               	movwf	i2___lwmod@counter,c
 21766  0048FC  D004               	goto	i2l5797
 21767  0048FE                     i2l5795:
 21768  0048FE  90D8               	bcf	status,0,c
 21769  004900  3603               	rlcf	i2___lwmod@divisor,f,c
 21770  004902  3604               	rlcf	i2___lwmod@divisor+1,f,c
 21771  004904  2A05               	incf	i2___lwmod@counter,f,c
 21772  004906                     i2l5797:
 21773  004906  AE04               	btfss	i2___lwmod@divisor+1,7,c
 21774  004908  D7FA               	goto	i2l5795
 21775  00490A                     i2l5799:
 21776  00490A  5003               	movf	i2___lwmod@divisor,w,c
 21777  00490C  5C01               	subwf	i2___lwmod@dividend,w,c
 21778  00490E  5004               	movf	i2___lwmod@divisor+1,w,c
 21779  004910  5802               	subwfb	i2___lwmod@dividend+1,w,c
 21780  004912  A0D8               	btfss	status,0,c
 21781  004914  D004               	goto	i2l5803
 21782  004916  5003               	movf	i2___lwmod@divisor,w,c
 21783  004918  5E01               	subwf	i2___lwmod@dividend,f,c
 21784  00491A  5004               	movf	i2___lwmod@divisor+1,w,c
 21785  00491C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 21786  00491E                     i2l5803:
 21787  00491E  90D8               	bcf	status,0,c
 21788  004920  3204               	rrcf	i2___lwmod@divisor+1,f,c
 21789  004922  3203               	rrcf	i2___lwmod@divisor,f,c
 21790  004924  2E05               	decfsz	i2___lwmod@counter,f,c
 21791  004926  D7F1               	goto	i2l5799
 21792  004928                     i2l1806:
 21793  004928  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 21794  00492C  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 21795  004930  0012               	return		;funcret
 21796  004932                     __end_ofi2___lwmod:
 21797                           	opt stack 0
 21798                           pclatu	equ	0xFFB
 21799                           pclath	equ	0xFFA
 21800                           tblptru	equ	0xFF8
 21801                           tblptrh	equ	0xFF7
 21802                           tblptrl	equ	0xFF6
 21803                           tablat	equ	0xFF5
 21804                           prodh	equ	0xFF4
 21805                           prodl	equ	0xFF3
 21806                           intcon	equ	0xFF2
 21807                           intcon2	equ	0xFF1
 21808                           intcon3	equ	0xFF0
 21809                           indf0	equ	0xFEF
 21810                           postinc0	equ	0xFEE
 21811                           fsr0h	equ	0xFEA
 21812                           fsr0l	equ	0xFE9
 21813                           wreg	equ	0xFE8
 21814                           postdec1	equ	0xFE5
 21815                           fsr1h	equ	0xFE2
 21816                           fsr1l	equ	0xFE1
 21817                           indf2	equ	0xFDF
 21818                           postinc2	equ	0xFDE
 21819                           postdec2	equ	0xFDD
 21820                           fsr2h	equ	0xFDA
 21821                           fsr2l	equ	0xFD9
 21822                           status	equ	0xFD8
 21823                           
 21824 ;; *************** function i2___lwdiv *****************
 21825 ;; Defined at:
 21826 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 21827 ;; Parameters:    Size  Location     Type
 21828 ;;  dividend        2    5[COMRAM] unsigned int 
 21829 ;;  divisor         2    7[COMRAM] unsigned int 
 21830 ;; Auto vars:     Size  Location     Type
 21831 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 21832 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 21833 ;; Return value:  Size  Location     Type
 21834 ;;                  2    5[COMRAM] unsigned int 
 21835 ;; Registers used:
 21836 ;;		wreg, status,2, status,0
 21837 ;; Tracked objects:
 21838 ;;		On entry : 0/0
 21839 ;;		On exit  : 0/0
 21840 ;;		Unchanged: 0/0
 21841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21842 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21843 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21845 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21846 ;;Total ram usage:        7 bytes
 21847 ;; Hardware stack levels used:    1
 21848 ;; This function calls:
 21849 ;;		Nothing
 21850 ;; This function is called by:
 21851 ;;		_printSortTimer
 21852 ;;		i2_printf
 21853 ;; This function uses a non-reentrant model
 21854 ;;
 21855                           
 21856                           	psect	text84
 21857  004772                     __ptext84:
 21858                           	opt stack 0
 21859  004772                     i2___lwdiv:
 21860                           	opt stack 20
 21861                           
 21862                           ;incstack = 0
 21863  004772  0E00               	movlw	0
 21864  004774  6E0B               	movwf	i2___lwdiv@quotient+1,c
 21865  004776  0E00               	movlw	0
 21866  004778  6E0A               	movwf	i2___lwdiv@quotient,c
 21867  00477A  5008               	movf	i2___lwdiv@divisor,w,c
 21868  00477C  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 21869  00477E  B4D8               	btfsc	status,2,c
 21870  004780  D01C               	goto	i2l1796
 21871  004782  0E01               	movlw	1
 21872  004784  6E0C               	movwf	i2___lwdiv@counter,c
 21873  004786  D004               	goto	i2l5777
 21874  004788                     i2l5775:
 21875  004788  90D8               	bcf	status,0,c
 21876  00478A  3608               	rlcf	i2___lwdiv@divisor,f,c
 21877  00478C  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 21878  00478E  2A0C               	incf	i2___lwdiv@counter,f,c
 21879  004790                     i2l5777:
 21880  004790  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 21881  004792  D7FA               	goto	i2l5775
 21882  004794                     i2l5779:
 21883  004794  90D8               	bcf	status,0,c
 21884  004796  360A               	rlcf	i2___lwdiv@quotient,f,c
 21885  004798  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 21886  00479A  5008               	movf	i2___lwdiv@divisor,w,c
 21887  00479C  5C06               	subwf	i2___lwdiv@dividend,w,c
 21888  00479E  5009               	movf	i2___lwdiv@divisor+1,w,c
 21889  0047A0  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 21890  0047A2  A0D8               	btfss	status,0,c
 21891  0047A4  D005               	goto	i2l5787
 21892  0047A6  5008               	movf	i2___lwdiv@divisor,w,c
 21893  0047A8  5E06               	subwf	i2___lwdiv@dividend,f,c
 21894  0047AA  5009               	movf	i2___lwdiv@divisor+1,w,c
 21895  0047AC  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 21896  0047AE  800A               	bsf	i2___lwdiv@quotient,0,c
 21897  0047B0                     i2l5787:
 21898  0047B0  90D8               	bcf	status,0,c
 21899  0047B2  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 21900  0047B4  3208               	rrcf	i2___lwdiv@divisor,f,c
 21901  0047B6  2E0C               	decfsz	i2___lwdiv@counter,f,c
 21902  0047B8  D7ED               	goto	i2l5779
 21903  0047BA                     i2l1796:
 21904  0047BA  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 21905  0047BE  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 21906  0047C2  0012               	return		;funcret
 21907  0047C4                     __end_ofi2___lwdiv:
 21908                           	opt stack 0
 21909                           pclatu	equ	0xFFB
 21910                           pclath	equ	0xFFA
 21911                           tblptru	equ	0xFF8
 21912                           tblptrh	equ	0xFF7
 21913                           tblptrl	equ	0xFF6
 21914                           tablat	equ	0xFF5
 21915                           prodh	equ	0xFF4
 21916                           prodl	equ	0xFF3
 21917                           intcon	equ	0xFF2
 21918                           intcon2	equ	0xFF1
 21919                           intcon3	equ	0xFF0
 21920                           indf0	equ	0xFEF
 21921                           postinc0	equ	0xFEE
 21922                           fsr0h	equ	0xFEA
 21923                           fsr0l	equ	0xFE9
 21924                           wreg	equ	0xFE8
 21925                           postdec1	equ	0xFE5
 21926                           fsr1h	equ	0xFE2
 21927                           fsr1l	equ	0xFE1
 21928                           indf2	equ	0xFDF
 21929                           postinc2	equ	0xFDE
 21930                           postdec2	equ	0xFDD
 21931                           fsr2h	equ	0xFDA
 21932                           fsr2l	equ	0xFD9
 21933                           status	equ	0xFD8
 21934                           
 21935 ;; *************** function i2_lcdInst *****************
 21936 ;; Defined at:
 21937 ;;		line 15 in file "lcd.c"
 21938 ;; Parameters:    Size  Location     Type
 21939 ;;  data            1    wreg     unsigned char 
 21940 ;; Auto vars:     Size  Location     Type
 21941 ;;  data            1    2[COMRAM] unsigned char 
 21942 ;; Return value:  Size  Location     Type
 21943 ;;                  1    wreg      void 
 21944 ;; Registers used:
 21945 ;;		wreg, status,2, status,0, cstack
 21946 ;; Tracked objects:
 21947 ;;		On entry : 0/0
 21948 ;;		On exit  : 0/0
 21949 ;;		Unchanged: 0/0
 21950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21954 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21955 ;;Total ram usage:        1 bytes
 21956 ;; Hardware stack levels used:    1
 21957 ;; Hardware stack levels required when called:    1
 21958 ;; This function calls:
 21959 ;;		i2_lcdNibble
 21960 ;; This function is called by:
 21961 ;;		_change_state_to_menu_11
 21962 ;;		_change_state_to_menu_23
 21963 ;;		_change_state_to_logs_11
 21964 ;;		_change_state_to_logs_12
 21965 ;;		_change_state_to_logs_22
 21966 ;;		_change_state_to_logs_23
 21967 ;;		_change_state_to_logs_33
 21968 ;;		_change_state_to_logs_34
 21969 ;;		_printSortTimer
 21970 ;;		i2_change_state_to_menu_start
 21971 ;;		i2_change_state_to_menu_12
 21972 ;;		i2_change_state_to_menu_22
 21973 ;;		i2_printRTC
 21974 ;; This function uses a non-reentrant model
 21975 ;;
 21976                           
 21977                           	psect	text85
 21978  004EEA                     __ptext85:
 21979                           	opt stack 0
 21980  004EEA                     i2_lcdInst:
 21981                           	opt stack 19
 21982                           
 21983                           ;incstack = 0
 21984                           ;i2lcdInst@data stored from wreg
 21985  004EEA  6E03               	movwf	i2lcdInst@data,c
 21986                           
 21987                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 21988  004EEC  948C               	bcf	3980,2,c	;volatile
 21989                           
 21990                           ;lcd.c: 17: lcdNibble(data);
 21991  004EEE  5003               	movf	i2lcdInst@data,w,c
 21992  004EF0  EC8E  F023         	call	i2_lcdNibble
 21993  004EF4  0012               	return		;funcret
 21994  004EF6                     __end_ofi2_lcdInst:
 21995                           	opt stack 0
 21996                           pclatu	equ	0xFFB
 21997                           pclath	equ	0xFFA
 21998                           tblptru	equ	0xFF8
 21999                           tblptrh	equ	0xFF7
 22000                           tblptrl	equ	0xFF6
 22001                           tablat	equ	0xFF5
 22002                           prodh	equ	0xFF4
 22003                           prodl	equ	0xFF3
 22004                           intcon	equ	0xFF2
 22005                           intcon2	equ	0xFF1
 22006                           intcon3	equ	0xFF0
 22007                           indf0	equ	0xFEF
 22008                           postinc0	equ	0xFEE
 22009                           fsr0h	equ	0xFEA
 22010                           fsr0l	equ	0xFE9
 22011                           wreg	equ	0xFE8
 22012                           postdec1	equ	0xFE5
 22013                           fsr1h	equ	0xFE2
 22014                           fsr1l	equ	0xFE1
 22015                           indf2	equ	0xFDF
 22016                           postinc2	equ	0xFDE
 22017                           postdec2	equ	0xFDD
 22018                           fsr2h	equ	0xFDA
 22019                           fsr2l	equ	0xFD9
 22020                           status	equ	0xFD8
 22021                           
 22022 ;; *************** function i2_lcdNibble *****************
 22023 ;; Defined at:
 22024 ;;		line 25 in file "lcd.c"
 22025 ;; Parameters:    Size  Location     Type
 22026 ;;  data            1    wreg     unsigned char 
 22027 ;; Auto vars:     Size  Location     Type
 22028 ;;  data            1    1[COMRAM] unsigned char 
 22029 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 22030 ;; Return value:  Size  Location     Type
 22031 ;;                  1    wreg      void 
 22032 ;; Registers used:
 22033 ;;		wreg, status,2, status,0
 22034 ;; Tracked objects:
 22035 ;;		On entry : 0/0
 22036 ;;		On exit  : 0/0
 22037 ;;		Unchanged: 0/0
 22038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22040 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22043 ;;Total ram usage:        2 bytes
 22044 ;; Hardware stack levels used:    1
 22045 ;; This function calls:
 22046 ;;		Nothing
 22047 ;; This function is called by:
 22048 ;;		i2_lcdInst
 22049 ;;		i2_putch
 22050 ;; This function uses a non-reentrant model
 22051 ;;
 22052                           
 22053                           	psect	text86
 22054  00471C                     __ptext86:
 22055                           	opt stack 0
 22056  00471C                     i2_lcdNibble:
 22057                           	opt stack 19
 22058                           
 22059                           ;incstack = 0
 22060                           ;i2lcdNibble@data stored from wreg
 22061  00471C  6E02               	movwf	i2lcdNibble@data,c
 22062                           
 22063                           ;lcd.c: 27: char temp = data & 0xF0;
 22064  00471E  5002               	movf	i2lcdNibble@data,w,c
 22065  004720  0BF0               	andlw	240
 22066  004722  6E01               	movwf	i2lcdNibble@temp,c
 22067                           
 22068                           ;lcd.c: 28: LATD = LATD & 0x0F;
 22069  004724  508C               	movf	3980,w,c	;volatile
 22070  004726  0B0F               	andlw	15
 22071  004728  6E8C               	movwf	3980,c	;volatile
 22072                           
 22073                           ;lcd.c: 29: LATD = temp | LATD;
 22074  00472A  5001               	movf	i2lcdNibble@temp,w,c
 22075  00472C  108C               	iorwf	3980,w,c	;volatile
 22076  00472E  6E8C               	movwf	3980,c	;volatile
 22077                           
 22078                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 22079  004730  868C               	bsf	3980,3,c	;volatile
 22080                           
 22081                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22082  004732  0E42               	movlw	66
 22083  004734                     i2u955_47:
 22084  004734  2EE8               	decfsz	wreg,f,c
 22085  004736  D7FE               	bra	i2u955_47
 22086  004738  D000               	nop2	
 22087                           
 22088                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 22089  00473A  968C               	bcf	3980,3,c	;volatile
 22090                           
 22091                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22092  00473C  0E42               	movlw	66
 22093  00473E                     i2u956_47:
 22094  00473E  2EE8               	decfsz	wreg,f,c
 22095  004740  D7FE               	bra	i2u956_47
 22096  004742  D000               	nop2	
 22097                           
 22098                           ;lcd.c: 36: data = data << 4;
 22099  004744  3802               	swapf	i2lcdNibble@data,w,c
 22100  004746  0BF0               	andlw	240
 22101  004748  6E02               	movwf	i2lcdNibble@data,c
 22102                           
 22103                           ;lcd.c: 38: temp = data & 0xF0;
 22104  00474A  5002               	movf	i2lcdNibble@data,w,c
 22105  00474C  0BF0               	andlw	240
 22106  00474E  6E01               	movwf	i2lcdNibble@temp,c
 22107                           
 22108                           ;lcd.c: 39: LATD = LATD & 0x0F;
 22109  004750  508C               	movf	3980,w,c	;volatile
 22110  004752  0B0F               	andlw	15
 22111  004754  6E8C               	movwf	3980,c	;volatile
 22112                           
 22113                           ;lcd.c: 40: LATD = temp | LATD;
 22114  004756  5001               	movf	i2lcdNibble@temp,w,c
 22115  004758  108C               	iorwf	3980,w,c	;volatile
 22116  00475A  6E8C               	movwf	3980,c	;volatile
 22117                           
 22118                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 22119  00475C  868C               	bsf	3980,3,c	;volatile
 22120                           
 22121                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22122  00475E  0E42               	movlw	66
 22123  004760                     i2u957_47:
 22124  004760  2EE8               	decfsz	wreg,f,c
 22125  004762  D7FE               	bra	i2u957_47
 22126  004764  D000               	nop2	
 22127                           
 22128                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 22129  004766  968C               	bcf	3980,3,c	;volatile
 22130                           
 22131                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22132  004768  0E42               	movlw	66
 22133  00476A                     i2u958_47:
 22134  00476A  2EE8               	decfsz	wreg,f,c
 22135  00476C  D7FE               	bra	i2u958_47
 22136  00476E  D000               	nop2	
 22137  004770  0012               	return		;funcret
 22138  004772                     __end_ofi2_lcdNibble:
 22139                           	opt stack 0
 22140                           pclatu	equ	0xFFB
 22141                           pclath	equ	0xFFA
 22142                           tblptru	equ	0xFF8
 22143                           tblptrh	equ	0xFF7
 22144                           tblptrl	equ	0xFF6
 22145                           tablat	equ	0xFF5
 22146                           prodh	equ	0xFF4
 22147                           prodl	equ	0xFF3
 22148                           intcon	equ	0xFF2
 22149                           intcon2	equ	0xFF1
 22150                           intcon3	equ	0xFF0
 22151                           indf0	equ	0xFEF
 22152                           postinc0	equ	0xFEE
 22153                           fsr0h	equ	0xFEA
 22154                           fsr0l	equ	0xFE9
 22155                           wreg	equ	0xFE8
 22156                           postdec1	equ	0xFE5
 22157                           fsr1h	equ	0xFE2
 22158                           fsr1l	equ	0xFE1
 22159                           indf2	equ	0xFDF
 22160                           postinc2	equ	0xFDE
 22161                           postdec2	equ	0xFDD
 22162                           fsr2h	equ	0xFDA
 22163                           fsr2l	equ	0xFD9
 22164                           status	equ	0xFD8
 22165                           
 22166 ;; *************** function i2_getRTC *****************
 22167 ;; Defined at:
 22168 ;;		line 44 in file "RTC.c"
 22169 ;; Parameters:    Size  Location     Type
 22170 ;;		None
 22171 ;; Auto vars:     Size  Location     Type
 22172 ;;  getRTC          2    3[COMRAM] int 
 22173 ;; Return value:  Size  Location     Type
 22174 ;;                  1    wreg      void 
 22175 ;; Registers used:
 22176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22177 ;; Tracked objects:
 22178 ;;		On entry : 0/0
 22179 ;;		On exit  : 0/0
 22180 ;;		Unchanged: 0/0
 22181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22185 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22186 ;;Total ram usage:        2 bytes
 22187 ;; Hardware stack levels used:    1
 22188 ;; Hardware stack levels required when called:    2
 22189 ;; This function calls:
 22190 ;;		i2_I2C_Master_Read
 22191 ;;		i2_I2C_Master_Start
 22192 ;;		i2_I2C_Master_Stop
 22193 ;;		i2_I2C_Master_Write
 22194 ;; This function is called by:
 22195 ;;		_printSortTimer
 22196 ;;		i2_printRTC
 22197 ;; This function uses a non-reentrant model
 22198 ;;
 22199                           
 22200                           	psect	text87
 22201  00446E                     __ptext87:
 22202                           	opt stack 0
 22203  00446E                     i2_getRTC:
 22204                           	opt stack 18
 22205                           
 22206                           ;RTC.c: 48: I2C_Master_Start();
 22207                           
 22208                           ;incstack = 0
 22209  00446E  EC95  F027         	call	i2_I2C_Master_Start	;wreg free
 22210                           
 22211                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 22212  004472  0E00               	movlw	0
 22213  004474  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22214  004476  0ED0               	movlw	208
 22215  004478  6E02               	movwf	i2I2C_Master_Write@d,c
 22216  00447A  EC80  F027         	call	i2_I2C_Master_Write	;wreg free
 22217                           
 22218                           ;RTC.c: 50: I2C_Master_Write(0x00);
 22219  00447E  0E00               	movlw	0
 22220  004480  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22221  004482  0E00               	movlw	0
 22222  004484  6E02               	movwf	i2I2C_Master_Write@d,c
 22223  004486  EC80  F027         	call	i2_I2C_Master_Write	;wreg free
 22224                           
 22225                           ;RTC.c: 51: I2C_Master_Stop();
 22226  00448A  EC91  F027         	call	i2_I2C_Master_Stop	;wreg free
 22227                           
 22228                           ;RTC.c: 54: I2C_Master_Start();
 22229  00448E  EC95  F027         	call	i2_I2C_Master_Start	;wreg free
 22230                           
 22231                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 22232  004492  0E00               	movlw	0
 22233  004494  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22234  004496  0ED1               	movlw	209
 22235  004498  6E02               	movwf	i2I2C_Master_Write@d,c
 22236  00449A  EC80  F027         	call	i2_I2C_Master_Write	;wreg free
 22237                           
 22238                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 22239  00449E  0E00               	movlw	0
 22240  0044A0  6E05               	movwf	i2getRTC@i+1,c
 22241  0044A2  0E00               	movlw	0
 22242  0044A4  6E04               	movwf	i2getRTC@i,c
 22243  0044A6                     i2l6033:
 22244  0044A6  BE05               	btfsc	i2getRTC@i+1,7,c
 22245  0044A8  D006               	goto	i2l6037
 22246  0044AA  5005               	movf	i2getRTC@i+1,w,c
 22247  0044AC  E111               	bnz	i2l6043
 22248  0044AE  0E06               	movlw	6
 22249  0044B0  5C04               	subwf	i2getRTC@i,w,c
 22250  0044B2  B0D8               	btfsc	status,0,c
 22251  0044B4  D00D               	goto	i2l6043
 22252  0044B6                     i2l6037:
 22253                           
 22254                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 22255  0044B6  0E24               	movlw	low _time
 22256  0044B8  2404               	addwf	i2getRTC@i,w,c
 22257  0044BA  6ED9               	movwf	fsr2l,c
 22258  0044BC  0E01               	movlw	high _time
 22259  0044BE  2005               	addwfc	i2getRTC@i+1,w,c
 22260  0044C0  6EDA               	movwf	fsr2h,c
 22261  0044C2  0E01               	movlw	1
 22262  0044C4  ECD2  F026         	call	i2_I2C_Master_Read
 22263  0044C8  6EDF               	movwf	indf2,c
 22264  0044CA  4A04               	infsnz	i2getRTC@i,f,c
 22265  0044CC  2A05               	incf	i2getRTC@i+1,f,c
 22266  0044CE  D7EB               	goto	i2l6033
 22267  0044D0                     i2l6043:
 22268                           
 22269                           ;RTC.c: 58: }
 22270                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 22271  0044D0  0E00               	movlw	0
 22272  0044D2  ECD2  F026         	call	i2_I2C_Master_Read
 22273  0044D6  0101               	movlb	1	; () banked
 22274  0044D8  6F2A               	movwf	(_time+6)& (0+255),b
 22275                           
 22276                           ;RTC.c: 60: I2C_Master_Stop();
 22277  0044DA  EC91  F027         	call	i2_I2C_Master_Stop	;wreg free
 22278  0044DE  0012               	return		;funcret
 22279  0044E0                     __end_ofi2_getRTC:
 22280                           	opt stack 0
 22281                           pclatu	equ	0xFFB
 22282                           pclath	equ	0xFFA
 22283                           tblptru	equ	0xFF8
 22284                           tblptrh	equ	0xFF7
 22285                           tblptrl	equ	0xFF6
 22286                           tablat	equ	0xFF5
 22287                           prodh	equ	0xFF4
 22288                           prodl	equ	0xFF3
 22289                           intcon	equ	0xFF2
 22290                           intcon2	equ	0xFF1
 22291                           intcon3	equ	0xFF0
 22292                           indf0	equ	0xFEF
 22293                           postinc0	equ	0xFEE
 22294                           fsr0h	equ	0xFEA
 22295                           fsr0l	equ	0xFE9
 22296                           wreg	equ	0xFE8
 22297                           postdec1	equ	0xFE5
 22298                           fsr1h	equ	0xFE2
 22299                           fsr1l	equ	0xFE1
 22300                           indf2	equ	0xFDF
 22301                           postinc2	equ	0xFDE
 22302                           postdec2	equ	0xFDD
 22303                           fsr2h	equ	0xFDA
 22304                           fsr2l	equ	0xFD9
 22305                           status	equ	0xFD8
 22306                           
 22307 ;; *************** function i2_I2C_Master_Write *****************
 22308 ;; Defined at:
 22309 ;;		line 49 in file "I2C.c"
 22310 ;; Parameters:    Size  Location     Type
 22311 ;;  d               2    1[COMRAM] unsigned int 
 22312 ;; Auto vars:     Size  Location     Type
 22313 ;;		None
 22314 ;; Return value:  Size  Location     Type
 22315 ;;                  1    wreg      void 
 22316 ;; Registers used:
 22317 ;;		wreg, status,2, status,0, cstack
 22318 ;; Tracked objects:
 22319 ;;		On entry : 0/0
 22320 ;;		On exit  : 0/0
 22321 ;;		Unchanged: 0/0
 22322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22323 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22326 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22327 ;;Total ram usage:        2 bytes
 22328 ;; Hardware stack levels used:    1
 22329 ;; Hardware stack levels required when called:    1
 22330 ;; This function calls:
 22331 ;;		i2_I2C_Master_Wait
 22332 ;; This function is called by:
 22333 ;;		i2_getRTC
 22334 ;; This function uses a non-reentrant model
 22335 ;;
 22336                           
 22337                           	psect	text88
 22338  004F00                     __ptext88:
 22339                           	opt stack 0
 22340  004F00                     i2_I2C_Master_Write:
 22341                           	opt stack 18
 22342                           
 22343                           ;I2C.c: 51: I2C_Master_Wait();
 22344                           
 22345                           ;incstack = 0
 22346  004F00  EC56  F027         	call	i2_I2C_Master_Wait	;wreg free
 22347                           
 22348                           ;I2C.c: 52: SSPBUF = d;
 22349  004F04  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 22350  004F08  0012               	return		;funcret
 22351  004F0A                     __end_ofi2_I2C_Master_Write:
 22352                           	opt stack 0
 22353                           pclatu	equ	0xFFB
 22354                           pclath	equ	0xFFA
 22355                           tblptru	equ	0xFF8
 22356                           tblptrh	equ	0xFF7
 22357                           tblptrl	equ	0xFF6
 22358                           tablat	equ	0xFF5
 22359                           prodh	equ	0xFF4
 22360                           prodl	equ	0xFF3
 22361                           intcon	equ	0xFF2
 22362                           intcon2	equ	0xFF1
 22363                           intcon3	equ	0xFF0
 22364                           indf0	equ	0xFEF
 22365                           postinc0	equ	0xFEE
 22366                           fsr0h	equ	0xFEA
 22367                           fsr0l	equ	0xFE9
 22368                           wreg	equ	0xFE8
 22369                           postdec1	equ	0xFE5
 22370                           fsr1h	equ	0xFE2
 22371                           fsr1l	equ	0xFE1
 22372                           indf2	equ	0xFDF
 22373                           postinc2	equ	0xFDE
 22374                           postdec2	equ	0xFDD
 22375                           fsr2h	equ	0xFDA
 22376                           fsr2l	equ	0xFD9
 22377                           status	equ	0xFD8
 22378                           
 22379 ;; *************** function i2_I2C_Master_Stop *****************
 22380 ;; Defined at:
 22381 ;;		line 43 in file "I2C.c"
 22382 ;; Parameters:    Size  Location     Type
 22383 ;;		None
 22384 ;; Auto vars:     Size  Location     Type
 22385 ;;		None
 22386 ;; Return value:  Size  Location     Type
 22387 ;;                  1    wreg      void 
 22388 ;; Registers used:
 22389 ;;		wreg, status,2, status,0, cstack
 22390 ;; Tracked objects:
 22391 ;;		On entry : 0/0
 22392 ;;		On exit  : 0/0
 22393 ;;		Unchanged: 0/0
 22394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22399 ;;Total ram usage:        0 bytes
 22400 ;; Hardware stack levels used:    1
 22401 ;; Hardware stack levels required when called:    1
 22402 ;; This function calls:
 22403 ;;		i2_I2C_Master_Wait
 22404 ;; This function is called by:
 22405 ;;		i2_getRTC
 22406 ;; This function uses a non-reentrant model
 22407 ;;
 22408                           
 22409                           	psect	text89
 22410  004F22                     __ptext89:
 22411                           	opt stack 0
 22412  004F22                     i2_I2C_Master_Stop:
 22413                           	opt stack 18
 22414                           
 22415                           ;I2C.c: 45: I2C_Master_Wait();
 22416                           
 22417                           ;incstack = 0
 22418  004F22  EC56  F027         	call	i2_I2C_Master_Wait	;wreg free
 22419                           
 22420                           ;I2C.c: 46: PEN = 1;
 22421  004F26  84C5               	bsf	4037,2,c	;volatile
 22422  004F28  0012               	return		;funcret
 22423  004F2A                     __end_ofi2_I2C_Master_Stop:
 22424                           	opt stack 0
 22425                           pclatu	equ	0xFFB
 22426                           pclath	equ	0xFFA
 22427                           tblptru	equ	0xFF8
 22428                           tblptrh	equ	0xFF7
 22429                           tblptrl	equ	0xFF6
 22430                           tablat	equ	0xFF5
 22431                           prodh	equ	0xFF4
 22432                           prodl	equ	0xFF3
 22433                           intcon	equ	0xFF2
 22434                           intcon2	equ	0xFF1
 22435                           intcon3	equ	0xFF0
 22436                           indf0	equ	0xFEF
 22437                           postinc0	equ	0xFEE
 22438                           fsr0h	equ	0xFEA
 22439                           fsr0l	equ	0xFE9
 22440                           wreg	equ	0xFE8
 22441                           postdec1	equ	0xFE5
 22442                           fsr1h	equ	0xFE2
 22443                           fsr1l	equ	0xFE1
 22444                           indf2	equ	0xFDF
 22445                           postinc2	equ	0xFDE
 22446                           postdec2	equ	0xFDD
 22447                           fsr2h	equ	0xFDA
 22448                           fsr2l	equ	0xFD9
 22449                           status	equ	0xFD8
 22450                           
 22451 ;; *************** function i2_I2C_Master_Start *****************
 22452 ;; Defined at:
 22453 ;;		line 31 in file "I2C.c"
 22454 ;; Parameters:    Size  Location     Type
 22455 ;;		None
 22456 ;; Auto vars:     Size  Location     Type
 22457 ;;		None
 22458 ;; Return value:  Size  Location     Type
 22459 ;;                  1    wreg      void 
 22460 ;; Registers used:
 22461 ;;		wreg, status,2, status,0, cstack
 22462 ;; Tracked objects:
 22463 ;;		On entry : 0/0
 22464 ;;		On exit  : 0/0
 22465 ;;		Unchanged: 0/0
 22466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22471 ;;Total ram usage:        0 bytes
 22472 ;; Hardware stack levels used:    1
 22473 ;; Hardware stack levels required when called:    1
 22474 ;; This function calls:
 22475 ;;		i2_I2C_Master_Wait
 22476 ;; This function is called by:
 22477 ;;		i2_getRTC
 22478 ;; This function uses a non-reentrant model
 22479 ;;
 22480                           
 22481                           	psect	text90
 22482  004F2A                     __ptext90:
 22483                           	opt stack 0
 22484  004F2A                     i2_I2C_Master_Start:
 22485                           	opt stack 18
 22486                           
 22487                           ;I2C.c: 33: I2C_Master_Wait();
 22488                           
 22489                           ;incstack = 0
 22490  004F2A  EC56  F027         	call	i2_I2C_Master_Wait	;wreg free
 22491                           
 22492                           ;I2C.c: 34: SEN = 1;
 22493  004F2E  80C5               	bsf	4037,0,c	;volatile
 22494  004F30  0012               	return		;funcret
 22495  004F32                     __end_ofi2_I2C_Master_Start:
 22496                           	opt stack 0
 22497                           pclatu	equ	0xFFB
 22498                           pclath	equ	0xFFA
 22499                           tblptru	equ	0xFF8
 22500                           tblptrh	equ	0xFF7
 22501                           tblptrl	equ	0xFF6
 22502                           tablat	equ	0xFF5
 22503                           prodh	equ	0xFF4
 22504                           prodl	equ	0xFF3
 22505                           intcon	equ	0xFF2
 22506                           intcon2	equ	0xFF1
 22507                           intcon3	equ	0xFF0
 22508                           indf0	equ	0xFEF
 22509                           postinc0	equ	0xFEE
 22510                           fsr0h	equ	0xFEA
 22511                           fsr0l	equ	0xFE9
 22512                           wreg	equ	0xFE8
 22513                           postdec1	equ	0xFE5
 22514                           fsr1h	equ	0xFE2
 22515                           fsr1l	equ	0xFE1
 22516                           indf2	equ	0xFDF
 22517                           postinc2	equ	0xFDE
 22518                           postdec2	equ	0xFDD
 22519                           fsr2h	equ	0xFDA
 22520                           fsr2l	equ	0xFD9
 22521                           status	equ	0xFD8
 22522                           
 22523 ;; *************** function i2_I2C_Master_Read *****************
 22524 ;; Defined at:
 22525 ;;		line 55 in file "I2C.c"
 22526 ;; Parameters:    Size  Location     Type
 22527 ;;  a               1    wreg     unsigned char 
 22528 ;; Auto vars:     Size  Location     Type
 22529 ;;  a               1    1[COMRAM] unsigned char 
 22530 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 22531 ;; Return value:  Size  Location     Type
 22532 ;;                  1    wreg      unsigned char 
 22533 ;; Registers used:
 22534 ;;		wreg, status,2, status,0, cstack
 22535 ;; Tracked objects:
 22536 ;;		On entry : 0/0
 22537 ;;		On exit  : 0/0
 22538 ;;		Unchanged: 0/0
 22539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22543 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22544 ;;Total ram usage:        2 bytes
 22545 ;; Hardware stack levels used:    1
 22546 ;; Hardware stack levels required when called:    1
 22547 ;; This function calls:
 22548 ;;		i2_I2C_Master_Wait
 22549 ;; This function is called by:
 22550 ;;		i2_getRTC
 22551 ;; This function uses a non-reentrant model
 22552 ;;
 22553                           
 22554                           	psect	text91
 22555  004DA4                     __ptext91:
 22556                           	opt stack 0
 22557  004DA4                     i2_I2C_Master_Read:
 22558                           	opt stack 18
 22559                           
 22560                           ;incstack = 0
 22561                           ;i2I2C_Master_Read@a stored from wreg
 22562  004DA4  6E02               	movwf	i2I2C_Master_Read@a,c
 22563                           
 22564                           ;I2C.c: 57: unsigned char temp;
 22565                           ;I2C.c: 58: I2C_Master_Wait();
 22566  004DA6  EC56  F027         	call	i2_I2C_Master_Wait	;wreg free
 22567                           
 22568                           ;I2C.c: 59: RCEN = 1;
 22569  004DAA  86C5               	bsf	4037,3,c	;volatile
 22570                           
 22571                           ;I2C.c: 60: I2C_Master_Wait();
 22572  004DAC  EC56  F027         	call	i2_I2C_Master_Wait	;wreg free
 22573                           
 22574                           ;I2C.c: 61: temp = SSPBUF;
 22575  004DB0  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 22576                           
 22577                           ;I2C.c: 62: I2C_Master_Wait();
 22578  004DB4  EC56  F027         	call	i2_I2C_Master_Wait	;wreg free
 22579                           
 22580                           ;I2C.c: 63: ACKDT = (a)?0:1;
 22581  004DB8  5002               	movf	i2I2C_Master_Read@a,w,c
 22582  004DBA  A4D8               	btfss	status,2,c
 22583  004DBC  D002               	goto	i2u420_40
 22584  004DBE  8AC5               	bsf	4037,5,c	;volatile
 22585  004DC0  D001               	goto	i2l5741
 22586  004DC2                     i2u420_40:
 22587  004DC2  9AC5               	bcf	4037,5,c	;volatile
 22588  004DC4                     i2l5741:
 22589                           
 22590                           ;I2C.c: 64: ACKEN = 1;
 22591  004DC4  88C5               	bsf	4037,4,c	;volatile
 22592                           
 22593                           ;I2C.c: 65: return temp;
 22594  004DC6  5003               	movf	i2I2C_Master_Read@temp,w,c
 22595  004DC8  0012               	return	
 22596  004DCA                     __end_ofi2_I2C_Master_Read:
 22597                           	opt stack 0
 22598                           pclatu	equ	0xFFB
 22599                           pclath	equ	0xFFA
 22600                           tblptru	equ	0xFF8
 22601                           tblptrh	equ	0xFF7
 22602                           tblptrl	equ	0xFF6
 22603                           tablat	equ	0xFF5
 22604                           prodh	equ	0xFF4
 22605                           prodl	equ	0xFF3
 22606                           intcon	equ	0xFF2
 22607                           intcon2	equ	0xFF1
 22608                           intcon3	equ	0xFF0
 22609                           indf0	equ	0xFEF
 22610                           postinc0	equ	0xFEE
 22611                           fsr0h	equ	0xFEA
 22612                           fsr0l	equ	0xFE9
 22613                           wreg	equ	0xFE8
 22614                           postdec1	equ	0xFE5
 22615                           fsr1h	equ	0xFE2
 22616                           fsr1l	equ	0xFE1
 22617                           indf2	equ	0xFDF
 22618                           postinc2	equ	0xFDE
 22619                           postdec2	equ	0xFDD
 22620                           fsr2h	equ	0xFDA
 22621                           fsr2l	equ	0xFD9
 22622                           status	equ	0xFD8
 22623                           
 22624 ;; *************** function i2_I2C_Master_Wait *****************
 22625 ;; Defined at:
 22626 ;;		line 26 in file "I2C.c"
 22627 ;; Parameters:    Size  Location     Type
 22628 ;;		None
 22629 ;; Auto vars:     Size  Location     Type
 22630 ;;		None
 22631 ;; Return value:  Size  Location     Type
 22632 ;;                  1    wreg      void 
 22633 ;; Registers used:
 22634 ;;		wreg, status,2, status,0
 22635 ;; Tracked objects:
 22636 ;;		On entry : 0/0
 22637 ;;		On exit  : 0/0
 22638 ;;		Unchanged: 0/0
 22639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22643 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22644 ;;Total ram usage:        1 bytes
 22645 ;; Hardware stack levels used:    1
 22646 ;; This function calls:
 22647 ;;		Nothing
 22648 ;; This function is called by:
 22649 ;;		i2_I2C_Master_Start
 22650 ;;		i2_I2C_Master_Stop
 22651 ;;		i2_I2C_Master_Write
 22652 ;;		i2_I2C_Master_Read
 22653 ;; This function uses a non-reentrant model
 22654 ;;
 22655                           
 22656                           	psect	text92
 22657  004EAC                     __ptext92:
 22658                           	opt stack 0
 22659  004EAC                     i2_I2C_Master_Wait:
 22660                           	opt stack 18
 22661  004EAC                     i2l66:
 22662  004EAC  B4C7               	btfsc	4039,2,c	;volatile
 22663  004EAE  D7FE               	goto	i2l66
 22664  004EB0  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 22665  004EB4  0E1F               	movlw	31
 22666  004EB6  1601               	andwf	??i2_I2C_Master_Wait,f,c
 22667  004EB8  B4D8               	btfsc	status,2,c
 22668  004EBA  0012               	return	
 22669  004EBC  D7F7               	goto	i2l66
 22670  004EBE                     __end_ofi2_I2C_Master_Wait:
 22671                           	opt stack 0
 22672                           pclatu	equ	0xFFB
 22673                           pclath	equ	0xFFA
 22674                           tblptru	equ	0xFF8
 22675                           tblptrh	equ	0xFF7
 22676                           tblptrl	equ	0xFF6
 22677                           tablat	equ	0xFF5
 22678                           prodh	equ	0xFF4
 22679                           prodl	equ	0xFF3
 22680                           intcon	equ	0xFF2
 22681                           intcon2	equ	0xFF1
 22682                           intcon3	equ	0xFF0
 22683                           indf0	equ	0xFEF
 22684                           postinc0	equ	0xFEE
 22685                           fsr0h	equ	0xFEA
 22686                           fsr0l	equ	0xFE9
 22687                           wreg	equ	0xFE8
 22688                           postdec1	equ	0xFE5
 22689                           fsr1h	equ	0xFE2
 22690                           fsr1l	equ	0xFE1
 22691                           indf2	equ	0xFDF
 22692                           postinc2	equ	0xFDE
 22693                           postdec2	equ	0xFDD
 22694                           fsr2h	equ	0xFDA
 22695                           fsr2l	equ	0xFD9
 22696                           status	equ	0xFD8
 22697                           pclatu	equ	0xFFB
 22698                           pclath	equ	0xFFA
 22699                           tblptru	equ	0xFF8
 22700                           tblptrh	equ	0xFF7
 22701                           tblptrl	equ	0xFF6
 22702                           tablat	equ	0xFF5
 22703                           prodh	equ	0xFF4
 22704                           prodl	equ	0xFF3
 22705                           intcon	equ	0xFF2
 22706                           intcon2	equ	0xFF1
 22707                           intcon3	equ	0xFF0
 22708                           indf0	equ	0xFEF
 22709                           postinc0	equ	0xFEE
 22710                           fsr0h	equ	0xFEA
 22711                           fsr0l	equ	0xFE9
 22712                           wreg	equ	0xFE8
 22713                           postdec1	equ	0xFE5
 22714                           fsr1h	equ	0xFE2
 22715                           fsr1l	equ	0xFE1
 22716                           indf2	equ	0xFDF
 22717                           postinc2	equ	0xFDE
 22718                           postdec2	equ	0xFDD
 22719                           fsr2h	equ	0xFDA
 22720                           fsr2l	equ	0xFD9
 22721                           status	equ	0xFD8
 22722                           
 22723                           	psect	rparam
 22724  0000                     pclatu	equ	0xFFB
 22725                           pclath	equ	0xFFA
 22726                           tblptru	equ	0xFF8
 22727                           tblptrh	equ	0xFF7
 22728                           tblptrl	equ	0xFF6
 22729                           tablat	equ	0xFF5
 22730                           prodh	equ	0xFF4
 22731                           prodl	equ	0xFF3
 22732                           intcon	equ	0xFF2
 22733                           intcon2	equ	0xFF1
 22734                           intcon3	equ	0xFF0
 22735                           indf0	equ	0xFEF
 22736                           postinc0	equ	0xFEE
 22737                           fsr0h	equ	0xFEA
 22738                           fsr0l	equ	0xFE9
 22739                           wreg	equ	0xFE8
 22740                           postdec1	equ	0xFE5
 22741                           fsr1h	equ	0xFE2
 22742                           fsr1l	equ	0xFE1
 22743                           indf2	equ	0xFDF
 22744                           postinc2	equ	0xFDE
 22745                           postdec2	equ	0xFDD
 22746                           fsr2h	equ	0xFDA
 22747                           fsr2l	equ	0xFD9
 22748                           status	equ	0xFD8
 22749                           
 22750                           	psect	temp
 22751  00007E                     btemp:
 22752                           	opt stack 0
 22753  00007E                     	ds	1
 22754  0000                     int$flags	set	btemp
 22755                           pclatu	equ	0xFFB
 22756                           pclath	equ	0xFFA
 22757                           tblptru	equ	0xFF8
 22758                           tblptrh	equ	0xFF7
 22759                           tblptrl	equ	0xFF6
 22760                           tablat	equ	0xFF5
 22761                           prodh	equ	0xFF4
 22762                           prodl	equ	0xFF3
 22763                           intcon	equ	0xFF2
 22764                           intcon2	equ	0xFF1
 22765                           intcon3	equ	0xFF0
 22766                           indf0	equ	0xFEF
 22767                           postinc0	equ	0xFEE
 22768                           fsr0h	equ	0xFEA
 22769                           fsr0l	equ	0xFE9
 22770                           wreg	equ	0xFE8
 22771                           postdec1	equ	0xFE5
 22772                           fsr1h	equ	0xFE2
 22773                           fsr1l	equ	0xFE1
 22774                           indf2	equ	0xFDF
 22775                           postinc2	equ	0xFDE
 22776                           postdec2	equ	0xFDD
 22777                           fsr2h	equ	0xFDA
 22778                           fsr2l	equ	0xFD9
 22779                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      61
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  201660
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23132
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             15    15      0   17614
                                             49 BANK0     15    15      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   97473
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15467
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19605
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   75643
                                             72 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    4788
                                             41 COMRAM    31    31      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3D       7       23.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      34        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 06:23:40 2017

                                    _i 0131                     i2_I2C_Master_Start 4F2A  
                   i2_I2C_Master_Write 4F00                                     l66 4E98  
                                   _ID 32F2                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l606 238C                                    l491 3D88  
                                  l740 1D66                                    l750 1E2E  
                                  l761 1F3E                                    l753 1E68  
                                  l835 43C2                                    l774 33FA  
                                  l758 1F04                                    l775 3414  
                                  l778 34AC                                    l971 3B56  
                                  l984 4E7A                                    l993 38EA  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00EC                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 363C                    _log_count_can_w_lab 0073  
      __end_of_change_state_to_menu_11 4B32        __end_of_change_state_to_menu_12 49A2  
      __end_of_change_state_to_menu_22 496A        __end_of_change_state_to_menu_23 4B02  
         _f_can_coming_to_distribution 0069                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 4C22        __end_of_change_state_to_logs_12 4BF2  
      __end_of_change_state_to_logs_22 4BC2        __end_of_change_state_to_logs_23 4CAC  
      __end_of_change_state_to_logs_33 4B92        __end_of_change_state_to_logs_34 4B62  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1112 3C7A                                   l1121 203A  
                                 l1211 420A                                   l1220 4236  
                                 l1221 423A                                   l1109 3C76  
                                 l1118 2036                                   l1223 4278  
                                 l1215 4226                                   l1151 0126  
                                 l1232 46AA                                   l1144 007C  
                                 l1313 35DA                                   l1217 422A  
                                 l1314 35F4                                   l1218 422E  
                                 l1154 018C                                   l1219 4232  
                                 l1155 01DA                                   l1147 0080  
                                 l1308 358E                                   l1260 2A84  
                                 l1156 0240                                   l1253 2AA4  
                                 l1181 05E8                                   l1157 028E  
                                 l1085 3A7E                                   l1238 46BA  
                                 l1262 2A9E                                   l1256 2A40  
                                 l1088 3A9E                                   l1193 0782  
                                 l1291 41DA                                   l1284 41CA  
                                 l1349 13B6                                   l1198 0858  
                                 l1806 45A0                                   l1743 3F16  
                                 l6011 3EAA                                   l6021 3F04  
                                 l6013 3EB0                                   l6009 3E9A  
                                 l7003 2CE8                                   l1796 437C  
                                 l7021 2DCE                                   l7005 2D02  
                                 l7013 2D50                                   l7111 208A  
                                 l6231 240E                                   l6223 2396  
                                 l7023 2DE8                                   l7031 2E4A  
                                 l7007 2D1C                                   l7015 2D7E  
                                 l6241 24A4                                   l6233 242C  
                                 l6225 23B4                                   l6217 230A  
                                 l7025 2E02                                   l7009 2D36  
                                 l6243 24C2                                   l6235 244A  
                                 l6227 23D2                                   l6251 255C  
                                 l7019 2DB4                                   l5701 436E  
                                 l7141 2192                                   l6245 24E0  
                                 l6237 2468                                   l6229 23F0  
                                 l7029 2E1C                                   l5711 4568  
                                 l5631 4CEC                                   l7223 00EA  
                                 l6239 2486                                   l8111 0B3A  
                                 l8103 0B18                                   l5713 456E  
                                 l5633 4CFE                                   l7401 04C8  
                                 l7313 0314                                   l7233 0112  
                                 l7225 00F0                                   l7129 2142  
                                 l6249 24FE                                   l8041 09F2  
                                 l8033 09D0                                   l6433 3BBE  
                                 l6441 3BE0                                   l7323 033C  
                                 l7171 2286                                   l7147 21D4  
                                 l8211 0EF6                                   l8203 0ED4  
                                 l8131 0BC8                                   l8107 0B22  
                                 l8027 09B8                                   l5717 4592  
                                 l5709 455C                                   l5901 140E  
                                 l7501 06D6                                   l7421 053C  
                                 l7413 051A                                   l7405 04E0  
                                 l7317 032C                                   l7309 030A  
                                 l7229 00FA                                   l8301 108A  
                                 l8221 0F12                                   l8141 0C5E  
                                 l8133 0BE6                                   l8061 0A62  
                                 l8045 0A04                                   l8037 09DA  
                                 l8029 09BE                                   l6445 3BF6  
                                 l6437 3BC8                                   l5831 11A4  
                                 l7511 06FE                                   l7503 06DC  
                                 l7431 0564                                   l7423 0542  
                                 l7343 03B0                                   l7335 038E  
                                 l7327 0354                                   l7319 0332  
                                 l7183 22CE                                   l7167 2250  
                                 l7159 2220                                   l5655 4C76  
                                 l8207 0EDE                                   l8151 0CF4  
                                 l8143 0C7C                                   l8135 0C04  
                                 l8127 0B8C                                   l6455 4D34  
                                 l6391 3F4C                                   _ADIE 007CEE  
                                 l5673 4D24                                   l5913 144A  
                                 l5841 11E2                                   l5825 117E  
                                 l7417 0524                                   l7361 0412  
                                 l7353 03D8                                   l7345 03B6  
                                 l8305 10A2                                   l8225 0F2A  
                                 l8217 0F08                                   l8161 0DB8  
                                 l8145 0C9A                                   l8137 0C22  
                                 l8129 0BAA                                   l8065 0A6C  
                                 l6449 3C00                                   l5691 4338  
                                 l5931 14C8                                   l5923 14A4  
                                 l5835 11AE                                   l7603 08AA  
                                 l7523 0742                                   l7507 06E6  
                                 l7443 05A8                                   l7427 054C  
                                 l7371 043A                                   l7339 0398  
                                 l7179 2298                                   l8331 1122  
                                 l8323 1100                                   l8251 0FB2  
                                 l8243 0F90                                   l8147 0CB8  
                                 l8139 0C40                                   l8155 0D12  
                                 l8059 0A5C                                   l8075 0A92  
                                 l6459 4D4A                                   l6483 4420  
                                 l6387 3F36                                   l6803 1D24  
                                 l5693 433E                                   l5925 14AE  
                                 l5861 12A2                                   l5829 1192  
                                 l7533 076A                                   l7453 05D0  
                                 l7365 041C                                   l7349 03C0  
                                 l8341 113E                                   l8261 0FCE  
                                 l8165 0DC2                                   l8149 0CD6  
                                 l8157 0D76                                   l8093 0AEE  
                                 l8069 0A84                                   l6397 3FC2  
                                 l5943 150A                                   l5919 146C  
                                 l5871 131A                                   l7711 2A2A  
                                 l7607 08C2                                   l7527 075A  
                                 l7519 0738                                   l7471 063A  
                                 l7447 05C0                                   l7439 059E  
                                 l7391 04A0                                   l7375 0444  
                                 l8327 110A                                   l8247 0F9A  
                                 l8183 0E0E                                   l8175 0DEC  
                                 l6591 40CC                                   l6495 444A  
                                 l6479 440A                                   l6831 1DC6  
                                 l6815 1D8A                                   l5689 432C  
                                 l5953 157C                                   l5937 14E4  
                                 l5873 1332                                   l5857 1290  
                                 l5849 125E                                   l7721 2A5A  
                                 l7561 07F4                                   l7553 07D2  
                                 l7529 0760                                   l7481 0662  
                                 l7449 05C6                                   l7369 0434  
                                 l5961 49B8                                   l8345 1156  
                                 l8337 1134                                   l8265 0FE6  
                                 l8257 0FC4                                   l8169 0DDA  
                                 l8097 0B06                                   l8089 0AE4  
                                 l5939 14F0                                   l5947 151E  
                                 l5867 1308                                   l5859 129C  
                                 l5883 137C                                   l5955 1588  
                                 l7571 081C                                   l7563 07FA  
                                 l7475 0652                                   l7467 0630  
                                 l7395 04B8                                   l7387 0496  
                                 l7379 045C                                   l5971 4156  
                                 l8291 106E                                   l8283 104C  
                                 l8179 0DF6                                   l6587 40B6  
                                 l6499 4462                                   l6907 1F58  
                                 l5949 1524                                   l5877 135E  
                                 l5869 1314                                   l7901 3636  
                                 l7725 2A6E                                   l7661 2892  
                                 l7557 07DC                                   l7493 06B4  
                                 l7485 067A                                   l7477 0658  
                                 l7397 04BE                                   l8349 1162  
                                 l6597 40F8                                   l8605 380C  
                                 l6925 1FCE                                   l5895 13EE  
                                 l5879 1376                                   l7567 0804  
                                 l7911 3DCA                                   l5967 4140  
                                 l5959 49AC                                   l8287 1056  
                                 l8631 38A4                                   l8607 3820  
                                 l6943 3374                                   l6847 1E18  
                                 l7681 2950                                   l7649 4202  
                                 l7593 0882                                   l7577 0842  
                                 l7497 06BE                                   l5977 4176  
                                 l8297 1080                                   l6857 1E48  
                                 l5899 1408                                   l5995 43AE  
                                 l7739 423E                                   l7587 0872  
                                 l8643 3A20                                   l7923 3DFE  
                                 l6955 33AA                                   l6947 3382  
                                 l6859 1E52                                   l5997 43D8  
                                 l7597 089A                                   l7589 0878  
                                 l8661 3AA4                                   l7925 3E0A  
                                 l7917 3DE0                                   l6885 1EEE  
                                 l6869 1E82                                   l7855 352C  
                                 l7679 294A                                   l7599 08A0  
                                 l8671 3AC2                                   l8663 3AAA  
                                 l7943 3E62                                   l7935 3E40  
                                 l7927 3E10                                   l6959 33BA  
                                 l6895 1F1E                                   l8673 3AC8  
                                 l8665 3AB0                                   l6897 1F28  
                                 l8753 3D5C                                   l7883 35BA  
                                 l7875 3590                                   l7859 355C  
                                 l7699 2A08                                   l8675 3ACE  
                                 l8667 3AB6                                   l8683 3AE0  
                                 l7939 3E4E                                   l7971 4048  
                                 l7963 4012                                   l7955 3FEE  
                                 l8755 3D62                                   l8771 3D8A  
                                 l8747 3D38                                   l7885 35C4  
                                 l7877 35A0                                   l8677 3AD4  
                                 l8669 3ABC                                   l7965 401E  
                                 l6989 346A                                   l6997 34AE  
                                 l8765 3D7E                                   l8757 3D68  
                                 l8749 3D4E                                   l7895 35F6  
                                 l8679 3ADA                                   l7967 4024  
                                 l7975 4056                                   l7959 3FFE  
                                 l8767 3D84                                   l7897 3606  
                                 l7979 406A                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4100 4C74  
                                 u5010 238C                                   u4300 4854  
                                 u4310 4856                                   u4320 48A0  
                                 u4321 489C                                   u4330 48A2  
                                 u4420 1354                                   u4427 134A  
                                 _PEIE 007F96                                   u4380 12DC  
                                 u5360 1D30                                   u4387 12D2  
                                 u6500 2992                                   u5380 1D66  
                                 _RCEN 007E2B                                   u6510 2994  
                                 u5800 2274                                   u5378 1D34  
                                 u8107 1D7A                                   u6700 3586  
                                 u5900 0126                                   u5580 3340  
                                 u8117 1DE6                                   u6630 34EE  
                                 u6470 28D4                                   u5830 22BC  
                                 u5670 3476                                   u9007 052C  
                                 u8207 1F42                                   u8127 1E32  
                                 u6800 3624                                   u6640 354A  
                                 u6480 28D6                                   u5920 01DA  
                                 u5808 2278                                   u5760 20CC  
                                 u9017 0554                                   u8217 1F4C  
                                 u8137 1E3A                                   i2l66 4EAC  
                                 u5770 20CE                                   u5690 34AC  
                                 u9107 0794                                   u9027 05B0  
                                 u8307 33FE                                   u8227 1F66  
                                 u8147 1E6C                                   u5940 028E  
                                 u5588 3344                                   u6741 35B0  
                                 u9117 07E4                                   u9037 05D8  
                                 u8317 3408                                   u8237 1F92  
                                 u8157 1E76                                   u6750 35B2  
                                 u6638 34F2                                   u5838 22C0  
                                 u9207 286E                                   u9127 080C  
                                 u9047 0642                                   u8407 48B2  
                                 u8327 342E                                   u8247 1FBE  
                                 u8167 1E90                                   u6808 3628  
                                 u6648 354E                                   u5688 347A  
                                 u9217 28EA                                   u9137 085C  
                                 u9057 066A                                   u8417 48E6  
                                 u8337 4D40                                   u8257 4A2C  
                                 u8177 1EBC                                   u8097 1CB4  
                                 u6691 3584                                   u9307 4674  
                                 u9227 293E                                   u9147 0866  
                                 u9067 06C6                                   u8507 0DCA  
                                 u8427 08E2                                   u4995 45DA  
                                 u8347 2DA4                                   u8267 4428  
                                 u8187 1F08                                   u9317 15B6  
                                 u9237 29A8                                   u9157 088A  
                                 u9077 06EE                                   u8517 0DFE  
                                 u8437 09E2                                   u8357 2E58  
                                 u8277 3308                                   u8197 1F10  
                                 u9407 17FE                                   u9327 1602  
                                 u9247 29FC                                   u9167 08B2  
                                 u9087 074A                                   u8607 1092  
                                 u8527 0E28                                   u8447 0A1E  
                                 u8367 2E8A                                   u8287 3326  
                                 u9417 1832                                   u9337 164E  
                                 u9257 2A44                                   u9177 4194  
                                 u9097 0772                                   u8617 10BC  
                                 u8537 0EE6                                   u8457 0A74  
                                 u8377 3B74                                   u8297 33CA  
                                 u7850 38EA                                   u9507 4500  
                                 u9427 1864                                   u9347 1682  
                                 u9267 2A4C                                   u9187 41E4  
                                 u8707 20E2                                   u8627 1112  
                                 u8547 0F1A                                   u8467 0AA0  
                                 u8387 3BD0                                   u9517 450A  
                                 u9437 18B0                                   u9357 16B4  
                                 u9277 2A88                                   u9197 41F8  
                                 u8717 2136                                   u8637 1146  
                                 u8557 0F44                                   u8477 0AF6  
                                 u8397 3C08                                   u9527 4536  
                                 u9447 18E4                                   u9367 1700  
                                 u9287 2A92                                   u8807 3C8C  
                                 u8727 2156                                   u8647 3A2E  
                                 u8567 0FA2                                   u8487 0B2A  
                                 u9537 4540                                   u9457 1916  
                                 u9377 1734                                   u9297 4CF4  
                                 u8817 002C                                   u8737 2184  
                                 u8657 3A72                                   u8577 0FD6  
                                 u8497 0B54                                   u9467 4704  
                                 u9387 1766                                   u8907 026E  
                                 u8827 0070                                   u8747 21C8  
                                 u8667 1FE6                                   u8587 1000  
                                 u9477 34C6                                   u9397 17B2  
                                 u8917 029E                                   u8837 0092  
                                 u8757 21E6                                   u8677 202A  
                                 u8597 105E                                   u9487 35DE  
                                 u8927 031C                                   u8847 0102  
                                 u8767 2214                                   u8687 204C  
                                 u9497 35E8                                   u8937 0344  
                                 u8857 0136                                   u8777 222E  
                                 u8697 207A                                   u8947 03A0  
                                 u8867 019C                                   u8787 3C26  
                                 u8957 03C8                                   u8877 01BA  
                                 u8797 3C6A                                   u8967 0424  
                                 u8887 01EA                                   u8977 044C  
                                 u8897 0250                                   u8987 04A8  
                                 u8997 04D0                                   _RSEN 007E29  
                          _stopSignals 4E50                                   _Test 3A20  
                                 _back 0059                                   _main 3CEE  
                                 _down 0061                                   _keys FAEF  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 4DEE                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0071                        __end_ofi2_putch 4EEA  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2AA8  
                          i2_lcdNibble 471C                        __end_of_Loading 1FD8  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 3C18                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3E6C                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB0A  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 4074  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB0A                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB22  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_68 FC92  
                                STR_92 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC81  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 3F28                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 4386  
                      __end_of___lwmod 45AA                                  i2l257 285C  
                                i2l606 2B36                                  i2l902 3718  
                                i2l906 3764                                  i2l908 3784  
                      ___awdiv@counter 008A                                  i2l984 4E90  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 15A8                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4EDE                        __end_of_handler 37C0  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4D04  
                      __end_of_initLCD 48F0                         __CFG_EBTRB$OFF 000000  
                                _debug 005F                             i2isdigit@c 0003  
                                _getIR 43FC                        __end_of_loadRTC 4100  
                      __end_of_readMAG 48AA                        __end_of_dpowers FB0A  
                                _first 006D                                  _enter 0063  
                      __end_of_isdigit 4D2E                                  _input 007D  
                                _putch 4EBE                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4DA4  
                     __end_ofi2_getRTC 44E0                    _log_count_pop_w_tab 00F2  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1C9A  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4A72                            Loading@addr 00B3  
                     _count_can_no_lab 012B                   __size_of_EEPROM_read 0018  
                      __initialization 47C4                           __end_of_Test 3B34  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3DAE  
                         __end_of_keys FB00                           __end_of_sort 4E10  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                       PusherTest@i_1710 00B3  
                   __size_ofi2_isdigit 001E                            _BlockerTest 34B8  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C0                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_104 FBE8                                 STR_120 FB5B  
                               STR_112 FB49                                 STR_121 FB49  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FE5A  
                               STR_122 FB7F                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB6D                                 STR_116 FE5A  
                               STR_124 FB7F                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB7F                                 STR_109 FE69  
                               STR_126 FFB6                                 STR_118 FC1B  
                               _ADRESL 000FC3                                 STR_119 FC4E  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4AA2  
            i2_change_state_to_menu_22 4A72                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1349 1B06                                 i2l1806 4928  
                               i2l6103 1A6E                                 i2l6033 44A6  
                               i2l6113 1ABA                                 i2l6105 1A78  
                               i2l6043 44D0                                 i2l6131 1B34  
                               i2l6115 1ACC                                 i2l6107 1A7E  
                               i2l1796 47BA                                 i2l6037 44B6  
                               i2l6109 1A90                                 i2l6061 1936  
                               i2l6135 1B4C                                 i2l6119 1AD0  
                               i2l6071 195A                                 i2l6161 1BC8  
                               i2l6137 1B50                                 i2l6065 1946  
                               i2l6155 1B9C                                 i2l6067 1954  
                               i2l6173 1BF4                                 i2l6149 1B82  
                               i2l6093 1A16                                 i2l6085 19EE  
                               i2l6077 198C                                 i2l6175 1BFC  
                               i2l6183 1C22                                 i2l6167 1BDE  
                               i2l6159 1BC0                                 i2l6095 1A20  
                               i2l6191 1C7E                                 i2l6185 1C28  
                               i2l6097 1A24                                 i2l5803 491E  
                               i2l6179 1C10                                 i2l6371 39D4  
                               i2l6195 4A4A                                 i2l5741 4DC4  
                               i2l6189 1C76                                 i2l6197 4A52  
                               i2l6367 39C4                                 i2l6703 3204  
                               i2l6551 2B82                                 i2l6713 322A  
                               i2l6641 312A                                 i2l6561 2BF0  
                               i2l6553 2B98                                 i2l6545 2B40  
                               i2l8401 2648                                 i2l6379 3A08  
                               i2l6731 3264                                 i2l6723 324C  
                               i2l6707 3220                                 i2l6651 3154  
                               i2l6563 2C06                                 i2l6555 2BAE  
                               i2l6547 2B56                                 i2l6571 2C48  
                               i2l6539 2AD4                                 i2l5765 4E48  
                               i2l6741 3284                                 i2l6717 323E  
                               i2l6653 3158                                 i2l6565 2C1C  
                               i2l6557 2BC4                                 i2l6549 2B6C  
                               i2l6573 2CA2                                 i2l8501 27CE  
                               i2l8421 268E                                 i2l8413 2672  
                               i2l8405 2656                                 i2l5775 4788  
                               i2l6719 3242                                 i2l6671 318E  
                               i2l6663 3176                                 i2l6567 2C32  
                               i2l6559 2BDA                                 i2l8511 27F2  
                               i2l5777 4790                                 i2l6753 32BA  
                               i2l6745 3296                                 i2l6737 3272  
                               i2l6673 3194                                 i2l6665 317C  
                               i2l6649 3144                                 i2l8505 27E4  
                               i2l8441 26E4                                 i2l8433 26C0  
                               i2l8425 26A4                                 i2l8417 2680  
                               i2l8409 2664                                 i2l5787 47B0  
                               i2l5779 4794                                 i2l5795 48FE  
                               i2l9171 31B2                                 i2l6667 3182  
                               i2l6659 3162                                 i2l9163 2810  
                               i2l8363 25D0                                 i2l5797 4906  
                               i2l6749 32A8                                 i2l9173 31CE  
                               i2l6669 3188                                 i2l6677 319A  
                               i2l9165 2832                                 i2l8461 2732  
                               i2l8453 270E                                 i2l8445 26F2  
                               i2l8437 26CE                                 i2l8429 26B2  
                               i2l8381 260E                                 i2l8373 25F2  
                               i2l8365 25D6                                 i2l5799 490A  
                               i2l8703 2F6C                                 i2l6759 32C4  
                               i2l9167 284E                                 i2l8721 306E  
                               i2l6697 31F6                                 i2l6689 31DE  
                               i2l8481 2780                                 i2l8473 2764  
                               i2l8465 2740                                 i2l8457 2724  
                               i2l8449 2700                                 i2l8393 262A  
                               i2l8377 2600                                 i2l8369 25E4  
                               i2l8715 3034                                 i2l8493 27B2  
                               i2l8485 278E                                 i2l8477 2772  
                               i2l8469 274E                                 i2l8397 2638  
                               i2l8389 261C                                 i2l8719 3068  
                               i2l8831 3738                                 i2l8807 36EC  
                               i2l8497 27C0                                 i2l8489 27A4  
                               i2l8693 2F02                                 i2l8853 3782  
                               i2l8829 3736                                 i2l8697 2F12  
                               i2l8785 36B6                                 i2l8793 36D0  
                               i2l8787 36BA                _f_most_recent_sort_time 006B  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 4D56  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 4DEE                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2EF6  
                               ___wmul 49D8                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4A0E  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 4100                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 4E32  
                               _initUI 4C22                                 _readIR 4812  
                               _logRun 37C0                                 getIR@i 0087  
                               clear_0 47EA                                 clear_1 47F6  
                               clear_2 4802                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 4666  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1170                              ??_handler 0049  
              __size_of_initGlobalVars 0080                           ?_retrieveLog 0007  
                               _strcpy 49A2                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4D7E  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 4D56                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 47C4  
                     __end_of_printRTC 25A0                           __mediumconst FAEE  
                    __end_ofi2___lwmod 4932                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F0                  __end_of_algorithmTest 3CEE  
                    __end_ofi2_lcdInst 4EF6                             _PusherTest 2860  
                    __end_ofi2_isdigit 4E50                             __accesstop 0080  
              __end_of__initialization 4808                          ?_inputHandler 002A  
                _most_recent_sort_time 0133                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 4E82                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4F34  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4F0A                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 446E                            i2printRTC@i 0041  
                        _initSortTimer 3F28            __end_of_updateServoPosition 43FC  
                        __end_of_putch 4ECE                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 34B8  
                           __end_of_UI 1170                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 4CD8          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4CAC                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 005B  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 3B34  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3228 0135                      __end_of_SpeedTest 420A  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 428E                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2331 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00E2  
                              i2_putch 4EDE                              ?_initTime 0080  
                      _f_loadingNewCan 00EA                        i2printRTC@month 003D  
                __size_of_Distribution 0218            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4548                                _Loading 1C9A  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3DAE  
                              ___awmod 3FD2                             _initServos 46C2  
                              ___lldiv 3E6C                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 430E  
                              ___lwmod 4548                        __size_of_getRTC 0086  
                      printSortTimer@i 0047                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 47C4  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0140  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 428E                                _lcdInst 4ECE  
                              _handler 0008                                __ptext0 3CEE  
                              __ptext1 4E50                                __ptext2 4DEE  
                              __ptext3 1C9A                                __ptext4 3F28  
                              __ptext5 428E                                __ptext6 4A0E  
                              __ptext7 43FC                                __ptext8 4812  
                              __ptext9 32F2                        __size_of_printf 0438  
                              _readADC 4CD8                        __size_of_strcpy 0036  
                              _initLCD 48AA                                _cur_can 00E4  
                              _loadRTC 4074                                _readMAG 485E  
                              _dpowers FB00                     actuatorTest@i_1651 00AD  
                   actuatorTest@i_1661 00B0                     actuatorTest@i_1670 00B6  
                   actuatorTest@i_1662 00B1                     actuatorTest@i_1671 00B7  
                   actuatorTest@i_1680 00BC                     actuatorTest@i_1664 00B2  
                   actuatorTest@i_1681 00BD                     actuatorTest@i_1673 00B8  
                   actuatorTest@i_1665 00B3                     actuatorTest@i_1690 00C2  
                   actuatorTest@i_1674 00B9                     actuatorTest@i_1658 00AE  
                   actuatorTest@i_1691 00C3                     actuatorTest@i_1683 00BE  
                   actuatorTest@i_1667 00B4                     actuatorTest@i_1659 00AF  
                   actuatorTest@i_1684 00BF                     actuatorTest@i_1668 00B5  
                   actuatorTest@i_1677 00BA                     actuatorTest@i_1678 00BB  
                   actuatorTest@i_1687 00C0                     actuatorTest@i_1688 00C1  
                              _isdigit 4D04                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0120  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2CDE  
                       __pintcode_body 363C                   end_of_initialization 4808  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 363C  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 430E                             _sensorTest 1FD8  
                  __size_of_PusherTest 0248                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 32F2                           ??_BothServos 00AB  
                __end_of_machineConfig 4666                             _updateMenu 25A0  
                    i2_I2C_Master_Read 4DA4                              _IR_signal 00DE  
                    i2_I2C_Master_Wait 4EAC                      i2_I2C_Master_Stop 4F22  
                    i2___lwdiv@divisor 0008                        _log_count_total 0075  
                            i2___lwdiv 4772                              i2___lwmod 48F0  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 2CDE  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 4EEA  
                        Loading@i_1103 00B6                          Loading@i_1104 00B8  
                        Loading@i_1106 00BA                          Loading@i_1107 00BC  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4E32                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 192C                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 4E82                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4A0E  
                       __end_of_getMAG 4A40                         __end_of_getRTC 4186  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4C50  
                       __end_of_readIR 485E                         __end_of_logRun 3900  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 49D8  
            __end_ofi2_I2C_Master_Read 4DCA              __end_ofi2_I2C_Master_Wait 4EBE  
                         i2printf@prec 001D                    start_initialization 47C4  
            __end_ofi2_I2C_Master_Stop 4F2A                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 012D  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1337 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 4186  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 420A                            ?_sensorTest 0001  
                          __pdataBANK1 0135                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1118 0086  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2451 0043                   __size_of_BlockerTest 0184  
                          __pbssCOMRAM 0059           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 0216                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1975 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                   PusherTest@res_1706 00AF                        _count_pop_w_tab 005D  
                          _EEPROM_read 4E6A                     __end_of_PortTestA5 46C2  
                     _I2C_Master_Start 4F1A                              _f_lastCan 00E8  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 4EF6                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAEE                              _lcdNibble 44E0  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 2AA8  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 006F                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 3C18                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 01C6                            __size_of_UI 08A6  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 4F32  
           __end_ofi2_I2C_Master_Write 4F0A                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 310C  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u420_40 4DC2                               i2u520_40 2B36  
                             _PIR2bits 000FA1                               i2u475_40 1A52  
                             i2u475_47 1A48                               i2u479_40 1AB2  
                             i2u479_47 1AA8                               i2u954_47 314A  
                             i2u955_47 4734                               i2u956_47 473E  
                             i2u957_47 4760                               i2u958_47 476A  
                  __size_of_updateMenu 02C0                         _log_completion 00EE  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 4D7E                          lcdNibble@data 0081  
                             i2_getRTC 446E                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00BE                               i2_printf 192C  
                             i2_strcpy 4A40                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 47D8  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 4E98  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 033E  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 3FD2                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4B02  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 496A  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4932  
              _change_state_to_menu_23 4AD2                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4BF2                _change_state_to_logs_12 4BC2  
              _change_state_to_logs_22 4B92                _change_state_to_logs_23 4C7E  
              _change_state_to_logs_33 4B62                _change_state_to_logs_34 4B32  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 37B8                             _EEPROMTest 4F32  
                      _I2C_Master_Init 45AA                       __size_of_readADC 002C  
                      _I2C_Master_Read 4C50                       __size_of_initLCD 0046  
                         _f_ID_receive 0065                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 4E98  
                      _I2C_Master_Stop 4F12                       __size_of_isdigit 002A  
                             _delay_ms 4D2E                         _printSortTimer 2EF6  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3A20                               __ptext10 4D2E  
                             __ptext11 2CDE                               __ptext20 4CAC  
                             __ptext12 460A                               __ptext21 4E10  
                             __ptext13 37C0                               __ptext30 4C50  
                             __ptext22 48AA                               __ptext14 3B34  
                             __ptext31 4E98                               __ptext23 08CA  
                             __ptext15 4E6A                               __ptext40 0012  
                             __ptext32 4932                               __ptext24 22D6  
                             __ptext16 4C22                               __ptext41 4186  
                             __ptext33 496A                               __ptext25 49A2  
                             __ptext17 4074                               __ptext50 34B8  
                             __ptext42 2860                               __ptext34 3FD2  
                             __ptext26 4100                               __ptext18 45AA  
                             __ptext51 1170                               __ptext43 4CD8  
                             __ptext35 3DAE                               __ptext27 4EF6  
                             __ptext19 3E6C                               __ptext60 25A0  
                             __ptext52 4EBE                               __ptext44 420A  
                             __ptext36 3A20                               __ptext28 4F12  
                             __ptext61 4D56                               __ptext53 4D04  
                             __ptext45 4666                               __ptext37 1FD8  
                             __ptext29 4F1A                               __ptext70 4B62  
                             __ptext62 2AA8                               __ptext54 49D8  
                             __ptext46 4F32                               __ptext38 485E  
                             __ptext71 4C7E                               __ptext63 4A40  
                             __ptext55 4548                               __ptext47 15A8  
                             __ptext39 3C18                               __ptext80 4EDE  
                             __ptext72 4B92                               __ptext64 310C  
                             __ptext56 430E                               __ptext48 46C2  
                             __ptext81 4E32                               __ptext73 4BC2  
                             __ptext65 4A72                               __ptext57 4ECE  
                             __ptext49 4386                               __ptext90 4F2A  
                             __ptext82 4D7E                               __ptext74 4BF2  
                             __ptext66 4AA2                               __ptext58 44E0  
                             __ptext91 4DA4                               __ptext83 48F0  
                             __ptext75 4DCA                               __ptext67 4AD2  
                             __ptext92 4EAC                               __ptext84 4772  
                             __ptext76 3900                               __ptext68 4B02  
                             __ptext85 4EEA                               __ptext77 4E82  
                             __ptext69 4B32                               __ptext86 471C  
                             __ptext78 2EF6                               __ptext87 446E  
                             __ptext79 192C                               __ptext88 4F00  
                             __ptext89 4F22                               _dispLogs 4DCA  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1975 0002  
                   __end_of_initServos 471C                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 4E10  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 4386                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 22D6  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0067  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4AD2      __end_ofi2_change_state_to_menu_22 4AA2  
                             loadRTC@i 0096                 __end_of_printSortTimer 310C  
                            putch@data 0082               __end_of_I2C_Master_Start 4F22  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 4F00  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E0                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 22D6                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4E6A              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2860  
              __end_of_I2C_Master_Init 460A                __end_of_I2C_Master_Read 4C7E  
              __end_of_I2C_Master_Wait 4EAC                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 4F1A                            lcdInst@data 0082  
                        printRTC@F3219 0139                           retrieveLog@i 000E  
                          _retrieveLog 3900                    __end_ofi2_lcdNibble 4772  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012F                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 460A  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
