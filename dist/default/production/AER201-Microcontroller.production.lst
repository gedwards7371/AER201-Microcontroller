

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 12:15:03 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.40
   123                           ; Generated 01/12/2016 GMT
   124                           ; 
   125                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4620 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	idataBANK1
   158  005BF4                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for UI@F3247
   162  005BF4  4D                 	db	77
   163  005BF5  4D                 	db	77
   164  005BF6  4D                 	db	77
   165  005BF7  00                 	db	0
   166                           
   167                           ;initializer for printRTC@F3237
   168  005BF8  4D                 	db	77
   169  005BF9  4D                 	db	77
   170  005BFA  4D                 	db	77
   171  005BFB  00                 	db	0
   172                           
   173                           	psect	mediumconst
   174  00FA8A                     __pmediumconst:
   175                           	opt stack 0
   176  00FA8A  00                 	db	0
   177  00FA8B                     _keys:
   178                           	opt stack 0
   179  00FA8B  31                 	db	49
   180  00FA8C  32                 	db	50
   181  00FA8D  33                 	db	51
   182  00FA8E  41                 	db	65
   183  00FA8F  34                 	db	52
   184  00FA90  35                 	db	53
   185  00FA91  36                 	db	54
   186  00FA92  42                 	db	66
   187  00FA93  37                 	db	55
   188  00FA94  38                 	db	56
   189  00FA95  39                 	db	57
   190  00FA96  43                 	db	67
   191  00FA97  2A                 	db	42
   192  00FA98  30                 	db	48
   193  00FA99  23                 	db	35
   194  00FA9A  44                 	db	68
   195  00FA9B  00                 	db	0
   196  00FA9C                     __end_of_keys:
   197                           	opt stack 0
   198  00FA9C                     _dpowers:
   199                           	opt stack 0
   200  00FA9C  0001               	dw	1
   201  00FA9E  000A               	dw	10
   202  00FAA0  0064               	dw	100
   203  00FAA2  03E8               	dw	1000
   204  00FAA4  2710               	dw	10000
   205  00FAA6                     __end_of_dpowers:
   206                           	opt stack 0
   207  0000                     _ADCON0	set	4034
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON2	set	4032
   211  0000                     _ADRESH	set	4036
   212  0000                     _ADRESL	set	4035
   213  0000                     _CMCONbits	set	4020
   214  0000                     _CVRCON	set	4021
   215  0000                     _EEADR	set	4009
   216  0000                     _EEADRH	set	4010
   217  0000                     _EECON1bits	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _LATA	set	3977
   222  0000                     _LATAbits	set	3977
   223  0000                     _LATB	set	3978
   224  0000                     _LATBbits	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _LATCbits	set	3979
   227  0000                     _LATD	set	3980
   228  0000                     _LATDbits	set	3980
   229  0000                     _LATE	set	3981
   230  0000                     _OSCCON	set	4051
   231  0000                     _OSCTUNEbits	set	3995
   232  0000                     _PIR2bits	set	4001
   233  0000                     _PORTAbits	set	3968
   234  0000                     _PORTB	set	3969
   235  0000                     _PORTBbits	set	3969
   236  0000                     _PR2	set	4043
   237  0000                     _SSPADD	set	4040
   238  0000                     _SSPBUF	set	4041
   239  0000                     _SSPCON1	set	4038
   240  0000                     _SSPCON2	set	4037
   241  0000                     _SSPSTAT	set	4039
   242  0000                     _T0CON	set	4053
   243  0000                     _T1CON	set	4045
   244  0000                     _T2CON	set	4042
   245  0000                     _T3CON	set	4017
   246  0000                     _TMR0H	set	4055
   247  0000                     _TMR0L	set	4054
   248  0000                     _TMR1H	set	4047
   249  0000                     _TMR1L	set	4046
   250  0000                     _TMR3H	set	4019
   251  0000                     _TMR3L	set	4018
   252  0000                     _TRISA	set	3986
   253  0000                     _TRISB	set	3987
   254  0000                     _TRISC	set	3988
   255  0000                     _TRISD	set	3989
   256  0000                     _TRISE	set	3990
   257  0000                     _ACKDT	set	32301
   258  0000                     _ACKEN	set	32300
   259  0000                     _ADIE	set	31982
   260  0000                     _INT1IE	set	32643
   261  0000                     _INT1IF	set	32640
   262  0000                     _PEIE	set	32662
   263  0000                     _PEN	set	32298
   264  0000                     _RCEN	set	32299
   265  0000                     _RSEN	set	32297
   266  0000                     _SEN	set	32296
   267  0000                     _TMR0IE	set	32661
   268  0000                     _TMR0IF	set	32658
   269  0000                     _TMR0ON	set	32431
   270  0000                     _TMR1IE	set	31976
   271  0000                     _TMR1IF	set	31984
   272  0000                     _TMR1ON	set	32360
   273  0000                     _TMR2IE	set	31977
   274  0000                     _TMR2IF	set	31985
   275  0000                     _TMR2ON	set	32338
   276  0000                     _TMR3IE	set	32001
   277  0000                     _TMR3IF	set	32009
   278  0000                     _TMR3ON	set	32136
   279  0000                     _TRISC3	set	31907
   280  0000                     _TRISC4	set	31908
   281  0000                     _nRBPU	set	32655
   282  00FAA6                     STR_21:
   283  00FAA6  25                 	db	37
   284  00FAA7  30                 	db	48	;'0'
   285  00FAA8  32                 	db	50	;'2'
   286  00FAA9  64                 	db	100	;'d'
   287  00FAAA  25                 	db	37
   288  00FAAB  73                 	db	115	;'s'
   289  00FAAC  20                 	db	32
   290  00FAAD  7C                 	db	124
   291  00FAAE  20                 	db	32
   292  00FAAF  25                 	db	37
   293  00FAB0  30                 	db	48	;'0'
   294  00FAB1  32                 	db	50	;'2'
   295  00FAB2  64                 	db	100	;'d'
   296  00FAB3  3A                 	db	58	;':'
   297  00FAB4  25                 	db	37
   298  00FAB5  30                 	db	48	;'0'
   299  00FAB6  32                 	db	50	;'2'
   300  00FAB7  64                 	db	100	;'d'
   301  00FAB8  3A                 	db	58	;':'
   302  00FAB9  25                 	db	37
   303  00FABA  30                 	db	48	;'0'
   304  00FABB  32                 	db	50	;'2'
   305  00FABC  64                 	db	100	;'d'
   306  00FABD  00                 	db	0
   307  00FABE                     STR_67:
   308  00FABE  28                 	db	40
   309  00FABF  64                 	db	100	;'d'
   310  00FAC0  61                 	db	97	;'a'
   311  00FAC1  74                 	db	116	;'t'
   312  00FAC2  61                 	db	97	;'a'
   313  00FAC3  3A                 	db	58	;':'
   314  00FAC4  20                 	db	32
   315  00FAC5  25                 	db	37
   316  00FAC6  75                 	db	117	;'u'
   317  00FAC7  2C                 	db	44
   318  00FAC8  20                 	db	32
   319  00FAC9  61                 	db	97	;'a'
   320  00FACA  64                 	db	100	;'d'
   321  00FACB  64                 	db	100	;'d'
   322  00FACC  72                 	db	114	;'r'
   323  00FACD  3A                 	db	58	;':'
   324  00FACE  20                 	db	32
   325  00FACF  25                 	db	37
   326  00FAD0  75                 	db	117	;'u'
   327  00FAD1  29                 	db	41
   328  00FAD2  00                 	db	0
   329  00FAD3                     STR_64:
   330  00FAD3  20                 	db	32
   331  00FAD4  20                 	db	32
   332  00FAD5  20                 	db	32
   333  00FAD6  20                 	db	32
   334  00FAD7  20                 	db	32
   335  00FAD8  20                 	db	32
   336  00FAD9  20                 	db	32
   337  00FADA  20                 	db	32
   338  00FADB  20                 	db	32
   339  00FADC  20                 	db	32
   340  00FADD  20                 	db	32
   341  00FADE  20                 	db	32
   342  00FADF  46                 	db	70	;'F'
   343  00FAE0  25                 	db	37
   344  00FAE1  64                 	db	100	;'d'
   345  00FAE2  4C                 	db	76	;'L'
   346  00FAE3  25                 	db	37
   347  00FAE4  64                 	db	100	;'d'
   348  00FAE5  00                 	db	0
   349  00FAE6                     STR_112:
   350  00FAE6  44                 	db	68	;'D'
   351  00FAE7  20                 	db	32
   352  00FAE8  57                 	db	87	;'W'
   353  00FAE9  49                 	db	73	;'I'
   354  00FAEA  4C                 	db	76	;'L'
   355  00FAEB  4C                 	db	76	;'L'
   356  00FAEC  20                 	db	32
   357  00FAED  52                 	db	82	;'R'
   358  00FAEE  45                 	db	69	;'E'
   359  00FAEF  54                 	db	84	;'T'
   360  00FAF0  55                 	db	85	;'U'
   361  00FAF1  52                 	db	82	;'R'
   362  00FAF2  4E                 	db	78	;'N'
   363  00FAF3  20                 	db	32
   364  00FAF4  20                 	db	32
   365  00FAF5  20                 	db	32
   366  00FAF6  20                 	db	32
   367  00FAF7  00                 	db	0
   368  00FAF8                     STR_122:
   369  00FAF8  4F                 	db	79	;'O'
   370  00FAF9  54                 	db	84	;'T'
   371  00FAFA  48                 	db	72	;'H'
   372  00FAFB  45                 	db	69	;'E'
   373  00FAFC  52                 	db	82	;'R'
   374  00FAFD  20                 	db	32
   375  00FAFE  53                 	db	83	;'S'
   376  00FAFF  45                 	db	69	;'E'
   377  00FB00  54                 	db	84	;'T'
   378  00FB01  53                 	db	83	;'S'
   379  00FB02  20                 	db	32
   380  00FB03  52                 	db	82	;'R'
   381  00FB04  41                 	db	65	;'A'
   382  00FB05  35                 	db	53	;'5'
   383  00FB06  20                 	db	32
   384  00FB07  20                 	db	32
   385  00FB08  20                 	db	32
   386  00FB09  00                 	db	0
   387  00FB0A                     STR_121:
   388  00FB0A  53                 	db	83	;'S'
   389  00FB0B  3A                 	db	58	;':'
   390  00FB0C  20                 	db	32
   391  00FB0D  44                 	db	68	;'D'
   392  00FB0E  20                 	db	32
   393  00FB0F  57                 	db	87	;'W'
   394  00FB10  49                 	db	73	;'I'
   395  00FB11  4C                 	db	76	;'L'
   396  00FB12  4C                 	db	76	;'L'
   397  00FB13  20                 	db	32
   398  00FB14  52                 	db	82	;'R'
   399  00FB15  45                 	db	69	;'E'
   400  00FB16  54                 	db	84	;'T'
   401  00FB17  55                 	db	85	;'U'
   402  00FB18  52                 	db	82	;'R'
   403  00FB19  4E                 	db	78	;'N'
   404  00FB1A  20                 	db	32
   405  00FB1B  00                 	db	0
   406  00FB1C                     STR_124:
   407  00FB1C  4F                 	db	79	;'O'
   408  00FB1D  54                 	db	84	;'T'
   409  00FB1E  48                 	db	72	;'H'
   410  00FB1F  45                 	db	69	;'E'
   411  00FB20  52                 	db	82	;'R'
   412  00FB21  3A                 	db	58	;':'
   413  00FB22  20                 	db	32
   414  00FB23  43                 	db	67	;'C'
   415  00FB24  41                 	db	65	;'A'
   416  00FB25  4D                 	db	77	;'M'
   417  00FB26  20                 	db	32
   418  00FB27  54                 	db	84	;'T'
   419  00FB28  4F                 	db	79	;'O'
   420  00FB29  47                 	db	71	;'G'
   421  00FB2A  47                 	db	71	;'G'
   422  00FB2B  4C                 	db	76	;'L'
   423  00FB2C  45                 	db	69	;'E'
   424  00FB2D  00                 	db	0
   425  00FB2E                     STR_130:
   426  00FB2E  4F                 	db	79	;'O'
   427  00FB2F  54                 	db	84	;'T'
   428  00FB30  48                 	db	72	;'H'
   429  00FB31  45                 	db	69	;'E'
   430  00FB32  52                 	db	82	;'R'
   431  00FB33  20                 	db	32
   432  00FB34  53                 	db	83	;'S'
   433  00FB35  45                 	db	69	;'E'
   434  00FB36  54                 	db	84	;'T'
   435  00FB37  53                 	db	83	;'S'
   436  00FB38  20                 	db	32
   437  00FB39  50                 	db	80	;'P'
   438  00FB3A  55                 	db	85	;'U'
   439  00FB3B  53                 	db	83	;'S'
   440  00FB3C  48                 	db	72	;'H'
   441  00FB3D  45                 	db	69	;'E'
   442  00FB3E  52                 	db	82	;'R'
   443  00FB3F  00                 	db	0
   444  00FB40                     STR_3:
   445  00FB40  2D                 	db	45
   446  00FB41  2D                 	db	45
   447  00FB42  20                 	db	32
   448  00FB43  4C                 	db	76	;'L'
   449  00FB44  4F                 	db	79	;'O'
   450  00FB45  47                 	db	71	;'G'
   451  00FB46  20                 	db	32
   452  00FB47  25                 	db	37
   453  00FB48  32                 	db	50	;'2'
   454  00FB49  64                 	db	100	;'d'
   455  00FB4A  20                 	db	32
   456  00FB4B  48                 	db	72	;'H'
   457  00FB4C  45                 	db	69	;'E'
   458  00FB4D  52                 	db	82	;'R'
   459  00FB4E  45                 	db	69	;'E'
   460  00FB4F  2D                 	db	45
   461  00FB50  2D                 	db	45
   462  00FB51  00                 	db	0
   463  00FB52                     STR_1:
   464  00FB52  52                 	db	82	;'R'
   465  00FB53  45                 	db	69	;'E'
   466  00FB54  53                 	db	83	;'S'
   467  00FB55  55                 	db	85	;'U'
   468  00FB56  4C                 	db	76	;'L'
   469  00FB57  54                 	db	84	;'T'
   470  00FB58  53                 	db	83	;'S'
   471  00FB59  20                 	db	32
   472  00FB5A  49                 	db	73	;'I'
   473  00FB5B  4E                 	db	78	;'N'
   474  00FB5C  20                 	db	32
   475  00FB5D  4C                 	db	76	;'L'
   476  00FB5E  4F                 	db	79	;'O'
   477  00FB5F  47                 	db	71	;'G'
   478  00FB60  20                 	db	32
   479  00FB61  25                 	db	37
   480  00FB62  64                 	db	100	;'d'
   481  00FB63  00                 	db	0
   482  00FB64                     STR_103:
   483  00FB64  4D                 	db	77	;'M'
   484  00FB65  49                 	db	73	;'I'
   485  00FB66  44                 	db	68	;'D'
   486  00FB67  20                 	db	32
   487  00FB68  2D                 	db	45
   488  00FB69  2D                 	db	45
   489  00FB6A  20                 	db	32
   490  00FB6B  32                 	db	50	;'2'
   491  00FB6C  73                 	db	115	;'s'
   492  00FB6D  20                 	db	32
   493  00FB6E  20                 	db	32
   494  00FB6F  20                 	db	32
   495  00FB70  20                 	db	32
   496  00FB71  20                 	db	32
   497  00FB72  20                 	db	32
   498  00FB73  20                 	db	32
   499  00FB74  00                 	db	0
   500  00FB75                     STR_106:
   501  00FB75  44                 	db	68	;'D'
   502  00FB76  52                 	db	82	;'R'
   503  00FB77  4F                 	db	79	;'O'
   504  00FB78  50                 	db	80	;'P'
   505  00FB79  20                 	db	32
   506  00FB7A  2D                 	db	45
   507  00FB7B  2D                 	db	45
   508  00FB7C  20                 	db	32
   509  00FB7D  32                 	db	50	;'2'
   510  00FB7E  73                 	db	115	;'s'
   511  00FB7F  20                 	db	32
   512  00FB80  20                 	db	32
   513  00FB81  20                 	db	32
   514  00FB82  20                 	db	32
   515  00FB83  20                 	db	32
   516  00FB84  20                 	db	32
   517  00FB85  00                 	db	0
   518  00FB86                     STR_100:
   519  00FB86  4C                 	db	76	;'L'
   520  00FB87  45                 	db	69	;'E'
   521  00FB88  46                 	db	70	;'F'
   522  00FB89  54                 	db	84	;'T'
   523  00FB8A  20                 	db	32
   524  00FB8B  2D                 	db	45
   525  00FB8C  2D                 	db	45
   526  00FB8D  20                 	db	32
   527  00FB8E  32                 	db	50	;'2'
   528  00FB8F  73                 	db	115	;'s'
   529  00FB90  20                 	db	32
   530  00FB91  20                 	db	32
   531  00FB92  20                 	db	32
   532  00FB93  20                 	db	32
   533  00FB94  20                 	db	32
   534  00FB95  20                 	db	32
   535  00FB96  00                 	db	0
   536  00FB97                     STR_105:
   537  00FB97  4C                 	db	76	;'L'
   538  00FB98  45                 	db	69	;'E'
   539  00FB99  56                 	db	86	;'V'
   540  00FB9A  45                 	db	69	;'E'
   541  00FB9B  4C                 	db	76	;'L'
   542  00FB9C  20                 	db	32
   543  00FB9D  2D                 	db	45
   544  00FB9E  2D                 	db	45
   545  00FB9F  20                 	db	32
   546  00FBA0  32                 	db	50	;'2'
   547  00FBA1  73                 	db	115	;'s'
   548  00FBA2  20                 	db	32
   549  00FBA3  20                 	db	32
   550  00FBA4  20                 	db	32
   551  00FBA5  20                 	db	32
   552  00FBA6  20                 	db	32
   553  00FBA7  00                 	db	0
   554  00FBA8                     STR_99:
   555  00FBA8  52                 	db	82	;'R'
   556  00FBA9  49                 	db	73	;'I'
   557  00FBAA  47                 	db	71	;'G'
   558  00FBAB  48                 	db	72	;'H'
   559  00FBAC  54                 	db	84	;'T'
   560  00FBAD  20                 	db	32
   561  00FBAE  2D                 	db	45
   562  00FBAF  2D                 	db	45
   563  00FBB0  20                 	db	32
   564  00FBB1  32                 	db	50	;'2'
   565  00FBB2  73                 	db	115	;'s'
   566  00FBB3  20                 	db	32
   567  00FBB4  20                 	db	32
   568  00FBB5  20                 	db	32
   569  00FBB6  20                 	db	32
   570  00FBB7  20                 	db	32
   571  00FBB8  00                 	db	0
   572  00FBB9                     STR_98:
   573  00FBB9  4D                 	db	77	;'M'
   574  00FBBA  49                 	db	73	;'I'
   575  00FBBB  44                 	db	68	;'D'
   576  00FBBC  44                 	db	68	;'D'
   577  00FBBD  4C                 	db	76	;'L'
   578  00FBBE  45                 	db	69	;'E'
   579  00FBBF  20                 	db	32
   580  00FBC0  2D                 	db	45
   581  00FBC1  2D                 	db	45
   582  00FBC2  20                 	db	32
   583  00FBC3  32                 	db	50	;'2'
   584  00FBC4  73                 	db	115	;'s'
   585  00FBC5  20                 	db	32
   586  00FBC6  20                 	db	32
   587  00FBC7  20                 	db	32
   588  00FBC8  20                 	db	32
   589  00FBC9  00                 	db	0
   590  00FBCA                     STR_113:
   591  00FBCA  4F                 	db	79	;'O'
   592  00FBCB  54                 	db	84	;'T'
   593  00FBCC  48                 	db	72	;'H'
   594  00FBCD  45                 	db	69	;'E'
   595  00FBCE  52                 	db	82	;'R'
   596  00FBCF  20                 	db	32
   597  00FBD0  53                 	db	83	;'S'
   598  00FBD1  45                 	db	69	;'E'
   599  00FBD2  54                 	db	84	;'T'
   600  00FBD3  53                 	db	83	;'S'
   601  00FBD4  20                 	db	32
   602  00FBD5  44                 	db	68	;'D'
   603  00FBD6  43                 	db	67	;'C'
   604  00FBD7  20                 	db	32
   605  00FBD8  20                 	db	32
   606  00FBD9  20                 	db	32
   607  00FBDA  00                 	db	0
   608  00FBDB                     STR_119:
   609  00FBDB  44                 	db	68	;'D'
   610  00FBDC  20                 	db	32
   611  00FBDD  57                 	db	87	;'W'
   612  00FBDE  49                 	db	73	;'I'
   613  00FBDF  4C                 	db	76	;'L'
   614  00FBE0  4C                 	db	76	;'L'
   615  00FBE1  20                 	db	32
   616  00FBE2  52                 	db	82	;'R'
   617  00FBE3  45                 	db	69	;'E'
   618  00FBE4  54                 	db	84	;'T'
   619  00FBE5  55                 	db	85	;'U'
   620  00FBE6  52                 	db	82	;'R'
   621  00FBE7  4E                 	db	78	;'N'
   622  00FBE8  20                 	db	32
   623  00FBE9  20                 	db	32
   624  00FBEA  20                 	db	32
   625  00FBEB  00                 	db	0
   626  00FBEC                     STR_116:
   627  00FBEC  35                 	db	53	;'5'
   628  00FBED  3A                 	db	58	;':'
   629  00FBEE  48                 	db	72	;'H'
   630  00FBEF  7C                 	db	124
   631  00FBF0  36                 	db	54	;'6'
   632  00FBF1  3A                 	db	58	;':'
   633  00FBF2  4C                 	db	76	;'L'
   634  00FBF3  7C                 	db	124
   635  00FBF4  49                 	db	73	;'I'
   636  00FBF5  52                 	db	82	;'R'
   637  00FBF6  3A                 	db	58	;':'
   638  00FBF7  25                 	db	37
   639  00FBF8  64                 	db	100	;'d'
   640  00FBF9  20                 	db	32
   641  00FBFA  20                 	db	32
   642  00FBFB  20                 	db	32
   643  00FBFC  00                 	db	0
   644  00FBFD                     STR_114:
   645  00FBFD  31                 	db	49	;'1'
   646  00FBFE  3A                 	db	58	;':'
   647  00FBFF  20                 	db	32
   648  00FC00  44                 	db	68	;'D'
   649  00FC01  43                 	db	67	;'C'
   650  00FC02  20                 	db	32
   651  00FC03  7C                 	db	124
   652  00FC04  20                 	db	32
   653  00FC05  41                 	db	65	;'A'
   654  00FC06  3A                 	db	58	;':'
   655  00FC07  20                 	db	32
   656  00FC08  41                 	db	65	;'A'
   657  00FC09  52                 	db	82	;'R'
   658  00FC0A  4D                 	db	77	;'M'
   659  00FC0B  20                 	db	32
   660  00FC0C  20                 	db	32
   661  00FC0D  00                 	db	0
   662  00FC0E                     STR_101:
   663  00FC0E  4D                 	db	77	;'M'
   664  00FC0F  49                 	db	73	;'I'
   665  00FC10  44                 	db	68	;'D'
   666  00FC11  2D                 	db	45
   667  00FC12  4C                 	db	76	;'L'
   668  00FC13  45                 	db	69	;'E'
   669  00FC14  46                 	db	70	;'F'
   670  00FC15  54                 	db	84	;'T'
   671  00FC16  20                 	db	32
   672  00FC17  2D                 	db	45
   673  00FC18  2D                 	db	45
   674  00FC19  20                 	db	32
   675  00FC1A  32                 	db	50	;'2'
   676  00FC1B  73                 	db	115	;'s'
   677  00FC1C  20                 	db	32
   678  00FC1D  20                 	db	32
   679  00FC1E  00                 	db	0
   680  00FC1F                     STR_102:
   681  00FC1F  4D                 	db	77	;'M'
   682  00FC20  49                 	db	73	;'I'
   683  00FC21  44                 	db	68	;'D'
   684  00FC22  2D                 	db	45
   685  00FC23  52                 	db	82	;'R'
   686  00FC24  49                 	db	73	;'I'
   687  00FC25  47                 	db	71	;'G'
   688  00FC26  48                 	db	72	;'H'
   689  00FC27  54                 	db	84	;'T'
   690  00FC28  20                 	db	32
   691  00FC29  2D                 	db	45
   692  00FC2A  2D                 	db	45
   693  00FC2B  20                 	db	32
   694  00FC2C  32                 	db	50	;'2'
   695  00FC2D  73                 	db	115	;'s'
   696  00FC2E  20                 	db	32
   697  00FC2F  00                 	db	0
   698  00FC30  45                 	db	69	;'E'
   699  00FC31  4C                 	db	76	;'L'
   700  00FC32  53                 	db	83	;'S'
   701  00FC33  45                 	db	69	;'E'
   702  00FC34  20                 	db	32
   703  00FC35  54                 	db	84	;'T'
   704  00FC36  4F                 	db	79	;'O'
   705  00FC37  47                 	db	71	;'G'
   706  00FC38  47                 	db	71	;'G'
   707  00FC39  4C                 	db	76	;'L'
   708  00FC3A  45                 	db	69	;'E'
   709  00FC3B  53                 	db	83	;'S'
   710  00FC3C  20                 	db	32
   711  00FC3D  52                 	db	82	;'R'
   712  00FC3E  41                 	db	65	;'A'
   713  00FC3F  35                 	db	53	;'5'
   714  00FC40  00                 	db	0
   715  00FC41                     STR_73:
   716  00FC41  41                 	db	65	;'A'
   717  00FC42  4C                 	db	76	;'L'
   718  00FC43  47                 	db	71	;'G'
   719  00FC44  31                 	db	49	;'1'
   720  00FC45  3A                 	db	58	;':'
   721  00FC46  20                 	db	32
   722  00FC47  39                 	db	57	;'9'
   723  00FC48  20                 	db	32
   724  00FC49  50                 	db	80	;'P'
   725  00FC4A  4F                 	db	79	;'O'
   726  00FC4B  50                 	db	80	;'P'
   727  00FC4C  4E                 	db	78	;'N'
   728  00FC4D  4F                 	db	79	;'O'
   729  00FC4E  54                 	db	84	;'T'
   730  00FC4F  41                 	db	65	;'A'
   731  00FC50  42                 	db	66	;'B'
   732  00FC51  00                 	db	0
   733  00FC52                     STR_93:
   734  00FC52  54                 	db	84	;'T'
   735  00FC53  53                 	db	83	;'S'
   736  00FC54  54                 	db	84	;'T'
   737  00FC55  3A                 	db	58	;':'
   738  00FC56  20                 	db	32
   739  00FC57  43                 	db	67	;'C'
   740  00FC58  4F                 	db	79	;'O'
   741  00FC59  4E                 	db	78	;'N'
   742  00FC5A  44                 	db	68	;'D'
   743  00FC5B  20                 	db	32
   744  00FC5C  53                 	db	83	;'S'
   745  00FC5D  4F                 	db	79	;'O'
   746  00FC5E  4C                 	db	76	;'L'
   747  00FC5F  4E                 	db	78	;'N'
   748  00FC60  27                 	db	39
   749  00FC61  44                 	db	68	;'D'
   750  00FC62  00                 	db	0
   751  00FC63                     STR_95:
   752  00FC63  54                 	db	84	;'T'
   753  00FC64  53                 	db	83	;'S'
   754  00FC65  54                 	db	84	;'T'
   755  00FC66  3A                 	db	58	;':'
   756  00FC67  20                 	db	32
   757  00FC68  50                 	db	80	;'P'
   758  00FC69  55                 	db	85	;'U'
   759  00FC6A  53                 	db	83	;'S'
   760  00FC6B  48                 	db	72	;'H'
   761  00FC6C  20                 	db	32
   762  00FC6D  53                 	db	83	;'S'
   763  00FC6E  4F                 	db	79	;'O'
   764  00FC6F  4C                 	db	76	;'L'
   765  00FC70  4E                 	db	78	;'N'
   766  00FC71  27                 	db	39
   767  00FC72  44                 	db	68	;'D'
   768  00FC73  00                 	db	0
   769  00FC74                     STR_69:
   770  00FC74  32                 	db	50	;'2'
   771  00FC75  2E                 	db	46
   772  00FC76  53                 	db	83	;'S'
   773  00FC77  4E                 	db	78	;'N'
   774  00FC78  52                 	db	82	;'R'
   775  00FC79  7C                 	db	124
   776  00FC7A  34                 	db	52	;'4'
   777  00FC7B  2E                 	db	46
   778  00FC7C  48                 	db	72	;'H'
   779  00FC7D  49                 	db	73	;'I'
   780  00FC7E  7C                 	db	124
   781  00FC7F  35                 	db	53	;'5'
   782  00FC80  2E                 	db	46
   783  00FC81  4D                 	db	77	;'M'
   784  00FC82  45                 	db	69	;'E'
   785  00FC83  44                 	db	68	;'D'
   786  00FC84  00                 	db	0
   787  00FC85                     STR_70:
   788  00FC85  42                 	db	66	;'B'
   789  00FC86  2E                 	db	46
   790  00FC87  50                 	db	80	;'P'
   791  00FC88  4C                 	db	76	;'L'
   792  00FC89  41                 	db	65	;'A'
   793  00FC8A  7C                 	db	124
   794  00FC8B  38                 	db	56	;'8'
   795  00FC8C  2E                 	db	46
   796  00FC8D  53                 	db	83	;'S'
   797  00FC8E  56                 	db	86	;'V'
   798  00FC8F  7C                 	db	124
   799  00FC90  39                 	db	57	;'9'
   800  00FC91  2E                 	db	46
   801  00FC92  42                 	db	66	;'B'
   802  00FC93  4C                 	db	76	;'L'
   803  00FC94  4B                 	db	75	;'K'
   804  00FC95  00                 	db	0
   805  00FC96                     STR_128:
   806  00FC96  45                 	db	69	;'E'
   807  00FC97  4C                 	db	76	;'L'
   808  00FC98  53                 	db	83	;'S'
   809  00FC99  45                 	db	69	;'E'
   810  00FC9A  20                 	db	32
   811  00FC9B  54                 	db	84	;'T'
   812  00FC9C  4F                 	db	79	;'O'
   813  00FC9D  47                 	db	71	;'G'
   814  00FC9E  47                 	db	71	;'G'
   815  00FC9F  4C                 	db	76	;'L'
   816  00FCA0  45                 	db	69	;'E'
   817  00FCA1  53                 	db	83	;'S'
   818  00FCA2  20                 	db	32
   819  00FCA3  41                 	db	65	;'A'
   820  00FCA4  52                 	db	82	;'R'
   821  00FCA5  4D                 	db	77	;'M'
   822  00FCA6  00                 	db	0
   823  00FCA7                     STR_111:
   824  00FCA7  54                 	db	84	;'T'
   825  00FCA8  53                 	db	83	;'S'
   826  00FCA9  54                 	db	84	;'T'
   827  00FCAA  3A                 	db	58	;':'
   828  00FCAB  20                 	db	32
   829  00FCAC  42                 	db	66	;'B'
   830  00FCAD  4F                 	db	79	;'O'
   831  00FCAE  54                 	db	84	;'T'
   832  00FCAF  48                 	db	72	;'H'
   833  00FCB0  20                 	db	32
   834  00FCB1  53                 	db	83	;'S'
   835  00FCB2  45                 	db	69	;'E'
   836  00FCB3  52                 	db	82	;'R'
   837  00FCB4  56                 	db	86	;'V'
   838  00FCB5  4F                 	db	79	;'O'
   839  00FCB6  53                 	db	83	;'S'
   840  00FCB7  00                 	db	0
   841  00FCB8                     STR_41:
   842  00FCB8  4C                 	db	76	;'L'
   843  00FCB9  4F                 	db	79	;'O'
   844  00FCBA  47                 	db	71	;'G'
   845  00FCBB  20                 	db	32
   846  00FCBC  31                 	db	49	;'1'
   847  00FCBD  20                 	db	32
   848  00FCBE  20                 	db	32
   849  00FCBF  20                 	db	32
   850  00FCC0  20                 	db	32
   851  00FCC1  20                 	db	32
   852  00FCC2  20                 	db	32
   853  00FCC3  20                 	db	32
   854  00FCC4  20                 	db	32
   855  00FCC5  20                 	db	32
   856  00FCC6  20                 	db	32
   857  00FCC7  20                 	db	32
   858  00FCC8  00                 	db	0
   859  00FCC9                     STR_40:
   860  00FCC9  4C                 	db	76	;'L'
   861  00FCCA  4F                 	db	79	;'O'
   862  00FCCB  47                 	db	71	;'G'
   863  00FCCC  20                 	db	32
   864  00FCCD  32                 	db	50	;'2'
   865  00FCCE  20                 	db	32
   866  00FCCF  20                 	db	32
   867  00FCD0  20                 	db	32
   868  00FCD1  20                 	db	32
   869  00FCD2  20                 	db	32
   870  00FCD3  20                 	db	32
   871  00FCD4  20                 	db	32
   872  00FCD5  20                 	db	32
   873  00FCD6  20                 	db	32
   874  00FCD7  20                 	db	32
   875  00FCD8  20                 	db	32
   876  00FCD9  00                 	db	0
   877  00FCDA                     STR_44:
   878  00FCDA  4C                 	db	76	;'L'
   879  00FCDB  4F                 	db	79	;'O'
   880  00FCDC  47                 	db	71	;'G'
   881  00FCDD  20                 	db	32
   882  00FCDE  33                 	db	51	;'3'
   883  00FCDF  20                 	db	32
   884  00FCE0  20                 	db	32
   885  00FCE1  20                 	db	32
   886  00FCE2  20                 	db	32
   887  00FCE3  20                 	db	32
   888  00FCE4  20                 	db	32
   889  00FCE5  20                 	db	32
   890  00FCE6  20                 	db	32
   891  00FCE7  20                 	db	32
   892  00FCE8  20                 	db	32
   893  00FCE9  20                 	db	32
   894  00FCEA  00                 	db	0
   895  00FCEB                     STR_48:
   896  00FCEB  4C                 	db	76	;'L'
   897  00FCEC  4F                 	db	79	;'O'
   898  00FCED  47                 	db	71	;'G'
   899  00FCEE  20                 	db	32
   900  00FCEF  34                 	db	52	;'4'
   901  00FCF0  20                 	db	32
   902  00FCF1  20                 	db	32
   903  00FCF2  20                 	db	32
   904  00FCF3  20                 	db	32
   905  00FCF4  20                 	db	32
   906  00FCF5  20                 	db	32
   907  00FCF6  20                 	db	32
   908  00FCF7  20                 	db	32
   909  00FCF8  20                 	db	32
   910  00FCF9  20                 	db	32
   911  00FCFA  20                 	db	32
   912  00FCFB  00                 	db	0
   913  00FCFC                     STR_36:
   914  00FCFC  33                 	db	51	;'3'
   915  00FCFD  2E                 	db	46
   916  00FCFE  20                 	db	32
   917  00FCFF  4C                 	db	76	;'L'
   918  00FD00  4F                 	db	79	;'O'
   919  00FD01  47                 	db	71	;'G'
   920  00FD02  53                 	db	83	;'S'
   921  00FD03  20                 	db	32
   922  00FD04  20                 	db	32
   923  00FD05  20                 	db	32
   924  00FD06  20                 	db	32
   925  00FD07  20                 	db	32
   926  00FD08  20                 	db	32
   927  00FD09  20                 	db	32
   928  00FD0A  20                 	db	32
   929  00FD0B  20                 	db	32
   930  00FD0C  00                 	db	0
   931  00FD0D                     STR_32:
   932  00FD0D  32                 	db	50	;'2'
   933  00FD0E  2E                 	db	46
   934  00FD0F  20                 	db	32
   935  00FD10  53                 	db	83	;'S'
   936  00FD11  4F                 	db	79	;'O'
   937  00FD12  52                 	db	82	;'R'
   938  00FD13  54                 	db	84	;'T'
   939  00FD14  20                 	db	32
   940  00FD15  20                 	db	32
   941  00FD16  20                 	db	32
   942  00FD17  20                 	db	32
   943  00FD18  20                 	db	32
   944  00FD19  20                 	db	32
   945  00FD1A  20                 	db	32
   946  00FD1B  20                 	db	32
   947  00FD1C  20                 	db	32
   948  00FD1D  00                 	db	0
   949  00FD1E                     STR_33:
   950  00FD1E  31                 	db	49	;'1'
   951  00FD1F  2E                 	db	46
   952  00FD20  20                 	db	32
   953  00FD21  44                 	db	68	;'D'
   954  00FD22  41                 	db	65	;'A'
   955  00FD23  54                 	db	84	;'T'
   956  00FD24  45                 	db	69	;'E'
   957  00FD25  2F                 	db	47
   958  00FD26  54                 	db	84	;'T'
   959  00FD27  49                 	db	73	;'I'
   960  00FD28  4D                 	db	77	;'M'
   961  00FD29  45                 	db	69	;'E'
   962  00FD2A  20                 	db	32
   963  00FD2B  20                 	db	32
   964  00FD2C  20                 	db	32
   965  00FD2D  20                 	db	32
   966  00FD2E  00                 	db	0
   967  00FD2F                     STR_24:
   968  00FD2F  20                 	db	32
   969  00FD30  2D                 	db	45
   970  00FD31  2D                 	db	45
   971  00FD32  20                 	db	32
   972  00FD33  50                 	db	80	;'P'
   973  00FD34  4F                 	db	79	;'O'
   974  00FD35  50                 	db	80	;'P'
   975  00FD36  20                 	db	32
   976  00FD37  20                 	db	32
   977  00FD38  43                 	db	67	;'C'
   978  00FD39  41                 	db	65	;'A'
   979  00FD3A  4E                 	db	78	;'N'
   980  00FD3B  20                 	db	32
   981  00FD3C  2D                 	db	45
   982  00FD3D  2D                 	db	45
   983  00FD3E  20                 	db	32
   984  00FD3F  00                 	db	0
   985  00FD40                     STR_26:
   986  00FD40  20                 	db	32
   987  00FD41  2D                 	db	45
   988  00FD42  2D                 	db	45
   989  00FD43  20                 	db	32
   990  00FD44  53                 	db	83	;'S'
   991  00FD45  4F                 	db	79	;'O'
   992  00FD46  55                 	db	85	;'U'
   993  00FD47  50                 	db	80	;'P'
   994  00FD48  20                 	db	32
   995  00FD49  43                 	db	67	;'C'
   996  00FD4A  41                 	db	65	;'A'
   997  00FD4B  4E                 	db	78	;'N'
   998  00FD4C  20                 	db	32
   999  00FD4D  2D                 	db	45
  1000  00FD4E  2D                 	db	45
  1001  00FD4F  20                 	db	32
  1002  00FD50  00                 	db	0
  1003  00FD51                     STR_28:
  1004  00FD51  2D                 	db	45
  1005  00FD52  2D                 	db	45
  1006  00FD53  20                 	db	32
  1007  00FD54  54                 	db	84	;'T'
  1008  00FD55  4F                 	db	79	;'O'
  1009  00FD56  54                 	db	84	;'T'
  1010  00FD57  41                 	db	65	;'A'
  1011  00FD58  4C                 	db	76	;'L'
  1012  00FD59  20                 	db	32
  1013  00FD5A  43                 	db	67	;'C'
  1014  00FD5B  41                 	db	65	;'A'
  1015  00FD5C  4E                 	db	78	;'N'
  1016  00FD5D  53                 	db	83	;'S'
  1017  00FD5E  20                 	db	32
  1018  00FD5F  2D                 	db	45
  1019  00FD60  2D                 	db	45
  1020  00FD61  00                 	db	0
  1021  00FD62                     STR_39:
  1022  00FD62  4C                 	db	76	;'L'
  1023  00FD63  4F                 	db	79	;'O'
  1024  00FD64  47                 	db	71	;'G'
  1025  00FD65  20                 	db	32
  1026  00FD66  31                 	db	49	;'1'
  1027  00FD67  20                 	db	32
  1028  00FD68  20                 	db	32
  1029  00FD69  20                 	db	32
  1030  00FD6A  20                 	db	32
  1031  00FD6B  20                 	db	32
  1032  00FD6C  20                 	db	32
  1033  00FD6D  20                 	db	32
  1034  00FD6E  20                 	db	32
  1035  00FD6F  20                 	db	32
  1036  00FD70  20                 	db	32
  1037  00FD71  3C                 	db	60	;'<'
  1038  00FD72  00                 	db	0
  1039  00FD73                     STR_42:
  1040  00FD73  4C                 	db	76	;'L'
  1041  00FD74  4F                 	db	79	;'O'
  1042  00FD75  47                 	db	71	;'G'
  1043  00FD76  20                 	db	32
  1044  00FD77  32                 	db	50	;'2'
  1045  00FD78  20                 	db	32
  1046  00FD79  20                 	db	32
  1047  00FD7A  20                 	db	32
  1048  00FD7B  20                 	db	32
  1049  00FD7C  20                 	db	32
  1050  00FD7D  20                 	db	32
  1051  00FD7E  20                 	db	32
  1052  00FD7F  20                 	db	32
  1053  00FD80  20                 	db	32
  1054  00FD81  20                 	db	32
  1055  00FD82  3C                 	db	60	;'<'
  1056  00FD83  00                 	db	0
  1057  00FD84                     STR_46:
  1058  00FD84  4C                 	db	76	;'L'
  1059  00FD85  4F                 	db	79	;'O'
  1060  00FD86  47                 	db	71	;'G'
  1061  00FD87  20                 	db	32
  1062  00FD88  33                 	db	51	;'3'
  1063  00FD89  20                 	db	32
  1064  00FD8A  20                 	db	32
  1065  00FD8B  20                 	db	32
  1066  00FD8C  20                 	db	32
  1067  00FD8D  20                 	db	32
  1068  00FD8E  20                 	db	32
  1069  00FD8F  20                 	db	32
  1070  00FD90  20                 	db	32
  1071  00FD91  20                 	db	32
  1072  00FD92  20                 	db	32
  1073  00FD93  3C                 	db	60	;'<'
  1074  00FD94  00                 	db	0
  1075  00FD95                     STR_50:
  1076  00FD95  4C                 	db	76	;'L'
  1077  00FD96  4F                 	db	79	;'O'
  1078  00FD97  47                 	db	71	;'G'
  1079  00FD98  20                 	db	32
  1080  00FD99  34                 	db	52	;'4'
  1081  00FD9A  20                 	db	32
  1082  00FD9B  20                 	db	32
  1083  00FD9C  20                 	db	32
  1084  00FD9D  20                 	db	32
  1085  00FD9E  20                 	db	32
  1086  00FD9F  20                 	db	32
  1087  00FDA0  20                 	db	32
  1088  00FDA1  20                 	db	32
  1089  00FDA2  20                 	db	32
  1090  00FDA3  20                 	db	32
  1091  00FDA4  3C                 	db	60	;'<'
  1092  00FDA5  00                 	db	0
  1093  00FDA6                     STR_38:
  1094  00FDA6  33                 	db	51	;'3'
  1095  00FDA7  2E                 	db	46
  1096  00FDA8  20                 	db	32
  1097  00FDA9  4C                 	db	76	;'L'
  1098  00FDAA  4F                 	db	79	;'O'
  1099  00FDAB  47                 	db	71	;'G'
  1100  00FDAC  53                 	db	83	;'S'
  1101  00FDAD  20                 	db	32
  1102  00FDAE  20                 	db	32
  1103  00FDAF  20                 	db	32
  1104  00FDB0  20                 	db	32
  1105  00FDB1  20                 	db	32
  1106  00FDB2  20                 	db	32
  1107  00FDB3  20                 	db	32
  1108  00FDB4  20                 	db	32
  1109  00FDB5  3C                 	db	60	;'<'
  1110  00FDB6  00                 	db	0
  1111  00FDB7                     STR_34:
  1112  00FDB7  32                 	db	50	;'2'
  1113  00FDB8  2E                 	db	46
  1114  00FDB9  20                 	db	32
  1115  00FDBA  53                 	db	83	;'S'
  1116  00FDBB  4F                 	db	79	;'O'
  1117  00FDBC  52                 	db	82	;'R'
  1118  00FDBD  54                 	db	84	;'T'
  1119  00FDBE  20                 	db	32
  1120  00FDBF  20                 	db	32
  1121  00FDC0  20                 	db	32
  1122  00FDC1  20                 	db	32
  1123  00FDC2  20                 	db	32
  1124  00FDC3  20                 	db	32
  1125  00FDC4  20                 	db	32
  1126  00FDC5  20                 	db	32
  1127  00FDC6  3C                 	db	60	;'<'
  1128  00FDC7  00                 	db	0
  1129  00FDC8                     STR_31:
  1130  00FDC8  31                 	db	49	;'1'
  1131  00FDC9  2E                 	db	46
  1132  00FDCA  20                 	db	32
  1133  00FDCB  44                 	db	68	;'D'
  1134  00FDCC  41                 	db	65	;'A'
  1135  00FDCD  54                 	db	84	;'T'
  1136  00FDCE  45                 	db	69	;'E'
  1137  00FDCF  2F                 	db	47
  1138  00FDD0  54                 	db	84	;'T'
  1139  00FDD1  49                 	db	73	;'I'
  1140  00FDD2  4D                 	db	77	;'M'
  1141  00FDD3  45                 	db	69	;'E'
  1142  00FDD4  20                 	db	32
  1143  00FDD5  20                 	db	32
  1144  00FDD6  20                 	db	32
  1145  00FDD7  3C                 	db	60	;'<'
  1146  00FDD8  00                 	db	0
  1147  00FDD9                     STR_6:
  1148  00FDD9  50                 	db	80	;'P'
  1149  00FDDA  41                 	db	65	;'A'
  1150  00FDDB  55                 	db	85	;'U'
  1151  00FDDC  53                 	db	83	;'S'
  1152  00FDDD  45                 	db	69	;'E'
  1153  00FDDE  20                 	db	32
  1154  00FDDF  3C                 	db	60	;'<'
  1155  00FDE0  20                 	db	32
  1156  00FDE1  7C                 	db	124
  1157  00FDE2  20                 	db	32
  1158  00FDE3  42                 	db	66	;'B'
  1159  00FDE4  41                 	db	65	;'A'
  1160  00FDE5  43                 	db	67	;'C'
  1161  00FDE6  4B                 	db	75	;'K'
  1162  00FDE7  20                 	db	32
  1163  00FDE8  3E                 	db	62	;'>'
  1164  00FDE9  00                 	db	0
  1165  00FDEA                     STR_30:
  1166  00FDEA  50                 	db	80	;'P'
  1167  00FDEB  55                 	db	85	;'U'
  1168  00FDEC  53                 	db	83	;'S'
  1169  00FDED  48                 	db	72	;'H'
  1170  00FDEE  20                 	db	32
  1171  00FDEF  54                 	db	84	;'T'
  1172  00FDF0  4F                 	db	79	;'O'
  1173  00FDF1  20                 	db	32
  1174  00FDF2  43                 	db	67	;'C'
  1175  00FDF3  4F                 	db	79	;'O'
  1176  00FDF4  4E                 	db	78	;'N'
  1177  00FDF5  54                 	db	84	;'T'
  1178  00FDF6  49                 	db	73	;'I'
  1179  00FDF7  4E                 	db	78	;'N'
  1180  00FDF8  55                 	db	85	;'U'
  1181  00FDF9  45                 	db	69	;'E'
  1182  00FDFA  00                 	db	0
  1183  00FDFB                     STR_27:
  1184  00FDFB  4E                 	db	78	;'N'
  1185  00FDFC  4C                 	db	76	;'L'
  1186  00FDFD  41                 	db	65	;'A'
  1187  00FDFE  42                 	db	66	;'B'
  1188  00FDFF  3A                 	db	58	;':'
  1189  00FE00  20                 	db	32
  1190  00FE01  25                 	db	37
  1191  00FE02  64                 	db	100	;'d'
  1192  00FE03  7C                 	db	124
  1193  00FE04  4C                 	db	76	;'L'
  1194  00FE05  41                 	db	65	;'A'
  1195  00FE06  42                 	db	66	;'B'
  1196  00FE07  3A                 	db	58	;':'
  1197  00FE08  20                 	db	32
  1198  00FE09  25                 	db	37
  1199  00FE0A  64                 	db	100	;'d'
  1200  00FE0B  00                 	db	0
  1201  00FE0C                     STR_25:
  1202  00FE0C  4E                 	db	78	;'N'
  1203  00FE0D  54                 	db	84	;'T'
  1204  00FE0E  41                 	db	65	;'A'
  1205  00FE0F  42                 	db	66	;'B'
  1206  00FE10  3A                 	db	58	;':'
  1207  00FE11  20                 	db	32
  1208  00FE12  25                 	db	37
  1209  00FE13  64                 	db	100	;'d'
  1210  00FE14  7C                 	db	124
  1211  00FE15  54                 	db	84	;'T'
  1212  00FE16  41                 	db	65	;'A'
  1213  00FE17  42                 	db	66	;'B'
  1214  00FE18  3A                 	db	58	;':'
  1215  00FE19  20                 	db	32
  1216  00FE1A  25                 	db	37
  1217  00FE1B  64                 	db	100	;'d'
  1218  00FE1C  00                 	db	0
  1219  00FE1D                     STR_84:
  1220  00FE1D  4D                 	db	77	;'M'
  1221  00FE1E  41                 	db	65	;'A'
  1222  00FE1F  47                 	db	71	;'G'
  1223  00FE20  5F                 	db	95	;'_'
  1224  00FE21  73                 	db	115	;'s'
  1225  00FE22  69                 	db	105	;'i'
  1226  00FE23  67                 	db	103	;'g'
  1227  00FE24  6E                 	db	110	;'n'
  1228  00FE25  61                 	db	97	;'a'
  1229  00FE26  6C                 	db	108	;'l'
  1230  00FE27  3A                 	db	58	;':'
  1231  00FE28  20                 	db	32
  1232  00FE29  25                 	db	37
  1233  00FE2A  64                 	db	100	;'d'
  1234  00FE2B  20                 	db	32
  1235  00FE2C  00                 	db	0
  1236  00FE2D                     STR_104:
  1237  00FE2D  54                 	db	84	;'T'
  1238  00FE2E  53                 	db	83	;'S'
  1239  00FE2F  54                 	db	84	;'T'
  1240  00FE30  3A                 	db	58	;':'
  1241  00FE31  20                 	db	32
  1242  00FE32  54                 	db	84	;'T'
  1243  00FE33  49                 	db	73	;'I'
  1244  00FE34  4C                 	db	76	;'L'
  1245  00FE35  54                 	db	84	;'T'
  1246  00FE36  20                 	db	32
  1247  00FE37  53                 	db	83	;'S'
  1248  00FE38  45                 	db	69	;'E'
  1249  00FE39  52                 	db	82	;'R'
  1250  00FE3A  56                 	db	86	;'V'
  1251  00FE3B  4F                 	db	79	;'O'
  1252  00FE3C  00                 	db	0
  1253  00FE3D                     STR_65:
  1254  00FE3D  53                 	db	83	;'S'
  1255  00FE3E  4F                 	db	79	;'O'
  1256  00FE3F  52                 	db	82	;'R'
  1257  00FE40  54                 	db	84	;'T'
  1258  00FE41  49                 	db	73	;'I'
  1259  00FE42  4E                 	db	78	;'N'
  1260  00FE43  47                 	db	71	;'G'
  1261  00FE44  2E                 	db	46
  1262  00FE45  2E                 	db	46
  1263  00FE46  2E                 	db	46
  1264  00FE47  20                 	db	32
  1265  00FE48  20                 	db	32
  1266  00FE49  20                 	db	32
  1267  00FE4A  20                 	db	32
  1268  00FE4B  20                 	db	32
  1269  00FE4C  00                 	db	0
  1270  00FE4D                     STR_66:
  1271  00FE4D  54                 	db	84	;'T'
  1272  00FE4E  49                 	db	73	;'I'
  1273  00FE4F  4D                 	db	77	;'M'
  1274  00FE50  45                 	db	69	;'E'
  1275  00FE51  20                 	db	32
  1276  00FE52  25                 	db	37
  1277  00FE53  64                 	db	100	;'d'
  1278  00FE54  3A                 	db	58	;':'
  1279  00FE55  25                 	db	37
  1280  00FE56  30                 	db	48	;'0'
  1281  00FE57  32                 	db	50	;'2'
  1282  00FE58  64                 	db	100	;'d'
  1283  00FE59  20                 	db	32
  1284  00FE5A  20                 	db	32
  1285  00FE5B  20                 	db	32
  1286  00FE5C  00                 	db	0
  1287  00FE5D                     STR_4:
  1288  00FE5D  44                 	db	68	;'D'
  1289  00FE5E  49                 	db	73	;'I'
  1290  00FE5F  44                 	db	68	;'D'
  1291  00FE60  4E                 	db	78	;'N'
  1292  00FE61  27                 	db	39
  1293  00FE62  54                 	db	84	;'T'
  1294  00FE63  20                 	db	32
  1295  00FE64  43                 	db	67	;'C'
  1296  00FE65  4F                 	db	79	;'O'
  1297  00FE66  4D                 	db	77	;'M'
  1298  00FE67  50                 	db	80	;'P'
  1299  00FE68  4C                 	db	76	;'L'
  1300  00FE69  45                 	db	69	;'E'
  1301  00FE6A  54                 	db	84	;'T'
  1302  00FE6B  45                 	db	69	;'E'
  1303  00FE6C  00                 	db	0
  1304  00FE6D                     STR_123:
  1305  00FE6D  44                 	db	68	;'D'
  1306  00FE6E  3A                 	db	58	;':'
  1307  00FE6F  52                 	db	82	;'R'
  1308  00FE70  45                 	db	69	;'E'
  1309  00FE71  54                 	db	84	;'T'
  1310  00FE72  7C                 	db	124
  1311  00FE73  32                 	db	50	;'2'
  1312  00FE74  3A                 	db	58	;':'
  1313  00FE75  43                 	db	67	;'C'
  1314  00FE76  20                 	db	32
  1315  00FE77  25                 	db	37
  1316  00FE78  64                 	db	100	;'d'
  1317  00FE79  20                 	db	32
  1318  00FE7A  20                 	db	32
  1319  00FE7B  00                 	db	0
  1320  00FE7C                     STR_81:
  1321  00FE7C  49                 	db	73	;'I'
  1322  00FE7D  52                 	db	82	;'R'
  1323  00FE7E  5F                 	db	95	;'_'
  1324  00FE7F  73                 	db	115	;'s'
  1325  00FE80  69                 	db	105	;'i'
  1326  00FE81  67                 	db	103	;'g'
  1327  00FE82  6E                 	db	110	;'n'
  1328  00FE83  61                 	db	97	;'a'
  1329  00FE84  6C                 	db	108	;'l'
  1330  00FE85  3A                 	db	58	;':'
  1331  00FE86  20                 	db	32
  1332  00FE87  25                 	db	37
  1333  00FE88  64                 	db	100	;'d'
  1334  00FE89  20                 	db	32
  1335  00FE8A  00                 	db	0
  1336  00FE8B                     STR_110:
  1337  00FE8B  43                 	db	67	;'C'
  1338  00FE8C  41                 	db	65	;'A'
  1339  00FE8D  4D                 	db	77	;'M'
  1340  00FE8E  20                 	db	32
  1341  00FE8F  44                 	db	68	;'D'
  1342  00FE90  57                 	db	87	;'W'
  1343  00FE91  4E                 	db	78	;'N'
  1344  00FE92  20                 	db	32
  1345  00FE93  7C                 	db	124
  1346  00FE94  52                 	db	82	;'R'
  1347  00FE95  43                 	db	67	;'C'
  1348  00FE96  30                 	db	48	;'0'
  1349  00FE97  3D                 	db	61	;'='
  1350  00FE98  30                 	db	48	;'0'
  1351  00FE99  00                 	db	0
  1352  00FE9A                     STR_109:
  1353  00FE9A  43                 	db	67	;'C'
  1354  00FE9B  41                 	db	65	;'A'
  1355  00FE9C  4D                 	db	77	;'M'
  1356  00FE9D  20                 	db	32
  1357  00FE9E  55                 	db	85	;'U'
  1358  00FE9F  50                 	db	80	;'P'
  1359  00FEA0  20                 	db	32
  1360  00FEA1  20                 	db	32
  1361  00FEA2  7C                 	db	124
  1362  00FEA3  52                 	db	82	;'R'
  1363  00FEA4  43                 	db	67	;'C'
  1364  00FEA5  30                 	db	48	;'0'
  1365  00FEA6  3D                 	db	61	;'='
  1366  00FEA7  31                 	db	49	;'1'
  1367  00FEA8  00                 	db	0
  1368  00FEA9                     STR_83:
  1369  00FEA9  54                 	db	84	;'T'
  1370  00FEAA  53                 	db	83	;'S'
  1371  00FEAB  54                 	db	84	;'T'
  1372  00FEAC  3A                 	db	58	;':'
  1373  00FEAD  20                 	db	32
  1374  00FEAE  4D                 	db	77	;'M'
  1375  00FEAF  41                 	db	65	;'A'
  1376  00FEB0  47                 	db	71	;'G'
  1377  00FEB1  4E                 	db	78	;'N'
  1378  00FEB2  45                 	db	69	;'E'
  1379  00FEB3  54                 	db	84	;'T'
  1380  00FEB4  49                 	db	73	;'I'
  1381  00FEB5  53                 	db	83	;'S'
  1382  00FEB6  4D                 	db	77	;'M'
  1383  00FEB7  00                 	db	0
  1384  00FEB8                     STR_108:
  1385  00FEB8  54                 	db	84	;'T'
  1386  00FEB9  53                 	db	83	;'S'
  1387  00FEBA  54                 	db	84	;'T'
  1388  00FEBB  3A                 	db	58	;':'
  1389  00FEBC  20                 	db	32
  1390  00FEBD  43                 	db	67	;'C'
  1391  00FEBE  41                 	db	65	;'A'
  1392  00FEBF  4D                 	db	77	;'M'
  1393  00FEC0  20                 	db	32
  1394  00FEC1  53                 	db	83	;'S'
  1395  00FEC2  45                 	db	69	;'E'
  1396  00FEC3  52                 	db	82	;'R'
  1397  00FEC4  56                 	db	86	;'V'
  1398  00FEC5  4F                 	db	79	;'O'
  1399  00FEC6  00                 	db	0
  1400  00FEC7                     STR_97:
  1401  00FEC7  54                 	db	84	;'T'
  1402  00FEC8  53                 	db	83	;'S'
  1403  00FEC9  54                 	db	84	;'T'
  1404  00FECA  3A                 	db	58	;':'
  1405  00FECB  20                 	db	32
  1406  00FECC  50                 	db	80	;'P'
  1407  00FECD  41                 	db	65	;'A'
  1408  00FECE  4E                 	db	78	;'N'
  1409  00FECF  20                 	db	32
  1410  00FED0  53                 	db	83	;'S'
  1411  00FED1  45                 	db	69	;'E'
  1412  00FED2  52                 	db	82	;'R'
  1413  00FED3  56                 	db	86	;'V'
  1414  00FED4  4F                 	db	79	;'O'
  1415  00FED5  00                 	db	0
  1416  00FED6                     STR_76:
  1417  00FED6  41                 	db	65	;'A'
  1418  00FED7  4C                 	db	76	;'L'
  1419  00FED8  47                 	db	71	;'G'
  1420  00FED9  34                 	db	52	;'4'
  1421  00FEDA  3A                 	db	58	;':'
  1422  00FEDB  20                 	db	32
  1423  00FEDC  41                 	db	65	;'A'
  1424  00FEDD  4C                 	db	76	;'L'
  1425  00FEDE  4C                 	db	76	;'L'
  1426  00FEDF  20                 	db	32
  1427  00FEE0  43                 	db	67	;'C'
  1428  00FEE1  41                 	db	65	;'A'
  1429  00FEE2  4E                 	db	78	;'N'
  1430  00FEE3  53                 	db	83	;'S'
  1431  00FEE4  00                 	db	0
  1432  00FEE5                     STR_91:
  1433  00FEE5  54                 	db	84	;'T'
  1434  00FEE6  53                 	db	83	;'S'
  1435  00FEE7  54                 	db	84	;'T'
  1436  00FEE8  3A                 	db	58	;':'
  1437  00FEE9  20                 	db	32
  1438  00FEEA  44                 	db	68	;'D'
  1439  00FEEB  43                 	db	67	;'C'
  1440  00FEEC  20                 	db	32
  1441  00FEED  4D                 	db	77	;'M'
  1442  00FEEE  4F                 	db	79	;'O'
  1443  00FEEF  54                 	db	84	;'T'
  1444  00FEF0  4F                 	db	79	;'O'
  1445  00FEF1  52                 	db	82	;'R'
  1446  00FEF2  53                 	db	83	;'S'
  1447  00FEF3  00                 	db	0
  1448  00FEF4                     STR_71:
  1449  00FEF4  41                 	db	65	;'A'
  1450  00FEF5  4C                 	db	76	;'L'
  1451  00FEF6  47                 	db	71	;'G'
  1452  00FEF7  4F                 	db	79	;'O'
  1453  00FEF8  52                 	db	82	;'R'
  1454  00FEF9  49                 	db	73	;'I'
  1455  00FEFA  54                 	db	84	;'T'
  1456  00FEFB  48                 	db	72	;'H'
  1457  00FEFC  4D                 	db	77	;'M'
  1458  00FEFD  20                 	db	32
  1459  00FEFE  54                 	db	84	;'T'
  1460  00FEFF  45                 	db	69	;'E'
  1461  00FF00  53                 	db	83	;'S'
  1462  00FF01  54                 	db	84	;'T'
  1463  00FF02  00                 	db	0
  1464  00FF03                     STR_92:
  1465  00FF03  50                 	db	80	;'P'
  1466  00FF04  49                 	db	73	;'I'
  1467  00FF05  4E                 	db	78	;'N'
  1468  00FF06  20                 	db	32
  1469  00FF07  52                 	db	82	;'R'
  1470  00FF08  41                 	db	65	;'A'
  1471  00FF09  35                 	db	53	;'5'
  1472  00FF0A  20                 	db	32
  1473  00FF0B  48                 	db	72	;'H'
  1474  00FF0C  49                 	db	73	;'I'
  1475  00FF0D  47                 	db	71	;'G'
  1476  00FF0E  48                 	db	72	;'H'
  1477  00FF0F  2E                 	db	46
  1478  00FF10  00                 	db	0
  1479  00FF11                     STR_74:
  1480  00FF11  41                 	db	65	;'A'
  1481  00FF12  4C                 	db	76	;'L'
  1482  00FF13  47                 	db	71	;'G'
  1483  00FF14  32                 	db	50	;'2'
  1484  00FF15  3A                 	db	58	;':'
  1485  00FF16  20                 	db	32
  1486  00FF17  31                 	db	49	;'1'
  1487  00FF18  32                 	db	50	;'2'
  1488  00FF19  20                 	db	32
  1489  00FF1A  43                 	db	67	;'C'
  1490  00FF1B  41                 	db	65	;'A'
  1491  00FF1C  4E                 	db	78	;'N'
  1492  00FF1D  53                 	db	83	;'S'
  1493  00FF1E  00                 	db	0
  1494  00FF1F                     STR_77:
  1495  00FF1F  41                 	db	65	;'A'
  1496  00FF20  4C                 	db	76	;'L'
  1497  00FF21  47                 	db	71	;'G'
  1498  00FF22  35                 	db	53	;'5'
  1499  00FF23  3A                 	db	58	;':'
  1500  00FF24  20                 	db	32
  1501  00FF25  4E                 	db	78	;'N'
  1502  00FF26  4F                 	db	79	;'O'
  1503  00FF27  20                 	db	32
  1504  00FF28  43                 	db	67	;'C'
  1505  00FF29  41                 	db	65	;'A'
  1506  00FF2A  4E                 	db	78	;'N'
  1507  00FF2B  53                 	db	83	;'S'
  1508  00FF2C  00                 	db	0
  1509  00FF2D                     STR_72:
  1510  00FF2D  50                 	db	80	;'P'
  1511  00FF2E  55                 	db	85	;'U'
  1512  00FF2F  53                 	db	83	;'S'
  1513  00FF30  48                 	db	72	;'H'
  1514  00FF31  20                 	db	32
  1515  00FF32  54                 	db	84	;'T'
  1516  00FF33  4F                 	db	79	;'O'
  1517  00FF34  20                 	db	32
  1518  00FF35  53                 	db	83	;'S'
  1519  00FF36  54                 	db	84	;'T'
  1520  00FF37  41                 	db	65	;'A'
  1521  00FF38  52                 	db	82	;'R'
  1522  00FF39  54                 	db	84	;'T'
  1523  00FF3A  00                 	db	0
  1524  00FF3B                     STR_23:
  1525  00FF3B  25                 	db	37
  1526  00FF3C  64                 	db	100	;'d'
  1527  00FF3D  20                 	db	32
  1528  00FF3E  4D                 	db	77	;'M'
  1529  00FF3F  49                 	db	73	;'I'
  1530  00FF40  4E                 	db	78	;'N'
  1531  00FF41  20                 	db	32
  1532  00FF42  25                 	db	37
  1533  00FF43  64                 	db	100	;'d'
  1534  00FF44  20                 	db	32
  1535  00FF45  53                 	db	83	;'S'
  1536  00FF46  45                 	db	69	;'E'
  1537  00FF47  43                 	db	67	;'C'
  1538  00FF48  00                 	db	0
  1539  00FF49                     STR_2:
  1540  00FF49  54                 	db	84	;'T'
  1541  00FF4A  49                 	db	73	;'I'
  1542  00FF4B  4D                 	db	77	;'M'
  1543  00FF4C  45                 	db	69	;'E'
  1544  00FF4D  3A                 	db	58	;':'
  1545  00FF4E  20                 	db	32
  1546  00FF4F  25                 	db	37
  1547  00FF50  64                 	db	100	;'d'
  1548  00FF51  3A                 	db	58	;':'
  1549  00FF52  25                 	db	37
  1550  00FF53  30                 	db	48	;'0'
  1551  00FF54  32                 	db	50	;'2'
  1552  00FF55  64                 	db	100	;'d'
  1553  00FF56  00                 	db	0
  1554  00FF57                     STR_80:
  1555  00FF57  54                 	db	84	;'T'
  1556  00FF58  53                 	db	83	;'S'
  1557  00FF59  54                 	db	84	;'T'
  1558  00FF5A  3A                 	db	58	;':'
  1559  00FF5B  20                 	db	32
  1560  00FF5C  49                 	db	73	;'I'
  1561  00FF5D  52                 	db	82	;'R'
  1562  00FF5E  20                 	db	32
  1563  00FF5F  53                 	db	83	;'S'
  1564  00FF60  4E                 	db	78	;'N'
  1565  00FF61  53                 	db	83	;'S'
  1566  00FF62  52                 	db	82	;'R'
  1567  00FF63  00                 	db	0
  1568  00FF64                     STR_75:
  1569  00FF64  41                 	db	65	;'A'
  1570  00FF65  4C                 	db	76	;'L'
  1571  00FF66  47                 	db	71	;'G'
  1572  00FF67  33                 	db	51	;'3'
  1573  00FF68  3A                 	db	58	;':'
  1574  00FF69  20                 	db	32
  1575  00FF6A  31                 	db	49	;'1'
  1576  00FF6B  20                 	db	32
  1577  00FF6C  43                 	db	67	;'C'
  1578  00FF6D  41                 	db	65	;'A'
  1579  00FF6E  4E                 	db	78	;'N'
  1580  00FF6F  00                 	db	0
  1581  00FF70                     STR_94:
  1582  00FF70  50                 	db	80	;'P'
  1583  00FF71  49                 	db	73	;'I'
  1584  00FF72  4E                 	db	78	;'N'
  1585  00FF73  20                 	db	32
  1586  00FF74  52                 	db	82	;'R'
  1587  00FF75  41                 	db	65	;'A'
  1588  00FF76  33                 	db	51	;'3'
  1589  00FF77  2E                 	db	46
  1590  00FF78  2E                 	db	46
  1591  00FF79  2E                 	db	46
  1592  00FF7A  00                 	db	0
  1593  00FF7B                     STR_96:
  1594  00FF7B  50                 	db	80	;'P'
  1595  00FF7C  49                 	db	73	;'I'
  1596  00FF7D  4E                 	db	78	;'N'
  1597  00FF7E  20                 	db	32
  1598  00FF7F  52                 	db	82	;'R'
  1599  00FF80  41                 	db	65	;'A'
  1600  00FF81  34                 	db	52	;'4'
  1601  00FF82  2E                 	db	46
  1602  00FF83  2E                 	db	46
  1603  00FF84  2E                 	db	46
  1604  00FF85  00                 	db	0
  1605  00FF86                     STR_85:
  1606  00FF86  54                 	db	84	;'T'
  1607  00FF87  53                 	db	83	;'S'
  1608  00FF88  54                 	db	84	;'T'
  1609  00FF89  3A                 	db	58	;':'
  1610  00FF8A  20                 	db	32
  1611  00FF8B  43                 	db	67	;'C'
  1612  00FF8C  4F                 	db	79	;'O'
  1613  00FF8D  4E                 	db	78	;'N'
  1614  00FF8E  44                 	db	68	;'D'
  1615  00FF8F  00                 	db	0
  1616  00FF90                     STR_89:
  1617  00FF90  41                 	db	65	;'A'
  1618  00FF91  43                 	db	67	;'C'
  1619  00FF92  54                 	db	84	;'T'
  1620  00FF93  55                 	db	85	;'U'
  1621  00FF94  41                 	db	65	;'A'
  1622  00FF95  54                 	db	84	;'T'
  1623  00FF96  4F                 	db	79	;'O'
  1624  00FF97  52                 	db	82	;'R'
  1625  00FF98  53                 	db	83	;'S'
  1626  00FF99  00                 	db	0
  1627  00FF9A                     STR_22:
  1628  00FF9A  44                 	db	68	;'D'
  1629  00FF9B  55                 	db	85	;'U'
  1630  00FF9C  52                 	db	82	;'R'
  1631  00FF9D  41                 	db	65	;'A'
  1632  00FF9E  54                 	db	84	;'T'
  1633  00FF9F  49                 	db	73	;'I'
  1634  00FFA0  4F                 	db	79	;'O'
  1635  00FFA1  4E                 	db	78	;'N'
  1636  00FFA2  3A                 	db	58	;':'
  1637  00FFA3  00                 	db	0
  1638  00FFA4                     STR_87:
  1639  00FFA4  43                 	db	67	;'C'
  1640  00FFA5  4F                 	db	79	;'O'
  1641  00FFA6  4E                 	db	78	;'N'
  1642  00FFA7  44                 	db	68	;'D'
  1643  00FFA8  3A                 	db	58	;':'
  1644  00FFA9  20                 	db	32
  1645  00FFAA  25                 	db	37
  1646  00FFAB  64                 	db	100	;'d'
  1647  00FFAC  00                 	db	0
  1648  00FFAD                     STR_78:
  1649  00FFAD  53                 	db	83	;'S'
  1650  00FFAE  45                 	db	69	;'E'
  1651  00FFAF  4E                 	db	78	;'N'
  1652  00FFB0  53                 	db	83	;'S'
  1653  00FFB1  4F                 	db	79	;'O'
  1654  00FFB2  52                 	db	82	;'R'
  1655  00FFB3  53                 	db	83	;'S'
  1656  00FFB4  00                 	db	0
  1657  00FFB5                     STR_131:
  1658  00FFB5  28                 	db	40
  1659  00FFB6  6E                 	db	110	;'n'
  1660  00FFB7  75                 	db	117	;'u'
  1661  00FFB8  6C                 	db	108	;'l'
  1662  00FFB9  6C                 	db	108	;'l'
  1663  00FFBA  29                 	db	41
  1664  00FFBB  00                 	db	0
  1665  00FFBC                     STR_68:
  1666  00FFBC  46                 	db	70	;'F'
  1667  00FFBD  41                 	db	65	;'A'
  1668  00FFBE  49                 	db	73	;'I'
  1669  00FFBF  4C                 	db	76	;'L'
  1670  00FFC0  45                 	db	69	;'E'
  1671  00FFC1  44                 	db	68	;'D'
  1672  00FFC2  00                 	db	0
  1673  00FFC3                     STR_7:
  1674  00FFC3  53                 	db	83	;'S'
  1675  00FFC4  54                 	db	84	;'T'
  1676  00FFC5  41                 	db	65	;'A'
  1677  00FFC6  52                 	db	82	;'R'
  1678  00FFC7  54                 	db	84	;'T'
  1679  00FFC8  3A                 	db	58	;':'
  1680  00FFC9  00                 	db	0
  1681  00FFCA                     STR_9:
  1682  00FFCA  46                 	db	70	;'F'
  1683  00FFCB  45                 	db	69	;'E'
  1684  00FFCC  42                 	db	66	;'B'
  1685  00FFCD  00                 	db	0
  1686  00FFCE                     STR_19:
  1687  00FFCE  44                 	db	68	;'D'
  1688  00FFCF  45                 	db	69	;'E'
  1689  00FFD0  43                 	db	67	;'C'
  1690  00FFD1  00                 	db	0
  1691  00FFD2                     STR_15:
  1692  00FFD2  41                 	db	65	;'A'
  1693  00FFD3  55                 	db	85	;'U'
  1694  00FFD4  47                 	db	71	;'G'
  1695  00FFD5  00                 	db	0
  1696  00FFD6                     STR_14:
  1697  00FFD6  4A                 	db	74	;'J'
  1698  00FFD7  55                 	db	85	;'U'
  1699  00FFD8  4C                 	db	76	;'L'
  1700  00FFD9  00                 	db	0
  1701  00FFDA                     STR_8:
  1702  00FFDA  4A                 	db	74	;'J'
  1703  00FFDB  41                 	db	65	;'A'
  1704  00FFDC  4E                 	db	78	;'N'
  1705  00FFDD  00                 	db	0
  1706  00FFDE                     STR_13:
  1707  00FFDE  4A                 	db	74	;'J'
  1708  00FFDF  55                 	db	85	;'U'
  1709  00FFE0  4E                 	db	78	;'N'
  1710  00FFE1  00                 	db	0
  1711  00FFE2                     STR_16:
  1712  00FFE2  53                 	db	83	;'S'
  1713  00FFE3  45                 	db	69	;'E'
  1714  00FFE4  50                 	db	80	;'P'
  1715  00FFE5  00                 	db	0
  1716  00FFE6                     STR_10:
  1717  00FFE6  4D                 	db	77	;'M'
  1718  00FFE7  41                 	db	65	;'A'
  1719  00FFE8  52                 	db	82	;'R'
  1720  00FFE9  00                 	db	0
  1721  00FFEA                     STR_11:
  1722  00FFEA  41                 	db	65	;'A'
  1723  00FFEB  50                 	db	80	;'P'
  1724  00FFEC  52                 	db	82	;'R'
  1725  00FFED  00                 	db	0
  1726  00FFEE                     STR_20:
  1727  00FFEE  45                 	db	69	;'E'
  1728  00FFEF  52                 	db	82	;'R'
  1729  00FFF0  52                 	db	82	;'R'
  1730  00FFF1  00                 	db	0
  1731  00FFF2                     STR_17:
  1732  00FFF2  4F                 	db	79	;'O'
  1733  00FFF3  43                 	db	67	;'C'
  1734  00FFF4  54                 	db	84	;'T'
  1735  00FFF5  00                 	db	0
  1736  00FFF6                     STR_18:
  1737  00FFF6  4E                 	db	78	;'N'
  1738  00FFF7  4F                 	db	79	;'O'
  1739  00FFF8  56                 	db	86	;'V'
  1740  00FFF9  00                 	db	0
  1741  00FFFA                     STR_12:
  1742  00FFFA  4D                 	db	77	;'M'
  1743  00FFFB  41                 	db	65	;'A'
  1744  00FFFC  59                 	db	89	;'Y'
  1745  00FFFD  00                 	db	0
  1746  0000                     
  1747                           ; #config settings
  1748  00FFFE  00                 	db	0	; dummy byte at the end
  1749  0000                     
  1750                           	psect	cinit
  1751  0053AE                     __pcinit:
  1752                           	opt stack 0
  1753  0053AE                     start_initialization:
  1754                           	opt stack 0
  1755  0053AE                     __initialization:
  1756                           	opt stack 0
  1757                           
  1758                           ; Initialize objects allocated to BANK1 (8 bytes)
  1759                           ; load TBLPTR registers with __pidataBANK1
  1760  0053AE  0EF4               	movlw	low __pidataBANK1
  1761  0053B0  6EF6               	movwf	tblptrl,c
  1762  0053B2  0E5B               	movlw	high __pidataBANK1
  1763  0053B4  6EF7               	movwf	tblptrh,c
  1764  0053B6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1765  0053B8  6EF8               	movwf	tblptru,c
  1766  0053BA  EE01  F04B         	lfsr	0,__pdataBANK1
  1767  0053BE  EE10 F008          	lfsr	1,8
  1768  0053C2                     copy_data0:
  1769  0053C2  0009               	tblrd		*+
  1770  0053C4  CFF5 FFEE          	movff	tablat,postinc0
  1771  0053C8  50E5               	movf	postdec1,w,c
  1772  0053CA  50E1               	movf	fsr1l,w,c
  1773  0053CC  E1FA               	bnz	copy_data0
  1774                           
  1775                           ; Clear objects allocated to BANK1 (75 bytes)
  1776  0053CE  EE01  F000         	lfsr	0,__pbssBANK1
  1777  0053D2  0E4B               	movlw	75
  1778  0053D4                     clear_0:
  1779  0053D4  6AEE               	clrf	postinc0,c
  1780  0053D6  06E8               	decf	wreg,f,c
  1781  0053D8  E1FD               	bnz	clear_0
  1782                           
  1783                           ; Clear objects allocated to BANK0 (38 bytes)
  1784  0053DA  EE00  F0DA         	lfsr	0,__pbssBANK0
  1785  0053DE  0E26               	movlw	38
  1786  0053E0                     clear_1:
  1787  0053E0  6AEE               	clrf	postinc0,c
  1788  0053E2  06E8               	decf	wreg,f,c
  1789  0053E4  E1FD               	bnz	clear_1
  1790                           
  1791                           ; Clear objects allocated to COMRAM (35 bytes)
  1792  0053E6  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1793  0053EA  0E23               	movlw	35
  1794  0053EC                     clear_2:
  1795  0053EC  6AEE               	clrf	postinc0,c
  1796  0053EE  06E8               	decf	wreg,f,c
  1797  0053F0  E1FD               	bnz	clear_2
  1798  0053F2                     end_of_initialization:
  1799                           	opt stack 0
  1800  0053F2                     __end_of__initialization:
  1801                           	opt stack 0
  1802  0053F2  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1803  0053F4  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1804  0053F6  0100               	movlb	0
  1805  0053F8  EFD1  F023         	goto	_main	;jump to C main() function
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1l	equ	0xFE1
  1814                           
  1815                           	psect	bssCOMRAM
  1816  00005B                     __pbssCOMRAM:
  1817                           	opt stack 0
  1818  00005B                     _servoTimes:
  1819                           	opt stack 0
  1820  00005B                     	ds	8
  1821  000063                     _back:
  1822                           	opt stack 0
  1823  000063                     	ds	2
  1824  000065                     _down:
  1825                           	opt stack 0
  1826  000065                     	ds	2
  1827  000067                     _enter:
  1828                           	opt stack 0
  1829  000067                     	ds	2
  1830  000069                     _f_panning_to_bin:
  1831                           	opt stack 0
  1832  000069                     	ds	2
  1833  00006B                     _pan_servo_state:
  1834                           	opt stack 0
  1835  00006B                     	ds	2
  1836  00006D                     _servo_timer_counter:
  1837                           	opt stack 0
  1838  00006D                     	ds	2
  1839  00006F                     _servo_timer_target:
  1840                           	opt stack 0
  1841  00006F                     	ds	2
  1842  000071                     _tilt_servo_state:
  1843                           	opt stack 0
  1844  000071                     	ds	2
  1845  000073                     _timer2_counter:
  1846                           	opt stack 0
  1847  000073                     	ds	2
  1848  000075                     _up:
  1849                           	opt stack 0
  1850  000075                     	ds	2
  1851  000077                     _was_low_1:
  1852                           	opt stack 0
  1853  000077                     	ds	2
  1854  000079                     _was_low_2:
  1855                           	opt stack 0
  1856  000079                     	ds	2
  1857  00007B                     _was_low_3:
  1858                           	opt stack 0
  1859  00007B                     	ds	2
  1860  00007D                     _input:
  1861                           	opt stack 0
  1862  00007D                     	ds	1
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           postinc0	equ	0xFEE
  1868                           wreg	equ	0xFE8
  1869                           postdec1	equ	0xFE5
  1870                           fsr1l	equ	0xFE1
  1871                           
  1872                           	psect	bssBANK0
  1873  0000DA                     __pbssBANK0:
  1874                           	opt stack 0
  1875  0000DA                     _sensor_outputs:
  1876                           	opt stack 0
  1877  0000DA                     	ds	4
  1878  0000DE                     _COND_signal:
  1879                           	opt stack 0
  1880  0000DE                     	ds	2
  1881  0000E0                     _IR_signal:
  1882                           	opt stack 0
  1883  0000E0                     	ds	2
  1884  0000E2                     _MAG_signal:
  1885                           	opt stack 0
  1886  0000E2                     	ds	2
  1887  0000E4                     _RTCflag:
  1888                           	opt stack 0
  1889  0000E4                     	ds	2
  1890  0000E6                     _cur_state:
  1891                           	opt stack 0
  1892  0000E6                     	ds	2
  1893  0000E8                     _debug:
  1894                           	opt stack 0
  1895  0000E8                     	ds	2
  1896  0000EA                     _f_arm_position:
  1897                           	opt stack 0
  1898  0000EA                     	ds	2
  1899  0000EC                     _f_lastCan:
  1900                           	opt stack 0
  1901  0000EC                     	ds	2
  1902  0000EE                     _f_loadingNewCan:
  1903                           	opt stack 0
  1904  0000EE                     	ds	2
  1905  0000F0                     _log:
  1906                           	opt stack 0
  1907  0000F0                     	ds	2
  1908  0000F2                     _log_completion:
  1909                           	opt stack 0
  1910  0000F2                     	ds	2
  1911  0000F4                     _log_count_pop_no_tab:
  1912                           	opt stack 0
  1913  0000F4                     	ds	2
  1914  0000F6                     _log_total_time:
  1915                           	opt stack 0
  1916  0000F6                     	ds	2
  1917  0000F8                     _logstate:
  1918                           	opt stack 0
  1919  0000F8                     	ds	2
  1920  0000FA                     _total_time:
  1921                           	opt stack 0
  1922  0000FA                     	ds	2
  1923  0000FC                     _machine_state:
  1924                           	opt stack 0
  1925  0000FC                     	ds	1
  1926  0000FD                     _sel:
  1927                           	opt stack 0
  1928  0000FD                     	ds	1
  1929  0000FE                     _count_total:
  1930                           	opt stack 0
  1931  0000FE                     	ds	2
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1l	equ	0xFE1
  1940                           
  1941                           	psect	bssBANK1
  1942  000100                     __pbssBANK1:
  1943                           	opt stack 0
  1944  000100                     _log_startTime:
  1945                           	opt stack 0
  1946  000100                     	ds	14
  1947  00010E                     _startTime:
  1948                           	opt stack 0
  1949  00010E                     	ds	14
  1950  00011C                     _time:
  1951                           	opt stack 0
  1952  00011C                     	ds	7
  1953  000123                     _count_can_no_lab:
  1954                           	opt stack 0
  1955  000123                     	ds	2
  1956  000125                     _count_can_w_lab:
  1957                           	opt stack 0
  1958  000125                     	ds	2
  1959  000127                     _count_pop_no_tab:
  1960                           	opt stack 0
  1961  000127                     	ds	2
  1962  000129                     _count_pop_w_tab:
  1963                           	opt stack 0
  1964  000129                     	ds	2
  1965  00012B                     _cur_can:
  1966                           	opt stack 0
  1967  00012B                     	ds	2
  1968  00012D                     _f_ID_receive:
  1969                           	opt stack 0
  1970  00012D                     	ds	2
  1971  00012F                     _f_can_coming_to_ID:
  1972                           	opt stack 0
  1973  00012F                     	ds	2
  1974  000131                     _f_can_coming_to_distribution:
  1975                           	opt stack 0
  1976  000131                     	ds	2
  1977  000133                     _f_can_distributed:
  1978                           	opt stack 0
  1979  000133                     	ds	2
  1980  000135                     _f_most_recent_sort_time:
  1981                           	opt stack 0
  1982  000135                     	ds	2
  1983  000137                     _first:
  1984                           	opt stack 0
  1985  000137                     	ds	2
  1986  000139                     _firstboot:
  1987                           	opt stack 0
  1988  000139                     	ds	2
  1989  00013B                     _i:
  1990                           	opt stack 0
  1991  00013B                     	ds	2
  1992  00013D                     _log_count_can_no_lab:
  1993                           	opt stack 0
  1994  00013D                     	ds	2
  1995  00013F                     _log_count_can_w_lab:
  1996                           	opt stack 0
  1997  00013F                     	ds	2
  1998  000141                     _log_count_pop_w_tab:
  1999                           	opt stack 0
  2000  000141                     	ds	2
  2001  000143                     _log_count_total:
  2002                           	opt stack 0
  2003  000143                     	ds	2
  2004  000145                     _most_recent_sort_time:
  2005                           	opt stack 0
  2006  000145                     	ds	2
  2007  000147                     _motor_toggle_count:
  2008                           	opt stack 0
  2009  000147                     	ds	2
  2010  000149                     _var:
  2011                           	opt stack 0
  2012  000149                     	ds	2
  2013                           tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           postinc0	equ	0xFEE
  2018                           wreg	equ	0xFE8
  2019                           postdec1	equ	0xFE5
  2020                           fsr1l	equ	0xFE1
  2021                           
  2022                           	psect	dataBANK1
  2023  00014B                     __pdataBANK1:
  2024                           	opt stack 0
  2025  00014B                     UI@F3247:
  2026                           	opt stack 0
  2027  00014B                     	ds	4
  2028  00014F                     printRTC@F3237:
  2029                           	opt stack 0
  2030  00014F                     	ds	4
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           postinc0	equ	0xFEE
  2036                           wreg	equ	0xFE8
  2037                           postdec1	equ	0xFE5
  2038                           fsr1l	equ	0xFE1
  2039                           
  2040                           	psect	cstackBANK0
  2041  000080                     __pcstackBANK0:
  2042                           	opt stack 0
  2043  000080                     ??_delay_ms:
  2044  000080                     ??_isdigit:
  2045  000080                     ??_readADC:
  2046  000080                     ??_I2C_Master_Wait:
  2047  000080                     ?___wmul:
  2048                           	opt stack 0
  2049  000080                     ?___awmod:
  2050                           	opt stack 0
  2051  000080                     ?___lwdiv:
  2052                           	opt stack 0
  2053  000080                     ?___ftpack:
  2054                           	opt stack 0
  2055  000080                     ?___lldiv:
  2056                           	opt stack 0
  2057  000080                     lcdNibble@temp:
  2058                           	opt stack 0
  2059  000080                     initTime@m:
  2060                           	opt stack 0
  2061  000080                     updateServoPosition@time_us:
  2062                           	opt stack 0
  2063  000080                     EEPROM_read@address:
  2064                           	opt stack 0
  2065  000080                     ___wmul@multiplier:
  2066                           	opt stack 0
  2067  000080                     ___awmod@dividend:
  2068                           	opt stack 0
  2069  000080                     ___lwdiv@dividend:
  2070                           	opt stack 0
  2071  000080                     strcpy@to:
  2072                           	opt stack 0
  2073  000080                     ___ftpack@arg:
  2074                           	opt stack 0
  2075  000080                     ___lldiv@dividend:
  2076                           	opt stack 0
  2077                           
  2078                           ; 4 bytes @ 0x0
  2079  000080                     	ds	1
  2080  000081                     readADC@channel:
  2081                           	opt stack 0
  2082  000081                     I2C_Master_Read@a:
  2083                           	opt stack 0
  2084  000081                     lcdNibble@data:
  2085                           	opt stack 0
  2086  000081                     initTime@h:
  2087                           	opt stack 0
  2088  000081                     delay_ms@milliseconds:
  2089                           	opt stack 0
  2090  000081                     _isdigit$2069:
  2091                           	opt stack 0
  2092  000081                     I2C_Master_Write@d:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0x1
  2096  000081                     	ds	1
  2097  000082                     ??_readIR:
  2098  000082                     ??_readMAG:
  2099  000082                     ??_readCOND:
  2100  000082                     I2C_Master_Read@temp:
  2101                           	opt stack 0
  2102  000082                     lcdInst@data:
  2103                           	opt stack 0
  2104  000082                     putch@data:
  2105                           	opt stack 0
  2106  000082                     initTime@w:
  2107                           	opt stack 0
  2108  000082                     isdigit@c:
  2109                           	opt stack 0
  2110  000082                     updateServoPosition@timer:
  2111                           	opt stack 0
  2112  000082                     ___wmul@multiplicand:
  2113                           	opt stack 0
  2114  000082                     ___awmod@divisor:
  2115                           	opt stack 0
  2116  000082                     ___lwdiv@divisor:
  2117                           	opt stack 0
  2118  000082                     strcpy@from:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x2
  2122  000082                     	ds	1
  2123  000083                     ??_initLCD:
  2124  000083                     initTime@DD:
  2125                           	opt stack 0
  2126  000083                     ___ftpack@exp:
  2127                           	opt stack 0
  2128  000083                     getRTC@i:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x3
  2132  000083                     	ds	1
  2133  000084                     ??_updateServoPosition:
  2134  000084                     initTime@MM:
  2135                           	opt stack 0
  2136  000084                     ___awmod@counter:
  2137                           	opt stack 0
  2138  000084                     ___ftpack@sign:
  2139                           	opt stack 0
  2140  000084                     readIR@res:
  2141                           	opt stack 0
  2142  000084                     readMAG@res:
  2143                           	opt stack 0
  2144  000084                     readCOND@res:
  2145                           	opt stack 0
  2146  000084                     ___wmul@product:
  2147                           	opt stack 0
  2148  000084                     ___lwdiv@quotient:
  2149                           	opt stack 0
  2150  000084                     strcpy@cp:
  2151                           	opt stack 0
  2152  000084                     ___lldiv@divisor:
  2153                           	opt stack 0
  2154                           
  2155                           ; 4 bytes @ 0x4
  2156  000084                     	ds	1
  2157  000085                     ??_initSortTimer:
  2158  000085                     ??___ftpack:
  2159  000085                     initTime@YY:
  2160                           	opt stack 0
  2161  000085                     ___awmod@sign:
  2162                           	opt stack 0
  2163                           
  2164                           ; 1 bytes @ 0x5
  2165  000085                     	ds	1
  2166  000086                     ??_getIR:
  2167  000086                     ??_getMAG:
  2168  000086                     ?___awdiv:
  2169                           	opt stack 0
  2170  000086                     initTime@s:
  2171                           	opt stack 0
  2172  000086                     ___lwdiv@counter:
  2173                           	opt stack 0
  2174  000086                     updateServoPosition@my_time:
  2175                           	opt stack 0
  2176  000086                     ___awdiv@dividend:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x6
  2180  000086                     	ds	1
  2181  000087                     ?___lwmod:
  2182                           	opt stack 0
  2183  000087                     getIR@i:
  2184                           	opt stack 0
  2185  000087                     ___lwmod@dividend:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x7
  2189  000087                     	ds	1
  2190  000088                     ??_Distribution:
  2191  000088                     ??_initServos:
  2192  000088                     initSortTimer@i:
  2193                           	opt stack 0
  2194  000088                     ___awdiv@divisor:
  2195                           	opt stack 0
  2196  000088                     ___lldiv@quotient:
  2197                           	opt stack 0
  2198                           
  2199                           ; 4 bytes @ 0x8
  2200  000088                     	ds	1
  2201  000089                     ___lwmod@divisor:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x9
  2205  000089                     	ds	1
  2206  00008A                     ___awdiv@counter:
  2207                           	opt stack 0
  2208                           
  2209                           ; 1 bytes @ 0xA
  2210  00008A                     	ds	1
  2211  00008B                     ___awdiv@sign:
  2212                           	opt stack 0
  2213  00008B                     ___lwmod@counter:
  2214                           	opt stack 0
  2215                           
  2216                           ; 1 bytes @ 0xB
  2217  00008B                     	ds	1
  2218  00008C                     ___lldiv@counter:
  2219                           	opt stack 0
  2220  00008C                     ___awdiv@quotient:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0xC
  2224  00008C                     	ds	1
  2225  00008D                     I2C_Master_Init@c:
  2226                           	opt stack 0
  2227                           
  2228                           ; 4 bytes @ 0xD
  2229  00008D                     	ds	1
  2230  00008E                     ?_printf:
  2231                           	opt stack 0
  2232  00008E                     ?___awtoft:
  2233                           	opt stack 0
  2234  00008E                     printf@f:
  2235                           	opt stack 0
  2236  00008E                     ___awtoft@c:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0xE
  2240  00008E                     	ds	3
  2241  000091                     ??_I2C_Master_Init:
  2242  000091                     ___awtoft@sign:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x11
  2246  000091                     	ds	1
  2247  000092                     ___ftge@ff1:
  2248                           	opt stack 0
  2249                           
  2250                           ; 3 bytes @ 0x12
  2251  000092                     	ds	3
  2252  000095                     ??_loadRTC:
  2253  000095                     ___ftge@ff2:
  2254                           	opt stack 0
  2255                           
  2256                           ; 3 bytes @ 0x15
  2257  000095                     	ds	1
  2258  000096                     loadRTC@i:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x16
  2262  000096                     	ds	2
  2263  000098                     ??___ftge:
  2264                           
  2265                           ; 1 bytes @ 0x18
  2266  000098                     	ds	2
  2267  00009A                     ??_printf:
  2268                           
  2269                           ; 1 bytes @ 0x1A
  2270  00009A                     	ds	4
  2271  00009E                     printf@prec:
  2272                           	opt stack 0
  2273                           
  2274                           ; 1 bytes @ 0x1E
  2275  00009E                     	ds	1
  2276  00009F                     printf@cp:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x1F
  2280  00009F                     	ds	2
  2281  0000A1                     printf@ap:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x21
  2285  0000A1                     	ds	2
  2286  0000A3                     printf@len:
  2287                           	opt stack 0
  2288                           
  2289                           ; 2 bytes @ 0x23
  2290  0000A3                     	ds	2
  2291  0000A5                     printf@val:
  2292                           	opt stack 0
  2293                           
  2294                           ; 2 bytes @ 0x25
  2295  0000A5                     	ds	2
  2296  0000A7                     printf@flag:
  2297                           	opt stack 0
  2298                           
  2299                           ; 1 bytes @ 0x27
  2300  0000A7                     	ds	1
  2301  0000A8                     printf@c:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x28
  2305  0000A8                     	ds	1
  2306  0000A9                     printf@width:
  2307                           	opt stack 0
  2308                           
  2309                           ; 2 bytes @ 0x29
  2310  0000A9                     	ds	2
  2311  0000AB                     ??_printRTC:
  2312  0000AB                     ??_ID:
  2313  0000AB                     ??_algorithmTest:
  2314  0000AB                     ??_sensorTest:
  2315  0000AB                     ??_actuatorTest:
  2316  0000AB                     ??_arm:
  2317  0000AB                     ??_PortTestDC:
  2318  0000AB                     ??_SpeedTest:
  2319  0000AB                     ??_PortTestPusher:
  2320  0000AB                     ??_PlatformTest:
  2321  0000AB                     ??_BothServos:
  2322  0000AB                     ??_BlockerTest:
  2323  0000AB                     EEPROM_write@address:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0x2B
  2327  0000AB                     	ds	1
  2328  0000AC                     arm@on:
  2329                           	opt stack 0
  2330                           
  2331                           ; 2 bytes @ 0x2C
  2332  0000AC                     	ds	1
  2333  0000AD                     EEPROM_write@data:
  2334                           	opt stack 0
  2335  0000AD                     actuatorTest@i_1740:
  2336                           	opt stack 0
  2337  0000AD                     ID@res3:
  2338                           	opt stack 0
  2339  0000AD                     sensorTest@res:
  2340                           	opt stack 0
  2341  0000AD                     PlatformTest@res:
  2342                           	opt stack 0
  2343  0000AD                     BlockerTest@i:
  2344                           	opt stack 0
  2345                           
  2346                           ; 2 bytes @ 0x2D
  2347  0000AD                     	ds	1
  2348  0000AE                     ??_EEPROM_write:
  2349  0000AE                     actuatorTest@i_1747:
  2350                           	opt stack 0
  2351  0000AE                     printRTC@INT_time:
  2352                           	opt stack 0
  2353                           
  2354                           ; 14 bytes @ 0x2E
  2355  0000AE                     	ds	1
  2356  0000AF                     _ID$1146:
  2357                           	opt stack 0
  2358  0000AF                     EEPROM_write@i:
  2359                           	opt stack 0
  2360  0000AF                     actuatorTest@i_1748:
  2361                           	opt stack 0
  2362  0000AF                     PlatformTest@res_1792:
  2363                           	opt stack 0
  2364  0000AF                     BlockerTest@res:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x2F
  2368  0000AF                     	ds	1
  2369  0000B0                     _ID$1149:
  2370                           	opt stack 0
  2371  0000B0                     EEPROM_write@i_1408:
  2372                           	opt stack 0
  2373  0000B0                     actuatorTest@i_1750:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x30
  2377  0000B0                     	ds	1
  2378  0000B1                     ??_Loading:
  2379  0000B1                     logRun@num:
  2380                           	opt stack 0
  2381  0000B1                     actuatorTest@i_1751:
  2382                           	opt stack 0
  2383  0000B1                     ID@i:
  2384                           	opt stack 0
  2385  0000B1                     PlatformTest@i:
  2386                           	opt stack 0
  2387  0000B1                     BlockerTest@cam_flag:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0x31
  2391  0000B1                     	ds	1
  2392  0000B2                     logRun@byte1:
  2393                           	opt stack 0
  2394  0000B2                     actuatorTest@i_1753:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x32
  2398  0000B2                     	ds	1
  2399  0000B3                     logRun@byte2:
  2400                           	opt stack 0
  2401  0000B3                     actuatorTest@i_1754:
  2402                           	opt stack 0
  2403  0000B3                     Loading@addr:
  2404                           	opt stack 0
  2405  0000B3                     ID@i_1145:
  2406                           	opt stack 0
  2407  0000B3                     PlatformTest@i_1796:
  2408                           	opt stack 0
  2409  0000B3                     BlockerTest@cond_flag:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x33
  2413  0000B3                     	ds	1
  2414  0000B4                     logRun@byte3:
  2415                           	opt stack 0
  2416  0000B4                     actuatorTest@i_1756:
  2417                           	opt stack 0
  2418                           
  2419                           ; 1 bytes @ 0x34
  2420  0000B4                     	ds	1
  2421  0000B5                     Loading@byte1:
  2422                           	opt stack 0
  2423  0000B5                     logRun@byte_i:
  2424                           	opt stack 0
  2425  0000B5                     actuatorTest@i_1757:
  2426                           	opt stack 0
  2427  0000B5                     ID@i_1148:
  2428                           	opt stack 0
  2429  0000B5                     PlatformTest@on:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x35
  2433  0000B5                     	ds	1
  2434  0000B6                     logRun@byte11:
  2435                           	opt stack 0
  2436  0000B6                     actuatorTest@i_1759:
  2437                           	opt stack 0
  2438  0000B6                     Loading@i_1123:
  2439                           	opt stack 0
  2440                           
  2441                           ; 2 bytes @ 0x36
  2442  0000B6                     	ds	1
  2443  0000B7                     actuatorTest@i_1760:
  2444                           	opt stack 0
  2445  0000B7                     ID@i_1151:
  2446                           	opt stack 0
  2447  0000B7                     logRun@i:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0x37
  2451  0000B7                     	ds	1
  2452  0000B8                     actuatorTest@i_1762:
  2453                           	opt stack 0
  2454  0000B8                     Loading@i_1132:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0x38
  2458  0000B8                     	ds	1
  2459  0000B9                     actuatorTest@i_1763:
  2460                           	opt stack 0
  2461  0000B9                     ID@i_1152:
  2462                           	opt stack 0
  2463  0000B9                     logRun@addr:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x39
  2467  0000B9                     	ds	1
  2468  0000BA                     actuatorTest@i_1766:
  2469                           	opt stack 0
  2470  0000BA                     Loading@i_1134:
  2471                           	opt stack 0
  2472                           
  2473                           ; 2 bytes @ 0x3A
  2474  0000BA                     	ds	1
  2475  0000BB                     ID@time:
  2476                           	opt stack 0
  2477  0000BB                     actuatorTest@i_1767:
  2478                           	opt stack 0
  2479                           
  2480                           ; 1 bytes @ 0x3B
  2481  0000BB                     	ds	1
  2482  0000BC                     actuatorTest@i_1769:
  2483                           	opt stack 0
  2484  0000BC                     printRTC@RTC_month:
  2485                           	opt stack 0
  2486  0000BC                     Loading@i_1135:
  2487                           	opt stack 0
  2488  0000BC                     ID@res1:
  2489                           	opt stack 0
  2490                           
  2491                           ; 2 bytes @ 0x3C
  2492  0000BC                     	ds	1
  2493  0000BD                     actuatorTest@i_1770:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0x3D
  2497  0000BD                     	ds	1
  2498  0000BE                     actuatorTest@i_1772:
  2499                           	opt stack 0
  2500  0000BE                     Loading@i_1137:
  2501                           	opt stack 0
  2502  0000BE                     ID@res2:
  2503                           	opt stack 0
  2504  0000BE                     printRTC@month:
  2505                           	opt stack 0
  2506                           
  2507                           ; 4 bytes @ 0x3E
  2508  0000BE                     	ds	1
  2509  0000BF                     actuatorTest@i_1773:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x3F
  2513  0000BF                     	ds	1
  2514  0000C0                     actuatorTest@i_1776:
  2515                           	opt stack 0
  2516  0000C0                     Loading@i:
  2517                           	opt stack 0
  2518  0000C0                     ID@n:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x40
  2522  0000C0                     	ds	1
  2523  0000C1                     actuatorTest@i_1777:
  2524                           	opt stack 0
  2525                           
  2526                           ; 1 bytes @ 0x41
  2527  0000C1                     	ds	1
  2528  0000C2                     actuatorTest@i_1779:
  2529                           	opt stack 0
  2530  0000C2                     printRTC@i:
  2531                           	opt stack 0
  2532  0000C2                     Loading@j:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x42
  2536  0000C2                     	ds	1
  2537  0000C3                     actuatorTest@i_1780:
  2538                           	opt stack 0
  2539                           
  2540                           ; 1 bytes @ 0x43
  2541  0000C3                     	ds	1
  2542  0000C4                     ??_UI:
  2543  0000C4                     actuatorTest@i:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x44
  2547  0000C4                     	ds	2
  2548  0000C6                     ??_Test:
  2549  0000C6                     _UI$2434:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0x46
  2553  0000C6                     	ds	2
  2554  0000C8                     UI@i:
  2555                           	opt stack 0
  2556                           
  2557                           ; 1 bytes @ 0x48
  2558  0000C8                     	ds	1
  2559  0000C9                     UI@i_412:
  2560                           	opt stack 0
  2561                           
  2562                           ; 1 bytes @ 0x49
  2563  0000C9                     	ds	1
  2564  0000CA                     UI@i_415:
  2565                           	opt stack 0
  2566                           
  2567                           ; 1 bytes @ 0x4A
  2568  0000CA                     	ds	1
  2569  0000CB                     UI@i_416:
  2570                           	opt stack 0
  2571                           
  2572                           ; 1 bytes @ 0x4B
  2573  0000CB                     	ds	1
  2574  0000CC                     UI@i_434:
  2575                           	opt stack 0
  2576                           
  2577                           ; 1 bytes @ 0x4C
  2578  0000CC                     	ds	1
  2579  0000CD                     UI@i_435:
  2580                           	opt stack 0
  2581                           
  2582                           ; 1 bytes @ 0x4D
  2583  0000CD                     	ds	1
  2584  0000CE                     UI@i_438:
  2585                           	opt stack 0
  2586                           
  2587                           ; 1 bytes @ 0x4E
  2588  0000CE                     	ds	1
  2589  0000CF                     UI@i_439:
  2590                           	opt stack 0
  2591                           
  2592                           ; 1 bytes @ 0x4F
  2593  0000CF                     	ds	1
  2594  0000D0                     UI@i_442:
  2595                           	opt stack 0
  2596                           
  2597                           ; 1 bytes @ 0x50
  2598  0000D0                     	ds	1
  2599  0000D1                     UI@i_443:
  2600                           	opt stack 0
  2601                           
  2602                           ; 1 bytes @ 0x51
  2603  0000D1                     	ds	1
  2604  0000D2                     UI@i_446:
  2605                           	opt stack 0
  2606                           
  2607                           ; 1 bytes @ 0x52
  2608  0000D2                     	ds	1
  2609  0000D3                     UI@i_447:
  2610                           	opt stack 0
  2611                           
  2612                           ; 1 bytes @ 0x53
  2613  0000D3                     	ds	1
  2614  0000D4                     UI@i_450:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0x54
  2618  0000D4                     	ds	1
  2619  0000D5                     UI@i_451:
  2620                           	opt stack 0
  2621                           
  2622                           ; 1 bytes @ 0x55
  2623  0000D5                     	ds	1
  2624  0000D6                     UI@month:
  2625                           	opt stack 0
  2626                           
  2627                           ; 4 bytes @ 0x56
  2628  0000D6                     	ds	4
  2629  0000DA                     tblptru	equ	0xFF8
  2630                           tblptrh	equ	0xFF7
  2631                           tblptrl	equ	0xFF6
  2632                           tablat	equ	0xFF5
  2633                           postinc0	equ	0xFEE
  2634                           wreg	equ	0xFE8
  2635                           postdec1	equ	0xFE5
  2636                           fsr1l	equ	0xFE1
  2637                           
  2638                           ; 1 bytes @ 0x5A
  2639                           
  2640                           	psect	cstackCOMRAM
  2641  000001                     __pcstackCOMRAM:
  2642                           	opt stack 0
  2643  000001                     ??_updateArmState:
  2644  000001                     ??i2_I2C_Master_Wait:
  2645  000001                     ??i2_delay_ms:
  2646  000001                     ??i2_isdigit:
  2647  000001                     ?i2___wmul:
  2648                           	opt stack 0
  2649  000001                     ?i2___awmod:
  2650                           	opt stack 0
  2651  000001                     ?i2___lwmod:
  2652                           	opt stack 0
  2653  000001                     i2lcdNibble@temp:
  2654                           	opt stack 0
  2655  000001                     i2updateServoPosition@time_us:
  2656                           	opt stack 0
  2657  000001                     i2EEPROM_read@address:
  2658                           	opt stack 0
  2659  000001                     i2___wmul@multiplier:
  2660                           	opt stack 0
  2661  000001                     i2___awmod@dividend:
  2662                           	opt stack 0
  2663  000001                     i2___lwmod@dividend:
  2664                           	opt stack 0
  2665  000001                     i2strcpy@to:
  2666                           	opt stack 0
  2667                           
  2668                           ; 2 bytes @ 0x0
  2669  000001                     	ds	1
  2670  000002                     i2I2C_Master_Read@a:
  2671                           	opt stack 0
  2672  000002                     i2lcdNibble@data:
  2673                           	opt stack 0
  2674  000002                     i2delay_ms@milliseconds:
  2675                           	opt stack 0
  2676  000002                     i2_isdigit$2069:
  2677                           	opt stack 0
  2678  000002                     i2I2C_Master_Write@d:
  2679                           	opt stack 0
  2680                           
  2681                           ; 2 bytes @ 0x1
  2682  000002                     	ds	1
  2683  000003                     i2I2C_Master_Read@temp:
  2684                           	opt stack 0
  2685  000003                     i2lcdInst@data:
  2686                           	opt stack 0
  2687  000003                     i2putch@data:
  2688                           	opt stack 0
  2689  000003                     i2isdigit@c:
  2690                           	opt stack 0
  2691  000003                     i2updateServoPosition@timer:
  2692                           	opt stack 0
  2693  000003                     i2___wmul@multiplicand:
  2694                           	opt stack 0
  2695  000003                     i2___awmod@divisor:
  2696                           	opt stack 0
  2697  000003                     i2___lwmod@divisor:
  2698                           	opt stack 0
  2699  000003                     i2strcpy@from:
  2700                           	opt stack 0
  2701                           
  2702                           ; 2 bytes @ 0x2
  2703  000003                     	ds	1
  2704  000004                     i2getRTC@i:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x3
  2708  000004                     	ds	1
  2709  000005                     ??i2_updateServoPosition:
  2710  000005                     i2___awmod@counter:
  2711                           	opt stack 0
  2712  000005                     i2___lwmod@counter:
  2713                           	opt stack 0
  2714  000005                     i2___wmul@product:
  2715                           	opt stack 0
  2716  000005                     i2strcpy@cp:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x4
  2720  000005                     	ds	1
  2721  000006                     ?i2___lwdiv:
  2722                           	opt stack 0
  2723  000006                     i2___awmod@sign:
  2724                           	opt stack 0
  2725  000006                     i2___lwdiv@dividend:
  2726                           	opt stack 0
  2727                           
  2728                           ; 2 bytes @ 0x5
  2729  000006                     	ds	1
  2730  000007                     retrieveLog@logNum:
  2731                           	opt stack 0
  2732  000007                     i2updateServoPosition@my_time:
  2733                           	opt stack 0
  2734                           
  2735                           ; 2 bytes @ 0x6
  2736  000007                     	ds	1
  2737  000008                     i2___lwdiv@divisor:
  2738                           	opt stack 0
  2739                           
  2740                           ; 2 bytes @ 0x7
  2741  000008                     	ds	1
  2742  000009                     ??_retrieveLog:
  2743  000009                     ??_updateServoStates:
  2744                           
  2745                           ; 1 bytes @ 0x8
  2746  000009                     	ds	1
  2747  00000A                     i2___lwdiv@quotient:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0x9
  2751  00000A                     	ds	1
  2752  00000B                     retrieveLog@byte1:
  2753                           	opt stack 0
  2754                           
  2755                           ; 1 bytes @ 0xA
  2756  00000B                     	ds	1
  2757  00000C                     retrieveLog@byte2:
  2758                           	opt stack 0
  2759  00000C                     i2___lwdiv@counter:
  2760                           	opt stack 0
  2761                           
  2762                           ; 1 bytes @ 0xB
  2763  00000C                     	ds	1
  2764  00000D                     ?i2_printf:
  2765                           	opt stack 0
  2766  00000D                     retrieveLog@byte3:
  2767                           	opt stack 0
  2768  00000D                     i2printf@f:
  2769                           	opt stack 0
  2770                           
  2771                           ; 2 bytes @ 0xC
  2772  00000D                     	ds	1
  2773  00000E                     retrieveLog@i:
  2774                           	opt stack 0
  2775                           
  2776                           ; 2 bytes @ 0xD
  2777  00000E                     	ds	2
  2778  000010                     retrieveLog@addr:
  2779                           	opt stack 0
  2780                           
  2781                           ; 2 bytes @ 0xF
  2782  000010                     	ds	2
  2783  000012                     dispLogs@myLog:
  2784                           	opt stack 0
  2785                           
  2786                           ; 2 bytes @ 0x11
  2787  000012                     	ds	2
  2788  000014                     
  2789                           ; 1 bytes @ 0x13
  2790  000014                     	ds	5
  2791  000019                     ??i2_printf:
  2792                           
  2793                           ; 1 bytes @ 0x18
  2794  000019                     	ds	4
  2795  00001D                     i2printf@prec:
  2796                           	opt stack 0
  2797                           
  2798                           ; 1 bytes @ 0x1C
  2799  00001D                     	ds	1
  2800  00001E                     i2printf@cp:
  2801                           	opt stack 0
  2802                           
  2803                           ; 2 bytes @ 0x1D
  2804  00001E                     	ds	2
  2805  000020                     i2printf@ap:
  2806                           	opt stack 0
  2807                           
  2808                           ; 2 bytes @ 0x1F
  2809  000020                     	ds	2
  2810  000022                     i2printf@len:
  2811                           	opt stack 0
  2812                           
  2813                           ; 2 bytes @ 0x21
  2814  000022                     	ds	2
  2815  000024                     i2printf@val:
  2816                           	opt stack 0
  2817                           
  2818                           ; 2 bytes @ 0x23
  2819  000024                     	ds	2
  2820  000026                     i2printf@flag:
  2821                           	opt stack 0
  2822                           
  2823                           ; 1 bytes @ 0x25
  2824  000026                     	ds	1
  2825  000027                     i2printf@c:
  2826                           	opt stack 0
  2827                           
  2828                           ; 1 bytes @ 0x26
  2829  000027                     	ds	1
  2830  000028                     i2printf@width:
  2831                           	opt stack 0
  2832                           
  2833                           ; 2 bytes @ 0x27
  2834  000028                     	ds	2
  2835  00002A                     ??_printSortTimer:
  2836  00002A                     ??i2_printRTC:
  2837  00002A                     ?_inputHandler:
  2838                           	opt stack 0
  2839                           
  2840                           ; 2 bytes @ 0x29
  2841  00002A                     	ds	2
  2842  00002C                     ??_inputHandler:
  2843                           
  2844                           ; 1 bytes @ 0x2B
  2845  00002C                     	ds	1
  2846  00002D                     printSortTimer@curTime:
  2847                           	opt stack 0
  2848  00002D                     i2printRTC@INT_time:
  2849                           	opt stack 0
  2850                           
  2851                           ; 14 bytes @ 0x2C
  2852  00002D                     	ds	14
  2853  00003B                     printSortTimer@start_sec:
  2854                           	opt stack 0
  2855  00003B                     i2printRTC@RTC_month:
  2856                           	opt stack 0
  2857                           
  2858                           ; 2 bytes @ 0x3A
  2859  00003B                     	ds	2
  2860  00003D                     printSortTimer@cur_sec:
  2861                           	opt stack 0
  2862  00003D                     i2printRTC@month:
  2863                           	opt stack 0
  2864                           
  2865                           ; 4 bytes @ 0x3C
  2866  00003D                     	ds	2
  2867  00003F                     printSortTimer@min:
  2868                           	opt stack 0
  2869                           
  2870                           ; 2 bytes @ 0x3E
  2871  00003F                     	ds	2
  2872  000041                     printSortTimer@sec:
  2873                           	opt stack 0
  2874  000041                     i2printRTC@i:
  2875                           	opt stack 0
  2876                           
  2877                           ; 2 bytes @ 0x40
  2878  000041                     	ds	2
  2879  000043                     ??_updateMenu:
  2880  000043                     _printSortTimer$2574:
  2881                           	opt stack 0
  2882                           
  2883                           ; 2 bytes @ 0x42
  2884  000043                     	ds	2
  2885  000045                     printSortTimer@timeDiff:
  2886                           	opt stack 0
  2887                           
  2888                           ; 2 bytes @ 0x44
  2889  000045                     	ds	2
  2890  000047                     printSortTimer@i_1164:
  2891                           	opt stack 0
  2892                           
  2893                           ; 2 bytes @ 0x46
  2894  000047                     	ds	2
  2895  000049                     printSortTimer@i:
  2896                           	opt stack 0
  2897                           
  2898                           ; 2 bytes @ 0x48
  2899  000049                     	ds	2
  2900  00004B                     ??_handler:
  2901                           
  2902                           ; 1 bytes @ 0x4A
  2903  00004B                     	ds	16
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           postinc0	equ	0xFEE
  2909                           wreg	equ	0xFE8
  2910                           postdec1	equ	0xFE5
  2911                           fsr1l	equ	0xFE1
  2912                           
  2913 ;;
  2914 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2915 ;;
  2916 ;; *************** function _main *****************
  2917 ;; Defined at:
  2918 ;;		line 19 in file "main.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;		None
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;		None
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2936 ;;Total ram usage:        0 bytes
  2937 ;; Hardware stack levels required when called:   13
  2938 ;; This function calls:
  2939 ;;		_I2C_Master_Init
  2940 ;;		_Test
  2941 ;;		_UI
  2942 ;;		_initEEPROM
  2943 ;;		_initLCD
  2944 ;;		_initTime
  2945 ;;		_initUI
  2946 ;;		_logRun
  2947 ;;		_machineConfig
  2948 ;;		_sort
  2949 ;;		_stopSignals
  2950 ;; This function is called by:
  2951 ;;		Startup code after reset
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           	psect	text0
  2956  0047A2                     __ptext0:
  2957                           	opt stack 0
  2958  0047A2                     _main:
  2959                           	opt stack 18
  2960                           
  2961                           ;main.c: 20: machineConfig();
  2962                           
  2963                           ;incstack = 0
  2964  0047A2  EC92  F028         	call	_machineConfig	;wreg free
  2965                           
  2966                           ;main.c: 21: initLCD();
  2967  0047A6  EC70  F02A         	call	_initLCD	;wreg free
  2968                           
  2969                           ;main.c: 24: RTCflag = 0;
  2970  0047AA  0E00               	movlw	0
  2971  0047AC  0100               	movlb	0	; () banked
  2972  0047AE  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2973  0047B0  0E00               	movlw	0
  2974  0047B2  6FE4               	movwf	_RTCflag& (0+255),b
  2975                           
  2976                           ;main.c: 25: if(RTCflag){
  2977  0047B4  0100               	movlb	0	; () banked
  2978  0047B6  51E4               	movf	_RTCflag& (0+255),w,b
  2979  0047B8  0100               	movlb	0	; () banked
  2980  0047BA  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2981  0047BC  B4D8               	btfsc	status,2,c
  2982  0047BE  D016               	goto	l10220
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2986  0047C0  0E47               	movlw	71
  2987  0047C2  0100               	movlb	0	; () banked
  2988  0047C4  6F80               	movwf	initTime@m& (0+255),b
  2989  0047C6  0E17               	movlw	23
  2990  0047C8  0100               	movlb	0	; () banked
  2991  0047CA  6F81               	movwf	initTime@h& (0+255),b
  2992  0047CC  0E07               	movlw	7
  2993  0047CE  0100               	movlb	0	; () banked
  2994  0047D0  6F82               	movwf	initTime@w& (0+255),b
  2995  0047D2  0E08               	movlw	8
  2996  0047D4  0100               	movlb	0	; () banked
  2997  0047D6  6F83               	movwf	initTime@DD& (0+255),b
  2998  0047D8  0E04               	movlw	4
  2999  0047DA  0100               	movlb	0	; () banked
  3000  0047DC  6F84               	movwf	initTime@MM& (0+255),b
  3001  0047DE  0E17               	movlw	23
  3002  0047E0  0100               	movlb	0	; () banked
  3003  0047E2  6F85               	movwf	initTime@YY& (0+255),b
  3004  0047E4  0E42               	movlw	66
  3005  0047E6  EC63  F02D         	call	_initTime
  3006                           
  3007                           ;main.c: 27: }
  3008  0047EA  D00B               	goto	l10222
  3009  0047EC                     l10220:
  3010                           
  3011                           ;main.c: 28: else{
  3012                           ;main.c: 29: I2C_Master_Init(10000);
  3013  0047EC  0E10               	movlw	16
  3014  0047EE  0100               	movlb	0	; () banked
  3015  0047F0  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3016  0047F2  0E27               	movlw	39
  3017  0047F4  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3018  0047F6  0E00               	movlw	0
  3019  0047F8  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3020  0047FA  0E00               	movlw	0
  3021  0047FC  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3022  0047FE  ECF5  F028         	call	_I2C_Master_Init	;wreg free
  3023  004802                     l10222:
  3024                           
  3025                           ;main.c: 30: }
  3026                           ;main.c: 32: initUI();
  3027  004802  EC93  F02B         	call	_initUI	;wreg free
  3028                           
  3029                           ;main.c: 33: first = 1;
  3030  004806  0E00               	movlw	0
  3031  004808  0101               	movlb	1	; () banked
  3032  00480A  6F38               	movwf	(_first+1)& (0+255),b
  3033  00480C  0E01               	movlw	1
  3034  00480E  6F37               	movwf	_first& (0+255),b
  3035                           
  3036                           ; BSR set to: 1
  3037                           ;main.c: 34: initEEPROM();
  3038  004810  ECAB  F02D         	call	_initEEPROM	;wreg free
  3039                           
  3040                           ;main.c: 45: switch(machine_state){
  3041                           
  3042                           ;main.c: 44: while(1){
  3043  004814  D018               	goto	l10246
  3044  004816                     l10228:
  3045                           
  3046                           ;main.c: 47: UI();
  3047  004816  EC09  F000         	call	_UI	;wreg free
  3048                           
  3049                           ;main.c: 48: break;
  3050  00481A  D015               	goto	l10246
  3051  00481C                     l10230:
  3052                           
  3053                           ;main.c: 50: sort();
  3054  00481C  EC52  F02D         	call	_sort	;wreg free
  3055                           
  3056                           ;main.c: 51: break;
  3057  004820  D012               	goto	l10246
  3058  004822                     l10232:
  3059                           
  3060                           ;main.c: 53: stopSignals();
  3061  004822  EC83  F02D         	call	_stopSignals	;wreg free
  3062                           
  3063                           ;main.c: 54: logRun();
  3064  004826  EC5F  F01F         	call	_logRun	;wreg free
  3065                           
  3066                           ;main.c: 55: first = 1;
  3067  00482A  0E00               	movlw	0
  3068  00482C  0101               	movlb	1	; () banked
  3069  00482E  6F38               	movwf	(_first+1)& (0+255),b
  3070  004830  0E01               	movlw	1
  3071  004832  6F37               	movwf	_first& (0+255),b
  3072                           
  3073                           ; BSR set to: 1
  3074                           ;main.c: 56: UI();
  3075  004834  EC09  F000         	call	_UI	;wreg free
  3076                           
  3077                           ;main.c: 57: break;
  3078  004838  D006               	goto	l10246
  3079  00483A                     l10240:
  3080                           
  3081                           ;main.c: 59: Test();
  3082  00483A  EC1A  F021         	call	_Test	;wreg free
  3083                           
  3084                           ;main.c: 60: break;
  3085  00483E  D003               	goto	l10246
  3086  004840                     l10242:
  3087                           
  3088                           ;main.c: 62: stopSignals();
  3089  004840  EC83  F02D         	call	_stopSignals	;wreg free
  3090  004844                     l508:
  3091  004844  D7FF               	goto	l508
  3092  004846                     l10246:
  3093  004846  0100               	movlb	0	; () banked
  3094  004848  51FC               	movf	_machine_state& (0+255),w,b
  3095                           
  3096                           ; Switch size 1, requested type "space"
  3097                           ; Number of cases is 5, Range of values is 0 to 4
  3098                           ; switch strategies available:
  3099                           ; Name         Instructions Cycles
  3100                           ; simple_byte           16     9 (average)
  3101                           ;	Chosen strategy is simple_byte
  3102  00484A  0A00               	xorlw	0	; case 0
  3103  00484C  B4D8               	btfsc	status,2,c
  3104  00484E  D7E3               	goto	l10228
  3105  004850  0A01               	xorlw	1	; case 1
  3106  004852  B4D8               	btfsc	status,2,c
  3107  004854  D7E3               	goto	l10230
  3108  004856  0A03               	xorlw	3	; case 2
  3109  004858  B4D8               	btfsc	status,2,c
  3110  00485A  D7E3               	goto	l10232
  3111  00485C  0A01               	xorlw	1	; case 3
  3112  00485E  B4D8               	btfsc	status,2,c
  3113  004860  D7EC               	goto	l10240
  3114  004862  0A07               	xorlw	7	; case 4
  3115  004864  B4D8               	btfsc	status,2,c
  3116  004866  D7EC               	goto	l10242
  3117                           
  3118                           ; BSR set to: 0
  3119                           
  3120                           ; BSR set to: 0
  3121  004868  D7EE               	goto	l10246
  3122  00486A                     __end_of_main:
  3123                           	opt stack 0
  3124                           tblptru	equ	0xFF8
  3125                           tblptrh	equ	0xFF7
  3126                           tblptrl	equ	0xFF6
  3127                           tablat	equ	0xFF5
  3128                           postinc0	equ	0xFEE
  3129                           wreg	equ	0xFE8
  3130                           postdec1	equ	0xFE5
  3131                           fsr1l	equ	0xFE1
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _sort *****************
  3135 ;; Defined at:
  3136 ;;		line 70 in file "sort.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;		None
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;Total ram usage:        0 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:   12
  3157 ;; This function calls:
  3158 ;;		_Distribution
  3159 ;;		_ID
  3160 ;;		_Loading
  3161 ;; This function is called by:
  3162 ;;		_main
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text1
  3167  005AA4                     __ptext1:
  3168                           	opt stack 0
  3169  005AA4                     _sort:
  3170                           	opt stack 18
  3171                           
  3172                           ;sort.c: 71: if(machine_state == Sorting_state){
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;incstack = 0
  3176  005AA4  0100               	movlb	0	; () banked
  3177  005AA6  05FC               	decf	_machine_state& (0+255),w,b
  3178  005AA8  B4D8               	btfsc	status,2,c
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;sort.c: 72: Loading();
  3182  005AAA  ECC9  F008         	call	_Loading	;wreg free
  3183                           
  3184                           ;sort.c: 73: }
  3185                           ;sort.c: 74: if(machine_state == Sorting_state){
  3186  005AAE  0100               	movlb	0	; () banked
  3187  005AB0  05FC               	decf	_machine_state& (0+255),w,b
  3188  005AB2  B4D8               	btfsc	status,2,c
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;sort.c: 75: ID();
  3192  005AB4  EC62  F00B         	call	_ID	;wreg free
  3193                           
  3194                           ;sort.c: 76: }
  3195                           ;sort.c: 77: if(machine_state == Sorting_state){
  3196  005AB8  0100               	movlb	0	; () banked
  3197  005ABA  05FC               	decf	_machine_state& (0+255),w,b
  3198  005ABC  A4D8               	btfss	status,2,c
  3199  005ABE  0012               	return	
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;sort.c: 78: Distribution();
  3203  005AC0  EC90  F022         	call	_Distribution	;wreg free
  3204  005AC4  0012               	return	
  3205  005AC6                     __end_of_sort:
  3206                           	opt stack 0
  3207                           tblptru	equ	0xFF8
  3208                           tblptrh	equ	0xFF7
  3209                           tblptrl	equ	0xFF6
  3210                           tablat	equ	0xFF5
  3211                           postinc0	equ	0xFEE
  3212                           wreg	equ	0xFE8
  3213                           postdec1	equ	0xFE5
  3214                           fsr1l	equ	0xFE1
  3215                           status	equ	0xFD8
  3216                           
  3217 ;; *************** function _Loading *****************
  3218 ;; Defined at:
  3219 ;;		line 82 in file "sort.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  i               2   62[BANK0 ] int 
  3224 ;;  i               2   60[BANK0 ] int 
  3225 ;;  i               2   58[BANK0 ] int 
  3226 ;;  i               2   56[BANK0 ] int 
  3227 ;;  i               2   54[BANK0 ] int 
  3228 ;;  j               2   66[BANK0 ] int 
  3229 ;;  i               2   64[BANK0 ] int 
  3230 ;;  addr            2   51[BANK0 ] unsigned short 
  3231 ;;  byte1           1   53[BANK0 ] unsigned char 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      void 
  3234 ;; Registers used:
  3235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;Total ram usage:       19 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:   11
  3248 ;; This function calls:
  3249 ;;		_EEPROM_read
  3250 ;;		_EEPROM_write
  3251 ;;		_delay_ms
  3252 ;;		_getIR
  3253 ;;		_getMAG
  3254 ;;		_initGlobalVars
  3255 ;;		_initServos
  3256 ;;		_initSortTimer
  3257 ;;		_lcdInst
  3258 ;;		_readIR
  3259 ;; This function is called by:
  3260 ;;		_sort
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text2
  3265  001192                     __ptext2:
  3266                           	opt stack 0
  3267  001192                     _Loading:
  3268                           	opt stack 18
  3269                           
  3270                           ;sort.c: 83: if(first){
  3271                           
  3272                           ;incstack = 0
  3273  001192  0101               	movlb	1	; () banked
  3274  001194  5137               	movf	_first& (0+255),w,b
  3275  001196  0101               	movlb	1	; () banked
  3276  001198  1138               	iorwf	(_first+1)& (0+255),w,b
  3277  00119A  B4D8               	btfsc	status,2,c
  3278  00119C  D069               	goto	l7888
  3279                           
  3280                           ; BSR set to: 1
  3281                           ;sort.c: 84: TMR1IF = 1;
  3282  00119E  809E               	bsf	3998,0,c	;volatile
  3283                           
  3284                           ;sort.c: 85: TMR2IF = 1;
  3285  0011A0  829E               	bsf	3998,1,c	;volatile
  3286                           
  3287                           ;sort.c: 86: TMR3IF = 1;
  3288  0011A2  82A1               	bsf	4001,1,c	;volatile
  3289                           
  3290                           ; BSR set to: 1
  3291                           ;sort.c: 87: initGlobalVars();
  3292  0011A4  EC6C  F023         	call	_initGlobalVars	;wreg free
  3293                           
  3294                           ;sort.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3295  0011A8  0E01               	movlw	1
  3296  0011AA  ECDC  F02D         	call	_lcdInst
  3297  0011AE  0E68               	movlw	104
  3298  0011B0  0100               	movlb	0	; () banked
  3299  0011B2  6FB1               	movwf	??_Loading& (0+255),b
  3300  0011B4  0EE4               	movlw	228
  3301  0011B6                     u9937:
  3302  0011B6  2EE8               	decfsz	wreg,f,c
  3303  0011B8  D7FE               	bra	u9937
  3304  0011BA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3305  0011BC  D7FC               	bra	u9937
  3306  0011BE  F000               	nop	
  3307                           
  3308                           ;sort.c: 89: initSortTimer();
  3309  0011C0  EC56  F025         	call	_initSortTimer	;wreg free
  3310                           
  3311                           ;sort.c: 90: LATCbits.LATC5 = 1;
  3312  0011C4  8A8B               	bsf	3979,5,c	;volatile
  3313                           
  3314                           ;sort.c: 95: sel = EEPROM_read(0);
  3315  0011C6  0E00               	movlw	0
  3316  0011C8  0100               	movlb	0	; () banked
  3317  0011CA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3318  0011CC  0E00               	movlw	0
  3319  0011CE  6F80               	movwf	EEPROM_read@address& (0+255),b
  3320  0011D0  EC9F  F02D         	call	_EEPROM_read	;wreg free
  3321  0011D4  0100               	movlb	0	; () banked
  3322  0011D6  6FFD               	movwf	_sel& (0+255),b
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;sort.c: 96: unsigned short addr = 1 + 11 * sel;
  3326  0011D8  0100               	movlb	0	; () banked
  3327  0011DA  51FD               	movf	_sel& (0+255),w,b
  3328  0011DC  0D0B               	mullw	11
  3329  0011DE  0E01               	movlw	1
  3330  0011E0  24F3               	addwf	prodl,w,c
  3331  0011E2  0100               	movlb	0	; () banked
  3332  0011E4  6FB3               	movwf	Loading@addr& (0+255),b
  3333  0011E6  0E00               	movlw	0
  3334  0011E8  20F4               	addwfc	prodh,w,c
  3335  0011EA  0100               	movlb	0	; () banked
  3336  0011EC  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;sort.c: 97: unsigned char byte1 = 0b01111111;
  3340  0011EE  0E7F               	movlw	127
  3341  0011F0  0100               	movlb	0	; () banked
  3342  0011F2  6FB5               	movwf	Loading@byte1& (0+255),b
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;sort.c: 98: EEPROM_write(addr, byte1);
  3346  0011F4  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3347  0011F8  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3348  0011FC  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3349  001200  EC1C  F022         	call	_EEPROM_write	;wreg free
  3350                           
  3351                           ;sort.c: 101: LATBbits.LATB2 = 0;
  3352  001204  948A               	bcf	3978,2,c	;volatile
  3353                           
  3354                           ;sort.c: 103: for(int i=0; i<46; i++){
  3355  001206  0E00               	movlw	0
  3356  001208  0100               	movlb	0	; () banked
  3357  00120A  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3358  00120C  0E00               	movlw	0
  3359  00120E  6FC0               	movwf	Loading@i& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362  001210  0100               	movlb	0	; () banked
  3363  001212  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3364  001214  D008               	goto	l7878
  3365  001216  0100               	movlb	0	; () banked
  3366  001218  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3367  00121A  E126               	bnz	l795
  3368  00121C  0E2E               	movlw	46
  3369  00121E  0100               	movlb	0	; () banked
  3370  001220  5DC0               	subwf	Loading@i& (0+255),w,b
  3371  001222  B0D8               	btfsc	status,0,c
  3372  001224  D021               	goto	l795
  3373  001226                     l7878:
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;sort.c: 104: LATBbits.LATB2 = !LATBbits.LATB2;
  3377  001226  B48A               	btfsc	3978,2,c	;volatile
  3378  001228  D004               	goto	u6480
  3379  00122A  0100               	movlb	0	; () banked
  3380  00122C  6BB1               	clrf	??_Loading& (0+255),b
  3381  00122E  2BB1               	incf	??_Loading& (0+255),f,b
  3382  001230  D002               	goto	u6498
  3383  001232                     u6480:
  3384  001232  0100               	movlb	0	; () banked
  3385  001234  6BB1               	clrf	??_Loading& (0+255),b
  3386  001236                     u6498:
  3387  001236  0100               	movlb	0	; () banked
  3388  001238  47B1               	rlncf	??_Loading& (0+255),f,b
  3389  00123A  47B1               	rlncf	??_Loading& (0+255),f,b
  3390  00123C  508A               	movf	3978,w,c	;volatile
  3391  00123E  0100               	movlb	0	; () banked
  3392  001240  19B1               	xorwf	??_Loading& (0+255),w,b
  3393  001242  0BFB               	andlw	-5
  3394  001244  19B1               	xorwf	??_Loading& (0+255),w,b
  3395  001246  6E8A               	movwf	3978,c	;volatile
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;sort.c: 105: delay_ms(45-i);
  3399  001248  0100               	movlb	0	; () banked
  3400  00124A  51C0               	movf	Loading@i& (0+255),w,b
  3401  00124C  0800               	sublw	0
  3402  00124E  0F2D               	addlw	45
  3403  001250  ECF2  F02C         	call	_delay_ms
  3404  001254  0100               	movlb	0	; () banked
  3405  001256  4BC0               	infsnz	Loading@i& (0+255),f,b
  3406  001258  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3407                           
  3408                           ; BSR set to: 0
  3409  00125A  0100               	movlb	0	; () banked
  3410  00125C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3411  00125E  D7E3               	goto	l7878
  3412  001260  0100               	movlb	0	; () banked
  3413  001262  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3414  001264  E101               	bnz	u6500
  3415  001266  D7DA               	goto	L1
  3416  001268                     u6500:
  3417  001268                     l795:
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;sort.c: 106: }
  3421                           ;sort.c: 107: LATBbits.LATB2 = 1;
  3422  001268  848A               	bsf	3978,2,c	;volatile
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;sort.c: 110: initServos();
  3426  00126A  EC06  F027         	call	_initServos	;wreg free
  3427                           
  3428                           ;sort.c: 111: }
  3429  00126E  0012               	return	
  3430  001270                     l7888:
  3431                           
  3432                           ;sort.c: 112: else{
  3433                           ;sort.c: 115: if(!f_loadingNewCan){
  3434  001270  0100               	movlb	0	; () banked
  3435  001272  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3436  001274  0100               	movlb	0	; () banked
  3437  001276  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3438  001278  A4D8               	btfss	status,2,c
  3439  00127A  D018               	goto	l7904
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;sort.c: 117: getIR();
  3443  00127C  EC7E  F027         	call	_getIR	;wreg free
  3444                           
  3445                           ;sort.c: 119: if(!f_loadingNewCan){
  3446  001280  0100               	movlb	0	; () banked
  3447  001282  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3448  001284  0100               	movlb	0	; () banked
  3449  001286  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3450  001288  B4D8               	btfsc	status,2,c
  3451  00128A  0012               	return	
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;sort.c: 123: else{
  3455                           ;sort.c: 124: count_total++;
  3456                           
  3457                           ; BSR set to: 0
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;sort.c: 121: }
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;sort.c: 120: return;
  3464  00128C  0100               	movlb	0	; () banked
  3465  00128E  4BFE               	infsnz	_count_total& (0+255),f,b
  3466  001290  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;sort.c: 125: if(count_total == 12){
  3470  001292  0E0C               	movlw	12
  3471  001294  0100               	movlb	0	; () banked
  3472  001296  19FE               	xorwf	_count_total& (0+255),w,b
  3473  001298  0100               	movlb	0	; () banked
  3474  00129A  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3475  00129C  A4D8               	btfss	status,2,c
  3476  00129E  0012               	return	
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;sort.c: 126: f_lastCan = 1;
  3480  0012A0  0E00               	movlw	0
  3481  0012A2  0100               	movlb	0	; () banked
  3482  0012A4  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  3483  0012A6  0E01               	movlw	1
  3484  0012A8  6FEC               	movwf	_f_lastCan& (0+255),b
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;sort.c: 127: }
  3488                           ;sort.c: 128: }
  3489                           ;sort.c: 129: }
  3490                           
  3491                           ; BSR set to: 0
  3492  0012AA  0012               	return	
  3493  0012AC                     l7904:
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;sort.c: 132: else if(f_ID_receive){
  3497  0012AC  0101               	movlb	1	; () banked
  3498  0012AE  512D               	movf	_f_ID_receive& (0+255),w,b
  3499  0012B0  0101               	movlb	1	; () banked
  3500  0012B2  112E               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3501  0012B4  B4D8               	btfsc	status,2,c
  3502  0012B6  0012               	return	
  3503                           
  3504                           ; BSR set to: 1
  3505                           ;sort.c: 133: f_most_recent_sort_time = 1;
  3506  0012B8  0E00               	movlw	0
  3507  0012BA  0101               	movlb	1	; () banked
  3508  0012BC  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3509  0012BE  0E01               	movlw	1
  3510  0012C0  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  3511                           
  3512                           ;sort.c: 134: f_loadingNewCan = 0;
  3513  0012C2  0E00               	movlw	0
  3514  0012C4  0100               	movlb	0	; () banked
  3515  0012C6  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3516  0012C8  0E00               	movlw	0
  3517  0012CA  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;sort.c: 135: _delay((unsigned long)((400)*(32000000/4000.0)));
  3521  0012CC  0E11               	movlw	17
  3522  0012CE  0100               	movlb	0	; () banked
  3523  0012D0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3524  0012D2  0E3C               	movlw	60
  3525  0012D4  0100               	movlb	0	; () banked
  3526  0012D6  6FB1               	movwf	??_Loading& (0+255),b
  3527  0012D8  0ECB               	movlw	203
  3528  0012DA                     u9947:
  3529  0012DA  2EE8               	decfsz	wreg,f,c
  3530  0012DC  D7FE               	bra	u9947
  3531  0012DE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3532  0012E0  D7FC               	bra	u9947
  3533  0012E2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3534  0012E4  D7FA               	bra	u9947
  3535                           
  3536                           ;sort.c: 136: LATBbits.LATB2 = 0;
  3537  0012E6  948A               	bcf	3978,2,c	;volatile
  3538                           
  3539                           ;sort.c: 140: f_arm_position = 1;
  3540  0012E8  0E00               	movlw	0
  3541  0012EA  0100               	movlb	0	; () banked
  3542  0012EC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3543  0012EE  0E01               	movlw	1
  3544  0012F0  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;sort.c: 142: delay_ms(750);
  3548  0012F2  0EEE               	movlw	238
  3549  0012F4  ECF2  F02C         	call	_delay_ms
  3550                           
  3551                           ;sort.c: 143: getMAG();
  3552  0012F8  EC61  F02B         	call	_getMAG	;wreg free
  3553                           
  3554                           ;sort.c: 144: sensor_outputs[0] = MAG_signal;
  3555  0012FC  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3556  001300  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3557                           
  3558                           ;sort.c: 146: TMR2IF = 0;
  3559  001304  929E               	bcf	3998,1,c	;volatile
  3560                           
  3561                           ;sort.c: 147: if(sensor_outputs[0]){
  3562  001306  0100               	movlb	0	; () banked
  3563  001308  51DA               	movf	_sensor_outputs& (0+255),w,b
  3564  00130A  0100               	movlb	0	; () banked
  3565  00130C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3566  00130E  B4D8               	btfsc	status,2,c
  3567  001310  D01D               	goto	l7936
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;sort.c: 148: for(int i = 0; i<2500; i++){
  3571  001312  0E00               	movlw	0
  3572  001314  0100               	movlb	0	; () banked
  3573  001316  6FB7               	movwf	(Loading@i_1123+1)& (0+255),b
  3574  001318  0E00               	movlw	0
  3575  00131A  6FB6               	movwf	Loading@i_1123& (0+255),b
  3576  00131C                     l7926:
  3577                           
  3578                           ; BSR set to: 0
  3579  00131C  0100               	movlb	0	; () banked
  3580  00131E  BFB7               	btfsc	(Loading@i_1123+1)& (0+255),7,b
  3581  001320  D008               	goto	l805
  3582  001322  0EC4               	movlw	196
  3583  001324  0100               	movlb	0	; () banked
  3584  001326  5DB6               	subwf	Loading@i_1123& (0+255),w,b
  3585  001328  0E09               	movlw	9
  3586  00132A  0100               	movlb	0	; () banked
  3587  00132C  59B7               	subwfb	(Loading@i_1123+1)& (0+255),w,b
  3588  00132E  B0D8               	btfsc	status,0,c
  3589  001330  D02A               	goto	l7948
  3590  001332                     l805:
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;sort.c: 149: LATAbits.LATA4 = 1;
  3594  001332  8889               	bsf	3977,4,c	;volatile
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;sort.c: 150: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3598  001334  0EC8               	movlw	200
  3599  001336                     u9957:
  3600  001336  2EE8               	decfsz	wreg,f,c
  3601  001338  D7FE               	bra	u9957
  3602                           
  3603                           ;sort.c: 151: LATAbits.LATA4 = 0;
  3604  00133A  9889               	bcf	3977,4,c	;volatile
  3605                           
  3606                           ;sort.c: 152: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3607  00133C  0E42               	movlw	66
  3608  00133E                     u9967:
  3609  00133E  2EE8               	decfsz	wreg,f,c
  3610  001340  D7FE               	bra	u9967
  3611  001342  D000               	nop2	
  3612  001344  0100               	movlb	0	; () banked
  3613  001346  4BB6               	infsnz	Loading@i_1123& (0+255),f,b
  3614  001348  2BB7               	incf	(Loading@i_1123+1)& (0+255),f,b
  3615  00134A  D7E8               	goto	l7926
  3616  00134C                     l7936:
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;sort.c: 155: else{
  3620                           ;sort.c: 156: for(int i = 0; i<2500; i++){
  3621  00134C  0E00               	movlw	0
  3622  00134E  0100               	movlb	0	; () banked
  3623  001350  6FB9               	movwf	(Loading@i_1132+1)& (0+255),b
  3624  001352  0E00               	movlw	0
  3625  001354  6FB8               	movwf	Loading@i_1132& (0+255),b
  3626  001356                     l7938:
  3627                           
  3628                           ; BSR set to: 0
  3629  001356  0100               	movlb	0	; () banked
  3630  001358  BFB9               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  3631  00135A  D008               	goto	l808
  3632  00135C  0EC4               	movlw	196
  3633  00135E  0100               	movlb	0	; () banked
  3634  001360  5DB8               	subwf	Loading@i_1132& (0+255),w,b
  3635  001362  0E09               	movlw	9
  3636  001364  0100               	movlb	0	; () banked
  3637  001366  59B9               	subwfb	(Loading@i_1132+1)& (0+255),w,b
  3638  001368  B0D8               	btfsc	status,0,c
  3639  00136A  D00D               	goto	l7948
  3640  00136C                     l808:
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;sort.c: 157: LATAbits.LATA4 = 1;
  3644  00136C  8889               	bsf	3977,4,c	;volatile
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;sort.c: 158: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3648  00136E  0E9A               	movlw	154
  3649  001370                     u9977:
  3650  001370  2EE8               	decfsz	wreg,f,c
  3651  001372  D7FE               	bra	u9977
  3652  001374  D000               	nop2	
  3653                           
  3654                           ;sort.c: 159: LATAbits.LATA4 = 0;
  3655  001376  9889               	bcf	3977,4,c	;volatile
  3656                           
  3657                           ;sort.c: 160: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3658  001378  0E70               	movlw	112
  3659  00137A                     u9987:
  3660  00137A  2EE8               	decfsz	wreg,f,c
  3661  00137C  D7FE               	bra	u9987
  3662  00137E  0100               	movlb	0	; () banked
  3663  001380  4BB8               	infsnz	Loading@i_1132& (0+255),f,b
  3664  001382  2BB9               	incf	(Loading@i_1132+1)& (0+255),f,b
  3665  001384  D7E8               	goto	l7938
  3666  001386                     l7948:
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;sort.c: 161: }
  3670                           ;sort.c: 162: }
  3671                           ;sort.c: 164: _delay((unsigned long)((350)*(32000000/4000.0)));
  3672  001386  0E0F               	movlw	15
  3673  001388  0100               	movlb	0	; () banked
  3674  00138A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3675  00138C  0E35               	movlw	53
  3676  00138E  0100               	movlb	0	; () banked
  3677  001390  6FB1               	movwf	??_Loading& (0+255),b
  3678  001392  0E51               	movlw	81
  3679  001394                     u9997:
  3680  001394  2EE8               	decfsz	wreg,f,c
  3681  001396  D7FE               	bra	u9997
  3682  001398  2FB1               	decfsz	??_Loading& (0+255),f,b
  3683  00139A  D7FC               	bra	u9997
  3684  00139C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3685  00139E  D7FA               	bra	u9997
  3686                           
  3687                           ;sort.c: 166: readIR();
  3688  0013A0  ECFE  F029         	call	_readIR	;wreg free
  3689                           
  3690                           ;sort.c: 167: if(IR_signal==1){
  3691  0013A4  0100               	movlb	0	; () banked
  3692  0013A6  05E0               	decf	_IR_signal& (0+255),w,b
  3693  0013A8  0100               	movlb	0	; () banked
  3694  0013AA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3695  0013AC  A4D8               	btfss	status,2,c
  3696  0013AE  D183               	goto	l8076
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;sort.c: 168: _delay((unsigned long)((70)*(32000000/4000.0)));
  3700  0013B0  0E03               	movlw	3
  3701  0013B2  0100               	movlb	0	; () banked
  3702  0013B4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3703  0013B6  0ED8               	movlw	216
  3704  0013B8  0100               	movlb	0	; () banked
  3705  0013BA  6FB1               	movwf	??_Loading& (0+255),b
  3706  0013BC  0E41               	movlw	65
  3707  0013BE                     u10007:
  3708  0013BE  2EE8               	decfsz	wreg,f,c
  3709  0013C0  D7FE               	bra	u10007
  3710  0013C2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3711  0013C4  D7FC               	bra	u10007
  3712  0013C6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3713  0013C8  D7FA               	bra	u10007
  3714  0013CA  D000               	nop2	
  3715                           
  3716                           ;sort.c: 169: readIR();
  3717  0013CC  ECFE  F029         	call	_readIR	;wreg free
  3718                           
  3719                           ;sort.c: 170: if(IR_signal==1){
  3720  0013D0  0100               	movlb	0	; () banked
  3721  0013D2  05E0               	decf	_IR_signal& (0+255),w,b
  3722  0013D4  0100               	movlb	0	; () banked
  3723  0013D6  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3724  0013D8  A4D8               	btfss	status,2,c
  3725  0013DA  D040               	goto	l7986
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;sort.c: 171: if(sensor_outputs[0]){
  3729  0013DC  0100               	movlb	0	; () banked
  3730  0013DE  51DA               	movf	_sensor_outputs& (0+255),w,b
  3731  0013E0  0100               	movlb	0	; () banked
  3732  0013E2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3733  0013E4  B4D8               	btfsc	status,2,c
  3734  0013E6  D01D               	goto	l7974
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;sort.c: 172: for(int i = 0; i<2500; i++){
  3738  0013E8  0E00               	movlw	0
  3739  0013EA  0100               	movlb	0	; () banked
  3740  0013EC  6FBB               	movwf	(Loading@i_1134+1)& (0+255),b
  3741  0013EE  0E00               	movlw	0
  3742  0013F0  6FBA               	movwf	Loading@i_1134& (0+255),b
  3743  0013F2                     l7964:
  3744                           
  3745                           ; BSR set to: 0
  3746  0013F2  0100               	movlb	0	; () banked
  3747  0013F4  BFBB               	btfsc	(Loading@i_1134+1)& (0+255),7,b
  3748  0013F6  D008               	goto	l813
  3749  0013F8  0EC4               	movlw	196
  3750  0013FA  0100               	movlb	0	; () banked
  3751  0013FC  5DBA               	subwf	Loading@i_1134& (0+255),w,b
  3752  0013FE  0E09               	movlw	9
  3753  001400  0100               	movlb	0	; () banked
  3754  001402  59BB               	subwfb	(Loading@i_1134+1)& (0+255),w,b
  3755  001404  B0D8               	btfsc	status,0,c
  3756  001406  D02A               	goto	l7986
  3757  001408                     l813:
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;sort.c: 173: LATAbits.LATA4 = 1;
  3761  001408  8889               	bsf	3977,4,c	;volatile
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;sort.c: 174: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3765  00140A  0EC8               	movlw	200
  3766  00140C                     u10017:
  3767  00140C  2EE8               	decfsz	wreg,f,c
  3768  00140E  D7FE               	bra	u10017
  3769                           
  3770                           ;sort.c: 175: LATAbits.LATA4 = 0;
  3771  001410  9889               	bcf	3977,4,c	;volatile
  3772                           
  3773                           ;sort.c: 176: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3774  001412  0E42               	movlw	66
  3775  001414                     u10027:
  3776  001414  2EE8               	decfsz	wreg,f,c
  3777  001416  D7FE               	bra	u10027
  3778  001418  D000               	nop2	
  3779  00141A  0100               	movlb	0	; () banked
  3780  00141C  4BBA               	infsnz	Loading@i_1134& (0+255),f,b
  3781  00141E  2BBB               	incf	(Loading@i_1134+1)& (0+255),f,b
  3782  001420  D7E8               	goto	l7964
  3783  001422                     l7974:
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;sort.c: 179: else{
  3787                           ;sort.c: 180: for(int i = 0; i<2500; i++){
  3788  001422  0E00               	movlw	0
  3789  001424  0100               	movlb	0	; () banked
  3790  001426  6FBD               	movwf	(Loading@i_1135+1)& (0+255),b
  3791  001428  0E00               	movlw	0
  3792  00142A  6FBC               	movwf	Loading@i_1135& (0+255),b
  3793  00142C                     l7976:
  3794                           
  3795                           ; BSR set to: 0
  3796  00142C  0100               	movlb	0	; () banked
  3797  00142E  BFBD               	btfsc	(Loading@i_1135+1)& (0+255),7,b
  3798  001430  D008               	goto	l816
  3799  001432  0EC4               	movlw	196
  3800  001434  0100               	movlb	0	; () banked
  3801  001436  5DBC               	subwf	Loading@i_1135& (0+255),w,b
  3802  001438  0E09               	movlw	9
  3803  00143A  0100               	movlb	0	; () banked
  3804  00143C  59BD               	subwfb	(Loading@i_1135+1)& (0+255),w,b
  3805  00143E  B0D8               	btfsc	status,0,c
  3806  001440  D00D               	goto	l7986
  3807  001442                     l816:
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;sort.c: 181: LATAbits.LATA4 = 1;
  3811  001442  8889               	bsf	3977,4,c	;volatile
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;sort.c: 182: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3815  001444  0E9A               	movlw	154
  3816  001446                     u10037:
  3817  001446  2EE8               	decfsz	wreg,f,c
  3818  001448  D7FE               	bra	u10037
  3819  00144A  D000               	nop2	
  3820                           
  3821                           ;sort.c: 183: LATAbits.LATA4 = 0;
  3822  00144C  9889               	bcf	3977,4,c	;volatile
  3823                           
  3824                           ;sort.c: 184: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3825  00144E  0E70               	movlw	112
  3826  001450                     u10047:
  3827  001450  2EE8               	decfsz	wreg,f,c
  3828  001452  D7FE               	bra	u10047
  3829  001454  0100               	movlb	0	; () banked
  3830  001456  4BBC               	infsnz	Loading@i_1135& (0+255),f,b
  3831  001458  2BBD               	incf	(Loading@i_1135+1)& (0+255),f,b
  3832  00145A  D7E8               	goto	l7976
  3833  00145C                     l7986:
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;sort.c: 185: }
  3837                           ;sort.c: 186: }
  3838                           ;sort.c: 187: }
  3839                           ;sort.c: 189: _delay((unsigned long)((350)*(32000000/4000.0)));
  3840  00145C  0E0F               	movlw	15
  3841  00145E  0100               	movlb	0	; () banked
  3842  001460  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3843  001462  0E35               	movlw	53
  3844  001464  0100               	movlb	0	; () banked
  3845  001466  6FB1               	movwf	??_Loading& (0+255),b
  3846  001468  0E51               	movlw	81
  3847  00146A                     u10057:
  3848  00146A  2EE8               	decfsz	wreg,f,c
  3849  00146C  D7FE               	bra	u10057
  3850  00146E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3851  001470  D7FC               	bra	u10057
  3852  001472  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3853  001474  D7FA               	bra	u10057
  3854                           
  3855                           ;sort.c: 191: int j = 0;
  3856  001476  0E00               	movlw	0
  3857  001478  0100               	movlb	0	; () banked
  3858  00147A  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3859  00147C  0E00               	movlw	0
  3860  00147E  6FC2               	movwf	Loading@j& (0+255),b
  3861                           
  3862                           ;sort.c: 192: while(IR_signal == 1){
  3863  001480  D113               	goto	l8074
  3864  001482                     l7990:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;sort.c: 193: readIR();
  3868  001482  ECFE  F029         	call	_readIR	;wreg free
  3869                           
  3870                           ;sort.c: 194: if(j == 3 || j == 4){
  3871  001486  0E03               	movlw	3
  3872  001488  0100               	movlb	0	; () banked
  3873  00148A  19C2               	xorwf	Loading@j& (0+255),w,b
  3874  00148C  0100               	movlb	0	; () banked
  3875  00148E  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3876  001490  B4D8               	btfsc	status,2,c
  3877  001492  D007               	goto	l7996
  3878                           
  3879                           ; BSR set to: 0
  3880  001494  0E04               	movlw	4
  3881  001496  0100               	movlb	0	; () banked
  3882  001498  19C2               	xorwf	Loading@j& (0+255),w,b
  3883  00149A  0100               	movlb	0	; () banked
  3884  00149C  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3885  00149E  A4D8               	btfss	status,2,c
  3886  0014A0  D005               	goto	l7998
  3887  0014A2                     l7996:
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;sort.c: 195: f_arm_position = 0;
  3891  0014A2  0E00               	movlw	0
  3892  0014A4  0100               	movlb	0	; () banked
  3893  0014A6  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3894  0014A8  0E00               	movlw	0
  3895  0014AA  D022               	goto	L2
  3896  0014AC                     l7998:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;sort.c: 197: else if(j == 5 || j == 6){
  3900  0014AC  0E05               	movlw	5
  3901  0014AE  0100               	movlb	0	; () banked
  3902  0014B0  19C2               	xorwf	Loading@j& (0+255),w,b
  3903  0014B2  0100               	movlb	0	; () banked
  3904  0014B4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3905  0014B6  B4D8               	btfsc	status,2,c
  3906  0014B8  D007               	goto	l826
  3907                           
  3908                           ; BSR set to: 0
  3909  0014BA  0E06               	movlw	6
  3910  0014BC  0100               	movlb	0	; () banked
  3911  0014BE  19C2               	xorwf	Loading@j& (0+255),w,b
  3912  0014C0  0100               	movlb	0	; () banked
  3913  0014C2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3914  0014C4  A4D8               	btfss	status,2,c
  3915  0014C6  D002               	goto	l8002
  3916  0014C8                     l826:
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;sort.c: 198: LATBbits.LATB2 = 1;
  3920  0014C8  848A               	bsf	3978,2,c	;volatile
  3921                           
  3922                           ;sort.c: 199: }
  3923  0014CA  D034               	goto	l823
  3924  0014CC                     l8002:
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;sort.c: 200: else if(j == 7 || j == 8){
  3928  0014CC  0E07               	movlw	7
  3929  0014CE  0100               	movlb	0	; () banked
  3930  0014D0  19C2               	xorwf	Loading@j& (0+255),w,b
  3931  0014D2  0100               	movlb	0	; () banked
  3932  0014D4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3933  0014D6  B4D8               	btfsc	status,2,c
  3934  0014D8  D007               	goto	l8006
  3935                           
  3936                           ; BSR set to: 0
  3937  0014DA  0E08               	movlw	8
  3938  0014DC  0100               	movlb	0	; () banked
  3939  0014DE  19C2               	xorwf	Loading@j& (0+255),w,b
  3940  0014E0  0100               	movlb	0	; () banked
  3941  0014E2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3942  0014E4  A4D8               	btfss	status,2,c
  3943  0014E6  D006               	goto	l828
  3944  0014E8                     l8006:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;sort.c: 201: f_arm_position = 1;
  3948  0014E8  0E00               	movlw	0
  3949  0014EA  0100               	movlb	0	; () banked
  3950  0014EC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3951  0014EE  0E01               	movlw	1
  3952  0014F0                     L2:
  3953  0014F0  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3954                           
  3955                           ;sort.c: 202: }
  3956  0014F2  D020               	goto	l823
  3957  0014F4                     l828:
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;sort.c: 203: else if(j % 2 == 0){
  3961  0014F4  0100               	movlb	0	; () banked
  3962  0014F6  B1C2               	btfsc	Loading@j& (0+255),0,b
  3963  0014F8  D01D               	goto	l823
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;sort.c: 204: LATBbits.LATB2 = !LATBbits.LATB2;
  3967  0014FA  B48A               	btfsc	3978,2,c	;volatile
  3968  0014FC  D004               	goto	u6740
  3969  0014FE  0100               	movlb	0	; () banked
  3970  001500  6BB1               	clrf	??_Loading& (0+255),b
  3971  001502  2BB1               	incf	??_Loading& (0+255),f,b
  3972  001504  D002               	goto	u6758
  3973  001506                     u6740:
  3974  001506  0100               	movlb	0	; () banked
  3975  001508  6BB1               	clrf	??_Loading& (0+255),b
  3976  00150A                     u6758:
  3977  00150A  0100               	movlb	0	; () banked
  3978  00150C  47B1               	rlncf	??_Loading& (0+255),f,b
  3979  00150E  47B1               	rlncf	??_Loading& (0+255),f,b
  3980  001510  508A               	movf	3978,w,c	;volatile
  3981  001512  0100               	movlb	0	; () banked
  3982  001514  19B1               	xorwf	??_Loading& (0+255),w,b
  3983  001516  0BFB               	andlw	-5
  3984  001518  19B1               	xorwf	??_Loading& (0+255),w,b
  3985  00151A  6E8A               	movwf	3978,c	;volatile
  3986                           
  3987                           ;sort.c: 205: f_arm_position = !f_arm_position;
  3988  00151C  0100               	movlb	0	; () banked
  3989  00151E  51EA               	movf	_f_arm_position& (0+255),w,b	;volatile
  3990  001520  0100               	movlb	0	; () banked
  3991  001522  11EB               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  3992  001524  A4D8               	btfss	status,2,c
  3993  001526  D002               	goto	u6760
  3994  001528  0E01               	movlw	1
  3995  00152A  D001               	goto	u6770
  3996  00152C                     u6760:
  3997  00152C  0E00               	movlw	0
  3998  00152E                     u6770:
  3999  00152E  0100               	movlb	0	; () banked
  4000  001530  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4001  001532  6BEB               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4002  001534                     l823:
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;sort.c: 206: }
  4006                           ;sort.c: 209: if(IR_signal==1){
  4007  001534  0100               	movlb	0	; () banked
  4008  001536  05E0               	decf	_IR_signal& (0+255),w,b
  4009  001538  0100               	movlb	0	; () banked
  4010  00153A  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4011  00153C  A4D8               	btfss	status,2,c
  4012  00153E  D098               	goto	l8062
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;sort.c: 210: _delay((unsigned long)((350)*(32000000/4000.0)));
  4016  001540  0E0F               	movlw	15
  4017  001542  0100               	movlb	0	; () banked
  4018  001544  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4019  001546  0E35               	movlw	53
  4020  001548  0100               	movlb	0	; () banked
  4021  00154A  6FB1               	movwf	??_Loading& (0+255),b
  4022  00154C  0E51               	movlw	81
  4023  00154E                     u10067:
  4024  00154E  2EE8               	decfsz	wreg,f,c
  4025  001550  D7FE               	bra	u10067
  4026  001552  2FB1               	decfsz	??_Loading& (0+255),f,b
  4027  001554  D7FC               	bra	u10067
  4028  001556  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4029  001558  D7FA               	bra	u10067
  4030                           
  4031                           ;sort.c: 211: readIR();
  4032  00155A  ECFE  F029         	call	_readIR	;wreg free
  4033                           
  4034                           ;sort.c: 212: if(IR_signal==1){
  4035  00155E  0100               	movlb	0	; () banked
  4036  001560  05E0               	decf	_IR_signal& (0+255),w,b
  4037  001562  0100               	movlb	0	; () banked
  4038  001564  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4039  001566  A4D8               	btfss	status,2,c
  4040  001568  D07F               	goto	l834
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;sort.c: 213: if(sensor_outputs[0]){
  4044  00156A  0100               	movlb	0	; () banked
  4045  00156C  51DA               	movf	_sensor_outputs& (0+255),w,b
  4046  00156E  0100               	movlb	0	; () banked
  4047  001570  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4048  001572  B4D8               	btfsc	status,2,c
  4049  001574  D011               	goto	l8024
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;sort.c: 214: LATAbits.LATA4 = 1;
  4053  001576  8889               	bsf	3977,4,c	;volatile
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;sort.c: 215: _delay((unsigned long)((250)*(32000000/4000.0)));
  4057  001578  0E0B               	movlw	11
  4058  00157A  0100               	movlb	0	; () banked
  4059  00157C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4060  00157E  0E26               	movlw	38
  4061  001580  0100               	movlb	0	; () banked
  4062  001582  6FB1               	movwf	??_Loading& (0+255),b
  4063  001584  0E5D               	movlw	93
  4064  001586                     u10077:
  4065  001586  2EE8               	decfsz	wreg,f,c
  4066  001588  D7FE               	bra	u10077
  4067  00158A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4068  00158C  D7FC               	bra	u10077
  4069  00158E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4070  001590  D7FA               	bra	u10077
  4071  001592  D000               	nop2	
  4072                           
  4073                           ;sort.c: 216: LATAbits.LATA4 = 0;
  4074  001594  9889               	bcf	3977,4,c	;volatile
  4075                           
  4076                           ;sort.c: 217: }
  4077  001596  D068               	goto	l834
  4078  001598                     l8024:
  4079                           
  4080                           ;sort.c: 218: else{
  4081                           ;sort.c: 219: for(int i = 0; i<2500; i++){
  4082  001598  0E00               	movlw	0
  4083  00159A  0100               	movlb	0	; () banked
  4084  00159C  6FBF               	movwf	(Loading@i_1137+1)& (0+255),b
  4085  00159E  0E00               	movlw	0
  4086  0015A0  6FBE               	movwf	Loading@i_1137& (0+255),b
  4087  0015A2                     l8026:
  4088                           
  4089                           ; BSR set to: 0
  4090  0015A2  0100               	movlb	0	; () banked
  4091  0015A4  BFBF               	btfsc	(Loading@i_1137+1)& (0+255),7,b
  4092  0015A6  D041               	goto	l8054
  4093  0015A8  0EC4               	movlw	196
  4094  0015AA  0100               	movlb	0	; () banked
  4095  0015AC  5DBE               	subwf	Loading@i_1137& (0+255),w,b
  4096  0015AE  0E09               	movlw	9
  4097  0015B0  0100               	movlb	0	; () banked
  4098  0015B2  59BF               	subwfb	(Loading@i_1137+1)& (0+255),w,b
  4099  0015B4  B0D8               	btfsc	status,0,c
  4100  0015B6  D058               	goto	l834
  4101  0015B8  D038               	goto	l8054
  4102  0015BA                     l840:
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;sort.c: 222: LATAbits.LATA4 = 1;
  4106  0015BA  8889               	bsf	3977,4,c	;volatile
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;sort.c: 223: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4110  0015BC  0EC8               	movlw	200
  4111  0015BE                     u10087:
  4112  0015BE  2EE8               	decfsz	wreg,f,c
  4113  0015C0  D7FE               	bra	u10087
  4114                           
  4115                           ;sort.c: 224: LATAbits.LATA4 = 0;
  4116  0015C2  9889               	bcf	3977,4,c	;volatile
  4117                           
  4118                           ;sort.c: 225: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4119  0015C4  0E42               	movlw	66
  4120  0015C6                     u10097:
  4121  0015C6  2EE8               	decfsz	wreg,f,c
  4122  0015C8  D7FE               	bra	u10097
  4123  0015CA  D01C               	goto	L3
  4124  0015CC                     l842:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;sort.c: 228: LATAbits.LATA4 = 1;
  4128  0015CC  8889               	bsf	3977,4,c	;volatile
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;sort.c: 229: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4132  0015CE  0ED5               	movlw	213
  4133  0015D0                     u10107:
  4134  0015D0  2EE8               	decfsz	wreg,f,c
  4135  0015D2  D7FE               	bra	u10107
  4136  0015D4  F000               	nop	
  4137                           
  4138                           ;sort.c: 230: LATAbits.LATA4 = 0;
  4139  0015D6  9889               	bcf	3977,4,c	;volatile
  4140                           
  4141                           ;sort.c: 231: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4142  0015D8  0E35               	movlw	53
  4143  0015DA                     u10117:
  4144  0015DA  2EE8               	decfsz	wreg,f,c
  4145  0015DC  D7FE               	bra	u10117
  4146  0015DE  D01D               	goto	L4
  4147  0015E0                     l843:
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;sort.c: 234: LATAbits.LATA4 = 1;
  4151  0015E0  8889               	bsf	3977,4,c	;volatile
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;sort.c: 235: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4155  0015E2  0EE2               	movlw	226
  4156  0015E4                     u10127:
  4157  0015E4  2EE8               	decfsz	wreg,f,c
  4158  0015E6  D7FE               	bra	u10127
  4159  0015E8  D000               	nop2	
  4160                           
  4161                           ;sort.c: 236: LATAbits.LATA4 = 0;
  4162  0015EA  9889               	bcf	3977,4,c	;volatile
  4163                           
  4164                           ;sort.c: 237: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4165  0015EC  0E28               	movlw	40
  4166  0015EE                     u10137:
  4167  0015EE  2EE8               	decfsz	wreg,f,c
  4168  0015F0  D7FE               	bra	u10137
  4169                           
  4170                           ;sort.c: 238: break;
  4171  0015F2  D036               	goto	l8056
  4172  0015F4                     l844:
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;sort.c: 240: LATAbits.LATA4 = 1;
  4176  0015F4  8889               	bsf	3977,4,c	;volatile
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;sort.c: 241: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4180  0015F6  0EF0               	movlw	240
  4181  0015F8                     u10147:
  4182  0015F8  2EE8               	decfsz	wreg,f,c
  4183  0015FA  D7FE               	bra	u10147
  4184                           
  4185                           ;sort.c: 242: LATAbits.LATA4 = 0;
  4186  0015FC  9889               	bcf	3977,4,c	;volatile
  4187                           
  4188                           ;sort.c: 243: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4189  0015FE  0E1A               	movlw	26
  4190  001600                     u10157:
  4191  001600  2EE8               	decfsz	wreg,f,c
  4192  001602  D7FE               	bra	u10157
  4193  001604                     L3:
  4194  001604  D000               	nop2	
  4195                           
  4196                           ;sort.c: 244: break;
  4197  001606  D02C               	goto	l8056
  4198  001608                     l845:
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;sort.c: 246: LATAbits.LATA4 = 1;
  4202  001608  8889               	bsf	3977,4,c	;volatile
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;sort.c: 247: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4206  00160A  0EFD               	movlw	253
  4207  00160C                     u10167:
  4208  00160C  2EE8               	decfsz	wreg,f,c
  4209  00160E  D7FE               	bra	u10167
  4210  001610  F000               	nop	
  4211                           
  4212                           ;sort.c: 248: LATAbits.LATA4 = 0;
  4213  001612  9889               	bcf	3977,4,c	;volatile
  4214                           
  4215                           ;sort.c: 249: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4216  001614  0E85               	movlw	133
  4217  001616                     u10177:
  4218  001616  2EE8               	decfsz	wreg,f,c
  4219  001618  D7FE               	bra	u10177
  4220  00161A                     L4:
  4221  00161A  F000               	nop	
  4222                           
  4223                           ;sort.c: 250: break;
  4224  00161C  D021               	goto	l8056
  4225  00161E                     l846:
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;sort.c: 252: LATAbits.LATA4 = 1;
  4229  00161E  8889               	bsf	3977,4,c	;volatile
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;sort.c: 253: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4233  001620  0EA0               	movlw	160
  4234  001622                     u10187:
  4235  001622  D000               	nop2	
  4236  001624  2EE8               	decfsz	wreg,f,c
  4237  001626  D7FD               	bra	u10187
  4238                           
  4239                           ;sort.c: 255: }
  4240                           
  4241                           ;sort.c: 254: break;
  4242  001628  D01B               	goto	l8056
  4243  00162A                     l8054:
  4244  00162A  C0C2  F0B1         	movff	Loading@j,??_Loading
  4245  00162E  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4246                           
  4247                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4248                           ; Switch size 1, requested type "space"
  4249                           ; Number of cases is 1, Range of values is 0 to 0
  4250                           ; switch strategies available:
  4251                           ; Name         Instructions Cycles
  4252                           ; simple_byte            4     3 (average)
  4253                           ;	Chosen strategy is simple_byte
  4254  001632  0100               	movlb	0	; () banked
  4255  001634  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4256  001636  0A00               	xorlw	0	; case 0
  4257  001638  A4D8               	btfss	status,2,c
  4258  00163A  D7F1               	goto	l846
  4259                           
  4260                           ; BSR set to: 0
  4261                           ; Switch size 1, requested type "space"
  4262                           ; Number of cases is 5, Range of values is 0 to 4
  4263                           ; switch strategies available:
  4264                           ; Name         Instructions Cycles
  4265                           ; simple_byte           16     9 (average)
  4266                           ;	Chosen strategy is simple_byte
  4267  00163C  0100               	movlb	0	; () banked
  4268  00163E  51B1               	movf	??_Loading& (0+255),w,b
  4269  001640  0A00               	xorlw	0	; case 0
  4270  001642  B4D8               	btfsc	status,2,c
  4271  001644  D7BA               	goto	l840
  4272  001646  0A01               	xorlw	1	; case 1
  4273  001648  B4D8               	btfsc	status,2,c
  4274  00164A  D7C0               	goto	l842
  4275  00164C  0A03               	xorlw	3	; case 2
  4276  00164E  B4D8               	btfsc	status,2,c
  4277  001650  D7C7               	goto	l843
  4278  001652  0A01               	xorlw	1	; case 3
  4279  001654  B4D8               	btfsc	status,2,c
  4280  001656  D7CE               	goto	l844
  4281  001658  0A07               	xorlw	7	; case 4
  4282  00165A  B4D8               	btfsc	status,2,c
  4283  00165C  D7D5               	goto	l845
  4284  00165E  D7DF               	goto	l846
  4285  001660                     l8056:
  4286  001660  0100               	movlb	0	; () banked
  4287  001662  4BBE               	infsnz	Loading@i_1137& (0+255),f,b
  4288  001664  2BBF               	incf	(Loading@i_1137+1)& (0+255),f,b
  4289  001666  D79D               	goto	l8026
  4290  001668                     l834:
  4291                           
  4292                           ;sort.c: 256: }
  4293                           ;sort.c: 257: }
  4294                           ;sort.c: 258: }
  4295                           ;sort.c: 259: LATAbits.LATA4 = 0;
  4296  001668  9889               	bcf	3977,4,c	;volatile
  4297                           
  4298                           ;sort.c: 260: j++;
  4299  00166A  0100               	movlb	0	; () banked
  4300  00166C  4BC2               	infsnz	Loading@j& (0+255),f,b
  4301  00166E  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4302  001670                     l8062:
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;sort.c: 261: }
  4306                           ;sort.c: 263: if(!IR_signal){
  4307  001670  0100               	movlb	0	; () banked
  4308  001672  51E0               	movf	_IR_signal& (0+255),w,b
  4309  001674  0100               	movlb	0	; () banked
  4310  001676  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4311  001678  A4D8               	btfss	status,2,c
  4312  00167A  D016               	goto	l8074
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;sort.c: 264: _delay((unsigned long)((500)*(32000000/4000.0)));
  4316  00167C  0E15               	movlw	21
  4317  00167E  0100               	movlb	0	; () banked
  4318  001680  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4319  001682  0E4B               	movlw	75
  4320  001684  0100               	movlb	0	; () banked
  4321  001686  6FB1               	movwf	??_Loading& (0+255),b
  4322  001688  0EBE               	movlw	190
  4323  00168A                     u10197:
  4324  00168A  2EE8               	decfsz	wreg,f,c
  4325  00168C  D7FE               	bra	u10197
  4326  00168E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4327  001690  D7FC               	bra	u10197
  4328  001692  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4329  001694  D7FA               	bra	u10197
  4330  001696  F000               	nop	
  4331                           
  4332                           ;sort.c: 265: readIR();
  4333  001698  ECFE  F029         	call	_readIR	;wreg free
  4334                           
  4335                           ;sort.c: 266: if(IR_signal==1){
  4336  00169C  0100               	movlb	0	; () banked
  4337  00169E  05E0               	decf	_IR_signal& (0+255),w,b
  4338  0016A0  0100               	movlb	0	; () banked
  4339  0016A2  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4340  0016A4  A4D8               	btfss	status,2,c
  4341  0016A6  D006               	goto	l850
  4342  0016A8                     l8074:
  4343                           
  4344                           ; BSR set to: 0
  4345  0016A8  0100               	movlb	0	; () banked
  4346  0016AA  05E0               	decf	_IR_signal& (0+255),w,b
  4347  0016AC  0100               	movlb	0	; () banked
  4348  0016AE  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4349  0016B0  B4D8               	btfsc	status,2,c
  4350  0016B2  D6E7               	goto	l7990
  4351  0016B4                     l850:
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;sort.c: 271: }
  4355                           ;sort.c: 272: }
  4356                           ;sort.c: 273: }
  4357                           ;sort.c: 274: LATBbits.LATB2 = 0;
  4358  0016B4  948A               	bcf	3978,2,c	;volatile
  4359  0016B6                     l8076:
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;sort.c: 275: }
  4363                           ;sort.c: 276: f_can_coming_to_ID = 1;
  4364  0016B6  0E00               	movlw	0
  4365  0016B8  0101               	movlb	1	; () banked
  4366  0016BA  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4367  0016BC  0E01               	movlw	1
  4368  0016BE  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4369                           
  4370                           ; BSR set to: 1
  4371                           ;sort.c: 277: TMR2IF = 1;
  4372  0016C0  829E               	bsf	3998,1,c	;volatile
  4373                           
  4374                           ; BSR set to: 1
  4375                           
  4376                           ; BSR set to: 1
  4377  0016C2  0012               	return	
  4378  0016C4                     __end_of_Loading:
  4379                           	opt stack 0
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           prodh	equ	0xFF4
  4385                           prodl	equ	0xFF3
  4386                           postinc0	equ	0xFEE
  4387                           wreg	equ	0xFE8
  4388                           postdec1	equ	0xFE5
  4389                           fsr1l	equ	0xFE1
  4390                           status	equ	0xFD8
  4391                           
  4392 ;; *************** function _initSortTimer *****************
  4393 ;; Defined at:
  4394 ;;		line 455 in file "sort.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;		None
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;  i               2    8[BANK0 ] int 
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      void 
  4401 ;; Registers used:
  4402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4412 ;;Total ram usage:        5 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; Hardware stack levels required when called:   10
  4415 ;; This function calls:
  4416 ;;		_getRTC
  4417 ;; This function is called by:
  4418 ;;		_Loading
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text3
  4423  004AAC                     __ptext3:
  4424                           	opt stack 0
  4425  004AAC                     _initSortTimer:
  4426                           	opt stack 18
  4427                           
  4428                           ;sort.c: 457: getRTC();
  4429                           
  4430                           ;incstack = 0
  4431  004AAC  EC42  F026         	call	_getRTC	;wreg free
  4432                           
  4433                           ;sort.c: 458: for(int i = 0; i < 7; i++){
  4434  004AB0  0E00               	movlw	0
  4435  004AB2  0100               	movlb	0	; () banked
  4436  004AB4  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4437  004AB6  0E00               	movlw	0
  4438  004AB8  6F88               	movwf	initSortTimer@i& (0+255),b
  4439  004ABA                     l7378:
  4440                           
  4441                           ; BSR set to: 0
  4442  004ABA  0100               	movlb	0	; () banked
  4443  004ABC  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4444  004ABE  D008               	goto	l7382
  4445  004AC0  0100               	movlb	0	; () banked
  4446  004AC2  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4447  004AC4  E140               	bnz	l7388
  4448  004AC6  0E07               	movlw	7
  4449  004AC8  0100               	movlb	0	; () banked
  4450  004ACA  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4451  004ACC  B0D8               	btfsc	status,0,c
  4452  004ACE  D03B               	goto	l7388
  4453  004AD0                     l7382:
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;sort.c: 459: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4457  004AD0  0E1C               	movlw	low _time
  4458  004AD2  0100               	movlb	0	; () banked
  4459  004AD4  2588               	addwf	initSortTimer@i& (0+255),w,b
  4460  004AD6  6ED9               	movwf	fsr2l,c
  4461  004AD8  0E01               	movlw	high _time
  4462  004ADA  0100               	movlb	0	; () banked
  4463  004ADC  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4464  004ADE  6EDA               	movwf	fsr2h,c
  4465  004AE0  50DF               	movf	indf2,w,c
  4466  004AE2  0100               	movlb	0	; () banked
  4467  004AE4  6F85               	movwf	??_initSortTimer& (0+255),b
  4468  004AE6  0100               	movlb	0	; () banked
  4469  004AE8  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4470  004AEA  0E0F               	movlw	15
  4471  004AEC  1785               	andwf	??_initSortTimer& (0+255),f,b
  4472  004AEE  0E0F               	movlw	15
  4473  004AF0  0100               	movlb	0	; () banked
  4474  004AF2  1785               	andwf	??_initSortTimer& (0+255),f,b
  4475  004AF4  0100               	movlb	0	; () banked
  4476  004AF6  5185               	movf	??_initSortTimer& (0+255),w,b
  4477  004AF8  0D0A               	mullw	10
  4478  004AFA  0E1C               	movlw	low _time
  4479  004AFC  0100               	movlb	0	; () banked
  4480  004AFE  2588               	addwf	initSortTimer@i& (0+255),w,b
  4481  004B00  6ED9               	movwf	fsr2l,c
  4482  004B02  0E01               	movlw	high _time
  4483  004B04  0100               	movlb	0	; () banked
  4484  004B06  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4485  004B08  6EDA               	movwf	fsr2h,c
  4486  004B0A  50DF               	movf	indf2,w,c
  4487  004B0C  0B0F               	andlw	15
  4488  004B0E  0100               	movlb	0	; () banked
  4489  004B10  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4490  004B12  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4491  004B14  50F3               	movf	prodl,w,c
  4492  004B16  0100               	movlb	0	; () banked
  4493  004B18  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4494  004B1A  50F4               	movf	prodh,w,c
  4495  004B1C  0100               	movlb	0	; () banked
  4496  004B1E  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4497  004B20  90D8               	bcf	status,0,c
  4498  004B22  0100               	movlb	0	; () banked
  4499  004B24  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4500  004B26  6ED9               	movwf	fsr2l,c
  4501  004B28  0100               	movlb	0	; () banked
  4502  004B2A  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4503  004B2C  6EDA               	movwf	fsr2h,c
  4504  004B2E  0E0E               	movlw	low _startTime
  4505  004B30  26D9               	addwf	fsr2l,f,c
  4506  004B32  0E01               	movlw	high _startTime
  4507  004B34  22DA               	addwfc	fsr2h,f,c
  4508  004B36  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4509  004B3A  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4510                           
  4511                           ; BSR set to: 0
  4512  004B3E  0100               	movlb	0	; () banked
  4513  004B40  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4514  004B42  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4515  004B44  D7BA               	goto	l7378
  4516  004B46                     l7388:
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;sort.c: 460: }
  4520                           ;sort.c: 462: T0CON = 0b00010111;
  4521  004B46  0E17               	movlw	23
  4522  004B48  6ED5               	movwf	4053,c	;volatile
  4523                           
  4524                           ;sort.c: 471: TMR0H = 0b10000101;
  4525  004B4A  0E85               	movlw	133
  4526  004B4C  6ED7               	movwf	4055,c	;volatile
  4527                           
  4528                           ;sort.c: 472: TMR0L = 0b11101110;
  4529  004B4E  0EEE               	movlw	238
  4530  004B50  6ED6               	movwf	4054,c	;volatile
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;sort.c: 473: TMR0ON = 1;
  4534  004B52  8ED5               	bsf	4053,7,c	;volatile
  4535                           
  4536                           ; BSR set to: 0
  4537  004B54  0012               	return		;funcret
  4538  004B56                     __end_of_initSortTimer:
  4539                           	opt stack 0
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodh	equ	0xFF4
  4545                           prodl	equ	0xFF3
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           postdec1	equ	0xFE5
  4549                           fsr1l	equ	0xFE1
  4550                           indf2	equ	0xFDF
  4551                           postinc2	equ	0xFDE
  4552                           postdec2	equ	0xFDD
  4553                           fsr2h	equ	0xFDA
  4554                           fsr2l	equ	0xFD9
  4555                           status	equ	0xFD8
  4556                           
  4557 ;; *************** function _initGlobalVars *****************
  4558 ;; Defined at:
  4559 ;;		line 420 in file "sort.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;		None
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;		None
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      void 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;Total ram usage:        0 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    7
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_Loading
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text4
  4588  0046D8                     __ptext4:
  4589                           	opt stack 0
  4590  0046D8                     _initGlobalVars:
  4591                           	opt stack 21
  4592                           
  4593                           ;sort.c: 422: first = 0;
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;incstack = 0
  4597  0046D8  0E00               	movlw	0
  4598  0046DA  0101               	movlb	1	; () banked
  4599  0046DC  6F38               	movwf	(_first+1)& (0+255),b
  4600  0046DE  0E00               	movlw	0
  4601  0046E0  6F37               	movwf	_first& (0+255),b
  4602                           
  4603                           ;sort.c: 425: f_loadingNewCan = 0;
  4604  0046E2  0E00               	movlw	0
  4605  0046E4  0100               	movlb	0	; () banked
  4606  0046E6  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4607  0046E8  0E00               	movlw	0
  4608  0046EA  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4609                           
  4610                           ;sort.c: 426: f_lastCan = 0;
  4611  0046EC  0E00               	movlw	0
  4612  0046EE  0100               	movlb	0	; () banked
  4613  0046F0  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  4614  0046F2  0E00               	movlw	0
  4615  0046F4  6FEC               	movwf	_f_lastCan& (0+255),b
  4616                           
  4617                           ;sort.c: 427: f_ID_receive = 1;
  4618  0046F6  0E00               	movlw	0
  4619  0046F8  0101               	movlb	1	; () banked
  4620  0046FA  6F2E               	movwf	(_f_ID_receive+1)& (0+255),b
  4621  0046FC  0E01               	movlw	1
  4622  0046FE  6F2D               	movwf	_f_ID_receive& (0+255),b
  4623                           
  4624                           ;sort.c: 428: f_can_coming_to_ID = 0;
  4625  004700  0E00               	movlw	0
  4626  004702  0101               	movlb	1	; () banked
  4627  004704  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4628  004706  0E00               	movlw	0
  4629  004708  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4630                           
  4631                           ;sort.c: 429: f_can_coming_to_distribution = 0;
  4632  00470A  0E00               	movlw	0
  4633  00470C  0101               	movlb	1	; () banked
  4634  00470E  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4635  004710  0E00               	movlw	0
  4636  004712  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  4637                           
  4638                           ;sort.c: 430: f_can_distributed = 1;
  4639  004714  0E00               	movlw	0
  4640  004716  0101               	movlb	1	; () banked
  4641  004718  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  4642  00471A  0E01               	movlw	1
  4643  00471C  6F33               	movwf	_f_can_distributed& (0+255),b
  4644                           
  4645                           ;sort.c: 431: f_most_recent_sort_time = 0;
  4646  00471E  0E00               	movlw	0
  4647  004720  0101               	movlb	1	; () banked
  4648  004722  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4649  004724  0E00               	movlw	0
  4650  004726  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  4651                           
  4652                           ;sort.c: 434: count_total = 0;
  4653  004728  0E00               	movlw	0
  4654  00472A  0100               	movlb	0	; () banked
  4655  00472C  6FFF               	movwf	(_count_total+1)& (0+255),b
  4656  00472E  0E00               	movlw	0
  4657  004730  6FFE               	movwf	_count_total& (0+255),b
  4658                           
  4659                           ;sort.c: 435: count_pop_no_tab = 0;
  4660  004732  0E00               	movlw	0
  4661  004734  0101               	movlb	1	; () banked
  4662  004736  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4663  004738  0E00               	movlw	0
  4664  00473A  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4665                           
  4666                           ;sort.c: 436: count_pop_w_tab = 0;
  4667  00473C  0E00               	movlw	0
  4668  00473E  0101               	movlb	1	; () banked
  4669  004740  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4670  004742  0E00               	movlw	0
  4671  004744  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4672                           
  4673                           ;sort.c: 437: count_can_w_lab = 0;
  4674  004746  0E00               	movlw	0
  4675  004748  0101               	movlb	1	; () banked
  4676  00474A  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4677  00474C  0E00               	movlw	0
  4678  00474E  6F25               	movwf	_count_can_w_lab& (0+255),b
  4679                           
  4680                           ;sort.c: 438: count_can_no_lab = 0;
  4681  004750  0E00               	movlw	0
  4682  004752  0101               	movlb	1	; () banked
  4683  004754  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4684  004756  0E00               	movlw	0
  4685  004758  6F23               	movwf	_count_can_no_lab& (0+255),b
  4686                           
  4687                           ;sort.c: 441: most_recent_sort_time = 999;
  4688  00475A  0E03               	movlw	3
  4689  00475C  0101               	movlb	1	; () banked
  4690  00475E  6F46               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4691  004760  0EE7               	movlw	231
  4692  004762  6F45               	movwf	_most_recent_sort_time& (0+255),b
  4693                           
  4694                           ;sort.c: 444: motor_toggle_count = 0;
  4695  004764  0E00               	movlw	0
  4696  004766  0101               	movlb	1	; () banked
  4697  004768  6F48               	movwf	(_motor_toggle_count+1)& (0+255),b
  4698  00476A  0E00               	movlw	0
  4699  00476C  6F47               	movwf	_motor_toggle_count& (0+255),b
  4700                           
  4701                           ;sort.c: 447: servo_timer_counter = 0;
  4702  00476E  0E00               	movlw	0
  4703  004770  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4704  004772  0E00               	movlw	0
  4705  004774  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4706                           
  4707                           ;sort.c: 448: servo_timer_target = 9999;
  4708  004776  0E27               	movlw	39
  4709  004778  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4710  00477A  0E0F               	movlw	15
  4711  00477C  6E6F               	movwf	_servo_timer_target,c	;volatile
  4712                           
  4713                           ;sort.c: 449: timer2_counter = 0;
  4714  00477E  0E00               	movlw	0
  4715  004780  6E74               	movwf	_timer2_counter+1,c	;volatile
  4716  004782  0E00               	movlw	0
  4717  004784  6E73               	movwf	_timer2_counter,c	;volatile
  4718                           
  4719                           ;sort.c: 450: f_arm_position = 0;
  4720  004786  0E00               	movlw	0
  4721  004788  0100               	movlb	0	; () banked
  4722  00478A  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4723  00478C  0E00               	movlw	0
  4724  00478E  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;sort.c: 451: pan_servo_state = -1;
  4728  004790  686B               	setf	_pan_servo_state,c	;volatile
  4729  004792  686C               	setf	_pan_servo_state+1,c	;volatile
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;sort.c: 452: tilt_servo_state = -1;
  4733  004794  6871               	setf	_tilt_servo_state,c	;volatile
  4734  004796  6872               	setf	_tilt_servo_state+1,c	;volatile
  4735                           
  4736                           ;sort.c: 453: f_panning_to_bin = 0;
  4737  004798  0E00               	movlw	0
  4738  00479A  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4739  00479C  0E00               	movlw	0
  4740  00479E  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4741                           
  4742                           ; BSR set to: 0
  4743  0047A0  0012               	return		;funcret
  4744  0047A2                     __end_of_initGlobalVars:
  4745                           	opt stack 0
  4746                           tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodh	equ	0xFF4
  4751                           prodl	equ	0xFF3
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           postdec1	equ	0xFE5
  4755                           fsr1l	equ	0xFE1
  4756                           indf2	equ	0xFDF
  4757                           postinc2	equ	0xFDE
  4758                           postdec2	equ	0xFDD
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function _getMAG *****************
  4764 ;; Defined at:
  4765 ;;		line 559 in file "sort.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;		None
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;		None
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  1    wreg      void 
  4772 ;; Registers used:
  4773 ;;		wreg, status,2, status,0, cstack
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;Total ram usage:        2 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    9
  4786 ;; This function calls:
  4787 ;;		_readMAG
  4788 ;; This function is called by:
  4789 ;;		_Loading
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           	psect	text5
  4794  0056C2                     __ptext5:
  4795                           	opt stack 0
  4796  0056C2                     _getMAG:
  4797                           	opt stack 19
  4798                           
  4799                           ;sort.c: 560: readMAG();
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;incstack = 0
  4803  0056C2  EC4A  F02A         	call	_readMAG	;wreg free
  4804                           
  4805                           ;sort.c: 562: if(MAG_signal==1){
  4806  0056C6  0100               	movlb	0	; () banked
  4807  0056C8  05E2               	decf	_MAG_signal& (0+255),w,b
  4808  0056CA  0100               	movlb	0	; () banked
  4809  0056CC  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4810  0056CE  A4D8               	btfss	status,2,c
  4811  0056D0  0012               	return	
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;sort.c: 563: _delay((unsigned long)((500)*(32000000/4000.0)));
  4815  0056D2  0E15               	movlw	21
  4816  0056D4  0100               	movlb	0	; () banked
  4817  0056D6  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4818  0056D8  0E4B               	movlw	75
  4819  0056DA  0100               	movlb	0	; () banked
  4820  0056DC  6F86               	movwf	??_getMAG& (0+255),b
  4821  0056DE  0EBE               	movlw	190
  4822  0056E0                     u10207:
  4823  0056E0  2EE8               	decfsz	wreg,f,c
  4824  0056E2  D7FE               	bra	u10207
  4825  0056E4  2F86               	decfsz	??_getMAG& (0+255),f,b
  4826  0056E6  D7FC               	bra	u10207
  4827  0056E8  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4828  0056EA  D7FA               	bra	u10207
  4829  0056EC  F000               	nop	
  4830                           
  4831                           ;sort.c: 564: readMAG();
  4832  0056EE  EC4A  F02A         	call	_readMAG	;wreg free
  4833  0056F2  0012               	return	
  4834  0056F4                     __end_of_getMAG:
  4835                           	opt stack 0
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           prodh	equ	0xFF4
  4841                           prodl	equ	0xFF3
  4842                           postinc0	equ	0xFEE
  4843                           wreg	equ	0xFE8
  4844                           postdec1	equ	0xFE5
  4845                           fsr1l	equ	0xFE1
  4846                           indf2	equ	0xFDF
  4847                           postinc2	equ	0xFDE
  4848                           postdec2	equ	0xFDD
  4849                           fsr2h	equ	0xFDA
  4850                           fsr2l	equ	0xFD9
  4851                           status	equ	0xFD8
  4852                           
  4853 ;; *************** function _getIR *****************
  4854 ;; Defined at:
  4855 ;;		line 543 in file "sort.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  i               2    7[BANK0 ] int 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg, status,2, status,0, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4873 ;;Total ram usage:        3 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    9
  4876 ;; This function calls:
  4877 ;;		_readIR
  4878 ;; This function is called by:
  4879 ;;		_Loading
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           	psect	text6
  4884  004EFC                     __ptext6:
  4885                           	opt stack 0
  4886  004EFC                     _getIR:
  4887                           	opt stack 19
  4888                           
  4889                           ;sort.c: 544: readIR();
  4890                           
  4891                           ;incstack = 0
  4892  004EFC  ECFE  F029         	call	_readIR	;wreg free
  4893                           
  4894                           ;sort.c: 545: for(int i = 0; i < 150; i++){
  4895  004F00  0E00               	movlw	0
  4896  004F02  0100               	movlb	0	; () banked
  4897  004F04  6F88               	movwf	(getIR@i+1)& (0+255),b
  4898  004F06  0E00               	movlw	0
  4899  004F08  6F87               	movwf	getIR@i& (0+255),b
  4900  004F0A                     l7478:
  4901                           
  4902                           ; BSR set to: 0
  4903  004F0A  0100               	movlb	0	; () banked
  4904  004F0C  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4905  004F0E  D008               	goto	l7482
  4906  004F10  0100               	movlb	0	; () banked
  4907  004F12  5188               	movf	(getIR@i+1)& (0+255),w,b
  4908  004F14  E11A               	bnz	l7494
  4909  004F16  0E96               	movlw	150
  4910  004F18  0100               	movlb	0	; () banked
  4911  004F1A  5D87               	subwf	getIR@i& (0+255),w,b
  4912  004F1C  B0D8               	btfsc	status,0,c
  4913  004F1E  D015               	goto	l7494
  4914  004F20                     l7482:
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;sort.c: 546: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4918  004F20  0E06               	movlw	6
  4919  004F22  0100               	movlb	0	; () banked
  4920  004F24  6F86               	movwf	??_getIR& (0+255),b
  4921  004F26  0E30               	movlw	48
  4922  004F28                     u10217:
  4923  004F28  2EE8               	decfsz	wreg,f,c
  4924  004F2A  D7FE               	bra	u10217
  4925  004F2C  2F86               	decfsz	??_getIR& (0+255),f,b
  4926  004F2E  D7FC               	bra	u10217
  4927  004F30  F000               	nop	
  4928                           
  4929                           ;sort.c: 547: readIR();
  4930  004F32  ECFE  F029         	call	_readIR	;wreg free
  4931                           
  4932                           ;sort.c: 548: if(!IR_signal){
  4933  004F36  0100               	movlb	0	; () banked
  4934  004F38  51E0               	movf	_IR_signal& (0+255),w,b
  4935  004F3A  0100               	movlb	0	; () banked
  4936  004F3C  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4937  004F3E  B4D8               	btfsc	status,2,c
  4938  004F40  D004               	goto	l7494
  4939                           
  4940                           ; BSR set to: 0
  4941                           
  4942                           ; BSR set to: 0
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;sort.c: 549: break;
  4946  004F42  0100               	movlb	0	; () banked
  4947  004F44  4B87               	infsnz	getIR@i& (0+255),f,b
  4948  004F46  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4949  004F48  D7E0               	goto	l7478
  4950  004F4A                     l7494:
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;sort.c: 550: }
  4954                           ;sort.c: 551: }
  4955                           ;sort.c: 552: if(IR_signal==1){
  4956  004F4A  0100               	movlb	0	; () banked
  4957  004F4C  05E0               	decf	_IR_signal& (0+255),w,b
  4958  004F4E  0100               	movlb	0	; () banked
  4959  004F50  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4960  004F52  A4D8               	btfss	status,2,c
  4961  004F54  D006               	goto	l7498
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;sort.c: 553: f_loadingNewCan = 1;
  4965  004F56  0E00               	movlw	0
  4966  004F58  0100               	movlb	0	; () banked
  4967  004F5A  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4968  004F5C  0E01               	movlw	1
  4969  004F5E  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4970                           
  4971                           ;sort.c: 554: }
  4972  004F60  0012               	return	
  4973  004F62                     l7498:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;sort.c: 555: else{
  4977                           ;sort.c: 556: f_loadingNewCan = 0;
  4978  004F62  0E00               	movlw	0
  4979  004F64  0100               	movlb	0	; () banked
  4980  004F66  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4981  004F68  0E00               	movlw	0
  4982  004F6A  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4983  004F6C  0012               	return	
  4984  004F6E                     __end_of_getIR:
  4985                           	opt stack 0
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           prodh	equ	0xFF4
  4991                           prodl	equ	0xFF3
  4992                           postinc0	equ	0xFEE
  4993                           wreg	equ	0xFE8
  4994                           postdec1	equ	0xFE5
  4995                           fsr1l	equ	0xFE1
  4996                           indf2	equ	0xFDF
  4997                           postinc2	equ	0xFDE
  4998                           postdec2	equ	0xFDD
  4999                           fsr2h	equ	0xFDA
  5000                           fsr2l	equ	0xFD9
  5001                           status	equ	0xFD8
  5002                           
  5003 ;; *************** function _readIR *****************
  5004 ;; Defined at:
  5005 ;;		line 23 in file "ADCFunctionality.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;		None
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  res             2    4[BANK0 ] int 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  1    wreg      void 
  5012 ;; Registers used:
  5013 ;;		wreg, status,2, status,0, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;Total ram usage:        4 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    8
  5026 ;; This function calls:
  5027 ;;		_readADC
  5028 ;; This function is called by:
  5029 ;;		_Loading
  5030 ;;		_getIR
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text7
  5035  0053FC                     __ptext7:
  5036                           	opt stack 0
  5037  0053FC                     _readIR:
  5038                           	opt stack 20
  5039                           
  5040                           ;ADCFunctionality.c: 24: readADC(0);
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;incstack = 0
  5044  0053FC  0E00               	movlw	0
  5045  0053FE  ECC7  F02C         	call	_readADC
  5046                           
  5047                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5048  005402  50C3               	movf	4035,w,c	;volatile
  5049  005404  CFC4 F082          	movff	4036,??_readIR	;volatile
  5050  005408  0100               	movlb	0	; () banked
  5051  00540A  6B83               	clrf	(??_readIR+1)& (0+255),b
  5052  00540C  C082  F083         	movff	??_readIR,??_readIR+1
  5053  005410  0100               	movlb	0	; () banked
  5054  005412  6B82               	clrf	??_readIR& (0+255),b
  5055  005414  0100               	movlb	0	; () banked
  5056  005416  1182               	iorwf	??_readIR& (0+255),w,b
  5057  005418  0100               	movlb	0	; () banked
  5058  00541A  6F84               	movwf	readIR@res& (0+255),b
  5059  00541C  0100               	movlb	0	; () banked
  5060  00541E  5183               	movf	(??_readIR+1)& (0+255),w,b
  5061  005420  0100               	movlb	0	; () banked
  5062  005422  6F85               	movwf	(readIR@res+1)& (0+255),b
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5066  005424  0100               	movlb	0	; () banked
  5067  005426  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5068  005428  D00A               	goto	u5220
  5069  00542A  0E21               	movlw	33
  5070  00542C  0100               	movlb	0	; () banked
  5071  00542E  5D84               	subwf	readIR@res& (0+255),w,b
  5072  005430  0E03               	movlw	3
  5073  005432  0100               	movlb	0	; () banked
  5074  005434  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5075  005436  A0D8               	btfss	status,0,c
  5076  005438  D002               	goto	u5220
  5077  00543A  0E01               	movlw	1
  5078  00543C  D001               	goto	u5230
  5079  00543E                     u5220:
  5080  00543E  0E00               	movlw	0
  5081  005440                     u5230:
  5082  005440  0100               	movlb	0	; () banked
  5083  005442  6FE0               	movwf	_IR_signal& (0+255),b
  5084  005444  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5085                           
  5086                           ; BSR set to: 0
  5087  005446  0012               	return		;funcret
  5088  005448                     __end_of_readIR:
  5089                           	opt stack 0
  5090                           tblptru	equ	0xFF8
  5091                           tblptrh	equ	0xFF7
  5092                           tblptrl	equ	0xFF6
  5093                           tablat	equ	0xFF5
  5094                           prodh	equ	0xFF4
  5095                           prodl	equ	0xFF3
  5096                           postinc0	equ	0xFEE
  5097                           wreg	equ	0xFE8
  5098                           postdec1	equ	0xFE5
  5099                           fsr1l	equ	0xFE1
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _ID *****************
  5108 ;; Defined at:
  5109 ;;		line 281 in file "sort.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;		None
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  i               2   57[BANK0 ] int 
  5114 ;;  i               2   53[BANK0 ] int 
  5115 ;;  i               2   55[BANK0 ] int 
  5116 ;;  res3            2   45[BANK0 ] int 
  5117 ;;  i               2   51[BANK0 ] int 
  5118 ;;  i               2   49[BANK0 ] int 
  5119 ;;  n               2   64[BANK0 ] const int 
  5120 ;;  res2            2   62[BANK0 ] int 
  5121 ;;  res1            2   60[BANK0 ] int 
  5122 ;;  time            1   59[BANK0 ] const unsigned char 
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  1    wreg      void 
  5125 ;; Registers used:
  5126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5136 ;;Total ram usage:       23 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:   10
  5139 ;; This function calls:
  5140 ;;		___awdiv
  5141 ;;		___awtoft
  5142 ;;		___ftge
  5143 ;;		_delay_ms
  5144 ;;		_lcdInst
  5145 ;;		_printf
  5146 ;;		_readCOND
  5147 ;; This function is called by:
  5148 ;;		_sort
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           	psect	text8
  5153  0016C4                     __ptext8:
  5154                           	opt stack 0
  5155  0016C4                     _ID:
  5156                           	opt stack 19
  5157                           
  5158                           ;sort.c: 282: if(f_can_coming_to_ID){
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;incstack = 0
  5162  0016C4  0101               	movlb	1	; () banked
  5163  0016C6  512F               	movf	_f_can_coming_to_ID& (0+255),w,b
  5164  0016C8  0101               	movlb	1	; () banked
  5165  0016CA  1130               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5166  0016CC  B4D8               	btfsc	status,2,c
  5167  0016CE  0012               	return	
  5168                           
  5169                           ; BSR set to: 1
  5170                           ;sort.c: 284: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5171  0016D0  0E29               	movlw	41
  5172  0016D2  0100               	movlb	0	; () banked
  5173  0016D4  6FAC               	movwf	(??_ID+1)& (0+255),b
  5174  0016D6  0E96               	movlw	150
  5175  0016D8  0100               	movlb	0	; () banked
  5176  0016DA  6FAB               	movwf	??_ID& (0+255),b
  5177  0016DC  0E7F               	movlw	127
  5178  0016DE                     u10227:
  5179  0016DE  2EE8               	decfsz	wreg,f,c
  5180  0016E0  D7FE               	bra	u10227
  5181  0016E2  2FAB               	decfsz	??_ID& (0+255),f,b
  5182  0016E4  D7FC               	bra	u10227
  5183  0016E6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5184  0016E8  D7FA               	bra	u10227
  5185                           
  5186                           ;sort.c: 286: f_arm_position = 0;
  5187  0016EA  0E00               	movlw	0
  5188  0016EC  0100               	movlb	0	; () banked
  5189  0016EE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5190  0016F0  0E00               	movlw	0
  5191  0016F2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;sort.c: 288: LATAbits.LATA3 = 1;
  5195  0016F4  8689               	bsf	3977,3,c	;volatile
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;sort.c: 291: const int n = 10;
  5199  0016F6  0E00               	movlw	0
  5200  0016F8  0100               	movlb	0	; () banked
  5201  0016FA  6FC1               	movwf	(ID@n+1)& (0+255),b
  5202  0016FC  0E0A               	movlw	10
  5203  0016FE  6FC0               	movwf	ID@n& (0+255),b
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;sort.c: 292: const unsigned char time = (600 / n);
  5207  001700  0E02               	movlw	2
  5208  001702  0100               	movlb	0	; () banked
  5209  001704  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5210  001706  0E58               	movlw	88
  5211  001708  6F86               	movwf	___awdiv@dividend& (0+255),b
  5212  00170A  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5213  00170E  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5214  001712  EC99  F024         	call	___awdiv	;wreg free
  5215  001716  0100               	movlb	0	; () banked
  5216  001718  5186               	movf	?___awdiv& (0+255),w,b
  5217  00171A  0100               	movlb	0	; () banked
  5218  00171C  6FBB               	movwf	ID@time& (0+255),b
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;sort.c: 293: int res1 = 0;
  5222  00171E  0E00               	movlw	0
  5223  001720  0100               	movlb	0	; () banked
  5224  001722  6FBD               	movwf	(ID@res1+1)& (0+255),b
  5225  001724  0E00               	movlw	0
  5226  001726  6FBC               	movwf	ID@res1& (0+255),b
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;sort.c: 294: int res2 = 0;
  5230  001728  0E00               	movlw	0
  5231  00172A  0100               	movlb	0	; () banked
  5232  00172C  6FBF               	movwf	(ID@res2+1)& (0+255),b
  5233  00172E  0E00               	movlw	0
  5234  001730  6FBE               	movwf	ID@res2& (0+255),b
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;sort.c: 295: for(int i = 0; i<n; i++){
  5238  001732  0E00               	movlw	0
  5239  001734  0100               	movlb	0	; () banked
  5240  001736  6FB2               	movwf	(ID@i+1)& (0+255),b
  5241  001738  0E00               	movlw	0
  5242  00173A  6FB1               	movwf	ID@i& (0+255),b
  5243  00173C                     l8104:
  5244                           
  5245                           ; BSR set to: 0
  5246  00173C  0100               	movlb	0	; () banked
  5247  00173E  51C0               	movf	ID@n& (0+255),w,b
  5248  001740  0100               	movlb	0	; () banked
  5249  001742  5DB1               	subwf	ID@i& (0+255),w,b
  5250  001744  0100               	movlb	0	; () banked
  5251  001746  51B2               	movf	(ID@i+1)& (0+255),w,b
  5252  001748  0A80               	xorlw	128
  5253  00174A  0100               	movlb	0	; () banked
  5254  00174C  6FAB               	movwf	??_ID& (0+255),b
  5255  00174E  0100               	movlb	0	; () banked
  5256  001750  51C1               	movf	(ID@n+1)& (0+255),w,b
  5257  001752  0A80               	xorlw	128
  5258  001754  0100               	movlb	0	; () banked
  5259  001756  59AB               	subwfb	??_ID& (0+255),w,b
  5260  001758  B0D8               	btfsc	status,0,c
  5261  00175A  D012               	goto	l855
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;sort.c: 296: delay_ms(time);
  5265                           
  5266                           ; BSR set to: 0
  5267                           
  5268                           ; BSR set to: 0
  5269  00175C  0100               	movlb	0	; () banked
  5270  00175E  51BB               	movf	ID@time& (0+255),w,b
  5271  001760  ECF2  F02C         	call	_delay_ms
  5272                           
  5273                           ;sort.c: 297: readCOND();
  5274  001764  EC24  F02A         	call	_readCOND	;wreg free
  5275                           
  5276                           ;sort.c: 298: res1 += COND_signal;
  5277  001768  0100               	movlb	0	; () banked
  5278  00176A  51DE               	movf	_COND_signal& (0+255),w,b
  5279  00176C  0100               	movlb	0	; () banked
  5280  00176E  27BC               	addwf	ID@res1& (0+255),f,b
  5281  001770  0100               	movlb	0	; () banked
  5282  001772  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5283  001774  0100               	movlb	0	; () banked
  5284  001776  23BD               	addwfc	(ID@res1+1)& (0+255),f,b
  5285                           
  5286                           ; BSR set to: 0
  5287  001778  0100               	movlb	0	; () banked
  5288  00177A  4BB1               	infsnz	ID@i& (0+255),f,b
  5289  00177C  2BB2               	incf	(ID@i+1)& (0+255),f,b
  5290  00177E  D7DE               	goto	l8104
  5291  001780                     l855:
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;sort.c: 299: }
  5295                           ;sort.c: 300: LATAbits.LATA3 = 0;
  5296  001780  9689               	bcf	3977,3,c	;volatile
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;sort.c: 301: _delay((unsigned long)((200)*(32000000/4000.0)));
  5300  001782  0E09               	movlw	9
  5301  001784  0100               	movlb	0	; () banked
  5302  001786  6FAC               	movwf	(??_ID+1)& (0+255),b
  5303  001788  0E1E               	movlw	30
  5304  00178A  0100               	movlb	0	; () banked
  5305  00178C  6FAB               	movwf	??_ID& (0+255),b
  5306  00178E  0EE4               	movlw	228
  5307  001790                     u10237:
  5308  001790  2EE8               	decfsz	wreg,f,c
  5309  001792  D7FE               	bra	u10237
  5310  001794  2FAB               	decfsz	??_ID& (0+255),f,b
  5311  001796  D7FC               	bra	u10237
  5312  001798  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5313  00179A  D7FA               	bra	u10237
  5314  00179C  F000               	nop	
  5315                           
  5316                           ;sort.c: 302: LATAbits.LATA3 = 1;
  5317  00179E  8689               	bsf	3977,3,c	;volatile
  5318                           
  5319                           ;sort.c: 303: for(int i = 0; i<n; i++){
  5320  0017A0  0E00               	movlw	0
  5321  0017A2  0100               	movlb	0	; () banked
  5322  0017A4  6FB4               	movwf	(ID@i_1145+1)& (0+255),b
  5323  0017A6  0E00               	movlw	0
  5324  0017A8  6FB3               	movwf	ID@i_1145& (0+255),b
  5325  0017AA                     l8122:
  5326                           
  5327                           ; BSR set to: 0
  5328  0017AA  0100               	movlb	0	; () banked
  5329  0017AC  51C0               	movf	ID@n& (0+255),w,b
  5330  0017AE  0100               	movlb	0	; () banked
  5331  0017B0  5DB3               	subwf	ID@i_1145& (0+255),w,b
  5332  0017B2  0100               	movlb	0	; () banked
  5333  0017B4  51B4               	movf	(ID@i_1145+1)& (0+255),w,b
  5334  0017B6  0A80               	xorlw	128
  5335  0017B8  0100               	movlb	0	; () banked
  5336  0017BA  6FAB               	movwf	??_ID& (0+255),b
  5337  0017BC  0100               	movlb	0	; () banked
  5338  0017BE  51C1               	movf	(ID@n+1)& (0+255),w,b
  5339  0017C0  0A80               	xorlw	128
  5340  0017C2  0100               	movlb	0	; () banked
  5341  0017C4  59AB               	subwfb	??_ID& (0+255),w,b
  5342  0017C6  B0D8               	btfsc	status,0,c
  5343  0017C8  D012               	goto	l8134
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;sort.c: 304: delay_ms(time);
  5347                           
  5348                           ; BSR set to: 0
  5349                           
  5350                           ; BSR set to: 0
  5351  0017CA  0100               	movlb	0	; () banked
  5352  0017CC  51BB               	movf	ID@time& (0+255),w,b
  5353  0017CE  ECF2  F02C         	call	_delay_ms
  5354                           
  5355                           ;sort.c: 305: readCOND();
  5356  0017D2  EC24  F02A         	call	_readCOND	;wreg free
  5357                           
  5358                           ;sort.c: 306: res2 += COND_signal;
  5359  0017D6  0100               	movlb	0	; () banked
  5360  0017D8  51DE               	movf	_COND_signal& (0+255),w,b
  5361  0017DA  0100               	movlb	0	; () banked
  5362  0017DC  27BE               	addwf	ID@res2& (0+255),f,b
  5363  0017DE  0100               	movlb	0	; () banked
  5364  0017E0  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5365  0017E2  0100               	movlb	0	; () banked
  5366  0017E4  23BF               	addwfc	(ID@res2+1)& (0+255),f,b
  5367                           
  5368                           ; BSR set to: 0
  5369  0017E6  0100               	movlb	0	; () banked
  5370  0017E8  4BB3               	infsnz	ID@i_1145& (0+255),f,b
  5371  0017EA  2BB4               	incf	(ID@i_1145+1)& (0+255),f,b
  5372  0017EC  D7DE               	goto	l8122
  5373  0017EE                     l8134:
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;sort.c: 307: }
  5377                           ;sort.c: 308: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5378  0017EE  0E9A               	movlw	154
  5379  0017F0  0100               	movlb	0	; () banked
  5380  0017F2  6F92               	movwf	___ftge@ff1& (0+255),b
  5381  0017F4  0E99               	movlw	153
  5382  0017F6  0100               	movlb	0	; () banked
  5383  0017F8  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5384  0017FA  0E3E               	movlw	62
  5385  0017FC  0100               	movlb	0	; () banked
  5386  0017FE  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5387  001800  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5388  001804  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5389  001808  C0BC  F086         	movff	ID@res1,___awdiv@dividend
  5390  00180C  C0BD  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5391  001810  EC99  F024         	call	___awdiv	;wreg free
  5392  001814  C086  F08E         	movff	?___awdiv,___awtoft@c
  5393  001818  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5394  00181C  EC93  F02A         	call	___awtoft	;wreg free
  5395  001820  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5396  001824  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5397  001828  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5398  00182C  EC35  F024         	call	___ftge	;wreg free
  5399  001830  0100               	movlb	0	; () banked
  5400  001832  B0D8               	btfsc	status,0,c
  5401  001834  D002               	goto	u6910
  5402  001836  0E01               	movlw	1
  5403  001838  D001               	goto	u6920
  5404  00183A                     u6910:
  5405  00183A  0E00               	movlw	0
  5406  00183C                     u6920:
  5407  00183C  0100               	movlb	0	; () banked
  5408  00183E  6FBC               	movwf	ID@res1& (0+255),b
  5409  001840  6BBD               	clrf	(ID@res1+1)& (0+255),b
  5410                           
  5411                           ;sort.c: 309: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5412  001842  0E9A               	movlw	154
  5413  001844  0100               	movlb	0	; () banked
  5414  001846  6F92               	movwf	___ftge@ff1& (0+255),b
  5415  001848  0E99               	movlw	153
  5416  00184A  0100               	movlb	0	; () banked
  5417  00184C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5418  00184E  0E3E               	movlw	62
  5419  001850  0100               	movlb	0	; () banked
  5420  001852  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5421  001854  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5422  001858  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5423  00185C  C0BE  F086         	movff	ID@res2,___awdiv@dividend
  5424  001860  C0BF  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5425  001864  EC99  F024         	call	___awdiv	;wreg free
  5426  001868  C086  F08E         	movff	?___awdiv,___awtoft@c
  5427  00186C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5428  001870  EC93  F02A         	call	___awtoft	;wreg free
  5429  001874  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5430  001878  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5431  00187C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5432  001880  EC35  F024         	call	___ftge	;wreg free
  5433  001884  0100               	movlb	0	; () banked
  5434  001886  B0D8               	btfsc	status,0,c
  5435  001888  D002               	goto	u6930
  5436  00188A  0E01               	movlw	1
  5437  00188C  D001               	goto	u6940
  5438  00188E                     u6930:
  5439  00188E  0E00               	movlw	0
  5440  001890                     u6940:
  5441  001890  0100               	movlb	0	; () banked
  5442  001892  6FBE               	movwf	ID@res2& (0+255),b
  5443  001894  6BBF               	clrf	(ID@res2+1)& (0+255),b
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;sort.c: 312: sensor_outputs[1] = (res1 || res2);
  5447  001896  0E01               	movlw	1
  5448  001898  0100               	movlb	0	; () banked
  5449  00189A  6FAF               	movwf	_ID$1146& (0+255),b
  5450                           
  5451                           ; BSR set to: 0
  5452  00189C  0100               	movlb	0	; () banked
  5453  00189E  51BC               	movf	ID@res1& (0+255),w,b
  5454  0018A0  0100               	movlb	0	; () banked
  5455  0018A2  11BD               	iorwf	(ID@res1+1)& (0+255),w,b
  5456  0018A4  A4D8               	btfss	status,2,c
  5457  0018A6  D009               	goto	l8144
  5458                           
  5459                           ; BSR set to: 0
  5460  0018A8  0100               	movlb	0	; () banked
  5461  0018AA  51BE               	movf	ID@res2& (0+255),w,b
  5462  0018AC  0100               	movlb	0	; () banked
  5463  0018AE  11BF               	iorwf	(ID@res2+1)& (0+255),w,b
  5464  0018B0  A4D8               	btfss	status,2,c
  5465  0018B2  D003               	goto	l8144
  5466                           
  5467                           ; BSR set to: 0
  5468  0018B4  0E00               	movlw	0
  5469  0018B6  0100               	movlb	0	; () banked
  5470  0018B8  6FAF               	movwf	_ID$1146& (0+255),b
  5471  0018BA                     l8144:
  5472                           
  5473                           ; BSR set to: 0
  5474  0018BA  C0AF  F0DC         	movff	_ID$1146,_sensor_outputs+2
  5475  0018BE  0100               	movlb	0	; () banked
  5476  0018C0  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;sort.c: 313: LATAbits.LATA3 = 0;
  5480  0018C2  9689               	bcf	3977,3,c	;volatile
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;sort.c: 315: if(sensor_outputs[0]){
  5484  0018C4  0100               	movlb	0	; () banked
  5485  0018C6  51DA               	movf	_sensor_outputs& (0+255),w,b
  5486  0018C8  0100               	movlb	0	; () banked
  5487  0018CA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5488  0018CC  B4D8               	btfsc	status,2,c
  5489  0018CE  D052               	goto	l8180
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;sort.c: 316: _delay((unsigned long)((200)*(32000000/4000.0)));
  5493  0018D0  0E09               	movlw	9
  5494  0018D2  0100               	movlb	0	; () banked
  5495  0018D4  6FAC               	movwf	(??_ID+1)& (0+255),b
  5496  0018D6  0E1E               	movlw	30
  5497  0018D8  0100               	movlb	0	; () banked
  5498  0018DA  6FAB               	movwf	??_ID& (0+255),b
  5499  0018DC  0EE4               	movlw	228
  5500  0018DE                     u10247:
  5501  0018DE  2EE8               	decfsz	wreg,f,c
  5502  0018E0  D7FE               	bra	u10247
  5503  0018E2  2FAB               	decfsz	??_ID& (0+255),f,b
  5504  0018E4  D7FC               	bra	u10247
  5505  0018E6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5506  0018E8  D7FA               	bra	u10247
  5507  0018EA  F000               	nop	
  5508                           
  5509                           ;sort.c: 317: LATAbits.LATA3 = 1;
  5510  0018EC  8689               	bsf	3977,3,c	;volatile
  5511                           
  5512                           ;sort.c: 318: int res3 = 0;
  5513  0018EE  0E00               	movlw	0
  5514  0018F0  0100               	movlb	0	; () banked
  5515  0018F2  6FAE               	movwf	(ID@res3+1)& (0+255),b
  5516  0018F4  0E00               	movlw	0
  5517  0018F6  6FAD               	movwf	ID@res3& (0+255),b
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;sort.c: 319: for(int i = 0; i<n; i++){
  5521  0018F8  0E00               	movlw	0
  5522  0018FA  0100               	movlb	0	; () banked
  5523  0018FC  6FB6               	movwf	(ID@i_1148+1)& (0+255),b
  5524  0018FE  0E00               	movlw	0
  5525  001900  6FB5               	movwf	ID@i_1148& (0+255),b
  5526  001902                     l8158:
  5527                           
  5528                           ; BSR set to: 0
  5529  001902  0100               	movlb	0	; () banked
  5530  001904  51C0               	movf	ID@n& (0+255),w,b
  5531  001906  0100               	movlb	0	; () banked
  5532  001908  5DB5               	subwf	ID@i_1148& (0+255),w,b
  5533  00190A  0100               	movlb	0	; () banked
  5534  00190C  51B6               	movf	(ID@i_1148+1)& (0+255),w,b
  5535  00190E  0A80               	xorlw	128
  5536  001910  0100               	movlb	0	; () banked
  5537  001912  6FAB               	movwf	??_ID& (0+255),b
  5538  001914  0100               	movlb	0	; () banked
  5539  001916  51C1               	movf	(ID@n+1)& (0+255),w,b
  5540  001918  0A80               	xorlw	128
  5541  00191A  0100               	movlb	0	; () banked
  5542  00191C  59AB               	subwfb	??_ID& (0+255),w,b
  5543  00191E  B0D8               	btfsc	status,0,c
  5544  001920  D012               	goto	l862
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;sort.c: 320: delay_ms(time);
  5548                           
  5549                           ; BSR set to: 0
  5550                           
  5551                           ; BSR set to: 0
  5552  001922  0100               	movlb	0	; () banked
  5553  001924  51BB               	movf	ID@time& (0+255),w,b
  5554  001926  ECF2  F02C         	call	_delay_ms
  5555                           
  5556                           ;sort.c: 321: readCOND();
  5557  00192A  EC24  F02A         	call	_readCOND	;wreg free
  5558                           
  5559                           ;sort.c: 322: res3 += COND_signal;
  5560  00192E  0100               	movlb	0	; () banked
  5561  001930  51DE               	movf	_COND_signal& (0+255),w,b
  5562  001932  0100               	movlb	0	; () banked
  5563  001934  27AD               	addwf	ID@res3& (0+255),f,b
  5564  001936  0100               	movlb	0	; () banked
  5565  001938  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5566  00193A  0100               	movlb	0	; () banked
  5567  00193C  23AE               	addwfc	(ID@res3+1)& (0+255),f,b
  5568                           
  5569                           ; BSR set to: 0
  5570  00193E  0100               	movlb	0	; () banked
  5571  001940  4BB5               	infsnz	ID@i_1148& (0+255),f,b
  5572  001942  2BB6               	incf	(ID@i_1148+1)& (0+255),f,b
  5573  001944  D7DE               	goto	l8158
  5574  001946                     l862:
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;sort.c: 323: }
  5578                           ;sort.c: 324: LATAbits.LATA3 = 0;
  5579  001946  9689               	bcf	3977,3,c	;volatile
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;sort.c: 325: sensor_outputs[1] = (sensor_outputs[1] || res3);
  5583  001948  0E01               	movlw	1
  5584  00194A  0100               	movlb	0	; () banked
  5585  00194C  6FB0               	movwf	_ID$1149& (0+255),b
  5586                           
  5587                           ; BSR set to: 0
  5588  00194E  0100               	movlb	0	; () banked
  5589  001950  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5590  001952  0100               	movlb	0	; () banked
  5591  001954  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5592  001956  A4D8               	btfss	status,2,c
  5593  001958  D009               	goto	l8178
  5594                           
  5595                           ; BSR set to: 0
  5596  00195A  0100               	movlb	0	; () banked
  5597  00195C  51AD               	movf	ID@res3& (0+255),w,b
  5598  00195E  0100               	movlb	0	; () banked
  5599  001960  11AE               	iorwf	(ID@res3+1)& (0+255),w,b
  5600  001962  A4D8               	btfss	status,2,c
  5601  001964  D003               	goto	l8178
  5602                           
  5603                           ; BSR set to: 0
  5604  001966  0E00               	movlw	0
  5605  001968  0100               	movlb	0	; () banked
  5606  00196A  6FB0               	movwf	_ID$1149& (0+255),b
  5607  00196C                     l8178:
  5608                           
  5609                           ; BSR set to: 0
  5610  00196C  C0B0  F0DC         	movff	_ID$1149,_sensor_outputs+2
  5611  001970  0100               	movlb	0	; () banked
  5612  001972  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5613  001974                     l8180:
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;sort.c: 326: }
  5617                           ;sort.c: 334: if(!sensor_outputs[0]){
  5618  001974  0100               	movlb	0	; () banked
  5619  001976  51DA               	movf	_sensor_outputs& (0+255),w,b
  5620  001978  0100               	movlb	0	; () banked
  5621  00197A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5622  00197C  A4D8               	btfss	status,2,c
  5623  00197E  D016               	goto	l8192
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;sort.c: 335: if(!sensor_outputs[1]){
  5627  001980  0100               	movlb	0	; () banked
  5628  001982  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5629  001984  0100               	movlb	0	; () banked
  5630  001986  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5631  001988  A4D8               	btfss	status,2,c
  5632  00198A  D008               	goto	l8188
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;sort.c: 336: count_pop_no_tab++;
  5636  00198C  0101               	movlb	1	; () banked
  5637  00198E  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5638  001990  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5639                           
  5640                           ; BSR set to: 1
  5641                           ;sort.c: 337: cur_can = 0;
  5642  001992  0E00               	movlw	0
  5643  001994  0101               	movlb	1	; () banked
  5644  001996  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5645  001998  0E00               	movlw	0
  5646  00199A  D007               	goto	L5
  5647  00199C                     l8188:
  5648                           
  5649                           ;sort.c: 339: else{
  5650                           ;sort.c: 340: count_pop_w_tab++;
  5651  00199C  0101               	movlb	1	; () banked
  5652  00199E  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5653  0019A0  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5654                           
  5655                           ; BSR set to: 1
  5656                           ;sort.c: 341: cur_can = 1;
  5657  0019A2  0E00               	movlw	0
  5658  0019A4  0101               	movlb	1	; () banked
  5659  0019A6  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5660  0019A8  0E01               	movlw	1
  5661  0019AA                     L5:
  5662  0019AA  6F2B               	movwf	_cur_can& (0+255),b
  5663  0019AC                     l8192:
  5664                           
  5665                           ;sort.c: 342: }
  5666                           ;sort.c: 343: }
  5667                           ;sort.c: 344: if(sensor_outputs[0]){
  5668  0019AC  0100               	movlb	0	; () banked
  5669  0019AE  51DA               	movf	_sensor_outputs& (0+255),w,b
  5670  0019B0  0100               	movlb	0	; () banked
  5671  0019B2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5672  0019B4  B4D8               	btfsc	status,2,c
  5673  0019B6  D016               	goto	l8204
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;sort.c: 345: if(!sensor_outputs[1]){
  5677  0019B8  0100               	movlb	0	; () banked
  5678  0019BA  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5679  0019BC  0100               	movlb	0	; () banked
  5680  0019BE  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5681  0019C0  A4D8               	btfss	status,2,c
  5682  0019C2  D008               	goto	l8200
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;sort.c: 346: count_can_w_lab++;
  5686  0019C4  0101               	movlb	1	; () banked
  5687  0019C6  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5688  0019C8  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5689                           
  5690                           ; BSR set to: 1
  5691                           ;sort.c: 347: cur_can = 2;
  5692  0019CA  0E00               	movlw	0
  5693  0019CC  0101               	movlb	1	; () banked
  5694  0019CE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5695  0019D0  0E02               	movlw	2
  5696  0019D2  D007               	goto	L6
  5697  0019D4                     l8200:
  5698                           
  5699                           ;sort.c: 349: else{
  5700                           ;sort.c: 350: count_can_no_lab++;
  5701  0019D4  0101               	movlb	1	; () banked
  5702  0019D6  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5703  0019D8  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5704                           
  5705                           ; BSR set to: 1
  5706                           ;sort.c: 351: cur_can = 3;
  5707  0019DA  0E00               	movlw	0
  5708  0019DC  0101               	movlb	1	; () banked
  5709  0019DE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5710  0019E0  0E03               	movlw	3
  5711  0019E2                     L6:
  5712  0019E2  6F2B               	movwf	_cur_can& (0+255),b
  5713  0019E4                     l8204:
  5714                           
  5715                           ;sort.c: 352: }
  5716                           ;sort.c: 353: }
  5717                           ;sort.c: 355: if(debug){
  5718  0019E4  0100               	movlb	0	; () banked
  5719  0019E6  51E8               	movf	_debug& (0+255),w,b
  5720  0019E8  0100               	movlb	0	; () banked
  5721  0019EA  11E9               	iorwf	(_debug+1)& (0+255),w,b
  5722  0019EC  B4D8               	btfsc	status,2,c
  5723  0019EE  D01F               	goto	l8214
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;sort.c: 356: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5727  0019F0  0E01               	movlw	1
  5728  0019F2  ECDC  F02D         	call	_lcdInst
  5729  0019F6  0E68               	movlw	104
  5730  0019F8  0100               	movlb	0	; () banked
  5731  0019FA  6FAB               	movwf	??_ID& (0+255),b
  5732  0019FC  0EE4               	movlw	228
  5733  0019FE                     u10257:
  5734  0019FE  2EE8               	decfsz	wreg,f,c
  5735  001A00  D7FE               	bra	u10257
  5736  001A02  2FAB               	decfsz	??_ID& (0+255),f,b
  5737  001A04  D7FC               	bra	u10257
  5738  001A06  F000               	nop	
  5739  001A08  0E80               	movlw	128
  5740  001A0A  ECDC  F02D         	call	_lcdInst
  5741                           
  5742                           ;sort.c: 357: printf("            F%dL%d", res1, res2);
  5743  001A0E  0ED3               	movlw	low STR_64
  5744  001A10  0100               	movlb	0	; () banked
  5745  001A12  6F8E               	movwf	printf@f& (0+255),b
  5746  001A14  0EFA               	movlw	high STR_64
  5747  001A16  0100               	movlb	0	; () banked
  5748  001A18  6F8F               	movwf	(printf@f+1)& (0+255),b
  5749  001A1A  C0BC  F090         	movff	ID@res1,?_printf+2
  5750  001A1E  C0BD  F091         	movff	ID@res1+1,?_printf+3
  5751  001A22  C0BE  F092         	movff	ID@res2,?_printf+4
  5752  001A26  C0BF  F093         	movff	ID@res2+1,?_printf+5
  5753  001A2A  EC8D  F00D         	call	_printf	;wreg free
  5754  001A2E                     l8214:
  5755  001A2E  0101               	movlb	1	; () banked
  5756  001A30  5133               	movf	_f_can_distributed& (0+255),w,b
  5757  001A32  0101               	movlb	1	; () banked
  5758  001A34  1134               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5759  001A36  B4D8               	btfsc	status,2,c
  5760  001A38  D7FA               	goto	l8214
  5761                           
  5762                           ; BSR set to: 1
  5763                           ;sort.c: 362: for(int i=0;i<10000;i++)
  5764                           
  5765                           ; BSR set to: 1
  5766  001A3A  0E00               	movlw	0
  5767  001A3C  0100               	movlb	0	; () banked
  5768  001A3E  6FB8               	movwf	(ID@i_1151+1)& (0+255),b
  5769  001A40  0E00               	movlw	0
  5770  001A42  6FB7               	movwf	ID@i_1151& (0+255),b
  5771  001A44                     l8218:
  5772                           
  5773                           ; BSR set to: 0
  5774  001A44  0100               	movlb	0	; () banked
  5775  001A46  BFB8               	btfsc	(ID@i_1151+1)& (0+255),7,b
  5776  001A48  D008               	goto	l875
  5777  001A4A  0E10               	movlw	16
  5778  001A4C  0100               	movlb	0	; () banked
  5779  001A4E  5DB7               	subwf	ID@i_1151& (0+255),w,b
  5780  001A50  0E27               	movlw	39
  5781  001A52  0100               	movlb	0	; () banked
  5782  001A54  59B8               	subwfb	(ID@i_1151+1)& (0+255),w,b
  5783  001A56  B0D8               	btfsc	status,0,c
  5784  001A58  D00D               	goto	l876
  5785  001A5A                     l875:
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;sort.c: 363: {
  5789                           ;sort.c: 364: LATCbits.LATC0 = 1;
  5790  001A5A  808B               	bsf	3979,0,c	;volatile
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;sort.c: 365: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5794  001A5C  0E1A               	movlw	26
  5795  001A5E                     u10267:
  5796  001A5E  2EE8               	decfsz	wreg,f,c
  5797  001A60  D7FE               	bra	u10267
  5798  001A62  D000               	nop2	
  5799                           
  5800                           ;sort.c: 366: LATCbits.LATC0 = 0;
  5801  001A64  908B               	bcf	3979,0,c	;volatile
  5802                           
  5803                           ;sort.c: 367: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5804  001A66  0EF0               	movlw	240
  5805  001A68                     u10277:
  5806  001A68  2EE8               	decfsz	wreg,f,c
  5807  001A6A  D7FE               	bra	u10277
  5808  001A6C  0100               	movlb	0	; () banked
  5809  001A6E  4BB7               	infsnz	ID@i_1151& (0+255),f,b
  5810  001A70  2BB8               	incf	(ID@i_1151+1)& (0+255),f,b
  5811  001A72  D7E8               	goto	l8218
  5812  001A74                     l876:
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;sort.c: 368: }
  5816                           ;sort.c: 370: LATCbits.LATC0 = 0;
  5817  001A74  908B               	bcf	3979,0,c	;volatile
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;sort.c: 372: f_can_coming_to_distribution = 1;
  5821  001A76  0E00               	movlw	0
  5822  001A78  0101               	movlb	1	; () banked
  5823  001A7A  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5824  001A7C  0E01               	movlw	1
  5825  001A7E  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  5826                           
  5827                           ; BSR set to: 1
  5828                           ;sort.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
  5829  001A80  0E1F               	movlw	31
  5830  001A82  0100               	movlb	0	; () banked
  5831  001A84  6FAC               	movwf	(??_ID+1)& (0+255),b
  5832  001A86  0E71               	movlw	113
  5833  001A88  0100               	movlb	0	; () banked
  5834  001A8A  6FAB               	movwf	??_ID& (0+255),b
  5835  001A8C  0E1E               	movlw	30
  5836  001A8E                     u10287:
  5837  001A8E  2EE8               	decfsz	wreg,f,c
  5838  001A90  D7FE               	bra	u10287
  5839  001A92  2FAB               	decfsz	??_ID& (0+255),f,b
  5840  001A94  D7FC               	bra	u10287
  5841  001A96  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5842  001A98  D7FA               	bra	u10287
  5843  001A9A  F000               	nop	
  5844                           
  5845                           ;sort.c: 374: LATCbits.LATC0 = 1;
  5846  001A9C  808B               	bsf	3979,0,c	;volatile
  5847                           
  5848                           ;sort.c: 377: if(!f_lastCan){
  5849  001A9E  0100               	movlb	0	; () banked
  5850  001AA0  51EC               	movf	_f_lastCan& (0+255),w,b
  5851  001AA2  0100               	movlb	0	; () banked
  5852  001AA4  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5853  001AA6  A4D8               	btfss	status,2,c
  5854  001AA8  D032               	goto	l8250
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;sort.c: 378: for(int i=0; i<46; i++){
  5858  001AAA  0E00               	movlw	0
  5859  001AAC  0100               	movlb	0	; () banked
  5860  001AAE  6FBA               	movwf	(ID@i_1152+1)& (0+255),b
  5861  001AB0  0E00               	movlw	0
  5862  001AB2  6FB9               	movwf	ID@i_1152& (0+255),b
  5863                           
  5864                           ; BSR set to: 0
  5865  001AB4  0100               	movlb	0	; () banked
  5866  001AB6  BFBA               	btfsc	(ID@i_1152+1)& (0+255),7,b
  5867  001AB8  D008               	goto	l8242
  5868  001ABA  0100               	movlb	0	; () banked
  5869  001ABC  51BA               	movf	(ID@i_1152+1)& (0+255),w,b
  5870  001ABE  E126               	bnz	l879
  5871  001AC0  0E2E               	movlw	46
  5872  001AC2  0100               	movlb	0	; () banked
  5873  001AC4  5DB9               	subwf	ID@i_1152& (0+255),w,b
  5874  001AC6  B0D8               	btfsc	status,0,c
  5875  001AC8  D021               	goto	l879
  5876  001ACA                     l8242:
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;sort.c: 379: LATBbits.LATB2 = !LATBbits.LATB2;
  5880  001ACA  B48A               	btfsc	3978,2,c	;volatile
  5881  001ACC  D004               	goto	u7120
  5882  001ACE  0100               	movlb	0	; () banked
  5883  001AD0  6BAB               	clrf	??_ID& (0+255),b
  5884  001AD2  2BAB               	incf	??_ID& (0+255),f,b
  5885  001AD4  D002               	goto	u7138
  5886  001AD6                     u7120:
  5887  001AD6  0100               	movlb	0	; () banked
  5888  001AD8  6BAB               	clrf	??_ID& (0+255),b
  5889  001ADA                     u7138:
  5890  001ADA  0100               	movlb	0	; () banked
  5891  001ADC  47AB               	rlncf	??_ID& (0+255),f,b
  5892  001ADE  47AB               	rlncf	??_ID& (0+255),f,b
  5893  001AE0  508A               	movf	3978,w,c	;volatile
  5894  001AE2  0100               	movlb	0	; () banked
  5895  001AE4  19AB               	xorwf	??_ID& (0+255),w,b
  5896  001AE6  0BFB               	andlw	-5
  5897  001AE8  19AB               	xorwf	??_ID& (0+255),w,b
  5898  001AEA  6E8A               	movwf	3978,c	;volatile
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;sort.c: 380: delay_ms(45-i);
  5902  001AEC  0100               	movlb	0	; () banked
  5903  001AEE  51B9               	movf	ID@i_1152& (0+255),w,b
  5904  001AF0  0800               	sublw	0
  5905  001AF2  0F2D               	addlw	45
  5906  001AF4  ECF2  F02C         	call	_delay_ms
  5907  001AF8  0100               	movlb	0	; () banked
  5908  001AFA  4BB9               	infsnz	ID@i_1152& (0+255),f,b
  5909  001AFC  2BBA               	incf	(ID@i_1152+1)& (0+255),f,b
  5910                           
  5911                           ; BSR set to: 0
  5912  001AFE  0100               	movlb	0	; () banked
  5913  001B00  BFBA               	btfsc	(ID@i_1152+1)& (0+255),7,b
  5914  001B02  D7E3               	goto	l8242
  5915  001B04  0100               	movlb	0	; () banked
  5916  001B06  51BA               	movf	(ID@i_1152+1)& (0+255),w,b
  5917  001B08  E101               	bnz	u7140
  5918  001B0A  D7DA               	goto	L7
  5919  001B0C                     u7140:
  5920  001B0C                     l879:
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;sort.c: 381: }
  5924                           ;sort.c: 382: LATBbits.LATB2 = 1;
  5925  001B0C  848A               	bsf	3978,2,c	;volatile
  5926  001B0E                     l8250:
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;sort.c: 383: }
  5930                           ;sort.c: 385: f_can_coming_to_ID = 0;
  5931  001B0E  0E00               	movlw	0
  5932  001B10  0101               	movlb	1	; () banked
  5933  001B12  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5934  001B14  0E00               	movlw	0
  5935  001B16  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  5936  001B18  0012               	return	
  5937  001B1A                     __end_of_ID:
  5938                           	opt stack 0
  5939                           tblptru	equ	0xFF8
  5940                           tblptrh	equ	0xFF7
  5941                           tblptrl	equ	0xFF6
  5942                           tablat	equ	0xFF5
  5943                           prodh	equ	0xFF4
  5944                           prodl	equ	0xFF3
  5945                           postinc0	equ	0xFEE
  5946                           wreg	equ	0xFE8
  5947                           postdec1	equ	0xFE5
  5948                           fsr1l	equ	0xFE1
  5949                           indf2	equ	0xFDF
  5950                           postinc2	equ	0xFDE
  5951                           postdec2	equ	0xFDD
  5952                           fsr2h	equ	0xFDA
  5953                           fsr2l	equ	0xFD9
  5954                           status	equ	0xFD8
  5955                           
  5956 ;; *************** function _readCOND *****************
  5957 ;; Defined at:
  5958 ;;		line 35 in file "ADCFunctionality.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  res             2    4[BANK0 ] int 
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      void 
  5965 ;; Registers used:
  5966 ;;		wreg, status,2, status,0, cstack
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;Total ram usage:        4 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    8
  5979 ;; This function calls:
  5980 ;;		_readADC
  5981 ;; This function is called by:
  5982 ;;		_ID
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           	psect	text9
  5987  005448                     __ptext9:
  5988                           	opt stack 0
  5989  005448                     _readCOND:
  5990                           	opt stack 20
  5991                           
  5992                           ;ADCFunctionality.c: 36: readADC(2);
  5993                           
  5994                           ; BSR set to: 1
  5995                           ;incstack = 0
  5996  005448  0E02               	movlw	2
  5997  00544A  ECC7  F02C         	call	_readADC
  5998                           
  5999                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  6000  00544E  50C3               	movf	4035,w,c	;volatile
  6001  005450  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6002  005454  0100               	movlb	0	; () banked
  6003  005456  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6004  005458  C082  F083         	movff	??_readCOND,??_readCOND+1
  6005  00545C  0100               	movlb	0	; () banked
  6006  00545E  6B82               	clrf	??_readCOND& (0+255),b
  6007  005460  0100               	movlb	0	; () banked
  6008  005462  1182               	iorwf	??_readCOND& (0+255),w,b
  6009  005464  0100               	movlb	0	; () banked
  6010  005466  6F84               	movwf	readCOND@res& (0+255),b
  6011  005468  0100               	movlb	0	; () banked
  6012  00546A  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6013  00546C  0100               	movlb	0	; () banked
  6014  00546E  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  6018  005470  0100               	movlb	0	; () banked
  6019  005472  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6020  005474  D00A               	goto	u5990
  6021  005476  0E2D               	movlw	45
  6022  005478  0100               	movlb	0	; () banked
  6023  00547A  5D84               	subwf	readCOND@res& (0+255),w,b
  6024  00547C  0E01               	movlw	1
  6025  00547E  0100               	movlb	0	; () banked
  6026  005480  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6027  005482  A0D8               	btfss	status,0,c
  6028  005484  D002               	goto	u5990
  6029  005486  0E01               	movlw	1
  6030  005488  D001               	goto	u6000
  6031  00548A                     u5990:
  6032  00548A  0E00               	movlw	0
  6033  00548C                     u6000:
  6034  00548C  0100               	movlb	0	; () banked
  6035  00548E  6FDE               	movwf	_COND_signal& (0+255),b
  6036  005490  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6037                           
  6038                           ; BSR set to: 0
  6039  005492  0012               	return		;funcret
  6040  005494                     __end_of_readCOND:
  6041                           	opt stack 0
  6042                           tblptru	equ	0xFF8
  6043                           tblptrh	equ	0xFF7
  6044                           tblptrl	equ	0xFF6
  6045                           tablat	equ	0xFF5
  6046                           prodh	equ	0xFF4
  6047                           prodl	equ	0xFF3
  6048                           postinc0	equ	0xFEE
  6049                           wreg	equ	0xFE8
  6050                           postdec1	equ	0xFE5
  6051                           fsr1l	equ	0xFE1
  6052                           indf2	equ	0xFDF
  6053                           postinc2	equ	0xFDE
  6054                           postdec2	equ	0xFDD
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059 ;; *************** function _delay_ms *****************
  6060 ;; Defined at:
  6061 ;;		line 678 in file "sort.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;  milliseconds    1    wreg     unsigned char 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  1    wreg      void 
  6068 ;; Registers used:
  6069 ;;		wreg, status,2, status,0, cstack
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;Total ram usage:        2 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    7
  6082 ;; This function calls:
  6083 ;;		Nothing
  6084 ;; This function is called by:
  6085 ;;		_Loading
  6086 ;;		_ID
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090                           	psect	text10
  6091  0059E4                     __ptext10:
  6092                           	opt stack 0
  6093  0059E4                     _delay_ms:
  6094                           	opt stack 21
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;incstack = 0
  6098                           ;delay_ms@milliseconds stored from wreg
  6099  0059E4  0100               	movlb	0	; () banked
  6100  0059E6  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6101                           
  6102                           ;sort.c: 679: while(milliseconds > 0)
  6103  0059E8  D00B               	goto	l7450
  6104  0059EA                     l7446:
  6105                           
  6106                           ;sort.c: 680: {
  6107                           ;sort.c: 681: milliseconds--;
  6108  0059EA  0100               	movlb	0	; () banked
  6109  0059EC  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;sort.c: 682: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6113  0059EE  0E0B               	movlw	11
  6114  0059F0  0100               	movlb	0	; () banked
  6115  0059F2  6F80               	movwf	??_delay_ms& (0+255),b
  6116  0059F4  0E47               	movlw	71
  6117  0059F6                     u10297:
  6118  0059F6  2EE8               	decfsz	wreg,f,c
  6119  0059F8  D7FE               	bra	u10297
  6120  0059FA  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6121  0059FC  D7FC               	bra	u10297
  6122  0059FE  D000               	nop2	
  6123  005A00                     l7450:
  6124  005A00  0100               	movlb	0	; () banked
  6125  005A02  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6126  005A04  0100               	movlb	0	; () banked
  6127  005A06  B4D8               	btfsc	status,2,c
  6128  005A08  0012               	return	
  6129  005A0A  D7EF               	goto	l7446
  6130  005A0C                     __end_of_delay_ms:
  6131                           	opt stack 0
  6132                           tblptru	equ	0xFF8
  6133                           tblptrh	equ	0xFF7
  6134                           tblptrl	equ	0xFF6
  6135                           tablat	equ	0xFF5
  6136                           prodh	equ	0xFF4
  6137                           prodl	equ	0xFF3
  6138                           postinc0	equ	0xFEE
  6139                           wreg	equ	0xFE8
  6140                           postdec1	equ	0xFE5
  6141                           fsr1l	equ	0xFE1
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149 ;; *************** function ___ftge *****************
  6150 ;; Defined at:
  6151 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  ff1             3   18[BANK0 ] float 
  6154 ;;  ff2             3   21[BANK0 ] float 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;		None
  6157 ;; Return value:  Size  Location     Type
  6158 ;;		None               void
  6159 ;; Registers used:
  6160 ;;		wreg, status,2, status,0
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6166 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6169 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;Total ram usage:        9 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; Hardware stack levels required when called:    7
  6173 ;; This function calls:
  6174 ;;		Nothing
  6175 ;; This function is called by:
  6176 ;;		_ID
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           	psect	text11
  6181  00486A                     __ptext11:
  6182                           	opt stack 0
  6183  00486A                     ___ftge:
  6184                           	opt stack 21
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;incstack = 0
  6188  00486A  0100               	movlb	0	; () banked
  6189  00486C  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6190  00486E  D01D               	goto	l7568
  6191                           
  6192                           ; BSR set to: 0
  6193  004870  C092  F098         	movff	___ftge@ff1,??___ftge
  6194  004874  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6195  004878  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6196  00487C  0100               	movlb	0	; () banked
  6197  00487E  1F98               	comf	??___ftge& (0+255),f,b
  6198  004880  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6199  004882  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6200  004884  2B98               	incf	??___ftge& (0+255),f,b
  6201  004886  0E00               	movlw	0
  6202  004888  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6203  00488A  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6204  00488C  0E00               	movlw	0
  6205  00488E  0100               	movlb	0	; () banked
  6206  004890  2598               	addwf	??___ftge& (0+255),w,b
  6207  004892  0100               	movlb	0	; () banked
  6208  004894  6F92               	movwf	___ftge@ff1& (0+255),b
  6209  004896  0E00               	movlw	0
  6210  004898  0100               	movlb	0	; () banked
  6211  00489A  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6212  00489C  0100               	movlb	0	; () banked
  6213  00489E  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6214  0048A0  0E80               	movlw	128
  6215  0048A2  0100               	movlb	0	; () banked
  6216  0048A4  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6217  0048A6  0100               	movlb	0	; () banked
  6218  0048A8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6219  0048AA                     l7568:
  6220                           
  6221                           ; BSR set to: 0
  6222  0048AA  0100               	movlb	0	; () banked
  6223  0048AC  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6224  0048AE  D01D               	goto	l7572
  6225                           
  6226                           ; BSR set to: 0
  6227  0048B0  C095  F098         	movff	___ftge@ff2,??___ftge
  6228  0048B4  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6229  0048B8  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6230  0048BC  0100               	movlb	0	; () banked
  6231  0048BE  1F98               	comf	??___ftge& (0+255),f,b
  6232  0048C0  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6233  0048C2  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6234  0048C4  2B98               	incf	??___ftge& (0+255),f,b
  6235  0048C6  0E00               	movlw	0
  6236  0048C8  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6237  0048CA  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6238  0048CC  0E00               	movlw	0
  6239  0048CE  0100               	movlb	0	; () banked
  6240  0048D0  2598               	addwf	??___ftge& (0+255),w,b
  6241  0048D2  0100               	movlb	0	; () banked
  6242  0048D4  6F95               	movwf	___ftge@ff2& (0+255),b
  6243  0048D6  0E00               	movlw	0
  6244  0048D8  0100               	movlb	0	; () banked
  6245  0048DA  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6246  0048DC  0100               	movlb	0	; () banked
  6247  0048DE  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6248  0048E0  0E80               	movlw	128
  6249  0048E2  0100               	movlb	0	; () banked
  6250  0048E4  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6251  0048E6  0100               	movlb	0	; () banked
  6252  0048E8  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6253  0048EA                     l7572:
  6254                           
  6255                           ; BSR set to: 0
  6256  0048EA  0E00               	movlw	0
  6257  0048EC  0100               	movlb	0	; () banked
  6258  0048EE  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6259  0048F0  0E00               	movlw	0
  6260  0048F2  0100               	movlb	0	; () banked
  6261  0048F4  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6262  0048F6  0E80               	movlw	128
  6263  0048F8  0100               	movlb	0	; () banked
  6264  0048FA  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6265                           
  6266                           ; BSR set to: 0
  6267  0048FC  0E00               	movlw	0
  6268  0048FE  0100               	movlb	0	; () banked
  6269  004900  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6270  004902  0E00               	movlw	0
  6271  004904  0100               	movlb	0	; () banked
  6272  004906  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6273  004908  0E80               	movlw	128
  6274  00490A  0100               	movlb	0	; () banked
  6275  00490C  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6276  00490E  0100               	movlb	0	; () banked
  6277  004910  5195               	movf	___ftge@ff2& (0+255),w,b
  6278  004912  0100               	movlb	0	; () banked
  6279  004914  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6280  004916  0100               	movlb	0	; () banked
  6281  004918  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6282  00491A  0100               	movlb	0	; () banked
  6283  00491C  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6284  00491E  0100               	movlb	0	; () banked
  6285  004920  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6286  004922  0100               	movlb	0	; () banked
  6287  004924  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6288  004926  B0D8               	btfsc	status,0,c
  6289  004928  D002               	goto	l7578
  6290                           
  6291                           ; BSR set to: 0
  6292  00492A  90D8               	bcf	status,0,c
  6293  00492C  0012               	return	
  6294  00492E                     l7578:
  6295                           
  6296                           ; BSR set to: 0
  6297  00492E  80D8               	bsf	status,0,c
  6298                           
  6299                           ; BSR set to: 0
  6300  004930  0012               	return	
  6301  004932                     __end_of___ftge:
  6302                           	opt stack 0
  6303                           tblptru	equ	0xFF8
  6304                           tblptrh	equ	0xFF7
  6305                           tblptrl	equ	0xFF6
  6306                           tablat	equ	0xFF5
  6307                           prodh	equ	0xFF4
  6308                           prodl	equ	0xFF3
  6309                           postinc0	equ	0xFEE
  6310                           wreg	equ	0xFE8
  6311                           postdec1	equ	0xFE5
  6312                           fsr1l	equ	0xFE1
  6313                           indf2	equ	0xFDF
  6314                           postinc2	equ	0xFDE
  6315                           postdec2	equ	0xFDD
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320 ;; *************** function ___awtoft *****************
  6321 ;; Defined at:
  6322 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  c               2   14[BANK0 ] int 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  sign            1   17[BANK0 ] unsigned char 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  3   14[BANK0 ] float 
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, status,0, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6336 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;Total ram usage:        4 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    8
  6343 ;; This function calls:
  6344 ;;		___ftpack
  6345 ;; This function is called by:
  6346 ;;		_ID
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text12
  6351  005526                     __ptext12:
  6352                           	opt stack 0
  6353  005526                     ___awtoft:
  6354                           	opt stack 20
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;incstack = 0
  6358  005526  0E00               	movlw	0
  6359  005528  0100               	movlb	0	; () banked
  6360  00552A  6F91               	movwf	___awtoft@sign& (0+255),b
  6361                           
  6362                           ; BSR set to: 0
  6363  00552C  0100               	movlb	0	; () banked
  6364  00552E  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6365  005530  D008               	goto	l7560
  6366                           
  6367                           ; BSR set to: 0
  6368  005532  0100               	movlb	0	; () banked
  6369  005534  6D8E               	negf	___awtoft@c& (0+255),b
  6370  005536  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6371  005538  B0D8               	btfsc	status,0,c
  6372  00553A  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6373                           
  6374                           ; BSR set to: 0
  6375  00553C  0E01               	movlw	1
  6376  00553E  0100               	movlb	0	; () banked
  6377  005540  6F91               	movwf	___awtoft@sign& (0+255),b
  6378  005542                     l7560:
  6379                           
  6380                           ; BSR set to: 0
  6381  005542  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6382  005546  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6383  00554A  0100               	movlb	0	; () banked
  6384  00554C  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6385  00554E  0E8E               	movlw	142
  6386  005550  0100               	movlb	0	; () banked
  6387  005552  6F83               	movwf	___ftpack@exp& (0+255),b
  6388  005554  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6389  005558  EC94  F020         	call	___ftpack	;wreg free
  6390  00555C  C080  F08E         	movff	?___ftpack,?___awtoft
  6391  005560  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6392  005564  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6393  005568  0012               	return	
  6394  00556A                     __end_of___awtoft:
  6395                           	opt stack 0
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           postinc0	equ	0xFEE
  6403                           wreg	equ	0xFE8
  6404                           postdec1	equ	0xFE5
  6405                           fsr1l	equ	0xFE1
  6406                           indf2	equ	0xFDF
  6407                           postinc2	equ	0xFDE
  6408                           postdec2	equ	0xFDD
  6409                           fsr2h	equ	0xFDA
  6410                           fsr2l	equ	0xFD9
  6411                           status	equ	0xFD8
  6412                           
  6413 ;; *************** function ___ftpack *****************
  6414 ;; Defined at:
  6415 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  arg             3    0[BANK0 ] unsigned um
  6418 ;;  exp             1    3[BANK0 ] unsigned char 
  6419 ;;  sign            1    4[BANK0 ] unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  3    0[BANK0 ] float 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6431 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;Total ram usage:        8 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    7
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		___awtoft
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text13
  6446  004128                     __ptext13:
  6447                           	opt stack 0
  6448  004128                     ___ftpack:
  6449                           	opt stack 20
  6450                           
  6451                           ;incstack = 0
  6452  004128  0100               	movlb	0	; () banked
  6453  00412A  5183               	movf	___ftpack@exp& (0+255),w,b
  6454  00412C  0100               	movlb	0	; () banked
  6455  00412E  B4D8               	btfsc	status,2,c
  6456  004130  D008               	goto	l6944
  6457                           
  6458                           ; BSR set to: 0
  6459  004132  0100               	movlb	0	; () banked
  6460  004134  5180               	movf	___ftpack@arg& (0+255),w,b
  6461  004136  0100               	movlb	0	; () banked
  6462  004138  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6463  00413A  0100               	movlb	0	; () banked
  6464  00413C  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6465  00413E  A4D8               	btfss	status,2,c
  6466  004140  D011               	goto	l6950
  6467  004142                     l6944:
  6468                           
  6469                           ; BSR set to: 0
  6470  004142  0E00               	movlw	0
  6471  004144  0100               	movlb	0	; () banked
  6472  004146  6F80               	movwf	?___ftpack& (0+255),b
  6473  004148  0E00               	movlw	0
  6474  00414A  0100               	movlb	0	; () banked
  6475  00414C  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6476  00414E  0E00               	movlw	0
  6477  004150  0100               	movlb	0	; () banked
  6478  004152  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6479                           
  6480                           ; BSR set to: 0
  6481  004154  0012               	return	
  6482  004156                     l6948:
  6483                           
  6484                           ; BSR set to: 0
  6485  004156  0100               	movlb	0	; () banked
  6486  004158  2B83               	incf	___ftpack@exp& (0+255),f,b
  6487  00415A  0100               	movlb	0	; () banked
  6488  00415C  90D8               	bcf	status,0,c
  6489  00415E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6490  004160  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6491  004162  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6492  004164                     l6950:
  6493                           
  6494                           ; BSR set to: 0
  6495  004164  0E00               	movlw	0
  6496  004166  0100               	movlb	0	; () banked
  6497  004168  1580               	andwf	___ftpack@arg& (0+255),w,b
  6498  00416A  0100               	movlb	0	; () banked
  6499  00416C  6F85               	movwf	??___ftpack& (0+255),b
  6500  00416E  0E00               	movlw	0
  6501  004170  0100               	movlb	0	; () banked
  6502  004172  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6503  004174  0100               	movlb	0	; () banked
  6504  004176  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6505  004178  0EFE               	movlw	254
  6506  00417A  0100               	movlb	0	; () banked
  6507  00417C  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6508  00417E  0100               	movlb	0	; () banked
  6509  004180  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6510  004182  0100               	movlb	0	; () banked
  6511  004184  5185               	movf	??___ftpack& (0+255),w,b
  6512  004186  0100               	movlb	0	; () banked
  6513  004188  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6514  00418A  0100               	movlb	0	; () banked
  6515  00418C  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6516  00418E  B4D8               	btfsc	status,2,c
  6517  004190  D011               	goto	l6956
  6518  004192  D7E1               	goto	l6948
  6519  004194                     l6952:
  6520                           
  6521                           ; BSR set to: 0
  6522  004194  0100               	movlb	0	; () banked
  6523  004196  2B83               	incf	___ftpack@exp& (0+255),f,b
  6524                           
  6525                           ; BSR set to: 0
  6526  004198  0E01               	movlw	1
  6527  00419A  0100               	movlb	0	; () banked
  6528  00419C  2780               	addwf	___ftpack@arg& (0+255),f,b
  6529  00419E  0E00               	movlw	0
  6530  0041A0  0100               	movlb	0	; () banked
  6531  0041A2  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6532  0041A4  0E00               	movlw	0
  6533  0041A6  0100               	movlb	0	; () banked
  6534  0041A8  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6535  0041AA  0100               	movlb	0	; () banked
  6536  0041AC  90D8               	bcf	status,0,c
  6537  0041AE  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6538  0041B0  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6539  0041B2  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6540  0041B4                     l6956:
  6541                           
  6542                           ; BSR set to: 0
  6543  0041B4  0E00               	movlw	0
  6544  0041B6  0100               	movlb	0	; () banked
  6545  0041B8  1580               	andwf	___ftpack@arg& (0+255),w,b
  6546  0041BA  0100               	movlb	0	; () banked
  6547  0041BC  6F85               	movwf	??___ftpack& (0+255),b
  6548  0041BE  0E00               	movlw	0
  6549  0041C0  0100               	movlb	0	; () banked
  6550  0041C2  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6551  0041C4  0100               	movlb	0	; () banked
  6552  0041C6  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6553  0041C8  0EFF               	movlw	255
  6554  0041CA  0100               	movlb	0	; () banked
  6555  0041CC  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6556  0041CE  0100               	movlb	0	; () banked
  6557  0041D0  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6558  0041D2  0100               	movlb	0	; () banked
  6559  0041D4  5185               	movf	??___ftpack& (0+255),w,b
  6560  0041D6  0100               	movlb	0	; () banked
  6561  0041D8  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6562  0041DA  0100               	movlb	0	; () banked
  6563  0041DC  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6564  0041DE  B4D8               	btfsc	status,2,c
  6565  0041E0  D008               	goto	l6960
  6566  0041E2  D7D8               	goto	l6952
  6567  0041E4                     l6958:
  6568                           
  6569                           ; BSR set to: 0
  6570  0041E4  0100               	movlb	0	; () banked
  6571  0041E6  0783               	decf	___ftpack@exp& (0+255),f,b
  6572  0041E8  0100               	movlb	0	; () banked
  6573  0041EA  90D8               	bcf	status,0,c
  6574  0041EC  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6575  0041EE  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6576  0041F0  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6577  0041F2                     l6960:
  6578                           
  6579                           ; BSR set to: 0
  6580  0041F2  0100               	movlb	0	; () banked
  6581  0041F4  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6582  0041F6  D004               	goto	l1796
  6583                           
  6584                           ; BSR set to: 0
  6585  0041F8  0E02               	movlw	2
  6586  0041FA  0100               	movlb	0	; () banked
  6587  0041FC  6183               	cpfslt	___ftpack@exp& (0+255),b
  6588  0041FE  D7F2               	goto	l6958
  6589  004200                     l1796:
  6590                           
  6591                           ; BSR set to: 0
  6592  004200  0100               	movlb	0	; () banked
  6593  004202  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6594  004204  D002               	goto	l6966
  6595                           
  6596                           ; BSR set to: 0
  6597  004206  0100               	movlb	0	; () banked
  6598  004208  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6599  00420A                     l6966:
  6600                           
  6601                           ; BSR set to: 0
  6602  00420A  0100               	movlb	0	; () banked
  6603  00420C  90D8               	bcf	status,0,c
  6604  00420E  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6605  004210  0100               	movlb	0	; () banked
  6606  004212  5183               	movf	___ftpack@exp& (0+255),w,b
  6607  004214  0100               	movlb	0	; () banked
  6608  004216  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6609                           
  6610                           ; BSR set to: 0
  6611  004218  0100               	movlb	0	; () banked
  6612  00421A  5184               	movf	___ftpack@sign& (0+255),w,b
  6613  00421C  0100               	movlb	0	; () banked
  6614  00421E  B4D8               	btfsc	status,2,c
  6615  004220  D002               	goto	l6972
  6616                           
  6617                           ; BSR set to: 0
  6618  004222  0100               	movlb	0	; () banked
  6619  004224  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6620  004226                     l6972:
  6621                           
  6622                           ; BSR set to: 0
  6623  004226  C080  F080         	movff	___ftpack@arg,?___ftpack
  6624  00422A  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6625  00422E  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6626  004232  0012               	return	
  6627  004234                     __end_of___ftpack:
  6628                           	opt stack 0
  6629                           tblptru	equ	0xFF8
  6630                           tblptrh	equ	0xFF7
  6631                           tblptrl	equ	0xFF6
  6632                           tablat	equ	0xFF5
  6633                           prodh	equ	0xFF4
  6634                           prodl	equ	0xFF3
  6635                           postinc0	equ	0xFEE
  6636                           wreg	equ	0xFE8
  6637                           postdec1	equ	0xFE5
  6638                           fsr1l	equ	0xFE1
  6639                           indf2	equ	0xFDF
  6640                           postinc2	equ	0xFDE
  6641                           postdec2	equ	0xFDD
  6642                           fsr2h	equ	0xFDA
  6643                           fsr2l	equ	0xFD9
  6644                           status	equ	0xFD8
  6645                           
  6646 ;; *************** function _Distribution *****************
  6647 ;; Defined at:
  6648 ;;		line 388 in file "sort.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      void 
  6655 ;; Registers used:
  6656 ;;		wreg, status,2, status,0, cstack
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;Total ram usage:        2 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    8
  6669 ;; This function calls:
  6670 ;;		_updateServoPosition
  6671 ;; This function is called by:
  6672 ;;		_sort
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text14
  6677  004520                     __ptext14:
  6678                           	opt stack 0
  6679  004520                     _Distribution:
  6680                           	opt stack 21
  6681                           
  6682                           ;sort.c: 389: if(f_can_coming_to_distribution){
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;incstack = 0
  6686  004520  0101               	movlb	1	; () banked
  6687  004522  5131               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6688  004524  0101               	movlb	1	; () banked
  6689  004526  1132               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6690  004528  B4D8               	btfsc	status,2,c
  6691  00452A  0012               	return	
  6692                           
  6693                           ; BSR set to: 1
  6694                           ;sort.c: 390: f_can_distributed = 0;
  6695  00452C  0E00               	movlw	0
  6696  00452E  0101               	movlb	1	; () banked
  6697  004530  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  6698  004532  0E00               	movlw	0
  6699  004534  6F33               	movwf	_f_can_distributed& (0+255),b
  6700                           
  6701                           ;sort.c: 397: switch(cur_can){
  6702  004536  D034               	goto	l8266
  6703  004538                     l8256:
  6704                           
  6705                           ;sort.c: 399: updateServoPosition(500, 1);
  6706  004538  0E01               	movlw	1
  6707  00453A  0100               	movlb	0	; () banked
  6708  00453C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6709  00453E  0EF4               	movlw	244
  6710  004540  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6711  004542  0E00               	movlw	0
  6712  004544  0100               	movlb	0	; () banked
  6713  004546  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6714  004548  0E01               	movlw	1
  6715  00454A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6716  00454C  ECC7  F026         	call	_updateServoPosition	;wreg free
  6717                           
  6718                           ;sort.c: 400: break;
  6719  004550  D03E               	goto	l8268
  6720  004552                     l8258:
  6721                           
  6722                           ;sort.c: 402: updateServoPosition(850, 1);
  6723  004552  0E03               	movlw	3
  6724  004554  0100               	movlb	0	; () banked
  6725  004556  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6726  004558  0E52               	movlw	82
  6727  00455A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6728  00455C  0E00               	movlw	0
  6729  00455E  0100               	movlb	0	; () banked
  6730  004560  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6731  004562  0E01               	movlw	1
  6732  004564  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6733  004566  ECC7  F026         	call	_updateServoPosition	;wreg free
  6734                           
  6735                           ;sort.c: 403: break;
  6736  00456A  D031               	goto	l8268
  6737  00456C                     l8260:
  6738                           
  6739                           ;sort.c: 405: updateServoPosition(1670, 1);
  6740  00456C  0E06               	movlw	6
  6741  00456E  0100               	movlb	0	; () banked
  6742  004570  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6743  004572  0E86               	movlw	134
  6744  004574  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6745  004576  0E00               	movlw	0
  6746  004578  0100               	movlb	0	; () banked
  6747  00457A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6748  00457C  0E01               	movlw	1
  6749  00457E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6750  004580  ECC7  F026         	call	_updateServoPosition	;wreg free
  6751                           
  6752                           ;sort.c: 406: break;
  6753  004584  D024               	goto	l8268
  6754  004586                     l8262:
  6755                           
  6756                           ;sort.c: 408: updateServoPosition(2400, 1);
  6757  004586  0E09               	movlw	9
  6758  004588  0100               	movlb	0	; () banked
  6759  00458A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6760  00458C  0E60               	movlw	96
  6761  00458E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6762  004590  0E00               	movlw	0
  6763  004592  0100               	movlb	0	; () banked
  6764  004594  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6765  004596  0E01               	movlw	1
  6766  004598  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6767  00459A  ECC7  F026         	call	_updateServoPosition	;wreg free
  6768                           
  6769                           ;sort.c: 412: }
  6770                           
  6771                           ;sort.c: 411: break;
  6772                           
  6773                           ;sort.c: 410: default:
  6774                           
  6775                           ;sort.c: 409: break;
  6776  00459E  D017               	goto	l8268
  6777  0045A0                     l8266:
  6778  0045A0  C12B  F088         	movff	_cur_can,??_Distribution
  6779  0045A4  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  6780                           
  6781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6782                           ; Switch size 1, requested type "space"
  6783                           ; Number of cases is 1, Range of values is 0 to 0
  6784                           ; switch strategies available:
  6785                           ; Name         Instructions Cycles
  6786                           ; simple_byte            4     3 (average)
  6787                           ;	Chosen strategy is simple_byte
  6788  0045A8  0100               	movlb	0	; () banked
  6789  0045AA  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6790  0045AC  0A00               	xorlw	0	; case 0
  6791  0045AE  A4D8               	btfss	status,2,c
  6792  0045B0  D00E               	goto	l8268
  6793                           
  6794                           ; BSR set to: 0
  6795                           ; Switch size 1, requested type "space"
  6796                           ; Number of cases is 4, Range of values is 0 to 3
  6797                           ; switch strategies available:
  6798                           ; Name         Instructions Cycles
  6799                           ; simple_byte           13     7 (average)
  6800                           ;	Chosen strategy is simple_byte
  6801  0045B2  0100               	movlb	0	; () banked
  6802  0045B4  5188               	movf	??_Distribution& (0+255),w,b
  6803  0045B6  0A00               	xorlw	0	; case 0
  6804  0045B8  B4D8               	btfsc	status,2,c
  6805  0045BA  D7BE               	goto	l8256
  6806  0045BC  0A01               	xorlw	1	; case 1
  6807  0045BE  B4D8               	btfsc	status,2,c
  6808  0045C0  D7C8               	goto	l8258
  6809  0045C2  0A03               	xorlw	3	; case 2
  6810  0045C4  B4D8               	btfsc	status,2,c
  6811  0045C6  D7D2               	goto	l8260
  6812  0045C8  0A01               	xorlw	1	; case 3
  6813  0045CA  B4D8               	btfsc	status,2,c
  6814  0045CC  D7DC               	goto	l8262
  6815  0045CE                     l8268:
  6816                           
  6817                           ;sort.c: 413: updateServoPosition(1050, 3);
  6818  0045CE  0E04               	movlw	4
  6819  0045D0  0100               	movlb	0	; () banked
  6820  0045D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6821  0045D4  0E1A               	movlw	26
  6822  0045D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6823  0045D8  0E00               	movlw	0
  6824  0045DA  0100               	movlb	0	; () banked
  6825  0045DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6826  0045DE  0E03               	movlw	3
  6827  0045E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6828  0045E2  ECC7  F026         	call	_updateServoPosition	;wreg free
  6829                           
  6830                           ;sort.c: 414: servo_timer_target = 750;
  6831  0045E6  0E02               	movlw	2
  6832  0045E8  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6833  0045EA  0EEE               	movlw	238
  6834  0045EC  6E6F               	movwf	_servo_timer_target,c	;volatile
  6835                           
  6836                           ;sort.c: 415: f_panning_to_bin = 1;
  6837  0045EE  0E00               	movlw	0
  6838  0045F0  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  6839  0045F2  0E01               	movlw	1
  6840  0045F4  6E69               	movwf	_f_panning_to_bin,c	;volatile
  6841                           
  6842                           ;sort.c: 416: f_can_coming_to_distribution = 0;
  6843  0045F6  0E00               	movlw	0
  6844  0045F8  0101               	movlb	1	; () banked
  6845  0045FA  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6846  0045FC  0E00               	movlw	0
  6847  0045FE  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  6848  004600  0012               	return	
  6849  004602                     __end_of_Distribution:
  6850                           	opt stack 0
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           postinc0	equ	0xFEE
  6858                           wreg	equ	0xFE8
  6859                           postdec1	equ	0xFE5
  6860                           fsr1l	equ	0xFE1
  6861                           indf2	equ	0xFDF
  6862                           postinc2	equ	0xFDE
  6863                           postdec2	equ	0xFDD
  6864                           fsr2h	equ	0xFDA
  6865                           fsr2l	equ	0xFD9
  6866                           status	equ	0xFD8
  6867                           
  6868 ;; *************** function _machineConfig *****************
  6869 ;; Defined at:
  6870 ;;		line 15 in file "MachineConfig.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1    wreg      void 
  6877 ;; Registers used:
  6878 ;;		wreg, status,2
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    7
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_main
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text15
  6899  005124                     __ptext15:
  6900                           	opt stack 0
  6901  005124                     _machineConfig:
  6902                           	opt stack 23
  6903                           
  6904                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  6905                           
  6906                           ; BSR set to: 1
  6907                           ;incstack = 0
  6908  005124  0EF0               	movlw	240
  6909  005126  6ED3               	movwf	4051,c	;volatile
  6910                           
  6911                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  6912  005128  8C9B               	bsf	3995,6,c	;volatile
  6913                           
  6914                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  6915  00512A  0E07               	movlw	7
  6916  00512C  6E92               	movwf	3986,c	;volatile
  6917                           
  6918                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  6919  00512E  0EF2               	movlw	242
  6920  005130  6E93               	movwf	3987,c	;volatile
  6921                           
  6922                           ;MachineConfig.c: 27: TRISC = 0x00;
  6923  005132  0E00               	movlw	0
  6924  005134  6E94               	movwf	3988,c	;volatile
  6925                           
  6926                           ;MachineConfig.c: 31: TRISD = 0x00;
  6927  005136  0E00               	movlw	0
  6928  005138  6E95               	movwf	3989,c	;volatile
  6929                           
  6930                           ;MachineConfig.c: 34: TRISE = 0x00;
  6931  00513A  0E00               	movlw	0
  6932  00513C  6E96               	movwf	3990,c	;volatile
  6933                           
  6934                           ;MachineConfig.c: 37: LATA = 0x00;
  6935  00513E  0E00               	movlw	0
  6936  005140  6E89               	movwf	3977,c	;volatile
  6937                           
  6938                           ;MachineConfig.c: 38: LATB = 0x00;
  6939  005142  0E00               	movlw	0
  6940  005144  6E8A               	movwf	3978,c	;volatile
  6941                           
  6942                           ;MachineConfig.c: 39: LATC = 0x00;
  6943  005146  0E00               	movlw	0
  6944  005148  6E8B               	movwf	3979,c	;volatile
  6945                           
  6946                           ;MachineConfig.c: 40: LATD = 0x00;
  6947  00514A  0E00               	movlw	0
  6948  00514C  6E8C               	movwf	3980,c	;volatile
  6949                           
  6950                           ;MachineConfig.c: 41: LATE = 0x00;
  6951  00514E  0E00               	movlw	0
  6952  005150  6E8D               	movwf	3981,c	;volatile
  6953                           
  6954                           ;MachineConfig.c: 43: nRBPU = 0;
  6955  005152  9EF1               	bcf	intcon2,7,c	;volatile
  6956                           
  6957                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  6958  005154  0E00               	movlw	0
  6959  005156  6EC2               	movwf	4034,c	;volatile
  6960                           
  6961                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  6962  005158  0E0C               	movlw	12
  6963  00515A  6EC1               	movwf	4033,c	;volatile
  6964                           
  6965                           ;MachineConfig.c: 51: CVRCON = 0x00;
  6966  00515C  0E00               	movlw	0
  6967  00515E  6EB5               	movwf	4021,c	;volatile
  6968                           
  6969                           ;MachineConfig.c: 52: CMCONbits.CIS = 0;
  6970  005160  96B4               	bcf	4020,3,c	;volatile
  6971                           
  6972                           ;MachineConfig.c: 53: ADCON2 = 0b10110001;
  6973  005162  0EB1               	movlw	177
  6974  005164  6EC0               	movwf	4032,c	;volatile
  6975                           
  6976                           ;MachineConfig.c: 56: INT1IE = 1;
  6977  005166  86F0               	bsf	intcon3,3,c	;volatile
  6978                           
  6979                           ;MachineConfig.c: 58: TMR0IE = 1;
  6980  005168  8AF2               	bsf	intcon,5,c	;volatile
  6981                           
  6982                           ;MachineConfig.c: 59: TMR1IE = 1;
  6983  00516A  809D               	bsf	3997,0,c	;volatile
  6984                           
  6985                           ;MachineConfig.c: 60: TMR2IE = 1;
  6986  00516C  829D               	bsf	3997,1,c	;volatile
  6987                           
  6988                           ;MachineConfig.c: 61: TMR3IE = 1;
  6989  00516E  82A0               	bsf	4000,1,c	;volatile
  6990                           
  6991                           ;MachineConfig.c: 63: T1CON = 0b10110000;
  6992  005170  0EB0               	movlw	176
  6993  005172  6ECD               	movwf	4045,c	;volatile
  6994                           
  6995                           ;MachineConfig.c: 64: T2CON = 0b01111011;
  6996  005174  0E7B               	movlw	123
  6997  005176  6ECA               	movwf	4042,c	;volatile
  6998                           
  6999                           ;MachineConfig.c: 65: PR2 = 0x22;
  7000  005178  0E22               	movlw	34
  7001  00517A  6ECB               	movwf	4043,c	;volatile
  7002                           
  7003                           ;MachineConfig.c: 66: T3CON = 0b10110000;
  7004  00517C  0EB0               	movlw	176
  7005  00517E  6EB1               	movwf	4017,c	;volatile
  7006                           
  7007                           ;MachineConfig.c: 67: PEIE = 1;
  7008  005180  8CF2               	bsf	intcon,6,c	;volatile
  7009                           
  7010                           ;MachineConfig.c: 68: ADIE = 0;
  7011  005182  9C9D               	bcf	3997,6,c	;volatile
  7012                           
  7013                           ;MachineConfig.c: 69: (INTCONbits.GIE = 0);
  7014  005184  9EF2               	bcf	intcon,7,c	;volatile
  7015  005186  0012               	return		;funcret
  7016  005188                     __end_of_machineConfig:
  7017                           	opt stack 0
  7018                           tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           intcon	equ	0xFF2
  7025                           intcon2	equ	0xFF1
  7026                           intcon3	equ	0xFF0
  7027                           postinc0	equ	0xFEE
  7028                           wreg	equ	0xFE8
  7029                           postdec1	equ	0xFE5
  7030                           fsr1l	equ	0xFE1
  7031                           indf2	equ	0xFDF
  7032                           postinc2	equ	0xFDE
  7033                           postdec2	equ	0xFDD
  7034                           fsr2h	equ	0xFDA
  7035                           fsr2l	equ	0xFD9
  7036                           status	equ	0xFD8
  7037                           
  7038 ;; *************** function _logRun *****************
  7039 ;; Defined at:
  7040 ;;		line 88 in file "EEPROM.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;		None
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7045 ;;  i               2   55[BANK0 ] int 
  7046 ;;  num             1   49[BANK0 ] unsigned char 
  7047 ;;  addr            2   57[BANK0 ] unsigned short 
  7048 ;;  byte11          1   54[BANK0 ] unsigned char 
  7049 ;;  byte3           1   52[BANK0 ] unsigned char 
  7050 ;;  byte2           1   51[BANK0 ] unsigned char 
  7051 ;;  byte1           1   50[BANK0 ] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      void 
  7054 ;; Registers used:
  7055 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;Total ram usage:       10 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:   11
  7068 ;; This function calls:
  7069 ;;		_EEPROM_read
  7070 ;;		_EEPROM_write
  7071 ;; This function is called by:
  7072 ;;		_main
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text16
  7077  003EBE                     __ptext16:
  7078                           	opt stack 0
  7079  003EBE                     _logRun:
  7080                           	opt stack 19
  7081                           
  7082                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7083                           
  7084                           ;incstack = 0
  7085  003EBE  0E00               	movlw	0
  7086  003EC0  0100               	movlb	0	; () banked
  7087  003EC2  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7088  003EC4  0E00               	movlw	0
  7089  003EC6  6F80               	movwf	EEPROM_read@address& (0+255),b
  7090  003EC8  EC9F  F02D         	call	_EEPROM_read	;wreg free
  7091  003ECC  0100               	movlb	0	; () banked
  7092  003ECE  6FFD               	movwf	_sel& (0+255),b
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7096  003ED0  0100               	movlb	0	; () banked
  7097  003ED2  51FD               	movf	_sel& (0+255),w,b
  7098  003ED4  0D0B               	mullw	11
  7099  003ED6  0E01               	movlw	1
  7100  003ED8  24F3               	addwf	prodl,w,c
  7101  003EDA  0100               	movlb	0	; () banked
  7102  003EDC  6FB9               	movwf	logRun@addr& (0+255),b
  7103  003EDE  0E00               	movlw	0
  7104  003EE0  20F4               	addwfc	prodh,w,c
  7105  003EE2  0100               	movlb	0	; () banked
  7106  003EE4  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;EEPROM.c: 105: if (sel < 3){
  7110  003EE6  0E03               	movlw	3
  7111  003EE8  0100               	movlb	0	; () banked
  7112  003EEA  61FD               	cpfslt	_sel& (0+255),b
  7113  003EEC  D00E               	goto	l9944
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7117  003EEE  0100               	movlb	0	; () banked
  7118  003EF0  29FD               	incf	_sel& (0+255),w,b
  7119  003EF2  0100               	movlb	0	; () banked
  7120  003EF4  6FB1               	movwf	logRun@num& (0+255),b
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7124  003EF6  0E00               	movlw	0
  7125  003EF8  0100               	movlb	0	; () banked
  7126  003EFA  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7127  003EFC  0E00               	movlw	0
  7128  003EFE  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7129  003F00  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7130  003F04  EC1C  F022         	call	_EEPROM_write	;wreg free
  7131                           
  7132                           ;EEPROM.c: 108: }
  7133  003F08  D00A               	goto	l9946
  7134  003F0A                     l9944:
  7135                           
  7136                           ;EEPROM.c: 109: else{
  7137                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7138  003F0A  0E00               	movlw	0
  7139  003F0C  0100               	movlb	0	; () banked
  7140  003F0E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7141  003F10  0E00               	movlw	0
  7142  003F12  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7143  003F14  0E00               	movlw	0
  7144  003F16  0100               	movlb	0	; () banked
  7145  003F18  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7146  003F1A  EC1C  F022         	call	_EEPROM_write	;wreg free
  7147  003F1E                     l9946:
  7148                           
  7149                           ;EEPROM.c: 111: }
  7150                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7151  003F1E  0100               	movlb	0	; () banked
  7152  003F20  51FE               	movf	_count_total& (0+255),w,b
  7153  003F22  0980               	iorlw	128
  7154  003F24  0100               	movlb	0	; () banked
  7155  003F26  6FB2               	movwf	logRun@byte1& (0+255),b
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7159  003F28  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7160  003F2C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7161  003F30  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7162  003F34  EC1C  F022         	call	_EEPROM_write	;wreg free
  7163                           
  7164                           ;EEPROM.c: 116: addr++;
  7165  003F38  0100               	movlb	0	; () banked
  7166  003F3A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7167  003F3C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7171  003F3E  0101               	movlb	1	; () banked
  7172  003F40  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7173  003F42  0BF0               	andlw	240
  7174  003F44  0101               	movlb	1	; () banked
  7175  003F46  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7176  003F48  0100               	movlb	0	; () banked
  7177  003F4A  6FB3               	movwf	logRun@byte2& (0+255),b
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7181  003F4C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7182  003F50  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7183  003F54  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7184  003F58  EC1C  F022         	call	_EEPROM_write	;wreg free
  7185                           
  7186                           ;EEPROM.c: 121: addr++;
  7187  003F5C  0100               	movlb	0	; () banked
  7188  003F5E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7189  003F60  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7190                           
  7191                           ; BSR set to: 0
  7192                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7193  003F62  0101               	movlb	1	; () banked
  7194  003F64  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7195  003F66  0BF0               	andlw	240
  7196  003F68  0101               	movlb	1	; () banked
  7197  003F6A  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7198  003F6C  0100               	movlb	0	; () banked
  7199  003F6E  6FB4               	movwf	logRun@byte3& (0+255),b
  7200                           
  7201                           ; BSR set to: 0
  7202                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7203  003F70  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7204  003F74  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7205  003F78  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7206  003F7C  EC1C  F022         	call	_EEPROM_write	;wreg free
  7207                           
  7208                           ;EEPROM.c: 124: addr++;
  7209  003F80  0100               	movlb	0	; () banked
  7210  003F82  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7211  003F84  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7215  003F86  0E00               	movlw	0
  7216  003F88  0100               	movlb	0	; () banked
  7217  003F8A  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7218  003F8C  0E00               	movlw	0
  7219  003F8E  6FB7               	movwf	logRun@i& (0+255),b
  7220                           
  7221                           ; BSR set to: 0
  7222  003F90  0100               	movlb	0	; () banked
  7223  003F92  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7224  003F94  D008               	goto	l9970
  7225  003F96  0100               	movlb	0	; () banked
  7226  003F98  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7227  003F9A  E128               	bnz	l1155
  7228  003F9C  0E07               	movlw	7
  7229  003F9E  0100               	movlb	0	; () banked
  7230  003FA0  5DB7               	subwf	logRun@i& (0+255),w,b
  7231  003FA2  B0D8               	btfsc	status,0,c
  7232  003FA4  D023               	goto	l1155
  7233  003FA6                     l9970:
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7237  003FA6  90D8               	bcf	status,0,c
  7238  003FA8  0100               	movlb	0	; () banked
  7239  003FAA  35B7               	rlcf	logRun@i& (0+255),w,b
  7240  003FAC  6ED9               	movwf	fsr2l,c
  7241  003FAE  0100               	movlb	0	; () banked
  7242  003FB0  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7243  003FB2  6EDA               	movwf	fsr2h,c
  7244  003FB4  0E0E               	movlw	low _startTime
  7245  003FB6  26D9               	addwf	fsr2l,f,c
  7246  003FB8  0E01               	movlw	high _startTime
  7247  003FBA  22DA               	addwfc	fsr2h,f,c
  7248  003FBC  50DF               	movf	indf2,w,c
  7249  003FBE  0100               	movlb	0	; () banked
  7250  003FC0  6FB5               	movwf	logRun@byte_i& (0+255),b
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7254  003FC2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7255  003FC6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7256  003FCA  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7257  003FCE  EC1C  F022         	call	_EEPROM_write	;wreg free
  7258                           
  7259                           ;EEPROM.c: 130: addr++;
  7260  003FD2  0100               	movlb	0	; () banked
  7261  003FD4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7262  003FD6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7263                           
  7264                           ; BSR set to: 0
  7265  003FD8  0100               	movlb	0	; () banked
  7266  003FDA  4BB7               	infsnz	logRun@i& (0+255),f,b
  7267  003FDC  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7268                           
  7269                           ; BSR set to: 0
  7270  003FDE  0100               	movlb	0	; () banked
  7271  003FE0  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7272  003FE2  D7E1               	goto	l9970
  7273  003FE4  0100               	movlb	0	; () banked
  7274  003FE6  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7275  003FE8  E101               	bnz	u9500
  7276  003FEA  D7D8               	goto	L8
  7277  003FEC                     u9500:
  7278  003FEC                     l1155:
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;EEPROM.c: 131: }
  7282                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7283  003FEC  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7287  003FF0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7288  003FF4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7289  003FF8  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7290  003FFC  EC1C  F022         	call	_EEPROM_write	;wreg free
  7291  004000  0012               	return		;funcret
  7292  004002                     __end_of_logRun:
  7293                           	opt stack 0
  7294                           tblptru	equ	0xFF8
  7295                           tblptrh	equ	0xFF7
  7296                           tblptrl	equ	0xFF6
  7297                           tablat	equ	0xFF5
  7298                           prodh	equ	0xFF4
  7299                           prodl	equ	0xFF3
  7300                           intcon	equ	0xFF2
  7301                           intcon2	equ	0xFF1
  7302                           intcon3	equ	0xFF0
  7303                           postinc0	equ	0xFEE
  7304                           wreg	equ	0xFE8
  7305                           postdec1	equ	0xFE5
  7306                           fsr1l	equ	0xFE1
  7307                           indf2	equ	0xFDF
  7308                           postinc2	equ	0xFDE
  7309                           postdec2	equ	0xFDD
  7310                           fsr2h	equ	0xFDA
  7311                           fsr2l	equ	0xFD9
  7312                           status	equ	0xFD8
  7313                           
  7314 ;; *************** function _initUI *****************
  7315 ;; Defined at:
  7316 ;;		line 62 in file "UI.c"
  7317 ;; Parameters:    Size  Location     Type
  7318 ;;		None
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;Total ram usage:        0 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:   12
  7337 ;; This function calls:
  7338 ;;		_change_state_to_menu_start
  7339 ;;		_loadRTC
  7340 ;; This function is called by:
  7341 ;;		_main
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           	psect	text17
  7346  005726                     __ptext17:
  7347                           	opt stack 0
  7348  005726                     _initUI:
  7349                           	opt stack 18
  7350                           
  7351                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7352                           
  7353                           ;incstack = 0
  7354  005726  8EF2               	bsf	intcon,7,c	;volatile
  7355                           
  7356                           ;UI.c: 64: machine_state = UI_state;
  7357  005728  0E00               	movlw	0
  7358  00572A  0100               	movlb	0	; () banked
  7359  00572C  6FFC               	movwf	_machine_state& (0+255),b
  7360                           
  7361                           ;UI.c: 65: logstate = 0;
  7362  00572E  0E00               	movlw	0
  7363  005730  0100               	movlb	0	; () banked
  7364  005732  6FF9               	movwf	(_logstate+1)& (0+255),b
  7365  005734  0E00               	movlw	0
  7366  005736  6FF8               	movwf	_logstate& (0+255),b
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;UI.c: 67: if(RTCflag){
  7370  005738  0100               	movlb	0	; () banked
  7371  00573A  51E4               	movf	_RTCflag& (0+255),w,b
  7372  00573C  0100               	movlb	0	; () banked
  7373  00573E  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7374  005740  A4D8               	btfss	status,2,c
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;UI.c: 68: loadRTC();
  7378  005742  ECFC  F025         	call	_loadRTC	;wreg free
  7379                           
  7380                           ;UI.c: 69: }
  7381                           ;UI.c: 71: change_state_to_menu_start();
  7382  005746  ECB1  F02C         	call	_change_state_to_menu_start	;wreg free
  7383                           
  7384                           ;UI.c: 72: firstboot = 1;
  7385  00574A  0E00               	movlw	0
  7386  00574C  0101               	movlb	1	; () banked
  7387  00574E  6F3A               	movwf	(_firstboot+1)& (0+255),b
  7388  005750  0E01               	movlw	1
  7389  005752  6F39               	movwf	_firstboot& (0+255),b
  7390                           
  7391                           ; BSR set to: 1
  7392  005754  0012               	return		;funcret
  7393  005756                     __end_of_initUI:
  7394                           	opt stack 0
  7395                           tblptru	equ	0xFF8
  7396                           tblptrh	equ	0xFF7
  7397                           tblptrl	equ	0xFF6
  7398                           tablat	equ	0xFF5
  7399                           prodh	equ	0xFF4
  7400                           prodl	equ	0xFF3
  7401                           intcon	equ	0xFF2
  7402                           intcon2	equ	0xFF1
  7403                           intcon3	equ	0xFF0
  7404                           postinc0	equ	0xFEE
  7405                           wreg	equ	0xFE8
  7406                           postdec1	equ	0xFE5
  7407                           fsr1l	equ	0xFE1
  7408                           indf2	equ	0xFDF
  7409                           postinc2	equ	0xFDE
  7410                           postdec2	equ	0xFDD
  7411                           fsr2h	equ	0xFDA
  7412                           fsr2l	equ	0xFD9
  7413                           status	equ	0xFD8
  7414                           
  7415 ;; *************** function _loadRTC *****************
  7416 ;; Defined at:
  7417 ;;		line 28 in file "RTC.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;		None
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;  i               2   22[BANK0 ] int 
  7422 ;; Return value:  Size  Location     Type
  7423 ;;                  1    wreg      void 
  7424 ;; Registers used:
  7425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7426 ;; Tracked objects:
  7427 ;;		On entry : 0/0
  7428 ;;		On exit  : 0/0
  7429 ;;		Unchanged: 0/0
  7430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;Total ram usage:        3 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; Hardware stack levels required when called:    9
  7438 ;; This function calls:
  7439 ;;		_I2C_Master_Init
  7440 ;;		_I2C_Master_Start
  7441 ;;		_I2C_Master_Stop
  7442 ;;		_I2C_Master_Write
  7443 ;; This function is called by:
  7444 ;;		_initUI
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           	psect	text18
  7449  004BF8                     __ptext18:
  7450                           	opt stack 0
  7451  004BF8                     _loadRTC:
  7452                           	opt stack 20
  7453                           
  7454                           ;RTC.c: 30: I2C_Master_Init(10000);
  7455                           
  7456                           ; BSR set to: 1
  7457                           ;incstack = 0
  7458  004BF8  0E10               	movlw	16
  7459  004BFA  0100               	movlb	0	; () banked
  7460  004BFC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7461  004BFE  0E27               	movlw	39
  7462  004C00  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7463  004C02  0E00               	movlw	0
  7464  004C04  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7465  004C06  0E00               	movlw	0
  7466  004C08  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7467  004C0A  ECF5  F028         	call	_I2C_Master_Init	;wreg free
  7468                           
  7469                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7470  004C0E  9EF2               	bcf	intcon,7,c	;volatile
  7471                           
  7472                           ;RTC.c: 34: I2C_Master_Start();
  7473  004C10  EC02  F02E         	call	_I2C_Master_Start	;wreg free
  7474                           
  7475                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7476  004C14  0E00               	movlw	0
  7477  004C16  0100               	movlb	0	; () banked
  7478  004C18  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7479  004C1A  0ED0               	movlw	208
  7480  004C1C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7481  004C1E  ECF0  F02D         	call	_I2C_Master_Write	;wreg free
  7482                           
  7483                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7484  004C22  0E00               	movlw	0
  7485  004C24  0100               	movlb	0	; () banked
  7486  004C26  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7487  004C28  0E00               	movlw	0
  7488  004C2A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7489  004C2C  ECF0  F02D         	call	_I2C_Master_Write	;wreg free
  7490                           
  7491                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7492  004C30  0E00               	movlw	0
  7493  004C32  0100               	movlb	0	; () banked
  7494  004C34  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7495  004C36  0E00               	movlw	0
  7496  004C38  6F96               	movwf	loadRTC@i& (0+255),b
  7497  004C3A                     l7660:
  7498                           
  7499                           ; BSR set to: 0
  7500  004C3A  0100               	movlb	0	; () banked
  7501  004C3C  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7502  004C3E  D008               	goto	l7664
  7503  004C40  0100               	movlb	0	; () banked
  7504  004C42  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7505  004C44  E11B               	bnz	l7670
  7506  004C46  0E07               	movlw	7
  7507  004C48  0100               	movlb	0	; () banked
  7508  004C4A  5D96               	subwf	loadRTC@i& (0+255),w,b
  7509  004C4C  B0D8               	btfsc	status,0,c
  7510  004C4E  D016               	goto	l7670
  7511  004C50                     l7664:
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7515  004C50  0E1C               	movlw	low _time
  7516  004C52  0100               	movlb	0	; () banked
  7517  004C54  2596               	addwf	loadRTC@i& (0+255),w,b
  7518  004C56  6ED9               	movwf	fsr2l,c
  7519  004C58  0E01               	movlw	high _time
  7520  004C5A  0100               	movlb	0	; () banked
  7521  004C5C  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7522  004C5E  6EDA               	movwf	fsr2h,c
  7523  004C60  50DF               	movf	indf2,w,c
  7524  004C62  0100               	movlb	0	; () banked
  7525  004C64  6F95               	movwf	??_loadRTC& (0+255),b
  7526  004C66  0100               	movlb	0	; () banked
  7527  004C68  5195               	movf	??_loadRTC& (0+255),w,b
  7528  004C6A  0100               	movlb	0	; () banked
  7529  004C6C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7530  004C6E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7531  004C70  ECF0  F02D         	call	_I2C_Master_Write	;wreg free
  7532  004C74  0100               	movlb	0	; () banked
  7533  004C76  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7534  004C78  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7535  004C7A  D7DF               	goto	l7660
  7536  004C7C                     l7670:
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;RTC.c: 39: }
  7540                           ;RTC.c: 40: I2C_Master_Stop();
  7541  004C7C  ECFE  F02D         	call	_I2C_Master_Stop	;wreg free
  7542                           
  7543                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7544  004C80  8EF2               	bsf	intcon,7,c	;volatile
  7545  004C82  0012               	return		;funcret
  7546  004C84                     __end_of_loadRTC:
  7547                           	opt stack 0
  7548                           tblptru	equ	0xFF8
  7549                           tblptrh	equ	0xFF7
  7550                           tblptrl	equ	0xFF6
  7551                           tablat	equ	0xFF5
  7552                           prodh	equ	0xFF4
  7553                           prodl	equ	0xFF3
  7554                           intcon	equ	0xFF2
  7555                           intcon2	equ	0xFF1
  7556                           intcon3	equ	0xFF0
  7557                           postinc0	equ	0xFEE
  7558                           wreg	equ	0xFE8
  7559                           postdec1	equ	0xFE5
  7560                           fsr1l	equ	0xFE1
  7561                           indf2	equ	0xFDF
  7562                           postinc2	equ	0xFDE
  7563                           postdec2	equ	0xFDD
  7564                           fsr2h	equ	0xFDA
  7565                           fsr2l	equ	0xFD9
  7566                           status	equ	0xFD8
  7567                           
  7568 ;; *************** function _I2C_Master_Init *****************
  7569 ;; Defined at:
  7570 ;;		line 15 in file "I2C.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;  c               4   13[BANK0 ] const unsigned long 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;		None
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      void 
  7577 ;; Registers used:
  7578 ;;		wreg, status,2, status,0, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7586 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7587 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7588 ;;Total ram usage:        8 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    8
  7591 ;; This function calls:
  7592 ;;		___lldiv
  7593 ;; This function is called by:
  7594 ;;		_main
  7595 ;;		_loadRTC
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           	psect	text19
  7600  0051EA                     __ptext19:
  7601                           	opt stack 0
  7602  0051EA                     _I2C_Master_Init:
  7603                           	opt stack 20
  7604                           
  7605                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7606                           
  7607                           ;incstack = 0
  7608  0051EA  0E00               	movlw	0
  7609  0051EC  6EC7               	movwf	4039,c	;volatile
  7610                           
  7611                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7612  0051EE  0E28               	movlw	40
  7613  0051F0  6EC6               	movwf	4038,c	;volatile
  7614                           
  7615                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7616  0051F2  0E00               	movlw	0
  7617  0051F4  6EC5               	movwf	4037,c	;volatile
  7618                           
  7619                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7620  0051F6  0E00               	movlw	0
  7621  0051F8  0100               	movlb	0	; () banked
  7622  0051FA  6F80               	movwf	___lldiv@dividend& (0+255),b
  7623  0051FC  0E48               	movlw	72
  7624  0051FE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7625  005200  0EE8               	movlw	232
  7626  005202  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7627  005204  0E01               	movlw	1
  7628  005206  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7629  005208  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7630  00520C  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7631  005210  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7632  005214  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7633  005218  0E02               	movlw	2
  7634  00521A                     u6015:
  7635  00521A  90D8               	bcf	status,0,c
  7636  00521C  0100               	movlb	0	; () banked
  7637  00521E  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7638  005220  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7639  005222  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7640  005224  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7641  005226  2EE8               	decfsz	wreg,f,c
  7642  005228  D7F8               	goto	u6015
  7643  00522A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7644  00522E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7645  005232  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7646  005236  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7647  00523A  ECF8  F024         	call	___lldiv	;wreg free
  7648  00523E  0100               	movlb	0	; () banked
  7649  005240  0580               	decf	?___lldiv& (0+255),w,b
  7650  005242  6EC8               	movwf	4040,c	;volatile
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;I2C.c: 22: TRISC3 = 1;
  7654  005244  8694               	bsf	3988,3,c	;volatile
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;I2C.c: 23: TRISC4 = 1;
  7658  005246  8894               	bsf	3988,4,c	;volatile
  7659                           
  7660                           ; BSR set to: 0
  7661  005248  0012               	return		;funcret
  7662  00524A                     __end_of_I2C_Master_Init:
  7663                           	opt stack 0
  7664                           tblptru	equ	0xFF8
  7665                           tblptrh	equ	0xFF7
  7666                           tblptrl	equ	0xFF6
  7667                           tablat	equ	0xFF5
  7668                           prodh	equ	0xFF4
  7669                           prodl	equ	0xFF3
  7670                           intcon	equ	0xFF2
  7671                           intcon2	equ	0xFF1
  7672                           intcon3	equ	0xFF0
  7673                           postinc0	equ	0xFEE
  7674                           wreg	equ	0xFE8
  7675                           postdec1	equ	0xFE5
  7676                           fsr1l	equ	0xFE1
  7677                           indf2	equ	0xFDF
  7678                           postinc2	equ	0xFDE
  7679                           postdec2	equ	0xFDD
  7680                           fsr2h	equ	0xFDA
  7681                           fsr2l	equ	0xFD9
  7682                           status	equ	0xFD8
  7683                           
  7684 ;; *************** function ___lldiv *****************
  7685 ;; Defined at:
  7686 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  dividend        4    0[BANK0 ] unsigned long 
  7689 ;;  divisor         4    4[BANK0 ] unsigned long 
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;  quotient        4    8[BANK0 ] unsigned long 
  7692 ;;  counter         1   12[BANK0 ] unsigned char 
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  4    0[BANK0 ] unsigned long 
  7695 ;; Registers used:
  7696 ;;		wreg, status,2, status,0
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7702 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7703 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7705 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7706 ;;Total ram usage:       13 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    7
  7709 ;; This function calls:
  7710 ;;		Nothing
  7711 ;; This function is called by:
  7712 ;;		_I2C_Master_Init
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text20
  7717  0049F0                     __ptext20:
  7718                           	opt stack 0
  7719  0049F0                     ___lldiv:
  7720                           	opt stack 20
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;incstack = 0
  7724  0049F0  0E00               	movlw	0
  7725  0049F2  0100               	movlb	0	; () banked
  7726  0049F4  6F88               	movwf	___lldiv@quotient& (0+255),b
  7727  0049F6  0E00               	movlw	0
  7728  0049F8  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7729  0049FA  0E00               	movlw	0
  7730  0049FC  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7731  0049FE  0E00               	movlw	0
  7732  004A00  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7733                           
  7734                           ; BSR set to: 0
  7735  004A02  0100               	movlb	0	; () banked
  7736  004A04  5184               	movf	___lldiv@divisor& (0+255),w,b
  7737  004A06  0100               	movlb	0	; () banked
  7738  004A08  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7739  004A0A  0100               	movlb	0	; () banked
  7740  004A0C  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7741  004A0E  0100               	movlb	0	; () banked
  7742  004A10  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7743  004A12  B4D8               	btfsc	status,2,c
  7744  004A14  D042               	goto	l1926
  7745                           
  7746                           ; BSR set to: 0
  7747  004A16  0E01               	movlw	1
  7748  004A18  0100               	movlb	0	; () banked
  7749  004A1A  6F8C               	movwf	___lldiv@counter& (0+255),b
  7750  004A1C  D008               	goto	l6984
  7751  004A1E                     l6982:
  7752                           
  7753                           ; BSR set to: 0
  7754  004A1E  0100               	movlb	0	; () banked
  7755  004A20  90D8               	bcf	status,0,c
  7756  004A22  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7757  004A24  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7758  004A26  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7759  004A28  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7760  004A2A  0100               	movlb	0	; () banked
  7761  004A2C  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7762  004A2E                     l6984:
  7763                           
  7764                           ; BSR set to: 0
  7765  004A2E  0100               	movlb	0	; () banked
  7766  004A30  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7767  004A32  D7F5               	goto	l6982
  7768  004A34                     l6986:
  7769                           
  7770                           ; BSR set to: 0
  7771  004A34  0100               	movlb	0	; () banked
  7772  004A36  90D8               	bcf	status,0,c
  7773  004A38  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7774  004A3A  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7775  004A3C  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7776  004A3E  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7777                           
  7778                           ; BSR set to: 0
  7779  004A40  0100               	movlb	0	; () banked
  7780  004A42  5184               	movf	___lldiv@divisor& (0+255),w,b
  7781  004A44  0100               	movlb	0	; () banked
  7782  004A46  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7783  004A48  0100               	movlb	0	; () banked
  7784  004A4A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7785  004A4C  0100               	movlb	0	; () banked
  7786  004A4E  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7787  004A50  0100               	movlb	0	; () banked
  7788  004A52  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7789  004A54  0100               	movlb	0	; () banked
  7790  004A56  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7791  004A58  0100               	movlb	0	; () banked
  7792  004A5A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7793  004A5C  0100               	movlb	0	; () banked
  7794  004A5E  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7795  004A60  A0D8               	btfss	status,0,c
  7796  004A62  D012               	goto	l6994
  7797                           
  7798                           ; BSR set to: 0
  7799  004A64  0100               	movlb	0	; () banked
  7800  004A66  5184               	movf	___lldiv@divisor& (0+255),w,b
  7801  004A68  0100               	movlb	0	; () banked
  7802  004A6A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7803  004A6C  0100               	movlb	0	; () banked
  7804  004A6E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7805  004A70  0100               	movlb	0	; () banked
  7806  004A72  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7807  004A74  0100               	movlb	0	; () banked
  7808  004A76  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7809  004A78  0100               	movlb	0	; () banked
  7810  004A7A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7811  004A7C  0100               	movlb	0	; () banked
  7812  004A7E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7813  004A80  0100               	movlb	0	; () banked
  7814  004A82  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7815                           
  7816                           ; BSR set to: 0
  7817  004A84  0100               	movlb	0	; () banked
  7818  004A86  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7819  004A88                     l6994:
  7820                           
  7821                           ; BSR set to: 0
  7822  004A88  0100               	movlb	0	; () banked
  7823  004A8A  90D8               	bcf	status,0,c
  7824  004A8C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7825  004A8E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7826  004A90  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7827  004A92  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7828                           
  7829                           ; BSR set to: 0
  7830  004A94  0100               	movlb	0	; () banked
  7831  004A96  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7832  004A98  D7CD               	goto	l6986
  7833  004A9A                     l1926:
  7834                           
  7835                           ; BSR set to: 0
  7836  004A9A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7837  004A9E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7838  004AA2  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7839  004AA6  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7840                           
  7841                           ; BSR set to: 0
  7842  004AAA  0012               	return		;funcret
  7843  004AAC                     __end_of___lldiv:
  7844                           	opt stack 0
  7845                           tblptru	equ	0xFF8
  7846                           tblptrh	equ	0xFF7
  7847                           tblptrl	equ	0xFF6
  7848                           tablat	equ	0xFF5
  7849                           prodh	equ	0xFF4
  7850                           prodl	equ	0xFF3
  7851                           intcon	equ	0xFF2
  7852                           intcon2	equ	0xFF1
  7853                           intcon3	equ	0xFF0
  7854                           postinc0	equ	0xFEE
  7855                           wreg	equ	0xFE8
  7856                           postdec1	equ	0xFE5
  7857                           fsr1l	equ	0xFE1
  7858                           indf2	equ	0xFDF
  7859                           postinc2	equ	0xFDE
  7860                           postdec2	equ	0xFDD
  7861                           fsr2h	equ	0xFDA
  7862                           fsr2l	equ	0xFD9
  7863                           status	equ	0xFD8
  7864                           
  7865 ;; *************** function _change_state_to_menu_start *****************
  7866 ;; Defined at:
  7867 ;;		line 477 in file "UI.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;		None
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;		None
  7872 ;; Return value:  Size  Location     Type
  7873 ;;                  1    wreg      void 
  7874 ;; Registers used:
  7875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7885 ;;Total ram usage:        0 bytes
  7886 ;; Hardware stack levels used:    1
  7887 ;; Hardware stack levels required when called:   11
  7888 ;; This function calls:
  7889 ;;		_lcdInst
  7890 ;;		_printRTC
  7891 ;;		_printf
  7892 ;; This function is called by:
  7893 ;;		_initUI
  7894 ;; This function uses a non-reentrant model
  7895 ;;
  7896                           
  7897                           	psect	text21
  7898  005962                     __ptext21:
  7899                           	opt stack 0
  7900  005962                     _change_state_to_menu_start:
  7901                           	opt stack 18
  7902                           
  7903                           ;UI.c: 478: cur_state = 0;
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;incstack = 0
  7907  005962  0E00               	movlw	0
  7908  005964  0100               	movlb	0	; () banked
  7909  005966  6FE7               	movwf	(_cur_state+1)& (0+255),b
  7910  005968  0E00               	movlw	0
  7911  00596A  6FE6               	movwf	_cur_state& (0+255),b
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;UI.c: 480: lcdInst(0b10000000);;
  7915  00596C  0E80               	movlw	128
  7916  00596E  ECDC  F02D         	call	_lcdInst
  7917                           
  7918                           ;UI.c: 481: printRTC();
  7919  005972  ECCD  F017         	call	_printRTC	;wreg free
  7920                           
  7921                           ;UI.c: 482: lcdInst(0b11000000);;
  7922  005976  0EC0               	movlw	192
  7923  005978  ECDC  F02D         	call	_lcdInst
  7924                           
  7925                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7926  00597C  0EEA               	movlw	low STR_30
  7927  00597E  0100               	movlb	0	; () banked
  7928  005980  6F8E               	movwf	printf@f& (0+255),b
  7929  005982  0EFD               	movlw	high STR_30
  7930  005984  0100               	movlb	0	; () banked
  7931  005986  6F8F               	movwf	(printf@f+1)& (0+255),b
  7932  005988  EC8D  F00D         	call	_printf	;wreg free
  7933  00598C  0012               	return		;funcret
  7934  00598E                     __end_of_change_state_to_menu_start:
  7935                           	opt stack 0
  7936                           tblptru	equ	0xFF8
  7937                           tblptrh	equ	0xFF7
  7938                           tblptrl	equ	0xFF6
  7939                           tablat	equ	0xFF5
  7940                           prodh	equ	0xFF4
  7941                           prodl	equ	0xFF3
  7942                           intcon	equ	0xFF2
  7943                           intcon2	equ	0xFF1
  7944                           intcon3	equ	0xFF0
  7945                           postinc0	equ	0xFEE
  7946                           wreg	equ	0xFE8
  7947                           postdec1	equ	0xFE5
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           postinc2	equ	0xFDE
  7951                           postdec2	equ	0xFDD
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function _initTime *****************
  7957 ;; Defined at:
  7958 ;;		line 17 in file "RTC.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  s               1    wreg     unsigned char 
  7961 ;;  m               1    0[BANK0 ] unsigned char 
  7962 ;;  h               1    1[BANK0 ] unsigned char 
  7963 ;;  w               1    2[BANK0 ] unsigned char 
  7964 ;;  DD              1    3[BANK0 ] unsigned char 
  7965 ;;  MM              1    4[BANK0 ] unsigned char 
  7966 ;;  YY              1    5[BANK0 ] unsigned char 
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;  s               1    6[BANK0 ] unsigned char 
  7969 ;; Return value:  Size  Location     Type
  7970 ;;                  1    wreg      void 
  7971 ;; Registers used:
  7972 ;;		wreg
  7973 ;; Tracked objects:
  7974 ;;		On entry : 0/0
  7975 ;;		On exit  : 0/0
  7976 ;;		Unchanged: 0/0
  7977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7978 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7981 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7982 ;;Total ram usage:        7 bytes
  7983 ;; Hardware stack levels used:    1
  7984 ;; Hardware stack levels required when called:    7
  7985 ;; This function calls:
  7986 ;;		Nothing
  7987 ;; This function is called by:
  7988 ;;		_main
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           	psect	text22
  7993  005AC6                     __ptext22:
  7994                           	opt stack 0
  7995  005AC6                     _initTime:
  7996                           	opt stack 23
  7997                           
  7998                           ;incstack = 0
  7999                           ;initTime@s stored from wreg
  8000  005AC6  0100               	movlb	0	; () banked
  8001  005AC8  6F86               	movwf	initTime@s& (0+255),b
  8002                           
  8003                           ;RTC.c: 19: time[0] = s;
  8004  005ACA  C086  F11C         	movff	initTime@s,_time
  8005                           
  8006                           ;RTC.c: 20: time[1] = m;
  8007  005ACE  C080  F11D         	movff	initTime@m,_time+1
  8008                           
  8009                           ;RTC.c: 21: time[2] = h;
  8010  005AD2  C081  F11E         	movff	initTime@h,_time+2
  8011                           
  8012                           ;RTC.c: 22: time[3] = w;
  8013  005AD6  C082  F11F         	movff	initTime@w,_time+3
  8014                           
  8015                           ;RTC.c: 23: time[4] = DD;
  8016  005ADA  C083  F120         	movff	initTime@DD,_time+4
  8017                           
  8018                           ;RTC.c: 24: time[5] = MM;
  8019  005ADE  C084  F121         	movff	initTime@MM,_time+5
  8020                           
  8021                           ;RTC.c: 25: time[6] = YY;
  8022  005AE2  C085  F122         	movff	initTime@YY,_time+6
  8023  005AE6  0012               	return		;funcret
  8024  005AE8                     __end_of_initTime:
  8025                           	opt stack 0
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           intcon	equ	0xFF2
  8033                           intcon2	equ	0xFF1
  8034                           intcon3	equ	0xFF0
  8035                           postinc0	equ	0xFEE
  8036                           wreg	equ	0xFE8
  8037                           postdec1	equ	0xFE5
  8038                           fsr1l	equ	0xFE1
  8039                           indf2	equ	0xFDF
  8040                           postinc2	equ	0xFDE
  8041                           postdec2	equ	0xFDD
  8042                           fsr2h	equ	0xFDA
  8043                           fsr2l	equ	0xFD9
  8044                           status	equ	0xFD8
  8045                           
  8046 ;; *************** function _initLCD *****************
  8047 ;; Defined at:
  8048 ;;		line 50 in file "lcd.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;		None
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;		None
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      void 
  8055 ;; Registers used:
  8056 ;;		wreg, status,2, status,0, cstack
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;Total ram usage:        1 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    9
  8069 ;; This function calls:
  8070 ;;		_lcdInst
  8071 ;; This function is called by:
  8072 ;;		_main
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	text23
  8077  0054E0                     __ptext23:
  8078                           	opt stack 0
  8079  0054E0                     _initLCD:
  8080                           	opt stack 21
  8081                           
  8082                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8083                           
  8084                           ;incstack = 0
  8085  0054E0  0E9C               	movlw	156
  8086  0054E2  0100               	movlb	0	; () banked
  8087  0054E4  6F83               	movwf	??_initLCD& (0+255),b
  8088  0054E6  0ED7               	movlw	215
  8089  0054E8                     u10307:
  8090  0054E8  2EE8               	decfsz	wreg,f,c
  8091  0054EA  D7FE               	bra	u10307
  8092  0054EC  2F83               	decfsz	??_initLCD& (0+255),f,b
  8093  0054EE  D7FC               	bra	u10307
  8094                           
  8095                           ;lcd.c: 52: lcdInst(0b00110011);
  8096  0054F0  0E33               	movlw	51
  8097  0054F2  ECDC  F02D         	call	_lcdInst
  8098                           
  8099                           ;lcd.c: 53: lcdInst(0b00110010);
  8100  0054F6  0E32               	movlw	50
  8101  0054F8  ECDC  F02D         	call	_lcdInst
  8102                           
  8103                           ;lcd.c: 55: lcdInst(0b00101000);
  8104  0054FC  0E28               	movlw	40
  8105  0054FE  ECDC  F02D         	call	_lcdInst
  8106                           
  8107                           ;lcd.c: 56: lcdInst(0b00001100);
  8108  005502  0E0C               	movlw	12
  8109  005504  ECDC  F02D         	call	_lcdInst
  8110                           
  8111                           ;lcd.c: 57: lcdInst(0b00000110);
  8112  005508  0E06               	movlw	6
  8113  00550A  ECDC  F02D         	call	_lcdInst
  8114                           
  8115                           ;lcd.c: 58: lcdInst(0b00000001);
  8116  00550E  0E01               	movlw	1
  8117  005510  ECDC  F02D         	call	_lcdInst
  8118                           
  8119                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8120  005514  0E9C               	movlw	156
  8121  005516  0100               	movlb	0	; () banked
  8122  005518  6F83               	movwf	??_initLCD& (0+255),b
  8123  00551A  0ED7               	movlw	215
  8124  00551C                     u10317:
  8125  00551C  2EE8               	decfsz	wreg,f,c
  8126  00551E  D7FE               	bra	u10317
  8127  005520  2F83               	decfsz	??_initLCD& (0+255),f,b
  8128  005522  D7FC               	bra	u10317
  8129  005524  0012               	return		;funcret
  8130  005526                     __end_of_initLCD:
  8131                           	opt stack 0
  8132                           tblptru	equ	0xFF8
  8133                           tblptrh	equ	0xFF7
  8134                           tblptrl	equ	0xFF6
  8135                           tablat	equ	0xFF5
  8136                           prodh	equ	0xFF4
  8137                           prodl	equ	0xFF3
  8138                           intcon	equ	0xFF2
  8139                           intcon2	equ	0xFF1
  8140                           intcon3	equ	0xFF0
  8141                           postinc0	equ	0xFEE
  8142                           wreg	equ	0xFE8
  8143                           postdec1	equ	0xFE5
  8144                           fsr1l	equ	0xFE1
  8145                           indf2	equ	0xFDF
  8146                           postinc2	equ	0xFDE
  8147                           postdec2	equ	0xFDD
  8148                           fsr2h	equ	0xFDA
  8149                           fsr2l	equ	0xFD9
  8150                           status	equ	0xFD8
  8151                           
  8152 ;; *************** function _initEEPROM *****************
  8153 ;; Defined at:
  8154 ;;		line 32 in file "EEPROM.c"
  8155 ;; Parameters:    Size  Location     Type
  8156 ;;		None
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;		None
  8159 ;; Return value:  Size  Location     Type
  8160 ;;                  1    wreg      void 
  8161 ;; Registers used:
  8162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8163 ;; Tracked objects:
  8164 ;;		On entry : 0/0
  8165 ;;		On exit  : 0/0
  8166 ;;		Unchanged: 0/0
  8167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;Total ram usage:        0 bytes
  8173 ;; Hardware stack levels used:    1
  8174 ;; Hardware stack levels required when called:   11
  8175 ;; This function calls:
  8176 ;;		_EEPROM_write
  8177 ;; This function is called by:
  8178 ;;		_main
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           	psect	text24
  8183  005B56                     __ptext24:
  8184                           	opt stack 0
  8185  005B56                     _initEEPROM:
  8186                           	opt stack 19
  8187                           
  8188                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8189                           
  8190                           ;incstack = 0
  8191  005B56  0E00               	movlw	0
  8192  005B58  0100               	movlb	0	; () banked
  8193  005B5A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8194  005B5C  0E00               	movlw	0
  8195  005B5E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8196  005B60  0E01               	movlw	1
  8197  005B62  0100               	movlb	0	; () banked
  8198  005B64  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8199  005B66  EC1C  F022         	call	_EEPROM_write	;wreg free
  8200  005B6A  0012               	return		;funcret
  8201  005B6C                     __end_of_initEEPROM:
  8202                           	opt stack 0
  8203                           tblptru	equ	0xFF8
  8204                           tblptrh	equ	0xFF7
  8205                           tblptrl	equ	0xFF6
  8206                           tablat	equ	0xFF5
  8207                           prodh	equ	0xFF4
  8208                           prodl	equ	0xFF3
  8209                           intcon	equ	0xFF2
  8210                           intcon2	equ	0xFF1
  8211                           intcon3	equ	0xFF0
  8212                           postinc0	equ	0xFEE
  8213                           wreg	equ	0xFE8
  8214                           postdec1	equ	0xFE5
  8215                           fsr1l	equ	0xFE1
  8216                           indf2	equ	0xFDF
  8217                           postinc2	equ	0xFDE
  8218                           postdec2	equ	0xFDD
  8219                           fsr2h	equ	0xFDA
  8220                           fsr2l	equ	0xFD9
  8221                           status	equ	0xFD8
  8222                           
  8223 ;; *************** function _EEPROM_write *****************
  8224 ;; Defined at:
  8225 ;;		line 36 in file "EEPROM.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  address         2   43[BANK0 ] unsigned short 
  8228 ;;  data            1   45[BANK0 ] unsigned char 
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;  i               1   48[BANK0 ] unsigned char 
  8231 ;;  i               1   47[BANK0 ] unsigned char 
  8232 ;; Return value:  Size  Location     Type
  8233 ;;                  1    wreg      void 
  8234 ;; Registers used:
  8235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8241 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;Total ram usage:        6 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; Hardware stack levels required when called:   10
  8248 ;; This function calls:
  8249 ;;		_EEPROM_read
  8250 ;;		_lcdInst
  8251 ;;		_printf
  8252 ;; This function is called by:
  8253 ;;		_Loading
  8254 ;;		_initEEPROM
  8255 ;;		_logRun
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           	psect	text25
  8260  004438                     __ptext25:
  8261                           	opt stack 0
  8262  004438                     _EEPROM_write:
  8263                           	opt stack 18
  8264                           
  8265                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8266                           
  8267                           ;incstack = 0
  8268  004438  84A6               	bsf	4006,2,c	;volatile
  8269                           
  8270                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8271  00443A  0100               	movlb	0	; () banked
  8272  00443C  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8273  00443E  6EAA               	movwf	4010,c	;volatile
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8277  004440  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;EEPROM.c: 43: EEDATA = data;
  8281  004444  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8285  004448  9EA6               	bcf	4006,7,c	;volatile
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8289  00444A  9CA6               	bcf	4006,6,c	;volatile
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8293  00444C  9EF2               	bcf	intcon,7,c	;volatile
  8294                           
  8295                           ;EEPROM.c: 49: EECON2 = 0x55;
  8296  00444E  0E55               	movlw	85
  8297  004450  6EA7               	movwf	4007,c	;volatile
  8298                           
  8299                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8300  004452  0EAA               	movlw	170
  8301  004454  6EA7               	movwf	4007,c	;volatile
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8305  004456  82A6               	bsf	4006,1,c	;volatile
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8309  004458  8EF2               	bsf	intcon,7,c	;volatile
  8310  00445A                     l1133:
  8311  00445A  A8A1               	btfss	4001,4,c	;volatile
  8312  00445C  D7FE               	goto	l1133
  8313                           
  8314                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8315  00445E  98A1               	bcf	4001,4,c	;volatile
  8316                           
  8317                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8318  004460  94A6               	bcf	4006,2,c	;volatile
  8319                           
  8320                           ;EEPROM.c: 61: if(debug){
  8321  004462  0100               	movlb	0	; () banked
  8322  004464  51E8               	movf	_debug& (0+255),w,b
  8323  004466  0100               	movlb	0	; () banked
  8324  004468  11E9               	iorwf	(_debug+1)& (0+255),w,b
  8325  00446A  B4D8               	btfsc	status,2,c
  8326  00446C  0012               	return	
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8330  00446E  0E01               	movlw	1
  8331  004470  ECDC  F02D         	call	_lcdInst
  8332  004474  0E68               	movlw	104
  8333  004476  0100               	movlb	0	; () banked
  8334  004478  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8335  00447A  0EE4               	movlw	228
  8336  00447C                     u10327:
  8337  00447C  2EE8               	decfsz	wreg,f,c
  8338  00447E  D7FE               	bra	u10327
  8339  004480  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8340  004482  D7FC               	bra	u10327
  8341  004484  F000               	nop	
  8342                           
  8343                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8344  004486  0E80               	movlw	128
  8345  004488  ECDC  F02D         	call	_lcdInst
  8346                           
  8347                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8348  00448C  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8349  004490  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8350  004494  EC9F  F02D         	call	_EEPROM_read	;wreg free
  8351  004498  0100               	movlb	0	; () banked
  8352  00449A  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8353  00449C  A4D8               	btfss	status,2,c
  8354  00449E  D024               	goto	l7432
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8358  0044A0  0EBE               	movlw	low STR_67
  8359  0044A2  0100               	movlb	0	; () banked
  8360  0044A4  6F8E               	movwf	printf@f& (0+255),b
  8361  0044A6  0EFA               	movlw	high STR_67
  8362  0044A8  0100               	movlb	0	; () banked
  8363  0044AA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8364  0044AC  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8365  0044B0  0100               	movlb	0	; () banked
  8366  0044B2  6B91               	clrf	(?_printf+3)& (0+255),b
  8367  0044B4  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8368  0044B8  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8369  0044BC  EC8D  F00D         	call	_printf	;wreg free
  8370                           
  8371                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8372  0044C0  0E00               	movlw	0
  8373  0044C2  0100               	movlb	0	; () banked
  8374  0044C4  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8375  0044C6                     l7424:
  8376                           
  8377                           ; BSR set to: 0
  8378  0044C6  0E63               	movlw	99
  8379  0044C8  0100               	movlb	0	; () banked
  8380  0044CA  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8381  0044CC  D001               	goto	l7428
  8382  0044CE  0012               	return	
  8383  0044D0                     l7428:
  8384                           
  8385                           ; BSR set to: 0
  8386  0044D0  0E68               	movlw	104
  8387  0044D2  0100               	movlb	0	; () banked
  8388  0044D4  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8389  0044D6  0EE4               	movlw	228
  8390  0044D8                     u10337:
  8391  0044D8  2EE8               	decfsz	wreg,f,c
  8392  0044DA  D7FE               	bra	u10337
  8393  0044DC  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8394  0044DE  D7FC               	bra	u10337
  8395  0044E0  F000               	nop	
  8396  0044E2  0100               	movlb	0	; () banked
  8397  0044E4  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8398  0044E6  D7EF               	goto	l7424
  8399  0044E8                     l7432:
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8403  0044E8  0EBC               	movlw	low STR_68
  8404  0044EA  0100               	movlb	0	; () banked
  8405  0044EC  6F8E               	movwf	printf@f& (0+255),b
  8406  0044EE  0EFF               	movlw	high STR_68
  8407  0044F0  0100               	movlb	0	; () banked
  8408  0044F2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8409  0044F4  EC8D  F00D         	call	_printf	;wreg free
  8410  0044F8  0E00               	movlw	0
  8411  0044FA  0100               	movlb	0	; () banked
  8412  0044FC  6FB0               	movwf	EEPROM_write@i_1408& (0+255),b
  8413  0044FE                     l7436:
  8414                           
  8415                           ; BSR set to: 0
  8416  0044FE  0E63               	movlw	99
  8417  004500  0100               	movlb	0	; () banked
  8418  004502  65B0               	cpfsgt	EEPROM_write@i_1408& (0+255),b
  8419  004504  D001               	goto	l7440
  8420  004506  0012               	return	
  8421  004508                     l7440:
  8422                           
  8423                           ; BSR set to: 0
  8424  004508  0E68               	movlw	104
  8425  00450A  0100               	movlb	0	; () banked
  8426  00450C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8427  00450E  0EE4               	movlw	228
  8428  004510                     u10347:
  8429  004510  2EE8               	decfsz	wreg,f,c
  8430  004512  D7FE               	bra	u10347
  8431  004514  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8432  004516  D7FC               	bra	u10347
  8433  004518  F000               	nop	
  8434  00451A  0100               	movlb	0	; () banked
  8435  00451C  2BB0               	incf	EEPROM_write@i_1408& (0+255),f,b
  8436  00451E  D7EF               	goto	l7436
  8437  004520                     __end_of_EEPROM_write:
  8438                           	opt stack 0
  8439                           tblptru	equ	0xFF8
  8440                           tblptrh	equ	0xFF7
  8441                           tblptrl	equ	0xFF6
  8442                           tablat	equ	0xFF5
  8443                           prodh	equ	0xFF4
  8444                           prodl	equ	0xFF3
  8445                           intcon	equ	0xFF2
  8446                           intcon2	equ	0xFF1
  8447                           intcon3	equ	0xFF0
  8448                           postinc0	equ	0xFEE
  8449                           wreg	equ	0xFE8
  8450                           postdec1	equ	0xFE5
  8451                           fsr1l	equ	0xFE1
  8452                           indf2	equ	0xFDF
  8453                           postinc2	equ	0xFDE
  8454                           postdec2	equ	0xFDD
  8455                           fsr2h	equ	0xFDA
  8456                           fsr2l	equ	0xFD9
  8457                           status	equ	0xFD8
  8458                           
  8459 ;; *************** function _EEPROM_read *****************
  8460 ;; Defined at:
  8461 ;;		line 72 in file "EEPROM.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;  address         2    0[BANK0 ] unsigned short 
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;		None
  8466 ;; Return value:  Size  Location     Type
  8467 ;;                  1    wreg      unsigned char 
  8468 ;; Registers used:
  8469 ;;		wreg, status,2
  8470 ;; Tracked objects:
  8471 ;;		On entry : 0/0
  8472 ;;		On exit  : 0/0
  8473 ;;		Unchanged: 0/0
  8474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8475 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;Total ram usage:        2 bytes
  8480 ;; Hardware stack levels used:    1
  8481 ;; Hardware stack levels required when called:    7
  8482 ;; This function calls:
  8483 ;;		Nothing
  8484 ;; This function is called by:
  8485 ;;		_Loading
  8486 ;;		_EEPROM_write
  8487 ;;		_logRun
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           	psect	text26
  8492  005B3E                     __ptext26:
  8493                           	opt stack 0
  8494  005B3E                     _EEPROM_read:
  8495                           	opt stack 20
  8496                           
  8497                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;incstack = 0
  8501  005B3E  0100               	movlb	0	; () banked
  8502  005B40  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8503  005B42  6EAA               	movwf	4010,c	;volatile
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8507  005B44  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8511  005B48  9EA6               	bcf	4006,7,c	;volatile
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8515  005B4A  9CA6               	bcf	4006,6,c	;volatile
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8519  005B4C  80A6               	bsf	4006,0,c	;volatile
  8520  005B4E                     l1146:
  8521  005B4E  B0A6               	btfsc	4006,0,c	;volatile
  8522  005B50  D7FE               	goto	l1146
  8523                           
  8524                           ;EEPROM.c: 85: return EEDATA;
  8525  005B52  50A8               	movf	4008,w,c	;volatile
  8526  005B54  0012               	return	
  8527  005B56                     __end_of_EEPROM_read:
  8528                           	opt stack 0
  8529                           tblptru	equ	0xFF8
  8530                           tblptrh	equ	0xFF7
  8531                           tblptrl	equ	0xFF6
  8532                           tablat	equ	0xFF5
  8533                           prodh	equ	0xFF4
  8534                           prodl	equ	0xFF3
  8535                           intcon	equ	0xFF2
  8536                           intcon2	equ	0xFF1
  8537                           intcon3	equ	0xFF0
  8538                           postinc0	equ	0xFEE
  8539                           wreg	equ	0xFE8
  8540                           postdec1	equ	0xFE5
  8541                           fsr1l	equ	0xFE1
  8542                           indf2	equ	0xFDF
  8543                           postinc2	equ	0xFDE
  8544                           postdec2	equ	0xFDD
  8545                           fsr2h	equ	0xFDA
  8546                           fsr2l	equ	0xFD9
  8547                           status	equ	0xFD8
  8548                           
  8549 ;; *************** function _UI *****************
  8550 ;; Defined at:
  8551 ;;		line 76 in file "UI.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;		None
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;  i               1   73[BANK0 ] unsigned char 
  8556 ;;  i               1   85[BANK0 ] unsigned char 
  8557 ;;  i               1   84[BANK0 ] unsigned char 
  8558 ;;  i               1   83[BANK0 ] unsigned char 
  8559 ;;  i               1   82[BANK0 ] unsigned char 
  8560 ;;  i               1   81[BANK0 ] unsigned char 
  8561 ;;  i               1   80[BANK0 ] unsigned char 
  8562 ;;  i               1   79[BANK0 ] unsigned char 
  8563 ;;  i               1   78[BANK0 ] unsigned char 
  8564 ;;  i               1   77[BANK0 ] unsigned char 
  8565 ;;  i               1   76[BANK0 ] unsigned char 
  8566 ;;  i               1   75[BANK0 ] unsigned char 
  8567 ;;  i               1   74[BANK0 ] unsigned char 
  8568 ;;  month           4   86[BANK0 ] unsigned char [4]
  8569 ;;  i               1   72[BANK0 ] unsigned char 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      void 
  8572 ;; Registers used:
  8573 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8583 ;;Total ram usage:       22 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; Hardware stack levels required when called:   11
  8586 ;; This function calls:
  8587 ;;		___awdiv
  8588 ;;		___awmod
  8589 ;;		_change_state_to_menu_12
  8590 ;;		_change_state_to_menu_22
  8591 ;;		_lcdInst
  8592 ;;		_printRTC
  8593 ;;		_printf
  8594 ;;		_strcpy
  8595 ;; This function is called by:
  8596 ;;		_main
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           	psect	text27
  8601  000012                     __ptext27:
  8602                           	opt stack 0
  8603  000012                     _UI:
  8604                           	opt stack 19
  8605                           
  8606                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8607                           
  8608                           ;incstack = 0
  8609  000012  0E02               	movlw	2
  8610  000014  0100               	movlb	0	; () banked
  8611  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8612  000018  A4D8               	btfss	status,2,c
  8613  00001A  D086               	goto	l9372
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8617  00001C  0E01               	movlw	1
  8618  00001E  ECDC  F02D         	call	_lcdInst
  8619  000022  0E68               	movlw	104
  8620  000024  0100               	movlb	0	; () banked
  8621  000026  6FC4               	movwf	??_UI& (0+255),b
  8622  000028  0EE4               	movlw	228
  8623  00002A                     u10357:
  8624  00002A  2EE8               	decfsz	wreg,f,c
  8625  00002C  D7FE               	bra	u10357
  8626  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8627  000030  D7FC               	bra	u10357
  8628  000032  F000               	nop	
  8629                           
  8630                           ;UI.c: 79: lcdInst(0b10000000);;
  8631  000034  0E80               	movlw	128
  8632  000036  ECDC  F02D         	call	_lcdInst
  8633                           
  8634                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8635  00003A  0E52               	movlw	low STR_1
  8636  00003C  0100               	movlb	0	; () banked
  8637  00003E  6F8E               	movwf	printf@f& (0+255),b
  8638  000040  0EFB               	movlw	high STR_1
  8639  000042  0100               	movlb	0	; () banked
  8640  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8641  000046  0E01               	movlw	1
  8642  000048  0100               	movlb	0	; () banked
  8643  00004A  25FD               	addwf	_sel& (0+255),w,b
  8644  00004C  0100               	movlb	0	; () banked
  8645  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8646  000050  0100               	movlb	0	; () banked
  8647  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8648  000054  0E00               	movlw	0
  8649  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8650  000058  EC8D  F00D         	call	_printf	;wreg free
  8651                           
  8652                           ;UI.c: 81: lcdInst(0b11000000);;
  8653  00005C  0EC0               	movlw	192
  8654  00005E  ECDC  F02D         	call	_lcdInst
  8655                           
  8656                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8657  000062  0E0E               	movlw	14
  8658  000064  0100               	movlb	0	; () banked
  8659  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8660  000068  0E10               	movlw	16
  8661  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8662  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8663  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8664  000074  ECAB  F025         	call	___awmod	;wreg free
  8665  000078  C080  F0C6         	movff	?___awmod,_UI$2434
  8666  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2434+1
  8667                           
  8668                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8669  000080  0E49               	movlw	low STR_2
  8670  000082  0100               	movlb	0	; () banked
  8671  000084  6F8E               	movwf	printf@f& (0+255),b
  8672  000086  0EFF               	movlw	high STR_2
  8673  000088  0100               	movlb	0	; () banked
  8674  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8675  00008C  0E0E               	movlw	14
  8676  00008E  0100               	movlb	0	; () banked
  8677  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8678  000092  0E10               	movlw	16
  8679  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8680  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8681  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8682  00009E  ECAB  F025         	call	___awmod	;wreg free
  8683  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8684  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8685  0000AA  0E00               	movlw	0
  8686  0000AC  0100               	movlb	0	; () banked
  8687  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8688  0000B0  0E3C               	movlw	60
  8689  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8690  0000B4  EC99  F024         	call	___awdiv	;wreg free
  8691  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8692  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8693  0000C0  C0C6  F080         	movff	_UI$2434,___awmod@dividend
  8694  0000C4  C0C7  F081         	movff	_UI$2434+1,___awmod@dividend+1
  8695  0000C8  0E00               	movlw	0
  8696  0000CA  0100               	movlb	0	; () banked
  8697  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8698  0000CE  0E3C               	movlw	60
  8699  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8700  0000D2  ECAB  F025         	call	___awmod	;wreg free
  8701  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8702  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8703  0000DE  EC8D  F00D         	call	_printf	;wreg free
  8704  0000E2                     l185:
  8705  0000E2  B281               	btfsc	3969,1,c	;volatile
  8706  0000E4  D7FE               	goto	l185
  8707  0000E6                     l188:
  8708  0000E6  A281               	btfss	3969,1,c	;volatile
  8709  0000E8  D7FE               	goto	l188
  8710                           
  8711                           ;UI.c: 86: }
  8712                           ;UI.c: 87: if(cur_state == 12){
  8713  0000EA  0E0C               	movlw	12
  8714  0000EC  0100               	movlb	0	; () banked
  8715  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8716  0000F0  0100               	movlb	0	; () banked
  8717  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8718  0000F4  A4D8               	btfss	status,2,c
  8719  0000F6  D003               	goto	l9366
  8720                           
  8721                           ; BSR set to: 0
  8722                           ;UI.c: 88: change_state_to_menu_12();
  8723  0000F8  EC0F  F02B         	call	_change_state_to_menu_12	;wreg free
  8724                           
  8725                           ;UI.c: 89: }
  8726  0000FC  D002               	goto	l193
  8727  0000FE                     l9366:
  8728                           
  8729                           ;UI.c: 90: else{
  8730                           ;UI.c: 91: change_state_to_menu_22();
  8731  0000FE  ECF3  F02A         	call	_change_state_to_menu_22	;wreg free
  8732  000102                     l193:
  8733  000102  B281               	btfsc	3969,1,c	;volatile
  8734  000104  D7FE               	goto	l193
  8735                           
  8736                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8737  000106  0E05               	movlw	5
  8738  000108  0100               	movlb	0	; () banked
  8739  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8740  00010C  0E0F               	movlw	15
  8741  00010E  0100               	movlb	0	; () banked
  8742  000110  6FC4               	movwf	??_UI& (0+255),b
  8743  000112  0EF1               	movlw	241
  8744  000114                     u10367:
  8745  000114  2EE8               	decfsz	wreg,f,c
  8746  000116  D7FE               	bra	u10367
  8747  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8748  00011A  D7FC               	bra	u10367
  8749  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8750  00011E  D7FA               	bra	u10367
  8751                           
  8752                           ;UI.c: 95: machine_state = UI_state;
  8753  000120  0E00               	movlw	0
  8754  000122  0100               	movlb	0	; () banked
  8755  000124  6FFC               	movwf	_machine_state& (0+255),b
  8756                           
  8757                           ;UI.c: 96: }
  8758  000126  D3D2               	goto	l9692
  8759  000128                     l9372:
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;UI.c: 97: else if(cur_state == 0){
  8763  000128  0100               	movlb	0	; () banked
  8764  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8765  00012C  0100               	movlb	0	; () banked
  8766  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8767  000130  A4D8               	btfss	status,2,c
  8768  000132  D3CC               	goto	l9692
  8769                           
  8770                           ; BSR set to: 0
  8771                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8772  000134  0E00               	movlw	0
  8773  000136  0100               	movlb	0	; () banked
  8774  000138  6FC8               	movwf	UI@i& (0+255),b
  8775  00013A                     l9376:
  8776                           
  8777                           ; BSR set to: 0
  8778  00013A  0E63               	movlw	99
  8779  00013C  0100               	movlb	0	; () banked
  8780  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8781  000140  D001               	goto	l9380
  8782  000142  D00C               	goto	l9384
  8783  000144                     l9380:
  8784                           
  8785                           ; BSR set to: 0
  8786  000144  0E68               	movlw	104
  8787  000146  0100               	movlb	0	; () banked
  8788  000148  6FC4               	movwf	??_UI& (0+255),b
  8789  00014A  0EE4               	movlw	228
  8790  00014C                     u10377:
  8791  00014C  2EE8               	decfsz	wreg,f,c
  8792  00014E  D7FE               	bra	u10377
  8793  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8794  000152  D7FC               	bra	u10377
  8795  000154  F000               	nop	
  8796  000156  0100               	movlb	0	; () banked
  8797  000158  2BC8               	incf	UI@i& (0+255),f,b
  8798  00015A  D7EF               	goto	l9376
  8799  00015C                     l9384:
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;UI.c: 99: if(cur_state == 0){
  8803  00015C  0100               	movlb	0	; () banked
  8804  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8805  000160  0100               	movlb	0	; () banked
  8806  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8807  000164  A4D8               	btfss	status,2,c
  8808  000166  D3B2               	goto	l9692
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;UI.c: 100: printRTC();
  8812  000168  ECCD  F017         	call	_printRTC	;wreg free
  8813                           
  8814                           ;UI.c: 101: }
  8815                           ;UI.c: 102: }
  8816                           ;UI.c: 103: while(logstate){
  8817  00016C  D3AF               	goto	l9692
  8818  00016E                     l9388:
  8819                           
  8820                           ;UI.c: 105: if(!log_completion){
  8821  00016E  0100               	movlb	0	; () banked
  8822  000170  51F2               	movf	_log_completion& (0+255),w,b
  8823  000172  0100               	movlb	0	; () banked
  8824  000174  11F3               	iorwf	(_log_completion+1)& (0+255),w,b
  8825  000176  A4D8               	btfss	status,2,c
  8826  000178  D041               	goto	l9418
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8830  00017A  0E01               	movlw	1
  8831  00017C  ECDC  F02D         	call	_lcdInst
  8832  000180  0E68               	movlw	104
  8833  000182  0100               	movlb	0	; () banked
  8834  000184  6FC4               	movwf	??_UI& (0+255),b
  8835  000186  0EE4               	movlw	228
  8836  000188                     u10387:
  8837  000188  2EE8               	decfsz	wreg,f,c
  8838  00018A  D7FE               	bra	u10387
  8839  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8840  00018E  D7FC               	bra	u10387
  8841  000190  F000               	nop	
  8842                           
  8843                           ;UI.c: 107: lcdInst(0b10000000);;
  8844  000192  0E80               	movlw	128
  8845  000194  ECDC  F02D         	call	_lcdInst
  8846                           
  8847                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8848  000198  0E40               	movlw	low STR_3
  8849  00019A  0100               	movlb	0	; () banked
  8850  00019C  6F8E               	movwf	printf@f& (0+255),b
  8851  00019E  0EFB               	movlw	high STR_3
  8852  0001A0  0100               	movlb	0	; () banked
  8853  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8854  0001A4  C0F0  F090         	movff	_log,?_printf+2
  8855  0001A8  C0F1  F091         	movff	_log+1,?_printf+3
  8856  0001AC  EC8D  F00D         	call	_printf	;wreg free
  8857                           
  8858                           ;UI.c: 109: lcdInst(0b11000000);;
  8859  0001B0  0EC0               	movlw	192
  8860  0001B2  ECDC  F02D         	call	_lcdInst
  8861                           
  8862                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8863  0001B6  0E5D               	movlw	low STR_4
  8864  0001B8  0100               	movlb	0	; () banked
  8865  0001BA  6F8E               	movwf	printf@f& (0+255),b
  8866  0001BC  0EFE               	movlw	high STR_4
  8867  0001BE  0100               	movlb	0	; () banked
  8868  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8869  0001C2  EC8D  F00D         	call	_printf	;wreg free
  8870  0001C6                     l9402:
  8871  0001C6  0E00               	movlw	0
  8872  0001C8  0100               	movlb	0	; () banked
  8873  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  8874  0001CC                     l9404:
  8875                           
  8876                           ; BSR set to: 0
  8877  0001CC  0E63               	movlw	99
  8878  0001CE  0100               	movlb	0	; () banked
  8879  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  8880  0001D2  D001               	goto	l9408
  8881  0001D4  D00C               	goto	l9412
  8882  0001D6                     l9408:
  8883                           
  8884                           ; BSR set to: 0
  8885  0001D6  0E68               	movlw	104
  8886  0001D8  0100               	movlb	0	; () banked
  8887  0001DA  6FC4               	movwf	??_UI& (0+255),b
  8888  0001DC  0EE4               	movlw	228
  8889  0001DE                     u10397:
  8890  0001DE  2EE8               	decfsz	wreg,f,c
  8891  0001E0  D7FE               	bra	u10397
  8892  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  8893  0001E4  D7FC               	bra	u10397
  8894  0001E6  F000               	nop	
  8895  0001E8  0100               	movlb	0	; () banked
  8896  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  8897  0001EC  D7EF               	goto	l9404
  8898  0001EE                     l9412:
  8899                           
  8900                           ; BSR set to: 0
  8901  0001EE  0100               	movlb	0	; () banked
  8902  0001F0  51F8               	movf	_logstate& (0+255),w,b
  8903  0001F2  0100               	movlb	0	; () banked
  8904  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8905  0001F6  B4D8               	btfsc	status,2,c
  8906  0001F8  0012               	return	
  8907  0001FA  D7E5               	goto	l9402
  8908  0001FC                     l9418:
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;UI.c: 114: else{
  8912                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8913  0001FC  0E01               	movlw	1
  8914  0001FE  ECDC  F02D         	call	_lcdInst
  8915  000202  0E68               	movlw	104
  8916  000204  0100               	movlb	0	; () banked
  8917  000206  6FC4               	movwf	??_UI& (0+255),b
  8918  000208  0EE4               	movlw	228
  8919  00020A                     u10407:
  8920  00020A  2EE8               	decfsz	wreg,f,c
  8921  00020C  D7FE               	bra	u10407
  8922  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  8923  000210  D7FC               	bra	u10407
  8924  000212  F000               	nop	
  8925                           
  8926                           ;UI.c: 116: lcdInst(0b10000000);;
  8927  000214  0E80               	movlw	128
  8928  000216  ECDC  F02D         	call	_lcdInst
  8929                           
  8930                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  8931  00021A  0E40               	movlw	low STR_3
  8932  00021C  0100               	movlb	0	; () banked
  8933  00021E  6F8E               	movwf	printf@f& (0+255),b
  8934  000220  0EFB               	movlw	high STR_3
  8935  000222  0100               	movlb	0	; () banked
  8936  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  8937  000226  C0F0  F090         	movff	_log,?_printf+2
  8938  00022A  C0F1  F091         	movff	_log+1,?_printf+3
  8939  00022E  EC8D  F00D         	call	_printf	;wreg free
  8940                           
  8941                           ;UI.c: 118: lcdInst(0b11000000);;
  8942  000232  0EC0               	movlw	192
  8943  000234  ECDC  F02D         	call	_lcdInst
  8944                           
  8945                           ;UI.c: 119: printf("PAUSE < | BACK >");
  8946  000238  0ED9               	movlw	low STR_6
  8947  00023A  0100               	movlb	0	; () banked
  8948  00023C  6F8E               	movwf	printf@f& (0+255),b
  8949  00023E  0EFD               	movlw	high STR_6
  8950  000240  0100               	movlb	0	; () banked
  8951  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  8952  000244  EC8D  F00D         	call	_printf	;wreg free
  8953                           
  8954                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8955  000248  0E00               	movlw	0
  8956  00024A  0100               	movlb	0	; () banked
  8957  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  8958  00024E                     l9432:
  8959                           
  8960                           ; BSR set to: 0
  8961  00024E  0E63               	movlw	99
  8962  000250  0100               	movlb	0	; () banked
  8963  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  8964  000254  D001               	goto	l9436
  8965  000256  D00C               	goto	l9440
  8966  000258                     l9436:
  8967                           
  8968                           ; BSR set to: 0
  8969  000258  0E68               	movlw	104
  8970  00025A  0100               	movlb	0	; () banked
  8971  00025C  6FC4               	movwf	??_UI& (0+255),b
  8972  00025E  0EE4               	movlw	228
  8973  000260                     u10417:
  8974  000260  2EE8               	decfsz	wreg,f,c
  8975  000262  D7FE               	bra	u10417
  8976  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  8977  000266  D7FC               	bra	u10417
  8978  000268  F000               	nop	
  8979  00026A  0100               	movlb	0	; () banked
  8980  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  8981  00026E  D7EF               	goto	l9432
  8982  000270                     l9440:
  8983                           
  8984                           ; BSR set to: 0
  8985  000270  0100               	movlb	0	; () banked
  8986  000272  51F8               	movf	_logstate& (0+255),w,b
  8987  000274  0100               	movlb	0	; () banked
  8988  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8989  000278  B4D8               	btfsc	status,2,c
  8990  00027A  0012               	return	
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8994                           
  8995                           ; BSR set to: 0
  8996                           
  8997                           ; BSR set to: 0
  8998  00027C  0E00               	movlw	0
  8999  00027E  0100               	movlb	0	; () banked
  9000  000280  6FCB               	movwf	UI@i_416& (0+255),b
  9001  000282                     l9446:
  9002                           
  9003                           ; BSR set to: 0
  9004  000282  0E63               	movlw	99
  9005  000284  0100               	movlb	0	; () banked
  9006  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  9007  000288  D001               	goto	l9450
  9008  00028A  D00C               	goto	l9454
  9009  00028C                     l9450:
  9010                           
  9011                           ; BSR set to: 0
  9012  00028C  0E68               	movlw	104
  9013  00028E  0100               	movlb	0	; () banked
  9014  000290  6FC4               	movwf	??_UI& (0+255),b
  9015  000292  0EE4               	movlw	228
  9016  000294                     u10427:
  9017  000294  2EE8               	decfsz	wreg,f,c
  9018  000296  D7FE               	bra	u10427
  9019  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9020  00029A  D7FC               	bra	u10427
  9021  00029C  F000               	nop	
  9022  00029E  0100               	movlb	0	; () banked
  9023  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  9024  0002A2  D7EF               	goto	l9446
  9025  0002A4                     l9454:
  9026                           
  9027                           ; BSR set to: 0
  9028  0002A4  0100               	movlb	0	; () banked
  9029  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9030  0002A8  0100               	movlb	0	; () banked
  9031  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9032  0002AC  B4D8               	btfsc	status,2,c
  9033  0002AE  0012               	return	
  9034                           
  9035                           ; BSR set to: 0
  9036                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9037                           
  9038                           ; BSR set to: 0
  9039                           
  9040                           ; BSR set to: 0
  9041  0002B0  0E01               	movlw	1
  9042  0002B2  ECDC  F02D         	call	_lcdInst
  9043  0002B6  0E68               	movlw	104
  9044  0002B8  0100               	movlb	0	; () banked
  9045  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9046  0002BC  0EE4               	movlw	228
  9047  0002BE                     u10437:
  9048  0002BE  2EE8               	decfsz	wreg,f,c
  9049  0002C0  D7FE               	bra	u10437
  9050  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9051  0002C4  D7FC               	bra	u10437
  9052  0002C6  F000               	nop	
  9053                           
  9054                           ;UI.c: 125: lcdInst(0b10000000);;
  9055  0002C8  0E80               	movlw	128
  9056  0002CA  ECDC  F02D         	call	_lcdInst
  9057                           
  9058                           ;UI.c: 126: printf("START:");
  9059  0002CE  0EC3               	movlw	low STR_7
  9060  0002D0  0100               	movlb	0	; () banked
  9061  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9062  0002D4  0EFF               	movlw	high STR_7
  9063  0002D6  0100               	movlb	0	; () banked
  9064  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9065  0002DA  EC8D  F00D         	call	_printf	;wreg free
  9066                           
  9067                           ;UI.c: 127: lcdInst(0b11000000);;
  9068  0002DE  0EC0               	movlw	192
  9069  0002E0  ECDC  F02D         	call	_lcdInst
  9070                           
  9071                           ;UI.c: 128: char month[] = "MMM";
  9072  0002E4  C14B  F0D6         	movff	UI@F3247,UI@month
  9073  0002E8  C14C  F0D7         	movff	UI@F3247+1,UI@month+1
  9074  0002EC  C14D  F0D8         	movff	UI@F3247+2,UI@month+2
  9075  0002F0  C14E  F0D9         	movff	UI@F3247+3,UI@month+3
  9076                           
  9077                           ;UI.c: 129: switch(log_startTime[5]){
  9078  0002F4  D0C3               	goto	l9498
  9079  0002F6                     l9470:
  9080                           
  9081                           ;UI.c: 131: strcpy(month, "JAN");
  9082  0002F6  0ED6               	movlw	low UI@month
  9083  0002F8  0100               	movlb	0	; () banked
  9084  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9085  0002FC  0E00               	movlw	high UI@month
  9086  0002FE  0100               	movlb	0	; () banked
  9087  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9088  000302  0EDA               	movlw	low STR_8
  9089  000304  0100               	movlb	0	; () banked
  9090  000306  6F82               	movwf	strcpy@from& (0+255),b
  9091  000308  0EFF               	movlw	high STR_8
  9092  00030A  0100               	movlb	0	; () banked
  9093  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9094  00030E  EC2B  F02B         	call	_strcpy	;wreg free
  9095                           
  9096                           ;UI.c: 132: break;
  9097  000312  D0E6               	goto	l9500
  9098  000314                     l9472:
  9099                           
  9100                           ;UI.c: 134: strcpy(month, "FEB");
  9101  000314  0ED6               	movlw	low UI@month
  9102  000316  0100               	movlb	0	; () banked
  9103  000318  6F80               	movwf	strcpy@to& (0+255),b
  9104  00031A  0E00               	movlw	high UI@month
  9105  00031C  0100               	movlb	0	; () banked
  9106  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9107  000320  0ECA               	movlw	low STR_9
  9108  000322  0100               	movlb	0	; () banked
  9109  000324  6F82               	movwf	strcpy@from& (0+255),b
  9110  000326  0EFF               	movlw	high STR_9
  9111  000328  0100               	movlb	0	; () banked
  9112  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9113  00032C  EC2B  F02B         	call	_strcpy	;wreg free
  9114                           
  9115                           ;UI.c: 135: break;
  9116  000330  D0D7               	goto	l9500
  9117  000332                     l9474:
  9118                           
  9119                           ;UI.c: 137: strcpy(month, "MAR");
  9120  000332  0ED6               	movlw	low UI@month
  9121  000334  0100               	movlb	0	; () banked
  9122  000336  6F80               	movwf	strcpy@to& (0+255),b
  9123  000338  0E00               	movlw	high UI@month
  9124  00033A  0100               	movlb	0	; () banked
  9125  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9126  00033E  0EE6               	movlw	low STR_10
  9127  000340  0100               	movlb	0	; () banked
  9128  000342  6F82               	movwf	strcpy@from& (0+255),b
  9129  000344  0EFF               	movlw	high STR_10
  9130  000346  0100               	movlb	0	; () banked
  9131  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9132  00034A  EC2B  F02B         	call	_strcpy	;wreg free
  9133                           
  9134                           ;UI.c: 138: break;
  9135  00034E  D0C8               	goto	l9500
  9136  000350                     l9476:
  9137                           
  9138                           ;UI.c: 140: strcpy(month, "APR");
  9139  000350  0ED6               	movlw	low UI@month
  9140  000352  0100               	movlb	0	; () banked
  9141  000354  6F80               	movwf	strcpy@to& (0+255),b
  9142  000356  0E00               	movlw	high UI@month
  9143  000358  0100               	movlb	0	; () banked
  9144  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9145  00035C  0EEA               	movlw	low STR_11
  9146  00035E  0100               	movlb	0	; () banked
  9147  000360  6F82               	movwf	strcpy@from& (0+255),b
  9148  000362  0EFF               	movlw	high STR_11
  9149  000364  0100               	movlb	0	; () banked
  9150  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9151  000368  EC2B  F02B         	call	_strcpy	;wreg free
  9152                           
  9153                           ;UI.c: 141: break;
  9154  00036C  D0B9               	goto	l9500
  9155  00036E                     l9478:
  9156                           
  9157                           ;UI.c: 143: strcpy(month, "MAY");
  9158  00036E  0ED6               	movlw	low UI@month
  9159  000370  0100               	movlb	0	; () banked
  9160  000372  6F80               	movwf	strcpy@to& (0+255),b
  9161  000374  0E00               	movlw	high UI@month
  9162  000376  0100               	movlb	0	; () banked
  9163  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9164  00037A  0EFA               	movlw	low STR_12
  9165  00037C  0100               	movlb	0	; () banked
  9166  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9167  000380  0EFF               	movlw	high STR_12
  9168  000382  0100               	movlb	0	; () banked
  9169  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9170  000386  EC2B  F02B         	call	_strcpy	;wreg free
  9171                           
  9172                           ;UI.c: 144: break;
  9173  00038A  D0AA               	goto	l9500
  9174  00038C                     l9480:
  9175                           
  9176                           ;UI.c: 146: strcpy(month, "JUN");
  9177  00038C  0ED6               	movlw	low UI@month
  9178  00038E  0100               	movlb	0	; () banked
  9179  000390  6F80               	movwf	strcpy@to& (0+255),b
  9180  000392  0E00               	movlw	high UI@month
  9181  000394  0100               	movlb	0	; () banked
  9182  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9183  000398  0EDE               	movlw	low STR_13
  9184  00039A  0100               	movlb	0	; () banked
  9185  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9186  00039E  0EFF               	movlw	high STR_13
  9187  0003A0  0100               	movlb	0	; () banked
  9188  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9189  0003A4  EC2B  F02B         	call	_strcpy	;wreg free
  9190                           
  9191                           ;UI.c: 147: break;
  9192  0003A8  D09B               	goto	l9500
  9193  0003AA                     l9482:
  9194                           
  9195                           ;UI.c: 149: strcpy(month, "JUL");
  9196  0003AA  0ED6               	movlw	low UI@month
  9197  0003AC  0100               	movlb	0	; () banked
  9198  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9199  0003B0  0E00               	movlw	high UI@month
  9200  0003B2  0100               	movlb	0	; () banked
  9201  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9202  0003B6  0ED6               	movlw	low STR_14
  9203  0003B8  0100               	movlb	0	; () banked
  9204  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9205  0003BC  0EFF               	movlw	high STR_14
  9206  0003BE  0100               	movlb	0	; () banked
  9207  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9208  0003C2  EC2B  F02B         	call	_strcpy	;wreg free
  9209                           
  9210                           ;UI.c: 150: break;
  9211  0003C6  D08C               	goto	l9500
  9212  0003C8                     l9484:
  9213                           
  9214                           ;UI.c: 152: strcpy(month, "AUG");
  9215  0003C8  0ED6               	movlw	low UI@month
  9216  0003CA  0100               	movlb	0	; () banked
  9217  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9218  0003CE  0E00               	movlw	high UI@month
  9219  0003D0  0100               	movlb	0	; () banked
  9220  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9221  0003D4  0ED2               	movlw	low STR_15
  9222  0003D6  0100               	movlb	0	; () banked
  9223  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9224  0003DA  0EFF               	movlw	high STR_15
  9225  0003DC  0100               	movlb	0	; () banked
  9226  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9227  0003E0  EC2B  F02B         	call	_strcpy	;wreg free
  9228                           
  9229                           ;UI.c: 153: break;
  9230  0003E4  D07D               	goto	l9500
  9231  0003E6                     l9486:
  9232                           
  9233                           ;UI.c: 155: strcpy(month, "SEP");
  9234  0003E6  0ED6               	movlw	low UI@month
  9235  0003E8  0100               	movlb	0	; () banked
  9236  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9237  0003EC  0E00               	movlw	high UI@month
  9238  0003EE  0100               	movlb	0	; () banked
  9239  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9240  0003F2  0EE2               	movlw	low STR_16
  9241  0003F4  0100               	movlb	0	; () banked
  9242  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9243  0003F8  0EFF               	movlw	high STR_16
  9244  0003FA  0100               	movlb	0	; () banked
  9245  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9246  0003FE  EC2B  F02B         	call	_strcpy	;wreg free
  9247                           
  9248                           ;UI.c: 156: break;
  9249  000402  D06E               	goto	l9500
  9250  000404                     l9488:
  9251                           
  9252                           ;UI.c: 158: strcpy(month, "OCT");
  9253  000404  0ED6               	movlw	low UI@month
  9254  000406  0100               	movlb	0	; () banked
  9255  000408  6F80               	movwf	strcpy@to& (0+255),b
  9256  00040A  0E00               	movlw	high UI@month
  9257  00040C  0100               	movlb	0	; () banked
  9258  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9259  000410  0EF2               	movlw	low STR_17
  9260  000412  0100               	movlb	0	; () banked
  9261  000414  6F82               	movwf	strcpy@from& (0+255),b
  9262  000416  0EFF               	movlw	high STR_17
  9263  000418  0100               	movlb	0	; () banked
  9264  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9265  00041C  EC2B  F02B         	call	_strcpy	;wreg free
  9266                           
  9267                           ;UI.c: 159: break;
  9268  000420  D05F               	goto	l9500
  9269  000422                     l9490:
  9270                           
  9271                           ;UI.c: 161: strcpy(month, "NOV");
  9272  000422  0ED6               	movlw	low UI@month
  9273  000424  0100               	movlb	0	; () banked
  9274  000426  6F80               	movwf	strcpy@to& (0+255),b
  9275  000428  0E00               	movlw	high UI@month
  9276  00042A  0100               	movlb	0	; () banked
  9277  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9278  00042E  0EF6               	movlw	low STR_18
  9279  000430  0100               	movlb	0	; () banked
  9280  000432  6F82               	movwf	strcpy@from& (0+255),b
  9281  000434  0EFF               	movlw	high STR_18
  9282  000436  0100               	movlb	0	; () banked
  9283  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9284  00043A  EC2B  F02B         	call	_strcpy	;wreg free
  9285                           
  9286                           ;UI.c: 162: break;
  9287  00043E  D050               	goto	l9500
  9288  000440                     l9492:
  9289                           
  9290                           ;UI.c: 164: strcpy(month, "DEC");
  9291  000440  0ED6               	movlw	low UI@month
  9292  000442  0100               	movlb	0	; () banked
  9293  000444  6F80               	movwf	strcpy@to& (0+255),b
  9294  000446  0E00               	movlw	high UI@month
  9295  000448  0100               	movlb	0	; () banked
  9296  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9297  00044C  0ECE               	movlw	low STR_19
  9298  00044E  0100               	movlb	0	; () banked
  9299  000450  6F82               	movwf	strcpy@from& (0+255),b
  9300  000452  0EFF               	movlw	high STR_19
  9301  000454  0100               	movlb	0	; () banked
  9302  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9303  000458  EC2B  F02B         	call	_strcpy	;wreg free
  9304                           
  9305                           ;UI.c: 165: break;
  9306  00045C  D041               	goto	l9500
  9307  00045E                     l9494:
  9308                           
  9309                           ;UI.c: 167: strcpy(month, "ERR");
  9310  00045E  0ED6               	movlw	low UI@month
  9311  000460  0100               	movlb	0	; () banked
  9312  000462  6F80               	movwf	strcpy@to& (0+255),b
  9313  000464  0E00               	movlw	high UI@month
  9314  000466  0100               	movlb	0	; () banked
  9315  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9316  00046A  0EEE               	movlw	low STR_20
  9317  00046C  0100               	movlb	0	; () banked
  9318  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9319  000470  0EFF               	movlw	high STR_20
  9320  000472  0100               	movlb	0	; () banked
  9321  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9322  000476  EC2B  F02B         	call	_strcpy	;wreg free
  9323                           
  9324                           ;UI.c: 169: }
  9325                           
  9326                           ;UI.c: 168: break;
  9327  00047A  D032               	goto	l9500
  9328  00047C                     l9498:
  9329  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9330  000480  CFDE F0C4          	movff	postinc2,??_UI
  9331  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9332                           
  9333                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9334                           ; Switch size 1, requested type "space"
  9335                           ; Number of cases is 1, Range of values is 0 to 0
  9336                           ; switch strategies available:
  9337                           ; Name         Instructions Cycles
  9338                           ; simple_byte            4     3 (average)
  9339                           ;	Chosen strategy is simple_byte
  9340  000488  0100               	movlb	0	; () banked
  9341  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9342  00048C  0A00               	xorlw	0	; case 0
  9343  00048E  A4D8               	btfss	status,2,c
  9344  000490  D7E6               	goto	l9494
  9345                           
  9346                           ; BSR set to: 0
  9347                           ; Switch size 1, requested type "space"
  9348                           ; Number of cases is 12, Range of values is 1 to 12
  9349                           ; switch strategies available:
  9350                           ; Name         Instructions Cycles
  9351                           ; simple_byte           37    19 (average)
  9352                           ;	Chosen strategy is simple_byte
  9353  000492  0100               	movlb	0	; () banked
  9354  000494  51C4               	movf	??_UI& (0+255),w,b
  9355  000496  0A01               	xorlw	1	; case 1
  9356  000498  B4D8               	btfsc	status,2,c
  9357  00049A  D72D               	goto	l9470
  9358  00049C  0A03               	xorlw	3	; case 2
  9359  00049E  B4D8               	btfsc	status,2,c
  9360  0004A0  D739               	goto	l9472
  9361  0004A2  0A01               	xorlw	1	; case 3
  9362  0004A4  B4D8               	btfsc	status,2,c
  9363  0004A6  D745               	goto	l9474
  9364  0004A8  0A07               	xorlw	7	; case 4
  9365  0004AA  B4D8               	btfsc	status,2,c
  9366  0004AC  D751               	goto	l9476
  9367  0004AE  0A01               	xorlw	1	; case 5
  9368  0004B0  B4D8               	btfsc	status,2,c
  9369  0004B2  D75D               	goto	l9478
  9370  0004B4  0A03               	xorlw	3	; case 6
  9371  0004B6  B4D8               	btfsc	status,2,c
  9372  0004B8  D769               	goto	l9480
  9373  0004BA  0A01               	xorlw	1	; case 7
  9374  0004BC  B4D8               	btfsc	status,2,c
  9375  0004BE  D775               	goto	l9482
  9376  0004C0  0A0F               	xorlw	15	; case 8
  9377  0004C2  B4D8               	btfsc	status,2,c
  9378  0004C4  D781               	goto	l9484
  9379  0004C6  0A01               	xorlw	1	; case 9
  9380  0004C8  B4D8               	btfsc	status,2,c
  9381  0004CA  D78D               	goto	l9486
  9382  0004CC  0A03               	xorlw	3	; case 10
  9383  0004CE  B4D8               	btfsc	status,2,c
  9384  0004D0  D799               	goto	l9488
  9385  0004D2  0A01               	xorlw	1	; case 11
  9386  0004D4  B4D8               	btfsc	status,2,c
  9387  0004D6  D7A5               	goto	l9490
  9388  0004D8  0A07               	xorlw	7	; case 12
  9389  0004DA  B4D8               	btfsc	status,2,c
  9390  0004DC  D7B1               	goto	l9492
  9391  0004DE  D7BF               	goto	l9494
  9392  0004E0                     l9500:
  9393                           
  9394                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9395  0004E0  0EA6               	movlw	low STR_21
  9396  0004E2  0100               	movlb	0	; () banked
  9397  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9398  0004E6  0EFA               	movlw	high STR_21
  9399  0004E8  0100               	movlb	0	; () banked
  9400  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9401  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9402  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9403  0004F4  0ED6               	movlw	low UI@month
  9404  0004F6  0100               	movlb	0	; () banked
  9405  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9406  0004FA  0E00               	movlw	high UI@month
  9407  0004FC  0100               	movlb	0	; () banked
  9408  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9409  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9410  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9411  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9412  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9413  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9414  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9415  000518  EC8D  F00D         	call	_printf	;wreg free
  9416                           
  9417                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9418  00051C  0E00               	movlw	0
  9419  00051E  0100               	movlb	0	; () banked
  9420  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9421  000522                     l9504:
  9422                           
  9423                           ; BSR set to: 0
  9424  000522  0E63               	movlw	99
  9425  000524  0100               	movlb	0	; () banked
  9426  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9427  000528  D001               	goto	l9508
  9428  00052A  D00C               	goto	l9512
  9429  00052C                     l9508:
  9430                           
  9431                           ; BSR set to: 0
  9432  00052C  0E68               	movlw	104
  9433  00052E  0100               	movlb	0	; () banked
  9434  000530  6FC4               	movwf	??_UI& (0+255),b
  9435  000532  0EE4               	movlw	228
  9436  000534                     u10447:
  9437  000534  2EE8               	decfsz	wreg,f,c
  9438  000536  D7FE               	bra	u10447
  9439  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9440  00053A  D7FC               	bra	u10447
  9441  00053C  F000               	nop	
  9442  00053E  0100               	movlb	0	; () banked
  9443  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9444  000542  D7EF               	goto	l9504
  9445  000544                     l9512:
  9446                           
  9447                           ; BSR set to: 0
  9448  000544  0100               	movlb	0	; () banked
  9449  000546  51F8               	movf	_logstate& (0+255),w,b
  9450  000548  0100               	movlb	0	; () banked
  9451  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9452  00054C  B4D8               	btfsc	status,2,c
  9453  00054E  0012               	return	
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9457                           
  9458                           ; BSR set to: 0
  9459                           
  9460                           ; BSR set to: 0
  9461  000550  0E00               	movlw	0
  9462  000552  0100               	movlb	0	; () banked
  9463  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9464  000556                     l9518:
  9465                           
  9466                           ; BSR set to: 0
  9467  000556  0E63               	movlw	99
  9468  000558  0100               	movlb	0	; () banked
  9469  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9470  00055C  D001               	goto	l9522
  9471  00055E  D00C               	goto	l9526
  9472  000560                     l9522:
  9473                           
  9474                           ; BSR set to: 0
  9475  000560  0E68               	movlw	104
  9476  000562  0100               	movlb	0	; () banked
  9477  000564  6FC4               	movwf	??_UI& (0+255),b
  9478  000566  0EE4               	movlw	228
  9479  000568                     u10457:
  9480  000568  2EE8               	decfsz	wreg,f,c
  9481  00056A  D7FE               	bra	u10457
  9482  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9483  00056E  D7FC               	bra	u10457
  9484  000570  F000               	nop	
  9485  000572  0100               	movlb	0	; () banked
  9486  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9487  000576  D7EF               	goto	l9518
  9488  000578                     l9526:
  9489                           
  9490                           ; BSR set to: 0
  9491  000578  0100               	movlb	0	; () banked
  9492  00057A  51F8               	movf	_logstate& (0+255),w,b
  9493  00057C  0100               	movlb	0	; () banked
  9494  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9495  000580  B4D8               	btfsc	status,2,c
  9496  000582  0012               	return	
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9500                           
  9501                           ; BSR set to: 0
  9502                           
  9503                           ; BSR set to: 0
  9504  000584  0E01               	movlw	1
  9505  000586  ECDC  F02D         	call	_lcdInst
  9506  00058A  0E68               	movlw	104
  9507  00058C  0100               	movlb	0	; () banked
  9508  00058E  6FC4               	movwf	??_UI& (0+255),b
  9509  000590  0EE4               	movlw	228
  9510  000592                     u10467:
  9511  000592  2EE8               	decfsz	wreg,f,c
  9512  000594  D7FE               	bra	u10467
  9513  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9514  000598  D7FC               	bra	u10467
  9515  00059A  F000               	nop	
  9516                           
  9517                           ;UI.c: 176: lcdInst(0b10000000);;
  9518  00059C  0E80               	movlw	128
  9519  00059E  ECDC  F02D         	call	_lcdInst
  9520                           
  9521                           ;UI.c: 177: printf("DURATION:");
  9522  0005A2  0E9A               	movlw	low STR_22
  9523  0005A4  0100               	movlb	0	; () banked
  9524  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9525  0005A8  0EFF               	movlw	high STR_22
  9526  0005AA  0100               	movlb	0	; () banked
  9527  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9528  0005AE  EC8D  F00D         	call	_printf	;wreg free
  9529                           
  9530                           ;UI.c: 178: lcdInst(0b11000000);;
  9531  0005B2  0EC0               	movlw	192
  9532  0005B4  ECDC  F02D         	call	_lcdInst
  9533                           
  9534                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9535  0005B8  0E0E               	movlw	14
  9536  0005BA  0100               	movlb	0	; () banked
  9537  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9538  0005BE  0E10               	movlw	16
  9539  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9540  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9541  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9542  0005CA  ECAB  F025         	call	___awmod	;wreg free
  9543  0005CE  C080  F0C6         	movff	?___awmod,_UI$2434
  9544  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2434+1
  9545                           
  9546                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9547  0005D6  0E3B               	movlw	low STR_23
  9548  0005D8  0100               	movlb	0	; () banked
  9549  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9550  0005DC  0EFF               	movlw	high STR_23
  9551  0005DE  0100               	movlb	0	; () banked
  9552  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9553  0005E2  0E0E               	movlw	14
  9554  0005E4  0100               	movlb	0	; () banked
  9555  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9556  0005E8  0E10               	movlw	16
  9557  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9558  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9559  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9560  0005F4  ECAB  F025         	call	___awmod	;wreg free
  9561  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9562  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9563  000600  0E00               	movlw	0
  9564  000602  0100               	movlb	0	; () banked
  9565  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9566  000606  0E3C               	movlw	60
  9567  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9568  00060A  EC99  F024         	call	___awdiv	;wreg free
  9569  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9570  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9571  000616  C0C6  F080         	movff	_UI$2434,___awmod@dividend
  9572  00061A  C0C7  F081         	movff	_UI$2434+1,___awmod@dividend+1
  9573  00061E  0E00               	movlw	0
  9574  000620  0100               	movlb	0	; () banked
  9575  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9576  000624  0E3C               	movlw	60
  9577  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9578  000628  ECAB  F025         	call	___awmod	;wreg free
  9579  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9580  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9581  000634  EC8D  F00D         	call	_printf	;wreg free
  9582                           
  9583                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9584  000638  0E00               	movlw	0
  9585  00063A  0100               	movlb	0	; () banked
  9586  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9587  00063E                     l9546:
  9588                           
  9589                           ; BSR set to: 0
  9590  00063E  0E63               	movlw	99
  9591  000640  0100               	movlb	0	; () banked
  9592  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9593  000644  D001               	goto	l9550
  9594  000646  D00C               	goto	l9554
  9595  000648                     l9550:
  9596                           
  9597                           ; BSR set to: 0
  9598  000648  0E68               	movlw	104
  9599  00064A  0100               	movlb	0	; () banked
  9600  00064C  6FC4               	movwf	??_UI& (0+255),b
  9601  00064E  0EE4               	movlw	228
  9602  000650                     u10477:
  9603  000650  2EE8               	decfsz	wreg,f,c
  9604  000652  D7FE               	bra	u10477
  9605  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9606  000656  D7FC               	bra	u10477
  9607  000658  F000               	nop	
  9608  00065A  0100               	movlb	0	; () banked
  9609  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9610  00065E  D7EF               	goto	l9546
  9611  000660                     l9554:
  9612                           
  9613                           ; BSR set to: 0
  9614  000660  0100               	movlb	0	; () banked
  9615  000662  51F8               	movf	_logstate& (0+255),w,b
  9616  000664  0100               	movlb	0	; () banked
  9617  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9618  000668  B4D8               	btfsc	status,2,c
  9619  00066A  0012               	return	
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9623                           
  9624                           ; BSR set to: 0
  9625                           
  9626                           ; BSR set to: 0
  9627  00066C  0E00               	movlw	0
  9628  00066E  0100               	movlb	0	; () banked
  9629  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9630  000672                     l9560:
  9631                           
  9632                           ; BSR set to: 0
  9633  000672  0E63               	movlw	99
  9634  000674  0100               	movlb	0	; () banked
  9635  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9636  000678  D001               	goto	l9564
  9637  00067A  D00C               	goto	l9568
  9638  00067C                     l9564:
  9639                           
  9640                           ; BSR set to: 0
  9641  00067C  0E68               	movlw	104
  9642  00067E  0100               	movlb	0	; () banked
  9643  000680  6FC4               	movwf	??_UI& (0+255),b
  9644  000682  0EE4               	movlw	228
  9645  000684                     u10487:
  9646  000684  2EE8               	decfsz	wreg,f,c
  9647  000686  D7FE               	bra	u10487
  9648  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9649  00068A  D7FC               	bra	u10487
  9650  00068C  F000               	nop	
  9651  00068E  0100               	movlb	0	; () banked
  9652  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9653  000692  D7EF               	goto	l9560
  9654  000694                     l9568:
  9655                           
  9656                           ; BSR set to: 0
  9657  000694  0100               	movlb	0	; () banked
  9658  000696  51F8               	movf	_logstate& (0+255),w,b
  9659  000698  0100               	movlb	0	; () banked
  9660  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9661  00069C  B4D8               	btfsc	status,2,c
  9662  00069E  0012               	return	
  9663                           
  9664                           ; BSR set to: 0
  9665                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9666                           
  9667                           ; BSR set to: 0
  9668                           
  9669                           ; BSR set to: 0
  9670  0006A0  0E01               	movlw	1
  9671  0006A2  ECDC  F02D         	call	_lcdInst
  9672  0006A6  0E68               	movlw	104
  9673  0006A8  0100               	movlb	0	; () banked
  9674  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9675  0006AC  0EE4               	movlw	228
  9676  0006AE                     u10497:
  9677  0006AE  2EE8               	decfsz	wreg,f,c
  9678  0006B0  D7FE               	bra	u10497
  9679  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9680  0006B4  D7FC               	bra	u10497
  9681  0006B6  F000               	nop	
  9682                           
  9683                           ;UI.c: 185: lcdInst(0b10000000);;
  9684  0006B8  0E80               	movlw	128
  9685  0006BA  ECDC  F02D         	call	_lcdInst
  9686                           
  9687                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9688  0006BE  0E2F               	movlw	low STR_24
  9689  0006C0  0100               	movlb	0	; () banked
  9690  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9691  0006C4  0EFD               	movlw	high STR_24
  9692  0006C6  0100               	movlb	0	; () banked
  9693  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9694  0006CA  EC8D  F00D         	call	_printf	;wreg free
  9695                           
  9696                           ;UI.c: 187: lcdInst(0b11000000);;
  9697  0006CE  0EC0               	movlw	192
  9698  0006D0  ECDC  F02D         	call	_lcdInst
  9699                           
  9700                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9701  0006D4  0E0C               	movlw	low STR_25
  9702  0006D6  0100               	movlb	0	; () banked
  9703  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9704  0006DA  0EFE               	movlw	high STR_25
  9705  0006DC  0100               	movlb	0	; () banked
  9706  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9707  0006E0  C0F4  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9708  0006E4  C0F5  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9709  0006E8  C141  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9710  0006EC  C142  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9711  0006F0  EC8D  F00D         	call	_printf	;wreg free
  9712                           
  9713                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9714  0006F4  0E00               	movlw	0
  9715  0006F6  0100               	movlb	0	; () banked
  9716  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9717  0006FA                     l9586:
  9718                           
  9719                           ; BSR set to: 0
  9720  0006FA  0E63               	movlw	99
  9721  0006FC  0100               	movlb	0	; () banked
  9722  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9723  000700  D001               	goto	l9590
  9724  000702  D00C               	goto	l9594
  9725  000704                     l9590:
  9726                           
  9727                           ; BSR set to: 0
  9728  000704  0E68               	movlw	104
  9729  000706  0100               	movlb	0	; () banked
  9730  000708  6FC4               	movwf	??_UI& (0+255),b
  9731  00070A  0EE4               	movlw	228
  9732  00070C                     u10507:
  9733  00070C  2EE8               	decfsz	wreg,f,c
  9734  00070E  D7FE               	bra	u10507
  9735  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9736  000712  D7FC               	bra	u10507
  9737  000714  F000               	nop	
  9738  000716  0100               	movlb	0	; () banked
  9739  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9740  00071A  D7EF               	goto	l9586
  9741  00071C                     l9594:
  9742                           
  9743                           ; BSR set to: 0
  9744  00071C  0100               	movlb	0	; () banked
  9745  00071E  51F8               	movf	_logstate& (0+255),w,b
  9746  000720  0100               	movlb	0	; () banked
  9747  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9748  000724  B4D8               	btfsc	status,2,c
  9749  000726  0012               	return	
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9753                           
  9754                           ; BSR set to: 0
  9755                           
  9756                           ; BSR set to: 0
  9757  000728  0E00               	movlw	0
  9758  00072A  0100               	movlb	0	; () banked
  9759  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9760  00072E                     l9600:
  9761                           
  9762                           ; BSR set to: 0
  9763  00072E  0E63               	movlw	99
  9764  000730  0100               	movlb	0	; () banked
  9765  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9766  000734  D001               	goto	l9604
  9767  000736  D00C               	goto	l9608
  9768  000738                     l9604:
  9769                           
  9770                           ; BSR set to: 0
  9771  000738  0E68               	movlw	104
  9772  00073A  0100               	movlb	0	; () banked
  9773  00073C  6FC4               	movwf	??_UI& (0+255),b
  9774  00073E  0EE4               	movlw	228
  9775  000740                     u10517:
  9776  000740  2EE8               	decfsz	wreg,f,c
  9777  000742  D7FE               	bra	u10517
  9778  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9779  000746  D7FC               	bra	u10517
  9780  000748  F000               	nop	
  9781  00074A  0100               	movlb	0	; () banked
  9782  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9783  00074E  D7EF               	goto	l9600
  9784  000750                     l9608:
  9785                           
  9786                           ; BSR set to: 0
  9787  000750  0100               	movlb	0	; () banked
  9788  000752  51F8               	movf	_logstate& (0+255),w,b
  9789  000754  0100               	movlb	0	; () banked
  9790  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9791  000758  B4D8               	btfsc	status,2,c
  9792  00075A  0012               	return	
  9793                           
  9794                           ; BSR set to: 0
  9795                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9796                           
  9797                           ; BSR set to: 0
  9798                           
  9799                           ; BSR set to: 0
  9800  00075C  0E01               	movlw	1
  9801  00075E  ECDC  F02D         	call	_lcdInst
  9802  000762  0E68               	movlw	104
  9803  000764  0100               	movlb	0	; () banked
  9804  000766  6FC4               	movwf	??_UI& (0+255),b
  9805  000768  0EE4               	movlw	228
  9806  00076A                     u10527:
  9807  00076A  2EE8               	decfsz	wreg,f,c
  9808  00076C  D7FE               	bra	u10527
  9809  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9810  000770  D7FC               	bra	u10527
  9811  000772  F000               	nop	
  9812                           
  9813                           ;UI.c: 194: lcdInst(0b10000000);;
  9814  000774  0E80               	movlw	128
  9815  000776  ECDC  F02D         	call	_lcdInst
  9816                           
  9817                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9818  00077A  0E40               	movlw	low STR_26
  9819  00077C  0100               	movlb	0	; () banked
  9820  00077E  6F8E               	movwf	printf@f& (0+255),b
  9821  000780  0EFD               	movlw	high STR_26
  9822  000782  0100               	movlb	0	; () banked
  9823  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9824  000786  EC8D  F00D         	call	_printf	;wreg free
  9825                           
  9826                           ;UI.c: 196: lcdInst(0b11000000);;
  9827  00078A  0EC0               	movlw	192
  9828  00078C  ECDC  F02D         	call	_lcdInst
  9829                           
  9830                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9831  000790  0EFB               	movlw	low STR_27
  9832  000792  0100               	movlb	0	; () banked
  9833  000794  6F8E               	movwf	printf@f& (0+255),b
  9834  000796  0EFD               	movlw	high STR_27
  9835  000798  0100               	movlb	0	; () banked
  9836  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9837  00079C  C13D  F090         	movff	_log_count_can_no_lab,?_printf+2
  9838  0007A0  C13E  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9839  0007A4  C13F  F092         	movff	_log_count_can_w_lab,?_printf+4
  9840  0007A8  C140  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9841  0007AC  EC8D  F00D         	call	_printf	;wreg free
  9842                           
  9843                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9844  0007B0  0E00               	movlw	0
  9845  0007B2  0100               	movlb	0	; () banked
  9846  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9847  0007B6                     l9626:
  9848                           
  9849                           ; BSR set to: 0
  9850  0007B6  0E63               	movlw	99
  9851  0007B8  0100               	movlb	0	; () banked
  9852  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
  9853  0007BC  D001               	goto	l9630
  9854  0007BE  D00C               	goto	l9634
  9855  0007C0                     l9630:
  9856                           
  9857                           ; BSR set to: 0
  9858  0007C0  0E68               	movlw	104
  9859  0007C2  0100               	movlb	0	; () banked
  9860  0007C4  6FC4               	movwf	??_UI& (0+255),b
  9861  0007C6  0EE4               	movlw	228
  9862  0007C8                     u10537:
  9863  0007C8  2EE8               	decfsz	wreg,f,c
  9864  0007CA  D7FE               	bra	u10537
  9865  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  9866  0007CE  D7FC               	bra	u10537
  9867  0007D0  F000               	nop	
  9868  0007D2  0100               	movlb	0	; () banked
  9869  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
  9870  0007D6  D7EF               	goto	l9626
  9871  0007D8                     l9634:
  9872                           
  9873                           ; BSR set to: 0
  9874  0007D8  0100               	movlb	0	; () banked
  9875  0007DA  51F8               	movf	_logstate& (0+255),w,b
  9876  0007DC  0100               	movlb	0	; () banked
  9877  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9878  0007E0  B4D8               	btfsc	status,2,c
  9879  0007E2  0012               	return	
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9883                           
  9884                           ; BSR set to: 0
  9885                           
  9886                           ; BSR set to: 0
  9887  0007E4  0E00               	movlw	0
  9888  0007E6  0100               	movlb	0	; () banked
  9889  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
  9890  0007EA                     l9640:
  9891                           
  9892                           ; BSR set to: 0
  9893  0007EA  0E63               	movlw	99
  9894  0007EC  0100               	movlb	0	; () banked
  9895  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
  9896  0007F0  D001               	goto	l9644
  9897  0007F2  D00C               	goto	l9648
  9898  0007F4                     l9644:
  9899                           
  9900                           ; BSR set to: 0
  9901  0007F4  0E68               	movlw	104
  9902  0007F6  0100               	movlb	0	; () banked
  9903  0007F8  6FC4               	movwf	??_UI& (0+255),b
  9904  0007FA  0EE4               	movlw	228
  9905  0007FC                     u10547:
  9906  0007FC  2EE8               	decfsz	wreg,f,c
  9907  0007FE  D7FE               	bra	u10547
  9908  000800  2FC4               	decfsz	??_UI& (0+255),f,b
  9909  000802  D7FC               	bra	u10547
  9910  000804  F000               	nop	
  9911  000806  0100               	movlb	0	; () banked
  9912  000808  2BD3               	incf	UI@i_447& (0+255),f,b
  9913  00080A  D7EF               	goto	l9640
  9914  00080C                     l9648:
  9915                           
  9916                           ; BSR set to: 0
  9917  00080C  0100               	movlb	0	; () banked
  9918  00080E  51F8               	movf	_logstate& (0+255),w,b
  9919  000810  0100               	movlb	0	; () banked
  9920  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9921  000814  B4D8               	btfsc	status,2,c
  9922  000816  0012               	return	
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9926                           
  9927                           ; BSR set to: 0
  9928                           
  9929                           ; BSR set to: 0
  9930  000818  0E01               	movlw	1
  9931  00081A  ECDC  F02D         	call	_lcdInst
  9932  00081E  0E68               	movlw	104
  9933  000820  0100               	movlb	0	; () banked
  9934  000822  6FC4               	movwf	??_UI& (0+255),b
  9935  000824  0EE4               	movlw	228
  9936  000826                     u10557:
  9937  000826  2EE8               	decfsz	wreg,f,c
  9938  000828  D7FE               	bra	u10557
  9939  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
  9940  00082C  D7FC               	bra	u10557
  9941  00082E  F000               	nop	
  9942                           
  9943                           ;UI.c: 203: lcdInst(0b10000000);;
  9944  000830  0E80               	movlw	128
  9945  000832  ECDC  F02D         	call	_lcdInst
  9946                           
  9947                           ;UI.c: 204: printf("-- TOTAL CANS --");
  9948  000836  0E51               	movlw	low STR_28
  9949  000838  0100               	movlb	0	; () banked
  9950  00083A  6F8E               	movwf	printf@f& (0+255),b
  9951  00083C  0EFD               	movlw	high STR_28
  9952  00083E  0100               	movlb	0	; () banked
  9953  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
  9954  000842  EC8D  F00D         	call	_printf	;wreg free
  9955                           
  9956                           ;UI.c: 205: lcdInst(0b11000000);;
  9957  000846  0EC0               	movlw	192
  9958  000848  ECDC  F02D         	call	_lcdInst
  9959                           
  9960                           ;UI.c: 206: printf("%d", log_count_total);
  9961  00084C  0E09               	movlw	low (STR_27+14)
  9962  00084E  0100               	movlb	0	; () banked
  9963  000850  6F8E               	movwf	printf@f& (0+255),b
  9964  000852  0EFE               	movlw	high (STR_27+14)
  9965  000854  0100               	movlb	0	; () banked
  9966  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
  9967  000858  C143  F090         	movff	_log_count_total,?_printf+2
  9968  00085C  C144  F091         	movff	_log_count_total+1,?_printf+3
  9969  000860  EC8D  F00D         	call	_printf	;wreg free
  9970                           
  9971                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9972  000864  0E00               	movlw	0
  9973  000866  0100               	movlb	0	; () banked
  9974  000868  6FD4               	movwf	UI@i_450& (0+255),b
  9975  00086A                     l9666:
  9976                           
  9977                           ; BSR set to: 0
  9978  00086A  0E63               	movlw	99
  9979  00086C  0100               	movlb	0	; () banked
  9980  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
  9981  000870  D001               	goto	l9670
  9982  000872  D00C               	goto	l9674
  9983  000874                     l9670:
  9984                           
  9985                           ; BSR set to: 0
  9986  000874  0E68               	movlw	104
  9987  000876  0100               	movlb	0	; () banked
  9988  000878  6FC4               	movwf	??_UI& (0+255),b
  9989  00087A  0EE4               	movlw	228
  9990  00087C                     u10567:
  9991  00087C  2EE8               	decfsz	wreg,f,c
  9992  00087E  D7FE               	bra	u10567
  9993  000880  2FC4               	decfsz	??_UI& (0+255),f,b
  9994  000882  D7FC               	bra	u10567
  9995  000884  F000               	nop	
  9996  000886  0100               	movlb	0	; () banked
  9997  000888  2BD4               	incf	UI@i_450& (0+255),f,b
  9998  00088A  D7EF               	goto	l9666
  9999  00088C                     l9674:
 10000                           
 10001                           ; BSR set to: 0
 10002  00088C  0100               	movlb	0	; () banked
 10003  00088E  51F8               	movf	_logstate& (0+255),w,b
 10004  000890  0100               	movlb	0	; () banked
 10005  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10006  000894  B4D8               	btfsc	status,2,c
 10007  000896  0012               	return	
 10008                           
 10009                           ; BSR set to: 0
 10010                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10011                           
 10012                           ; BSR set to: 0
 10013                           
 10014                           ; BSR set to: 0
 10015  000898  0E00               	movlw	0
 10016  00089A  0100               	movlb	0	; () banked
 10017  00089C  6FD5               	movwf	UI@i_451& (0+255),b
 10018  00089E                     l9680:
 10019                           
 10020                           ; BSR set to: 0
 10021  00089E  0E63               	movlw	99
 10022  0008A0  0100               	movlb	0	; () banked
 10023  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
 10024  0008A4  D001               	goto	l9684
 10025  0008A6  D00C               	goto	l9688
 10026  0008A8                     l9684:
 10027                           
 10028                           ; BSR set to: 0
 10029  0008A8  0E68               	movlw	104
 10030  0008AA  0100               	movlb	0	; () banked
 10031  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10032  0008AE  0EE4               	movlw	228
 10033  0008B0                     u10577:
 10034  0008B0  2EE8               	decfsz	wreg,f,c
 10035  0008B2  D7FE               	bra	u10577
 10036  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10037  0008B6  D7FC               	bra	u10577
 10038  0008B8  F000               	nop	
 10039  0008BA  0100               	movlb	0	; () banked
 10040  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
 10041  0008BE  D7EF               	goto	l9680
 10042  0008C0                     l9688:
 10043                           
 10044                           ; BSR set to: 0
 10045  0008C0  0100               	movlb	0	; () banked
 10046  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10047  0008C4  0100               	movlb	0	; () banked
 10048  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10049  0008C8  B4D8               	btfsc	status,2,c
 10050  0008CA  0012               	return	
 10051  0008CC                     l9692:
 10052  0008CC  0100               	movlb	0	; () banked
 10053  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10054  0008D0  0100               	movlb	0	; () banked
 10055  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10056  0008D4  B4D8               	btfsc	status,2,c
 10057  0008D6  0012               	return	
 10058  0008D8  D44A               	goto	l9388
 10059  0008DA                     __end_of_UI:
 10060                           	opt stack 0
 10061                           tblptru	equ	0xFF8
 10062                           tblptrh	equ	0xFF7
 10063                           tblptrl	equ	0xFF6
 10064                           tablat	equ	0xFF5
 10065                           prodh	equ	0xFF4
 10066                           prodl	equ	0xFF3
 10067                           intcon	equ	0xFF2
 10068                           intcon2	equ	0xFF1
 10069                           intcon3	equ	0xFF0
 10070                           postinc0	equ	0xFEE
 10071                           wreg	equ	0xFE8
 10072                           postdec1	equ	0xFE5
 10073                           fsr1l	equ	0xFE1
 10074                           indf2	equ	0xFDF
 10075                           postinc2	equ	0xFDE
 10076                           postdec2	equ	0xFDD
 10077                           fsr2h	equ	0xFDA
 10078                           fsr2l	equ	0xFD9
 10079                           status	equ	0xFD8
 10080                           
 10081 ;; *************** function _printRTC *****************
 10082 ;; Defined at:
 10083 ;;		line 63 in file "RTC.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;		None
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;  i               2   66[BANK0 ] int 
 10088 ;;  INT_time       14   46[BANK0 ] int [7]
 10089 ;;  month           4   62[BANK0 ] unsigned char [4]
 10090 ;;  RTC_month       2   60[BANK0 ] int 
 10091 ;; Return value:  Size  Location     Type
 10092 ;;                  1    wreg      void 
 10093 ;; Registers used:
 10094 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10095 ;; Tracked objects:
 10096 ;;		On entry : 0/0
 10097 ;;		On exit  : 0/0
 10098 ;;		Unchanged: 0/0
 10099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10101 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10102 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;Total ram usage:       25 bytes
 10105 ;; Hardware stack levels used:    1
 10106 ;; Hardware stack levels required when called:   10
 10107 ;; This function calls:
 10108 ;;		_getRTC
 10109 ;;		_lcdInst
 10110 ;;		_printf
 10111 ;;		_strcpy
 10112 ;; This function is called by:
 10113 ;;		_UI
 10114 ;;		_change_state_to_menu_start
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           	psect	text28
 10119  002F9A                     __ptext28:
 10120                           	opt stack 0
 10121  002F9A                     _printRTC:
 10122                           	opt stack 18
 10123                           
 10124                           ;RTC.c: 64: getRTC();
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;incstack = 0
 10128  002F9A  EC42  F026         	call	_getRTC	;wreg free
 10129                           
 10130                           ;RTC.c: 65: char month[] = "MMM";
 10131  002F9E  C14F  F0BE         	movff	printRTC@F3237,printRTC@month
 10132  002FA2  C150  F0BF         	movff	printRTC@F3237+1,printRTC@month+1
 10133  002FA6  C151  F0C0         	movff	printRTC@F3237+2,printRTC@month+2
 10134  002FAA  C152  F0C1         	movff	printRTC@F3237+3,printRTC@month+3
 10135                           
 10136                           ;RTC.c: 66: int INT_time[7];
 10137                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10138  002FAE  0E00               	movlw	0
 10139  002FB0  0100               	movlb	0	; () banked
 10140  002FB2  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10141  002FB4  0E00               	movlw	0
 10142  002FB6  6FC2               	movwf	printRTC@i& (0+255),b
 10143                           
 10144                           ; BSR set to: 0
 10145  002FB8  0100               	movlb	0	; () banked
 10146  002FBA  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10147  002FBC  D008               	goto	l7196
 10148  002FBE  0100               	movlb	0	; () banked
 10149  002FC0  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10150  002FC2  E146               	bnz	l627
 10151  002FC4  0E07               	movlw	7
 10152  002FC6  0100               	movlb	0	; () banked
 10153  002FC8  5DC2               	subwf	printRTC@i& (0+255),w,b
 10154  002FCA  B0D8               	btfsc	status,0,c
 10155  002FCC  D041               	goto	l627
 10156  002FCE                     l7196:
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10160  002FCE  0E1C               	movlw	low _time
 10161  002FD0  0100               	movlb	0	; () banked
 10162  002FD2  25C2               	addwf	printRTC@i& (0+255),w,b
 10163  002FD4  6ED9               	movwf	fsr2l,c
 10164  002FD6  0E01               	movlw	high _time
 10165  002FD8  0100               	movlb	0	; () banked
 10166  002FDA  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10167  002FDC  6EDA               	movwf	fsr2h,c
 10168  002FDE  50DF               	movf	indf2,w,c
 10169  002FE0  0100               	movlb	0	; () banked
 10170  002FE2  6FAB               	movwf	??_printRTC& (0+255),b
 10171  002FE4  0100               	movlb	0	; () banked
 10172  002FE6  3BAB               	swapf	??_printRTC& (0+255),f,b
 10173  002FE8  0E0F               	movlw	15
 10174  002FEA  17AB               	andwf	??_printRTC& (0+255),f,b
 10175  002FEC  0E0F               	movlw	15
 10176  002FEE  0100               	movlb	0	; () banked
 10177  002FF0  17AB               	andwf	??_printRTC& (0+255),f,b
 10178  002FF2  0100               	movlb	0	; () banked
 10179  002FF4  51AB               	movf	??_printRTC& (0+255),w,b
 10180  002FF6  0D0A               	mullw	10
 10181  002FF8  0E1C               	movlw	low _time
 10182  002FFA  0100               	movlb	0	; () banked
 10183  002FFC  25C2               	addwf	printRTC@i& (0+255),w,b
 10184  002FFE  6ED9               	movwf	fsr2l,c
 10185  003000  0E01               	movlw	high _time
 10186  003002  0100               	movlb	0	; () banked
 10187  003004  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10188  003006  6EDA               	movwf	fsr2h,c
 10189  003008  50DF               	movf	indf2,w,c
 10190  00300A  0B0F               	andlw	15
 10191  00300C  0100               	movlb	0	; () banked
 10192  00300E  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10193  003010  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10194  003012  50F3               	movf	prodl,w,c
 10195  003014  0100               	movlb	0	; () banked
 10196  003016  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10197  003018  50F4               	movf	prodh,w,c
 10198  00301A  0100               	movlb	0	; () banked
 10199  00301C  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10200  00301E  90D8               	bcf	status,0,c
 10201  003020  0100               	movlb	0	; () banked
 10202  003022  35C2               	rlcf	printRTC@i& (0+255),w,b
 10203  003024  6ED9               	movwf	fsr2l,c
 10204  003026  0100               	movlb	0	; () banked
 10205  003028  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10206  00302A  6EDA               	movwf	fsr2h,c
 10207  00302C  0EAE               	movlw	low printRTC@INT_time
 10208  00302E  26D9               	addwf	fsr2l,f,c
 10209  003030  0E00               	movlw	high printRTC@INT_time
 10210  003032  22DA               	addwfc	fsr2h,f,c
 10211  003034  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10212  003038  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10213                           
 10214                           ; BSR set to: 0
 10215  00303C  0100               	movlb	0	; () banked
 10216  00303E  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10217  003040  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10218                           
 10219                           ; BSR set to: 0
 10220  003042  0100               	movlb	0	; () banked
 10221  003044  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10222  003046  D7C3               	goto	l7196
 10223  003048  0100               	movlb	0	; () banked
 10224  00304A  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10225  00304C  E101               	bnz	u6030
 10226  00304E  D7BA               	goto	L9
 10227  003050                     u6030:
 10228  003050                     l627:
 10229                           
 10230                           ; BSR set to: 0
 10231                           ;RTC.c: 69: }
 10232                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10233  003050  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10234  003054  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10235                           
 10236                           ;RTC.c: 72: switch(RTC_month){
 10237  003058  D0B4               	goto	l7228
 10238  00305A                     l7202:
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;RTC.c: 74: strcpy(month, "JAN");
 10242  00305A  0EBE               	movlw	low printRTC@month
 10243  00305C  0100               	movlb	0	; () banked
 10244  00305E  6F80               	movwf	strcpy@to& (0+255),b
 10245  003060  0E00               	movlw	high printRTC@month
 10246  003062  0100               	movlb	0	; () banked
 10247  003064  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10248  003066  0EDA               	movlw	low STR_8
 10249  003068  0100               	movlb	0	; () banked
 10250  00306A  6F82               	movwf	strcpy@from& (0+255),b
 10251  00306C  0EFF               	movlw	high STR_8
 10252  00306E  0100               	movlb	0	; () banked
 10253  003070  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10254  003072  EC2B  F02B         	call	_strcpy	;wreg free
 10255                           
 10256                           ;RTC.c: 75: break;
 10257  003076  D0D4               	goto	l7230
 10258  003078                     l7204:
 10259                           
 10260                           ;RTC.c: 77: strcpy(month, "FEB");
 10261  003078  0EBE               	movlw	low printRTC@month
 10262  00307A  0100               	movlb	0	; () banked
 10263  00307C  6F80               	movwf	strcpy@to& (0+255),b
 10264  00307E  0E00               	movlw	high printRTC@month
 10265  003080  0100               	movlb	0	; () banked
 10266  003082  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10267  003084  0ECA               	movlw	low STR_9
 10268  003086  0100               	movlb	0	; () banked
 10269  003088  6F82               	movwf	strcpy@from& (0+255),b
 10270  00308A  0EFF               	movlw	high STR_9
 10271  00308C  0100               	movlb	0	; () banked
 10272  00308E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10273  003090  EC2B  F02B         	call	_strcpy	;wreg free
 10274                           
 10275                           ;RTC.c: 78: break;
 10276  003094  D0C5               	goto	l7230
 10277  003096                     l7206:
 10278                           
 10279                           ;RTC.c: 80: strcpy(month, "MAR");
 10280  003096  0EBE               	movlw	low printRTC@month
 10281  003098  0100               	movlb	0	; () banked
 10282  00309A  6F80               	movwf	strcpy@to& (0+255),b
 10283  00309C  0E00               	movlw	high printRTC@month
 10284  00309E  0100               	movlb	0	; () banked
 10285  0030A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10286  0030A2  0EE6               	movlw	low STR_10
 10287  0030A4  0100               	movlb	0	; () banked
 10288  0030A6  6F82               	movwf	strcpy@from& (0+255),b
 10289  0030A8  0EFF               	movlw	high STR_10
 10290  0030AA  0100               	movlb	0	; () banked
 10291  0030AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10292  0030AE  EC2B  F02B         	call	_strcpy	;wreg free
 10293                           
 10294                           ;RTC.c: 81: break;
 10295  0030B2  D0B6               	goto	l7230
 10296  0030B4                     l7208:
 10297                           
 10298                           ;RTC.c: 83: strcpy(month, "APR");
 10299  0030B4  0EBE               	movlw	low printRTC@month
 10300  0030B6  0100               	movlb	0	; () banked
 10301  0030B8  6F80               	movwf	strcpy@to& (0+255),b
 10302  0030BA  0E00               	movlw	high printRTC@month
 10303  0030BC  0100               	movlb	0	; () banked
 10304  0030BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10305  0030C0  0EEA               	movlw	low STR_11
 10306  0030C2  0100               	movlb	0	; () banked
 10307  0030C4  6F82               	movwf	strcpy@from& (0+255),b
 10308  0030C6  0EFF               	movlw	high STR_11
 10309  0030C8  0100               	movlb	0	; () banked
 10310  0030CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10311  0030CC  EC2B  F02B         	call	_strcpy	;wreg free
 10312                           
 10313                           ;RTC.c: 84: break;
 10314  0030D0  D0A7               	goto	l7230
 10315  0030D2                     l7210:
 10316                           
 10317                           ;RTC.c: 86: strcpy(month, "MAY");
 10318  0030D2  0EBE               	movlw	low printRTC@month
 10319  0030D4  0100               	movlb	0	; () banked
 10320  0030D6  6F80               	movwf	strcpy@to& (0+255),b
 10321  0030D8  0E00               	movlw	high printRTC@month
 10322  0030DA  0100               	movlb	0	; () banked
 10323  0030DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10324  0030DE  0EFA               	movlw	low STR_12
 10325  0030E0  0100               	movlb	0	; () banked
 10326  0030E2  6F82               	movwf	strcpy@from& (0+255),b
 10327  0030E4  0EFF               	movlw	high STR_12
 10328  0030E6  0100               	movlb	0	; () banked
 10329  0030E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10330  0030EA  EC2B  F02B         	call	_strcpy	;wreg free
 10331                           
 10332                           ;RTC.c: 87: break;
 10333  0030EE  D098               	goto	l7230
 10334  0030F0                     l7212:
 10335                           
 10336                           ;RTC.c: 89: strcpy(month, "JUN");
 10337  0030F0  0EBE               	movlw	low printRTC@month
 10338  0030F2  0100               	movlb	0	; () banked
 10339  0030F4  6F80               	movwf	strcpy@to& (0+255),b
 10340  0030F6  0E00               	movlw	high printRTC@month
 10341  0030F8  0100               	movlb	0	; () banked
 10342  0030FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10343  0030FC  0EDE               	movlw	low STR_13
 10344  0030FE  0100               	movlb	0	; () banked
 10345  003100  6F82               	movwf	strcpy@from& (0+255),b
 10346  003102  0EFF               	movlw	high STR_13
 10347  003104  0100               	movlb	0	; () banked
 10348  003106  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10349  003108  EC2B  F02B         	call	_strcpy	;wreg free
 10350                           
 10351                           ;RTC.c: 90: break;
 10352  00310C  D089               	goto	l7230
 10353  00310E                     l7214:
 10354                           
 10355                           ;RTC.c: 92: strcpy(month, "JUL");
 10356  00310E  0EBE               	movlw	low printRTC@month
 10357  003110  0100               	movlb	0	; () banked
 10358  003112  6F80               	movwf	strcpy@to& (0+255),b
 10359  003114  0E00               	movlw	high printRTC@month
 10360  003116  0100               	movlb	0	; () banked
 10361  003118  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10362  00311A  0ED6               	movlw	low STR_14
 10363  00311C  0100               	movlb	0	; () banked
 10364  00311E  6F82               	movwf	strcpy@from& (0+255),b
 10365  003120  0EFF               	movlw	high STR_14
 10366  003122  0100               	movlb	0	; () banked
 10367  003124  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10368  003126  EC2B  F02B         	call	_strcpy	;wreg free
 10369                           
 10370                           ;RTC.c: 93: break;
 10371  00312A  D07A               	goto	l7230
 10372  00312C                     l7216:
 10373                           
 10374                           ;RTC.c: 95: strcpy(month, "AUG");
 10375  00312C  0EBE               	movlw	low printRTC@month
 10376  00312E  0100               	movlb	0	; () banked
 10377  003130  6F80               	movwf	strcpy@to& (0+255),b
 10378  003132  0E00               	movlw	high printRTC@month
 10379  003134  0100               	movlb	0	; () banked
 10380  003136  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10381  003138  0ED2               	movlw	low STR_15
 10382  00313A  0100               	movlb	0	; () banked
 10383  00313C  6F82               	movwf	strcpy@from& (0+255),b
 10384  00313E  0EFF               	movlw	high STR_15
 10385  003140  0100               	movlb	0	; () banked
 10386  003142  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10387  003144  EC2B  F02B         	call	_strcpy	;wreg free
 10388                           
 10389                           ;RTC.c: 96: break;
 10390  003148  D06B               	goto	l7230
 10391  00314A                     l7218:
 10392                           
 10393                           ;RTC.c: 98: strcpy(month, "SEP");
 10394  00314A  0EBE               	movlw	low printRTC@month
 10395  00314C  0100               	movlb	0	; () banked
 10396  00314E  6F80               	movwf	strcpy@to& (0+255),b
 10397  003150  0E00               	movlw	high printRTC@month
 10398  003152  0100               	movlb	0	; () banked
 10399  003154  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10400  003156  0EE2               	movlw	low STR_16
 10401  003158  0100               	movlb	0	; () banked
 10402  00315A  6F82               	movwf	strcpy@from& (0+255),b
 10403  00315C  0EFF               	movlw	high STR_16
 10404  00315E  0100               	movlb	0	; () banked
 10405  003160  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10406  003162  EC2B  F02B         	call	_strcpy	;wreg free
 10407                           
 10408                           ;RTC.c: 99: break;
 10409  003166  D05C               	goto	l7230
 10410  003168                     l7220:
 10411                           
 10412                           ;RTC.c: 101: strcpy(month, "OCT");
 10413  003168  0EBE               	movlw	low printRTC@month
 10414  00316A  0100               	movlb	0	; () banked
 10415  00316C  6F80               	movwf	strcpy@to& (0+255),b
 10416  00316E  0E00               	movlw	high printRTC@month
 10417  003170  0100               	movlb	0	; () banked
 10418  003172  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10419  003174  0EF2               	movlw	low STR_17
 10420  003176  0100               	movlb	0	; () banked
 10421  003178  6F82               	movwf	strcpy@from& (0+255),b
 10422  00317A  0EFF               	movlw	high STR_17
 10423  00317C  0100               	movlb	0	; () banked
 10424  00317E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10425  003180  EC2B  F02B         	call	_strcpy	;wreg free
 10426                           
 10427                           ;RTC.c: 102: break;
 10428  003184  D04D               	goto	l7230
 10429  003186                     l7222:
 10430                           
 10431                           ;RTC.c: 104: strcpy(month, "NOV");
 10432  003186  0EBE               	movlw	low printRTC@month
 10433  003188  0100               	movlb	0	; () banked
 10434  00318A  6F80               	movwf	strcpy@to& (0+255),b
 10435  00318C  0E00               	movlw	high printRTC@month
 10436  00318E  0100               	movlb	0	; () banked
 10437  003190  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10438  003192  0EF6               	movlw	low STR_18
 10439  003194  0100               	movlb	0	; () banked
 10440  003196  6F82               	movwf	strcpy@from& (0+255),b
 10441  003198  0EFF               	movlw	high STR_18
 10442  00319A  0100               	movlb	0	; () banked
 10443  00319C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10444  00319E  EC2B  F02B         	call	_strcpy	;wreg free
 10445                           
 10446                           ;RTC.c: 105: break;
 10447  0031A2  D03E               	goto	l7230
 10448  0031A4                     l7224:
 10449                           
 10450                           ;RTC.c: 107: strcpy(month, "DEC");
 10451  0031A4  0EBE               	movlw	low printRTC@month
 10452  0031A6  0100               	movlb	0	; () banked
 10453  0031A8  6F80               	movwf	strcpy@to& (0+255),b
 10454  0031AA  0E00               	movlw	high printRTC@month
 10455  0031AC  0100               	movlb	0	; () banked
 10456  0031AE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10457  0031B0  0ECE               	movlw	low STR_19
 10458  0031B2  0100               	movlb	0	; () banked
 10459  0031B4  6F82               	movwf	strcpy@from& (0+255),b
 10460  0031B6  0EFF               	movlw	high STR_19
 10461  0031B8  0100               	movlb	0	; () banked
 10462  0031BA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10463  0031BC  EC2B  F02B         	call	_strcpy	;wreg free
 10464                           
 10465                           ;RTC.c: 109: }
 10466                           
 10467                           ;RTC.c: 108: break;
 10468  0031C0  D02F               	goto	l7230
 10469  0031C2                     l7228:
 10470  0031C2  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10471  0031C6  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10472                           
 10473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10474                           ; Switch size 1, requested type "space"
 10475                           ; Number of cases is 1, Range of values is 0 to 0
 10476                           ; switch strategies available:
 10477                           ; Name         Instructions Cycles
 10478                           ; simple_byte            4     3 (average)
 10479                           ;	Chosen strategy is simple_byte
 10480  0031CA  0100               	movlb	0	; () banked
 10481  0031CC  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10482  0031CE  0A00               	xorlw	0	; case 0
 10483  0031D0  A4D8               	btfss	status,2,c
 10484  0031D2  D026               	goto	l7230
 10485                           
 10486                           ; BSR set to: 0
 10487                           ; Switch size 1, requested type "space"
 10488                           ; Number of cases is 12, Range of values is 1 to 12
 10489                           ; switch strategies available:
 10490                           ; Name         Instructions Cycles
 10491                           ; simple_byte           37    19 (average)
 10492                           ;	Chosen strategy is simple_byte
 10493  0031D4  0100               	movlb	0	; () banked
 10494  0031D6  51AB               	movf	??_printRTC& (0+255),w,b
 10495  0031D8  0A01               	xorlw	1	; case 1
 10496  0031DA  B4D8               	btfsc	status,2,c
 10497  0031DC  D73E               	goto	l7202
 10498  0031DE  0A03               	xorlw	3	; case 2
 10499  0031E0  B4D8               	btfsc	status,2,c
 10500  0031E2  D74A               	goto	l7204
 10501  0031E4  0A01               	xorlw	1	; case 3
 10502  0031E6  B4D8               	btfsc	status,2,c
 10503  0031E8  D756               	goto	l7206
 10504  0031EA  0A07               	xorlw	7	; case 4
 10505  0031EC  B4D8               	btfsc	status,2,c
 10506  0031EE  D762               	goto	l7208
 10507  0031F0  0A01               	xorlw	1	; case 5
 10508  0031F2  B4D8               	btfsc	status,2,c
 10509  0031F4  D76E               	goto	l7210
 10510  0031F6  0A03               	xorlw	3	; case 6
 10511  0031F8  B4D8               	btfsc	status,2,c
 10512  0031FA  D77A               	goto	l7212
 10513  0031FC  0A01               	xorlw	1	; case 7
 10514  0031FE  B4D8               	btfsc	status,2,c
 10515  003200  D786               	goto	l7214
 10516  003202  0A0F               	xorlw	15	; case 8
 10517  003204  B4D8               	btfsc	status,2,c
 10518  003206  D792               	goto	l7216
 10519  003208  0A01               	xorlw	1	; case 9
 10520  00320A  B4D8               	btfsc	status,2,c
 10521  00320C  D79E               	goto	l7218
 10522  00320E  0A03               	xorlw	3	; case 10
 10523  003210  B4D8               	btfsc	status,2,c
 10524  003212  D7AA               	goto	l7220
 10525  003214  0A01               	xorlw	1	; case 11
 10526  003216  B4D8               	btfsc	status,2,c
 10527  003218  D7B6               	goto	l7222
 10528  00321A  0A07               	xorlw	7	; case 12
 10529  00321C  B4D8               	btfsc	status,2,c
 10530  00321E  D7C2               	goto	l7224
 10531  003220                     l7230:
 10532                           
 10533                           ;RTC.c: 110: lcdInst(0b10000000);;
 10534  003220  0E80               	movlw	128
 10535  003222  ECDC  F02D         	call	_lcdInst
 10536                           
 10537                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10538  003226  0EA6               	movlw	low STR_21
 10539  003228  0100               	movlb	0	; () banked
 10540  00322A  6F8E               	movwf	printf@f& (0+255),b
 10541  00322C  0EFA               	movlw	high STR_21
 10542  00322E  0100               	movlb	0	; () banked
 10543  003230  6F8F               	movwf	(printf@f+1)& (0+255),b
 10544  003232  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10545  003236  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10546  00323A  0EBE               	movlw	low printRTC@month
 10547  00323C  0100               	movlb	0	; () banked
 10548  00323E  6F92               	movwf	(?_printf+4)& (0+255),b
 10549  003240  0E00               	movlw	high printRTC@month
 10550  003242  0100               	movlb	0	; () banked
 10551  003244  6F93               	movwf	(?_printf+5)& (0+255),b
 10552  003246  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10553  00324A  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10554  00324E  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10555  003252  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10556  003256  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10557  00325A  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10558  00325E  EC8D  F00D         	call	_printf	;wreg free
 10559  003262  0012               	return		;funcret
 10560  003264                     __end_of_printRTC:
 10561                           	opt stack 0
 10562                           tblptru	equ	0xFF8
 10563                           tblptrh	equ	0xFF7
 10564                           tblptrl	equ	0xFF6
 10565                           tablat	equ	0xFF5
 10566                           prodh	equ	0xFF4
 10567                           prodl	equ	0xFF3
 10568                           intcon	equ	0xFF2
 10569                           intcon2	equ	0xFF1
 10570                           intcon3	equ	0xFF0
 10571                           postinc0	equ	0xFEE
 10572                           wreg	equ	0xFE8
 10573                           postdec1	equ	0xFE5
 10574                           fsr1l	equ	0xFE1
 10575                           indf2	equ	0xFDF
 10576                           postinc2	equ	0xFDE
 10577                           postdec2	equ	0xFDD
 10578                           fsr2h	equ	0xFDA
 10579                           fsr2l	equ	0xFD9
 10580                           status	equ	0xFD8
 10581                           
 10582 ;; *************** function _strcpy *****************
 10583 ;; Defined at:
 10584 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10587 ;;		 -> printRTC@month(4), UI@month(4), 
 10588 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10589 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10590 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10591 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10592 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10593 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10594 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10595 ;;		 -> STR_8(4), 
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10598 ;;		 -> printRTC@month(4), UI@month(4), 
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  2    0[BANK0 ] PTR unsigned char 
 10601 ;; Registers used:
 10602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10608 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10611 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10612 ;;Total ram usage:        6 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; Hardware stack levels required when called:    7
 10615 ;; This function calls:
 10616 ;;		Nothing
 10617 ;; This function is called by:
 10618 ;;		_UI
 10619 ;;		_printRTC
 10620 ;; This function uses a non-reentrant model
 10621 ;;
 10622                           
 10623                           	psect	text29
 10624  005656                     __ptext29:
 10625                           	opt stack 0
 10626  005656                     _strcpy:
 10627                           	opt stack 20
 10628                           
 10629                           ;incstack = 0
 10630  005656  C080  F084         	movff	strcpy@to,strcpy@cp
 10631  00565A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10632  00565E  D006               	goto	l6894
 10633  005660                     l6892:
 10634  005660  0100               	movlb	0	; () banked
 10635  005662  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10636  005664  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10637  005666  0100               	movlb	0	; () banked
 10638  005668  4B82               	infsnz	strcpy@from& (0+255),f,b
 10639  00566A  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10640  00566C                     l6894:
 10641  00566C  C082  FFF6         	movff	strcpy@from,tblptrl
 10642  005670  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10643  005674                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10644  005674  6AF8               	clrf	tblptru,c
 10645  005676                     	endif
 10646  005676                     	if	0	;tblptru may be non-zero
 10647  005676                     	endif
 10648  005676  C084  FFD9         	movff	strcpy@cp,fsr2l
 10649  00567A  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10650  00567E  0008               	tblrd		*
 10651  005680  CFF5 FFDF          	movff	tablat,indf2
 10652  005684  50DF               	movf	indf2,w,c
 10653  005686  B4D8               	btfsc	status,2,c
 10654  005688  0012               	return	
 10655  00568A  D7EA               	goto	l6892
 10656  00568C                     __end_of_strcpy:
 10657                           	opt stack 0
 10658                           tblptru	equ	0xFF8
 10659                           tblptrh	equ	0xFF7
 10660                           tblptrl	equ	0xFF6
 10661                           tablat	equ	0xFF5
 10662                           prodh	equ	0xFF4
 10663                           prodl	equ	0xFF3
 10664                           intcon	equ	0xFF2
 10665                           intcon2	equ	0xFF1
 10666                           intcon3	equ	0xFF0
 10667                           postinc0	equ	0xFEE
 10668                           wreg	equ	0xFE8
 10669                           postdec1	equ	0xFE5
 10670                           fsr1l	equ	0xFE1
 10671                           indf2	equ	0xFDF
 10672                           postinc2	equ	0xFDE
 10673                           postdec2	equ	0xFDD
 10674                           fsr2h	equ	0xFDA
 10675                           fsr2l	equ	0xFD9
 10676                           status	equ	0xFD8
 10677                           
 10678 ;; *************** function _getRTC *****************
 10679 ;; Defined at:
 10680 ;;		line 44 in file "RTC.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;		None
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;  i               2    3[BANK0 ] int 
 10685 ;; Return value:  Size  Location     Type
 10686 ;;                  1    wreg      void 
 10687 ;; Registers used:
 10688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10689 ;; Tracked objects:
 10690 ;;		On entry : 0/0
 10691 ;;		On exit  : 0/0
 10692 ;;		Unchanged: 0/0
 10693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10695 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;Total ram usage:        2 bytes
 10699 ;; Hardware stack levels used:    1
 10700 ;; Hardware stack levels required when called:    9
 10701 ;; This function calls:
 10702 ;;		_I2C_Master_Read
 10703 ;;		_I2C_Master_Start
 10704 ;;		_I2C_Master_Stop
 10705 ;;		_I2C_Master_Write
 10706 ;; This function is called by:
 10707 ;;		_printRTC
 10708 ;;		_initSortTimer
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           	psect	text30
 10713  004C84                     __ptext30:
 10714                           	opt stack 0
 10715  004C84                     _getRTC:
 10716                           	opt stack 18
 10717                           
 10718                           ;RTC.c: 48: I2C_Master_Start();
 10719                           
 10720                           ;incstack = 0
 10721  004C84  EC02  F02E         	call	_I2C_Master_Start	;wreg free
 10722                           
 10723                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10724  004C88  0E00               	movlw	0
 10725  004C8A  0100               	movlb	0	; () banked
 10726  004C8C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10727  004C8E  0ED0               	movlw	208
 10728  004C90  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10729  004C92  ECF0  F02D         	call	_I2C_Master_Write	;wreg free
 10730                           
 10731                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10732  004C96  0E00               	movlw	0
 10733  004C98  0100               	movlb	0	; () banked
 10734  004C9A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10735  004C9C  0E00               	movlw	0
 10736  004C9E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10737  004CA0  ECF0  F02D         	call	_I2C_Master_Write	;wreg free
 10738                           
 10739                           ;RTC.c: 51: I2C_Master_Stop();
 10740  004CA4  ECFE  F02D         	call	_I2C_Master_Stop	;wreg free
 10741                           
 10742                           ;RTC.c: 54: I2C_Master_Start();
 10743  004CA8  EC02  F02E         	call	_I2C_Master_Start	;wreg free
 10744                           
 10745                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10746  004CAC  0E00               	movlw	0
 10747  004CAE  0100               	movlb	0	; () banked
 10748  004CB0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10749  004CB2  0ED1               	movlw	209
 10750  004CB4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10751  004CB6  ECF0  F02D         	call	_I2C_Master_Write	;wreg free
 10752                           
 10753                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10754  004CBA  0E00               	movlw	0
 10755  004CBC  0100               	movlb	0	; () banked
 10756  004CBE  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10757  004CC0  0E00               	movlw	0
 10758  004CC2  6F83               	movwf	getRTC@i& (0+255),b
 10759  004CC4                     l6900:
 10760                           
 10761                           ; BSR set to: 0
 10762  004CC4  0100               	movlb	0	; () banked
 10763  004CC6  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10764  004CC8  D008               	goto	l6904
 10765  004CCA  0100               	movlb	0	; () banked
 10766  004CCC  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10767  004CCE  E115               	bnz	l6910
 10768  004CD0  0E06               	movlw	6
 10769  004CD2  0100               	movlb	0	; () banked
 10770  004CD4  5D83               	subwf	getRTC@i& (0+255),w,b
 10771  004CD6  B0D8               	btfsc	status,0,c
 10772  004CD8  D010               	goto	l6910
 10773  004CDA                     l6904:
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10777  004CDA  0E1C               	movlw	low _time
 10778  004CDC  0100               	movlb	0	; () banked
 10779  004CDE  2583               	addwf	getRTC@i& (0+255),w,b
 10780  004CE0  6ED9               	movwf	fsr2l,c
 10781  004CE2  0E01               	movlw	high _time
 10782  004CE4  0100               	movlb	0	; () banked
 10783  004CE6  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10784  004CE8  6EDA               	movwf	fsr2h,c
 10785  004CEA  0E01               	movlw	1
 10786  004CEC  EC83  F02C         	call	_I2C_Master_Read
 10787  004CF0  6EDF               	movwf	indf2,c
 10788  004CF2  0100               	movlb	0	; () banked
 10789  004CF4  4B83               	infsnz	getRTC@i& (0+255),f,b
 10790  004CF6  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10791  004CF8  D7E5               	goto	l6900
 10792  004CFA                     l6910:
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;RTC.c: 58: }
 10796                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10797  004CFA  0E00               	movlw	0
 10798  004CFC  EC83  F02C         	call	_I2C_Master_Read
 10799  004D00  0101               	movlb	1	; () banked
 10800  004D02  6F22               	movwf	(_time+6)& (0+255),b
 10801                           
 10802                           ;RTC.c: 60: I2C_Master_Stop();
 10803  004D04  ECFE  F02D         	call	_I2C_Master_Stop	;wreg free
 10804  004D08  0012               	return		;funcret
 10805  004D0A                     __end_of_getRTC:
 10806                           	opt stack 0
 10807                           tblptru	equ	0xFF8
 10808                           tblptrh	equ	0xFF7
 10809                           tblptrl	equ	0xFF6
 10810                           tablat	equ	0xFF5
 10811                           prodh	equ	0xFF4
 10812                           prodl	equ	0xFF3
 10813                           intcon	equ	0xFF2
 10814                           intcon2	equ	0xFF1
 10815                           intcon3	equ	0xFF0
 10816                           postinc0	equ	0xFEE
 10817                           wreg	equ	0xFE8
 10818                           postdec1	equ	0xFE5
 10819                           fsr1l	equ	0xFE1
 10820                           indf2	equ	0xFDF
 10821                           postinc2	equ	0xFDE
 10822                           postdec2	equ	0xFDD
 10823                           fsr2h	equ	0xFDA
 10824                           fsr2l	equ	0xFD9
 10825                           status	equ	0xFD8
 10826                           
 10827 ;; *************** function _I2C_Master_Write *****************
 10828 ;; Defined at:
 10829 ;;		line 49 in file "I2C.c"
 10830 ;; Parameters:    Size  Location     Type
 10831 ;;  d               2    1[BANK0 ] unsigned int 
 10832 ;; Auto vars:     Size  Location     Type
 10833 ;;		None
 10834 ;; Return value:  Size  Location     Type
 10835 ;;                  1    wreg      void 
 10836 ;; Registers used:
 10837 ;;		wreg, status,2, status,0, cstack
 10838 ;; Tracked objects:
 10839 ;;		On entry : 0/0
 10840 ;;		On exit  : 0/0
 10841 ;;		Unchanged: 0/0
 10842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10843 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10846 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;Total ram usage:        2 bytes
 10848 ;; Hardware stack levels used:    1
 10849 ;; Hardware stack levels required when called:    8
 10850 ;; This function calls:
 10851 ;;		_I2C_Master_Wait
 10852 ;; This function is called by:
 10853 ;;		_loadRTC
 10854 ;;		_getRTC
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858                           	psect	text31
 10859  005BE0                     __ptext31:
 10860                           	opt stack 0
 10861  005BE0                     _I2C_Master_Write:
 10862                           	opt stack 18
 10863                           
 10864                           ;I2C.c: 51: I2C_Master_Wait();
 10865                           
 10866                           ;incstack = 0
 10867  005BE0  ECC1  F02D         	call	_I2C_Master_Wait	;wreg free
 10868                           
 10869                           ;I2C.c: 52: SSPBUF = d;
 10870  005BE4  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10871  005BE8  0012               	return		;funcret
 10872  005BEA                     __end_of_I2C_Master_Write:
 10873                           	opt stack 0
 10874                           tblptru	equ	0xFF8
 10875                           tblptrh	equ	0xFF7
 10876                           tblptrl	equ	0xFF6
 10877                           tablat	equ	0xFF5
 10878                           prodh	equ	0xFF4
 10879                           prodl	equ	0xFF3
 10880                           intcon	equ	0xFF2
 10881                           intcon2	equ	0xFF1
 10882                           intcon3	equ	0xFF0
 10883                           postinc0	equ	0xFEE
 10884                           wreg	equ	0xFE8
 10885                           postdec1	equ	0xFE5
 10886                           fsr1l	equ	0xFE1
 10887                           indf2	equ	0xFDF
 10888                           postinc2	equ	0xFDE
 10889                           postdec2	equ	0xFDD
 10890                           fsr2h	equ	0xFDA
 10891                           fsr2l	equ	0xFD9
 10892                           status	equ	0xFD8
 10893                           
 10894 ;; *************** function _I2C_Master_Stop *****************
 10895 ;; Defined at:
 10896 ;;		line 43 in file "I2C.c"
 10897 ;; Parameters:    Size  Location     Type
 10898 ;;		None
 10899 ;; Auto vars:     Size  Location     Type
 10900 ;;		None
 10901 ;; Return value:  Size  Location     Type
 10902 ;;                  1    wreg      void 
 10903 ;; Registers used:
 10904 ;;		wreg, status,2, status,0, cstack
 10905 ;; Tracked objects:
 10906 ;;		On entry : 0/0
 10907 ;;		On exit  : 0/0
 10908 ;;		Unchanged: 0/0
 10909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;Total ram usage:        0 bytes
 10915 ;; Hardware stack levels used:    1
 10916 ;; Hardware stack levels required when called:    8
 10917 ;; This function calls:
 10918 ;;		_I2C_Master_Wait
 10919 ;; This function is called by:
 10920 ;;		_loadRTC
 10921 ;;		_getRTC
 10922 ;; This function uses a non-reentrant model
 10923 ;;
 10924                           
 10925                           	psect	text32
 10926  005BFC                     __ptext32:
 10927                           	opt stack 0
 10928  005BFC                     _I2C_Master_Stop:
 10929                           	opt stack 18
 10930                           
 10931                           ;I2C.c: 45: I2C_Master_Wait();
 10932                           
 10933                           ;incstack = 0
 10934  005BFC  ECC1  F02D         	call	_I2C_Master_Wait	;wreg free
 10935                           
 10936                           ;I2C.c: 46: PEN = 1;
 10937  005C00  84C5               	bsf	4037,2,c	;volatile
 10938  005C02  0012               	return		;funcret
 10939  005C04                     __end_of_I2C_Master_Stop:
 10940                           	opt stack 0
 10941                           tblptru	equ	0xFF8
 10942                           tblptrh	equ	0xFF7
 10943                           tblptrl	equ	0xFF6
 10944                           tablat	equ	0xFF5
 10945                           prodh	equ	0xFF4
 10946                           prodl	equ	0xFF3
 10947                           intcon	equ	0xFF2
 10948                           intcon2	equ	0xFF1
 10949                           intcon3	equ	0xFF0
 10950                           postinc0	equ	0xFEE
 10951                           wreg	equ	0xFE8
 10952                           postdec1	equ	0xFE5
 10953                           fsr1l	equ	0xFE1
 10954                           indf2	equ	0xFDF
 10955                           postinc2	equ	0xFDE
 10956                           postdec2	equ	0xFDD
 10957                           fsr2h	equ	0xFDA
 10958                           fsr2l	equ	0xFD9
 10959                           status	equ	0xFD8
 10960                           
 10961 ;; *************** function _I2C_Master_Start *****************
 10962 ;; Defined at:
 10963 ;;		line 31 in file "I2C.c"
 10964 ;; Parameters:    Size  Location     Type
 10965 ;;		None
 10966 ;; Auto vars:     Size  Location     Type
 10967 ;;		None
 10968 ;; Return value:  Size  Location     Type
 10969 ;;                  1    wreg      void 
 10970 ;; Registers used:
 10971 ;;		wreg, status,2, status,0, cstack
 10972 ;; Tracked objects:
 10973 ;;		On entry : 0/0
 10974 ;;		On exit  : 0/0
 10975 ;;		Unchanged: 0/0
 10976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;Total ram usage:        0 bytes
 10982 ;; Hardware stack levels used:    1
 10983 ;; Hardware stack levels required when called:    8
 10984 ;; This function calls:
 10985 ;;		_I2C_Master_Wait
 10986 ;; This function is called by:
 10987 ;;		_loadRTC
 10988 ;;		_getRTC
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           	psect	text33
 10993  005C04                     __ptext33:
 10994                           	opt stack 0
 10995  005C04                     _I2C_Master_Start:
 10996                           	opt stack 18
 10997                           
 10998                           ;I2C.c: 33: I2C_Master_Wait();
 10999                           
 11000                           ;incstack = 0
 11001  005C04  ECC1  F02D         	call	_I2C_Master_Wait	;wreg free
 11002                           
 11003                           ;I2C.c: 34: SEN = 1;
 11004  005C08  80C5               	bsf	4037,0,c	;volatile
 11005  005C0A  0012               	return		;funcret
 11006  005C0C                     __end_of_I2C_Master_Start:
 11007                           	opt stack 0
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           prodh	equ	0xFF4
 11013                           prodl	equ	0xFF3
 11014                           intcon	equ	0xFF2
 11015                           intcon2	equ	0xFF1
 11016                           intcon3	equ	0xFF0
 11017                           postinc0	equ	0xFEE
 11018                           wreg	equ	0xFE8
 11019                           postdec1	equ	0xFE5
 11020                           fsr1l	equ	0xFE1
 11021                           indf2	equ	0xFDF
 11022                           postinc2	equ	0xFDE
 11023                           postdec2	equ	0xFDD
 11024                           fsr2h	equ	0xFDA
 11025                           fsr2l	equ	0xFD9
 11026                           status	equ	0xFD8
 11027                           
 11028 ;; *************** function _I2C_Master_Read *****************
 11029 ;; Defined at:
 11030 ;;		line 55 in file "I2C.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;  a               1    wreg     unsigned char 
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;  a               1    1[BANK0 ] unsigned char 
 11035 ;;  temp            1    2[BANK0 ] unsigned char 
 11036 ;; Return value:  Size  Location     Type
 11037 ;;                  1    wreg      unsigned char 
 11038 ;; Registers used:
 11039 ;;		wreg, status,2, status,0, cstack
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11049 ;;Total ram usage:        2 bytes
 11050 ;; Hardware stack levels used:    1
 11051 ;; Hardware stack levels required when called:    8
 11052 ;; This function calls:
 11053 ;;		_I2C_Master_Wait
 11054 ;; This function is called by:
 11055 ;;		_getRTC
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059                           	psect	text34
 11060  005906                     __ptext34:
 11061                           	opt stack 0
 11062  005906                     _I2C_Master_Read:
 11063                           	opt stack 18
 11064                           
 11065                           ;incstack = 0
 11066                           ;I2C_Master_Read@a stored from wreg
 11067  005906  0100               	movlb	0	; () banked
 11068  005908  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11069                           
 11070                           ;I2C.c: 57: unsigned char temp;
 11071                           ;I2C.c: 58: I2C_Master_Wait();
 11072  00590A  ECC1  F02D         	call	_I2C_Master_Wait	;wreg free
 11073                           
 11074                           ;I2C.c: 59: RCEN = 1;
 11075  00590E  86C5               	bsf	4037,3,c	;volatile
 11076                           
 11077                           ;I2C.c: 60: I2C_Master_Wait();
 11078  005910  ECC1  F02D         	call	_I2C_Master_Wait	;wreg free
 11079                           
 11080                           ;I2C.c: 61: temp = SSPBUF;
 11081  005914  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11082                           
 11083                           ;I2C.c: 62: I2C_Master_Wait();
 11084  005918  ECC1  F02D         	call	_I2C_Master_Wait	;wreg free
 11085                           
 11086                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11087  00591C  0100               	movlb	0	; () banked
 11088  00591E  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11089  005920  0100               	movlb	0	; () banked
 11090  005922  A4D8               	btfss	status,2,c
 11091  005924  D002               	goto	u5020
 11092  005926  8AC5               	bsf	4037,5,c	;volatile
 11093  005928  D001               	goto	l6588
 11094  00592A                     u5020:
 11095  00592A  9AC5               	bcf	4037,5,c	;volatile
 11096  00592C                     l6588:
 11097                           
 11098                           ;I2C.c: 64: ACKEN = 1;
 11099  00592C  88C5               	bsf	4037,4,c	;volatile
 11100                           
 11101                           ;I2C.c: 65: return temp;
 11102  00592E  0100               	movlb	0	; () banked
 11103  005930  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11104  005932  0012               	return	
 11105  005934                     __end_of_I2C_Master_Read:
 11106                           	opt stack 0
 11107                           tblptru	equ	0xFF8
 11108                           tblptrh	equ	0xFF7
 11109                           tblptrl	equ	0xFF6
 11110                           tablat	equ	0xFF5
 11111                           prodh	equ	0xFF4
 11112                           prodl	equ	0xFF3
 11113                           intcon	equ	0xFF2
 11114                           intcon2	equ	0xFF1
 11115                           intcon3	equ	0xFF0
 11116                           postinc0	equ	0xFEE
 11117                           wreg	equ	0xFE8
 11118                           postdec1	equ	0xFE5
 11119                           fsr1l	equ	0xFE1
 11120                           indf2	equ	0xFDF
 11121                           postinc2	equ	0xFDE
 11122                           postdec2	equ	0xFDD
 11123                           fsr2h	equ	0xFDA
 11124                           fsr2l	equ	0xFD9
 11125                           status	equ	0xFD8
 11126                           
 11127 ;; *************** function _I2C_Master_Wait *****************
 11128 ;; Defined at:
 11129 ;;		line 26 in file "I2C.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;		None
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;		None
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      void 
 11136 ;; Registers used:
 11137 ;;		wreg, status,2, status,0
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;Total ram usage:        1 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    7
 11150 ;; This function calls:
 11151 ;;		Nothing
 11152 ;; This function is called by:
 11153 ;;		_I2C_Master_Start
 11154 ;;		_I2C_Master_Stop
 11155 ;;		_I2C_Master_Write
 11156 ;;		_I2C_Master_Read
 11157 ;;		_I2C_Master_RepeatedStart
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           	psect	text35
 11162  005B82                     __ptext35:
 11163                           	opt stack 0
 11164  005B82                     _I2C_Master_Wait:
 11165                           	opt stack 18
 11166  005B82                     l71:
 11167  005B82  B4C7               	btfsc	4039,2,c	;volatile
 11168  005B84  D7FE               	goto	l71
 11169  005B86  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11170  005B8A  0E1F               	movlw	31
 11171  005B8C  0100               	movlb	0	; () banked
 11172  005B8E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11173  005B90  B4D8               	btfsc	status,2,c
 11174  005B92  0012               	return	
 11175  005B94  D7F6               	goto	l71
 11176  005B96                     __end_of_I2C_Master_Wait:
 11177                           	opt stack 0
 11178                           tblptru	equ	0xFF8
 11179                           tblptrh	equ	0xFF7
 11180                           tblptrl	equ	0xFF6
 11181                           tablat	equ	0xFF5
 11182                           prodh	equ	0xFF4
 11183                           prodl	equ	0xFF3
 11184                           intcon	equ	0xFF2
 11185                           intcon2	equ	0xFF1
 11186                           intcon3	equ	0xFF0
 11187                           postinc0	equ	0xFEE
 11188                           wreg	equ	0xFE8
 11189                           postdec1	equ	0xFE5
 11190                           fsr1l	equ	0xFE1
 11191                           indf2	equ	0xFDF
 11192                           postinc2	equ	0xFDE
 11193                           postdec2	equ	0xFDD
 11194                           fsr2h	equ	0xFDA
 11195                           fsr2l	equ	0xFD9
 11196                           status	equ	0xFD8
 11197                           
 11198 ;; *************** function _change_state_to_menu_22 *****************
 11199 ;; Defined at:
 11200 ;;		line 501 in file "UI.c"
 11201 ;; Parameters:    Size  Location     Type
 11202 ;;		None
 11203 ;; Auto vars:     Size  Location     Type
 11204 ;;		None
 11205 ;; Return value:  Size  Location     Type
 11206 ;;                  1    wreg      void 
 11207 ;; Registers used:
 11208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11209 ;; Tracked objects:
 11210 ;;		On entry : 0/0
 11211 ;;		On exit  : 0/0
 11212 ;;		Unchanged: 0/0
 11213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11218 ;;Total ram usage:        0 bytes
 11219 ;; Hardware stack levels used:    1
 11220 ;; Hardware stack levels required when called:   10
 11221 ;; This function calls:
 11222 ;;		_lcdInst
 11223 ;;		_printf
 11224 ;; This function is called by:
 11225 ;;		_UI
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           	psect	text36
 11230  0055E6                     __ptext36:
 11231                           	opt stack 0
 11232  0055E6                     _change_state_to_menu_22:
 11233                           	opt stack 19
 11234                           
 11235                           ;UI.c: 502: cur_state = 22;
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;incstack = 0
 11239  0055E6  0E00               	movlw	0
 11240  0055E8  0100               	movlb	0	; () banked
 11241  0055EA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11242  0055EC  0E16               	movlw	22
 11243  0055EE  6FE6               	movwf	_cur_state& (0+255),b
 11244                           
 11245                           ; BSR set to: 0
 11246                           ;UI.c: 504: lcdInst(0b10000000);;
 11247  0055F0  0E80               	movlw	128
 11248  0055F2  ECDC  F02D         	call	_lcdInst
 11249                           
 11250                           ;UI.c: 505: printf("2. SORT        <");
 11251  0055F6  0EB7               	movlw	low STR_34
 11252  0055F8  0100               	movlb	0	; () banked
 11253  0055FA  6F8E               	movwf	printf@f& (0+255),b
 11254  0055FC  0EFD               	movlw	high STR_34
 11255  0055FE  0100               	movlb	0	; () banked
 11256  005600  6F8F               	movwf	(printf@f+1)& (0+255),b
 11257  005602  EC8D  F00D         	call	_printf	;wreg free
 11258                           
 11259                           ;UI.c: 506: lcdInst(0b11000000);;
 11260  005606  0EC0               	movlw	192
 11261  005608  ECDC  F02D         	call	_lcdInst
 11262                           
 11263                           ;UI.c: 507: printf("3. LOGS         ");
 11264  00560C  0EFC               	movlw	low STR_36
 11265  00560E  0100               	movlb	0	; () banked
 11266  005610  6F8E               	movwf	printf@f& (0+255),b
 11267  005612  0EFC               	movlw	high STR_36
 11268  005614  0100               	movlb	0	; () banked
 11269  005616  6F8F               	movwf	(printf@f+1)& (0+255),b
 11270  005618  EC8D  F00D         	call	_printf	;wreg free
 11271  00561C  0012               	return		;funcret
 11272  00561E                     __end_of_change_state_to_menu_22:
 11273                           	opt stack 0
 11274                           tblptru	equ	0xFF8
 11275                           tblptrh	equ	0xFF7
 11276                           tblptrl	equ	0xFF6
 11277                           tablat	equ	0xFF5
 11278                           prodh	equ	0xFF4
 11279                           prodl	equ	0xFF3
 11280                           intcon	equ	0xFF2
 11281                           intcon2	equ	0xFF1
 11282                           intcon3	equ	0xFF0
 11283                           postinc0	equ	0xFEE
 11284                           wreg	equ	0xFE8
 11285                           postdec1	equ	0xFE5
 11286                           fsr1l	equ	0xFE1
 11287                           indf2	equ	0xFDF
 11288                           postinc2	equ	0xFDE
 11289                           postdec2	equ	0xFDD
 11290                           fsr2h	equ	0xFDA
 11291                           fsr2l	equ	0xFD9
 11292                           status	equ	0xFD8
 11293                           
 11294 ;; *************** function _change_state_to_menu_12 *****************
 11295 ;; Defined at:
 11296 ;;		line 493 in file "UI.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;		None
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;		None
 11301 ;; Return value:  Size  Location     Type
 11302 ;;                  1    wreg      void 
 11303 ;; Registers used:
 11304 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;Total ram usage:        0 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:   10
 11317 ;; This function calls:
 11318 ;;		_lcdInst
 11319 ;;		_printf
 11320 ;; This function is called by:
 11321 ;;		_UI
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           	psect	text37
 11326  00561E                     __ptext37:
 11327                           	opt stack 0
 11328  00561E                     _change_state_to_menu_12:
 11329                           	opt stack 19
 11330                           
 11331                           ;UI.c: 494: cur_state = 12;
 11332                           
 11333                           ;incstack = 0
 11334  00561E  0E00               	movlw	0
 11335  005620  0100               	movlb	0	; () banked
 11336  005622  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11337  005624  0E0C               	movlw	12
 11338  005626  6FE6               	movwf	_cur_state& (0+255),b
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;UI.c: 496: lcdInst(0b10000000);;
 11342  005628  0E80               	movlw	128
 11343  00562A  ECDC  F02D         	call	_lcdInst
 11344                           
 11345                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11346  00562E  0E1E               	movlw	low STR_33
 11347  005630  0100               	movlb	0	; () banked
 11348  005632  6F8E               	movwf	printf@f& (0+255),b
 11349  005634  0EFD               	movlw	high STR_33
 11350  005636  0100               	movlb	0	; () banked
 11351  005638  6F8F               	movwf	(printf@f+1)& (0+255),b
 11352  00563A  EC8D  F00D         	call	_printf	;wreg free
 11353                           
 11354                           ;UI.c: 498: lcdInst(0b11000000);;
 11355  00563E  0EC0               	movlw	192
 11356  005640  ECDC  F02D         	call	_lcdInst
 11357                           
 11358                           ;UI.c: 499: printf("2. SORT        <");
 11359  005644  0EB7               	movlw	low STR_34
 11360  005646  0100               	movlb	0	; () banked
 11361  005648  6F8E               	movwf	printf@f& (0+255),b
 11362  00564A  0EFD               	movlw	high STR_34
 11363  00564C  0100               	movlb	0	; () banked
 11364  00564E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11365  005650  EC8D  F00D         	call	_printf	;wreg free
 11366  005654  0012               	return		;funcret
 11367  005656                     __end_of_change_state_to_menu_12:
 11368                           	opt stack 0
 11369                           tblptru	equ	0xFF8
 11370                           tblptrh	equ	0xFF7
 11371                           tblptrl	equ	0xFF6
 11372                           tablat	equ	0xFF5
 11373                           prodh	equ	0xFF4
 11374                           prodl	equ	0xFF3
 11375                           intcon	equ	0xFF2
 11376                           intcon2	equ	0xFF1
 11377                           intcon3	equ	0xFF0
 11378                           postinc0	equ	0xFEE
 11379                           wreg	equ	0xFE8
 11380                           postdec1	equ	0xFE5
 11381                           fsr1l	equ	0xFE1
 11382                           indf2	equ	0xFDF
 11383                           postinc2	equ	0xFDE
 11384                           postdec2	equ	0xFDD
 11385                           fsr2h	equ	0xFDA
 11386                           fsr2l	equ	0xFD9
 11387                           status	equ	0xFD8
 11388                           
 11389 ;; *************** function ___awmod *****************
 11390 ;; Defined at:
 11391 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;  dividend        2    0[BANK0 ] int 
 11394 ;;  divisor         2    2[BANK0 ] int 
 11395 ;; Auto vars:     Size  Location     Type
 11396 ;;  sign            1    5[BANK0 ] unsigned char 
 11397 ;;  counter         1    4[BANK0 ] unsigned char 
 11398 ;; Return value:  Size  Location     Type
 11399 ;;                  2    0[BANK0 ] int 
 11400 ;; Registers used:
 11401 ;;		wreg, status,2, status,0
 11402 ;; Tracked objects:
 11403 ;;		On entry : 0/0
 11404 ;;		On exit  : 0/0
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11407 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11410 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;Total ram usage:        6 bytes
 11412 ;; Hardware stack levels used:    1
 11413 ;; Hardware stack levels required when called:    7
 11414 ;; This function calls:
 11415 ;;		Nothing
 11416 ;; This function is called by:
 11417 ;;		_UI
 11418 ;; This function uses a non-reentrant model
 11419 ;;
 11420                           
 11421                           	psect	text38
 11422  004B56                     __ptext38:
 11423                           	opt stack 0
 11424  004B56                     ___awmod:
 11425                           	opt stack 22
 11426                           
 11427                           ;incstack = 0
 11428  004B56  0E00               	movlw	0
 11429  004B58  0100               	movlb	0	; () banked
 11430  004B5A  6F85               	movwf	___awmod@sign& (0+255),b
 11431                           
 11432                           ; BSR set to: 0
 11433  004B5C  0100               	movlb	0	; () banked
 11434  004B5E  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11435  004B60  D008               	goto	l9238
 11436                           
 11437                           ; BSR set to: 0
 11438  004B62  0100               	movlb	0	; () banked
 11439  004B64  6D80               	negf	___awmod@dividend& (0+255),b
 11440  004B66  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11441  004B68  B0D8               	btfsc	status,0,c
 11442  004B6A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11443                           
 11444                           ; BSR set to: 0
 11445  004B6C  0E01               	movlw	1
 11446  004B6E  0100               	movlb	0	; () banked
 11447  004B70  6F85               	movwf	___awmod@sign& (0+255),b
 11448  004B72                     l9238:
 11449                           
 11450                           ; BSR set to: 0
 11451  004B72  0100               	movlb	0	; () banked
 11452  004B74  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11453  004B76  D005               	goto	l9242
 11454                           
 11455                           ; BSR set to: 0
 11456  004B78  0100               	movlb	0	; () banked
 11457  004B7A  6D82               	negf	___awmod@divisor& (0+255),b
 11458  004B7C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11459  004B7E  B0D8               	btfsc	status,0,c
 11460  004B80  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11461  004B82                     l9242:
 11462                           
 11463                           ; BSR set to: 0
 11464  004B82  0100               	movlb	0	; () banked
 11465  004B84  5182               	movf	___awmod@divisor& (0+255),w,b
 11466  004B86  0100               	movlb	0	; () banked
 11467  004B88  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11468  004B8A  B4D8               	btfsc	status,2,c
 11469  004B8C  D026               	goto	l9258
 11470                           
 11471                           ; BSR set to: 0
 11472  004B8E  0E01               	movlw	1
 11473  004B90  0100               	movlb	0	; () banked
 11474  004B92  6F84               	movwf	___awmod@counter& (0+255),b
 11475  004B94  D006               	goto	l9248
 11476  004B96                     l9246:
 11477                           
 11478                           ; BSR set to: 0
 11479  004B96  0100               	movlb	0	; () banked
 11480  004B98  90D8               	bcf	status,0,c
 11481  004B9A  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11482  004B9C  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11483  004B9E  0100               	movlb	0	; () banked
 11484  004BA0  2B84               	incf	___awmod@counter& (0+255),f,b
 11485  004BA2                     l9248:
 11486                           
 11487                           ; BSR set to: 0
 11488  004BA2  0100               	movlb	0	; () banked
 11489  004BA4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11490  004BA6  D7F7               	goto	l9246
 11491  004BA8                     l9250:
 11492                           
 11493                           ; BSR set to: 0
 11494  004BA8  0100               	movlb	0	; () banked
 11495  004BAA  5182               	movf	___awmod@divisor& (0+255),w,b
 11496  004BAC  0100               	movlb	0	; () banked
 11497  004BAE  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11498  004BB0  0100               	movlb	0	; () banked
 11499  004BB2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11500  004BB4  0100               	movlb	0	; () banked
 11501  004BB6  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11502  004BB8  A0D8               	btfss	status,0,c
 11503  004BBA  D008               	goto	l9254
 11504                           
 11505                           ; BSR set to: 0
 11506  004BBC  0100               	movlb	0	; () banked
 11507  004BBE  5182               	movf	___awmod@divisor& (0+255),w,b
 11508  004BC0  0100               	movlb	0	; () banked
 11509  004BC2  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11510  004BC4  0100               	movlb	0	; () banked
 11511  004BC6  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11512  004BC8  0100               	movlb	0	; () banked
 11513  004BCA  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11514  004BCC                     l9254:
 11515                           
 11516                           ; BSR set to: 0
 11517  004BCC  0100               	movlb	0	; () banked
 11518  004BCE  90D8               	bcf	status,0,c
 11519  004BD0  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11520  004BD2  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11521                           
 11522                           ; BSR set to: 0
 11523  004BD4  0100               	movlb	0	; () banked
 11524  004BD6  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11525  004BD8  D7E7               	goto	l9250
 11526  004BDA                     l9258:
 11527                           
 11528                           ; BSR set to: 0
 11529  004BDA  0100               	movlb	0	; () banked
 11530  004BDC  5185               	movf	___awmod@sign& (0+255),w,b
 11531  004BDE  0100               	movlb	0	; () banked
 11532  004BE0  B4D8               	btfsc	status,2,c
 11533  004BE2  D005               	goto	l9262
 11534                           
 11535                           ; BSR set to: 0
 11536  004BE4  0100               	movlb	0	; () banked
 11537  004BE6  6D80               	negf	___awmod@dividend& (0+255),b
 11538  004BE8  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11539  004BEA  B0D8               	btfsc	status,0,c
 11540  004BEC  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11541  004BEE                     l9262:
 11542                           
 11543                           ; BSR set to: 0
 11544  004BEE  C080  F080         	movff	___awmod@dividend,?___awmod
 11545  004BF2  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11546  004BF6  0012               	return	
 11547  004BF8                     __end_of___awmod:
 11548                           	opt stack 0
 11549                           tblptru	equ	0xFF8
 11550                           tblptrh	equ	0xFF7
 11551                           tblptrl	equ	0xFF6
 11552                           tablat	equ	0xFF5
 11553                           prodh	equ	0xFF4
 11554                           prodl	equ	0xFF3
 11555                           intcon	equ	0xFF2
 11556                           intcon2	equ	0xFF1
 11557                           intcon3	equ	0xFF0
 11558                           postinc0	equ	0xFEE
 11559                           wreg	equ	0xFE8
 11560                           postdec1	equ	0xFE5
 11561                           fsr1l	equ	0xFE1
 11562                           indf2	equ	0xFDF
 11563                           postinc2	equ	0xFDE
 11564                           postdec2	equ	0xFDD
 11565                           fsr2h	equ	0xFDA
 11566                           fsr2l	equ	0xFD9
 11567                           status	equ	0xFD8
 11568                           
 11569 ;; *************** function ___awdiv *****************
 11570 ;; Defined at:
 11571 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;  dividend        2    6[BANK0 ] int 
 11574 ;;  divisor         2    8[BANK0 ] int 
 11575 ;; Auto vars:     Size  Location     Type
 11576 ;;  quotient        2   12[BANK0 ] int 
 11577 ;;  sign            1   11[BANK0 ] unsigned char 
 11578 ;;  counter         1   10[BANK0 ] unsigned char 
 11579 ;; Return value:  Size  Location     Type
 11580 ;;                  2    6[BANK0 ] int 
 11581 ;; Registers used:
 11582 ;;		wreg, status,2, status,0
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11588 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;Total ram usage:        8 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    7
 11595 ;; This function calls:
 11596 ;;		Nothing
 11597 ;; This function is called by:
 11598 ;;		_UI
 11599 ;;		_ID
 11600 ;; This function uses a non-reentrant model
 11601 ;;
 11602                           
 11603                           	psect	text39
 11604  004932                     __ptext39:
 11605                           	opt stack 0
 11606  004932                     ___awdiv:
 11607                           	opt stack 21
 11608                           
 11609                           ; BSR set to: 0
 11610                           ;incstack = 0
 11611  004932  0E00               	movlw	0
 11612  004934  0100               	movlb	0	; () banked
 11613  004936  6F8B               	movwf	___awdiv@sign& (0+255),b
 11614                           
 11615                           ; BSR set to: 0
 11616  004938  0100               	movlb	0	; () banked
 11617  00493A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11618  00493C  D008               	goto	l7516
 11619                           
 11620                           ; BSR set to: 0
 11621  00493E  0100               	movlb	0	; () banked
 11622  004940  6D88               	negf	___awdiv@divisor& (0+255),b
 11623  004942  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11624  004944  B0D8               	btfsc	status,0,c
 11625  004946  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11626                           
 11627                           ; BSR set to: 0
 11628  004948  0E01               	movlw	1
 11629  00494A  0100               	movlb	0	; () banked
 11630  00494C  6F8B               	movwf	___awdiv@sign& (0+255),b
 11631  00494E                     l7516:
 11632                           
 11633                           ; BSR set to: 0
 11634  00494E  0100               	movlb	0	; () banked
 11635  004950  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11636  004952  D008               	goto	l7522
 11637                           
 11638                           ; BSR set to: 0
 11639  004954  0100               	movlb	0	; () banked
 11640  004956  6D86               	negf	___awdiv@dividend& (0+255),b
 11641  004958  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11642  00495A  B0D8               	btfsc	status,0,c
 11643  00495C  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11644                           
 11645                           ; BSR set to: 0
 11646  00495E  0E01               	movlw	1
 11647  004960  0100               	movlb	0	; () banked
 11648  004962  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11649  004964                     l7522:
 11650                           
 11651                           ; BSR set to: 0
 11652  004964  0E00               	movlw	0
 11653  004966  0100               	movlb	0	; () banked
 11654  004968  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11655  00496A  0E00               	movlw	0
 11656  00496C  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11657                           
 11658                           ; BSR set to: 0
 11659  00496E  0100               	movlb	0	; () banked
 11660  004970  5188               	movf	___awdiv@divisor& (0+255),w,b
 11661  004972  0100               	movlb	0	; () banked
 11662  004974  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11663  004976  B4D8               	btfsc	status,2,c
 11664  004978  D02C               	goto	l7544
 11665                           
 11666                           ; BSR set to: 0
 11667  00497A  0E01               	movlw	1
 11668  00497C  0100               	movlb	0	; () banked
 11669  00497E  6F8A               	movwf	___awdiv@counter& (0+255),b
 11670  004980  D006               	goto	l7530
 11671  004982                     l7528:
 11672                           
 11673                           ; BSR set to: 0
 11674  004982  0100               	movlb	0	; () banked
 11675  004984  90D8               	bcf	status,0,c
 11676  004986  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11677  004988  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11678  00498A  0100               	movlb	0	; () banked
 11679  00498C  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11680  00498E                     l7530:
 11681                           
 11682                           ; BSR set to: 0
 11683  00498E  0100               	movlb	0	; () banked
 11684  004990  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11685  004992  D7F7               	goto	l7528
 11686  004994                     l7532:
 11687                           
 11688                           ; BSR set to: 0
 11689  004994  0100               	movlb	0	; () banked
 11690  004996  90D8               	bcf	status,0,c
 11691  004998  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11692  00499A  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11693                           
 11694                           ; BSR set to: 0
 11695  00499C  0100               	movlb	0	; () banked
 11696  00499E  5188               	movf	___awdiv@divisor& (0+255),w,b
 11697  0049A0  0100               	movlb	0	; () banked
 11698  0049A2  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11699  0049A4  0100               	movlb	0	; () banked
 11700  0049A6  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11701  0049A8  0100               	movlb	0	; () banked
 11702  0049AA  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11703  0049AC  A0D8               	btfss	status,0,c
 11704  0049AE  D00A               	goto	l7540
 11705                           
 11706                           ; BSR set to: 0
 11707  0049B0  0100               	movlb	0	; () banked
 11708  0049B2  5188               	movf	___awdiv@divisor& (0+255),w,b
 11709  0049B4  0100               	movlb	0	; () banked
 11710  0049B6  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11711  0049B8  0100               	movlb	0	; () banked
 11712  0049BA  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11713  0049BC  0100               	movlb	0	; () banked
 11714  0049BE  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11715                           
 11716                           ; BSR set to: 0
 11717  0049C0  0100               	movlb	0	; () banked
 11718  0049C2  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11719  0049C4                     l7540:
 11720                           
 11721                           ; BSR set to: 0
 11722  0049C4  0100               	movlb	0	; () banked
 11723  0049C6  90D8               	bcf	status,0,c
 11724  0049C8  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11725  0049CA  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11726                           
 11727                           ; BSR set to: 0
 11728  0049CC  0100               	movlb	0	; () banked
 11729  0049CE  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11730  0049D0  D7E1               	goto	l7532
 11731  0049D2                     l7544:
 11732                           
 11733                           ; BSR set to: 0
 11734  0049D2  0100               	movlb	0	; () banked
 11735  0049D4  518B               	movf	___awdiv@sign& (0+255),w,b
 11736  0049D6  0100               	movlb	0	; () banked
 11737  0049D8  B4D8               	btfsc	status,2,c
 11738  0049DA  D005               	goto	l7548
 11739                           
 11740                           ; BSR set to: 0
 11741  0049DC  0100               	movlb	0	; () banked
 11742  0049DE  6D8C               	negf	___awdiv@quotient& (0+255),b
 11743  0049E0  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11744  0049E2  B0D8               	btfsc	status,0,c
 11745  0049E4  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11746  0049E6                     l7548:
 11747                           
 11748                           ; BSR set to: 0
 11749  0049E6  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11750  0049EA  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11751  0049EE  0012               	return	
 11752  0049F0                     __end_of___awdiv:
 11753                           	opt stack 0
 11754                           tblptru	equ	0xFF8
 11755                           tblptrh	equ	0xFF7
 11756                           tblptrl	equ	0xFF6
 11757                           tablat	equ	0xFF5
 11758                           prodh	equ	0xFF4
 11759                           prodl	equ	0xFF3
 11760                           intcon	equ	0xFF2
 11761                           intcon2	equ	0xFF1
 11762                           intcon3	equ	0xFF0
 11763                           postinc0	equ	0xFEE
 11764                           wreg	equ	0xFE8
 11765                           postdec1	equ	0xFE5
 11766                           fsr1l	equ	0xFE1
 11767                           indf2	equ	0xFDF
 11768                           postinc2	equ	0xFDE
 11769                           postdec2	equ	0xFDD
 11770                           fsr2h	equ	0xFDA
 11771                           fsr2l	equ	0xFD9
 11772                           status	equ	0xFD8
 11773                           
 11774 ;; *************** function _Test *****************
 11775 ;; Defined at:
 11776 ;;		line 31 in file "Test.c"
 11777 ;; Parameters:    Size  Location     Type
 11778 ;;		None
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;		None
 11781 ;; Return value:  Size  Location     Type
 11782 ;;                  1    wreg      void 
 11783 ;; Registers used:
 11784 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11785 ;; Tracked objects:
 11786 ;;		On entry : 0/0
 11787 ;;		On exit  : 0/0
 11788 ;;		Unchanged: 0/0
 11789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11794 ;;Total ram usage:        2 bytes
 11795 ;; Hardware stack levels used:    1
 11796 ;; Hardware stack levels required when called:   11
 11797 ;; This function calls:
 11798 ;;		_BlockerTest
 11799 ;;		_BothServos
 11800 ;;		_PlatformTest
 11801 ;;		_PortTestDC
 11802 ;;		_PortTestPusher
 11803 ;;		_SpeedTest
 11804 ;;		_actuatorTest
 11805 ;;		_algorithmTest
 11806 ;;		_arm
 11807 ;;		_lcdInst
 11808 ;;		_printf
 11809 ;;		_sensorTest
 11810 ;; This function is called by:
 11811 ;;		_main
 11812 ;; This function uses a non-reentrant model
 11813 ;;
 11814                           
 11815                           	psect	text40
 11816  004234                     __ptext40:
 11817                           	opt stack 0
 11818  004234                     _Test:
 11819                           	opt stack 19
 11820                           
 11821                           ;Test.c: 33: while(machine_state == Testing_state){
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;incstack = 0
 11825  004234  D07C               	goto	l10024
 11826  004236                     l9984:
 11827                           
 11828                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11829  004236  0E01               	movlw	1
 11830  004238  ECDC  F02D         	call	_lcdInst
 11831  00423C  0E68               	movlw	104
 11832  00423E  0100               	movlb	0	; () banked
 11833  004240  6FC6               	movwf	??_Test& (0+255),b
 11834  004242  0EE4               	movlw	228
 11835  004244                     u10587:
 11836  004244  2EE8               	decfsz	wreg,f,c
 11837  004246  D7FE               	bra	u10587
 11838  004248  2FC6               	decfsz	??_Test& (0+255),f,b
 11839  00424A  D7FC               	bra	u10587
 11840  00424C  F000               	nop	
 11841  00424E  0E80               	movlw	128
 11842  004250  ECDC  F02D         	call	_lcdInst
 11843                           
 11844                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11845  004254  0E74               	movlw	low STR_69
 11846  004256  0100               	movlb	0	; () banked
 11847  004258  6F8E               	movwf	printf@f& (0+255),b
 11848  00425A  0EFC               	movlw	high STR_69
 11849  00425C  0100               	movlb	0	; () banked
 11850  00425E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11851  004260  EC8D  F00D         	call	_printf	;wreg free
 11852                           
 11853                           ;Test.c: 36: lcdInst(0b11000000);;
 11854  004264  0EC0               	movlw	192
 11855  004266  ECDC  F02D         	call	_lcdInst
 11856                           
 11857                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11858  00426A  0E85               	movlw	low STR_70
 11859  00426C  0100               	movlb	0	; () banked
 11860  00426E  6F8E               	movwf	printf@f& (0+255),b
 11861  004270  0EFC               	movlw	high STR_70
 11862  004272  0100               	movlb	0	; () banked
 11863  004274  6F8F               	movwf	(printf@f+1)& (0+255),b
 11864  004276  EC8D  F00D         	call	_printf	;wreg free
 11865  00427A                     l1248:
 11866  00427A  A281               	btfss	3969,1,c	;volatile
 11867  00427C  D7FE               	goto	l1248
 11868                           
 11869                           ;Test.c: 39: var = PORTB >> 4;
 11870  00427E  CF81 F0C6          	movff	3969,??_Test	;volatile
 11871  004282  0100               	movlb	0	; () banked
 11872  004284  3BC6               	swapf	??_Test& (0+255),f,b
 11873  004286  0E0F               	movlw	15
 11874  004288  17C6               	andwf	??_Test& (0+255),f,b
 11875  00428A  0100               	movlb	0	; () banked
 11876  00428C  51C6               	movf	??_Test& (0+255),w,b
 11877  00428E  0101               	movlb	1	; () banked
 11878  004290  6F49               	movwf	_var& (0+255),b
 11879  004292  6B4A               	clrf	(_var+1)& (0+255),b
 11880                           
 11881                           ; BSR set to: 1
 11882                           ;Test.c: 40: var++;
 11883  004294  0101               	movlb	1	; () banked
 11884  004296  4B49               	infsnz	_var& (0+255),f,b
 11885  004298  2B4A               	incf	(_var+1)& (0+255),f,b
 11886  00429A                     l1251:
 11887  00429A  A281               	btfss	3969,1,c	;volatile
 11888  00429C  D01F               	goto	l10022
 11889  00429E  D7FD               	goto	l1251
 11890  0042A0                     l10000:
 11891                           
 11892                           ;Test.c: 44: algorithmTest();
 11893  0042A0  EC01  F023         	call	_algorithmTest	;wreg free
 11894                           
 11895                           ;Test.c: 45: break;
 11896  0042A4  D044               	goto	l10024
 11897  0042A6                     l10002:
 11898                           
 11899                           ;Test.c: 47: sensorTest();
 11900  0042A6  ECE2  F014         	call	_sensorTest	;wreg free
 11901                           
 11902                           ;Test.c: 48: break;
 11903  0042AA  D041               	goto	l10024
 11904  0042AC                     l10004:
 11905                           
 11906                           ;Test.c: 50: actuatorTest();
 11907  0042AC  EC6D  F004         	call	_actuatorTest	;wreg free
 11908                           
 11909                           ;Test.c: 51: break;
 11910  0042B0  D03E               	goto	l10024
 11911  0042B2                     l10006:
 11912                           
 11913                           ;Test.c: 53: arm();
 11914  0042B2  EC9D  F021         	call	_arm	;wreg free
 11915                           
 11916                           ;Test.c: 54: break;
 11917  0042B6  D03B               	goto	l10024
 11918  0042B8                     l10008:
 11919                           
 11920                           ;Test.c: 56: PortTestDC();
 11921  0042B8  EC53  F029         	call	_PortTestDC	;wreg free
 11922                           
 11923                           ;Test.c: 57: break;
 11924  0042BC  D038               	goto	l10024
 11925  0042BE                     l10010:
 11926                           
 11927                           ;Test.c: 59: SpeedTest();
 11928  0042BE  EC85  F026         	call	_SpeedTest	;wreg free
 11929                           
 11930                           ;Test.c: 60: break;
 11931  0042C2  D035               	goto	l10024
 11932  0042C4                     l10012:
 11933                           
 11934                           ;Test.c: 62: PortTestPusher();
 11935  0042C4  EC25  F029         	call	_PortTestPusher	;wreg free
 11936                           
 11937                           ;Test.c: 63: break;
 11938  0042C8  D032               	goto	l10024
 11939  0042CA                     l10014:
 11940                           
 11941                           ;Test.c: 65: PlatformTest();
 11942  0042CA  EC57  F013         	call	_PlatformTest	;wreg free
 11943                           
 11944                           ;Test.c: 66: break;
 11945  0042CE  D02F               	goto	l10024
 11946  0042D0                     l10016:
 11947                           
 11948                           ;Test.c: 68: BothServos();
 11949  0042D0  ECA9  F00F         	call	_BothServos	;wreg free
 11950                           
 11951                           ;Test.c: 69: break;
 11952  0042D4  D02C               	goto	l10024
 11953  0042D6                     l10018:
 11954                           
 11955                           ;Test.c: 71: BlockerTest();
 11956  0042D6  EC7C  F01E         	call	_BlockerTest	;wreg free
 11957                           
 11958                           ;Test.c: 75: }
 11959                           
 11960                           ;Test.c: 74: break;
 11961                           
 11962                           ;Test.c: 73: default:
 11963                           
 11964                           ;Test.c: 72: break;
 11965  0042DA  D029               	goto	l10024
 11966  0042DC                     l10022:
 11967  0042DC  C149  F0C6         	movff	_var,??_Test
 11968  0042E0  C14A  F0C7         	movff	_var+1,??_Test+1
 11969                           
 11970                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11971                           ; Switch size 1, requested type "space"
 11972                           ; Number of cases is 1, Range of values is 0 to 0
 11973                           ; switch strategies available:
 11974                           ; Name         Instructions Cycles
 11975                           ; simple_byte            4     3 (average)
 11976                           ;	Chosen strategy is simple_byte
 11977  0042E4  0100               	movlb	0	; () banked
 11978  0042E6  51C7               	movf	(??_Test+1)& (0+255),w,b
 11979  0042E8  0A00               	xorlw	0	; case 0
 11980  0042EA  A4D8               	btfss	status,2,c
 11981  0042EC  D020               	goto	l10024
 11982                           
 11983                           ; BSR set to: 0
 11984                           ; Switch size 1, requested type "space"
 11985                           ; Number of cases is 10, Range of values is 1 to 11
 11986                           ; switch strategies available:
 11987                           ; Name         Instructions Cycles
 11988                           ; simple_byte           31    16 (average)
 11989                           ;	Chosen strategy is simple_byte
 11990  0042EE  0100               	movlb	0	; () banked
 11991  0042F0  51C6               	movf	??_Test& (0+255),w,b
 11992  0042F2  0A01               	xorlw	1	; case 1
 11993  0042F4  B4D8               	btfsc	status,2,c
 11994  0042F6  D7D4               	goto	l10000
 11995  0042F8  0A03               	xorlw	3	; case 2
 11996  0042FA  B4D8               	btfsc	status,2,c
 11997  0042FC  D7D4               	goto	l10002
 11998  0042FE  0A01               	xorlw	1	; case 3
 11999  004300  B4D8               	btfsc	status,2,c
 12000  004302  D7D4               	goto	l10004
 12001  004304  0A07               	xorlw	7	; case 4
 12002  004306  B4D8               	btfsc	status,2,c
 12003  004308  D7D4               	goto	l10006
 12004  00430A  0A01               	xorlw	1	; case 5
 12005  00430C  B4D8               	btfsc	status,2,c
 12006  00430E  D7D4               	goto	l10008
 12007  004310  0A03               	xorlw	3	; case 6
 12008  004312  B4D8               	btfsc	status,2,c
 12009  004314  D7D4               	goto	l10010
 12010  004316  0A01               	xorlw	1	; case 7
 12011  004318  B4D8               	btfsc	status,2,c
 12012  00431A  D7D4               	goto	l10012
 12013  00431C  0A0F               	xorlw	15	; case 8
 12014  00431E  B4D8               	btfsc	status,2,c
 12015  004320  D7D4               	goto	l10014
 12016  004322  0A02               	xorlw	2	; case 10
 12017  004324  B4D8               	btfsc	status,2,c
 12018  004326  D7D4               	goto	l10016
 12019  004328  0A01               	xorlw	1	; case 11
 12020  00432A  B4D8               	btfsc	status,2,c
 12021  00432C  D7D4               	goto	l10018
 12022  00432E                     l10024:
 12023  00432E  0E03               	movlw	3
 12024  004330  0100               	movlb	0	; () banked
 12025  004332  19FC               	xorwf	_machine_state& (0+255),w,b
 12026  004334  A4D8               	btfss	status,2,c
 12027  004336  0012               	return	
 12028  004338  D77E               	goto	l9984
 12029  00433A                     __end_of_Test:
 12030                           	opt stack 0
 12031                           tblptru	equ	0xFF8
 12032                           tblptrh	equ	0xFF7
 12033                           tblptrl	equ	0xFF6
 12034                           tablat	equ	0xFF5
 12035                           prodh	equ	0xFF4
 12036                           prodl	equ	0xFF3
 12037                           intcon	equ	0xFF2
 12038                           intcon2	equ	0xFF1
 12039                           intcon3	equ	0xFF0
 12040                           postinc0	equ	0xFEE
 12041                           wreg	equ	0xFE8
 12042                           postdec1	equ	0xFE5
 12043                           fsr1l	equ	0xFE1
 12044                           indf2	equ	0xFDF
 12045                           postinc2	equ	0xFDE
 12046                           postdec2	equ	0xFDD
 12047                           fsr2h	equ	0xFDA
 12048                           fsr2l	equ	0xFD9
 12049                           status	equ	0xFD8
 12050                           
 12051 ;; *************** function _sensorTest *****************
 12052 ;; Defined at:
 12053 ;;		line 123 in file "Test.c"
 12054 ;; Parameters:    Size  Location     Type
 12055 ;;		None
 12056 ;; Auto vars:     Size  Location     Type
 12057 ;;  res             2   45[BANK0 ] int 
 12058 ;; Return value:  Size  Location     Type
 12059 ;;                  1    wreg      void 
 12060 ;; Registers used:
 12061 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12062 ;; Tracked objects:
 12063 ;;		On entry : 0/0
 12064 ;;		On exit  : 0/0
 12065 ;;		Unchanged: 0/0
 12066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12068 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12069 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12070 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12071 ;;Total ram usage:        4 bytes
 12072 ;; Hardware stack levels used:    1
 12073 ;; Hardware stack levels required when called:   10
 12074 ;; This function calls:
 12075 ;;		_lcdInst
 12076 ;;		_printf
 12077 ;;		_readADC
 12078 ;;		_readMAG
 12079 ;; This function is called by:
 12080 ;;		_Test
 12081 ;; This function uses a non-reentrant model
 12082 ;;
 12083                           
 12084                           	psect	text41
 12085  0029C4                     __ptext41:
 12086                           	opt stack 0
 12087  0029C4                     _sensorTest:
 12088                           	opt stack 19
 12089                           
 12090                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12091                           
 12092                           ; BSR set to: 0
 12093                           ;incstack = 0
 12094  0029C4  0E01               	movlw	1
 12095  0029C6  ECDC  F02D         	call	_lcdInst
 12096  0029CA  0E68               	movlw	104
 12097  0029CC  0100               	movlb	0	; () banked
 12098  0029CE  6FAB               	movwf	??_sensorTest& (0+255),b
 12099  0029D0  0EE4               	movlw	228
 12100  0029D2                     u10597:
 12101  0029D2  2EE8               	decfsz	wreg,f,c
 12102  0029D4  D7FE               	bra	u10597
 12103  0029D6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12104  0029D8  D7FC               	bra	u10597
 12105  0029DA  F000               	nop	
 12106  0029DC  0E80               	movlw	128
 12107  0029DE  ECDC  F02D         	call	_lcdInst
 12108                           
 12109                           ;Test.c: 126: printf("SENSORS");
 12110  0029E2  0EAD               	movlw	low STR_78
 12111  0029E4  0100               	movlb	0	; () banked
 12112  0029E6  6F8E               	movwf	printf@f& (0+255),b
 12113  0029E8  0EFF               	movlw	high STR_78
 12114  0029EA  0100               	movlb	0	; () banked
 12115  0029EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12116  0029EE  EC8D  F00D         	call	_printf	;wreg free
 12117                           
 12118                           ;Test.c: 127: lcdInst(0b11000000);;
 12119  0029F2  0EC0               	movlw	192
 12120  0029F4  ECDC  F02D         	call	_lcdInst
 12121                           
 12122                           ;Test.c: 128: printf("PUSH TO START");
 12123  0029F8  0E2D               	movlw	low STR_72
 12124  0029FA  0100               	movlb	0	; () banked
 12125  0029FC  6F8E               	movwf	printf@f& (0+255),b
 12126  0029FE  0EFF               	movlw	high STR_72
 12127  002A00  0100               	movlb	0	; () banked
 12128  002A02  6F8F               	movwf	(printf@f+1)& (0+255),b
 12129  002A04  EC8D  F00D         	call	_printf	;wreg free
 12130                           
 12131                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12132  002A08  0E05               	movlw	5
 12133  002A0A  0100               	movlb	0	; () banked
 12134  002A0C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12135  002A0E  0E0F               	movlw	15
 12136  002A10  0100               	movlb	0	; () banked
 12137  002A12  6FAB               	movwf	??_sensorTest& (0+255),b
 12138  002A14  0EF1               	movlw	241
 12139  002A16                     u10607:
 12140  002A16  2EE8               	decfsz	wreg,f,c
 12141  002A18  D7FE               	bra	u10607
 12142  002A1A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12143  002A1C  D7FC               	bra	u10607
 12144  002A1E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12145  002A20  D7FA               	bra	u10607
 12146  002A22                     l1280:
 12147  002A22  A281               	btfss	3969,1,c	;volatile
 12148  002A24  D7FE               	goto	l1280
 12149  002A26                     l1283:
 12150  002A26  B281               	btfsc	3969,1,c	;volatile
 12151  002A28  D7FE               	goto	l1283
 12152                           
 12153                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12154  002A2A  0E01               	movlw	1
 12155  002A2C  ECDC  F02D         	call	_lcdInst
 12156  002A30  0E68               	movlw	104
 12157  002A32  0100               	movlb	0	; () banked
 12158  002A34  6FAB               	movwf	??_sensorTest& (0+255),b
 12159  002A36  0EE4               	movlw	228
 12160  002A38                     u10617:
 12161  002A38  2EE8               	decfsz	wreg,f,c
 12162  002A3A  D7FE               	bra	u10617
 12163  002A3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12164  002A3E  D7FC               	bra	u10617
 12165  002A40  F000               	nop	
 12166  002A42  0E80               	movlw	128
 12167  002A44  ECDC  F02D         	call	_lcdInst
 12168                           
 12169                           ;Test.c: 137: printf("TST: IR SNSR");
 12170  002A48  0E57               	movlw	low STR_80
 12171  002A4A  0100               	movlb	0	; () banked
 12172  002A4C  6F8E               	movwf	printf@f& (0+255),b
 12173  002A4E  0EFF               	movlw	high STR_80
 12174  002A50  0100               	movlb	0	; () banked
 12175  002A52  6F8F               	movwf	(printf@f+1)& (0+255),b
 12176  002A54  EC8D  F00D         	call	_printf	;wreg free
 12177                           
 12178                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12179  002A58  0E05               	movlw	5
 12180  002A5A  0100               	movlb	0	; () banked
 12181  002A5C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12182  002A5E  0E0F               	movlw	15
 12183  002A60  0100               	movlb	0	; () banked
 12184  002A62  6FAB               	movwf	??_sensorTest& (0+255),b
 12185  002A64  0EF1               	movlw	241
 12186  002A66                     u10627:
 12187  002A66  2EE8               	decfsz	wreg,f,c
 12188  002A68  D7FE               	bra	u10627
 12189  002A6A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12190  002A6C  D7FC               	bra	u10627
 12191  002A6E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12192  002A70  D7FA               	bra	u10627
 12193                           
 12194                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12195  002A72  8A8B               	bsf	3979,5,c	;volatile
 12196                           
 12197                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12198  002A74  D05C               	goto	l8354
 12199  002A76                     l8336:
 12200                           
 12201                           ;Test.c: 142: readADC(0);
 12202  002A76  0E00               	movlw	0
 12203  002A78  ECC7  F02C         	call	_readADC
 12204                           
 12205                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12206  002A7C  50C3               	movf	4035,w,c	;volatile
 12207  002A7E  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12208  002A82  0100               	movlb	0	; () banked
 12209  002A84  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12210  002A86  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12211  002A8A  0100               	movlb	0	; () banked
 12212  002A8C  6BAB               	clrf	??_sensorTest& (0+255),b
 12213  002A8E  0100               	movlb	0	; () banked
 12214  002A90  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12215  002A92  0100               	movlb	0	; () banked
 12216  002A94  6FAD               	movwf	sensorTest@res& (0+255),b
 12217  002A96  0100               	movlb	0	; () banked
 12218  002A98  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12219  002A9A  0100               	movlb	0	; () banked
 12220  002A9C  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12221                           
 12222                           ; BSR set to: 0
 12223                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12224  002A9E  0100               	movlb	0	; () banked
 12225  002AA0  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12226  002AA2  D00A               	goto	u7200
 12227  002AA4  0E21               	movlw	33
 12228  002AA6  0100               	movlb	0	; () banked
 12229  002AA8  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12230  002AAA  0E03               	movlw	3
 12231  002AAC  0100               	movlb	0	; () banked
 12232  002AAE  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12233  002AB0  A0D8               	btfss	status,0,c
 12234  002AB2  D002               	goto	u7200
 12235  002AB4  0E01               	movlw	1
 12236  002AB6  D001               	goto	u7210
 12237  002AB8                     u7200:
 12238  002AB8  0E00               	movlw	0
 12239  002ABA                     u7210:
 12240  002ABA  0100               	movlb	0	; () banked
 12241  002ABC  6FE0               	movwf	_IR_signal& (0+255),b
 12242  002ABE  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12243                           
 12244                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12245  002AC0  0E01               	movlw	1
 12246  002AC2  ECDC  F02D         	call	_lcdInst
 12247  002AC6  0E68               	movlw	104
 12248  002AC8  0100               	movlb	0	; () banked
 12249  002ACA  6FAB               	movwf	??_sensorTest& (0+255),b
 12250  002ACC  0EE4               	movlw	228
 12251  002ACE                     u10637:
 12252  002ACE  2EE8               	decfsz	wreg,f,c
 12253  002AD0  D7FE               	bra	u10637
 12254  002AD2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12255  002AD4  D7FC               	bra	u10637
 12256  002AD6  F000               	nop	
 12257  002AD8  0E80               	movlw	128
 12258  002ADA  ECDC  F02D         	call	_lcdInst
 12259                           
 12260                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12261  002ADE  0E7C               	movlw	low STR_81
 12262  002AE0  0100               	movlb	0	; () banked
 12263  002AE2  6F8E               	movwf	printf@f& (0+255),b
 12264  002AE4  0EFE               	movlw	high STR_81
 12265  002AE6  0100               	movlb	0	; () banked
 12266  002AE8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12267  002AEA  C0E0  F090         	movff	_IR_signal,?_printf+2
 12268  002AEE  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12269  002AF2  EC8D  F00D         	call	_printf	;wreg free
 12270                           
 12271                           ;Test.c: 148: lcdInst(0b11000000);;
 12272  002AF6  0EC0               	movlw	192
 12273  002AF8  ECDC  F02D         	call	_lcdInst
 12274                           
 12275                           ;Test.c: 149: printf("%d", res);
 12276  002AFC  0E09               	movlw	low (STR_27+14)
 12277  002AFE  0100               	movlb	0	; () banked
 12278  002B00  6F8E               	movwf	printf@f& (0+255),b
 12279  002B02  0EFE               	movlw	high (STR_27+14)
 12280  002B04  0100               	movlb	0	; () banked
 12281  002B06  6F8F               	movwf	(printf@f+1)& (0+255),b
 12282  002B08  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12283  002B0C  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12284  002B10  EC8D  F00D         	call	_printf	;wreg free
 12285                           
 12286                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12287  002B14  0E05               	movlw	5
 12288  002B16  0100               	movlb	0	; () banked
 12289  002B18  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12290  002B1A  0E0F               	movlw	15
 12291  002B1C  0100               	movlb	0	; () banked
 12292  002B1E  6FAB               	movwf	??_sensorTest& (0+255),b
 12293  002B20  0EF1               	movlw	241
 12294  002B22                     u10647:
 12295  002B22  2EE8               	decfsz	wreg,f,c
 12296  002B24  D7FE               	bra	u10647
 12297  002B26  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12298  002B28  D7FC               	bra	u10647
 12299  002B2A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12300  002B2C  D7FA               	bra	u10647
 12301  002B2E                     l8354:
 12302  002B2E  A281               	btfss	3969,1,c	;volatile
 12303  002B30  D7A2               	goto	l8336
 12304                           
 12305                           ;Test.c: 151: }
 12306                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12307  002B32  9A8B               	bcf	3979,5,c	;volatile
 12308                           
 12309                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12310  002B34  0E01               	movlw	1
 12311  002B36  ECDC  F02D         	call	_lcdInst
 12312  002B3A  0E68               	movlw	104
 12313  002B3C  0100               	movlb	0	; () banked
 12314  002B3E  6FAB               	movwf	??_sensorTest& (0+255),b
 12315  002B40  0EE4               	movlw	228
 12316  002B42                     u10657:
 12317  002B42  2EE8               	decfsz	wreg,f,c
 12318  002B44  D7FE               	bra	u10657
 12319  002B46  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12320  002B48  D7FC               	bra	u10657
 12321  002B4A  F000               	nop	
 12322  002B4C  0E80               	movlw	128
 12323  002B4E  ECDC  F02D         	call	_lcdInst
 12324                           
 12325                           ;Test.c: 161: printf("TST: MAGNETISM");
 12326  002B52  0EA9               	movlw	low STR_83
 12327  002B54  0100               	movlb	0	; () banked
 12328  002B56  6F8E               	movwf	printf@f& (0+255),b
 12329  002B58  0EFE               	movlw	high STR_83
 12330  002B5A  0100               	movlb	0	; () banked
 12331  002B5C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12332  002B5E  EC8D  F00D         	call	_printf	;wreg free
 12333                           
 12334                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12335  002B62  0E05               	movlw	5
 12336  002B64  0100               	movlb	0	; () banked
 12337  002B66  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12338  002B68  0E0F               	movlw	15
 12339  002B6A  0100               	movlb	0	; () banked
 12340  002B6C  6FAB               	movwf	??_sensorTest& (0+255),b
 12341  002B6E  0EF1               	movlw	241
 12342  002B70                     u10667:
 12343  002B70  2EE8               	decfsz	wreg,f,c
 12344  002B72  D7FE               	bra	u10667
 12345  002B74  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12346  002B76  D7FC               	bra	u10667
 12347  002B78  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12348  002B7A  D7FA               	bra	u10667
 12349                           
 12350                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12351  002B7C  D021               	goto	l8372
 12352  002B7E                     l8366:
 12353                           
 12354                           ;Test.c: 164: readMAG();
 12355  002B7E  EC4A  F02A         	call	_readMAG	;wreg free
 12356                           
 12357                           ;Test.c: 165: lcdInst(0b10000000);;
 12358  002B82  0E80               	movlw	128
 12359  002B84  ECDC  F02D         	call	_lcdInst
 12360                           
 12361                           ;Test.c: 166: lcdInst(0b11000000);;
 12362  002B88  0EC0               	movlw	192
 12363  002B8A  ECDC  F02D         	call	_lcdInst
 12364                           
 12365                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12366  002B8E  0E1D               	movlw	low STR_84
 12367  002B90  0100               	movlb	0	; () banked
 12368  002B92  6F8E               	movwf	printf@f& (0+255),b
 12369  002B94  0EFE               	movlw	high STR_84
 12370  002B96  0100               	movlb	0	; () banked
 12371  002B98  6F8F               	movwf	(printf@f+1)& (0+255),b
 12372  002B9A  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12373  002B9E  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12374  002BA2  EC8D  F00D         	call	_printf	;wreg free
 12375                           
 12376                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12377  002BA6  0E05               	movlw	5
 12378  002BA8  0100               	movlb	0	; () banked
 12379  002BAA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12380  002BAC  0E0F               	movlw	15
 12381  002BAE  0100               	movlb	0	; () banked
 12382  002BB0  6FAB               	movwf	??_sensorTest& (0+255),b
 12383  002BB2  0EF1               	movlw	241
 12384  002BB4                     u10677:
 12385  002BB4  2EE8               	decfsz	wreg,f,c
 12386  002BB6  D7FE               	bra	u10677
 12387  002BB8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12388  002BBA  D7FC               	bra	u10677
 12389  002BBC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12390  002BBE  D7FA               	bra	u10677
 12391  002BC0                     l8372:
 12392  002BC0  A281               	btfss	3969,1,c	;volatile
 12393  002BC2  D7DD               	goto	l8366
 12394                           
 12395                           ;Test.c: 169: }
 12396                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12397  002BC4  0E01               	movlw	1
 12398  002BC6  ECDC  F02D         	call	_lcdInst
 12399  002BCA  0E68               	movlw	104
 12400  002BCC  0100               	movlb	0	; () banked
 12401  002BCE  6FAB               	movwf	??_sensorTest& (0+255),b
 12402  002BD0  0EE4               	movlw	228
 12403  002BD2                     u10687:
 12404  002BD2  2EE8               	decfsz	wreg,f,c
 12405  002BD4  D7FE               	bra	u10687
 12406  002BD6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12407  002BD8  D7FC               	bra	u10687
 12408  002BDA  F000               	nop	
 12409  002BDC  0E80               	movlw	128
 12410  002BDE  ECDC  F02D         	call	_lcdInst
 12411                           
 12412                           ;Test.c: 175: printf("TST: COND");
 12413  002BE2  0E86               	movlw	low STR_85
 12414  002BE4  0100               	movlb	0	; () banked
 12415  002BE6  6F8E               	movwf	printf@f& (0+255),b
 12416  002BE8  0EFF               	movlw	high STR_85
 12417  002BEA  0100               	movlb	0	; () banked
 12418  002BEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12419  002BEE  EC8D  F00D         	call	_printf	;wreg free
 12420                           
 12421                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12422  002BF2  0E05               	movlw	5
 12423  002BF4  0100               	movlb	0	; () banked
 12424  002BF6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12425  002BF8  0E0F               	movlw	15
 12426  002BFA  0100               	movlb	0	; () banked
 12427  002BFC  6FAB               	movwf	??_sensorTest& (0+255),b
 12428  002BFE  0EF1               	movlw	241
 12429  002C00                     u10697:
 12430  002C00  2EE8               	decfsz	wreg,f,c
 12431  002C02  D7FE               	bra	u10697
 12432  002C04  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12433  002C06  D7FC               	bra	u10697
 12434  002C08  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12435  002C0A  D7FA               	bra	u10697
 12436  002C0C                     l8384:
 12437                           
 12438                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12439  002C0C  0E01               	movlw	1
 12440  002C0E  ECDC  F02D         	call	_lcdInst
 12441  002C12  0E68               	movlw	104
 12442  002C14  0100               	movlb	0	; () banked
 12443  002C16  6FAB               	movwf	??_sensorTest& (0+255),b
 12444  002C18  0EE4               	movlw	228
 12445  002C1A                     u10707:
 12446  002C1A  2EE8               	decfsz	wreg,f,c
 12447  002C1C  D7FE               	bra	u10707
 12448  002C1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12449  002C20  D7FC               	bra	u10707
 12450  002C22  F000               	nop	
 12451  002C24  0E80               	movlw	128
 12452  002C26  ECDC  F02D         	call	_lcdInst
 12453                           
 12454                           ;Test.c: 179: printf("TST: COND");
 12455  002C2A  0E86               	movlw	low STR_85
 12456  002C2C  0100               	movlb	0	; () banked
 12457  002C2E  6F8E               	movwf	printf@f& (0+255),b
 12458  002C30  0EFF               	movlw	high STR_85
 12459  002C32  0100               	movlb	0	; () banked
 12460  002C34  6F8F               	movwf	(printf@f+1)& (0+255),b
 12461  002C36  EC8D  F00D         	call	_printf	;wreg free
 12462                           
 12463                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12464  002C3A  D01B               	goto	l8396
 12465  002C3C                     l8392:
 12466                           
 12467                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12468  002C3C  0E80               	movlw	128
 12469  002C3E  ECDC  F02D         	call	_lcdInst
 12470  002C42  0EC0               	movlw	192
 12471  002C44  ECDC  F02D         	call	_lcdInst
 12472                           
 12473                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12474  002C48  0EA4               	movlw	low STR_87
 12475  002C4A  0100               	movlb	0	; () banked
 12476  002C4C  6F8E               	movwf	printf@f& (0+255),b
 12477  002C4E  0EFF               	movlw	high STR_87
 12478  002C50  0100               	movlb	0	; () banked
 12479  002C52  6F8F               	movwf	(printf@f+1)& (0+255),b
 12480  002C54  A480               	btfss	3968,2,c	;volatile
 12481  002C56  D004               	goto	u7240
 12482  002C58  0100               	movlb	0	; () banked
 12483  002C5A  6BAB               	clrf	??_sensorTest& (0+255),b
 12484  002C5C  2BAB               	incf	??_sensorTest& (0+255),f,b
 12485  002C5E  D002               	goto	u7248
 12486  002C60                     u7240:
 12487  002C60  0100               	movlb	0	; () banked
 12488  002C62  6BAB               	clrf	??_sensorTest& (0+255),b
 12489  002C64                     u7248:
 12490  002C64  0100               	movlb	0	; () banked
 12491  002C66  51AB               	movf	??_sensorTest& (0+255),w,b
 12492  002C68  0100               	movlb	0	; () banked
 12493  002C6A  6F90               	movwf	(?_printf+2)& (0+255),b
 12494  002C6C  6B91               	clrf	(?_printf+3)& (0+255),b
 12495  002C6E  EC8D  F00D         	call	_printf	;wreg free
 12496  002C72                     l8396:
 12497  002C72  A281               	btfss	3969,1,c	;volatile
 12498  002C74  D7E3               	goto	l8392
 12499                           
 12500                           ;Test.c: 186: }
 12501                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12502  002C76  3881               	swapf	3969,w,c	;volatile
 12503  002C78  0B0F               	andlw	15
 12504  002C7A  0A0F               	xorlw	15
 12505  002C7C  B4D8               	btfsc	status,2,c
 12506  002C7E  0012               	return	
 12507                           
 12508                           ;Test.c: 190: else{
 12509                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12510                           
 12511                           ;Test.c: 189: }
 12512                           
 12513                           ;Test.c: 188: break;
 12514  002C80  8689               	bsf	3977,3,c	;volatile
 12515                           
 12516                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12517  002C82  D01B               	goto	l8408
 12518  002C84                     l8404:
 12519                           
 12520                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12521  002C84  0E80               	movlw	128
 12522  002C86  ECDC  F02D         	call	_lcdInst
 12523  002C8A  0EC0               	movlw	192
 12524  002C8C  ECDC  F02D         	call	_lcdInst
 12525                           
 12526                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12527  002C90  0EA4               	movlw	low STR_87
 12528  002C92  0100               	movlb	0	; () banked
 12529  002C94  6F8E               	movwf	printf@f& (0+255),b
 12530  002C96  0EFF               	movlw	high STR_87
 12531  002C98  0100               	movlb	0	; () banked
 12532  002C9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12533  002C9C  A480               	btfss	3968,2,c	;volatile
 12534  002C9E  D004               	goto	u7270
 12535  002CA0  0100               	movlb	0	; () banked
 12536  002CA2  6BAB               	clrf	??_sensorTest& (0+255),b
 12537  002CA4  2BAB               	incf	??_sensorTest& (0+255),f,b
 12538  002CA6  D002               	goto	u7278
 12539  002CA8                     u7270:
 12540  002CA8  0100               	movlb	0	; () banked
 12541  002CAA  6BAB               	clrf	??_sensorTest& (0+255),b
 12542  002CAC                     u7278:
 12543  002CAC  0100               	movlb	0	; () banked
 12544  002CAE  51AB               	movf	??_sensorTest& (0+255),w,b
 12545  002CB0  0100               	movlb	0	; () banked
 12546  002CB2  6F90               	movwf	(?_printf+2)& (0+255),b
 12547  002CB4  6B91               	clrf	(?_printf+3)& (0+255),b
 12548  002CB6  EC8D  F00D         	call	_printf	;wreg free
 12549  002CBA                     l8408:
 12550  002CBA  B281               	btfsc	3969,1,c	;volatile
 12551  002CBC  D7E3               	goto	l8404
 12552                           
 12553                           ;Test.c: 196: }
 12554                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12555  002CBE  9689               	bcf	3977,3,c	;volatile
 12556  002CC0  D7A5               	goto	l8384
 12557  002CC2                     __end_of_sensorTest:
 12558                           	opt stack 0
 12559                           tblptru	equ	0xFF8
 12560                           tblptrh	equ	0xFF7
 12561                           tblptrl	equ	0xFF6
 12562                           tablat	equ	0xFF5
 12563                           prodh	equ	0xFF4
 12564                           prodl	equ	0xFF3
 12565                           intcon	equ	0xFF2
 12566                           intcon2	equ	0xFF1
 12567                           intcon3	equ	0xFF0
 12568                           postinc0	equ	0xFEE
 12569                           wreg	equ	0xFE8
 12570                           postdec1	equ	0xFE5
 12571                           fsr1l	equ	0xFE1
 12572                           indf2	equ	0xFDF
 12573                           postinc2	equ	0xFDE
 12574                           postdec2	equ	0xFDD
 12575                           fsr2h	equ	0xFDA
 12576                           fsr2l	equ	0xFD9
 12577                           status	equ	0xFD8
 12578                           
 12579 ;; *************** function _readMAG *****************
 12580 ;; Defined at:
 12581 ;;		line 29 in file "ADCFunctionality.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;		None
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;  res             2    4[BANK0 ] int 
 12586 ;; Return value:  Size  Location     Type
 12587 ;;                  1    wreg      void 
 12588 ;; Registers used:
 12589 ;;		wreg, status,2, status,0, cstack
 12590 ;; Tracked objects:
 12591 ;;		On entry : 0/0
 12592 ;;		On exit  : 0/0
 12593 ;;		Unchanged: 0/0
 12594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12596 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12597 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12598 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12599 ;;Total ram usage:        4 bytes
 12600 ;; Hardware stack levels used:    1
 12601 ;; Hardware stack levels required when called:    8
 12602 ;; This function calls:
 12603 ;;		_readADC
 12604 ;; This function is called by:
 12605 ;;		_getMAG
 12606 ;;		_sensorTest
 12607 ;; This function uses a non-reentrant model
 12608 ;;
 12609                           
 12610                           	psect	text42
 12611  005494                     __ptext42:
 12612                           	opt stack 0
 12613  005494                     _readMAG:
 12614                           	opt stack 19
 12615                           
 12616                           ;ADCFunctionality.c: 30: readADC(1);
 12617                           
 12618                           ;incstack = 0
 12619  005494  0E01               	movlw	1
 12620  005496  ECC7  F02C         	call	_readADC
 12621                           
 12622                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12623  00549A  50C3               	movf	4035,w,c	;volatile
 12624  00549C  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12625  0054A0  0100               	movlb	0	; () banked
 12626  0054A2  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12627  0054A4  C082  F083         	movff	??_readMAG,??_readMAG+1
 12628  0054A8  0100               	movlb	0	; () banked
 12629  0054AA  6B82               	clrf	??_readMAG& (0+255),b
 12630  0054AC  0100               	movlb	0	; () banked
 12631  0054AE  1182               	iorwf	??_readMAG& (0+255),w,b
 12632  0054B0  0100               	movlb	0	; () banked
 12633  0054B2  6F84               	movwf	readMAG@res& (0+255),b
 12634  0054B4  0100               	movlb	0	; () banked
 12635  0054B6  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12636  0054B8  0100               	movlb	0	; () banked
 12637  0054BA  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12638                           
 12639                           ; BSR set to: 0
 12640                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12641  0054BC  0100               	movlb	0	; () banked
 12642  0054BE  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12643  0054C0  D008               	goto	u5241
 12644  0054C2  0100               	movlb	0	; () banked
 12645  0054C4  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12646  0054C6  E107               	bnz	u5240
 12647  0054C8  0E96               	movlw	150
 12648  0054CA  0100               	movlb	0	; () banked
 12649  0054CC  5D84               	subwf	readMAG@res& (0+255),w,b
 12650  0054CE  B0D8               	btfsc	status,0,c
 12651  0054D0  D002               	goto	u5240
 12652  0054D2                     u5241:
 12653  0054D2  0E01               	movlw	1
 12654  0054D4  D001               	goto	u5250
 12655  0054D6                     u5240:
 12656  0054D6  0E00               	movlw	0
 12657  0054D8                     u5250:
 12658  0054D8  0100               	movlb	0	; () banked
 12659  0054DA  6FE2               	movwf	_MAG_signal& (0+255),b
 12660  0054DC  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12661                           
 12662                           ; BSR set to: 0
 12663  0054DE  0012               	return		;funcret
 12664  0054E0                     __end_of_readMAG:
 12665                           	opt stack 0
 12666                           tblptru	equ	0xFF8
 12667                           tblptrh	equ	0xFF7
 12668                           tblptrl	equ	0xFF6
 12669                           tablat	equ	0xFF5
 12670                           prodh	equ	0xFF4
 12671                           prodl	equ	0xFF3
 12672                           intcon	equ	0xFF2
 12673                           intcon2	equ	0xFF1
 12674                           intcon3	equ	0xFF0
 12675                           postinc0	equ	0xFEE
 12676                           wreg	equ	0xFE8
 12677                           postdec1	equ	0xFE5
 12678                           fsr1l	equ	0xFE1
 12679                           indf2	equ	0xFDF
 12680                           postinc2	equ	0xFDE
 12681                           postdec2	equ	0xFDD
 12682                           fsr2h	equ	0xFDA
 12683                           fsr2l	equ	0xFD9
 12684                           status	equ	0xFD8
 12685                           
 12686 ;; *************** function _arm *****************
 12687 ;; Defined at:
 12688 ;;		line 639 in file "Test.c"
 12689 ;; Parameters:    Size  Location     Type
 12690 ;;		None
 12691 ;; Auto vars:     Size  Location     Type
 12692 ;;  on              2   44[BANK0 ] int 
 12693 ;; Return value:  Size  Location     Type
 12694 ;;                  1    wreg      void 
 12695 ;; Registers used:
 12696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12697 ;; Tracked objects:
 12698 ;;		On entry : 0/0
 12699 ;;		On exit  : 0/0
 12700 ;;		Unchanged: 0/0
 12701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12703 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12705 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12706 ;;Total ram usage:        3 bytes
 12707 ;; Hardware stack levels used:    1
 12708 ;; Hardware stack levels required when called:   10
 12709 ;; This function calls:
 12710 ;;		_lcdInst
 12711 ;;		_printf
 12712 ;;		_stopSignals
 12713 ;; This function is called by:
 12714 ;;		_Test
 12715 ;; This function uses a non-reentrant model
 12716 ;;
 12717                           
 12718                           	psect	text43
 12719  00433A                     __ptext43:
 12720                           	opt stack 0
 12721  00433A                     _arm:
 12722                           	opt stack 19
 12723                           
 12724                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;incstack = 0
 12728  00433A  0E01               	movlw	1
 12729  00433C  ECDC  F02D         	call	_lcdInst
 12730  004340  0E68               	movlw	104
 12731  004342  0100               	movlb	0	; () banked
 12732  004344  6FAB               	movwf	??_arm& (0+255),b
 12733  004346  0EE4               	movlw	228
 12734  004348                     u10717:
 12735  004348  2EE8               	decfsz	wreg,f,c
 12736  00434A  D7FE               	bra	u10717
 12737  00434C  2FAB               	decfsz	??_arm& (0+255),f,b
 12738  00434E  D7FC               	bra	u10717
 12739  004350  F000               	nop	
 12740  004352  0E80               	movlw	128
 12741  004354  ECDC  F02D         	call	_lcdInst
 12742                           
 12743                           ;Test.c: 641: printf("D WILL RETURN   ");
 12744  004358  0EDB               	movlw	low STR_119
 12745  00435A  0100               	movlb	0	; () banked
 12746  00435C  6F8E               	movwf	printf@f& (0+255),b
 12747  00435E  0EFB               	movlw	high STR_119
 12748  004360  0100               	movlb	0	; () banked
 12749  004362  6F8F               	movwf	(printf@f+1)& (0+255),b
 12750  004364  EC8D  F00D         	call	_printf	;wreg free
 12751                           
 12752                           ;Test.c: 642: lcdInst(0b11000000);;
 12753  004368  0EC0               	movlw	192
 12754  00436A  ECDC  F02D         	call	_lcdInst
 12755                           
 12756                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12757  00436E  0E96               	movlw	low STR_128
 12758  004370  0100               	movlb	0	; () banked
 12759  004372  6F8E               	movwf	printf@f& (0+255),b
 12760  004374  0EFC               	movlw	high STR_128
 12761  004376  0100               	movlb	0	; () banked
 12762  004378  6F8F               	movwf	(printf@f+1)& (0+255),b
 12763  00437A  EC8D  F00D         	call	_printf	;wreg free
 12764                           
 12765                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12766  00437E  8EF2               	bsf	intcon,7,c	;volatile
 12767                           
 12768                           ;Test.c: 646: machine_state = Sorting_state;
 12769  004380  0E01               	movlw	1
 12770  004382  0100               	movlb	0	; () banked
 12771  004384  6FFC               	movwf	_machine_state& (0+255),b
 12772                           
 12773                           ; BSR set to: 0
 12774                           ;Test.c: 647: f_arm_position = 2;
 12775  004386  0E00               	movlw	0
 12776  004388  0100               	movlb	0	; () banked
 12777  00438A  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12778  00438C  0E02               	movlw	2
 12779  00438E  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12780                           
 12781                           ; BSR set to: 0
 12782                           ;Test.c: 648: timer2_counter = 0;
 12783  004390  0E00               	movlw	0
 12784  004392  6E74               	movwf	_timer2_counter+1,c	;volatile
 12785  004394  0E00               	movlw	0
 12786  004396  6E73               	movwf	_timer2_counter,c	;volatile
 12787                           
 12788                           ; BSR set to: 0
 12789                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12790  004398  868A               	bsf	3978,3,c	;volatile
 12791                           
 12792                           ; BSR set to: 0
 12793                           ;Test.c: 650: TMR2ON = 1;
 12794  00439A  84CA               	bsf	4042,2,c	;volatile
 12795                           
 12796                           ; BSR set to: 0
 12797                           ;Test.c: 651: was_low_2 = 0;
 12798  00439C  0E00               	movlw	0
 12799  00439E  6E7A               	movwf	_was_low_2+1,c	;volatile
 12800  0043A0  0E00               	movlw	0
 12801  0043A2  6E79               	movwf	_was_low_2,c	;volatile
 12802                           
 12803                           ; BSR set to: 0
 12804                           ;Test.c: 653: int on = 0;
 12805  0043A4  0E00               	movlw	0
 12806  0043A6  0100               	movlb	0	; () banked
 12807  0043A8  6FAD               	movwf	(arm@on+1)& (0+255),b
 12808  0043AA  0E00               	movlw	0
 12809  0043AC  6FAC               	movwf	arm@on& (0+255),b
 12810  0043AE                     l8862:
 12811                           
 12812                           ;Test.c: 655: if(on){
 12813  0043AE  0100               	movlb	0	; () banked
 12814  0043B0  51AC               	movf	arm@on& (0+255),w,b
 12815  0043B2  0100               	movlb	0	; () banked
 12816  0043B4  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12817  0043B6  B4D8               	btfsc	status,2,c
 12818  0043B8  D01C               	goto	l8874
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;Test.c: 656: on = !on;
 12822  0043BA  0100               	movlb	0	; () banked
 12823  0043BC  51AC               	movf	arm@on& (0+255),w,b
 12824  0043BE  0100               	movlb	0	; () banked
 12825  0043C0  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12826  0043C2  A4D8               	btfss	status,2,c
 12827  0043C4  D002               	goto	u7860
 12828  0043C6  0E01               	movlw	1
 12829  0043C8  D001               	goto	u7870
 12830  0043CA                     u7860:
 12831  0043CA  0E00               	movlw	0
 12832  0043CC                     u7870:
 12833  0043CC  0100               	movlb	0	; () banked
 12834  0043CE  6FAC               	movwf	arm@on& (0+255),b
 12835  0043D0  6BAD               	clrf	(arm@on+1)& (0+255),b
 12836                           
 12837                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12838  0043D2  D005               	goto	l8868
 12839  0043D4                     l8866:
 12840                           
 12841                           ; BSR set to: 0
 12842                           ;Test.c: 658: f_arm_position = 0;
 12843  0043D4  0E00               	movlw	0
 12844  0043D6  0100               	movlb	0	; () banked
 12845  0043D8  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12846  0043DA  0E00               	movlw	0
 12847  0043DC  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12848  0043DE                     l8868:
 12849                           
 12850                           ; BSR set to: 0
 12851  0043DE  A281               	btfss	3969,1,c	;volatile
 12852  0043E0  D7F9               	goto	l8866
 12853                           
 12854                           ; BSR set to: 0
 12855                           ;Test.c: 659: }
 12856                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12857                           
 12858                           ; BSR set to: 0
 12859  0043E2  3881               	swapf	3969,w,c	;volatile
 12860  0043E4  0B0F               	andlw	15
 12861  0043E6  0A0F               	xorlw	15
 12862  0043E8  B4D8               	btfsc	status,2,c
 12863  0043EA  D01F               	goto	l1475
 12864  0043EC                     l1476:
 12865  0043EC  A281               	btfss	3969,1,c	;volatile
 12866  0043EE  D7DF               	goto	l8862
 12867  0043F0  D7FD               	goto	l1476
 12868  0043F2                     l8874:
 12869                           
 12870                           ;Test.c: 665: else{
 12871                           ;Test.c: 666: on = !on;
 12872  0043F2  0100               	movlb	0	; () banked
 12873  0043F4  51AC               	movf	arm@on& (0+255),w,b
 12874  0043F6  0100               	movlb	0	; () banked
 12875  0043F8  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12876  0043FA  A4D8               	btfss	status,2,c
 12877  0043FC  D002               	goto	u7910
 12878  0043FE  0E01               	movlw	1
 12879  004400  D001               	goto	u7920
 12880  004402                     u7910:
 12881  004402  0E00               	movlw	0
 12882  004404                     u7920:
 12883  004404  0100               	movlb	0	; () banked
 12884  004406  6FAC               	movwf	arm@on& (0+255),b
 12885  004408  6BAD               	clrf	(arm@on+1)& (0+255),b
 12886                           
 12887                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12888  00440A  D005               	goto	l8878
 12889  00440C                     l8876:
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;Test.c: 668: f_arm_position = 1;
 12893  00440C  0E00               	movlw	0
 12894  00440E  0100               	movlb	0	; () banked
 12895  004410  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12896  004412  0E01               	movlw	1
 12897  004414  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12898  004416                     l8878:
 12899                           
 12900                           ; BSR set to: 0
 12901  004416  A281               	btfss	3969,1,c	;volatile
 12902  004418  D7F9               	goto	l8876
 12903                           
 12904                           ; BSR set to: 0
 12905                           ;Test.c: 669: }
 12906                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 12907                           
 12908                           ; BSR set to: 0
 12909  00441A  3881               	swapf	3969,w,c	;volatile
 12910  00441C  0B0F               	andlw	15
 12911  00441E  0A0F               	xorlw	15
 12912  004420  B4D8               	btfsc	status,2,c
 12913  004422  D003               	goto	l1475
 12914  004424                     l1484:
 12915  004424  A281               	btfss	3969,1,c	;volatile
 12916  004426  D7C3               	goto	l8862
 12917  004428  D7FD               	goto	l1484
 12918  00442A                     l1475:
 12919                           
 12920                           ; BSR set to: 0
 12921                           ;Test.c: 674: }
 12922                           ;Test.c: 675: }
 12923                           ;Test.c: 677: (INTCONbits.GIE = 0);
 12924  00442A  9EF2               	bcf	intcon,7,c	;volatile
 12925                           
 12926                           ; BSR set to: 0
 12927                           ;Test.c: 678: stopSignals();
 12928  00442C  EC83  F02D         	call	_stopSignals	;wreg free
 12929                           
 12930                           ;Test.c: 679: machine_state = Testing_state;
 12931  004430  0E03               	movlw	3
 12932  004432  0100               	movlb	0	; () banked
 12933  004434  6FFC               	movwf	_machine_state& (0+255),b
 12934                           
 12935                           ; BSR set to: 0
 12936  004436  0012               	return		;funcret
 12937  004438                     __end_of_arm:
 12938                           	opt stack 0
 12939                           tblptru	equ	0xFF8
 12940                           tblptrh	equ	0xFF7
 12941                           tblptrl	equ	0xFF6
 12942                           tablat	equ	0xFF5
 12943                           prodh	equ	0xFF4
 12944                           prodl	equ	0xFF3
 12945                           intcon	equ	0xFF2
 12946                           intcon2	equ	0xFF1
 12947                           intcon3	equ	0xFF0
 12948                           postinc0	equ	0xFEE
 12949                           wreg	equ	0xFE8
 12950                           postdec1	equ	0xFE5
 12951                           fsr1l	equ	0xFE1
 12952                           indf2	equ	0xFDF
 12953                           postinc2	equ	0xFDE
 12954                           postdec2	equ	0xFDD
 12955                           fsr2h	equ	0xFDA
 12956                           fsr2l	equ	0xFD9
 12957                           status	equ	0xFD8
 12958                           
 12959 ;; *************** function _algorithmTest *****************
 12960 ;; Defined at:
 12961 ;;		line 79 in file "Test.c"
 12962 ;; Parameters:    Size  Location     Type
 12963 ;;		None
 12964 ;; Auto vars:     Size  Location     Type
 12965 ;;		None
 12966 ;; Return value:  Size  Location     Type
 12967 ;;                  1    wreg      void 
 12968 ;; Registers used:
 12969 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12970 ;; Tracked objects:
 12971 ;;		On entry : 0/0
 12972 ;;		On exit  : 0/0
 12973 ;;		Unchanged: 0/0
 12974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12978 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12979 ;;Total ram usage:        2 bytes
 12980 ;; Hardware stack levels used:    1
 12981 ;; Hardware stack levels required when called:   10
 12982 ;; This function calls:
 12983 ;;		_lcdInst
 12984 ;;		_printf
 12985 ;; This function is called by:
 12986 ;;		_Test
 12987 ;; This function uses a non-reentrant model
 12988 ;;
 12989                           
 12990                           	psect	text44
 12991  004602                     __ptext44:
 12992                           	opt stack 0
 12993  004602                     _algorithmTest:
 12994                           	opt stack 19
 12995                           
 12996                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12997                           
 12998                           ; BSR set to: 0
 12999                           ;incstack = 0
 13000  004602  0E01               	movlw	1
 13001  004604  ECDC  F02D         	call	_lcdInst
 13002  004608  0E68               	movlw	104
 13003  00460A  0100               	movlb	0	; () banked
 13004  00460C  6FAB               	movwf	??_algorithmTest& (0+255),b
 13005  00460E  0EE4               	movlw	228
 13006  004610                     u10727:
 13007  004610  2EE8               	decfsz	wreg,f,c
 13008  004612  D7FE               	bra	u10727
 13009  004614  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13010  004616  D7FC               	bra	u10727
 13011  004618  F000               	nop	
 13012  00461A  0E80               	movlw	128
 13013  00461C  ECDC  F02D         	call	_lcdInst
 13014                           
 13015                           ;Test.c: 82: printf("ALGORITHM TEST");
 13016  004620  0EF4               	movlw	low STR_71
 13017  004622  0100               	movlb	0	; () banked
 13018  004624  6F8E               	movwf	printf@f& (0+255),b
 13019  004626  0EFE               	movlw	high STR_71
 13020  004628  0100               	movlb	0	; () banked
 13021  00462A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13022  00462C  EC8D  F00D         	call	_printf	;wreg free
 13023                           
 13024                           ;Test.c: 83: lcdInst(0b11000000);;
 13025  004630  0EC0               	movlw	192
 13026  004632  ECDC  F02D         	call	_lcdInst
 13027                           
 13028                           ;Test.c: 84: printf("PUSH TO START");
 13029  004636  0E2D               	movlw	low STR_72
 13030  004638  0100               	movlb	0	; () banked
 13031  00463A  6F8E               	movwf	printf@f& (0+255),b
 13032  00463C  0EFF               	movlw	high STR_72
 13033  00463E  0100               	movlb	0	; () banked
 13034  004640  6F8F               	movwf	(printf@f+1)& (0+255),b
 13035  004642  EC8D  F00D         	call	_printf	;wreg free
 13036                           
 13037                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 13038  004646  0E05               	movlw	5
 13039  004648  0100               	movlb	0	; () banked
 13040  00464A  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13041  00464C  0E0F               	movlw	15
 13042  00464E  0100               	movlb	0	; () banked
 13043  004650  6FAB               	movwf	??_algorithmTest& (0+255),b
 13044  004652  0EF1               	movlw	241
 13045  004654                     u10737:
 13046  004654  2EE8               	decfsz	wreg,f,c
 13047  004656  D7FE               	bra	u10737
 13048  004658  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13049  00465A  D7FC               	bra	u10737
 13050  00465C  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13051  00465E  D7FA               	bra	u10737
 13052  004660                     l1271:
 13053  004660  A281               	btfss	3969,1,c	;volatile
 13054  004662  D7FE               	goto	l1271
 13055  004664                     l1274:
 13056  004664  B281               	btfsc	3969,1,c	;volatile
 13057  004666  D7FE               	goto	l1274
 13058                           
 13059                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13060  004668  0E01               	movlw	1
 13061  00466A  ECDC  F02D         	call	_lcdInst
 13062  00466E  0E68               	movlw	104
 13063  004670  0100               	movlb	0	; () banked
 13064  004672  6FAB               	movwf	??_algorithmTest& (0+255),b
 13065  004674  0EE4               	movlw	228
 13066  004676                     u10747:
 13067  004676  2EE8               	decfsz	wreg,f,c
 13068  004678  D7FE               	bra	u10747
 13069  00467A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13070  00467C  D7FC               	bra	u10747
 13071  00467E  F000               	nop	
 13072  004680  0E80               	movlw	128
 13073  004682  ECDC  F02D         	call	_lcdInst
 13074                           
 13075                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 13076  004686  0E41               	movlw	low STR_73
 13077  004688  0100               	movlb	0	; () banked
 13078  00468A  6F8E               	movwf	printf@f& (0+255),b
 13079  00468C  0EFC               	movlw	high STR_73
 13080  00468E  0100               	movlb	0	; () banked
 13081  004690  6F8F               	movwf	(printf@f+1)& (0+255),b
 13082  004692  EC8D  F00D         	call	_printf	;wreg free
 13083                           
 13084                           ;Test.c: 100: printf("ALG2: 12 CANS");
 13085  004696  0E11               	movlw	low STR_74
 13086  004698  0100               	movlb	0	; () banked
 13087  00469A  6F8E               	movwf	printf@f& (0+255),b
 13088  00469C  0EFF               	movlw	high STR_74
 13089  00469E  0100               	movlb	0	; () banked
 13090  0046A0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13091  0046A2  EC8D  F00D         	call	_printf	;wreg free
 13092                           
 13093                           ;Test.c: 109: printf("ALG3: 1 CAN");
 13094  0046A6  0E64               	movlw	low STR_75
 13095  0046A8  0100               	movlb	0	; () banked
 13096  0046AA  6F8E               	movwf	printf@f& (0+255),b
 13097  0046AC  0EFF               	movlw	high STR_75
 13098  0046AE  0100               	movlb	0	; () banked
 13099  0046B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13100  0046B2  EC8D  F00D         	call	_printf	;wreg free
 13101                           
 13102                           ;Test.c: 115: printf("ALG4: ALL CANS");
 13103  0046B6  0ED6               	movlw	low STR_76
 13104  0046B8  0100               	movlb	0	; () banked
 13105  0046BA  6F8E               	movwf	printf@f& (0+255),b
 13106  0046BC  0EFE               	movlw	high STR_76
 13107  0046BE  0100               	movlb	0	; () banked
 13108  0046C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13109  0046C2  EC8D  F00D         	call	_printf	;wreg free
 13110                           
 13111                           ;Test.c: 120: printf("ALG5: NO CANS");
 13112  0046C6  0E1F               	movlw	low STR_77
 13113  0046C8  0100               	movlb	0	; () banked
 13114  0046CA  6F8E               	movwf	printf@f& (0+255),b
 13115  0046CC  0EFF               	movlw	high STR_77
 13116  0046CE  0100               	movlb	0	; () banked
 13117  0046D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13118  0046D2  EC8D  F00D         	call	_printf	;wreg free
 13119  0046D6  0012               	return		;funcret
 13120  0046D8                     __end_of_algorithmTest:
 13121                           	opt stack 0
 13122                           tblptru	equ	0xFF8
 13123                           tblptrh	equ	0xFF7
 13124                           tblptrl	equ	0xFF6
 13125                           tablat	equ	0xFF5
 13126                           prodh	equ	0xFF4
 13127                           prodl	equ	0xFF3
 13128                           intcon	equ	0xFF2
 13129                           intcon2	equ	0xFF1
 13130                           intcon3	equ	0xFF0
 13131                           postinc0	equ	0xFEE
 13132                           wreg	equ	0xFE8
 13133                           postdec1	equ	0xFE5
 13134                           fsr1l	equ	0xFE1
 13135                           indf2	equ	0xFDF
 13136                           postinc2	equ	0xFDE
 13137                           postdec2	equ	0xFDD
 13138                           fsr2h	equ	0xFDA
 13139                           fsr2l	equ	0xFD9
 13140                           status	equ	0xFD8
 13141                           
 13142 ;; *************** function _actuatorTest *****************
 13143 ;; Defined at:
 13144 ;;		line 202 in file "Test.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;		None
 13147 ;; Auto vars:     Size  Location     Type
 13148 ;;  i               1   45[BANK0 ] unsigned char 
 13149 ;;  i               1   67[BANK0 ] unsigned char 
 13150 ;;  i               1   66[BANK0 ] unsigned char 
 13151 ;;  i               1   65[BANK0 ] unsigned char 
 13152 ;;  i               1   64[BANK0 ] unsigned char 
 13153 ;;  i               1   63[BANK0 ] unsigned char 
 13154 ;;  i               1   62[BANK0 ] unsigned char 
 13155 ;;  i               1   61[BANK0 ] unsigned char 
 13156 ;;  i               1   60[BANK0 ] unsigned char 
 13157 ;;  i               1   59[BANK0 ] unsigned char 
 13158 ;;  i               1   58[BANK0 ] unsigned char 
 13159 ;;  i               1   57[BANK0 ] unsigned char 
 13160 ;;  i               1   56[BANK0 ] unsigned char 
 13161 ;;  i               1   55[BANK0 ] unsigned char 
 13162 ;;  i               1   54[BANK0 ] unsigned char 
 13163 ;;  i               1   53[BANK0 ] unsigned char 
 13164 ;;  i               1   52[BANK0 ] unsigned char 
 13165 ;;  i               1   51[BANK0 ] unsigned char 
 13166 ;;  i               1   50[BANK0 ] unsigned char 
 13167 ;;  i               1   49[BANK0 ] unsigned char 
 13168 ;;  i               1   48[BANK0 ] unsigned char 
 13169 ;;  i               1   47[BANK0 ] unsigned char 
 13170 ;;  i               1   46[BANK0 ] unsigned char 
 13171 ;;  i               2   68[BANK0 ] int 
 13172 ;; Return value:  Size  Location     Type
 13173 ;;                  1    wreg      void 
 13174 ;; Registers used:
 13175 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13176 ;; Tracked objects:
 13177 ;;		On entry : 0/0
 13178 ;;		On exit  : 0/0
 13179 ;;		Unchanged: 0/0
 13180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13182 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13183 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13184 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13185 ;;Total ram usage:       27 bytes
 13186 ;; Hardware stack levels used:    1
 13187 ;; Hardware stack levels required when called:   10
 13188 ;; This function calls:
 13189 ;;		_lcdInst
 13190 ;;		_printf
 13191 ;;		_updateServoPosition
 13192 ;; This function is called by:
 13193 ;;		_Test
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           	psect	text45
 13198  0008DA                     __ptext45:
 13199                           	opt stack 0
 13200  0008DA                     _actuatorTest:
 13201                           	opt stack 19
 13202                           
 13203                           ;Test.c: 204: int i = 0;
 13204                           
 13205                           ;incstack = 0
 13206  0008DA  0E00               	movlw	0
 13207  0008DC  0100               	movlb	0	; () banked
 13208  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13209  0008E0  0E00               	movlw	0
 13210  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13211                           
 13212                           ; BSR set to: 0
 13213                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13214  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13215                           
 13216                           ; BSR set to: 0
 13217                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13218  0008E6  0E01               	movlw	1
 13219  0008E8  ECDC  F02D         	call	_lcdInst
 13220  0008EC  0E68               	movlw	104
 13221  0008EE  0100               	movlb	0	; () banked
 13222  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13223  0008F2  0EE4               	movlw	228
 13224  0008F4                     u10757:
 13225  0008F4  2EE8               	decfsz	wreg,f,c
 13226  0008F6  D7FE               	bra	u10757
 13227  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13228  0008FA  D7FC               	bra	u10757
 13229  0008FC  F000               	nop	
 13230  0008FE  0E80               	movlw	128
 13231  000900  ECDC  F02D         	call	_lcdInst
 13232                           
 13233                           ;Test.c: 208: printf("ACTUATORS");
 13234  000904  0E90               	movlw	low STR_89
 13235  000906  0100               	movlb	0	; () banked
 13236  000908  6F8E               	movwf	printf@f& (0+255),b
 13237  00090A  0EFF               	movlw	high STR_89
 13238  00090C  0100               	movlb	0	; () banked
 13239  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13240  000910  EC8D  F00D         	call	_printf	;wreg free
 13241                           
 13242                           ;Test.c: 209: lcdInst(0b11000000);;
 13243  000914  0EC0               	movlw	192
 13244  000916  ECDC  F02D         	call	_lcdInst
 13245                           
 13246                           ;Test.c: 210: printf("PUSH TO START");
 13247  00091A  0E2D               	movlw	low STR_72
 13248  00091C  0100               	movlb	0	; () banked
 13249  00091E  6F8E               	movwf	printf@f& (0+255),b
 13250  000920  0EFF               	movlw	high STR_72
 13251  000922  0100               	movlb	0	; () banked
 13252  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13253  000926  EC8D  F00D         	call	_printf	;wreg free
 13254                           
 13255                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13256  00092A  0E05               	movlw	5
 13257  00092C  0100               	movlb	0	; () banked
 13258  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13259  000930  0E0F               	movlw	15
 13260  000932  0100               	movlb	0	; () banked
 13261  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13262  000936  0EF1               	movlw	241
 13263  000938                     u10767:
 13264  000938  2EE8               	decfsz	wreg,f,c
 13265  00093A  D7FE               	bra	u10767
 13266  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13267  00093E  D7FC               	bra	u10767
 13268  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13269  000942  D7FA               	bra	u10767
 13270  000944                     l1306:
 13271  000944  A281               	btfss	3969,1,c	;volatile
 13272  000946  D7FE               	goto	l1306
 13273  000948                     l1309:
 13274  000948  B281               	btfsc	3969,1,c	;volatile
 13275  00094A  D7FE               	goto	l1309
 13276                           
 13277                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13278  00094C  0E01               	movlw	1
 13279  00094E  ECDC  F02D         	call	_lcdInst
 13280  000952  0E68               	movlw	104
 13281  000954  0100               	movlb	0	; () banked
 13282  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13283  000958  0EE4               	movlw	228
 13284  00095A                     u10777:
 13285  00095A  2EE8               	decfsz	wreg,f,c
 13286  00095C  D7FE               	bra	u10777
 13287  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13288  000960  D7FC               	bra	u10777
 13289  000962  F000               	nop	
 13290  000964  0E80               	movlw	128
 13291  000966  ECDC  F02D         	call	_lcdInst
 13292                           
 13293                           ;Test.c: 219: printf("TST: DC MOTORS");
 13294  00096A  0EE5               	movlw	low STR_91
 13295  00096C  0100               	movlb	0	; () banked
 13296  00096E  6F8E               	movwf	printf@f& (0+255),b
 13297  000970  0EFE               	movlw	high STR_91
 13298  000972  0100               	movlb	0	; () banked
 13299  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13300  000976  EC8D  F00D         	call	_printf	;wreg free
 13301                           
 13302                           ;Test.c: 220: lcdInst(0b11000000);;
 13303  00097A  0EC0               	movlw	192
 13304  00097C  ECDC  F02D         	call	_lcdInst
 13305                           
 13306                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13307  000980  0E03               	movlw	low STR_92
 13308  000982  0100               	movlb	0	; () banked
 13309  000984  6F8E               	movwf	printf@f& (0+255),b
 13310  000986  0EFF               	movlw	high STR_92
 13311  000988  0100               	movlb	0	; () banked
 13312  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13313  00098C  EC8D  F00D         	call	_printf	;wreg free
 13314                           
 13315                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13316  000990  848A               	bsf	3978,2,c	;volatile
 13317                           
 13318                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13319  000992  0E00               	movlw	0
 13320  000994  0100               	movlb	0	; () banked
 13321  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13322  000998  0E00               	movlw	0
 13323  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13324                           
 13325                           ; BSR set to: 0
 13326  00099C  0100               	movlb	0	; () banked
 13327  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13328  0009A0  D008               	goto	l8448
 13329  0009A2  0100               	movlb	0	; () banked
 13330  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13331  0009A6  E123               	bnz	l1313
 13332  0009A8  0E05               	movlw	5
 13333  0009AA  0100               	movlb	0	; () banked
 13334  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13335  0009AE  B0D8               	btfsc	status,0,c
 13336  0009B0  D01E               	goto	l1313
 13337  0009B2                     l8448:
 13338                           
 13339                           ; BSR set to: 0
 13340  0009B2  0E00               	movlw	0
 13341  0009B4  0100               	movlb	0	; () banked
 13342  0009B6  6FAD               	movwf	actuatorTest@i_1740& (0+255),b
 13343  0009B8                     l8450:
 13344                           
 13345                           ; BSR set to: 0
 13346  0009B8  0E63               	movlw	99
 13347  0009BA  0100               	movlb	0	; () banked
 13348  0009BC  65AD               	cpfsgt	actuatorTest@i_1740& (0+255),b
 13349  0009BE  D001               	goto	l8454
 13350  0009C0  D00C               	goto	l8458
 13351  0009C2                     l8454:
 13352                           
 13353                           ; BSR set to: 0
 13354  0009C2  0E68               	movlw	104
 13355  0009C4  0100               	movlb	0	; () banked
 13356  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13357  0009C8  0EE4               	movlw	228
 13358  0009CA                     u10787:
 13359  0009CA  2EE8               	decfsz	wreg,f,c
 13360  0009CC  D7FE               	bra	u10787
 13361  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13362  0009D0  D7FC               	bra	u10787
 13363  0009D2  F000               	nop	
 13364  0009D4  0100               	movlb	0	; () banked
 13365  0009D6  2BAD               	incf	actuatorTest@i_1740& (0+255),f,b
 13366  0009D8  D7EF               	goto	l8450
 13367  0009DA                     l8458:
 13368                           
 13369                           ; BSR set to: 0
 13370  0009DA  0100               	movlb	0	; () banked
 13371  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13372  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13373                           
 13374                           ; BSR set to: 0
 13375  0009E0  0100               	movlb	0	; () banked
 13376  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13377  0009E4  D7E6               	goto	l8448
 13378  0009E6  0100               	movlb	0	; () banked
 13379  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13380  0009EA  E101               	bnz	u7340
 13381  0009EC  D7DD               	goto	L10
 13382  0009EE                     u7340:
 13383  0009EE                     l1313:
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13387  0009EE  948A               	bcf	3978,2,c	;volatile
 13388                           
 13389                           ; BSR set to: 0
 13390                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13391  0009F0  0E01               	movlw	1
 13392  0009F2  ECDC  F02D         	call	_lcdInst
 13393  0009F6  0E68               	movlw	104
 13394  0009F8  0100               	movlb	0	; () banked
 13395  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13396  0009FC  0EE4               	movlw	228
 13397  0009FE                     u10797:
 13398  0009FE  2EE8               	decfsz	wreg,f,c
 13399  000A00  D7FE               	bra	u10797
 13400  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13401  000A04  D7FC               	bra	u10797
 13402  000A06  F000               	nop	
 13403  000A08  0E80               	movlw	128
 13404  000A0A  ECDC  F02D         	call	_lcdInst
 13405                           
 13406                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13407  000A0E  0E52               	movlw	low STR_93
 13408  000A10  0100               	movlb	0	; () banked
 13409  000A12  6F8E               	movwf	printf@f& (0+255),b
 13410  000A14  0EFC               	movlw	high STR_93
 13411  000A16  0100               	movlb	0	; () banked
 13412  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13413  000A1A  EC8D  F00D         	call	_printf	;wreg free
 13414                           
 13415                           ;Test.c: 232: lcdInst(0b11000000);;
 13416  000A1E  0EC0               	movlw	192
 13417  000A20  ECDC  F02D         	call	_lcdInst
 13418                           
 13419                           ;Test.c: 233: printf("PIN RA3...");
 13420  000A24  0E70               	movlw	low STR_94
 13421  000A26  0100               	movlb	0	; () banked
 13422  000A28  6F8E               	movwf	printf@f& (0+255),b
 13423  000A2A  0EFF               	movlw	high STR_94
 13424  000A2C  0100               	movlb	0	; () banked
 13425  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13426  000A30  EC8D  F00D         	call	_printf	;wreg free
 13427                           
 13428                           ;Test.c: 234: for(i=0;i<5;i++){
 13429  000A34  0E00               	movlw	0
 13430  000A36  0100               	movlb	0	; () banked
 13431  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13432  000A3A  0E00               	movlw	0
 13433  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13434                           
 13435                           ; BSR set to: 0
 13436  000A3E  0100               	movlb	0	; () banked
 13437  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13438  000A42  D008               	goto	l1316
 13439  000A44  0100               	movlb	0	; () banked
 13440  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13441  000A48  E12C               	bnz	l1317
 13442  000A4A  0E05               	movlw	5
 13443  000A4C  0100               	movlb	0	; () banked
 13444  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13445  000A50  B0D8               	btfsc	status,0,c
 13446  000A52  D027               	goto	l1317
 13447  000A54                     l1316:
 13448                           
 13449                           ; BSR set to: 0
 13450                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13451  000A54  8689               	bsf	3977,3,c	;volatile
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13455  000A56  0E0D               	movlw	13
 13456  000A58  0100               	movlb	0	; () banked
 13457  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13458  000A5C  0E2D               	movlw	45
 13459  000A5E  0100               	movlb	0	; () banked
 13460  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13461  000A62  0ED7               	movlw	215
 13462  000A64                     u10807:
 13463  000A64  2EE8               	decfsz	wreg,f,c
 13464  000A66  D7FE               	bra	u10807
 13465  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13466  000A6A  D7FC               	bra	u10807
 13467  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13468  000A6E  D7FA               	bra	u10807
 13469  000A70  D000               	nop2	
 13470                           
 13471                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13472  000A72  9689               	bcf	3977,3,c	;volatile
 13473                           
 13474                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13475  000A74  0E1D               	movlw	29
 13476  000A76  0100               	movlb	0	; () banked
 13477  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13478  000A7A  0E69               	movlw	105
 13479  000A7C  0100               	movlb	0	; () banked
 13480  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13481  000A80  0EA5               	movlw	165
 13482  000A82                     u10817:
 13483  000A82  2EE8               	decfsz	wreg,f,c
 13484  000A84  D7FE               	bra	u10817
 13485  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13486  000A88  D7FC               	bra	u10817
 13487  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13488  000A8C  D7FA               	bra	u10817
 13489  000A8E  0100               	movlb	0	; () banked
 13490  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13491  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13492  000A94  0100               	movlb	0	; () banked
 13493  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13494  000A98  D7DD               	goto	l1316
 13495  000A9A  0100               	movlb	0	; () banked
 13496  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13497  000A9E  E101               	bnz	u7360
 13498  000AA0  D7D4               	goto	L11
 13499  000AA2                     u7360:
 13500  000AA2                     l1317:
 13501                           
 13502                           ; BSR set to: 0
 13503                           ;Test.c: 239: }
 13504                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13505  000AA2  9689               	bcf	3977,3,c	;volatile
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13509  000AA4  0E01               	movlw	1
 13510  000AA6  ECDC  F02D         	call	_lcdInst
 13511  000AAA  0E68               	movlw	104
 13512  000AAC  0100               	movlb	0	; () banked
 13513  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13514  000AB0  0EE4               	movlw	228
 13515  000AB2                     u10827:
 13516  000AB2  2EE8               	decfsz	wreg,f,c
 13517  000AB4  D7FE               	bra	u10827
 13518  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13519  000AB8  D7FC               	bra	u10827
 13520  000ABA  F000               	nop	
 13521  000ABC  0E80               	movlw	128
 13522  000ABE  ECDC  F02D         	call	_lcdInst
 13523                           
 13524                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13525  000AC2  0E63               	movlw	low STR_95
 13526  000AC4  0100               	movlb	0	; () banked
 13527  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13528  000AC8  0EFC               	movlw	high STR_95
 13529  000ACA  0100               	movlb	0	; () banked
 13530  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13531  000ACE  EC8D  F00D         	call	_printf	;wreg free
 13532                           
 13533                           ;Test.c: 248: lcdInst(0b11000000);;
 13534  000AD2  0EC0               	movlw	192
 13535  000AD4  ECDC  F02D         	call	_lcdInst
 13536                           
 13537                           ;Test.c: 249: printf("PIN RA4...");
 13538  000AD8  0E7B               	movlw	low STR_96
 13539  000ADA  0100               	movlb	0	; () banked
 13540  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13541  000ADE  0EFF               	movlw	high STR_96
 13542  000AE0  0100               	movlb	0	; () banked
 13543  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13544  000AE4  EC8D  F00D         	call	_printf	;wreg free
 13545                           
 13546                           ;Test.c: 250: for(i=0;i<5;i++){
 13547  000AE8  0E00               	movlw	0
 13548  000AEA  0100               	movlb	0	; () banked
 13549  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13550  000AEE  0E00               	movlw	0
 13551  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13552                           
 13553                           ; BSR set to: 0
 13554  000AF2  0100               	movlb	0	; () banked
 13555  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13556  000AF6  D008               	goto	l1318
 13557  000AF8  0100               	movlb	0	; () banked
 13558  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13559  000AFC  E12C               	bnz	l1319
 13560  000AFE  0E05               	movlw	5
 13561  000B00  0100               	movlb	0	; () banked
 13562  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13563  000B04  B0D8               	btfsc	status,0,c
 13564  000B06  D027               	goto	l1319
 13565  000B08                     l1318:
 13566                           
 13567                           ; BSR set to: 0
 13568                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13569  000B08  8889               	bsf	3977,4,c	;volatile
 13570                           
 13571                           ; BSR set to: 0
 13572                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13573  000B0A  0E0D               	movlw	13
 13574  000B0C  0100               	movlb	0	; () banked
 13575  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13576  000B10  0E2D               	movlw	45
 13577  000B12  0100               	movlb	0	; () banked
 13578  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13579  000B16  0ED7               	movlw	215
 13580  000B18                     u10837:
 13581  000B18  2EE8               	decfsz	wreg,f,c
 13582  000B1A  D7FE               	bra	u10837
 13583  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13584  000B1E  D7FC               	bra	u10837
 13585  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13586  000B22  D7FA               	bra	u10837
 13587  000B24  D000               	nop2	
 13588                           
 13589                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13590  000B26  9889               	bcf	3977,4,c	;volatile
 13591                           
 13592                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13593  000B28  0E1D               	movlw	29
 13594  000B2A  0100               	movlb	0	; () banked
 13595  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13596  000B2E  0E69               	movlw	105
 13597  000B30  0100               	movlb	0	; () banked
 13598  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13599  000B34  0EA5               	movlw	165
 13600  000B36                     u10847:
 13601  000B36  2EE8               	decfsz	wreg,f,c
 13602  000B38  D7FE               	bra	u10847
 13603  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13604  000B3C  D7FC               	bra	u10847
 13605  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13606  000B40  D7FA               	bra	u10847
 13607  000B42  0100               	movlb	0	; () banked
 13608  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13609  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13610  000B48  0100               	movlb	0	; () banked
 13611  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13612  000B4C  D7DD               	goto	l1318
 13613  000B4E  0100               	movlb	0	; () banked
 13614  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13615  000B52  E101               	bnz	u7380
 13616  000B54  D7D4               	goto	L12
 13617  000B56                     u7380:
 13618  000B56                     l1319:
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;Test.c: 255: }
 13622                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13623  000B56  9889               	bcf	3977,4,c	;volatile
 13624                           
 13625                           ; BSR set to: 0
 13626                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13627  000B58  0E01               	movlw	1
 13628  000B5A  ECDC  F02D         	call	_lcdInst
 13629  000B5E  0E68               	movlw	104
 13630  000B60  0100               	movlb	0	; () banked
 13631  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13632  000B64  0EE4               	movlw	228
 13633  000B66                     u10857:
 13634  000B66  2EE8               	decfsz	wreg,f,c
 13635  000B68  D7FE               	bra	u10857
 13636  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13637  000B6C  D7FC               	bra	u10857
 13638  000B6E  F000               	nop	
 13639  000B70  0E80               	movlw	128
 13640  000B72  ECDC  F02D         	call	_lcdInst
 13641                           
 13642                           ;Test.c: 260: machine_state = Sorting_state;
 13643  000B76  0E01               	movlw	1
 13644  000B78  0100               	movlb	0	; () banked
 13645  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13646                           
 13647                           ; BSR set to: 0
 13648                           ;Test.c: 261: was_low_1 = 0;
 13649  000B7C  0E00               	movlw	0
 13650  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13651  000B80  0E00               	movlw	0
 13652  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13653                           
 13654                           ; BSR set to: 0
 13655                           ;Test.c: 262: was_low_1 = 0;
 13656  000B84  0E00               	movlw	0
 13657  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13658  000B88  0E00               	movlw	0
 13659  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;Test.c: 269: printf("TST: PAN SERVO");
 13663  000B8C  0EC7               	movlw	low STR_97
 13664  000B8E  0100               	movlb	0	; () banked
 13665  000B90  6F8E               	movwf	printf@f& (0+255),b
 13666  000B92  0EFE               	movlw	high STR_97
 13667  000B94  0100               	movlb	0	; () banked
 13668  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13669  000B98  EC8D  F00D         	call	_printf	;wreg free
 13670                           
 13671                           ;Test.c: 270: lcdInst(0b11000000);;
 13672  000B9C  0EC0               	movlw	192
 13673  000B9E  ECDC  F02D         	call	_lcdInst
 13674                           
 13675                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13676  000BA2  0EB9               	movlw	low STR_98
 13677  000BA4  0100               	movlb	0	; () banked
 13678  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13679  000BA8  0EFB               	movlw	high STR_98
 13680  000BAA  0100               	movlb	0	; () banked
 13681  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13682  000BAE  EC8D  F00D         	call	_printf	;wreg free
 13683                           
 13684                           ;Test.c: 272: updateServoPosition(1200, 1);
 13685  000BB2  0E04               	movlw	4
 13686  000BB4  0100               	movlb	0	; () banked
 13687  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13688  000BB8  0EB0               	movlw	176
 13689  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13690  000BBC  0E00               	movlw	0
 13691  000BBE  0100               	movlb	0	; () banked
 13692  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13693  000BC2  0E01               	movlw	1
 13694  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13695  000BC6  ECC7  F026         	call	_updateServoPosition	;wreg free
 13696                           
 13697                           ;Test.c: 273: TMR1ON = 1;
 13698  000BCA  80CD               	bsf	4045,0,c	;volatile
 13699                           
 13700                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13701  000BCC  0E00               	movlw	0
 13702  000BCE  0100               	movlb	0	; () banked
 13703  000BD0  6FAE               	movwf	actuatorTest@i_1747& (0+255),b
 13704  000BD2                     l8534:
 13705                           
 13706                           ; BSR set to: 0
 13707  000BD2  0E63               	movlw	99
 13708  000BD4  0100               	movlb	0	; () banked
 13709  000BD6  65AE               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13710  000BD8  D001               	goto	l8538
 13711  000BDA  D00C               	goto	l8542
 13712  000BDC                     l8538:
 13713                           
 13714                           ; BSR set to: 0
 13715  000BDC  0E68               	movlw	104
 13716  000BDE  0100               	movlb	0	; () banked
 13717  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13718  000BE2  0EE4               	movlw	228
 13719  000BE4                     u10867:
 13720  000BE4  2EE8               	decfsz	wreg,f,c
 13721  000BE6  D7FE               	bra	u10867
 13722  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13723  000BEA  D7FC               	bra	u10867
 13724  000BEC  F000               	nop	
 13725  000BEE  0100               	movlb	0	; () banked
 13726  000BF0  2BAE               	incf	actuatorTest@i_1747& (0+255),f,b
 13727  000BF2  D7EF               	goto	l8534
 13728  000BF4                     l8542:
 13729                           
 13730                           ; BSR set to: 0
 13731  000BF4  0E00               	movlw	0
 13732  000BF6  0100               	movlb	0	; () banked
 13733  000BF8  6FAF               	movwf	actuatorTest@i_1748& (0+255),b
 13734  000BFA                     l8544:
 13735                           
 13736                           ; BSR set to: 0
 13737  000BFA  0E63               	movlw	99
 13738  000BFC  0100               	movlb	0	; () banked
 13739  000BFE  65AF               	cpfsgt	actuatorTest@i_1748& (0+255),b
 13740  000C00  D001               	goto	l8548
 13741  000C02  D00C               	goto	l8552
 13742  000C04                     l8548:
 13743                           
 13744                           ; BSR set to: 0
 13745  000C04  0E68               	movlw	104
 13746  000C06  0100               	movlb	0	; () banked
 13747  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13748  000C0A  0EE4               	movlw	228
 13749  000C0C                     u10877:
 13750  000C0C  2EE8               	decfsz	wreg,f,c
 13751  000C0E  D7FE               	bra	u10877
 13752  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13753  000C12  D7FC               	bra	u10877
 13754  000C14  F000               	nop	
 13755  000C16  0100               	movlb	0	; () banked
 13756  000C18  2BAF               	incf	actuatorTest@i_1748& (0+255),f,b
 13757  000C1A  D7EF               	goto	l8544
 13758  000C1C                     l8552:
 13759                           
 13760                           ; BSR set to: 0
 13761                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13762  000C1C  0E80               	movlw	128
 13763  000C1E  ECDC  F02D         	call	_lcdInst
 13764  000C22  0EC0               	movlw	192
 13765  000C24  ECDC  F02D         	call	_lcdInst
 13766                           
 13767                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13768  000C28  0EA8               	movlw	low STR_99
 13769  000C2A  0100               	movlb	0	; () banked
 13770  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13771  000C2E  0EFB               	movlw	high STR_99
 13772  000C30  0100               	movlb	0	; () banked
 13773  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13774  000C34  EC8D  F00D         	call	_printf	;wreg free
 13775                           
 13776                           ;Test.c: 278: updateServoPosition(500, 1);
 13777  000C38  0E01               	movlw	1
 13778  000C3A  0100               	movlb	0	; () banked
 13779  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13780  000C3E  0EF4               	movlw	244
 13781  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13782  000C42  0E00               	movlw	0
 13783  000C44  0100               	movlb	0	; () banked
 13784  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13785  000C48  0E01               	movlw	1
 13786  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13787  000C4C  ECC7  F026         	call	_updateServoPosition	;wreg free
 13788                           
 13789                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13790  000C50  0E00               	movlw	0
 13791  000C52  0100               	movlb	0	; () banked
 13792  000C54  6FB0               	movwf	actuatorTest@i_1750& (0+255),b
 13793  000C56                     l8560:
 13794                           
 13795                           ; BSR set to: 0
 13796  000C56  0E63               	movlw	99
 13797  000C58  0100               	movlb	0	; () banked
 13798  000C5A  65B0               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13799  000C5C  D001               	goto	l8564
 13800  000C5E  D00C               	goto	l8568
 13801  000C60                     l8564:
 13802                           
 13803                           ; BSR set to: 0
 13804  000C60  0E68               	movlw	104
 13805  000C62  0100               	movlb	0	; () banked
 13806  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13807  000C66  0EE4               	movlw	228
 13808  000C68                     u10887:
 13809  000C68  2EE8               	decfsz	wreg,f,c
 13810  000C6A  D7FE               	bra	u10887
 13811  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13812  000C6E  D7FC               	bra	u10887
 13813  000C70  F000               	nop	
 13814  000C72  0100               	movlb	0	; () banked
 13815  000C74  2BB0               	incf	actuatorTest@i_1750& (0+255),f,b
 13816  000C76  D7EF               	goto	l8560
 13817  000C78                     l8568:
 13818                           
 13819                           ; BSR set to: 0
 13820  000C78  0E00               	movlw	0
 13821  000C7A  0100               	movlb	0	; () banked
 13822  000C7C  6FB1               	movwf	actuatorTest@i_1751& (0+255),b
 13823  000C7E                     l8570:
 13824                           
 13825                           ; BSR set to: 0
 13826  000C7E  0E63               	movlw	99
 13827  000C80  0100               	movlb	0	; () banked
 13828  000C82  65B1               	cpfsgt	actuatorTest@i_1751& (0+255),b
 13829  000C84  D001               	goto	l8574
 13830  000C86  D00C               	goto	l8578
 13831  000C88                     l8574:
 13832                           
 13833                           ; BSR set to: 0
 13834  000C88  0E68               	movlw	104
 13835  000C8A  0100               	movlb	0	; () banked
 13836  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13837  000C8E  0EE4               	movlw	228
 13838  000C90                     u10897:
 13839  000C90  2EE8               	decfsz	wreg,f,c
 13840  000C92  D7FE               	bra	u10897
 13841  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13842  000C96  D7FC               	bra	u10897
 13843  000C98  F000               	nop	
 13844  000C9A  0100               	movlb	0	; () banked
 13845  000C9C  2BB1               	incf	actuatorTest@i_1751& (0+255),f,b
 13846  000C9E  D7EF               	goto	l8570
 13847  000CA0                     l8578:
 13848                           
 13849                           ; BSR set to: 0
 13850                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13851  000CA0  0E80               	movlw	128
 13852  000CA2  ECDC  F02D         	call	_lcdInst
 13853  000CA6  0EC0               	movlw	192
 13854  000CA8  ECDC  F02D         	call	_lcdInst
 13855                           
 13856                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13857  000CAC  0E86               	movlw	low STR_100
 13858  000CAE  0100               	movlb	0	; () banked
 13859  000CB0  6F8E               	movwf	printf@f& (0+255),b
 13860  000CB2  0EFB               	movlw	high STR_100
 13861  000CB4  0100               	movlb	0	; () banked
 13862  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13863  000CB8  EC8D  F00D         	call	_printf	;wreg free
 13864                           
 13865                           ;Test.c: 283: updateServoPosition(2400, 1);
 13866  000CBC  0E09               	movlw	9
 13867  000CBE  0100               	movlb	0	; () banked
 13868  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13869  000CC2  0E60               	movlw	96
 13870  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13871  000CC6  0E00               	movlw	0
 13872  000CC8  0100               	movlb	0	; () banked
 13873  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13874  000CCC  0E01               	movlw	1
 13875  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13876  000CD0  ECC7  F026         	call	_updateServoPosition	;wreg free
 13877                           
 13878                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13879  000CD4  0E00               	movlw	0
 13880  000CD6  0100               	movlb	0	; () banked
 13881  000CD8  6FB2               	movwf	actuatorTest@i_1753& (0+255),b
 13882  000CDA                     l8586:
 13883                           
 13884                           ; BSR set to: 0
 13885  000CDA  0E63               	movlw	99
 13886  000CDC  0100               	movlb	0	; () banked
 13887  000CDE  65B2               	cpfsgt	actuatorTest@i_1753& (0+255),b
 13888  000CE0  D001               	goto	l8590
 13889  000CE2  D00C               	goto	l8594
 13890  000CE4                     l8590:
 13891                           
 13892                           ; BSR set to: 0
 13893  000CE4  0E68               	movlw	104
 13894  000CE6  0100               	movlb	0	; () banked
 13895  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13896  000CEA  0EE4               	movlw	228
 13897  000CEC                     u10907:
 13898  000CEC  2EE8               	decfsz	wreg,f,c
 13899  000CEE  D7FE               	bra	u10907
 13900  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13901  000CF2  D7FC               	bra	u10907
 13902  000CF4  F000               	nop	
 13903  000CF6  0100               	movlb	0	; () banked
 13904  000CF8  2BB2               	incf	actuatorTest@i_1753& (0+255),f,b
 13905  000CFA  D7EF               	goto	l8586
 13906  000CFC                     l8594:
 13907                           
 13908                           ; BSR set to: 0
 13909  000CFC  0E00               	movlw	0
 13910  000CFE  0100               	movlb	0	; () banked
 13911  000D00  6FB3               	movwf	actuatorTest@i_1754& (0+255),b
 13912  000D02                     l8596:
 13913                           
 13914                           ; BSR set to: 0
 13915  000D02  0E63               	movlw	99
 13916  000D04  0100               	movlb	0	; () banked
 13917  000D06  65B3               	cpfsgt	actuatorTest@i_1754& (0+255),b
 13918  000D08  D001               	goto	l8600
 13919  000D0A  D00C               	goto	l8604
 13920  000D0C                     l8600:
 13921                           
 13922                           ; BSR set to: 0
 13923  000D0C  0E68               	movlw	104
 13924  000D0E  0100               	movlb	0	; () banked
 13925  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 13926  000D12  0EE4               	movlw	228
 13927  000D14                     u10917:
 13928  000D14  2EE8               	decfsz	wreg,f,c
 13929  000D16  D7FE               	bra	u10917
 13930  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13931  000D1A  D7FC               	bra	u10917
 13932  000D1C  F000               	nop	
 13933  000D1E  0100               	movlb	0	; () banked
 13934  000D20  2BB3               	incf	actuatorTest@i_1754& (0+255),f,b
 13935  000D22  D7EF               	goto	l8596
 13936  000D24                     l8604:
 13937                           
 13938                           ; BSR set to: 0
 13939                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13940  000D24  0E80               	movlw	128
 13941  000D26  ECDC  F02D         	call	_lcdInst
 13942  000D2A  0EC0               	movlw	192
 13943  000D2C  ECDC  F02D         	call	_lcdInst
 13944                           
 13945                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 13946  000D30  0E0E               	movlw	low STR_101
 13947  000D32  0100               	movlb	0	; () banked
 13948  000D34  6F8E               	movwf	printf@f& (0+255),b
 13949  000D36  0EFC               	movlw	high STR_101
 13950  000D38  0100               	movlb	0	; () banked
 13951  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13952  000D3C  EC8D  F00D         	call	_printf	;wreg free
 13953                           
 13954                           ;Test.c: 288: updateServoPosition(1670, 1);
 13955  000D40  0E06               	movlw	6
 13956  000D42  0100               	movlb	0	; () banked
 13957  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13958  000D46  0E86               	movlw	134
 13959  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13960  000D4A  0E00               	movlw	0
 13961  000D4C  0100               	movlb	0	; () banked
 13962  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13963  000D50  0E01               	movlw	1
 13964  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13965  000D54  ECC7  F026         	call	_updateServoPosition	;wreg free
 13966                           
 13967                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13968  000D58  0E00               	movlw	0
 13969  000D5A  0100               	movlb	0	; () banked
 13970  000D5C  6FB4               	movwf	actuatorTest@i_1756& (0+255),b
 13971  000D5E                     l8612:
 13972                           
 13973                           ; BSR set to: 0
 13974  000D5E  0E63               	movlw	99
 13975  000D60  0100               	movlb	0	; () banked
 13976  000D62  65B4               	cpfsgt	actuatorTest@i_1756& (0+255),b
 13977  000D64  D001               	goto	l8616
 13978  000D66  D00C               	goto	l8620
 13979  000D68                     l8616:
 13980                           
 13981                           ; BSR set to: 0
 13982  000D68  0E68               	movlw	104
 13983  000D6A  0100               	movlb	0	; () banked
 13984  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13985  000D6E  0EE4               	movlw	228
 13986  000D70                     u10927:
 13987  000D70  2EE8               	decfsz	wreg,f,c
 13988  000D72  D7FE               	bra	u10927
 13989  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13990  000D76  D7FC               	bra	u10927
 13991  000D78  F000               	nop	
 13992  000D7A  0100               	movlb	0	; () banked
 13993  000D7C  2BB4               	incf	actuatorTest@i_1756& (0+255),f,b
 13994  000D7E  D7EF               	goto	l8612
 13995  000D80                     l8620:
 13996                           
 13997                           ; BSR set to: 0
 13998  000D80  0E00               	movlw	0
 13999  000D82  0100               	movlb	0	; () banked
 14000  000D84  6FB5               	movwf	actuatorTest@i_1757& (0+255),b
 14001  000D86                     l8622:
 14002                           
 14003                           ; BSR set to: 0
 14004  000D86  0E63               	movlw	99
 14005  000D88  0100               	movlb	0	; () banked
 14006  000D8A  65B5               	cpfsgt	actuatorTest@i_1757& (0+255),b
 14007  000D8C  D001               	goto	l8626
 14008  000D8E  D00C               	goto	l8630
 14009  000D90                     l8626:
 14010                           
 14011                           ; BSR set to: 0
 14012  000D90  0E68               	movlw	104
 14013  000D92  0100               	movlb	0	; () banked
 14014  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14015  000D96  0EE4               	movlw	228
 14016  000D98                     u10937:
 14017  000D98  2EE8               	decfsz	wreg,f,c
 14018  000D9A  D7FE               	bra	u10937
 14019  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14020  000D9E  D7FC               	bra	u10937
 14021  000DA0  F000               	nop	
 14022  000DA2  0100               	movlb	0	; () banked
 14023  000DA4  2BB5               	incf	actuatorTest@i_1757& (0+255),f,b
 14024  000DA6  D7EF               	goto	l8622
 14025  000DA8                     l8630:
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14029  000DA8  0E80               	movlw	128
 14030  000DAA  ECDC  F02D         	call	_lcdInst
 14031  000DAE  0EC0               	movlw	192
 14032  000DB0  ECDC  F02D         	call	_lcdInst
 14033                           
 14034                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 14035  000DB4  0E1F               	movlw	low STR_102
 14036  000DB6  0100               	movlb	0	; () banked
 14037  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14038  000DBA  0EFC               	movlw	high STR_102
 14039  000DBC  0100               	movlb	0	; () banked
 14040  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14041  000DC0  EC8D  F00D         	call	_printf	;wreg free
 14042                           
 14043                           ;Test.c: 293: updateServoPosition(850, 1);
 14044  000DC4  0E03               	movlw	3
 14045  000DC6  0100               	movlb	0	; () banked
 14046  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14047  000DCA  0E52               	movlw	82
 14048  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14049  000DCE  0E00               	movlw	0
 14050  000DD0  0100               	movlb	0	; () banked
 14051  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14052  000DD4  0E01               	movlw	1
 14053  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14054  000DD8  ECC7  F026         	call	_updateServoPosition	;wreg free
 14055                           
 14056                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14057  000DDC  0E00               	movlw	0
 14058  000DDE  0100               	movlb	0	; () banked
 14059  000DE0  6FB6               	movwf	actuatorTest@i_1759& (0+255),b
 14060  000DE2                     l8638:
 14061                           
 14062                           ; BSR set to: 0
 14063  000DE2  0E63               	movlw	99
 14064  000DE4  0100               	movlb	0	; () banked
 14065  000DE6  65B6               	cpfsgt	actuatorTest@i_1759& (0+255),b
 14066  000DE8  D001               	goto	l8642
 14067  000DEA  D00C               	goto	l8646
 14068  000DEC                     l8642:
 14069                           
 14070                           ; BSR set to: 0
 14071  000DEC  0E68               	movlw	104
 14072  000DEE  0100               	movlb	0	; () banked
 14073  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14074  000DF2  0EE4               	movlw	228
 14075  000DF4                     u10947:
 14076  000DF4  2EE8               	decfsz	wreg,f,c
 14077  000DF6  D7FE               	bra	u10947
 14078  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14079  000DFA  D7FC               	bra	u10947
 14080  000DFC  F000               	nop	
 14081  000DFE  0100               	movlb	0	; () banked
 14082  000E00  2BB6               	incf	actuatorTest@i_1759& (0+255),f,b
 14083  000E02  D7EF               	goto	l8638
 14084  000E04                     l8646:
 14085                           
 14086                           ; BSR set to: 0
 14087  000E04  0E00               	movlw	0
 14088  000E06  0100               	movlb	0	; () banked
 14089  000E08  6FB7               	movwf	actuatorTest@i_1760& (0+255),b
 14090  000E0A                     l8648:
 14091                           
 14092                           ; BSR set to: 0
 14093  000E0A  0E63               	movlw	99
 14094  000E0C  0100               	movlb	0	; () banked
 14095  000E0E  65B7               	cpfsgt	actuatorTest@i_1760& (0+255),b
 14096  000E10  D001               	goto	l8652
 14097  000E12  D00C               	goto	l8656
 14098  000E14                     l8652:
 14099                           
 14100                           ; BSR set to: 0
 14101  000E14  0E68               	movlw	104
 14102  000E16  0100               	movlb	0	; () banked
 14103  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14104  000E1A  0EE4               	movlw	228
 14105  000E1C                     u10957:
 14106  000E1C  2EE8               	decfsz	wreg,f,c
 14107  000E1E  D7FE               	bra	u10957
 14108  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14109  000E22  D7FC               	bra	u10957
 14110  000E24  F000               	nop	
 14111  000E26  0100               	movlb	0	; () banked
 14112  000E28  2BB7               	incf	actuatorTest@i_1760& (0+255),f,b
 14113  000E2A  D7EF               	goto	l8648
 14114  000E2C                     l8656:
 14115                           
 14116                           ; BSR set to: 0
 14117                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14118  000E2C  0E80               	movlw	128
 14119  000E2E  ECDC  F02D         	call	_lcdInst
 14120  000E32  0EC0               	movlw	192
 14121  000E34  ECDC  F02D         	call	_lcdInst
 14122                           
 14123                           ;Test.c: 297: printf("MID -- 2s       ");
 14124  000E38  0E64               	movlw	low STR_103
 14125  000E3A  0100               	movlb	0	; () banked
 14126  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14127  000E3E  0EFB               	movlw	high STR_103
 14128  000E40  0100               	movlb	0	; () banked
 14129  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14130  000E44  EC8D  F00D         	call	_printf	;wreg free
 14131                           
 14132                           ;Test.c: 298: updateServoPosition(1200, 1);
 14133  000E48  0E04               	movlw	4
 14134  000E4A  0100               	movlb	0	; () banked
 14135  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14136  000E4E  0EB0               	movlw	176
 14137  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14138  000E52  0E00               	movlw	0
 14139  000E54  0100               	movlb	0	; () banked
 14140  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14141  000E58  0E01               	movlw	1
 14142  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14143  000E5C  ECC7  F026         	call	_updateServoPosition	;wreg free
 14144                           
 14145                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14146  000E60  0E00               	movlw	0
 14147  000E62  0100               	movlb	0	; () banked
 14148  000E64  6FB8               	movwf	actuatorTest@i_1762& (0+255),b
 14149  000E66                     l8664:
 14150                           
 14151                           ; BSR set to: 0
 14152  000E66  0E63               	movlw	99
 14153  000E68  0100               	movlb	0	; () banked
 14154  000E6A  65B8               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14155  000E6C  D001               	goto	l8668
 14156  000E6E  D00C               	goto	l8672
 14157  000E70                     l8668:
 14158                           
 14159                           ; BSR set to: 0
 14160  000E70  0E68               	movlw	104
 14161  000E72  0100               	movlb	0	; () banked
 14162  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14163  000E76  0EE4               	movlw	228
 14164  000E78                     u10967:
 14165  000E78  2EE8               	decfsz	wreg,f,c
 14166  000E7A  D7FE               	bra	u10967
 14167  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14168  000E7E  D7FC               	bra	u10967
 14169  000E80  F000               	nop	
 14170  000E82  0100               	movlb	0	; () banked
 14171  000E84  2BB8               	incf	actuatorTest@i_1762& (0+255),f,b
 14172  000E86  D7EF               	goto	l8664
 14173  000E88                     l8672:
 14174                           
 14175                           ; BSR set to: 0
 14176  000E88  0E00               	movlw	0
 14177  000E8A  0100               	movlb	0	; () banked
 14178  000E8C  6FB9               	movwf	actuatorTest@i_1763& (0+255),b
 14179  000E8E                     l8674:
 14180                           
 14181                           ; BSR set to: 0
 14182  000E8E  0E63               	movlw	99
 14183  000E90  0100               	movlb	0	; () banked
 14184  000E92  65B9               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14185  000E94  D001               	goto	l8678
 14186  000E96  D00C               	goto	l1343
 14187  000E98                     l8678:
 14188                           
 14189                           ; BSR set to: 0
 14190  000E98  0E68               	movlw	104
 14191  000E9A  0100               	movlb	0	; () banked
 14192  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14193  000E9E  0EE4               	movlw	228
 14194  000EA0                     u10977:
 14195  000EA0  2EE8               	decfsz	wreg,f,c
 14196  000EA2  D7FE               	bra	u10977
 14197  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14198  000EA6  D7FC               	bra	u10977
 14199  000EA8  F000               	nop	
 14200  000EAA  0100               	movlb	0	; () banked
 14201  000EAC  2BB9               	incf	actuatorTest@i_1763& (0+255),f,b
 14202  000EAE  D7EF               	goto	l8674
 14203  000EB0                     l1343:
 14204                           
 14205                           ; BSR set to: 0
 14206                           ;Test.c: 300: TMR1ON = 0;
 14207  000EB0  90CD               	bcf	4045,0,c	;volatile
 14208                           
 14209                           ; BSR set to: 0
 14210                           ;Test.c: 307: printf("TST: TILT SERVO");
 14211  000EB2  0E2D               	movlw	low STR_104
 14212  000EB4  0100               	movlb	0	; () banked
 14213  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14214  000EB8  0EFE               	movlw	high STR_104
 14215  000EBA  0100               	movlb	0	; () banked
 14216  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14217  000EBE  EC8D  F00D         	call	_printf	;wreg free
 14218                           
 14219                           ;Test.c: 308: lcdInst(0b11000000);;
 14220  000EC2  0EC0               	movlw	192
 14221  000EC4  ECDC  F02D         	call	_lcdInst
 14222                           
 14223                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14224  000EC8  0E97               	movlw	low STR_105
 14225  000ECA  0100               	movlb	0	; () banked
 14226  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14227  000ECE  0EFB               	movlw	high STR_105
 14228  000ED0  0100               	movlb	0	; () banked
 14229  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14230  000ED4  EC8D  F00D         	call	_printf	;wreg free
 14231                           
 14232                           ;Test.c: 310: updateServoPosition(1050, 3);
 14233  000ED8  0E04               	movlw	4
 14234  000EDA  0100               	movlb	0	; () banked
 14235  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14236  000EDE  0E1A               	movlw	26
 14237  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14238  000EE2  0E00               	movlw	0
 14239  000EE4  0100               	movlb	0	; () banked
 14240  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14241  000EE8  0E03               	movlw	3
 14242  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14243  000EEC  ECC7  F026         	call	_updateServoPosition	;wreg free
 14244                           
 14245                           ;Test.c: 311: TMR3ON = 1;
 14246  000EF0  80B1               	bsf	4017,0,c	;volatile
 14247                           
 14248                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14249  000EF2  0E00               	movlw	0
 14250  000EF4  0100               	movlb	0	; () banked
 14251  000EF6  6FBA               	movwf	actuatorTest@i_1766& (0+255),b
 14252  000EF8                     l8692:
 14253                           
 14254                           ; BSR set to: 0
 14255  000EF8  0E63               	movlw	99
 14256  000EFA  0100               	movlb	0	; () banked
 14257  000EFC  65BA               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14258  000EFE  D001               	goto	l8696
 14259  000F00  D00C               	goto	l8700
 14260  000F02                     l8696:
 14261                           
 14262                           ; BSR set to: 0
 14263  000F02  0E68               	movlw	104
 14264  000F04  0100               	movlb	0	; () banked
 14265  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14266  000F08  0EE4               	movlw	228
 14267  000F0A                     u10987:
 14268  000F0A  2EE8               	decfsz	wreg,f,c
 14269  000F0C  D7FE               	bra	u10987
 14270  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14271  000F10  D7FC               	bra	u10987
 14272  000F12  F000               	nop	
 14273  000F14  0100               	movlb	0	; () banked
 14274  000F16  2BBA               	incf	actuatorTest@i_1766& (0+255),f,b
 14275  000F18  D7EF               	goto	l8692
 14276  000F1A                     l8700:
 14277                           
 14278                           ; BSR set to: 0
 14279  000F1A  0E00               	movlw	0
 14280  000F1C  0100               	movlb	0	; () banked
 14281  000F1E  6FBB               	movwf	actuatorTest@i_1767& (0+255),b
 14282  000F20                     l8702:
 14283                           
 14284                           ; BSR set to: 0
 14285  000F20  0E63               	movlw	99
 14286  000F22  0100               	movlb	0	; () banked
 14287  000F24  65BB               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14288  000F26  D001               	goto	l8706
 14289  000F28  D00C               	goto	l8710
 14290  000F2A                     l8706:
 14291                           
 14292                           ; BSR set to: 0
 14293  000F2A  0E68               	movlw	104
 14294  000F2C  0100               	movlb	0	; () banked
 14295  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14296  000F30  0EE4               	movlw	228
 14297  000F32                     u10997:
 14298  000F32  2EE8               	decfsz	wreg,f,c
 14299  000F34  D7FE               	bra	u10997
 14300  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14301  000F38  D7FC               	bra	u10997
 14302  000F3A  F000               	nop	
 14303  000F3C  0100               	movlb	0	; () banked
 14304  000F3E  2BBB               	incf	actuatorTest@i_1767& (0+255),f,b
 14305  000F40  D7EF               	goto	l8702
 14306  000F42                     l8710:
 14307                           
 14308                           ; BSR set to: 0
 14309                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14310  000F42  0E80               	movlw	128
 14311  000F44  ECDC  F02D         	call	_lcdInst
 14312  000F48  0EC0               	movlw	192
 14313  000F4A  ECDC  F02D         	call	_lcdInst
 14314                           
 14315                           ;Test.c: 315: printf("DROP -- 2s      ");
 14316  000F4E  0E75               	movlw	low STR_106
 14317  000F50  0100               	movlb	0	; () banked
 14318  000F52  6F8E               	movwf	printf@f& (0+255),b
 14319  000F54  0EFB               	movlw	high STR_106
 14320  000F56  0100               	movlb	0	; () banked
 14321  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14322  000F5A  EC8D  F00D         	call	_printf	;wreg free
 14323                           
 14324                           ;Test.c: 316: updateServoPosition(1260, 3);
 14325  000F5E  0E04               	movlw	4
 14326  000F60  0100               	movlb	0	; () banked
 14327  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14328  000F64  0EEC               	movlw	236
 14329  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14330  000F68  0E00               	movlw	0
 14331  000F6A  0100               	movlb	0	; () banked
 14332  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14333  000F6E  0E03               	movlw	3
 14334  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14335  000F72  ECC7  F026         	call	_updateServoPosition	;wreg free
 14336                           
 14337                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14338  000F76  0E00               	movlw	0
 14339  000F78  0100               	movlb	0	; () banked
 14340  000F7A  6FBC               	movwf	actuatorTest@i_1769& (0+255),b
 14341  000F7C                     l8718:
 14342                           
 14343                           ; BSR set to: 0
 14344  000F7C  0E63               	movlw	99
 14345  000F7E  0100               	movlb	0	; () banked
 14346  000F80  65BC               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14347  000F82  D001               	goto	l8722
 14348  000F84  D00C               	goto	l8726
 14349  000F86                     l8722:
 14350                           
 14351                           ; BSR set to: 0
 14352  000F86  0E68               	movlw	104
 14353  000F88  0100               	movlb	0	; () banked
 14354  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14355  000F8C  0EE4               	movlw	228
 14356  000F8E                     u11007:
 14357  000F8E  2EE8               	decfsz	wreg,f,c
 14358  000F90  D7FE               	bra	u11007
 14359  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14360  000F94  D7FC               	bra	u11007
 14361  000F96  F000               	nop	
 14362  000F98  0100               	movlb	0	; () banked
 14363  000F9A  2BBC               	incf	actuatorTest@i_1769& (0+255),f,b
 14364  000F9C  D7EF               	goto	l8718
 14365  000F9E                     l8726:
 14366                           
 14367                           ; BSR set to: 0
 14368  000F9E  0E00               	movlw	0
 14369  000FA0  0100               	movlb	0	; () banked
 14370  000FA2  6FBD               	movwf	actuatorTest@i_1770& (0+255),b
 14371  000FA4                     l8728:
 14372                           
 14373                           ; BSR set to: 0
 14374  000FA4  0E63               	movlw	99
 14375  000FA6  0100               	movlb	0	; () banked
 14376  000FA8  65BD               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14377  000FAA  D001               	goto	l8732
 14378  000FAC  D00C               	goto	l8736
 14379  000FAE                     l8732:
 14380                           
 14381                           ; BSR set to: 0
 14382  000FAE  0E68               	movlw	104
 14383  000FB0  0100               	movlb	0	; () banked
 14384  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14385  000FB4  0EE4               	movlw	228
 14386  000FB6                     u11017:
 14387  000FB6  2EE8               	decfsz	wreg,f,c
 14388  000FB8  D7FE               	bra	u11017
 14389  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14390  000FBC  D7FC               	bra	u11017
 14391  000FBE  F000               	nop	
 14392  000FC0  0100               	movlb	0	; () banked
 14393  000FC2  2BBD               	incf	actuatorTest@i_1770& (0+255),f,b
 14394  000FC4  D7EF               	goto	l8728
 14395  000FC6                     l8736:
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14399  000FC6  0E80               	movlw	128
 14400  000FC8  ECDC  F02D         	call	_lcdInst
 14401  000FCC  0EC0               	movlw	192
 14402  000FCE  ECDC  F02D         	call	_lcdInst
 14403                           
 14404                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14405  000FD2  0E97               	movlw	low STR_105
 14406  000FD4  0100               	movlb	0	; () banked
 14407  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14408  000FD8  0EFB               	movlw	high STR_105
 14409  000FDA  0100               	movlb	0	; () banked
 14410  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14411  000FDE  EC8D  F00D         	call	_printf	;wreg free
 14412                           
 14413                           ;Test.c: 321: updateServoPosition(1050, 3);
 14414  000FE2  0E04               	movlw	4
 14415  000FE4  0100               	movlb	0	; () banked
 14416  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14417  000FE8  0E1A               	movlw	26
 14418  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14419  000FEC  0E00               	movlw	0
 14420  000FEE  0100               	movlb	0	; () banked
 14421  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14422  000FF2  0E03               	movlw	3
 14423  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14424  000FF6  ECC7  F026         	call	_updateServoPosition	;wreg free
 14425                           
 14426                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14427  000FFA  0E00               	movlw	0
 14428  000FFC  0100               	movlb	0	; () banked
 14429  000FFE  6FBE               	movwf	actuatorTest@i_1772& (0+255),b
 14430  001000                     l8744:
 14431                           
 14432                           ; BSR set to: 0
 14433  001000  0E63               	movlw	99
 14434  001002  0100               	movlb	0	; () banked
 14435  001004  65BE               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14436  001006  D001               	goto	l8748
 14437  001008  D00C               	goto	l8752
 14438  00100A                     l8748:
 14439                           
 14440                           ; BSR set to: 0
 14441  00100A  0E68               	movlw	104
 14442  00100C  0100               	movlb	0	; () banked
 14443  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14444  001010  0EE4               	movlw	228
 14445  001012                     u11027:
 14446  001012  2EE8               	decfsz	wreg,f,c
 14447  001014  D7FE               	bra	u11027
 14448  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14449  001018  D7FC               	bra	u11027
 14450  00101A  F000               	nop	
 14451  00101C  0100               	movlb	0	; () banked
 14452  00101E  2BBE               	incf	actuatorTest@i_1772& (0+255),f,b
 14453  001020  D7EF               	goto	l8744
 14454  001022                     l8752:
 14455                           
 14456                           ; BSR set to: 0
 14457  001022  0E00               	movlw	0
 14458  001024  0100               	movlb	0	; () banked
 14459  001026  6FBF               	movwf	actuatorTest@i_1773& (0+255),b
 14460  001028                     l8754:
 14461                           
 14462                           ; BSR set to: 0
 14463  001028  0E63               	movlw	99
 14464  00102A  0100               	movlb	0	; () banked
 14465  00102C  65BF               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14466  00102E  D001               	goto	l8758
 14467  001030  D00C               	goto	l1355
 14468  001032                     l8758:
 14469                           
 14470                           ; BSR set to: 0
 14471  001032  0E68               	movlw	104
 14472  001034  0100               	movlb	0	; () banked
 14473  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14474  001038  0EE4               	movlw	228
 14475  00103A                     u11037:
 14476  00103A  2EE8               	decfsz	wreg,f,c
 14477  00103C  D7FE               	bra	u11037
 14478  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14479  001040  D7FC               	bra	u11037
 14480  001042  F000               	nop	
 14481  001044  0100               	movlb	0	; () banked
 14482  001046  2BBF               	incf	actuatorTest@i_1773& (0+255),f,b
 14483  001048  D7EF               	goto	l8754
 14484  00104A                     l1355:
 14485                           
 14486                           ; BSR set to: 0
 14487                           ;Test.c: 323: TMR3ON = 0;
 14488  00104A  90B1               	bcf	4017,0,c	;volatile
 14489                           
 14490                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14491  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14492                           
 14493                           ; BSR set to: 0
 14494                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14495  00104E  0E01               	movlw	1
 14496  001050  ECDC  F02D         	call	_lcdInst
 14497  001054  0E68               	movlw	104
 14498  001056  0100               	movlb	0	; () banked
 14499  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14500  00105A  0EE4               	movlw	228
 14501  00105C                     u11047:
 14502  00105C  2EE8               	decfsz	wreg,f,c
 14503  00105E  D7FE               	bra	u11047
 14504  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14505  001062  D7FC               	bra	u11047
 14506  001064  F000               	nop	
 14507  001066  0E80               	movlw	128
 14508  001068  ECDC  F02D         	call	_lcdInst
 14509                           
 14510                           ;Test.c: 330: printf("TST: CAM SERVO");
 14511  00106C  0EB8               	movlw	low STR_108
 14512  00106E  0100               	movlb	0	; () banked
 14513  001070  6F8E               	movwf	printf@f& (0+255),b
 14514  001072  0EFE               	movlw	high STR_108
 14515  001074  0100               	movlb	0	; () banked
 14516  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14517  001078  EC8D  F00D         	call	_printf	;wreg free
 14518                           
 14519                           ;Test.c: 331: lcdInst(0b11000000);;
 14520  00107C  0EC0               	movlw	192
 14521  00107E  ECDC  F02D         	call	_lcdInst
 14522                           
 14523                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14524  001082  0E9A               	movlw	low STR_109
 14525  001084  0100               	movlb	0	; () banked
 14526  001086  6F8E               	movwf	printf@f& (0+255),b
 14527  001088  0EFE               	movlw	high STR_109
 14528  00108A  0100               	movlb	0	; () banked
 14529  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14530  00108E  EC8D  F00D         	call	_printf	;wreg free
 14531                           
 14532                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14533  001092  808B               	bsf	3979,0,c	;volatile
 14534                           
 14535                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14536  001094  0E00               	movlw	0
 14537  001096  0100               	movlb	0	; () banked
 14538  001098  6FC0               	movwf	actuatorTest@i_1776& (0+255),b
 14539  00109A                     l8778:
 14540                           
 14541                           ; BSR set to: 0
 14542  00109A  0E63               	movlw	99
 14543  00109C  0100               	movlb	0	; () banked
 14544  00109E  65C0               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14545  0010A0  D001               	goto	l8782
 14546  0010A2  D00C               	goto	l8786
 14547  0010A4                     l8782:
 14548                           
 14549                           ; BSR set to: 0
 14550  0010A4  0E68               	movlw	104
 14551  0010A6  0100               	movlb	0	; () banked
 14552  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14553  0010AA  0EE4               	movlw	228
 14554  0010AC                     u11057:
 14555  0010AC  2EE8               	decfsz	wreg,f,c
 14556  0010AE  D7FE               	bra	u11057
 14557  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14558  0010B2  D7FC               	bra	u11057
 14559  0010B4  F000               	nop	
 14560  0010B6  0100               	movlb	0	; () banked
 14561  0010B8  2BC0               	incf	actuatorTest@i_1776& (0+255),f,b
 14562  0010BA  D7EF               	goto	l8778
 14563  0010BC                     l8786:
 14564                           
 14565                           ; BSR set to: 0
 14566  0010BC  0E00               	movlw	0
 14567  0010BE  0100               	movlb	0	; () banked
 14568  0010C0  6FC1               	movwf	actuatorTest@i_1777& (0+255),b
 14569  0010C2                     l8788:
 14570                           
 14571                           ; BSR set to: 0
 14572  0010C2  0E63               	movlw	99
 14573  0010C4  0100               	movlb	0	; () banked
 14574  0010C6  65C1               	cpfsgt	actuatorTest@i_1777& (0+255),b
 14575  0010C8  D001               	goto	l8792
 14576  0010CA  D00C               	goto	l8796
 14577  0010CC                     l8792:
 14578                           
 14579                           ; BSR set to: 0
 14580  0010CC  0E68               	movlw	104
 14581  0010CE  0100               	movlb	0	; () banked
 14582  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14583  0010D2  0EE4               	movlw	228
 14584  0010D4                     u11067:
 14585  0010D4  2EE8               	decfsz	wreg,f,c
 14586  0010D6  D7FE               	bra	u11067
 14587  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14588  0010DA  D7FC               	bra	u11067
 14589  0010DC  F000               	nop	
 14590  0010DE  0100               	movlb	0	; () banked
 14591  0010E0  2BC1               	incf	actuatorTest@i_1777& (0+255),f,b
 14592  0010E2  D7EF               	goto	l8788
 14593  0010E4                     l8796:
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14597  0010E4  0E80               	movlw	128
 14598  0010E6  ECDC  F02D         	call	_lcdInst
 14599  0010EA  0EC0               	movlw	192
 14600  0010EC  ECDC  F02D         	call	_lcdInst
 14601                           
 14602                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14603  0010F0  0E8B               	movlw	low STR_110
 14604  0010F2  0100               	movlb	0	; () banked
 14605  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14606  0010F6  0EFE               	movlw	high STR_110
 14607  0010F8  0100               	movlb	0	; () banked
 14608  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14609  0010FC  EC8D  F00D         	call	_printf	;wreg free
 14610                           
 14611                           ;Test.c: 339: for(i=0;i<10000;i++)
 14612  001100  0E00               	movlw	0
 14613  001102  0100               	movlb	0	; () banked
 14614  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14615  001106  0E00               	movlw	0
 14616  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14617  00110A                     l8802:
 14618                           
 14619                           ; BSR set to: 0
 14620  00110A  0100               	movlb	0	; () banked
 14621  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14622  00110E  D008               	goto	l1360
 14623  001110  0E10               	movlw	16
 14624  001112  0100               	movlb	0	; () banked
 14625  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14626  001116  0E27               	movlw	39
 14627  001118  0100               	movlb	0	; () banked
 14628  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14629  00111C  B0D8               	btfsc	status,0,c
 14630  00111E  D00D               	goto	l8812
 14631  001120                     l1360:
 14632                           
 14633                           ; BSR set to: 0
 14634                           ;Test.c: 340: {
 14635                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14636  001120  808B               	bsf	3979,0,c	;volatile
 14637                           
 14638                           ; BSR set to: 0
 14639                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14640  001122  0E1A               	movlw	26
 14641  001124                     u11077:
 14642  001124  2EE8               	decfsz	wreg,f,c
 14643  001126  D7FE               	bra	u11077
 14644  001128  D000               	nop2	
 14645                           
 14646                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14647  00112A  908B               	bcf	3979,0,c	;volatile
 14648                           
 14649                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14650  00112C  0EF0               	movlw	240
 14651  00112E                     u11087:
 14652  00112E  2EE8               	decfsz	wreg,f,c
 14653  001130  D7FE               	bra	u11087
 14654  001132  0100               	movlb	0	; () banked
 14655  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14656  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14657  001138  D7E8               	goto	l8802
 14658  00113A                     l8812:
 14659                           
 14660                           ; BSR set to: 0
 14661                           ;Test.c: 345: }
 14662                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14663  00113A  0E00               	movlw	0
 14664  00113C  0100               	movlb	0	; () banked
 14665  00113E  6FC2               	movwf	actuatorTest@i_1779& (0+255),b
 14666  001140                     l8814:
 14667                           
 14668                           ; BSR set to: 0
 14669  001140  0E63               	movlw	99
 14670  001142  0100               	movlb	0	; () banked
 14671  001144  65C2               	cpfsgt	actuatorTest@i_1779& (0+255),b
 14672  001146  D001               	goto	l8818
 14673  001148  D00C               	goto	l8822
 14674  00114A                     l8818:
 14675                           
 14676                           ; BSR set to: 0
 14677  00114A  0E68               	movlw	104
 14678  00114C  0100               	movlb	0	; () banked
 14679  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14680  001150  0EE4               	movlw	228
 14681  001152                     u11097:
 14682  001152  2EE8               	decfsz	wreg,f,c
 14683  001154  D7FE               	bra	u11097
 14684  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14685  001158  D7FC               	bra	u11097
 14686  00115A  F000               	nop	
 14687  00115C  0100               	movlb	0	; () banked
 14688  00115E  2BC2               	incf	actuatorTest@i_1779& (0+255),f,b
 14689  001160  D7EF               	goto	l8814
 14690  001162                     l8822:
 14691                           
 14692                           ; BSR set to: 0
 14693  001162  0E00               	movlw	0
 14694  001164  0100               	movlb	0	; () banked
 14695  001166  6FC3               	movwf	actuatorTest@i_1780& (0+255),b
 14696  001168                     l8824:
 14697                           
 14698                           ; BSR set to: 0
 14699  001168  0E63               	movlw	99
 14700  00116A  0100               	movlb	0	; () banked
 14701  00116C  65C3               	cpfsgt	actuatorTest@i_1780& (0+255),b
 14702  00116E  D001               	goto	l8828
 14703  001170  D00C               	goto	l8832
 14704  001172                     l8828:
 14705                           
 14706                           ; BSR set to: 0
 14707  001172  0E68               	movlw	104
 14708  001174  0100               	movlb	0	; () banked
 14709  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14710  001178  0EE4               	movlw	228
 14711  00117A                     u11107:
 14712  00117A  2EE8               	decfsz	wreg,f,c
 14713  00117C  D7FE               	bra	u11107
 14714  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14715  001180  D7FC               	bra	u11107
 14716  001182  F000               	nop	
 14717  001184  0100               	movlb	0	; () banked
 14718  001186  2BC3               	incf	actuatorTest@i_1780& (0+255),f,b
 14719  001188  D7EF               	goto	l8824
 14720  00118A                     l8832:
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;Test.c: 348: machine_state = Testing_state;
 14724  00118A  0E03               	movlw	3
 14725  00118C  0100               	movlb	0	; () banked
 14726  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14727                           
 14728                           ; BSR set to: 0
 14729  001190  0012               	return		;funcret
 14730  001192                     __end_of_actuatorTest:
 14731                           	opt stack 0
 14732                           tblptru	equ	0xFF8
 14733                           tblptrh	equ	0xFF7
 14734                           tblptrl	equ	0xFF6
 14735                           tablat	equ	0xFF5
 14736                           prodh	equ	0xFF4
 14737                           prodl	equ	0xFF3
 14738                           intcon	equ	0xFF2
 14739                           intcon2	equ	0xFF1
 14740                           intcon3	equ	0xFF0
 14741                           postinc0	equ	0xFEE
 14742                           wreg	equ	0xFE8
 14743                           postdec1	equ	0xFE5
 14744                           fsr1l	equ	0xFE1
 14745                           indf2	equ	0xFDF
 14746                           postinc2	equ	0xFDE
 14747                           postdec2	equ	0xFDD
 14748                           fsr2h	equ	0xFDA
 14749                           fsr2l	equ	0xFD9
 14750                           status	equ	0xFD8
 14751                           
 14752 ;; *************** function _SpeedTest *****************
 14753 ;; Defined at:
 14754 ;;		line 541 in file "Test.c"
 14755 ;; Parameters:    Size  Location     Type
 14756 ;;		None
 14757 ;; Auto vars:     Size  Location     Type
 14758 ;;		None
 14759 ;; Return value:  Size  Location     Type
 14760 ;;                  1    wreg      void 
 14761 ;; Registers used:
 14762 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14763 ;; Tracked objects:
 14764 ;;		On entry : 0/0
 14765 ;;		On exit  : 0/0
 14766 ;;		Unchanged: 0/0
 14767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14771 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14772 ;;Total ram usage:        1 bytes
 14773 ;; Hardware stack levels used:    1
 14774 ;; Hardware stack levels required when called:   10
 14775 ;; This function calls:
 14776 ;;		_lcdInst
 14777 ;;		_printf
 14778 ;; This function is called by:
 14779 ;;		_Test
 14780 ;; This function uses a non-reentrant model
 14781 ;;
 14782                           
 14783                           	psect	text46
 14784  004D0A                     __ptext46:
 14785                           	opt stack 0
 14786  004D0A                     _SpeedTest:
 14787                           	opt stack 19
 14788                           
 14789                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14790                           
 14791                           ; BSR set to: 0
 14792                           ;incstack = 0
 14793  004D0A  0E01               	movlw	1
 14794  004D0C  ECDC  F02D         	call	_lcdInst
 14795  004D10  0E68               	movlw	104
 14796  004D12  0100               	movlb	0	; () banked
 14797  004D14  6FAB               	movwf	??_SpeedTest& (0+255),b
 14798  004D16  0EE4               	movlw	228
 14799  004D18                     u11117:
 14800  004D18  2EE8               	decfsz	wreg,f,c
 14801  004D1A  D7FE               	bra	u11117
 14802  004D1C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14803  004D1E  D7FC               	bra	u11117
 14804  004D20  F000               	nop	
 14805  004D22  0E80               	movlw	128
 14806  004D24  ECDC  F02D         	call	_lcdInst
 14807                           
 14808                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14809  004D28  0E0A               	movlw	low STR_121
 14810  004D2A  0100               	movlb	0	; () banked
 14811  004D2C  6F8E               	movwf	printf@f& (0+255),b
 14812  004D2E  0EFB               	movlw	high STR_121
 14813  004D30  0100               	movlb	0	; () banked
 14814  004D32  6F8F               	movwf	(printf@f+1)& (0+255),b
 14815  004D34  EC8D  F00D         	call	_printf	;wreg free
 14816                           
 14817                           ;Test.c: 545: lcdInst(0b11000000);;
 14818  004D38  0EC0               	movlw	192
 14819  004D3A  ECDC  F02D         	call	_lcdInst
 14820                           
 14821                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14822  004D3E  0EF8               	movlw	low STR_122
 14823  004D40  0100               	movlb	0	; () banked
 14824  004D42  6F8E               	movwf	printf@f& (0+255),b
 14825  004D44  0EFA               	movlw	high STR_122
 14826  004D46  0100               	movlb	0	; () banked
 14827  004D48  6F8F               	movwf	(printf@f+1)& (0+255),b
 14828  004D4A  EC8D  F00D         	call	_printf	;wreg free
 14829  004D4E                     l1431:
 14830  004D4E  A281               	btfss	3969,1,c	;volatile
 14831  004D50  D7FE               	goto	l1431
 14832                           
 14833                           ;Test.c: 551: }
 14834                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14835  004D52  3881               	swapf	3969,w,c	;volatile
 14836  004D54  0B0F               	andlw	15
 14837  004D56  0A0F               	xorlw	15
 14838  004D58  B4D8               	btfsc	status,2,c
 14839  004D5A  0012               	return	
 14840  004D5C  D014               	goto	l8928
 14841  004D5E                     l1438:
 14842                           
 14843                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14844  004D5E  848A               	bsf	3978,2,c	;volatile
 14845                           
 14846                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14847  004D60  0E34               	movlw	52
 14848  004D62  0100               	movlb	0	; () banked
 14849  004D64  6FAB               	movwf	??_SpeedTest& (0+255),b
 14850  004D66  0EF1               	movlw	241
 14851  004D68                     u11127:
 14852  004D68  2EE8               	decfsz	wreg,f,c
 14853  004D6A  D7FE               	bra	u11127
 14854  004D6C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14855  004D6E  D7FC               	bra	u11127
 14856  004D70  D000               	nop2	
 14857                           
 14858                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14859  004D72  948A               	bcf	3978,2,c	;volatile
 14860                           
 14861                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14862  004D74  0E34               	movlw	52
 14863  004D76  0100               	movlb	0	; () banked
 14864  004D78  6FAB               	movwf	??_SpeedTest& (0+255),b
 14865  004D7A  0EF1               	movlw	241
 14866  004D7C                     u11137:
 14867  004D7C  2EE8               	decfsz	wreg,f,c
 14868  004D7E  D7FE               	bra	u11137
 14869  004D80  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14870  004D82  D7FC               	bra	u11137
 14871  004D84  D000               	nop2	
 14872  004D86                     l8928:
 14873  004D86  B281               	btfsc	3969,1,c	;volatile
 14874  004D88  D7EA               	goto	l1438
 14875                           
 14876                           ;Test.c: 563: }
 14877                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14878  004D8A  948A               	bcf	3978,2,c	;volatile
 14879  004D8C  D7E0               	goto	l1431
 14880  004D8E                     __end_of_SpeedTest:
 14881                           	opt stack 0
 14882                           tblptru	equ	0xFF8
 14883                           tblptrh	equ	0xFF7
 14884                           tblptrl	equ	0xFF6
 14885                           tablat	equ	0xFF5
 14886                           prodh	equ	0xFF4
 14887                           prodl	equ	0xFF3
 14888                           intcon	equ	0xFF2
 14889                           intcon2	equ	0xFF1
 14890                           intcon3	equ	0xFF0
 14891                           postinc0	equ	0xFEE
 14892                           wreg	equ	0xFE8
 14893                           postdec1	equ	0xFE5
 14894                           fsr1l	equ	0xFE1
 14895                           indf2	equ	0xFDF
 14896                           postinc2	equ	0xFDE
 14897                           postdec2	equ	0xFDD
 14898                           fsr2h	equ	0xFDA
 14899                           fsr2l	equ	0xFD9
 14900                           status	equ	0xFD8
 14901                           
 14902 ;; *************** function _PortTestPusher *****************
 14903 ;; Defined at:
 14904 ;;		line 682 in file "Test.c"
 14905 ;; Parameters:    Size  Location     Type
 14906 ;;		None
 14907 ;; Auto vars:     Size  Location     Type
 14908 ;;		None
 14909 ;; Return value:  Size  Location     Type
 14910 ;;                  1    wreg      void 
 14911 ;; Registers used:
 14912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14913 ;; Tracked objects:
 14914 ;;		On entry : 0/0
 14915 ;;		On exit  : 0/0
 14916 ;;		Unchanged: 0/0
 14917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14921 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14922 ;;Total ram usage:        1 bytes
 14923 ;; Hardware stack levels used:    1
 14924 ;; Hardware stack levels required when called:   10
 14925 ;; This function calls:
 14926 ;;		_lcdInst
 14927 ;;		_printf
 14928 ;; This function is called by:
 14929 ;;		_Test
 14930 ;; This function uses a non-reentrant model
 14931 ;;
 14932                           
 14933                           	psect	text47
 14934  00524A                     __ptext47:
 14935                           	opt stack 0
 14936  00524A                     _PortTestPusher:
 14937                           	opt stack 19
 14938                           
 14939                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14940                           
 14941                           ;incstack = 0
 14942  00524A  0E01               	movlw	1
 14943  00524C  ECDC  F02D         	call	_lcdInst
 14944  005250  0E68               	movlw	104
 14945  005252  0100               	movlb	0	; () banked
 14946  005254  6FAB               	movwf	??_PortTestPusher& (0+255),b
 14947  005256  0EE4               	movlw	228
 14948  005258                     u11147:
 14949  005258  2EE8               	decfsz	wreg,f,c
 14950  00525A  D7FE               	bra	u11147
 14951  00525C  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 14952  00525E  D7FC               	bra	u11147
 14953  005260  F000               	nop	
 14954  005262  0E80               	movlw	128
 14955  005264  ECDC  F02D         	call	_lcdInst
 14956                           
 14957                           ;Test.c: 684: printf("D WILL RETURN    ");
 14958  005268  0EE6               	movlw	low STR_112
 14959  00526A  0100               	movlb	0	; () banked
 14960  00526C  6F8E               	movwf	printf@f& (0+255),b
 14961  00526E  0EFA               	movlw	high STR_112
 14962  005270  0100               	movlb	0	; () banked
 14963  005272  6F8F               	movwf	(printf@f+1)& (0+255),b
 14964  005274  EC8D  F00D         	call	_printf	;wreg free
 14965                           
 14966                           ;Test.c: 685: lcdInst(0b11000000);;
 14967  005278  0EC0               	movlw	192
 14968  00527A  ECDC  F02D         	call	_lcdInst
 14969                           
 14970                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 14971  00527E  0E2E               	movlw	low STR_130
 14972  005280  0100               	movlb	0	; () banked
 14973  005282  6F8E               	movwf	printf@f& (0+255),b
 14974  005284  0EFB               	movlw	high STR_130
 14975  005286  0100               	movlb	0	; () banked
 14976  005288  6F8F               	movwf	(printf@f+1)& (0+255),b
 14977  00528A  EC8D  F00D         	call	_printf	;wreg free
 14978  00528E                     l1492:
 14979  00528E  A281               	btfss	3969,1,c	;volatile
 14980  005290  D7FE               	goto	l1492
 14981                           
 14982                           ;Test.c: 691: }
 14983                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 14984  005292  3881               	swapf	3969,w,c	;volatile
 14985  005294  0B0F               	andlw	15
 14986  005296  0A0F               	xorlw	15
 14987  005298  B4D8               	btfsc	status,2,c
 14988  00529A  0012               	return	
 14989                           
 14990                           ;Test.c: 695: else{
 14991                           ;Test.c: 696: LATAbits.LATA4 = 1;
 14992                           
 14993                           ;Test.c: 694: }
 14994                           
 14995                           ;Test.c: 693: break;
 14996  00529C  8889               	bsf	3977,4,c	;volatile
 14997  00529E                     l1498:
 14998  00529E  B281               	btfsc	3969,1,c	;volatile
 14999  0052A0  D7FE               	goto	l1498
 15000                           
 15001                           ;Test.c: 699: }
 15002                           ;Test.c: 700: LATAbits.LATA4 = 0;
 15003  0052A2  9889               	bcf	3977,4,c	;volatile
 15004  0052A4  D7F4               	goto	l1492
 15005  0052A6                     __end_of_PortTestPusher:
 15006                           	opt stack 0
 15007                           tblptru	equ	0xFF8
 15008                           tblptrh	equ	0xFF7
 15009                           tblptrl	equ	0xFF6
 15010                           tablat	equ	0xFF5
 15011                           prodh	equ	0xFF4
 15012                           prodl	equ	0xFF3
 15013                           intcon	equ	0xFF2
 15014                           intcon2	equ	0xFF1
 15015                           intcon3	equ	0xFF0
 15016                           postinc0	equ	0xFEE
 15017                           wreg	equ	0xFE8
 15018                           postdec1	equ	0xFE5
 15019                           fsr1l	equ	0xFE1
 15020                           indf2	equ	0xFDF
 15021                           postinc2	equ	0xFDE
 15022                           postdec2	equ	0xFDD
 15023                           fsr2h	equ	0xFDA
 15024                           fsr2l	equ	0xFD9
 15025                           status	equ	0xFD8
 15026                           
 15027 ;; *************** function _PortTestDC *****************
 15028 ;; Defined at:
 15029 ;;		line 411 in file "Test.c"
 15030 ;; Parameters:    Size  Location     Type
 15031 ;;		None
 15032 ;; Auto vars:     Size  Location     Type
 15033 ;;		None
 15034 ;; Return value:  Size  Location     Type
 15035 ;;                  1    wreg      void 
 15036 ;; Registers used:
 15037 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15038 ;; Tracked objects:
 15039 ;;		On entry : 0/0
 15040 ;;		On exit  : 0/0
 15041 ;;		Unchanged: 0/0
 15042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15046 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15047 ;;Total ram usage:        1 bytes
 15048 ;; Hardware stack levels used:    1
 15049 ;; Hardware stack levels required when called:   10
 15050 ;; This function calls:
 15051 ;;		_lcdInst
 15052 ;;		_printf
 15053 ;; This function is called by:
 15054 ;;		_Test
 15055 ;; This function uses a non-reentrant model
 15056 ;;
 15057                           
 15058                           	psect	text48
 15059  0052A6                     __ptext48:
 15060                           	opt stack 0
 15061  0052A6                     _PortTestDC:
 15062                           	opt stack 19
 15063                           
 15064                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15065                           
 15066                           ;incstack = 0
 15067  0052A6  0E01               	movlw	1
 15068  0052A8  ECDC  F02D         	call	_lcdInst
 15069  0052AC  0E68               	movlw	104
 15070  0052AE  0100               	movlb	0	; () banked
 15071  0052B0  6FAB               	movwf	??_PortTestDC& (0+255),b
 15072  0052B2  0EE4               	movlw	228
 15073  0052B4                     u11157:
 15074  0052B4  2EE8               	decfsz	wreg,f,c
 15075  0052B6  D7FE               	bra	u11157
 15076  0052B8  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15077  0052BA  D7FC               	bra	u11157
 15078  0052BC  F000               	nop	
 15079  0052BE  0E80               	movlw	128
 15080  0052C0  ECDC  F02D         	call	_lcdInst
 15081                           
 15082                           ;Test.c: 413: printf("D WILL RETURN    ");
 15083  0052C4  0EE6               	movlw	low STR_112
 15084  0052C6  0100               	movlb	0	; () banked
 15085  0052C8  6F8E               	movwf	printf@f& (0+255),b
 15086  0052CA  0EFA               	movlw	high STR_112
 15087  0052CC  0100               	movlb	0	; () banked
 15088  0052CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 15089  0052D0  EC8D  F00D         	call	_printf	;wreg free
 15090                           
 15091                           ;Test.c: 414: lcdInst(0b11000000);;
 15092  0052D4  0EC0               	movlw	192
 15093  0052D6  ECDC  F02D         	call	_lcdInst
 15094                           
 15095                           ;Test.c: 415: printf("OTHER SETS DC   ");
 15096  0052DA  0ECA               	movlw	low STR_113
 15097  0052DC  0100               	movlb	0	; () banked
 15098  0052DE  6F8E               	movwf	printf@f& (0+255),b
 15099  0052E0  0EFB               	movlw	high STR_113
 15100  0052E2  0100               	movlb	0	; () banked
 15101  0052E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15102  0052E6  EC8D  F00D         	call	_printf	;wreg free
 15103  0052EA                     l1373:
 15104  0052EA  A281               	btfss	3969,1,c	;volatile
 15105  0052EC  D7FE               	goto	l1373
 15106                           
 15107                           ;Test.c: 420: }
 15108                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15109  0052EE  3881               	swapf	3969,w,c	;volatile
 15110  0052F0  0B0F               	andlw	15
 15111  0052F2  0A0F               	xorlw	15
 15112  0052F4  B4D8               	btfsc	status,2,c
 15113  0052F6  0012               	return	
 15114                           
 15115                           ;Test.c: 424: else{
 15116                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15117                           
 15118                           ;Test.c: 423: }
 15119                           
 15120                           ;Test.c: 422: break;
 15121  0052F8  848A               	bsf	3978,2,c	;volatile
 15122  0052FA                     l1379:
 15123  0052FA  B281               	btfsc	3969,1,c	;volatile
 15124  0052FC  D7FE               	goto	l1379
 15125                           
 15126                           ;Test.c: 428: }
 15127                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15128  0052FE  948A               	bcf	3978,2,c	;volatile
 15129  005300  D7F4               	goto	l1373
 15130  005302                     __end_of_PortTestDC:
 15131                           	opt stack 0
 15132                           tblptru	equ	0xFF8
 15133                           tblptrh	equ	0xFF7
 15134                           tblptrl	equ	0xFF6
 15135                           tablat	equ	0xFF5
 15136                           prodh	equ	0xFF4
 15137                           prodl	equ	0xFF3
 15138                           intcon	equ	0xFF2
 15139                           intcon2	equ	0xFF1
 15140                           intcon3	equ	0xFF0
 15141                           postinc0	equ	0xFEE
 15142                           wreg	equ	0xFE8
 15143                           postdec1	equ	0xFE5
 15144                           fsr1l	equ	0xFE1
 15145                           indf2	equ	0xFDF
 15146                           postinc2	equ	0xFDE
 15147                           postdec2	equ	0xFDD
 15148                           fsr2h	equ	0xFDA
 15149                           fsr2l	equ	0xFD9
 15150                           status	equ	0xFD8
 15151                           
 15152 ;; *************** function _PlatformTest *****************
 15153 ;; Defined at:
 15154 ;;		line 434 in file "Test.c"
 15155 ;; Parameters:    Size  Location     Type
 15156 ;;		None
 15157 ;; Auto vars:     Size  Location     Type
 15158 ;;  i               2   51[BANK0 ] int 
 15159 ;;  i               2   49[BANK0 ] int 
 15160 ;;  res             2   47[BANK0 ] int 
 15161 ;;  res             2   45[BANK0 ] int 
 15162 ;;  on              2   53[BANK0 ] int 
 15163 ;; Return value:  Size  Location     Type
 15164 ;;                  1    wreg      void 
 15165 ;; Registers used:
 15166 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15167 ;; Tracked objects:
 15168 ;;		On entry : 0/0
 15169 ;;		On exit  : 0/0
 15170 ;;		Unchanged: 0/0
 15171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15173 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15174 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15176 ;;Total ram usage:       12 bytes
 15177 ;; Hardware stack levels used:    1
 15178 ;; Hardware stack levels required when called:   10
 15179 ;; This function calls:
 15180 ;;		_lcdInst
 15181 ;;		_printf
 15182 ;;		_readADC
 15183 ;;		_stopSignals
 15184 ;; This function is called by:
 15185 ;;		_Test
 15186 ;; This function uses a non-reentrant model
 15187 ;;
 15188                           
 15189                           	psect	text49
 15190  0026AE                     __ptext49:
 15191                           	opt stack 0
 15192  0026AE                     _PlatformTest:
 15193                           	opt stack 19
 15194                           
 15195                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15196                           
 15197                           ;incstack = 0
 15198  0026AE  8A8B               	bsf	3979,5,c	;volatile
 15199                           
 15200                           ;Test.c: 437: machine_state = Sorting_state;
 15201  0026B0  0E01               	movlw	1
 15202  0026B2  0100               	movlb	0	; () banked
 15203  0026B4  6FFC               	movwf	_machine_state& (0+255),b
 15204                           
 15205                           ;Test.c: 438: f_arm_position = 0;
 15206  0026B6  0E00               	movlw	0
 15207  0026B8  0100               	movlb	0	; () banked
 15208  0026BA  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15209  0026BC  0E00               	movlw	0
 15210  0026BE  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15211                           
 15212                           ;Test.c: 439: timer2_counter = 0;
 15213  0026C0  0E00               	movlw	0
 15214  0026C2  6E74               	movwf	_timer2_counter+1,c	;volatile
 15215  0026C4  0E00               	movlw	0
 15216  0026C6  6E73               	movwf	_timer2_counter,c	;volatile
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15220  0026C8  968A               	bcf	3978,3,c	;volatile
 15221                           
 15222                           ; BSR set to: 0
 15223                           ;Test.c: 441: TMR2ON = 1;
 15224  0026CA  84CA               	bsf	4042,2,c	;volatile
 15225                           
 15226                           ;Test.c: 442: was_low_2 = 0;
 15227  0026CC  0E00               	movlw	0
 15228  0026CE  6E7A               	movwf	_was_low_2+1,c	;volatile
 15229  0026D0  0E00               	movlw	0
 15230  0026D2  6E79               	movwf	_was_low_2,c	;volatile
 15231                           
 15232                           ;Test.c: 444: int on = 1;
 15233  0026D4  0E00               	movlw	0
 15234  0026D6  0100               	movlb	0	; () banked
 15235  0026D8  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15236  0026DA  0E01               	movlw	1
 15237  0026DC  6FB5               	movwf	PlatformTest@on& (0+255),b
 15238                           
 15239                           ; BSR set to: 0
 15240                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15241  0026DE  0E01               	movlw	1
 15242  0026E0  ECDC  F02D         	call	_lcdInst
 15243  0026E4  0E68               	movlw	104
 15244  0026E6  0100               	movlb	0	; () banked
 15245  0026E8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15246  0026EA  0EE4               	movlw	228
 15247  0026EC                     u11167:
 15248  0026EC  2EE8               	decfsz	wreg,f,c
 15249  0026EE  D7FE               	bra	u11167
 15250  0026F0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15251  0026F2  D7FC               	bra	u11167
 15252  0026F4  F000               	nop	
 15253  0026F6  0E80               	movlw	128
 15254  0026F8  ECDC  F02D         	call	_lcdInst
 15255                           
 15256                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15257  0026FC  0EFD               	movlw	low STR_114
 15258  0026FE  0100               	movlb	0	; () banked
 15259  002700  6F8E               	movwf	printf@f& (0+255),b
 15260  002702  0EFB               	movlw	high STR_114
 15261  002704  0100               	movlb	0	; () banked
 15262  002706  6F8F               	movwf	(printf@f+1)& (0+255),b
 15263  002708  EC8D  F00D         	call	_printf	;wreg free
 15264                           
 15265                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15266  00270C  D058               	goto	l8982
 15267  00270E                     l8964:
 15268                           
 15269                           ;Test.c: 449: readADC(0);
 15270  00270E  0E00               	movlw	0
 15271  002710  ECC7  F02C         	call	_readADC
 15272                           
 15273                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15274  002714  50C3               	movf	4035,w,c	;volatile
 15275  002716  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15276  00271A  0100               	movlb	0	; () banked
 15277  00271C  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15278  00271E  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15279  002722  0100               	movlb	0	; () banked
 15280  002724  6BAB               	clrf	??_PlatformTest& (0+255),b
 15281  002726  0100               	movlb	0	; () banked
 15282  002728  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15283  00272A  0100               	movlb	0	; () banked
 15284  00272C  6FAD               	movwf	PlatformTest@res& (0+255),b
 15285  00272E  0100               	movlb	0	; () banked
 15286  002730  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15287  002732  0100               	movlb	0	; () banked
 15288  002734  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15289                           
 15290                           ; BSR set to: 0
 15291                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15292  002736  0100               	movlb	0	; () banked
 15293  002738  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15294  00273A  D00A               	goto	u8050
 15295  00273C  0E21               	movlw	33
 15296  00273E  0100               	movlb	0	; () banked
 15297  002740  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15298  002742  0E03               	movlw	3
 15299  002744  0100               	movlb	0	; () banked
 15300  002746  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15301  002748  A0D8               	btfss	status,0,c
 15302  00274A  D002               	goto	u8050
 15303  00274C  0E01               	movlw	1
 15304  00274E  D001               	goto	u8060
 15305  002750                     u8050:
 15306  002750  0E00               	movlw	0
 15307  002752                     u8060:
 15308  002752  0100               	movlb	0	; () banked
 15309  002754  6FE0               	movwf	_IR_signal& (0+255),b
 15310  002756  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15311                           
 15312                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15313  002758  0E01               	movlw	1
 15314  00275A  ECDC  F02D         	call	_lcdInst
 15315  00275E  0E68               	movlw	104
 15316  002760  0100               	movlb	0	; () banked
 15317  002762  6FAB               	movwf	??_PlatformTest& (0+255),b
 15318  002764  0EE4               	movlw	228
 15319  002766                     u11177:
 15320  002766  2EE8               	decfsz	wreg,f,c
 15321  002768  D7FE               	bra	u11177
 15322  00276A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15323  00276C  D7FC               	bra	u11177
 15324  00276E  F000               	nop	
 15325  002770  0E80               	movlw	128
 15326  002772  ECDC  F02D         	call	_lcdInst
 15327                           
 15328                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15329  002776  0EFD               	movlw	low STR_114
 15330  002778  0100               	movlb	0	; () banked
 15331  00277A  6F8E               	movwf	printf@f& (0+255),b
 15332  00277C  0EFB               	movlw	high STR_114
 15333  00277E  0100               	movlb	0	; () banked
 15334  002780  6F8F               	movwf	(printf@f+1)& (0+255),b
 15335  002782  EC8D  F00D         	call	_printf	;wreg free
 15336                           
 15337                           ;Test.c: 455: lcdInst(0b11000000);;
 15338  002786  0EC0               	movlw	192
 15339  002788  ECDC  F02D         	call	_lcdInst
 15340                           
 15341                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15342  00278C  0EEC               	movlw	low STR_116
 15343  00278E  0100               	movlb	0	; () banked
 15344  002790  6F8E               	movwf	printf@f& (0+255),b
 15345  002792  0EFB               	movlw	high STR_116
 15346  002794  0100               	movlb	0	; () banked
 15347  002796  6F8F               	movwf	(printf@f+1)& (0+255),b
 15348  002798  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15349  00279C  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15350  0027A0  EC8D  F00D         	call	_printf	;wreg free
 15351                           
 15352                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15353  0027A4  0E05               	movlw	5
 15354  0027A6  0100               	movlb	0	; () banked
 15355  0027A8  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15356  0027AA  0E0F               	movlw	15
 15357  0027AC  0100               	movlb	0	; () banked
 15358  0027AE  6FAB               	movwf	??_PlatformTest& (0+255),b
 15359  0027B0  0EF1               	movlw	241
 15360  0027B2                     u11187:
 15361  0027B2  2EE8               	decfsz	wreg,f,c
 15362  0027B4  D7FE               	bra	u11187
 15363  0027B6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15364  0027B8  D7FC               	bra	u11187
 15365  0027BA  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15366  0027BC  D7FA               	bra	u11187
 15367  0027BE                     l8982:
 15368  0027BE  B281               	btfsc	3969,1,c	;volatile
 15369  0027C0  D059               	goto	l9002
 15370  0027C2  D7A5               	goto	l8964
 15371  0027C4                     l8984:
 15372                           
 15373                           ;Test.c: 462: readADC(0);
 15374  0027C4  0E00               	movlw	0
 15375  0027C6  ECC7  F02C         	call	_readADC
 15376                           
 15377                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15378  0027CA  50C3               	movf	4035,w,c	;volatile
 15379  0027CC  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15380  0027D0  0100               	movlb	0	; () banked
 15381  0027D2  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15382  0027D4  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15383  0027D8  0100               	movlb	0	; () banked
 15384  0027DA  6BAB               	clrf	??_PlatformTest& (0+255),b
 15385  0027DC  0100               	movlb	0	; () banked
 15386  0027DE  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15387  0027E0  0100               	movlb	0	; () banked
 15388  0027E2  6FAF               	movwf	PlatformTest@res_1792& (0+255),b
 15389  0027E4  0100               	movlb	0	; () banked
 15390  0027E6  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15391  0027E8  0100               	movlb	0	; () banked
 15392  0027EA  6FB0               	movwf	(PlatformTest@res_1792+1)& (0+255),b
 15393                           
 15394                           ; BSR set to: 0
 15395                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15396  0027EC  0100               	movlb	0	; () banked
 15397  0027EE  BFB0               	btfsc	(PlatformTest@res_1792+1)& (0+255),7,b
 15398  0027F0  D00A               	goto	u8080
 15399  0027F2  0E21               	movlw	33
 15400  0027F4  0100               	movlb	0	; () banked
 15401  0027F6  5DAF               	subwf	PlatformTest@res_1792& (0+255),w,b
 15402  0027F8  0E03               	movlw	3
 15403  0027FA  0100               	movlb	0	; () banked
 15404  0027FC  59B0               	subwfb	(PlatformTest@res_1792+1)& (0+255),w,b
 15405  0027FE  A0D8               	btfss	status,0,c
 15406  002800  D002               	goto	u8080
 15407  002802  0E01               	movlw	1
 15408  002804  D001               	goto	u8090
 15409  002806                     u8080:
 15410  002806  0E00               	movlw	0
 15411  002808                     u8090:
 15412  002808  0100               	movlb	0	; () banked
 15413  00280A  6FE0               	movwf	_IR_signal& (0+255),b
 15414  00280C  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15415                           
 15416                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15417  00280E  0E01               	movlw	1
 15418  002810  ECDC  F02D         	call	_lcdInst
 15419  002814  0E68               	movlw	104
 15420  002816  0100               	movlb	0	; () banked
 15421  002818  6FAB               	movwf	??_PlatformTest& (0+255),b
 15422  00281A  0EE4               	movlw	228
 15423  00281C                     u11197:
 15424  00281C  2EE8               	decfsz	wreg,f,c
 15425  00281E  D7FE               	bra	u11197
 15426  002820  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15427  002822  D7FC               	bra	u11197
 15428  002824  F000               	nop	
 15429  002826  0E80               	movlw	128
 15430  002828  ECDC  F02D         	call	_lcdInst
 15431                           
 15432                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15433  00282C  0EFD               	movlw	low STR_114
 15434  00282E  0100               	movlb	0	; () banked
 15435  002830  6F8E               	movwf	printf@f& (0+255),b
 15436  002832  0EFB               	movlw	high STR_114
 15437  002834  0100               	movlb	0	; () banked
 15438  002836  6F8F               	movwf	(printf@f+1)& (0+255),b
 15439  002838  EC8D  F00D         	call	_printf	;wreg free
 15440                           
 15441                           ;Test.c: 468: lcdInst(0b11000000);;
 15442  00283C  0EC0               	movlw	192
 15443  00283E  ECDC  F02D         	call	_lcdInst
 15444                           
 15445                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15446  002842  0EEC               	movlw	low STR_116
 15447  002844  0100               	movlb	0	; () banked
 15448  002846  6F8E               	movwf	printf@f& (0+255),b
 15449  002848  0EFB               	movlw	high STR_116
 15450  00284A  0100               	movlb	0	; () banked
 15451  00284C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15452  00284E  C0AF  F090         	movff	PlatformTest@res_1792,?_printf+2
 15453  002852  C0B0  F091         	movff	PlatformTest@res_1792+1,?_printf+3
 15454  002856  EC8D  F00D         	call	_printf	;wreg free
 15455                           
 15456                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15457  00285A  0E05               	movlw	5
 15458  00285C  0100               	movlb	0	; () banked
 15459  00285E  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15460  002860  0E0F               	movlw	15
 15461  002862  0100               	movlb	0	; () banked
 15462  002864  6FAB               	movwf	??_PlatformTest& (0+255),b
 15463  002866  0EF1               	movlw	241
 15464  002868                     u11207:
 15465  002868  2EE8               	decfsz	wreg,f,c
 15466  00286A  D7FE               	bra	u11207
 15467  00286C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15468  00286E  D7FC               	bra	u11207
 15469  002870  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15470  002872  D7FA               	bra	u11207
 15471  002874                     l9002:
 15472  002874  A281               	btfss	3969,1,c	;volatile
 15473  002876  D7A6               	goto	l8984
 15474                           
 15475                           ;Test.c: 471: }
 15476                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15477  002878  3881               	swapf	3969,w,c	;volatile
 15478  00287A  0B0F               	andlw	15
 15479  00287C  0A0F               	xorlw	15
 15480  00287E  B4D8               	btfsc	status,2,c
 15481  002880  D09A               	goto	l1394
 15482                           
 15483                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15484                           
 15485                           ;Test.c: 474: }
 15486                           
 15487                           ;Test.c: 473: break;
 15488  002882  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15489  002886  0100               	movlb	0	; () banked
 15490  002888  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15491  00288A  0E0F               	movlw	15
 15492  00288C  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15493  00288E  A4D8               	btfss	status,2,c
 15494  002890  D012               	goto	l9014
 15495                           
 15496                           ; BSR set to: 0
 15497                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15498  002892  B48A               	btfsc	3978,2,c	;volatile
 15499  002894  D004               	goto	u8130
 15500  002896  0100               	movlb	0	; () banked
 15501  002898  6BAB               	clrf	??_PlatformTest& (0+255),b
 15502  00289A  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15503  00289C  D002               	goto	u8148
 15504  00289E                     u8130:
 15505  00289E  0100               	movlb	0	; () banked
 15506  0028A0  6BAB               	clrf	??_PlatformTest& (0+255),b
 15507  0028A2                     u8148:
 15508  0028A2  0100               	movlb	0	; () banked
 15509  0028A4  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15510  0028A6  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15511  0028A8  508A               	movf	3978,w,c	;volatile
 15512  0028AA  0100               	movlb	0	; () banked
 15513  0028AC  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15514  0028AE  0BFB               	andlw	-5
 15515  0028B0  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15516  0028B2  6E8A               	movwf	3978,c	;volatile
 15517                           
 15518                           ;Test.c: 477: }
 15519  0028B4  D07D               	goto	l1409
 15520  0028B6                     l9014:
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15524  0028B6  3881               	swapf	3969,w,c	;volatile
 15525  0028B8  0B0F               	andlw	15
 15526  0028BA  0A03               	xorlw	3
 15527  0028BC  A4D8               	btfss	status,2,c
 15528  0028BE  D020               	goto	l9026
 15529                           
 15530                           ; BSR set to: 0
 15531                           ;Test.c: 479: if(on){
 15532  0028C0  0100               	movlb	0	; () banked
 15533  0028C2  51B5               	movf	PlatformTest@on& (0+255),w,b
 15534  0028C4  0100               	movlb	0	; () banked
 15535  0028C6  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15536  0028C8  B4D8               	btfsc	status,2,c
 15537  0028CA  D010               	goto	l9022
 15538                           
 15539                           ; BSR set to: 0
 15540                           ;Test.c: 480: f_arm_position = 1;
 15541  0028CC  0E00               	movlw	0
 15542  0028CE  0100               	movlb	0	; () banked
 15543  0028D0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15544  0028D2  0E01               	movlw	1
 15545  0028D4  D00F               	goto	L13
 15546  0028D6                     l9020:
 15547                           
 15548                           ; BSR set to: 0
 15549                           ;Test.c: 481: on = !on;
 15550  0028D6  0100               	movlb	0	; () banked
 15551  0028D8  51B5               	movf	PlatformTest@on& (0+255),w,b
 15552  0028DA  0100               	movlb	0	; () banked
 15553  0028DC  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15554  0028DE  A4D8               	btfss	status,2,c
 15555  0028E0  D00D               	goto	u8190
 15556  0028E2  D00A               	goto	u8191
 15557  0028E4                     u8180:
 15558  0028E4  0100               	movlb	0	; () banked
 15559  0028E6  6FB5               	movwf	PlatformTest@on& (0+255),b
 15560  0028E8  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15561                           
 15562                           ;Test.c: 482: }
 15563  0028EA  D062               	goto	l1409
 15564  0028EC                     l9022:
 15565                           
 15566                           ; BSR set to: 0
 15567                           ;Test.c: 483: else{
 15568                           ;Test.c: 484: f_arm_position = 0;
 15569  0028EC  0E00               	movlw	0
 15570  0028EE  0100               	movlb	0	; () banked
 15571  0028F0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15572  0028F2  0E00               	movlw	0
 15573  0028F4                     L13:
 15574  0028F4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15575  0028F6  D7EF               	goto	l9020
 15576  0028F8                     u8191:
 15577  0028F8  0E01               	movlw	1
 15578  0028FA  D7F4               	goto	u8180
 15579  0028FC                     u8190:
 15580  0028FC  0E00               	movlw	0
 15581  0028FE  D7F2               	goto	u8180
 15582  002900                     l9026:
 15583                           
 15584                           ; BSR set to: 0
 15585                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15586  002900  3881               	swapf	3969,w,c	;volatile
 15587  002902  0B0F               	andlw	15
 15588  002904  0A05               	xorlw	5
 15589  002906  A4D8               	btfss	status,2,c
 15590  002908  D027               	goto	l9040
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15594  00290A  0E00               	movlw	0
 15595  00290C  0100               	movlb	0	; () banked
 15596  00290E  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15597  002910  0E00               	movlw	0
 15598  002912  6FB1               	movwf	PlatformTest@i& (0+255),b
 15599  002914                     l9030:
 15600                           
 15601                           ; BSR set to: 0
 15602  002914  0100               	movlb	0	; () banked
 15603  002916  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15604  002918  D008               	goto	l1403
 15605  00291A  0100               	movlb	0	; () banked
 15606  00291C  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15607  00291E  E148               	bnz	l1409
 15608  002920  0E1E               	movlw	30
 15609  002922  0100               	movlb	0	; () banked
 15610  002924  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15611  002926  B0D8               	btfsc	status,0,c
 15612  002928  D043               	goto	l1409
 15613  00292A                     l1403:
 15614                           
 15615                           ; BSR set to: 0
 15616                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15617  00292A  8889               	bsf	3977,4,c	;volatile
 15618                           
 15619                           ; BSR set to: 0
 15620                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15621  00292C  0E4E               	movlw	78
 15622  00292E  0100               	movlb	0	; () banked
 15623  002930  6FAB               	movwf	??_PlatformTest& (0+255),b
 15624  002932  0EEB               	movlw	235
 15625  002934                     u11217:
 15626  002934  2EE8               	decfsz	wreg,f,c
 15627  002936  D7FE               	bra	u11217
 15628  002938  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15629  00293A  D7FC               	bra	u11217
 15630                           
 15631                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15632  00293C  9889               	bcf	3977,4,c	;volatile
 15633                           
 15634                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15635  00293E  0E1A               	movlw	26
 15636  002940  0100               	movlb	0	; () banked
 15637  002942  6FAB               	movwf	??_PlatformTest& (0+255),b
 15638  002944  0EF8               	movlw	248
 15639  002946                     u11227:
 15640  002946  2EE8               	decfsz	wreg,f,c
 15641  002948  D7FE               	bra	u11227
 15642  00294A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15643  00294C  D7FC               	bra	u11227
 15644  00294E  F000               	nop	
 15645  002950  0100               	movlb	0	; () banked
 15646  002952  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15647  002954  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15648  002956  D7DE               	goto	l9030
 15649  002958                     l9040:
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15653  002958  3881               	swapf	3969,w,c	;volatile
 15654  00295A  0B0F               	andlw	15
 15655  00295C  0A06               	xorlw	6
 15656  00295E  A4D8               	btfss	status,2,c
 15657  002960  D027               	goto	l1409
 15658                           
 15659                           ; BSR set to: 0
 15660                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15661  002962  0E00               	movlw	0
 15662  002964  0100               	movlb	0	; () banked
 15663  002966  6FB4               	movwf	(PlatformTest@i_1796+1)& (0+255),b
 15664  002968  0E00               	movlw	0
 15665  00296A  6FB3               	movwf	PlatformTest@i_1796& (0+255),b
 15666  00296C                     l9044:
 15667                           
 15668                           ; BSR set to: 0
 15669  00296C  0100               	movlb	0	; () banked
 15670  00296E  BFB4               	btfsc	(PlatformTest@i_1796+1)& (0+255),7,b
 15671  002970  D008               	goto	l1407
 15672  002972  0100               	movlb	0	; () banked
 15673  002974  51B4               	movf	(PlatformTest@i_1796+1)& (0+255),w,b
 15674  002976  E11C               	bnz	l1409
 15675  002978  0E1E               	movlw	30
 15676  00297A  0100               	movlb	0	; () banked
 15677  00297C  5DB3               	subwf	PlatformTest@i_1796& (0+255),w,b
 15678  00297E  B0D8               	btfsc	status,0,c
 15679  002980  D017               	goto	l1409
 15680  002982                     l1407:
 15681                           
 15682                           ; BSR set to: 0
 15683                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15684  002982  8889               	bsf	3977,4,c	;volatile
 15685                           
 15686                           ; BSR set to: 0
 15687                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15688  002984  0E3D               	movlw	61
 15689  002986  0100               	movlb	0	; () banked
 15690  002988  6FAB               	movwf	??_PlatformTest& (0+255),b
 15691  00298A  0E41               	movlw	65
 15692  00298C                     u11237:
 15693  00298C  2EE8               	decfsz	wreg,f,c
 15694  00298E  D7FE               	bra	u11237
 15695  002990  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15696  002992  D7FC               	bra	u11237
 15697                           
 15698                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15699  002994  9889               	bcf	3977,4,c	;volatile
 15700                           
 15701                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15702  002996  0E2C               	movlw	44
 15703  002998  0100               	movlb	0	; () banked
 15704  00299A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15705  00299C  0EA1               	movlw	161
 15706  00299E                     u11247:
 15707  00299E  2EE8               	decfsz	wreg,f,c
 15708  0029A0  D7FE               	bra	u11247
 15709  0029A2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15710  0029A4  D7FC               	bra	u11247
 15711  0029A6  D000               	nop2	
 15712  0029A8  0100               	movlb	0	; () banked
 15713  0029AA  4BB3               	infsnz	PlatformTest@i_1796& (0+255),f,b
 15714  0029AC  2BB4               	incf	(PlatformTest@i_1796+1)& (0+255),f,b
 15715  0029AE  D7DE               	goto	l9044
 15716  0029B0                     l1409:
 15717  0029B0  A281               	btfss	3969,1,c	;volatile
 15718  0029B2  D760               	goto	l9002
 15719  0029B4  D7FD               	goto	l1409
 15720  0029B6                     l1394:
 15721                           
 15722                           ;Test.c: 508: }
 15723                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15724  0029B6  9A8B               	bcf	3979,5,c	;volatile
 15725                           
 15726                           ;Test.c: 511: stopSignals();
 15727  0029B8  EC83  F02D         	call	_stopSignals	;wreg free
 15728                           
 15729                           ;Test.c: 512: machine_state = Testing_state;
 15730  0029BC  0E03               	movlw	3
 15731  0029BE  0100               	movlb	0	; () banked
 15732  0029C0  6FFC               	movwf	_machine_state& (0+255),b
 15733                           
 15734                           ; BSR set to: 0
 15735  0029C2  0012               	return		;funcret
 15736  0029C4                     __end_of_PlatformTest:
 15737                           	opt stack 0
 15738                           tblptru	equ	0xFF8
 15739                           tblptrh	equ	0xFF7
 15740                           tblptrl	equ	0xFF6
 15741                           tablat	equ	0xFF5
 15742                           prodh	equ	0xFF4
 15743                           prodl	equ	0xFF3
 15744                           intcon	equ	0xFF2
 15745                           intcon2	equ	0xFF1
 15746                           intcon3	equ	0xFF0
 15747                           postinc0	equ	0xFEE
 15748                           wreg	equ	0xFE8
 15749                           postdec1	equ	0xFE5
 15750                           fsr1l	equ	0xFE1
 15751                           indf2	equ	0xFDF
 15752                           postinc2	equ	0xFDE
 15753                           postdec2	equ	0xFDD
 15754                           fsr2h	equ	0xFDA
 15755                           fsr2l	equ	0xFD9
 15756                           status	equ	0xFD8
 15757                           
 15758 ;; *************** function _BothServos *****************
 15759 ;; Defined at:
 15760 ;;		line 351 in file "Test.c"
 15761 ;; Parameters:    Size  Location     Type
 15762 ;;		None
 15763 ;; Auto vars:     Size  Location     Type
 15764 ;;		None
 15765 ;; Return value:  Size  Location     Type
 15766 ;;                  1    wreg      void 
 15767 ;; Registers used:
 15768 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15769 ;; Tracked objects:
 15770 ;;		On entry : 0/0
 15771 ;;		On exit  : 0/0
 15772 ;;		Unchanged: 0/0
 15773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15776 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15778 ;;Total ram usage:        2 bytes
 15779 ;; Hardware stack levels used:    1
 15780 ;; Hardware stack levels required when called:   10
 15781 ;; This function calls:
 15782 ;;		_initServos
 15783 ;;		_lcdInst
 15784 ;;		_printf
 15785 ;;		_stopSignals
 15786 ;;		_updateServoPosition
 15787 ;; This function is called by:
 15788 ;;		_Test
 15789 ;; This function uses a non-reentrant model
 15790 ;;
 15791                           
 15792                           	psect	text50
 15793  001F52                     __ptext50:
 15794                           	opt stack 0
 15795  001F52                     _BothServos:
 15796                           	opt stack 19
 15797                           
 15798                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15799                           
 15800                           ; BSR set to: 0
 15801                           ;incstack = 0
 15802  001F52  0E01               	movlw	1
 15803  001F54  ECDC  F02D         	call	_lcdInst
 15804  001F58  0E68               	movlw	104
 15805  001F5A  0100               	movlb	0	; () banked
 15806  001F5C  6FAB               	movwf	??_BothServos& (0+255),b
 15807  001F5E  0EE4               	movlw	228
 15808  001F60                     u11257:
 15809  001F60  2EE8               	decfsz	wreg,f,c
 15810  001F62  D7FE               	bra	u11257
 15811  001F64  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15812  001F66  D7FC               	bra	u11257
 15813  001F68  F000               	nop	
 15814  001F6A  0E80               	movlw	128
 15815  001F6C  ECDC  F02D         	call	_lcdInst
 15816                           
 15817                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15818  001F70  0EA7               	movlw	low STR_111
 15819  001F72  0100               	movlb	0	; () banked
 15820  001F74  6F8E               	movwf	printf@f& (0+255),b
 15821  001F76  0EFC               	movlw	high STR_111
 15822  001F78  0100               	movlb	0	; () banked
 15823  001F7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15824  001F7C  EC8D  F00D         	call	_printf	;wreg free
 15825                           
 15826                           ;Test.c: 354: TMR1ON = 1;
 15827  001F80  80CD               	bsf	4045,0,c	;volatile
 15828                           
 15829                           ;Test.c: 355: TMR3ON = 1;
 15830  001F82  80B1               	bsf	4017,0,c	;volatile
 15831                           
 15832                           ;Test.c: 356: machine_state = Sorting_state;
 15833  001F84  0E01               	movlw	1
 15834  001F86  0100               	movlb	0	; () banked
 15835  001F88  6FFC               	movwf	_machine_state& (0+255),b
 15836                           
 15837                           ; BSR set to: 0
 15838                           ;Test.c: 357: was_low_1 = 0;
 15839  001F8A  0E00               	movlw	0
 15840  001F8C  6E78               	movwf	_was_low_1+1,c	;volatile
 15841  001F8E  0E00               	movlw	0
 15842  001F90  6E77               	movwf	_was_low_1,c	;volatile
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;Test.c: 358: was_low_3 = 0;
 15846  001F92  0E00               	movlw	0
 15847  001F94  6E7C               	movwf	_was_low_3+1,c	;volatile
 15848  001F96  0E00               	movlw	0
 15849  001F98  6E7B               	movwf	_was_low_3,c	;volatile
 15850                           
 15851                           ; BSR set to: 0
 15852                           ;Test.c: 364: initServos();
 15853  001F9A  EC06  F027         	call	_initServos	;wreg free
 15854                           
 15855                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15856  001F9E  0E3D               	movlw	61
 15857  001FA0  0100               	movlb	0	; () banked
 15858  001FA2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15859  001FA4  0EE1               	movlw	225
 15860  001FA6  0100               	movlb	0	; () banked
 15861  001FA8  6FAB               	movwf	??_BothServos& (0+255),b
 15862  001FAA  0E3F               	movlw	63
 15863  001FAC                     u11267:
 15864  001FAC  2EE8               	decfsz	wreg,f,c
 15865  001FAE  D7FE               	bra	u11267
 15866  001FB0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15867  001FB2  D7FC               	bra	u11267
 15868  001FB4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15869  001FB6  D7FA               	bra	u11267
 15870  001FB8  D000               	nop2	
 15871                           
 15872                           ;Test.c: 367: updateServoPosition(500, 1);
 15873  001FBA  0E01               	movlw	1
 15874  001FBC  0100               	movlb	0	; () banked
 15875  001FBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15876  001FC0  0EF4               	movlw	244
 15877  001FC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15878  001FC4  0E00               	movlw	0
 15879  001FC6  0100               	movlb	0	; () banked
 15880  001FC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15881  001FCA  0E01               	movlw	1
 15882  001FCC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15883  001FCE  ECC7  F026         	call	_updateServoPosition	;wreg free
 15884                           
 15885                           ;Test.c: 368: updateServoPosition(1050, 3);
 15886  001FD2  0E04               	movlw	4
 15887  001FD4  0100               	movlb	0	; () banked
 15888  001FD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15889  001FD8  0E1A               	movlw	26
 15890  001FDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15891  001FDC  0E00               	movlw	0
 15892  001FDE  0100               	movlb	0	; () banked
 15893  001FE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15894  001FE2  0E03               	movlw	3
 15895  001FE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15896  001FE6  ECC7  F026         	call	_updateServoPosition	;wreg free
 15897                           
 15898                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15899  001FEA  0E1F               	movlw	31
 15900  001FEC  0100               	movlb	0	; () banked
 15901  001FEE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15902  001FF0  0E71               	movlw	113
 15903  001FF2  0100               	movlb	0	; () banked
 15904  001FF4  6FAB               	movwf	??_BothServos& (0+255),b
 15905  001FF6  0E1E               	movlw	30
 15906  001FF8                     u11277:
 15907  001FF8  2EE8               	decfsz	wreg,f,c
 15908  001FFA  D7FE               	bra	u11277
 15909  001FFC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15910  001FFE  D7FC               	bra	u11277
 15911  002000  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15912  002002  D7FA               	bra	u11277
 15913  002004  F000               	nop	
 15914                           
 15915                           ;Test.c: 370: updateServoPosition(1260, 3);
 15916  002006  0E04               	movlw	4
 15917  002008  0100               	movlb	0	; () banked
 15918  00200A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15919  00200C  0EEC               	movlw	236
 15920  00200E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15921  002010  0E00               	movlw	0
 15922  002012  0100               	movlb	0	; () banked
 15923  002014  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15924  002016  0E03               	movlw	3
 15925  002018  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15926  00201A  ECC7  F026         	call	_updateServoPosition	;wreg free
 15927                           
 15928                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15929  00201E  0E1D               	movlw	29
 15930  002020  0100               	movlb	0	; () banked
 15931  002022  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15932  002024  0E69               	movlw	105
 15933  002026  0100               	movlb	0	; () banked
 15934  002028  6FAB               	movwf	??_BothServos& (0+255),b
 15935  00202A  0EA5               	movlw	165
 15936  00202C                     u11287:
 15937  00202C  2EE8               	decfsz	wreg,f,c
 15938  00202E  D7FE               	bra	u11287
 15939  002030  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15940  002032  D7FC               	bra	u11287
 15941  002034  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15942  002036  D7FA               	bra	u11287
 15943                           
 15944                           ;Test.c: 372: updateServoPosition(1050, 3);
 15945  002038  0E04               	movlw	4
 15946  00203A  0100               	movlb	0	; () banked
 15947  00203C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15948  00203E  0E1A               	movlw	26
 15949  002040  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15950  002042  0E00               	movlw	0
 15951  002044  0100               	movlb	0	; () banked
 15952  002046  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15953  002048  0E03               	movlw	3
 15954  00204A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15955  00204C  ECC7  F026         	call	_updateServoPosition	;wreg free
 15956                           
 15957                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 15958  002050  0E1F               	movlw	31
 15959  002052  0100               	movlb	0	; () banked
 15960  002054  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15961  002056  0E71               	movlw	113
 15962  002058  0100               	movlb	0	; () banked
 15963  00205A  6FAB               	movwf	??_BothServos& (0+255),b
 15964  00205C  0E1E               	movlw	30
 15965  00205E                     u11297:
 15966  00205E  2EE8               	decfsz	wreg,f,c
 15967  002060  D7FE               	bra	u11297
 15968  002062  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15969  002064  D7FC               	bra	u11297
 15970  002066  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15971  002068  D7FA               	bra	u11297
 15972  00206A  F000               	nop	
 15973                           
 15974                           ;Test.c: 375: updateServoPosition(850, 1);
 15975  00206C  0E03               	movlw	3
 15976  00206E  0100               	movlb	0	; () banked
 15977  002070  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15978  002072  0E52               	movlw	82
 15979  002074  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15980  002076  0E00               	movlw	0
 15981  002078  0100               	movlb	0	; () banked
 15982  00207A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15983  00207C  0E01               	movlw	1
 15984  00207E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15985  002080  ECC7  F026         	call	_updateServoPosition	;wreg free
 15986                           
 15987                           ;Test.c: 376: updateServoPosition(1050, 3);
 15988  002084  0E04               	movlw	4
 15989  002086  0100               	movlb	0	; () banked
 15990  002088  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15991  00208A  0E1A               	movlw	26
 15992  00208C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15993  00208E  0E00               	movlw	0
 15994  002090  0100               	movlb	0	; () banked
 15995  002092  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15996  002094  0E03               	movlw	3
 15997  002096  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15998  002098  ECC7  F026         	call	_updateServoPosition	;wreg free
 15999                           
 16000                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 16001  00209C  0E1F               	movlw	31
 16002  00209E  0100               	movlb	0	; () banked
 16003  0020A0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16004  0020A2  0E71               	movlw	113
 16005  0020A4  0100               	movlb	0	; () banked
 16006  0020A6  6FAB               	movwf	??_BothServos& (0+255),b
 16007  0020A8  0E1E               	movlw	30
 16008  0020AA                     u11307:
 16009  0020AA  2EE8               	decfsz	wreg,f,c
 16010  0020AC  D7FE               	bra	u11307
 16011  0020AE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16012  0020B0  D7FC               	bra	u11307
 16013  0020B2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16014  0020B4  D7FA               	bra	u11307
 16015  0020B6  F000               	nop	
 16016                           
 16017                           ;Test.c: 378: updateServoPosition(1260, 3);
 16018  0020B8  0E04               	movlw	4
 16019  0020BA  0100               	movlb	0	; () banked
 16020  0020BC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16021  0020BE  0EEC               	movlw	236
 16022  0020C0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16023  0020C2  0E00               	movlw	0
 16024  0020C4  0100               	movlb	0	; () banked
 16025  0020C6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16026  0020C8  0E03               	movlw	3
 16027  0020CA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16028  0020CC  ECC7  F026         	call	_updateServoPosition	;wreg free
 16029                           
 16030                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 16031  0020D0  0E1D               	movlw	29
 16032  0020D2  0100               	movlb	0	; () banked
 16033  0020D4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16034  0020D6  0E69               	movlw	105
 16035  0020D8  0100               	movlb	0	; () banked
 16036  0020DA  6FAB               	movwf	??_BothServos& (0+255),b
 16037  0020DC  0EA5               	movlw	165
 16038  0020DE                     u11317:
 16039  0020DE  2EE8               	decfsz	wreg,f,c
 16040  0020E0  D7FE               	bra	u11317
 16041  0020E2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16042  0020E4  D7FC               	bra	u11317
 16043  0020E6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16044  0020E8  D7FA               	bra	u11317
 16045                           
 16046                           ;Test.c: 380: updateServoPosition(1050, 3);
 16047  0020EA  0E04               	movlw	4
 16048  0020EC  0100               	movlb	0	; () banked
 16049  0020EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16050  0020F0  0E1A               	movlw	26
 16051  0020F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16052  0020F4  0E00               	movlw	0
 16053  0020F6  0100               	movlb	0	; () banked
 16054  0020F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16055  0020FA  0E03               	movlw	3
 16056  0020FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16057  0020FE  ECC7  F026         	call	_updateServoPosition	;wreg free
 16058                           
 16059                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16060  002102  0E1F               	movlw	31
 16061  002104  0100               	movlb	0	; () banked
 16062  002106  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16063  002108  0E71               	movlw	113
 16064  00210A  0100               	movlb	0	; () banked
 16065  00210C  6FAB               	movwf	??_BothServos& (0+255),b
 16066  00210E  0E1E               	movlw	30
 16067  002110                     u11327:
 16068  002110  2EE8               	decfsz	wreg,f,c
 16069  002112  D7FE               	bra	u11327
 16070  002114  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16071  002116  D7FC               	bra	u11327
 16072  002118  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16073  00211A  D7FA               	bra	u11327
 16074  00211C  F000               	nop	
 16075                           
 16076                           ;Test.c: 383: updateServoPosition(500, 1);
 16077  00211E  0E01               	movlw	1
 16078  002120  0100               	movlb	0	; () banked
 16079  002122  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16080  002124  0EF4               	movlw	244
 16081  002126  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16082  002128  0E00               	movlw	0
 16083  00212A  0100               	movlb	0	; () banked
 16084  00212C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16085  00212E  0E01               	movlw	1
 16086  002130  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16087  002132  ECC7  F026         	call	_updateServoPosition	;wreg free
 16088                           
 16089                           ;Test.c: 384: updateServoPosition(1050, 3);
 16090  002136  0E04               	movlw	4
 16091  002138  0100               	movlb	0	; () banked
 16092  00213A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16093  00213C  0E1A               	movlw	26
 16094  00213E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16095  002140  0E00               	movlw	0
 16096  002142  0100               	movlb	0	; () banked
 16097  002144  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16098  002146  0E03               	movlw	3
 16099  002148  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16100  00214A  ECC7  F026         	call	_updateServoPosition	;wreg free
 16101                           
 16102                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16103  00214E  0E1F               	movlw	31
 16104  002150  0100               	movlb	0	; () banked
 16105  002152  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16106  002154  0E71               	movlw	113
 16107  002156  0100               	movlb	0	; () banked
 16108  002158  6FAB               	movwf	??_BothServos& (0+255),b
 16109  00215A  0E1E               	movlw	30
 16110  00215C                     u11337:
 16111  00215C  2EE8               	decfsz	wreg,f,c
 16112  00215E  D7FE               	bra	u11337
 16113  002160  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16114  002162  D7FC               	bra	u11337
 16115  002164  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16116  002166  D7FA               	bra	u11337
 16117  002168  F000               	nop	
 16118                           
 16119                           ;Test.c: 386: updateServoPosition(1260, 3);
 16120  00216A  0E04               	movlw	4
 16121  00216C  0100               	movlb	0	; () banked
 16122  00216E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16123  002170  0EEC               	movlw	236
 16124  002172  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16125  002174  0E00               	movlw	0
 16126  002176  0100               	movlb	0	; () banked
 16127  002178  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16128  00217A  0E03               	movlw	3
 16129  00217C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16130  00217E  ECC7  F026         	call	_updateServoPosition	;wreg free
 16131                           
 16132                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16133  002182  0E1D               	movlw	29
 16134  002184  0100               	movlb	0	; () banked
 16135  002186  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16136  002188  0E69               	movlw	105
 16137  00218A  0100               	movlb	0	; () banked
 16138  00218C  6FAB               	movwf	??_BothServos& (0+255),b
 16139  00218E  0EA5               	movlw	165
 16140  002190                     u11347:
 16141  002190  2EE8               	decfsz	wreg,f,c
 16142  002192  D7FE               	bra	u11347
 16143  002194  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16144  002196  D7FC               	bra	u11347
 16145  002198  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16146  00219A  D7FA               	bra	u11347
 16147                           
 16148                           ;Test.c: 388: updateServoPosition(1050, 3);
 16149  00219C  0E04               	movlw	4
 16150  00219E  0100               	movlb	0	; () banked
 16151  0021A0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16152  0021A2  0E1A               	movlw	26
 16153  0021A4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16154  0021A6  0E00               	movlw	0
 16155  0021A8  0100               	movlb	0	; () banked
 16156  0021AA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16157  0021AC  0E03               	movlw	3
 16158  0021AE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16159  0021B0  ECC7  F026         	call	_updateServoPosition	;wreg free
 16160                           
 16161                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16162  0021B4  0E3D               	movlw	61
 16163  0021B6  0100               	movlb	0	; () banked
 16164  0021B8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16165  0021BA  0EE1               	movlw	225
 16166  0021BC  0100               	movlb	0	; () banked
 16167  0021BE  6FAB               	movwf	??_BothServos& (0+255),b
 16168  0021C0  0E3F               	movlw	63
 16169  0021C2                     u11357:
 16170  0021C2  2EE8               	decfsz	wreg,f,c
 16171  0021C4  D7FE               	bra	u11357
 16172  0021C6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16173  0021C8  D7FC               	bra	u11357
 16174  0021CA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16175  0021CC  D7FA               	bra	u11357
 16176  0021CE  D000               	nop2	
 16177                           
 16178                           ;Test.c: 391: updateServoPosition(1670, 1);
 16179  0021D0  0E06               	movlw	6
 16180  0021D2  0100               	movlb	0	; () banked
 16181  0021D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16182  0021D6  0E86               	movlw	134
 16183  0021D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16184  0021DA  0E00               	movlw	0
 16185  0021DC  0100               	movlb	0	; () banked
 16186  0021DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16187  0021E0  0E01               	movlw	1
 16188  0021E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16189  0021E4  ECC7  F026         	call	_updateServoPosition	;wreg free
 16190                           
 16191                           ;Test.c: 392: updateServoPosition(1050, 3);
 16192  0021E8  0E04               	movlw	4
 16193  0021EA  0100               	movlb	0	; () banked
 16194  0021EC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16195  0021EE  0E1A               	movlw	26
 16196  0021F0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16197  0021F2  0E00               	movlw	0
 16198  0021F4  0100               	movlb	0	; () banked
 16199  0021F6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16200  0021F8  0E03               	movlw	3
 16201  0021FA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16202  0021FC  ECC7  F026         	call	_updateServoPosition	;wreg free
 16203                           
 16204                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16205  002200  0E1F               	movlw	31
 16206  002202  0100               	movlb	0	; () banked
 16207  002204  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16208  002206  0E71               	movlw	113
 16209  002208  0100               	movlb	0	; () banked
 16210  00220A  6FAB               	movwf	??_BothServos& (0+255),b
 16211  00220C  0E1E               	movlw	30
 16212  00220E                     u11367:
 16213  00220E  2EE8               	decfsz	wreg,f,c
 16214  002210  D7FE               	bra	u11367
 16215  002212  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16216  002214  D7FC               	bra	u11367
 16217  002216  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16218  002218  D7FA               	bra	u11367
 16219  00221A  F000               	nop	
 16220                           
 16221                           ;Test.c: 394: updateServoPosition(1390, 3);
 16222  00221C  0E05               	movlw	5
 16223  00221E  0100               	movlb	0	; () banked
 16224  002220  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16225  002222  0E6E               	movlw	110
 16226  002224  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16227  002226  0E00               	movlw	0
 16228  002228  0100               	movlb	0	; () banked
 16229  00222A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16230  00222C  0E03               	movlw	3
 16231  00222E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16232  002230  ECC7  F026         	call	_updateServoPosition	;wreg free
 16233                           
 16234                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16235  002234  0E1D               	movlw	29
 16236  002236  0100               	movlb	0	; () banked
 16237  002238  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16238  00223A  0E69               	movlw	105
 16239  00223C  0100               	movlb	0	; () banked
 16240  00223E  6FAB               	movwf	??_BothServos& (0+255),b
 16241  002240  0EA5               	movlw	165
 16242  002242                     u11377:
 16243  002242  2EE8               	decfsz	wreg,f,c
 16244  002244  D7FE               	bra	u11377
 16245  002246  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16246  002248  D7FC               	bra	u11377
 16247  00224A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16248  00224C  D7FA               	bra	u11377
 16249                           
 16250                           ;Test.c: 396: updateServoPosition(1050, 3);
 16251  00224E  0E04               	movlw	4
 16252  002250  0100               	movlb	0	; () banked
 16253  002252  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16254  002254  0E1A               	movlw	26
 16255  002256  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16256  002258  0E00               	movlw	0
 16257  00225A  0100               	movlb	0	; () banked
 16258  00225C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16259  00225E  0E03               	movlw	3
 16260  002260  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16261  002262  ECC7  F026         	call	_updateServoPosition	;wreg free
 16262                           
 16263                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16264  002266  0E1F               	movlw	31
 16265  002268  0100               	movlb	0	; () banked
 16266  00226A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16267  00226C  0E71               	movlw	113
 16268  00226E  0100               	movlb	0	; () banked
 16269  002270  6FAB               	movwf	??_BothServos& (0+255),b
 16270  002272  0E1E               	movlw	30
 16271  002274                     u11387:
 16272  002274  2EE8               	decfsz	wreg,f,c
 16273  002276  D7FE               	bra	u11387
 16274  002278  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16275  00227A  D7FC               	bra	u11387
 16276  00227C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16277  00227E  D7FA               	bra	u11387
 16278  002280  F000               	nop	
 16279                           
 16280                           ;Test.c: 399: updateServoPosition(2400, 1);
 16281  002282  0E09               	movlw	9
 16282  002284  0100               	movlb	0	; () banked
 16283  002286  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16284  002288  0E60               	movlw	96
 16285  00228A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16286  00228C  0E00               	movlw	0
 16287  00228E  0100               	movlb	0	; () banked
 16288  002290  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16289  002292  0E01               	movlw	1
 16290  002294  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16291  002296  ECC7  F026         	call	_updateServoPosition	;wreg free
 16292                           
 16293                           ;Test.c: 400: updateServoPosition(1050, 3);
 16294  00229A  0E04               	movlw	4
 16295  00229C  0100               	movlb	0	; () banked
 16296  00229E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16297  0022A0  0E1A               	movlw	26
 16298  0022A2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16299  0022A4  0E00               	movlw	0
 16300  0022A6  0100               	movlb	0	; () banked
 16301  0022A8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16302  0022AA  0E03               	movlw	3
 16303  0022AC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16304  0022AE  ECC7  F026         	call	_updateServoPosition	;wreg free
 16305                           
 16306                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16307  0022B2  0E1F               	movlw	31
 16308  0022B4  0100               	movlb	0	; () banked
 16309  0022B6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16310  0022B8  0E71               	movlw	113
 16311  0022BA  0100               	movlb	0	; () banked
 16312  0022BC  6FAB               	movwf	??_BothServos& (0+255),b
 16313  0022BE  0E1E               	movlw	30
 16314  0022C0                     u11397:
 16315  0022C0  2EE8               	decfsz	wreg,f,c
 16316  0022C2  D7FE               	bra	u11397
 16317  0022C4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16318  0022C6  D7FC               	bra	u11397
 16319  0022C8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16320  0022CA  D7FA               	bra	u11397
 16321  0022CC  F000               	nop	
 16322                           
 16323                           ;Test.c: 402: updateServoPosition(1390, 3);
 16324  0022CE  0E05               	movlw	5
 16325  0022D0  0100               	movlb	0	; () banked
 16326  0022D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16327  0022D4  0E6E               	movlw	110
 16328  0022D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16329  0022D8  0E00               	movlw	0
 16330  0022DA  0100               	movlb	0	; () banked
 16331  0022DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16332  0022DE  0E03               	movlw	3
 16333  0022E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16334  0022E2  ECC7  F026         	call	_updateServoPosition	;wreg free
 16335                           
 16336                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16337  0022E6  0E1D               	movlw	29
 16338  0022E8  0100               	movlb	0	; () banked
 16339  0022EA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16340  0022EC  0E69               	movlw	105
 16341  0022EE  0100               	movlb	0	; () banked
 16342  0022F0  6FAB               	movwf	??_BothServos& (0+255),b
 16343  0022F2  0EA5               	movlw	165
 16344  0022F4                     u11407:
 16345  0022F4  2EE8               	decfsz	wreg,f,c
 16346  0022F6  D7FE               	bra	u11407
 16347  0022F8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16348  0022FA  D7FC               	bra	u11407
 16349  0022FC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16350  0022FE  D7FA               	bra	u11407
 16351                           
 16352                           ;Test.c: 404: updateServoPosition(1050, 3);
 16353  002300  0E04               	movlw	4
 16354  002302  0100               	movlb	0	; () banked
 16355  002304  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16356  002306  0E1A               	movlw	26
 16357  002308  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16358  00230A  0E00               	movlw	0
 16359  00230C  0100               	movlb	0	; () banked
 16360  00230E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16361  002310  0E03               	movlw	3
 16362  002312  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16363  002314  ECC7  F026         	call	_updateServoPosition	;wreg free
 16364                           
 16365                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16366  002318  0E1F               	movlw	31
 16367  00231A  0100               	movlb	0	; () banked
 16368  00231C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16369  00231E  0E71               	movlw	113
 16370  002320  0100               	movlb	0	; () banked
 16371  002322  6FAB               	movwf	??_BothServos& (0+255),b
 16372  002324  0E1E               	movlw	30
 16373  002326                     u11417:
 16374  002326  2EE8               	decfsz	wreg,f,c
 16375  002328  D7FE               	bra	u11417
 16376  00232A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16377  00232C  D7FC               	bra	u11417
 16378  00232E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16379  002330  D7FA               	bra	u11417
 16380  002332  F000               	nop	
 16381                           
 16382                           ;Test.c: 407: stopSignals();
 16383  002334  EC83  F02D         	call	_stopSignals	;wreg free
 16384                           
 16385                           ;Test.c: 408: machine_state = Testing_state;
 16386  002338  0E03               	movlw	3
 16387  00233A  0100               	movlb	0	; () banked
 16388  00233C  6FFC               	movwf	_machine_state& (0+255),b
 16389                           
 16390                           ; BSR set to: 0
 16391  00233E  0012               	return		;funcret
 16392  002340                     __end_of_BothServos:
 16393                           	opt stack 0
 16394                           tblptru	equ	0xFF8
 16395                           tblptrh	equ	0xFF7
 16396                           tblptrl	equ	0xFF6
 16397                           tablat	equ	0xFF5
 16398                           prodh	equ	0xFF4
 16399                           prodl	equ	0xFF3
 16400                           intcon	equ	0xFF2
 16401                           intcon2	equ	0xFF1
 16402                           intcon3	equ	0xFF0
 16403                           postinc0	equ	0xFEE
 16404                           wreg	equ	0xFE8
 16405                           postdec1	equ	0xFE5
 16406                           fsr1l	equ	0xFE1
 16407                           indf2	equ	0xFDF
 16408                           postinc2	equ	0xFDE
 16409                           postdec2	equ	0xFDD
 16410                           fsr2h	equ	0xFDA
 16411                           fsr2l	equ	0xFD9
 16412                           status	equ	0xFD8
 16413                           
 16414 ;; *************** function _stopSignals *****************
 16415 ;; Defined at:
 16416 ;;		line 71 in file "main.c"
 16417 ;; Parameters:    Size  Location     Type
 16418 ;;		None
 16419 ;; Auto vars:     Size  Location     Type
 16420 ;;		None
 16421 ;; Return value:  Size  Location     Type
 16422 ;;                  1    wreg      void 
 16423 ;; Registers used:
 16424 ;;		wreg, status,2
 16425 ;; Tracked objects:
 16426 ;;		On entry : 0/0
 16427 ;;		On exit  : 0/0
 16428 ;;		Unchanged: 0/0
 16429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16434 ;;Total ram usage:        0 bytes
 16435 ;; Hardware stack levels used:    1
 16436 ;; Hardware stack levels required when called:    7
 16437 ;; This function calls:
 16438 ;;		Nothing
 16439 ;; This function is called by:
 16440 ;;		_main
 16441 ;;		_BothServos
 16442 ;;		_PlatformTest
 16443 ;;		_arm
 16444 ;; This function uses a non-reentrant model
 16445 ;;
 16446                           
 16447                           	psect	text51
 16448  005B06                     __ptext51:
 16449                           	opt stack 0
 16450  005B06                     _stopSignals:
 16451                           	opt stack 23
 16452                           
 16453                           ;main.c: 72: LATA = 0x00;
 16454                           
 16455                           ; BSR set to: 0
 16456                           ;incstack = 0
 16457  005B06  0E00               	movlw	0
 16458  005B08  6E89               	movwf	3977,c	;volatile
 16459                           
 16460                           ;main.c: 73: LATB = 0x00;
 16461  005B0A  0E00               	movlw	0
 16462  005B0C  6E8A               	movwf	3978,c	;volatile
 16463                           
 16464                           ;main.c: 74: LATC = 0x00;
 16465  005B0E  0E00               	movlw	0
 16466  005B10  6E8B               	movwf	3979,c	;volatile
 16467                           
 16468                           ;main.c: 75: LATD = 0x00;
 16469  005B12  0E00               	movlw	0
 16470  005B14  6E8C               	movwf	3980,c	;volatile
 16471                           
 16472                           ;main.c: 76: LATE = 0x00;
 16473  005B16  0E00               	movlw	0
 16474  005B18  6E8D               	movwf	3981,c	;volatile
 16475                           
 16476                           ;main.c: 77: TMR1IF = 0;
 16477  005B1A  909E               	bcf	3998,0,c	;volatile
 16478                           
 16479                           ;main.c: 78: TMR2IF = 0;
 16480  005B1C  929E               	bcf	3998,1,c	;volatile
 16481                           
 16482                           ;main.c: 79: TMR3IF = 0;
 16483  005B1E  92A1               	bcf	4001,1,c	;volatile
 16484  005B20  0012               	return		;funcret
 16485  005B22                     __end_of_stopSignals:
 16486                           	opt stack 0
 16487                           tblptru	equ	0xFF8
 16488                           tblptrh	equ	0xFF7
 16489                           tblptrl	equ	0xFF6
 16490                           tablat	equ	0xFF5
 16491                           prodh	equ	0xFF4
 16492                           prodl	equ	0xFF3
 16493                           intcon	equ	0xFF2
 16494                           intcon2	equ	0xFF1
 16495                           intcon3	equ	0xFF0
 16496                           postinc0	equ	0xFEE
 16497                           wreg	equ	0xFE8
 16498                           postdec1	equ	0xFE5
 16499                           fsr1l	equ	0xFE1
 16500                           indf2	equ	0xFDF
 16501                           postinc2	equ	0xFDE
 16502                           postdec2	equ	0xFDD
 16503                           fsr2h	equ	0xFDA
 16504                           fsr2l	equ	0xFD9
 16505                           status	equ	0xFD8
 16506                           
 16507 ;; *************** function _initServos *****************
 16508 ;; Defined at:
 16509 ;;		line 475 in file "sort.c"
 16510 ;; Parameters:    Size  Location     Type
 16511 ;;		None
 16512 ;; Auto vars:     Size  Location     Type
 16513 ;;		None
 16514 ;; Return value:  Size  Location     Type
 16515 ;;                  1    wreg      void 
 16516 ;; Registers used:
 16517 ;;		wreg, status,2, status,0, cstack
 16518 ;; Tracked objects:
 16519 ;;		On entry : 0/0
 16520 ;;		On exit  : 0/0
 16521 ;;		Unchanged: 0/0
 16522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16526 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16527 ;;Total ram usage:        1 bytes
 16528 ;; Hardware stack levels used:    1
 16529 ;; Hardware stack levels required when called:    8
 16530 ;; This function calls:
 16531 ;;		_updateServoPosition
 16532 ;; This function is called by:
 16533 ;;		_Loading
 16534 ;;		_BothServos
 16535 ;; This function uses a non-reentrant model
 16536 ;;
 16537                           
 16538                           	psect	text52
 16539  004E0C                     __ptext52:
 16540                           	opt stack 0
 16541  004E0C                     _initServos:
 16542                           	opt stack 20
 16543                           
 16544                           ;sort.c: 477: updateServoPosition(1200, 1);
 16545                           
 16546                           ;incstack = 0
 16547  004E0C  0E04               	movlw	4
 16548  004E0E  0100               	movlb	0	; () banked
 16549  004E10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16550  004E12  0EB0               	movlw	176
 16551  004E14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16552  004E16  0E00               	movlw	0
 16553  004E18  0100               	movlb	0	; () banked
 16554  004E1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16555  004E1C  0E01               	movlw	1
 16556  004E1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16557  004E20  ECC7  F026         	call	_updateServoPosition	;wreg free
 16558                           
 16559                           ;sort.c: 478: updateServoPosition(1050, 3);
 16560  004E24  0E04               	movlw	4
 16561  004E26  0100               	movlb	0	; () banked
 16562  004E28  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16563  004E2A  0E1A               	movlw	26
 16564  004E2C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16565  004E2E  0E00               	movlw	0
 16566  004E30  0100               	movlb	0	; () banked
 16567  004E32  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16568  004E34  0E03               	movlw	3
 16569  004E36  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16570  004E38  ECC7  F026         	call	_updateServoPosition	;wreg free
 16571                           
 16572                           ;sort.c: 479: TMR1ON = 1;
 16573  004E3C  80CD               	bsf	4045,0,c	;volatile
 16574                           
 16575                           ;sort.c: 480: was_low_1 = 0;
 16576  004E3E  0E00               	movlw	0
 16577  004E40  6E78               	movwf	_was_low_1+1,c	;volatile
 16578  004E42  0E00               	movlw	0
 16579  004E44  6E77               	movwf	_was_low_1,c	;volatile
 16580                           
 16581                           ;sort.c: 482: _delay((unsigned long)((5)*(32000000/4000.0)));
 16582  004E46  0E34               	movlw	52
 16583  004E48  0100               	movlb	0	; () banked
 16584  004E4A  6F88               	movwf	??_initServos& (0+255),b
 16585  004E4C  0EF1               	movlw	241
 16586  004E4E                     u11427:
 16587  004E4E  2EE8               	decfsz	wreg,f,c
 16588  004E50  D7FE               	bra	u11427
 16589  004E52  2F88               	decfsz	??_initServos& (0+255),f,b
 16590  004E54  D7FC               	bra	u11427
 16591  004E56  D000               	nop2	
 16592                           
 16593                           ;sort.c: 484: TMR3ON = 1;
 16594  004E58  80B1               	bsf	4017,0,c	;volatile
 16595                           
 16596                           ;sort.c: 485: was_low_3 = 0;
 16597  004E5A  0E00               	movlw	0
 16598  004E5C  6E7C               	movwf	_was_low_3+1,c	;volatile
 16599  004E5E  0E00               	movlw	0
 16600  004E60  6E7B               	movwf	_was_low_3,c	;volatile
 16601                           
 16602                           ;sort.c: 488: _delay((unsigned long)((1)*(32000000/4000.0)));
 16603  004E62  0E0B               	movlw	11
 16604  004E64  0100               	movlb	0	; () banked
 16605  004E66  6F88               	movwf	??_initServos& (0+255),b
 16606  004E68  0E62               	movlw	98
 16607  004E6A                     u11437:
 16608  004E6A  2EE8               	decfsz	wreg,f,c
 16609  004E6C  D7FE               	bra	u11437
 16610  004E6E  2F88               	decfsz	??_initServos& (0+255),f,b
 16611  004E70  D7FC               	bra	u11437
 16612  004E72  F000               	nop	
 16613                           
 16614                           ;sort.c: 489: LATBbits.LATB3 = 0;
 16615  004E74  968A               	bcf	3978,3,c	;volatile
 16616                           
 16617                           ;sort.c: 490: TMR2ON = 1;
 16618  004E76  84CA               	bsf	4042,2,c	;volatile
 16619                           
 16620                           ;sort.c: 491: was_low_2 = 0;
 16621  004E78  0E00               	movlw	0
 16622  004E7A  6E7A               	movwf	_was_low_2+1,c	;volatile
 16623  004E7C  0E00               	movlw	0
 16624  004E7E  6E79               	movwf	_was_low_2,c	;volatile
 16625                           
 16626                           ;sort.c: 493: LATCbits.LATC0 = 1;
 16627  004E80  808B               	bsf	3979,0,c	;volatile
 16628  004E82  0012               	return		;funcret
 16629  004E84                     __end_of_initServos:
 16630                           	opt stack 0
 16631                           tblptru	equ	0xFF8
 16632                           tblptrh	equ	0xFF7
 16633                           tblptrl	equ	0xFF6
 16634                           tablat	equ	0xFF5
 16635                           prodh	equ	0xFF4
 16636                           prodl	equ	0xFF3
 16637                           intcon	equ	0xFF2
 16638                           intcon2	equ	0xFF1
 16639                           intcon3	equ	0xFF0
 16640                           postinc0	equ	0xFEE
 16641                           wreg	equ	0xFE8
 16642                           postdec1	equ	0xFE5
 16643                           fsr1l	equ	0xFE1
 16644                           indf2	equ	0xFDF
 16645                           postinc2	equ	0xFDE
 16646                           postdec2	equ	0xFDD
 16647                           fsr2h	equ	0xFDA
 16648                           fsr2l	equ	0xFD9
 16649                           status	equ	0xFD8
 16650                           
 16651 ;; *************** function _updateServoPosition *****************
 16652 ;; Defined at:
 16653 ;;		line 568 in file "sort.c"
 16654 ;; Parameters:    Size  Location     Type
 16655 ;;  time_us         2    0[BANK0 ] int 
 16656 ;;  timer           2    2[BANK0 ] int 
 16657 ;; Auto vars:     Size  Location     Type
 16658 ;;  my_time         2    6[BANK0 ] unsigned int 
 16659 ;; Return value:  Size  Location     Type
 16660 ;;                  1    wreg      void 
 16661 ;; Registers used:
 16662 ;;		wreg, status,2, status,0
 16663 ;; Tracked objects:
 16664 ;;		On entry : 0/0
 16665 ;;		On exit  : 0/0
 16666 ;;		Unchanged: 0/0
 16667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16668 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16669 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16671 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16672 ;;Total ram usage:        8 bytes
 16673 ;; Hardware stack levels used:    1
 16674 ;; Hardware stack levels required when called:    7
 16675 ;; This function calls:
 16676 ;;		Nothing
 16677 ;; This function is called by:
 16678 ;;		_Distribution
 16679 ;;		_initServos
 16680 ;;		_actuatorTest
 16681 ;;		_BothServos
 16682 ;; This function uses a non-reentrant model
 16683 ;;
 16684                           
 16685                           	psect	text53
 16686  004D8E                     __ptext53:
 16687                           	opt stack 0
 16688  004D8E                     _updateServoPosition:
 16689                           	opt stack 20
 16690                           
 16691                           ;sort.c: 569: unsigned int my_time = 65535 - time_us;
 16692                           
 16693                           ;incstack = 0
 16694  004D8E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16695  004D92  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16696  004D96  0100               	movlb	0	; () banked
 16697  004D98  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16698  004D9A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16699  004D9C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16700  004D9E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16701  004DA0  0EFF               	movlw	255
 16702  004DA2  0100               	movlb	0	; () banked
 16703  004DA4  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16704  004DA6  0100               	movlb	0	; () banked
 16705  004DA8  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16706  004DAA  0EFF               	movlw	255
 16707  004DAC  0100               	movlb	0	; () banked
 16708  004DAE  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16709  004DB0  0100               	movlb	0	; () banked
 16710  004DB2  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16711                           
 16712                           ;sort.c: 570: switch(timer){
 16713  004DB4  D019               	goto	l6934
 16714  004DB6                     l6928:
 16715                           
 16716                           ; BSR set to: 0
 16717                           ;sort.c: 572: servoTimes[0] = my_time >> 8;
 16718  004DB6  0100               	movlb	0	; () banked
 16719  004DB8  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16720  004DBA  6E5B               	movwf	_servoTimes,c
 16721  004DBC  6A5C               	clrf	_servoTimes+1,c
 16722                           
 16723                           ;sort.c: 573: servoTimes[1] = my_time & 0xFF;
 16724  004DBE  0100               	movlb	0	; () banked
 16725  004DC0  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16726  004DC2  6E5D               	movwf	_servoTimes+2,c
 16727  004DC4  6A5E               	clrf	_servoTimes+3,c
 16728                           
 16729                           ; BSR set to: 0
 16730                           ;sort.c: 575: pan_servo_state = time_us;
 16731  004DC6  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16732  004DCA  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16733  004DCE                     l935:
 16734                           
 16735                           ; BSR set to: 0
 16736                           ;sort.c: 577: servoTimes[2] = my_time >> 8;
 16737  004DCE  0100               	movlb	0	; () banked
 16738  004DD0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16739  004DD2  6E5F               	movwf	_servoTimes+4,c
 16740  004DD4  6A60               	clrf	_servoTimes+5,c
 16741                           
 16742                           ;sort.c: 578: servoTimes[3] = my_time & 0xFF;
 16743  004DD6  0100               	movlb	0	; () banked
 16744  004DD8  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16745  004DDA  6E61               	movwf	_servoTimes+6,c
 16746  004DDC  6A62               	clrf	_servoTimes+7,c
 16747                           
 16748                           ; BSR set to: 0
 16749                           ;sort.c: 580: tilt_servo_state = time_us;
 16750  004DDE  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16751  004DE2  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16752                           
 16753                           ;sort.c: 581: }
 16754  004DE6  0012               	return	
 16755  004DE8                     l6934:
 16756                           
 16757                           ; BSR set to: 0
 16758  004DE8  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16759  004DEC  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16760                           
 16761                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16762                           ; Switch size 1, requested type "space"
 16763                           ; Number of cases is 1, Range of values is 0 to 0
 16764                           ; switch strategies available:
 16765                           ; Name         Instructions Cycles
 16766                           ; simple_byte            4     3 (average)
 16767                           ;	Chosen strategy is simple_byte
 16768  004DF0  0100               	movlb	0	; () banked
 16769  004DF2  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16770  004DF4  0A00               	xorlw	0	; case 0
 16771  004DF6  A4D8               	btfss	status,2,c
 16772  004DF8  0012               	return	
 16773                           
 16774                           ; BSR set to: 0
 16775                           ; Switch size 1, requested type "space"
 16776                           ; Number of cases is 2, Range of values is 1 to 3
 16777                           ; switch strategies available:
 16778                           ; Name         Instructions Cycles
 16779                           ; simple_byte            7     4 (average)
 16780                           ;	Chosen strategy is simple_byte
 16781  004DFA  0100               	movlb	0	; () banked
 16782  004DFC  5184               	movf	??_updateServoPosition& (0+255),w,b
 16783  004DFE  0A01               	xorlw	1	; case 1
 16784  004E00  B4D8               	btfsc	status,2,c
 16785  004E02  D7D9               	goto	l6928
 16786  004E04  0A02               	xorlw	2	; case 3
 16787  004E06  A4D8               	btfss	status,2,c
 16788  004E08  0012               	return	
 16789  004E0A  D7E1               	goto	l935
 16790  004E0C                     __end_of_updateServoPosition:
 16791                           	opt stack 0
 16792                           tblptru	equ	0xFF8
 16793                           tblptrh	equ	0xFF7
 16794                           tblptrl	equ	0xFF6
 16795                           tablat	equ	0xFF5
 16796                           prodh	equ	0xFF4
 16797                           prodl	equ	0xFF3
 16798                           intcon	equ	0xFF2
 16799                           intcon2	equ	0xFF1
 16800                           intcon3	equ	0xFF0
 16801                           postinc0	equ	0xFEE
 16802                           wreg	equ	0xFE8
 16803                           postdec1	equ	0xFE5
 16804                           fsr1l	equ	0xFE1
 16805                           indf2	equ	0xFDF
 16806                           postinc2	equ	0xFDE
 16807                           postdec2	equ	0xFDD
 16808                           fsr2h	equ	0xFDA
 16809                           fsr2l	equ	0xFD9
 16810                           status	equ	0xFD8
 16811                           
 16812 ;; *************** function _BlockerTest *****************
 16813 ;; Defined at:
 16814 ;;		line 581 in file "Test.c"
 16815 ;; Parameters:    Size  Location     Type
 16816 ;;		None
 16817 ;; Auto vars:     Size  Location     Type
 16818 ;;  i               2   45[BANK0 ] int 
 16819 ;;  cond_flag       2   51[BANK0 ] int 
 16820 ;;  cam_flag        2   49[BANK0 ] int 
 16821 ;;  res             2   47[BANK0 ] int 
 16822 ;; Return value:  Size  Location     Type
 16823 ;;                  1    wreg      void 
 16824 ;; Registers used:
 16825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16826 ;; Tracked objects:
 16827 ;;		On entry : 0/0
 16828 ;;		On exit  : 0/0
 16829 ;;		Unchanged: 0/0
 16830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16832 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16833 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16834 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16835 ;;Total ram usage:       10 bytes
 16836 ;; Hardware stack levels used:    1
 16837 ;; Hardware stack levels required when called:   10
 16838 ;; This function calls:
 16839 ;;		_lcdInst
 16840 ;;		_printf
 16841 ;;		_readADC
 16842 ;; This function is called by:
 16843 ;;		_Test
 16844 ;; This function uses a non-reentrant model
 16845 ;;
 16846                           
 16847                           	psect	text54
 16848  003CF8                     __ptext54:
 16849                           	opt stack 0
 16850  003CF8                     _BlockerTest:
 16851                           	opt stack 19
 16852                           
 16853                           ;Test.c: 582: readADC(2);
 16854                           
 16855                           ; BSR set to: 0
 16856                           ;incstack = 0
 16857  003CF8  0E02               	movlw	2
 16858  003CFA  ECC7  F02C         	call	_readADC
 16859                           
 16860                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16861  003CFE  50C3               	movf	4035,w,c	;volatile
 16862  003D00  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16863  003D04  0100               	movlb	0	; () banked
 16864  003D06  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16865  003D08  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16866  003D0C  0100               	movlb	0	; () banked
 16867  003D0E  6BAB               	clrf	??_BlockerTest& (0+255),b
 16868  003D10  0100               	movlb	0	; () banked
 16869  003D12  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16870  003D14  0100               	movlb	0	; () banked
 16871  003D16  6FAF               	movwf	BlockerTest@res& (0+255),b
 16872  003D18  0100               	movlb	0	; () banked
 16873  003D1A  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16874  003D1C  0100               	movlb	0	; () banked
 16875  003D1E  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16876                           
 16877                           ; BSR set to: 0
 16878                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16879  003D20  0E01               	movlw	1
 16880  003D22  ECDC  F02D         	call	_lcdInst
 16881  003D26  0E68               	movlw	104
 16882  003D28  0100               	movlb	0	; () banked
 16883  003D2A  6FAB               	movwf	??_BlockerTest& (0+255),b
 16884  003D2C  0EE4               	movlw	228
 16885  003D2E                     u11447:
 16886  003D2E  2EE8               	decfsz	wreg,f,c
 16887  003D30  D7FE               	bra	u11447
 16888  003D32  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16889  003D34  D7FC               	bra	u11447
 16890  003D36  F000               	nop	
 16891  003D38  0E80               	movlw	128
 16892  003D3A  ECDC  F02D         	call	_lcdInst
 16893                           
 16894                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 16895  003D3E  0E6D               	movlw	low STR_123
 16896  003D40  0100               	movlb	0	; () banked
 16897  003D42  6F8E               	movwf	printf@f& (0+255),b
 16898  003D44  0EFE               	movlw	high STR_123
 16899  003D46  0100               	movlb	0	; () banked
 16900  003D48  6F8F               	movwf	(printf@f+1)& (0+255),b
 16901  003D4A  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16902  003D4E  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16903  003D52  EC8D  F00D         	call	_printf	;wreg free
 16904                           
 16905                           ;Test.c: 587: lcdInst(0b11000000);;
 16906  003D56  0EC0               	movlw	192
 16907  003D58  ECDC  F02D         	call	_lcdInst
 16908                           
 16909                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 16910  003D5C  0E1C               	movlw	low STR_124
 16911  003D5E  0100               	movlb	0	; () banked
 16912  003D60  6F8E               	movwf	printf@f& (0+255),b
 16913  003D62  0EFB               	movlw	high STR_124
 16914  003D64  0100               	movlb	0	; () banked
 16915  003D66  6F8F               	movwf	(printf@f+1)& (0+255),b
 16916  003D68  EC8D  F00D         	call	_printf	;wreg free
 16917                           
 16918                           ;Test.c: 589: int cam_flag = 1;
 16919  003D6C  0E00               	movlw	0
 16920  003D6E  0100               	movlb	0	; () banked
 16921  003D70  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16922  003D72  0E01               	movlw	1
 16923  003D74  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 16924                           
 16925                           ; BSR set to: 0
 16926                           ;Test.c: 590: int cond_flag = 0;
 16927  003D76  0E00               	movlw	0
 16928  003D78  0100               	movlb	0	; () banked
 16929  003D7A  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16930  003D7C  0E00               	movlw	0
 16931  003D7E  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 16932                           
 16933                           ; BSR set to: 0
 16934                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 16935                           
 16936                           ;Test.c: 592: while(1){
 16937  003D80  D023               	goto	l9182
 16938  003D82                     l9174:
 16939                           
 16940                           ;Test.c: 594: readADC(2);
 16941  003D82  0E02               	movlw	2
 16942  003D84  ECC7  F02C         	call	_readADC
 16943                           
 16944                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 16945  003D88  50C3               	movf	4035,w,c	;volatile
 16946  003D8A  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16947  003D8E  0100               	movlb	0	; () banked
 16948  003D90  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16949  003D92  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16950  003D96  0100               	movlb	0	; () banked
 16951  003D98  6BAB               	clrf	??_BlockerTest& (0+255),b
 16952  003D9A  0100               	movlb	0	; () banked
 16953  003D9C  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16954  003D9E  0100               	movlb	0	; () banked
 16955  003DA0  6FAF               	movwf	BlockerTest@res& (0+255),b
 16956  003DA2  0100               	movlb	0	; () banked
 16957  003DA4  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16958  003DA6  0100               	movlb	0	; () banked
 16959  003DA8  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16960                           
 16961                           ; BSR set to: 0
 16962                           ;Test.c: 596: lcdInst(0b10000000);;
 16963  003DAA  0E80               	movlw	128
 16964  003DAC  ECDC  F02D         	call	_lcdInst
 16965                           
 16966                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 16967  003DB0  0E6D               	movlw	low STR_123
 16968  003DB2  0100               	movlb	0	; () banked
 16969  003DB4  6F8E               	movwf	printf@f& (0+255),b
 16970  003DB6  0EFE               	movlw	high STR_123
 16971  003DB8  0100               	movlb	0	; () banked
 16972  003DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 16973  003DBC  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16974  003DC0  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16975  003DC4  EC8D  F00D         	call	_printf	;wreg free
 16976  003DC8                     l9182:
 16977  003DC8  A281               	btfss	3969,1,c	;volatile
 16978  003DCA  D7DB               	goto	l9174
 16979                           
 16980                           ;Test.c: 598: }
 16981                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 16982  003DCC  3881               	swapf	3969,w,c	;volatile
 16983  003DCE  0B0F               	andlw	15
 16984  003DD0  0A0F               	xorlw	15
 16985  003DD2  B4D8               	btfsc	status,2,c
 16986  003DD4  0012               	return	
 16987                           
 16988                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 16989                           
 16990                           ;Test.c: 601: }
 16991                           
 16992                           ;Test.c: 600: break;
 16993  003DD6  3881               	swapf	3969,w,c	;volatile
 16994  003DD8  0B0F               	andlw	15
 16995  003DDA  06E8               	decf	wreg,f,c
 16996  003DDC  A4D8               	btfss	status,2,c
 16997  003DDE  D016               	goto	l9200
 16998                           
 16999                           ;Test.c: 603: if(cond_flag){
 17000  003DE0  0100               	movlb	0	; () banked
 17001  003DE2  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17002  003DE4  0100               	movlb	0	; () banked
 17003  003DE6  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17004  003DE8  B4D8               	btfsc	status,2,c
 17005  003DEA  D007               	goto	l1455
 17006                           
 17007                           ; BSR set to: 0
 17008                           ;Test.c: 604: LATAbits.LATA3 = 1;
 17009  003DEC  8689               	bsf	3977,3,c	;volatile
 17010  003DEE  D006               	goto	l9198
 17011  003DF0                     u8321:
 17012  003DF0  0E01               	movlw	1
 17013  003DF2                     u8330:
 17014  003DF2  0100               	movlb	0	; () banked
 17015  003DF4  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17016  003DF6  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17017                           
 17018                           ;Test.c: 606: }
 17019  003DF8  D05F               	goto	l9228
 17020  003DFA                     l1455:
 17021                           
 17022                           ; BSR set to: 0
 17023                           ;Test.c: 607: else{
 17024                           ;Test.c: 608: LATAbits.LATA3 = 0;
 17025  003DFA  9689               	bcf	3977,3,c	;volatile
 17026  003DFC                     l9198:
 17027                           
 17028                           ; BSR set to: 0
 17029                           ;Test.c: 609: cond_flag = !cond_flag;
 17030  003DFC  0100               	movlb	0	; () banked
 17031  003DFE  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17032  003E00  0100               	movlb	0	; () banked
 17033  003E02  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17034  003E04  B4D8               	btfsc	status,2,c
 17035  003E06  D7F4               	goto	u8321
 17036  003E08  0E00               	movlw	0
 17037  003E0A  D7F3               	goto	u8330
 17038  003E0C                     l9200:
 17039                           
 17040                           ;Test.c: 612: else{
 17041                           ;Test.c: 613: if(cam_flag){
 17042  003E0C  0100               	movlb	0	; () banked
 17043  003E0E  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17044  003E10  0100               	movlb	0	; () banked
 17045  003E12  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17046  003E14  B4D8               	btfsc	status,2,c
 17047  003E16  D007               	goto	l9206
 17048                           
 17049                           ; BSR set to: 0
 17050                           ;Test.c: 614: LATCbits.LATC0 = 1;
 17051  003E18  808B               	bsf	3979,0,c	;volatile
 17052  003E1A  D023               	goto	l9218
 17053  003E1C                     u8371:
 17054  003E1C  0E01               	movlw	1
 17055  003E1E                     u8380:
 17056  003E1E  0100               	movlb	0	; () banked
 17057  003E20  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17058  003E22  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17059                           
 17060                           ;Test.c: 616: }
 17061  003E24  D049               	goto	l9228
 17062  003E26                     l9206:
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;Test.c: 617: else{
 17066                           ;Test.c: 618: for(int i=0;i<5000;i++)
 17067  003E26  0E00               	movlw	0
 17068  003E28  0100               	movlb	0	; () banked
 17069  003E2A  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17070  003E2C  0E00               	movlw	0
 17071  003E2E  6FAD               	movwf	BlockerTest@i& (0+255),b
 17072  003E30                     l9208:
 17073                           
 17074                           ; BSR set to: 0
 17075  003E30  0100               	movlb	0	; () banked
 17076  003E32  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17077  003E34  D008               	goto	l1460
 17078  003E36  0E88               	movlw	136
 17079  003E38  0100               	movlb	0	; () banked
 17080  003E3A  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17081  003E3C  0E13               	movlw	19
 17082  003E3E  0100               	movlb	0	; () banked
 17083  003E40  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17084  003E42  B0D8               	btfsc	status,0,c
 17085  003E44  D00D               	goto	l1461
 17086  003E46                     l1460:
 17087                           
 17088                           ; BSR set to: 0
 17089                           ;Test.c: 619: {
 17090                           ;Test.c: 620: LATCbits.LATC0 = 1;
 17091  003E46  808B               	bsf	3979,0,c	;volatile
 17092                           
 17093                           ; BSR set to: 0
 17094                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17095  003E48  0E1A               	movlw	26
 17096  003E4A                     u11457:
 17097  003E4A  2EE8               	decfsz	wreg,f,c
 17098  003E4C  D7FE               	bra	u11457
 17099  003E4E  D000               	nop2	
 17100                           
 17101                           ;Test.c: 622: LATCbits.LATC0 = 0;
 17102  003E50  908B               	bcf	3979,0,c	;volatile
 17103                           
 17104                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17105  003E52  0EF0               	movlw	240
 17106  003E54                     u11467:
 17107  003E54  2EE8               	decfsz	wreg,f,c
 17108  003E56  D7FE               	bra	u11467
 17109  003E58  0100               	movlb	0	; () banked
 17110  003E5A  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17111  003E5C  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17112  003E5E  D7E8               	goto	l9208
 17113  003E60                     l1461:
 17114                           
 17115                           ; BSR set to: 0
 17116                           ;Test.c: 624: }
 17117                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17118  003E60  908B               	bcf	3979,0,c	;volatile
 17119  003E62                     l9218:
 17120                           
 17121                           ; BSR set to: 0
 17122                           ;Test.c: 626: cam_flag = !cam_flag;
 17123  003E62  0100               	movlb	0	; () banked
 17124  003E64  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17125  003E66  0100               	movlb	0	; () banked
 17126  003E68  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17127  003E6A  B4D8               	btfsc	status,2,c
 17128  003E6C  D7D7               	goto	u8371
 17129  003E6E  0E00               	movlw	0
 17130  003E70  D7D6               	goto	u8380
 17131  003E72                     l9220:
 17132                           
 17133                           ;Test.c: 631: readADC(2);
 17134  003E72  0E02               	movlw	2
 17135  003E74  ECC7  F02C         	call	_readADC
 17136                           
 17137                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17138  003E78  50C3               	movf	4035,w,c	;volatile
 17139  003E7A  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17140  003E7E  0100               	movlb	0	; () banked
 17141  003E80  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17142  003E82  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17143  003E86  0100               	movlb	0	; () banked
 17144  003E88  6BAB               	clrf	??_BlockerTest& (0+255),b
 17145  003E8A  0100               	movlb	0	; () banked
 17146  003E8C  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17147  003E8E  0100               	movlb	0	; () banked
 17148  003E90  6FAF               	movwf	BlockerTest@res& (0+255),b
 17149  003E92  0100               	movlb	0	; () banked
 17150  003E94  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17151  003E96  0100               	movlb	0	; () banked
 17152  003E98  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17153                           
 17154                           ; BSR set to: 0
 17155                           ;Test.c: 633: lcdInst(0b10000000);;
 17156  003E9A  0E80               	movlw	128
 17157  003E9C  ECDC  F02D         	call	_lcdInst
 17158                           
 17159                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17160  003EA0  0E6D               	movlw	low STR_123
 17161  003EA2  0100               	movlb	0	; () banked
 17162  003EA4  6F8E               	movwf	printf@f& (0+255),b
 17163  003EA6  0EFE               	movlw	high STR_123
 17164  003EA8  0100               	movlb	0	; () banked
 17165  003EAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 17166  003EAC  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17167  003EB0  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17168  003EB4  EC8D  F00D         	call	_printf	;wreg free
 17169  003EB8                     l9228:
 17170  003EB8  A281               	btfss	3969,1,c	;volatile
 17171  003EBA  D786               	goto	l9182
 17172  003EBC  D7DA               	goto	l9220
 17173  003EBE                     __end_of_BlockerTest:
 17174                           	opt stack 0
 17175                           tblptru	equ	0xFF8
 17176                           tblptrh	equ	0xFF7
 17177                           tblptrl	equ	0xFF6
 17178                           tablat	equ	0xFF5
 17179                           prodh	equ	0xFF4
 17180                           prodl	equ	0xFF3
 17181                           intcon	equ	0xFF2
 17182                           intcon2	equ	0xFF1
 17183                           intcon3	equ	0xFF0
 17184                           postinc0	equ	0xFEE
 17185                           wreg	equ	0xFE8
 17186                           postdec1	equ	0xFE5
 17187                           fsr1l	equ	0xFE1
 17188                           indf2	equ	0xFDF
 17189                           postinc2	equ	0xFDE
 17190                           postdec2	equ	0xFDD
 17191                           fsr2h	equ	0xFDA
 17192                           fsr2l	equ	0xFD9
 17193                           status	equ	0xFD8
 17194                           
 17195 ;; *************** function _readADC *****************
 17196 ;; Defined at:
 17197 ;;		line 15 in file "ADCFunctionality.c"
 17198 ;; Parameters:    Size  Location     Type
 17199 ;;  channel         1    wreg     unsigned char 
 17200 ;; Auto vars:     Size  Location     Type
 17201 ;;  channel         1    1[BANK0 ] unsigned char 
 17202 ;; Return value:  Size  Location     Type
 17203 ;;                  1    wreg      void 
 17204 ;; Registers used:
 17205 ;;		wreg, status,2, status,0, cstack
 17206 ;; Tracked objects:
 17207 ;;		On entry : 0/0
 17208 ;;		On exit  : 0/0
 17209 ;;		Unchanged: 0/0
 17210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17215 ;;Total ram usage:        2 bytes
 17216 ;; Hardware stack levels used:    1
 17217 ;; Hardware stack levels required when called:    7
 17218 ;; This function calls:
 17219 ;;		Nothing
 17220 ;; This function is called by:
 17221 ;;		_readIR
 17222 ;;		_readMAG
 17223 ;;		_readCOND
 17224 ;;		_sensorTest
 17225 ;;		_PlatformTest
 17226 ;;		_BlockerTest
 17227 ;; This function uses a non-reentrant model
 17228 ;;
 17229                           
 17230                           	psect	text55
 17231  00598E                     __ptext55:
 17232                           	opt stack 0
 17233  00598E                     _readADC:
 17234                           	opt stack 20
 17235                           
 17236                           ;incstack = 0
 17237                           ;readADC@channel stored from wreg
 17238  00598E  0100               	movlb	0	; () banked
 17239  005990  6F81               	movwf	readADC@channel& (0+255),b
 17240                           
 17241                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17242  005992  0100               	movlb	0	; () banked
 17243  005994  4581               	rlncf	readADC@channel& (0+255),w,b
 17244  005996  46E8               	rlncf	wreg,f,c
 17245  005998  0BFC               	andlw	252
 17246  00599A  6EC2               	movwf	4034,c	;volatile
 17247                           
 17248                           ; BSR set to: 0
 17249                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17250  00599C  80C2               	bsf	4034,0,c	;volatile
 17251                           
 17252                           ; BSR set to: 0
 17253                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17254  00599E  82C2               	bsf	4034,1,c	;volatile
 17255                           
 17256                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17257  0059A0  D009               	goto	l6566
 17258  0059A2                     l6564:
 17259  0059A2  0E34               	movlw	52
 17260  0059A4  0100               	movlb	0	; () banked
 17261  0059A6  6F80               	movwf	??_readADC& (0+255),b
 17262  0059A8  0EF1               	movlw	241
 17263  0059AA                     u11477:
 17264  0059AA  2EE8               	decfsz	wreg,f,c
 17265  0059AC  D7FE               	bra	u11477
 17266  0059AE  2F80               	decfsz	??_readADC& (0+255),f,b
 17267  0059B0  D7FC               	bra	u11477
 17268  0059B2  D000               	nop2	
 17269  0059B4                     l6566:
 17270  0059B4  A2C2               	btfss	4034,1,c	;volatile
 17271  0059B6  0012               	return	
 17272  0059B8  D7F4               	goto	l6564
 17273  0059BA                     __end_of_readADC:
 17274                           	opt stack 0
 17275                           tblptru	equ	0xFF8
 17276                           tblptrh	equ	0xFF7
 17277                           tblptrl	equ	0xFF6
 17278                           tablat	equ	0xFF5
 17279                           prodh	equ	0xFF4
 17280                           prodl	equ	0xFF3
 17281                           intcon	equ	0xFF2
 17282                           intcon2	equ	0xFF1
 17283                           intcon3	equ	0xFF0
 17284                           postinc0	equ	0xFEE
 17285                           wreg	equ	0xFE8
 17286                           postdec1	equ	0xFE5
 17287                           fsr1l	equ	0xFE1
 17288                           indf2	equ	0xFDF
 17289                           postinc2	equ	0xFDE
 17290                           postdec2	equ	0xFDD
 17291                           fsr2h	equ	0xFDA
 17292                           fsr2l	equ	0xFD9
 17293                           status	equ	0xFD8
 17294                           
 17295 ;; *************** function _printf *****************
 17296 ;; Defined at:
 17297 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17298 ;; Parameters:    Size  Location     Type
 17299 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17300 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 17301 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 17302 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 17303 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 17304 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 17305 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 17306 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 17307 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 17308 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 17309 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 17310 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 17311 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 17312 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 17313 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 17314 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 17315 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 17316 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 17317 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17318 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17319 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17320 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17321 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17322 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 17323 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 17324 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17325 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17326 ;;		 -> STR_1(18), 
 17327 ;; Auto vars:     Size  Location     Type
 17328 ;;  tmpval          4    0        struct .
 17329 ;;  width           2   41[BANK0 ] int 
 17330 ;;  val             2   37[BANK0 ] unsigned int 
 17331 ;;  len             2   35[BANK0 ] unsigned int 
 17332 ;;  ap              2   33[BANK0 ] PTR void [1]
 17333 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17334 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17335 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 17336 ;;		 -> printRTC@month(4), UI@month(4), 
 17337 ;;  c               1   40[BANK0 ] char 
 17338 ;;  flag            1   39[BANK0 ] unsigned char 
 17339 ;;  prec            1   30[BANK0 ] char 
 17340 ;; Return value:  Size  Location     Type
 17341 ;;                  2   14[BANK0 ] int 
 17342 ;; Registers used:
 17343 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17344 ;; Tracked objects:
 17345 ;;		On entry : 0/0
 17346 ;;		On exit  : 0/0
 17347 ;;		Unchanged: 0/0
 17348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17349 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17350 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17351 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17352 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17353 ;;Total ram usage:       29 bytes
 17354 ;; Hardware stack levels used:    1
 17355 ;; Hardware stack levels required when called:    9
 17356 ;; This function calls:
 17357 ;;		___lwdiv
 17358 ;;		___lwmod
 17359 ;;		___wmul
 17360 ;;		_isdigit
 17361 ;;		_putch
 17362 ;; This function is called by:
 17363 ;;		_UI
 17364 ;;		_change_state_to_menu_start
 17365 ;;		_change_state_to_menu_12
 17366 ;;		_change_state_to_menu_22
 17367 ;;		_printRTC
 17368 ;;		_ID
 17369 ;;		_EEPROM_write
 17370 ;;		_Test
 17371 ;;		_algorithmTest
 17372 ;;		_sensorTest
 17373 ;;		_actuatorTest
 17374 ;;		_BothServos
 17375 ;;		_PortTestDC
 17376 ;;		_PlatformTest
 17377 ;;		_SpeedTest
 17378 ;;		_BlockerTest
 17379 ;;		_arm
 17380 ;;		_PortTestPusher
 17381 ;;		_ToggleTestA5
 17382 ;; This function uses a non-reentrant model
 17383 ;;
 17384                           
 17385                           	psect	text56
 17386  001B1A                     __ptext56:
 17387                           	opt stack 0
 17388  001B1A                     _printf:
 17389                           	opt stack 18
 17390                           
 17391                           ;doprnt.c: 466: va_list ap;
 17392                           ;doprnt.c: 499: signed char c;
 17393                           ;doprnt.c: 501: int width;
 17394                           ;doprnt.c: 506: signed char prec;
 17395                           ;doprnt.c: 508: unsigned char flag;
 17396                           ;doprnt.c: 523: union {
 17397                           ;doprnt.c: 524: unsigned long vd;
 17398                           ;doprnt.c: 525: double integ;
 17399                           ;doprnt.c: 526: } tmpval;
 17400                           ;doprnt.c: 528: unsigned int val;
 17401                           ;doprnt.c: 529: unsigned len;
 17402                           ;doprnt.c: 530: const char * cp;
 17403                           ;doprnt.c: 533: *ap = __va_start();
 17404                           
 17405                           ;incstack = 0
 17406  001B1A  0E90               	movlw	low (?_printf+2)
 17407  001B1C  0100               	movlb	0	; () banked
 17408  001B1E  6FA1               	movwf	printf@ap& (0+255),b
 17409  001B20  0E00               	movlw	high (?_printf+2)
 17410  001B22  0100               	movlb	0	; () banked
 17411  001B24  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17412                           
 17413                           ;doprnt.c: 536: while(c = *f++) {
 17414  001B26  D205               	goto	l6888
 17415  001B28                     l6758:
 17416                           
 17417                           ; BSR set to: 0
 17418                           ;doprnt.c: 538: if(c != '%')
 17419  001B28  0E25               	movlw	37
 17420  001B2A  0100               	movlb	0	; () banked
 17421  001B2C  19A8               	xorwf	printf@c& (0+255),w,b
 17422  001B2E  B4D8               	btfsc	status,2,c
 17423  001B30  D005               	goto	l6762
 17424                           
 17425                           ; BSR set to: 0
 17426                           ;doprnt.c: 540: {
 17427                           ;doprnt.c: 541: (putch(c) );
 17428  001B32  0100               	movlb	0	; () banked
 17429  001B34  51A8               	movf	printf@c& (0+255),w,b
 17430  001B36  ECD4  F02D         	call	_putch
 17431                           
 17432                           ;doprnt.c: 542: continue;
 17433  001B3A  D1FB               	goto	l6888
 17434  001B3C                     l6762:
 17435                           
 17436                           ;doprnt.c: 543: }
 17437                           ;doprnt.c: 546: width = 0;
 17438  001B3C  0E00               	movlw	0
 17439  001B3E  0100               	movlb	0	; () banked
 17440  001B40  6FAA               	movwf	(printf@width+1)& (0+255),b
 17441  001B42  0E00               	movlw	0
 17442  001B44  6FA9               	movwf	printf@width& (0+255),b
 17443                           
 17444                           ;doprnt.c: 548: flag = 0;
 17445  001B46  0E00               	movlw	0
 17446  001B48  0100               	movlb	0	; () banked
 17447  001B4A  6FA7               	movwf	printf@flag& (0+255),b
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;doprnt.c: 551: switch(*f) {
 17451                           
 17452                           ;doprnt.c: 550: for(;;) {
 17453  001B4C  D005               	goto	l6768
 17454  001B4E                     l6764:
 17455                           
 17456                           ;doprnt.c: 580: flag |= 0x04;
 17457  001B4E  0100               	movlb	0	; () banked
 17458  001B50  85A7               	bsf	printf@flag& (0+255),2,b
 17459                           
 17460                           ;doprnt.c: 581: f++;
 17461  001B52  0100               	movlb	0	; () banked
 17462  001B54  4B8E               	infsnz	printf@f& (0+255),f,b
 17463  001B56  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17464  001B58                     l6768:
 17465  001B58  C08E  FFF6         	movff	printf@f,tblptrl
 17466  001B5C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17467  001B60                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17468  001B60  6AF8               	clrf	tblptru,c
 17469  001B62                     	endif
 17470  001B62                     	if	0	;tblptru may be non-zero
 17471  001B62                     	endif
 17472  001B62  0008               	tblrd		*
 17473  001B64  50F5               	movf	tablat,w,c
 17474                           
 17475                           ; Switch size 1, requested type "space"
 17476                           ; Number of cases is 1, Range of values is 48 to 48
 17477                           ; switch strategies available:
 17478                           ; Name         Instructions Cycles
 17479                           ; simple_byte            4     3 (average)
 17480                           ;	Chosen strategy is simple_byte
 17481  001B66  0A30               	xorlw	48	; case 48
 17482  001B68  B4D8               	btfsc	status,2,c
 17483  001B6A  D7F1               	goto	l6764
 17484                           
 17485                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17486                           
 17487                           ;doprnt.c: 586: }
 17488                           
 17489                           ;doprnt.c: 585: break;
 17490  001B6C  C08E  FFF6         	movff	printf@f,tblptrl
 17491  001B70  C08F  FFF7         	movff	printf@f+1,tblptrh
 17492  001B74                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17493  001B74  6AF8               	clrf	tblptru,c
 17494  001B76                     	endif
 17495  001B76                     	if	0	;tblptru may be non-zero
 17496  001B76                     	endif
 17497  001B76  0008               	tblrd		*
 17498  001B78  50F5               	movf	tablat,w,c
 17499  001B7A  ECDD  F02C         	call	_isdigit
 17500  001B7E  A0D8               	btfss	status,0,c
 17501  001B80  D0D2               	goto	l6816
 17502                           
 17503                           ;doprnt.c: 598: width = 0;
 17504  001B82  0E00               	movlw	0
 17505  001B84  0100               	movlb	0	; () banked
 17506  001B86  6FAA               	movwf	(printf@width+1)& (0+255),b
 17507  001B88  0E00               	movlw	0
 17508  001B8A  6FA9               	movwf	printf@width& (0+255),b
 17509  001B8C                     l6774:
 17510                           
 17511                           ;doprnt.c: 600: width *= 10;
 17512  001B8C  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17513  001B90  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17514  001B94  0E00               	movlw	0
 17515  001B96  0100               	movlb	0	; () banked
 17516  001B98  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17517  001B9A  0E0A               	movlw	10
 17518  001B9C  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17519  001B9E  EC46  F02B         	call	___wmul	;wreg free
 17520  001BA2  C080  F0A9         	movff	?___wmul,printf@width
 17521  001BA6  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17522                           
 17523                           ;doprnt.c: 601: width += *f++ - '0';
 17524  001BAA  0ED0               	movlw	208
 17525  001BAC  0100               	movlb	0	; () banked
 17526  001BAE  6F9A               	movwf	??_printf& (0+255),b
 17527  001BB0  0EFF               	movlw	255
 17528  001BB2  0100               	movlb	0	; () banked
 17529  001BB4  6F9B               	movwf	(??_printf+1)& (0+255),b
 17530  001BB6  C08E  FFF6         	movff	printf@f,tblptrl
 17531  001BBA  C08F  FFF7         	movff	printf@f+1,tblptrh
 17532  001BBE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17533  001BBE  6AF8               	clrf	tblptru,c
 17534  001BC0                     	endif
 17535  001BC0                     	if	0	;tblptru may be non-zero
 17536  001BC0                     	endif
 17537  001BC0  0008               	tblrd		*
 17538  001BC2  50F5               	movf	tablat,w,c
 17539  001BC4  0100               	movlb	0	; () banked
 17540  001BC6  6F9C               	movwf	(??_printf+2)& (0+255),b
 17541  001BC8  6B9D               	clrf	(??_printf+3)& (0+255),b
 17542  001BCA  0100               	movlb	0	; () banked
 17543  001BCC  519A               	movf	??_printf& (0+255),w,b
 17544  001BCE  0100               	movlb	0	; () banked
 17545  001BD0  279C               	addwf	(??_printf+2)& (0+255),f,b
 17546  001BD2  0100               	movlb	0	; () banked
 17547  001BD4  519B               	movf	(??_printf+1)& (0+255),w,b
 17548  001BD6  0100               	movlb	0	; () banked
 17549  001BD8  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17550  001BDA  0100               	movlb	0	; () banked
 17551  001BDC  519C               	movf	(??_printf+2)& (0+255),w,b
 17552  001BDE  0100               	movlb	0	; () banked
 17553  001BE0  27A9               	addwf	printf@width& (0+255),f,b
 17554  001BE2  0100               	movlb	0	; () banked
 17555  001BE4  519D               	movf	(??_printf+3)& (0+255),w,b
 17556  001BE6  0100               	movlb	0	; () banked
 17557  001BE8  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17558                           
 17559                           ; BSR set to: 0
 17560  001BEA  0100               	movlb	0	; () banked
 17561  001BEC  4B8E               	infsnz	printf@f& (0+255),f,b
 17562  001BEE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17563                           
 17564                           ; BSR set to: 0
 17565                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17566  001BF0  C08E  FFF6         	movff	printf@f,tblptrl
 17567  001BF4  C08F  FFF7         	movff	printf@f+1,tblptrh
 17568  001BF8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17569  001BF8  6AF8               	clrf	tblptru,c
 17570  001BFA                     	endif
 17571  001BFA                     	if	0	;tblptru may be non-zero
 17572  001BFA                     	endif
 17573  001BFA  0008               	tblrd		*
 17574  001BFC  50F5               	movf	tablat,w,c
 17575  001BFE  ECDD  F02C         	call	_isdigit
 17576  001C02  A0D8               	btfss	status,0,c
 17577  001C04  D090               	goto	l6816
 17578  001C06  D7C2               	goto	l6774
 17579  001C08                     l6782:
 17580                           
 17581                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17582  001C08  C0A1  FFD9         	movff	printf@ap,fsr2l
 17583  001C0C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17584  001C10  CFDE F09F          	movff	postinc2,printf@cp
 17585  001C14  CFDD F0A0          	movff	postdec2,printf@cp+1
 17586  001C18  0E02               	movlw	2
 17587  001C1A  0100               	movlb	0	; () banked
 17588  001C1C  27A1               	addwf	printf@ap& (0+255),f,b
 17589  001C1E  0E00               	movlw	0
 17590  001C20  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17591                           
 17592                           ; BSR set to: 0
 17593                           ;doprnt.c: 740: if(!cp)
 17594  001C22  0100               	movlb	0	; () banked
 17595  001C24  519F               	movf	printf@cp& (0+255),w,b
 17596  001C26  0100               	movlb	0	; () banked
 17597  001C28  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17598  001C2A  A4D8               	btfss	status,2,c
 17599  001C2C  D006               	goto	l6790
 17600                           
 17601                           ; BSR set to: 0
 17602                           ;doprnt.c: 741: cp = "(null)";
 17603  001C2E  0EB5               	movlw	low STR_131
 17604  001C30  0100               	movlb	0	; () banked
 17605  001C32  6F9F               	movwf	printf@cp& (0+255),b
 17606  001C34  0EFF               	movlw	high STR_131
 17607  001C36  0100               	movlb	0	; () banked
 17608  001C38  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17609  001C3A                     l6790:
 17610                           
 17611                           ; BSR set to: 0
 17612                           ;doprnt.c: 745: len = 0;
 17613  001C3A  0E00               	movlw	0
 17614  001C3C  0100               	movlb	0	; () banked
 17615  001C3E  6FA4               	movwf	(printf@len+1)& (0+255),b
 17616  001C40  0E00               	movlw	0
 17617  001C42  6FA3               	movwf	printf@len& (0+255),b
 17618                           
 17619                           ;doprnt.c: 746: while(cp[len])
 17620  001C44  D003               	goto	l6794
 17621  001C46                     l6792:
 17622                           
 17623                           ;doprnt.c: 747: len++;
 17624  001C46  0100               	movlb	0	; () banked
 17625  001C48  4BA3               	infsnz	printf@len& (0+255),f,b
 17626  001C4A  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17627  001C4C                     l6794:
 17628                           
 17629                           ; BSR set to: 0
 17630  001C4C  0100               	movlb	0	; () banked
 17631  001C4E  51A3               	movf	printf@len& (0+255),w,b
 17632  001C50  0100               	movlb	0	; () banked
 17633  001C52  259F               	addwf	printf@cp& (0+255),w,b
 17634  001C54  0100               	movlb	0	; () banked
 17635  001C56  6F9A               	movwf	??_printf& (0+255),b
 17636  001C58  0100               	movlb	0	; () banked
 17637  001C5A  51A4               	movf	(printf@len+1)& (0+255),w,b
 17638  001C5C  0100               	movlb	0	; () banked
 17639  001C5E  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17640  001C60  0100               	movlb	0	; () banked
 17641  001C62  6F9B               	movwf	(??_printf+1)& (0+255),b
 17642  001C64  C09A  FFF6         	movff	??_printf,tblptrl
 17643  001C68  C09B  FFF7         	movff	??_printf+1,tblptrh
 17644  001C6C  0E00               	movlw	low (__mediumconst shr (0+16))
 17645  001C6E  6EF8               	movwf	tblptru,c
 17646  001C70  0E0F               	movlw	(high __ramtop+-1)
 17647  001C72  64F7               	cpfsgt	tblptrh,c
 17648  001C74  D003               	bra	u5307
 17649  001C76  0008               	tblrd		*
 17650  001C78  50F5               	movf	tablat,w,c
 17651  001C7A  D005               	bra	u5300
 17652  001C7C                     u5307:
 17653  001C7C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17654  001C80  CFF7 FFEA          	movff	tblptrh,fsr0h
 17655  001C84  50EF               	movf	indf0,w,c
 17656  001C86                     u5300:
 17657  001C86  0900               	iorlw	0
 17658  001C88  A4D8               	btfss	status,2,c
 17659  001C8A  D7DD               	goto	l6792
 17660                           
 17661                           ;doprnt.c: 757: if(width > len)
 17662  001C8C  0100               	movlb	0	; () banked
 17663  001C8E  51A9               	movf	printf@width& (0+255),w,b
 17664  001C90  0100               	movlb	0	; () banked
 17665  001C92  5DA3               	subwf	printf@len& (0+255),w,b
 17666  001C94  0100               	movlb	0	; () banked
 17667  001C96  51AA               	movf	(printf@width+1)& (0+255),w,b
 17668  001C98  0100               	movlb	0	; () banked
 17669  001C9A  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17670  001C9C  B0D8               	btfsc	status,0,c
 17671  001C9E  D009               	goto	l6800
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;doprnt.c: 758: width -= len;
 17675  001CA0  0100               	movlb	0	; () banked
 17676  001CA2  51A3               	movf	printf@len& (0+255),w,b
 17677  001CA4  0100               	movlb	0	; () banked
 17678  001CA6  5FA9               	subwf	printf@width& (0+255),f,b
 17679  001CA8  0100               	movlb	0	; () banked
 17680  001CAA  51A4               	movf	(printf@len+1)& (0+255),w,b
 17681  001CAC  0100               	movlb	0	; () banked
 17682  001CAE  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17683  001CB0  D009               	goto	l6804
 17684  001CB2                     l6800:
 17685                           
 17686                           ; BSR set to: 0
 17687                           ;doprnt.c: 759: else
 17688                           ;doprnt.c: 760: width = 0;
 17689  001CB2  0E00               	movlw	0
 17690  001CB4  0100               	movlb	0	; () banked
 17691  001CB6  6FAA               	movwf	(printf@width+1)& (0+255),b
 17692  001CB8  0E00               	movlw	0
 17693  001CBA  6FA9               	movwf	printf@width& (0+255),b
 17694                           
 17695                           ; BSR set to: 0
 17696                           ;doprnt.c: 764: while(width--)
 17697  001CBC  D003               	goto	l6804
 17698  001CBE                     l6802:
 17699                           
 17700                           ; BSR set to: 0
 17701                           ;doprnt.c: 765: (putch(' ') );
 17702  001CBE  0E20               	movlw	32
 17703  001CC0  ECD4  F02D         	call	_putch
 17704  001CC4                     l6804:
 17705  001CC4  0100               	movlb	0	; () banked
 17706  001CC6  07A9               	decf	printf@width& (0+255),f,b
 17707  001CC8  A0D8               	btfss	status,0,c
 17708  001CCA  07AA               	decf	(printf@width+1)& (0+255),f,b
 17709  001CCC  0100               	movlb	0	; () banked
 17710  001CCE  29A9               	incf	printf@width& (0+255),w,b
 17711  001CD0  E1F6               	bnz	l6802
 17712  001CD2  0100               	movlb	0	; () banked
 17713  001CD4  29AA               	incf	(printf@width+1)& (0+255),w,b
 17714  001CD6  B4D8               	btfsc	status,2,c
 17715  001CD8  D017               	goto	l6810
 17716  001CDA  D7F1               	goto	l6802
 17717  001CDC                     l6806:
 17718                           
 17719                           ; BSR set to: 0
 17720                           ;doprnt.c: 768: (putch(*cp++) );
 17721  001CDC  C09F  FFF6         	movff	printf@cp,tblptrl
 17722  001CE0  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17723  001CE4  0E00               	movlw	low (__mediumconst shr (0+16))
 17724  001CE6  6EF8               	movwf	tblptru,c
 17725  001CE8  0E0F               	movlw	(high __ramtop+-1)
 17726  001CEA  64F7               	cpfsgt	tblptrh,c
 17727  001CEC  D003               	bra	u5347
 17728  001CEE  0008               	tblrd		*
 17729  001CF0  50F5               	movf	tablat,w,c
 17730  001CF2  D005               	bra	u5340
 17731  001CF4                     u5347:
 17732  001CF4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17733  001CF8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17734  001CFC  50EF               	movf	indf0,w,c
 17735  001CFE                     u5340:
 17736  001CFE  ECD4  F02D         	call	_putch
 17737  001D02  0100               	movlb	0	; () banked
 17738  001D04  4B9F               	infsnz	printf@cp& (0+255),f,b
 17739  001D06  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17740  001D08                     l6810:
 17741                           
 17742                           ; BSR set to: 0
 17743  001D08  0100               	movlb	0	; () banked
 17744  001D0A  07A3               	decf	printf@len& (0+255),f,b
 17745  001D0C  A0D8               	btfss	status,0,c
 17746  001D0E  07A4               	decf	(printf@len+1)& (0+255),f,b
 17747  001D10  0100               	movlb	0	; () banked
 17748  001D12  29A3               	incf	printf@len& (0+255),w,b
 17749  001D14  E1E3               	bnz	l6806
 17750  001D16  0100               	movlb	0	; () banked
 17751  001D18  29A4               	incf	(printf@len+1)& (0+255),w,b
 17752  001D1A  B4D8               	btfsc	status,2,c
 17753  001D1C  D10A               	goto	l6888
 17754  001D1E  D7DE               	goto	l6806
 17755  001D20                     l6812:
 17756                           
 17757                           ; BSR set to: 0
 17758                           ;doprnt.c: 818: flag |= 0x40;
 17759  001D20  0100               	movlb	0	; () banked
 17760  001D22  8DA7               	bsf	printf@flag& (0+255),6,b
 17761                           
 17762                           ; BSR set to: 0
 17763                           ;doprnt.c: 822: }
 17764                           
 17765                           ;doprnt.c: 819: break;
 17766  001D24  D01D               	goto	l1532
 17767  001D26                     l6816:
 17768  001D26  C08E  FFF6         	movff	printf@f,tblptrl
 17769  001D2A  C08F  FFF7         	movff	printf@f+1,tblptrh
 17770  001D2E  0100               	movlb	0	; () banked
 17771  001D30  4B8E               	infsnz	printf@f& (0+255),f,b
 17772  001D32  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17773  001D34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17774  001D34  6AF8               	clrf	tblptru,c
 17775  001D36                     	endif
 17776  001D36                     	if	0	;tblptru may be non-zero
 17777  001D36                     	endif
 17778  001D36  0008               	tblrd		*
 17779  001D38  CFF5 F0A8          	movff	tablat,printf@c
 17780  001D3C  0100               	movlb	0	; () banked
 17781  001D3E  51A8               	movf	printf@c& (0+255),w,b
 17782                           
 17783                           ; Switch size 1, requested type "space"
 17784                           ; Number of cases is 5, Range of values is 0 to 117
 17785                           ; switch strategies available:
 17786                           ; Name         Instructions Cycles
 17787                           ; simple_byte           16     9 (average)
 17788                           ;	Chosen strategy is simple_byte
 17789  001D40  0A00               	xorlw	0	; case 0
 17790  001D42  B4D8               	btfsc	status,2,c
 17791  001D44  0012               	return	
 17792  001D46  0A64               	xorlw	100	; case 100
 17793  001D48  B4D8               	btfsc	status,2,c
 17794  001D4A  D00A               	goto	l1532
 17795  001D4C  0A0D               	xorlw	13	; case 105
 17796  001D4E  B4D8               	btfsc	status,2,c
 17797  001D50  D007               	goto	l1532
 17798  001D52  0A1A               	xorlw	26	; case 115
 17799  001D54  B4D8               	btfsc	status,2,c
 17800  001D56  D758               	goto	l6782
 17801  001D58  0A06               	xorlw	6	; case 117
 17802  001D5A  B4D8               	btfsc	status,2,c
 17803  001D5C  D7E1               	goto	l6812
 17804  001D5E  D0E9               	goto	l6888
 17805  001D60                     l1532:
 17806                           
 17807                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17808  001D60  0100               	movlb	0	; () banked
 17809  001D62  BDA7               	btfsc	printf@flag& (0+255),6,b
 17810  001D64  D019               	goto	l6828
 17811                           
 17812                           ; BSR set to: 0
 17813                           ;doprnt.c: 1253: {
 17814                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17815  001D66  C0A1  FFD9         	movff	printf@ap,fsr2l
 17816  001D6A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17817  001D6E  CFDE F0A5          	movff	postinc2,printf@val
 17818  001D72  CFDD F0A6          	movff	postdec2,printf@val+1
 17819                           
 17820                           ; BSR set to: 0
 17821  001D76  0E02               	movlw	2
 17822  001D78  0100               	movlb	0	; () banked
 17823  001D7A  27A1               	addwf	printf@ap& (0+255),f,b
 17824  001D7C  0E00               	movlw	0
 17825  001D7E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17826                           
 17827                           ; BSR set to: 0
 17828                           ;doprnt.c: 1261: if((int)val < 0) {
 17829  001D80  0100               	movlb	0	; () banked
 17830  001D82  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17831  001D84  D016               	goto	l6832
 17832                           
 17833                           ; BSR set to: 0
 17834                           ;doprnt.c: 1262: flag |= 0x03;
 17835  001D86  0E03               	movlw	3
 17836  001D88  0100               	movlb	0	; () banked
 17837  001D8A  13A7               	iorwf	printf@flag& (0+255),f,b
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;doprnt.c: 1263: val = -val;
 17841  001D8C  0100               	movlb	0	; () banked
 17842  001D8E  6DA5               	negf	printf@val& (0+255),b
 17843  001D90  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17844  001D92  B0D8               	btfsc	status,0,c
 17845  001D94  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17846                           
 17847                           ; BSR set to: 0
 17848                           ;doprnt.c: 1264: }
 17849                           ;doprnt.c: 1266: }
 17850  001D96  D00D               	goto	l6832
 17851  001D98                     l6828:
 17852                           
 17853                           ; BSR set to: 0
 17854                           ;doprnt.c: 1268: else
 17855                           ;doprnt.c: 1273: {
 17856                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17857  001D98  C0A1  FFD9         	movff	printf@ap,fsr2l
 17858  001D9C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17859  001DA0  CFDE F0A5          	movff	postinc2,printf@val
 17860  001DA4  CFDD F0A6          	movff	postdec2,printf@val+1
 17861                           
 17862                           ; BSR set to: 0
 17863  001DA8  0E02               	movlw	2
 17864  001DAA  0100               	movlb	0	; () banked
 17865  001DAC  27A1               	addwf	printf@ap& (0+255),f,b
 17866  001DAE  0E00               	movlw	0
 17867  001DB0  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17868  001DB2                     l6832:
 17869                           
 17870                           ; BSR set to: 0
 17871                           ;doprnt.c: 1287: }
 17872                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17873  001DB2  0E01               	movlw	1
 17874  001DB4  0100               	movlb	0	; () banked
 17875  001DB6  6FA8               	movwf	printf@c& (0+255),b
 17876  001DB8                     l6834:
 17877                           
 17878                           ; BSR set to: 0
 17879  001DB8  0E05               	movlw	5
 17880  001DBA  0100               	movlb	0	; () banked
 17881  001DBC  19A8               	xorwf	printf@c& (0+255),w,b
 17882  001DBE  B4D8               	btfsc	status,2,c
 17883  001DC0  D019               	goto	l6846
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;doprnt.c: 1306: if(val < dpowers[c])
 17887                           
 17888                           ; BSR set to: 0
 17889                           
 17890                           ; BSR set to: 0
 17891  001DC2  0100               	movlb	0	; () banked
 17892  001DC4  51A8               	movf	printf@c& (0+255),w,b
 17893  001DC6  0D02               	mullw	2
 17894  001DC8  0E9C               	movlw	low _dpowers
 17895  001DCA  24F3               	addwf	prodl,w,c
 17896  001DCC  6EF6               	movwf	tblptrl,c
 17897  001DCE  0EFA               	movlw	high _dpowers
 17898  001DD0  20F4               	addwfc	prodh,w,c
 17899  001DD2  6EF7               	movwf	tblptrh,c
 17900  001DD4                     	if	1	;There are 3 active tblptr bytes
 17901  001DD4  6AF8               	clrf	tblptru,c
 17902  001DD6  0E00               	movlw	low (__mediumconst shr (0+16))
 17903  001DD8  22F8               	addwfc	tblptru,f,c
 17904  001DDA                     	endif
 17905  001DDA  0009               	tblrd		*+
 17906  001DDC  50F5               	movf	tablat,w,c
 17907  001DDE  0100               	movlb	0	; () banked
 17908  001DE0  5DA5               	subwf	printf@val& (0+255),w,b
 17909  001DE2  0009               	tblrd		*+
 17910  001DE4  50F5               	movf	tablat,w,c
 17911  001DE6  0100               	movlb	0	; () banked
 17912  001DE8  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 17913  001DEA  A0D8               	btfss	status,0,c
 17914  001DEC  D003               	goto	l6846
 17915                           
 17916                           ; BSR set to: 0
 17917                           
 17918                           ; BSR set to: 0
 17919                           
 17920                           ; BSR set to: 0
 17921                           ;doprnt.c: 1307: break;
 17922  001DEE  0100               	movlb	0	; () banked
 17923  001DF0  2BA8               	incf	printf@c& (0+255),f,b
 17924  001DF2  D7E2               	goto	l6834
 17925  001DF4                     l6846:
 17926                           
 17927                           ; BSR set to: 0
 17928                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17929  001DF4  0100               	movlb	0	; () banked
 17930  001DF6  51A9               	movf	printf@width& (0+255),w,b
 17931  001DF8  0100               	movlb	0	; () banked
 17932  001DFA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17933  001DFC  B4D8               	btfsc	status,2,c
 17934  001DFE  D00B               	goto	l6852
 17935                           
 17936                           ; BSR set to: 0
 17937  001E00  C0A7  F09A         	movff	printf@flag,??_printf
 17938  001E04  0E03               	movlw	3
 17939  001E06  0100               	movlb	0	; () banked
 17940  001E08  179A               	andwf	??_printf& (0+255),f,b
 17941  001E0A  B4D8               	btfsc	status,2,c
 17942  001E0C  D004               	goto	l6852
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;doprnt.c: 1346: width--;
 17946  001E0E  0100               	movlb	0	; () banked
 17947  001E10  07A9               	decf	printf@width& (0+255),f,b
 17948  001E12  A0D8               	btfss	status,0,c
 17949  001E14  07AA               	decf	(printf@width+1)& (0+255),f,b
 17950  001E16                     l6852:
 17951                           
 17952                           ; BSR set to: 0
 17953                           ;doprnt.c: 1381: if(width > c)
 17954  001E16  0E80               	movlw	128
 17955  001E18  0100               	movlb	0	; () banked
 17956  001E1A  BFA8               	btfsc	printf@c& (0+255),7,b
 17957  001E1C  0E7F               	movlw	127
 17958  001E1E  0100               	movlb	0	; () banked
 17959  001E20  6F9A               	movwf	??_printf& (0+255),b
 17960  001E22  0100               	movlb	0	; () banked
 17961  001E24  51A9               	movf	printf@width& (0+255),w,b
 17962  001E26  0100               	movlb	0	; () banked
 17963  001E28  5DA8               	subwf	printf@c& (0+255),w,b
 17964  001E2A  0100               	movlb	0	; () banked
 17965  001E2C  51AA               	movf	(printf@width+1)& (0+255),w,b
 17966  001E2E  0A80               	xorlw	128
 17967  001E30  0100               	movlb	0	; () banked
 17968  001E32  599A               	subwfb	??_printf& (0+255),w,b
 17969  001E34  B0D8               	btfsc	status,0,c
 17970  001E36  D00B               	goto	l6856
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;doprnt.c: 1382: width -= c;
 17974  001E38  0100               	movlb	0	; () banked
 17975  001E3A  51A8               	movf	printf@c& (0+255),w,b
 17976  001E3C  0100               	movlb	0	; () banked
 17977  001E3E  5FA9               	subwf	printf@width& (0+255),f,b
 17978  001E40  0E00               	movlw	0
 17979  001E42  0100               	movlb	0	; () banked
 17980  001E44  BFA8               	btfsc	printf@c& (0+255),7,b
 17981  001E46  0EFF               	movlw	255
 17982  001E48  0100               	movlb	0	; () banked
 17983  001E4A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17984  001E4C  D005               	goto	l6858
 17985  001E4E                     l6856:
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;doprnt.c: 1383: else
 17989                           ;doprnt.c: 1384: width = 0;
 17990  001E4E  0E00               	movlw	0
 17991  001E50  0100               	movlb	0	; () banked
 17992  001E52  6FAA               	movwf	(printf@width+1)& (0+255),b
 17993  001E54  0E00               	movlw	0
 17994  001E56  6FA9               	movwf	printf@width& (0+255),b
 17995  001E58                     l6858:
 17996                           
 17997                           ; BSR set to: 0
 17998                           ;doprnt.c: 1387: if(flag & 0x04) {
 17999  001E58  0100               	movlb	0	; () banked
 18000  001E5A  A5A7               	btfss	printf@flag& (0+255),2,b
 18001  001E5C  D018               	goto	l6870
 18002                           
 18003                           ; BSR set to: 0
 18004                           ;doprnt.c: 1392: if(flag & 0x03)
 18005  001E5E  C0A7  F09A         	movff	printf@flag,??_printf
 18006  001E62  0E03               	movlw	3
 18007  001E64  0100               	movlb	0	; () banked
 18008  001E66  179A               	andwf	??_printf& (0+255),f,b
 18009  001E68  B4D8               	btfsc	status,2,c
 18010  001E6A  D003               	goto	l6864
 18011                           
 18012                           ; BSR set to: 0
 18013                           ;doprnt.c: 1393: (putch('-') );
 18014  001E6C  0E2D               	movlw	45
 18015  001E6E  ECD4  F02D         	call	_putch
 18016  001E72                     l6864:
 18017                           
 18018                           ;doprnt.c: 1415: if(width)
 18019  001E72  0100               	movlb	0	; () banked
 18020  001E74  51A9               	movf	printf@width& (0+255),w,b
 18021  001E76  0100               	movlb	0	; () banked
 18022  001E78  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18023  001E7A  B4D8               	btfsc	status,2,c
 18024  001E7C  D025               	goto	l6880
 18025                           
 18026                           ; BSR set to: 0
 18027                           ;doprnt.c: 1417: (putch('0') );
 18028                           
 18029                           ; BSR set to: 0
 18030                           
 18031                           ;doprnt.c: 1416: do
 18032  001E7E  0E30               	movlw	48
 18033  001E80  ECD4  F02D         	call	_putch
 18034                           
 18035                           ;doprnt.c: 1418: while(--width);
 18036  001E84  0100               	movlb	0	; () banked
 18037  001E86  07A9               	decf	printf@width& (0+255),f,b
 18038  001E88  A0D8               	btfss	status,0,c
 18039  001E8A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18040  001E8C  D7F2               	goto	l6864
 18041  001E8E                     l6870:
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;doprnt.c: 1422: {
 18045                           ;doprnt.c: 1424: if(width
 18046                           ;doprnt.c: 1428: )
 18047  001E8E  0100               	movlb	0	; () banked
 18048  001E90  51A9               	movf	printf@width& (0+255),w,b
 18049  001E92  0100               	movlb	0	; () banked
 18050  001E94  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18051  001E96  B4D8               	btfsc	status,2,c
 18052  001E98  D00D               	goto	l6876
 18053  001E9A                     l6872:
 18054                           
 18055                           ; BSR set to: 0
 18056                           ;doprnt.c: 1430: (putch(' ') );
 18057  001E9A  0E20               	movlw	32
 18058  001E9C  ECD4  F02D         	call	_putch
 18059                           
 18060                           ;doprnt.c: 1431: while(--width);
 18061  001EA0  0100               	movlb	0	; () banked
 18062  001EA2  07A9               	decf	printf@width& (0+255),f,b
 18063  001EA4  A0D8               	btfss	status,0,c
 18064  001EA6  07AA               	decf	(printf@width+1)& (0+255),f,b
 18065  001EA8  0100               	movlb	0	; () banked
 18066  001EAA  51A9               	movf	printf@width& (0+255),w,b
 18067  001EAC  0100               	movlb	0	; () banked
 18068  001EAE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18069  001EB0  A4D8               	btfss	status,2,c
 18070  001EB2  D7F3               	goto	l6872
 18071  001EB4                     l6876:
 18072                           
 18073                           ; BSR set to: 0
 18074                           ;doprnt.c: 1438: if(flag & 0x03)
 18075  001EB4  C0A7  F09A         	movff	printf@flag,??_printf
 18076  001EB8  0E03               	movlw	3
 18077  001EBA  0100               	movlb	0	; () banked
 18078  001EBC  179A               	andwf	??_printf& (0+255),f,b
 18079  001EBE  B4D8               	btfsc	status,2,c
 18080  001EC0  D003               	goto	l6880
 18081                           
 18082                           ; BSR set to: 0
 18083                           ;doprnt.c: 1439: (putch('-') );
 18084  001EC2  0E2D               	movlw	45
 18085  001EC4  ECD4  F02D         	call	_putch
 18086  001EC8                     l6880:
 18087                           
 18088                           ;doprnt.c: 1469: }
 18089                           ;doprnt.c: 1472: prec = c;
 18090  001EC8  C0A8  F09E         	movff	printf@c,printf@prec
 18091                           
 18092                           ;doprnt.c: 1474: while(prec--) {
 18093  001ECC  D02C               	goto	l6886
 18094  001ECE                     l6882:
 18095                           
 18096                           ;doprnt.c: 1478: {
 18097                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18098  001ECE  0100               	movlb	0	; () banked
 18099  001ED0  519E               	movf	printf@prec& (0+255),w,b
 18100  001ED2  0D02               	mullw	2
 18101  001ED4  0E9C               	movlw	low _dpowers
 18102  001ED6  24F3               	addwf	prodl,w,c
 18103  001ED8  6EF6               	movwf	tblptrl,c
 18104  001EDA  0EFA               	movlw	high _dpowers
 18105  001EDC  20F4               	addwfc	prodh,w,c
 18106  001EDE  6EF7               	movwf	tblptrh,c
 18107  001EE0                     	if	1	;There are 3 active tblptr bytes
 18108  001EE0  6AF8               	clrf	tblptru,c
 18109  001EE2  0E00               	movlw	low (__mediumconst shr (0+16))
 18110  001EE4  22F8               	addwfc	tblptru,f,c
 18111  001EE6                     	endif
 18112  001EE6  0009               	tblrd		*+
 18113  001EE8  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18114  001EEC  000A               	tblrd		*-
 18115  001EEE  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18116  001EF2  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18117  001EF6  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18118  001EFA  EC42  F027         	call	___lwdiv	;wreg free
 18119  001EFE  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18120  001F02  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18121  001F06  0E00               	movlw	0
 18122  001F08  0100               	movlb	0	; () banked
 18123  001F0A  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18124  001F0C  0E0A               	movlw	10
 18125  001F0E  6F89               	movwf	___lwmod@divisor& (0+255),b
 18126  001F10  ECC4  F028         	call	___lwmod	;wreg free
 18127  001F14  0100               	movlb	0	; () banked
 18128  001F16  5187               	movf	?___lwmod& (0+255),w,b
 18129  001F18  0F30               	addlw	48
 18130  001F1A  0100               	movlb	0	; () banked
 18131  001F1C  6FA8               	movwf	printf@c& (0+255),b
 18132                           
 18133                           ; BSR set to: 0
 18134                           ;doprnt.c: 1523: }
 18135                           ;doprnt.c: 1524: (putch(c) );
 18136  001F1E  0100               	movlb	0	; () banked
 18137  001F20  51A8               	movf	printf@c& (0+255),w,b
 18138  001F22  ECD4  F02D         	call	_putch
 18139  001F26                     l6886:
 18140  001F26  0100               	movlb	0	; () banked
 18141  001F28  079E               	decf	printf@prec& (0+255),f,b
 18142  001F2A  0100               	movlb	0	; () banked
 18143  001F2C  299E               	incf	printf@prec& (0+255),w,b
 18144  001F2E  A4D8               	btfss	status,2,c
 18145  001F30  D7CE               	goto	l6882
 18146  001F32                     l6888:
 18147  001F32  C08E  FFF6         	movff	printf@f,tblptrl
 18148  001F36  C08F  FFF7         	movff	printf@f+1,tblptrh
 18149  001F3A  0100               	movlb	0	; () banked
 18150  001F3C  4B8E               	infsnz	printf@f& (0+255),f,b
 18151  001F3E  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18152  001F40                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18153  001F40  6AF8               	clrf	tblptru,c
 18154  001F42                     	endif
 18155  001F42                     	if	0	;tblptru may be non-zero
 18156  001F42                     	endif
 18157  001F42  0008               	tblrd		*
 18158  001F44  CFF5 F0A8          	movff	tablat,printf@c
 18159  001F48  0100               	movlb	0	; () banked
 18160  001F4A  51A8               	movf	printf@c& (0+255),w,b
 18161  001F4C  B4D8               	btfsc	status,2,c
 18162  001F4E  0012               	return	
 18163  001F50  D5EB               	goto	l6758
 18164  001F52                     __end_of_printf:
 18165                           	opt stack 0
 18166                           tblptru	equ	0xFF8
 18167                           tblptrh	equ	0xFF7
 18168                           tblptrl	equ	0xFF6
 18169                           tablat	equ	0xFF5
 18170                           prodh	equ	0xFF4
 18171                           prodl	equ	0xFF3
 18172                           intcon	equ	0xFF2
 18173                           intcon2	equ	0xFF1
 18174                           intcon3	equ	0xFF0
 18175                           indf0	equ	0xFEF
 18176                           postinc0	equ	0xFEE
 18177                           fsr0h	equ	0xFEA
 18178                           fsr0l	equ	0xFE9
 18179                           wreg	equ	0xFE8
 18180                           postdec1	equ	0xFE5
 18181                           fsr1l	equ	0xFE1
 18182                           indf2	equ	0xFDF
 18183                           postinc2	equ	0xFDE
 18184                           postdec2	equ	0xFDD
 18185                           fsr2h	equ	0xFDA
 18186                           fsr2l	equ	0xFD9
 18187                           status	equ	0xFD8
 18188                           
 18189 ;; *************** function _putch *****************
 18190 ;; Defined at:
 18191 ;;		line 20 in file "lcd.c"
 18192 ;; Parameters:    Size  Location     Type
 18193 ;;  data            1    wreg     unsigned char 
 18194 ;; Auto vars:     Size  Location     Type
 18195 ;;  data            1    2[BANK0 ] unsigned char 
 18196 ;; Return value:  Size  Location     Type
 18197 ;;                  1    wreg      void 
 18198 ;; Registers used:
 18199 ;;		wreg, status,2, status,0, cstack
 18200 ;; Tracked objects:
 18201 ;;		On entry : 0/0
 18202 ;;		On exit  : 0/0
 18203 ;;		Unchanged: 0/0
 18204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18208 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18209 ;;Total ram usage:        1 bytes
 18210 ;; Hardware stack levels used:    1
 18211 ;; Hardware stack levels required when called:    8
 18212 ;; This function calls:
 18213 ;;		_lcdNibble
 18214 ;; This function is called by:
 18215 ;;		_printf
 18216 ;; This function uses a non-reentrant model
 18217 ;;
 18218                           
 18219                           	psect	text57
 18220  005BA8                     __ptext57:
 18221                           	opt stack 0
 18222  005BA8                     _putch:
 18223                           	opt stack 18
 18224                           
 18225                           ;incstack = 0
 18226                           ;putch@data stored from wreg
 18227  005BA8  0100               	movlb	0	; () banked
 18228  005BAA  6F82               	movwf	putch@data& (0+255),b
 18229                           
 18230                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18231  005BAC  848C               	bsf	3980,2,c	;volatile
 18232                           
 18233                           ;lcd.c: 22: lcdNibble(data);
 18234  005BAE  0100               	movlb	0	; () banked
 18235  005BB0  5182               	movf	putch@data& (0+255),w,b
 18236  005BB2  EC28  F028         	call	_lcdNibble
 18237  005BB6  0012               	return		;funcret
 18238  005BB8                     __end_of_putch:
 18239                           	opt stack 0
 18240                           tblptru	equ	0xFF8
 18241                           tblptrh	equ	0xFF7
 18242                           tblptrl	equ	0xFF6
 18243                           tablat	equ	0xFF5
 18244                           prodh	equ	0xFF4
 18245                           prodl	equ	0xFF3
 18246                           intcon	equ	0xFF2
 18247                           intcon2	equ	0xFF1
 18248                           intcon3	equ	0xFF0
 18249                           indf0	equ	0xFEF
 18250                           postinc0	equ	0xFEE
 18251                           fsr0h	equ	0xFEA
 18252                           fsr0l	equ	0xFE9
 18253                           wreg	equ	0xFE8
 18254                           postdec1	equ	0xFE5
 18255                           fsr1l	equ	0xFE1
 18256                           indf2	equ	0xFDF
 18257                           postinc2	equ	0xFDE
 18258                           postdec2	equ	0xFDD
 18259                           fsr2h	equ	0xFDA
 18260                           fsr2l	equ	0xFD9
 18261                           status	equ	0xFD8
 18262                           
 18263 ;; *************** function _isdigit *****************
 18264 ;; Defined at:
 18265 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18266 ;; Parameters:    Size  Location     Type
 18267 ;;  c               1    wreg     unsigned char 
 18268 ;; Auto vars:     Size  Location     Type
 18269 ;;  c               1    2[BANK0 ] unsigned char 
 18270 ;; Return value:  Size  Location     Type
 18271 ;;		None               void
 18272 ;; Registers used:
 18273 ;;		wreg, status,2, status,0
 18274 ;; Tracked objects:
 18275 ;;		On entry : 0/0
 18276 ;;		On exit  : 0/0
 18277 ;;		Unchanged: 0/0
 18278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18280 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18281 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18282 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18283 ;;Total ram usage:        3 bytes
 18284 ;; Hardware stack levels used:    1
 18285 ;; Hardware stack levels required when called:    7
 18286 ;; This function calls:
 18287 ;;		Nothing
 18288 ;; This function is called by:
 18289 ;;		_printf
 18290 ;; This function uses a non-reentrant model
 18291 ;;
 18292                           
 18293                           	psect	text58
 18294  0059BA                     __ptext58:
 18295                           	opt stack 0
 18296  0059BA                     _isdigit:
 18297                           	opt stack 19
 18298                           
 18299                           ;incstack = 0
 18300                           ;isdigit@c stored from wreg
 18301  0059BA  0100               	movlb	0	; () banked
 18302  0059BC  6F82               	movwf	isdigit@c& (0+255),b
 18303  0059BE  0E00               	movlw	0
 18304  0059C0  0100               	movlb	0	; () banked
 18305  0059C2  6F81               	movwf	_isdigit$2069& (0+255),b
 18306                           
 18307                           ; BSR set to: 0
 18308  0059C4  0E3A               	movlw	58
 18309  0059C6  0100               	movlb	0	; () banked
 18310  0059C8  6182               	cpfslt	isdigit@c& (0+255),b
 18311  0059CA  D007               	goto	l6606
 18312                           
 18313                           ; BSR set to: 0
 18314  0059CC  0E2F               	movlw	47
 18315  0059CE  0100               	movlb	0	; () banked
 18316  0059D0  6582               	cpfsgt	isdigit@c& (0+255),b
 18317  0059D2  D003               	goto	l6606
 18318                           
 18319                           ; BSR set to: 0
 18320  0059D4  0E01               	movlw	1
 18321  0059D6  0100               	movlb	0	; () banked
 18322  0059D8  6F81               	movwf	_isdigit$2069& (0+255),b
 18323  0059DA                     l6606:
 18324                           
 18325                           ; BSR set to: 0
 18326  0059DA  C081  F080         	movff	_isdigit$2069,??_isdigit
 18327  0059DE  0100               	movlb	0	; () banked
 18328  0059E0  3180               	rrcf	??_isdigit& (0+255),w,b
 18329  0059E2  0012               	return	
 18330  0059E4                     __end_of_isdigit:
 18331                           	opt stack 0
 18332                           tblptru	equ	0xFF8
 18333                           tblptrh	equ	0xFF7
 18334                           tblptrl	equ	0xFF6
 18335                           tablat	equ	0xFF5
 18336                           prodh	equ	0xFF4
 18337                           prodl	equ	0xFF3
 18338                           intcon	equ	0xFF2
 18339                           intcon2	equ	0xFF1
 18340                           intcon3	equ	0xFF0
 18341                           indf0	equ	0xFEF
 18342                           postinc0	equ	0xFEE
 18343                           fsr0h	equ	0xFEA
 18344                           fsr0l	equ	0xFE9
 18345                           wreg	equ	0xFE8
 18346                           postdec1	equ	0xFE5
 18347                           fsr1l	equ	0xFE1
 18348                           indf2	equ	0xFDF
 18349                           postinc2	equ	0xFDE
 18350                           postdec2	equ	0xFDD
 18351                           fsr2h	equ	0xFDA
 18352                           fsr2l	equ	0xFD9
 18353                           status	equ	0xFD8
 18354                           
 18355 ;; *************** function ___wmul *****************
 18356 ;; Defined at:
 18357 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18358 ;; Parameters:    Size  Location     Type
 18359 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18360 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18361 ;; Auto vars:     Size  Location     Type
 18362 ;;  product         2    4[BANK0 ] unsigned int 
 18363 ;; Return value:  Size  Location     Type
 18364 ;;                  2    0[BANK0 ] unsigned int 
 18365 ;; Registers used:
 18366 ;;		wreg, status,2, status,0, prodl, prodh
 18367 ;; Tracked objects:
 18368 ;;		On entry : 0/0
 18369 ;;		On exit  : 0/0
 18370 ;;		Unchanged: 0/0
 18371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18372 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18373 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18375 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18376 ;;Total ram usage:        6 bytes
 18377 ;; Hardware stack levels used:    1
 18378 ;; Hardware stack levels required when called:    7
 18379 ;; This function calls:
 18380 ;;		Nothing
 18381 ;; This function is called by:
 18382 ;;		_printf
 18383 ;; This function uses a non-reentrant model
 18384 ;;
 18385                           
 18386                           	psect	text59
 18387  00568C                     __ptext59:
 18388                           	opt stack 0
 18389  00568C                     ___wmul:
 18390                           	opt stack 19
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;incstack = 0
 18394  00568C  0100               	movlb	0	; () banked
 18395  00568E  5180               	movf	___wmul@multiplier& (0+255),w,b
 18396  005690  0100               	movlb	0	; () banked
 18397  005692  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18398  005694  CFF3 F084          	movff	prodl,___wmul@product
 18399  005698  CFF4 F085          	movff	prodh,___wmul@product+1
 18400  00569C  0100               	movlb	0	; () banked
 18401  00569E  5180               	movf	___wmul@multiplier& (0+255),w,b
 18402  0056A0  0100               	movlb	0	; () banked
 18403  0056A2  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18404  0056A4  50F3               	movf	prodl,w,c
 18405  0056A6  0100               	movlb	0	; () banked
 18406  0056A8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18407  0056AA  0100               	movlb	0	; () banked
 18408  0056AC  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18409  0056AE  0100               	movlb	0	; () banked
 18410  0056B0  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18411  0056B2  50F3               	movf	prodl,w,c
 18412  0056B4  0100               	movlb	0	; () banked
 18413  0056B6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18414                           
 18415                           ; BSR set to: 0
 18416  0056B8  C084  F080         	movff	___wmul@product,?___wmul
 18417  0056BC  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18418  0056C0  0012               	return	
 18419  0056C2                     __end_of___wmul:
 18420                           	opt stack 0
 18421                           tblptru	equ	0xFF8
 18422                           tblptrh	equ	0xFF7
 18423                           tblptrl	equ	0xFF6
 18424                           tablat	equ	0xFF5
 18425                           prodh	equ	0xFF4
 18426                           prodl	equ	0xFF3
 18427                           intcon	equ	0xFF2
 18428                           intcon2	equ	0xFF1
 18429                           intcon3	equ	0xFF0
 18430                           indf0	equ	0xFEF
 18431                           postinc0	equ	0xFEE
 18432                           fsr0h	equ	0xFEA
 18433                           fsr0l	equ	0xFE9
 18434                           wreg	equ	0xFE8
 18435                           postdec1	equ	0xFE5
 18436                           fsr1l	equ	0xFE1
 18437                           indf2	equ	0xFDF
 18438                           postinc2	equ	0xFDE
 18439                           postdec2	equ	0xFDD
 18440                           fsr2h	equ	0xFDA
 18441                           fsr2l	equ	0xFD9
 18442                           status	equ	0xFD8
 18443                           
 18444 ;; *************** function ___lwmod *****************
 18445 ;; Defined at:
 18446 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18447 ;; Parameters:    Size  Location     Type
 18448 ;;  dividend        2    7[BANK0 ] unsigned int 
 18449 ;;  divisor         2    9[BANK0 ] unsigned int 
 18450 ;; Auto vars:     Size  Location     Type
 18451 ;;  counter         1   11[BANK0 ] unsigned char 
 18452 ;; Return value:  Size  Location     Type
 18453 ;;                  2    7[BANK0 ] unsigned int 
 18454 ;; Registers used:
 18455 ;;		wreg, status,2, status,0
 18456 ;; Tracked objects:
 18457 ;;		On entry : 0/0
 18458 ;;		On exit  : 0/0
 18459 ;;		Unchanged: 0/0
 18460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18461 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18464 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18465 ;;Total ram usage:        5 bytes
 18466 ;; Hardware stack levels used:    1
 18467 ;; Hardware stack levels required when called:    7
 18468 ;; This function calls:
 18469 ;;		Nothing
 18470 ;; This function is called by:
 18471 ;;		_printf
 18472 ;; This function uses a non-reentrant model
 18473 ;;
 18474                           
 18475                           	psect	text60
 18476  005188                     __ptext60:
 18477                           	opt stack 0
 18478  005188                     ___lwmod:
 18479                           	opt stack 19
 18480                           
 18481                           ; BSR set to: 0
 18482                           ;incstack = 0
 18483  005188  0100               	movlb	0	; () banked
 18484  00518A  5189               	movf	___lwmod@divisor& (0+255),w,b
 18485  00518C  0100               	movlb	0	; () banked
 18486  00518E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18487  005190  B4D8               	btfsc	status,2,c
 18488  005192  D026               	goto	l1989
 18489                           
 18490                           ; BSR set to: 0
 18491  005194  0E01               	movlw	1
 18492  005196  0100               	movlb	0	; () banked
 18493  005198  6F8B               	movwf	___lwmod@counter& (0+255),b
 18494  00519A  D006               	goto	l6644
 18495  00519C                     l6642:
 18496                           
 18497                           ; BSR set to: 0
 18498  00519C  0100               	movlb	0	; () banked
 18499  00519E  90D8               	bcf	status,0,c
 18500  0051A0  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18501  0051A2  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18502  0051A4  0100               	movlb	0	; () banked
 18503  0051A6  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18504  0051A8                     l6644:
 18505                           
 18506                           ; BSR set to: 0
 18507  0051A8  0100               	movlb	0	; () banked
 18508  0051AA  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18509  0051AC  D7F7               	goto	l6642
 18510  0051AE                     l6646:
 18511                           
 18512                           ; BSR set to: 0
 18513  0051AE  0100               	movlb	0	; () banked
 18514  0051B0  5189               	movf	___lwmod@divisor& (0+255),w,b
 18515  0051B2  0100               	movlb	0	; () banked
 18516  0051B4  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18517  0051B6  0100               	movlb	0	; () banked
 18518  0051B8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18519  0051BA  0100               	movlb	0	; () banked
 18520  0051BC  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18521  0051BE  A0D8               	btfss	status,0,c
 18522  0051C0  D008               	goto	l6650
 18523                           
 18524                           ; BSR set to: 0
 18525  0051C2  0100               	movlb	0	; () banked
 18526  0051C4  5189               	movf	___lwmod@divisor& (0+255),w,b
 18527  0051C6  0100               	movlb	0	; () banked
 18528  0051C8  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18529  0051CA  0100               	movlb	0	; () banked
 18530  0051CC  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18531  0051CE  0100               	movlb	0	; () banked
 18532  0051D0  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18533  0051D2                     l6650:
 18534                           
 18535                           ; BSR set to: 0
 18536  0051D2  0100               	movlb	0	; () banked
 18537  0051D4  90D8               	bcf	status,0,c
 18538  0051D6  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18539  0051D8  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18540                           
 18541                           ; BSR set to: 0
 18542  0051DA  0100               	movlb	0	; () banked
 18543  0051DC  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18544  0051DE  D7E7               	goto	l6646
 18545  0051E0                     l1989:
 18546                           
 18547                           ; BSR set to: 0
 18548  0051E0  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18549  0051E4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18550                           
 18551                           ; BSR set to: 0
 18552  0051E8  0012               	return		;funcret
 18553  0051EA                     __end_of___lwmod:
 18554                           	opt stack 0
 18555                           tblptru	equ	0xFF8
 18556                           tblptrh	equ	0xFF7
 18557                           tblptrl	equ	0xFF6
 18558                           tablat	equ	0xFF5
 18559                           prodh	equ	0xFF4
 18560                           prodl	equ	0xFF3
 18561                           intcon	equ	0xFF2
 18562                           intcon2	equ	0xFF1
 18563                           intcon3	equ	0xFF0
 18564                           indf0	equ	0xFEF
 18565                           postinc0	equ	0xFEE
 18566                           fsr0h	equ	0xFEA
 18567                           fsr0l	equ	0xFE9
 18568                           wreg	equ	0xFE8
 18569                           postdec1	equ	0xFE5
 18570                           fsr1l	equ	0xFE1
 18571                           indf2	equ	0xFDF
 18572                           postinc2	equ	0xFDE
 18573                           postdec2	equ	0xFDD
 18574                           fsr2h	equ	0xFDA
 18575                           fsr2l	equ	0xFD9
 18576                           status	equ	0xFD8
 18577                           
 18578 ;; *************** function ___lwdiv *****************
 18579 ;; Defined at:
 18580 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18581 ;; Parameters:    Size  Location     Type
 18582 ;;  dividend        2    0[BANK0 ] unsigned int 
 18583 ;;  divisor         2    2[BANK0 ] unsigned int 
 18584 ;; Auto vars:     Size  Location     Type
 18585 ;;  quotient        2    4[BANK0 ] unsigned int 
 18586 ;;  counter         1    6[BANK0 ] unsigned char 
 18587 ;; Return value:  Size  Location     Type
 18588 ;;                  2    0[BANK0 ] unsigned int 
 18589 ;; Registers used:
 18590 ;;		wreg, status,2, status,0
 18591 ;; Tracked objects:
 18592 ;;		On entry : 0/0
 18593 ;;		On exit  : 0/0
 18594 ;;		Unchanged: 0/0
 18595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18596 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18597 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18599 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18600 ;;Total ram usage:        7 bytes
 18601 ;; Hardware stack levels used:    1
 18602 ;; Hardware stack levels required when called:    7
 18603 ;; This function calls:
 18604 ;;		Nothing
 18605 ;; This function is called by:
 18606 ;;		_printf
 18607 ;; This function uses a non-reentrant model
 18608 ;;
 18609                           
 18610                           	psect	text61
 18611  004E84                     __ptext61:
 18612                           	opt stack 0
 18613  004E84                     ___lwdiv:
 18614                           	opt stack 19
 18615                           
 18616                           ; BSR set to: 0
 18617                           ;incstack = 0
 18618  004E84  0E00               	movlw	0
 18619  004E86  0100               	movlb	0	; () banked
 18620  004E88  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18621  004E8A  0E00               	movlw	0
 18622  004E8C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18623                           
 18624                           ; BSR set to: 0
 18625  004E8E  0100               	movlb	0	; () banked
 18626  004E90  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18627  004E92  0100               	movlb	0	; () banked
 18628  004E94  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18629  004E96  B4D8               	btfsc	status,2,c
 18630  004E98  D02C               	goto	l1979
 18631                           
 18632                           ; BSR set to: 0
 18633  004E9A  0E01               	movlw	1
 18634  004E9C  0100               	movlb	0	; () banked
 18635  004E9E  6F86               	movwf	___lwdiv@counter& (0+255),b
 18636  004EA0  D006               	goto	l6624
 18637  004EA2                     l6622:
 18638                           
 18639                           ; BSR set to: 0
 18640  004EA2  0100               	movlb	0	; () banked
 18641  004EA4  90D8               	bcf	status,0,c
 18642  004EA6  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18643  004EA8  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18644  004EAA  0100               	movlb	0	; () banked
 18645  004EAC  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18646  004EAE                     l6624:
 18647                           
 18648                           ; BSR set to: 0
 18649  004EAE  0100               	movlb	0	; () banked
 18650  004EB0  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18651  004EB2  D7F7               	goto	l6622
 18652  004EB4                     l6626:
 18653                           
 18654                           ; BSR set to: 0
 18655  004EB4  0100               	movlb	0	; () banked
 18656  004EB6  90D8               	bcf	status,0,c
 18657  004EB8  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18658  004EBA  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18659                           
 18660                           ; BSR set to: 0
 18661  004EBC  0100               	movlb	0	; () banked
 18662  004EBE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18663  004EC0  0100               	movlb	0	; () banked
 18664  004EC2  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18665  004EC4  0100               	movlb	0	; () banked
 18666  004EC6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18667  004EC8  0100               	movlb	0	; () banked
 18668  004ECA  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18669  004ECC  A0D8               	btfss	status,0,c
 18670  004ECE  D00A               	goto	l6634
 18671                           
 18672                           ; BSR set to: 0
 18673  004ED0  0100               	movlb	0	; () banked
 18674  004ED2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18675  004ED4  0100               	movlb	0	; () banked
 18676  004ED6  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18677  004ED8  0100               	movlb	0	; () banked
 18678  004EDA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18679  004EDC  0100               	movlb	0	; () banked
 18680  004EDE  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18681                           
 18682                           ; BSR set to: 0
 18683  004EE0  0100               	movlb	0	; () banked
 18684  004EE2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18685  004EE4                     l6634:
 18686                           
 18687                           ; BSR set to: 0
 18688  004EE4  0100               	movlb	0	; () banked
 18689  004EE6  90D8               	bcf	status,0,c
 18690  004EE8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18691  004EEA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18692                           
 18693                           ; BSR set to: 0
 18694  004EEC  0100               	movlb	0	; () banked
 18695  004EEE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18696  004EF0  D7E1               	goto	l6626
 18697  004EF2                     l1979:
 18698                           
 18699                           ; BSR set to: 0
 18700  004EF2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18701  004EF6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18702                           
 18703                           ; BSR set to: 0
 18704  004EFA  0012               	return		;funcret
 18705  004EFC                     __end_of___lwdiv:
 18706                           	opt stack 0
 18707                           tblptru	equ	0xFF8
 18708                           tblptrh	equ	0xFF7
 18709                           tblptrl	equ	0xFF6
 18710                           tablat	equ	0xFF5
 18711                           prodh	equ	0xFF4
 18712                           prodl	equ	0xFF3
 18713                           intcon	equ	0xFF2
 18714                           intcon2	equ	0xFF1
 18715                           intcon3	equ	0xFF0
 18716                           indf0	equ	0xFEF
 18717                           postinc0	equ	0xFEE
 18718                           fsr0h	equ	0xFEA
 18719                           fsr0l	equ	0xFE9
 18720                           wreg	equ	0xFE8
 18721                           postdec1	equ	0xFE5
 18722                           fsr1l	equ	0xFE1
 18723                           indf2	equ	0xFDF
 18724                           postinc2	equ	0xFDE
 18725                           postdec2	equ	0xFDD
 18726                           fsr2h	equ	0xFDA
 18727                           fsr2l	equ	0xFD9
 18728                           status	equ	0xFD8
 18729                           
 18730 ;; *************** function _lcdInst *****************
 18731 ;; Defined at:
 18732 ;;		line 15 in file "lcd.c"
 18733 ;; Parameters:    Size  Location     Type
 18734 ;;  data            1    wreg     unsigned char 
 18735 ;; Auto vars:     Size  Location     Type
 18736 ;;  data            1    2[BANK0 ] unsigned char 
 18737 ;; Return value:  Size  Location     Type
 18738 ;;                  1    wreg      void 
 18739 ;; Registers used:
 18740 ;;		wreg, status,2, status,0, cstack
 18741 ;; Tracked objects:
 18742 ;;		On entry : 0/0
 18743 ;;		On exit  : 0/0
 18744 ;;		Unchanged: 0/0
 18745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18747 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18749 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18750 ;;Total ram usage:        1 bytes
 18751 ;; Hardware stack levels used:    1
 18752 ;; Hardware stack levels required when called:    8
 18753 ;; This function calls:
 18754 ;;		_lcdNibble
 18755 ;; This function is called by:
 18756 ;;		_UI
 18757 ;;		_change_state_to_menu_start
 18758 ;;		_change_state_to_menu_12
 18759 ;;		_change_state_to_menu_22
 18760 ;;		_initLCD
 18761 ;;		_printRTC
 18762 ;;		_Loading
 18763 ;;		_ID
 18764 ;;		_EEPROM_write
 18765 ;;		_Test
 18766 ;;		_algorithmTest
 18767 ;;		_sensorTest
 18768 ;;		_actuatorTest
 18769 ;;		_BothServos
 18770 ;;		_PortTestDC
 18771 ;;		_PlatformTest
 18772 ;;		_SpeedTest
 18773 ;;		_BlockerTest
 18774 ;;		_arm
 18775 ;;		_PortTestPusher
 18776 ;;		_ToggleTestA5
 18777 ;; This function uses a non-reentrant model
 18778 ;;
 18779                           
 18780                           	psect	text62
 18781  005BB8                     __ptext62:
 18782                           	opt stack 0
 18783  005BB8                     _lcdInst:
 18784                           	opt stack 20
 18785                           
 18786                           ; BSR set to: 0
 18787                           ;incstack = 0
 18788                           ;lcdInst@data stored from wreg
 18789  005BB8  0100               	movlb	0	; () banked
 18790  005BBA  6F82               	movwf	lcdInst@data& (0+255),b
 18791                           
 18792                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18793  005BBC  948C               	bcf	3980,2,c	;volatile
 18794                           
 18795                           ;lcd.c: 17: lcdNibble(data);
 18796  005BBE  0100               	movlb	0	; () banked
 18797  005BC0  5182               	movf	lcdInst@data& (0+255),w,b
 18798  005BC2  EC28  F028         	call	_lcdNibble
 18799  005BC6  0012               	return		;funcret
 18800  005BC8                     __end_of_lcdInst:
 18801                           	opt stack 0
 18802                           tblptru	equ	0xFF8
 18803                           tblptrh	equ	0xFF7
 18804                           tblptrl	equ	0xFF6
 18805                           tablat	equ	0xFF5
 18806                           prodh	equ	0xFF4
 18807                           prodl	equ	0xFF3
 18808                           intcon	equ	0xFF2
 18809                           intcon2	equ	0xFF1
 18810                           intcon3	equ	0xFF0
 18811                           indf0	equ	0xFEF
 18812                           postinc0	equ	0xFEE
 18813                           fsr0h	equ	0xFEA
 18814                           fsr0l	equ	0xFE9
 18815                           wreg	equ	0xFE8
 18816                           postdec1	equ	0xFE5
 18817                           fsr1l	equ	0xFE1
 18818                           indf2	equ	0xFDF
 18819                           postinc2	equ	0xFDE
 18820                           postdec2	equ	0xFDD
 18821                           fsr2h	equ	0xFDA
 18822                           fsr2l	equ	0xFD9
 18823                           status	equ	0xFD8
 18824                           
 18825 ;; *************** function _lcdNibble *****************
 18826 ;; Defined at:
 18827 ;;		line 25 in file "lcd.c"
 18828 ;; Parameters:    Size  Location     Type
 18829 ;;  data            1    wreg     unsigned char 
 18830 ;; Auto vars:     Size  Location     Type
 18831 ;;  data            1    1[BANK0 ] unsigned char 
 18832 ;;  temp            1    0[BANK0 ] unsigned char 
 18833 ;; Return value:  Size  Location     Type
 18834 ;;                  1    wreg      void 
 18835 ;; Registers used:
 18836 ;;		wreg, status,2, status,0
 18837 ;; Tracked objects:
 18838 ;;		On entry : 0/0
 18839 ;;		On exit  : 0/0
 18840 ;;		Unchanged: 0/0
 18841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18843 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18846 ;;Total ram usage:        2 bytes
 18847 ;; Hardware stack levels used:    1
 18848 ;; Hardware stack levels required when called:    7
 18849 ;; This function calls:
 18850 ;;		Nothing
 18851 ;; This function is called by:
 18852 ;;		_lcdInst
 18853 ;;		_putch
 18854 ;; This function uses a non-reentrant model
 18855 ;;
 18856                           
 18857                           	psect	text63
 18858  005050                     __ptext63:
 18859                           	opt stack 0
 18860  005050                     _lcdNibble:
 18861                           	opt stack 20
 18862                           
 18863                           ;incstack = 0
 18864                           ;lcdNibble@data stored from wreg
 18865  005050  0100               	movlb	0	; () banked
 18866  005052  6F81               	movwf	lcdNibble@data& (0+255),b
 18867                           
 18868                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18869  005054  9EF2               	bcf	intcon,7,c	;volatile
 18870                           
 18871                           ;lcd.c: 28: char temp = data & 0xF0;
 18872  005056  0100               	movlb	0	; () banked
 18873  005058  5181               	movf	lcdNibble@data& (0+255),w,b
 18874  00505A  0BF0               	andlw	240
 18875  00505C  0100               	movlb	0	; () banked
 18876  00505E  6F80               	movwf	lcdNibble@temp& (0+255),b
 18877                           
 18878                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18879  005060  508C               	movf	3980,w,c	;volatile
 18880  005062  0B0F               	andlw	15
 18881  005064  6E8C               	movwf	3980,c	;volatile
 18882                           
 18883                           ;lcd.c: 30: LATD = temp | LATD;
 18884  005066  0100               	movlb	0	; () banked
 18885  005068  5180               	movf	lcdNibble@temp& (0+255),w,b
 18886  00506A  108C               	iorwf	3980,w,c	;volatile
 18887  00506C  6E8C               	movwf	3980,c	;volatile
 18888                           
 18889                           ; BSR set to: 0
 18890                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18891  00506E  868C               	bsf	3980,3,c	;volatile
 18892                           
 18893                           ; BSR set to: 0
 18894                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18895  005070  0E42               	movlw	66
 18896  005072                     u11487:
 18897  005072  2EE8               	decfsz	wreg,f,c
 18898  005074  D7FE               	bra	u11487
 18899  005076  D000               	nop2	
 18900                           
 18901                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18902  005078  968C               	bcf	3980,3,c	;volatile
 18903                           
 18904                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18905  00507A  0E42               	movlw	66
 18906  00507C                     u11497:
 18907  00507C  2EE8               	decfsz	wreg,f,c
 18908  00507E  D7FE               	bra	u11497
 18909  005080  D000               	nop2	
 18910                           
 18911                           ;lcd.c: 37: data = data << 4;
 18912  005082  0100               	movlb	0	; () banked
 18913  005084  3981               	swapf	lcdNibble@data& (0+255),w,b
 18914  005086  0BF0               	andlw	240
 18915  005088  0100               	movlb	0	; () banked
 18916  00508A  6F81               	movwf	lcdNibble@data& (0+255),b
 18917                           
 18918                           ;lcd.c: 39: temp = data & 0xF0;
 18919  00508C  0100               	movlb	0	; () banked
 18920  00508E  5181               	movf	lcdNibble@data& (0+255),w,b
 18921  005090  0BF0               	andlw	240
 18922  005092  0100               	movlb	0	; () banked
 18923  005094  6F80               	movwf	lcdNibble@temp& (0+255),b
 18924                           
 18925                           ;lcd.c: 40: LATD = LATD & 0x0F;
 18926  005096  508C               	movf	3980,w,c	;volatile
 18927  005098  0B0F               	andlw	15
 18928  00509A  6E8C               	movwf	3980,c	;volatile
 18929                           
 18930                           ;lcd.c: 41: LATD = temp | LATD;
 18931  00509C  0100               	movlb	0	; () banked
 18932  00509E  5180               	movf	lcdNibble@temp& (0+255),w,b
 18933  0050A0  108C               	iorwf	3980,w,c	;volatile
 18934  0050A2  6E8C               	movwf	3980,c	;volatile
 18935                           
 18936                           ; BSR set to: 0
 18937                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 18938  0050A4  868C               	bsf	3980,3,c	;volatile
 18939                           
 18940                           ; BSR set to: 0
 18941                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18942  0050A6  0E42               	movlw	66
 18943  0050A8                     u11507:
 18944  0050A8  2EE8               	decfsz	wreg,f,c
 18945  0050AA  D7FE               	bra	u11507
 18946  0050AC  D000               	nop2	
 18947                           
 18948                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 18949  0050AE  968C               	bcf	3980,3,c	;volatile
 18950                           
 18951                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18952  0050B0  0E42               	movlw	66
 18953  0050B2                     u11517:
 18954  0050B2  2EE8               	decfsz	wreg,f,c
 18955  0050B4  D7FE               	bra	u11517
 18956  0050B6  D000               	nop2	
 18957                           
 18958                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 18959  0050B8  8EF2               	bsf	intcon,7,c	;volatile
 18960  0050BA  0012               	return		;funcret
 18961  0050BC                     __end_of_lcdNibble:
 18962                           	opt stack 0
 18963                           tblptru	equ	0xFF8
 18964                           tblptrh	equ	0xFF7
 18965                           tblptrl	equ	0xFF6
 18966                           tablat	equ	0xFF5
 18967                           prodh	equ	0xFF4
 18968                           prodl	equ	0xFF3
 18969                           intcon	equ	0xFF2
 18970                           intcon2	equ	0xFF1
 18971                           intcon3	equ	0xFF0
 18972                           indf0	equ	0xFEF
 18973                           postinc0	equ	0xFEE
 18974                           fsr0h	equ	0xFEA
 18975                           fsr0l	equ	0xFE9
 18976                           wreg	equ	0xFE8
 18977                           postdec1	equ	0xFE5
 18978                           fsr1l	equ	0xFE1
 18979                           indf2	equ	0xFDF
 18980                           postinc2	equ	0xFDE
 18981                           postdec2	equ	0xFDD
 18982                           fsr2h	equ	0xFDA
 18983                           fsr2l	equ	0xFD9
 18984                           status	equ	0xFD8
 18985                           
 18986 ;; *************** function _handler *****************
 18987 ;; Defined at:
 18988 ;;		line 16 in file "interruptHandler.c"
 18989 ;; Parameters:    Size  Location     Type
 18990 ;;		None
 18991 ;; Auto vars:     Size  Location     Type
 18992 ;;		None
 18993 ;; Return value:  Size  Location     Type
 18994 ;;                  1    wreg      void 
 18995 ;; Registers used:
 18996 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18997 ;; Tracked objects:
 18998 ;;		On entry : 0/0
 18999 ;;		On exit  : 0/0
 19000 ;;		Unchanged: 0/0
 19001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19004 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19005 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19006 ;;Total ram usage:       16 bytes
 19007 ;; Hardware stack levels used:    1
 19008 ;; Hardware stack levels required when called:    6
 19009 ;; This function calls:
 19010 ;;		_printSortTimer
 19011 ;;		_updateArmState
 19012 ;;		_updateMenu
 19013 ;;		_updateServoStates
 19014 ;;		i2_change_state_to_menu_start
 19015 ;; This function is called by:
 19016 ;;		Interrupt level 2
 19017 ;; This function uses a non-reentrant model
 19018 ;;
 19019                           
 19020                           	psect	intcode
 19021  000008                     __pintcode:
 19022                           	opt stack 0
 19023  000008                     _handler:
 19024                           	opt stack 18
 19025                           
 19026                           ;incstack = 0
 19027  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19028  00000A  EDA3  F01C         	call	int_func,f	;refresh shadow registers
 19029                           tblptru	equ	0xFF8
 19030                           tblptrh	equ	0xFF7
 19031                           tblptrl	equ	0xFF6
 19032                           tablat	equ	0xFF5
 19033                           prodh	equ	0xFF4
 19034                           prodl	equ	0xFF3
 19035                           intcon	equ	0xFF2
 19036                           intcon2	equ	0xFF1
 19037                           intcon3	equ	0xFF0
 19038                           indf0	equ	0xFEF
 19039                           postinc0	equ	0xFEE
 19040                           fsr0h	equ	0xFEA
 19041                           fsr0l	equ	0xFE9
 19042                           wreg	equ	0xFE8
 19043                           postdec1	equ	0xFE5
 19044                           fsr1l	equ	0xFE1
 19045                           indf2	equ	0xFDF
 19046                           postinc2	equ	0xFDE
 19047                           postdec2	equ	0xFDD
 19048                           fsr2h	equ	0xFDA
 19049                           fsr2l	equ	0xFD9
 19050                           status	equ	0xFD8
 19051                           
 19052                           	psect	intcode_body
 19053  003946                     __pintcode_body:
 19054                           	opt stack 18
 19055  003946                     int_func:
 19056                           	opt stack 18
 19057  003946  0006               	pop		; remove dummy address from shadow register refresh
 19058  003948  CFFA F04D          	movff	pclath,??_handler+2
 19059  00394C  CFFB F04E          	movff	pclatu,??_handler+3
 19060  003950  CFE9 F04F          	movff	fsr0l,??_handler+4
 19061  003954  CFEA F050          	movff	fsr0h,??_handler+5
 19062  003958  CFE1 F051          	movff	fsr1l,??_handler+6
 19063  00395C  CFE2 F052          	movff	fsr1h,??_handler+7
 19064  003960  CFD9 F053          	movff	fsr2l,??_handler+8
 19065  003964  CFDA F054          	movff	fsr2h,??_handler+9
 19066  003968  CFF3 F055          	movff	prodl,??_handler+10
 19067  00396C  CFF4 F056          	movff	prodh,??_handler+11
 19068  003970  CFF6 F057          	movff	tblptrl,??_handler+12
 19069  003974  CFF7 F058          	movff	tblptrh,??_handler+13
 19070  003978  CFF8 F059          	movff	tblptru,??_handler+14
 19071  00397C  CFF5 F05A          	movff	tablat,??_handler+15
 19072                           
 19073                           ;interruptHandler.c: 18: if(INT1IF){
 19074  003980  A0F0               	btfss	intcon3,0,c	;volatile
 19075  003982  D034               	goto	i2l10274
 19076                           
 19077                           ;interruptHandler.c: 19: INT1IF = 0;
 19078  003984  90F0               	bcf	intcon3,0,c	;volatile
 19079                           
 19080                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19081  003986  3881               	swapf	3969,w,c	;volatile
 19082  003988  0B0F               	andlw	15
 19083  00398A  0B0F               	andlw	15
 19084  00398C  6E4B               	movwf	??_handler& (0+255),c
 19085  00398E  6A4C               	clrf	(??_handler+1)& (0+255),c
 19086  003990  0E8B               	movlw	low _keys
 19087  003992  244B               	addwf	??_handler,w,c
 19088  003994  6EF6               	movwf	tblptrl,c
 19089  003996  0EFA               	movlw	high _keys
 19090  003998  204C               	addwfc	??_handler+1,w,c
 19091  00399A  6EF7               	movwf	tblptrh,c
 19092  00399C                     	if	1	;There are 3 active tblptr bytes
 19093  00399C  6AF8               	clrf	tblptru,c
 19094  00399E  0E00               	movlw	low (__mediumconst shr (0+16))
 19095  0039A0  22F8               	addwfc	tblptru,f,c
 19096  0039A2                     	endif
 19097  0039A2  0008               	tblrd		*
 19098  0039A4  CFF5 F07D          	movff	tablat,_input	;volatile
 19099                           
 19100                           ;interruptHandler.c: 21: if(input == '*'){
 19101  0039A8  0E2A               	movlw	42
 19102  0039AA  187D               	xorwf	_input,w,c	;volatile
 19103  0039AC  B4D8               	btfsc	status,2,c
 19104  0039AE  D00D               	goto	i2l10268
 19105  0039B0  D018               	goto	i2l10270
 19106  0039B2                     i2l10258:
 19107                           
 19108                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19109  0039B2  0E03               	movlw	3
 19110  0039B4  D007               	goto	L14
 19111  0039B6                     i2l10260:
 19112                           
 19113                           ; BSR set to: 0
 19114                           ;interruptHandler.c: 27: machine_state = UI_state;
 19115  0039B6  0E00               	movlw	0
 19116  0039B8  0100               	movlb	0	; () banked
 19117  0039BA  6FFC               	movwf	_machine_state& (0+255),b
 19118                           
 19119                           ; BSR set to: 0
 19120                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19121  0039BC  EC06  F02D         	call	i2_change_state_to_menu_start	;wreg free
 19122                           
 19123                           ;interruptHandler.c: 29: break;
 19124  0039C0  D015               	goto	i2l10274
 19125  0039C2                     i2l10264:
 19126                           
 19127                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19128  0039C2  0E02               	movlw	2
 19129  0039C4                     L14:
 19130  0039C4  0100               	movlb	0	; () banked
 19131  0039C6  6FFC               	movwf	_machine_state& (0+255),b
 19132                           
 19133                           ; BSR set to: 0
 19134                           ;interruptHandler.c: 33: }
 19135                           
 19136                           ;interruptHandler.c: 32: break;
 19137  0039C8  D011               	goto	i2l10274
 19138  0039CA                     i2l10268:
 19139  0039CA  0100               	movlb	0	; () banked
 19140  0039CC  51FC               	movf	_machine_state& (0+255),w,b
 19141                           
 19142                           ; Switch size 1, requested type "space"
 19143                           ; Number of cases is 3, Range of values is 0 to 3
 19144                           ; switch strategies available:
 19145                           ; Name         Instructions Cycles
 19146                           ; simple_byte           10     6 (average)
 19147                           ;	Chosen strategy is simple_byte
 19148  0039CE  0A00               	xorlw	0	; case 0
 19149  0039D0  B4D8               	btfsc	status,2,c
 19150  0039D2  D7EF               	goto	i2l10258
 19151  0039D4  0A01               	xorlw	1	; case 1
 19152  0039D6  B4D8               	btfsc	status,2,c
 19153  0039D8  D7F4               	goto	i2l10264
 19154  0039DA  0A02               	xorlw	2	; case 3
 19155  0039DC  B4D8               	btfsc	status,2,c
 19156  0039DE  D7EB               	goto	i2l10260
 19157                           
 19158                           ; BSR set to: 0
 19159                           ;interruptHandler.c: 34: }
 19160  0039E0  D005               	goto	i2l10274
 19161  0039E2                     i2l10270:
 19162                           
 19163                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19164  0039E2  0100               	movlb	0	; () banked
 19165  0039E4  51FC               	movf	_machine_state& (0+255),w,b
 19166  0039E6  B4D8               	btfsc	status,2,c
 19167                           
 19168                           ; BSR set to: 0
 19169                           ;interruptHandler.c: 36: updateMenu();
 19170  0039E8  EC32  F019         	call	_updateMenu	;wreg free
 19171  0039EC                     i2l10274:
 19172                           
 19173                           ;interruptHandler.c: 37: }
 19174                           ;interruptHandler.c: 38: }
 19175                           ;interruptHandler.c: 41: if(TMR0IF){
 19176  0039EC  A4F2               	btfss	intcon,2,c	;volatile
 19177  0039EE  D00C               	goto	i2l10288
 19178                           
 19179                           ;interruptHandler.c: 42: TMR0IF = 0;
 19180  0039F0  94F2               	bcf	intcon,2,c	;volatile
 19181                           
 19182                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19183  0039F2  0100               	movlb	0	; () banked
 19184  0039F4  05FC               	decf	_machine_state& (0+255),w,b
 19185  0039F6  A4D8               	btfss	status,2,c
 19186  0039F8  D007               	goto	i2l10288
 19187                           
 19188                           ; BSR set to: 0
 19189                           ;interruptHandler.c: 44: printSortTimer();
 19190  0039FA  EC61  F016         	call	_printSortTimer	;wreg free
 19191                           
 19192                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19193  0039FE  0E85               	movlw	133
 19194  003A00  6ED7               	movwf	4055,c	;volatile
 19195                           
 19196                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19197  003A02  0EEE               	movlw	238
 19198  003A04  6ED6               	movwf	4054,c	;volatile
 19199                           
 19200                           ;interruptHandler.c: 48: TMR0ON = 1;
 19201  003A06  8ED5               	bsf	4053,7,c	;volatile
 19202  003A08                     i2l10288:
 19203                           
 19204                           ;interruptHandler.c: 49: }
 19205                           ;interruptHandler.c: 50: }
 19206                           ;interruptHandler.c: 53: if(TMR1IF){
 19207  003A08  A09E               	btfss	3998,0,c	;volatile
 19208  003A0A  D028               	goto	i2l10316
 19209                           
 19210                           ;interruptHandler.c: 54: TMR1IF = 0;
 19211  003A0C  909E               	bcf	3998,0,c	;volatile
 19212                           
 19213                           ;interruptHandler.c: 55: TMR1ON = 0;
 19214  003A0E  90CD               	bcf	4045,0,c	;volatile
 19215                           
 19216                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19217  003A10  0100               	movlb	0	; () banked
 19218  003A12  05FC               	decf	_machine_state& (0+255),w,b
 19219  003A14  A4D8               	btfss	status,2,c
 19220  003A16  D022               	goto	i2l10316
 19221                           
 19222                           ; BSR set to: 0
 19223                           ;interruptHandler.c: 57: if(was_low_1){
 19224  003A18  5077               	movf	_was_low_1,w,c	;volatile
 19225  003A1A  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19226  003A1C  B4D8               	btfsc	status,2,c
 19227  003A1E  D00A               	goto	i2l1054
 19228                           
 19229                           ; BSR set to: 0
 19230                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19231  003A20  828B               	bsf	3979,1,c	;volatile
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;interruptHandler.c: 59: was_low_1 = 0;
 19235  003A22  0E00               	movlw	0
 19236  003A24  6E78               	movwf	_was_low_1+1,c	;volatile
 19237  003A26  0E00               	movlw	0
 19238  003A28  6E77               	movwf	_was_low_1,c	;volatile
 19239                           
 19240                           ; BSR set to: 0
 19241                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19242  003A2A  C05B  FFCF         	movff	_servoTimes,4047	;volatile
 19243                           
 19244                           ; BSR set to: 0
 19245                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19246  003A2E  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
 19247                           
 19248                           ;interruptHandler.c: 62: }
 19249  003A32  D00D               	goto	i2l10310
 19250  003A34                     i2l1054:
 19251                           
 19252                           ; BSR set to: 0
 19253                           ;interruptHandler.c: 63: else{
 19254                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19255  003A34  928B               	bcf	3979,1,c	;volatile
 19256                           
 19257                           ; BSR set to: 0
 19258                           ;interruptHandler.c: 65: was_low_1 = 1;
 19259  003A36  0E00               	movlw	0
 19260  003A38  6E78               	movwf	_was_low_1+1,c	;volatile
 19261  003A3A  0E01               	movlw	1
 19262  003A3C  6E77               	movwf	_was_low_1,c	;volatile
 19263                           
 19264                           ; BSR set to: 0
 19265                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19266  003A3E  505B               	movf	_servoTimes,w,c
 19267  003A40  0800               	sublw	0
 19268  003A42  0F20               	addlw	32
 19269  003A44  6ECF               	movwf	4047,c	;volatile
 19270                           
 19271                           ; BSR set to: 0
 19272                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19273  003A46  505D               	movf	_servoTimes+2,w,c
 19274  003A48  0800               	sublw	0
 19275  003A4A  0F20               	addlw	32
 19276  003A4C  6ECE               	movwf	4046,c	;volatile
 19277  003A4E                     i2l10310:
 19278                           
 19279                           ; BSR set to: 0
 19280                           ;interruptHandler.c: 68: }
 19281                           ;interruptHandler.c: 69: TMR1ON = 1;
 19282  003A4E  80CD               	bsf	4045,0,c	;volatile
 19283                           
 19284                           ; BSR set to: 0
 19285                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19286  003A50  0E0A               	movlw	10
 19287  003A52  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19288  003A54  0E00               	movlw	0
 19289  003A56  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19290                           
 19291                           ; BSR set to: 0
 19292                           ;interruptHandler.c: 72: updateServoStates();
 19293  003A58  EC98  F01D         	call	_updateServoStates	;wreg free
 19294  003A5C                     i2l10316:
 19295                           
 19296                           ;interruptHandler.c: 73: }
 19297                           ;interruptHandler.c: 74: }
 19298                           ;interruptHandler.c: 77: if(TMR2IF){
 19299  003A5C  A29E               	btfss	3998,1,c	;volatile
 19300  003A5E  D026               	goto	i2l10342
 19301                           
 19302                           ;interruptHandler.c: 80: TMR2IF = 0;
 19303  003A60  929E               	bcf	3998,1,c	;volatile
 19304                           
 19305                           ;interruptHandler.c: 81: TMR2ON = 0;
 19306  003A62  94CA               	bcf	4042,2,c	;volatile
 19307                           
 19308                           ;interruptHandler.c: 82: timer2_counter++;
 19309  003A64  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19310  003A66  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19311                           
 19312                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19313  003A68  0100               	movlb	0	; () banked
 19314  003A6A  05FC               	decf	_machine_state& (0+255),w,b
 19315  003A6C  A4D8               	btfss	status,2,c
 19316  003A6E  D01E               	goto	i2l10342
 19317                           
 19318                           ; BSR set to: 0
 19319                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19320  003A70  5079               	movf	_was_low_2,w,c	;volatile
 19321  003A72  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19322  003A74  B4D8               	btfsc	status,2,c
 19323  003A76  D00A               	goto	i2l10332
 19324                           
 19325                           ; BSR set to: 0
 19326  003A78  0E02               	movlw	2
 19327  003A7A  1873               	xorwf	_timer2_counter,w,c	;volatile
 19328  003A7C  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19329  003A7E  A4D8               	btfss	status,2,c
 19330  003A80  D005               	goto	i2l10332
 19331                           
 19332                           ; BSR set to: 0
 19333                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19334  003A82  868A               	bsf	3978,3,c	;volatile
 19335                           
 19336                           ; BSR set to: 0
 19337                           ;interruptHandler.c: 87: was_low_2 = 0;
 19338  003A84  0E00               	movlw	0
 19339  003A86  6E7A               	movwf	_was_low_2+1,c	;volatile
 19340  003A88  0E00               	movlw	0
 19341  003A8A  D008               	goto	L15
 19342  003A8C                     i2l10332:
 19343                           
 19344                           ; BSR set to: 0
 19345                           ;interruptHandler.c: 90: else if(!was_low_2){
 19346  003A8C  5079               	movf	_was_low_2,w,c	;volatile
 19347  003A8E  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19348  003A90  A4D8               	btfss	status,2,c
 19349  003A92  D009               	goto	i2l10338
 19350                           
 19351                           ; BSR set to: 0
 19352                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19353  003A94  968A               	bcf	3978,3,c	;volatile
 19354                           
 19355                           ; BSR set to: 0
 19356                           ;interruptHandler.c: 92: was_low_2 = 1;
 19357  003A96  0E00               	movlw	0
 19358  003A98  6E7A               	movwf	_was_low_2+1,c	;volatile
 19359  003A9A  0E01               	movlw	1
 19360  003A9C                     L15:
 19361  003A9C  6E79               	movwf	_was_low_2,c	;volatile
 19362                           
 19363                           ;interruptHandler.c: 93: timer2_counter = 0;
 19364  003A9E  0E00               	movlw	0
 19365  003AA0  6E74               	movwf	_timer2_counter+1,c	;volatile
 19366  003AA2  0E00               	movlw	0
 19367  003AA4  6E73               	movwf	_timer2_counter,c	;volatile
 19368  003AA6                     i2l10338:
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;interruptHandler.c: 94: }
 19372                           ;interruptHandler.c: 95: updateArmState();
 19373  003AA6  ECD6  F02A         	call	_updateArmState	;wreg free
 19374                           
 19375                           ;interruptHandler.c: 96: TMR2ON = 1;
 19376  003AAA  84CA               	bsf	4042,2,c	;volatile
 19377  003AAC                     i2l10342:
 19378                           
 19379                           ;interruptHandler.c: 97: }
 19380                           ;interruptHandler.c: 98: }
 19381                           ;interruptHandler.c: 101: if(TMR3IF){
 19382  003AAC  A2A1               	btfss	4001,1,c	;volatile
 19383  003AAE  D022               	goto	i2l1065
 19384                           
 19385                           ;interruptHandler.c: 102: TMR3IF = 0;
 19386  003AB0  92A1               	bcf	4001,1,c	;volatile
 19387                           
 19388                           ;interruptHandler.c: 103: TMR3ON = 0;
 19389  003AB2  90B1               	bcf	4017,0,c	;volatile
 19390                           
 19391                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19392  003AB4  0100               	movlb	0	; () banked
 19393  003AB6  05FC               	decf	_machine_state& (0+255),w,b
 19394  003AB8  A4D8               	btfss	status,2,c
 19395  003ABA  D01C               	goto	i2l1065
 19396                           
 19397                           ; BSR set to: 0
 19398                           ;interruptHandler.c: 105: if(was_low_3){
 19399  003ABC  507B               	movf	_was_low_3,w,c	;volatile
 19400  003ABE  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19401  003AC0  B4D8               	btfsc	status,2,c
 19402  003AC2  D00A               	goto	i2l1063
 19403                           
 19404                           ; BSR set to: 0
 19405                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19406  003AC4  848B               	bsf	3979,2,c	;volatile
 19407                           
 19408                           ; BSR set to: 0
 19409                           ;interruptHandler.c: 107: was_low_3 = 0;
 19410  003AC6  0E00               	movlw	0
 19411  003AC8  6E7C               	movwf	_was_low_3+1,c	;volatile
 19412  003ACA  0E00               	movlw	0
 19413  003ACC  6E7B               	movwf	_was_low_3,c	;volatile
 19414                           
 19415                           ; BSR set to: 0
 19416                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19417  003ACE  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
 19418                           
 19419                           ; BSR set to: 0
 19420                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19421  003AD2  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
 19422                           
 19423                           ;interruptHandler.c: 110: }
 19424  003AD6  D00D               	goto	i2l10364
 19425  003AD8                     i2l1063:
 19426                           
 19427                           ; BSR set to: 0
 19428                           ;interruptHandler.c: 111: else{
 19429                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19430  003AD8  948B               	bcf	3979,2,c	;volatile
 19431                           
 19432                           ; BSR set to: 0
 19433                           ;interruptHandler.c: 113: was_low_3 = 1;
 19434  003ADA  0E00               	movlw	0
 19435  003ADC  6E7C               	movwf	_was_low_3+1,c	;volatile
 19436  003ADE  0E01               	movlw	1
 19437  003AE0  6E7B               	movwf	_was_low_3,c	;volatile
 19438                           
 19439                           ; BSR set to: 0
 19440                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19441  003AE2  505F               	movf	_servoTimes+4,w,c
 19442  003AE4  0800               	sublw	0
 19443  003AE6  0F20               	addlw	32
 19444  003AE8  6EB3               	movwf	4019,c	;volatile
 19445                           
 19446                           ; BSR set to: 0
 19447                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19448  003AEA  5061               	movf	_servoTimes+6,w,c
 19449  003AEC  0800               	sublw	0
 19450  003AEE  0F20               	addlw	32
 19451  003AF0  6EB2               	movwf	4018,c	;volatile
 19452  003AF2                     i2l10364:
 19453                           
 19454                           ; BSR set to: 0
 19455                           ;interruptHandler.c: 116: }
 19456                           ;interruptHandler.c: 117: TMR3ON = 1;
 19457  003AF2  80B1               	bsf	4017,0,c	;volatile
 19458  003AF4                     i2l1065:
 19459  003AF4  C05A  FFF5         	movff	??_handler+15,tablat
 19460  003AF8  C059  FFF8         	movff	??_handler+14,tblptru
 19461  003AFC  C058  FFF7         	movff	??_handler+13,tblptrh
 19462  003B00  C057  FFF6         	movff	??_handler+12,tblptrl
 19463  003B04  C056  FFF4         	movff	??_handler+11,prodh
 19464  003B08  C055  FFF3         	movff	??_handler+10,prodl
 19465  003B0C  C054  FFDA         	movff	??_handler+9,fsr2h
 19466  003B10  C053  FFD9         	movff	??_handler+8,fsr2l
 19467  003B14  C052  FFE2         	movff	??_handler+7,fsr1h
 19468  003B18  C051  FFE1         	movff	??_handler+6,fsr1l
 19469  003B1C  C050  FFEA         	movff	??_handler+5,fsr0h
 19470  003B20  C04F  FFE9         	movff	??_handler+4,fsr0l
 19471  003B24  C04E  FFFB         	movff	??_handler+3,pclatu
 19472  003B28  C04D  FFFA         	movff	??_handler+2,pclath
 19473  003B2C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19474  003B2E  0011               	retfie		f
 19475  003B30                     __end_of_handler:
 19476                           	opt stack 0
 19477                           pclatu	equ	0xFFB
 19478                           pclath	equ	0xFFA
 19479                           tblptru	equ	0xFF8
 19480                           tblptrh	equ	0xFF7
 19481                           tblptrl	equ	0xFF6
 19482                           tablat	equ	0xFF5
 19483                           prodh	equ	0xFF4
 19484                           prodl	equ	0xFF3
 19485                           intcon	equ	0xFF2
 19486                           intcon2	equ	0xFF1
 19487                           intcon3	equ	0xFF0
 19488                           indf0	equ	0xFEF
 19489                           postinc0	equ	0xFEE
 19490                           fsr0h	equ	0xFEA
 19491                           fsr0l	equ	0xFE9
 19492                           wreg	equ	0xFE8
 19493                           postdec1	equ	0xFE5
 19494                           fsr1h	equ	0xFE2
 19495                           fsr1l	equ	0xFE1
 19496                           indf2	equ	0xFDF
 19497                           postinc2	equ	0xFDE
 19498                           postdec2	equ	0xFDD
 19499                           fsr2h	equ	0xFDA
 19500                           fsr2l	equ	0xFD9
 19501                           status	equ	0xFD8
 19502                           
 19503 ;; *************** function _updateServoStates *****************
 19504 ;; Defined at:
 19505 ;;		line 583 in file "sort.c"
 19506 ;; Parameters:    Size  Location     Type
 19507 ;;		None
 19508 ;; Auto vars:     Size  Location     Type
 19509 ;;		None
 19510 ;; Return value:  Size  Location     Type
 19511 ;;                  1    wreg      void 
 19512 ;; Registers used:
 19513 ;;		wreg, status,2, status,0, cstack
 19514 ;; Tracked objects:
 19515 ;;		On entry : 0/0
 19516 ;;		On exit  : 0/0
 19517 ;;		Unchanged: 0/0
 19518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19521 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19522 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19523 ;;Total ram usage:        2 bytes
 19524 ;; Hardware stack levels used:    1
 19525 ;; Hardware stack levels required when called:    1
 19526 ;; This function calls:
 19527 ;;		i2_updateServoPosition
 19528 ;; This function is called by:
 19529 ;;		_handler
 19530 ;; This function uses a non-reentrant model
 19531 ;;
 19532                           
 19533                           	psect	text65
 19534  003B30                     __ptext65:
 19535                           	opt stack 0
 19536  003B30                     _updateServoStates:
 19537                           	opt stack 22
 19538                           
 19539                           ;sort.c: 585: if(servo_timer_counter >= servo_timer_target){
 19540                           
 19541                           ;incstack = 0
 19542  003B30  506F               	movf	_servo_timer_target,w,c	;volatile
 19543  003B32  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19544  003B34  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19545  003B36  0A80               	xorlw	128
 19546  003B38  6E09               	movwf	??_updateServoStates& (0+255),c
 19547  003B3A  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19548  003B3C  0A80               	xorlw	128
 19549  003B3E  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19550  003B40  A0D8               	btfss	status,0,c
 19551  003B42  0012               	return	
 19552                           
 19553                           ;sort.c: 587: if(f_panning_to_bin){
 19554  003B44  5069               	movf	_f_panning_to_bin,w,c	;volatile
 19555  003B46  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19556  003B48  A4D8               	btfss	status,2,c
 19557  003B4A  D036               	goto	i2l10132
 19558  003B4C  D05F               	goto	i2l10136
 19559  003B4E                     i2l10106:
 19560                           
 19561                           ;sort.c: 591: updateServoPosition(1260, 3);
 19562  003B4E  0E04               	movlw	4
 19563  003B50  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19564  003B52  0EEC               	movlw	236
 19565  003B54  6E01               	movwf	i2updateServoPosition@time_us,c
 19566  003B56  0E00               	movlw	0
 19567  003B58  6E04               	movwf	i2updateServoPosition@timer+1,c
 19568  003B5A  0E03               	movlw	3
 19569  003B5C  6E03               	movwf	i2updateServoPosition@timer,c
 19570  003B5E  EC5E  F028         	call	i2_updateServoPosition	;wreg free
 19571  003B62  D025               	goto	i2l10126
 19572  003B64                     i2l10110:
 19573                           
 19574                           ;sort.c: 593: servo_timer_target = 700;
 19575  003B64  0E02               	movlw	2
 19576  003B66  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19577  003B68  0EBC               	movlw	188
 19578  003B6A  6E6F               	movwf	_servo_timer_target,c	;volatile
 19579                           
 19580                           ;sort.c: 594: break;
 19581  003B6C  D04A               	goto	i2l10134
 19582  003B6E                     i2l10112:
 19583                           
 19584                           ;sort.c: 596: updateServoPosition(1260, 3);
 19585  003B6E  0E04               	movlw	4
 19586  003B70  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19587  003B72  0EEC               	movlw	236
 19588  003B74  6E01               	movwf	i2updateServoPosition@time_us,c
 19589  003B76  0E00               	movlw	0
 19590  003B78  6E04               	movwf	i2updateServoPosition@timer+1,c
 19591  003B7A  0E03               	movlw	3
 19592  003B7C  6E03               	movwf	i2updateServoPosition@timer,c
 19593  003B7E  EC5E  F028         	call	i2_updateServoPosition	;wreg free
 19594  003B82  D015               	goto	i2l10126
 19595  003B84                     i2l10118:
 19596                           
 19597                           ;sort.c: 602: updateServoPosition(1390, 3);
 19598  003B84  0E05               	movlw	5
 19599  003B86  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19600  003B88  0E6E               	movlw	110
 19601  003B8A  6E01               	movwf	i2updateServoPosition@time_us,c
 19602  003B8C  0E00               	movlw	0
 19603  003B8E  6E04               	movwf	i2updateServoPosition@timer+1,c
 19604  003B90  0E03               	movlw	3
 19605  003B92  6E03               	movwf	i2updateServoPosition@timer,c
 19606  003B94  EC5E  F028         	call	i2_updateServoPosition	;wreg free
 19607  003B98  D00A               	goto	i2l10126
 19608  003B9A                     i2l10124:
 19609                           
 19610                           ;sort.c: 607: updateServoPosition(1390, 3);
 19611  003B9A  0E05               	movlw	5
 19612  003B9C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19613  003B9E  0E6E               	movlw	110
 19614  003BA0  6E01               	movwf	i2updateServoPosition@time_us,c
 19615  003BA2  0E00               	movlw	0
 19616  003BA4  6E04               	movwf	i2updateServoPosition@timer+1,c
 19617  003BA6  0E03               	movlw	3
 19618  003BA8  6E03               	movwf	i2updateServoPosition@timer,c
 19619  003BAA  EC5E  F028         	call	i2_updateServoPosition	;wreg free
 19620  003BAE                     i2l10126:
 19621                           
 19622                           ;sort.c: 608: servo_timer_counter = 0;
 19623  003BAE  0E00               	movlw	0
 19624  003BB0  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19625  003BB2  0E00               	movlw	0
 19626  003BB4  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19627  003BB6  D7D6               	goto	i2l10110
 19628  003BB8                     i2l10132:
 19629  003BB8  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19630  003BBC  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19631                           
 19632                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19633                           ; Switch size 1, requested type "space"
 19634                           ; Number of cases is 4, Range of values is 1 to 9
 19635                           ; switch strategies available:
 19636                           ; Name         Instructions Cycles
 19637                           ; simple_byte           13     7 (average)
 19638                           ;	Chosen strategy is simple_byte
 19639  003BC0  500A               	movf	??_updateServoStates+1,w,c
 19640  003BC2  0A01               	xorlw	1	; case 1
 19641  003BC4  B4D8               	btfsc	status,2,c
 19642  003BC6  D00A               	goto	i2l10812
 19643  003BC8  0A02               	xorlw	2	; case 3
 19644  003BCA  B4D8               	btfsc	status,2,c
 19645  003BCC  D00C               	goto	i2l10814
 19646  003BCE  0A05               	xorlw	5	; case 6
 19647  003BD0  B4D8               	btfsc	status,2,c
 19648  003BD2  D00E               	goto	i2l10816
 19649  003BD4  0A0F               	xorlw	15	; case 9
 19650  003BD6  B4D8               	btfsc	status,2,c
 19651  003BD8  D010               	goto	i2l10818
 19652  003BDA  D013               	goto	i2l10134
 19653  003BDC                     i2l10812:
 19654                           
 19655                           ; Switch size 1, requested type "space"
 19656                           ; Number of cases is 1, Range of values is 244 to 244
 19657                           ; switch strategies available:
 19658                           ; Name         Instructions Cycles
 19659                           ; simple_byte            4     3 (average)
 19660                           ;	Chosen strategy is simple_byte
 19661  003BDC  5009               	movf	??_updateServoStates,w,c
 19662  003BDE  0AF4               	xorlw	244	; case 244
 19663  003BE0  B4D8               	btfsc	status,2,c
 19664  003BE2  D7B5               	goto	i2l10106
 19665  003BE4  D00E               	goto	i2l10134
 19666  003BE6                     i2l10814:
 19667                           
 19668                           ; Switch size 1, requested type "space"
 19669                           ; Number of cases is 1, Range of values is 82 to 82
 19670                           ; switch strategies available:
 19671                           ; Name         Instructions Cycles
 19672                           ; simple_byte            4     3 (average)
 19673                           ;	Chosen strategy is simple_byte
 19674  003BE6  5009               	movf	??_updateServoStates,w,c
 19675  003BE8  0A52               	xorlw	82	; case 82
 19676  003BEA  B4D8               	btfsc	status,2,c
 19677  003BEC  D7C0               	goto	i2l10112
 19678  003BEE  D009               	goto	i2l10134
 19679  003BF0                     i2l10816:
 19680                           
 19681                           ; Switch size 1, requested type "space"
 19682                           ; Number of cases is 1, Range of values is 134 to 134
 19683                           ; switch strategies available:
 19684                           ; Name         Instructions Cycles
 19685                           ; simple_byte            4     3 (average)
 19686                           ;	Chosen strategy is simple_byte
 19687  003BF0  5009               	movf	??_updateServoStates,w,c
 19688  003BF2  0A86               	xorlw	134	; case 134
 19689  003BF4  B4D8               	btfsc	status,2,c
 19690  003BF6  D7C6               	goto	i2l10118
 19691  003BF8  D004               	goto	i2l10134
 19692  003BFA                     i2l10818:
 19693                           
 19694                           ; Switch size 1, requested type "space"
 19695                           ; Number of cases is 1, Range of values is 96 to 96
 19696                           ; switch strategies available:
 19697                           ; Name         Instructions Cycles
 19698                           ; simple_byte            4     3 (average)
 19699                           ;	Chosen strategy is simple_byte
 19700  003BFA  5009               	movf	??_updateServoStates,w,c
 19701  003BFC  0A60               	xorlw	96	; case 96
 19702  003BFE  B4D8               	btfsc	status,2,c
 19703  003C00  D7CC               	goto	i2l10124
 19704  003C02                     i2l10134:
 19705                           
 19706                           ;sort.c: 614: f_panning_to_bin = 0;
 19707  003C02  0E00               	movlw	0
 19708  003C04  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 19709  003C06  0E00               	movlw	0
 19710  003C08  6E69               	movwf	_f_panning_to_bin,c	;volatile
 19711                           
 19712                           ;sort.c: 615: }
 19713  003C0A  0012               	return	
 19714  003C0C                     i2l10136:
 19715                           
 19716                           ;sort.c: 616: else if(pan_servo_state == 1200){
 19717  003C0C  0EB0               	movlw	176
 19718  003C0E  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19719  003C10  E15A               	bnz	i2l10166
 19720  003C12  0E04               	movlw	4
 19721  003C14  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19722  003C16  A4D8               	btfss	status,2,c
 19723  003C18  D056               	goto	i2l10166
 19724                           
 19725                           ;sort.c: 618: servo_timer_counter = 0;
 19726  003C1A  0E00               	movlw	0
 19727  003C1C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19728  003C1E  0E00               	movlw	0
 19729  003C20  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19730                           
 19731                           ;sort.c: 619: }
 19732  003C22  0012               	return	
 19733  003C24                     i2l10140:
 19734                           
 19735                           ;sort.c: 624: updateServoPosition(1050, 3);
 19736  003C24  0E04               	movlw	4
 19737  003C26  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19738  003C28  0E1A               	movlw	26
 19739  003C2A  6E01               	movwf	i2updateServoPosition@time_us,c
 19740  003C2C  0E00               	movlw	0
 19741  003C2E  6E04               	movwf	i2updateServoPosition@timer+1,c
 19742  003C30  0E03               	movlw	3
 19743  003C32  6E03               	movwf	i2updateServoPosition@timer,c
 19744  003C34  EC5E  F028         	call	i2_updateServoPosition	;wreg free
 19745                           
 19746                           ;sort.c: 625: servo_timer_counter = 0;
 19747  003C38  0E00               	movlw	0
 19748  003C3A  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19749  003C3C  0E00               	movlw	0
 19750  003C3E  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19751                           
 19752                           ;sort.c: 626: servo_timer_target = 750;
 19753  003C40  0E02               	movlw	2
 19754  003C42  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19755  003C44  0EEE               	movlw	238
 19756  003C46  6E6F               	movwf	_servo_timer_target,c	;volatile
 19757                           
 19758                           ;sort.c: 627: break;
 19759  003C48  0012               	return	
 19760  003C4A                     i2l10146:
 19761                           
 19762                           ;sort.c: 629: updateServoPosition(1050, 3);
 19763  003C4A  0E04               	movlw	4
 19764  003C4C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19765  003C4E  0E1A               	movlw	26
 19766  003C50  6E01               	movwf	i2updateServoPosition@time_us,c
 19767  003C52  0E00               	movlw	0
 19768  003C54  6E04               	movwf	i2updateServoPosition@timer+1,c
 19769  003C56  0E03               	movlw	3
 19770  003C58  6E03               	movwf	i2updateServoPosition@timer,c
 19771  003C5A  EC5E  F028         	call	i2_updateServoPosition	;wreg free
 19772                           
 19773                           ;sort.c: 630: servo_timer_counter = 0;
 19774  003C5E  0E00               	movlw	0
 19775  003C60  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19776  003C62  0E00               	movlw	0
 19777  003C64  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19778                           
 19779                           ;sort.c: 631: servo_timer_target = 750;
 19780  003C66  0E02               	movlw	2
 19781  003C68  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19782  003C6A  0EEE               	movlw	238
 19783  003C6C  6E6F               	movwf	_servo_timer_target,c	;volatile
 19784                           
 19785                           ;sort.c: 632: break;
 19786  003C6E  0012               	return	
 19787  003C70                     i2l10152:
 19788                           
 19789                           ;sort.c: 635: updateServoPosition(1200, 1);
 19790  003C70  0E04               	movlw	4
 19791  003C72  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19792  003C74  0EB0               	movlw	176
 19793  003C76  6E01               	movwf	i2updateServoPosition@time_us,c
 19794  003C78  0E00               	movlw	0
 19795  003C7A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19796  003C7C  0E01               	movlw	1
 19797  003C7E  6E03               	movwf	i2updateServoPosition@timer,c
 19798  003C80  EC5E  F028         	call	i2_updateServoPosition	;wreg free
 19799                           
 19800                           ;sort.c: 636: updateServoPosition(1050, 3);
 19801  003C84  0E04               	movlw	4
 19802  003C86  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19803  003C88  0E1A               	movlw	26
 19804  003C8A  6E01               	movwf	i2updateServoPosition@time_us,c
 19805  003C8C  0E00               	movlw	0
 19806  003C8E  6E04               	movwf	i2updateServoPosition@timer+1,c
 19807  003C90  0E03               	movlw	3
 19808  003C92  6E03               	movwf	i2updateServoPosition@timer,c
 19809  003C94  EC5E  F028         	call	i2_updateServoPosition	;wreg free
 19810                           
 19811                           ;sort.c: 637: servo_timer_counter = 0;
 19812  003C98  0E00               	movlw	0
 19813  003C9A  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19814  003C9C  0E00               	movlw	0
 19815  003C9E  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19816                           
 19817                           ;sort.c: 638: servo_timer_target = 9999;
 19818  003CA0  0E27               	movlw	39
 19819  003CA2  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19820  003CA4  0E0F               	movlw	15
 19821  003CA6  6E6F               	movwf	_servo_timer_target,c	;volatile
 19822                           
 19823                           ;sort.c: 640: f_can_distributed = 1;
 19824  003CA8  0E00               	movlw	0
 19825  003CAA  0101               	movlb	1	; () banked
 19826  003CAC  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
 19827  003CAE  0E01               	movlw	1
 19828  003CB0  6F33               	movwf	_f_can_distributed& (0+255),b
 19829                           
 19830                           ; BSR set to: 1
 19831                           ;sort.c: 641: if(f_lastCan == 1){
 19832  003CB2  0100               	movlb	0	; () banked
 19833  003CB4  05EC               	decf	_f_lastCan& (0+255),w,b
 19834  003CB6  0100               	movlb	0	; () banked
 19835  003CB8  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19836  003CBA  A4D8               	btfss	status,2,c
 19837  003CBC  0012               	return	
 19838                           
 19839                           ; BSR set to: 0
 19840                           ;sort.c: 642: machine_state = DoneSorting_state;
 19841  003CBE  0E02               	movlw	2
 19842  003CC0  0100               	movlb	0	; () banked
 19843  003CC2  6FFC               	movwf	_machine_state& (0+255),b
 19844                           
 19845                           ; BSR set to: 0
 19846                           ;sort.c: 648: }
 19847                           
 19848                           ; BSR set to: 0
 19849                           ;sort.c: 647: break;
 19850                           
 19851                           ;sort.c: 646: default:
 19852                           
 19853                           ; BSR set to: 0
 19854                           ;sort.c: 643: }
 19855                           ;sort.c: 644: break;
 19856  003CC4  0012               	return	
 19857  003CC6                     i2l10166:
 19858  003CC6  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19859  003CCA  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19860                           
 19861                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19862                           ; Switch size 1, requested type "space"
 19863                           ; Number of cases is 2, Range of values is 4 to 5
 19864                           ; switch strategies available:
 19865                           ; Name         Instructions Cycles
 19866                           ; simple_byte            7     4 (average)
 19867                           ;	Chosen strategy is simple_byte
 19868  003CCE  500A               	movf	??_updateServoStates+1,w,c
 19869  003CD0  0A04               	xorlw	4	; case 4
 19870  003CD2  B4D8               	btfsc	status,2,c
 19871  003CD4  D004               	goto	i2l10820
 19872  003CD6  0A01               	xorlw	1	; case 5
 19873  003CD8  A4D8               	btfss	status,2,c
 19874  003CDA  0012               	return	
 19875  003CDC  D008               	goto	i2l10822
 19876  003CDE                     i2l10820:
 19877                           
 19878                           ; Switch size 1, requested type "space"
 19879                           ; Number of cases is 2, Range of values is 26 to 236
 19880                           ; switch strategies available:
 19881                           ; Name         Instructions Cycles
 19882                           ; simple_byte            7     4 (average)
 19883                           ;	Chosen strategy is simple_byte
 19884  003CDE  5009               	movf	??_updateServoStates,w,c
 19885  003CE0  0A1A               	xorlw	26	; case 26
 19886  003CE2  B4D8               	btfsc	status,2,c
 19887  003CE4  D7C5               	goto	i2l10152
 19888  003CE6  0AF6               	xorlw	246	; case 236
 19889  003CE8  A4D8               	btfss	status,2,c
 19890  003CEA  0012               	return	
 19891  003CEC  D79B               	goto	i2l10140
 19892  003CEE                     i2l10822:
 19893                           
 19894                           ; Switch size 1, requested type "space"
 19895                           ; Number of cases is 1, Range of values is 110 to 110
 19896                           ; switch strategies available:
 19897                           ; Name         Instructions Cycles
 19898                           ; simple_byte            4     3 (average)
 19899                           ;	Chosen strategy is simple_byte
 19900  003CEE  5009               	movf	??_updateServoStates,w,c
 19901  003CF0  0A6E               	xorlw	110	; case 110
 19902  003CF2  A4D8               	btfss	status,2,c
 19903  003CF4  0012               	return	
 19904  003CF6  D7A9               	goto	i2l10146
 19905  003CF8                     __end_of_updateServoStates:
 19906                           	opt stack 0
 19907                           pclatu	equ	0xFFB
 19908                           pclath	equ	0xFFA
 19909                           tblptru	equ	0xFF8
 19910                           tblptrh	equ	0xFF7
 19911                           tblptrl	equ	0xFF6
 19912                           tablat	equ	0xFF5
 19913                           prodh	equ	0xFF4
 19914                           prodl	equ	0xFF3
 19915                           intcon	equ	0xFF2
 19916                           intcon2	equ	0xFF1
 19917                           intcon3	equ	0xFF0
 19918                           indf0	equ	0xFEF
 19919                           postinc0	equ	0xFEE
 19920                           fsr0h	equ	0xFEA
 19921                           fsr0l	equ	0xFE9
 19922                           wreg	equ	0xFE8
 19923                           postdec1	equ	0xFE5
 19924                           fsr1h	equ	0xFE2
 19925                           fsr1l	equ	0xFE1
 19926                           indf2	equ	0xFDF
 19927                           postinc2	equ	0xFDE
 19928                           postdec2	equ	0xFDD
 19929                           fsr2h	equ	0xFDA
 19930                           fsr2l	equ	0xFD9
 19931                           status	equ	0xFD8
 19932                           
 19933 ;; *************** function i2_updateServoPosition *****************
 19934 ;; Defined at:
 19935 ;;		line 568 in file "sort.c"
 19936 ;; Parameters:    Size  Location     Type
 19937 ;;  time_us         2    0[COMRAM] int 
 19938 ;;  timer           2    2[COMRAM] int 
 19939 ;; Auto vars:     Size  Location     Type
 19940 ;;  updateServoP    2    6[COMRAM] unsigned int 
 19941 ;; Return value:  Size  Location     Type
 19942 ;;                  1    wreg      void 
 19943 ;; Registers used:
 19944 ;;		wreg, status,2, status,0
 19945 ;; Tracked objects:
 19946 ;;		On entry : 0/0
 19947 ;;		On exit  : 0/0
 19948 ;;		Unchanged: 0/0
 19949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19950 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19951 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19952 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19953 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19954 ;;Total ram usage:        8 bytes
 19955 ;; Hardware stack levels used:    1
 19956 ;; This function calls:
 19957 ;;		Nothing
 19958 ;; This function is called by:
 19959 ;;		_updateServoStates
 19960 ;; This function uses a non-reentrant model
 19961 ;;
 19962                           
 19963                           	psect	text66
 19964  0050BC                     __ptext66:
 19965                           	opt stack 0
 19966  0050BC                     i2_updateServoPosition:
 19967                           	opt stack 22
 19968                           
 19969                           ;sort.c: 569: unsigned int my_time = 65535 - time_us;
 19970                           
 19971                           ;incstack = 0
 19972  0050BC  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 19973  0050C0  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 19974  0050C4  1E05               	comf	??i2_updateServoPosition,f,c
 19975  0050C6  1E06               	comf	??i2_updateServoPosition+1,f,c
 19976  0050C8  4A05               	infsnz	??i2_updateServoPosition,f,c
 19977  0050CA  2A06               	incf	??i2_updateServoPosition+1,f,c
 19978  0050CC  0EFF               	movlw	255
 19979  0050CE  2405               	addwf	??i2_updateServoPosition,w,c
 19980  0050D0  6E07               	movwf	i2updateServoPosition@my_time,c
 19981  0050D2  0EFF               	movlw	255
 19982  0050D4  2006               	addwfc	??i2_updateServoPosition+1,w,c
 19983  0050D6  6E08               	movwf	i2updateServoPosition@my_time+1,c
 19984                           
 19985                           ;sort.c: 570: switch(timer){
 19986  0050D8  D015               	goto	i2l9284
 19987  0050DA                     i2l9278:
 19988                           
 19989                           ;sort.c: 572: servoTimes[0] = my_time >> 8;
 19990  0050DA  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19991  0050DC  6E5B               	movwf	_servoTimes,c
 19992  0050DE  6A5C               	clrf	_servoTimes+1,c
 19993                           
 19994                           ;sort.c: 573: servoTimes[1] = my_time & 0xFF;
 19995  0050E0  5007               	movf	i2updateServoPosition@my_time,w,c
 19996  0050E2  6E5D               	movwf	_servoTimes+2,c
 19997  0050E4  6A5E               	clrf	_servoTimes+3,c
 19998                           
 19999                           ;sort.c: 575: pan_servo_state = time_us;
 20000  0050E6  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20001  0050EA  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20002  0050EE                     i2l935:
 20003                           
 20004                           ;sort.c: 577: servoTimes[2] = my_time >> 8;
 20005  0050EE  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20006  0050F0  6E5F               	movwf	_servoTimes+4,c
 20007  0050F2  6A60               	clrf	_servoTimes+5,c
 20008                           
 20009                           ;sort.c: 578: servoTimes[3] = my_time & 0xFF;
 20010  0050F4  5007               	movf	i2updateServoPosition@my_time,w,c
 20011  0050F6  6E61               	movwf	_servoTimes+6,c
 20012  0050F8  6A62               	clrf	_servoTimes+7,c
 20013                           
 20014                           ;sort.c: 580: tilt_servo_state = time_us;
 20015  0050FA  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20016  0050FE  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20017                           
 20018                           ;sort.c: 581: }
 20019  005102  0012               	return	
 20020  005104                     i2l9284:
 20021  005104  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20022  005108  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20023                           
 20024                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20025                           ; Switch size 1, requested type "space"
 20026                           ; Number of cases is 1, Range of values is 0 to 0
 20027                           ; switch strategies available:
 20028                           ; Name         Instructions Cycles
 20029                           ; simple_byte            4     3 (average)
 20030                           ;	Chosen strategy is simple_byte
 20031  00510C  5006               	movf	??i2_updateServoPosition+1,w,c
 20032  00510E  0A00               	xorlw	0	; case 0
 20033  005110  A4D8               	btfss	status,2,c
 20034  005112  0012               	return	
 20035                           
 20036                           ; Switch size 1, requested type "space"
 20037                           ; Number of cases is 2, Range of values is 1 to 3
 20038                           ; switch strategies available:
 20039                           ; Name         Instructions Cycles
 20040                           ; simple_byte            7     4 (average)
 20041                           ;	Chosen strategy is simple_byte
 20042  005114  5005               	movf	??i2_updateServoPosition,w,c
 20043  005116  0A01               	xorlw	1	; case 1
 20044  005118  B4D8               	btfsc	status,2,c
 20045  00511A  D7DF               	goto	i2l9278
 20046  00511C  0A02               	xorlw	2	; case 3
 20047  00511E  A4D8               	btfss	status,2,c
 20048  005120  0012               	return	
 20049  005122  D7E5               	goto	i2l935
 20050  005124                     __end_ofi2_updateServoPosition:
 20051                           	opt stack 0
 20052                           pclatu	equ	0xFFB
 20053                           pclath	equ	0xFFA
 20054                           tblptru	equ	0xFF8
 20055                           tblptrh	equ	0xFF7
 20056                           tblptrl	equ	0xFF6
 20057                           tablat	equ	0xFF5
 20058                           prodh	equ	0xFF4
 20059                           prodl	equ	0xFF3
 20060                           intcon	equ	0xFF2
 20061                           intcon2	equ	0xFF1
 20062                           intcon3	equ	0xFF0
 20063                           indf0	equ	0xFEF
 20064                           postinc0	equ	0xFEE
 20065                           fsr0h	equ	0xFEA
 20066                           fsr0l	equ	0xFE9
 20067                           wreg	equ	0xFE8
 20068                           postdec1	equ	0xFE5
 20069                           fsr1h	equ	0xFE2
 20070                           fsr1l	equ	0xFE1
 20071                           indf2	equ	0xFDF
 20072                           postinc2	equ	0xFDE
 20073                           postdec2	equ	0xFDD
 20074                           fsr2h	equ	0xFDA
 20075                           fsr2l	equ	0xFD9
 20076                           status	equ	0xFD8
 20077                           
 20078 ;; *************** function _updateMenu *****************
 20079 ;; Defined at:
 20080 ;;		line 216 in file "UI.c"
 20081 ;; Parameters:    Size  Location     Type
 20082 ;;		None
 20083 ;; Auto vars:     Size  Location     Type
 20084 ;;		None
 20085 ;; Return value:  Size  Location     Type
 20086 ;;                  1    wreg      void 
 20087 ;; Registers used:
 20088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20089 ;; Tracked objects:
 20090 ;;		On entry : 0/0
 20091 ;;		On exit  : 0/0
 20092 ;;		Unchanged: 0/0
 20093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20096 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20097 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20098 ;;Total ram usage:        2 bytes
 20099 ;; Hardware stack levels used:    1
 20100 ;; Hardware stack levels required when called:    5
 20101 ;; This function calls:
 20102 ;;		_change_state_to_logs_11
 20103 ;;		_change_state_to_logs_12
 20104 ;;		_change_state_to_logs_22
 20105 ;;		_change_state_to_logs_23
 20106 ;;		_change_state_to_logs_33
 20107 ;;		_change_state_to_logs_34
 20108 ;;		_change_state_to_menu_11
 20109 ;;		_change_state_to_menu_23
 20110 ;;		_dispLogs
 20111 ;;		_inputHandler
 20112 ;;		i2_change_state_to_menu_12
 20113 ;;		i2_change_state_to_menu_22
 20114 ;;		i2_change_state_to_menu_start
 20115 ;; This function is called by:
 20116 ;;		_handler
 20117 ;; This function uses a non-reentrant model
 20118 ;;
 20119                           
 20120                           	psect	text67
 20121  003264                     __ptext67:
 20122                           	opt stack 0
 20123  003264                     _updateMenu:
 20124                           	opt stack 18
 20125                           
 20126                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20127                           
 20128                           ;incstack = 0
 20129  003264  0E00               	movlw	0
 20130  003266  6E76               	movwf	_up+1,c
 20131  003268  0E00               	movlw	0
 20132  00326A  6E75               	movwf	_up,c
 20133  00326C  0E00               	movlw	0
 20134  00326E  6E66               	movwf	_down+1,c
 20135  003270  0E00               	movlw	0
 20136  003272  6E65               	movwf	_down,c
 20137  003274  0E00               	movlw	0
 20138  003276  6E68               	movwf	_enter+1,c
 20139  003278  0E00               	movlw	0
 20140  00327A  6E67               	movwf	_enter,c
 20141  00327C  0E00               	movlw	0
 20142  00327E  6E64               	movwf	_back+1,c
 20143  003280  0E00               	movlw	0
 20144  003282  6E63               	movwf	_back,c
 20145                           
 20146                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20147  003284  9EF2               	bcf	intcon,7,c	;volatile
 20148                           
 20149                           ;UI.c: 220: if (inputHandler()
 20150                           ;UI.c: 223: ){
 20151  003286  ECAD  F01B         	call	_inputHandler	;wreg free
 20152  00328A  502A               	movf	?_inputHandler,w,c
 20153  00328C  102B               	iorwf	?_inputHandler+1,w,c
 20154  00328E  A4D8               	btfss	status,2,c
 20155  003290  D112               	goto	i2l9854
 20156  003292  D146               	goto	i2l268
 20157  003294                     i2l9706:
 20158                           
 20159                           ;UI.c: 227: change_state_to_menu_11();
 20160  003294  ECF3  F02B         	call	_change_state_to_menu_11	;wreg free
 20161                           
 20162                           ;UI.c: 228: break;
 20163  003298  D143               	goto	i2l268
 20164  00329A                     i2l9708:
 20165                           
 20166                           ;UI.c: 231: if(up){
 20167  00329A  5075               	movf	_up,w,c
 20168  00329C  1076               	iorwf	_up+1,w,c
 20169  00329E  B4D8               	btfsc	status,2,c
 20170  0032A0  D003               	goto	i2l9712
 20171                           
 20172                           ;UI.c: 232: change_state_to_menu_23();
 20173  0032A2  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 20174                           
 20175                           ;UI.c: 233: }
 20176  0032A6  D13C               	goto	i2l268
 20177  0032A8                     i2l9712:
 20178                           
 20179                           ;UI.c: 234: else if(down){
 20180  0032A8  5065               	movf	_down,w,c
 20181  0032AA  1066               	iorwf	_down+1,w,c
 20182  0032AC  B4D8               	btfsc	status,2,c
 20183  0032AE  D003               	goto	i2l9716
 20184                           
 20185                           ;UI.c: 235: change_state_to_menu_12();
 20186  0032B0  ECC3  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20187                           
 20188                           ;UI.c: 236: }
 20189  0032B4  D135               	goto	i2l268
 20190  0032B6                     i2l9716:
 20191                           
 20192                           ;UI.c: 237: else if(enter){
 20193  0032B6  5067               	movf	_enter,w,c
 20194  0032B8  1068               	iorwf	_enter+1,w,c
 20195  0032BA  B4D8               	btfsc	status,2,c
 20196  0032BC  D131               	goto	i2l268
 20197                           
 20198                           ;UI.c: 238: change_state_to_menu_start();
 20199  0032BE  EC06  F02D         	call	i2_change_state_to_menu_start	;wreg free
 20200                           
 20201                           ;UI.c: 239: }
 20202                           ;UI.c: 240: break;
 20203  0032C2  D12E               	goto	i2l268
 20204  0032C4                     i2l9720:
 20205                           
 20206                           ;UI.c: 243: if(up){
 20207  0032C4  5075               	movf	_up,w,c
 20208  0032C6  1076               	iorwf	_up+1,w,c
 20209  0032C8  B4D8               	btfsc	status,2,c
 20210  0032CA  D003               	goto	i2l9724
 20211                           
 20212                           ;UI.c: 244: change_state_to_menu_11();
 20213  0032CC  ECF3  F02B         	call	_change_state_to_menu_11	;wreg free
 20214                           
 20215                           ;UI.c: 245: }
 20216  0032D0  D127               	goto	i2l268
 20217  0032D2                     i2l9724:
 20218                           
 20219                           ;UI.c: 246: else if(down){
 20220  0032D2  5065               	movf	_down,w,c
 20221  0032D4  1066               	iorwf	_down+1,w,c
 20222  0032D6  B4D8               	btfsc	status,2,c
 20223  0032D8  D011               	goto	i2l9740
 20224                           
 20225                           ;UI.c: 247: change_state_to_menu_23();
 20226  0032DA  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 20227                           
 20228                           ;UI.c: 248: }
 20229  0032DE  D120               	goto	i2l268
 20230  0032E0                     i2l9732:
 20231                           
 20232                           ;UI.c: 255: if(up){
 20233  0032E0  5075               	movf	_up,w,c
 20234  0032E2  1076               	iorwf	_up+1,w,c
 20235  0032E4  B4D8               	btfsc	status,2,c
 20236  0032E6  D003               	goto	i2l9736
 20237                           
 20238                           ;UI.c: 256: change_state_to_menu_11();
 20239  0032E8  ECF3  F02B         	call	_change_state_to_menu_11	;wreg free
 20240                           
 20241                           ;UI.c: 257: }
 20242  0032EC  D119               	goto	i2l268
 20243  0032EE                     i2l9736:
 20244                           
 20245                           ;UI.c: 258: else if(down){
 20246  0032EE  5065               	movf	_down,w,c
 20247  0032F0  1066               	iorwf	_down+1,w,c
 20248  0032F2  B4D8               	btfsc	status,2,c
 20249  0032F4  D003               	goto	i2l9740
 20250                           
 20251                           ;UI.c: 259: change_state_to_menu_23();
 20252  0032F6  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 20253                           
 20254                           ;UI.c: 260: }
 20255  0032FA  D112               	goto	i2l268
 20256  0032FC                     i2l9740:
 20257                           
 20258                           ;UI.c: 261: else if(enter){
 20259  0032FC  5067               	movf	_enter,w,c
 20260  0032FE  1068               	iorwf	_enter+1,w,c
 20261  003300  B4D8               	btfsc	status,2,c
 20262  003302  D10E               	goto	i2l268
 20263                           
 20264                           ;UI.c: 262: machine_state = Sorting_state;
 20265  003304  0E01               	movlw	1
 20266  003306  0100               	movlb	0	; () banked
 20267  003308  6FFC               	movwf	_machine_state& (0+255),b
 20268                           
 20269                           ; BSR set to: 0
 20270                           ;UI.c: 263: }
 20271                           ;UI.c: 264: break;
 20272                           
 20273                           ; BSR set to: 0
 20274                           
 20275                           ; BSR set to: 0
 20276  00330A  D10A               	goto	i2l268
 20277  00330C                     i2l9744:
 20278                           
 20279                           ;UI.c: 267: if(up){
 20280  00330C  5075               	movf	_up,w,c
 20281  00330E  1076               	iorwf	_up+1,w,c
 20282  003310  B4D8               	btfsc	status,2,c
 20283  003312  D003               	goto	i2l9748
 20284                           
 20285                           ;UI.c: 268: change_state_to_menu_22();
 20286  003314  ECAB  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20287                           
 20288                           ;UI.c: 269: }
 20289  003318  D103               	goto	i2l268
 20290  00331A                     i2l9748:
 20291                           
 20292                           ;UI.c: 270: else if(down){
 20293  00331A  5065               	movf	_down,w,c
 20294  00331C  1066               	iorwf	_down+1,w,c
 20295  00331E  B4D8               	btfsc	status,2,c
 20296  003320  D003               	goto	i2l9752
 20297                           
 20298                           ;UI.c: 271: change_state_to_menu_11();
 20299  003322  ECF3  F02B         	call	_change_state_to_menu_11	;wreg free
 20300                           
 20301                           ;UI.c: 272: }
 20302  003326  D0FC               	goto	i2l268
 20303  003328                     i2l9752:
 20304                           
 20305                           ;UI.c: 273: else if(enter){
 20306  003328  5067               	movf	_enter,w,c
 20307  00332A  1068               	iorwf	_enter+1,w,c
 20308  00332C  B4D8               	btfsc	status,2,c
 20309  00332E  D0F8               	goto	i2l268
 20310                           
 20311                           ;UI.c: 274: change_state_to_logs_11();
 20312  003330  EC6B  F02C         	call	_change_state_to_logs_11	;wreg free
 20313                           
 20314                           ;UI.c: 275: }
 20315                           ;UI.c: 276: break;
 20316  003334  D0F5               	goto	i2l268
 20317  003336                     i2l9756:
 20318                           
 20319                           ;UI.c: 279: if(up){
 20320  003336  5075               	movf	_up,w,c
 20321  003338  1076               	iorwf	_up+1,w,c
 20322  00333A  B4D8               	btfsc	status,2,c
 20323  00333C  D003               	goto	i2l9760
 20324                           
 20325                           ;UI.c: 280: change_state_to_logs_34();
 20326  00333E  EC0B  F02C         	call	_change_state_to_logs_34	;wreg free
 20327                           
 20328                           ;UI.c: 281: }
 20329  003342  D0EE               	goto	i2l268
 20330  003344                     i2l9760:
 20331                           
 20332                           ;UI.c: 282: else if(down){
 20333  003344  5065               	movf	_down,w,c
 20334  003346  1066               	iorwf	_down+1,w,c
 20335  003348  B4D8               	btfsc	status,2,c
 20336  00334A  D003               	goto	i2l9764
 20337                           
 20338                           ;UI.c: 283: change_state_to_logs_12();
 20339  00334C  EC53  F02C         	call	_change_state_to_logs_12	;wreg free
 20340                           
 20341                           ;UI.c: 284: }
 20342  003350  D0E7               	goto	i2l268
 20343  003352                     i2l9764:
 20344                           
 20345                           ;UI.c: 285: else if(enter){
 20346  003352  5067               	movf	_enter,w,c
 20347  003354  1068               	iorwf	_enter+1,w,c
 20348  003356  B4D8               	btfsc	status,2,c
 20349  003358  D007               	goto	i2l9768
 20350                           
 20351                           ;UI.c: 286: dispLogs(1);
 20352  00335A  0E00               	movlw	0
 20353  00335C  6E13               	movwf	dispLogs@myLog+1,c
 20354  00335E  0E01               	movlw	1
 20355  003360  6E12               	movwf	dispLogs@myLog,c
 20356  003362  EC40  F02D         	call	_dispLogs	;wreg free
 20357                           
 20358                           ;UI.c: 287: }
 20359  003366  D0DC               	goto	i2l268
 20360  003368                     i2l9768:
 20361                           
 20362                           ;UI.c: 288: else if(back){
 20363  003368  5063               	movf	_back,w,c
 20364  00336A  1064               	iorwf	_back+1,w,c
 20365  00336C  B4D8               	btfsc	status,2,c
 20366  00336E  D0D8               	goto	i2l268
 20367                           
 20368                           ;UI.c: 289: change_state_to_menu_23();
 20369  003370  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 20370                           
 20371                           ;UI.c: 290: }
 20372                           ;UI.c: 291: break;
 20373  003374  D0D5               	goto	i2l268
 20374  003376                     i2l9772:
 20375                           
 20376                           ;UI.c: 294: if(up){
 20377  003376  5075               	movf	_up,w,c
 20378  003378  1076               	iorwf	_up+1,w,c
 20379  00337A  B4D8               	btfsc	status,2,c
 20380  00337C  D003               	goto	i2l9776
 20381                           
 20382                           ;UI.c: 295: change_state_to_logs_11();
 20383  00337E  EC6B  F02C         	call	_change_state_to_logs_11	;wreg free
 20384                           
 20385                           ;UI.c: 296: }
 20386  003382  D0CE               	goto	i2l268
 20387  003384                     i2l9776:
 20388                           
 20389                           ;UI.c: 297: else if(down){
 20390  003384  5065               	movf	_down,w,c
 20391  003386  1066               	iorwf	_down+1,w,c
 20392  003388  B4D8               	btfsc	status,2,c
 20393  00338A  D003               	goto	i2l9780
 20394                           
 20395                           ;UI.c: 298: change_state_to_logs_23();
 20396  00338C  EC9A  F02C         	call	_change_state_to_logs_23	;wreg free
 20397                           
 20398                           ;UI.c: 299: }
 20399  003390  D0C7               	goto	i2l268
 20400  003392                     i2l9780:
 20401                           
 20402                           ;UI.c: 300: else if(enter){
 20403  003392  5067               	movf	_enter,w,c
 20404  003394  1068               	iorwf	_enter+1,w,c
 20405  003396  B4D8               	btfsc	status,2,c
 20406  003398  D007               	goto	i2l9784
 20407                           
 20408                           ;UI.c: 301: dispLogs(2);
 20409  00339A  0E00               	movlw	0
 20410  00339C  6E13               	movwf	dispLogs@myLog+1,c
 20411  00339E  0E02               	movlw	2
 20412  0033A0  6E12               	movwf	dispLogs@myLog,c
 20413  0033A2  EC40  F02D         	call	_dispLogs	;wreg free
 20414                           
 20415                           ;UI.c: 302: }
 20416  0033A6  D0BC               	goto	i2l268
 20417  0033A8                     i2l9784:
 20418                           
 20419                           ;UI.c: 303: else if(back){
 20420  0033A8  5063               	movf	_back,w,c
 20421  0033AA  1064               	iorwf	_back+1,w,c
 20422  0033AC  B4D8               	btfsc	status,2,c
 20423  0033AE  D0B8               	goto	i2l268
 20424                           
 20425                           ;UI.c: 304: change_state_to_menu_23();
 20426  0033B0  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 20427                           
 20428                           ;UI.c: 305: }
 20429                           ;UI.c: 306: break;
 20430  0033B4  D0B5               	goto	i2l268
 20431  0033B6                     i2l9788:
 20432                           
 20433                           ;UI.c: 309: if(up){
 20434  0033B6  5075               	movf	_up,w,c
 20435  0033B8  1076               	iorwf	_up+1,w,c
 20436  0033BA  B4D8               	btfsc	status,2,c
 20437  0033BC  D003               	goto	i2l9792
 20438                           
 20439                           ;UI.c: 310: change_state_to_logs_11();
 20440  0033BE  EC6B  F02C         	call	_change_state_to_logs_11	;wreg free
 20441                           
 20442                           ;UI.c: 311: }
 20443  0033C2  D0AE               	goto	i2l268
 20444  0033C4                     i2l9792:
 20445                           
 20446                           ;UI.c: 312: else if(down){
 20447  0033C4  5065               	movf	_down,w,c
 20448  0033C6  1066               	iorwf	_down+1,w,c
 20449  0033C8  B4D8               	btfsc	status,2,c
 20450  0033CA  D003               	goto	i2l9796
 20451                           
 20452                           ;UI.c: 313: change_state_to_logs_23();
 20453  0033CC  EC9A  F02C         	call	_change_state_to_logs_23	;wreg free
 20454                           
 20455                           ;UI.c: 314: }
 20456  0033D0  D0A7               	goto	i2l268
 20457  0033D2                     i2l9796:
 20458                           
 20459                           ;UI.c: 315: else if(enter){
 20460  0033D2  5067               	movf	_enter,w,c
 20461  0033D4  1068               	iorwf	_enter+1,w,c
 20462  0033D6  B4D8               	btfsc	status,2,c
 20463  0033D8  D007               	goto	i2l9800
 20464                           
 20465                           ;UI.c: 316: dispLogs(2);
 20466  0033DA  0E00               	movlw	0
 20467  0033DC  6E13               	movwf	dispLogs@myLog+1,c
 20468  0033DE  0E02               	movlw	2
 20469  0033E0  6E12               	movwf	dispLogs@myLog,c
 20470  0033E2  EC40  F02D         	call	_dispLogs	;wreg free
 20471                           
 20472                           ;UI.c: 317: }
 20473  0033E6  D09C               	goto	i2l268
 20474  0033E8                     i2l9800:
 20475                           
 20476                           ;UI.c: 318: else if(back){
 20477  0033E8  5063               	movf	_back,w,c
 20478  0033EA  1064               	iorwf	_back+1,w,c
 20479  0033EC  B4D8               	btfsc	status,2,c
 20480  0033EE  D098               	goto	i2l268
 20481                           
 20482                           ;UI.c: 319: change_state_to_menu_23();
 20483  0033F0  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 20484                           
 20485                           ;UI.c: 320: }
 20486                           ;UI.c: 321: break;
 20487  0033F4  D095               	goto	i2l268
 20488  0033F6                     i2l9804:
 20489                           
 20490                           ;UI.c: 324: if(up){
 20491  0033F6  5075               	movf	_up,w,c
 20492  0033F8  1076               	iorwf	_up+1,w,c
 20493  0033FA  B4D8               	btfsc	status,2,c
 20494  0033FC  D003               	goto	i2l9808
 20495                           
 20496                           ;UI.c: 325: change_state_to_logs_22();
 20497  0033FE  EC3B  F02C         	call	_change_state_to_logs_22	;wreg free
 20498                           
 20499                           ;UI.c: 326: }
 20500  003402  D08E               	goto	i2l268
 20501  003404                     i2l9808:
 20502                           
 20503                           ;UI.c: 327: else if(down){
 20504  003404  5065               	movf	_down,w,c
 20505  003406  1066               	iorwf	_down+1,w,c
 20506  003408  B4D8               	btfsc	status,2,c
 20507  00340A  D003               	goto	i2l9812
 20508                           
 20509                           ;UI.c: 328: change_state_to_logs_34();
 20510  00340C  EC0B  F02C         	call	_change_state_to_logs_34	;wreg free
 20511                           
 20512                           ;UI.c: 329: }
 20513  003410  D087               	goto	i2l268
 20514  003412                     i2l9812:
 20515                           
 20516                           ;UI.c: 330: else if(enter){
 20517  003412  5067               	movf	_enter,w,c
 20518  003414  1068               	iorwf	_enter+1,w,c
 20519  003416  B4D8               	btfsc	status,2,c
 20520  003418  D007               	goto	i2l9816
 20521                           
 20522                           ;UI.c: 331: dispLogs(3);
 20523  00341A  0E00               	movlw	0
 20524  00341C  6E13               	movwf	dispLogs@myLog+1,c
 20525  00341E  0E03               	movlw	3
 20526  003420  6E12               	movwf	dispLogs@myLog,c
 20527  003422  EC40  F02D         	call	_dispLogs	;wreg free
 20528                           
 20529                           ;UI.c: 332: }
 20530  003426  D07C               	goto	i2l268
 20531  003428                     i2l9816:
 20532                           
 20533                           ;UI.c: 333: else if(back){
 20534  003428  5063               	movf	_back,w,c
 20535  00342A  1064               	iorwf	_back+1,w,c
 20536  00342C  B4D8               	btfsc	status,2,c
 20537  00342E  D078               	goto	i2l268
 20538                           
 20539                           ;UI.c: 334: change_state_to_menu_23();
 20540  003430  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 20541                           
 20542                           ;UI.c: 335: }
 20543                           ;UI.c: 336: break;
 20544  003434  D075               	goto	i2l268
 20545  003436                     i2l9820:
 20546                           
 20547                           ;UI.c: 339: if(up){
 20548  003436  5075               	movf	_up,w,c
 20549  003438  1076               	iorwf	_up+1,w,c
 20550  00343A  B4D8               	btfsc	status,2,c
 20551  00343C  D003               	goto	i2l9824
 20552                           
 20553                           ;UI.c: 340: change_state_to_logs_22();
 20554  00343E  EC3B  F02C         	call	_change_state_to_logs_22	;wreg free
 20555                           
 20556                           ;UI.c: 341: }
 20557  003442  D06E               	goto	i2l268
 20558  003444                     i2l9824:
 20559                           
 20560                           ;UI.c: 342: else if(down){
 20561  003444  5065               	movf	_down,w,c
 20562  003446  1066               	iorwf	_down+1,w,c
 20563  003448  B4D8               	btfsc	status,2,c
 20564  00344A  D003               	goto	i2l9828
 20565                           
 20566                           ;UI.c: 343: change_state_to_logs_34();
 20567  00344C  EC0B  F02C         	call	_change_state_to_logs_34	;wreg free
 20568                           
 20569                           ;UI.c: 344: }
 20570  003450  D067               	goto	i2l268
 20571  003452                     i2l9828:
 20572                           
 20573                           ;UI.c: 345: else if(enter){
 20574  003452  5067               	movf	_enter,w,c
 20575  003454  1068               	iorwf	_enter+1,w,c
 20576  003456  B4D8               	btfsc	status,2,c
 20577  003458  D007               	goto	i2l9832
 20578                           
 20579                           ;UI.c: 346: dispLogs(3);
 20580  00345A  0E00               	movlw	0
 20581  00345C  6E13               	movwf	dispLogs@myLog+1,c
 20582  00345E  0E03               	movlw	3
 20583  003460  6E12               	movwf	dispLogs@myLog,c
 20584  003462  EC40  F02D         	call	_dispLogs	;wreg free
 20585                           
 20586                           ;UI.c: 347: }
 20587  003466  D05C               	goto	i2l268
 20588  003468                     i2l9832:
 20589                           
 20590                           ;UI.c: 348: else if(back){
 20591  003468  5063               	movf	_back,w,c
 20592  00346A  1064               	iorwf	_back+1,w,c
 20593  00346C  B4D8               	btfsc	status,2,c
 20594  00346E  D058               	goto	i2l268
 20595                           
 20596                           ;UI.c: 349: change_state_to_menu_23();
 20597  003470  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 20598                           
 20599                           ;UI.c: 350: }
 20600                           ;UI.c: 351: break;
 20601  003474  D055               	goto	i2l268
 20602  003476                     i2l9836:
 20603                           
 20604                           ;UI.c: 354: if(up){
 20605  003476  5075               	movf	_up,w,c
 20606  003478  1076               	iorwf	_up+1,w,c
 20607  00347A  B4D8               	btfsc	status,2,c
 20608  00347C  D003               	goto	i2l9840
 20609                           
 20610                           ;UI.c: 355: change_state_to_logs_33();
 20611  00347E  EC23  F02C         	call	_change_state_to_logs_33	;wreg free
 20612                           
 20613                           ;UI.c: 356: }
 20614  003482  D04E               	goto	i2l268
 20615  003484                     i2l9840:
 20616                           
 20617                           ;UI.c: 357: else if(down){
 20618  003484  5065               	movf	_down,w,c
 20619  003486  1066               	iorwf	_down+1,w,c
 20620  003488  B4D8               	btfsc	status,2,c
 20621  00348A  D003               	goto	i2l9844
 20622                           
 20623                           ;UI.c: 358: change_state_to_logs_11();
 20624  00348C  EC6B  F02C         	call	_change_state_to_logs_11	;wreg free
 20625                           
 20626                           ;UI.c: 359: }
 20627  003490  D047               	goto	i2l268
 20628  003492                     i2l9844:
 20629                           
 20630                           ;UI.c: 360: else if(enter){
 20631  003492  5067               	movf	_enter,w,c
 20632  003494  1068               	iorwf	_enter+1,w,c
 20633  003496  B4D8               	btfsc	status,2,c
 20634  003498  D007               	goto	i2l9848
 20635                           
 20636                           ;UI.c: 361: dispLogs(4);
 20637  00349A  0E00               	movlw	0
 20638  00349C  6E13               	movwf	dispLogs@myLog+1,c
 20639  00349E  0E04               	movlw	4
 20640  0034A0  6E12               	movwf	dispLogs@myLog,c
 20641  0034A2  EC40  F02D         	call	_dispLogs	;wreg free
 20642                           
 20643                           ;UI.c: 362: }
 20644  0034A6  D03C               	goto	i2l268
 20645  0034A8                     i2l9848:
 20646                           
 20647                           ;UI.c: 363: else if(back){
 20648  0034A8  5063               	movf	_back,w,c
 20649  0034AA  1064               	iorwf	_back+1,w,c
 20650  0034AC  B4D8               	btfsc	status,2,c
 20651  0034AE  D038               	goto	i2l268
 20652                           
 20653                           ;UI.c: 364: change_state_to_menu_23();
 20654  0034B0  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 20655                           
 20656                           ;UI.c: 370: }
 20657                           
 20658                           ;UI.c: 369: break;
 20659                           
 20660                           ;UI.c: 368: default:
 20661                           
 20662                           ;UI.c: 365: }
 20663                           ;UI.c: 366: break;
 20664  0034B4  D035               	goto	i2l268
 20665  0034B6                     i2l9854:
 20666  0034B6  C0E6  F043         	movff	_cur_state,??_updateMenu
 20667  0034BA  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20668                           
 20669                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20670                           ; Switch size 1, requested type "space"
 20671                           ; Number of cases is 3, Range of values is 0 to 4
 20672                           ; switch strategies available:
 20673                           ; Name         Instructions Cycles
 20674                           ; simple_byte           10     6 (average)
 20675                           ;	Chosen strategy is simple_byte
 20676  0034BE  5044               	movf	??_updateMenu+1,w,c
 20677  0034C0  0A00               	xorlw	0	; case 0
 20678  0034C2  B4D8               	btfsc	status,2,c
 20679  0034C4  D007               	goto	i2l10826
 20680  0034C6  0A03               	xorlw	3	; case 3
 20681  0034C8  B4D8               	btfsc	status,2,c
 20682  0034CA  D015               	goto	i2l10828
 20683  0034CC  0A07               	xorlw	7	; case 4
 20684  0034CE  B4D8               	btfsc	status,2,c
 20685  0034D0  D020               	goto	i2l10830
 20686  0034D2  D026               	goto	i2l268
 20687  0034D4                     i2l10826:
 20688                           
 20689                           ; Switch size 1, requested type "space"
 20690                           ; Number of cases is 5, Range of values is 0 to 23
 20691                           ; switch strategies available:
 20692                           ; Name         Instructions Cycles
 20693                           ; simple_byte           16     9 (average)
 20694                           ;	Chosen strategy is simple_byte
 20695  0034D4  5043               	movf	??_updateMenu,w,c
 20696  0034D6  0A00               	xorlw	0	; case 0
 20697  0034D8  B4D8               	btfsc	status,2,c
 20698  0034DA  D6DC               	goto	i2l9706
 20699  0034DC  0A0B               	xorlw	11	; case 11
 20700  0034DE  B4D8               	btfsc	status,2,c
 20701  0034E0  D6DC               	goto	i2l9708
 20702  0034E2  0A07               	xorlw	7	; case 12
 20703  0034E4  B4D8               	btfsc	status,2,c
 20704  0034E6  D6EE               	goto	i2l9720
 20705  0034E8  0A1A               	xorlw	26	; case 22
 20706  0034EA  B4D8               	btfsc	status,2,c
 20707  0034EC  D6F9               	goto	i2l9732
 20708  0034EE  0A01               	xorlw	1	; case 23
 20709  0034F0  B4D8               	btfsc	status,2,c
 20710  0034F2  D70C               	goto	i2l9744
 20711  0034F4  D015               	goto	i2l268
 20712  0034F6                     i2l10828:
 20713                           
 20714                           ; Switch size 1, requested type "space"
 20715                           ; Number of cases is 4, Range of values is 243 to 255
 20716                           ; switch strategies available:
 20717                           ; Name         Instructions Cycles
 20718                           ; simple_byte           13     7 (average)
 20719                           ;	Chosen strategy is simple_byte
 20720  0034F6  5043               	movf	??_updateMenu,w,c
 20721  0034F8  0AF3               	xorlw	243	; case 243
 20722  0034FA  B4D8               	btfsc	status,2,c
 20723  0034FC  D71C               	goto	i2l9756
 20724  0034FE  0A07               	xorlw	7	; case 244
 20725  003500  B4D8               	btfsc	status,2,c
 20726  003502  D739               	goto	i2l9772
 20727  003504  0A0A               	xorlw	10	; case 254
 20728  003506  B4D8               	btfsc	status,2,c
 20729  003508  D756               	goto	i2l9788
 20730  00350A  0A01               	xorlw	1	; case 255
 20731  00350C  B4D8               	btfsc	status,2,c
 20732  00350E  D773               	goto	i2l9804
 20733  003510  D007               	goto	i2l268
 20734  003512                     i2l10830:
 20735                           
 20736                           ; Switch size 1, requested type "space"
 20737                           ; Number of cases is 2, Range of values is 9 to 10
 20738                           ; switch strategies available:
 20739                           ; Name         Instructions Cycles
 20740                           ; simple_byte            7     4 (average)
 20741                           ;	Chosen strategy is simple_byte
 20742  003512  5043               	movf	??_updateMenu,w,c
 20743  003514  0A09               	xorlw	9	; case 9
 20744  003516  B4D8               	btfsc	status,2,c
 20745  003518  D78E               	goto	i2l9820
 20746  00351A  0A03               	xorlw	3	; case 10
 20747  00351C  B4D8               	btfsc	status,2,c
 20748  00351E  D7AB               	goto	i2l9836
 20749  003520                     i2l268:
 20750                           
 20751                           ;UI.c: 371: }
 20752                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20753  003520  8EF2               	bsf	intcon,7,c	;volatile
 20754  003522  0012               	return		;funcret
 20755  003524                     __end_of_updateMenu:
 20756                           	opt stack 0
 20757                           pclatu	equ	0xFFB
 20758                           pclath	equ	0xFFA
 20759                           tblptru	equ	0xFF8
 20760                           tblptrh	equ	0xFF7
 20761                           tblptrl	equ	0xFF6
 20762                           tablat	equ	0xFF5
 20763                           prodh	equ	0xFF4
 20764                           prodl	equ	0xFF3
 20765                           intcon	equ	0xFF2
 20766                           intcon2	equ	0xFF1
 20767                           intcon3	equ	0xFF0
 20768                           indf0	equ	0xFEF
 20769                           postinc0	equ	0xFEE
 20770                           fsr0h	equ	0xFEA
 20771                           fsr0l	equ	0xFE9
 20772                           wreg	equ	0xFE8
 20773                           postdec1	equ	0xFE5
 20774                           fsr1h	equ	0xFE2
 20775                           fsr1l	equ	0xFE1
 20776                           indf2	equ	0xFDF
 20777                           postinc2	equ	0xFDE
 20778                           postdec2	equ	0xFDD
 20779                           fsr2h	equ	0xFDA
 20780                           fsr2l	equ	0xFD9
 20781                           status	equ	0xFD8
 20782                           
 20783 ;; *************** function i2_change_state_to_menu_start *****************
 20784 ;; Defined at:
 20785 ;;		line 477 in file "UI.c"
 20786 ;; Parameters:    Size  Location     Type
 20787 ;;		None
 20788 ;; Auto vars:     Size  Location     Type
 20789 ;;		None
 20790 ;; Return value:  Size  Location     Type
 20791 ;;                  1    wreg      void 
 20792 ;; Registers used:
 20793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20794 ;; Tracked objects:
 20795 ;;		On entry : 0/0
 20796 ;;		On exit  : 0/0
 20797 ;;		Unchanged: 0/0
 20798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20803 ;;Total ram usage:        0 bytes
 20804 ;; Hardware stack levels used:    1
 20805 ;; Hardware stack levels required when called:    4
 20806 ;; This function calls:
 20807 ;;		i2_lcdInst
 20808 ;;		i2_printRTC
 20809 ;;		i2_printf
 20810 ;; This function is called by:
 20811 ;;		_updateMenu
 20812 ;;		_handler
 20813 ;; This function uses a non-reentrant model
 20814 ;;
 20815                           
 20816                           	psect	text68
 20817  005A0C                     __ptext68:
 20818                           	opt stack 0
 20819  005A0C                     i2_change_state_to_menu_start:
 20820                           	opt stack 19
 20821                           
 20822                           ;UI.c: 478: cur_state = 0;
 20823                           
 20824                           ;incstack = 0
 20825  005A0C  0E00               	movlw	0
 20826  005A0E  0100               	movlb	0	; () banked
 20827  005A10  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20828  005A12  0E00               	movlw	0
 20829  005A14  6FE6               	movwf	_cur_state& (0+255),b
 20830                           
 20831                           ; BSR set to: 0
 20832                           ;UI.c: 480: lcdInst(0b10000000);;
 20833  005A16  0E80               	movlw	128
 20834  005A18  ECEA  F02D         	call	i2_lcdInst
 20835                           
 20836                           ;UI.c: 481: printRTC();
 20837  005A1C  EC92  F01A         	call	i2_printRTC	;wreg free
 20838                           
 20839                           ;UI.c: 482: lcdInst(0b11000000);;
 20840  005A20  0EC0               	movlw	192
 20841  005A22  ECEA  F02D         	call	i2_lcdInst
 20842                           
 20843                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20844  005A26  0EEA               	movlw	low STR_30
 20845  005A28  6E0D               	movwf	i2printf@f,c
 20846  005A2A  0EFD               	movlw	high STR_30
 20847  005A2C  6E0E               	movwf	i2printf@f+1,c
 20848  005A2E  ECA0  F011         	call	i2_printf	;wreg free
 20849  005A32  0012               	return		;funcret
 20850  005A34                     __end_ofi2_change_state_to_menu_start:
 20851                           	opt stack 0
 20852                           pclatu	equ	0xFFB
 20853                           pclath	equ	0xFFA
 20854                           tblptru	equ	0xFF8
 20855                           tblptrh	equ	0xFF7
 20856                           tblptrl	equ	0xFF6
 20857                           tablat	equ	0xFF5
 20858                           prodh	equ	0xFF4
 20859                           prodl	equ	0xFF3
 20860                           intcon	equ	0xFF2
 20861                           intcon2	equ	0xFF1
 20862                           intcon3	equ	0xFF0
 20863                           indf0	equ	0xFEF
 20864                           postinc0	equ	0xFEE
 20865                           fsr0h	equ	0xFEA
 20866                           fsr0l	equ	0xFE9
 20867                           wreg	equ	0xFE8
 20868                           postdec1	equ	0xFE5
 20869                           fsr1h	equ	0xFE2
 20870                           fsr1l	equ	0xFE1
 20871                           indf2	equ	0xFDF
 20872                           postinc2	equ	0xFDE
 20873                           postdec2	equ	0xFDD
 20874                           fsr2h	equ	0xFDA
 20875                           fsr2l	equ	0xFD9
 20876                           status	equ	0xFD8
 20877                           
 20878 ;; *************** function i2_printRTC *****************
 20879 ;; Defined at:
 20880 ;;		line 63 in file "RTC.c"
 20881 ;; Parameters:    Size  Location     Type
 20882 ;;		None
 20883 ;; Auto vars:     Size  Location     Type
 20884 ;;  printRTC       14   44[COMRAM] int [7]
 20885 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20886 ;;  printRTC        2   64[COMRAM] int 
 20887 ;;  printRTC        2   58[COMRAM] int 
 20888 ;; Return value:  Size  Location     Type
 20889 ;;                  1    wreg      void 
 20890 ;; Registers used:
 20891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20892 ;; Tracked objects:
 20893 ;;		On entry : 0/0
 20894 ;;		On exit  : 0/0
 20895 ;;		Unchanged: 0/0
 20896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20898 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20899 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20900 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20901 ;;Total ram usage:       25 bytes
 20902 ;; Hardware stack levels used:    1
 20903 ;; Hardware stack levels required when called:    3
 20904 ;; This function calls:
 20905 ;;		i2_getRTC
 20906 ;;		i2_lcdInst
 20907 ;;		i2_printf
 20908 ;;		i2_strcpy
 20909 ;; This function is called by:
 20910 ;;		i2_change_state_to_menu_start
 20911 ;; This function uses a non-reentrant model
 20912 ;;
 20913                           
 20914                           	psect	text69
 20915  003524                     __ptext69:
 20916                           	opt stack 0
 20917  003524                     i2_printRTC:
 20918                           	opt stack 19
 20919                           
 20920                           ;RTC.c: 64: getRTC();
 20921                           
 20922                           ;incstack = 0
 20923  003524  ECB7  F027         	call	i2_getRTC	;wreg free
 20924                           
 20925                           ;RTC.c: 65: char month[] = "MMM";
 20926  003528  C14F  F03D         	movff	printRTC@F3237,i2printRTC@month
 20927  00352C  C150  F03E         	movff	printRTC@F3237+1,i2printRTC@month+1
 20928  003530  C151  F03F         	movff	printRTC@F3237+2,i2printRTC@month+2
 20929  003534  C152  F040         	movff	printRTC@F3237+3,i2printRTC@month+3
 20930                           
 20931                           ;RTC.c: 66: int INT_time[7];
 20932                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 20933  003538  0E00               	movlw	0
 20934  00353A  6E42               	movwf	i2printRTC@i+1,c
 20935  00353C  0E00               	movlw	0
 20936  00353E  6E41               	movwf	i2printRTC@i,c
 20937  003540  BE42               	btfsc	i2printRTC@i+1,7,c
 20938  003542  D006               	goto	i2l7612
 20939  003544  5042               	movf	i2printRTC@i+1,w,c
 20940  003546  E135               	bnz	i2l627
 20941  003548  0E07               	movlw	7
 20942  00354A  5C41               	subwf	i2printRTC@i,w,c
 20943  00354C  B0D8               	btfsc	status,0,c
 20944  00354E  D031               	goto	i2l627
 20945  003550                     i2l7612:
 20946                           
 20947                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20948  003550  0E1C               	movlw	low _time
 20949  003552  2441               	addwf	i2printRTC@i,w,c
 20950  003554  6ED9               	movwf	fsr2l,c
 20951  003556  0E01               	movlw	high _time
 20952  003558  2042               	addwfc	i2printRTC@i+1,w,c
 20953  00355A  6EDA               	movwf	fsr2h,c
 20954  00355C  50DF               	movf	indf2,w,c
 20955  00355E  6E2A               	movwf	??i2_printRTC& (0+255),c
 20956  003560  3A2A               	swapf	??i2_printRTC,f,c
 20957  003562  0E0F               	movlw	15
 20958  003564  162A               	andwf	??i2_printRTC,f,c
 20959  003566  0E0F               	movlw	15
 20960  003568  162A               	andwf	??i2_printRTC,f,c
 20961  00356A  502A               	movf	??i2_printRTC,w,c
 20962  00356C  0D0A               	mullw	10
 20963  00356E  0E1C               	movlw	low _time
 20964  003570  2441               	addwf	i2printRTC@i,w,c
 20965  003572  6ED9               	movwf	fsr2l,c
 20966  003574  0E01               	movlw	high _time
 20967  003576  2042               	addwfc	i2printRTC@i+1,w,c
 20968  003578  6EDA               	movwf	fsr2h,c
 20969  00357A  50DF               	movf	indf2,w,c
 20970  00357C  0B0F               	andlw	15
 20971  00357E  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 20972  003580  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 20973  003582  50F3               	movf	prodl,w,c
 20974  003584  262B               	addwf	??i2_printRTC+1,f,c
 20975  003586  50F4               	movf	prodh,w,c
 20976  003588  222C               	addwfc	??i2_printRTC+2,f,c
 20977  00358A  90D8               	bcf	status,0,c
 20978  00358C  3441               	rlcf	i2printRTC@i,w,c
 20979  00358E  6ED9               	movwf	fsr2l,c
 20980  003590  3442               	rlcf	i2printRTC@i+1,w,c
 20981  003592  6EDA               	movwf	fsr2h,c
 20982  003594  0E2D               	movlw	low i2printRTC@INT_time
 20983  003596  26D9               	addwf	fsr2l,f,c
 20984  003598  0E00               	movlw	high i2printRTC@INT_time
 20985  00359A  22DA               	addwfc	fsr2h,f,c
 20986  00359C  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 20987  0035A0  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 20988  0035A4  4A41               	infsnz	i2printRTC@i,f,c
 20989  0035A6  2A42               	incf	i2printRTC@i+1,f,c
 20990  0035A8  BE42               	btfsc	i2printRTC@i+1,7,c
 20991  0035AA  D7D2               	goto	i2l7612
 20992  0035AC  5042               	movf	i2printRTC@i+1,w,c
 20993  0035AE  E101               	bnz	i2u632_40
 20994  0035B0  D7CB               	goto	L16
 20995  0035B2                     i2u632_40:
 20996  0035B2                     i2l627:
 20997                           
 20998                           ;RTC.c: 69: }
 20999                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21000  0035B2  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21001  0035B6  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21002                           
 21003                           ;RTC.c: 72: switch(RTC_month){
 21004  0035BA  D084               	goto	i2l7644
 21005  0035BC                     i2l7618:
 21006                           
 21007                           ;RTC.c: 74: strcpy(month, "JAN");
 21008  0035BC  0E3D               	movlw	low i2printRTC@month
 21009  0035BE  6E01               	movwf	i2strcpy@to,c
 21010  0035C0  0E00               	movlw	high i2printRTC@month
 21011  0035C2  6E02               	movwf	i2strcpy@to+1,c
 21012  0035C4  0EDA               	movlw	low STR_8
 21013  0035C6  6E03               	movwf	i2strcpy@from,c
 21014  0035C8  0EFF               	movlw	high STR_8
 21015  0035CA  6E04               	movwf	i2strcpy@from+1,c
 21016  0035CC  EC7A  F02B         	call	i2_strcpy	;wreg free
 21017                           
 21018                           ;RTC.c: 75: break;
 21019  0035D0  D0A6               	goto	i2l7646
 21020  0035D2                     i2l7620:
 21021                           
 21022                           ;RTC.c: 77: strcpy(month, "FEB");
 21023  0035D2  0E3D               	movlw	low i2printRTC@month
 21024  0035D4  6E01               	movwf	i2strcpy@to,c
 21025  0035D6  0E00               	movlw	high i2printRTC@month
 21026  0035D8  6E02               	movwf	i2strcpy@to+1,c
 21027  0035DA  0ECA               	movlw	low STR_9
 21028  0035DC  6E03               	movwf	i2strcpy@from,c
 21029  0035DE  0EFF               	movlw	high STR_9
 21030  0035E0  6E04               	movwf	i2strcpy@from+1,c
 21031  0035E2  EC7A  F02B         	call	i2_strcpy	;wreg free
 21032                           
 21033                           ;RTC.c: 78: break;
 21034  0035E6  D09B               	goto	i2l7646
 21035  0035E8                     i2l7622:
 21036                           
 21037                           ;RTC.c: 80: strcpy(month, "MAR");
 21038  0035E8  0E3D               	movlw	low i2printRTC@month
 21039  0035EA  6E01               	movwf	i2strcpy@to,c
 21040  0035EC  0E00               	movlw	high i2printRTC@month
 21041  0035EE  6E02               	movwf	i2strcpy@to+1,c
 21042  0035F0  0EE6               	movlw	low STR_10
 21043  0035F2  6E03               	movwf	i2strcpy@from,c
 21044  0035F4  0EFF               	movlw	high STR_10
 21045  0035F6  6E04               	movwf	i2strcpy@from+1,c
 21046  0035F8  EC7A  F02B         	call	i2_strcpy	;wreg free
 21047                           
 21048                           ;RTC.c: 81: break;
 21049  0035FC  D090               	goto	i2l7646
 21050  0035FE                     i2l7624:
 21051                           
 21052                           ;RTC.c: 83: strcpy(month, "APR");
 21053  0035FE  0E3D               	movlw	low i2printRTC@month
 21054  003600  6E01               	movwf	i2strcpy@to,c
 21055  003602  0E00               	movlw	high i2printRTC@month
 21056  003604  6E02               	movwf	i2strcpy@to+1,c
 21057  003606  0EEA               	movlw	low STR_11
 21058  003608  6E03               	movwf	i2strcpy@from,c
 21059  00360A  0EFF               	movlw	high STR_11
 21060  00360C  6E04               	movwf	i2strcpy@from+1,c
 21061  00360E  EC7A  F02B         	call	i2_strcpy	;wreg free
 21062                           
 21063                           ;RTC.c: 84: break;
 21064  003612  D085               	goto	i2l7646
 21065  003614                     i2l7626:
 21066                           
 21067                           ;RTC.c: 86: strcpy(month, "MAY");
 21068  003614  0E3D               	movlw	low i2printRTC@month
 21069  003616  6E01               	movwf	i2strcpy@to,c
 21070  003618  0E00               	movlw	high i2printRTC@month
 21071  00361A  6E02               	movwf	i2strcpy@to+1,c
 21072  00361C  0EFA               	movlw	low STR_12
 21073  00361E  6E03               	movwf	i2strcpy@from,c
 21074  003620  0EFF               	movlw	high STR_12
 21075  003622  6E04               	movwf	i2strcpy@from+1,c
 21076  003624  EC7A  F02B         	call	i2_strcpy	;wreg free
 21077                           
 21078                           ;RTC.c: 87: break;
 21079  003628  D07A               	goto	i2l7646
 21080  00362A                     i2l7628:
 21081                           
 21082                           ;RTC.c: 89: strcpy(month, "JUN");
 21083  00362A  0E3D               	movlw	low i2printRTC@month
 21084  00362C  6E01               	movwf	i2strcpy@to,c
 21085  00362E  0E00               	movlw	high i2printRTC@month
 21086  003630  6E02               	movwf	i2strcpy@to+1,c
 21087  003632  0EDE               	movlw	low STR_13
 21088  003634  6E03               	movwf	i2strcpy@from,c
 21089  003636  0EFF               	movlw	high STR_13
 21090  003638  6E04               	movwf	i2strcpy@from+1,c
 21091  00363A  EC7A  F02B         	call	i2_strcpy	;wreg free
 21092                           
 21093                           ;RTC.c: 90: break;
 21094  00363E  D06F               	goto	i2l7646
 21095  003640                     i2l7630:
 21096                           
 21097                           ;RTC.c: 92: strcpy(month, "JUL");
 21098  003640  0E3D               	movlw	low i2printRTC@month
 21099  003642  6E01               	movwf	i2strcpy@to,c
 21100  003644  0E00               	movlw	high i2printRTC@month
 21101  003646  6E02               	movwf	i2strcpy@to+1,c
 21102  003648  0ED6               	movlw	low STR_14
 21103  00364A  6E03               	movwf	i2strcpy@from,c
 21104  00364C  0EFF               	movlw	high STR_14
 21105  00364E  6E04               	movwf	i2strcpy@from+1,c
 21106  003650  EC7A  F02B         	call	i2_strcpy	;wreg free
 21107                           
 21108                           ;RTC.c: 93: break;
 21109  003654  D064               	goto	i2l7646
 21110  003656                     i2l7632:
 21111                           
 21112                           ;RTC.c: 95: strcpy(month, "AUG");
 21113  003656  0E3D               	movlw	low i2printRTC@month
 21114  003658  6E01               	movwf	i2strcpy@to,c
 21115  00365A  0E00               	movlw	high i2printRTC@month
 21116  00365C  6E02               	movwf	i2strcpy@to+1,c
 21117  00365E  0ED2               	movlw	low STR_15
 21118  003660  6E03               	movwf	i2strcpy@from,c
 21119  003662  0EFF               	movlw	high STR_15
 21120  003664  6E04               	movwf	i2strcpy@from+1,c
 21121  003666  EC7A  F02B         	call	i2_strcpy	;wreg free
 21122                           
 21123                           ;RTC.c: 96: break;
 21124  00366A  D059               	goto	i2l7646
 21125  00366C                     i2l7634:
 21126                           
 21127                           ;RTC.c: 98: strcpy(month, "SEP");
 21128  00366C  0E3D               	movlw	low i2printRTC@month
 21129  00366E  6E01               	movwf	i2strcpy@to,c
 21130  003670  0E00               	movlw	high i2printRTC@month
 21131  003672  6E02               	movwf	i2strcpy@to+1,c
 21132  003674  0EE2               	movlw	low STR_16
 21133  003676  6E03               	movwf	i2strcpy@from,c
 21134  003678  0EFF               	movlw	high STR_16
 21135  00367A  6E04               	movwf	i2strcpy@from+1,c
 21136  00367C  EC7A  F02B         	call	i2_strcpy	;wreg free
 21137                           
 21138                           ;RTC.c: 99: break;
 21139  003680  D04E               	goto	i2l7646
 21140  003682                     i2l7636:
 21141                           
 21142                           ;RTC.c: 101: strcpy(month, "OCT");
 21143  003682  0E3D               	movlw	low i2printRTC@month
 21144  003684  6E01               	movwf	i2strcpy@to,c
 21145  003686  0E00               	movlw	high i2printRTC@month
 21146  003688  6E02               	movwf	i2strcpy@to+1,c
 21147  00368A  0EF2               	movlw	low STR_17
 21148  00368C  6E03               	movwf	i2strcpy@from,c
 21149  00368E  0EFF               	movlw	high STR_17
 21150  003690  6E04               	movwf	i2strcpy@from+1,c
 21151  003692  EC7A  F02B         	call	i2_strcpy	;wreg free
 21152                           
 21153                           ;RTC.c: 102: break;
 21154  003696  D043               	goto	i2l7646
 21155  003698                     i2l7638:
 21156                           
 21157                           ;RTC.c: 104: strcpy(month, "NOV");
 21158  003698  0E3D               	movlw	low i2printRTC@month
 21159  00369A  6E01               	movwf	i2strcpy@to,c
 21160  00369C  0E00               	movlw	high i2printRTC@month
 21161  00369E  6E02               	movwf	i2strcpy@to+1,c
 21162  0036A0  0EF6               	movlw	low STR_18
 21163  0036A2  6E03               	movwf	i2strcpy@from,c
 21164  0036A4  0EFF               	movlw	high STR_18
 21165  0036A6  6E04               	movwf	i2strcpy@from+1,c
 21166  0036A8  EC7A  F02B         	call	i2_strcpy	;wreg free
 21167                           
 21168                           ;RTC.c: 105: break;
 21169  0036AC  D038               	goto	i2l7646
 21170  0036AE                     i2l7640:
 21171                           
 21172                           ;RTC.c: 107: strcpy(month, "DEC");
 21173  0036AE  0E3D               	movlw	low i2printRTC@month
 21174  0036B0  6E01               	movwf	i2strcpy@to,c
 21175  0036B2  0E00               	movlw	high i2printRTC@month
 21176  0036B4  6E02               	movwf	i2strcpy@to+1,c
 21177  0036B6  0ECE               	movlw	low STR_19
 21178  0036B8  6E03               	movwf	i2strcpy@from,c
 21179  0036BA  0EFF               	movlw	high STR_19
 21180  0036BC  6E04               	movwf	i2strcpy@from+1,c
 21181  0036BE  EC7A  F02B         	call	i2_strcpy	;wreg free
 21182                           
 21183                           ;RTC.c: 109: }
 21184                           
 21185                           ;RTC.c: 108: break;
 21186  0036C2  D02D               	goto	i2l7646
 21187  0036C4                     i2l7644:
 21188  0036C4  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21189  0036C8  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21190                           
 21191                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21192                           ; Switch size 1, requested type "space"
 21193                           ; Number of cases is 1, Range of values is 0 to 0
 21194                           ; switch strategies available:
 21195                           ; Name         Instructions Cycles
 21196                           ; simple_byte            4     3 (average)
 21197                           ;	Chosen strategy is simple_byte
 21198  0036CC  502B               	movf	??i2_printRTC+1,w,c
 21199  0036CE  0A00               	xorlw	0	; case 0
 21200  0036D0  A4D8               	btfss	status,2,c
 21201  0036D2  D025               	goto	i2l7646
 21202                           
 21203                           ; Switch size 1, requested type "space"
 21204                           ; Number of cases is 12, Range of values is 1 to 12
 21205                           ; switch strategies available:
 21206                           ; Name         Instructions Cycles
 21207                           ; simple_byte           37    19 (average)
 21208                           ;	Chosen strategy is simple_byte
 21209  0036D4  502A               	movf	??i2_printRTC,w,c
 21210  0036D6  0A01               	xorlw	1	; case 1
 21211  0036D8  B4D8               	btfsc	status,2,c
 21212  0036DA  D770               	goto	i2l7618
 21213  0036DC  0A03               	xorlw	3	; case 2
 21214  0036DE  B4D8               	btfsc	status,2,c
 21215  0036E0  D778               	goto	i2l7620
 21216  0036E2  0A01               	xorlw	1	; case 3
 21217  0036E4  B4D8               	btfsc	status,2,c
 21218  0036E6  D780               	goto	i2l7622
 21219  0036E8  0A07               	xorlw	7	; case 4
 21220  0036EA  B4D8               	btfsc	status,2,c
 21221  0036EC  D788               	goto	i2l7624
 21222  0036EE  0A01               	xorlw	1	; case 5
 21223  0036F0  B4D8               	btfsc	status,2,c
 21224  0036F2  D790               	goto	i2l7626
 21225  0036F4  0A03               	xorlw	3	; case 6
 21226  0036F6  B4D8               	btfsc	status,2,c
 21227  0036F8  D798               	goto	i2l7628
 21228  0036FA  0A01               	xorlw	1	; case 7
 21229  0036FC  B4D8               	btfsc	status,2,c
 21230  0036FE  D7A0               	goto	i2l7630
 21231  003700  0A0F               	xorlw	15	; case 8
 21232  003702  B4D8               	btfsc	status,2,c
 21233  003704  D7A8               	goto	i2l7632
 21234  003706  0A01               	xorlw	1	; case 9
 21235  003708  B4D8               	btfsc	status,2,c
 21236  00370A  D7B0               	goto	i2l7634
 21237  00370C  0A03               	xorlw	3	; case 10
 21238  00370E  B4D8               	btfsc	status,2,c
 21239  003710  D7B8               	goto	i2l7636
 21240  003712  0A01               	xorlw	1	; case 11
 21241  003714  B4D8               	btfsc	status,2,c
 21242  003716  D7C0               	goto	i2l7638
 21243  003718  0A07               	xorlw	7	; case 12
 21244  00371A  B4D8               	btfsc	status,2,c
 21245  00371C  D7C8               	goto	i2l7640
 21246  00371E                     i2l7646:
 21247                           
 21248                           ;RTC.c: 110: lcdInst(0b10000000);;
 21249  00371E  0E80               	movlw	128
 21250  003720  ECEA  F02D         	call	i2_lcdInst
 21251                           
 21252                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21253  003724  0EA6               	movlw	low STR_21
 21254  003726  6E0D               	movwf	i2printf@f,c
 21255  003728  0EFA               	movlw	high STR_21
 21256  00372A  6E0E               	movwf	i2printf@f+1,c
 21257  00372C  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21258  003730  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21259  003734  0E3D               	movlw	low i2printRTC@month
 21260  003736  6E11               	movwf	?i2_printf+4,c
 21261  003738  0E00               	movlw	high i2printRTC@month
 21262  00373A  6E12               	movwf	?i2_printf+5,c
 21263  00373C  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21264  003740  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21265  003744  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21266  003748  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21267  00374C  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21268  003750  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21269  003754  ECA0  F011         	call	i2_printf	;wreg free
 21270  003758  0012               	return		;funcret
 21271  00375A                     __end_ofi2_printRTC:
 21272                           	opt stack 0
 21273                           pclatu	equ	0xFFB
 21274                           pclath	equ	0xFFA
 21275                           tblptru	equ	0xFF8
 21276                           tblptrh	equ	0xFF7
 21277                           tblptrl	equ	0xFF6
 21278                           tablat	equ	0xFF5
 21279                           prodh	equ	0xFF4
 21280                           prodl	equ	0xFF3
 21281                           intcon	equ	0xFF2
 21282                           intcon2	equ	0xFF1
 21283                           intcon3	equ	0xFF0
 21284                           indf0	equ	0xFEF
 21285                           postinc0	equ	0xFEE
 21286                           fsr0h	equ	0xFEA
 21287                           fsr0l	equ	0xFE9
 21288                           wreg	equ	0xFE8
 21289                           postdec1	equ	0xFE5
 21290                           fsr1h	equ	0xFE2
 21291                           fsr1l	equ	0xFE1
 21292                           indf2	equ	0xFDF
 21293                           postinc2	equ	0xFDE
 21294                           postdec2	equ	0xFDD
 21295                           fsr2h	equ	0xFDA
 21296                           fsr2l	equ	0xFD9
 21297                           status	equ	0xFD8
 21298                           
 21299 ;; *************** function i2_strcpy *****************
 21300 ;; Defined at:
 21301 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21302 ;; Parameters:    Size  Location     Type
 21303 ;;  to              2    0[COMRAM] PTR unsigned char 
 21304 ;;		 -> printRTC@month(4), UI@month(4), 
 21305 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21306 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21307 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21308 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21309 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21310 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21311 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21312 ;;		 -> STR_8(4), 
 21313 ;; Auto vars:     Size  Location     Type
 21314 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21315 ;;		 -> printRTC@month(4), UI@month(4), 
 21316 ;; Return value:  Size  Location     Type
 21317 ;;                  2    0[COMRAM] PTR unsigned char 
 21318 ;; Registers used:
 21319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21320 ;; Tracked objects:
 21321 ;;		On entry : 0/0
 21322 ;;		On exit  : 0/0
 21323 ;;		Unchanged: 0/0
 21324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21325 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21326 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21328 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21329 ;;Total ram usage:        6 bytes
 21330 ;; Hardware stack levels used:    1
 21331 ;; This function calls:
 21332 ;;		Nothing
 21333 ;; This function is called by:
 21334 ;;		i2_printRTC
 21335 ;; This function uses a non-reentrant model
 21336 ;;
 21337                           
 21338                           	psect	text70
 21339  0056F4                     __ptext70:
 21340                           	opt stack 0
 21341  0056F4                     i2_strcpy:
 21342                           	opt stack 21
 21343                           
 21344                           ;incstack = 0
 21345  0056F4  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21346  0056F8  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21347  0056FC  D004               	goto	i2l7170
 21348  0056FE                     i2l7168:
 21349  0056FE  4A05               	infsnz	i2strcpy@cp,f,c
 21350  005700  2A06               	incf	i2strcpy@cp+1,f,c
 21351  005702  4A03               	infsnz	i2strcpy@from,f,c
 21352  005704  2A04               	incf	i2strcpy@from+1,f,c
 21353  005706                     i2l7170:
 21354  005706  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21355  00570A  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21356  00570E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21357  00570E  6AF8               	clrf	tblptru,c
 21358  005710                     	endif
 21359  005710                     	if	0	;tblptru may be non-zero
 21360  005710                     	endif
 21361  005710  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21362  005714  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21363  005718  0008               	tblrd		*
 21364  00571A  CFF5 FFDF          	movff	tablat,indf2
 21365  00571E  50DF               	movf	indf2,w,c
 21366  005720  B4D8               	btfsc	status,2,c
 21367  005722  0012               	return	
 21368  005724  D7EC               	goto	i2l7168
 21369  005726                     __end_ofi2_strcpy:
 21370                           	opt stack 0
 21371                           pclatu	equ	0xFFB
 21372                           pclath	equ	0xFFA
 21373                           tblptru	equ	0xFF8
 21374                           tblptrh	equ	0xFF7
 21375                           tblptrl	equ	0xFF6
 21376                           tablat	equ	0xFF5
 21377                           prodh	equ	0xFF4
 21378                           prodl	equ	0xFF3
 21379                           intcon	equ	0xFF2
 21380                           intcon2	equ	0xFF1
 21381                           intcon3	equ	0xFF0
 21382                           indf0	equ	0xFEF
 21383                           postinc0	equ	0xFEE
 21384                           fsr0h	equ	0xFEA
 21385                           fsr0l	equ	0xFE9
 21386                           wreg	equ	0xFE8
 21387                           postdec1	equ	0xFE5
 21388                           fsr1h	equ	0xFE2
 21389                           fsr1l	equ	0xFE1
 21390                           indf2	equ	0xFDF
 21391                           postinc2	equ	0xFDE
 21392                           postdec2	equ	0xFDD
 21393                           fsr2h	equ	0xFDA
 21394                           fsr2l	equ	0xFD9
 21395                           status	equ	0xFD8
 21396                           
 21397 ;; *************** function _inputHandler *****************
 21398 ;; Defined at:
 21399 ;;		line 375 in file "UI.c"
 21400 ;; Parameters:    Size  Location     Type
 21401 ;;		None
 21402 ;; Auto vars:     Size  Location     Type
 21403 ;;		None
 21404 ;; Return value:  Size  Location     Type
 21405 ;;                  2   41[COMRAM] int 
 21406 ;; Registers used:
 21407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21408 ;; Tracked objects:
 21409 ;;		On entry : 0/0
 21410 ;;		On exit  : 0/0
 21411 ;;		Unchanged: 0/0
 21412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21413 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21416 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21417 ;;Total ram usage:        4 bytes
 21418 ;; Hardware stack levels used:    1
 21419 ;; Hardware stack levels required when called:    4
 21420 ;; This function calls:
 21421 ;;		_change_state_to_logs_11
 21422 ;;		_change_state_to_logs_12
 21423 ;;		_change_state_to_logs_22
 21424 ;;		_change_state_to_logs_23
 21425 ;;		_change_state_to_logs_33
 21426 ;;		_change_state_to_logs_34
 21427 ;;		_change_state_to_menu_11
 21428 ;;		_change_state_to_menu_23
 21429 ;;		i2_change_state_to_menu_12
 21430 ;;		i2_change_state_to_menu_22
 21431 ;; This function is called by:
 21432 ;;		_updateMenu
 21433 ;; This function uses a non-reentrant model
 21434 ;;
 21435                           
 21436                           	psect	text71
 21437  00375A                     __ptext71:
 21438                           	opt stack 0
 21439  00375A                     _inputHandler:
 21440                           	opt stack 18
 21441                           
 21442                           ;UI.c: 380: if(firstboot){
 21443                           
 21444                           ;incstack = 0
 21445  00375A  0101               	movlb	1	; () banked
 21446  00375C  5139               	movf	_firstboot& (0+255),w,b
 21447  00375E  0101               	movlb	1	; () banked
 21448  003760  113A               	iorwf	(_firstboot+1)& (0+255),w,b
 21449  003762  B4D8               	btfsc	status,2,c
 21450  003764  D00C               	goto	i2l7714
 21451                           
 21452                           ; BSR set to: 1
 21453                           ;UI.c: 381: change_state_to_menu_11();
 21454  003766  ECF3  F02B         	call	_change_state_to_menu_11	;wreg free
 21455                           
 21456                           ;UI.c: 382: firstboot = 0;
 21457  00376A  0E00               	movlw	0
 21458  00376C  0101               	movlb	1	; () banked
 21459  00376E  6F3A               	movwf	(_firstboot+1)& (0+255),b
 21460  003770  0E00               	movlw	0
 21461  003772  6F39               	movwf	_firstboot& (0+255),b
 21462                           
 21463                           ; BSR set to: 1
 21464                           ;UI.c: 383: return 0;
 21465  003774  0E00               	movlw	0
 21466  003776  6E2B               	movwf	?_inputHandler+1,c
 21467  003778  0E00               	movlw	0
 21468  00377A  6E2A               	movwf	?_inputHandler,c
 21469                           
 21470                           ; BSR set to: 1
 21471  00377C  0012               	return	
 21472  00377E                     i2l7714:
 21473                           
 21474                           ; BSR set to: 1
 21475                           ;UI.c: 384: }
 21476                           ;UI.c: 385: if (logstate){
 21477  00377E  0100               	movlb	0	; () banked
 21478  003780  51F8               	movf	_logstate& (0+255),w,b
 21479  003782  0100               	movlb	0	; () banked
 21480  003784  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21481  003786  B4D8               	btfsc	status,2,c
 21482  003788  D0C7               	goto	i2l7832
 21483                           
 21484                           ; BSR set to: 0
 21485                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21486  00378A  0E43               	movlw	67
 21487  00378C  187D               	xorwf	_input,w,c	;volatile
 21488  00378E  A4D8               	btfss	status,2,c
 21489  003790  D012               	goto	i2l7732
 21490                           
 21491                           ; BSR set to: 0
 21492  003792  B281               	btfsc	3969,1,c	;volatile
 21493  003794  D009               	goto	i2l7724
 21494  003796  D00F               	goto	i2l7732
 21495  003798                     i2l7722:
 21496                           
 21497                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21498  003798  0E68               	movlw	104
 21499  00379A  6E2C               	movwf	??_inputHandler& (0+255),c
 21500  00379C  0EE4               	movlw	228
 21501  00379E                     i2u1152_47:
 21502  00379E  2EE8               	decfsz	wreg,f,c
 21503  0037A0  D7FE               	bra	i2u1152_47
 21504  0037A2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21505  0037A4  D7FC               	bra	i2u1152_47
 21506  0037A6  D000               	nop2	
 21507  0037A8                     i2l7724:
 21508  0037A8  B281               	btfsc	3969,1,c	;volatile
 21509  0037AA  D7F6               	goto	i2l7722
 21510  0037AC                     i2l7726:
 21511                           
 21512                           ;UI.c: 390: }
 21513                           ;UI.c: 391: return 0;
 21514  0037AC  0E00               	movlw	0
 21515  0037AE  6E2B               	movwf	?_inputHandler+1,c
 21516  0037B0  0E00               	movlw	0
 21517  0037B2  6E2A               	movwf	?_inputHandler,c
 21518  0037B4  0012               	return	
 21519  0037B6                     i2l7732:
 21520                           
 21521                           ;UI.c: 393: else if (input == 'D'){
 21522  0037B6  0E44               	movlw	68
 21523  0037B8  187D               	xorwf	_input,w,c	;volatile
 21524  0037BA  A4D8               	btfss	status,2,c
 21525  0037BC  D7F7               	goto	i2l7726
 21526                           
 21527                           ;UI.c: 395: logstate = 0;
 21528  0037BE  0E00               	movlw	0
 21529  0037C0  0100               	movlb	0	; () banked
 21530  0037C2  6FF9               	movwf	(_logstate+1)& (0+255),b
 21531  0037C4  0E00               	movlw	0
 21532  0037C6  6FF8               	movwf	_logstate& (0+255),b
 21533                           
 21534                           ;UI.c: 396: switch(cur_state){
 21535  0037C8  D012               	goto	i2l7750
 21536  0037CA                     i2l7736:
 21537                           
 21538                           ;UI.c: 398: change_state_to_logs_11();
 21539  0037CA  EC6B  F02C         	call	_change_state_to_logs_11	;wreg free
 21540                           
 21541                           ;UI.c: 399: break;
 21542  0037CE  D7EE               	goto	i2l7726
 21543  0037D0                     i2l7738:
 21544                           
 21545                           ;UI.c: 401: change_state_to_logs_12();
 21546  0037D0  EC53  F02C         	call	_change_state_to_logs_12	;wreg free
 21547                           
 21548                           ;UI.c: 402: break;
 21549  0037D4  D7EB               	goto	i2l7726
 21550  0037D6                     i2l7740:
 21551                           
 21552                           ;UI.c: 404: change_state_to_logs_22();
 21553  0037D6  EC3B  F02C         	call	_change_state_to_logs_22	;wreg free
 21554                           
 21555                           ;UI.c: 405: break;
 21556  0037DA  D7E8               	goto	i2l7726
 21557  0037DC                     i2l7742:
 21558                           
 21559                           ;UI.c: 407: change_state_to_logs_23();
 21560  0037DC  EC9A  F02C         	call	_change_state_to_logs_23	;wreg free
 21561                           
 21562                           ;UI.c: 408: break;
 21563  0037E0  D7E5               	goto	i2l7726
 21564  0037E2                     i2l7744:
 21565                           
 21566                           ;UI.c: 410: change_state_to_logs_33();
 21567  0037E2  EC23  F02C         	call	_change_state_to_logs_33	;wreg free
 21568                           
 21569                           ;UI.c: 411: break;
 21570  0037E6  D7E2               	goto	i2l7726
 21571  0037E8                     i2l7746:
 21572                           
 21573                           ;UI.c: 413: change_state_to_logs_34();
 21574  0037E8  EC0B  F02C         	call	_change_state_to_logs_34	;wreg free
 21575                           
 21576                           ;UI.c: 415: }
 21577                           
 21578                           ;UI.c: 414: break;
 21579  0037EC  D7DF               	goto	i2l7726
 21580  0037EE                     i2l7750:
 21581  0037EE  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21582  0037F2  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21583                           
 21584                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21585                           ; Switch size 1, requested type "space"
 21586                           ; Number of cases is 2, Range of values is 3 to 4
 21587                           ; switch strategies available:
 21588                           ; Name         Instructions Cycles
 21589                           ; simple_byte            7     4 (average)
 21590                           ;	Chosen strategy is simple_byte
 21591  0037F6  502D               	movf	??_inputHandler+1,w,c
 21592  0037F8  0A03               	xorlw	3	; case 3
 21593  0037FA  B4D8               	btfsc	status,2,c
 21594  0037FC  D004               	goto	i2l10834
 21595  0037FE  0A07               	xorlw	7	; case 4
 21596  003800  B4D8               	btfsc	status,2,c
 21597  003802  D00F               	goto	i2l10836
 21598  003804  D7D3               	goto	i2l7726
 21599  003806                     i2l10834:
 21600                           
 21601                           ; Switch size 1, requested type "space"
 21602                           ; Number of cases is 4, Range of values is 243 to 255
 21603                           ; switch strategies available:
 21604                           ; Name         Instructions Cycles
 21605                           ; simple_byte           13     7 (average)
 21606                           ;	Chosen strategy is simple_byte
 21607  003806  502C               	movf	??_inputHandler,w,c
 21608  003808  0AF3               	xorlw	243	; case 243
 21609  00380A  B4D8               	btfsc	status,2,c
 21610  00380C  D7DE               	goto	i2l7736
 21611  00380E  0A07               	xorlw	7	; case 244
 21612  003810  B4D8               	btfsc	status,2,c
 21613  003812  D7DE               	goto	i2l7738
 21614  003814  0A0A               	xorlw	10	; case 254
 21615  003816  B4D8               	btfsc	status,2,c
 21616  003818  D7DE               	goto	i2l7740
 21617  00381A  0A01               	xorlw	1	; case 255
 21618  00381C  B4D8               	btfsc	status,2,c
 21619  00381E  D7DE               	goto	i2l7742
 21620  003820  D7C5               	goto	i2l7726
 21621  003822                     i2l10836:
 21622                           
 21623                           ; Switch size 1, requested type "space"
 21624                           ; Number of cases is 2, Range of values is 9 to 10
 21625                           ; switch strategies available:
 21626                           ; Name         Instructions Cycles
 21627                           ; simple_byte            7     4 (average)
 21628                           ;	Chosen strategy is simple_byte
 21629  003822  502C               	movf	??_inputHandler,w,c
 21630  003824  0A09               	xorlw	9	; case 9
 21631  003826  B4D8               	btfsc	status,2,c
 21632  003828  D7DC               	goto	i2l7744
 21633  00382A  0A03               	xorlw	3	; case 10
 21634  00382C  B4D8               	btfsc	status,2,c
 21635  00382E  D7DC               	goto	i2l7746
 21636  003830  D7BD               	goto	i2l7726
 21637  003832                     i2l7762:
 21638                           
 21639                           ;UI.c: 425: if(cur_state == 11){
 21640  003832  0E0B               	movlw	11
 21641  003834  0100               	movlb	0	; () banked
 21642  003836  19E6               	xorwf	_cur_state& (0+255),w,b
 21643  003838  0100               	movlb	0	; () banked
 21644  00383A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21645  00383C  A4D8               	btfss	status,2,c
 21646  00383E  D005               	goto	i2l7770
 21647                           
 21648                           ; BSR set to: 0
 21649                           ;UI.c: 426: return 0;
 21650  003840  0E00               	movlw	0
 21651  003842  6E2B               	movwf	?_inputHandler+1,c
 21652  003844  0E00               	movlw	0
 21653  003846  6E2A               	movwf	?_inputHandler,c
 21654                           
 21655                           ; BSR set to: 0
 21656  003848  0012               	return	
 21657  00384A                     i2l7770:
 21658                           
 21659                           ; BSR set to: 0
 21660                           ;UI.c: 428: else{
 21661                           ;UI.c: 429: change_state_to_menu_11();
 21662  00384A  ECF3  F02B         	call	_change_state_to_menu_11	;wreg free
 21663                           
 21664                           ;UI.c: 430: }
 21665                           ;UI.c: 431: return 0;
 21666  00384E  0E00               	movlw	0
 21667  003850  6E2B               	movwf	?_inputHandler+1,c
 21668  003852  0E00               	movlw	0
 21669  003854  6E2A               	movwf	?_inputHandler,c
 21670  003856  0012               	return	
 21671  003858                     i2l7776:
 21672                           
 21673                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21674  003858  0E16               	movlw	22
 21675  00385A  0100               	movlb	0	; () banked
 21676  00385C  19E6               	xorwf	_cur_state& (0+255),w,b
 21677  00385E  0100               	movlb	0	; () banked
 21678  003860  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21679  003862  B4D8               	btfsc	status,2,c
 21680  003864  D007               	goto	i2l7780
 21681                           
 21682                           ; BSR set to: 0
 21683  003866  0E0C               	movlw	12
 21684  003868  0100               	movlb	0	; () banked
 21685  00386A  19E6               	xorwf	_cur_state& (0+255),w,b
 21686  00386C  0100               	movlb	0	; () banked
 21687  00386E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21688  003870  A4D8               	btfss	status,2,c
 21689  003872  D005               	goto	i2l7786
 21690  003874                     i2l7780:
 21691                           
 21692                           ; BSR set to: 0
 21693                           ;UI.c: 434: return 0;
 21694  003874  0E00               	movlw	0
 21695  003876  6E2B               	movwf	?_inputHandler+1,c
 21696  003878  0E00               	movlw	0
 21697  00387A  6E2A               	movwf	?_inputHandler,c
 21698                           
 21699                           ; BSR set to: 0
 21700  00387C  0012               	return	
 21701  00387E                     i2l7786:
 21702                           
 21703                           ; BSR set to: 0
 21704                           ;UI.c: 436: else if(cur_state == 23){
 21705  00387E  0E17               	movlw	23
 21706  003880  0100               	movlb	0	; () banked
 21707  003882  19E6               	xorwf	_cur_state& (0+255),w,b
 21708  003884  0100               	movlb	0	; () banked
 21709  003886  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21710  003888  A4D8               	btfss	status,2,c
 21711  00388A  D003               	goto	i2l7790
 21712                           
 21713                           ; BSR set to: 0
 21714                           ;UI.c: 437: change_state_to_menu_22();
 21715  00388C  ECAB  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21716                           
 21717                           ;UI.c: 438: }
 21718  003890  D002               	goto	i2l7792
 21719  003892                     i2l7790:
 21720                           
 21721                           ;UI.c: 439: else{
 21722                           ;UI.c: 440: change_state_to_menu_12();
 21723  003892  ECC3  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21724  003896                     i2l7792:
 21725                           
 21726                           ;UI.c: 441: }
 21727                           ;UI.c: 442: return 0;
 21728  003896  0E00               	movlw	0
 21729  003898  6E2B               	movwf	?_inputHandler+1,c
 21730  00389A  0E00               	movlw	0
 21731  00389C  6E2A               	movwf	?_inputHandler,c
 21732  00389E  0012               	return	
 21733  0038A0                     i2l7796:
 21734                           
 21735                           ;UI.c: 444: if(cur_state == 23){
 21736  0038A0  0E17               	movlw	23
 21737  0038A2  0100               	movlb	0	; () banked
 21738  0038A4  19E6               	xorwf	_cur_state& (0+255),w,b
 21739  0038A6  0100               	movlb	0	; () banked
 21740  0038A8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21741  0038AA  A4D8               	btfss	status,2,c
 21742  0038AC  D005               	goto	i2l7804
 21743                           
 21744                           ; BSR set to: 0
 21745                           ;UI.c: 445: return 0;
 21746  0038AE  0E00               	movlw	0
 21747  0038B0  6E2B               	movwf	?_inputHandler+1,c
 21748  0038B2  0E00               	movlw	0
 21749  0038B4  6E2A               	movwf	?_inputHandler,c
 21750                           
 21751                           ; BSR set to: 0
 21752  0038B6  0012               	return	
 21753  0038B8                     i2l7804:
 21754                           
 21755                           ; BSR set to: 0
 21756                           ;UI.c: 447: else{
 21757                           ;UI.c: 448: change_state_to_menu_23();
 21758  0038B8  ECDB  F02B         	call	_change_state_to_menu_23	;wreg free
 21759                           
 21760                           ;UI.c: 449: }
 21761                           ;UI.c: 450: return 0;
 21762  0038BC  0E00               	movlw	0
 21763  0038BE  6E2B               	movwf	?_inputHandler+1,c
 21764  0038C0  0E00               	movlw	0
 21765  0038C2  6E2A               	movwf	?_inputHandler,c
 21766  0038C4  0012               	return	
 21767  0038C6                     i2l7810:
 21768                           
 21769                           ;UI.c: 453: up = 1;
 21770  0038C6  0E00               	movlw	0
 21771  0038C8  6E76               	movwf	_up+1,c
 21772  0038CA  0E01               	movlw	1
 21773  0038CC  6E75               	movwf	_up,c
 21774                           
 21775                           ;UI.c: 454: return 1;
 21776  0038CE  0E00               	movlw	0
 21777  0038D0  6E2B               	movwf	?_inputHandler+1,c
 21778  0038D2  0E01               	movlw	1
 21779  0038D4  6E2A               	movwf	?_inputHandler,c
 21780  0038D6  0012               	return	
 21781  0038D8                     i2l7814:
 21782                           
 21783                           ;UI.c: 456: down = 1;
 21784  0038D8  0E00               	movlw	0
 21785  0038DA  6E66               	movwf	_down+1,c
 21786  0038DC  0E01               	movlw	1
 21787  0038DE  6E65               	movwf	_down,c
 21788                           
 21789                           ;UI.c: 457: return 1;
 21790  0038E0  0E00               	movlw	0
 21791  0038E2  6E2B               	movwf	?_inputHandler+1,c
 21792  0038E4  0E01               	movlw	1
 21793  0038E6  6E2A               	movwf	?_inputHandler,c
 21794  0038E8  0012               	return	
 21795  0038EA                     i2l7818:
 21796                           
 21797                           ;UI.c: 459: enter = 1;
 21798  0038EA  0E00               	movlw	0
 21799  0038EC  6E68               	movwf	_enter+1,c
 21800  0038EE  0E01               	movlw	1
 21801  0038F0  6E67               	movwf	_enter,c
 21802                           
 21803                           ;UI.c: 460: return 1;
 21804  0038F2  0E00               	movlw	0
 21805  0038F4  6E2B               	movwf	?_inputHandler+1,c
 21806  0038F6  0E01               	movlw	1
 21807  0038F8  6E2A               	movwf	?_inputHandler,c
 21808  0038FA  0012               	return	
 21809  0038FC                     i2l7822:
 21810                           
 21811                           ;UI.c: 462: back = 1;
 21812  0038FC  0E00               	movlw	0
 21813  0038FE  6E64               	movwf	_back+1,c
 21814  003900  0E01               	movlw	1
 21815  003902  6E63               	movwf	_back,c
 21816                           
 21817                           ;UI.c: 463: return 1;
 21818  003904  0E00               	movlw	0
 21819  003906  6E2B               	movwf	?_inputHandler+1,c
 21820  003908  0E01               	movlw	1
 21821  00390A  6E2A               	movwf	?_inputHandler,c
 21822  00390C  0012               	return	
 21823  00390E                     i2l7826:
 21824                           
 21825                           ;UI.c: 466: return 1;
 21826  00390E  0E00               	movlw	0
 21827  003910  6E2B               	movwf	?_inputHandler+1,c
 21828  003912  0E01               	movlw	1
 21829  003914  6E2A               	movwf	?_inputHandler,c
 21830                           
 21831                           ;UI.c: 467: }
 21832  003916  0012               	return	
 21833  003918                     i2l7832:
 21834  003918  507D               	movf	_input,w,c	;volatile
 21835                           
 21836                           ; Switch size 1, requested type "space"
 21837                           ; Number of cases is 7, Range of values is 49 to 68
 21838                           ; switch strategies available:
 21839                           ; Name         Instructions Cycles
 21840                           ; simple_byte           22    12 (average)
 21841                           ;	Chosen strategy is simple_byte
 21842  00391A  0A31               	xorlw	49	; case 49
 21843  00391C  B4D8               	btfsc	status,2,c
 21844  00391E  D789               	goto	i2l7762
 21845  003920  0A03               	xorlw	3	; case 50
 21846  003922  B4D8               	btfsc	status,2,c
 21847  003924  D799               	goto	i2l7776
 21848  003926  0A01               	xorlw	1	; case 51
 21849  003928  B4D8               	btfsc	status,2,c
 21850  00392A  D7BA               	goto	i2l7796
 21851  00392C  0A72               	xorlw	114	; case 65
 21852  00392E  B4D8               	btfsc	status,2,c
 21853  003930  D7CA               	goto	i2l7810
 21854  003932  0A03               	xorlw	3	; case 66
 21855  003934  B4D8               	btfsc	status,2,c
 21856  003936  D7D0               	goto	i2l7814
 21857  003938  0A01               	xorlw	1	; case 67
 21858  00393A  B4D8               	btfsc	status,2,c
 21859  00393C  D7D6               	goto	i2l7818
 21860  00393E  0A07               	xorlw	7	; case 68
 21861  003940  B4D8               	btfsc	status,2,c
 21862  003942  D7DC               	goto	i2l7822
 21863  003944  D7E4               	goto	i2l7826
 21864  003946                     __end_of_inputHandler:
 21865                           	opt stack 0
 21866                           pclatu	equ	0xFFB
 21867                           pclath	equ	0xFFA
 21868                           tblptru	equ	0xFF8
 21869                           tblptrh	equ	0xFF7
 21870                           tblptrl	equ	0xFF6
 21871                           tablat	equ	0xFF5
 21872                           prodh	equ	0xFF4
 21873                           prodl	equ	0xFF3
 21874                           intcon	equ	0xFF2
 21875                           intcon2	equ	0xFF1
 21876                           intcon3	equ	0xFF0
 21877                           indf0	equ	0xFEF
 21878                           postinc0	equ	0xFEE
 21879                           fsr0h	equ	0xFEA
 21880                           fsr0l	equ	0xFE9
 21881                           wreg	equ	0xFE8
 21882                           postdec1	equ	0xFE5
 21883                           fsr1h	equ	0xFE2
 21884                           fsr1l	equ	0xFE1
 21885                           indf2	equ	0xFDF
 21886                           postinc2	equ	0xFDE
 21887                           postdec2	equ	0xFDD
 21888                           fsr2h	equ	0xFDA
 21889                           fsr2l	equ	0xFD9
 21890                           status	equ	0xFD8
 21891                           
 21892 ;; *************** function i2_change_state_to_menu_22 *****************
 21893 ;; Defined at:
 21894 ;;		line 501 in file "UI.c"
 21895 ;; Parameters:    Size  Location     Type
 21896 ;;		None
 21897 ;; Auto vars:     Size  Location     Type
 21898 ;;		None
 21899 ;; Return value:  Size  Location     Type
 21900 ;;                  1    wreg      void 
 21901 ;; Registers used:
 21902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21903 ;; Tracked objects:
 21904 ;;		On entry : 0/0
 21905 ;;		On exit  : 0/0
 21906 ;;		Unchanged: 0/0
 21907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21912 ;;Total ram usage:        0 bytes
 21913 ;; Hardware stack levels used:    1
 21914 ;; Hardware stack levels required when called:    3
 21915 ;; This function calls:
 21916 ;;		i2_lcdInst
 21917 ;;		i2_printf
 21918 ;; This function is called by:
 21919 ;;		_updateMenu
 21920 ;;		_inputHandler
 21921 ;; This function uses a non-reentrant model
 21922 ;;
 21923                           
 21924                           	psect	text72
 21925  005756                     __ptext72:
 21926                           	opt stack 0
 21927  005756                     i2_change_state_to_menu_22:
 21928                           	opt stack 19
 21929                           
 21930                           ;UI.c: 502: cur_state = 22;
 21931                           
 21932                           ;incstack = 0
 21933  005756  0E00               	movlw	0
 21934  005758  0100               	movlb	0	; () banked
 21935  00575A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21936  00575C  0E16               	movlw	22
 21937  00575E  6FE6               	movwf	_cur_state& (0+255),b
 21938                           
 21939                           ; BSR set to: 0
 21940                           ;UI.c: 504: lcdInst(0b10000000);;
 21941  005760  0E80               	movlw	128
 21942  005762  ECEA  F02D         	call	i2_lcdInst
 21943                           
 21944                           ;UI.c: 505: printf("2. SORT        <");
 21945  005766  0EB7               	movlw	low STR_34
 21946  005768  6E0D               	movwf	i2printf@f,c
 21947  00576A  0EFD               	movlw	high STR_34
 21948  00576C  6E0E               	movwf	i2printf@f+1,c
 21949  00576E  ECA0  F011         	call	i2_printf	;wreg free
 21950                           
 21951                           ;UI.c: 506: lcdInst(0b11000000);;
 21952  005772  0EC0               	movlw	192
 21953  005774  ECEA  F02D         	call	i2_lcdInst
 21954                           
 21955                           ;UI.c: 507: printf("3. LOGS         ");
 21956  005778  0EFC               	movlw	low STR_36
 21957  00577A  6E0D               	movwf	i2printf@f,c
 21958  00577C  0EFC               	movlw	high STR_36
 21959  00577E  6E0E               	movwf	i2printf@f+1,c
 21960  005780  ECA0  F011         	call	i2_printf	;wreg free
 21961  005784  0012               	return		;funcret
 21962  005786                     __end_ofi2_change_state_to_menu_22:
 21963                           	opt stack 0
 21964                           pclatu	equ	0xFFB
 21965                           pclath	equ	0xFFA
 21966                           tblptru	equ	0xFF8
 21967                           tblptrh	equ	0xFF7
 21968                           tblptrl	equ	0xFF6
 21969                           tablat	equ	0xFF5
 21970                           prodh	equ	0xFF4
 21971                           prodl	equ	0xFF3
 21972                           intcon	equ	0xFF2
 21973                           intcon2	equ	0xFF1
 21974                           intcon3	equ	0xFF0
 21975                           indf0	equ	0xFEF
 21976                           postinc0	equ	0xFEE
 21977                           fsr0h	equ	0xFEA
 21978                           fsr0l	equ	0xFE9
 21979                           wreg	equ	0xFE8
 21980                           postdec1	equ	0xFE5
 21981                           fsr1h	equ	0xFE2
 21982                           fsr1l	equ	0xFE1
 21983                           indf2	equ	0xFDF
 21984                           postinc2	equ	0xFDE
 21985                           postdec2	equ	0xFDD
 21986                           fsr2h	equ	0xFDA
 21987                           fsr2l	equ	0xFD9
 21988                           status	equ	0xFD8
 21989                           
 21990 ;; *************** function i2_change_state_to_menu_12 *****************
 21991 ;; Defined at:
 21992 ;;		line 493 in file "UI.c"
 21993 ;; Parameters:    Size  Location     Type
 21994 ;;		None
 21995 ;; Auto vars:     Size  Location     Type
 21996 ;;		None
 21997 ;; Return value:  Size  Location     Type
 21998 ;;                  1    wreg      void 
 21999 ;; Registers used:
 22000 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22001 ;; Tracked objects:
 22002 ;;		On entry : 0/0
 22003 ;;		On exit  : 0/0
 22004 ;;		Unchanged: 0/0
 22005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22010 ;;Total ram usage:        0 bytes
 22011 ;; Hardware stack levels used:    1
 22012 ;; Hardware stack levels required when called:    3
 22013 ;; This function calls:
 22014 ;;		i2_lcdInst
 22015 ;;		i2_printf
 22016 ;; This function is called by:
 22017 ;;		_updateMenu
 22018 ;;		_inputHandler
 22019 ;; This function uses a non-reentrant model
 22020 ;;
 22021                           
 22022                           	psect	text73
 22023  005786                     __ptext73:
 22024                           	opt stack 0
 22025  005786                     i2_change_state_to_menu_12:
 22026                           	opt stack 19
 22027                           
 22028                           ;UI.c: 494: cur_state = 12;
 22029                           
 22030                           ;incstack = 0
 22031  005786  0E00               	movlw	0
 22032  005788  0100               	movlb	0	; () banked
 22033  00578A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22034  00578C  0E0C               	movlw	12
 22035  00578E  6FE6               	movwf	_cur_state& (0+255),b
 22036                           
 22037                           ; BSR set to: 0
 22038                           ;UI.c: 496: lcdInst(0b10000000);;
 22039  005790  0E80               	movlw	128
 22040  005792  ECEA  F02D         	call	i2_lcdInst
 22041                           
 22042                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22043  005796  0E1E               	movlw	low STR_33
 22044  005798  6E0D               	movwf	i2printf@f,c
 22045  00579A  0EFD               	movlw	high STR_33
 22046  00579C  6E0E               	movwf	i2printf@f+1,c
 22047  00579E  ECA0  F011         	call	i2_printf	;wreg free
 22048                           
 22049                           ;UI.c: 498: lcdInst(0b11000000);;
 22050  0057A2  0EC0               	movlw	192
 22051  0057A4  ECEA  F02D         	call	i2_lcdInst
 22052                           
 22053                           ;UI.c: 499: printf("2. SORT        <");
 22054  0057A8  0EB7               	movlw	low STR_34
 22055  0057AA  6E0D               	movwf	i2printf@f,c
 22056  0057AC  0EFD               	movlw	high STR_34
 22057  0057AE  6E0E               	movwf	i2printf@f+1,c
 22058  0057B0  ECA0  F011         	call	i2_printf	;wreg free
 22059  0057B4  0012               	return		;funcret
 22060  0057B6                     __end_ofi2_change_state_to_menu_12:
 22061                           	opt stack 0
 22062                           pclatu	equ	0xFFB
 22063                           pclath	equ	0xFFA
 22064                           tblptru	equ	0xFF8
 22065                           tblptrh	equ	0xFF7
 22066                           tblptrl	equ	0xFF6
 22067                           tablat	equ	0xFF5
 22068                           prodh	equ	0xFF4
 22069                           prodl	equ	0xFF3
 22070                           intcon	equ	0xFF2
 22071                           intcon2	equ	0xFF1
 22072                           intcon3	equ	0xFF0
 22073                           indf0	equ	0xFEF
 22074                           postinc0	equ	0xFEE
 22075                           fsr0h	equ	0xFEA
 22076                           fsr0l	equ	0xFE9
 22077                           wreg	equ	0xFE8
 22078                           postdec1	equ	0xFE5
 22079                           fsr1h	equ	0xFE2
 22080                           fsr1l	equ	0xFE1
 22081                           indf2	equ	0xFDF
 22082                           postinc2	equ	0xFDE
 22083                           postdec2	equ	0xFDD
 22084                           fsr2h	equ	0xFDA
 22085                           fsr2l	equ	0xFD9
 22086                           status	equ	0xFD8
 22087                           
 22088 ;; *************** function _change_state_to_menu_23 *****************
 22089 ;; Defined at:
 22090 ;;		line 509 in file "UI.c"
 22091 ;; Parameters:    Size  Location     Type
 22092 ;;		None
 22093 ;; Auto vars:     Size  Location     Type
 22094 ;;		None
 22095 ;; Return value:  Size  Location     Type
 22096 ;;                  1    wreg      void 
 22097 ;; Registers used:
 22098 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22099 ;; Tracked objects:
 22100 ;;		On entry : 0/0
 22101 ;;		On exit  : 0/0
 22102 ;;		Unchanged: 0/0
 22103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22108 ;;Total ram usage:        0 bytes
 22109 ;; Hardware stack levels used:    1
 22110 ;; Hardware stack levels required when called:    3
 22111 ;; This function calls:
 22112 ;;		i2_lcdInst
 22113 ;;		i2_printf
 22114 ;; This function is called by:
 22115 ;;		_updateMenu
 22116 ;;		_inputHandler
 22117 ;; This function uses a non-reentrant model
 22118 ;;
 22119                           
 22120                           	psect	text74
 22121  0057B6                     __ptext74:
 22122                           	opt stack 0
 22123  0057B6                     _change_state_to_menu_23:
 22124                           	opt stack 18
 22125                           
 22126                           ;UI.c: 510: cur_state = 23;
 22127                           
 22128                           ;incstack = 0
 22129  0057B6  0E00               	movlw	0
 22130  0057B8  0100               	movlb	0	; () banked
 22131  0057BA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22132  0057BC  0E17               	movlw	23
 22133  0057BE  6FE6               	movwf	_cur_state& (0+255),b
 22134                           
 22135                           ; BSR set to: 0
 22136                           ;UI.c: 512: lcdInst(0b10000000);;
 22137  0057C0  0E80               	movlw	128
 22138  0057C2  ECEA  F02D         	call	i2_lcdInst
 22139                           
 22140                           ;UI.c: 513: printf("2. SORT         ");
 22141  0057C6  0E0D               	movlw	low STR_32
 22142  0057C8  6E0D               	movwf	i2printf@f,c
 22143  0057CA  0EFD               	movlw	high STR_32
 22144  0057CC  6E0E               	movwf	i2printf@f+1,c
 22145  0057CE  ECA0  F011         	call	i2_printf	;wreg free
 22146                           
 22147                           ;UI.c: 514: lcdInst(0b11000000);;
 22148  0057D2  0EC0               	movlw	192
 22149  0057D4  ECEA  F02D         	call	i2_lcdInst
 22150                           
 22151                           ;UI.c: 515: printf("3. LOGS        <");
 22152  0057D8  0EA6               	movlw	low STR_38
 22153  0057DA  6E0D               	movwf	i2printf@f,c
 22154  0057DC  0EFD               	movlw	high STR_38
 22155  0057DE  6E0E               	movwf	i2printf@f+1,c
 22156  0057E0  ECA0  F011         	call	i2_printf	;wreg free
 22157  0057E4  0012               	return		;funcret
 22158  0057E6                     __end_of_change_state_to_menu_23:
 22159                           	opt stack 0
 22160                           pclatu	equ	0xFFB
 22161                           pclath	equ	0xFFA
 22162                           tblptru	equ	0xFF8
 22163                           tblptrh	equ	0xFF7
 22164                           tblptrl	equ	0xFF6
 22165                           tablat	equ	0xFF5
 22166                           prodh	equ	0xFF4
 22167                           prodl	equ	0xFF3
 22168                           intcon	equ	0xFF2
 22169                           intcon2	equ	0xFF1
 22170                           intcon3	equ	0xFF0
 22171                           indf0	equ	0xFEF
 22172                           postinc0	equ	0xFEE
 22173                           fsr0h	equ	0xFEA
 22174                           fsr0l	equ	0xFE9
 22175                           wreg	equ	0xFE8
 22176                           postdec1	equ	0xFE5
 22177                           fsr1h	equ	0xFE2
 22178                           fsr1l	equ	0xFE1
 22179                           indf2	equ	0xFDF
 22180                           postinc2	equ	0xFDE
 22181                           postdec2	equ	0xFDD
 22182                           fsr2h	equ	0xFDA
 22183                           fsr2l	equ	0xFD9
 22184                           status	equ	0xFD8
 22185                           
 22186 ;; *************** function _change_state_to_menu_11 *****************
 22187 ;; Defined at:
 22188 ;;		line 485 in file "UI.c"
 22189 ;; Parameters:    Size  Location     Type
 22190 ;;		None
 22191 ;; Auto vars:     Size  Location     Type
 22192 ;;		None
 22193 ;; Return value:  Size  Location     Type
 22194 ;;                  1    wreg      void 
 22195 ;; Registers used:
 22196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22197 ;; Tracked objects:
 22198 ;;		On entry : 0/0
 22199 ;;		On exit  : 0/0
 22200 ;;		Unchanged: 0/0
 22201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22206 ;;Total ram usage:        0 bytes
 22207 ;; Hardware stack levels used:    1
 22208 ;; Hardware stack levels required when called:    3
 22209 ;; This function calls:
 22210 ;;		i2_lcdInst
 22211 ;;		i2_printf
 22212 ;; This function is called by:
 22213 ;;		_updateMenu
 22214 ;;		_inputHandler
 22215 ;; This function uses a non-reentrant model
 22216 ;;
 22217                           
 22218                           	psect	text75
 22219  0057E6                     __ptext75:
 22220                           	opt stack 0
 22221  0057E6                     _change_state_to_menu_11:
 22222                           	opt stack 18
 22223                           
 22224                           ;UI.c: 486: cur_state = 11;
 22225                           
 22226                           ;incstack = 0
 22227  0057E6  0E00               	movlw	0
 22228  0057E8  0100               	movlb	0	; () banked
 22229  0057EA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22230  0057EC  0E0B               	movlw	11
 22231  0057EE  6FE6               	movwf	_cur_state& (0+255),b
 22232                           
 22233                           ; BSR set to: 0
 22234                           ;UI.c: 488: lcdInst(0b10000000);;
 22235  0057F0  0E80               	movlw	128
 22236  0057F2  ECEA  F02D         	call	i2_lcdInst
 22237                           
 22238                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22239  0057F6  0EC8               	movlw	low STR_31
 22240  0057F8  6E0D               	movwf	i2printf@f,c
 22241  0057FA  0EFD               	movlw	high STR_31
 22242  0057FC  6E0E               	movwf	i2printf@f+1,c
 22243  0057FE  ECA0  F011         	call	i2_printf	;wreg free
 22244                           
 22245                           ;UI.c: 490: lcdInst(0b11000000);;
 22246  005802  0EC0               	movlw	192
 22247  005804  ECEA  F02D         	call	i2_lcdInst
 22248                           
 22249                           ;UI.c: 491: printf("2. SORT         ");
 22250  005808  0E0D               	movlw	low STR_32
 22251  00580A  6E0D               	movwf	i2printf@f,c
 22252  00580C  0EFD               	movlw	high STR_32
 22253  00580E  6E0E               	movwf	i2printf@f+1,c
 22254  005810  ECA0  F011         	call	i2_printf	;wreg free
 22255  005814  0012               	return		;funcret
 22256  005816                     __end_of_change_state_to_menu_11:
 22257                           	opt stack 0
 22258                           pclatu	equ	0xFFB
 22259                           pclath	equ	0xFFA
 22260                           tblptru	equ	0xFF8
 22261                           tblptrh	equ	0xFF7
 22262                           tblptrl	equ	0xFF6
 22263                           tablat	equ	0xFF5
 22264                           prodh	equ	0xFF4
 22265                           prodl	equ	0xFF3
 22266                           intcon	equ	0xFF2
 22267                           intcon2	equ	0xFF1
 22268                           intcon3	equ	0xFF0
 22269                           indf0	equ	0xFEF
 22270                           postinc0	equ	0xFEE
 22271                           fsr0h	equ	0xFEA
 22272                           fsr0l	equ	0xFE9
 22273                           wreg	equ	0xFE8
 22274                           postdec1	equ	0xFE5
 22275                           fsr1h	equ	0xFE2
 22276                           fsr1l	equ	0xFE1
 22277                           indf2	equ	0xFDF
 22278                           postinc2	equ	0xFDE
 22279                           postdec2	equ	0xFDD
 22280                           fsr2h	equ	0xFDA
 22281                           fsr2l	equ	0xFD9
 22282                           status	equ	0xFD8
 22283                           
 22284 ;; *************** function _change_state_to_logs_34 *****************
 22285 ;; Defined at:
 22286 ;;		line 552 in file "UI.c"
 22287 ;; Parameters:    Size  Location     Type
 22288 ;;		None
 22289 ;; Auto vars:     Size  Location     Type
 22290 ;;		None
 22291 ;; Return value:  Size  Location     Type
 22292 ;;                  1    wreg      void 
 22293 ;; Registers used:
 22294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22295 ;; Tracked objects:
 22296 ;;		On entry : 0/0
 22297 ;;		On exit  : 0/0
 22298 ;;		Unchanged: 0/0
 22299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22304 ;;Total ram usage:        0 bytes
 22305 ;; Hardware stack levels used:    1
 22306 ;; Hardware stack levels required when called:    3
 22307 ;; This function calls:
 22308 ;;		i2_lcdInst
 22309 ;;		i2_printf
 22310 ;; This function is called by:
 22311 ;;		_updateMenu
 22312 ;;		_inputHandler
 22313 ;; This function uses a non-reentrant model
 22314 ;;
 22315                           
 22316                           	psect	text76
 22317  005816                     __ptext76:
 22318                           	opt stack 0
 22319  005816                     _change_state_to_logs_34:
 22320                           	opt stack 18
 22321                           
 22322                           ;UI.c: 553: cur_state = 1034;
 22323                           
 22324                           ;incstack = 0
 22325  005816  0E04               	movlw	4
 22326  005818  0100               	movlb	0	; () banked
 22327  00581A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22328  00581C  0E0A               	movlw	10
 22329  00581E  6FE6               	movwf	_cur_state& (0+255),b
 22330                           
 22331                           ; BSR set to: 0
 22332                           ;UI.c: 554: lcdInst(0b10000000);;
 22333  005820  0E80               	movlw	128
 22334  005822  ECEA  F02D         	call	i2_lcdInst
 22335                           
 22336                           ;UI.c: 555: printf("LOG 3           ");
 22337  005826  0EDA               	movlw	low STR_44
 22338  005828  6E0D               	movwf	i2printf@f,c
 22339  00582A  0EFC               	movlw	high STR_44
 22340  00582C  6E0E               	movwf	i2printf@f+1,c
 22341  00582E  ECA0  F011         	call	i2_printf	;wreg free
 22342                           
 22343                           ;UI.c: 556: lcdInst(0b11000000);;
 22344  005832  0EC0               	movlw	192
 22345  005834  ECEA  F02D         	call	i2_lcdInst
 22346                           
 22347                           ;UI.c: 557: printf("LOG 4          <");
 22348  005838  0E95               	movlw	low STR_50
 22349  00583A  6E0D               	movwf	i2printf@f,c
 22350  00583C  0EFD               	movlw	high STR_50
 22351  00583E  6E0E               	movwf	i2printf@f+1,c
 22352  005840  ECA0  F011         	call	i2_printf	;wreg free
 22353  005844  0012               	return		;funcret
 22354  005846                     __end_of_change_state_to_logs_34:
 22355                           	opt stack 0
 22356                           pclatu	equ	0xFFB
 22357                           pclath	equ	0xFFA
 22358                           tblptru	equ	0xFF8
 22359                           tblptrh	equ	0xFF7
 22360                           tblptrl	equ	0xFF6
 22361                           tablat	equ	0xFF5
 22362                           prodh	equ	0xFF4
 22363                           prodl	equ	0xFF3
 22364                           intcon	equ	0xFF2
 22365                           intcon2	equ	0xFF1
 22366                           intcon3	equ	0xFF0
 22367                           indf0	equ	0xFEF
 22368                           postinc0	equ	0xFEE
 22369                           fsr0h	equ	0xFEA
 22370                           fsr0l	equ	0xFE9
 22371                           wreg	equ	0xFE8
 22372                           postdec1	equ	0xFE5
 22373                           fsr1h	equ	0xFE2
 22374                           fsr1l	equ	0xFE1
 22375                           indf2	equ	0xFDF
 22376                           postinc2	equ	0xFDE
 22377                           postdec2	equ	0xFDD
 22378                           fsr2h	equ	0xFDA
 22379                           fsr2l	equ	0xFD9
 22380                           status	equ	0xFD8
 22381                           
 22382 ;; *************** function _change_state_to_logs_33 *****************
 22383 ;; Defined at:
 22384 ;;		line 545 in file "UI.c"
 22385 ;; Parameters:    Size  Location     Type
 22386 ;;		None
 22387 ;; Auto vars:     Size  Location     Type
 22388 ;;		None
 22389 ;; Return value:  Size  Location     Type
 22390 ;;                  1    wreg      void 
 22391 ;; Registers used:
 22392 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22393 ;; Tracked objects:
 22394 ;;		On entry : 0/0
 22395 ;;		On exit  : 0/0
 22396 ;;		Unchanged: 0/0
 22397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22402 ;;Total ram usage:        0 bytes
 22403 ;; Hardware stack levels used:    1
 22404 ;; Hardware stack levels required when called:    3
 22405 ;; This function calls:
 22406 ;;		i2_lcdInst
 22407 ;;		i2_printf
 22408 ;; This function is called by:
 22409 ;;		_updateMenu
 22410 ;;		_inputHandler
 22411 ;; This function uses a non-reentrant model
 22412 ;;
 22413                           
 22414                           	psect	text77
 22415  005846                     __ptext77:
 22416                           	opt stack 0
 22417  005846                     _change_state_to_logs_33:
 22418                           	opt stack 18
 22419                           
 22420                           ;UI.c: 546: cur_state = 1033;
 22421                           
 22422                           ;incstack = 0
 22423  005846  0E04               	movlw	4
 22424  005848  0100               	movlb	0	; () banked
 22425  00584A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22426  00584C  0E09               	movlw	9
 22427  00584E  6FE6               	movwf	_cur_state& (0+255),b
 22428                           
 22429                           ; BSR set to: 0
 22430                           ;UI.c: 547: lcdInst(0b10000000);;
 22431  005850  0E80               	movlw	128
 22432  005852  ECEA  F02D         	call	i2_lcdInst
 22433                           
 22434                           ;UI.c: 548: printf("LOG 3          <");
 22435  005856  0E84               	movlw	low STR_46
 22436  005858  6E0D               	movwf	i2printf@f,c
 22437  00585A  0EFD               	movlw	high STR_46
 22438  00585C  6E0E               	movwf	i2printf@f+1,c
 22439  00585E  ECA0  F011         	call	i2_printf	;wreg free
 22440                           
 22441                           ;UI.c: 549: lcdInst(0b11000000);;
 22442  005862  0EC0               	movlw	192
 22443  005864  ECEA  F02D         	call	i2_lcdInst
 22444                           
 22445                           ;UI.c: 550: printf("LOG 4           ");
 22446  005868  0EEB               	movlw	low STR_48
 22447  00586A  6E0D               	movwf	i2printf@f,c
 22448  00586C  0EFC               	movlw	high STR_48
 22449  00586E  6E0E               	movwf	i2printf@f+1,c
 22450  005870  ECA0  F011         	call	i2_printf	;wreg free
 22451  005874  0012               	return		;funcret
 22452  005876                     __end_of_change_state_to_logs_33:
 22453                           	opt stack 0
 22454                           pclatu	equ	0xFFB
 22455                           pclath	equ	0xFFA
 22456                           tblptru	equ	0xFF8
 22457                           tblptrh	equ	0xFF7
 22458                           tblptrl	equ	0xFF6
 22459                           tablat	equ	0xFF5
 22460                           prodh	equ	0xFF4
 22461                           prodl	equ	0xFF3
 22462                           intcon	equ	0xFF2
 22463                           intcon2	equ	0xFF1
 22464                           intcon3	equ	0xFF0
 22465                           indf0	equ	0xFEF
 22466                           postinc0	equ	0xFEE
 22467                           fsr0h	equ	0xFEA
 22468                           fsr0l	equ	0xFE9
 22469                           wreg	equ	0xFE8
 22470                           postdec1	equ	0xFE5
 22471                           fsr1h	equ	0xFE2
 22472                           fsr1l	equ	0xFE1
 22473                           indf2	equ	0xFDF
 22474                           postinc2	equ	0xFDE
 22475                           postdec2	equ	0xFDD
 22476                           fsr2h	equ	0xFDA
 22477                           fsr2l	equ	0xFD9
 22478                           status	equ	0xFD8
 22479                           
 22480 ;; *************** function _change_state_to_logs_23 *****************
 22481 ;; Defined at:
 22482 ;;		line 538 in file "UI.c"
 22483 ;; Parameters:    Size  Location     Type
 22484 ;;		None
 22485 ;; Auto vars:     Size  Location     Type
 22486 ;;		None
 22487 ;; Return value:  Size  Location     Type
 22488 ;;                  1    wreg      void 
 22489 ;; Registers used:
 22490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22491 ;; Tracked objects:
 22492 ;;		On entry : 0/0
 22493 ;;		On exit  : 0/0
 22494 ;;		Unchanged: 0/0
 22495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22500 ;;Total ram usage:        0 bytes
 22501 ;; Hardware stack levels used:    1
 22502 ;; Hardware stack levels required when called:    3
 22503 ;; This function calls:
 22504 ;;		i2_lcdInst
 22505 ;;		i2_printf
 22506 ;; This function is called by:
 22507 ;;		_updateMenu
 22508 ;;		_inputHandler
 22509 ;; This function uses a non-reentrant model
 22510 ;;
 22511                           
 22512                           	psect	text78
 22513  005934                     __ptext78:
 22514                           	opt stack 0
 22515  005934                     _change_state_to_logs_23:
 22516                           	opt stack 18
 22517                           
 22518                           ;UI.c: 539: cur_state = 1023;
 22519                           
 22520                           ;incstack = 0
 22521  005934  0E03               	movlw	3
 22522  005936  0100               	movlb	0	; () banked
 22523  005938  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22524  00593A  69E6               	setf	_cur_state& (0+255),b
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;UI.c: 540: lcdInst(0b10000000);;
 22528  00593C  0E80               	movlw	128
 22529  00593E  ECEA  F02D         	call	i2_lcdInst
 22530                           
 22531                           ;UI.c: 541: printf("LOG 2           ");
 22532  005942  0EC9               	movlw	low STR_40
 22533  005944  6E0D               	movwf	i2printf@f,c
 22534  005946  0EFC               	movlw	high STR_40
 22535  005948  6E0E               	movwf	i2printf@f+1,c
 22536  00594A  ECA0  F011         	call	i2_printf	;wreg free
 22537                           
 22538                           ;UI.c: 542: lcdInst(0b11000000);;
 22539  00594E  0EC0               	movlw	192
 22540  005950  ECEA  F02D         	call	i2_lcdInst
 22541                           
 22542                           ;UI.c: 543: printf("LOG 3          <");
 22543  005954  0E84               	movlw	low STR_46
 22544  005956  6E0D               	movwf	i2printf@f,c
 22545  005958  0EFD               	movlw	high STR_46
 22546  00595A  6E0E               	movwf	i2printf@f+1,c
 22547  00595C  ECA0  F011         	call	i2_printf	;wreg free
 22548  005960  0012               	return		;funcret
 22549  005962                     __end_of_change_state_to_logs_23:
 22550                           	opt stack 0
 22551                           pclatu	equ	0xFFB
 22552                           pclath	equ	0xFFA
 22553                           tblptru	equ	0xFF8
 22554                           tblptrh	equ	0xFF7
 22555                           tblptrl	equ	0xFF6
 22556                           tablat	equ	0xFF5
 22557                           prodh	equ	0xFF4
 22558                           prodl	equ	0xFF3
 22559                           intcon	equ	0xFF2
 22560                           intcon2	equ	0xFF1
 22561                           intcon3	equ	0xFF0
 22562                           indf0	equ	0xFEF
 22563                           postinc0	equ	0xFEE
 22564                           fsr0h	equ	0xFEA
 22565                           fsr0l	equ	0xFE9
 22566                           wreg	equ	0xFE8
 22567                           postdec1	equ	0xFE5
 22568                           fsr1h	equ	0xFE2
 22569                           fsr1l	equ	0xFE1
 22570                           indf2	equ	0xFDF
 22571                           postinc2	equ	0xFDE
 22572                           postdec2	equ	0xFDD
 22573                           fsr2h	equ	0xFDA
 22574                           fsr2l	equ	0xFD9
 22575                           status	equ	0xFD8
 22576                           
 22577 ;; *************** function _change_state_to_logs_22 *****************
 22578 ;; Defined at:
 22579 ;;		line 531 in file "UI.c"
 22580 ;; Parameters:    Size  Location     Type
 22581 ;;		None
 22582 ;; Auto vars:     Size  Location     Type
 22583 ;;		None
 22584 ;; Return value:  Size  Location     Type
 22585 ;;                  1    wreg      void 
 22586 ;; Registers used:
 22587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22588 ;; Tracked objects:
 22589 ;;		On entry : 0/0
 22590 ;;		On exit  : 0/0
 22591 ;;		Unchanged: 0/0
 22592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22597 ;;Total ram usage:        0 bytes
 22598 ;; Hardware stack levels used:    1
 22599 ;; Hardware stack levels required when called:    3
 22600 ;; This function calls:
 22601 ;;		i2_lcdInst
 22602 ;;		i2_printf
 22603 ;; This function is called by:
 22604 ;;		_updateMenu
 22605 ;;		_inputHandler
 22606 ;; This function uses a non-reentrant model
 22607 ;;
 22608                           
 22609                           	psect	text79
 22610  005876                     __ptext79:
 22611                           	opt stack 0
 22612  005876                     _change_state_to_logs_22:
 22613                           	opt stack 18
 22614                           
 22615                           ;UI.c: 532: cur_state = 1022;
 22616                           
 22617                           ;incstack = 0
 22618  005876  0E03               	movlw	3
 22619  005878  0100               	movlb	0	; () banked
 22620  00587A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22621  00587C  0EFE               	movlw	254
 22622  00587E  6FE6               	movwf	_cur_state& (0+255),b
 22623                           
 22624                           ; BSR set to: 0
 22625                           ;UI.c: 533: lcdInst(0b10000000);;
 22626  005880  0E80               	movlw	128
 22627  005882  ECEA  F02D         	call	i2_lcdInst
 22628                           
 22629                           ;UI.c: 534: printf("LOG 2          <");
 22630  005886  0E73               	movlw	low STR_42
 22631  005888  6E0D               	movwf	i2printf@f,c
 22632  00588A  0EFD               	movlw	high STR_42
 22633  00588C  6E0E               	movwf	i2printf@f+1,c
 22634  00588E  ECA0  F011         	call	i2_printf	;wreg free
 22635                           
 22636                           ;UI.c: 535: lcdInst(0b11000000);;
 22637  005892  0EC0               	movlw	192
 22638  005894  ECEA  F02D         	call	i2_lcdInst
 22639                           
 22640                           ;UI.c: 536: printf("LOG 3           ");
 22641  005898  0EDA               	movlw	low STR_44
 22642  00589A  6E0D               	movwf	i2printf@f,c
 22643  00589C  0EFC               	movlw	high STR_44
 22644  00589E  6E0E               	movwf	i2printf@f+1,c
 22645  0058A0  ECA0  F011         	call	i2_printf	;wreg free
 22646  0058A4  0012               	return		;funcret
 22647  0058A6                     __end_of_change_state_to_logs_22:
 22648                           	opt stack 0
 22649                           pclatu	equ	0xFFB
 22650                           pclath	equ	0xFFA
 22651                           tblptru	equ	0xFF8
 22652                           tblptrh	equ	0xFF7
 22653                           tblptrl	equ	0xFF6
 22654                           tablat	equ	0xFF5
 22655                           prodh	equ	0xFF4
 22656                           prodl	equ	0xFF3
 22657                           intcon	equ	0xFF2
 22658                           intcon2	equ	0xFF1
 22659                           intcon3	equ	0xFF0
 22660                           indf0	equ	0xFEF
 22661                           postinc0	equ	0xFEE
 22662                           fsr0h	equ	0xFEA
 22663                           fsr0l	equ	0xFE9
 22664                           wreg	equ	0xFE8
 22665                           postdec1	equ	0xFE5
 22666                           fsr1h	equ	0xFE2
 22667                           fsr1l	equ	0xFE1
 22668                           indf2	equ	0xFDF
 22669                           postinc2	equ	0xFDE
 22670                           postdec2	equ	0xFDD
 22671                           fsr2h	equ	0xFDA
 22672                           fsr2l	equ	0xFD9
 22673                           status	equ	0xFD8
 22674                           
 22675 ;; *************** function _change_state_to_logs_12 *****************
 22676 ;; Defined at:
 22677 ;;		line 524 in file "UI.c"
 22678 ;; Parameters:    Size  Location     Type
 22679 ;;		None
 22680 ;; Auto vars:     Size  Location     Type
 22681 ;;		None
 22682 ;; Return value:  Size  Location     Type
 22683 ;;                  1    wreg      void 
 22684 ;; Registers used:
 22685 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22686 ;; Tracked objects:
 22687 ;;		On entry : 0/0
 22688 ;;		On exit  : 0/0
 22689 ;;		Unchanged: 0/0
 22690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22695 ;;Total ram usage:        0 bytes
 22696 ;; Hardware stack levels used:    1
 22697 ;; Hardware stack levels required when called:    3
 22698 ;; This function calls:
 22699 ;;		i2_lcdInst
 22700 ;;		i2_printf
 22701 ;; This function is called by:
 22702 ;;		_updateMenu
 22703 ;;		_inputHandler
 22704 ;; This function uses a non-reentrant model
 22705 ;;
 22706                           
 22707                           	psect	text80
 22708  0058A6                     __ptext80:
 22709                           	opt stack 0
 22710  0058A6                     _change_state_to_logs_12:
 22711                           	opt stack 18
 22712                           
 22713                           ;UI.c: 525: cur_state = 1012;
 22714                           
 22715                           ;incstack = 0
 22716  0058A6  0E03               	movlw	3
 22717  0058A8  0100               	movlb	0	; () banked
 22718  0058AA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22719  0058AC  0EF4               	movlw	244
 22720  0058AE  6FE6               	movwf	_cur_state& (0+255),b
 22721                           
 22722                           ; BSR set to: 0
 22723                           ;UI.c: 526: lcdInst(0b10000000);;
 22724  0058B0  0E80               	movlw	128
 22725  0058B2  ECEA  F02D         	call	i2_lcdInst
 22726                           
 22727                           ;UI.c: 527: printf("LOG 1           ");
 22728  0058B6  0EB8               	movlw	low STR_41
 22729  0058B8  6E0D               	movwf	i2printf@f,c
 22730  0058BA  0EFC               	movlw	high STR_41
 22731  0058BC  6E0E               	movwf	i2printf@f+1,c
 22732  0058BE  ECA0  F011         	call	i2_printf	;wreg free
 22733                           
 22734                           ;UI.c: 528: lcdInst(0b11000000);;
 22735  0058C2  0EC0               	movlw	192
 22736  0058C4  ECEA  F02D         	call	i2_lcdInst
 22737                           
 22738                           ;UI.c: 529: printf("LOG 2          <");
 22739  0058C8  0E73               	movlw	low STR_42
 22740  0058CA  6E0D               	movwf	i2printf@f,c
 22741  0058CC  0EFD               	movlw	high STR_42
 22742  0058CE  6E0E               	movwf	i2printf@f+1,c
 22743  0058D0  ECA0  F011         	call	i2_printf	;wreg free
 22744  0058D4  0012               	return		;funcret
 22745  0058D6                     __end_of_change_state_to_logs_12:
 22746                           	opt stack 0
 22747                           pclatu	equ	0xFFB
 22748                           pclath	equ	0xFFA
 22749                           tblptru	equ	0xFF8
 22750                           tblptrh	equ	0xFF7
 22751                           tblptrl	equ	0xFF6
 22752                           tablat	equ	0xFF5
 22753                           prodh	equ	0xFF4
 22754                           prodl	equ	0xFF3
 22755                           intcon	equ	0xFF2
 22756                           intcon2	equ	0xFF1
 22757                           intcon3	equ	0xFF0
 22758                           indf0	equ	0xFEF
 22759                           postinc0	equ	0xFEE
 22760                           fsr0h	equ	0xFEA
 22761                           fsr0l	equ	0xFE9
 22762                           wreg	equ	0xFE8
 22763                           postdec1	equ	0xFE5
 22764                           fsr1h	equ	0xFE2
 22765                           fsr1l	equ	0xFE1
 22766                           indf2	equ	0xFDF
 22767                           postinc2	equ	0xFDE
 22768                           postdec2	equ	0xFDD
 22769                           fsr2h	equ	0xFDA
 22770                           fsr2l	equ	0xFD9
 22771                           status	equ	0xFD8
 22772                           
 22773 ;; *************** function _change_state_to_logs_11 *****************
 22774 ;; Defined at:
 22775 ;;		line 517 in file "UI.c"
 22776 ;; Parameters:    Size  Location     Type
 22777 ;;		None
 22778 ;; Auto vars:     Size  Location     Type
 22779 ;;		None
 22780 ;; Return value:  Size  Location     Type
 22781 ;;                  1    wreg      void 
 22782 ;; Registers used:
 22783 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22784 ;; Tracked objects:
 22785 ;;		On entry : 0/0
 22786 ;;		On exit  : 0/0
 22787 ;;		Unchanged: 0/0
 22788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22793 ;;Total ram usage:        0 bytes
 22794 ;; Hardware stack levels used:    1
 22795 ;; Hardware stack levels required when called:    3
 22796 ;; This function calls:
 22797 ;;		i2_lcdInst
 22798 ;;		i2_printf
 22799 ;; This function is called by:
 22800 ;;		_updateMenu
 22801 ;;		_inputHandler
 22802 ;; This function uses a non-reentrant model
 22803 ;;
 22804                           
 22805                           	psect	text81
 22806  0058D6                     __ptext81:
 22807                           	opt stack 0
 22808  0058D6                     _change_state_to_logs_11:
 22809                           	opt stack 18
 22810                           
 22811                           ;UI.c: 518: cur_state = 1011;
 22812                           
 22813                           ;incstack = 0
 22814  0058D6  0E03               	movlw	3
 22815  0058D8  0100               	movlb	0	; () banked
 22816  0058DA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22817  0058DC  0EF3               	movlw	243
 22818  0058DE  6FE6               	movwf	_cur_state& (0+255),b
 22819                           
 22820                           ; BSR set to: 0
 22821                           ;UI.c: 519: lcdInst(0b10000000);;
 22822  0058E0  0E80               	movlw	128
 22823  0058E2  ECEA  F02D         	call	i2_lcdInst
 22824                           
 22825                           ;UI.c: 520: printf("LOG 1          <");
 22826  0058E6  0E62               	movlw	low STR_39
 22827  0058E8  6E0D               	movwf	i2printf@f,c
 22828  0058EA  0EFD               	movlw	high STR_39
 22829  0058EC  6E0E               	movwf	i2printf@f+1,c
 22830  0058EE  ECA0  F011         	call	i2_printf	;wreg free
 22831                           
 22832                           ;UI.c: 521: lcdInst(0b11000000);;
 22833  0058F2  0EC0               	movlw	192
 22834  0058F4  ECEA  F02D         	call	i2_lcdInst
 22835                           
 22836                           ;UI.c: 522: printf("LOG 2           ");
 22837  0058F8  0EC9               	movlw	low STR_40
 22838  0058FA  6E0D               	movwf	i2printf@f,c
 22839  0058FC  0EFC               	movlw	high STR_40
 22840  0058FE  6E0E               	movwf	i2printf@f+1,c
 22841  005900  ECA0  F011         	call	i2_printf	;wreg free
 22842  005904  0012               	return		;funcret
 22843  005906                     __end_of_change_state_to_logs_11:
 22844                           	opt stack 0
 22845                           pclatu	equ	0xFFB
 22846                           pclath	equ	0xFFA
 22847                           tblptru	equ	0xFF8
 22848                           tblptrh	equ	0xFF7
 22849                           tblptrl	equ	0xFF6
 22850                           tablat	equ	0xFF5
 22851                           prodh	equ	0xFF4
 22852                           prodl	equ	0xFF3
 22853                           intcon	equ	0xFF2
 22854                           intcon2	equ	0xFF1
 22855                           intcon3	equ	0xFF0
 22856                           indf0	equ	0xFEF
 22857                           postinc0	equ	0xFEE
 22858                           fsr0h	equ	0xFEA
 22859                           fsr0l	equ	0xFE9
 22860                           wreg	equ	0xFE8
 22861                           postdec1	equ	0xFE5
 22862                           fsr1h	equ	0xFE2
 22863                           fsr1l	equ	0xFE1
 22864                           indf2	equ	0xFDF
 22865                           postinc2	equ	0xFDE
 22866                           postdec2	equ	0xFDD
 22867                           fsr2h	equ	0xFDA
 22868                           fsr2l	equ	0xFD9
 22869                           status	equ	0xFD8
 22870                           
 22871 ;; *************** function _dispLogs *****************
 22872 ;; Defined at:
 22873 ;;		line 470 in file "UI.c"
 22874 ;; Parameters:    Size  Location     Type
 22875 ;;  myLog           2   17[COMRAM] int 
 22876 ;; Auto vars:     Size  Location     Type
 22877 ;;		None
 22878 ;; Return value:  Size  Location     Type
 22879 ;;                  1    wreg      void 
 22880 ;; Registers used:
 22881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22882 ;; Tracked objects:
 22883 ;;		On entry : 0/0
 22884 ;;		On exit  : 0/0
 22885 ;;		Unchanged: 0/0
 22886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22890 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22891 ;;Total ram usage:        2 bytes
 22892 ;; Hardware stack levels used:    1
 22893 ;; Hardware stack levels required when called:    2
 22894 ;; This function calls:
 22895 ;;		_retrieveLog
 22896 ;; This function is called by:
 22897 ;;		_updateMenu
 22898 ;; This function uses a non-reentrant model
 22899 ;;
 22900                           
 22901                           	psect	text82
 22902  005A80                     __ptext82:
 22903                           	opt stack 0
 22904  005A80                     _dispLogs:
 22905                           	opt stack 20
 22906                           
 22907                           ;UI.c: 471: logstate = 1;
 22908                           
 22909                           ;incstack = 0
 22910  005A80  0E00               	movlw	0
 22911  005A82  0100               	movlb	0	; () banked
 22912  005A84  6FF9               	movwf	(_logstate+1)& (0+255),b
 22913  005A86  0E01               	movlw	1
 22914  005A88  6FF8               	movwf	_logstate& (0+255),b
 22915                           
 22916                           ; BSR set to: 0
 22917                           ;UI.c: 472: log = myLog;
 22918  005A8A  C012  F0F0         	movff	dispLogs@myLog,_log
 22919  005A8E  C013  F0F1         	movff	dispLogs@myLog+1,_log+1
 22920                           
 22921                           ; BSR set to: 0
 22922                           ;UI.c: 473: retrieveLog(myLog - 1);
 22923  005A92  0EFF               	movlw	255
 22924  005A94  2412               	addwf	dispLogs@myLog,w,c
 22925  005A96  6E07               	movwf	retrieveLog@logNum,c
 22926  005A98  0EFF               	movlw	255
 22927  005A9A  2013               	addwfc	dispLogs@myLog+1,w,c
 22928  005A9C  6E08               	movwf	retrieveLog@logNum+1,c
 22929  005A9E  EC01  F020         	call	_retrieveLog	;wreg free
 22930  005AA2  0012               	return		;funcret
 22931  005AA4                     __end_of_dispLogs:
 22932                           	opt stack 0
 22933                           pclatu	equ	0xFFB
 22934                           pclath	equ	0xFFA
 22935                           tblptru	equ	0xFF8
 22936                           tblptrh	equ	0xFF7
 22937                           tblptrl	equ	0xFF6
 22938                           tablat	equ	0xFF5
 22939                           prodh	equ	0xFF4
 22940                           prodl	equ	0xFF3
 22941                           intcon	equ	0xFF2
 22942                           intcon2	equ	0xFF1
 22943                           intcon3	equ	0xFF0
 22944                           indf0	equ	0xFEF
 22945                           postinc0	equ	0xFEE
 22946                           fsr0h	equ	0xFEA
 22947                           fsr0l	equ	0xFE9
 22948                           wreg	equ	0xFE8
 22949                           postdec1	equ	0xFE5
 22950                           fsr1h	equ	0xFE2
 22951                           fsr1l	equ	0xFE1
 22952                           indf2	equ	0xFDF
 22953                           postinc2	equ	0xFDE
 22954                           postdec2	equ	0xFDD
 22955                           fsr2h	equ	0xFDA
 22956                           fsr2l	equ	0xFD9
 22957                           status	equ	0xFD8
 22958                           
 22959 ;; *************** function _retrieveLog *****************
 22960 ;; Defined at:
 22961 ;;		line 138 in file "EEPROM.c"
 22962 ;; Parameters:    Size  Location     Type
 22963 ;;  logNum          2    6[COMRAM] int 
 22964 ;; Auto vars:     Size  Location     Type
 22965 ;;  i               2   13[COMRAM] int 
 22966 ;;  addr            2   15[COMRAM] unsigned short 
 22967 ;;  byte3           1   12[COMRAM] unsigned char 
 22968 ;;  byte2           1   11[COMRAM] unsigned char 
 22969 ;;  byte1           1   10[COMRAM] unsigned char 
 22970 ;; Return value:  Size  Location     Type
 22971 ;;                  1    wreg      void 
 22972 ;; Registers used:
 22973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22974 ;; Tracked objects:
 22975 ;;		On entry : 0/0
 22976 ;;		On exit  : 0/0
 22977 ;;		Unchanged: 0/0
 22978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22979 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22980 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22981 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22982 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22983 ;;Total ram usage:       11 bytes
 22984 ;; Hardware stack levels used:    1
 22985 ;; Hardware stack levels required when called:    1
 22986 ;; This function calls:
 22987 ;;		i2_EEPROM_read
 22988 ;;		i2___wmul
 22989 ;; This function is called by:
 22990 ;;		_dispLogs
 22991 ;; This function uses a non-reentrant model
 22992 ;;
 22993                           
 22994                           	psect	text83
 22995  004002                     __ptext83:
 22996                           	opt stack 0
 22997  004002                     _retrieveLog:
 22998                           	opt stack 20
 22999                           
 23000                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23001                           
 23002                           ;incstack = 0
 23003  004002  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23004  004006  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23005  00400A  0E00               	movlw	0
 23006  00400C  6E04               	movwf	i2___wmul@multiplicand+1,c
 23007  00400E  0E0B               	movlw	11
 23008  004010  6E03               	movwf	i2___wmul@multiplicand,c
 23009  004012  EC1A  F02D         	call	i2___wmul	;wreg free
 23010  004016  0E01               	movlw	1
 23011  004018  2401               	addwf	?i2___wmul,w,c
 23012  00401A  6E10               	movwf	retrieveLog@addr,c
 23013  00401C  0E00               	movlw	0
 23014  00401E  2002               	addwfc	?i2___wmul+1,w,c
 23015  004020  6E11               	movwf	retrieveLog@addr+1,c
 23016                           
 23017                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23018  004022  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23019  004026  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23020  00402A  ECB6  F02D         	call	i2_EEPROM_read	;wreg free
 23021  00402E  6E0B               	movwf	retrieveLog@byte1,c
 23022                           
 23023                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23024  004030  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23025  004034  0E80               	movlw	128
 23026  004036  1609               	andwf	??_retrieveLog,f,c
 23027  004038  5009               	movf	??_retrieveLog,w,c
 23028  00403A  0100               	movlb	0	; () banked
 23029  00403C  6FF2               	movwf	_log_completion& (0+255),b
 23030  00403E  6BF3               	clrf	(_log_completion+1)& (0+255),b
 23031                           
 23032                           ; BSR set to: 0
 23033                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23034  004040  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23035  004044  0E0F               	movlw	15
 23036  004046  1609               	andwf	??_retrieveLog,f,c
 23037  004048  5009               	movf	??_retrieveLog,w,c
 23038  00404A  0101               	movlb	1	; () banked
 23039  00404C  6F43               	movwf	_log_count_total& (0+255),b
 23040  00404E  6B44               	clrf	(_log_count_total+1)& (0+255),b
 23041                           
 23042                           ; BSR set to: 1
 23043                           ;EEPROM.c: 150: addr++;
 23044  004050  4A10               	infsnz	retrieveLog@addr,f,c
 23045  004052  2A11               	incf	retrieveLog@addr+1,f,c
 23046                           
 23047                           ; BSR set to: 1
 23048                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23049  004054  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23050  004058  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23051  00405C  ECB6  F02D         	call	i2_EEPROM_read	;wreg free
 23052  004060  6E0C               	movwf	retrieveLog@byte2,c
 23053                           
 23054                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23055  004062  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23056  004066  3A09               	swapf	??_retrieveLog,f,c
 23057  004068  0E0F               	movlw	15
 23058  00406A  1609               	andwf	??_retrieveLog,f,c
 23059  00406C  0E0F               	movlw	15
 23060  00406E  1609               	andwf	??_retrieveLog,f,c
 23061  004070  5009               	movf	??_retrieveLog,w,c
 23062  004072  0100               	movlb	0	; () banked
 23063  004074  6FF4               	movwf	_log_count_pop_no_tab& (0+255),b
 23064  004076  6BF5               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23065                           
 23066                           ; BSR set to: 0
 23067                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23068  004078  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23069  00407C  0E0F               	movlw	15
 23070  00407E  1609               	andwf	??_retrieveLog,f,c
 23071  004080  5009               	movf	??_retrieveLog,w,c
 23072  004082  0101               	movlb	1	; () banked
 23073  004084  6F41               	movwf	_log_count_pop_w_tab& (0+255),b
 23074  004086  6B42               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23075                           
 23076                           ; BSR set to: 1
 23077                           ;EEPROM.c: 156: addr++;
 23078  004088  4A10               	infsnz	retrieveLog@addr,f,c
 23079  00408A  2A11               	incf	retrieveLog@addr+1,f,c
 23080                           
 23081                           ; BSR set to: 1
 23082                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23083  00408C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23084  004090  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23085  004094  ECB6  F02D         	call	i2_EEPROM_read	;wreg free
 23086  004098  6E0D               	movwf	retrieveLog@byte3,c
 23087                           
 23088                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23089  00409A  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23090  00409E  3A09               	swapf	??_retrieveLog,f,c
 23091  0040A0  0E0F               	movlw	15
 23092  0040A2  1609               	andwf	??_retrieveLog,f,c
 23093  0040A4  0E0F               	movlw	15
 23094  0040A6  1609               	andwf	??_retrieveLog,f,c
 23095  0040A8  5009               	movf	??_retrieveLog,w,c
 23096  0040AA  0101               	movlb	1	; () banked
 23097  0040AC  6F3F               	movwf	_log_count_can_w_lab& (0+255),b
 23098  0040AE  6B40               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23099                           
 23100                           ; BSR set to: 1
 23101                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23102  0040B0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23103  0040B4  0E0F               	movlw	15
 23104  0040B6  1609               	andwf	??_retrieveLog,f,c
 23105  0040B8  5009               	movf	??_retrieveLog,w,c
 23106  0040BA  0101               	movlb	1	; () banked
 23107  0040BC  6F3D               	movwf	_log_count_can_no_lab& (0+255),b
 23108  0040BE  6B3E               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23109                           
 23110                           ; BSR set to: 1
 23111                           ;EEPROM.c: 160: addr++;
 23112  0040C0  4A10               	infsnz	retrieveLog@addr,f,c
 23113  0040C2  2A11               	incf	retrieveLog@addr+1,f,c
 23114                           
 23115                           ; BSR set to: 1
 23116                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23117  0040C4  0E00               	movlw	0
 23118  0040C6  6E0F               	movwf	retrieveLog@i+1,c
 23119  0040C8  0E00               	movlw	0
 23120  0040CA  6E0E               	movwf	retrieveLog@i,c
 23121  0040CC                     i2l7346:
 23122                           
 23123                           ; BSR set to: 1
 23124  0040CC  BE0F               	btfsc	retrieveLog@i+1,7,c
 23125  0040CE  D006               	goto	i2l7350
 23126  0040D0  500F               	movf	retrieveLog@i+1,w,c
 23127  0040D2  E11E               	bnz	i2l7358
 23128  0040D4  0E07               	movlw	7
 23129  0040D6  5C0E               	subwf	retrieveLog@i,w,c
 23130  0040D8  B0D8               	btfsc	status,0,c
 23131  0040DA  D01A               	goto	i2l7358
 23132  0040DC                     i2l7350:
 23133                           
 23134                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23135  0040DC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23136  0040E0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23137  0040E4  ECB6  F02D         	call	i2_EEPROM_read	;wreg free
 23138  0040E8  6E09               	movwf	??_retrieveLog& (0+255),c
 23139  0040EA  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23140  0040EC  90D8               	bcf	status,0,c
 23141  0040EE  340E               	rlcf	retrieveLog@i,w,c
 23142  0040F0  6ED9               	movwf	fsr2l,c
 23143  0040F2  340F               	rlcf	retrieveLog@i+1,w,c
 23144  0040F4  6EDA               	movwf	fsr2h,c
 23145  0040F6  0E00               	movlw	low _log_startTime
 23146  0040F8  26D9               	addwf	fsr2l,f,c
 23147  0040FA  0E01               	movlw	high _log_startTime
 23148  0040FC  22DA               	addwfc	fsr2h,f,c
 23149  0040FE  C009  FFDE         	movff	??_retrieveLog,postinc2
 23150  004102  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23151                           
 23152                           ;EEPROM.c: 165: addr++;
 23153  004106  4A10               	infsnz	retrieveLog@addr,f,c
 23154  004108  2A11               	incf	retrieveLog@addr+1,f,c
 23155  00410A  4A0E               	infsnz	retrieveLog@i,f,c
 23156  00410C  2A0F               	incf	retrieveLog@i+1,f,c
 23157  00410E  D7DE               	goto	i2l7346
 23158  004110                     i2l7358:
 23159                           
 23160                           ;EEPROM.c: 166: }
 23161                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23162  004110  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23163  004114  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23164  004118  ECB6  F02D         	call	i2_EEPROM_read	;wreg free
 23165  00411C  6E09               	movwf	??_retrieveLog& (0+255),c
 23166  00411E  5009               	movf	??_retrieveLog,w,c
 23167  004120  0100               	movlb	0	; () banked
 23168  004122  6FF6               	movwf	_log_total_time& (0+255),b
 23169  004124  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23170                           
 23171                           ; BSR set to: 0
 23172  004126  0012               	return		;funcret
 23173  004128                     __end_of_retrieveLog:
 23174                           	opt stack 0
 23175                           pclatu	equ	0xFFB
 23176                           pclath	equ	0xFFA
 23177                           tblptru	equ	0xFF8
 23178                           tblptrh	equ	0xFF7
 23179                           tblptrl	equ	0xFF6
 23180                           tablat	equ	0xFF5
 23181                           prodh	equ	0xFF4
 23182                           prodl	equ	0xFF3
 23183                           intcon	equ	0xFF2
 23184                           intcon2	equ	0xFF1
 23185                           intcon3	equ	0xFF0
 23186                           indf0	equ	0xFEF
 23187                           postinc0	equ	0xFEE
 23188                           fsr0h	equ	0xFEA
 23189                           fsr0l	equ	0xFE9
 23190                           wreg	equ	0xFE8
 23191                           postdec1	equ	0xFE5
 23192                           fsr1h	equ	0xFE2
 23193                           fsr1l	equ	0xFE1
 23194                           indf2	equ	0xFDF
 23195                           postinc2	equ	0xFDE
 23196                           postdec2	equ	0xFDD
 23197                           fsr2h	equ	0xFDA
 23198                           fsr2l	equ	0xFD9
 23199                           status	equ	0xFD8
 23200                           
 23201 ;; *************** function i2_EEPROM_read *****************
 23202 ;; Defined at:
 23203 ;;		line 72 in file "EEPROM.c"
 23204 ;; Parameters:    Size  Location     Type
 23205 ;;  address         2    0[COMRAM] unsigned short 
 23206 ;; Auto vars:     Size  Location     Type
 23207 ;;		None
 23208 ;; Return value:  Size  Location     Type
 23209 ;;                  1    wreg      unsigned char 
 23210 ;; Registers used:
 23211 ;;		wreg, status,2
 23212 ;; Tracked objects:
 23213 ;;		On entry : 0/0
 23214 ;;		On exit  : 0/0
 23215 ;;		Unchanged: 0/0
 23216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23217 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23220 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23221 ;;Total ram usage:        2 bytes
 23222 ;; Hardware stack levels used:    1
 23223 ;; This function calls:
 23224 ;;		Nothing
 23225 ;; This function is called by:
 23226 ;;		_retrieveLog
 23227 ;; This function uses a non-reentrant model
 23228 ;;
 23229                           
 23230                           	psect	text84
 23231  005B6C                     __ptext84:
 23232                           	opt stack 0
 23233  005B6C                     i2_EEPROM_read:
 23234                           	opt stack 20
 23235                           
 23236                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23237                           
 23238                           ; BSR set to: 0
 23239                           ;incstack = 0
 23240  005B6C  5002               	movf	i2EEPROM_read@address+1,w,c
 23241  005B6E  6EAA               	movwf	4010,c	;volatile
 23242                           
 23243                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23244  005B70  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23245                           
 23246                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23247  005B74  9EA6               	bcf	4006,7,c	;volatile
 23248                           
 23249                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23250  005B76  9CA6               	bcf	4006,6,c	;volatile
 23251                           
 23252                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23253  005B78  80A6               	bsf	4006,0,c	;volatile
 23254  005B7A                     i2l1146:
 23255  005B7A  B0A6               	btfsc	4006,0,c	;volatile
 23256  005B7C  D7FE               	goto	i2l1146
 23257                           
 23258                           ;EEPROM.c: 85: return EEDATA;
 23259  005B7E  50A8               	movf	4008,w,c	;volatile
 23260  005B80  0012               	return	
 23261  005B82                     __end_ofi2_EEPROM_read:
 23262                           	opt stack 0
 23263                           pclatu	equ	0xFFB
 23264                           pclath	equ	0xFFA
 23265                           tblptru	equ	0xFF8
 23266                           tblptrh	equ	0xFF7
 23267                           tblptrl	equ	0xFF6
 23268                           tablat	equ	0xFF5
 23269                           prodh	equ	0xFF4
 23270                           prodl	equ	0xFF3
 23271                           intcon	equ	0xFF2
 23272                           intcon2	equ	0xFF1
 23273                           intcon3	equ	0xFF0
 23274                           indf0	equ	0xFEF
 23275                           postinc0	equ	0xFEE
 23276                           fsr0h	equ	0xFEA
 23277                           fsr0l	equ	0xFE9
 23278                           wreg	equ	0xFE8
 23279                           postdec1	equ	0xFE5
 23280                           fsr1h	equ	0xFE2
 23281                           fsr1l	equ	0xFE1
 23282                           indf2	equ	0xFDF
 23283                           postinc2	equ	0xFDE
 23284                           postdec2	equ	0xFDD
 23285                           fsr2h	equ	0xFDA
 23286                           fsr2l	equ	0xFD9
 23287                           status	equ	0xFD8
 23288                           
 23289 ;; *************** function _updateArmState *****************
 23290 ;; Defined at:
 23291 ;;		line 652 in file "sort.c"
 23292 ;; Parameters:    Size  Location     Type
 23293 ;;		None
 23294 ;; Auto vars:     Size  Location     Type
 23295 ;;		None
 23296 ;; Return value:  Size  Location     Type
 23297 ;;                  1    wreg      void 
 23298 ;; Registers used:
 23299 ;;		wreg, status,2, status,0
 23300 ;; Tracked objects:
 23301 ;;		On entry : 0/0
 23302 ;;		On exit  : 0/0
 23303 ;;		Unchanged: 0/0
 23304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23309 ;;Total ram usage:        2 bytes
 23310 ;; Hardware stack levels used:    1
 23311 ;; This function calls:
 23312 ;;		Nothing
 23313 ;; This function is called by:
 23314 ;;		_handler
 23315 ;; This function uses a non-reentrant model
 23316 ;;
 23317                           
 23318                           	psect	text85
 23319  0055AC                     __ptext85:
 23320                           	opt stack 0
 23321  0055AC                     _updateArmState:
 23322                           	opt stack 23
 23323                           
 23324                           ;sort.c: 659: if(!was_low_2){
 23325                           
 23326                           ;incstack = 0
 23327  0055AC  5079               	movf	_was_low_2,w,c	;volatile
 23328  0055AE  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23329  0055B0  B4D8               	btfsc	status,2,c
 23330  0055B2  D007               	goto	i2l10202
 23331  0055B4  D016               	goto	i2l962
 23332  0055B6                     i2l10196:
 23333                           
 23334                           ;sort.c: 664: PR2 = 0x20;
 23335  0055B6  0E20               	movlw	32
 23336  0055B8  6ECB               	movwf	4043,c	;volatile
 23337                           
 23338                           ;sort.c: 665: break;
 23339  0055BA  0012               	return	
 23340  0055BC                     i2l10198:
 23341                           
 23342                           ;sort.c: 668: PR2 = 0x40;
 23343  0055BC  0E40               	movlw	64
 23344  0055BE  6ECB               	movwf	4043,c	;volatile
 23345                           
 23346                           ;sort.c: 670: }
 23347                           
 23348                           ;sort.c: 669: break;
 23349  0055C0  0012               	return	
 23350  0055C2                     i2l10202:
 23351  0055C2  C0EA  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23352  0055C6  C0EB  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23353                           
 23354                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23355                           ; Switch size 1, requested type "space"
 23356                           ; Number of cases is 1, Range of values is 0 to 0
 23357                           ; switch strategies available:
 23358                           ; Name         Instructions Cycles
 23359                           ; simple_byte            4     3 (average)
 23360                           ;	Chosen strategy is simple_byte
 23361  0055CA  5002               	movf	??_updateArmState+1,w,c
 23362  0055CC  0A00               	xorlw	0	; case 0
 23363  0055CE  A4D8               	btfss	status,2,c
 23364  0055D0  0012               	return	
 23365                           
 23366                           ; Switch size 1, requested type "space"
 23367                           ; Number of cases is 2, Range of values is 0 to 1
 23368                           ; switch strategies available:
 23369                           ; Name         Instructions Cycles
 23370                           ; simple_byte            7     4 (average)
 23371                           ;	Chosen strategy is simple_byte
 23372  0055D2  5001               	movf	??_updateArmState,w,c
 23373  0055D4  0A00               	xorlw	0	; case 0
 23374  0055D6  B4D8               	btfsc	status,2,c
 23375  0055D8  D7EE               	goto	i2l10196
 23376  0055DA  0A01               	xorlw	1	; case 1
 23377  0055DC  A4D8               	btfss	status,2,c
 23378                           
 23379                           ;sort.c: 671: }
 23380  0055DE  0012               	return	
 23381  0055E0  D7ED               	goto	i2l10198
 23382  0055E2                     i2l962:
 23383                           
 23384                           ;sort.c: 672: else{
 23385                           ;sort.c: 674: PR2 = 0xFF;
 23386  0055E2  68CB               	setf	4043,c	;volatile
 23387  0055E4  0012               	return	
 23388  0055E6                     __end_of_updateArmState:
 23389                           	opt stack 0
 23390                           pclatu	equ	0xFFB
 23391                           pclath	equ	0xFFA
 23392                           tblptru	equ	0xFF8
 23393                           tblptrh	equ	0xFF7
 23394                           tblptrl	equ	0xFF6
 23395                           tablat	equ	0xFF5
 23396                           prodh	equ	0xFF4
 23397                           prodl	equ	0xFF3
 23398                           intcon	equ	0xFF2
 23399                           intcon2	equ	0xFF1
 23400                           intcon3	equ	0xFF0
 23401                           indf0	equ	0xFEF
 23402                           postinc0	equ	0xFEE
 23403                           fsr0h	equ	0xFEA
 23404                           fsr0l	equ	0xFE9
 23405                           wreg	equ	0xFE8
 23406                           postdec1	equ	0xFE5
 23407                           fsr1h	equ	0xFE2
 23408                           fsr1l	equ	0xFE1
 23409                           indf2	equ	0xFDF
 23410                           postinc2	equ	0xFDE
 23411                           postdec2	equ	0xFDD
 23412                           fsr2h	equ	0xFDA
 23413                           fsr2l	equ	0xFD9
 23414                           status	equ	0xFD8
 23415                           
 23416 ;; *************** function _printSortTimer *****************
 23417 ;; Defined at:
 23418 ;;		line 495 in file "sort.c"
 23419 ;; Parameters:    Size  Location     Type
 23420 ;;		None
 23421 ;; Auto vars:     Size  Location     Type
 23422 ;;  i               2   70[COMRAM] int 
 23423 ;;  i               2   72[COMRAM] int 
 23424 ;;  curTime        14   44[COMRAM] int [7]
 23425 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23426 ;;  sec             2   64[COMRAM] int 
 23427 ;;  min             2   62[COMRAM] int 
 23428 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23429 ;;  start_sec       2   58[COMRAM] unsigned int 
 23430 ;; Return value:  Size  Location     Type
 23431 ;;                  1    wreg      void 
 23432 ;; Registers used:
 23433 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23434 ;; Tracked objects:
 23435 ;;		On entry : 0/0
 23436 ;;		On exit  : 0/0
 23437 ;;		Unchanged: 0/0
 23438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23440 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23441 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23442 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23443 ;;Total ram usage:       33 bytes
 23444 ;; Hardware stack levels used:    1
 23445 ;; Hardware stack levels required when called:    3
 23446 ;; This function calls:
 23447 ;;		i2___awmod
 23448 ;;		i2___lwdiv
 23449 ;;		i2___lwmod
 23450 ;;		i2___wmul
 23451 ;;		i2_delay_ms
 23452 ;;		i2_getRTC
 23453 ;;		i2_lcdInst
 23454 ;;		i2_printf
 23455 ;; This function is called by:
 23456 ;;		_handler
 23457 ;; This function uses a non-reentrant model
 23458 ;;
 23459                           
 23460                           	psect	text86
 23461  002CC2                     __ptext86:
 23462                           	opt stack 0
 23463  002CC2                     _printSortTimer:
 23464                           	opt stack 20
 23465                           
 23466                           ;sort.c: 496: getRTC();
 23467                           
 23468                           ;incstack = 0
 23469  002CC2  ECB7  F027         	call	i2_getRTC	;wreg free
 23470                           
 23471                           ;sort.c: 497: int curTime[7];
 23472                           ;sort.c: 498: for(int i = 0; i < 7; i++){
 23473  002CC6  0E00               	movlw	0
 23474  002CC8  6E4A               	movwf	printSortTimer@i+1,c
 23475  002CCA  0E00               	movlw	0
 23476  002CCC  6E49               	movwf	printSortTimer@i,c
 23477  002CCE                     i2l10034:
 23478  002CCE  BE4A               	btfsc	printSortTimer@i+1,7,c
 23479  002CD0  D006               	goto	i2l10038
 23480  002CD2  504A               	movf	printSortTimer@i+1,w,c
 23481  002CD4  E131               	bnz	i2l10044
 23482  002CD6  0E07               	movlw	7
 23483  002CD8  5C49               	subwf	printSortTimer@i,w,c
 23484  002CDA  B0D8               	btfsc	status,0,c
 23485  002CDC  D02D               	goto	i2l10044
 23486  002CDE                     i2l10038:
 23487                           
 23488                           ;sort.c: 499: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23489  002CDE  0E1C               	movlw	low _time
 23490  002CE0  2449               	addwf	printSortTimer@i,w,c
 23491  002CE2  6ED9               	movwf	fsr2l,c
 23492  002CE4  0E01               	movlw	high _time
 23493  002CE6  204A               	addwfc	printSortTimer@i+1,w,c
 23494  002CE8  6EDA               	movwf	fsr2h,c
 23495  002CEA  50DF               	movf	indf2,w,c
 23496  002CEC  6E2A               	movwf	??_printSortTimer& (0+255),c
 23497  002CEE  3A2A               	swapf	??_printSortTimer,f,c
 23498  002CF0  0E0F               	movlw	15
 23499  002CF2  162A               	andwf	??_printSortTimer,f,c
 23500  002CF4  0E0F               	movlw	15
 23501  002CF6  162A               	andwf	??_printSortTimer,f,c
 23502  002CF8  502A               	movf	??_printSortTimer,w,c
 23503  002CFA  0D0A               	mullw	10
 23504  002CFC  0E1C               	movlw	low _time
 23505  002CFE  2449               	addwf	printSortTimer@i,w,c
 23506  002D00  6ED9               	movwf	fsr2l,c
 23507  002D02  0E01               	movlw	high _time
 23508  002D04  204A               	addwfc	printSortTimer@i+1,w,c
 23509  002D06  6EDA               	movwf	fsr2h,c
 23510  002D08  50DF               	movf	indf2,w,c
 23511  002D0A  0B0F               	andlw	15
 23512  002D0C  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23513  002D0E  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23514  002D10  50F3               	movf	prodl,w,c
 23515  002D12  262B               	addwf	??_printSortTimer+1,f,c
 23516  002D14  50F4               	movf	prodh,w,c
 23517  002D16  222C               	addwfc	??_printSortTimer+2,f,c
 23518  002D18  90D8               	bcf	status,0,c
 23519  002D1A  3449               	rlcf	printSortTimer@i,w,c
 23520  002D1C  6ED9               	movwf	fsr2l,c
 23521  002D1E  344A               	rlcf	printSortTimer@i+1,w,c
 23522  002D20  6EDA               	movwf	fsr2h,c
 23523  002D22  0E2D               	movlw	low printSortTimer@curTime
 23524  002D24  26D9               	addwf	fsr2l,f,c
 23525  002D26  0E00               	movlw	high printSortTimer@curTime
 23526  002D28  22DA               	addwfc	fsr2h,f,c
 23527  002D2A  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23528  002D2E  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23529  002D32  4A49               	infsnz	printSortTimer@i,f,c
 23530  002D34  2A4A               	incf	printSortTimer@i+1,f,c
 23531  002D36  D7CB               	goto	i2l10034
 23532  002D38                     i2l10044:
 23533                           
 23534                           ;sort.c: 500: }
 23535                           ;sort.c: 501: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23536  002D38  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23537  002D3C  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23538  002D40  0E00               	movlw	0
 23539  002D42  6E04               	movwf	i2___wmul@multiplicand+1,c
 23540  002D44  0E3C               	movlw	60
 23541  002D46  6E03               	movwf	i2___wmul@multiplicand,c
 23542  002D48  EC1A  F02D         	call	i2___wmul	;wreg free
 23543  002D4C  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23544  002D50  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23545  002D54  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23546  002D58  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23547  002D5C  0E0E               	movlw	14
 23548  002D5E  6E04               	movwf	i2___wmul@multiplicand+1,c
 23549  002D60  0E10               	movlw	16
 23550  002D62  6E03               	movwf	i2___wmul@multiplicand,c
 23551  002D64  EC1A  F02D         	call	i2___wmul	;wreg free
 23552  002D68  5001               	movf	?i2___wmul,w,c
 23553  002D6A  262A               	addwf	??_printSortTimer,f,c
 23554  002D6C  5002               	movf	?i2___wmul+1,w,c
 23555  002D6E  222B               	addwfc	??_printSortTimer+1,f,c
 23556  002D70  0101               	movlb	1	; () banked
 23557  002D72  510E               	movf	_startTime& (0+255),w,b
 23558  002D74  242A               	addwf	??_printSortTimer,w,c
 23559  002D76  6E3B               	movwf	printSortTimer@start_sec,c
 23560  002D78  0101               	movlb	1	; () banked
 23561  002D7A  510F               	movf	(_startTime+1)& (0+255),w,b
 23562  002D7C  202B               	addwfc	??_printSortTimer+1,w,c
 23563  002D7E  6E3C               	movwf	printSortTimer@start_sec+1,c
 23564                           
 23565                           ;sort.c: 502: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23566  002D80  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23567  002D84  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23568  002D88  0E00               	movlw	0
 23569  002D8A  6E04               	movwf	i2___wmul@multiplicand+1,c
 23570  002D8C  0E3C               	movlw	60
 23571  002D8E  6E03               	movwf	i2___wmul@multiplicand,c
 23572  002D90  EC1A  F02D         	call	i2___wmul	;wreg free
 23573  002D94  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23574  002D98  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23575  002D9C  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23576  002DA0  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23577  002DA4  0E0E               	movlw	14
 23578  002DA6  6E04               	movwf	i2___wmul@multiplicand+1,c
 23579  002DA8  0E10               	movlw	16
 23580  002DAA  6E03               	movwf	i2___wmul@multiplicand,c
 23581  002DAC  EC1A  F02D         	call	i2___wmul	;wreg free
 23582  002DB0  5001               	movf	?i2___wmul,w,c
 23583  002DB2  262A               	addwf	??_printSortTimer,f,c
 23584  002DB4  5002               	movf	?i2___wmul+1,w,c
 23585  002DB6  222B               	addwfc	??_printSortTimer+1,f,c
 23586  002DB8  502D               	movf	printSortTimer@curTime,w,c
 23587  002DBA  242A               	addwf	??_printSortTimer,w,c
 23588  002DBC  6E3D               	movwf	printSortTimer@cur_sec,c
 23589  002DBE  502E               	movf	printSortTimer@curTime+1,w,c
 23590  002DC0  202B               	addwfc	??_printSortTimer+1,w,c
 23591  002DC2  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23592                           
 23593                           ;sort.c: 503: unsigned int timeDiff = cur_sec - start_sec;
 23594  002DC4  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23595  002DC8  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23596  002DCC  1E2A               	comf	??_printSortTimer,f,c
 23597  002DCE  1E2B               	comf	??_printSortTimer+1,f,c
 23598  002DD0  4A2A               	infsnz	??_printSortTimer,f,c
 23599  002DD2  2A2B               	incf	??_printSortTimer+1,f,c
 23600  002DD4  503D               	movf	printSortTimer@cur_sec,w,c
 23601  002DD6  242A               	addwf	??_printSortTimer,w,c
 23602  002DD8  6E45               	movwf	printSortTimer@timeDiff,c
 23603  002DDA  503E               	movf	printSortTimer@cur_sec+1,w,c
 23604  002DDC  202B               	addwfc	??_printSortTimer+1,w,c
 23605  002DDE  6E46               	movwf	printSortTimer@timeDiff+1,c
 23606                           
 23607                           ;sort.c: 505: total_time = timeDiff;
 23608  002DE0  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23609  002DE4  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23610                           
 23611                           ;sort.c: 507: if(f_most_recent_sort_time){
 23612  002DE8  0101               	movlb	1	; () banked
 23613  002DEA  5135               	movf	_f_most_recent_sort_time& (0+255),w,b
 23614  002DEC  0101               	movlb	1	; () banked
 23615  002DEE  1136               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23616  002DF0  B4D8               	btfsc	status,2,c
 23617  002DF2  D009               	goto	i2l10056
 23618                           
 23619                           ; BSR set to: 1
 23620                           ;sort.c: 508: most_recent_sort_time = total_time;
 23621  002DF4  C0FA  F145         	movff	_total_time,_most_recent_sort_time
 23622  002DF8  C0FB  F146         	movff	_total_time+1,_most_recent_sort_time+1
 23623                           
 23624                           ; BSR set to: 1
 23625                           ;sort.c: 509: f_most_recent_sort_time = 0;
 23626  002DFC  0E00               	movlw	0
 23627  002DFE  0101               	movlb	1	; () banked
 23628  002E00  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23629  002E02  0E00               	movlw	0
 23630  002E04  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
 23631  002E06                     i2l10056:
 23632                           
 23633                           ; BSR set to: 1
 23634                           ;sort.c: 510: }
 23635                           ;sort.c: 512: if(total_time >= 20){
 23636  002E06  0100               	movlb	0	; () banked
 23637  002E08  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 23638  002E0A  D05B               	goto	i2l908
 23639  002E0C  0100               	movlb	0	; () banked
 23640  002E0E  51FB               	movf	(_total_time+1)& (0+255),w,b
 23641  002E10  E105               	bnz	i2u957_40
 23642  002E12  0E14               	movlw	20
 23643  002E14  0100               	movlb	0	; () banked
 23644  002E16  5DFA               	subwf	_total_time& (0+255),w,b
 23645  002E18  A0D8               	btfss	status,0,c
 23646  002E1A  D053               	goto	i2l908
 23647  002E1C                     i2u957_40:
 23648                           
 23649                           ; BSR set to: 0
 23650                           ;sort.c: 513: if(LATBbits.LATB2 == 0){
 23651  002E1C  B48A               	btfsc	3978,2,c	;volatile
 23652  002E1E  D036               	goto	i2l10078
 23653                           
 23654                           ; BSR set to: 0
 23655                           ;sort.c: 514: motor_toggle_count++;
 23656  002E20  0101               	movlb	1	; () banked
 23657  002E22  4B47               	infsnz	_motor_toggle_count& (0+255),f,b
 23658  002E24  2B48               	incf	(_motor_toggle_count+1)& (0+255),f,b
 23659                           
 23660                           ; BSR set to: 1
 23661                           ;sort.c: 515: if(motor_toggle_count == 2){
 23662  002E26  0E02               	movlw	2
 23663  002E28  0101               	movlb	1	; () banked
 23664  002E2A  1947               	xorwf	_motor_toggle_count& (0+255),w,b
 23665  002E2C  0101               	movlb	1	; () banked
 23666  002E2E  1148               	iorwf	(_motor_toggle_count+1)& (0+255),w,b
 23667  002E30  A4D8               	btfss	status,2,c
 23668  002E32  D047               	goto	i2l908
 23669                           
 23670                           ; BSR set to: 1
 23671                           ;sort.c: 516: motor_toggle_count = 0;
 23672  002E34  0E00               	movlw	0
 23673  002E36  0101               	movlb	1	; () banked
 23674  002E38  6F48               	movwf	(_motor_toggle_count+1)& (0+255),b
 23675  002E3A  0E00               	movlw	0
 23676  002E3C  6F47               	movwf	_motor_toggle_count& (0+255),b
 23677                           
 23678                           ;sort.c: 517: for(int i=0; i<46; i++){
 23679  002E3E  0E00               	movlw	0
 23680  002E40  6E48               	movwf	printSortTimer@i_1164+1,c
 23681  002E42  0E00               	movlw	0
 23682  002E44  6E47               	movwf	printSortTimer@i_1164,c
 23683                           
 23684                           ; BSR set to: 1
 23685  002E46  BE48               	btfsc	printSortTimer@i_1164+1,7,c
 23686  002E48  D006               	goto	i2l10070
 23687  002E4A  5048               	movf	printSortTimer@i_1164+1,w,c
 23688  002E4C  E11D               	bnz	i2l912
 23689  002E4E  0E2E               	movlw	46
 23690  002E50  5C47               	subwf	printSortTimer@i_1164,w,c
 23691  002E52  B0D8               	btfsc	status,0,c
 23692  002E54  D019               	goto	i2l912
 23693  002E56                     i2l10070:
 23694                           
 23695                           ;sort.c: 518: LATBbits.LATB2 = !LATBbits.LATB2;
 23696  002E56  B48A               	btfsc	3978,2,c	;volatile
 23697  002E58  D003               	goto	i2u961_40
 23698  002E5A  6A2A               	clrf	??_printSortTimer& (0+255),c
 23699  002E5C  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23700  002E5E  D001               	goto	i2u962_48
 23701  002E60                     i2u961_40:
 23702  002E60  6A2A               	clrf	??_printSortTimer& (0+255),c
 23703  002E62                     i2u962_48:
 23704  002E62  462A               	rlncf	??_printSortTimer,f,c
 23705  002E64  462A               	rlncf	??_printSortTimer,f,c
 23706  002E66  508A               	movf	3978,w,c	;volatile
 23707  002E68  182A               	xorwf	??_printSortTimer,w,c
 23708  002E6A  0BFB               	andlw	-5
 23709  002E6C  182A               	xorwf	??_printSortTimer,w,c
 23710  002E6E  6E8A               	movwf	3978,c	;volatile
 23711                           
 23712                           ;sort.c: 519: delay_ms(45-i);
 23713  002E70  5047               	movf	printSortTimer@i_1164,w,c
 23714  002E72  0800               	sublw	0
 23715  002E74  0F2D               	addlw	45
 23716  002E76  EC91  F02D         	call	i2_delay_ms
 23717  002E7A  4A47               	infsnz	printSortTimer@i_1164,f,c
 23718  002E7C  2A48               	incf	printSortTimer@i_1164+1,f,c
 23719  002E7E  BE48               	btfsc	printSortTimer@i_1164+1,7,c
 23720  002E80  D7EA               	goto	i2l10070
 23721  002E82  5048               	movf	printSortTimer@i_1164+1,w,c
 23722  002E84  E101               	bnz	i2u963_40
 23723  002E86  D7E3               	goto	L17
 23724  002E88                     i2u963_40:
 23725  002E88                     i2l912:
 23726                           
 23727                           ;sort.c: 520: }
 23728                           ;sort.c: 521: LATBbits.LATB2 = 1;
 23729  002E88  848A               	bsf	3978,2,c	;volatile
 23730                           
 23731                           ;sort.c: 522: }
 23732                           ;sort.c: 523: }
 23733  002E8A  D01B               	goto	i2l908
 23734  002E8C                     i2l10078:
 23735                           
 23736                           ;sort.c: 524: else if(total_time % 20 == 0){
 23737  002E8C  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 23738  002E90  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 23739  002E94  0E00               	movlw	0
 23740  002E96  6E04               	movwf	i2___awmod@divisor+1,c
 23741  002E98  0E14               	movlw	20
 23742  002E9A  6E03               	movwf	i2___awmod@divisor,c
 23743  002E9C  ECF0  F027         	call	i2___awmod	;wreg free
 23744  002EA0  5001               	movf	?i2___awmod,w,c
 23745  002EA2  1002               	iorwf	?i2___awmod+1,w,c
 23746  002EA4  A4D8               	btfss	status,2,c
 23747  002EA6  D00D               	goto	i2l908
 23748                           
 23749                           ;sort.c: 525: LATBbits.LATB2 = !LATBbits.LATB2;
 23750  002EA8  B48A               	btfsc	3978,2,c	;volatile
 23751  002EAA  D003               	goto	i2u965_40
 23752  002EAC  6A2A               	clrf	??_printSortTimer& (0+255),c
 23753  002EAE  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23754  002EB0  D001               	goto	i2u966_48
 23755  002EB2                     i2u965_40:
 23756  002EB2  6A2A               	clrf	??_printSortTimer& (0+255),c
 23757  002EB4                     i2u966_48:
 23758  002EB4  462A               	rlncf	??_printSortTimer,f,c
 23759  002EB6  462A               	rlncf	??_printSortTimer,f,c
 23760  002EB8  508A               	movf	3978,w,c	;volatile
 23761  002EBA  182A               	xorwf	??_printSortTimer,w,c
 23762  002EBC  0BFB               	andlw	-5
 23763  002EBE  182A               	xorwf	??_printSortTimer,w,c
 23764  002EC0  6E8A               	movwf	3978,c	;volatile
 23765  002EC2                     i2l908:
 23766                           
 23767                           ;sort.c: 526: }
 23768                           ;sort.c: 527: }
 23769                           ;sort.c: 529: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23770  002EC2  C145  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23771  002EC6  C146  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23772  002ECA  1E2A               	comf	??_printSortTimer,f,c
 23773  002ECC  1E2B               	comf	??_printSortTimer+1,f,c
 23774  002ECE  4A2A               	infsnz	??_printSortTimer,f,c
 23775  002ED0  2A2B               	incf	??_printSortTimer+1,f,c
 23776  002ED2  0100               	movlb	0	; () banked
 23777  002ED4  51FA               	movf	_total_time& (0+255),w,b
 23778  002ED6  262A               	addwf	??_printSortTimer,f,c
 23779  002ED8  0100               	movlb	0	; () banked
 23780  002EDA  51FB               	movf	(_total_time+1)& (0+255),w,b
 23781  002EDC  222B               	addwfc	??_printSortTimer+1,f,c
 23782  002EDE  0E2A               	movlw	42
 23783  002EE0  182A               	xorwf	??_printSortTimer,w,c
 23784  002EE2  102B               	iorwf	??_printSortTimer+1,w,c
 23785  002EE4  B4D8               	btfsc	status,2,c
 23786  002EE6  D007               	goto	i2l10084
 23787                           
 23788                           ; BSR set to: 0
 23789  002EE8  0EB3               	movlw	179
 23790  002EEA  0100               	movlb	0	; () banked
 23791  002EEC  19FA               	xorwf	_total_time& (0+255),w,b
 23792  002EEE  0100               	movlb	0	; () banked
 23793  002EF0  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23794  002EF2  A4D8               	btfss	status,2,c
 23795  002EF4  D003               	goto	i2l10086
 23796  002EF6                     i2l10084:
 23797                           
 23798                           ; BSR set to: 0
 23799                           ;sort.c: 530: machine_state = DoneSorting_state;
 23800  002EF6  0E02               	movlw	2
 23801  002EF8  0100               	movlb	0	; () banked
 23802  002EFA  6FFC               	movwf	_machine_state& (0+255),b
 23803  002EFC                     i2l10086:
 23804                           
 23805                           ; BSR set to: 0
 23806                           ;sort.c: 532: }
 23807                           ;sort.c: 534: int min = (timeDiff % 3600) / 60;
 23808  002EFC  0E0E               	movlw	14
 23809  002EFE  6E04               	movwf	i2___lwmod@divisor+1,c
 23810  002F00  0E10               	movlw	16
 23811  002F02  6E03               	movwf	i2___lwmod@divisor,c
 23812  002F04  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23813  002F08  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23814  002F0C  ECB5  F02A         	call	i2___lwmod	;wreg free
 23815  002F10  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23816  002F14  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23817  002F18  0E00               	movlw	0
 23818  002F1A  6E09               	movwf	i2___lwdiv@divisor+1,c
 23819  002F1C  0E3C               	movlw	60
 23820  002F1E  6E08               	movwf	i2___lwdiv@divisor,c
 23821  002F20  ECAE  F029         	call	i2___lwdiv	;wreg free
 23822  002F24  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23823  002F28  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23824                           
 23825                           ;sort.c: 535: int sec = (timeDiff % 3600) % 60;
 23826  002F2C  0E0E               	movlw	14
 23827  002F2E  6E04               	movwf	i2___lwmod@divisor+1,c
 23828  002F30  0E10               	movlw	16
 23829  002F32  6E03               	movwf	i2___lwmod@divisor,c
 23830  002F34  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23831  002F38  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23832  002F3C  ECB5  F02A         	call	i2___lwmod	;wreg free
 23833  002F40  C001  F043         	movff	?i2___lwmod,_printSortTimer$2574
 23834  002F44  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2574+1
 23835                           
 23836                           ;sort.c: 535: int sec = (timeDiff % 3600) % 60;
 23837  002F48  C043  F001         	movff	_printSortTimer$2574,i2___lwmod@dividend
 23838  002F4C  C044  F002         	movff	_printSortTimer$2574+1,i2___lwmod@dividend+1
 23839  002F50  0E00               	movlw	0
 23840  002F52  6E04               	movwf	i2___lwmod@divisor+1,c
 23841  002F54  0E3C               	movlw	60
 23842  002F56  6E03               	movwf	i2___lwmod@divisor,c
 23843  002F58  ECB5  F02A         	call	i2___lwmod	;wreg free
 23844  002F5C  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23845  002F60  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23846                           
 23847                           ;sort.c: 537: lcdInst(0b10000000);;
 23848  002F64  0E80               	movlw	128
 23849  002F66  ECEA  F02D         	call	i2_lcdInst
 23850                           
 23851                           ;sort.c: 538: printf("SORTING...     ");
 23852  002F6A  0E3D               	movlw	low STR_65
 23853  002F6C  6E0D               	movwf	i2printf@f,c
 23854  002F6E  0EFE               	movlw	high STR_65
 23855  002F70  6E0E               	movwf	i2printf@f+1,c
 23856  002F72  ECA0  F011         	call	i2_printf	;wreg free
 23857                           
 23858                           ;sort.c: 539: lcdInst(0b11000000);;
 23859  002F76  0EC0               	movlw	192
 23860  002F78  ECEA  F02D         	call	i2_lcdInst
 23861                           
 23862                           ;sort.c: 540: printf("TIME %d:%02d   ", min, sec);
 23863  002F7C  0E4D               	movlw	low STR_66
 23864  002F7E  6E0D               	movwf	i2printf@f,c
 23865  002F80  0EFE               	movlw	high STR_66
 23866  002F82  6E0E               	movwf	i2printf@f+1,c
 23867  002F84  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23868  002F88  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23869  002F8C  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23870  002F90  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23871  002F94  ECA0  F011         	call	i2_printf	;wreg free
 23872  002F98  0012               	return		;funcret
 23873  002F9A                     __end_of_printSortTimer:
 23874                           	opt stack 0
 23875                           pclatu	equ	0xFFB
 23876                           pclath	equ	0xFFA
 23877                           tblptru	equ	0xFF8
 23878                           tblptrh	equ	0xFF7
 23879                           tblptrl	equ	0xFF6
 23880                           tablat	equ	0xFF5
 23881                           prodh	equ	0xFF4
 23882                           prodl	equ	0xFF3
 23883                           intcon	equ	0xFF2
 23884                           intcon2	equ	0xFF1
 23885                           intcon3	equ	0xFF0
 23886                           indf0	equ	0xFEF
 23887                           postinc0	equ	0xFEE
 23888                           fsr0h	equ	0xFEA
 23889                           fsr0l	equ	0xFE9
 23890                           wreg	equ	0xFE8
 23891                           postdec1	equ	0xFE5
 23892                           fsr1h	equ	0xFE2
 23893                           fsr1l	equ	0xFE1
 23894                           indf2	equ	0xFDF
 23895                           postinc2	equ	0xFDE
 23896                           postdec2	equ	0xFDD
 23897                           fsr2h	equ	0xFDA
 23898                           fsr2l	equ	0xFD9
 23899                           status	equ	0xFD8
 23900                           
 23901 ;; *************** function i2_printf *****************
 23902 ;; Defined at:
 23903 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23904 ;; Parameters:    Size  Location     Type
 23905 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23906 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 23907 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 23908 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 23909 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 23910 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 23911 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 23912 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 23913 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 23914 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 23915 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 23916 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 23917 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 23918 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 23919 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 23920 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 23921 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 23922 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 23923 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 23924 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 23925 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 23926 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 23927 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 23928 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 23929 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 23930 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 23931 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 23932 ;;		 -> STR_1(18), 
 23933 ;; Auto vars:     Size  Location     Type
 23934 ;;  printf          4    0        struct .
 23935 ;;  printf          2   39[COMRAM] int 
 23936 ;;  printf          2   35[COMRAM] unsigned int 
 23937 ;;  printf          2   33[COMRAM] unsigned int 
 23938 ;;  printf          2   31[COMRAM] PTR void [1]
 23939 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23940 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23941 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 23942 ;;		 -> printRTC@month(4), UI@month(4), 
 23943 ;;  printf          1   38[COMRAM] char 
 23944 ;;  printf          1   37[COMRAM] unsigned char 
 23945 ;;  printf          1   28[COMRAM] char 
 23946 ;; Return value:  Size  Location     Type
 23947 ;;                  2   12[COMRAM] int 
 23948 ;; Registers used:
 23949 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23950 ;; Tracked objects:
 23951 ;;		On entry : 0/0
 23952 ;;		On exit  : 0/0
 23953 ;;		Unchanged: 0/0
 23954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23955 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23956 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23957 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23958 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23959 ;;Total ram usage:       29 bytes
 23960 ;; Hardware stack levels used:    1
 23961 ;; Hardware stack levels required when called:    2
 23962 ;; This function calls:
 23963 ;;		i2___lwdiv
 23964 ;;		i2___lwmod
 23965 ;;		i2___wmul
 23966 ;;		i2_isdigit
 23967 ;;		i2_putch
 23968 ;; This function is called by:
 23969 ;;		_change_state_to_menu_11
 23970 ;;		_change_state_to_menu_23
 23971 ;;		_change_state_to_logs_11
 23972 ;;		_change_state_to_logs_12
 23973 ;;		_change_state_to_logs_22
 23974 ;;		_change_state_to_logs_23
 23975 ;;		_change_state_to_logs_33
 23976 ;;		_change_state_to_logs_34
 23977 ;;		_printSortTimer
 23978 ;;		i2_change_state_to_menu_start
 23979 ;;		i2_change_state_to_menu_12
 23980 ;;		i2_change_state_to_menu_22
 23981 ;;		i2_printRTC
 23982 ;; This function uses a non-reentrant model
 23983 ;;
 23984                           
 23985                           	psect	text87
 23986  002340                     __ptext87:
 23987                           	opt stack 0
 23988  002340                     i2_printf:
 23989                           	opt stack 20
 23990                           
 23991                           ;doprnt.c: 466: va_list ap;
 23992                           ;doprnt.c: 499: signed char c;
 23993                           ;doprnt.c: 501: int width;
 23994                           ;doprnt.c: 506: signed char prec;
 23995                           ;doprnt.c: 508: unsigned char flag;
 23996                           ;doprnt.c: 523: union {
 23997                           ;doprnt.c: 524: unsigned long vd;
 23998                           ;doprnt.c: 525: double integ;
 23999                           ;doprnt.c: 526: } tmpval;
 24000                           ;doprnt.c: 528: unsigned int val;
 24001                           ;doprnt.c: 529: unsigned len;
 24002                           ;doprnt.c: 530: const char * cp;
 24003                           ;doprnt.c: 533: *ap = __va_start();
 24004                           
 24005                           ;incstack = 0
 24006  002340  0E0F               	movlw	low (?i2_printf+2)
 24007  002342  6E20               	movwf	i2printf@ap,c
 24008  002344  0E00               	movlw	high (?i2_printf+2)
 24009  002346  6E21               	movwf	i2printf@ap+1,c
 24010                           
 24011                           ;doprnt.c: 536: while(c = *f++) {
 24012  002348  D1A4               	goto	i2l7164
 24013  00234A                     i2l7034:
 24014                           
 24015                           ;doprnt.c: 538: if(c != '%')
 24016  00234A  0E25               	movlw	37
 24017  00234C  1827               	xorwf	i2printf@c,w,c
 24018  00234E  B4D8               	btfsc	status,2,c
 24019  002350  D004               	goto	i2l7038
 24020                           
 24021                           ;doprnt.c: 540: {
 24022                           ;doprnt.c: 541: (putch(c) );
 24023  002352  5027               	movf	i2printf@c,w,c
 24024  002354  ECE4  F02D         	call	i2_putch
 24025                           
 24026                           ;doprnt.c: 542: continue;
 24027  002358  D19C               	goto	i2l7164
 24028  00235A                     i2l7038:
 24029                           
 24030                           ;doprnt.c: 543: }
 24031                           ;doprnt.c: 546: width = 0;
 24032  00235A  0E00               	movlw	0
 24033  00235C  6E29               	movwf	i2printf@width+1,c
 24034  00235E  0E00               	movlw	0
 24035  002360  6E28               	movwf	i2printf@width,c
 24036                           
 24037                           ;doprnt.c: 548: flag = 0;
 24038  002362  0E00               	movlw	0
 24039  002364  6E26               	movwf	i2printf@flag,c
 24040                           
 24041                           ;doprnt.c: 551: switch(*f) {
 24042                           
 24043                           ;doprnt.c: 550: for(;;) {
 24044  002366  D003               	goto	i2l7044
 24045  002368                     i2l7040:
 24046                           
 24047                           ;doprnt.c: 580: flag |= 0x04;
 24048  002368  8426               	bsf	i2printf@flag,2,c
 24049                           
 24050                           ;doprnt.c: 581: f++;
 24051  00236A  4A0D               	infsnz	i2printf@f,f,c
 24052  00236C  2A0E               	incf	i2printf@f+1,f,c
 24053  00236E                     i2l7044:
 24054  00236E  C00D  FFF6         	movff	i2printf@f,tblptrl
 24055  002372  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24056  002376                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24057  002376  6AF8               	clrf	tblptru,c
 24058  002378                     	endif
 24059  002378                     	if	0	;tblptru may be non-zero
 24060  002378                     	endif
 24061  002378  0008               	tblrd		*
 24062  00237A  50F5               	movf	tablat,w,c
 24063                           
 24064                           ; Switch size 1, requested type "space"
 24065                           ; Number of cases is 1, Range of values is 48 to 48
 24066                           ; switch strategies available:
 24067                           ; Name         Instructions Cycles
 24068                           ; simple_byte            4     3 (average)
 24069                           ;	Chosen strategy is simple_byte
 24070  00237C  0A30               	xorlw	48	; case 48
 24071  00237E  B4D8               	btfsc	status,2,c
 24072  002380  D7F3               	goto	i2l7040
 24073                           
 24074                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24075                           
 24076                           ;doprnt.c: 586: }
 24077                           
 24078                           ;doprnt.c: 585: break;
 24079  002382  C00D  FFF6         	movff	i2printf@f,tblptrl
 24080  002386  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24081  00238A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24082  00238A  6AF8               	clrf	tblptru,c
 24083  00238C                     	endif
 24084  00238C                     	if	0	;tblptru may be non-zero
 24085  00238C                     	endif
 24086  00238C  0008               	tblrd		*
 24087  00238E  50F5               	movf	tablat,w,c
 24088  002390  EC74  F02D         	call	i2_isdigit
 24089  002394  A0D8               	btfss	status,0,c
 24090  002396  D0A6               	goto	i2l7092
 24091                           
 24092                           ;doprnt.c: 598: width = 0;
 24093  002398  0E00               	movlw	0
 24094  00239A  6E29               	movwf	i2printf@width+1,c
 24095  00239C  0E00               	movlw	0
 24096  00239E  6E28               	movwf	i2printf@width,c
 24097  0023A0                     i2l7050:
 24098                           
 24099                           ;doprnt.c: 600: width *= 10;
 24100  0023A0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24101  0023A4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24102  0023A8  0E00               	movlw	0
 24103  0023AA  6E04               	movwf	i2___wmul@multiplicand+1,c
 24104  0023AC  0E0A               	movlw	10
 24105  0023AE  6E03               	movwf	i2___wmul@multiplicand,c
 24106  0023B0  EC1A  F02D         	call	i2___wmul	;wreg free
 24107  0023B4  C001  F028         	movff	?i2___wmul,i2printf@width
 24108  0023B8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24109                           
 24110                           ;doprnt.c: 601: width += *f++ - '0';
 24111  0023BC  0ED0               	movlw	208
 24112  0023BE  6E19               	movwf	??i2_printf& (0+255),c
 24113  0023C0  0EFF               	movlw	255
 24114  0023C2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24115  0023C4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24116  0023C8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24117  0023CC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24118  0023CC  6AF8               	clrf	tblptru,c
 24119  0023CE                     	endif
 24120  0023CE                     	if	0	;tblptru may be non-zero
 24121  0023CE                     	endif
 24122  0023CE  0008               	tblrd		*
 24123  0023D0  50F5               	movf	tablat,w,c
 24124  0023D2  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24125  0023D4  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24126  0023D6  5019               	movf	??i2_printf,w,c
 24127  0023D8  261B               	addwf	??i2_printf+2,f,c
 24128  0023DA  501A               	movf	??i2_printf+1,w,c
 24129  0023DC  221C               	addwfc	??i2_printf+3,f,c
 24130  0023DE  501B               	movf	??i2_printf+2,w,c
 24131  0023E0  2628               	addwf	i2printf@width,f,c
 24132  0023E2  501C               	movf	??i2_printf+3,w,c
 24133  0023E4  2229               	addwfc	i2printf@width+1,f,c
 24134  0023E6  4A0D               	infsnz	i2printf@f,f,c
 24135  0023E8  2A0E               	incf	i2printf@f+1,f,c
 24136                           
 24137                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24138  0023EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 24139  0023EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24140  0023F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24141  0023F2  6AF8               	clrf	tblptru,c
 24142  0023F4                     	endif
 24143  0023F4                     	if	0	;tblptru may be non-zero
 24144  0023F4                     	endif
 24145  0023F4  0008               	tblrd		*
 24146  0023F6  50F5               	movf	tablat,w,c
 24147  0023F8  EC74  F02D         	call	i2_isdigit
 24148  0023FC  A0D8               	btfss	status,0,c
 24149  0023FE  D072               	goto	i2l7092
 24150  002400  D7CF               	goto	i2l7050
 24151  002402                     i2l7058:
 24152                           
 24153                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24154  002402  C020  FFD9         	movff	i2printf@ap,fsr2l
 24155  002406  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24156  00240A  CFDE F01E          	movff	postinc2,i2printf@cp
 24157  00240E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24158  002412  0E02               	movlw	2
 24159  002414  2620               	addwf	i2printf@ap,f,c
 24160  002416  0E00               	movlw	0
 24161  002418  2221               	addwfc	i2printf@ap+1,f,c
 24162                           
 24163                           ;doprnt.c: 740: if(!cp)
 24164  00241A  501E               	movf	i2printf@cp,w,c
 24165  00241C  101F               	iorwf	i2printf@cp+1,w,c
 24166  00241E  A4D8               	btfss	status,2,c
 24167  002420  D004               	goto	i2l7066
 24168                           
 24169                           ;doprnt.c: 741: cp = "(null)";
 24170  002422  0EB5               	movlw	low STR_131
 24171  002424  6E1E               	movwf	i2printf@cp,c
 24172  002426  0EFF               	movlw	high STR_131
 24173  002428  6E1F               	movwf	i2printf@cp+1,c
 24174  00242A                     i2l7066:
 24175                           
 24176                           ;doprnt.c: 745: len = 0;
 24177  00242A  0E00               	movlw	0
 24178  00242C  6E23               	movwf	i2printf@len+1,c
 24179  00242E  0E00               	movlw	0
 24180  002430  6E22               	movwf	i2printf@len,c
 24181                           
 24182                           ;doprnt.c: 746: while(cp[len])
 24183  002432  D002               	goto	i2l7070
 24184  002434                     i2l7068:
 24185                           
 24186                           ;doprnt.c: 747: len++;
 24187  002434  4A22               	infsnz	i2printf@len,f,c
 24188  002436  2A23               	incf	i2printf@len+1,f,c
 24189  002438                     i2l7070:
 24190  002438  5022               	movf	i2printf@len,w,c
 24191  00243A  241E               	addwf	i2printf@cp,w,c
 24192  00243C  6E19               	movwf	??i2_printf& (0+255),c
 24193  00243E  5023               	movf	i2printf@len+1,w,c
 24194  002440  201F               	addwfc	i2printf@cp+1,w,c
 24195  002442  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24196  002444  C019  FFF6         	movff	??i2_printf,tblptrl
 24197  002448  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24198  00244C  0E00               	movlw	low (__mediumconst shr (0+16))
 24199  00244E  6EF8               	movwf	tblptru,c
 24200  002450  0E0F               	movlw	(high __ramtop+-1)
 24201  002452  64F7               	cpfsgt	tblptrh,c
 24202  002454  D003               	bra	i2u575_47
 24203  002456  0008               	tblrd		*
 24204  002458  50F5               	movf	tablat,w,c
 24205  00245A  D005               	bra	i2u575_40
 24206  00245C                     i2u575_47:
 24207  00245C  CFF6 FFE9          	movff	tblptrl,fsr0l
 24208  002460  CFF7 FFEA          	movff	tblptrh,fsr0h
 24209  002464  50EF               	movf	indf0,w,c
 24210  002466                     i2u575_40:
 24211  002466  0900               	iorlw	0
 24212  002468  A4D8               	btfss	status,2,c
 24213  00246A  D7E4               	goto	i2l7068
 24214                           
 24215                           ;doprnt.c: 757: if(width > len)
 24216  00246C  5028               	movf	i2printf@width,w,c
 24217  00246E  5C22               	subwf	i2printf@len,w,c
 24218  002470  5029               	movf	i2printf@width+1,w,c
 24219  002472  5823               	subwfb	i2printf@len+1,w,c
 24220  002474  B0D8               	btfsc	status,0,c
 24221  002476  D005               	goto	i2l7076
 24222                           
 24223                           ;doprnt.c: 758: width -= len;
 24224  002478  5022               	movf	i2printf@len,w,c
 24225  00247A  5E28               	subwf	i2printf@width,f,c
 24226  00247C  5023               	movf	i2printf@len+1,w,c
 24227  00247E  5A29               	subwfb	i2printf@width+1,f,c
 24228  002480  D008               	goto	i2l7080
 24229  002482                     i2l7076:
 24230                           
 24231                           ;doprnt.c: 759: else
 24232                           ;doprnt.c: 760: width = 0;
 24233  002482  0E00               	movlw	0
 24234  002484  6E29               	movwf	i2printf@width+1,c
 24235  002486  0E00               	movlw	0
 24236  002488  6E28               	movwf	i2printf@width,c
 24237                           
 24238                           ;doprnt.c: 764: while(width--)
 24239  00248A  D003               	goto	i2l7080
 24240  00248C                     i2l7078:
 24241                           
 24242                           ;doprnt.c: 765: (putch(' ') );
 24243  00248C  0E20               	movlw	32
 24244  00248E  ECE4  F02D         	call	i2_putch
 24245  002492                     i2l7080:
 24246  002492  0628               	decf	i2printf@width,f,c
 24247  002494  A0D8               	btfss	status,0,c
 24248  002496  0629               	decf	i2printf@width+1,f,c
 24249  002498  2828               	incf	i2printf@width,w,c
 24250  00249A  E1F8               	bnz	i2l7078
 24251  00249C  2829               	incf	i2printf@width+1,w,c
 24252  00249E  B4D8               	btfsc	status,2,c
 24253  0024A0  D016               	goto	i2l7086
 24254  0024A2  D7F4               	goto	i2l7078
 24255  0024A4                     i2l7082:
 24256                           
 24257                           ;doprnt.c: 768: (putch(*cp++) );
 24258  0024A4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24259  0024A8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24260  0024AC  0E00               	movlw	low (__mediumconst shr (0+16))
 24261  0024AE  6EF8               	movwf	tblptru,c
 24262  0024B0  0E0F               	movlw	(high __ramtop+-1)
 24263  0024B2  64F7               	cpfsgt	tblptrh,c
 24264  0024B4  D003               	bra	i2u579_47
 24265  0024B6  0008               	tblrd		*
 24266  0024B8  50F5               	movf	tablat,w,c
 24267  0024BA  D005               	bra	i2u579_40
 24268  0024BC                     i2u579_47:
 24269  0024BC  CFF6 FFE9          	movff	tblptrl,fsr0l
 24270  0024C0  CFF7 FFEA          	movff	tblptrh,fsr0h
 24271  0024C4  50EF               	movf	indf0,w,c
 24272  0024C6                     i2u579_40:
 24273  0024C6  ECE4  F02D         	call	i2_putch
 24274  0024CA  4A1E               	infsnz	i2printf@cp,f,c
 24275  0024CC  2A1F               	incf	i2printf@cp+1,f,c
 24276  0024CE                     i2l7086:
 24277  0024CE  0622               	decf	i2printf@len,f,c
 24278  0024D0  A0D8               	btfss	status,0,c
 24279  0024D2  0623               	decf	i2printf@len+1,f,c
 24280  0024D4  2822               	incf	i2printf@len,w,c
 24281  0024D6  E1E6               	bnz	i2l7082
 24282  0024D8  2823               	incf	i2printf@len+1,w,c
 24283  0024DA  B4D8               	btfsc	status,2,c
 24284  0024DC  D0DA               	goto	i2l7164
 24285  0024DE  D7E2               	goto	i2l7082
 24286  0024E0                     i2l7088:
 24287                           
 24288                           ;doprnt.c: 818: flag |= 0x40;
 24289  0024E0  8C26               	bsf	i2printf@flag,6,c
 24290                           
 24291                           ;doprnt.c: 822: }
 24292                           
 24293                           ;doprnt.c: 819: break;
 24294  0024E2  D01B               	goto	i2l1532
 24295  0024E4                     i2l7092:
 24296  0024E4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24297  0024E8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24298  0024EC  4A0D               	infsnz	i2printf@f,f,c
 24299  0024EE  2A0E               	incf	i2printf@f+1,f,c
 24300  0024F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24301  0024F0  6AF8               	clrf	tblptru,c
 24302  0024F2                     	endif
 24303  0024F2                     	if	0	;tblptru may be non-zero
 24304  0024F2                     	endif
 24305  0024F2  0008               	tblrd		*
 24306  0024F4  CFF5 F027          	movff	tablat,i2printf@c
 24307  0024F8  5027               	movf	i2printf@c,w,c
 24308                           
 24309                           ; Switch size 1, requested type "space"
 24310                           ; Number of cases is 5, Range of values is 0 to 117
 24311                           ; switch strategies available:
 24312                           ; Name         Instructions Cycles
 24313                           ; simple_byte           16     9 (average)
 24314                           ;	Chosen strategy is simple_byte
 24315  0024FA  0A00               	xorlw	0	; case 0
 24316  0024FC  B4D8               	btfsc	status,2,c
 24317  0024FE  0012               	return	
 24318  002500  0A64               	xorlw	100	; case 100
 24319  002502  B4D8               	btfsc	status,2,c
 24320  002504  D00A               	goto	i2l1532
 24321  002506  0A0D               	xorlw	13	; case 105
 24322  002508  B4D8               	btfsc	status,2,c
 24323  00250A  D007               	goto	i2l1532
 24324  00250C  0A1A               	xorlw	26	; case 115
 24325  00250E  B4D8               	btfsc	status,2,c
 24326  002510  D778               	goto	i2l7058
 24327  002512  0A06               	xorlw	6	; case 117
 24328  002514  B4D8               	btfsc	status,2,c
 24329  002516  D7E4               	goto	i2l7088
 24330  002518  D0BC               	goto	i2l7164
 24331  00251A                     i2l1532:
 24332                           
 24333                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24334  00251A  BC26               	btfsc	i2printf@flag,6,c
 24335  00251C  D015               	goto	i2l7104
 24336                           
 24337                           ;doprnt.c: 1253: {
 24338                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24339  00251E  C020  FFD9         	movff	i2printf@ap,fsr2l
 24340  002522  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24341  002526  CFDE F024          	movff	postinc2,i2printf@val
 24342  00252A  CFDD F025          	movff	postdec2,i2printf@val+1
 24343  00252E  0E02               	movlw	2
 24344  002530  2620               	addwf	i2printf@ap,f,c
 24345  002532  0E00               	movlw	0
 24346  002534  2221               	addwfc	i2printf@ap+1,f,c
 24347                           
 24348                           ;doprnt.c: 1261: if((int)val < 0) {
 24349  002536  AE25               	btfss	i2printf@val+1,7,c
 24350  002538  D013               	goto	i2l7108
 24351                           
 24352                           ;doprnt.c: 1262: flag |= 0x03;
 24353  00253A  0E03               	movlw	3
 24354  00253C  1226               	iorwf	i2printf@flag,f,c
 24355                           
 24356                           ;doprnt.c: 1263: val = -val;
 24357  00253E  6C24               	negf	i2printf@val,c
 24358  002540  1E25               	comf	i2printf@val+1,f,c
 24359  002542  B0D8               	btfsc	status,0,c
 24360  002544  2A25               	incf	i2printf@val+1,f,c
 24361                           
 24362                           ;doprnt.c: 1264: }
 24363                           ;doprnt.c: 1266: }
 24364  002546  D00C               	goto	i2l7108
 24365  002548                     i2l7104:
 24366                           
 24367                           ;doprnt.c: 1268: else
 24368                           ;doprnt.c: 1273: {
 24369                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24370  002548  C020  FFD9         	movff	i2printf@ap,fsr2l
 24371  00254C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24372  002550  CFDE F024          	movff	postinc2,i2printf@val
 24373  002554  CFDD F025          	movff	postdec2,i2printf@val+1
 24374  002558  0E02               	movlw	2
 24375  00255A  2620               	addwf	i2printf@ap,f,c
 24376  00255C  0E00               	movlw	0
 24377  00255E  2221               	addwfc	i2printf@ap+1,f,c
 24378  002560                     i2l7108:
 24379                           
 24380                           ;doprnt.c: 1287: }
 24381                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24382  002560  0E01               	movlw	1
 24383  002562  6E27               	movwf	i2printf@c,c
 24384  002564                     i2l7110:
 24385  002564  0E05               	movlw	5
 24386  002566  1827               	xorwf	i2printf@c,w,c
 24387  002568  B4D8               	btfsc	status,2,c
 24388  00256A  D015               	goto	i2l7122
 24389                           
 24390                           ;doprnt.c: 1306: if(val < dpowers[c])
 24391  00256C  5027               	movf	i2printf@c,w,c
 24392  00256E  0D02               	mullw	2
 24393  002570  0E9C               	movlw	low _dpowers
 24394  002572  24F3               	addwf	prodl,w,c
 24395  002574  6EF6               	movwf	tblptrl,c
 24396  002576  0EFA               	movlw	high _dpowers
 24397  002578  20F4               	addwfc	prodh,w,c
 24398  00257A  6EF7               	movwf	tblptrh,c
 24399  00257C                     	if	1	;There are 3 active tblptr bytes
 24400  00257C  6AF8               	clrf	tblptru,c
 24401  00257E  0E00               	movlw	low (__mediumconst shr (0+16))
 24402  002580  22F8               	addwfc	tblptru,f,c
 24403  002582                     	endif
 24404  002582  0009               	tblrd		*+
 24405  002584  50F5               	movf	tablat,w,c
 24406  002586  5C24               	subwf	i2printf@val,w,c
 24407  002588  0009               	tblrd		*+
 24408  00258A  50F5               	movf	tablat,w,c
 24409  00258C  5825               	subwfb	i2printf@val+1,w,c
 24410  00258E  A0D8               	btfss	status,0,c
 24411  002590  D002               	goto	i2l7122
 24412                           
 24413                           ;doprnt.c: 1307: break;
 24414  002592  2A27               	incf	i2printf@c,f,c
 24415  002594  D7E7               	goto	i2l7110
 24416  002596                     i2l7122:
 24417                           
 24418                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24419  002596  5028               	movf	i2printf@width,w,c
 24420  002598  1029               	iorwf	i2printf@width+1,w,c
 24421  00259A  B4D8               	btfsc	status,2,c
 24422  00259C  D009               	goto	i2l7128
 24423  00259E  C026  F019         	movff	i2printf@flag,??i2_printf
 24424  0025A2  0E03               	movlw	3
 24425  0025A4  1619               	andwf	??i2_printf,f,c
 24426  0025A6  B4D8               	btfsc	status,2,c
 24427  0025A8  D003               	goto	i2l7128
 24428                           
 24429                           ;doprnt.c: 1346: width--;
 24430  0025AA  0628               	decf	i2printf@width,f,c
 24431  0025AC  A0D8               	btfss	status,0,c
 24432  0025AE  0629               	decf	i2printf@width+1,f,c
 24433  0025B0                     i2l7128:
 24434                           
 24435                           ;doprnt.c: 1381: if(width > c)
 24436  0025B0  0E80               	movlw	128
 24437  0025B2  BE27               	btfsc	i2printf@c,7,c
 24438  0025B4  0E7F               	movlw	127
 24439  0025B6  6E19               	movwf	??i2_printf& (0+255),c
 24440  0025B8  5028               	movf	i2printf@width,w,c
 24441  0025BA  5C27               	subwf	i2printf@c,w,c
 24442  0025BC  5029               	movf	i2printf@width+1,w,c
 24443  0025BE  0A80               	xorlw	128
 24444  0025C0  5819               	subwfb	??i2_printf& (0+255),w,c
 24445  0025C2  B0D8               	btfsc	status,0,c
 24446  0025C4  D007               	goto	i2l7132
 24447                           
 24448                           ;doprnt.c: 1382: width -= c;
 24449  0025C6  5027               	movf	i2printf@c,w,c
 24450  0025C8  5E28               	subwf	i2printf@width,f,c
 24451  0025CA  0E00               	movlw	0
 24452  0025CC  BE27               	btfsc	i2printf@c,7,c
 24453  0025CE  0EFF               	movlw	255
 24454  0025D0  5A29               	subwfb	i2printf@width+1,f,c
 24455  0025D2  D004               	goto	i2l7134
 24456  0025D4                     i2l7132:
 24457                           
 24458                           ;doprnt.c: 1383: else
 24459                           ;doprnt.c: 1384: width = 0;
 24460  0025D4  0E00               	movlw	0
 24461  0025D6  6E29               	movwf	i2printf@width+1,c
 24462  0025D8  0E00               	movlw	0
 24463  0025DA  6E28               	movwf	i2printf@width,c
 24464  0025DC                     i2l7134:
 24465                           
 24466                           ;doprnt.c: 1387: if(flag & 0x04) {
 24467  0025DC  A426               	btfss	i2printf@flag,2,c
 24468  0025DE  D014               	goto	i2l7146
 24469                           
 24470                           ;doprnt.c: 1392: if(flag & 0x03)
 24471  0025E0  C026  F019         	movff	i2printf@flag,??i2_printf
 24472  0025E4  0E03               	movlw	3
 24473  0025E6  1619               	andwf	??i2_printf,f,c
 24474  0025E8  B4D8               	btfsc	status,2,c
 24475  0025EA  D003               	goto	i2l7140
 24476                           
 24477                           ;doprnt.c: 1393: (putch('-') );
 24478  0025EC  0E2D               	movlw	45
 24479  0025EE  ECE4  F02D         	call	i2_putch
 24480  0025F2                     i2l7140:
 24481                           
 24482                           ;doprnt.c: 1415: if(width)
 24483  0025F2  5028               	movf	i2printf@width,w,c
 24484  0025F4  1029               	iorwf	i2printf@width+1,w,c
 24485  0025F6  B4D8               	btfsc	status,2,c
 24486  0025F8  D01E               	goto	i2l7156
 24487                           
 24488                           ;doprnt.c: 1417: (putch('0') );
 24489                           
 24490                           ;doprnt.c: 1416: do
 24491  0025FA  0E30               	movlw	48
 24492  0025FC  ECE4  F02D         	call	i2_putch
 24493                           
 24494                           ;doprnt.c: 1418: while(--width);
 24495  002600  0628               	decf	i2printf@width,f,c
 24496  002602  A0D8               	btfss	status,0,c
 24497  002604  0629               	decf	i2printf@width+1,f,c
 24498  002606  D7F5               	goto	i2l7140
 24499  002608                     i2l7146:
 24500                           
 24501                           ;doprnt.c: 1422: {
 24502                           ;doprnt.c: 1424: if(width
 24503                           ;doprnt.c: 1428: )
 24504  002608  5028               	movf	i2printf@width,w,c
 24505  00260A  1029               	iorwf	i2printf@width+1,w,c
 24506  00260C  B4D8               	btfsc	status,2,c
 24507  00260E  D00A               	goto	i2l7152
 24508  002610                     i2l7148:
 24509                           
 24510                           ;doprnt.c: 1430: (putch(' ') );
 24511  002610  0E20               	movlw	32
 24512  002612  ECE4  F02D         	call	i2_putch
 24513                           
 24514                           ;doprnt.c: 1431: while(--width);
 24515  002616  0628               	decf	i2printf@width,f,c
 24516  002618  A0D8               	btfss	status,0,c
 24517  00261A  0629               	decf	i2printf@width+1,f,c
 24518  00261C  5028               	movf	i2printf@width,w,c
 24519  00261E  1029               	iorwf	i2printf@width+1,w,c
 24520  002620  A4D8               	btfss	status,2,c
 24521  002622  D7F6               	goto	i2l7148
 24522  002624                     i2l7152:
 24523                           
 24524                           ;doprnt.c: 1438: if(flag & 0x03)
 24525  002624  C026  F019         	movff	i2printf@flag,??i2_printf
 24526  002628  0E03               	movlw	3
 24527  00262A  1619               	andwf	??i2_printf,f,c
 24528  00262C  B4D8               	btfsc	status,2,c
 24529  00262E  D003               	goto	i2l7156
 24530                           
 24531                           ;doprnt.c: 1439: (putch('-') );
 24532  002630  0E2D               	movlw	45
 24533  002632  ECE4  F02D         	call	i2_putch
 24534  002636                     i2l7156:
 24535                           
 24536                           ;doprnt.c: 1469: }
 24537                           ;doprnt.c: 1472: prec = c;
 24538  002636  C027  F01D         	movff	i2printf@c,i2printf@prec
 24539                           
 24540                           ;doprnt.c: 1474: while(prec--) {
 24541  00263A  D027               	goto	i2l7162
 24542  00263C                     i2l7158:
 24543                           
 24544                           ;doprnt.c: 1478: {
 24545                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24546  00263C  501D               	movf	i2printf@prec,w,c
 24547  00263E  0D02               	mullw	2
 24548  002640  0E9C               	movlw	low _dpowers
 24549  002642  24F3               	addwf	prodl,w,c
 24550  002644  6EF6               	movwf	tblptrl,c
 24551  002646  0EFA               	movlw	high _dpowers
 24552  002648  20F4               	addwfc	prodh,w,c
 24553  00264A  6EF7               	movwf	tblptrh,c
 24554  00264C                     	if	1	;There are 3 active tblptr bytes
 24555  00264C  6AF8               	clrf	tblptru,c
 24556  00264E  0E00               	movlw	low (__mediumconst shr (0+16))
 24557  002650  22F8               	addwfc	tblptru,f,c
 24558  002652                     	endif
 24559  002652  0009               	tblrd		*+
 24560  002654  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24561  002658  000A               	tblrd		*-
 24562  00265A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24563  00265E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24564  002662  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24565  002666  ECAE  F029         	call	i2___lwdiv	;wreg free
 24566  00266A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24567  00266E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24568  002672  0E00               	movlw	0
 24569  002674  6E04               	movwf	i2___lwmod@divisor+1,c
 24570  002676  0E0A               	movlw	10
 24571  002678  6E03               	movwf	i2___lwmod@divisor,c
 24572  00267A  ECB5  F02A         	call	i2___lwmod	;wreg free
 24573  00267E  5001               	movf	?i2___lwmod,w,c
 24574  002680  0F30               	addlw	48
 24575  002682  6E27               	movwf	i2printf@c,c
 24576                           
 24577                           ;doprnt.c: 1523: }
 24578                           ;doprnt.c: 1524: (putch(c) );
 24579  002684  5027               	movf	i2printf@c,w,c
 24580  002686  ECE4  F02D         	call	i2_putch
 24581  00268A                     i2l7162:
 24582  00268A  061D               	decf	i2printf@prec,f,c
 24583  00268C  281D               	incf	i2printf@prec,w,c
 24584  00268E  A4D8               	btfss	status,2,c
 24585  002690  D7D5               	goto	i2l7158
 24586  002692                     i2l7164:
 24587  002692  C00D  FFF6         	movff	i2printf@f,tblptrl
 24588  002696  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24589  00269A  4A0D               	infsnz	i2printf@f,f,c
 24590  00269C  2A0E               	incf	i2printf@f+1,f,c
 24591  00269E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24592  00269E  6AF8               	clrf	tblptru,c
 24593  0026A0                     	endif
 24594  0026A0                     	if	0	;tblptru may be non-zero
 24595  0026A0                     	endif
 24596  0026A0  0008               	tblrd		*
 24597  0026A2  CFF5 F027          	movff	tablat,i2printf@c
 24598  0026A6  5027               	movf	i2printf@c,w,c
 24599  0026A8  B4D8               	btfsc	status,2,c
 24600  0026AA  0012               	return	
 24601  0026AC  D64E               	goto	i2l7034
 24602  0026AE                     __end_ofi2_printf:
 24603                           	opt stack 0
 24604                           pclatu	equ	0xFFB
 24605                           pclath	equ	0xFFA
 24606                           tblptru	equ	0xFF8
 24607                           tblptrh	equ	0xFF7
 24608                           tblptrl	equ	0xFF6
 24609                           tablat	equ	0xFF5
 24610                           prodh	equ	0xFF4
 24611                           prodl	equ	0xFF3
 24612                           intcon	equ	0xFF2
 24613                           intcon2	equ	0xFF1
 24614                           intcon3	equ	0xFF0
 24615                           indf0	equ	0xFEF
 24616                           postinc0	equ	0xFEE
 24617                           fsr0h	equ	0xFEA
 24618                           fsr0l	equ	0xFE9
 24619                           wreg	equ	0xFE8
 24620                           postdec1	equ	0xFE5
 24621                           fsr1h	equ	0xFE2
 24622                           fsr1l	equ	0xFE1
 24623                           indf2	equ	0xFDF
 24624                           postinc2	equ	0xFDE
 24625                           postdec2	equ	0xFDD
 24626                           fsr2h	equ	0xFDA
 24627                           fsr2l	equ	0xFD9
 24628                           status	equ	0xFD8
 24629                           
 24630 ;; *************** function i2_putch *****************
 24631 ;; Defined at:
 24632 ;;		line 20 in file "lcd.c"
 24633 ;; Parameters:    Size  Location     Type
 24634 ;;  data            1    wreg     unsigned char 
 24635 ;; Auto vars:     Size  Location     Type
 24636 ;;  data            1    2[COMRAM] unsigned char 
 24637 ;; Return value:  Size  Location     Type
 24638 ;;                  1    wreg      void 
 24639 ;; Registers used:
 24640 ;;		wreg, status,2, status,0, cstack
 24641 ;; Tracked objects:
 24642 ;;		On entry : 0/0
 24643 ;;		On exit  : 0/0
 24644 ;;		Unchanged: 0/0
 24645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24649 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24650 ;;Total ram usage:        1 bytes
 24651 ;; Hardware stack levels used:    1
 24652 ;; Hardware stack levels required when called:    1
 24653 ;; This function calls:
 24654 ;;		i2_lcdNibble
 24655 ;; This function is called by:
 24656 ;;		i2_printf
 24657 ;; This function uses a non-reentrant model
 24658 ;;
 24659                           
 24660                           	psect	text88
 24661  005BC8                     __ptext88:
 24662                           	opt stack 0
 24663  005BC8                     i2_putch:
 24664                           	opt stack 20
 24665                           
 24666                           ;incstack = 0
 24667                           ;i2putch@data stored from wreg
 24668  005BC8  6E03               	movwf	i2putch@data,c
 24669                           
 24670                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24671  005BCA  848C               	bsf	3980,2,c	;volatile
 24672                           
 24673                           ;lcd.c: 22: lcdNibble(data);
 24674  005BCC  5003               	movf	i2putch@data,w,c
 24675  005BCE  EC81  F029         	call	i2_lcdNibble
 24676  005BD2  0012               	return		;funcret
 24677  005BD4                     __end_ofi2_putch:
 24678                           	opt stack 0
 24679                           pclatu	equ	0xFFB
 24680                           pclath	equ	0xFFA
 24681                           tblptru	equ	0xFF8
 24682                           tblptrh	equ	0xFF7
 24683                           tblptrl	equ	0xFF6
 24684                           tablat	equ	0xFF5
 24685                           prodh	equ	0xFF4
 24686                           prodl	equ	0xFF3
 24687                           intcon	equ	0xFF2
 24688                           intcon2	equ	0xFF1
 24689                           intcon3	equ	0xFF0
 24690                           indf0	equ	0xFEF
 24691                           postinc0	equ	0xFEE
 24692                           fsr0h	equ	0xFEA
 24693                           fsr0l	equ	0xFE9
 24694                           wreg	equ	0xFE8
 24695                           postdec1	equ	0xFE5
 24696                           fsr1h	equ	0xFE2
 24697                           fsr1l	equ	0xFE1
 24698                           indf2	equ	0xFDF
 24699                           postinc2	equ	0xFDE
 24700                           postdec2	equ	0xFDD
 24701                           fsr2h	equ	0xFDA
 24702                           fsr2l	equ	0xFD9
 24703                           status	equ	0xFD8
 24704                           
 24705 ;; *************** function i2_isdigit *****************
 24706 ;; Defined at:
 24707 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24708 ;; Parameters:    Size  Location     Type
 24709 ;;  c               1    wreg     unsigned char 
 24710 ;; Auto vars:     Size  Location     Type
 24711 ;;  c               1    2[COMRAM] unsigned char 
 24712 ;; Return value:  Size  Location     Type
 24713 ;;		None               void
 24714 ;; Registers used:
 24715 ;;		wreg, status,2, status,0
 24716 ;; Tracked objects:
 24717 ;;		On entry : 0/0
 24718 ;;		On exit  : 0/0
 24719 ;;		Unchanged: 0/0
 24720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24722 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24724 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24725 ;;Total ram usage:        3 bytes
 24726 ;; Hardware stack levels used:    1
 24727 ;; This function calls:
 24728 ;;		Nothing
 24729 ;; This function is called by:
 24730 ;;		i2_printf
 24731 ;; This function uses a non-reentrant model
 24732 ;;
 24733                           
 24734                           	psect	text89
 24735  005AE8                     __ptext89:
 24736                           	opt stack 0
 24737  005AE8                     i2_isdigit:
 24738                           	opt stack 21
 24739                           
 24740                           ;incstack = 0
 24741                           ;i2isdigit@c stored from wreg
 24742  005AE8  6E03               	movwf	i2isdigit@c,c
 24743  005AEA  0E00               	movlw	0
 24744  005AEC  6E02               	movwf	i2_isdigit$2069,c
 24745  005AEE  0E3A               	movlw	58
 24746  005AF0  6003               	cpfslt	i2isdigit@c,c
 24747  005AF2  D005               	goto	i2l6698
 24748  005AF4  0E2F               	movlw	47
 24749  005AF6  6403               	cpfsgt	i2isdigit@c,c
 24750  005AF8  D002               	goto	i2l6698
 24751  005AFA  0E01               	movlw	1
 24752  005AFC  6E02               	movwf	i2_isdigit$2069,c
 24753  005AFE                     i2l6698:
 24754  005AFE  C002  F001         	movff	i2_isdigit$2069,??i2_isdigit
 24755  005B02  3001               	rrcf	??i2_isdigit,w,c
 24756  005B04  0012               	return	
 24757  005B06                     __end_ofi2_isdigit:
 24758                           	opt stack 0
 24759                           pclatu	equ	0xFFB
 24760                           pclath	equ	0xFFA
 24761                           tblptru	equ	0xFF8
 24762                           tblptrh	equ	0xFF7
 24763                           tblptrl	equ	0xFF6
 24764                           tablat	equ	0xFF5
 24765                           prodh	equ	0xFF4
 24766                           prodl	equ	0xFF3
 24767                           intcon	equ	0xFF2
 24768                           intcon2	equ	0xFF1
 24769                           intcon3	equ	0xFF0
 24770                           indf0	equ	0xFEF
 24771                           postinc0	equ	0xFEE
 24772                           fsr0h	equ	0xFEA
 24773                           fsr0l	equ	0xFE9
 24774                           wreg	equ	0xFE8
 24775                           postdec1	equ	0xFE5
 24776                           fsr1h	equ	0xFE2
 24777                           fsr1l	equ	0xFE1
 24778                           indf2	equ	0xFDF
 24779                           postinc2	equ	0xFDE
 24780                           postdec2	equ	0xFDD
 24781                           fsr2h	equ	0xFDA
 24782                           fsr2l	equ	0xFD9
 24783                           status	equ	0xFD8
 24784                           
 24785 ;; *************** function i2___wmul *****************
 24786 ;; Defined at:
 24787 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24788 ;; Parameters:    Size  Location     Type
 24789 ;;  multiplier      2    0[COMRAM] unsigned int 
 24790 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24791 ;; Auto vars:     Size  Location     Type
 24792 ;;  __wmul          2    4[COMRAM] unsigned int 
 24793 ;; Return value:  Size  Location     Type
 24794 ;;                  2    0[COMRAM] unsigned int 
 24795 ;; Registers used:
 24796 ;;		wreg, status,2, status,0, prodl, prodh
 24797 ;; Tracked objects:
 24798 ;;		On entry : 0/0
 24799 ;;		On exit  : 0/0
 24800 ;;		Unchanged: 0/0
 24801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24802 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24805 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24806 ;;Total ram usage:        6 bytes
 24807 ;; Hardware stack levels used:    1
 24808 ;; This function calls:
 24809 ;;		Nothing
 24810 ;; This function is called by:
 24811 ;;		_printSortTimer
 24812 ;;		_retrieveLog
 24813 ;;		i2_printf
 24814 ;; This function uses a non-reentrant model
 24815 ;;
 24816                           
 24817                           	psect	text90
 24818  005A34                     __ptext90:
 24819                           	opt stack 0
 24820  005A34                     i2___wmul:
 24821                           	opt stack 21
 24822                           
 24823                           ;incstack = 0
 24824  005A34  5001               	movf	i2___wmul@multiplier,w,c
 24825  005A36  0203               	mulwf	i2___wmul@multiplicand,c
 24826  005A38  CFF3 F005          	movff	prodl,i2___wmul@product
 24827  005A3C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24828  005A40  5001               	movf	i2___wmul@multiplier,w,c
 24829  005A42  0204               	mulwf	i2___wmul@multiplicand+1,c
 24830  005A44  50F3               	movf	prodl,w,c
 24831  005A46  2606               	addwf	i2___wmul@product+1,f,c
 24832  005A48  5002               	movf	i2___wmul@multiplier+1,w,c
 24833  005A4A  0203               	mulwf	i2___wmul@multiplicand,c
 24834  005A4C  50F3               	movf	prodl,w,c
 24835  005A4E  2606               	addwf	i2___wmul@product+1,f,c
 24836  005A50  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24837  005A54  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24838  005A58  0012               	return	
 24839  005A5A                     __end_ofi2___wmul:
 24840                           	opt stack 0
 24841                           pclatu	equ	0xFFB
 24842                           pclath	equ	0xFFA
 24843                           tblptru	equ	0xFF8
 24844                           tblptrh	equ	0xFF7
 24845                           tblptrl	equ	0xFF6
 24846                           tablat	equ	0xFF5
 24847                           prodh	equ	0xFF4
 24848                           prodl	equ	0xFF3
 24849                           intcon	equ	0xFF2
 24850                           intcon2	equ	0xFF1
 24851                           intcon3	equ	0xFF0
 24852                           indf0	equ	0xFEF
 24853                           postinc0	equ	0xFEE
 24854                           fsr0h	equ	0xFEA
 24855                           fsr0l	equ	0xFE9
 24856                           wreg	equ	0xFE8
 24857                           postdec1	equ	0xFE5
 24858                           fsr1h	equ	0xFE2
 24859                           fsr1l	equ	0xFE1
 24860                           indf2	equ	0xFDF
 24861                           postinc2	equ	0xFDE
 24862                           postdec2	equ	0xFDD
 24863                           fsr2h	equ	0xFDA
 24864                           fsr2l	equ	0xFD9
 24865                           status	equ	0xFD8
 24866                           
 24867 ;; *************** function i2___lwmod *****************
 24868 ;; Defined at:
 24869 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24870 ;; Parameters:    Size  Location     Type
 24871 ;;  dividend        2    0[COMRAM] unsigned int 
 24872 ;;  divisor         2    2[COMRAM] unsigned int 
 24873 ;; Auto vars:     Size  Location     Type
 24874 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24875 ;; Return value:  Size  Location     Type
 24876 ;;                  2    0[COMRAM] unsigned int 
 24877 ;; Registers used:
 24878 ;;		wreg, status,2, status,0
 24879 ;; Tracked objects:
 24880 ;;		On entry : 0/0
 24881 ;;		On exit  : 0/0
 24882 ;;		Unchanged: 0/0
 24883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24884 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24887 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24888 ;;Total ram usage:        5 bytes
 24889 ;; Hardware stack levels used:    1
 24890 ;; This function calls:
 24891 ;;		Nothing
 24892 ;; This function is called by:
 24893 ;;		_printSortTimer
 24894 ;;		i2_printf
 24895 ;; This function uses a non-reentrant model
 24896 ;;
 24897                           
 24898                           	psect	text91
 24899  00556A                     __ptext91:
 24900                           	opt stack 0
 24901  00556A                     i2___lwmod:
 24902                           	opt stack 21
 24903                           
 24904                           ;incstack = 0
 24905  00556A  5003               	movf	i2___lwmod@divisor,w,c
 24906  00556C  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24907  00556E  B4D8               	btfsc	status,2,c
 24908  005570  D018               	goto	i2l1989
 24909  005572  0E01               	movlw	1
 24910  005574  6E05               	movwf	i2___lwmod@counter,c
 24911  005576  D004               	goto	i2l6730
 24912  005578                     i2l6728:
 24913  005578  90D8               	bcf	status,0,c
 24914  00557A  3603               	rlcf	i2___lwmod@divisor,f,c
 24915  00557C  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24916  00557E  2A05               	incf	i2___lwmod@counter,f,c
 24917  005580                     i2l6730:
 24918  005580  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24919  005582  D7FA               	goto	i2l6728
 24920  005584                     i2l6732:
 24921  005584  5003               	movf	i2___lwmod@divisor,w,c
 24922  005586  5C01               	subwf	i2___lwmod@dividend,w,c
 24923  005588  5004               	movf	i2___lwmod@divisor+1,w,c
 24924  00558A  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24925  00558C  A0D8               	btfss	status,0,c
 24926  00558E  D004               	goto	i2l6736
 24927  005590  5003               	movf	i2___lwmod@divisor,w,c
 24928  005592  5E01               	subwf	i2___lwmod@dividend,f,c
 24929  005594  5004               	movf	i2___lwmod@divisor+1,w,c
 24930  005596  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24931  005598                     i2l6736:
 24932  005598  90D8               	bcf	status,0,c
 24933  00559A  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24934  00559C  3203               	rrcf	i2___lwmod@divisor,f,c
 24935  00559E  2E05               	decfsz	i2___lwmod@counter,f,c
 24936  0055A0  D7F1               	goto	i2l6732
 24937  0055A2                     i2l1989:
 24938  0055A2  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24939  0055A6  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24940  0055AA  0012               	return		;funcret
 24941  0055AC                     __end_ofi2___lwmod:
 24942                           	opt stack 0
 24943                           pclatu	equ	0xFFB
 24944                           pclath	equ	0xFFA
 24945                           tblptru	equ	0xFF8
 24946                           tblptrh	equ	0xFF7
 24947                           tblptrl	equ	0xFF6
 24948                           tablat	equ	0xFF5
 24949                           prodh	equ	0xFF4
 24950                           prodl	equ	0xFF3
 24951                           intcon	equ	0xFF2
 24952                           intcon2	equ	0xFF1
 24953                           intcon3	equ	0xFF0
 24954                           indf0	equ	0xFEF
 24955                           postinc0	equ	0xFEE
 24956                           fsr0h	equ	0xFEA
 24957                           fsr0l	equ	0xFE9
 24958                           wreg	equ	0xFE8
 24959                           postdec1	equ	0xFE5
 24960                           fsr1h	equ	0xFE2
 24961                           fsr1l	equ	0xFE1
 24962                           indf2	equ	0xFDF
 24963                           postinc2	equ	0xFDE
 24964                           postdec2	equ	0xFDD
 24965                           fsr2h	equ	0xFDA
 24966                           fsr2l	equ	0xFD9
 24967                           status	equ	0xFD8
 24968                           
 24969 ;; *************** function i2___lwdiv *****************
 24970 ;; Defined at:
 24971 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 24972 ;; Parameters:    Size  Location     Type
 24973 ;;  dividend        2    5[COMRAM] unsigned int 
 24974 ;;  divisor         2    7[COMRAM] unsigned int 
 24975 ;; Auto vars:     Size  Location     Type
 24976 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 24977 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 24978 ;; Return value:  Size  Location     Type
 24979 ;;                  2    5[COMRAM] unsigned int 
 24980 ;; Registers used:
 24981 ;;		wreg, status,2, status,0
 24982 ;; Tracked objects:
 24983 ;;		On entry : 0/0
 24984 ;;		On exit  : 0/0
 24985 ;;		Unchanged: 0/0
 24986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24987 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24988 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24990 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24991 ;;Total ram usage:        7 bytes
 24992 ;; Hardware stack levels used:    1
 24993 ;; This function calls:
 24994 ;;		Nothing
 24995 ;; This function is called by:
 24996 ;;		_printSortTimer
 24997 ;;		i2_printf
 24998 ;; This function uses a non-reentrant model
 24999 ;;
 25000                           
 25001                           	psect	text92
 25002  00535C                     __ptext92:
 25003                           	opt stack 0
 25004  00535C                     i2___lwdiv:
 25005                           	opt stack 21
 25006                           
 25007                           ;incstack = 0
 25008  00535C  0E00               	movlw	0
 25009  00535E  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25010  005360  0E00               	movlw	0
 25011  005362  6E0A               	movwf	i2___lwdiv@quotient,c
 25012  005364  5008               	movf	i2___lwdiv@divisor,w,c
 25013  005366  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25014  005368  B4D8               	btfsc	status,2,c
 25015  00536A  D01C               	goto	i2l1979
 25016  00536C  0E01               	movlw	1
 25017  00536E  6E0C               	movwf	i2___lwdiv@counter,c
 25018  005370  D004               	goto	i2l6710
 25019  005372                     i2l6708:
 25020  005372  90D8               	bcf	status,0,c
 25021  005374  3608               	rlcf	i2___lwdiv@divisor,f,c
 25022  005376  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25023  005378  2A0C               	incf	i2___lwdiv@counter,f,c
 25024  00537A                     i2l6710:
 25025  00537A  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25026  00537C  D7FA               	goto	i2l6708
 25027  00537E                     i2l6712:
 25028  00537E  90D8               	bcf	status,0,c
 25029  005380  360A               	rlcf	i2___lwdiv@quotient,f,c
 25030  005382  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25031  005384  5008               	movf	i2___lwdiv@divisor,w,c
 25032  005386  5C06               	subwf	i2___lwdiv@dividend,w,c
 25033  005388  5009               	movf	i2___lwdiv@divisor+1,w,c
 25034  00538A  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25035  00538C  A0D8               	btfss	status,0,c
 25036  00538E  D005               	goto	i2l6720
 25037  005390  5008               	movf	i2___lwdiv@divisor,w,c
 25038  005392  5E06               	subwf	i2___lwdiv@dividend,f,c
 25039  005394  5009               	movf	i2___lwdiv@divisor+1,w,c
 25040  005396  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25041  005398  800A               	bsf	i2___lwdiv@quotient,0,c
 25042  00539A                     i2l6720:
 25043  00539A  90D8               	bcf	status,0,c
 25044  00539C  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25045  00539E  3208               	rrcf	i2___lwdiv@divisor,f,c
 25046  0053A0  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25047  0053A2  D7ED               	goto	i2l6712
 25048  0053A4                     i2l1979:
 25049  0053A4  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25050  0053A8  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25051  0053AC  0012               	return		;funcret
 25052  0053AE                     __end_ofi2___lwdiv:
 25053                           	opt stack 0
 25054                           pclatu	equ	0xFFB
 25055                           pclath	equ	0xFFA
 25056                           tblptru	equ	0xFF8
 25057                           tblptrh	equ	0xFF7
 25058                           tblptrl	equ	0xFF6
 25059                           tablat	equ	0xFF5
 25060                           prodh	equ	0xFF4
 25061                           prodl	equ	0xFF3
 25062                           intcon	equ	0xFF2
 25063                           intcon2	equ	0xFF1
 25064                           intcon3	equ	0xFF0
 25065                           indf0	equ	0xFEF
 25066                           postinc0	equ	0xFEE
 25067                           fsr0h	equ	0xFEA
 25068                           fsr0l	equ	0xFE9
 25069                           wreg	equ	0xFE8
 25070                           postdec1	equ	0xFE5
 25071                           fsr1h	equ	0xFE2
 25072                           fsr1l	equ	0xFE1
 25073                           indf2	equ	0xFDF
 25074                           postinc2	equ	0xFDE
 25075                           postdec2	equ	0xFDD
 25076                           fsr2h	equ	0xFDA
 25077                           fsr2l	equ	0xFD9
 25078                           status	equ	0xFD8
 25079                           
 25080 ;; *************** function i2_lcdInst *****************
 25081 ;; Defined at:
 25082 ;;		line 15 in file "lcd.c"
 25083 ;; Parameters:    Size  Location     Type
 25084 ;;  data            1    wreg     unsigned char 
 25085 ;; Auto vars:     Size  Location     Type
 25086 ;;  data            1    2[COMRAM] unsigned char 
 25087 ;; Return value:  Size  Location     Type
 25088 ;;                  1    wreg      void 
 25089 ;; Registers used:
 25090 ;;		wreg, status,2, status,0, cstack
 25091 ;; Tracked objects:
 25092 ;;		On entry : 0/0
 25093 ;;		On exit  : 0/0
 25094 ;;		Unchanged: 0/0
 25095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25097 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25099 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25100 ;;Total ram usage:        1 bytes
 25101 ;; Hardware stack levels used:    1
 25102 ;; Hardware stack levels required when called:    1
 25103 ;; This function calls:
 25104 ;;		i2_lcdNibble
 25105 ;; This function is called by:
 25106 ;;		_change_state_to_menu_11
 25107 ;;		_change_state_to_menu_23
 25108 ;;		_change_state_to_logs_11
 25109 ;;		_change_state_to_logs_12
 25110 ;;		_change_state_to_logs_22
 25111 ;;		_change_state_to_logs_23
 25112 ;;		_change_state_to_logs_33
 25113 ;;		_change_state_to_logs_34
 25114 ;;		_printSortTimer
 25115 ;;		i2_change_state_to_menu_start
 25116 ;;		i2_change_state_to_menu_12
 25117 ;;		i2_change_state_to_menu_22
 25118 ;;		i2_printRTC
 25119 ;; This function uses a non-reentrant model
 25120 ;;
 25121                           
 25122                           	psect	text93
 25123  005BD4                     __ptext93:
 25124                           	opt stack 0
 25125  005BD4                     i2_lcdInst:
 25126                           	opt stack 20
 25127                           
 25128                           ;incstack = 0
 25129                           ;i2lcdInst@data stored from wreg
 25130  005BD4  6E03               	movwf	i2lcdInst@data,c
 25131                           
 25132                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25133  005BD6  948C               	bcf	3980,2,c	;volatile
 25134                           
 25135                           ;lcd.c: 17: lcdNibble(data);
 25136  005BD8  5003               	movf	i2lcdInst@data,w,c
 25137  005BDA  EC81  F029         	call	i2_lcdNibble
 25138  005BDE  0012               	return		;funcret
 25139  005BE0                     __end_ofi2_lcdInst:
 25140                           	opt stack 0
 25141                           pclatu	equ	0xFFB
 25142                           pclath	equ	0xFFA
 25143                           tblptru	equ	0xFF8
 25144                           tblptrh	equ	0xFF7
 25145                           tblptrl	equ	0xFF6
 25146                           tablat	equ	0xFF5
 25147                           prodh	equ	0xFF4
 25148                           prodl	equ	0xFF3
 25149                           intcon	equ	0xFF2
 25150                           intcon2	equ	0xFF1
 25151                           intcon3	equ	0xFF0
 25152                           indf0	equ	0xFEF
 25153                           postinc0	equ	0xFEE
 25154                           fsr0h	equ	0xFEA
 25155                           fsr0l	equ	0xFE9
 25156                           wreg	equ	0xFE8
 25157                           postdec1	equ	0xFE5
 25158                           fsr1h	equ	0xFE2
 25159                           fsr1l	equ	0xFE1
 25160                           indf2	equ	0xFDF
 25161                           postinc2	equ	0xFDE
 25162                           postdec2	equ	0xFDD
 25163                           fsr2h	equ	0xFDA
 25164                           fsr2l	equ	0xFD9
 25165                           status	equ	0xFD8
 25166                           
 25167 ;; *************** function i2_lcdNibble *****************
 25168 ;; Defined at:
 25169 ;;		line 25 in file "lcd.c"
 25170 ;; Parameters:    Size  Location     Type
 25171 ;;  data            1    wreg     unsigned char 
 25172 ;; Auto vars:     Size  Location     Type
 25173 ;;  data            1    1[COMRAM] unsigned char 
 25174 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25175 ;; Return value:  Size  Location     Type
 25176 ;;                  1    wreg      void 
 25177 ;; Registers used:
 25178 ;;		wreg, status,2, status,0
 25179 ;; Tracked objects:
 25180 ;;		On entry : 0/0
 25181 ;;		On exit  : 0/0
 25182 ;;		Unchanged: 0/0
 25183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25187 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25188 ;;Total ram usage:        2 bytes
 25189 ;; Hardware stack levels used:    1
 25190 ;; This function calls:
 25191 ;;		Nothing
 25192 ;; This function is called by:
 25193 ;;		i2_lcdInst
 25194 ;;		i2_putch
 25195 ;; This function uses a non-reentrant model
 25196 ;;
 25197                           
 25198                           	psect	text94
 25199  005302                     __ptext94:
 25200                           	opt stack 0
 25201  005302                     i2_lcdNibble:
 25202                           	opt stack 20
 25203                           
 25204                           ;incstack = 0
 25205                           ;i2lcdNibble@data stored from wreg
 25206  005302  6E02               	movwf	i2lcdNibble@data,c
 25207                           
 25208                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25209  005304  9EF2               	bcf	intcon,7,c	;volatile
 25210                           
 25211                           ;lcd.c: 28: char temp = data & 0xF0;
 25212  005306  5002               	movf	i2lcdNibble@data,w,c
 25213  005308  0BF0               	andlw	240
 25214  00530A  6E01               	movwf	i2lcdNibble@temp,c
 25215                           
 25216                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25217  00530C  508C               	movf	3980,w,c	;volatile
 25218  00530E  0B0F               	andlw	15
 25219  005310  6E8C               	movwf	3980,c	;volatile
 25220                           
 25221                           ;lcd.c: 30: LATD = temp | LATD;
 25222  005312  5001               	movf	i2lcdNibble@temp,w,c
 25223  005314  108C               	iorwf	3980,w,c	;volatile
 25224  005316  6E8C               	movwf	3980,c	;volatile
 25225                           
 25226                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25227  005318  868C               	bsf	3980,3,c	;volatile
 25228                           
 25229                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25230  00531A  0E42               	movlw	66
 25231  00531C                     i2u1153_47:
 25232  00531C  2EE8               	decfsz	wreg,f,c
 25233  00531E  D7FE               	bra	i2u1153_47
 25234  005320  D000               	nop2	
 25235                           
 25236                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25237  005322  968C               	bcf	3980,3,c	;volatile
 25238                           
 25239                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25240  005324  0E42               	movlw	66
 25241  005326                     i2u1154_47:
 25242  005326  2EE8               	decfsz	wreg,f,c
 25243  005328  D7FE               	bra	i2u1154_47
 25244  00532A  D000               	nop2	
 25245                           
 25246                           ;lcd.c: 37: data = data << 4;
 25247  00532C  3802               	swapf	i2lcdNibble@data,w,c
 25248  00532E  0BF0               	andlw	240
 25249  005330  6E02               	movwf	i2lcdNibble@data,c
 25250                           
 25251                           ;lcd.c: 39: temp = data & 0xF0;
 25252  005332  5002               	movf	i2lcdNibble@data,w,c
 25253  005334  0BF0               	andlw	240
 25254  005336  6E01               	movwf	i2lcdNibble@temp,c
 25255                           
 25256                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25257  005338  508C               	movf	3980,w,c	;volatile
 25258  00533A  0B0F               	andlw	15
 25259  00533C  6E8C               	movwf	3980,c	;volatile
 25260                           
 25261                           ;lcd.c: 41: LATD = temp | LATD;
 25262  00533E  5001               	movf	i2lcdNibble@temp,w,c
 25263  005340  108C               	iorwf	3980,w,c	;volatile
 25264  005342  6E8C               	movwf	3980,c	;volatile
 25265                           
 25266                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25267  005344  868C               	bsf	3980,3,c	;volatile
 25268                           
 25269                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25270  005346  0E42               	movlw	66
 25271  005348                     i2u1155_47:
 25272  005348  2EE8               	decfsz	wreg,f,c
 25273  00534A  D7FE               	bra	i2u1155_47
 25274  00534C  D000               	nop2	
 25275                           
 25276                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25277  00534E  968C               	bcf	3980,3,c	;volatile
 25278                           
 25279                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25280  005350  0E42               	movlw	66
 25281  005352                     i2u1156_47:
 25282  005352  2EE8               	decfsz	wreg,f,c
 25283  005354  D7FE               	bra	i2u1156_47
 25284  005356  D000               	nop2	
 25285                           
 25286                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25287  005358  8EF2               	bsf	intcon,7,c	;volatile
 25288  00535A  0012               	return		;funcret
 25289  00535C                     __end_ofi2_lcdNibble:
 25290                           	opt stack 0
 25291                           pclatu	equ	0xFFB
 25292                           pclath	equ	0xFFA
 25293                           tblptru	equ	0xFF8
 25294                           tblptrh	equ	0xFF7
 25295                           tblptrl	equ	0xFF6
 25296                           tablat	equ	0xFF5
 25297                           prodh	equ	0xFF4
 25298                           prodl	equ	0xFF3
 25299                           intcon	equ	0xFF2
 25300                           intcon2	equ	0xFF1
 25301                           intcon3	equ	0xFF0
 25302                           indf0	equ	0xFEF
 25303                           postinc0	equ	0xFEE
 25304                           fsr0h	equ	0xFEA
 25305                           fsr0l	equ	0xFE9
 25306                           wreg	equ	0xFE8
 25307                           postdec1	equ	0xFE5
 25308                           fsr1h	equ	0xFE2
 25309                           fsr1l	equ	0xFE1
 25310                           indf2	equ	0xFDF
 25311                           postinc2	equ	0xFDE
 25312                           postdec2	equ	0xFDD
 25313                           fsr2h	equ	0xFDA
 25314                           fsr2l	equ	0xFD9
 25315                           status	equ	0xFD8
 25316                           
 25317 ;; *************** function i2_getRTC *****************
 25318 ;; Defined at:
 25319 ;;		line 44 in file "RTC.c"
 25320 ;; Parameters:    Size  Location     Type
 25321 ;;		None
 25322 ;; Auto vars:     Size  Location     Type
 25323 ;;  getRTC          2    3[COMRAM] int 
 25324 ;; Return value:  Size  Location     Type
 25325 ;;                  1    wreg      void 
 25326 ;; Registers used:
 25327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25328 ;; Tracked objects:
 25329 ;;		On entry : 0/0
 25330 ;;		On exit  : 0/0
 25331 ;;		Unchanged: 0/0
 25332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25336 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25337 ;;Total ram usage:        2 bytes
 25338 ;; Hardware stack levels used:    1
 25339 ;; Hardware stack levels required when called:    2
 25340 ;; This function calls:
 25341 ;;		i2_I2C_Master_Read
 25342 ;;		i2_I2C_Master_Start
 25343 ;;		i2_I2C_Master_Stop
 25344 ;;		i2_I2C_Master_Write
 25345 ;; This function is called by:
 25346 ;;		_printSortTimer
 25347 ;;		i2_printRTC
 25348 ;; This function uses a non-reentrant model
 25349 ;;
 25350                           
 25351                           	psect	text95
 25352  004F6E                     __ptext95:
 25353                           	opt stack 0
 25354  004F6E                     i2_getRTC:
 25355                           	opt stack 19
 25356                           
 25357                           ;RTC.c: 48: I2C_Master_Start();
 25358                           
 25359                           ;incstack = 0
 25360  004F6E  EC0A  F02E         	call	i2_I2C_Master_Start	;wreg free
 25361                           
 25362                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25363  004F72  0E00               	movlw	0
 25364  004F74  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25365  004F76  0ED0               	movlw	208
 25366  004F78  6E02               	movwf	i2I2C_Master_Write@d,c
 25367  004F7A  ECF5  F02D         	call	i2_I2C_Master_Write	;wreg free
 25368                           
 25369                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25370  004F7E  0E00               	movlw	0
 25371  004F80  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25372  004F82  0E00               	movlw	0
 25373  004F84  6E02               	movwf	i2I2C_Master_Write@d,c
 25374  004F86  ECF5  F02D         	call	i2_I2C_Master_Write	;wreg free
 25375                           
 25376                           ;RTC.c: 51: I2C_Master_Stop();
 25377  004F8A  EC06  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25378                           
 25379                           ;RTC.c: 54: I2C_Master_Start();
 25380  004F8E  EC0A  F02E         	call	i2_I2C_Master_Start	;wreg free
 25381                           
 25382                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25383  004F92  0E00               	movlw	0
 25384  004F94  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25385  004F96  0ED1               	movlw	209
 25386  004F98  6E02               	movwf	i2I2C_Master_Write@d,c
 25387  004F9A  ECF5  F02D         	call	i2_I2C_Master_Write	;wreg free
 25388                           
 25389                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25390  004F9E  0E00               	movlw	0
 25391  004FA0  6E05               	movwf	i2getRTC@i+1,c
 25392  004FA2  0E00               	movlw	0
 25393  004FA4  6E04               	movwf	i2getRTC@i,c
 25394  004FA6                     i2l7006:
 25395  004FA6  BE05               	btfsc	i2getRTC@i+1,7,c
 25396  004FA8  D006               	goto	i2l7010
 25397  004FAA  5005               	movf	i2getRTC@i+1,w,c
 25398  004FAC  E111               	bnz	i2l7016
 25399  004FAE  0E06               	movlw	6
 25400  004FB0  5C04               	subwf	i2getRTC@i,w,c
 25401  004FB2  B0D8               	btfsc	status,0,c
 25402  004FB4  D00D               	goto	i2l7016
 25403  004FB6                     i2l7010:
 25404                           
 25405                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25406  004FB6  0E1C               	movlw	low _time
 25407  004FB8  2404               	addwf	i2getRTC@i,w,c
 25408  004FBA  6ED9               	movwf	fsr2l,c
 25409  004FBC  0E01               	movlw	high _time
 25410  004FBE  2005               	addwfc	i2getRTC@i+1,w,c
 25411  004FC0  6EDA               	movwf	fsr2h,c
 25412  004FC2  0E01               	movlw	1
 25413  004FC4  EC2D  F02D         	call	i2_I2C_Master_Read
 25414  004FC8  6EDF               	movwf	indf2,c
 25415  004FCA  4A04               	infsnz	i2getRTC@i,f,c
 25416  004FCC  2A05               	incf	i2getRTC@i+1,f,c
 25417  004FCE  D7EB               	goto	i2l7006
 25418  004FD0                     i2l7016:
 25419                           
 25420                           ;RTC.c: 58: }
 25421                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25422  004FD0  0E00               	movlw	0
 25423  004FD2  EC2D  F02D         	call	i2_I2C_Master_Read
 25424  004FD6  0101               	movlb	1	; () banked
 25425  004FD8  6F22               	movwf	(_time+6)& (0+255),b
 25426                           
 25427                           ;RTC.c: 60: I2C_Master_Stop();
 25428  004FDA  EC06  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25429  004FDE  0012               	return		;funcret
 25430  004FE0                     __end_ofi2_getRTC:
 25431                           	opt stack 0
 25432                           pclatu	equ	0xFFB
 25433                           pclath	equ	0xFFA
 25434                           tblptru	equ	0xFF8
 25435                           tblptrh	equ	0xFF7
 25436                           tblptrl	equ	0xFF6
 25437                           tablat	equ	0xFF5
 25438                           prodh	equ	0xFF4
 25439                           prodl	equ	0xFF3
 25440                           intcon	equ	0xFF2
 25441                           intcon2	equ	0xFF1
 25442                           intcon3	equ	0xFF0
 25443                           indf0	equ	0xFEF
 25444                           postinc0	equ	0xFEE
 25445                           fsr0h	equ	0xFEA
 25446                           fsr0l	equ	0xFE9
 25447                           wreg	equ	0xFE8
 25448                           postdec1	equ	0xFE5
 25449                           fsr1h	equ	0xFE2
 25450                           fsr1l	equ	0xFE1
 25451                           indf2	equ	0xFDF
 25452                           postinc2	equ	0xFDE
 25453                           postdec2	equ	0xFDD
 25454                           fsr2h	equ	0xFDA
 25455                           fsr2l	equ	0xFD9
 25456                           status	equ	0xFD8
 25457                           
 25458 ;; *************** function i2_I2C_Master_Write *****************
 25459 ;; Defined at:
 25460 ;;		line 49 in file "I2C.c"
 25461 ;; Parameters:    Size  Location     Type
 25462 ;;  d               2    1[COMRAM] unsigned int 
 25463 ;; Auto vars:     Size  Location     Type
 25464 ;;		None
 25465 ;; Return value:  Size  Location     Type
 25466 ;;                  1    wreg      void 
 25467 ;; Registers used:
 25468 ;;		wreg, status,2, status,0, cstack
 25469 ;; Tracked objects:
 25470 ;;		On entry : 0/0
 25471 ;;		On exit  : 0/0
 25472 ;;		Unchanged: 0/0
 25473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25474 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25477 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25478 ;;Total ram usage:        2 bytes
 25479 ;; Hardware stack levels used:    1
 25480 ;; Hardware stack levels required when called:    1
 25481 ;; This function calls:
 25482 ;;		i2_I2C_Master_Wait
 25483 ;; This function is called by:
 25484 ;;		i2_getRTC
 25485 ;; This function uses a non-reentrant model
 25486 ;;
 25487                           
 25488                           	psect	text96
 25489  005BEA                     __ptext96:
 25490                           	opt stack 0
 25491  005BEA                     i2_I2C_Master_Write:
 25492                           	opt stack 19
 25493                           
 25494                           ;I2C.c: 51: I2C_Master_Wait();
 25495                           
 25496                           ;incstack = 0
 25497  005BEA  ECCB  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25498                           
 25499                           ;I2C.c: 52: SSPBUF = d;
 25500  005BEE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25501  005BF2  0012               	return		;funcret
 25502  005BF4                     __end_ofi2_I2C_Master_Write:
 25503                           	opt stack 0
 25504                           pclatu	equ	0xFFB
 25505                           pclath	equ	0xFFA
 25506                           tblptru	equ	0xFF8
 25507                           tblptrh	equ	0xFF7
 25508                           tblptrl	equ	0xFF6
 25509                           tablat	equ	0xFF5
 25510                           prodh	equ	0xFF4
 25511                           prodl	equ	0xFF3
 25512                           intcon	equ	0xFF2
 25513                           intcon2	equ	0xFF1
 25514                           intcon3	equ	0xFF0
 25515                           indf0	equ	0xFEF
 25516                           postinc0	equ	0xFEE
 25517                           fsr0h	equ	0xFEA
 25518                           fsr0l	equ	0xFE9
 25519                           wreg	equ	0xFE8
 25520                           postdec1	equ	0xFE5
 25521                           fsr1h	equ	0xFE2
 25522                           fsr1l	equ	0xFE1
 25523                           indf2	equ	0xFDF
 25524                           postinc2	equ	0xFDE
 25525                           postdec2	equ	0xFDD
 25526                           fsr2h	equ	0xFDA
 25527                           fsr2l	equ	0xFD9
 25528                           status	equ	0xFD8
 25529                           
 25530 ;; *************** function i2_I2C_Master_Stop *****************
 25531 ;; Defined at:
 25532 ;;		line 43 in file "I2C.c"
 25533 ;; Parameters:    Size  Location     Type
 25534 ;;		None
 25535 ;; Auto vars:     Size  Location     Type
 25536 ;;		None
 25537 ;; Return value:  Size  Location     Type
 25538 ;;                  1    wreg      void 
 25539 ;; Registers used:
 25540 ;;		wreg, status,2, status,0, cstack
 25541 ;; Tracked objects:
 25542 ;;		On entry : 0/0
 25543 ;;		On exit  : 0/0
 25544 ;;		Unchanged: 0/0
 25545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25550 ;;Total ram usage:        0 bytes
 25551 ;; Hardware stack levels used:    1
 25552 ;; Hardware stack levels required when called:    1
 25553 ;; This function calls:
 25554 ;;		i2_I2C_Master_Wait
 25555 ;; This function is called by:
 25556 ;;		i2_getRTC
 25557 ;; This function uses a non-reentrant model
 25558 ;;
 25559                           
 25560                           	psect	text97
 25561  005C0C                     __ptext97:
 25562                           	opt stack 0
 25563  005C0C                     i2_I2C_Master_Stop:
 25564                           	opt stack 19
 25565                           
 25566                           ;I2C.c: 45: I2C_Master_Wait();
 25567                           
 25568                           ;incstack = 0
 25569  005C0C  ECCB  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25570                           
 25571                           ;I2C.c: 46: PEN = 1;
 25572  005C10  84C5               	bsf	4037,2,c	;volatile
 25573  005C12  0012               	return		;funcret
 25574  005C14                     __end_ofi2_I2C_Master_Stop:
 25575                           	opt stack 0
 25576                           pclatu	equ	0xFFB
 25577                           pclath	equ	0xFFA
 25578                           tblptru	equ	0xFF8
 25579                           tblptrh	equ	0xFF7
 25580                           tblptrl	equ	0xFF6
 25581                           tablat	equ	0xFF5
 25582                           prodh	equ	0xFF4
 25583                           prodl	equ	0xFF3
 25584                           intcon	equ	0xFF2
 25585                           intcon2	equ	0xFF1
 25586                           intcon3	equ	0xFF0
 25587                           indf0	equ	0xFEF
 25588                           postinc0	equ	0xFEE
 25589                           fsr0h	equ	0xFEA
 25590                           fsr0l	equ	0xFE9
 25591                           wreg	equ	0xFE8
 25592                           postdec1	equ	0xFE5
 25593                           fsr1h	equ	0xFE2
 25594                           fsr1l	equ	0xFE1
 25595                           indf2	equ	0xFDF
 25596                           postinc2	equ	0xFDE
 25597                           postdec2	equ	0xFDD
 25598                           fsr2h	equ	0xFDA
 25599                           fsr2l	equ	0xFD9
 25600                           status	equ	0xFD8
 25601                           
 25602 ;; *************** function i2_I2C_Master_Start *****************
 25603 ;; Defined at:
 25604 ;;		line 31 in file "I2C.c"
 25605 ;; Parameters:    Size  Location     Type
 25606 ;;		None
 25607 ;; Auto vars:     Size  Location     Type
 25608 ;;		None
 25609 ;; Return value:  Size  Location     Type
 25610 ;;                  1    wreg      void 
 25611 ;; Registers used:
 25612 ;;		wreg, status,2, status,0, cstack
 25613 ;; Tracked objects:
 25614 ;;		On entry : 0/0
 25615 ;;		On exit  : 0/0
 25616 ;;		Unchanged: 0/0
 25617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25622 ;;Total ram usage:        0 bytes
 25623 ;; Hardware stack levels used:    1
 25624 ;; Hardware stack levels required when called:    1
 25625 ;; This function calls:
 25626 ;;		i2_I2C_Master_Wait
 25627 ;; This function is called by:
 25628 ;;		i2_getRTC
 25629 ;; This function uses a non-reentrant model
 25630 ;;
 25631                           
 25632                           	psect	text98
 25633  005C14                     __ptext98:
 25634                           	opt stack 0
 25635  005C14                     i2_I2C_Master_Start:
 25636                           	opt stack 19
 25637                           
 25638                           ;I2C.c: 33: I2C_Master_Wait();
 25639                           
 25640                           ;incstack = 0
 25641  005C14  ECCB  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25642                           
 25643                           ;I2C.c: 34: SEN = 1;
 25644  005C18  80C5               	bsf	4037,0,c	;volatile
 25645  005C1A  0012               	return		;funcret
 25646  005C1C                     __end_ofi2_I2C_Master_Start:
 25647                           	opt stack 0
 25648                           pclatu	equ	0xFFB
 25649                           pclath	equ	0xFFA
 25650                           tblptru	equ	0xFF8
 25651                           tblptrh	equ	0xFF7
 25652                           tblptrl	equ	0xFF6
 25653                           tablat	equ	0xFF5
 25654                           prodh	equ	0xFF4
 25655                           prodl	equ	0xFF3
 25656                           intcon	equ	0xFF2
 25657                           intcon2	equ	0xFF1
 25658                           intcon3	equ	0xFF0
 25659                           indf0	equ	0xFEF
 25660                           postinc0	equ	0xFEE
 25661                           fsr0h	equ	0xFEA
 25662                           fsr0l	equ	0xFE9
 25663                           wreg	equ	0xFE8
 25664                           postdec1	equ	0xFE5
 25665                           fsr1h	equ	0xFE2
 25666                           fsr1l	equ	0xFE1
 25667                           indf2	equ	0xFDF
 25668                           postinc2	equ	0xFDE
 25669                           postdec2	equ	0xFDD
 25670                           fsr2h	equ	0xFDA
 25671                           fsr2l	equ	0xFD9
 25672                           status	equ	0xFD8
 25673                           
 25674 ;; *************** function i2_I2C_Master_Read *****************
 25675 ;; Defined at:
 25676 ;;		line 55 in file "I2C.c"
 25677 ;; Parameters:    Size  Location     Type
 25678 ;;  a               1    wreg     unsigned char 
 25679 ;; Auto vars:     Size  Location     Type
 25680 ;;  a               1    1[COMRAM] unsigned char 
 25681 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25682 ;; Return value:  Size  Location     Type
 25683 ;;                  1    wreg      unsigned char 
 25684 ;; Registers used:
 25685 ;;		wreg, status,2, status,0, cstack
 25686 ;; Tracked objects:
 25687 ;;		On entry : 0/0
 25688 ;;		On exit  : 0/0
 25689 ;;		Unchanged: 0/0
 25690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25692 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25694 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25695 ;;Total ram usage:        2 bytes
 25696 ;; Hardware stack levels used:    1
 25697 ;; Hardware stack levels required when called:    1
 25698 ;; This function calls:
 25699 ;;		i2_I2C_Master_Wait
 25700 ;; This function is called by:
 25701 ;;		i2_getRTC
 25702 ;; This function uses a non-reentrant model
 25703 ;;
 25704                           
 25705                           	psect	text99
 25706  005A5A                     __ptext99:
 25707                           	opt stack 0
 25708  005A5A                     i2_I2C_Master_Read:
 25709                           	opt stack 19
 25710                           
 25711                           ;incstack = 0
 25712                           ;i2I2C_Master_Read@a stored from wreg
 25713  005A5A  6E02               	movwf	i2I2C_Master_Read@a,c
 25714                           
 25715                           ;I2C.c: 57: unsigned char temp;
 25716                           ;I2C.c: 58: I2C_Master_Wait();
 25717  005A5C  ECCB  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25718                           
 25719                           ;I2C.c: 59: RCEN = 1;
 25720  005A60  86C5               	bsf	4037,3,c	;volatile
 25721                           
 25722                           ;I2C.c: 60: I2C_Master_Wait();
 25723  005A62  ECCB  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25724                           
 25725                           ;I2C.c: 61: temp = SSPBUF;
 25726  005A66  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25727                           
 25728                           ;I2C.c: 62: I2C_Master_Wait();
 25729  005A6A  ECCB  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25730                           
 25731                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25732  005A6E  5002               	movf	i2I2C_Master_Read@a,w,c
 25733  005A70  A4D8               	btfss	status,2,c
 25734  005A72  D002               	goto	i2u512_40
 25735  005A74  8AC5               	bsf	4037,5,c	;volatile
 25736  005A76  D001               	goto	i2l6674
 25737  005A78                     i2u512_40:
 25738  005A78  9AC5               	bcf	4037,5,c	;volatile
 25739  005A7A                     i2l6674:
 25740                           
 25741                           ;I2C.c: 64: ACKEN = 1;
 25742  005A7A  88C5               	bsf	4037,4,c	;volatile
 25743                           
 25744                           ;I2C.c: 65: return temp;
 25745  005A7C  5003               	movf	i2I2C_Master_Read@temp,w,c
 25746  005A7E  0012               	return	
 25747  005A80                     __end_ofi2_I2C_Master_Read:
 25748                           	opt stack 0
 25749                           pclatu	equ	0xFFB
 25750                           pclath	equ	0xFFA
 25751                           tblptru	equ	0xFF8
 25752                           tblptrh	equ	0xFF7
 25753                           tblptrl	equ	0xFF6
 25754                           tablat	equ	0xFF5
 25755                           prodh	equ	0xFF4
 25756                           prodl	equ	0xFF3
 25757                           intcon	equ	0xFF2
 25758                           intcon2	equ	0xFF1
 25759                           intcon3	equ	0xFF0
 25760                           indf0	equ	0xFEF
 25761                           postinc0	equ	0xFEE
 25762                           fsr0h	equ	0xFEA
 25763                           fsr0l	equ	0xFE9
 25764                           wreg	equ	0xFE8
 25765                           postdec1	equ	0xFE5
 25766                           fsr1h	equ	0xFE2
 25767                           fsr1l	equ	0xFE1
 25768                           indf2	equ	0xFDF
 25769                           postinc2	equ	0xFDE
 25770                           postdec2	equ	0xFDD
 25771                           fsr2h	equ	0xFDA
 25772                           fsr2l	equ	0xFD9
 25773                           status	equ	0xFD8
 25774                           
 25775 ;; *************** function i2_I2C_Master_Wait *****************
 25776 ;; Defined at:
 25777 ;;		line 26 in file "I2C.c"
 25778 ;; Parameters:    Size  Location     Type
 25779 ;;		None
 25780 ;; Auto vars:     Size  Location     Type
 25781 ;;		None
 25782 ;; Return value:  Size  Location     Type
 25783 ;;                  1    wreg      void 
 25784 ;; Registers used:
 25785 ;;		wreg, status,2, status,0
 25786 ;; Tracked objects:
 25787 ;;		On entry : 0/0
 25788 ;;		On exit  : 0/0
 25789 ;;		Unchanged: 0/0
 25790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25794 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25795 ;;Total ram usage:        1 bytes
 25796 ;; Hardware stack levels used:    1
 25797 ;; This function calls:
 25798 ;;		Nothing
 25799 ;; This function is called by:
 25800 ;;		i2_I2C_Master_Start
 25801 ;;		i2_I2C_Master_Stop
 25802 ;;		i2_I2C_Master_Write
 25803 ;;		i2_I2C_Master_Read
 25804 ;; This function uses a non-reentrant model
 25805 ;;
 25806                           
 25807                           	psect	text100
 25808  005B96                     __ptext100:
 25809                           	opt stack 0
 25810  005B96                     i2_I2C_Master_Wait:
 25811                           	opt stack 19
 25812  005B96                     i2l71:
 25813  005B96  B4C7               	btfsc	4039,2,c	;volatile
 25814  005B98  D7FE               	goto	i2l71
 25815  005B9A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25816  005B9E  0E1F               	movlw	31
 25817  005BA0  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25818  005BA2  B4D8               	btfsc	status,2,c
 25819  005BA4  0012               	return	
 25820  005BA6  D7F7               	goto	i2l71
 25821  005BA8                     __end_ofi2_I2C_Master_Wait:
 25822                           	opt stack 0
 25823                           pclatu	equ	0xFFB
 25824                           pclath	equ	0xFFA
 25825                           tblptru	equ	0xFF8
 25826                           tblptrh	equ	0xFF7
 25827                           tblptrl	equ	0xFF6
 25828                           tablat	equ	0xFF5
 25829                           prodh	equ	0xFF4
 25830                           prodl	equ	0xFF3
 25831                           intcon	equ	0xFF2
 25832                           intcon2	equ	0xFF1
 25833                           intcon3	equ	0xFF0
 25834                           indf0	equ	0xFEF
 25835                           postinc0	equ	0xFEE
 25836                           fsr0h	equ	0xFEA
 25837                           fsr0l	equ	0xFE9
 25838                           wreg	equ	0xFE8
 25839                           postdec1	equ	0xFE5
 25840                           fsr1h	equ	0xFE2
 25841                           fsr1l	equ	0xFE1
 25842                           indf2	equ	0xFDF
 25843                           postinc2	equ	0xFDE
 25844                           postdec2	equ	0xFDD
 25845                           fsr2h	equ	0xFDA
 25846                           fsr2l	equ	0xFD9
 25847                           status	equ	0xFD8
 25848                           
 25849 ;; *************** function i2_delay_ms *****************
 25850 ;; Defined at:
 25851 ;;		line 678 in file "sort.c"
 25852 ;; Parameters:    Size  Location     Type
 25853 ;;  milliseconds    1    wreg     unsigned char 
 25854 ;; Auto vars:     Size  Location     Type
 25855 ;;  milliseconds    1    1[COMRAM] unsigned char 
 25856 ;; Return value:  Size  Location     Type
 25857 ;;                  1    wreg      void 
 25858 ;; Registers used:
 25859 ;;		wreg, status,2, status,0, cstack
 25860 ;; Tracked objects:
 25861 ;;		On entry : 0/0
 25862 ;;		On exit  : 0/0
 25863 ;;		Unchanged: 0/0
 25864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25868 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25869 ;;Total ram usage:        2 bytes
 25870 ;; Hardware stack levels used:    1
 25871 ;; This function calls:
 25872 ;;		Nothing
 25873 ;; This function is called by:
 25874 ;;		_printSortTimer
 25875 ;; This function uses a non-reentrant model
 25876 ;;
 25877                           
 25878                           	psect	text101
 25879  005B22                     __ptext101:
 25880                           	opt stack 0
 25881  005B22                     i2_delay_ms:
 25882                           	opt stack 22
 25883                           
 25884                           ;incstack = 0
 25885                           ;i2delay_ms@milliseconds stored from wreg
 25886  005B22  6E02               	movwf	i2delay_ms@milliseconds,c
 25887                           
 25888                           ;sort.c: 679: while(milliseconds > 0)
 25889  005B24  D008               	goto	i2l9296
 25890  005B26                     i2l9292:
 25891                           
 25892                           ;sort.c: 680: {
 25893                           ;sort.c: 681: milliseconds--;
 25894  005B26  0602               	decf	i2delay_ms@milliseconds,f,c
 25895                           
 25896                           ;sort.c: 682: _delay((unsigned long)((990)*(32000000/4000000.0)));
 25897  005B28  0E0B               	movlw	11
 25898  005B2A  6E01               	movwf	??i2_delay_ms& (0+255),c
 25899  005B2C  0E48               	movlw	72
 25900  005B2E                     i2u1157_47:
 25901  005B2E  2EE8               	decfsz	wreg,f,c
 25902  005B30  D7FE               	bra	i2u1157_47
 25903  005B32  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 25904  005B34  D7FC               	bra	i2u1157_47
 25905  005B36                     i2l9296:
 25906  005B36  5002               	movf	i2delay_ms@milliseconds,w,c
 25907  005B38  B4D8               	btfsc	status,2,c
 25908  005B3A  0012               	return	
 25909  005B3C  D7F4               	goto	i2l9292
 25910  005B3E                     __end_ofi2_delay_ms:
 25911                           	opt stack 0
 25912                           pclatu	equ	0xFFB
 25913                           pclath	equ	0xFFA
 25914                           tblptru	equ	0xFF8
 25915                           tblptrh	equ	0xFF7
 25916                           tblptrl	equ	0xFF6
 25917                           tablat	equ	0xFF5
 25918                           prodh	equ	0xFF4
 25919                           prodl	equ	0xFF3
 25920                           intcon	equ	0xFF2
 25921                           intcon2	equ	0xFF1
 25922                           intcon3	equ	0xFF0
 25923                           indf0	equ	0xFEF
 25924                           postinc0	equ	0xFEE
 25925                           fsr0h	equ	0xFEA
 25926                           fsr0l	equ	0xFE9
 25927                           wreg	equ	0xFE8
 25928                           postdec1	equ	0xFE5
 25929                           fsr1h	equ	0xFE2
 25930                           fsr1l	equ	0xFE1
 25931                           indf2	equ	0xFDF
 25932                           postinc2	equ	0xFDE
 25933                           postdec2	equ	0xFDD
 25934                           fsr2h	equ	0xFDA
 25935                           fsr2l	equ	0xFD9
 25936                           status	equ	0xFD8
 25937                           
 25938 ;; *************** function i2___awmod *****************
 25939 ;; Defined at:
 25940 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 25941 ;; Parameters:    Size  Location     Type
 25942 ;;  dividend        2    0[COMRAM] int 
 25943 ;;  divisor         2    2[COMRAM] int 
 25944 ;; Auto vars:     Size  Location     Type
 25945 ;;  __awmod         1    5[COMRAM] unsigned char 
 25946 ;;  __awmod         1    4[COMRAM] unsigned char 
 25947 ;; Return value:  Size  Location     Type
 25948 ;;                  2    0[COMRAM] int 
 25949 ;; Registers used:
 25950 ;;		wreg, status,2, status,0
 25951 ;; Tracked objects:
 25952 ;;		On entry : 0/0
 25953 ;;		On exit  : 0/0
 25954 ;;		Unchanged: 0/0
 25955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25956 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25957 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25959 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25960 ;;Total ram usage:        6 bytes
 25961 ;; Hardware stack levels used:    1
 25962 ;; This function calls:
 25963 ;;		Nothing
 25964 ;; This function is called by:
 25965 ;;		_printSortTimer
 25966 ;; This function uses a non-reentrant model
 25967 ;;
 25968                           
 25969                           	psect	text102
 25970  004FE0                     __ptext102:
 25971                           	opt stack 0
 25972  004FE0                     i2___awmod:
 25973                           	opt stack 22
 25974                           
 25975                           ;incstack = 0
 25976  004FE0  0E00               	movlw	0
 25977  004FE2  6E06               	movwf	i2___awmod@sign,c
 25978  004FE4  AE02               	btfss	i2___awmod@dividend+1,7,c
 25979  004FE6  D006               	goto	i2l9306
 25980  004FE8  6C01               	negf	i2___awmod@dividend,c
 25981  004FEA  1E02               	comf	i2___awmod@dividend+1,f,c
 25982  004FEC  B0D8               	btfsc	status,0,c
 25983  004FEE  2A02               	incf	i2___awmod@dividend+1,f,c
 25984  004FF0  0E01               	movlw	1
 25985  004FF2  6E06               	movwf	i2___awmod@sign,c
 25986  004FF4                     i2l9306:
 25987  004FF4  AE04               	btfss	i2___awmod@divisor+1,7,c
 25988  004FF6  D004               	goto	i2l9310
 25989  004FF8  6C03               	negf	i2___awmod@divisor,c
 25990  004FFA  1E04               	comf	i2___awmod@divisor+1,f,c
 25991  004FFC  B0D8               	btfsc	status,0,c
 25992  004FFE  2A04               	incf	i2___awmod@divisor+1,f,c
 25993  005000                     i2l9310:
 25994  005000  5003               	movf	i2___awmod@divisor,w,c
 25995  005002  1004               	iorwf	i2___awmod@divisor+1,w,c
 25996  005004  B4D8               	btfsc	status,2,c
 25997  005006  D018               	goto	i2l9326
 25998  005008  0E01               	movlw	1
 25999  00500A  6E05               	movwf	i2___awmod@counter,c
 26000  00500C  D004               	goto	i2l9316
 26001  00500E                     i2l9314:
 26002  00500E  90D8               	bcf	status,0,c
 26003  005010  3603               	rlcf	i2___awmod@divisor,f,c
 26004  005012  3604               	rlcf	i2___awmod@divisor+1,f,c
 26005  005014  2A05               	incf	i2___awmod@counter,f,c
 26006  005016                     i2l9316:
 26007  005016  AE04               	btfss	i2___awmod@divisor+1,7,c
 26008  005018  D7FA               	goto	i2l9314
 26009  00501A                     i2l9318:
 26010  00501A  5003               	movf	i2___awmod@divisor,w,c
 26011  00501C  5C01               	subwf	i2___awmod@dividend,w,c
 26012  00501E  5004               	movf	i2___awmod@divisor+1,w,c
 26013  005020  5802               	subwfb	i2___awmod@dividend+1,w,c
 26014  005022  A0D8               	btfss	status,0,c
 26015  005024  D004               	goto	i2l9322
 26016  005026  5003               	movf	i2___awmod@divisor,w,c
 26017  005028  5E01               	subwf	i2___awmod@dividend,f,c
 26018  00502A  5004               	movf	i2___awmod@divisor+1,w,c
 26019  00502C  5A02               	subwfb	i2___awmod@dividend+1,f,c
 26020  00502E                     i2l9322:
 26021  00502E  90D8               	bcf	status,0,c
 26022  005030  3204               	rrcf	i2___awmod@divisor+1,f,c
 26023  005032  3203               	rrcf	i2___awmod@divisor,f,c
 26024  005034  2E05               	decfsz	i2___awmod@counter,f,c
 26025  005036  D7F1               	goto	i2l9318
 26026  005038                     i2l9326:
 26027  005038  5006               	movf	i2___awmod@sign,w,c
 26028  00503A  B4D8               	btfsc	status,2,c
 26029  00503C  D004               	goto	i2l9330
 26030  00503E  6C01               	negf	i2___awmod@dividend,c
 26031  005040  1E02               	comf	i2___awmod@dividend+1,f,c
 26032  005042  B0D8               	btfsc	status,0,c
 26033  005044  2A02               	incf	i2___awmod@dividend+1,f,c
 26034  005046                     i2l9330:
 26035  005046  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26036  00504A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26037  00504E  0012               	return	
 26038  005050                     __end_ofi2___awmod:
 26039                           	opt stack 0
 26040                           pclatu	equ	0xFFB
 26041                           pclath	equ	0xFFA
 26042                           tblptru	equ	0xFF8
 26043                           tblptrh	equ	0xFF7
 26044                           tblptrl	equ	0xFF6
 26045                           tablat	equ	0xFF5
 26046                           prodh	equ	0xFF4
 26047                           prodl	equ	0xFF3
 26048                           intcon	equ	0xFF2
 26049                           intcon2	equ	0xFF1
 26050                           intcon3	equ	0xFF0
 26051                           indf0	equ	0xFEF
 26052                           postinc0	equ	0xFEE
 26053                           fsr0h	equ	0xFEA
 26054                           fsr0l	equ	0xFE9
 26055                           wreg	equ	0xFE8
 26056                           postdec1	equ	0xFE5
 26057                           fsr1h	equ	0xFE2
 26058                           fsr1l	equ	0xFE1
 26059                           indf2	equ	0xFDF
 26060                           postinc2	equ	0xFDE
 26061                           postdec2	equ	0xFDD
 26062                           fsr2h	equ	0xFDA
 26063                           fsr2l	equ	0xFD9
 26064                           status	equ	0xFD8
 26065                           pclatu	equ	0xFFB
 26066                           pclath	equ	0xFFA
 26067                           tblptru	equ	0xFF8
 26068                           tblptrh	equ	0xFF7
 26069                           tblptrl	equ	0xFF6
 26070                           tablat	equ	0xFF5
 26071                           prodh	equ	0xFF4
 26072                           prodl	equ	0xFF3
 26073                           intcon	equ	0xFF2
 26074                           intcon2	equ	0xFF1
 26075                           intcon3	equ	0xFF0
 26076                           indf0	equ	0xFEF
 26077                           postinc0	equ	0xFEE
 26078                           fsr0h	equ	0xFEA
 26079                           fsr0l	equ	0xFE9
 26080                           wreg	equ	0xFE8
 26081                           postdec1	equ	0xFE5
 26082                           fsr1h	equ	0xFE2
 26083                           fsr1l	equ	0xFE1
 26084                           indf2	equ	0xFDF
 26085                           postinc2	equ	0xFDE
 26086                           postdec2	equ	0xFDD
 26087                           fsr2h	equ	0xFDA
 26088                           fsr2l	equ	0xFD9
 26089                           status	equ	0xFD8
 26090                           
 26091                           	psect	rparam
 26092  0000                     pclatu	equ	0xFFB
 26093                           pclath	equ	0xFFA
 26094                           tblptru	equ	0xFF8
 26095                           tblptrh	equ	0xFF7
 26096                           tblptrl	equ	0xFF6
 26097                           tablat	equ	0xFF5
 26098                           prodh	equ	0xFF4
 26099                           prodl	equ	0xFF3
 26100                           intcon	equ	0xFF2
 26101                           intcon2	equ	0xFF1
 26102                           intcon3	equ	0xFF0
 26103                           indf0	equ	0xFEF
 26104                           postinc0	equ	0xFEE
 26105                           fsr0h	equ	0xFEA
 26106                           fsr0l	equ	0xFE9
 26107                           wreg	equ	0xFE8
 26108                           postdec1	equ	0xFE5
 26109                           fsr1h	equ	0xFE2
 26110                           fsr1l	equ	0xFE1
 26111                           indf2	equ	0xFDF
 26112                           postinc2	equ	0xFDE
 26113                           postdec2	equ	0xFDD
 26114                           fsr2h	equ	0xFDA
 26115                           fsr2l	equ	0xFD9
 26116                           status	equ	0xFD8
 26117                           
 26118                           	psect	temp
 26119  00007E                     btemp:
 26120                           	opt stack 0
 26121  00007E                     	ds	1
 26122  0000                     int$flags	set	btemp
 26123                           pclatu	equ	0xFFB
 26124                           pclath	equ	0xFFA
 26125                           tblptru	equ	0xFF8
 26126                           tblptrh	equ	0xFF7
 26127                           tblptrl	equ	0xFF6
 26128                           tablat	equ	0xFF5
 26129                           prodh	equ	0xFF4
 26130                           prodl	equ	0xFF3
 26131                           intcon	equ	0xFF2
 26132                           intcon2	equ	0xFF1
 26133                           intcon3	equ	0xFF0
 26134                           indf0	equ	0xFEF
 26135                           postinc0	equ	0xFEE
 26136                           fsr0h	equ	0xFEA
 26137                           fsr0l	equ	0xFE9
 26138                           wreg	equ	0xFE8
 26139                           postdec1	equ	0xFE5
 26140                           fsr1h	equ	0xFE2
 26141                           fsr1l	equ	0xFE1
 26142                           indf2	equ	0xFDF
 26143                           postinc2	equ	0xFDE
 26144                           postdec2	equ	0xFDD
 26145                           fsr2h	equ	0xFDA
 26146                           fsr2l	equ	0xFD9
 26147                           status	equ	0xFD8


Data Sizes:
    Strings     1368
    Constant    27
    Data        8
    BSS         148
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      83
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_131(CODE[7]), ID@res2(BANK0[2]), ID@res1(BANK0[2]), count_total(BANK0[2]), 
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_130(CODE[18]), STR_129(CODE[18]), STR_128(CODE[17]), STR_127(CODE[17]), 
		 -> STR_126(CODE[15]), STR_125(CODE[15]), STR_124(CODE[18]), STR_123(CODE[15]), 
		 -> STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), 
		 -> STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[18]), STR_111(CODE[17]), 
		 -> STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[16]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[15]), STR_96(CODE[11]), STR_95(CODE[17]), 
		 -> STR_94(CODE[11]), STR_93(CODE[17]), STR_92(CODE[14]), STR_91(CODE[15]), 
		 -> STR_90(CODE[14]), STR_89(CODE[10]), STR_88(CODE[9]), STR_87(CODE[9]), 
		 -> STR_86(CODE[10]), STR_85(CODE[10]), STR_84(CODE[16]), STR_83(CODE[15]), 
		 -> STR_82(CODE[3]), STR_81(CODE[15]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[8]), STR_77(CODE[14]), STR_76(CODE[15]), STR_75(CODE[12]), 
		 -> STR_74(CODE[14]), STR_73(CODE[17]), STR_72(CODE[14]), STR_71(CODE[15]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[21]), 
		 -> STR_66(CODE[16]), STR_65(CODE[16]), STR_64(CODE[19]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_printf
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  250976
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   37162
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18298
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  23    23      0   13471
                                             43 BANK0     23    23      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     392
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2172
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11734
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23608
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22694
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10987
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10987
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47428
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13531
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1140
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     940
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118944
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9275
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9232
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9163
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15799
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9436
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19949
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9438
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    9028
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   84315
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    5227
                                             41 COMRAM    33    33      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      53       7       32.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     150      34        0.0%
DATA                 0      0     150       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 12:15:03 2017

                                    _i 013B                     i2_I2C_Master_Start 5C14  
                   i2_I2C_Master_Write 5BEA                                     l71 5B82  
                                   _ID 16C4                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 55E6                                    ID@i 00B1  
                                  ID@n 00C0                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l193 0102                                    l185 00E2  
                                  l188 00E6                                    l508 4844  
                                  l627 3050                                    l813 1408  
                                  l805 1332                                    l823 1534  
                                  l840 15BA                                    l816 1442  
                                  l808 136C                                    l850 16B4  
                                  l842 15CC                                    l834 1668  
                                  l826 14C8                                    l843 15E0  
                                  l844 15F4                                    l828 14F4  
                                  l845 1608                                    l862 1946  
                                  l846 161E                                    l935 4DCE  
                                  l855 1780                                    l875 1A5A  
                                  l795 1268                                    l876 1A74  
                                  l879 1B0C                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3CF8                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 433A  
                                  _log 00F0                                    _sel 00FD  
                                  _var 0149                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3EBE                    _log_count_can_w_lab 013F  
                           i2_delay_ms 5B22        __end_of_change_state_to_menu_11 5816  
      __end_of_change_state_to_menu_12 5656        __end_of_change_state_to_menu_22 561E  
      __end_of_change_state_to_menu_23 57E6           _f_can_coming_to_distribution 0131  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 5906  
      __end_of_change_state_to_logs_12 58D6        __end_of_change_state_to_logs_22 58A6  
      __end_of_change_state_to_logs_23 5962        __end_of_change_state_to_logs_33 5876  
      __end_of_change_state_to_logs_34 5846                                   ??_ID 00AB  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1133 445A  
                                 l1313 09EE                                   l1306 0944  
                                 l1146 5B4E                                   l1403 292A  
                                 l1251 429A                                   l1155 3FEC  
                                 l1316 0A54                                   l1317 0AA2  
                                 l1309 0948                                   l1318 0B08  
                                 l1407 2982                                   l1431 4D4E  
                                 l1343 0EB0                                   l1319 0B56  
                                 l1271 4660                                   l1360 1120  
                                 l1280 2A22                                   l1248 427A  
                                 l1409 29B0                                   l1274 4664  
                                 l1355 104A                                   l1283 2A26  
                                 l1532 1D60                                   l1460 3E46  
                                 l1461 3E60                                   l1373 52EA  
                                 l1438 4D5E                                   l1455 3DFA  
                                 l1394 29B6                                   l1379 52FA  
                                 l1475 442A                                   l1492 528E  
                                 l1484 4424                                   l1476 43EC  
                                 ?_arm 0001                                   l1498 529E  
                                 l1926 4A9A                                   l1796 4200  
                                 l7210 30D2                                   l7202 305A  
                                 l8002 14CC                                   l1979 4EF2  
                                 l7220 3168                                   l7212 30F0  
                                 l7204 3078                                   l1989 51E0  
                                 l7222 3186                                   l7214 310E  
                                 l7206 3096                                   l7230 3220  
                                 l8006 14E8                                   l7224 31A4  
                                 l7216 312C                                   l7208 30B4  
                                 l8200 19D4                                   l8104 173C  
                                 l8024 1598                                   l9002 2874  
                                 l7218 314A                                   l8122 17AA  
                                 l8026 15A2                                   l9020 28D6  
                                 l7228 31C2                                   l8204 19E4  
                                 l6622 4EA2                                   l6606 59DA  
                                 l9030 2914                                   l9022 28EC  
                                 l9014 28B6                                   l8214 1A2E  
                                 l8134 17EE                                   l8054 162A  
                                 l8062 1670                                   _ADIE 007CEE  
                                 l6624 4EAE                                   l6800 1CB2  
                                 l9200 3E0C                                   l9040 2958  
                                 l7440 4508                                   l7424 44C6  
                                 l7432 44E8                                   l8144 18BA  
                                 l8056 1660                                   l6634 4EE4  
                                 l6626 4EB4                                   l6650 51D2  
                                 l6642 519C                                   l6810 1D08  
                                 l6802 1CBE                                   l9026 2900  
                                 l7530 498E                                   l7522 4964  
                                 l7450 5A00                                   l8242 1ACA  
                                 l8250 1B0E                                   l8218 1A44  
                                 l8074 16A8                                   l6644 51A8  
                                 l6812 1D20                                   l6804 1CC4  
                                 l6564 59A2                                   l9220 3E72  
                                 l9044 296C                                   l8404 2C84  
                                 l7540 49C4                                   l7532 4994  
                                 l7516 494E                                   l6900 4CC4  
                                 l7196 2FCE                                   l7436 44FE  
                                 l7428 44D0                                   l8260 456C  
                                 l8180 1974                                   l8076 16B6  
                                 l6646 51AE                                   l6806 1CDC  
                                 l6566 59B4                                   l9206 3E26  
                                 l6910 4CFA                                   l8262 4586  
                                 l7446 59EA                                   l8158 1902  
                                 l7382 4AD0                                   l6832 1DB2  
                                 l6816 1D26                                   l9208 3E30  
                                 l8600 0D0C                                   l8408 2CBA  
                                 l8336 2A76                                   l7528 4982  
                                 l7544 49D2                                   l6904 4CDA  
                                 l8256 4538                                   l7560 5542  
                                 l8192 19AC                                   l6834 1DB8  
                                 l6762 1B3C                                   l9218 3E62  
                                 l8450 09B8                                   l8354 2B2E  
                                 l9250 4BA8                                   l9242 4B82  
                                 l9402 01C6                                   l8258 4552  
                                 l8266 45A0                                   l8178 196C  
                                 l7482 4F20                                   l7378 4ABA  
                                 l6852 1E16                                   l6828 1D98  
                                 l6764 1B4E                                   l9228 3EB8  
                                 l8700 0F1A                                   l8620 0D80  
                                 l8612 0D5E                                   l8604 0D24  
                                 l8372 2BC0                                   l7548 49E6  
                                 l6588 592C                                   l9500 04E0  
                                 l9412 01EE                                   l9404 01CC  
                                 l7660 4C3A                                   l8268 45CE  
                                 l7572 48EA                                   l8188 199C  
                                 l7388 4B46                                   l6870 1E8E  
                                 l6846 1DF4                                   l6790 1C3A  
                                 l6782 1C08                                   l6774 1B8C  
                                 l6758 1B28                                   l9174 3D82  
                                 l9182 3DC8                                   l6934 4DE8  
                                 l8710 0F42                                   l8702 0F20  
                                 l8630 0DA8                                   l8622 0D86  
                                 l8542 0BF4                                   l8534 0BD2  
                                 l8454 09C2                                   l8366 2B7E  
                                 l9262 4BEE                                   l9254 4BCC  
                                 l9246 4B96                                   l9238 4B72  
                                 l7670 4C7C                                   l6950 4164  
                                 l7494 4F4A                                   l7478 4F0A  
                                 l6872 1E9A                                   l6880 1EC8  
                                 l6864 1E72                                   l6856 1E4E  
                                 l6792 1C46                                   l6768 1B58  
                                 l6928 4DB6                                   l8616 0D68  
                                 l8560 0C56                                   l8552 0C1C  
                                 l8544 0BFA                                   l8448 09B2  
                                 l8392 2C3C                                   l8384 2C0C  
                                 l9248 4BA2                                   l9600 072E  
                                 l9512 0544                                   l9504 0522  
                                 l9440 0270                                   l9432 024E  
                                 l9408 01D6                                   l7664 4C50  
                                 l6960 41F2                                   l6952 4194  
                                 l6944 4142                                   l7568 48AA  
                                 l7904 12AC                                   l6882 1ECE  
                                 l6858 1E58                                   l6794 1C4C  
                                 l8802 110A                                   l8722 0F86  
                                 l8706 0F2A                                   l8642 0DEC  
                                 l8626 0D90                                   l8570 0C7E  
                                 l8538 0BDC                                   l8458 09DA  
                                 l9258 4BDA                                   l9522 0560  
                                 l9450 028C                                   l9418 01FC  
                                 l7578 492E                                   l7498 4F62  
                                 l6876 1EB4                                   l8812 113A  
                                 l8732 0FAE                                   l8652 0E14  
                                 l8564 0C60                                   l8548 0C04  
                                 l8396 2C72                                   l6892 5660  
                                 l9604 0738                                   l9508 052C  
                                 l9436 0258                                   l9380 0144  
                                 l9372 0128                                   l6972 4226  
                                 l6956 41B4                                   l6948 4156  
                                 l6886 1F26                                   l9198 3DFC  
                                 l8822 1162                                   l8814 1140  
                                 l8726 0F9E                                   l8718 0F7C  
                                 l8646 0E04                                   l8638 0DE2  
                                 l8590 0CE4                                   l8574 0C88  
                                 l6894 566C                                   l9630 07C0  
                                 l9550 0648                                   l9526 0578  
                                 l9518 0556                                   l9470 02F6  
                                 l9454 02A4                                   l9446 0282  
                                 l9366 00FE                                   l6982 4A1E  
                                 l6966 420A                                   l6958 41E4  
                                 l7926 131C                                   l6888 1F32  
                                 l8832 118A                                   l8824 1168  
                                 l8752 1022                                   l8744 1000  
                                 l8736 0FC6                                   l8728 0FA4  
                                 l8672 0E88                                   l8664 0E66  
                                 l8656 0E2C                                   l8648 0E0A  
                                 l8568 0C78                                   l9640 07EA  
                                 l9608 0750                                   l9560 0672  
                                 l9480 038C                                   l9472 0314  
                                 l9384 015C                                   l9376 013A  
                                 l6984 4A2E                                   l7936 134C  
                                 l8818 114A                                   l8754 1028  
                                 l8674 0E8E                                   l8594 0CFC  
                                 l8586 0CDA                                   l8578 0CA0  
                                 l9634 07D8                                   l9626 07B6  
                                 l9554 0660                                   l9546 063E  
                                 l9490 0422                                   l9482 03AA  
                                 l9474 0332                                   l6994 4A88  
                                 l6986 4A34                                   l7938 1356  
                                 l8828 1172                                   l8748 100A  
                                 l8692 0EF8                                   l8668 0E70  
                                 l8596 0D02                                   l9644 07F4  
                                 l9564 067C                                   l9492 0440  
                                 l9484 03C8                                   l9476 0350  
                                 l9388 016E                                   l7964 13F2  
                                 l7948 1386                                   l8782 10A4  
                                 l8758 1032                                   l8678 0E98  
                                 l8862 43AE                                   l9670 0874  
                                 l9590 0704                                   l9494 045E  
                                 l9486 03E6                                   l9478 036E  
                                 l7990 1482                                   l7974 1422  
                                 l7878 1226                                   l8928 4D86  
                                 l8792 10CC                                   l8696 0F02  
                                 l9680 089E                                   l9648 080C  
                                 l9568 0694                                   l9488 0404  
                                 l7976 142C                                   l7888 1270  
                                 l8786 10BC                                   l8778 109A  
                                 l8866 43D4                                   l8874 43F2  
                                 l9674 088C                                   l9666 086A  
                                 l9594 071C                                   l9586 06FA  
                                 l9498 047C                                   l7986 145C  
                                 l8964 270E                                   l8796 10E4  
                                 l8788 10C2                                   l8876 440C  
                                 l8868 43DE                                   l9684 08A8  
                                 l9692 08CC                                   l7996 14A2  
                                 l8982 27BE                                   l8878 4416  
                                 l7998 14AC                                   STR_1 FB52  
                                 l8984 27C4                                   l9688 08C0  
                                 l9944 3F0A                                   STR_2 FF49  
                                 STR_3 FB40                                   l9970 3FA6  
                                 l9946 3F1E                                   STR_4 FE5D  
                                 STR_5 FB40                                   STR_6 FDD9  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                                   l9984 4236  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5020 592A                                   u6000 548C  
                                 u5300 1C86                                   u5220 543E  
                                 u6030 3050                                   u5230 5440  
                                 u6015 521A                                   u5240 54D6  
                                 u5241 54D2                                   u5250 54D8  
                                 u5307 1C7C                                   _PEIE 007F96  
                                 u5340 1CFE                                   u7200 2AB8  
                                 u7120 1AD6                                   u7210 2ABA  
                                 u5347 1CF4                                   u7140 1B0C  
                                 u6500 1268                                   _RCEN 007E2B  
                                 u7240 2C60                                   u8130 289E  
                                 u8050 2750                                   u7138 1ADA  
                                 u8060 2752                                   u7340 09EE  
                                 u7270 2CA8                                   i2l71 5B96  
                                 u8080 2806                                   u7360 0AA2  
                                 u7248 2C64                                   u6480 1232  
                                 u8321 3DF0                                   u8330 3DF2  
                                 u8090 2808                                   u8180 28E4  
                                 u8148 28A2                                   u7380 0B56  
                                 u6740 1506                                   u8190 28FC  
                                 u7278 2CAC                                   u6910 183A  
                                 u8191 28F8                                   u6920 183C  
                                 u6760 152C                                   u6930 188E  
                                 u6770 152E                                   u6498 1236  
                                 u8371 3E1C                                   u8380 3E1E  
                                 u9500 3FEC                                   u6940 1890  
                                 u7910 4402                                   u5990 548A  
                                 u6758 150A                                   u7920 4404  
                                 u7860 43CA                                   u7870 43CC  
                                 u9937 11B6                                   u9947 12DA  
                                 u9957 1336                                   u9967 133E  
                                 u9977 1370                                   u9987 137A  
                                 _RSEN 007E29                                   u9997 1394  
                          _stopSignals 5B06                                   _Test 4234  
                                 _back 0063                                   _main 47A2  
                                 _down 0065                           ___ftpack@arg 0080  
                                 _keys FA8B                           ___ftpack@exp 0083  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5AA4                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 013D                        __end_ofi2_putch 5BD4  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 3524                            i2_lcdNibble 5302  
                      __end_of_Loading 16C4                   __end_of_actuatorTest 1192  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10000 42A0  
                                l10010 42BE                                  l10002 42A6  
                                l10012 42C4                                  l10004 42AC  
                                l10014 42CA                                  l10006 42B2  
                                l10022 42DC                                  l10016 42D0  
                                l10008 42B8                                  l10024 432E  
                                l10018 42D6                                  l10220 47EC  
                                l10230 481C                                  l10222 4802  
                                l10240 483A                                  l10232 4822  
                                l10242 4840                                  l10228 4816  
                                l10246 4846                   __end_of_EEPROM_write 4520  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 49F0  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAA6  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FDEA                                  STR_15 FFD2  
                                STR_23 FF3B                                  STR_31 FDC8  
                                STR_16 FFE2                                  STR_24 FD2F  
                                STR_32 FD0D                                  STR_40 FCC9  
                                STR_17 FFF2                                  STR_25 FE0C  
                                STR_33 FD1E                                  STR_41 FCB8  
                                STR_18 FFF6                                  STR_34 FDB7  
                                STR_50 FD95                                  STR_42 FD73  
                                STR_26 FD40                                  STR_43 FD73  
                                STR_35 FDB7                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FDFB  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD51                                  STR_36 FCFC  
                                STR_44 FCDA                        __end_of___awmod 4BF8  
                                STR_45 FCC9                                  STR_37 FD0D  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE09                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_38 FDA6  
                                STR_46 FD84                                  STR_70 FC85  
                                STR_47 FD84                                  STR_55 FFFA  
                                STR_63 FAA6                                  STR_71 FEF4  
                                STR_39 FD62                                  STR_56 FFDE  
                                STR_80 FF57                                  STR_72 FF2D  
                                STR_48 FCEB                                  STR_64 FAD3  
                                STR_49 FCDA                                  STR_57 FFD6  
                                STR_81 FE7C                                  STR_65 FE3D  
                                STR_73 FC41                                  STR_58 FFD2  
                                STR_90 FF2D                                  STR_82 FE09  
                                STR_74 FF11                                  STR_66 FE4D  
                                STR_59 FFE2                                  STR_75 FF64  
                                STR_91 FEE5                                  STR_83 FEA9  
                                STR_67 FABE                                  STR_68 FFBC  
                                STR_92 FF03                                  STR_76 FED6  
                                STR_84 FE1D                                  STR_85 FF86  
                                STR_77 FF1F                                  STR_69 FC74  
                                STR_93 FC52                                  STR_86 FF86  
                                STR_78 FFAD                                  STR_94 FF70  
                                STR_79 FF2D                                  STR_87 FFA4  
                                STR_95 FC63                                  STR_88 FFA4  
                                STR_96 FF7B                                  STR_89 FF90  
                                STR_97 FEC7                                  STR_98 FBB9  
                                STR_99 FBA8           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4AAC  
         i2updateServoPosition@time_us 0001                                  u10007 13BE  
                                u10017 140C                                  u10107 15D0  
                                u10027 1414                                  u10117 15DA  
                                u10037 1446                                  u11007 0F8E  
                                u10207 56E0                                  u10127 15E4  
                                u10047 1450                                  u11017 0FB6  
                                u10217 4F28                                  u10137 15EE  
                                u10057 146A                                  u11107 117A  
                                u11027 1012                                  u10307 54E8  
                                u10227 16DE                                  u10147 15F8  
                                u10067 154E                                  u11117 4D18  
                                u11037 103A                                  u10317 551C  
                                u10237 1790                                  u10157 1600  
                                u10077 1586                                  u11207 2868  
                                u11127 4D68                                  u11047 105C  
                                u10407 020A                                  u10327 447C  
                                u10247 18DE                                  u10167 160C  
                                u10087 15BE                                  _T0CON 000FD5  
                                u11217 2934                                  u11137 4D7C  
                                u11057 10AC                                  u10417 0260  
                                u10337 44D8                                  u10257 19FE  
                                u10177 1616                                  u10097 15C6  
                                u11307 20AA                                  u11227 2946  
                                u11147 5258                                  u11067 10D4  
                                u10507 070C                                  u10427 0294  
                                u10347 4510                                  u10267 1A5E  
                                u10187 1622                        ___awdiv@divisor 0088  
                                u11317 20DE                                  u11237 298C  
                                u11157 52B4                                  u11077 1124  
                                u10517 0740                                  u10437 02BE  
                                u10357 002A                                  u10277 1A68  
                                u10197 168A                                  u11407 22F4  
                                u11327 2110                                  u11247 299E  
                                u11167 26EC                                  u11087 112E  
                                u10607 2A16                                  u10527 076A  
                                u10447 0534                                  u10367 0114  
                                u10287 1A8E                                  _T1CON 000FCD  
                                u11417 2326                                  u11337 215C  
                                u11257 1F60                                  u11177 2766  
                                u11097 1152                                  u10617 2A38  
                                u10537 07C8                                  u10457 0568  
                                u10377 014C                                  u10297 59F6  
                                u11507 50A8                                  u11427 4E4E  
                                u11347 2190                                  u11267 1FAC  
                                u11187 27B2                                  u10707 2C1A  
                                u10627 2A66                                  u10547 07FC  
                                u10467 0592                                  u10387 0188  
                                u11517 50B2                                  u11437 4E6A  
                                u11357 21C2                                  u11277 1FF8  
                                u11197 281C                                  u10717 4348  
                                u10637 2ACE                                  u10557 0826  
                                u10477 0650                                  u10397 01DE  
                                u11447 3D2E                                  u11367 220E  
                                u11287 202C                                  u10807 0A64  
                                u10727 4610                                  u10647 2B22  
                                u10567 087C                                  u10487 0684  
                                _T2CON 000FCA                                  u11457 3E4A  
                                u11377 2242                                  u11297 205E  
                                u10817 0A82                                  u10737 4654  
                                u10657 2B42                                  u10577 08B0  
                                u10497 06AE                                  u11467 3E54  
                                u11387 2274                                  u10907 0CEC  
                                u10827 0AB2                                  u10747 4676  
                                u10667 2B70                                  u10587 4244  
                                u11477 59AA                                  u11397 22C0  
                                u10917 0D14                                  u10837 0B18  
                                u10757 08F4                                  u10677 2BB4  
                                u10597 29D2                                  u11487 5072  
                                u10927 0D70                                  u10847 0B36  
                                u10767 0938                                  u10687 2BD2  
                                _T3CON 000FB1                                  u11497 507C  
                                u10937 0D98                                  u10857 0B66  
                                u10777 095A                                  u10697 2C00  
                                u10947 0DF4                                  u10867 0BE4  
                                u10787 09CA                                  u10957 0E1C  
                                u10877 0C0C                                  u10797 09FE  
                                u10967 0E78                                  u10887 0C68  
                                u10977 0EA0                                  u10897 0C90  
                                u10987 0F0A                                  u10997 0F32  
                      __end_of___lwdiv 4EFC                        __end_of___lwmod 51EA  
                                i2l268 3520                                  i2l627 35B2  
                                i2l912 2E88                                  i2l908 2EC2  
                                i2l935 50EE                                  i2l962 55E2  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1F52  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 5BC8  
                      __end_of_handler 3B30                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 59BA                        __end_of_initLCD 5526  
                       __CFG_EBTRB$OFF 000000                                  _debug 00E8  
                           i2isdigit@c 0003                          ___awtoft@sign 0091  
                                _getIR 4EFC                        __end_of_loadRTC 4C84  
                      __end_of_readMAG 54E0                        __end_of_dpowers FAA6  
                                _first 0137                                  _enter 0067  
                                arm@on 00AC                        __end_of_isdigit 59E4  
                                _input 007D                          ___ftpack@sign 0084  
                                _putch 5BA8                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5A5A  
                     __end_ofi2_getRTC 4FE0                    _log_count_pop_w_tab 0141  
                                status 000FD8                            readCOND@res 0084  
                   __size_ofi2___awmod 0070                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 26AE  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 5726                            Loading@addr 00B3  
                     _count_can_no_lab 0123                   printSortTimer@i_1164 0047  
                 __size_of_EEPROM_read 0018                        __initialization 53AE  
                         __end_of_Test 433A                     __size_ofi2_lcdInst 000C  
                         __end_of_main 486A                           __end_of_keys FA9C  
                         __end_of_sort 5AC6                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 3CF8                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003                                 ID@res1 00BC  
                               ID@res2 00BE             __size_of_updateServoStates 01C8  
                               ID@res3 00AD                                 ID@time 00BB  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FB86  
                               STR_101 FC0E                                 STR_110 FE8B  
                               STR_102 FC1F                                 STR_111 FCA7  
                               STR_103 FB64                                 STR_104 FE2D  
                               STR_120 FC30                                 STR_112 FAE6  
                               STR_113 FBCA                                 STR_105 FB97  
                               STR_121 FB0A                                 STR_114 FBFD  
                               STR_106 FB75                                 STR_130 FB2E  
                               STR_122 FAF8                                 _ADRESH 000FC4  
                               STR_107 FB97                                 STR_115 FBFD  
                               STR_131 FFB5                                 STR_123 FE6D  
                               STR_108 FEB8                                 STR_116 FBEC  
                               STR_124 FB1C                                 _EEADRH 000FAA  
                               STR_117 FBFD                                 STR_125 FE6D  
                               STR_109 FE9A                                 STR_118 FBEC  
                               STR_126 FE6D                                 _ADRESL 000FC3  
                               STR_127 FBDB                                 STR_119 FBDB  
                               STR_128 FC96                                 STR_129 FAE6  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                     __end_of___awtoft 556A                                 ?_putch 0001  
                     __end_of___ftpack 4234                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 5786  
            i2_change_state_to_menu_22 5756                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1054 3A34                                 i2l1063 3AD8  
                               i2l1065 3AF4                                 i2l1146 5B7A  
                               i2l1532 251A                                 i2l7010 4FB6  
                               i2l7006 4FA6                                 i2l7110 2564  
                               i2l7016 4FD0                                 i2l7104 2548  
                               i2l7040 2368                                 i2l7122 2596  
                               i2l7050 23A0                                 i2l7034 234A  
                               i2l1979 53A4                                 i2l7140 25F2  
                               i2l7132 25D4                                 i2l7108 2560  
                               i2l7044 236E                                 i2l1989 55A2  
                               i2l7134 25DC                                 i2l7070 2438  
                               i2l7038 235A                                 i2l7152 2624  
                               i2l7128 25B0                                 i2l7080 2492  
                               i2l7162 268A                                 i2l7146 2608  
                               i2l7082 24A4                                 i2l7066 242A  
                               i2l7058 2402                                 i2l7170 5706  
                               i2l7148 2610                                 i2l7156 2636  
                               i2l7076 2482                                 i2l7068 2434  
                               i2l7092 24E4                                 i2l7164 2692  
                               i2l6710 537A                                 i2l7158 263C  
                               i2l7086 24CE                                 i2l7078 248C  
                               i2l7350 40DC                                 i2l6720 539A  
                               i2l6712 537E                                 i2l7088 24E0  
                               i2l7168 56FE                                 i2l6730 5580  
                               i2l7346 40CC                                 i2l6708 5372  
                               i2l6732 5584                                 i2l7620 35D2  
                               i2l7612 3550                                 i2l9310 5000  
                               i2l7358 4110                                 i2l7630 3640  
                               i2l7622 35E8                                 i2l6736 5598  
                               i2l6728 5578                                 i2l7640 36AE  
                               i2l7632 3656                                 i2l7624 35FE  
                               i2l9330 5046                                 i2l9322 502E  
                               i2l9314 500E                                 i2l9306 4FF4  
                               i2l6674 5A7A                                 i2l7810 38C6  
                               i2l7722 3798                                 i2l7714 377E  
                               i2l7634 366C                                 i2l7626 3614  
                               i2l7618 35BC                                 i2l9316 5016  
                               i2l7804 38B8                                 i2l7740 37D6  
                               i2l7724 37A8                                 i2l7732 37B6  
                               i2l7636 3682                                 i2l7628 362A  
                               i2l7644 36C4                                 i2l9318 501A  
                               i2l9326 5038                                 i2l7822 38FC  
                               i2l7814 38D8                                 i2l7742 37DC  
                               i2l7750 37EE                                 i2l7726 37AC  
                               i2l7638 3698                                 i2l7646 371E  
                               i2l7744 37E2                                 i2l7736 37CA  
                               i2l7832 3918                                 i2l6698 5AFE  
                               i2l7826 390E                                 i2l7818 38EA  
                               i2l7770 384A                                 i2l7762 3832  
                               i2l7746 37E8                                 i2l7738 37D0  
                               i2l9292 5B26                                 i2l7780 3874  
                               i2l9284 5104                                 i2l7790 3892  
                               i2l9278 50DA                                 i2l9296 5B36  
                               i2l7792 3896                                 i2l7776 3858  
                               i2l9800 33E8                                 i2l9720 32C4  
                               i2l9712 32A8                                 i2l7786 387E  
                               i2l9706 3294                                 i2l7796 38A0  
                               i2l9820 3436                                 i2l9812 3412  
                               i2l9804 33F6                                 i2l9740 32FC  
                               i2l9732 32E0                                 i2l9724 32D2  
                               i2l9716 32B6                                 i2l9708 329A  
                               i2l9840 3484                                 i2l9832 3468  
                               i2l9824 3444                                 i2l9816 3428  
                               i2l9808 3404                                 i2l9760 3344  
                               i2l9752 3328                                 i2l9744 330C  
                               i2l9736 32EE                                 i2l9844 3492  
                               i2l9836 3476                                 i2l9828 3452  
                               i2l9780 3392                                 i2l9772 3376  
                               i2l9764 3352                                 i2l9756 3336  
                               i2l9748 331A                                 i2l9854 34B6  
                               i2l9848 34A8                                 i2l9792 33C4  
                               i2l9784 33A8                                 i2l9776 3384  
                               i2l9768 3368                                 i2l9796 33D2  
                               i2l9788 33B6                _f_most_recent_sort_time 0135  
                        PlatformTest@i 00B1                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR2ON 007E52  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 5A0C                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 5AA4  
                               ___ftge 486A                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4602  
                               ___wmul 568C                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 56C2  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                     __end_of_readCOND 5494                                 _getRTC 4C84  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5AE8                                 _initUI 5726  
                               _readIR 53FC                                 _logRun 3EBE  
                               getIR@i 0087                                 clear_0 53D4  
                               clear_1 53E0                                 clear_2 53EC  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 52A6                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1B1A  
                            ??_handler 004B                __size_of_initGlobalVars 00CA  
                         ?_retrieveLog 0007                                 _strcpy 5656  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5A34  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5A0C  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___awmod 5050                      __end_ofi2___lwdiv 53AE  
                     __end_of_printRTC 3264                           __mediumconst FA8A  
                    __end_ofi2___lwmod 55AC                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F4                         i2___awmod@sign 0006  
                __end_of_algorithmTest 46D8                      __end_ofi2_lcdInst 5BE0  
                    __end_ofi2_isdigit 5B06                             __accesstop 0080  
              __end_of__initialization 53F2                          ?_inputHandler 002A  
                           ___ftge@ff1 0092                             ___ftge@ff2 0095  
                _most_recent_sort_time 0145                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                             ___awtoft@c 008E  
                        i2_EEPROM_read 5B6C                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 5BF4                    BlockerTest@cam_flag 00B1  
                        __end_of_getIR 4F6E                            i2printRTC@i 0041  
                        _initSortTimer 4AAC            __end_of_updateServoPosition 4E0C  
                        __end_of_putch 5BB8                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 1B1A  
                           __end_of_UI 08DA                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 598E          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5962                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08DA                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0068          __end_ofi2_updateServoPosition 5124  
                         _EEPROM_write 4438                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3247 014B                      __end_of_SpeedTest 4D8E  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 03EE  
                    printRTC@RTC_month 00BC                                ?___ftge 0092  
                              _ID$1146 00AF                                _ID$1149 00B0  
                         ?i2_lcdNibble 0001                                UI@i_412 00C9  
                              UI@i_415 00CA                                UI@i_416 00CB  
                              UI@i_450 00D4                                UI@i_442 00D0  
                              UI@i_434 00CC                                UI@i_451 00D5  
                              UI@i_443 00D1                                UI@i_435 00CD  
                              UI@i_446 00D2                                UI@i_438 00CE  
                              UI@i_447 00D3                                UI@i_439 00CF  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2434 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10110 3B64  
                              i2l10112 3B6E                                i2l10034 2CCE  
                              i2l10202 55C2                                i2l10106 3B4E  
                              i2l10044 2D38                                i2l10140 3C24  
                              i2l10124 3B9A                                i2l10132 3BB8  
                              i2l10070 2E56                                i2l10038 2CDE  
                              i2l10126 3BAE                                i2l10118 3B84  
                              i2l10134 3C02                                i2l10310 3A4E  
                              i2l10056 2E06                                i2l10152 3C70  
                              i2l10136 3C0C                                i2l10146 3C4A  
                              i2l10084 2EF6                                i2l10332 3A8C  
                              i2l10316 3A5C                                i2l10260 39B6  
                              i2l10086 2EFC                                i2l10078 2E8C  
                              i2l10166 3CC6                                i2l10342 3AAC  
                              i2l10270 39E2                                i2l10264 39C2  
                              i2l10338 3AA6                                i2l10258 39B2  
                              i2l10274 39EC                                i2l10196 55B6  
                              i2l10364 3AF2                                i2l10268 39CA  
                              i2l10198 55BC                                i2l10288 3A08  
                              i2l10820 3CDE                                i2l10812 3BDC  
                              i2l10830 3512                                i2l10822 3CEE  
                              i2l10814 3BE6                                i2l10816 3BF0  
                              i2l10834 3806                                i2l10826 34D4  
                              i2l10818 3BFA                                i2l10836 3822  
                              i2l10828 34F6                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E4  
                            ?_readCOND 0001                             _initEEPROM 5B56  
                              i2_putch 5BC8                              ?_initTime 0080  
                      _f_loadingNewCan 00EE                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 50BC                                _Loading 1192  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 4932                                ___awmod 4B56  
                           _initServos 4E0C                                ___lldiv 49F0  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 4E84                                ___lwmod 5188  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 53AE                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 46D8  
                              _lcdInst 5BB8                                _handler 0008  
                              __ptext0 47A2                                __ptext1 5AA4  
                              __ptext2 1192                                __ptext3 4AAC  
                              __ptext4 46D8                                __ptext5 56C2  
                              __ptext6 4EFC                                __ptext7 53FC  
                              __ptext8 16C4                                __ptext9 5448  
                      __size_of_printf 0438                                _readADC 598E  
                      __size_of_strcpy 0036                                _initLCD 54E0  
                              _cur_can 012B                                _loadRTC 4BF8  
                              _readMAG 5494                                _dpowers FA9C  
                   actuatorTest@i_1740 00AD                     actuatorTest@i_1750 00B0  
                   actuatorTest@i_1751 00B1                     actuatorTest@i_1760 00B7  
                   actuatorTest@i_1753 00B2                     actuatorTest@i_1770 00BD  
                   actuatorTest@i_1762 00B8                     actuatorTest@i_1754 00B3  
                   actuatorTest@i_1763 00B9                     actuatorTest@i_1747 00AE  
                         __size_of_arm 00FE                     actuatorTest@i_1780 00C3  
                   actuatorTest@i_1772 00BE                     actuatorTest@i_1756 00B4  
                   actuatorTest@i_1748 00AF                     actuatorTest@i_1773 00BF  
                   actuatorTest@i_1757 00B5                     actuatorTest@i_1766 00BA  
                   actuatorTest@i_1767 00BB                     actuatorTest@i_1759 00B6  
                   actuatorTest@i_1776 00C0                     actuatorTest@i_1777 00C1  
                   actuatorTest@i_1769 00BC                     actuatorTest@i_1779 00C2  
                              _isdigit 59BA                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0126  
                   _motor_toggle_count 0147                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 4520  
                       __pintcode_body 3946                   PlatformTest@res_1792 00AF  
                 end_of_initialization 53F2                             ??_readCOND 0082  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3946  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestDC 005C                              i2u1152_47 379E  
                            i2u1153_47 531C                              i2u1154_47 5326  
                            i2u1155_47 5348                              i2u1156_47 5352  
                            i2u1157_47 5B2E              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5B3E                 __end_of_initGlobalVars 47A2  
                           _sensorTest 29C4                             _servoTimes 005B  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3946                           ??_BothServos 00AB  
                __end_of_machineConfig 5188                   __end_of_PlatformTest 29C4  
                           _updateMenu 3264                      i2_I2C_Master_Read 5A5A  
                            _IR_signal 00E0                      i2_I2C_Master_Wait 5B96  
                    i2_I2C_Master_Stop 5C0C                              i2___awmod 4FE0  
                    i2___lwdiv@divisor 0008                        _log_count_total 0143  
                       _PortTestPusher 524A                              i2___lwdiv 535C  
                            i2___lwmod 556A                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 375A                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                          ?_initEEPROM 0001                              i2_lcdInst 5BD4  
                        Loading@i_1123 00B6                          Loading@i_1132 00B8  
                        Loading@i_1134 00BA                          Loading@i_1135 00BC  
                        Loading@i_1137 00BE                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5AE8  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 2340  
                  __end_of_EEPROM_read 5B56                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___ftge 4932  
                       __end_of___wmul 56C2                         __end_of_getMAG 56F4  
                       __end_of_getRTC 4D0A                   __size_ofi2_lcdNibble 005A  
                       _timer2_counter 0073                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 5756  
                       __end_of_readIR 5448                         __end_of_logRun 4002  
                     i2___wmul@product 0005                         __end_of_printf 1F52  
                         i2printf@flag 0026                         __end_of_strcpy 568C  
            __end_ofi2_I2C_Master_Read 5A80              __end_ofi2_I2C_Master_Wait 5BA8  
                         i2printf@prec 001D                    start_initialization 53AE  
            __end_ofi2_I2C_Master_Stop 5C14                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
               __end_of_PortTestPusher 52A6                            __end_of_arm 4438  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1408 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___awmod 0001                   BlockerTest@cond_flag 00B3  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___ftge 0098                              _SpeedTest 4D0A  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 014B  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1151 00B7                               ID@i_1152 00B9  
                             ID@i_1145 00B3                               ID@i_1148 00B5  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  __size_of_initEEPROM 0016                   __size_of_BlockerTest 01C6  
                  _printSortTimer$2574 0043                      __size_of___awtoft 0044  
                    __size_of___ftpack 010C                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 007E                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02D8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2069 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                      __size_of_readCOND 004C  
                          _EEPROM_read 5B3E                       _I2C_Master_Start 5C04  
                   __end_of_PortTestDC 5302                              _f_lastCan 00EC  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5BE0                      __size_of_initTime 0022  
                i2_updateServoPosition 50BC                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FA8A  
                            _lcdNibble 5050                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                              __ptext100 5B96  
                            __ptext101 5B22                              __ptext102 4FE0  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 0316  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0139  
                            _cur_state 00E6                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                            ??i2___awmod 0005  
                        _algorithmTest 4602                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0456  
                          __size_of_UI 08C8                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5C1C             __end_ofi2_I2C_Master_Write 5BF4  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 375A                            ??i2_isdigit 0001  
                         _PlatformTest 26AE                           BlockerTest@i 00AD  
                             i2u512_40 5A78                               _PIR2bits 000FA1  
                      PlatformTest@res 00AD                               i2u632_40 35B2  
                             i2u575_40 2466                               i2u575_47 245C  
                             i2u579_40 24C6                               i2u579_47 24BC  
                             i2u961_40 2E60                               i2u963_40 2E88  
                             i2u962_48 2E62                               i2u965_40 2EB2  
                             i2u957_40 2E1C                               i2u966_48 2EB4  
                  __size_of_updateMenu 02C0                         _log_completion 00F2  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0077                              _was_low_2 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 5A34  
                        lcdNibble@data 0081                               i2_getRTC 4F6E  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                __size_of_updateArmState 003A  
                             Loading@i 00C0                               Loading@j 00C2  
                             i2_printf 2340                               i2_strcpy 56F4  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 53C2                     i2___awmod@dividend 0001  
                         ??_initEEPROM 00B1                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 5B82  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0532                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4B56  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 57E6  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 561E  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 55E6  
              _change_state_to_menu_23 57B6                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 58D6                _change_state_to_logs_12 58A6  
              _change_state_to_logs_22 5876                _change_state_to_logs_23 5934  
              _change_state_to_logs_33 5846                _change_state_to_logs_34 5816  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 5526                               ___ftpack 4128  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3B28                     __end_of_initEEPROM 5B6C  
                      _I2C_Master_Init 51EA                       __size_of_readADC 002C  
                      _I2C_Master_Read 5906                       __size_of_initLCD 0046  
                         _f_ID_receive 012D                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5B82  
                      _I2C_Master_Stop 5BFC                       __size_of_isdigit 002A  
                             _delay_ms 59E4                         _printSortTimer 2CC2  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 4128                               __ptext10 59E4  
                             __ptext11 486A                               __ptext20 49F0  
                             __ptext12 5526                               __ptext21 5962  
                             __ptext13 4128                               __ptext30 4C84  
                             __ptext22 5AC6                               __ptext14 4520  
                             __ptext31 5BE0                               __ptext23 54E0  
                             __ptext15 5124                               __ptext40 4234  
                             __ptext32 5BFC                               __ptext24 5B56  
                             __ptext16 3EBE                               __ptext41 29C4  
                             __ptext33 5C04                               __ptext25 4438  
                             __ptext17 5726                               __ptext50 1F52  
                             __ptext42 5494                               __ptext34 5906  
                             __ptext26 5B3E                               __ptext18 4BF8  
                             __ptext51 5B06                               __ptext43 433A  
                             __ptext35 5B82                               __ptext27 0012  
                             __ptext19 51EA                               __ptext60 5188  
                             __ptext52 4E0C                               __ptext44 4602  
                             __ptext36 55E6                               __ptext28 2F9A  
                             __ptext61 4E84                               __ptext53 4D8E  
                             __ptext45 08DA                               __ptext37 561E  
                             __ptext29 5656                               __ptext70 56F4  
                             __ptext62 5BB8                               __ptext54 3CF8  
                             __ptext46 4D0A                               __ptext38 4B56  
                             __ptext71 375A                               __ptext63 5050  
                             __ptext55 598E                               __ptext47 524A  
                             __ptext39 4932                               __ptext80 58A6  
                             __ptext72 5756                               __ptext56 1B1A  
                             __ptext48 52A6                               __ptext81 58D6  
                             __ptext73 5786                               __ptext65 3B30  
                             __ptext57 5BA8                               __ptext49 26AE  
                             __ptext90 5A34                               __ptext82 5A80  
                             __ptext74 57B6                               __ptext66 50BC  
                             __ptext58 59BA                               __ptext91 556A  
                             __ptext83 4002                               __ptext75 57E6  
                             __ptext67 3264                               __ptext59 568C  
                             __ptext92 535C                               __ptext84 5B6C  
                             __ptext76 5816                               __ptext68 5A0C  
                             __ptext93 5BD4                               __ptext85 55AC  
                             __ptext77 5846                               __ptext69 3524  
                             __ptext94 5302                               __ptext86 2CC2  
                             __ptext78 5934                               __ptext95 4F6E  
                             __ptext87 2340                               __ptext79 5876  
                             __ptext96 5BEA                               __ptext88 5BC8  
                             __ptext97 5C0C                               __ptext89 5AE8  
                             __ptext98 5C14                               __ptext99 5A5A  
                             _dispLogs 5A80                          ?_actuatorTest 0001  
                   PlatformTest@i_1796 00B3                               _readCOND 5448  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2069 0002                     __end_of_initServos 4E84  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5AC6                          __size_of_main 00C8  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4D8E  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 2F9A                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 012F                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 57B6  
    __end_ofi2_change_state_to_menu_22 5786                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                      i2___awmod@divisor 0003  
               __end_of_printSortTimer 2F9A                              putch@data 0082  
                    i2___awmod@counter 0005               __end_of_I2C_Master_Start 5C0C  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5BEA  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E2                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 2CC2                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5B22              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 3524  
              __end_of_I2C_Master_Init 524A                __end_of_I2C_Master_Read 5934  
              __end_of_I2C_Master_Wait 5B96                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5C04                            lcdInst@data 0082  
                        printRTC@F3237 014F                           retrieveLog@i 000E  
                          _retrieveLog 4002                    __end_ofi2_lcdNibble 535C  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 55AC                      _f_can_distributed 0133  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 5124                        ___lwmod@counter 008B  
                    _updateServoStates 3B30                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00EA                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
