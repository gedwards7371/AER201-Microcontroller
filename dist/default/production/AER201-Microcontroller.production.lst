

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 09 22:02:16 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.40
   117                           ; Generated 01/12/2016 GMT
   118                           ; 
   119                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18F4620 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataBANK1
   152  005788                     __pidataBANK1:
   153                           	opt stack 0
   154                           
   155                           ;initializer for UI@F3241
   156  005788  4D                 	db	77
   157  005789  4D                 	db	77
   158  00578A  4D                 	db	77
   159  00578B  00                 	db	0
   160                           
   161                           ;initializer for printRTC@F3231
   162  00578C  4D                 	db	77
   163  00578D  4D                 	db	77
   164  00578E  4D                 	db	77
   165  00578F  00                 	db	0
   166                           
   167                           	psect	mediumconst
   168  00FAA2                     __pmediumconst:
   169                           	opt stack 0
   170  00FAA2  00                 	db	0
   171  00FAA3                     _keys:
   172                           	opt stack 0
   173  00FAA3  31                 	db	49
   174  00FAA4  32                 	db	50
   175  00FAA5  33                 	db	51
   176  00FAA6  41                 	db	65
   177  00FAA7  34                 	db	52
   178  00FAA8  35                 	db	53
   179  00FAA9  36                 	db	54
   180  00FAAA  42                 	db	66
   181  00FAAB  37                 	db	55
   182  00FAAC  38                 	db	56
   183  00FAAD  39                 	db	57
   184  00FAAE  43                 	db	67
   185  00FAAF  2A                 	db	42
   186  00FAB0  30                 	db	48
   187  00FAB1  23                 	db	35
   188  00FAB2  44                 	db	68
   189  00FAB3  00                 	db	0
   190  00FAB4                     __end_of_keys:
   191                           	opt stack 0
   192  00FAB4                     _dpowers:
   193                           	opt stack 0
   194  00FAB4  0001               	dw	1
   195  00FAB6  000A               	dw	10
   196  00FAB8  0064               	dw	100
   197  00FABA  03E8               	dw	1000
   198  00FABC  2710               	dw	10000
   199  00FABE                     __end_of_dpowers:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _CMCONbits	set	4020
   208  0000                     _CVRCON	set	4021
   209  0000                     _EEADR	set	4009
   210  0000                     _EEADRH	set	4010
   211  0000                     _EECON1bits	set	4006
   212  0000                     _EECON2	set	4007
   213  0000                     _EEDATA	set	4008
   214  0000                     _INTCONbits	set	4082
   215  0000                     _LATA	set	3977
   216  0000                     _LATAbits	set	3977
   217  0000                     _LATB	set	3978
   218  0000                     _LATBbits	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATCbits	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _LATE	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _PR2	set	4043
   231  0000                     _SSPADD	set	4040
   232  0000                     _SSPBUF	set	4041
   233  0000                     _SSPCON1	set	4038
   234  0000                     _SSPCON2	set	4037
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _T0CON	set	4053
   237  0000                     _T1CON	set	4045
   238  0000                     _T2CON	set	4042
   239  0000                     _T3CON	set	4017
   240  0000                     _TMR0H	set	4055
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR1L	set	4046
   244  0000                     _TMR3H	set	4019
   245  0000                     _TMR3L	set	4018
   246  0000                     _TRISA	set	3986
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISD	set	3989
   250  0000                     _TRISE	set	3990
   251  0000                     _ACKDT	set	32301
   252  0000                     _ACKEN	set	32300
   253  0000                     _ADIE	set	31982
   254  0000                     _INT1IE	set	32643
   255  0000                     _INT1IF	set	32640
   256  0000                     _PEIE	set	32662
   257  0000                     _PEN	set	32298
   258  0000                     _RCEN	set	32299
   259  0000                     _RSEN	set	32297
   260  0000                     _SEN	set	32296
   261  0000                     _TMR0IE	set	32661
   262  0000                     _TMR0IF	set	32658
   263  0000                     _TMR0ON	set	32431
   264  0000                     _TMR1IE	set	31976
   265  0000                     _TMR1IF	set	31984
   266  0000                     _TMR1ON	set	32360
   267  0000                     _TMR2IE	set	31977
   268  0000                     _TMR2IF	set	31985
   269  0000                     _TMR2ON	set	32338
   270  0000                     _TMR3IE	set	32001
   271  0000                     _TMR3IF	set	32009
   272  0000                     _TMR3ON	set	32136
   273  0000                     _TRISC3	set	31907
   274  0000                     _TRISC4	set	31908
   275  0000                     _nRBPU	set	32655
   276  00FABE                     STR_21:
   277  00FABE  25                 	db	37
   278  00FABF  30                 	db	48	;'0'
   279  00FAC0  32                 	db	50	;'2'
   280  00FAC1  64                 	db	100	;'d'
   281  00FAC2  25                 	db	37
   282  00FAC3  73                 	db	115	;'s'
   283  00FAC4  20                 	db	32
   284  00FAC5  7C                 	db	124
   285  00FAC6  20                 	db	32
   286  00FAC7  25                 	db	37
   287  00FAC8  30                 	db	48	;'0'
   288  00FAC9  32                 	db	50	;'2'
   289  00FACA  64                 	db	100	;'d'
   290  00FACB  3A                 	db	58	;':'
   291  00FACC  25                 	db	37
   292  00FACD  30                 	db	48	;'0'
   293  00FACE  32                 	db	50	;'2'
   294  00FACF  64                 	db	100	;'d'
   295  00FAD0  3A                 	db	58	;':'
   296  00FAD1  25                 	db	37
   297  00FAD2  30                 	db	48	;'0'
   298  00FAD3  32                 	db	50	;'2'
   299  00FAD4  64                 	db	100	;'d'
   300  00FAD5  00                 	db	0
   301  00FAD6                     STR_66:
   302  00FAD6  28                 	db	40
   303  00FAD7  64                 	db	100	;'d'
   304  00FAD8  61                 	db	97	;'a'
   305  00FAD9  74                 	db	116	;'t'
   306  00FADA  61                 	db	97	;'a'
   307  00FADB  3A                 	db	58	;':'
   308  00FADC  20                 	db	32
   309  00FADD  25                 	db	37
   310  00FADE  75                 	db	117	;'u'
   311  00FADF  2C                 	db	44
   312  00FAE0  20                 	db	32
   313  00FAE1  61                 	db	97	;'a'
   314  00FAE2  64                 	db	100	;'d'
   315  00FAE3  64                 	db	100	;'d'
   316  00FAE4  72                 	db	114	;'r'
   317  00FAE5  3A                 	db	58	;':'
   318  00FAE6  20                 	db	32
   319  00FAE7  25                 	db	37
   320  00FAE8  75                 	db	117	;'u'
   321  00FAE9  29                 	db	41
   322  00FAEA  00                 	db	0
   323  00FAEB                     STR_111:
   324  00FAEB  44                 	db	68	;'D'
   325  00FAEC  20                 	db	32
   326  00FAED  57                 	db	87	;'W'
   327  00FAEE  49                 	db	73	;'I'
   328  00FAEF  4C                 	db	76	;'L'
   329  00FAF0  4C                 	db	76	;'L'
   330  00FAF1  20                 	db	32
   331  00FAF2  52                 	db	82	;'R'
   332  00FAF3  45                 	db	69	;'E'
   333  00FAF4  54                 	db	84	;'T'
   334  00FAF5  55                 	db	85	;'U'
   335  00FAF6  52                 	db	82	;'R'
   336  00FAF7  4E                 	db	78	;'N'
   337  00FAF8  20                 	db	32
   338  00FAF9  20                 	db	32
   339  00FAFA  20                 	db	32
   340  00FAFB  20                 	db	32
   341  00FAFC  00                 	db	0
   342  00FAFD                     STR_121:
   343  00FAFD  4F                 	db	79	;'O'
   344  00FAFE  54                 	db	84	;'T'
   345  00FAFF  48                 	db	72	;'H'
   346  00FB00  45                 	db	69	;'E'
   347  00FB01  52                 	db	82	;'R'
   348  00FB02  20                 	db	32
   349  00FB03  53                 	db	83	;'S'
   350  00FB04  45                 	db	69	;'E'
   351  00FB05  54                 	db	84	;'T'
   352  00FB06  53                 	db	83	;'S'
   353  00FB07  20                 	db	32
   354  00FB08  52                 	db	82	;'R'
   355  00FB09  41                 	db	65	;'A'
   356  00FB0A  35                 	db	53	;'5'
   357  00FB0B  20                 	db	32
   358  00FB0C  20                 	db	32
   359  00FB0D  20                 	db	32
   360  00FB0E  00                 	db	0
   361  00FB0F                     STR_120:
   362  00FB0F  53                 	db	83	;'S'
   363  00FB10  3A                 	db	58	;':'
   364  00FB11  20                 	db	32
   365  00FB12  44                 	db	68	;'D'
   366  00FB13  20                 	db	32
   367  00FB14  57                 	db	87	;'W'
   368  00FB15  49                 	db	73	;'I'
   369  00FB16  4C                 	db	76	;'L'
   370  00FB17  4C                 	db	76	;'L'
   371  00FB18  20                 	db	32
   372  00FB19  52                 	db	82	;'R'
   373  00FB1A  45                 	db	69	;'E'
   374  00FB1B  54                 	db	84	;'T'
   375  00FB1C  55                 	db	85	;'U'
   376  00FB1D  52                 	db	82	;'R'
   377  00FB1E  4E                 	db	78	;'N'
   378  00FB1F  20                 	db	32
   379  00FB20  00                 	db	0
   380  00FB21                     STR_123:
   381  00FB21  4F                 	db	79	;'O'
   382  00FB22  54                 	db	84	;'T'
   383  00FB23  48                 	db	72	;'H'
   384  00FB24  45                 	db	69	;'E'
   385  00FB25  52                 	db	82	;'R'
   386  00FB26  3A                 	db	58	;':'
   387  00FB27  20                 	db	32
   388  00FB28  43                 	db	67	;'C'
   389  00FB29  41                 	db	65	;'A'
   390  00FB2A  4D                 	db	77	;'M'
   391  00FB2B  20                 	db	32
   392  00FB2C  54                 	db	84	;'T'
   393  00FB2D  4F                 	db	79	;'O'
   394  00FB2E  47                 	db	71	;'G'
   395  00FB2F  47                 	db	71	;'G'
   396  00FB30  4C                 	db	76	;'L'
   397  00FB31  45                 	db	69	;'E'
   398  00FB32  00                 	db	0
   399  00FB33                     STR_129:
   400  00FB33  4F                 	db	79	;'O'
   401  00FB34  54                 	db	84	;'T'
   402  00FB35  48                 	db	72	;'H'
   403  00FB36  45                 	db	69	;'E'
   404  00FB37  52                 	db	82	;'R'
   405  00FB38  20                 	db	32
   406  00FB39  53                 	db	83	;'S'
   407  00FB3A  45                 	db	69	;'E'
   408  00FB3B  54                 	db	84	;'T'
   409  00FB3C  53                 	db	83	;'S'
   410  00FB3D  20                 	db	32
   411  00FB3E  50                 	db	80	;'P'
   412  00FB3F  55                 	db	85	;'U'
   413  00FB40  53                 	db	83	;'S'
   414  00FB41  48                 	db	72	;'H'
   415  00FB42  45                 	db	69	;'E'
   416  00FB43  52                 	db	82	;'R'
   417  00FB44  00                 	db	0
   418  00FB45                     STR_122:
   419  00FB45  44                 	db	68	;'D'
   420  00FB46  3A                 	db	58	;':'
   421  00FB47  20                 	db	32
   422  00FB48  52                 	db	82	;'R'
   423  00FB49  45                 	db	69	;'E'
   424  00FB4A  54                 	db	84	;'T'
   425  00FB4B  7C                 	db	124
   426  00FB4C  32                 	db	50	;'2'
   427  00FB4D  3A                 	db	58	;':'
   428  00FB4E  20                 	db	32
   429  00FB4F  43                 	db	67	;'C'
   430  00FB50  4F                 	db	79	;'O'
   431  00FB51  4E                 	db	78	;'N'
   432  00FB52  44                 	db	68	;'D'
   433  00FB53  20                 	db	32
   434  00FB54  25                 	db	37
   435  00FB55  64                 	db	100	;'d'
   436  00FB56  00                 	db	0
   437  00FB57                     STR_3:
   438  00FB57  2D                 	db	45
   439  00FB58  2D                 	db	45
   440  00FB59  20                 	db	32
   441  00FB5A  4C                 	db	76	;'L'
   442  00FB5B  4F                 	db	79	;'O'
   443  00FB5C  47                 	db	71	;'G'
   444  00FB5D  20                 	db	32
   445  00FB5E  25                 	db	37
   446  00FB5F  32                 	db	50	;'2'
   447  00FB60  64                 	db	100	;'d'
   448  00FB61  20                 	db	32
   449  00FB62  48                 	db	72	;'H'
   450  00FB63  45                 	db	69	;'E'
   451  00FB64  52                 	db	82	;'R'
   452  00FB65  45                 	db	69	;'E'
   453  00FB66  2D                 	db	45
   454  00FB67  2D                 	db	45
   455  00FB68  00                 	db	0
   456  00FB69                     STR_1:
   457  00FB69  52                 	db	82	;'R'
   458  00FB6A  45                 	db	69	;'E'
   459  00FB6B  53                 	db	83	;'S'
   460  00FB6C  55                 	db	85	;'U'
   461  00FB6D  4C                 	db	76	;'L'
   462  00FB6E  54                 	db	84	;'T'
   463  00FB6F  53                 	db	83	;'S'
   464  00FB70  20                 	db	32
   465  00FB71  49                 	db	73	;'I'
   466  00FB72  4E                 	db	78	;'N'
   467  00FB73  20                 	db	32
   468  00FB74  4C                 	db	76	;'L'
   469  00FB75  4F                 	db	79	;'O'
   470  00FB76  47                 	db	71	;'G'
   471  00FB77  20                 	db	32
   472  00FB78  25                 	db	37
   473  00FB79  64                 	db	100	;'d'
   474  00FB7A  00                 	db	0
   475  00FB7B                     STR_102:
   476  00FB7B  4D                 	db	77	;'M'
   477  00FB7C  49                 	db	73	;'I'
   478  00FB7D  44                 	db	68	;'D'
   479  00FB7E  20                 	db	32
   480  00FB7F  2D                 	db	45
   481  00FB80  2D                 	db	45
   482  00FB81  20                 	db	32
   483  00FB82  32                 	db	50	;'2'
   484  00FB83  73                 	db	115	;'s'
   485  00FB84  20                 	db	32
   486  00FB85  20                 	db	32
   487  00FB86  20                 	db	32
   488  00FB87  20                 	db	32
   489  00FB88  20                 	db	32
   490  00FB89  20                 	db	32
   491  00FB8A  20                 	db	32
   492  00FB8B  00                 	db	0
   493  00FB8C                     STR_105:
   494  00FB8C  44                 	db	68	;'D'
   495  00FB8D  52                 	db	82	;'R'
   496  00FB8E  4F                 	db	79	;'O'
   497  00FB8F  50                 	db	80	;'P'
   498  00FB90  20                 	db	32
   499  00FB91  2D                 	db	45
   500  00FB92  2D                 	db	45
   501  00FB93  20                 	db	32
   502  00FB94  32                 	db	50	;'2'
   503  00FB95  73                 	db	115	;'s'
   504  00FB96  20                 	db	32
   505  00FB97  20                 	db	32
   506  00FB98  20                 	db	32
   507  00FB99  20                 	db	32
   508  00FB9A  20                 	db	32
   509  00FB9B  20                 	db	32
   510  00FB9C  00                 	db	0
   511  00FB9D                     STR_99:
   512  00FB9D  4C                 	db	76	;'L'
   513  00FB9E  45                 	db	69	;'E'
   514  00FB9F  46                 	db	70	;'F'
   515  00FBA0  54                 	db	84	;'T'
   516  00FBA1  20                 	db	32
   517  00FBA2  2D                 	db	45
   518  00FBA3  2D                 	db	45
   519  00FBA4  20                 	db	32
   520  00FBA5  32                 	db	50	;'2'
   521  00FBA6  73                 	db	115	;'s'
   522  00FBA7  20                 	db	32
   523  00FBA8  20                 	db	32
   524  00FBA9  20                 	db	32
   525  00FBAA  20                 	db	32
   526  00FBAB  20                 	db	32
   527  00FBAC  20                 	db	32
   528  00FBAD  00                 	db	0
   529  00FBAE                     STR_104:
   530  00FBAE  4C                 	db	76	;'L'
   531  00FBAF  45                 	db	69	;'E'
   532  00FBB0  56                 	db	86	;'V'
   533  00FBB1  45                 	db	69	;'E'
   534  00FBB2  4C                 	db	76	;'L'
   535  00FBB3  20                 	db	32
   536  00FBB4  2D                 	db	45
   537  00FBB5  2D                 	db	45
   538  00FBB6  20                 	db	32
   539  00FBB7  32                 	db	50	;'2'
   540  00FBB8  73                 	db	115	;'s'
   541  00FBB9  20                 	db	32
   542  00FBBA  20                 	db	32
   543  00FBBB  20                 	db	32
   544  00FBBC  20                 	db	32
   545  00FBBD  20                 	db	32
   546  00FBBE  00                 	db	0
   547  00FBBF                     STR_98:
   548  00FBBF  52                 	db	82	;'R'
   549  00FBC0  49                 	db	73	;'I'
   550  00FBC1  47                 	db	71	;'G'
   551  00FBC2  48                 	db	72	;'H'
   552  00FBC3  54                 	db	84	;'T'
   553  00FBC4  20                 	db	32
   554  00FBC5  2D                 	db	45
   555  00FBC6  2D                 	db	45
   556  00FBC7  20                 	db	32
   557  00FBC8  32                 	db	50	;'2'
   558  00FBC9  73                 	db	115	;'s'
   559  00FBCA  20                 	db	32
   560  00FBCB  20                 	db	32
   561  00FBCC  20                 	db	32
   562  00FBCD  20                 	db	32
   563  00FBCE  20                 	db	32
   564  00FBCF  00                 	db	0
   565  00FBD0                     STR_97:
   566  00FBD0  4D                 	db	77	;'M'
   567  00FBD1  49                 	db	73	;'I'
   568  00FBD2  44                 	db	68	;'D'
   569  00FBD3  44                 	db	68	;'D'
   570  00FBD4  4C                 	db	76	;'L'
   571  00FBD5  45                 	db	69	;'E'
   572  00FBD6  20                 	db	32
   573  00FBD7  2D                 	db	45
   574  00FBD8  2D                 	db	45
   575  00FBD9  20                 	db	32
   576  00FBDA  32                 	db	50	;'2'
   577  00FBDB  73                 	db	115	;'s'
   578  00FBDC  20                 	db	32
   579  00FBDD  20                 	db	32
   580  00FBDE  20                 	db	32
   581  00FBDF  20                 	db	32
   582  00FBE0  00                 	db	0
   583  00FBE1                     STR_112:
   584  00FBE1  4F                 	db	79	;'O'
   585  00FBE2  54                 	db	84	;'T'
   586  00FBE3  48                 	db	72	;'H'
   587  00FBE4  45                 	db	69	;'E'
   588  00FBE5  52                 	db	82	;'R'
   589  00FBE6  20                 	db	32
   590  00FBE7  53                 	db	83	;'S'
   591  00FBE8  45                 	db	69	;'E'
   592  00FBE9  54                 	db	84	;'T'
   593  00FBEA  53                 	db	83	;'S'
   594  00FBEB  20                 	db	32
   595  00FBEC  44                 	db	68	;'D'
   596  00FBED  43                 	db	67	;'C'
   597  00FBEE  20                 	db	32
   598  00FBEF  20                 	db	32
   599  00FBF0  20                 	db	32
   600  00FBF1  00                 	db	0
   601  00FBF2                     STR_118:
   602  00FBF2  44                 	db	68	;'D'
   603  00FBF3  20                 	db	32
   604  00FBF4  57                 	db	87	;'W'
   605  00FBF5  49                 	db	73	;'I'
   606  00FBF6  4C                 	db	76	;'L'
   607  00FBF7  4C                 	db	76	;'L'
   608  00FBF8  20                 	db	32
   609  00FBF9  52                 	db	82	;'R'
   610  00FBFA  45                 	db	69	;'E'
   611  00FBFB  54                 	db	84	;'T'
   612  00FBFC  55                 	db	85	;'U'
   613  00FBFD  52                 	db	82	;'R'
   614  00FBFE  4E                 	db	78	;'N'
   615  00FBFF  20                 	db	32
   616  00FC00  20                 	db	32
   617  00FC01  20                 	db	32
   618  00FC02  00                 	db	0
   619  00FC03                     STR_115:
   620  00FC03  35                 	db	53	;'5'
   621  00FC04  3A                 	db	58	;':'
   622  00FC05  48                 	db	72	;'H'
   623  00FC06  7C                 	db	124
   624  00FC07  36                 	db	54	;'6'
   625  00FC08  3A                 	db	58	;':'
   626  00FC09  4C                 	db	76	;'L'
   627  00FC0A  7C                 	db	124
   628  00FC0B  49                 	db	73	;'I'
   629  00FC0C  52                 	db	82	;'R'
   630  00FC0D  3A                 	db	58	;':'
   631  00FC0E  25                 	db	37
   632  00FC0F  64                 	db	100	;'d'
   633  00FC10  20                 	db	32
   634  00FC11  20                 	db	32
   635  00FC12  20                 	db	32
   636  00FC13  00                 	db	0
   637  00FC14                     STR_113:
   638  00FC14  31                 	db	49	;'1'
   639  00FC15  3A                 	db	58	;':'
   640  00FC16  20                 	db	32
   641  00FC17  44                 	db	68	;'D'
   642  00FC18  43                 	db	67	;'C'
   643  00FC19  20                 	db	32
   644  00FC1A  7C                 	db	124
   645  00FC1B  20                 	db	32
   646  00FC1C  41                 	db	65	;'A'
   647  00FC1D  3A                 	db	58	;':'
   648  00FC1E  20                 	db	32
   649  00FC1F  41                 	db	65	;'A'
   650  00FC20  52                 	db	82	;'R'
   651  00FC21  4D                 	db	77	;'M'
   652  00FC22  20                 	db	32
   653  00FC23  20                 	db	32
   654  00FC24  00                 	db	0
   655  00FC25                     STR_100:
   656  00FC25  4D                 	db	77	;'M'
   657  00FC26  49                 	db	73	;'I'
   658  00FC27  44                 	db	68	;'D'
   659  00FC28  2D                 	db	45
   660  00FC29  4C                 	db	76	;'L'
   661  00FC2A  45                 	db	69	;'E'
   662  00FC2B  46                 	db	70	;'F'
   663  00FC2C  54                 	db	84	;'T'
   664  00FC2D  20                 	db	32
   665  00FC2E  2D                 	db	45
   666  00FC2F  2D                 	db	45
   667  00FC30  20                 	db	32
   668  00FC31  32                 	db	50	;'2'
   669  00FC32  73                 	db	115	;'s'
   670  00FC33  20                 	db	32
   671  00FC34  20                 	db	32
   672  00FC35  00                 	db	0
   673  00FC36                     STR_101:
   674  00FC36  4D                 	db	77	;'M'
   675  00FC37  49                 	db	73	;'I'
   676  00FC38  44                 	db	68	;'D'
   677  00FC39  2D                 	db	45
   678  00FC3A  52                 	db	82	;'R'
   679  00FC3B  49                 	db	73	;'I'
   680  00FC3C  47                 	db	71	;'G'
   681  00FC3D  48                 	db	72	;'H'
   682  00FC3E  54                 	db	84	;'T'
   683  00FC3F  20                 	db	32
   684  00FC40  2D                 	db	45
   685  00FC41  2D                 	db	45
   686  00FC42  20                 	db	32
   687  00FC43  32                 	db	50	;'2'
   688  00FC44  73                 	db	115	;'s'
   689  00FC45  20                 	db	32
   690  00FC46  00                 	db	0
   691  00FC47  45                 	db	69	;'E'
   692  00FC48  4C                 	db	76	;'L'
   693  00FC49  53                 	db	83	;'S'
   694  00FC4A  45                 	db	69	;'E'
   695  00FC4B  20                 	db	32
   696  00FC4C  54                 	db	84	;'T'
   697  00FC4D  4F                 	db	79	;'O'
   698  00FC4E  47                 	db	71	;'G'
   699  00FC4F  47                 	db	71	;'G'
   700  00FC50  4C                 	db	76	;'L'
   701  00FC51  45                 	db	69	;'E'
   702  00FC52  53                 	db	83	;'S'
   703  00FC53  20                 	db	32
   704  00FC54  52                 	db	82	;'R'
   705  00FC55  41                 	db	65	;'A'
   706  00FC56  35                 	db	53	;'5'
   707  00FC57  00                 	db	0
   708  00FC58                     STR_72:
   709  00FC58  41                 	db	65	;'A'
   710  00FC59  4C                 	db	76	;'L'
   711  00FC5A  47                 	db	71	;'G'
   712  00FC5B  31                 	db	49	;'1'
   713  00FC5C  3A                 	db	58	;':'
   714  00FC5D  20                 	db	32
   715  00FC5E  39                 	db	57	;'9'
   716  00FC5F  20                 	db	32
   717  00FC60  50                 	db	80	;'P'
   718  00FC61  4F                 	db	79	;'O'
   719  00FC62  50                 	db	80	;'P'
   720  00FC63  4E                 	db	78	;'N'
   721  00FC64  4F                 	db	79	;'O'
   722  00FC65  54                 	db	84	;'T'
   723  00FC66  41                 	db	65	;'A'
   724  00FC67  42                 	db	66	;'B'
   725  00FC68  00                 	db	0
   726  00FC69                     STR_92:
   727  00FC69  54                 	db	84	;'T'
   728  00FC6A  53                 	db	83	;'S'
   729  00FC6B  54                 	db	84	;'T'
   730  00FC6C  3A                 	db	58	;':'
   731  00FC6D  20                 	db	32
   732  00FC6E  43                 	db	67	;'C'
   733  00FC6F  4F                 	db	79	;'O'
   734  00FC70  4E                 	db	78	;'N'
   735  00FC71  44                 	db	68	;'D'
   736  00FC72  20                 	db	32
   737  00FC73  53                 	db	83	;'S'
   738  00FC74  4F                 	db	79	;'O'
   739  00FC75  4C                 	db	76	;'L'
   740  00FC76  4E                 	db	78	;'N'
   741  00FC77  27                 	db	39
   742  00FC78  44                 	db	68	;'D'
   743  00FC79  00                 	db	0
   744  00FC7A                     STR_94:
   745  00FC7A  54                 	db	84	;'T'
   746  00FC7B  53                 	db	83	;'S'
   747  00FC7C  54                 	db	84	;'T'
   748  00FC7D  3A                 	db	58	;':'
   749  00FC7E  20                 	db	32
   750  00FC7F  50                 	db	80	;'P'
   751  00FC80  55                 	db	85	;'U'
   752  00FC81  53                 	db	83	;'S'
   753  00FC82  48                 	db	72	;'H'
   754  00FC83  20                 	db	32
   755  00FC84  53                 	db	83	;'S'
   756  00FC85  4F                 	db	79	;'O'
   757  00FC86  4C                 	db	76	;'L'
   758  00FC87  4E                 	db	78	;'N'
   759  00FC88  27                 	db	39
   760  00FC89  44                 	db	68	;'D'
   761  00FC8A  00                 	db	0
   762  00FC8B                     STR_68:
   763  00FC8B  32                 	db	50	;'2'
   764  00FC8C  2E                 	db	46
   765  00FC8D  53                 	db	83	;'S'
   766  00FC8E  4E                 	db	78	;'N'
   767  00FC8F  52                 	db	82	;'R'
   768  00FC90  7C                 	db	124
   769  00FC91  34                 	db	52	;'4'
   770  00FC92  2E                 	db	46
   771  00FC93  48                 	db	72	;'H'
   772  00FC94  49                 	db	73	;'I'
   773  00FC95  7C                 	db	124
   774  00FC96  35                 	db	53	;'5'
   775  00FC97  2E                 	db	46
   776  00FC98  4D                 	db	77	;'M'
   777  00FC99  45                 	db	69	;'E'
   778  00FC9A  44                 	db	68	;'D'
   779  00FC9B  00                 	db	0
   780  00FC9C                     STR_69:
   781  00FC9C  42                 	db	66	;'B'
   782  00FC9D  2E                 	db	46
   783  00FC9E  50                 	db	80	;'P'
   784  00FC9F  4C                 	db	76	;'L'
   785  00FCA0  41                 	db	65	;'A'
   786  00FCA1  7C                 	db	124
   787  00FCA2  38                 	db	56	;'8'
   788  00FCA3  2E                 	db	46
   789  00FCA4  53                 	db	83	;'S'
   790  00FCA5  56                 	db	86	;'V'
   791  00FCA6  7C                 	db	124
   792  00FCA7  39                 	db	57	;'9'
   793  00FCA8  2E                 	db	46
   794  00FCA9  42                 	db	66	;'B'
   795  00FCAA  4C                 	db	76	;'L'
   796  00FCAB  4B                 	db	75	;'K'
   797  00FCAC  00                 	db	0
   798  00FCAD                     STR_127:
   799  00FCAD  45                 	db	69	;'E'
   800  00FCAE  4C                 	db	76	;'L'
   801  00FCAF  53                 	db	83	;'S'
   802  00FCB0  45                 	db	69	;'E'
   803  00FCB1  20                 	db	32
   804  00FCB2  54                 	db	84	;'T'
   805  00FCB3  4F                 	db	79	;'O'
   806  00FCB4  47                 	db	71	;'G'
   807  00FCB5  47                 	db	71	;'G'
   808  00FCB6  4C                 	db	76	;'L'
   809  00FCB7  45                 	db	69	;'E'
   810  00FCB8  53                 	db	83	;'S'
   811  00FCB9  20                 	db	32
   812  00FCBA  41                 	db	65	;'A'
   813  00FCBB  52                 	db	82	;'R'
   814  00FCBC  4D                 	db	77	;'M'
   815  00FCBD  00                 	db	0
   816  00FCBE                     STR_110:
   817  00FCBE  54                 	db	84	;'T'
   818  00FCBF  53                 	db	83	;'S'
   819  00FCC0  54                 	db	84	;'T'
   820  00FCC1  3A                 	db	58	;':'
   821  00FCC2  20                 	db	32
   822  00FCC3  42                 	db	66	;'B'
   823  00FCC4  4F                 	db	79	;'O'
   824  00FCC5  54                 	db	84	;'T'
   825  00FCC6  48                 	db	72	;'H'
   826  00FCC7  20                 	db	32
   827  00FCC8  53                 	db	83	;'S'
   828  00FCC9  45                 	db	69	;'E'
   829  00FCCA  52                 	db	82	;'R'
   830  00FCCB  56                 	db	86	;'V'
   831  00FCCC  4F                 	db	79	;'O'
   832  00FCCD  53                 	db	83	;'S'
   833  00FCCE  00                 	db	0
   834  00FCCF                     STR_41:
   835  00FCCF  4C                 	db	76	;'L'
   836  00FCD0  4F                 	db	79	;'O'
   837  00FCD1  47                 	db	71	;'G'
   838  00FCD2  20                 	db	32
   839  00FCD3  31                 	db	49	;'1'
   840  00FCD4  20                 	db	32
   841  00FCD5  20                 	db	32
   842  00FCD6  20                 	db	32
   843  00FCD7  20                 	db	32
   844  00FCD8  20                 	db	32
   845  00FCD9  20                 	db	32
   846  00FCDA  20                 	db	32
   847  00FCDB  20                 	db	32
   848  00FCDC  20                 	db	32
   849  00FCDD  20                 	db	32
   850  00FCDE  20                 	db	32
   851  00FCDF  00                 	db	0
   852  00FCE0                     STR_40:
   853  00FCE0  4C                 	db	76	;'L'
   854  00FCE1  4F                 	db	79	;'O'
   855  00FCE2  47                 	db	71	;'G'
   856  00FCE3  20                 	db	32
   857  00FCE4  32                 	db	50	;'2'
   858  00FCE5  20                 	db	32
   859  00FCE6  20                 	db	32
   860  00FCE7  20                 	db	32
   861  00FCE8  20                 	db	32
   862  00FCE9  20                 	db	32
   863  00FCEA  20                 	db	32
   864  00FCEB  20                 	db	32
   865  00FCEC  20                 	db	32
   866  00FCED  20                 	db	32
   867  00FCEE  20                 	db	32
   868  00FCEF  20                 	db	32
   869  00FCF0  00                 	db	0
   870  00FCF1                     STR_44:
   871  00FCF1  4C                 	db	76	;'L'
   872  00FCF2  4F                 	db	79	;'O'
   873  00FCF3  47                 	db	71	;'G'
   874  00FCF4  20                 	db	32
   875  00FCF5  33                 	db	51	;'3'
   876  00FCF6  20                 	db	32
   877  00FCF7  20                 	db	32
   878  00FCF8  20                 	db	32
   879  00FCF9  20                 	db	32
   880  00FCFA  20                 	db	32
   881  00FCFB  20                 	db	32
   882  00FCFC  20                 	db	32
   883  00FCFD  20                 	db	32
   884  00FCFE  20                 	db	32
   885  00FCFF  20                 	db	32
   886  00FD00  20                 	db	32
   887  00FD01  00                 	db	0
   888  00FD02                     STR_48:
   889  00FD02  4C                 	db	76	;'L'
   890  00FD03  4F                 	db	79	;'O'
   891  00FD04  47                 	db	71	;'G'
   892  00FD05  20                 	db	32
   893  00FD06  34                 	db	52	;'4'
   894  00FD07  20                 	db	32
   895  00FD08  20                 	db	32
   896  00FD09  20                 	db	32
   897  00FD0A  20                 	db	32
   898  00FD0B  20                 	db	32
   899  00FD0C  20                 	db	32
   900  00FD0D  20                 	db	32
   901  00FD0E  20                 	db	32
   902  00FD0F  20                 	db	32
   903  00FD10  20                 	db	32
   904  00FD11  20                 	db	32
   905  00FD12  00                 	db	0
   906  00FD13                     STR_36:
   907  00FD13  33                 	db	51	;'3'
   908  00FD14  2E                 	db	46
   909  00FD15  20                 	db	32
   910  00FD16  4C                 	db	76	;'L'
   911  00FD17  4F                 	db	79	;'O'
   912  00FD18  47                 	db	71	;'G'
   913  00FD19  53                 	db	83	;'S'
   914  00FD1A  20                 	db	32
   915  00FD1B  20                 	db	32
   916  00FD1C  20                 	db	32
   917  00FD1D  20                 	db	32
   918  00FD1E  20                 	db	32
   919  00FD1F  20                 	db	32
   920  00FD20  20                 	db	32
   921  00FD21  20                 	db	32
   922  00FD22  20                 	db	32
   923  00FD23  00                 	db	0
   924  00FD24                     STR_32:
   925  00FD24  32                 	db	50	;'2'
   926  00FD25  2E                 	db	46
   927  00FD26  20                 	db	32
   928  00FD27  53                 	db	83	;'S'
   929  00FD28  4F                 	db	79	;'O'
   930  00FD29  52                 	db	82	;'R'
   931  00FD2A  54                 	db	84	;'T'
   932  00FD2B  20                 	db	32
   933  00FD2C  20                 	db	32
   934  00FD2D  20                 	db	32
   935  00FD2E  20                 	db	32
   936  00FD2F  20                 	db	32
   937  00FD30  20                 	db	32
   938  00FD31  20                 	db	32
   939  00FD32  20                 	db	32
   940  00FD33  20                 	db	32
   941  00FD34  00                 	db	0
   942  00FD35                     STR_33:
   943  00FD35  31                 	db	49	;'1'
   944  00FD36  2E                 	db	46
   945  00FD37  20                 	db	32
   946  00FD38  44                 	db	68	;'D'
   947  00FD39  41                 	db	65	;'A'
   948  00FD3A  54                 	db	84	;'T'
   949  00FD3B  45                 	db	69	;'E'
   950  00FD3C  2F                 	db	47
   951  00FD3D  54                 	db	84	;'T'
   952  00FD3E  49                 	db	73	;'I'
   953  00FD3F  4D                 	db	77	;'M'
   954  00FD40  45                 	db	69	;'E'
   955  00FD41  20                 	db	32
   956  00FD42  20                 	db	32
   957  00FD43  20                 	db	32
   958  00FD44  20                 	db	32
   959  00FD45  00                 	db	0
   960  00FD46                     STR_24:
   961  00FD46  20                 	db	32
   962  00FD47  2D                 	db	45
   963  00FD48  2D                 	db	45
   964  00FD49  20                 	db	32
   965  00FD4A  50                 	db	80	;'P'
   966  00FD4B  4F                 	db	79	;'O'
   967  00FD4C  50                 	db	80	;'P'
   968  00FD4D  20                 	db	32
   969  00FD4E  20                 	db	32
   970  00FD4F  43                 	db	67	;'C'
   971  00FD50  41                 	db	65	;'A'
   972  00FD51  4E                 	db	78	;'N'
   973  00FD52  20                 	db	32
   974  00FD53  2D                 	db	45
   975  00FD54  2D                 	db	45
   976  00FD55  20                 	db	32
   977  00FD56  00                 	db	0
   978  00FD57                     STR_26:
   979  00FD57  20                 	db	32
   980  00FD58  2D                 	db	45
   981  00FD59  2D                 	db	45
   982  00FD5A  20                 	db	32
   983  00FD5B  53                 	db	83	;'S'
   984  00FD5C  4F                 	db	79	;'O'
   985  00FD5D  55                 	db	85	;'U'
   986  00FD5E  50                 	db	80	;'P'
   987  00FD5F  20                 	db	32
   988  00FD60  43                 	db	67	;'C'
   989  00FD61  41                 	db	65	;'A'
   990  00FD62  4E                 	db	78	;'N'
   991  00FD63  20                 	db	32
   992  00FD64  2D                 	db	45
   993  00FD65  2D                 	db	45
   994  00FD66  20                 	db	32
   995  00FD67  00                 	db	0
   996  00FD68                     STR_28:
   997  00FD68  2D                 	db	45
   998  00FD69  2D                 	db	45
   999  00FD6A  20                 	db	32
  1000  00FD6B  54                 	db	84	;'T'
  1001  00FD6C  4F                 	db	79	;'O'
  1002  00FD6D  54                 	db	84	;'T'
  1003  00FD6E  41                 	db	65	;'A'
  1004  00FD6F  4C                 	db	76	;'L'
  1005  00FD70  20                 	db	32
  1006  00FD71  43                 	db	67	;'C'
  1007  00FD72  41                 	db	65	;'A'
  1008  00FD73  4E                 	db	78	;'N'
  1009  00FD74  53                 	db	83	;'S'
  1010  00FD75  20                 	db	32
  1011  00FD76  2D                 	db	45
  1012  00FD77  2D                 	db	45
  1013  00FD78  00                 	db	0
  1014  00FD79                     STR_39:
  1015  00FD79  4C                 	db	76	;'L'
  1016  00FD7A  4F                 	db	79	;'O'
  1017  00FD7B  47                 	db	71	;'G'
  1018  00FD7C  20                 	db	32
  1019  00FD7D  31                 	db	49	;'1'
  1020  00FD7E  20                 	db	32
  1021  00FD7F  20                 	db	32
  1022  00FD80  20                 	db	32
  1023  00FD81  20                 	db	32
  1024  00FD82  20                 	db	32
  1025  00FD83  20                 	db	32
  1026  00FD84  20                 	db	32
  1027  00FD85  20                 	db	32
  1028  00FD86  20                 	db	32
  1029  00FD87  20                 	db	32
  1030  00FD88  3C                 	db	60	;'<'
  1031  00FD89  00                 	db	0
  1032  00FD8A                     STR_42:
  1033  00FD8A  4C                 	db	76	;'L'
  1034  00FD8B  4F                 	db	79	;'O'
  1035  00FD8C  47                 	db	71	;'G'
  1036  00FD8D  20                 	db	32
  1037  00FD8E  32                 	db	50	;'2'
  1038  00FD8F  20                 	db	32
  1039  00FD90  20                 	db	32
  1040  00FD91  20                 	db	32
  1041  00FD92  20                 	db	32
  1042  00FD93  20                 	db	32
  1043  00FD94  20                 	db	32
  1044  00FD95  20                 	db	32
  1045  00FD96  20                 	db	32
  1046  00FD97  20                 	db	32
  1047  00FD98  20                 	db	32
  1048  00FD99  3C                 	db	60	;'<'
  1049  00FD9A  00                 	db	0
  1050  00FD9B                     STR_46:
  1051  00FD9B  4C                 	db	76	;'L'
  1052  00FD9C  4F                 	db	79	;'O'
  1053  00FD9D  47                 	db	71	;'G'
  1054  00FD9E  20                 	db	32
  1055  00FD9F  33                 	db	51	;'3'
  1056  00FDA0  20                 	db	32
  1057  00FDA1  20                 	db	32
  1058  00FDA2  20                 	db	32
  1059  00FDA3  20                 	db	32
  1060  00FDA4  20                 	db	32
  1061  00FDA5  20                 	db	32
  1062  00FDA6  20                 	db	32
  1063  00FDA7  20                 	db	32
  1064  00FDA8  20                 	db	32
  1065  00FDA9  20                 	db	32
  1066  00FDAA  3C                 	db	60	;'<'
  1067  00FDAB  00                 	db	0
  1068  00FDAC                     STR_50:
  1069  00FDAC  4C                 	db	76	;'L'
  1070  00FDAD  4F                 	db	79	;'O'
  1071  00FDAE  47                 	db	71	;'G'
  1072  00FDAF  20                 	db	32
  1073  00FDB0  34                 	db	52	;'4'
  1074  00FDB1  20                 	db	32
  1075  00FDB2  20                 	db	32
  1076  00FDB3  20                 	db	32
  1077  00FDB4  20                 	db	32
  1078  00FDB5  20                 	db	32
  1079  00FDB6  20                 	db	32
  1080  00FDB7  20                 	db	32
  1081  00FDB8  20                 	db	32
  1082  00FDB9  20                 	db	32
  1083  00FDBA  20                 	db	32
  1084  00FDBB  3C                 	db	60	;'<'
  1085  00FDBC  00                 	db	0
  1086  00FDBD                     STR_38:
  1087  00FDBD  33                 	db	51	;'3'
  1088  00FDBE  2E                 	db	46
  1089  00FDBF  20                 	db	32
  1090  00FDC0  4C                 	db	76	;'L'
  1091  00FDC1  4F                 	db	79	;'O'
  1092  00FDC2  47                 	db	71	;'G'
  1093  00FDC3  53                 	db	83	;'S'
  1094  00FDC4  20                 	db	32
  1095  00FDC5  20                 	db	32
  1096  00FDC6  20                 	db	32
  1097  00FDC7  20                 	db	32
  1098  00FDC8  20                 	db	32
  1099  00FDC9  20                 	db	32
  1100  00FDCA  20                 	db	32
  1101  00FDCB  20                 	db	32
  1102  00FDCC  3C                 	db	60	;'<'
  1103  00FDCD  00                 	db	0
  1104  00FDCE                     STR_34:
  1105  00FDCE  32                 	db	50	;'2'
  1106  00FDCF  2E                 	db	46
  1107  00FDD0  20                 	db	32
  1108  00FDD1  53                 	db	83	;'S'
  1109  00FDD2  4F                 	db	79	;'O'
  1110  00FDD3  52                 	db	82	;'R'
  1111  00FDD4  54                 	db	84	;'T'
  1112  00FDD5  20                 	db	32
  1113  00FDD6  20                 	db	32
  1114  00FDD7  20                 	db	32
  1115  00FDD8  20                 	db	32
  1116  00FDD9  20                 	db	32
  1117  00FDDA  20                 	db	32
  1118  00FDDB  20                 	db	32
  1119  00FDDC  20                 	db	32
  1120  00FDDD  3C                 	db	60	;'<'
  1121  00FDDE  00                 	db	0
  1122  00FDDF                     STR_31:
  1123  00FDDF  31                 	db	49	;'1'
  1124  00FDE0  2E                 	db	46
  1125  00FDE1  20                 	db	32
  1126  00FDE2  44                 	db	68	;'D'
  1127  00FDE3  41                 	db	65	;'A'
  1128  00FDE4  54                 	db	84	;'T'
  1129  00FDE5  45                 	db	69	;'E'
  1130  00FDE6  2F                 	db	47
  1131  00FDE7  54                 	db	84	;'T'
  1132  00FDE8  49                 	db	73	;'I'
  1133  00FDE9  4D                 	db	77	;'M'
  1134  00FDEA  45                 	db	69	;'E'
  1135  00FDEB  20                 	db	32
  1136  00FDEC  20                 	db	32
  1137  00FDED  20                 	db	32
  1138  00FDEE  3C                 	db	60	;'<'
  1139  00FDEF  00                 	db	0
  1140  00FDF0                     STR_6:
  1141  00FDF0  50                 	db	80	;'P'
  1142  00FDF1  41                 	db	65	;'A'
  1143  00FDF2  55                 	db	85	;'U'
  1144  00FDF3  53                 	db	83	;'S'
  1145  00FDF4  45                 	db	69	;'E'
  1146  00FDF5  20                 	db	32
  1147  00FDF6  3C                 	db	60	;'<'
  1148  00FDF7  20                 	db	32
  1149  00FDF8  7C                 	db	124
  1150  00FDF9  20                 	db	32
  1151  00FDFA  42                 	db	66	;'B'
  1152  00FDFB  41                 	db	65	;'A'
  1153  00FDFC  43                 	db	67	;'C'
  1154  00FDFD  4B                 	db	75	;'K'
  1155  00FDFE  20                 	db	32
  1156  00FDFF  3E                 	db	62	;'>'
  1157  00FE00  00                 	db	0
  1158  00FE01                     STR_30:
  1159  00FE01  50                 	db	80	;'P'
  1160  00FE02  55                 	db	85	;'U'
  1161  00FE03  53                 	db	83	;'S'
  1162  00FE04  48                 	db	72	;'H'
  1163  00FE05  20                 	db	32
  1164  00FE06  54                 	db	84	;'T'
  1165  00FE07  4F                 	db	79	;'O'
  1166  00FE08  20                 	db	32
  1167  00FE09  43                 	db	67	;'C'
  1168  00FE0A  4F                 	db	79	;'O'
  1169  00FE0B  4E                 	db	78	;'N'
  1170  00FE0C  54                 	db	84	;'T'
  1171  00FE0D  49                 	db	73	;'I'
  1172  00FE0E  4E                 	db	78	;'N'
  1173  00FE0F  55                 	db	85	;'U'
  1174  00FE10  45                 	db	69	;'E'
  1175  00FE11  00                 	db	0
  1176  00FE12                     STR_27:
  1177  00FE12  4E                 	db	78	;'N'
  1178  00FE13  4C                 	db	76	;'L'
  1179  00FE14  41                 	db	65	;'A'
  1180  00FE15  42                 	db	66	;'B'
  1181  00FE16  3A                 	db	58	;':'
  1182  00FE17  20                 	db	32
  1183  00FE18  25                 	db	37
  1184  00FE19  64                 	db	100	;'d'
  1185  00FE1A  7C                 	db	124
  1186  00FE1B  4C                 	db	76	;'L'
  1187  00FE1C  41                 	db	65	;'A'
  1188  00FE1D  42                 	db	66	;'B'
  1189  00FE1E  3A                 	db	58	;':'
  1190  00FE1F  20                 	db	32
  1191  00FE20  25                 	db	37
  1192  00FE21  64                 	db	100	;'d'
  1193  00FE22  00                 	db	0
  1194  00FE23                     STR_25:
  1195  00FE23  4E                 	db	78	;'N'
  1196  00FE24  54                 	db	84	;'T'
  1197  00FE25  41                 	db	65	;'A'
  1198  00FE26  42                 	db	66	;'B'
  1199  00FE27  3A                 	db	58	;':'
  1200  00FE28  20                 	db	32
  1201  00FE29  25                 	db	37
  1202  00FE2A  64                 	db	100	;'d'
  1203  00FE2B  7C                 	db	124
  1204  00FE2C  54                 	db	84	;'T'
  1205  00FE2D  41                 	db	65	;'A'
  1206  00FE2E  42                 	db	66	;'B'
  1207  00FE2F  3A                 	db	58	;':'
  1208  00FE30  20                 	db	32
  1209  00FE31  25                 	db	37
  1210  00FE32  64                 	db	100	;'d'
  1211  00FE33  00                 	db	0
  1212  00FE34                     STR_83:
  1213  00FE34  4D                 	db	77	;'M'
  1214  00FE35  41                 	db	65	;'A'
  1215  00FE36  47                 	db	71	;'G'
  1216  00FE37  5F                 	db	95	;'_'
  1217  00FE38  73                 	db	115	;'s'
  1218  00FE39  69                 	db	105	;'i'
  1219  00FE3A  67                 	db	103	;'g'
  1220  00FE3B  6E                 	db	110	;'n'
  1221  00FE3C  61                 	db	97	;'a'
  1222  00FE3D  6C                 	db	108	;'l'
  1223  00FE3E  3A                 	db	58	;':'
  1224  00FE3F  20                 	db	32
  1225  00FE40  25                 	db	37
  1226  00FE41  64                 	db	100	;'d'
  1227  00FE42  20                 	db	32
  1228  00FE43  00                 	db	0
  1229  00FE44                     STR_103:
  1230  00FE44  54                 	db	84	;'T'
  1231  00FE45  53                 	db	83	;'S'
  1232  00FE46  54                 	db	84	;'T'
  1233  00FE47  3A                 	db	58	;':'
  1234  00FE48  20                 	db	32
  1235  00FE49  54                 	db	84	;'T'
  1236  00FE4A  49                 	db	73	;'I'
  1237  00FE4B  4C                 	db	76	;'L'
  1238  00FE4C  54                 	db	84	;'T'
  1239  00FE4D  20                 	db	32
  1240  00FE4E  53                 	db	83	;'S'
  1241  00FE4F  45                 	db	69	;'E'
  1242  00FE50  52                 	db	82	;'R'
  1243  00FE51  56                 	db	86	;'V'
  1244  00FE52  4F                 	db	79	;'O'
  1245  00FE53  00                 	db	0
  1246  00FE54                     STR_4:
  1247  00FE54  44                 	db	68	;'D'
  1248  00FE55  49                 	db	73	;'I'
  1249  00FE56  44                 	db	68	;'D'
  1250  00FE57  4E                 	db	78	;'N'
  1251  00FE58  27                 	db	39
  1252  00FE59  54                 	db	84	;'T'
  1253  00FE5A  20                 	db	32
  1254  00FE5B  43                 	db	67	;'C'
  1255  00FE5C  4F                 	db	79	;'O'
  1256  00FE5D  4D                 	db	77	;'M'
  1257  00FE5E  50                 	db	80	;'P'
  1258  00FE5F  4C                 	db	76	;'L'
  1259  00FE60  45                 	db	69	;'E'
  1260  00FE61  54                 	db	84	;'T'
  1261  00FE62  45                 	db	69	;'E'
  1262  00FE63  00                 	db	0
  1263  00FE64                     STR_80:
  1264  00FE64  49                 	db	73	;'I'
  1265  00FE65  52                 	db	82	;'R'
  1266  00FE66  5F                 	db	95	;'_'
  1267  00FE67  73                 	db	115	;'s'
  1268  00FE68  69                 	db	105	;'i'
  1269  00FE69  67                 	db	103	;'g'
  1270  00FE6A  6E                 	db	110	;'n'
  1271  00FE6B  61                 	db	97	;'a'
  1272  00FE6C  6C                 	db	108	;'l'
  1273  00FE6D  3A                 	db	58	;':'
  1274  00FE6E  20                 	db	32
  1275  00FE6F  25                 	db	37
  1276  00FE70  64                 	db	100	;'d'
  1277  00FE71  20                 	db	32
  1278  00FE72  00                 	db	0
  1279  00FE73                     STR_109:
  1280  00FE73  43                 	db	67	;'C'
  1281  00FE74  41                 	db	65	;'A'
  1282  00FE75  4D                 	db	77	;'M'
  1283  00FE76  20                 	db	32
  1284  00FE77  44                 	db	68	;'D'
  1285  00FE78  57                 	db	87	;'W'
  1286  00FE79  4E                 	db	78	;'N'
  1287  00FE7A  20                 	db	32
  1288  00FE7B  7C                 	db	124
  1289  00FE7C  52                 	db	82	;'R'
  1290  00FE7D  43                 	db	67	;'C'
  1291  00FE7E  30                 	db	48	;'0'
  1292  00FE7F  3D                 	db	61	;'='
  1293  00FE80  30                 	db	48	;'0'
  1294  00FE81  00                 	db	0
  1295  00FE82                     STR_108:
  1296  00FE82  43                 	db	67	;'C'
  1297  00FE83  41                 	db	65	;'A'
  1298  00FE84  4D                 	db	77	;'M'
  1299  00FE85  20                 	db	32
  1300  00FE86  55                 	db	85	;'U'
  1301  00FE87  50                 	db	80	;'P'
  1302  00FE88  20                 	db	32
  1303  00FE89  20                 	db	32
  1304  00FE8A  7C                 	db	124
  1305  00FE8B  52                 	db	82	;'R'
  1306  00FE8C  43                 	db	67	;'C'
  1307  00FE8D  30                 	db	48	;'0'
  1308  00FE8E  3D                 	db	61	;'='
  1309  00FE8F  31                 	db	49	;'1'
  1310  00FE90  00                 	db	0
  1311  00FE91                     STR_82:
  1312  00FE91  54                 	db	84	;'T'
  1313  00FE92  53                 	db	83	;'S'
  1314  00FE93  54                 	db	84	;'T'
  1315  00FE94  3A                 	db	58	;':'
  1316  00FE95  20                 	db	32
  1317  00FE96  4D                 	db	77	;'M'
  1318  00FE97  41                 	db	65	;'A'
  1319  00FE98  47                 	db	71	;'G'
  1320  00FE99  4E                 	db	78	;'N'
  1321  00FE9A  45                 	db	69	;'E'
  1322  00FE9B  54                 	db	84	;'T'
  1323  00FE9C  49                 	db	73	;'I'
  1324  00FE9D  53                 	db	83	;'S'
  1325  00FE9E  4D                 	db	77	;'M'
  1326  00FE9F  00                 	db	0
  1327  00FEA0                     STR_107:
  1328  00FEA0  54                 	db	84	;'T'
  1329  00FEA1  53                 	db	83	;'S'
  1330  00FEA2  54                 	db	84	;'T'
  1331  00FEA3  3A                 	db	58	;':'
  1332  00FEA4  20                 	db	32
  1333  00FEA5  43                 	db	67	;'C'
  1334  00FEA6  41                 	db	65	;'A'
  1335  00FEA7  4D                 	db	77	;'M'
  1336  00FEA8  20                 	db	32
  1337  00FEA9  53                 	db	83	;'S'
  1338  00FEAA  45                 	db	69	;'E'
  1339  00FEAB  52                 	db	82	;'R'
  1340  00FEAC  56                 	db	86	;'V'
  1341  00FEAD  4F                 	db	79	;'O'
  1342  00FEAE  00                 	db	0
  1343  00FEAF                     STR_96:
  1344  00FEAF  54                 	db	84	;'T'
  1345  00FEB0  53                 	db	83	;'S'
  1346  00FEB1  54                 	db	84	;'T'
  1347  00FEB2  3A                 	db	58	;':'
  1348  00FEB3  20                 	db	32
  1349  00FEB4  50                 	db	80	;'P'
  1350  00FEB5  41                 	db	65	;'A'
  1351  00FEB6  4E                 	db	78	;'N'
  1352  00FEB7  20                 	db	32
  1353  00FEB8  53                 	db	83	;'S'
  1354  00FEB9  45                 	db	69	;'E'
  1355  00FEBA  52                 	db	82	;'R'
  1356  00FEBB  56                 	db	86	;'V'
  1357  00FEBC  4F                 	db	79	;'O'
  1358  00FEBD  00                 	db	0
  1359  00FEBE                     STR_75:
  1360  00FEBE  41                 	db	65	;'A'
  1361  00FEBF  4C                 	db	76	;'L'
  1362  00FEC0  47                 	db	71	;'G'
  1363  00FEC1  34                 	db	52	;'4'
  1364  00FEC2  3A                 	db	58	;':'
  1365  00FEC3  20                 	db	32
  1366  00FEC4  41                 	db	65	;'A'
  1367  00FEC5  4C                 	db	76	;'L'
  1368  00FEC6  4C                 	db	76	;'L'
  1369  00FEC7  20                 	db	32
  1370  00FEC8  43                 	db	67	;'C'
  1371  00FEC9  41                 	db	65	;'A'
  1372  00FECA  4E                 	db	78	;'N'
  1373  00FECB  53                 	db	83	;'S'
  1374  00FECC  00                 	db	0
  1375  00FECD                     STR_90:
  1376  00FECD  54                 	db	84	;'T'
  1377  00FECE  53                 	db	83	;'S'
  1378  00FECF  54                 	db	84	;'T'
  1379  00FED0  3A                 	db	58	;':'
  1380  00FED1  20                 	db	32
  1381  00FED2  44                 	db	68	;'D'
  1382  00FED3  43                 	db	67	;'C'
  1383  00FED4  20                 	db	32
  1384  00FED5  4D                 	db	77	;'M'
  1385  00FED6  4F                 	db	79	;'O'
  1386  00FED7  54                 	db	84	;'T'
  1387  00FED8  4F                 	db	79	;'O'
  1388  00FED9  52                 	db	82	;'R'
  1389  00FEDA  53                 	db	83	;'S'
  1390  00FEDB  00                 	db	0
  1391  00FEDC                     STR_70:
  1392  00FEDC  41                 	db	65	;'A'
  1393  00FEDD  4C                 	db	76	;'L'
  1394  00FEDE  47                 	db	71	;'G'
  1395  00FEDF  4F                 	db	79	;'O'
  1396  00FEE0  52                 	db	82	;'R'
  1397  00FEE1  49                 	db	73	;'I'
  1398  00FEE2  54                 	db	84	;'T'
  1399  00FEE3  48                 	db	72	;'H'
  1400  00FEE4  4D                 	db	77	;'M'
  1401  00FEE5  20                 	db	32
  1402  00FEE6  54                 	db	84	;'T'
  1403  00FEE7  45                 	db	69	;'E'
  1404  00FEE8  53                 	db	83	;'S'
  1405  00FEE9  54                 	db	84	;'T'
  1406  00FEEA  00                 	db	0
  1407  00FEEB                     STR_91:
  1408  00FEEB  50                 	db	80	;'P'
  1409  00FEEC  49                 	db	73	;'I'
  1410  00FEED  4E                 	db	78	;'N'
  1411  00FEEE  20                 	db	32
  1412  00FEEF  52                 	db	82	;'R'
  1413  00FEF0  41                 	db	65	;'A'
  1414  00FEF1  35                 	db	53	;'5'
  1415  00FEF2  20                 	db	32
  1416  00FEF3  48                 	db	72	;'H'
  1417  00FEF4  49                 	db	73	;'I'
  1418  00FEF5  47                 	db	71	;'G'
  1419  00FEF6  48                 	db	72	;'H'
  1420  00FEF7  2E                 	db	46
  1421  00FEF8  00                 	db	0
  1422  00FEF9                     STR_73:
  1423  00FEF9  41                 	db	65	;'A'
  1424  00FEFA  4C                 	db	76	;'L'
  1425  00FEFB  47                 	db	71	;'G'
  1426  00FEFC  32                 	db	50	;'2'
  1427  00FEFD  3A                 	db	58	;':'
  1428  00FEFE  20                 	db	32
  1429  00FEFF  31                 	db	49	;'1'
  1430  00FF00  32                 	db	50	;'2'
  1431  00FF01  20                 	db	32
  1432  00FF02  43                 	db	67	;'C'
  1433  00FF03  41                 	db	65	;'A'
  1434  00FF04  4E                 	db	78	;'N'
  1435  00FF05  53                 	db	83	;'S'
  1436  00FF06  00                 	db	0
  1437  00FF07                     STR_76:
  1438  00FF07  41                 	db	65	;'A'
  1439  00FF08  4C                 	db	76	;'L'
  1440  00FF09  47                 	db	71	;'G'
  1441  00FF0A  35                 	db	53	;'5'
  1442  00FF0B  3A                 	db	58	;':'
  1443  00FF0C  20                 	db	32
  1444  00FF0D  4E                 	db	78	;'N'
  1445  00FF0E  4F                 	db	79	;'O'
  1446  00FF0F  20                 	db	32
  1447  00FF10  43                 	db	67	;'C'
  1448  00FF11  41                 	db	65	;'A'
  1449  00FF12  4E                 	db	78	;'N'
  1450  00FF13  53                 	db	83	;'S'
  1451  00FF14  00                 	db	0
  1452  00FF15                     STR_71:
  1453  00FF15  50                 	db	80	;'P'
  1454  00FF16  55                 	db	85	;'U'
  1455  00FF17  53                 	db	83	;'S'
  1456  00FF18  48                 	db	72	;'H'
  1457  00FF19  20                 	db	32
  1458  00FF1A  54                 	db	84	;'T'
  1459  00FF1B  4F                 	db	79	;'O'
  1460  00FF1C  20                 	db	32
  1461  00FF1D  53                 	db	83	;'S'
  1462  00FF1E  54                 	db	84	;'T'
  1463  00FF1F  41                 	db	65	;'A'
  1464  00FF20  52                 	db	82	;'R'
  1465  00FF21  54                 	db	84	;'T'
  1466  00FF22  00                 	db	0
  1467  00FF23                     STR_23:
  1468  00FF23  25                 	db	37
  1469  00FF24  64                 	db	100	;'d'
  1470  00FF25  20                 	db	32
  1471  00FF26  4D                 	db	77	;'M'
  1472  00FF27  49                 	db	73	;'I'
  1473  00FF28  4E                 	db	78	;'N'
  1474  00FF29  20                 	db	32
  1475  00FF2A  25                 	db	37
  1476  00FF2B  64                 	db	100	;'d'
  1477  00FF2C  20                 	db	32
  1478  00FF2D  53                 	db	83	;'S'
  1479  00FF2E  45                 	db	69	;'E'
  1480  00FF2F  43                 	db	67	;'C'
  1481  00FF30  00                 	db	0
  1482  00FF31                     STR_2:
  1483  00FF31  54                 	db	84	;'T'
  1484  00FF32  49                 	db	73	;'I'
  1485  00FF33  4D                 	db	77	;'M'
  1486  00FF34  45                 	db	69	;'E'
  1487  00FF35  3A                 	db	58	;':'
  1488  00FF36  20                 	db	32
  1489  00FF37  25                 	db	37
  1490  00FF38  64                 	db	100	;'d'
  1491  00FF39  3A                 	db	58	;':'
  1492  00FF3A  25                 	db	37
  1493  00FF3B  30                 	db	48	;'0'
  1494  00FF3C  32                 	db	50	;'2'
  1495  00FF3D  64                 	db	100	;'d'
  1496  00FF3E  00                 	db	0
  1497  00FF3F                     STR_79:
  1498  00FF3F  54                 	db	84	;'T'
  1499  00FF40  53                 	db	83	;'S'
  1500  00FF41  54                 	db	84	;'T'
  1501  00FF42  3A                 	db	58	;':'
  1502  00FF43  20                 	db	32
  1503  00FF44  49                 	db	73	;'I'
  1504  00FF45  52                 	db	82	;'R'
  1505  00FF46  20                 	db	32
  1506  00FF47  53                 	db	83	;'S'
  1507  00FF48  4E                 	db	78	;'N'
  1508  00FF49  53                 	db	83	;'S'
  1509  00FF4A  52                 	db	82	;'R'
  1510  00FF4B  00                 	db	0
  1511  00FF4C                     STR_65:
  1512  00FF4C  54                 	db	84	;'T'
  1513  00FF4D  49                 	db	73	;'I'
  1514  00FF4E  4D                 	db	77	;'M'
  1515  00FF4F  45                 	db	69	;'E'
  1516  00FF50  20                 	db	32
  1517  00FF51  25                 	db	37
  1518  00FF52  64                 	db	100	;'d'
  1519  00FF53  3A                 	db	58	;':'
  1520  00FF54  25                 	db	37
  1521  00FF55  30                 	db	48	;'0'
  1522  00FF56  32                 	db	50	;'2'
  1523  00FF57  64                 	db	100	;'d'
  1524  00FF58  00                 	db	0
  1525  00FF59                     STR_74:
  1526  00FF59  41                 	db	65	;'A'
  1527  00FF5A  4C                 	db	76	;'L'
  1528  00FF5B  47                 	db	71	;'G'
  1529  00FF5C  33                 	db	51	;'3'
  1530  00FF5D  3A                 	db	58	;':'
  1531  00FF5E  20                 	db	32
  1532  00FF5F  31                 	db	49	;'1'
  1533  00FF60  20                 	db	32
  1534  00FF61  43                 	db	67	;'C'
  1535  00FF62  41                 	db	65	;'A'
  1536  00FF63  4E                 	db	78	;'N'
  1537  00FF64  00                 	db	0
  1538  00FF65                     STR_93:
  1539  00FF65  50                 	db	80	;'P'
  1540  00FF66  49                 	db	73	;'I'
  1541  00FF67  4E                 	db	78	;'N'
  1542  00FF68  20                 	db	32
  1543  00FF69  52                 	db	82	;'R'
  1544  00FF6A  41                 	db	65	;'A'
  1545  00FF6B  33                 	db	51	;'3'
  1546  00FF6C  2E                 	db	46
  1547  00FF6D  2E                 	db	46
  1548  00FF6E  2E                 	db	46
  1549  00FF6F  00                 	db	0
  1550  00FF70                     STR_95:
  1551  00FF70  50                 	db	80	;'P'
  1552  00FF71  49                 	db	73	;'I'
  1553  00FF72  4E                 	db	78	;'N'
  1554  00FF73  20                 	db	32
  1555  00FF74  52                 	db	82	;'R'
  1556  00FF75  41                 	db	65	;'A'
  1557  00FF76  34                 	db	52	;'4'
  1558  00FF77  2E                 	db	46
  1559  00FF78  2E                 	db	46
  1560  00FF79  2E                 	db	46
  1561  00FF7A  00                 	db	0
  1562  00FF7B                     STR_64:
  1563  00FF7B  53                 	db	83	;'S'
  1564  00FF7C  4F                 	db	79	;'O'
  1565  00FF7D  52                 	db	82	;'R'
  1566  00FF7E  54                 	db	84	;'T'
  1567  00FF7F  49                 	db	73	;'I'
  1568  00FF80  4E                 	db	78	;'N'
  1569  00FF81  47                 	db	71	;'G'
  1570  00FF82  2E                 	db	46
  1571  00FF83  2E                 	db	46
  1572  00FF84  2E                 	db	46
  1573  00FF85  00                 	db	0
  1574  00FF86                     STR_84:
  1575  00FF86  54                 	db	84	;'T'
  1576  00FF87  53                 	db	83	;'S'
  1577  00FF88  54                 	db	84	;'T'
  1578  00FF89  3A                 	db	58	;':'
  1579  00FF8A  20                 	db	32
  1580  00FF8B  43                 	db	67	;'C'
  1581  00FF8C  4F                 	db	79	;'O'
  1582  00FF8D  4E                 	db	78	;'N'
  1583  00FF8E  44                 	db	68	;'D'
  1584  00FF8F  00                 	db	0
  1585  00FF90                     STR_88:
  1586  00FF90  41                 	db	65	;'A'
  1587  00FF91  43                 	db	67	;'C'
  1588  00FF92  54                 	db	84	;'T'
  1589  00FF93  55                 	db	85	;'U'
  1590  00FF94  41                 	db	65	;'A'
  1591  00FF95  54                 	db	84	;'T'
  1592  00FF96  4F                 	db	79	;'O'
  1593  00FF97  52                 	db	82	;'R'
  1594  00FF98  53                 	db	83	;'S'
  1595  00FF99  00                 	db	0
  1596  00FF9A                     STR_22:
  1597  00FF9A  44                 	db	68	;'D'
  1598  00FF9B  55                 	db	85	;'U'
  1599  00FF9C  52                 	db	82	;'R'
  1600  00FF9D  41                 	db	65	;'A'
  1601  00FF9E  54                 	db	84	;'T'
  1602  00FF9F  49                 	db	73	;'I'
  1603  00FFA0  4F                 	db	79	;'O'
  1604  00FFA1  4E                 	db	78	;'N'
  1605  00FFA2  3A                 	db	58	;':'
  1606  00FFA3  00                 	db	0
  1607  00FFA4                     STR_86:
  1608  00FFA4  43                 	db	67	;'C'
  1609  00FFA5  4F                 	db	79	;'O'
  1610  00FFA6  4E                 	db	78	;'N'
  1611  00FFA7  44                 	db	68	;'D'
  1612  00FFA8  3A                 	db	58	;':'
  1613  00FFA9  20                 	db	32
  1614  00FFAA  25                 	db	37
  1615  00FFAB  64                 	db	100	;'d'
  1616  00FFAC  00                 	db	0
  1617  00FFAD                     STR_77:
  1618  00FFAD  53                 	db	83	;'S'
  1619  00FFAE  45                 	db	69	;'E'
  1620  00FFAF  4E                 	db	78	;'N'
  1621  00FFB0  53                 	db	83	;'S'
  1622  00FFB1  4F                 	db	79	;'O'
  1623  00FFB2  52                 	db	82	;'R'
  1624  00FFB3  53                 	db	83	;'S'
  1625  00FFB4  00                 	db	0
  1626  00FFB5                     STR_130:
  1627  00FFB5  28                 	db	40
  1628  00FFB6  6E                 	db	110	;'n'
  1629  00FFB7  75                 	db	117	;'u'
  1630  00FFB8  6C                 	db	108	;'l'
  1631  00FFB9  6C                 	db	108	;'l'
  1632  00FFBA  29                 	db	41
  1633  00FFBB  00                 	db	0
  1634  00FFBC                     STR_67:
  1635  00FFBC  46                 	db	70	;'F'
  1636  00FFBD  41                 	db	65	;'A'
  1637  00FFBE  49                 	db	73	;'I'
  1638  00FFBF  4C                 	db	76	;'L'
  1639  00FFC0  45                 	db	69	;'E'
  1640  00FFC1  44                 	db	68	;'D'
  1641  00FFC2  00                 	db	0
  1642  00FFC3                     STR_7:
  1643  00FFC3  53                 	db	83	;'S'
  1644  00FFC4  54                 	db	84	;'T'
  1645  00FFC5  41                 	db	65	;'A'
  1646  00FFC6  52                 	db	82	;'R'
  1647  00FFC7  54                 	db	84	;'T'
  1648  00FFC8  3A                 	db	58	;':'
  1649  00FFC9  00                 	db	0
  1650  00FFCA                     STR_9:
  1651  00FFCA  46                 	db	70	;'F'
  1652  00FFCB  45                 	db	69	;'E'
  1653  00FFCC  42                 	db	66	;'B'
  1654  00FFCD  00                 	db	0
  1655  00FFCE                     STR_19:
  1656  00FFCE  44                 	db	68	;'D'
  1657  00FFCF  45                 	db	69	;'E'
  1658  00FFD0  43                 	db	67	;'C'
  1659  00FFD1  00                 	db	0
  1660  00FFD2                     STR_15:
  1661  00FFD2  41                 	db	65	;'A'
  1662  00FFD3  55                 	db	85	;'U'
  1663  00FFD4  47                 	db	71	;'G'
  1664  00FFD5  00                 	db	0
  1665  00FFD6                     STR_14:
  1666  00FFD6  4A                 	db	74	;'J'
  1667  00FFD7  55                 	db	85	;'U'
  1668  00FFD8  4C                 	db	76	;'L'
  1669  00FFD9  00                 	db	0
  1670  00FFDA                     STR_8:
  1671  00FFDA  4A                 	db	74	;'J'
  1672  00FFDB  41                 	db	65	;'A'
  1673  00FFDC  4E                 	db	78	;'N'
  1674  00FFDD  00                 	db	0
  1675  00FFDE                     STR_13:
  1676  00FFDE  4A                 	db	74	;'J'
  1677  00FFDF  55                 	db	85	;'U'
  1678  00FFE0  4E                 	db	78	;'N'
  1679  00FFE1  00                 	db	0
  1680  00FFE2                     STR_16:
  1681  00FFE2  53                 	db	83	;'S'
  1682  00FFE3  45                 	db	69	;'E'
  1683  00FFE4  50                 	db	80	;'P'
  1684  00FFE5  00                 	db	0
  1685  00FFE6                     STR_10:
  1686  00FFE6  4D                 	db	77	;'M'
  1687  00FFE7  41                 	db	65	;'A'
  1688  00FFE8  52                 	db	82	;'R'
  1689  00FFE9  00                 	db	0
  1690  00FFEA                     STR_11:
  1691  00FFEA  41                 	db	65	;'A'
  1692  00FFEB  50                 	db	80	;'P'
  1693  00FFEC  52                 	db	82	;'R'
  1694  00FFED  00                 	db	0
  1695  00FFEE                     STR_20:
  1696  00FFEE  45                 	db	69	;'E'
  1697  00FFEF  52                 	db	82	;'R'
  1698  00FFF0  52                 	db	82	;'R'
  1699  00FFF1  00                 	db	0
  1700  00FFF2                     STR_17:
  1701  00FFF2  4F                 	db	79	;'O'
  1702  00FFF3  43                 	db	67	;'C'
  1703  00FFF4  54                 	db	84	;'T'
  1704  00FFF5  00                 	db	0
  1705  00FFF6                     STR_18:
  1706  00FFF6  4E                 	db	78	;'N'
  1707  00FFF7  4F                 	db	79	;'O'
  1708  00FFF8  56                 	db	86	;'V'
  1709  00FFF9  00                 	db	0
  1710  00FFFA                     STR_12:
  1711  00FFFA  4D                 	db	77	;'M'
  1712  00FFFB  41                 	db	65	;'A'
  1713  00FFFC  59                 	db	89	;'Y'
  1714  00FFFD  00                 	db	0
  1715  0000                     
  1716                           ; #config settings
  1717  00FFFE  00                 	db	0	; dummy byte at the end
  1718  0000                     
  1719                           	psect	cinit
  1720  004FE8                     __pcinit:
  1721                           	opt stack 0
  1722  004FE8                     start_initialization:
  1723                           	opt stack 0
  1724  004FE8                     __initialization:
  1725                           	opt stack 0
  1726                           
  1727                           ; Initialize objects allocated to BANK1 (8 bytes)
  1728                           ; load TBLPTR registers with __pidataBANK1
  1729  004FE8  0E88               	movlw	low __pidataBANK1
  1730  004FEA  6EF6               	movwf	tblptrl,c
  1731  004FEC  0E57               	movlw	high __pidataBANK1
  1732  004FEE  6EF7               	movwf	tblptrh,c
  1733  004FF0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1734  004FF2  6EF8               	movwf	tblptru,c
  1735  004FF4  EE01  F047         	lfsr	0,__pdataBANK1
  1736  004FF8  EE10 F008          	lfsr	1,8
  1737  004FFC                     copy_data0:
  1738  004FFC  0009               	tblrd		*+
  1739  004FFE  CFF5 FFEE          	movff	tablat,postinc0
  1740  005002  50E5               	movf	postdec1,w,c
  1741  005004  50E1               	movf	fsr1l,w,c
  1742  005006  E1FA               	bnz	copy_data0
  1743                           
  1744                           ; Clear objects allocated to BANK1 (71 bytes)
  1745  005008  EE01  F000         	lfsr	0,__pbssBANK1
  1746  00500C  0E47               	movlw	71
  1747  00500E                     clear_0:
  1748  00500E  6AEE               	clrf	postinc0,c
  1749  005010  06E8               	decf	wreg,f,c
  1750  005012  E1FD               	bnz	clear_0
  1751                           
  1752                           ; Clear objects allocated to BANK0 (38 bytes)
  1753  005014  EE00  F0DA         	lfsr	0,__pbssBANK0
  1754  005018  0E26               	movlw	38
  1755  00501A                     clear_1:
  1756  00501A  6AEE               	clrf	postinc0,c
  1757  00501C  06E8               	decf	wreg,f,c
  1758  00501E  E1FD               	bnz	clear_1
  1759                           
  1760                           ; Clear objects allocated to COMRAM (35 bytes)
  1761  005020  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1762  005024  0E23               	movlw	35
  1763  005026                     clear_2:
  1764  005026  6AEE               	clrf	postinc0,c
  1765  005028  06E8               	decf	wreg,f,c
  1766  00502A  E1FD               	bnz	clear_2
  1767  00502C                     end_of_initialization:
  1768                           	opt stack 0
  1769  00502C                     __end_of__initialization:
  1770                           	opt stack 0
  1771  00502C  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1772  00502E  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1773  005030  0100               	movlb	0
  1774  005032  EF25  F022         	goto	_main	;jump to C main() function
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1l	equ	0xFE1
  1783                           
  1784                           	psect	bssCOMRAM
  1785  00005B                     __pbssCOMRAM:
  1786                           	opt stack 0
  1787  00005B                     _back:
  1788                           	opt stack 0
  1789  00005B                     	ds	2
  1790  00005D                     _down:
  1791                           	opt stack 0
  1792  00005D                     	ds	2
  1793  00005F                     _enter:
  1794                           	opt stack 0
  1795  00005F                     	ds	2
  1796  000061                     _f_panning_to_bin:
  1797                           	opt stack 0
  1798  000061                     	ds	2
  1799  000063                     _log_completion:
  1800                           	opt stack 0
  1801  000063                     	ds	2
  1802  000065                     _log_count_pop_no_tab:
  1803                           	opt stack 0
  1804  000065                     	ds	2
  1805  000067                     _log_count_pop_w_tab:
  1806                           	opt stack 0
  1807  000067                     	ds	2
  1808  000069                     _most_recent_sort_time:
  1809                           	opt stack 0
  1810  000069                     	ds	2
  1811  00006B                     _pan_servo_state:
  1812                           	opt stack 0
  1813  00006B                     	ds	2
  1814  00006D                     _servo_timer_counter:
  1815                           	opt stack 0
  1816  00006D                     	ds	2
  1817  00006F                     _servo_timer_target:
  1818                           	opt stack 0
  1819  00006F                     	ds	2
  1820  000071                     _tilt_servo_state:
  1821                           	opt stack 0
  1822  000071                     	ds	2
  1823  000073                     _timer2_counter:
  1824                           	opt stack 0
  1825  000073                     	ds	2
  1826  000075                     _up:
  1827                           	opt stack 0
  1828  000075                     	ds	2
  1829  000077                     _was_low_1:
  1830                           	opt stack 0
  1831  000077                     	ds	2
  1832  000079                     _was_low_2:
  1833                           	opt stack 0
  1834  000079                     	ds	2
  1835  00007B                     _was_low_3:
  1836                           	opt stack 0
  1837  00007B                     	ds	2
  1838  00007D                     _input:
  1839                           	opt stack 0
  1840  00007D                     	ds	1
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           postdec1	equ	0xFE5
  1848                           fsr1l	equ	0xFE1
  1849                           
  1850                           	psect	bssBANK0
  1851  0000DA                     __pbssBANK0:
  1852                           	opt stack 0
  1853  0000DA                     _servoTimes:
  1854                           	opt stack 0
  1855  0000DA                     	ds	8
  1856  0000E2                     _sensor_outputs:
  1857                           	opt stack 0
  1858  0000E2                     	ds	4
  1859  0000E6                     _IR_signal:
  1860                           	opt stack 0
  1861  0000E6                     	ds	2
  1862  0000E8                     _MAG_signal:
  1863                           	opt stack 0
  1864  0000E8                     	ds	2
  1865  0000EA                     _RTCflag:
  1866                           	opt stack 0
  1867  0000EA                     	ds	2
  1868  0000EC                     _cur_state:
  1869                           	opt stack 0
  1870  0000EC                     	ds	2
  1871  0000EE                     _f_arm_position:
  1872                           	opt stack 0
  1873  0000EE                     	ds	2
  1874  0000F0                     _f_lastCan:
  1875                           	opt stack 0
  1876  0000F0                     	ds	2
  1877  0000F2                     _f_loadingNewCan:
  1878                           	opt stack 0
  1879  0000F2                     	ds	2
  1880  0000F4                     _log:
  1881                           	opt stack 0
  1882  0000F4                     	ds	2
  1883  0000F6                     _log_total_time:
  1884                           	opt stack 0
  1885  0000F6                     	ds	2
  1886  0000F8                     _logstate:
  1887                           	opt stack 0
  1888  0000F8                     	ds	2
  1889  0000FA                     _total_time:
  1890                           	opt stack 0
  1891  0000FA                     	ds	2
  1892  0000FC                     _machine_state:
  1893                           	opt stack 0
  1894  0000FC                     	ds	1
  1895  0000FD                     _sel:
  1896                           	opt stack 0
  1897  0000FD                     	ds	1
  1898  0000FE                     _count_total:
  1899                           	opt stack 0
  1900  0000FE                     	ds	2
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	bssBANK1
  1911  000100                     __pbssBANK1:
  1912                           	opt stack 0
  1913  000100                     _log_startTime:
  1914                           	opt stack 0
  1915  000100                     	ds	14
  1916  00010E                     _startTime:
  1917                           	opt stack 0
  1918  00010E                     	ds	14
  1919  00011C                     _time:
  1920                           	opt stack 0
  1921  00011C                     	ds	7
  1922  000123                     _count_can_no_lab:
  1923                           	opt stack 0
  1924  000123                     	ds	2
  1925  000125                     _count_can_w_lab:
  1926                           	opt stack 0
  1927  000125                     	ds	2
  1928  000127                     _count_pop_no_tab:
  1929                           	opt stack 0
  1930  000127                     	ds	2
  1931  000129                     _count_pop_w_tab:
  1932                           	opt stack 0
  1933  000129                     	ds	2
  1934  00012B                     _cur_can:
  1935                           	opt stack 0
  1936  00012B                     	ds	2
  1937  00012D                     _debug:
  1938                           	opt stack 0
  1939  00012D                     	ds	2
  1940  00012F                     _f_ID_receive:
  1941                           	opt stack 0
  1942  00012F                     	ds	2
  1943  000131                     _f_can_coming_to_ID:
  1944                           	opt stack 0
  1945  000131                     	ds	2
  1946  000133                     _f_can_coming_to_distribution:
  1947                           	opt stack 0
  1948  000133                     	ds	2
  1949  000135                     _f_can_distributed:
  1950                           	opt stack 0
  1951  000135                     	ds	2
  1952  000137                     _f_most_recent_sort_time:
  1953                           	opt stack 0
  1954  000137                     	ds	2
  1955  000139                     _first:
  1956                           	opt stack 0
  1957  000139                     	ds	2
  1958  00013B                     _firstboot:
  1959                           	opt stack 0
  1960  00013B                     	ds	2
  1961  00013D                     _i:
  1962                           	opt stack 0
  1963  00013D                     	ds	2
  1964  00013F                     _log_count_can_no_lab:
  1965                           	opt stack 0
  1966  00013F                     	ds	2
  1967  000141                     _log_count_can_w_lab:
  1968                           	opt stack 0
  1969  000141                     	ds	2
  1970  000143                     _log_count_total:
  1971                           	opt stack 0
  1972  000143                     	ds	2
  1973  000145                     _var:
  1974                           	opt stack 0
  1975  000145                     	ds	2
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           postinc0	equ	0xFEE
  1981                           wreg	equ	0xFE8
  1982                           postdec1	equ	0xFE5
  1983                           fsr1l	equ	0xFE1
  1984                           
  1985                           	psect	dataBANK1
  1986  000147                     __pdataBANK1:
  1987                           	opt stack 0
  1988  000147                     UI@F3241:
  1989                           	opt stack 0
  1990  000147                     	ds	4
  1991  00014B                     printRTC@F3231:
  1992                           	opt stack 0
  1993  00014B                     	ds	4
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           fsr1l	equ	0xFE1
  2002                           
  2003                           	psect	cstackBANK0
  2004  000080                     __pcstackBANK0:
  2005                           	opt stack 0
  2006  000080                     ??_delay_ms:
  2007  000080                     ??_isdigit:
  2008  000080                     ??_readADC:
  2009  000080                     ??_I2C_Master_Wait:
  2010  000080                     ?___wmul:
  2011                           	opt stack 0
  2012  000080                     ?___awmod:
  2013                           	opt stack 0
  2014  000080                     ?___lwdiv:
  2015                           	opt stack 0
  2016  000080                     ?___lldiv:
  2017                           	opt stack 0
  2018  000080                     lcdNibble@temp:
  2019                           	opt stack 0
  2020  000080                     initTime@m:
  2021                           	opt stack 0
  2022  000080                     updateServoPosition@time_us:
  2023                           	opt stack 0
  2024  000080                     EEPROM_read@address:
  2025                           	opt stack 0
  2026  000080                     ___wmul@multiplier:
  2027                           	opt stack 0
  2028  000080                     ___awmod@dividend:
  2029                           	opt stack 0
  2030  000080                     ___lwdiv@dividend:
  2031                           	opt stack 0
  2032  000080                     strcpy@to:
  2033                           	opt stack 0
  2034  000080                     ___lldiv@dividend:
  2035                           	opt stack 0
  2036                           
  2037                           ; 4 bytes @ 0x0
  2038  000080                     	ds	1
  2039  000081                     readADC@channel:
  2040                           	opt stack 0
  2041  000081                     I2C_Master_Read@a:
  2042                           	opt stack 0
  2043  000081                     lcdNibble@data:
  2044                           	opt stack 0
  2045  000081                     initTime@h:
  2046                           	opt stack 0
  2047  000081                     delay_ms@milliseconds:
  2048                           	opt stack 0
  2049  000081                     _isdigit$2085:
  2050                           	opt stack 0
  2051  000081                     I2C_Master_Write@d:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x1
  2055  000081                     	ds	1
  2056  000082                     ??_ID:
  2057  000082                     ??_readIR:
  2058  000082                     ??_readMAG:
  2059  000082                     I2C_Master_Read@temp:
  2060                           	opt stack 0
  2061  000082                     lcdInst@data:
  2062                           	opt stack 0
  2063  000082                     putch@data:
  2064                           	opt stack 0
  2065  000082                     initTime@w:
  2066                           	opt stack 0
  2067  000082                     isdigit@c:
  2068                           	opt stack 0
  2069  000082                     updateServoPosition@timer:
  2070                           	opt stack 0
  2071  000082                     ___wmul@multiplicand:
  2072                           	opt stack 0
  2073  000082                     ___awmod@divisor:
  2074                           	opt stack 0
  2075  000082                     ___lwdiv@divisor:
  2076                           	opt stack 0
  2077  000082                     strcpy@from:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x2
  2081  000082                     	ds	1
  2082  000083                     ??_initLCD:
  2083  000083                     initTime@DD:
  2084                           	opt stack 0
  2085  000083                     getRTC@i:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x3
  2089  000083                     	ds	1
  2090  000084                     ??_updateServoPosition:
  2091  000084                     initTime@MM:
  2092                           	opt stack 0
  2093  000084                     ___awmod@counter:
  2094                           	opt stack 0
  2095  000084                     readIR@res:
  2096                           	opt stack 0
  2097  000084                     readMAG@res:
  2098                           	opt stack 0
  2099  000084                     ID@i:
  2100                           	opt stack 0
  2101  000084                     ___wmul@product:
  2102                           	opt stack 0
  2103  000084                     ___lwdiv@quotient:
  2104                           	opt stack 0
  2105  000084                     strcpy@cp:
  2106                           	opt stack 0
  2107  000084                     ___lldiv@divisor:
  2108                           	opt stack 0
  2109                           
  2110                           ; 4 bytes @ 0x4
  2111  000084                     	ds	1
  2112  000085                     ??_initSortTimer:
  2113  000085                     initTime@YY:
  2114                           	opt stack 0
  2115  000085                     ___awmod@sign:
  2116                           	opt stack 0
  2117                           
  2118                           ; 1 bytes @ 0x5
  2119  000085                     	ds	1
  2120  000086                     ??_getIR:
  2121  000086                     ??_getMAG:
  2122  000086                     ?___awdiv:
  2123                           	opt stack 0
  2124  000086                     initTime@s:
  2125                           	opt stack 0
  2126  000086                     ___lwdiv@counter:
  2127                           	opt stack 0
  2128  000086                     ID@i_1208:
  2129                           	opt stack 0
  2130  000086                     updateServoPosition@my_time:
  2131                           	opt stack 0
  2132  000086                     ___awdiv@dividend:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x6
  2136  000086                     	ds	1
  2137  000087                     ?___lwmod:
  2138                           	opt stack 0
  2139  000087                     getIR@i:
  2140                           	opt stack 0
  2141  000087                     ___lwmod@dividend:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x7
  2145  000087                     	ds	1
  2146  000088                     ??_Distribution:
  2147  000088                     ??_initServos:
  2148  000088                     ID@i_1209:
  2149                           	opt stack 0
  2150  000088                     initSortTimer@i:
  2151                           	opt stack 0
  2152  000088                     ___awdiv@divisor:
  2153                           	opt stack 0
  2154  000088                     ___lldiv@quotient:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0x8
  2158  000088                     	ds	1
  2159  000089                     ___lwmod@divisor:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x9
  2163  000089                     	ds	1
  2164  00008A                     ___awdiv@counter:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0xA
  2168  00008A                     	ds	1
  2169  00008B                     ___awdiv@sign:
  2170                           	opt stack 0
  2171  00008B                     ___lwmod@counter:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0xB
  2175  00008B                     	ds	1
  2176  00008C                     ___lldiv@counter:
  2177                           	opt stack 0
  2178  00008C                     ___awdiv@quotient:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0xC
  2182  00008C                     	ds	1
  2183  00008D                     I2C_Master_Init@c:
  2184                           	opt stack 0
  2185                           
  2186                           ; 4 bytes @ 0xD
  2187  00008D                     	ds	1
  2188  00008E                     ?_printf:
  2189                           	opt stack 0
  2190  00008E                     printf@f:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0xE
  2194  00008E                     	ds	3
  2195  000091                     ??_I2C_Master_Init:
  2196                           
  2197                           ; 1 bytes @ 0x11
  2198  000091                     	ds	4
  2199  000095                     ??_loadRTC:
  2200                           
  2201                           ; 1 bytes @ 0x15
  2202  000095                     	ds	1
  2203  000096                     loadRTC@i:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x16
  2207  000096                     	ds	4
  2208  00009A                     ??_printf:
  2209                           
  2210                           ; 1 bytes @ 0x1A
  2211  00009A                     	ds	4
  2212  00009E                     printf@prec:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x1E
  2216  00009E                     	ds	1
  2217  00009F                     printf@cp:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x1F
  2221  00009F                     	ds	2
  2222  0000A1                     printf@ap:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x21
  2226  0000A1                     	ds	2
  2227  0000A3                     printf@len:
  2228                           	opt stack 0
  2229                           
  2230                           ; 2 bytes @ 0x23
  2231  0000A3                     	ds	2
  2232  0000A5                     printf@val:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0x25
  2236  0000A5                     	ds	2
  2237  0000A7                     printf@flag:
  2238                           	opt stack 0
  2239                           
  2240                           ; 1 bytes @ 0x27
  2241  0000A7                     	ds	1
  2242  0000A8                     printf@c:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x28
  2246  0000A8                     	ds	1
  2247  0000A9                     printf@width:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x29
  2251  0000A9                     	ds	2
  2252  0000AB                     ??_printRTC:
  2253  0000AB                     ??_algorithmTest:
  2254  0000AB                     ??_sensorTest:
  2255  0000AB                     ??_actuatorTest:
  2256  0000AB                     ??_arm:
  2257  0000AB                     ??_PortTestDC:
  2258  0000AB                     ??_SpeedTest:
  2259  0000AB                     ??_PortTestPusher:
  2260  0000AB                     ??_PlatformTest:
  2261  0000AB                     ??_BothServos:
  2262  0000AB                     ??_BlockerTest:
  2263  0000AB                     EEPROM_write@address:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x2B
  2267  0000AB                     	ds	1
  2268  0000AC                     BlockerTest@i:
  2269                           	opt stack 0
  2270  0000AC                     arm@on:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x2C
  2274  0000AC                     	ds	1
  2275  0000AD                     EEPROM_write@data:
  2276                           	opt stack 0
  2277  0000AD                     actuatorTest@i_1755:
  2278                           	opt stack 0
  2279  0000AD                     sensorTest@res:
  2280                           	opt stack 0
  2281  0000AD                     PlatformTest@res:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x2D
  2285  0000AD                     	ds	1
  2286  0000AE                     ??_EEPROM_write:
  2287  0000AE                     actuatorTest@i_1762:
  2288                           	opt stack 0
  2289  0000AE                     BlockerTest@cam_flag:
  2290                           	opt stack 0
  2291  0000AE                     printRTC@INT_time:
  2292                           	opt stack 0
  2293                           
  2294                           ; 14 bytes @ 0x2E
  2295  0000AE                     	ds	1
  2296  0000AF                     EEPROM_write@i:
  2297                           	opt stack 0
  2298  0000AF                     actuatorTest@i_1763:
  2299                           	opt stack 0
  2300  0000AF                     PlatformTest@res_1807:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x2F
  2304  0000AF                     	ds	1
  2305  0000B0                     EEPROM_write@i_1463:
  2306                           	opt stack 0
  2307  0000B0                     actuatorTest@i_1765:
  2308                           	opt stack 0
  2309  0000B0                     BlockerTest@cond_flag:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x30
  2313  0000B0                     	ds	1
  2314  0000B1                     ??_Loading:
  2315  0000B1                     logRun@num:
  2316                           	opt stack 0
  2317  0000B1                     actuatorTest@i_1766:
  2318                           	opt stack 0
  2319  0000B1                     PlatformTest@i:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x31
  2323  0000B1                     	ds	1
  2324  0000B2                     logRun@byte1:
  2325                           	opt stack 0
  2326  0000B2                     actuatorTest@i_1768:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x32
  2330  0000B2                     	ds	1
  2331  0000B3                     logRun@byte2:
  2332                           	opt stack 0
  2333  0000B3                     actuatorTest@i_1769:
  2334                           	opt stack 0
  2335  0000B3                     Loading@addr:
  2336                           	opt stack 0
  2337  0000B3                     PlatformTest@i_1811:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x33
  2341  0000B3                     	ds	1
  2342  0000B4                     logRun@byte3:
  2343                           	opt stack 0
  2344  0000B4                     actuatorTest@i_1771:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x34
  2348  0000B4                     	ds	1
  2349  0000B5                     Loading@byte1:
  2350                           	opt stack 0
  2351  0000B5                     logRun@byte_i:
  2352                           	opt stack 0
  2353  0000B5                     actuatorTest@i_1772:
  2354                           	opt stack 0
  2355  0000B5                     PlatformTest@i_1812:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x35
  2359  0000B5                     	ds	1
  2360  0000B6                     logRun@byte11:
  2361                           	opt stack 0
  2362  0000B6                     actuatorTest@i_1774:
  2363                           	opt stack 0
  2364  0000B6                     Loading@i_1183:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x36
  2368  0000B6                     	ds	1
  2369  0000B7                     actuatorTest@i_1775:
  2370                           	opt stack 0
  2371  0000B7                     logRun@i:
  2372                           	opt stack 0
  2373  0000B7                     PlatformTest@i_1813:
  2374                           	opt stack 0
  2375                           
  2376                           ; 2 bytes @ 0x37
  2377  0000B7                     	ds	1
  2378  0000B8                     actuatorTest@i_1777:
  2379                           	opt stack 0
  2380  0000B8                     Loading@i_1192:
  2381                           	opt stack 0
  2382                           
  2383                           ; 2 bytes @ 0x38
  2384  0000B8                     	ds	1
  2385  0000B9                     actuatorTest@i_1778:
  2386                           	opt stack 0
  2387  0000B9                     logRun@addr:
  2388                           	opt stack 0
  2389  0000B9                     PlatformTest@on:
  2390                           	opt stack 0
  2391                           
  2392                           ; 2 bytes @ 0x39
  2393  0000B9                     	ds	1
  2394  0000BA                     actuatorTest@i_1781:
  2395                           	opt stack 0
  2396  0000BA                     Loading@i_1194:
  2397                           	opt stack 0
  2398                           
  2399                           ; 2 bytes @ 0x3A
  2400  0000BA                     	ds	1
  2401  0000BB                     actuatorTest@i_1782:
  2402                           	opt stack 0
  2403                           
  2404                           ; 1 bytes @ 0x3B
  2405  0000BB                     	ds	1
  2406  0000BC                     actuatorTest@i_1784:
  2407                           	opt stack 0
  2408  0000BC                     printRTC@RTC_month:
  2409                           	opt stack 0
  2410  0000BC                     Loading@i_1195:
  2411                           	opt stack 0
  2412                           
  2413                           ; 2 bytes @ 0x3C
  2414  0000BC                     	ds	1
  2415  0000BD                     actuatorTest@i_1785:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0x3D
  2419  0000BD                     	ds	1
  2420  0000BE                     actuatorTest@i_1787:
  2421                           	opt stack 0
  2422  0000BE                     Loading@i_1197:
  2423                           	opt stack 0
  2424  0000BE                     printRTC@month:
  2425                           	opt stack 0
  2426                           
  2427                           ; 4 bytes @ 0x3E
  2428  0000BE                     	ds	1
  2429  0000BF                     actuatorTest@i_1788:
  2430                           	opt stack 0
  2431                           
  2432                           ; 1 bytes @ 0x3F
  2433  0000BF                     	ds	1
  2434  0000C0                     actuatorTest@i_1791:
  2435                           	opt stack 0
  2436  0000C0                     Loading@j:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x40
  2440  0000C0                     	ds	1
  2441  0000C1                     actuatorTest@i_1792:
  2442                           	opt stack 0
  2443                           
  2444                           ; 1 bytes @ 0x41
  2445  0000C1                     	ds	1
  2446  0000C2                     actuatorTest@i_1794:
  2447                           	opt stack 0
  2448  0000C2                     printRTC@i:
  2449                           	opt stack 0
  2450  0000C2                     Loading@i:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x42
  2454  0000C2                     	ds	1
  2455  0000C3                     actuatorTest@i_1795:
  2456                           	opt stack 0
  2457                           
  2458                           ; 1 bytes @ 0x43
  2459  0000C3                     	ds	1
  2460  0000C4                     ??_UI:
  2461  0000C4                     actuatorTest@i:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x44
  2465  0000C4                     	ds	2
  2466  0000C6                     ??_Test:
  2467  0000C6                     _UI$2448:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x46
  2471  0000C6                     	ds	2
  2472  0000C8                     UI@i:
  2473                           	opt stack 0
  2474                           
  2475                           ; 1 bytes @ 0x48
  2476  0000C8                     	ds	1
  2477  0000C9                     UI@i_409:
  2478                           	opt stack 0
  2479                           
  2480                           ; 1 bytes @ 0x49
  2481  0000C9                     	ds	1
  2482  0000CA                     UI@i_412:
  2483                           	opt stack 0
  2484                           
  2485                           ; 1 bytes @ 0x4A
  2486  0000CA                     	ds	1
  2487  0000CB                     UI@i_413:
  2488                           	opt stack 0
  2489                           
  2490                           ; 1 bytes @ 0x4B
  2491  0000CB                     	ds	1
  2492  0000CC                     UI@i_431:
  2493                           	opt stack 0
  2494                           
  2495                           ; 1 bytes @ 0x4C
  2496  0000CC                     	ds	1
  2497  0000CD                     UI@i_432:
  2498                           	opt stack 0
  2499                           
  2500                           ; 1 bytes @ 0x4D
  2501  0000CD                     	ds	1
  2502  0000CE                     UI@i_435:
  2503                           	opt stack 0
  2504                           
  2505                           ; 1 bytes @ 0x4E
  2506  0000CE                     	ds	1
  2507  0000CF                     UI@i_436:
  2508                           	opt stack 0
  2509                           
  2510                           ; 1 bytes @ 0x4F
  2511  0000CF                     	ds	1
  2512  0000D0                     UI@i_439:
  2513                           	opt stack 0
  2514                           
  2515                           ; 1 bytes @ 0x50
  2516  0000D0                     	ds	1
  2517  0000D1                     UI@i_440:
  2518                           	opt stack 0
  2519                           
  2520                           ; 1 bytes @ 0x51
  2521  0000D1                     	ds	1
  2522  0000D2                     UI@i_443:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x52
  2526  0000D2                     	ds	1
  2527  0000D3                     UI@i_444:
  2528                           	opt stack 0
  2529                           
  2530                           ; 1 bytes @ 0x53
  2531  0000D3                     	ds	1
  2532  0000D4                     UI@i_447:
  2533                           	opt stack 0
  2534                           
  2535                           ; 1 bytes @ 0x54
  2536  0000D4                     	ds	1
  2537  0000D5                     UI@i_448:
  2538                           	opt stack 0
  2539                           
  2540                           ; 1 bytes @ 0x55
  2541  0000D5                     	ds	1
  2542  0000D6                     UI@month:
  2543                           	opt stack 0
  2544                           
  2545                           ; 4 bytes @ 0x56
  2546  0000D6                     	ds	4
  2547  0000DA                     tblptru	equ	0xFF8
  2548                           tblptrh	equ	0xFF7
  2549                           tblptrl	equ	0xFF6
  2550                           tablat	equ	0xFF5
  2551                           postinc0	equ	0xFEE
  2552                           wreg	equ	0xFE8
  2553                           postdec1	equ	0xFE5
  2554                           fsr1l	equ	0xFE1
  2555                           
  2556                           ; 1 bytes @ 0x5A
  2557                           
  2558                           	psect	cstackCOMRAM
  2559  000001                     __pcstackCOMRAM:
  2560                           	opt stack 0
  2561  000001                     ??_updateArmState:
  2562  000001                     ??i2_I2C_Master_Wait:
  2563  000001                     ??i2_delay_ms:
  2564  000001                     ??i2_isdigit:
  2565  000001                     ?i2___wmul:
  2566                           	opt stack 0
  2567  000001                     ?i2___lwmod:
  2568                           	opt stack 0
  2569  000001                     i2lcdNibble@temp:
  2570                           	opt stack 0
  2571  000001                     i2updateServoPosition@time_us:
  2572                           	opt stack 0
  2573  000001                     i2EEPROM_read@address:
  2574                           	opt stack 0
  2575  000001                     i2___wmul@multiplier:
  2576                           	opt stack 0
  2577  000001                     i2___lwmod@dividend:
  2578                           	opt stack 0
  2579  000001                     i2strcpy@to:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x0
  2583  000001                     	ds	1
  2584  000002                     i2I2C_Master_Read@a:
  2585                           	opt stack 0
  2586  000002                     i2lcdNibble@data:
  2587                           	opt stack 0
  2588  000002                     i2delay_ms@milliseconds:
  2589                           	opt stack 0
  2590  000002                     i2_isdigit$2085:
  2591                           	opt stack 0
  2592  000002                     i2I2C_Master_Write@d:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x1
  2596  000002                     	ds	1
  2597  000003                     i2I2C_Master_Read@temp:
  2598                           	opt stack 0
  2599  000003                     i2lcdInst@data:
  2600                           	opt stack 0
  2601  000003                     i2putch@data:
  2602                           	opt stack 0
  2603  000003                     i2isdigit@c:
  2604                           	opt stack 0
  2605  000003                     i2updateServoPosition@timer:
  2606                           	opt stack 0
  2607  000003                     i2___wmul@multiplicand:
  2608                           	opt stack 0
  2609  000003                     i2___lwmod@divisor:
  2610                           	opt stack 0
  2611  000003                     i2strcpy@from:
  2612                           	opt stack 0
  2613                           
  2614                           ; 2 bytes @ 0x2
  2615  000003                     	ds	1
  2616  000004                     i2getRTC@i:
  2617                           	opt stack 0
  2618                           
  2619                           ; 2 bytes @ 0x3
  2620  000004                     	ds	1
  2621  000005                     ??i2_updateServoPosition:
  2622  000005                     i2___lwmod@counter:
  2623                           	opt stack 0
  2624  000005                     i2___wmul@product:
  2625                           	opt stack 0
  2626  000005                     i2strcpy@cp:
  2627                           	opt stack 0
  2628                           
  2629                           ; 2 bytes @ 0x4
  2630  000005                     	ds	1
  2631  000006                     ?i2___lwdiv:
  2632                           	opt stack 0
  2633  000006                     i2___lwdiv@dividend:
  2634                           	opt stack 0
  2635                           
  2636                           ; 2 bytes @ 0x5
  2637  000006                     	ds	1
  2638  000007                     retrieveLog@logNum:
  2639                           	opt stack 0
  2640  000007                     i2updateServoPosition@my_time:
  2641                           	opt stack 0
  2642                           
  2643                           ; 2 bytes @ 0x6
  2644  000007                     	ds	1
  2645  000008                     i2___lwdiv@divisor:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x7
  2649  000008                     	ds	1
  2650  000009                     ??_retrieveLog:
  2651  000009                     ??_updateServoStates:
  2652                           
  2653                           ; 1 bytes @ 0x8
  2654  000009                     	ds	1
  2655  00000A                     i2___lwdiv@quotient:
  2656                           	opt stack 0
  2657                           
  2658                           ; 2 bytes @ 0x9
  2659  00000A                     	ds	1
  2660  00000B                     retrieveLog@byte1:
  2661                           	opt stack 0
  2662                           
  2663                           ; 1 bytes @ 0xA
  2664  00000B                     	ds	1
  2665  00000C                     retrieveLog@byte2:
  2666                           	opt stack 0
  2667  00000C                     i2___lwdiv@counter:
  2668                           	opt stack 0
  2669                           
  2670                           ; 1 bytes @ 0xB
  2671  00000C                     	ds	1
  2672  00000D                     ?i2_printf:
  2673                           	opt stack 0
  2674  00000D                     retrieveLog@byte3:
  2675                           	opt stack 0
  2676  00000D                     i2printf@f:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0xC
  2680  00000D                     	ds	1
  2681  00000E                     retrieveLog@i:
  2682                           	opt stack 0
  2683                           
  2684                           ; 2 bytes @ 0xD
  2685  00000E                     	ds	2
  2686  000010                     retrieveLog@addr:
  2687                           	opt stack 0
  2688                           
  2689                           ; 2 bytes @ 0xF
  2690  000010                     	ds	2
  2691  000012                     dispLogs@myLog:
  2692                           	opt stack 0
  2693                           
  2694                           ; 2 bytes @ 0x11
  2695  000012                     	ds	2
  2696  000014                     
  2697                           ; 1 bytes @ 0x13
  2698  000014                     	ds	5
  2699  000019                     ??i2_printf:
  2700                           
  2701                           ; 1 bytes @ 0x18
  2702  000019                     	ds	4
  2703  00001D                     i2printf@prec:
  2704                           	opt stack 0
  2705                           
  2706                           ; 1 bytes @ 0x1C
  2707  00001D                     	ds	1
  2708  00001E                     i2printf@cp:
  2709                           	opt stack 0
  2710                           
  2711                           ; 2 bytes @ 0x1D
  2712  00001E                     	ds	2
  2713  000020                     i2printf@ap:
  2714                           	opt stack 0
  2715                           
  2716                           ; 2 bytes @ 0x1F
  2717  000020                     	ds	2
  2718  000022                     i2printf@len:
  2719                           	opt stack 0
  2720                           
  2721                           ; 2 bytes @ 0x21
  2722  000022                     	ds	2
  2723  000024                     i2printf@val:
  2724                           	opt stack 0
  2725                           
  2726                           ; 2 bytes @ 0x23
  2727  000024                     	ds	2
  2728  000026                     i2printf@flag:
  2729                           	opt stack 0
  2730                           
  2731                           ; 1 bytes @ 0x25
  2732  000026                     	ds	1
  2733  000027                     i2printf@c:
  2734                           	opt stack 0
  2735                           
  2736                           ; 1 bytes @ 0x26
  2737  000027                     	ds	1
  2738  000028                     i2printf@width:
  2739                           	opt stack 0
  2740                           
  2741                           ; 2 bytes @ 0x27
  2742  000028                     	ds	2
  2743  00002A                     ??_printSortTimer:
  2744  00002A                     ??i2_printRTC:
  2745  00002A                     ?_inputHandler:
  2746                           	opt stack 0
  2747                           
  2748                           ; 2 bytes @ 0x29
  2749  00002A                     	ds	2
  2750  00002C                     ??_inputHandler:
  2751                           
  2752                           ; 1 bytes @ 0x2B
  2753  00002C                     	ds	1
  2754  00002D                     printSortTimer@curTime:
  2755                           	opt stack 0
  2756  00002D                     i2printRTC@INT_time:
  2757                           	opt stack 0
  2758                           
  2759                           ; 14 bytes @ 0x2C
  2760  00002D                     	ds	14
  2761  00003B                     printSortTimer@start_sec:
  2762                           	opt stack 0
  2763  00003B                     i2printRTC@RTC_month:
  2764                           	opt stack 0
  2765                           
  2766                           ; 2 bytes @ 0x3A
  2767  00003B                     	ds	2
  2768  00003D                     printSortTimer@cur_sec:
  2769                           	opt stack 0
  2770  00003D                     i2printRTC@month:
  2771                           	opt stack 0
  2772                           
  2773                           ; 4 bytes @ 0x3C
  2774  00003D                     	ds	2
  2775  00003F                     printSortTimer@min:
  2776                           	opt stack 0
  2777                           
  2778                           ; 2 bytes @ 0x3E
  2779  00003F                     	ds	2
  2780  000041                     printSortTimer@sec:
  2781                           	opt stack 0
  2782  000041                     i2printRTC@i:
  2783                           	opt stack 0
  2784                           
  2785                           ; 2 bytes @ 0x40
  2786  000041                     	ds	2
  2787  000043                     ??_updateMenu:
  2788  000043                     _printSortTimer$2580:
  2789                           	opt stack 0
  2790                           
  2791                           ; 2 bytes @ 0x42
  2792  000043                     	ds	2
  2793  000045                     printSortTimer@timeDiff:
  2794                           	opt stack 0
  2795                           
  2796                           ; 2 bytes @ 0x44
  2797  000045                     	ds	2
  2798  000047                     printSortTimer@i_1221:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0x46
  2802  000047                     	ds	2
  2803  000049                     printSortTimer@i:
  2804                           	opt stack 0
  2805                           
  2806                           ; 2 bytes @ 0x48
  2807  000049                     	ds	2
  2808  00004B                     ??_handler:
  2809                           
  2810                           ; 1 bytes @ 0x4A
  2811  00004B                     	ds	16
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           postinc0	equ	0xFEE
  2817                           wreg	equ	0xFE8
  2818                           postdec1	equ	0xFE5
  2819                           fsr1l	equ	0xFE1
  2820                           
  2821 ;;
  2822 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2823 ;;
  2824 ;; *************** function _main *****************
  2825 ;; Defined at:
  2826 ;;		line 19 in file "main.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:        0 bytes
  2845 ;; Hardware stack levels required when called:   13
  2846 ;; This function calls:
  2847 ;;		_I2C_Master_Init
  2848 ;;		_Test
  2849 ;;		_UI
  2850 ;;		_initLCD
  2851 ;;		_initTime
  2852 ;;		_initUI
  2853 ;;		_logRun
  2854 ;;		_machineConfig
  2855 ;;		_sort
  2856 ;;		_stopSignals
  2857 ;; This function is called by:
  2858 ;;		Startup code after reset
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text0
  2863  00444A                     __ptext0:
  2864                           	opt stack 0
  2865  00444A                     _main:
  2866                           	opt stack 18
  2867                           
  2868                           ;main.c: 20: machineConfig();
  2869                           
  2870                           ;incstack = 0
  2871  00444A  ECAF  F026         	call	_machineConfig	;wreg free
  2872                           
  2873                           ;main.c: 21: initLCD();
  2874  00444E  EC67  F028         	call	_initLCD	;wreg free
  2875                           
  2876                           ;main.c: 24: RTCflag = 0;
  2877  004452  0E00               	movlw	0
  2878  004454  0100               	movlb	0	; () banked
  2879  004456  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2880  004458  0E00               	movlw	0
  2881  00445A  6FEA               	movwf	_RTCflag& (0+255),b
  2882                           
  2883                           ;main.c: 25: if(RTCflag){
  2884  00445C  0100               	movlb	0	; () banked
  2885  00445E  51EA               	movf	_RTCflag& (0+255),w,b
  2886  004460  0100               	movlb	0	; () banked
  2887  004462  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2888  004464  B4D8               	btfsc	status,2,c
  2889  004466  D016               	goto	l9802
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2893  004468  0E47               	movlw	71
  2894  00446A  0100               	movlb	0	; () banked
  2895  00446C  6F80               	movwf	initTime@m& (0+255),b
  2896  00446E  0E17               	movlw	23
  2897  004470  0100               	movlb	0	; () banked
  2898  004472  6F81               	movwf	initTime@h& (0+255),b
  2899  004474  0E07               	movlw	7
  2900  004476  0100               	movlb	0	; () banked
  2901  004478  6F82               	movwf	initTime@w& (0+255),b
  2902  00447A  0E08               	movlw	8
  2903  00447C  0100               	movlb	0	; () banked
  2904  00447E  6F83               	movwf	initTime@DD& (0+255),b
  2905  004480  0E04               	movlw	4
  2906  004482  0100               	movlb	0	; () banked
  2907  004484  6F84               	movwf	initTime@MM& (0+255),b
  2908  004486  0E17               	movlw	23
  2909  004488  0100               	movlb	0	; () banked
  2910  00448A  6F85               	movwf	initTime@YY& (0+255),b
  2911  00448C  0E42               	movlw	66
  2912  00448E  EC38  F02B         	call	_initTime
  2913                           
  2914                           ;main.c: 27: }
  2915  004492  D00B               	goto	l9804
  2916  004494                     l9802:
  2917                           
  2918                           ;main.c: 28: else{
  2919                           ;main.c: 29: I2C_Master_Init(10000);
  2920  004494  0E10               	movlw	16
  2921  004496  0100               	movlb	0	; () banked
  2922  004498  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2923  00449A  0E27               	movlw	39
  2924  00449C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2925  00449E  0E00               	movlw	0
  2926  0044A0  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2927  0044A2  0E00               	movlw	0
  2928  0044A4  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2929  0044A6  EC12  F027         	call	_I2C_Master_Init	;wreg free
  2930  0044AA                     l9804:
  2931                           
  2932                           ;main.c: 30: }
  2933                           ;main.c: 32: initUI();
  2934  0044AA  EC68  F029         	call	_initUI	;wreg free
  2935                           
  2936                           ;main.c: 33: first = 1;
  2937  0044AE  0E00               	movlw	0
  2938  0044B0  0101               	movlb	1	; () banked
  2939  0044B2  6F3A               	movwf	(_first+1)& (0+255),b
  2940  0044B4  0E01               	movlw	1
  2941  0044B6  6F39               	movwf	_first& (0+255),b
  2942                           
  2943                           ; BSR set to: 1
  2944                           ;main.c: 44: switch(machine_state){
  2945                           
  2946                           ;main.c: 43: while(1){
  2947  0044B8  D018               	goto	l9826
  2948  0044BA                     l9808:
  2949                           
  2950                           ;main.c: 46: UI();
  2951  0044BA  EC09  F000         	call	_UI	;wreg free
  2952                           
  2953                           ;main.c: 47: break;
  2954  0044BE  D015               	goto	l9826
  2955  0044C0                     l9810:
  2956                           
  2957                           ;main.c: 49: sort();
  2958  0044C0  EC27  F02B         	call	_sort	;wreg free
  2959                           
  2960                           ;main.c: 50: break;
  2961  0044C4  D012               	goto	l9826
  2962  0044C6                     l9812:
  2963                           
  2964                           ;main.c: 52: stopSignals();
  2965  0044C6  EC58  F02B         	call	_stopSignals	;wreg free
  2966                           
  2967                           ;main.c: 53: logRun();
  2968  0044CA  ECA1  F01E         	call	_logRun	;wreg free
  2969                           
  2970                           ;main.c: 54: first = 1;
  2971  0044CE  0E00               	movlw	0
  2972  0044D0  0101               	movlb	1	; () banked
  2973  0044D2  6F3A               	movwf	(_first+1)& (0+255),b
  2974  0044D4  0E01               	movlw	1
  2975  0044D6  6F39               	movwf	_first& (0+255),b
  2976                           
  2977                           ; BSR set to: 1
  2978                           ;main.c: 55: UI();
  2979  0044D8  EC09  F000         	call	_UI	;wreg free
  2980                           
  2981                           ;main.c: 56: break;
  2982  0044DC  D006               	goto	l9826
  2983  0044DE                     l9820:
  2984                           
  2985                           ;main.c: 58: Test();
  2986  0044DE  ECD3  F01F         	call	_Test	;wreg free
  2987                           
  2988                           ;main.c: 59: break;
  2989  0044E2  D003               	goto	l9826
  2990  0044E4                     l9822:
  2991                           
  2992                           ;main.c: 61: stopSignals();
  2993  0044E4  EC58  F02B         	call	_stopSignals	;wreg free
  2994  0044E8                     l501:
  2995  0044E8  D7FF               	goto	l501
  2996  0044EA                     l9826:
  2997  0044EA  0100               	movlb	0	; () banked
  2998  0044EC  51FC               	movf	_machine_state& (0+255),w,b
  2999                           
  3000                           ; Switch size 1, requested type "space"
  3001                           ; Number of cases is 5, Range of values is 0 to 4
  3002                           ; switch strategies available:
  3003                           ; Name         Instructions Cycles
  3004                           ; simple_byte           16     9 (average)
  3005                           ;	Chosen strategy is simple_byte
  3006  0044EE  0A00               	xorlw	0	; case 0
  3007  0044F0  B4D8               	btfsc	status,2,c
  3008  0044F2  D7E3               	goto	l9808
  3009  0044F4  0A01               	xorlw	1	; case 1
  3010  0044F6  B4D8               	btfsc	status,2,c
  3011  0044F8  D7E3               	goto	l9810
  3012  0044FA  0A03               	xorlw	3	; case 2
  3013  0044FC  B4D8               	btfsc	status,2,c
  3014  0044FE  D7E3               	goto	l9812
  3015  004500  0A01               	xorlw	1	; case 3
  3016  004502  B4D8               	btfsc	status,2,c
  3017  004504  D7EC               	goto	l9820
  3018  004506  0A07               	xorlw	7	; case 4
  3019  004508  B4D8               	btfsc	status,2,c
  3020  00450A  D7EC               	goto	l9822
  3021                           
  3022                           ; BSR set to: 0
  3023                           
  3024                           ; BSR set to: 0
  3025  00450C  D7EE               	goto	l9826
  3026  00450E                     __end_of_main:
  3027                           	opt stack 0
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           postdec1	equ	0xFE5
  3035                           fsr1l	equ	0xFE1
  3036                           status	equ	0xFD8
  3037                           
  3038 ;; *************** function _sort *****************
  3039 ;; Defined at:
  3040 ;;		line 66 in file "sort.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;		None
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;Total ram usage:        0 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:   12
  3061 ;; This function calls:
  3062 ;;		_Distribution
  3063 ;;		_ID
  3064 ;;		_Loading
  3065 ;; This function is called by:
  3066 ;;		_main
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text1
  3071  00564E                     __ptext1:
  3072                           	opt stack 0
  3073  00564E                     _sort:
  3074                           	opt stack 18
  3075                           
  3076                           ;sort.c: 67: if(machine_state == Sorting_state){
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;incstack = 0
  3080  00564E  0100               	movlb	0	; () banked
  3081  005650  05FC               	decf	_machine_state& (0+255),w,b
  3082  005652  B4D8               	btfsc	status,2,c
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;sort.c: 68: Loading();
  3086  005654  ECC7  F008         	call	_Loading	;wreg free
  3087                           
  3088                           ;sort.c: 69: }
  3089                           ;sort.c: 70: if(machine_state == Sorting_state){
  3090  005658  0100               	movlb	0	; () banked
  3091  00565A  05FC               	decf	_machine_state& (0+255),w,b
  3092  00565C  B4D8               	btfsc	status,2,c
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;sort.c: 71: ID();
  3096  00565E  ECB8  F018         	call	_ID	;wreg free
  3097                           
  3098                           ;sort.c: 72: }
  3099                           ;sort.c: 73: if(machine_state == Sorting_state){
  3100  005662  0100               	movlb	0	; () banked
  3101  005664  05FC               	decf	_machine_state& (0+255),w,b
  3102  005666  A4D8               	btfss	status,2,c
  3103  005668  0012               	return	
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;sort.c: 74: Distribution();
  3107  00566A  EC49  F021         	call	_Distribution	;wreg free
  3108  00566E  0012               	return	
  3109  005670                     __end_of_sort:
  3110                           	opt stack 0
  3111                           tblptru	equ	0xFF8
  3112                           tblptrh	equ	0xFF7
  3113                           tblptrl	equ	0xFF6
  3114                           tablat	equ	0xFF5
  3115                           postinc0	equ	0xFEE
  3116                           wreg	equ	0xFE8
  3117                           postdec1	equ	0xFE5
  3118                           fsr1l	equ	0xFE1
  3119                           status	equ	0xFD8
  3120                           
  3121 ;; *************** function _Loading *****************
  3122 ;; Defined at:
  3123 ;;		line 78 in file "sort.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;		None
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  i               2   62[BANK0 ] int 
  3128 ;;  i               2   60[BANK0 ] int 
  3129 ;;  i               2   58[BANK0 ] int 
  3130 ;;  i               2   56[BANK0 ] int 
  3131 ;;  i               2   54[BANK0 ] int 
  3132 ;;  j               2   64[BANK0 ] int 
  3133 ;;  i               2   66[BANK0 ] int 
  3134 ;;  addr            2   51[BANK0 ] unsigned short 
  3135 ;;  byte1           1   53[BANK0 ] unsigned char 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      void 
  3138 ;; Registers used:
  3139 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;Total ram usage:       19 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:   11
  3152 ;; This function calls:
  3153 ;;		_EEPROM_read
  3154 ;;		_EEPROM_write
  3155 ;;		_delay_ms
  3156 ;;		_getIR
  3157 ;;		_getMAG
  3158 ;;		_initGlobalVars
  3159 ;;		_initServos
  3160 ;;		_initSortTimer
  3161 ;;		_lcdInst
  3162 ;;		_readIR
  3163 ;; This function is called by:
  3164 ;;		_sort
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text2
  3169  00118E                     __ptext2:
  3170                           	opt stack 0
  3171  00118E                     _Loading:
  3172                           	opt stack 18
  3173                           
  3174                           ;sort.c: 79: if(first){
  3175                           
  3176                           ;incstack = 0
  3177  00118E  0101               	movlb	1	; () banked
  3178  001190  5139               	movf	_first& (0+255),w,b
  3179  001192  0101               	movlb	1	; () banked
  3180  001194  113A               	iorwf	(_first+1)& (0+255),w,b
  3181  001196  B4D8               	btfsc	status,2,c
  3182  001198  D066               	goto	l7532
  3183                           
  3184                           ; BSR set to: 1
  3185                           ;sort.c: 80: initGlobalVars();
  3186  00119A  EC87  F022         	call	_initGlobalVars	;wreg free
  3187                           
  3188                           ;sort.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3189  00119E  0E01               	movlw	1
  3190  0011A0  ECA6  F02B         	call	_lcdInst
  3191  0011A4  0E68               	movlw	104
  3192  0011A6  0100               	movlb	0	; () banked
  3193  0011A8  6FB1               	movwf	??_Loading& (0+255),b
  3194  0011AA  0EE4               	movlw	228
  3195  0011AC                     u9237:
  3196  0011AC  2EE8               	decfsz	wreg,f,c
  3197  0011AE  D7FE               	bra	u9237
  3198  0011B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3199  0011B2  D7FC               	bra	u9237
  3200  0011B4  F000               	nop	
  3201                           
  3202                           ;sort.c: 82: initSortTimer();
  3203  0011B6  ECA3  F023         	call	_initSortTimer	;wreg free
  3204                           
  3205                           ;sort.c: 83: LATCbits.LATC5 = 1;
  3206  0011BA  8A8B               	bsf	3979,5,c	;volatile
  3207                           
  3208                           ;sort.c: 88: sel = EEPROM_read(0);
  3209  0011BC  0E00               	movlw	0
  3210  0011BE  0100               	movlb	0	; () banked
  3211  0011C0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3212  0011C2  0E00               	movlw	0
  3213  0011C4  6F80               	movwf	EEPROM_read@address& (0+255),b
  3214  0011C6  EC74  F02B         	call	_EEPROM_read	;wreg free
  3215  0011CA  0100               	movlb	0	; () banked
  3216  0011CC  6FFD               	movwf	_sel& (0+255),b
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;sort.c: 89: unsigned short addr = 1 + 11 * sel;
  3220  0011CE  0100               	movlb	0	; () banked
  3221  0011D0  51FD               	movf	_sel& (0+255),w,b
  3222  0011D2  0D0B               	mullw	11
  3223  0011D4  0E01               	movlw	1
  3224  0011D6  24F3               	addwf	prodl,w,c
  3225  0011D8  0100               	movlb	0	; () banked
  3226  0011DA  6FB3               	movwf	Loading@addr& (0+255),b
  3227  0011DC  0E00               	movlw	0
  3228  0011DE  20F4               	addwfc	prodh,w,c
  3229  0011E0  0100               	movlb	0	; () banked
  3230  0011E2  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;sort.c: 90: unsigned char byte1 = 0b01111111;
  3234  0011E4  0E7F               	movlw	127
  3235  0011E6  0100               	movlb	0	; () banked
  3236  0011E8  6FB5               	movwf	Loading@byte1& (0+255),b
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;sort.c: 91: EEPROM_write(addr, byte1);
  3240  0011EA  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3241  0011EE  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3242  0011F2  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3243  0011F6  ECD5  F020         	call	_EEPROM_write	;wreg free
  3244                           
  3245                           ;sort.c: 94: LATBbits.LATB2 = 0;
  3246  0011FA  948A               	bcf	3978,2,c	;volatile
  3247                           
  3248                           ;sort.c: 96: for(int i=0; i<46; i++){
  3249  0011FC  0E00               	movlw	0
  3250  0011FE  0100               	movlb	0	; () banked
  3251  001200  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3252  001202  0E00               	movlw	0
  3253  001204  6FC2               	movwf	Loading@i& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256  001206  0100               	movlb	0	; () banked
  3257  001208  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3258  00120A  D008               	goto	l7522
  3259  00120C  0100               	movlb	0	; () banked
  3260  00120E  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3261  001210  E126               	bnz	l776
  3262  001212  0E2E               	movlw	46
  3263  001214  0100               	movlb	0	; () banked
  3264  001216  5DC2               	subwf	Loading@i& (0+255),w,b
  3265  001218  B0D8               	btfsc	status,0,c
  3266  00121A  D021               	goto	l776
  3267  00121C                     l7522:
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;sort.c: 97: LATBbits.LATB2 = !LATBbits.LATB2;
  3271  00121C  B48A               	btfsc	3978,2,c	;volatile
  3272  00121E  D004               	goto	u5930
  3273  001220  0100               	movlb	0	; () banked
  3274  001222  6BB1               	clrf	??_Loading& (0+255),b
  3275  001224  2BB1               	incf	??_Loading& (0+255),f,b
  3276  001226  D002               	goto	u5948
  3277  001228                     u5930:
  3278  001228  0100               	movlb	0	; () banked
  3279  00122A  6BB1               	clrf	??_Loading& (0+255),b
  3280  00122C                     u5948:
  3281  00122C  0100               	movlb	0	; () banked
  3282  00122E  47B1               	rlncf	??_Loading& (0+255),f,b
  3283  001230  47B1               	rlncf	??_Loading& (0+255),f,b
  3284  001232  508A               	movf	3978,w,c	;volatile
  3285  001234  0100               	movlb	0	; () banked
  3286  001236  19B1               	xorwf	??_Loading& (0+255),w,b
  3287  001238  0BFB               	andlw	-5
  3288  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3289  00123C  6E8A               	movwf	3978,c	;volatile
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;sort.c: 98: delay_ms(45-i);
  3293  00123E  0100               	movlb	0	; () banked
  3294  001240  51C2               	movf	Loading@i& (0+255),w,b
  3295  001242  0800               	sublw	0
  3296  001244  0F2D               	addlw	45
  3297  001246  ECC7  F02A         	call	_delay_ms
  3298  00124A  0100               	movlb	0	; () banked
  3299  00124C  4BC2               	infsnz	Loading@i& (0+255),f,b
  3300  00124E  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3301                           
  3302                           ; BSR set to: 0
  3303  001250  0100               	movlb	0	; () banked
  3304  001252  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3305  001254  D7E3               	goto	l7522
  3306  001256  0100               	movlb	0	; () banked
  3307  001258  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3308  00125A  E101               	bnz	u5950
  3309  00125C  D7DA               	goto	L1
  3310  00125E                     u5950:
  3311  00125E                     l776:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;sort.c: 99: }
  3315                           ;sort.c: 100: LATBbits.LATB2 = 1;
  3316  00125E  848A               	bsf	3978,2,c	;volatile
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;sort.c: 103: initServos();
  3320  001260  EC57  F025         	call	_initServos	;wreg free
  3321                           
  3322                           ;sort.c: 104: }
  3323  001264  0012               	return	
  3324  001266                     l7532:
  3325                           
  3326                           ;sort.c: 105: else{
  3327                           ;sort.c: 108: if(!f_loadingNewCan){
  3328  001266  0100               	movlb	0	; () banked
  3329  001268  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3330  00126A  0100               	movlb	0	; () banked
  3331  00126C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3332  00126E  A4D8               	btfss	status,2,c
  3333  001270  D018               	goto	l7548
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;sort.c: 110: getIR();
  3337  001272  ECCF  F025         	call	_getIR	;wreg free
  3338                           
  3339                           ;sort.c: 112: if(!f_loadingNewCan){
  3340  001276  0100               	movlb	0	; () banked
  3341  001278  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3342  00127A  0100               	movlb	0	; () banked
  3343  00127C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3344  00127E  B4D8               	btfsc	status,2,c
  3345  001280  0012               	return	
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;sort.c: 116: else{
  3349                           ;sort.c: 117: count_total++;
  3350                           
  3351                           ; BSR set to: 0
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;sort.c: 114: }
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;sort.c: 113: return;
  3358  001282  0100               	movlb	0	; () banked
  3359  001284  4BFE               	infsnz	_count_total& (0+255),f,b
  3360  001286  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;sort.c: 118: if(count_total == 12){
  3364  001288  0E0C               	movlw	12
  3365  00128A  0100               	movlb	0	; () banked
  3366  00128C  19FE               	xorwf	_count_total& (0+255),w,b
  3367  00128E  0100               	movlb	0	; () banked
  3368  001290  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3369  001292  A4D8               	btfss	status,2,c
  3370  001294  0012               	return	
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;sort.c: 119: f_lastCan = 1;
  3374  001296  0E00               	movlw	0
  3375  001298  0100               	movlb	0	; () banked
  3376  00129A  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  3377  00129C  0E01               	movlw	1
  3378  00129E  6FF0               	movwf	_f_lastCan& (0+255),b
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;sort.c: 120: }
  3382                           ;sort.c: 121: }
  3383                           ;sort.c: 122: }
  3384                           
  3385                           ; BSR set to: 0
  3386  0012A0  0012               	return	
  3387  0012A2                     l7548:
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;sort.c: 125: else if(f_ID_receive){
  3391  0012A2  0101               	movlb	1	; () banked
  3392  0012A4  512F               	movf	_f_ID_receive& (0+255),w,b
  3393  0012A6  0101               	movlb	1	; () banked
  3394  0012A8  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3395  0012AA  B4D8               	btfsc	status,2,c
  3396  0012AC  0012               	return	
  3397                           
  3398                           ; BSR set to: 1
  3399                           ;sort.c: 126: f_most_recent_sort_time = 1;
  3400  0012AE  0E00               	movlw	0
  3401  0012B0  0101               	movlb	1	; () banked
  3402  0012B2  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3403  0012B4  0E01               	movlw	1
  3404  0012B6  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3405                           
  3406                           ;sort.c: 127: f_loadingNewCan = 0;
  3407  0012B8  0E00               	movlw	0
  3408  0012BA  0100               	movlb	0	; () banked
  3409  0012BC  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3410  0012BE  0E00               	movlw	0
  3411  0012C0  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3415  0012C2  0E1F               	movlw	31
  3416  0012C4  0100               	movlb	0	; () banked
  3417  0012C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3418  0012C8  0E71               	movlw	113
  3419  0012CA  0100               	movlb	0	; () banked
  3420  0012CC  6FB1               	movwf	??_Loading& (0+255),b
  3421  0012CE  0E1E               	movlw	30
  3422  0012D0                     u9247:
  3423  0012D0  2EE8               	decfsz	wreg,f,c
  3424  0012D2  D7FE               	bra	u9247
  3425  0012D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3426  0012D6  D7FC               	bra	u9247
  3427  0012D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3428  0012DA  D7FA               	bra	u9247
  3429  0012DC  F000               	nop	
  3430                           
  3431                           ;sort.c: 129: LATBbits.LATB2 = 0;
  3432  0012DE  948A               	bcf	3978,2,c	;volatile
  3433                           
  3434                           ;sort.c: 133: f_arm_position = 1;
  3435  0012E0  0E00               	movlw	0
  3436  0012E2  0100               	movlb	0	; () banked
  3437  0012E4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3438  0012E6  0E01               	movlw	1
  3439  0012E8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;sort.c: 135: delay_ms(400);
  3443  0012EA  0E90               	movlw	144
  3444  0012EC  ECC7  F02A         	call	_delay_ms
  3445                           
  3446                           ;sort.c: 136: getMAG();
  3447  0012F0  EC36  F029         	call	_getMAG	;wreg free
  3448                           
  3449                           ;sort.c: 137: sensor_outputs[0] = MAG_signal;
  3450  0012F4  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3451  0012F8  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3452                           
  3453                           ;sort.c: 139: if(sensor_outputs[0]){
  3454  0012FC  0100               	movlb	0	; () banked
  3455  0012FE  51E2               	movf	_sensor_outputs& (0+255),w,b
  3456  001300  0100               	movlb	0	; () banked
  3457  001302  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3458  001304  B4D8               	btfsc	status,2,c
  3459  001306  D027               	goto	l7578
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;sort.c: 140: for(int i = 0; i<25; i++){
  3463  001308  0E00               	movlw	0
  3464  00130A  0100               	movlb	0	; () banked
  3465  00130C  6FB7               	movwf	(Loading@i_1183+1)& (0+255),b
  3466  00130E  0E00               	movlw	0
  3467  001310  6FB6               	movwf	Loading@i_1183& (0+255),b
  3468  001312                     l7568:
  3469                           
  3470                           ; BSR set to: 0
  3471  001312  0100               	movlb	0	; () banked
  3472  001314  BFB7               	btfsc	(Loading@i_1183+1)& (0+255),7,b
  3473  001316  D008               	goto	l786
  3474  001318  0100               	movlb	0	; () banked
  3475  00131A  51B7               	movf	(Loading@i_1183+1)& (0+255),w,b
  3476  00131C  E143               	bnz	l7590
  3477  00131E  0E19               	movlw	25
  3478  001320  0100               	movlb	0	; () banked
  3479  001322  5DB6               	subwf	Loading@i_1183& (0+255),w,b
  3480  001324  B0D8               	btfsc	status,0,c
  3481  001326  D03E               	goto	l7590
  3482  001328                     l786:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;sort.c: 141: LATAbits.LATA4 = 1;
  3486  001328  8889               	bsf	3977,4,c	;volatile
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;sort.c: 142: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3490  00132A  0E4E               	movlw	78
  3491  00132C  0100               	movlb	0	; () banked
  3492  00132E  6FB1               	movwf	??_Loading& (0+255),b
  3493  001330  0EEB               	movlw	235
  3494  001332                     u9257:
  3495  001332  2EE8               	decfsz	wreg,f,c
  3496  001334  D7FE               	bra	u9257
  3497  001336  2FB1               	decfsz	??_Loading& (0+255),f,b
  3498  001338  D7FC               	bra	u9257
  3499                           
  3500                           ;sort.c: 143: LATAbits.LATA4 = 0;
  3501  00133A  9889               	bcf	3977,4,c	;volatile
  3502                           
  3503                           ;sort.c: 144: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3504  00133C  0E1A               	movlw	26
  3505  00133E  0100               	movlb	0	; () banked
  3506  001340  6FB1               	movwf	??_Loading& (0+255),b
  3507  001342  0EF8               	movlw	248
  3508  001344                     u9267:
  3509  001344  2EE8               	decfsz	wreg,f,c
  3510  001346  D7FE               	bra	u9267
  3511  001348  2FB1               	decfsz	??_Loading& (0+255),f,b
  3512  00134A  D7FC               	bra	u9267
  3513  00134C  F000               	nop	
  3514  00134E  0100               	movlb	0	; () banked
  3515  001350  4BB6               	infsnz	Loading@i_1183& (0+255),f,b
  3516  001352  2BB7               	incf	(Loading@i_1183+1)& (0+255),f,b
  3517  001354  D7DE               	goto	l7568
  3518  001356                     l7578:
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;sort.c: 147: else{
  3522                           ;sort.c: 148: for(int i = 0; i<25; i++){
  3523  001356  0E00               	movlw	0
  3524  001358  0100               	movlb	0	; () banked
  3525  00135A  6FB9               	movwf	(Loading@i_1192+1)& (0+255),b
  3526  00135C  0E00               	movlw	0
  3527  00135E  6FB8               	movwf	Loading@i_1192& (0+255),b
  3528  001360                     l7580:
  3529                           
  3530                           ; BSR set to: 0
  3531  001360  0100               	movlb	0	; () banked
  3532  001362  BFB9               	btfsc	(Loading@i_1192+1)& (0+255),7,b
  3533  001364  D008               	goto	l789
  3534  001366  0100               	movlb	0	; () banked
  3535  001368  51B9               	movf	(Loading@i_1192+1)& (0+255),w,b
  3536  00136A  E11C               	bnz	l7590
  3537  00136C  0E19               	movlw	25
  3538  00136E  0100               	movlb	0	; () banked
  3539  001370  5DB8               	subwf	Loading@i_1192& (0+255),w,b
  3540  001372  B0D8               	btfsc	status,0,c
  3541  001374  D017               	goto	l7590
  3542  001376                     l789:
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;sort.c: 149: LATAbits.LATA4 = 1;
  3546  001376  8889               	bsf	3977,4,c	;volatile
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;sort.c: 150: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3550  001378  0E3D               	movlw	61
  3551  00137A  0100               	movlb	0	; () banked
  3552  00137C  6FB1               	movwf	??_Loading& (0+255),b
  3553  00137E  0E41               	movlw	65
  3554  001380                     u9277:
  3555  001380  2EE8               	decfsz	wreg,f,c
  3556  001382  D7FE               	bra	u9277
  3557  001384  2FB1               	decfsz	??_Loading& (0+255),f,b
  3558  001386  D7FC               	bra	u9277
  3559                           
  3560                           ;sort.c: 151: LATAbits.LATA4 = 0;
  3561  001388  9889               	bcf	3977,4,c	;volatile
  3562                           
  3563                           ;sort.c: 152: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3564  00138A  0E2C               	movlw	44
  3565  00138C  0100               	movlb	0	; () banked
  3566  00138E  6FB1               	movwf	??_Loading& (0+255),b
  3567  001390  0EA1               	movlw	161
  3568  001392                     u9287:
  3569  001392  2EE8               	decfsz	wreg,f,c
  3570  001394  D7FE               	bra	u9287
  3571  001396  2FB1               	decfsz	??_Loading& (0+255),f,b
  3572  001398  D7FC               	bra	u9287
  3573  00139A  D000               	nop2	
  3574  00139C  0100               	movlb	0	; () banked
  3575  00139E  4BB8               	infsnz	Loading@i_1192& (0+255),f,b
  3576  0013A0  2BB9               	incf	(Loading@i_1192+1)& (0+255),f,b
  3577  0013A2  D7DE               	goto	l7580
  3578  0013A4                     l7590:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;sort.c: 153: }
  3582                           ;sort.c: 154: }
  3583                           ;sort.c: 156: _delay((unsigned long)((350)*(32000000/4000.0)));
  3584  0013A4  0E0F               	movlw	15
  3585  0013A6  0100               	movlb	0	; () banked
  3586  0013A8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3587  0013AA  0E35               	movlw	53
  3588  0013AC  0100               	movlb	0	; () banked
  3589  0013AE  6FB1               	movwf	??_Loading& (0+255),b
  3590  0013B0  0E51               	movlw	81
  3591  0013B2                     u9297:
  3592  0013B2  2EE8               	decfsz	wreg,f,c
  3593  0013B4  D7FE               	bra	u9297
  3594  0013B6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3595  0013B8  D7FC               	bra	u9297
  3596  0013BA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3597  0013BC  D7FA               	bra	u9297
  3598                           
  3599                           ;sort.c: 158: readIR();
  3600  0013BE  EC1B  F028         	call	_readIR	;wreg free
  3601                           
  3602                           ;sort.c: 159: if(IR_signal==1){
  3603  0013C2  0100               	movlb	0	; () banked
  3604  0013C4  05E6               	decf	_IR_signal& (0+255),w,b
  3605  0013C6  0100               	movlb	0	; () banked
  3606  0013C8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3607  0013CA  A4D8               	btfss	status,2,c
  3608  0013CC  D19A               	goto	l7708
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;sort.c: 160: _delay((unsigned long)((100)*(32000000/4000.0)));
  3612  0013CE  0E05               	movlw	5
  3613  0013D0  0100               	movlb	0	; () banked
  3614  0013D2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3615  0013D4  0E0F               	movlw	15
  3616  0013D6  0100               	movlb	0	; () banked
  3617  0013D8  6FB1               	movwf	??_Loading& (0+255),b
  3618  0013DA  0EF1               	movlw	241
  3619  0013DC                     u9307:
  3620  0013DC  2EE8               	decfsz	wreg,f,c
  3621  0013DE  D7FE               	bra	u9307
  3622  0013E0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3623  0013E2  D7FC               	bra	u9307
  3624  0013E4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3625  0013E6  D7FA               	bra	u9307
  3626                           
  3627                           ;sort.c: 161: readIR();
  3628  0013E8  EC1B  F028         	call	_readIR	;wreg free
  3629                           
  3630                           ;sort.c: 162: if(IR_signal==1){
  3631  0013EC  0100               	movlb	0	; () banked
  3632  0013EE  05E6               	decf	_IR_signal& (0+255),w,b
  3633  0013F0  0100               	movlb	0	; () banked
  3634  0013F2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3635  0013F4  A4D8               	btfss	status,2,c
  3636  0013F6  D054               	goto	l7628
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;sort.c: 163: if(sensor_outputs[0]){
  3640  0013F8  0100               	movlb	0	; () banked
  3641  0013FA  51E2               	movf	_sensor_outputs& (0+255),w,b
  3642  0013FC  0100               	movlb	0	; () banked
  3643  0013FE  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3644  001400  B4D8               	btfsc	status,2,c
  3645  001402  D027               	goto	l7616
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;sort.c: 164: for(int i = 0; i<25; i++){
  3649  001404  0E00               	movlw	0
  3650  001406  0100               	movlb	0	; () banked
  3651  001408  6FBB               	movwf	(Loading@i_1194+1)& (0+255),b
  3652  00140A  0E00               	movlw	0
  3653  00140C  6FBA               	movwf	Loading@i_1194& (0+255),b
  3654  00140E                     l7606:
  3655                           
  3656                           ; BSR set to: 0
  3657  00140E  0100               	movlb	0	; () banked
  3658  001410  BFBB               	btfsc	(Loading@i_1194+1)& (0+255),7,b
  3659  001412  D008               	goto	l794
  3660  001414  0100               	movlb	0	; () banked
  3661  001416  51BB               	movf	(Loading@i_1194+1)& (0+255),w,b
  3662  001418  E143               	bnz	l7628
  3663  00141A  0E19               	movlw	25
  3664  00141C  0100               	movlb	0	; () banked
  3665  00141E  5DBA               	subwf	Loading@i_1194& (0+255),w,b
  3666  001420  B0D8               	btfsc	status,0,c
  3667  001422  D03E               	goto	l7628
  3668  001424                     l794:
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;sort.c: 165: LATAbits.LATA4 = 1;
  3672  001424  8889               	bsf	3977,4,c	;volatile
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;sort.c: 166: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3676  001426  0E4E               	movlw	78
  3677  001428  0100               	movlb	0	; () banked
  3678  00142A  6FB1               	movwf	??_Loading& (0+255),b
  3679  00142C  0EEB               	movlw	235
  3680  00142E                     u9317:
  3681  00142E  2EE8               	decfsz	wreg,f,c
  3682  001430  D7FE               	bra	u9317
  3683  001432  2FB1               	decfsz	??_Loading& (0+255),f,b
  3684  001434  D7FC               	bra	u9317
  3685                           
  3686                           ;sort.c: 167: LATAbits.LATA4 = 0;
  3687  001436  9889               	bcf	3977,4,c	;volatile
  3688                           
  3689                           ;sort.c: 168: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3690  001438  0E1A               	movlw	26
  3691  00143A  0100               	movlb	0	; () banked
  3692  00143C  6FB1               	movwf	??_Loading& (0+255),b
  3693  00143E  0EF8               	movlw	248
  3694  001440                     u9327:
  3695  001440  2EE8               	decfsz	wreg,f,c
  3696  001442  D7FE               	bra	u9327
  3697  001444  2FB1               	decfsz	??_Loading& (0+255),f,b
  3698  001446  D7FC               	bra	u9327
  3699  001448  F000               	nop	
  3700  00144A  0100               	movlb	0	; () banked
  3701  00144C  4BBA               	infsnz	Loading@i_1194& (0+255),f,b
  3702  00144E  2BBB               	incf	(Loading@i_1194+1)& (0+255),f,b
  3703  001450  D7DE               	goto	l7606
  3704  001452                     l7616:
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;sort.c: 171: else{
  3708                           ;sort.c: 172: for(int i = 0; i<25; i++){
  3709  001452  0E00               	movlw	0
  3710  001454  0100               	movlb	0	; () banked
  3711  001456  6FBD               	movwf	(Loading@i_1195+1)& (0+255),b
  3712  001458  0E00               	movlw	0
  3713  00145A  6FBC               	movwf	Loading@i_1195& (0+255),b
  3714  00145C                     l7618:
  3715                           
  3716                           ; BSR set to: 0
  3717  00145C  0100               	movlb	0	; () banked
  3718  00145E  BFBD               	btfsc	(Loading@i_1195+1)& (0+255),7,b
  3719  001460  D008               	goto	l797
  3720  001462  0100               	movlb	0	; () banked
  3721  001464  51BD               	movf	(Loading@i_1195+1)& (0+255),w,b
  3722  001466  E11C               	bnz	l7628
  3723  001468  0E19               	movlw	25
  3724  00146A  0100               	movlb	0	; () banked
  3725  00146C  5DBC               	subwf	Loading@i_1195& (0+255),w,b
  3726  00146E  B0D8               	btfsc	status,0,c
  3727  001470  D017               	goto	l7628
  3728  001472                     l797:
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;sort.c: 173: LATAbits.LATA4 = 1;
  3732  001472  8889               	bsf	3977,4,c	;volatile
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;sort.c: 174: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3736  001474  0E3D               	movlw	61
  3737  001476  0100               	movlb	0	; () banked
  3738  001478  6FB1               	movwf	??_Loading& (0+255),b
  3739  00147A  0E41               	movlw	65
  3740  00147C                     u9337:
  3741  00147C  2EE8               	decfsz	wreg,f,c
  3742  00147E  D7FE               	bra	u9337
  3743  001480  2FB1               	decfsz	??_Loading& (0+255),f,b
  3744  001482  D7FC               	bra	u9337
  3745                           
  3746                           ;sort.c: 175: LATAbits.LATA4 = 0;
  3747  001484  9889               	bcf	3977,4,c	;volatile
  3748                           
  3749                           ;sort.c: 176: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3750  001486  0E2C               	movlw	44
  3751  001488  0100               	movlb	0	; () banked
  3752  00148A  6FB1               	movwf	??_Loading& (0+255),b
  3753  00148C  0EA1               	movlw	161
  3754  00148E                     u9347:
  3755  00148E  2EE8               	decfsz	wreg,f,c
  3756  001490  D7FE               	bra	u9347
  3757  001492  2FB1               	decfsz	??_Loading& (0+255),f,b
  3758  001494  D7FC               	bra	u9347
  3759  001496  D000               	nop2	
  3760  001498  0100               	movlb	0	; () banked
  3761  00149A  4BBC               	infsnz	Loading@i_1195& (0+255),f,b
  3762  00149C  2BBD               	incf	(Loading@i_1195+1)& (0+255),f,b
  3763  00149E  D7DE               	goto	l7618
  3764  0014A0                     l7628:
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;sort.c: 177: }
  3768                           ;sort.c: 178: }
  3769                           ;sort.c: 179: }
  3770                           ;sort.c: 181: _delay((unsigned long)((350)*(32000000/4000.0)));
  3771  0014A0  0E0F               	movlw	15
  3772  0014A2  0100               	movlb	0	; () banked
  3773  0014A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3774  0014A6  0E35               	movlw	53
  3775  0014A8  0100               	movlb	0	; () banked
  3776  0014AA  6FB1               	movwf	??_Loading& (0+255),b
  3777  0014AC  0E51               	movlw	81
  3778  0014AE                     u9357:
  3779  0014AE  2EE8               	decfsz	wreg,f,c
  3780  0014B0  D7FE               	bra	u9357
  3781  0014B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3782  0014B4  D7FC               	bra	u9357
  3783  0014B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3784  0014B8  D7FA               	bra	u9357
  3785                           
  3786                           ;sort.c: 183: int j = 1;
  3787  0014BA  0E00               	movlw	0
  3788  0014BC  0100               	movlb	0	; () banked
  3789  0014BE  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3790  0014C0  0E01               	movlw	1
  3791  0014C2  6FC0               	movwf	Loading@j& (0+255),b
  3792                           
  3793                           ;sort.c: 184: while(IR_signal == 1){
  3794  0014C4  D117               	goto	l7706
  3795  0014C6                     l7632:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;sort.c: 185: readIR();
  3799  0014C6  EC1B  F028         	call	_readIR	;wreg free
  3800                           
  3801                           ;sort.c: 186: if(j == 10){
  3802  0014CA  0E0A               	movlw	10
  3803  0014CC  0100               	movlb	0	; () banked
  3804  0014CE  19C0               	xorwf	Loading@j& (0+255),w,b
  3805  0014D0  0100               	movlb	0	; () banked
  3806  0014D2  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3807  0014D4  A4D8               	btfss	status,2,c
  3808  0014D6  D016               	goto	l7640
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;sort.c: 187: LATBbits.LATB2 = !LATBbits.LATB2;
  3812  0014D8  B48A               	btfsc	3978,2,c	;volatile
  3813  0014DA  D004               	goto	u6130
  3814  0014DC  0100               	movlb	0	; () banked
  3815  0014DE  6BB1               	clrf	??_Loading& (0+255),b
  3816  0014E0  2BB1               	incf	??_Loading& (0+255),f,b
  3817  0014E2  D002               	goto	u6148
  3818  0014E4                     u6130:
  3819  0014E4  0100               	movlb	0	; () banked
  3820  0014E6  6BB1               	clrf	??_Loading& (0+255),b
  3821  0014E8                     u6148:
  3822  0014E8  0100               	movlb	0	; () banked
  3823  0014EA  47B1               	rlncf	??_Loading& (0+255),f,b
  3824  0014EC  47B1               	rlncf	??_Loading& (0+255),f,b
  3825  0014EE  508A               	movf	3978,w,c	;volatile
  3826  0014F0  0100               	movlb	0	; () banked
  3827  0014F2  19B1               	xorwf	??_Loading& (0+255),w,b
  3828  0014F4  0BFB               	andlw	-5
  3829  0014F6  19B1               	xorwf	??_Loading& (0+255),w,b
  3830  0014F8  6E8A               	movwf	3978,c	;volatile
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;sort.c: 188: j = 0;
  3834  0014FA  0E00               	movlw	0
  3835  0014FC  0100               	movlb	0	; () banked
  3836  0014FE  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3837  001500  0E00               	movlw	0
  3838  001502  6FC0               	movwf	Loading@j& (0+255),b
  3839  001504                     l7640:
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;sort.c: 189: }
  3843                           ;sort.c: 190: if(IR_signal==1){
  3844  001504  0100               	movlb	0	; () banked
  3845  001506  05E6               	decf	_IR_signal& (0+255),w,b
  3846  001508  0100               	movlb	0	; () banked
  3847  00150A  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3848  00150C  A4D8               	btfss	status,2,c
  3849  00150E  D0D6               	goto	l7694
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;sort.c: 191: _delay((unsigned long)((350)*(32000000/4000.0)));
  3853  001510  0E0F               	movlw	15
  3854  001512  0100               	movlb	0	; () banked
  3855  001514  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3856  001516  0E35               	movlw	53
  3857  001518  0100               	movlb	0	; () banked
  3858  00151A  6FB1               	movwf	??_Loading& (0+255),b
  3859  00151C  0E51               	movlw	81
  3860  00151E                     u9367:
  3861  00151E  2EE8               	decfsz	wreg,f,c
  3862  001520  D7FE               	bra	u9367
  3863  001522  2FB1               	decfsz	??_Loading& (0+255),f,b
  3864  001524  D7FC               	bra	u9367
  3865  001526  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3866  001528  D7FA               	bra	u9367
  3867                           
  3868                           ;sort.c: 192: readIR();
  3869  00152A  EC1B  F028         	call	_readIR	;wreg free
  3870                           
  3871                           ;sort.c: 193: if(IR_signal==1){
  3872  00152E  0100               	movlb	0	; () banked
  3873  001530  05E6               	decf	_IR_signal& (0+255),w,b
  3874  001532  0100               	movlb	0	; () banked
  3875  001534  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3876  001536  A4D8               	btfss	status,2,c
  3877  001538  D0BD               	goto	l803
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;sort.c: 194: if(sensor_outputs[0]){
  3881  00153A  0100               	movlb	0	; () banked
  3882  00153C  51E2               	movf	_sensor_outputs& (0+255),w,b
  3883  00153E  0100               	movlb	0	; () banked
  3884  001540  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3885  001542  B4D8               	btfsc	status,2,c
  3886  001544  D011               	goto	l7656
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;sort.c: 195: LATAbits.LATA4 = 1;
  3890  001546  8889               	bsf	3977,4,c	;volatile
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;sort.c: 196: _delay((unsigned long)((250)*(32000000/4000.0)));
  3894  001548  0E0B               	movlw	11
  3895  00154A  0100               	movlb	0	; () banked
  3896  00154C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3897  00154E  0E26               	movlw	38
  3898  001550  0100               	movlb	0	; () banked
  3899  001552  6FB1               	movwf	??_Loading& (0+255),b
  3900  001554  0E5D               	movlw	93
  3901  001556                     u9377:
  3902  001556  2EE8               	decfsz	wreg,f,c
  3903  001558  D7FE               	bra	u9377
  3904  00155A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3905  00155C  D7FC               	bra	u9377
  3906  00155E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3907  001560  D7FA               	bra	u9377
  3908  001562  D000               	nop2	
  3909                           
  3910                           ;sort.c: 197: LATAbits.LATA4 = 0;
  3911  001564  9889               	bcf	3977,4,c	;volatile
  3912                           
  3913                           ;sort.c: 198: }
  3914  001566  D0A6               	goto	l803
  3915  001568                     l7656:
  3916                           
  3917                           ;sort.c: 199: else{
  3918                           ;sort.c: 200: for(int i = 0; i<25; i++){
  3919  001568  0E00               	movlw	0
  3920  00156A  0100               	movlb	0	; () banked
  3921  00156C  6FBF               	movwf	(Loading@i_1197+1)& (0+255),b
  3922  00156E  0E00               	movlw	0
  3923  001570  6FBE               	movwf	Loading@i_1197& (0+255),b
  3924                           
  3925                           ; BSR set to: 0
  3926  001572  0100               	movlb	0	; () banked
  3927  001574  BFBF               	btfsc	(Loading@i_1197+1)& (0+255),7,b
  3928  001576  D079               	goto	l7686
  3929  001578  0100               	movlb	0	; () banked
  3930  00157A  51BF               	movf	(Loading@i_1197+1)& (0+255),w,b
  3931  00157C  E106               	bnz	u6180
  3932  00157E  0E19               	movlw	25
  3933  001580  0100               	movlb	0	; () banked
  3934  001582  5DBE               	subwf	Loading@i_1197& (0+255),w,b
  3935  001584  B0D8               	btfsc	status,0,c
  3936  001586  D096               	goto	l803
  3937  001588  D070               	goto	l7686
  3938  00158A                     u6180:
  3939                           
  3940                           ; BSR set to: 0
  3941  00158A  D094               	goto	l803
  3942  00158C                     l809:
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;sort.c: 203: LATAbits.LATA4 = 1;
  3946  00158C  8889               	bsf	3977,4,c	;volatile
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;sort.c: 204: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3950  00158E  0E4E               	movlw	78
  3951  001590  0100               	movlb	0	; () banked
  3952  001592  6FB1               	movwf	??_Loading& (0+255),b
  3953  001594  0EEB               	movlw	235
  3954  001596                     u9387:
  3955  001596  2EE8               	decfsz	wreg,f,c
  3956  001598  D7FE               	bra	u9387
  3957  00159A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3958  00159C  D7FC               	bra	u9387
  3959                           
  3960                           ;sort.c: 205: LATAbits.LATA4 = 0;
  3961  00159E  9889               	bcf	3977,4,c	;volatile
  3962                           
  3963                           ;sort.c: 206: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3964  0015A0  0E1A               	movlw	26
  3965  0015A2  0100               	movlb	0	; () banked
  3966  0015A4  6FB1               	movwf	??_Loading& (0+255),b
  3967  0015A6  0EF8               	movlw	248
  3968  0015A8                     u9397:
  3969  0015A8  2EE8               	decfsz	wreg,f,c
  3970  0015AA  D7FE               	bra	u9397
  3971  0015AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3972  0015AE  D7FC               	bra	u9397
  3973  0015B0  D05A               	goto	L5
  3974  0015B2                     l811:
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;sort.c: 209: LATAbits.LATA4 = 1;
  3978  0015B2  8889               	bsf	3977,4,c	;volatile
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;sort.c: 210: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  3982  0015B4  0E54               	movlw	84
  3983  0015B6  0100               	movlb	0	; () banked
  3984  0015B8  6FB1               	movwf	??_Loading& (0+255),b
  3985  0015BA  0E1C               	movlw	28
  3986  0015BC                     u9407:
  3987  0015BC  2EE8               	decfsz	wreg,f,c
  3988  0015BE  D7FE               	bra	u9407
  3989  0015C0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3990  0015C2  D7FC               	bra	u9407
  3991  0015C4  F000               	nop	
  3992                           
  3993                           ;sort.c: 211: LATAbits.LATA4 = 0;
  3994  0015C6  9889               	bcf	3977,4,c	;volatile
  3995                           
  3996                           ;sort.c: 212: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  3997  0015C8  0E15               	movlw	21
  3998  0015CA  0100               	movlb	0	; () banked
  3999  0015CC  6FB1               	movwf	??_Loading& (0+255),b
  4000  0015CE  0EC6               	movlw	198
  4001  0015D0                     u9417:
  4002  0015D0  2EE8               	decfsz	wreg,f,c
  4003  0015D2  D7FE               	bra	u9417
  4004  0015D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  4005  0015D6  D7FC               	bra	u9417
  4006  0015D8  D046               	goto	L5
  4007  0015DA                     l812:
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;sort.c: 215: LATAbits.LATA4 = 1;
  4011  0015DA  8889               	bsf	3977,4,c	;volatile
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;sort.c: 216: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4015  0015DC  0E59               	movlw	89
  4016  0015DE  0100               	movlb	0	; () banked
  4017  0015E0  6FB1               	movwf	??_Loading& (0+255),b
  4018  0015E2  0E4E               	movlw	78
  4019  0015E4                     u9427:
  4020  0015E4  2EE8               	decfsz	wreg,f,c
  4021  0015E6  D7FE               	bra	u9427
  4022  0015E8  2FB1               	decfsz	??_Loading& (0+255),f,b
  4023  0015EA  D7FC               	bra	u9427
  4024  0015EC  F000               	nop	
  4025                           
  4026                           ;sort.c: 217: LATAbits.LATA4 = 0;
  4027  0015EE  9889               	bcf	3977,4,c	;volatile
  4028                           
  4029                           ;sort.c: 218: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4030  0015F0  0E10               	movlw	16
  4031  0015F2  0100               	movlb	0	; () banked
  4032  0015F4  6FB1               	movwf	??_Loading& (0+255),b
  4033  0015F6  0E94               	movlw	148
  4034  0015F8                     u9437:
  4035  0015F8  2EE8               	decfsz	wreg,f,c
  4036  0015FA  D7FE               	bra	u9437
  4037  0015FC  2FB1               	decfsz	??_Loading& (0+255),f,b
  4038  0015FE  D7FC               	bra	u9437
  4039  001600  D032               	goto	L5
  4040  001602                     l813:
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;sort.c: 221: LATAbits.LATA4 = 1;
  4044  001602  8889               	bsf	3977,4,c	;volatile
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;sort.c: 222: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4048  001604  0E5E               	movlw	94
  4049  001606  0100               	movlb	0	; () banked
  4050  001608  6FB1               	movwf	??_Loading& (0+255),b
  4051  00160A  0E80               	movlw	128
  4052  00160C                     u9447:
  4053  00160C  2EE8               	decfsz	wreg,f,c
  4054  00160E  D7FE               	bra	u9447
  4055  001610  2FB1               	decfsz	??_Loading& (0+255),f,b
  4056  001612  D7FC               	bra	u9447
  4057  001614  F000               	nop	
  4058                           
  4059                           ;sort.c: 223: LATAbits.LATA4 = 0;
  4060  001616  9889               	bcf	3977,4,c	;volatile
  4061                           
  4062                           ;sort.c: 224: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4063  001618  0E0B               	movlw	11
  4064  00161A  0100               	movlb	0	; () banked
  4065  00161C  6FB1               	movwf	??_Loading& (0+255),b
  4066  00161E  0E62               	movlw	98
  4067  001620                     u9457:
  4068  001620  2EE8               	decfsz	wreg,f,c
  4069  001622  D7FE               	bra	u9457
  4070  001624  2FB1               	decfsz	??_Loading& (0+255),f,b
  4071  001626  D7FC               	bra	u9457
  4072  001628  D01E               	goto	L5
  4073  00162A                     l814:
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;sort.c: 227: LATAbits.LATA4 = 1;
  4077  00162A  8889               	bsf	3977,4,c	;volatile
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;sort.c: 228: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4081  00162C  0E63               	movlw	99
  4082  00162E  0100               	movlb	0	; () banked
  4083  001630  6FB1               	movwf	??_Loading& (0+255),b
  4084  001632  0EB2               	movlw	178
  4085  001634                     u9467:
  4086  001634  2EE8               	decfsz	wreg,f,c
  4087  001636  D7FE               	bra	u9467
  4088  001638  2FB1               	decfsz	??_Loading& (0+255),f,b
  4089  00163A  D7FC               	bra	u9467
  4090  00163C  F000               	nop	
  4091                           
  4092                           ;sort.c: 229: LATAbits.LATA4 = 0;
  4093  00163E  9889               	bcf	3977,4,c	;volatile
  4094                           
  4095                           ;sort.c: 230: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4096  001640  0E34               	movlw	52
  4097  001642  0100               	movlb	0	; () banked
  4098  001644  6FB1               	movwf	??_Loading& (0+255),b
  4099  001646  0EF1               	movlw	241
  4100  001648                     u9477:
  4101  001648  2EE8               	decfsz	wreg,f,c
  4102  00164A  D7FE               	bra	u9477
  4103  00164C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4104  00164E  D7FC               	bra	u9477
  4105  001650  D000               	nop2	
  4106                           
  4107                           ;sort.c: 231: break;
  4108  001652  D026               	goto	l7688
  4109  001654                     l815:
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;sort.c: 233: LATAbits.LATA4 = 1;
  4113  001654  8889               	bsf	3977,4,c	;volatile
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;sort.c: 234: _delay((unsigned long)((10)*(32000000/4000.0)));
  4117  001656  0E68               	movlw	104
  4118  001658  0100               	movlb	0	; () banked
  4119  00165A  6FB1               	movwf	??_Loading& (0+255),b
  4120  00165C  0EE4               	movlw	228
  4121  00165E                     u9487:
  4122  00165E  2EE8               	decfsz	wreg,f,c
  4123  001660  D7FE               	bra	u9487
  4124  001662  2FB1               	decfsz	??_Loading& (0+255),f,b
  4125  001664  D7FC               	bra	u9487
  4126  001666                     L5:
  4127  001666  F000               	nop	
  4128                           
  4129                           ;sort.c: 236: }
  4130                           
  4131                           ;sort.c: 235: break;
  4132  001668  D01B               	goto	l7688
  4133  00166A                     l7686:
  4134  00166A  C0C0  F0B1         	movff	Loading@j,??_Loading
  4135  00166E  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4136                           
  4137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4138                           ; Switch size 1, requested type "space"
  4139                           ; Number of cases is 1, Range of values is 0 to 0
  4140                           ; switch strategies available:
  4141                           ; Name         Instructions Cycles
  4142                           ; simple_byte            4     3 (average)
  4143                           ;	Chosen strategy is simple_byte
  4144  001672  0100               	movlb	0	; () banked
  4145  001674  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4146  001676  0A00               	xorlw	0	; case 0
  4147  001678  A4D8               	btfss	status,2,c
  4148  00167A  D7EC               	goto	l815
  4149                           
  4150                           ; BSR set to: 0
  4151                           ; Switch size 1, requested type "space"
  4152                           ; Number of cases is 5, Range of values is 1 to 5
  4153                           ; switch strategies available:
  4154                           ; Name         Instructions Cycles
  4155                           ; simple_byte           16     9 (average)
  4156                           ;	Chosen strategy is simple_byte
  4157  00167C  0100               	movlb	0	; () banked
  4158  00167E  51B1               	movf	??_Loading& (0+255),w,b
  4159  001680  0A01               	xorlw	1	; case 1
  4160  001682  B4D8               	btfsc	status,2,c
  4161  001684  D783               	goto	l809
  4162  001686  0A03               	xorlw	3	; case 2
  4163  001688  B4D8               	btfsc	status,2,c
  4164  00168A  D793               	goto	l811
  4165  00168C  0A01               	xorlw	1	; case 3
  4166  00168E  B4D8               	btfsc	status,2,c
  4167  001690  D7A4               	goto	l812
  4168  001692  0A07               	xorlw	7	; case 4
  4169  001694  B4D8               	btfsc	status,2,c
  4170  001696  D7B5               	goto	l813
  4171  001698  0A01               	xorlw	1	; case 5
  4172  00169A  B4D8               	btfsc	status,2,c
  4173  00169C  D7C6               	goto	l814
  4174  00169E  D7DA               	goto	l815
  4175  0016A0                     l7688:
  4176  0016A0  0100               	movlb	0	; () banked
  4177  0016A2  4BBE               	infsnz	Loading@i_1197& (0+255),f,b
  4178  0016A4  2BBF               	incf	(Loading@i_1197+1)& (0+255),f,b
  4179                           
  4180                           ; BSR set to: 0
  4181  0016A6  0100               	movlb	0	; () banked
  4182  0016A8  BFBF               	btfsc	(Loading@i_1197+1)& (0+255),7,b
  4183  0016AA  D7DF               	goto	l7686
  4184  0016AC  0100               	movlb	0	; () banked
  4185  0016AE  51BF               	movf	(Loading@i_1197+1)& (0+255),w,b
  4186  0016B0  E101               	bnz	l803
  4187  0016B2  D765               	goto	L6
  4188  0016B4                     l803:
  4189                           
  4190                           ;sort.c: 237: }
  4191                           ;sort.c: 238: }
  4192                           ;sort.c: 239: }
  4193                           ;sort.c: 240: LATAbits.LATA4 = 0;
  4194  0016B4  9889               	bcf	3977,4,c	;volatile
  4195                           
  4196                           ;sort.c: 241: j++;
  4197  0016B6  0100               	movlb	0	; () banked
  4198  0016B8  4BC0               	infsnz	Loading@j& (0+255),f,b
  4199  0016BA  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4200  0016BC                     l7694:
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;sort.c: 242: }
  4204                           ;sort.c: 244: if(!IR_signal){
  4205  0016BC  0100               	movlb	0	; () banked
  4206  0016BE  51E6               	movf	_IR_signal& (0+255),w,b
  4207  0016C0  0100               	movlb	0	; () banked
  4208  0016C2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4209  0016C4  A4D8               	btfss	status,2,c
  4210  0016C6  D016               	goto	l7706
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;sort.c: 245: _delay((unsigned long)((500)*(32000000/4000.0)));
  4214  0016C8  0E15               	movlw	21
  4215  0016CA  0100               	movlb	0	; () banked
  4216  0016CC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4217  0016CE  0E4B               	movlw	75
  4218  0016D0  0100               	movlb	0	; () banked
  4219  0016D2  6FB1               	movwf	??_Loading& (0+255),b
  4220  0016D4  0EBE               	movlw	190
  4221  0016D6                     u9497:
  4222  0016D6  2EE8               	decfsz	wreg,f,c
  4223  0016D8  D7FE               	bra	u9497
  4224  0016DA  2FB1               	decfsz	??_Loading& (0+255),f,b
  4225  0016DC  D7FC               	bra	u9497
  4226  0016DE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4227  0016E0  D7FA               	bra	u9497
  4228  0016E2  F000               	nop	
  4229                           
  4230                           ;sort.c: 246: readIR();
  4231  0016E4  EC1B  F028         	call	_readIR	;wreg free
  4232                           
  4233                           ;sort.c: 247: if(IR_signal==1){
  4234  0016E8  0100               	movlb	0	; () banked
  4235  0016EA  05E6               	decf	_IR_signal& (0+255),w,b
  4236  0016EC  0100               	movlb	0	; () banked
  4237  0016EE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4238  0016F0  A4D8               	btfss	status,2,c
  4239  0016F2  D006               	goto	l819
  4240  0016F4                     l7706:
  4241                           
  4242                           ; BSR set to: 0
  4243  0016F4  0100               	movlb	0	; () banked
  4244  0016F6  05E6               	decf	_IR_signal& (0+255),w,b
  4245  0016F8  0100               	movlb	0	; () banked
  4246  0016FA  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4247  0016FC  B4D8               	btfsc	status,2,c
  4248  0016FE  D6E3               	goto	l7632
  4249  001700                     l819:
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;sort.c: 252: }
  4253                           ;sort.c: 253: }
  4254                           ;sort.c: 254: }
  4255                           ;sort.c: 255: LATBbits.LATB2 = 0;
  4256  001700  948A               	bcf	3978,2,c	;volatile
  4257  001702                     l7708:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;sort.c: 256: }
  4261                           ;sort.c: 257: f_can_coming_to_ID = 1;
  4262  001702  0E00               	movlw	0
  4263  001704  0101               	movlb	1	; () banked
  4264  001706  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4265  001708  0E01               	movlw	1
  4266  00170A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4267                           
  4268                           ; BSR set to: 1
  4269                           
  4270                           ; BSR set to: 1
  4271  00170C  0012               	return	
  4272  00170E                     __end_of_Loading:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           postinc0	equ	0xFEE
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           fsr1l	equ	0xFE1
  4284                           status	equ	0xFD8
  4285                           
  4286 ;; *************** function _initSortTimer *****************
  4287 ;; Defined at:
  4288 ;;		line 418 in file "sort.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  i               2    8[BANK0 ] int 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4306 ;;Total ram usage:        5 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:   10
  4309 ;; This function calls:
  4310 ;;		_getRTC
  4311 ;; This function is called by:
  4312 ;;		_Loading
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text3
  4317  004746                     __ptext3:
  4318                           	opt stack 0
  4319  004746                     _initSortTimer:
  4320                           	opt stack 18
  4321                           
  4322                           ;sort.c: 420: getRTC();
  4323                           
  4324                           ;incstack = 0
  4325  004746  EC8F  F024         	call	_getRTC	;wreg free
  4326                           
  4327                           ;sort.c: 421: for(int i = 0; i < 7; i++){
  4328  00474A  0E00               	movlw	0
  4329  00474C  0100               	movlb	0	; () banked
  4330  00474E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4331  004750  0E00               	movlw	0
  4332  004752  6F88               	movwf	initSortTimer@i& (0+255),b
  4333  004754                     l7098:
  4334                           
  4335                           ; BSR set to: 0
  4336  004754  0100               	movlb	0	; () banked
  4337  004756  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4338  004758  D008               	goto	l7102
  4339  00475A  0100               	movlb	0	; () banked
  4340  00475C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4341  00475E  E140               	bnz	l7108
  4342  004760  0E07               	movlw	7
  4343  004762  0100               	movlb	0	; () banked
  4344  004764  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4345  004766  B0D8               	btfsc	status,0,c
  4346  004768  D03B               	goto	l7108
  4347  00476A                     l7102:
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;sort.c: 422: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4351  00476A  0E1C               	movlw	low _time
  4352  00476C  0100               	movlb	0	; () banked
  4353  00476E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4354  004770  6ED9               	movwf	fsr2l,c
  4355  004772  0E01               	movlw	high _time
  4356  004774  0100               	movlb	0	; () banked
  4357  004776  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4358  004778  6EDA               	movwf	fsr2h,c
  4359  00477A  50DF               	movf	indf2,w,c
  4360  00477C  0100               	movlb	0	; () banked
  4361  00477E  6F85               	movwf	??_initSortTimer& (0+255),b
  4362  004780  0100               	movlb	0	; () banked
  4363  004782  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4364  004784  0E0F               	movlw	15
  4365  004786  1785               	andwf	??_initSortTimer& (0+255),f,b
  4366  004788  0E0F               	movlw	15
  4367  00478A  0100               	movlb	0	; () banked
  4368  00478C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4369  00478E  0100               	movlb	0	; () banked
  4370  004790  5185               	movf	??_initSortTimer& (0+255),w,b
  4371  004792  0D0A               	mullw	10
  4372  004794  0E1C               	movlw	low _time
  4373  004796  0100               	movlb	0	; () banked
  4374  004798  2588               	addwf	initSortTimer@i& (0+255),w,b
  4375  00479A  6ED9               	movwf	fsr2l,c
  4376  00479C  0E01               	movlw	high _time
  4377  00479E  0100               	movlb	0	; () banked
  4378  0047A0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4379  0047A2  6EDA               	movwf	fsr2h,c
  4380  0047A4  50DF               	movf	indf2,w,c
  4381  0047A6  0B0F               	andlw	15
  4382  0047A8  0100               	movlb	0	; () banked
  4383  0047AA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4384  0047AC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4385  0047AE  50F3               	movf	prodl,w,c
  4386  0047B0  0100               	movlb	0	; () banked
  4387  0047B2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4388  0047B4  50F4               	movf	prodh,w,c
  4389  0047B6  0100               	movlb	0	; () banked
  4390  0047B8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4391  0047BA  90D8               	bcf	status,0,c
  4392  0047BC  0100               	movlb	0	; () banked
  4393  0047BE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4394  0047C0  6ED9               	movwf	fsr2l,c
  4395  0047C2  0100               	movlb	0	; () banked
  4396  0047C4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4397  0047C6  6EDA               	movwf	fsr2h,c
  4398  0047C8  0E0E               	movlw	low _startTime
  4399  0047CA  26D9               	addwf	fsr2l,f,c
  4400  0047CC  0E01               	movlw	high _startTime
  4401  0047CE  22DA               	addwfc	fsr2h,f,c
  4402  0047D0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4403  0047D4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4404                           
  4405                           ; BSR set to: 0
  4406  0047D8  0100               	movlb	0	; () banked
  4407  0047DA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4408  0047DC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4409  0047DE  D7BA               	goto	l7098
  4410  0047E0                     l7108:
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;sort.c: 423: }
  4414                           ;sort.c: 425: T0CON = 0b00010111;
  4415  0047E0  0E17               	movlw	23
  4416  0047E2  6ED5               	movwf	4053,c	;volatile
  4417                           
  4418                           ;sort.c: 434: TMR0H = 0b10000101;
  4419  0047E4  0E85               	movlw	133
  4420  0047E6  6ED7               	movwf	4055,c	;volatile
  4421                           
  4422                           ;sort.c: 435: TMR0L = 0b11101110;
  4423  0047E8  0EEE               	movlw	238
  4424  0047EA  6ED6               	movwf	4054,c	;volatile
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;sort.c: 436: TMR0ON = 1;
  4428  0047EC  8ED5               	bsf	4053,7,c	;volatile
  4429                           
  4430                           ; BSR set to: 0
  4431  0047EE  0012               	return		;funcret
  4432  0047F0                     __end_of_initSortTimer:
  4433                           	opt stack 0
  4434                           tblptru	equ	0xFF8
  4435                           tblptrh	equ	0xFF7
  4436                           tblptrl	equ	0xFF6
  4437                           tablat	equ	0xFF5
  4438                           prodh	equ	0xFF4
  4439                           prodl	equ	0xFF3
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           postdec1	equ	0xFE5
  4443                           fsr1l	equ	0xFE1
  4444                           indf2	equ	0xFDF
  4445                           postinc2	equ	0xFDE
  4446                           postdec2	equ	0xFDD
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _initGlobalVars *****************
  4452 ;; Defined at:
  4453 ;;		line 386 in file "sort.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;		None
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;		None
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  1    wreg      void 
  4460 ;; Registers used:
  4461 ;;		wreg, status,2
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;Total ram usage:        0 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    7
  4474 ;; This function calls:
  4475 ;;		Nothing
  4476 ;; This function is called by:
  4477 ;;		_Loading
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text4
  4482  00450E                     __ptext4:
  4483                           	opt stack 0
  4484  00450E                     _initGlobalVars:
  4485                           	opt stack 21
  4486                           
  4487                           ;sort.c: 388: first = 0;
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;incstack = 0
  4491  00450E  0E00               	movlw	0
  4492  004510  0101               	movlb	1	; () banked
  4493  004512  6F3A               	movwf	(_first+1)& (0+255),b
  4494  004514  0E00               	movlw	0
  4495  004516  6F39               	movwf	_first& (0+255),b
  4496                           
  4497                           ;sort.c: 391: f_loadingNewCan = 0;
  4498  004518  0E00               	movlw	0
  4499  00451A  0100               	movlb	0	; () banked
  4500  00451C  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4501  00451E  0E00               	movlw	0
  4502  004520  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4503                           
  4504                           ;sort.c: 392: f_lastCan = 0;
  4505  004522  0E00               	movlw	0
  4506  004524  0100               	movlb	0	; () banked
  4507  004526  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  4508  004528  0E00               	movlw	0
  4509  00452A  6FF0               	movwf	_f_lastCan& (0+255),b
  4510                           
  4511                           ;sort.c: 393: f_ID_receive = 1;
  4512  00452C  0E00               	movlw	0
  4513  00452E  0101               	movlb	1	; () banked
  4514  004530  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4515  004532  0E01               	movlw	1
  4516  004534  6F2F               	movwf	_f_ID_receive& (0+255),b
  4517                           
  4518                           ;sort.c: 394: f_can_coming_to_ID = 0;
  4519  004536  0E00               	movlw	0
  4520  004538  0101               	movlb	1	; () banked
  4521  00453A  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4522  00453C  0E00               	movlw	0
  4523  00453E  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4524                           
  4525                           ;sort.c: 395: f_can_coming_to_distribution = 0;
  4526  004540  0E00               	movlw	0
  4527  004542  0101               	movlb	1	; () banked
  4528  004544  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4529  004546  0E00               	movlw	0
  4530  004548  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4531                           
  4532                           ;sort.c: 396: f_can_distributed = 1;
  4533  00454A  0E00               	movlw	0
  4534  00454C  0101               	movlb	1	; () banked
  4535  00454E  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4536  004550  0E01               	movlw	1
  4537  004552  6F35               	movwf	_f_can_distributed& (0+255),b
  4538                           
  4539                           ;sort.c: 397: f_most_recent_sort_time = 0;
  4540  004554  0E00               	movlw	0
  4541  004556  0101               	movlb	1	; () banked
  4542  004558  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4543  00455A  0E00               	movlw	0
  4544  00455C  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4545                           
  4546                           ;sort.c: 400: count_total = 0;
  4547  00455E  0E00               	movlw	0
  4548  004560  0100               	movlb	0	; () banked
  4549  004562  6FFF               	movwf	(_count_total+1)& (0+255),b
  4550  004564  0E00               	movlw	0
  4551  004566  6FFE               	movwf	_count_total& (0+255),b
  4552                           
  4553                           ;sort.c: 401: count_pop_no_tab = 0;
  4554  004568  0E00               	movlw	0
  4555  00456A  0101               	movlb	1	; () banked
  4556  00456C  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4557  00456E  0E00               	movlw	0
  4558  004570  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4559                           
  4560                           ;sort.c: 402: count_pop_w_tab = 0;
  4561  004572  0E00               	movlw	0
  4562  004574  0101               	movlb	1	; () banked
  4563  004576  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4564  004578  0E00               	movlw	0
  4565  00457A  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4566                           
  4567                           ;sort.c: 403: count_can_w_lab = 0;
  4568  00457C  0E00               	movlw	0
  4569  00457E  0101               	movlb	1	; () banked
  4570  004580  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4571  004582  0E00               	movlw	0
  4572  004584  6F25               	movwf	_count_can_w_lab& (0+255),b
  4573                           
  4574                           ;sort.c: 404: count_can_no_lab = 0;
  4575  004586  0E00               	movlw	0
  4576  004588  0101               	movlb	1	; () banked
  4577  00458A  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4578  00458C  0E00               	movlw	0
  4579  00458E  6F23               	movwf	_count_can_no_lab& (0+255),b
  4580                           
  4581                           ;sort.c: 407: most_recent_sort_time = 999;
  4582  004590  0E03               	movlw	3
  4583  004592  6E6A               	movwf	_most_recent_sort_time+1,c
  4584  004594  0EE7               	movlw	231
  4585  004596  6E69               	movwf	_most_recent_sort_time,c
  4586                           
  4587                           ;sort.c: 410: servo_timer_counter = 0;
  4588  004598  0E00               	movlw	0
  4589  00459A  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4590  00459C  0E00               	movlw	0
  4591  00459E  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4592                           
  4593                           ;sort.c: 411: servo_timer_target = 9999;
  4594  0045A0  0E27               	movlw	39
  4595  0045A2  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4596  0045A4  0E0F               	movlw	15
  4597  0045A6  6E6F               	movwf	_servo_timer_target,c	;volatile
  4598                           
  4599                           ;sort.c: 412: timer2_counter = 0;
  4600  0045A8  0E00               	movlw	0
  4601  0045AA  6E74               	movwf	_timer2_counter+1,c	;volatile
  4602  0045AC  0E00               	movlw	0
  4603  0045AE  6E73               	movwf	_timer2_counter,c	;volatile
  4604                           
  4605                           ;sort.c: 413: f_arm_position = 0;
  4606  0045B0  0E00               	movlw	0
  4607  0045B2  0100               	movlb	0	; () banked
  4608  0045B4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4609  0045B6  0E00               	movlw	0
  4610  0045B8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;sort.c: 414: pan_servo_state = -1;
  4614  0045BA  686B               	setf	_pan_servo_state,c	;volatile
  4615  0045BC  686C               	setf	_pan_servo_state+1,c	;volatile
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;sort.c: 415: tilt_servo_state = -1;
  4619  0045BE  6871               	setf	_tilt_servo_state,c	;volatile
  4620  0045C0  6872               	setf	_tilt_servo_state+1,c	;volatile
  4621                           
  4622                           ;sort.c: 416: f_panning_to_bin = 0;
  4623  0045C2  0E00               	movlw	0
  4624  0045C4  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4625  0045C6  0E00               	movlw	0
  4626  0045C8  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4627                           
  4628                           ; BSR set to: 0
  4629  0045CA  0012               	return		;funcret
  4630  0045CC                     __end_of_initGlobalVars:
  4631                           	opt stack 0
  4632                           tblptru	equ	0xFF8
  4633                           tblptrh	equ	0xFF7
  4634                           tblptrl	equ	0xFF6
  4635                           tablat	equ	0xFF5
  4636                           prodh	equ	0xFF4
  4637                           prodl	equ	0xFF3
  4638                           postinc0	equ	0xFEE
  4639                           wreg	equ	0xFE8
  4640                           postdec1	equ	0xFE5
  4641                           fsr1l	equ	0xFE1
  4642                           indf2	equ	0xFDF
  4643                           postinc2	equ	0xFDE
  4644                           postdec2	equ	0xFDD
  4645                           fsr2h	equ	0xFDA
  4646                           fsr2l	equ	0xFD9
  4647                           status	equ	0xFD8
  4648                           
  4649 ;; *************** function _getMAG *****************
  4650 ;; Defined at:
  4651 ;;		line 515 in file "sort.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      void 
  4658 ;; Registers used:
  4659 ;;		wreg, status,2, status,0, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;Total ram usage:        2 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    9
  4672 ;; This function calls:
  4673 ;;		_readMAG
  4674 ;; This function is called by:
  4675 ;;		_Loading
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text5
  4680  00526C                     __ptext5:
  4681                           	opt stack 0
  4682  00526C                     _getMAG:
  4683                           	opt stack 19
  4684                           
  4685                           ;sort.c: 516: readMAG();
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;incstack = 0
  4689  00526C  EC41  F028         	call	_readMAG	;wreg free
  4690                           
  4691                           ;sort.c: 518: if(MAG_signal==1){
  4692  005270  0100               	movlb	0	; () banked
  4693  005272  05E8               	decf	_MAG_signal& (0+255),w,b
  4694  005274  0100               	movlb	0	; () banked
  4695  005276  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4696  005278  A4D8               	btfss	status,2,c
  4697  00527A  0012               	return	
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;sort.c: 519: _delay((unsigned long)((500)*(32000000/4000.0)));
  4701  00527C  0E15               	movlw	21
  4702  00527E  0100               	movlb	0	; () banked
  4703  005280  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4704  005282  0E4B               	movlw	75
  4705  005284  0100               	movlb	0	; () banked
  4706  005286  6F86               	movwf	??_getMAG& (0+255),b
  4707  005288  0EBE               	movlw	190
  4708  00528A                     u9507:
  4709  00528A  2EE8               	decfsz	wreg,f,c
  4710  00528C  D7FE               	bra	u9507
  4711  00528E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4712  005290  D7FC               	bra	u9507
  4713  005292  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4714  005294  D7FA               	bra	u9507
  4715  005296  F000               	nop	
  4716                           
  4717                           ;sort.c: 520: readMAG();
  4718  005298  EC41  F028         	call	_readMAG	;wreg free
  4719  00529C  0012               	return	
  4720  00529E                     __end_of_getMAG:
  4721                           	opt stack 0
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           prodh	equ	0xFF4
  4727                           prodl	equ	0xFF3
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           postdec1	equ	0xFE5
  4731                           fsr1l	equ	0xFE1
  4732                           indf2	equ	0xFDF
  4733                           postinc2	equ	0xFDE
  4734                           postdec2	equ	0xFDD
  4735                           fsr2h	equ	0xFDA
  4736                           fsr2l	equ	0xFD9
  4737                           status	equ	0xFD8
  4738                           
  4739 ;; *************** function _getIR *****************
  4740 ;; Defined at:
  4741 ;;		line 499 in file "sort.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;  i               2    7[BANK0 ] int 
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      void 
  4748 ;; Registers used:
  4749 ;;		wreg, status,2, status,0, cstack
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4759 ;;Total ram usage:        3 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; Hardware stack levels required when called:    9
  4762 ;; This function calls:
  4763 ;;		_readIR
  4764 ;; This function is called by:
  4765 ;;		_Loading
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text6
  4770  004B9E                     __ptext6:
  4771                           	opt stack 0
  4772  004B9E                     _getIR:
  4773                           	opt stack 19
  4774                           
  4775                           ;sort.c: 500: readIR();
  4776                           
  4777                           ;incstack = 0
  4778  004B9E  EC1B  F028         	call	_readIR	;wreg free
  4779                           
  4780                           ;sort.c: 501: for(int i = 0; i < 150; i++){
  4781  004BA2  0E00               	movlw	0
  4782  004BA4  0100               	movlb	0	; () banked
  4783  004BA6  6F88               	movwf	(getIR@i+1)& (0+255),b
  4784  004BA8  0E00               	movlw	0
  4785  004BAA  6F87               	movwf	getIR@i& (0+255),b
  4786  004BAC                     l7198:
  4787                           
  4788                           ; BSR set to: 0
  4789  004BAC  0100               	movlb	0	; () banked
  4790  004BAE  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4791  004BB0  D008               	goto	l7202
  4792  004BB2  0100               	movlb	0	; () banked
  4793  004BB4  5188               	movf	(getIR@i+1)& (0+255),w,b
  4794  004BB6  E11A               	bnz	l7214
  4795  004BB8  0E96               	movlw	150
  4796  004BBA  0100               	movlb	0	; () banked
  4797  004BBC  5D87               	subwf	getIR@i& (0+255),w,b
  4798  004BBE  B0D8               	btfsc	status,0,c
  4799  004BC0  D015               	goto	l7214
  4800  004BC2                     l7202:
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;sort.c: 502: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4804  004BC2  0E06               	movlw	6
  4805  004BC4  0100               	movlb	0	; () banked
  4806  004BC6  6F86               	movwf	??_getIR& (0+255),b
  4807  004BC8  0E30               	movlw	48
  4808  004BCA                     u9517:
  4809  004BCA  2EE8               	decfsz	wreg,f,c
  4810  004BCC  D7FE               	bra	u9517
  4811  004BCE  2F86               	decfsz	??_getIR& (0+255),f,b
  4812  004BD0  D7FC               	bra	u9517
  4813  004BD2  F000               	nop	
  4814                           
  4815                           ;sort.c: 503: readIR();
  4816  004BD4  EC1B  F028         	call	_readIR	;wreg free
  4817                           
  4818                           ;sort.c: 504: if(!IR_signal){
  4819  004BD8  0100               	movlb	0	; () banked
  4820  004BDA  51E6               	movf	_IR_signal& (0+255),w,b
  4821  004BDC  0100               	movlb	0	; () banked
  4822  004BDE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4823  004BE0  B4D8               	btfsc	status,2,c
  4824  004BE2  D004               	goto	l7214
  4825                           
  4826                           ; BSR set to: 0
  4827                           
  4828                           ; BSR set to: 0
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;sort.c: 505: break;
  4832  004BE4  0100               	movlb	0	; () banked
  4833  004BE6  4B87               	infsnz	getIR@i& (0+255),f,b
  4834  004BE8  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4835  004BEA  D7E0               	goto	l7198
  4836  004BEC                     l7214:
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;sort.c: 506: }
  4840                           ;sort.c: 507: }
  4841                           ;sort.c: 508: if(IR_signal==1){
  4842  004BEC  0100               	movlb	0	; () banked
  4843  004BEE  05E6               	decf	_IR_signal& (0+255),w,b
  4844  004BF0  0100               	movlb	0	; () banked
  4845  004BF2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4846  004BF4  A4D8               	btfss	status,2,c
  4847  004BF6  D006               	goto	l7218
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;sort.c: 509: f_loadingNewCan = 1;
  4851  004BF8  0E00               	movlw	0
  4852  004BFA  0100               	movlb	0	; () banked
  4853  004BFC  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4854  004BFE  0E01               	movlw	1
  4855  004C00  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4856                           
  4857                           ;sort.c: 510: }
  4858  004C02  0012               	return	
  4859  004C04                     l7218:
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;sort.c: 511: else{
  4863                           ;sort.c: 512: f_loadingNewCan = 0;
  4864  004C04  0E00               	movlw	0
  4865  004C06  0100               	movlb	0	; () banked
  4866  004C08  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4867  004C0A  0E00               	movlw	0
  4868  004C0C  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4869  004C0E  0012               	return	
  4870  004C10                     __end_of_getIR:
  4871                           	opt stack 0
  4872                           tblptru	equ	0xFF8
  4873                           tblptrh	equ	0xFF7
  4874                           tblptrl	equ	0xFF6
  4875                           tablat	equ	0xFF5
  4876                           prodh	equ	0xFF4
  4877                           prodl	equ	0xFF3
  4878                           postinc0	equ	0xFEE
  4879                           wreg	equ	0xFE8
  4880                           postdec1	equ	0xFE5
  4881                           fsr1l	equ	0xFE1
  4882                           indf2	equ	0xFDF
  4883                           postinc2	equ	0xFDE
  4884                           postdec2	equ	0xFDD
  4885                           fsr2h	equ	0xFDA
  4886                           fsr2l	equ	0xFD9
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _readIR *****************
  4890 ;; Defined at:
  4891 ;;		line 23 in file "ADCFunctionality.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  res             2    4[BANK0 ] int 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  1    wreg      void 
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, status,0, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4909 ;;Total ram usage:        4 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    8
  4912 ;; This function calls:
  4913 ;;		_readADC
  4914 ;; This function is called by:
  4915 ;;		_Loading
  4916 ;;		_getIR
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text7
  4921  005036                     __ptext7:
  4922                           	opt stack 0
  4923  005036                     _readIR:
  4924                           	opt stack 20
  4925                           
  4926                           ;ADCFunctionality.c: 24: readADC(0);
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;incstack = 0
  4930  005036  0E00               	movlw	0
  4931  005038  EC9C  F02A         	call	_readADC
  4932                           
  4933                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4934  00503C  50C3               	movf	4035,w,c	;volatile
  4935  00503E  CFC4 F082          	movff	4036,??_readIR	;volatile
  4936  005042  0100               	movlb	0	; () banked
  4937  005044  6B83               	clrf	(??_readIR+1)& (0+255),b
  4938  005046  C082  F083         	movff	??_readIR,??_readIR+1
  4939  00504A  0100               	movlb	0	; () banked
  4940  00504C  6B82               	clrf	??_readIR& (0+255),b
  4941  00504E  0100               	movlb	0	; () banked
  4942  005050  1182               	iorwf	??_readIR& (0+255),w,b
  4943  005052  0100               	movlb	0	; () banked
  4944  005054  6F84               	movwf	readIR@res& (0+255),b
  4945  005056  0100               	movlb	0	; () banked
  4946  005058  5183               	movf	(??_readIR+1)& (0+255),w,b
  4947  00505A  0100               	movlb	0	; () banked
  4948  00505C  6F85               	movwf	(readIR@res+1)& (0+255),b
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4952  00505E  0100               	movlb	0	; () banked
  4953  005060  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4954  005062  D00A               	goto	u4870
  4955  005064  0E21               	movlw	33
  4956  005066  0100               	movlb	0	; () banked
  4957  005068  5D84               	subwf	readIR@res& (0+255),w,b
  4958  00506A  0E03               	movlw	3
  4959  00506C  0100               	movlb	0	; () banked
  4960  00506E  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4961  005070  A0D8               	btfss	status,0,c
  4962  005072  D002               	goto	u4870
  4963  005074  0E01               	movlw	1
  4964  005076  D001               	goto	u4880
  4965  005078                     u4870:
  4966  005078  0E00               	movlw	0
  4967  00507A                     u4880:
  4968  00507A  0100               	movlb	0	; () banked
  4969  00507C  6FE6               	movwf	_IR_signal& (0+255),b
  4970  00507E  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4971                           
  4972                           ; BSR set to: 0
  4973  005080  0012               	return		;funcret
  4974  005082                     __end_of_readIR:
  4975                           	opt stack 0
  4976                           tblptru	equ	0xFF8
  4977                           tblptrh	equ	0xFF7
  4978                           tblptrl	equ	0xFF6
  4979                           tablat	equ	0xFF5
  4980                           prodh	equ	0xFF4
  4981                           prodl	equ	0xFF3
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           postdec1	equ	0xFE5
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           postdec2	equ	0xFDD
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _ID *****************
  4994 ;; Defined at:
  4995 ;;		line 261 in file "sort.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  i               2    8[BANK0 ] int 
  5000 ;;  i               2    6[BANK0 ] int 
  5001 ;;  i               2    4[BANK0 ] int 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		wreg, status,2, status,0, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;Total ram usage:        8 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    8
  5018 ;; This function calls:
  5019 ;;		_delay_ms
  5020 ;; This function is called by:
  5021 ;;		_sort
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           	psect	text8
  5026  003170                     __ptext8:
  5027                           	opt stack 0
  5028  003170                     _ID:
  5029                           	opt stack 21
  5030                           
  5031                           ;sort.c: 262: if(f_can_coming_to_ID){
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;incstack = 0
  5035  003170  0101               	movlb	1	; () banked
  5036  003172  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5037  003174  0101               	movlb	1	; () banked
  5038  003176  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5039  003178  B4D8               	btfsc	status,2,c
  5040  00317A  0012               	return	
  5041                           
  5042                           ; BSR set to: 1
  5043                           ;sort.c: 264: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5044  00317C  0E29               	movlw	41
  5045  00317E  0100               	movlb	0	; () banked
  5046  003180  6F83               	movwf	(??_ID+1)& (0+255),b
  5047  003182  0E96               	movlw	150
  5048  003184  0100               	movlb	0	; () banked
  5049  003186  6F82               	movwf	??_ID& (0+255),b
  5050  003188  0E7F               	movlw	127
  5051  00318A                     u9527:
  5052  00318A  2EE8               	decfsz	wreg,f,c
  5053  00318C  D7FE               	bra	u9527
  5054  00318E  2F82               	decfsz	??_ID& (0+255),f,b
  5055  003190  D7FC               	bra	u9527
  5056  003192  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5057  003194  D7FA               	bra	u9527
  5058                           
  5059                           ;sort.c: 266: f_arm_position = 0;
  5060  003196  0E00               	movlw	0
  5061  003198  0100               	movlb	0	; () banked
  5062  00319A  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5063  00319C  0E00               	movlw	0
  5064  00319E  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;sort.c: 268: LATAbits.LATA3 = 1;
  5068  0031A0  8689               	bsf	3977,3,c	;volatile
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;sort.c: 269: _delay((unsigned long)((600)*(32000000/4000.0)));
  5072  0031A2  0E19               	movlw	25
  5073  0031A4  0100               	movlb	0	; () banked
  5074  0031A6  6F83               	movwf	(??_ID+1)& (0+255),b
  5075  0031A8  0E5A               	movlw	90
  5076  0031AA  0100               	movlb	0	; () banked
  5077  0031AC  6F82               	movwf	??_ID& (0+255),b
  5078  0031AE  0EB1               	movlw	177
  5079  0031B0                     u9537:
  5080  0031B0  2EE8               	decfsz	wreg,f,c
  5081  0031B2  D7FE               	bra	u9537
  5082  0031B4  2F82               	decfsz	??_ID& (0+255),f,b
  5083  0031B6  D7FC               	bra	u9537
  5084  0031B8  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5085  0031BA  D7FA               	bra	u9537
  5086  0031BC  D000               	nop2	
  5087                           
  5088                           ;sort.c: 270: sensor_outputs[1] = PORTAbits.RA2;
  5089  0031BE  A480               	btfss	3968,2,c	;volatile
  5090  0031C0  D004               	goto	u6240
  5091  0031C2  0100               	movlb	0	; () banked
  5092  0031C4  6B82               	clrf	??_ID& (0+255),b
  5093  0031C6  2B82               	incf	??_ID& (0+255),f,b
  5094  0031C8  D002               	goto	u6248
  5095  0031CA                     u6240:
  5096  0031CA  0100               	movlb	0	; () banked
  5097  0031CC  6B82               	clrf	??_ID& (0+255),b
  5098  0031CE                     u6248:
  5099  0031CE  0100               	movlb	0	; () banked
  5100  0031D0  5182               	movf	??_ID& (0+255),w,b
  5101  0031D2  0100               	movlb	0	; () banked
  5102  0031D4  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5103  0031D6  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;sort.c: 271: LATAbits.LATA3 = 0;
  5107  0031D8  9689               	bcf	3977,3,c	;volatile
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;sort.c: 273: _delay((unsigned long)((200)*(32000000/4000.0)));
  5111  0031DA  0E09               	movlw	9
  5112  0031DC  0100               	movlb	0	; () banked
  5113  0031DE  6F83               	movwf	(??_ID+1)& (0+255),b
  5114  0031E0  0E1E               	movlw	30
  5115  0031E2  0100               	movlb	0	; () banked
  5116  0031E4  6F82               	movwf	??_ID& (0+255),b
  5117  0031E6  0EE4               	movlw	228
  5118  0031E8                     u9547:
  5119  0031E8  2EE8               	decfsz	wreg,f,c
  5120  0031EA  D7FE               	bra	u9547
  5121  0031EC  2F82               	decfsz	??_ID& (0+255),f,b
  5122  0031EE  D7FC               	bra	u9547
  5123  0031F0  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5124  0031F2  D7FA               	bra	u9547
  5125  0031F4  F000               	nop	
  5126                           
  5127                           ;sort.c: 274: LATAbits.LATA3 = 1;
  5128  0031F6  8689               	bsf	3977,3,c	;volatile
  5129                           
  5130                           ;sort.c: 275: _delay((unsigned long)((600)*(32000000/4000.0)));
  5131  0031F8  0E19               	movlw	25
  5132  0031FA  0100               	movlb	0	; () banked
  5133  0031FC  6F83               	movwf	(??_ID+1)& (0+255),b
  5134  0031FE  0E5A               	movlw	90
  5135  003200  0100               	movlb	0	; () banked
  5136  003202  6F82               	movwf	??_ID& (0+255),b
  5137  003204  0EB1               	movlw	177
  5138  003206                     u9557:
  5139  003206  2EE8               	decfsz	wreg,f,c
  5140  003208  D7FE               	bra	u9557
  5141  00320A  2F82               	decfsz	??_ID& (0+255),f,b
  5142  00320C  D7FC               	bra	u9557
  5143  00320E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5144  003210  D7FA               	bra	u9557
  5145  003212  D000               	nop2	
  5146                           
  5147                           ;sort.c: 276: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  5148  003214  A480               	btfss	3968,2,c	;volatile
  5149  003216  D004               	goto	u6250
  5150  003218  0100               	movlb	0	; () banked
  5151  00321A  6B82               	clrf	??_ID& (0+255),b
  5152  00321C  2B82               	incf	??_ID& (0+255),f,b
  5153  00321E  D002               	goto	u6258
  5154  003220                     u6250:
  5155  003220  0100               	movlb	0	; () banked
  5156  003222  6B82               	clrf	??_ID& (0+255),b
  5157  003224                     u6258:
  5158  003224  0100               	movlb	0	; () banked
  5159  003226  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5160  003228  0100               	movlb	0	; () banked
  5161  00322A  1182               	iorwf	??_ID& (0+255),w,b
  5162  00322C  0100               	movlb	0	; () banked
  5163  00322E  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5164  003230  0100               	movlb	0	; () banked
  5165  003232  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5166  003234  0100               	movlb	0	; () banked
  5167  003236  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;sort.c: 284: if(!sensor_outputs[0]){
  5171  003238  0100               	movlb	0	; () banked
  5172  00323A  51E2               	movf	_sensor_outputs& (0+255),w,b
  5173  00323C  0100               	movlb	0	; () banked
  5174  00323E  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5175  003240  A4D8               	btfss	status,2,c
  5176  003242  D016               	goto	l7748
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;sort.c: 285: if(!sensor_outputs[1]){
  5180  003244  0100               	movlb	0	; () banked
  5181  003246  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5182  003248  0100               	movlb	0	; () banked
  5183  00324A  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5184  00324C  A4D8               	btfss	status,2,c
  5185  00324E  D008               	goto	l7744
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;sort.c: 286: count_pop_no_tab++;
  5189  003250  0101               	movlb	1	; () banked
  5190  003252  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5191  003254  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5192                           
  5193                           ; BSR set to: 1
  5194                           ;sort.c: 287: cur_can = 0;
  5195  003256  0E00               	movlw	0
  5196  003258  0101               	movlb	1	; () banked
  5197  00325A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5198  00325C  0E00               	movlw	0
  5199  00325E  D007               	goto	L7
  5200  003260                     l7744:
  5201                           
  5202                           ;sort.c: 289: else{
  5203                           ;sort.c: 290: count_pop_w_tab++;
  5204  003260  0101               	movlb	1	; () banked
  5205  003262  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5206  003264  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5207                           
  5208                           ; BSR set to: 1
  5209                           ;sort.c: 291: cur_can = 1;
  5210  003266  0E00               	movlw	0
  5211  003268  0101               	movlb	1	; () banked
  5212  00326A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5213  00326C  0E01               	movlw	1
  5214  00326E                     L7:
  5215  00326E  6F2B               	movwf	_cur_can& (0+255),b
  5216  003270                     l7748:
  5217                           
  5218                           ;sort.c: 292: }
  5219                           ;sort.c: 293: }
  5220                           ;sort.c: 294: if(sensor_outputs[0]){
  5221  003270  0100               	movlb	0	; () banked
  5222  003272  51E2               	movf	_sensor_outputs& (0+255),w,b
  5223  003274  0100               	movlb	0	; () banked
  5224  003276  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5225  003278  B4D8               	btfsc	status,2,c
  5226  00327A  D016               	goto	l7760
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;sort.c: 295: if(!sensor_outputs[1]){
  5230  00327C  0100               	movlb	0	; () banked
  5231  00327E  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5232  003280  0100               	movlb	0	; () banked
  5233  003282  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5234  003284  A4D8               	btfss	status,2,c
  5235  003286  D008               	goto	l7756
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;sort.c: 296: count_can_w_lab++;
  5239  003288  0101               	movlb	1	; () banked
  5240  00328A  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5241  00328C  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5242                           
  5243                           ; BSR set to: 1
  5244                           ;sort.c: 297: cur_can = 2;
  5245  00328E  0E00               	movlw	0
  5246  003290  0101               	movlb	1	; () banked
  5247  003292  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5248  003294  0E02               	movlw	2
  5249  003296  D007               	goto	L8
  5250  003298                     l7756:
  5251                           
  5252                           ;sort.c: 299: else{
  5253                           ;sort.c: 300: count_can_no_lab++;
  5254  003298  0101               	movlb	1	; () banked
  5255  00329A  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5256  00329C  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5257                           
  5258                           ; BSR set to: 1
  5259                           ;sort.c: 301: cur_can = 3;
  5260  00329E  0E00               	movlw	0
  5261  0032A0  0101               	movlb	1	; () banked
  5262  0032A2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5263  0032A4  0E03               	movlw	3
  5264  0032A6                     L8:
  5265  0032A6  6F2B               	movwf	_cur_can& (0+255),b
  5266  0032A8                     l7760:
  5267                           
  5268                           ;sort.c: 302: }
  5269                           ;sort.c: 303: }
  5270                           ;sort.c: 304: LATAbits.LATA3 = 0;
  5271  0032A8  9689               	bcf	3977,3,c	;volatile
  5272  0032AA                     l7762:
  5273  0032AA  0101               	movlb	1	; () banked
  5274  0032AC  5135               	movf	_f_can_distributed& (0+255),w,b
  5275  0032AE  0101               	movlb	1	; () banked
  5276  0032B0  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5277  0032B2  B4D8               	btfsc	status,2,c
  5278  0032B4  D7FA               	goto	l7762
  5279                           
  5280                           ; BSR set to: 1
  5281                           ;sort.c: 308: if(sensor_outputs[0]){
  5282                           
  5283                           ; BSR set to: 1
  5284  0032B6  0100               	movlb	0	; () banked
  5285  0032B8  51E2               	movf	_sensor_outputs& (0+255),w,b
  5286  0032BA  0100               	movlb	0	; () banked
  5287  0032BC  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5288  0032BE  B4D8               	btfsc	status,2,c
  5289  0032C0  D020               	goto	l7780
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;sort.c: 310: LATAbits.LATA3 = 1;
  5293  0032C2  8689               	bsf	3977,3,c	;volatile
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;sort.c: 313: for(int i=0;i<10000;i++)
  5297  0032C4  0E00               	movlw	0
  5298  0032C6  0100               	movlb	0	; () banked
  5299  0032C8  6F85               	movwf	(ID@i+1)& (0+255),b
  5300  0032CA  0E00               	movlw	0
  5301  0032CC  6F84               	movwf	ID@i& (0+255),b
  5302  0032CE                     l7770:
  5303                           
  5304                           ; BSR set to: 0
  5305  0032CE  0100               	movlb	0	; () banked
  5306  0032D0  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5307  0032D2  D008               	goto	l833
  5308  0032D4  0E10               	movlw	16
  5309  0032D6  0100               	movlb	0	; () banked
  5310  0032D8  5D84               	subwf	ID@i& (0+255),w,b
  5311  0032DA  0E27               	movlw	39
  5312  0032DC  0100               	movlb	0	; () banked
  5313  0032DE  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5314  0032E0  B0D8               	btfsc	status,0,c
  5315  0032E2  D00D               	goto	l834
  5316  0032E4                     l833:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;sort.c: 314: {
  5320                           ;sort.c: 315: LATCbits.LATC0 = 1;
  5321  0032E4  808B               	bsf	3979,0,c	;volatile
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;sort.c: 316: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5325  0032E6  0E1A               	movlw	26
  5326  0032E8                     u9567:
  5327  0032E8  2EE8               	decfsz	wreg,f,c
  5328  0032EA  D7FE               	bra	u9567
  5329  0032EC  D000               	nop2	
  5330                           
  5331                           ;sort.c: 317: LATCbits.LATC0 = 0;
  5332  0032EE  908B               	bcf	3979,0,c	;volatile
  5333                           
  5334                           ;sort.c: 318: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5335  0032F0  0EF0               	movlw	240
  5336  0032F2                     u9577:
  5337  0032F2  2EE8               	decfsz	wreg,f,c
  5338  0032F4  D7FE               	bra	u9577
  5339  0032F6  0100               	movlb	0	; () banked
  5340  0032F8  4B84               	infsnz	ID@i& (0+255),f,b
  5341  0032FA  2B85               	incf	(ID@i+1)& (0+255),f,b
  5342  0032FC  D7E8               	goto	l7770
  5343  0032FE                     l834:
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;sort.c: 319: }
  5347                           ;sort.c: 321: LATAbits.LATA3 = 0;
  5348  0032FE  9689               	bcf	3977,3,c	;volatile
  5349                           
  5350                           ;sort.c: 324: }
  5351  003300  D01D               	goto	l835
  5352  003302                     l7780:
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;sort.c: 325: else{
  5356                           ;sort.c: 327: for(int i=0;i<10000;i++)
  5357  003302  0E00               	movlw	0
  5358  003304  0100               	movlb	0	; () banked
  5359  003306  6F87               	movwf	(ID@i_1208+1)& (0+255),b
  5360  003308  0E00               	movlw	0
  5361  00330A  6F86               	movwf	ID@i_1208& (0+255),b
  5362  00330C                     l7782:
  5363                           
  5364                           ; BSR set to: 0
  5365  00330C  0100               	movlb	0	; () banked
  5366  00330E  BF87               	btfsc	(ID@i_1208+1)& (0+255),7,b
  5367  003310  D008               	goto	l836
  5368  003312  0E10               	movlw	16
  5369  003314  0100               	movlb	0	; () banked
  5370  003316  5D86               	subwf	ID@i_1208& (0+255),w,b
  5371  003318  0E27               	movlw	39
  5372  00331A  0100               	movlb	0	; () banked
  5373  00331C  5987               	subwfb	(ID@i_1208+1)& (0+255),w,b
  5374  00331E  B0D8               	btfsc	status,0,c
  5375  003320  D00D               	goto	l835
  5376  003322                     l836:
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;sort.c: 328: {
  5380                           ;sort.c: 329: LATCbits.LATC0 = 1;
  5381  003322  808B               	bsf	3979,0,c	;volatile
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;sort.c: 330: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5385  003324  0E1A               	movlw	26
  5386  003326                     u9587:
  5387  003326  2EE8               	decfsz	wreg,f,c
  5388  003328  D7FE               	bra	u9587
  5389  00332A  D000               	nop2	
  5390                           
  5391                           ;sort.c: 331: LATCbits.LATC0 = 0;
  5392  00332C  908B               	bcf	3979,0,c	;volatile
  5393                           
  5394                           ;sort.c: 332: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5395  00332E  0EF0               	movlw	240
  5396  003330                     u9597:
  5397  003330  2EE8               	decfsz	wreg,f,c
  5398  003332  D7FE               	bra	u9597
  5399  003334  0100               	movlb	0	; () banked
  5400  003336  4B86               	infsnz	ID@i_1208& (0+255),f,b
  5401  003338  2B87               	incf	(ID@i_1208+1)& (0+255),f,b
  5402  00333A  D7E8               	goto	l7782
  5403  00333C                     l835:
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;sort.c: 333: }
  5407                           ;sort.c: 334: }
  5408                           ;sort.c: 336: LATCbits.LATC0 = 0;
  5409  00333C  908B               	bcf	3979,0,c	;volatile
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;sort.c: 338: f_can_coming_to_distribution = 1;
  5413  00333E  0E00               	movlw	0
  5414  003340  0101               	movlb	1	; () banked
  5415  003342  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5416  003344  0E01               	movlw	1
  5417  003346  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5418                           
  5419                           ; BSR set to: 1
  5420                           ;sort.c: 339: _delay((unsigned long)((750)*(32000000/4000.0)));
  5421  003348  0E1F               	movlw	31
  5422  00334A  0100               	movlb	0	; () banked
  5423  00334C  6F83               	movwf	(??_ID+1)& (0+255),b
  5424  00334E  0E71               	movlw	113
  5425  003350  0100               	movlb	0	; () banked
  5426  003352  6F82               	movwf	??_ID& (0+255),b
  5427  003354  0E1E               	movlw	30
  5428  003356                     u9607:
  5429  003356  2EE8               	decfsz	wreg,f,c
  5430  003358  D7FE               	bra	u9607
  5431  00335A  2F82               	decfsz	??_ID& (0+255),f,b
  5432  00335C  D7FC               	bra	u9607
  5433  00335E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5434  003360  D7FA               	bra	u9607
  5435  003362  F000               	nop	
  5436                           
  5437                           ;sort.c: 340: LATCbits.LATC0 = 1;
  5438  003364  808B               	bsf	3979,0,c	;volatile
  5439                           
  5440                           ;sort.c: 343: if(!f_lastCan){
  5441  003366  0100               	movlb	0	; () banked
  5442  003368  51F0               	movf	_f_lastCan& (0+255),w,b
  5443  00336A  0100               	movlb	0	; () banked
  5444  00336C  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5445  00336E  A4D8               	btfss	status,2,c
  5446  003370  D032               	goto	l7814
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;sort.c: 344: for(int i=0; i<46; i++){
  5450  003372  0E00               	movlw	0
  5451  003374  0100               	movlb	0	; () banked
  5452  003376  6F89               	movwf	(ID@i_1209+1)& (0+255),b
  5453  003378  0E00               	movlw	0
  5454  00337A  6F88               	movwf	ID@i_1209& (0+255),b
  5455                           
  5456                           ; BSR set to: 0
  5457  00337C  0100               	movlb	0	; () banked
  5458  00337E  BF89               	btfsc	(ID@i_1209+1)& (0+255),7,b
  5459  003380  D008               	goto	l7806
  5460  003382  0100               	movlb	0	; () banked
  5461  003384  5189               	movf	(ID@i_1209+1)& (0+255),w,b
  5462  003386  E126               	bnz	l840
  5463  003388  0E2E               	movlw	46
  5464  00338A  0100               	movlb	0	; () banked
  5465  00338C  5D88               	subwf	ID@i_1209& (0+255),w,b
  5466  00338E  B0D8               	btfsc	status,0,c
  5467  003390  D021               	goto	l840
  5468  003392                     l7806:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;sort.c: 345: LATBbits.LATB2 = !LATBbits.LATB2;
  5472  003392  B48A               	btfsc	3978,2,c	;volatile
  5473  003394  D004               	goto	u6380
  5474  003396  0100               	movlb	0	; () banked
  5475  003398  6B82               	clrf	??_ID& (0+255),b
  5476  00339A  2B82               	incf	??_ID& (0+255),f,b
  5477  00339C  D002               	goto	u6398
  5478  00339E                     u6380:
  5479  00339E  0100               	movlb	0	; () banked
  5480  0033A0  6B82               	clrf	??_ID& (0+255),b
  5481  0033A2                     u6398:
  5482  0033A2  0100               	movlb	0	; () banked
  5483  0033A4  4782               	rlncf	??_ID& (0+255),f,b
  5484  0033A6  4782               	rlncf	??_ID& (0+255),f,b
  5485  0033A8  508A               	movf	3978,w,c	;volatile
  5486  0033AA  0100               	movlb	0	; () banked
  5487  0033AC  1982               	xorwf	??_ID& (0+255),w,b
  5488  0033AE  0BFB               	andlw	-5
  5489  0033B0  1982               	xorwf	??_ID& (0+255),w,b
  5490  0033B2  6E8A               	movwf	3978,c	;volatile
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;sort.c: 346: delay_ms(45-i);
  5494  0033B4  0100               	movlb	0	; () banked
  5495  0033B6  5188               	movf	ID@i_1209& (0+255),w,b
  5496  0033B8  0800               	sublw	0
  5497  0033BA  0F2D               	addlw	45
  5498  0033BC  ECC7  F02A         	call	_delay_ms
  5499  0033C0  0100               	movlb	0	; () banked
  5500  0033C2  4B88               	infsnz	ID@i_1209& (0+255),f,b
  5501  0033C4  2B89               	incf	(ID@i_1209+1)& (0+255),f,b
  5502                           
  5503                           ; BSR set to: 0
  5504  0033C6  0100               	movlb	0	; () banked
  5505  0033C8  BF89               	btfsc	(ID@i_1209+1)& (0+255),7,b
  5506  0033CA  D7E3               	goto	l7806
  5507  0033CC  0100               	movlb	0	; () banked
  5508  0033CE  5189               	movf	(ID@i_1209+1)& (0+255),w,b
  5509  0033D0  E101               	bnz	u6400
  5510  0033D2  D7DA               	goto	L9
  5511  0033D4                     u6400:
  5512  0033D4                     l840:
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;sort.c: 347: }
  5516                           ;sort.c: 348: LATBbits.LATB2 = 1;
  5517  0033D4  848A               	bsf	3978,2,c	;volatile
  5518  0033D6                     l7814:
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;sort.c: 349: }
  5522                           ;sort.c: 351: f_can_coming_to_ID = 0;
  5523  0033D6  0E00               	movlw	0
  5524  0033D8  0101               	movlb	1	; () banked
  5525  0033DA  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5526  0033DC  0E00               	movlw	0
  5527  0033DE  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5528  0033E0  0012               	return	
  5529  0033E2                     __end_of_ID:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           postdec1	equ	0xFE5
  5540                           fsr1l	equ	0xFE1
  5541                           indf2	equ	0xFDF
  5542                           postinc2	equ	0xFDE
  5543                           postdec2	equ	0xFDD
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function _delay_ms *****************
  5549 ;; Defined at:
  5550 ;;		line 634 in file "sort.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;  milliseconds    1    wreg     unsigned char 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, status,2, status,0, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;Total ram usage:        2 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    7
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_Loading
  5575 ;;		_ID
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           	psect	text9
  5580  00558E                     __ptext9:
  5581                           	opt stack 0
  5582  00558E                     _delay_ms:
  5583                           	opt stack 21
  5584                           
  5585                           ; BSR set to: 1
  5586                           ;incstack = 0
  5587                           ;delay_ms@milliseconds stored from wreg
  5588  00558E  0100               	movlb	0	; () banked
  5589  005590  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5590                           
  5591                           ;sort.c: 635: while(milliseconds > 0)
  5592  005592  D00B               	goto	l7170
  5593  005594                     l7166:
  5594                           
  5595                           ;sort.c: 636: {
  5596                           ;sort.c: 637: milliseconds--;
  5597  005594  0100               	movlb	0	; () banked
  5598  005596  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;sort.c: 638: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5602  005598  0E0B               	movlw	11
  5603  00559A  0100               	movlb	0	; () banked
  5604  00559C  6F80               	movwf	??_delay_ms& (0+255),b
  5605  00559E  0E47               	movlw	71
  5606  0055A0                     u9617:
  5607  0055A0  2EE8               	decfsz	wreg,f,c
  5608  0055A2  D7FE               	bra	u9617
  5609  0055A4  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5610  0055A6  D7FC               	bra	u9617
  5611  0055A8  D000               	nop2	
  5612  0055AA                     l7170:
  5613  0055AA  0100               	movlb	0	; () banked
  5614  0055AC  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5615  0055AE  0100               	movlb	0	; () banked
  5616  0055B0  B4D8               	btfsc	status,2,c
  5617  0055B2  0012               	return	
  5618  0055B4  D7EF               	goto	l7166
  5619  0055B6                     __end_of_delay_ms:
  5620                           	opt stack 0
  5621                           tblptru	equ	0xFF8
  5622                           tblptrh	equ	0xFF7
  5623                           tblptrl	equ	0xFF6
  5624                           tablat	equ	0xFF5
  5625                           prodh	equ	0xFF4
  5626                           prodl	equ	0xFF3
  5627                           postinc0	equ	0xFEE
  5628                           wreg	equ	0xFE8
  5629                           postdec1	equ	0xFE5
  5630                           fsr1l	equ	0xFE1
  5631                           indf2	equ	0xFDF
  5632                           postinc2	equ	0xFDE
  5633                           postdec2	equ	0xFDD
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _Distribution *****************
  5639 ;; Defined at:
  5640 ;;		line 354 in file "sort.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      void 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;Total ram usage:        2 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    8
  5661 ;; This function calls:
  5662 ;;		_updateServoPosition
  5663 ;; This function is called by:
  5664 ;;		_sort
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text10
  5669  004292                     __ptext10:
  5670                           	opt stack 0
  5671  004292                     _Distribution:
  5672                           	opt stack 21
  5673                           
  5674                           ;sort.c: 355: if(f_can_coming_to_distribution){
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;incstack = 0
  5678  004292  0101               	movlb	1	; () banked
  5679  004294  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5680  004296  0101               	movlb	1	; () banked
  5681  004298  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5682  00429A  B4D8               	btfsc	status,2,c
  5683  00429C  0012               	return	
  5684                           
  5685                           ; BSR set to: 1
  5686                           ;sort.c: 356: f_can_distributed = 0;
  5687  00429E  0E00               	movlw	0
  5688  0042A0  0101               	movlb	1	; () banked
  5689  0042A2  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5690  0042A4  0E00               	movlw	0
  5691  0042A6  6F35               	movwf	_f_can_distributed& (0+255),b
  5692                           
  5693                           ;sort.c: 363: switch(cur_can){
  5694  0042A8  D034               	goto	l7830
  5695  0042AA                     l7820:
  5696                           
  5697                           ;sort.c: 365: updateServoPosition(500, 1);
  5698  0042AA  0E01               	movlw	1
  5699  0042AC  0100               	movlb	0	; () banked
  5700  0042AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5701  0042B0  0EF4               	movlw	244
  5702  0042B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5703  0042B4  0E00               	movlw	0
  5704  0042B6  0100               	movlb	0	; () banked
  5705  0042B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5706  0042BA  0E01               	movlw	1
  5707  0042BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5708  0042BE  ECD2  F024         	call	_updateServoPosition	;wreg free
  5709                           
  5710                           ;sort.c: 366: break;
  5711  0042C2  D03E               	goto	l7832
  5712  0042C4                     l7822:
  5713                           
  5714                           ;sort.c: 368: updateServoPosition(850, 1);
  5715  0042C4  0E03               	movlw	3
  5716  0042C6  0100               	movlb	0	; () banked
  5717  0042C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5718  0042CA  0E52               	movlw	82
  5719  0042CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5720  0042CE  0E00               	movlw	0
  5721  0042D0  0100               	movlb	0	; () banked
  5722  0042D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5723  0042D4  0E01               	movlw	1
  5724  0042D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5725  0042D8  ECD2  F024         	call	_updateServoPosition	;wreg free
  5726                           
  5727                           ;sort.c: 369: break;
  5728  0042DC  D031               	goto	l7832
  5729  0042DE                     l7824:
  5730                           
  5731                           ;sort.c: 371: updateServoPosition(1670, 1);
  5732  0042DE  0E06               	movlw	6
  5733  0042E0  0100               	movlb	0	; () banked
  5734  0042E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5735  0042E4  0E86               	movlw	134
  5736  0042E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5737  0042E8  0E00               	movlw	0
  5738  0042EA  0100               	movlb	0	; () banked
  5739  0042EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5740  0042EE  0E01               	movlw	1
  5741  0042F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5742  0042F2  ECD2  F024         	call	_updateServoPosition	;wreg free
  5743                           
  5744                           ;sort.c: 372: break;
  5745  0042F6  D024               	goto	l7832
  5746  0042F8                     l7826:
  5747                           
  5748                           ;sort.c: 374: updateServoPosition(2400, 1);
  5749  0042F8  0E09               	movlw	9
  5750  0042FA  0100               	movlb	0	; () banked
  5751  0042FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5752  0042FE  0E60               	movlw	96
  5753  004300  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5754  004302  0E00               	movlw	0
  5755  004304  0100               	movlb	0	; () banked
  5756  004306  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5757  004308  0E01               	movlw	1
  5758  00430A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5759  00430C  ECD2  F024         	call	_updateServoPosition	;wreg free
  5760                           
  5761                           ;sort.c: 378: }
  5762                           
  5763                           ;sort.c: 377: break;
  5764                           
  5765                           ;sort.c: 376: default:
  5766                           
  5767                           ;sort.c: 375: break;
  5768  004310  D017               	goto	l7832
  5769  004312                     l7830:
  5770  004312  C12B  F088         	movff	_cur_can,??_Distribution
  5771  004316  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5772                           
  5773                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5774                           ; Switch size 1, requested type "space"
  5775                           ; Number of cases is 1, Range of values is 0 to 0
  5776                           ; switch strategies available:
  5777                           ; Name         Instructions Cycles
  5778                           ; simple_byte            4     3 (average)
  5779                           ;	Chosen strategy is simple_byte
  5780  00431A  0100               	movlb	0	; () banked
  5781  00431C  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5782  00431E  0A00               	xorlw	0	; case 0
  5783  004320  A4D8               	btfss	status,2,c
  5784  004322  D00E               	goto	l7832
  5785                           
  5786                           ; BSR set to: 0
  5787                           ; Switch size 1, requested type "space"
  5788                           ; Number of cases is 4, Range of values is 0 to 3
  5789                           ; switch strategies available:
  5790                           ; Name         Instructions Cycles
  5791                           ; simple_byte           13     7 (average)
  5792                           ;	Chosen strategy is simple_byte
  5793  004324  0100               	movlb	0	; () banked
  5794  004326  5188               	movf	??_Distribution& (0+255),w,b
  5795  004328  0A00               	xorlw	0	; case 0
  5796  00432A  B4D8               	btfsc	status,2,c
  5797  00432C  D7BE               	goto	l7820
  5798  00432E  0A01               	xorlw	1	; case 1
  5799  004330  B4D8               	btfsc	status,2,c
  5800  004332  D7C8               	goto	l7822
  5801  004334  0A03               	xorlw	3	; case 2
  5802  004336  B4D8               	btfsc	status,2,c
  5803  004338  D7D2               	goto	l7824
  5804  00433A  0A01               	xorlw	1	; case 3
  5805  00433C  B4D8               	btfsc	status,2,c
  5806  00433E  D7DC               	goto	l7826
  5807  004340                     l7832:
  5808                           
  5809                           ;sort.c: 379: updateServoPosition(1050, 3);
  5810  004340  0E04               	movlw	4
  5811  004342  0100               	movlb	0	; () banked
  5812  004344  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5813  004346  0E1A               	movlw	26
  5814  004348  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5815  00434A  0E00               	movlw	0
  5816  00434C  0100               	movlb	0	; () banked
  5817  00434E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5818  004350  0E03               	movlw	3
  5819  004352  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5820  004354  ECD2  F024         	call	_updateServoPosition	;wreg free
  5821                           
  5822                           ;sort.c: 380: servo_timer_target = 750;
  5823  004358  0E02               	movlw	2
  5824  00435A  6E70               	movwf	_servo_timer_target+1,c	;volatile
  5825  00435C  0EEE               	movlw	238
  5826  00435E  6E6F               	movwf	_servo_timer_target,c	;volatile
  5827                           
  5828                           ;sort.c: 381: f_panning_to_bin = 1;
  5829  004360  0E00               	movlw	0
  5830  004362  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5831  004364  0E01               	movlw	1
  5832  004366  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5833                           
  5834                           ;sort.c: 382: f_can_coming_to_distribution = 0;
  5835  004368  0E00               	movlw	0
  5836  00436A  0101               	movlb	1	; () banked
  5837  00436C  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5838  00436E  0E00               	movlw	0
  5839  004370  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5840  004372  0012               	return	
  5841  004374                     __end_of_Distribution:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           postdec1	equ	0xFE5
  5852                           fsr1l	equ	0xFE1
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860 ;; *************** function _machineConfig *****************
  5861 ;; Defined at:
  5862 ;;		line 15 in file "MachineConfig.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;		None
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;		None
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  1    wreg      void 
  5869 ;; Registers used:
  5870 ;;		wreg, status,2
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;Total ram usage:        0 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    7
  5883 ;; This function calls:
  5884 ;;		Nothing
  5885 ;; This function is called by:
  5886 ;;		_main
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           	psect	text11
  5891  004D5E                     __ptext11:
  5892                           	opt stack 0
  5893  004D5E                     _machineConfig:
  5894                           	opt stack 23
  5895                           
  5896                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5897                           
  5898                           ; BSR set to: 1
  5899                           ;incstack = 0
  5900  004D5E  0EF0               	movlw	240
  5901  004D60  6ED3               	movwf	4051,c	;volatile
  5902                           
  5903                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5904  004D62  8C9B               	bsf	3995,6,c	;volatile
  5905                           
  5906                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5907  004D64  0E07               	movlw	7
  5908  004D66  6E92               	movwf	3986,c	;volatile
  5909                           
  5910                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5911  004D68  0EF2               	movlw	242
  5912  004D6A  6E93               	movwf	3987,c	;volatile
  5913                           
  5914                           ;MachineConfig.c: 27: TRISC = 0x00;
  5915  004D6C  0E00               	movlw	0
  5916  004D6E  6E94               	movwf	3988,c	;volatile
  5917                           
  5918                           ;MachineConfig.c: 31: TRISD = 0x00;
  5919  004D70  0E00               	movlw	0
  5920  004D72  6E95               	movwf	3989,c	;volatile
  5921                           
  5922                           ;MachineConfig.c: 34: TRISE = 0x00;
  5923  004D74  0E00               	movlw	0
  5924  004D76  6E96               	movwf	3990,c	;volatile
  5925                           
  5926                           ;MachineConfig.c: 37: LATA = 0x00;
  5927  004D78  0E00               	movlw	0
  5928  004D7A  6E89               	movwf	3977,c	;volatile
  5929                           
  5930                           ;MachineConfig.c: 38: LATB = 0x00;
  5931  004D7C  0E00               	movlw	0
  5932  004D7E  6E8A               	movwf	3978,c	;volatile
  5933                           
  5934                           ;MachineConfig.c: 39: LATC = 0x00;
  5935  004D80  0E00               	movlw	0
  5936  004D82  6E8B               	movwf	3979,c	;volatile
  5937                           
  5938                           ;MachineConfig.c: 40: LATD = 0x00;
  5939  004D84  0E00               	movlw	0
  5940  004D86  6E8C               	movwf	3980,c	;volatile
  5941                           
  5942                           ;MachineConfig.c: 41: LATE = 0x00;
  5943  004D88  0E00               	movlw	0
  5944  004D8A  6E8D               	movwf	3981,c	;volatile
  5945                           
  5946                           ;MachineConfig.c: 43: nRBPU = 0;
  5947  004D8C  9EF1               	bcf	intcon2,7,c	;volatile
  5948                           
  5949                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5950  004D8E  0E00               	movlw	0
  5951  004D90  6EC2               	movwf	4034,c	;volatile
  5952                           
  5953                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5954  004D92  0E0D               	movlw	13
  5955  004D94  6EC1               	movwf	4033,c	;volatile
  5956                           
  5957                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5958  004D96  0E00               	movlw	0
  5959  004D98  6EB5               	movwf	4021,c	;volatile
  5960                           
  5961                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5962  004D9A  96B4               	bcf	4020,3,c	;volatile
  5963                           
  5964                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5965  004D9C  0EB1               	movlw	177
  5966  004D9E  6EC0               	movwf	4032,c	;volatile
  5967                           
  5968                           ;MachineConfig.c: 55: INT1IE = 1;
  5969  004DA0  86F0               	bsf	intcon3,3,c	;volatile
  5970                           
  5971                           ;MachineConfig.c: 57: TMR0IE = 1;
  5972  004DA2  8AF2               	bsf	intcon,5,c	;volatile
  5973                           
  5974                           ;MachineConfig.c: 58: TMR1IE = 1;
  5975  004DA4  809D               	bsf	3997,0,c	;volatile
  5976                           
  5977                           ;MachineConfig.c: 59: TMR2IE = 1;
  5978  004DA6  829D               	bsf	3997,1,c	;volatile
  5979                           
  5980                           ;MachineConfig.c: 60: TMR3IE = 1;
  5981  004DA8  82A0               	bsf	4000,1,c	;volatile
  5982                           
  5983                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  5984  004DAA  0EB0               	movlw	176
  5985  004DAC  6ECD               	movwf	4045,c	;volatile
  5986                           
  5987                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  5988  004DAE  0E7B               	movlw	123
  5989  004DB0  6ECA               	movwf	4042,c	;volatile
  5990                           
  5991                           ;MachineConfig.c: 64: PR2 = 0x22;
  5992  004DB2  0E22               	movlw	34
  5993  004DB4  6ECB               	movwf	4043,c	;volatile
  5994                           
  5995                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  5996  004DB6  0EB0               	movlw	176
  5997  004DB8  6EB1               	movwf	4017,c	;volatile
  5998                           
  5999                           ;MachineConfig.c: 66: PEIE = 1;
  6000  004DBA  8CF2               	bsf	intcon,6,c	;volatile
  6001                           
  6002                           ;MachineConfig.c: 67: ADIE = 0;
  6003  004DBC  9C9D               	bcf	3997,6,c	;volatile
  6004                           
  6005                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  6006  004DBE  9EF2               	bcf	intcon,7,c	;volatile
  6007  004DC0  0012               	return		;funcret
  6008  004DC2                     __end_of_machineConfig:
  6009                           	opt stack 0
  6010                           tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           intcon	equ	0xFF2
  6017                           intcon2	equ	0xFF1
  6018                           intcon3	equ	0xFF0
  6019                           postinc0	equ	0xFEE
  6020                           wreg	equ	0xFE8
  6021                           postdec1	equ	0xFE5
  6022                           fsr1l	equ	0xFE1
  6023                           indf2	equ	0xFDF
  6024                           postinc2	equ	0xFDE
  6025                           postdec2	equ	0xFDD
  6026                           fsr2h	equ	0xFDA
  6027                           fsr2l	equ	0xFD9
  6028                           status	equ	0xFD8
  6029                           
  6030 ;; *************** function _logRun *****************
  6031 ;; Defined at:
  6032 ;;		line 84 in file "EEPROM.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;		None
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  byte_i          1   53[BANK0 ] unsigned char 
  6037 ;;  i               2   55[BANK0 ] int 
  6038 ;;  num             1   49[BANK0 ] unsigned char 
  6039 ;;  addr            2   57[BANK0 ] unsigned short 
  6040 ;;  byte11          1   54[BANK0 ] unsigned char 
  6041 ;;  byte3           1   52[BANK0 ] unsigned char 
  6042 ;;  byte2           1   51[BANK0 ] unsigned char 
  6043 ;;  byte1           1   50[BANK0 ] unsigned char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      void 
  6046 ;; Registers used:
  6047 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;Total ram usage:       10 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:   11
  6060 ;; This function calls:
  6061 ;;		_EEPROM_read
  6062 ;;		_EEPROM_write
  6063 ;; This function is called by:
  6064 ;;		_main
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text12
  6069  003D42                     __ptext12:
  6070                           	opt stack 0
  6071  003D42                     _logRun:
  6072                           	opt stack 19
  6073                           
  6074                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  6075                           
  6076                           ;incstack = 0
  6077  003D42  0E00               	movlw	0
  6078  003D44  0100               	movlb	0	; () banked
  6079  003D46  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  6080  003D48  0E00               	movlw	0
  6081  003D4A  6F80               	movwf	EEPROM_read@address& (0+255),b
  6082  003D4C  EC74  F02B         	call	_EEPROM_read	;wreg free
  6083  003D50  0100               	movlb	0	; () banked
  6084  003D52  6FFD               	movwf	_sel& (0+255),b
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  6088  003D54  0100               	movlb	0	; () banked
  6089  003D56  51FD               	movf	_sel& (0+255),w,b
  6090  003D58  0D0B               	mullw	11
  6091  003D5A  0E01               	movlw	1
  6092  003D5C  24F3               	addwf	prodl,w,c
  6093  003D5E  0100               	movlb	0	; () banked
  6094  003D60  6FB9               	movwf	logRun@addr& (0+255),b
  6095  003D62  0E00               	movlw	0
  6096  003D64  20F4               	addwfc	prodh,w,c
  6097  003D66  0100               	movlb	0	; () banked
  6098  003D68  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;EEPROM.c: 101: if (sel < 3){
  6102  003D6A  0E03               	movlw	3
  6103  003D6C  0100               	movlb	0	; () banked
  6104  003D6E  61FD               	cpfslt	_sel& (0+255),b
  6105  003D70  D00E               	goto	l9530
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;EEPROM.c: 102: unsigned char num = sel+1;
  6109  003D72  0100               	movlb	0	; () banked
  6110  003D74  29FD               	incf	_sel& (0+255),w,b
  6111  003D76  0100               	movlb	0	; () banked
  6112  003D78  6FB1               	movwf	logRun@num& (0+255),b
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;EEPROM.c: 103: EEPROM_write(0, num);
  6116  003D7A  0E00               	movlw	0
  6117  003D7C  0100               	movlb	0	; () banked
  6118  003D7E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6119  003D80  0E00               	movlw	0
  6120  003D82  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6121  003D84  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  6122  003D88  ECD5  F020         	call	_EEPROM_write	;wreg free
  6123                           
  6124                           ;EEPROM.c: 104: }
  6125  003D8C  D00A               	goto	l9532
  6126  003D8E                     l9530:
  6127                           
  6128                           ;EEPROM.c: 105: else{
  6129                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6130  003D8E  0E00               	movlw	0
  6131  003D90  0100               	movlb	0	; () banked
  6132  003D92  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6133  003D94  0E00               	movlw	0
  6134  003D96  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6135  003D98  0E00               	movlw	0
  6136  003D9A  0100               	movlb	0	; () banked
  6137  003D9C  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6138  003D9E  ECD5  F020         	call	_EEPROM_write	;wreg free
  6139  003DA2                     l9532:
  6140                           
  6141                           ;EEPROM.c: 107: }
  6142                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6143  003DA2  0100               	movlb	0	; () banked
  6144  003DA4  51FE               	movf	_count_total& (0+255),w,b
  6145  003DA6  0980               	iorlw	128
  6146  003DA8  0100               	movlb	0	; () banked
  6147  003DAA  6FB2               	movwf	logRun@byte1& (0+255),b
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6151  003DAC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6152  003DB0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6153  003DB4  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6154  003DB8  ECD5  F020         	call	_EEPROM_write	;wreg free
  6155                           
  6156                           ;EEPROM.c: 112: addr++;
  6157  003DBC  0100               	movlb	0	; () banked
  6158  003DBE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6159  003DC0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6163  003DC2  0101               	movlb	1	; () banked
  6164  003DC4  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6165  003DC6  0BF0               	andlw	240
  6166  003DC8  0101               	movlb	1	; () banked
  6167  003DCA  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6168  003DCC  0100               	movlb	0	; () banked
  6169  003DCE  6FB3               	movwf	logRun@byte2& (0+255),b
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6173  003DD0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6174  003DD4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6175  003DD8  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6176  003DDC  ECD5  F020         	call	_EEPROM_write	;wreg free
  6177                           
  6178                           ;EEPROM.c: 117: addr++;
  6179  003DE0  0100               	movlb	0	; () banked
  6180  003DE2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6181  003DE4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6185  003DE6  0101               	movlb	1	; () banked
  6186  003DE8  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6187  003DEA  0BF0               	andlw	240
  6188  003DEC  0101               	movlb	1	; () banked
  6189  003DEE  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6190  003DF0  0100               	movlb	0	; () banked
  6191  003DF2  6FB4               	movwf	logRun@byte3& (0+255),b
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6195  003DF4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6196  003DF8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6197  003DFC  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6198  003E00  ECD5  F020         	call	_EEPROM_write	;wreg free
  6199                           
  6200                           ;EEPROM.c: 120: addr++;
  6201  003E04  0100               	movlb	0	; () banked
  6202  003E06  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6203  003E08  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6207  003E0A  0E00               	movlw	0
  6208  003E0C  0100               	movlb	0	; () banked
  6209  003E0E  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6210  003E10  0E00               	movlw	0
  6211  003E12  6FB7               	movwf	logRun@i& (0+255),b
  6212                           
  6213                           ; BSR set to: 0
  6214  003E14  0100               	movlb	0	; () banked
  6215  003E16  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6216  003E18  D008               	goto	l9556
  6217  003E1A  0100               	movlb	0	; () banked
  6218  003E1C  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6219  003E1E  E128               	bnz	l1107
  6220  003E20  0E07               	movlw	7
  6221  003E22  0100               	movlb	0	; () banked
  6222  003E24  5DB7               	subwf	logRun@i& (0+255),w,b
  6223  003E26  B0D8               	btfsc	status,0,c
  6224  003E28  D023               	goto	l1107
  6225  003E2A                     l9556:
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6229  003E2A  90D8               	bcf	status,0,c
  6230  003E2C  0100               	movlb	0	; () banked
  6231  003E2E  35B7               	rlcf	logRun@i& (0+255),w,b
  6232  003E30  6ED9               	movwf	fsr2l,c
  6233  003E32  0100               	movlb	0	; () banked
  6234  003E34  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6235  003E36  6EDA               	movwf	fsr2h,c
  6236  003E38  0E0E               	movlw	low _startTime
  6237  003E3A  26D9               	addwf	fsr2l,f,c
  6238  003E3C  0E01               	movlw	high _startTime
  6239  003E3E  22DA               	addwfc	fsr2h,f,c
  6240  003E40  50DF               	movf	indf2,w,c
  6241  003E42  0100               	movlb	0	; () banked
  6242  003E44  6FB5               	movwf	logRun@byte_i& (0+255),b
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6246  003E46  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6247  003E4A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6248  003E4E  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6249  003E52  ECD5  F020         	call	_EEPROM_write	;wreg free
  6250                           
  6251                           ;EEPROM.c: 126: addr++;
  6252  003E56  0100               	movlb	0	; () banked
  6253  003E58  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6254  003E5A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6255                           
  6256                           ; BSR set to: 0
  6257  003E5C  0100               	movlb	0	; () banked
  6258  003E5E  4BB7               	infsnz	logRun@i& (0+255),f,b
  6259  003E60  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6260                           
  6261                           ; BSR set to: 0
  6262  003E62  0100               	movlb	0	; () banked
  6263  003E64  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6264  003E66  D7E1               	goto	l9556
  6265  003E68  0100               	movlb	0	; () banked
  6266  003E6A  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6267  003E6C  E101               	bnz	u8850
  6268  003E6E  D7D8               	goto	L10
  6269  003E70                     u8850:
  6270  003E70                     l1107:
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;EEPROM.c: 127: }
  6274                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6275  003E70  C0FA  F0B6         	movff	_total_time,logRun@byte11
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6279  003E74  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6280  003E78  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6281  003E7C  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6282  003E80  ECD5  F020         	call	_EEPROM_write	;wreg free
  6283  003E84  0012               	return		;funcret
  6284  003E86                     __end_of_logRun:
  6285                           	opt stack 0
  6286                           tblptru	equ	0xFF8
  6287                           tblptrh	equ	0xFF7
  6288                           tblptrl	equ	0xFF6
  6289                           tablat	equ	0xFF5
  6290                           prodh	equ	0xFF4
  6291                           prodl	equ	0xFF3
  6292                           intcon	equ	0xFF2
  6293                           intcon2	equ	0xFF1
  6294                           intcon3	equ	0xFF0
  6295                           postinc0	equ	0xFEE
  6296                           wreg	equ	0xFE8
  6297                           postdec1	equ	0xFE5
  6298                           fsr1l	equ	0xFE1
  6299                           indf2	equ	0xFDF
  6300                           postinc2	equ	0xFDE
  6301                           postdec2	equ	0xFDD
  6302                           fsr2h	equ	0xFDA
  6303                           fsr2l	equ	0xFD9
  6304                           status	equ	0xFD8
  6305                           
  6306 ;; *************** function _EEPROM_write *****************
  6307 ;; Defined at:
  6308 ;;		line 32 in file "EEPROM.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;  address         2   43[BANK0 ] unsigned short 
  6311 ;;  data            1   45[BANK0 ] unsigned char 
  6312 ;; Auto vars:     Size  Location     Type
  6313 ;;  i               1   48[BANK0 ] unsigned char 
  6314 ;;  i               1   47[BANK0 ] unsigned char 
  6315 ;; Return value:  Size  Location     Type
  6316 ;;                  1    wreg      void 
  6317 ;; Registers used:
  6318 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6324 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;Total ram usage:        6 bytes
  6329 ;; Hardware stack levels used:    1
  6330 ;; Hardware stack levels required when called:   10
  6331 ;; This function calls:
  6332 ;;		_EEPROM_read
  6333 ;;		_lcdInst
  6334 ;;		_printf
  6335 ;; This function is called by:
  6336 ;;		_Loading
  6337 ;;		_logRun
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           	psect	text13
  6342  0041AA                     __ptext13:
  6343                           	opt stack 0
  6344  0041AA                     _EEPROM_write:
  6345                           	opt stack 18
  6346                           
  6347                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6348                           
  6349                           ;incstack = 0
  6350  0041AA  84A6               	bsf	4006,2,c	;volatile
  6351                           
  6352                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6353  0041AC  0100               	movlb	0	; () banked
  6354  0041AE  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6355  0041B0  6EAA               	movwf	4010,c	;volatile
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6359  0041B2  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;EEPROM.c: 39: EEDATA = data;
  6363  0041B6  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6367  0041BA  9EA6               	bcf	4006,7,c	;volatile
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6371  0041BC  9CA6               	bcf	4006,6,c	;volatile
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6375  0041BE  9EF2               	bcf	intcon,7,c	;volatile
  6376                           
  6377                           ;EEPROM.c: 45: EECON2 = 0x55;
  6378  0041C0  0E55               	movlw	85
  6379  0041C2  6EA7               	movwf	4007,c	;volatile
  6380                           
  6381                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6382  0041C4  0EAA               	movlw	170
  6383  0041C6  6EA7               	movwf	4007,c	;volatile
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6387  0041C8  82A6               	bsf	4006,1,c	;volatile
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6391  0041CA  8EF2               	bsf	intcon,7,c	;volatile
  6392  0041CC                     l1085:
  6393  0041CC  A8A1               	btfss	4001,4,c	;volatile
  6394  0041CE  D7FE               	goto	l1085
  6395                           
  6396                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6397  0041D0  98A1               	bcf	4001,4,c	;volatile
  6398                           
  6399                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6400  0041D2  94A6               	bcf	4006,2,c	;volatile
  6401                           
  6402                           ;EEPROM.c: 57: if(debug){
  6403  0041D4  0101               	movlb	1	; () banked
  6404  0041D6  512D               	movf	_debug& (0+255),w,b
  6405  0041D8  0101               	movlb	1	; () banked
  6406  0041DA  112E               	iorwf	(_debug+1)& (0+255),w,b
  6407  0041DC  B4D8               	btfsc	status,2,c
  6408  0041DE  0012               	return	
  6409                           
  6410                           ; BSR set to: 1
  6411                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6412  0041E0  0E01               	movlw	1
  6413  0041E2  ECA6  F02B         	call	_lcdInst
  6414  0041E6  0E68               	movlw	104
  6415  0041E8  0100               	movlb	0	; () banked
  6416  0041EA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6417  0041EC  0EE4               	movlw	228
  6418  0041EE                     u9627:
  6419  0041EE  2EE8               	decfsz	wreg,f,c
  6420  0041F0  D7FE               	bra	u9627
  6421  0041F2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6422  0041F4  D7FC               	bra	u9627
  6423  0041F6  F000               	nop	
  6424                           
  6425                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6426  0041F8  0E80               	movlw	128
  6427  0041FA  ECA6  F02B         	call	_lcdInst
  6428                           
  6429                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6430  0041FE  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6431  004202  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6432  004206  EC74  F02B         	call	_EEPROM_read	;wreg free
  6433  00420A  0100               	movlb	0	; () banked
  6434  00420C  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6435  00420E  A4D8               	btfss	status,2,c
  6436  004210  D024               	goto	l7152
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6440  004212  0ED6               	movlw	low STR_66
  6441  004214  0100               	movlb	0	; () banked
  6442  004216  6F8E               	movwf	printf@f& (0+255),b
  6443  004218  0EFA               	movlw	high STR_66
  6444  00421A  0100               	movlb	0	; () banked
  6445  00421C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6446  00421E  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6447  004222  0100               	movlb	0	; () banked
  6448  004224  6B91               	clrf	(?_printf+3)& (0+255),b
  6449  004226  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6450  00422A  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6451  00422E  EC87  F00B         	call	_printf	;wreg free
  6452                           
  6453                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6454  004232  0E00               	movlw	0
  6455  004234  0100               	movlb	0	; () banked
  6456  004236  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6457  004238                     l7144:
  6458                           
  6459                           ; BSR set to: 0
  6460  004238  0E63               	movlw	99
  6461  00423A  0100               	movlb	0	; () banked
  6462  00423C  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6463  00423E  D001               	goto	l7148
  6464  004240  0012               	return	
  6465  004242                     l7148:
  6466                           
  6467                           ; BSR set to: 0
  6468  004242  0E68               	movlw	104
  6469  004244  0100               	movlb	0	; () banked
  6470  004246  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6471  004248  0EE4               	movlw	228
  6472  00424A                     u9637:
  6473  00424A  2EE8               	decfsz	wreg,f,c
  6474  00424C  D7FE               	bra	u9637
  6475  00424E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6476  004250  D7FC               	bra	u9637
  6477  004252  F000               	nop	
  6478  004254  0100               	movlb	0	; () banked
  6479  004256  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6480  004258  D7EF               	goto	l7144
  6481  00425A                     l7152:
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6485  00425A  0EBC               	movlw	low STR_67
  6486  00425C  0100               	movlb	0	; () banked
  6487  00425E  6F8E               	movwf	printf@f& (0+255),b
  6488  004260  0EFF               	movlw	high STR_67
  6489  004262  0100               	movlb	0	; () banked
  6490  004264  6F8F               	movwf	(printf@f+1)& (0+255),b
  6491  004266  EC87  F00B         	call	_printf	;wreg free
  6492  00426A  0E00               	movlw	0
  6493  00426C  0100               	movlb	0	; () banked
  6494  00426E  6FB0               	movwf	EEPROM_write@i_1463& (0+255),b
  6495  004270                     l7156:
  6496                           
  6497                           ; BSR set to: 0
  6498  004270  0E63               	movlw	99
  6499  004272  0100               	movlb	0	; () banked
  6500  004274  65B0               	cpfsgt	EEPROM_write@i_1463& (0+255),b
  6501  004276  D001               	goto	l7160
  6502  004278  0012               	return	
  6503  00427A                     l7160:
  6504                           
  6505                           ; BSR set to: 0
  6506  00427A  0E68               	movlw	104
  6507  00427C  0100               	movlb	0	; () banked
  6508  00427E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6509  004280  0EE4               	movlw	228
  6510  004282                     u9647:
  6511  004282  2EE8               	decfsz	wreg,f,c
  6512  004284  D7FE               	bra	u9647
  6513  004286  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6514  004288  D7FC               	bra	u9647
  6515  00428A  F000               	nop	
  6516  00428C  0100               	movlb	0	; () banked
  6517  00428E  2BB0               	incf	EEPROM_write@i_1463& (0+255),f,b
  6518  004290  D7EF               	goto	l7156
  6519  004292                     __end_of_EEPROM_write:
  6520                           	opt stack 0
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           intcon	equ	0xFF2
  6528                           intcon2	equ	0xFF1
  6529                           intcon3	equ	0xFF0
  6530                           postinc0	equ	0xFEE
  6531                           wreg	equ	0xFE8
  6532                           postdec1	equ	0xFE5
  6533                           fsr1l	equ	0xFE1
  6534                           indf2	equ	0xFDF
  6535                           postinc2	equ	0xFDE
  6536                           postdec2	equ	0xFDD
  6537                           fsr2h	equ	0xFDA
  6538                           fsr2l	equ	0xFD9
  6539                           status	equ	0xFD8
  6540                           
  6541 ;; *************** function _EEPROM_read *****************
  6542 ;; Defined at:
  6543 ;;		line 68 in file "EEPROM.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;  address         2    0[BANK0 ] unsigned short 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;		None
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  1    wreg      unsigned char 
  6550 ;; Registers used:
  6551 ;;		wreg, status,2
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;Total ram usage:        2 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    7
  6564 ;; This function calls:
  6565 ;;		Nothing
  6566 ;; This function is called by:
  6567 ;;		_Loading
  6568 ;;		_EEPROM_write
  6569 ;;		_logRun
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text14
  6574  0056E8                     __ptext14:
  6575                           	opt stack 0
  6576  0056E8                     _EEPROM_read:
  6577                           	opt stack 20
  6578                           
  6579                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6580                           
  6581                           ;incstack = 0
  6582  0056E8  0100               	movlb	0	; () banked
  6583  0056EA  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6584  0056EC  6EAA               	movwf	4010,c	;volatile
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6588  0056EE  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6592  0056F2  9EA6               	bcf	4006,7,c	;volatile
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6596  0056F4  9CA6               	bcf	4006,6,c	;volatile
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6600  0056F6  80A6               	bsf	4006,0,c	;volatile
  6601  0056F8                     l1098:
  6602  0056F8  B0A6               	btfsc	4006,0,c	;volatile
  6603  0056FA  D7FE               	goto	l1098
  6604                           
  6605                           ;EEPROM.c: 81: return EEDATA;
  6606  0056FC  50A8               	movf	4008,w,c	;volatile
  6607  0056FE  0012               	return	
  6608  005700                     __end_of_EEPROM_read:
  6609                           	opt stack 0
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           prodh	equ	0xFF4
  6615                           prodl	equ	0xFF3
  6616                           intcon	equ	0xFF2
  6617                           intcon2	equ	0xFF1
  6618                           intcon3	equ	0xFF0
  6619                           postinc0	equ	0xFEE
  6620                           wreg	equ	0xFE8
  6621                           postdec1	equ	0xFE5
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function _initUI *****************
  6631 ;; Defined at:
  6632 ;;		line 62 in file "UI.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:        0 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:   12
  6653 ;; This function calls:
  6654 ;;		_change_state_to_menu_start
  6655 ;;		_loadRTC
  6656 ;; This function is called by:
  6657 ;;		_main
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text15
  6662  0052D0                     __ptext15:
  6663                           	opt stack 0
  6664  0052D0                     _initUI:
  6665                           	opt stack 18
  6666                           
  6667                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6668                           
  6669                           ;incstack = 0
  6670  0052D0  8EF2               	bsf	intcon,7,c	;volatile
  6671                           
  6672                           ;UI.c: 64: machine_state = UI_state;
  6673  0052D2  0E00               	movlw	0
  6674  0052D4  0100               	movlb	0	; () banked
  6675  0052D6  6FFC               	movwf	_machine_state& (0+255),b
  6676                           
  6677                           ;UI.c: 65: logstate = 0;
  6678  0052D8  0E00               	movlw	0
  6679  0052DA  0100               	movlb	0	; () banked
  6680  0052DC  6FF9               	movwf	(_logstate+1)& (0+255),b
  6681  0052DE  0E00               	movlw	0
  6682  0052E0  6FF8               	movwf	_logstate& (0+255),b
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;UI.c: 67: if(RTCflag){
  6686  0052E2  0100               	movlb	0	; () banked
  6687  0052E4  51EA               	movf	_RTCflag& (0+255),w,b
  6688  0052E6  0100               	movlb	0	; () banked
  6689  0052E8  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6690  0052EA  A4D8               	btfss	status,2,c
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;UI.c: 68: loadRTC();
  6694  0052EC  EC49  F024         	call	_loadRTC	;wreg free
  6695                           
  6696                           ;UI.c: 69: }
  6697                           ;UI.c: 71: change_state_to_menu_start();
  6698  0052F0  EC86  F02A         	call	_change_state_to_menu_start	;wreg free
  6699                           
  6700                           ;UI.c: 72: firstboot = 1;
  6701  0052F4  0E00               	movlw	0
  6702  0052F6  0101               	movlb	1	; () banked
  6703  0052F8  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6704  0052FA  0E01               	movlw	1
  6705  0052FC  6F3B               	movwf	_firstboot& (0+255),b
  6706                           
  6707                           ; BSR set to: 1
  6708  0052FE  0012               	return		;funcret
  6709  005300                     __end_of_initUI:
  6710                           	opt stack 0
  6711                           tblptru	equ	0xFF8
  6712                           tblptrh	equ	0xFF7
  6713                           tblptrl	equ	0xFF6
  6714                           tablat	equ	0xFF5
  6715                           prodh	equ	0xFF4
  6716                           prodl	equ	0xFF3
  6717                           intcon	equ	0xFF2
  6718                           intcon2	equ	0xFF1
  6719                           intcon3	equ	0xFF0
  6720                           postinc0	equ	0xFEE
  6721                           wreg	equ	0xFE8
  6722                           postdec1	equ	0xFE5
  6723                           fsr1l	equ	0xFE1
  6724                           indf2	equ	0xFDF
  6725                           postinc2	equ	0xFDE
  6726                           postdec2	equ	0xFDD
  6727                           fsr2h	equ	0xFDA
  6728                           fsr2l	equ	0xFD9
  6729                           status	equ	0xFD8
  6730                           
  6731 ;; *************** function _loadRTC *****************
  6732 ;; Defined at:
  6733 ;;		line 28 in file "RTC.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  i               2   22[BANK0 ] int 
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;Total ram usage:        3 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    9
  6754 ;; This function calls:
  6755 ;;		_I2C_Master_Init
  6756 ;;		_I2C_Master_Start
  6757 ;;		_I2C_Master_Stop
  6758 ;;		_I2C_Master_Write
  6759 ;; This function is called by:
  6760 ;;		_initUI
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           	psect	text16
  6765  004892                     __ptext16:
  6766                           	opt stack 0
  6767  004892                     _loadRTC:
  6768                           	opt stack 20
  6769                           
  6770                           ;RTC.c: 30: I2C_Master_Init(10000);
  6771                           
  6772                           ; BSR set to: 1
  6773                           ;incstack = 0
  6774  004892  0E10               	movlw	16
  6775  004894  0100               	movlb	0	; () banked
  6776  004896  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6777  004898  0E27               	movlw	39
  6778  00489A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6779  00489C  0E00               	movlw	0
  6780  00489E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6781  0048A0  0E00               	movlw	0
  6782  0048A2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6783  0048A4  EC12  F027         	call	_I2C_Master_Init	;wreg free
  6784                           
  6785                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6786  0048A8  9EF2               	bcf	intcon,7,c	;volatile
  6787                           
  6788                           ;RTC.c: 34: I2C_Master_Start();
  6789  0048AA  ECCC  F02B         	call	_I2C_Master_Start	;wreg free
  6790                           
  6791                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6792  0048AE  0E00               	movlw	0
  6793  0048B0  0100               	movlb	0	; () banked
  6794  0048B2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6795  0048B4  0ED0               	movlw	208
  6796  0048B6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6797  0048B8  ECBA  F02B         	call	_I2C_Master_Write	;wreg free
  6798                           
  6799                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6800  0048BC  0E00               	movlw	0
  6801  0048BE  0100               	movlb	0	; () banked
  6802  0048C0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6803  0048C2  0E00               	movlw	0
  6804  0048C4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6805  0048C6  ECBA  F02B         	call	_I2C_Master_Write	;wreg free
  6806                           
  6807                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6808  0048CA  0E00               	movlw	0
  6809  0048CC  0100               	movlb	0	; () banked
  6810  0048CE  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6811  0048D0  0E00               	movlw	0
  6812  0048D2  6F96               	movwf	loadRTC@i& (0+255),b
  6813  0048D4                     l7306:
  6814                           
  6815                           ; BSR set to: 0
  6816  0048D4  0100               	movlb	0	; () banked
  6817  0048D6  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6818  0048D8  D008               	goto	l7310
  6819  0048DA  0100               	movlb	0	; () banked
  6820  0048DC  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6821  0048DE  E11B               	bnz	l7316
  6822  0048E0  0E07               	movlw	7
  6823  0048E2  0100               	movlb	0	; () banked
  6824  0048E4  5D96               	subwf	loadRTC@i& (0+255),w,b
  6825  0048E6  B0D8               	btfsc	status,0,c
  6826  0048E8  D016               	goto	l7316
  6827  0048EA                     l7310:
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6831  0048EA  0E1C               	movlw	low _time
  6832  0048EC  0100               	movlb	0	; () banked
  6833  0048EE  2596               	addwf	loadRTC@i& (0+255),w,b
  6834  0048F0  6ED9               	movwf	fsr2l,c
  6835  0048F2  0E01               	movlw	high _time
  6836  0048F4  0100               	movlb	0	; () banked
  6837  0048F6  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6838  0048F8  6EDA               	movwf	fsr2h,c
  6839  0048FA  50DF               	movf	indf2,w,c
  6840  0048FC  0100               	movlb	0	; () banked
  6841  0048FE  6F95               	movwf	??_loadRTC& (0+255),b
  6842  004900  0100               	movlb	0	; () banked
  6843  004902  5195               	movf	??_loadRTC& (0+255),w,b
  6844  004904  0100               	movlb	0	; () banked
  6845  004906  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6846  004908  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6847  00490A  ECBA  F02B         	call	_I2C_Master_Write	;wreg free
  6848  00490E  0100               	movlb	0	; () banked
  6849  004910  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6850  004912  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6851  004914  D7DF               	goto	l7306
  6852  004916                     l7316:
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;RTC.c: 39: }
  6856                           ;RTC.c: 40: I2C_Master_Stop();
  6857  004916  ECC8  F02B         	call	_I2C_Master_Stop	;wreg free
  6858                           
  6859                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6860  00491A  8EF2               	bsf	intcon,7,c	;volatile
  6861  00491C  0012               	return		;funcret
  6862  00491E                     __end_of_loadRTC:
  6863                           	opt stack 0
  6864                           tblptru	equ	0xFF8
  6865                           tblptrh	equ	0xFF7
  6866                           tblptrl	equ	0xFF6
  6867                           tablat	equ	0xFF5
  6868                           prodh	equ	0xFF4
  6869                           prodl	equ	0xFF3
  6870                           intcon	equ	0xFF2
  6871                           intcon2	equ	0xFF1
  6872                           intcon3	equ	0xFF0
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           postdec1	equ	0xFE5
  6876                           fsr1l	equ	0xFE1
  6877                           indf2	equ	0xFDF
  6878                           postinc2	equ	0xFDE
  6879                           postdec2	equ	0xFDD
  6880                           fsr2h	equ	0xFDA
  6881                           fsr2l	equ	0xFD9
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function _I2C_Master_Init *****************
  6885 ;; Defined at:
  6886 ;;		line 15 in file "I2C.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  c               4   13[BANK0 ] const unsigned long 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;		None
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      void 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6900 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;Total ram usage:        8 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    8
  6907 ;; This function calls:
  6908 ;;		___lldiv
  6909 ;; This function is called by:
  6910 ;;		_main
  6911 ;;		_loadRTC
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           	psect	text17
  6916  004E24                     __ptext17:
  6917                           	opt stack 0
  6918  004E24                     _I2C_Master_Init:
  6919                           	opt stack 20
  6920                           
  6921                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6922                           
  6923                           ;incstack = 0
  6924  004E24  0E00               	movlw	0
  6925  004E26  6EC7               	movwf	4039,c	;volatile
  6926                           
  6927                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6928  004E28  0E28               	movlw	40
  6929  004E2A  6EC6               	movwf	4038,c	;volatile
  6930                           
  6931                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6932  004E2C  0E00               	movlw	0
  6933  004E2E  6EC5               	movwf	4037,c	;volatile
  6934                           
  6935                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6936  004E30  0E00               	movlw	0
  6937  004E32  0100               	movlb	0	; () banked
  6938  004E34  6F80               	movwf	___lldiv@dividend& (0+255),b
  6939  004E36  0E48               	movlw	72
  6940  004E38  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6941  004E3A  0EE8               	movlw	232
  6942  004E3C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6943  004E3E  0E01               	movlw	1
  6944  004E40  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6945  004E42  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6946  004E46  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6947  004E4A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6948  004E4E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6949  004E52  0E02               	movlw	2
  6950  004E54                     u5565:
  6951  004E54  90D8               	bcf	status,0,c
  6952  004E56  0100               	movlb	0	; () banked
  6953  004E58  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6954  004E5A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6955  004E5C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6956  004E5E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6957  004E60  2EE8               	decfsz	wreg,f,c
  6958  004E62  D7F8               	goto	u5565
  6959  004E64  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6960  004E68  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6961  004E6C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6962  004E70  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6963  004E74  EC45  F023         	call	___lldiv	;wreg free
  6964  004E78  0100               	movlb	0	; () banked
  6965  004E7A  0580               	decf	?___lldiv& (0+255),w,b
  6966  004E7C  6EC8               	movwf	4040,c	;volatile
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;I2C.c: 22: TRISC3 = 1;
  6970  004E7E  8694               	bsf	3988,3,c	;volatile
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;I2C.c: 23: TRISC4 = 1;
  6974  004E80  8894               	bsf	3988,4,c	;volatile
  6975                           
  6976                           ; BSR set to: 0
  6977  004E82  0012               	return		;funcret
  6978  004E84                     __end_of_I2C_Master_Init:
  6979                           	opt stack 0
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           prodh	equ	0xFF4
  6985                           prodl	equ	0xFF3
  6986                           intcon	equ	0xFF2
  6987                           intcon2	equ	0xFF1
  6988                           intcon3	equ	0xFF0
  6989                           postinc0	equ	0xFEE
  6990                           wreg	equ	0xFE8
  6991                           postdec1	equ	0xFE5
  6992                           fsr1l	equ	0xFE1
  6993                           indf2	equ	0xFDF
  6994                           postinc2	equ	0xFDE
  6995                           postdec2	equ	0xFDD
  6996                           fsr2h	equ	0xFDA
  6997                           fsr2l	equ	0xFD9
  6998                           status	equ	0xFD8
  6999                           
  7000 ;; *************** function ___lldiv *****************
  7001 ;; Defined at:
  7002 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7003 ;; Parameters:    Size  Location     Type
  7004 ;;  dividend        4    0[BANK0 ] unsigned long 
  7005 ;;  divisor         4    4[BANK0 ] unsigned long 
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  quotient        4    8[BANK0 ] unsigned long 
  7008 ;;  counter         1   12[BANK0 ] unsigned char 
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  4    0[BANK0 ] unsigned long 
  7011 ;; Registers used:
  7012 ;;		wreg, status,2, status,0
  7013 ;; Tracked objects:
  7014 ;;		On entry : 0/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7018 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;Total ram usage:       13 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    7
  7025 ;; This function calls:
  7026 ;;		Nothing
  7027 ;; This function is called by:
  7028 ;;		_I2C_Master_Init
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           	psect	text18
  7033  00468A                     __ptext18:
  7034                           	opt stack 0
  7035  00468A                     ___lldiv:
  7036                           	opt stack 20
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;incstack = 0
  7040  00468A  0E00               	movlw	0
  7041  00468C  0100               	movlb	0	; () banked
  7042  00468E  6F88               	movwf	___lldiv@quotient& (0+255),b
  7043  004690  0E00               	movlw	0
  7044  004692  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7045  004694  0E00               	movlw	0
  7046  004696  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7047  004698  0E00               	movlw	0
  7048  00469A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7049                           
  7050                           ; BSR set to: 0
  7051  00469C  0100               	movlb	0	; () banked
  7052  00469E  5184               	movf	___lldiv@divisor& (0+255),w,b
  7053  0046A0  0100               	movlb	0	; () banked
  7054  0046A2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7055  0046A4  0100               	movlb	0	; () banked
  7056  0046A6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7057  0046A8  0100               	movlb	0	; () banked
  7058  0046AA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7059  0046AC  B4D8               	btfsc	status,2,c
  7060  0046AE  D042               	goto	l1886
  7061                           
  7062                           ; BSR set to: 0
  7063  0046B0  0E01               	movlw	1
  7064  0046B2  0100               	movlb	0	; () banked
  7065  0046B4  6F8C               	movwf	___lldiv@counter& (0+255),b
  7066  0046B6  D008               	goto	l6710
  7067  0046B8                     l6708:
  7068                           
  7069                           ; BSR set to: 0
  7070  0046B8  0100               	movlb	0	; () banked
  7071  0046BA  90D8               	bcf	status,0,c
  7072  0046BC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7073  0046BE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7074  0046C0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7075  0046C2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7076  0046C4  0100               	movlb	0	; () banked
  7077  0046C6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7078  0046C8                     l6710:
  7079                           
  7080                           ; BSR set to: 0
  7081  0046C8  0100               	movlb	0	; () banked
  7082  0046CA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7083  0046CC  D7F5               	goto	l6708
  7084  0046CE                     l6712:
  7085                           
  7086                           ; BSR set to: 0
  7087  0046CE  0100               	movlb	0	; () banked
  7088  0046D0  90D8               	bcf	status,0,c
  7089  0046D2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7090  0046D4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7091  0046D6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7092  0046D8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7093                           
  7094                           ; BSR set to: 0
  7095  0046DA  0100               	movlb	0	; () banked
  7096  0046DC  5184               	movf	___lldiv@divisor& (0+255),w,b
  7097  0046DE  0100               	movlb	0	; () banked
  7098  0046E0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7099  0046E2  0100               	movlb	0	; () banked
  7100  0046E4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7101  0046E6  0100               	movlb	0	; () banked
  7102  0046E8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7103  0046EA  0100               	movlb	0	; () banked
  7104  0046EC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7105  0046EE  0100               	movlb	0	; () banked
  7106  0046F0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7107  0046F2  0100               	movlb	0	; () banked
  7108  0046F4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7109  0046F6  0100               	movlb	0	; () banked
  7110  0046F8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7111  0046FA  A0D8               	btfss	status,0,c
  7112  0046FC  D012               	goto	l6720
  7113                           
  7114                           ; BSR set to: 0
  7115  0046FE  0100               	movlb	0	; () banked
  7116  004700  5184               	movf	___lldiv@divisor& (0+255),w,b
  7117  004702  0100               	movlb	0	; () banked
  7118  004704  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7119  004706  0100               	movlb	0	; () banked
  7120  004708  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7121  00470A  0100               	movlb	0	; () banked
  7122  00470C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7123  00470E  0100               	movlb	0	; () banked
  7124  004710  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7125  004712  0100               	movlb	0	; () banked
  7126  004714  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7127  004716  0100               	movlb	0	; () banked
  7128  004718  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7129  00471A  0100               	movlb	0	; () banked
  7130  00471C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7131                           
  7132                           ; BSR set to: 0
  7133  00471E  0100               	movlb	0	; () banked
  7134  004720  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7135  004722                     l6720:
  7136                           
  7137                           ; BSR set to: 0
  7138  004722  0100               	movlb	0	; () banked
  7139  004724  90D8               	bcf	status,0,c
  7140  004726  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7141  004728  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7142  00472A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7143  00472C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7144                           
  7145                           ; BSR set to: 0
  7146  00472E  0100               	movlb	0	; () banked
  7147  004730  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7148  004732  D7CD               	goto	l6712
  7149  004734                     l1886:
  7150                           
  7151                           ; BSR set to: 0
  7152  004734  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7153  004738  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7154  00473C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7155  004740  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7156                           
  7157                           ; BSR set to: 0
  7158  004744  0012               	return		;funcret
  7159  004746                     __end_of___lldiv:
  7160                           	opt stack 0
  7161                           tblptru	equ	0xFF8
  7162                           tblptrh	equ	0xFF7
  7163                           tblptrl	equ	0xFF6
  7164                           tablat	equ	0xFF5
  7165                           prodh	equ	0xFF4
  7166                           prodl	equ	0xFF3
  7167                           intcon	equ	0xFF2
  7168                           intcon2	equ	0xFF1
  7169                           intcon3	equ	0xFF0
  7170                           postinc0	equ	0xFEE
  7171                           wreg	equ	0xFE8
  7172                           postdec1	equ	0xFE5
  7173                           fsr1l	equ	0xFE1
  7174                           indf2	equ	0xFDF
  7175                           postinc2	equ	0xFDE
  7176                           postdec2	equ	0xFDD
  7177                           fsr2h	equ	0xFDA
  7178                           fsr2l	equ	0xFD9
  7179                           status	equ	0xFD8
  7180                           
  7181 ;; *************** function _change_state_to_menu_start *****************
  7182 ;; Defined at:
  7183 ;;		line 477 in file "UI.c"
  7184 ;; Parameters:    Size  Location     Type
  7185 ;;		None
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;		None
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  1    wreg      void 
  7190 ;; Registers used:
  7191 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7201 ;;Total ram usage:        0 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:   11
  7204 ;; This function calls:
  7205 ;;		_lcdInst
  7206 ;;		_printRTC
  7207 ;;		_printf
  7208 ;; This function is called by:
  7209 ;;		_initUI
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           	psect	text19
  7214  00550C                     __ptext19:
  7215                           	opt stack 0
  7216  00550C                     _change_state_to_menu_start:
  7217                           	opt stack 18
  7218                           
  7219                           ;UI.c: 478: cur_state = 0;
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;incstack = 0
  7223  00550C  0E00               	movlw	0
  7224  00550E  0100               	movlb	0	; () banked
  7225  005510  6FED               	movwf	(_cur_state+1)& (0+255),b
  7226  005512  0E00               	movlw	0
  7227  005514  6FEC               	movwf	_cur_state& (0+255),b
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;UI.c: 480: lcdInst(0b10000000);;
  7231  005516  0E80               	movlw	128
  7232  005518  ECA6  F02B         	call	_lcdInst
  7233                           
  7234                           ;UI.c: 481: printRTC();
  7235  00551C  EC9F  F014         	call	_printRTC	;wreg free
  7236                           
  7237                           ;UI.c: 482: lcdInst(0b11000000);;
  7238  005520  0EC0               	movlw	192
  7239  005522  ECA6  F02B         	call	_lcdInst
  7240                           
  7241                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7242  005526  0E01               	movlw	low STR_30
  7243  005528  0100               	movlb	0	; () banked
  7244  00552A  6F8E               	movwf	printf@f& (0+255),b
  7245  00552C  0EFE               	movlw	high STR_30
  7246  00552E  0100               	movlb	0	; () banked
  7247  005530  6F8F               	movwf	(printf@f+1)& (0+255),b
  7248  005532  EC87  F00B         	call	_printf	;wreg free
  7249  005536  0012               	return		;funcret
  7250  005538                     __end_of_change_state_to_menu_start:
  7251                           	opt stack 0
  7252                           tblptru	equ	0xFF8
  7253                           tblptrh	equ	0xFF7
  7254                           tblptrl	equ	0xFF6
  7255                           tablat	equ	0xFF5
  7256                           prodh	equ	0xFF4
  7257                           prodl	equ	0xFF3
  7258                           intcon	equ	0xFF2
  7259                           intcon2	equ	0xFF1
  7260                           intcon3	equ	0xFF0
  7261                           postinc0	equ	0xFEE
  7262                           wreg	equ	0xFE8
  7263                           postdec1	equ	0xFE5
  7264                           fsr1l	equ	0xFE1
  7265                           indf2	equ	0xFDF
  7266                           postinc2	equ	0xFDE
  7267                           postdec2	equ	0xFDD
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8
  7271                           
  7272 ;; *************** function _initTime *****************
  7273 ;; Defined at:
  7274 ;;		line 17 in file "RTC.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  s               1    wreg     unsigned char 
  7277 ;;  m               1    0[BANK0 ] unsigned char 
  7278 ;;  h               1    1[BANK0 ] unsigned char 
  7279 ;;  w               1    2[BANK0 ] unsigned char 
  7280 ;;  DD              1    3[BANK0 ] unsigned char 
  7281 ;;  MM              1    4[BANK0 ] unsigned char 
  7282 ;;  YY              1    5[BANK0 ] unsigned char 
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  s               1    6[BANK0 ] unsigned char 
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  1    wreg      void 
  7287 ;; Registers used:
  7288 ;;		wreg
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7294 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;Total ram usage:        7 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:    7
  7301 ;; This function calls:
  7302 ;;		Nothing
  7303 ;; This function is called by:
  7304 ;;		_main
  7305 ;; This function uses a non-reentrant model
  7306 ;;
  7307                           
  7308                           	psect	text20
  7309  005670                     __ptext20:
  7310                           	opt stack 0
  7311  005670                     _initTime:
  7312                           	opt stack 23
  7313                           
  7314                           ;incstack = 0
  7315                           ;initTime@s stored from wreg
  7316  005670  0100               	movlb	0	; () banked
  7317  005672  6F86               	movwf	initTime@s& (0+255),b
  7318                           
  7319                           ;RTC.c: 19: time[0] = s;
  7320  005674  C086  F11C         	movff	initTime@s,_time
  7321                           
  7322                           ;RTC.c: 20: time[1] = m;
  7323  005678  C080  F11D         	movff	initTime@m,_time+1
  7324                           
  7325                           ;RTC.c: 21: time[2] = h;
  7326  00567C  C081  F11E         	movff	initTime@h,_time+2
  7327                           
  7328                           ;RTC.c: 22: time[3] = w;
  7329  005680  C082  F11F         	movff	initTime@w,_time+3
  7330                           
  7331                           ;RTC.c: 23: time[4] = DD;
  7332  005684  C083  F120         	movff	initTime@DD,_time+4
  7333                           
  7334                           ;RTC.c: 24: time[5] = MM;
  7335  005688  C084  F121         	movff	initTime@MM,_time+5
  7336                           
  7337                           ;RTC.c: 25: time[6] = YY;
  7338  00568C  C085  F122         	movff	initTime@YY,_time+6
  7339  005690  0012               	return		;funcret
  7340  005692                     __end_of_initTime:
  7341                           	opt stack 0
  7342                           tblptru	equ	0xFF8
  7343                           tblptrh	equ	0xFF7
  7344                           tblptrl	equ	0xFF6
  7345                           tablat	equ	0xFF5
  7346                           prodh	equ	0xFF4
  7347                           prodl	equ	0xFF3
  7348                           intcon	equ	0xFF2
  7349                           intcon2	equ	0xFF1
  7350                           intcon3	equ	0xFF0
  7351                           postinc0	equ	0xFEE
  7352                           wreg	equ	0xFE8
  7353                           postdec1	equ	0xFE5
  7354                           fsr1l	equ	0xFE1
  7355                           indf2	equ	0xFDF
  7356                           postinc2	equ	0xFDE
  7357                           postdec2	equ	0xFDD
  7358                           fsr2h	equ	0xFDA
  7359                           fsr2l	equ	0xFD9
  7360                           status	equ	0xFD8
  7361                           
  7362 ;; *************** function _initLCD *****************
  7363 ;; Defined at:
  7364 ;;		line 50 in file "lcd.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;		None
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;		None
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  1    wreg      void 
  7371 ;; Registers used:
  7372 ;;		wreg, status,2, status,0, cstack
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7381 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;Total ram usage:        1 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    9
  7385 ;; This function calls:
  7386 ;;		_lcdInst
  7387 ;; This function is called by:
  7388 ;;		_main
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           	psect	text21
  7393  0050CE                     __ptext21:
  7394                           	opt stack 0
  7395  0050CE                     _initLCD:
  7396                           	opt stack 21
  7397                           
  7398                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  7399                           
  7400                           ;incstack = 0
  7401  0050CE  0E9C               	movlw	156
  7402  0050D0  0100               	movlb	0	; () banked
  7403  0050D2  6F83               	movwf	??_initLCD& (0+255),b
  7404  0050D4  0ED7               	movlw	215
  7405  0050D6                     u9657:
  7406  0050D6  2EE8               	decfsz	wreg,f,c
  7407  0050D8  D7FE               	bra	u9657
  7408  0050DA  2F83               	decfsz	??_initLCD& (0+255),f,b
  7409  0050DC  D7FC               	bra	u9657
  7410                           
  7411                           ;lcd.c: 52: lcdInst(0b00110011);
  7412  0050DE  0E33               	movlw	51
  7413  0050E0  ECA6  F02B         	call	_lcdInst
  7414                           
  7415                           ;lcd.c: 53: lcdInst(0b00110010);
  7416  0050E4  0E32               	movlw	50
  7417  0050E6  ECA6  F02B         	call	_lcdInst
  7418                           
  7419                           ;lcd.c: 55: lcdInst(0b00101000);
  7420  0050EA  0E28               	movlw	40
  7421  0050EC  ECA6  F02B         	call	_lcdInst
  7422                           
  7423                           ;lcd.c: 56: lcdInst(0b00001100);
  7424  0050F0  0E0C               	movlw	12
  7425  0050F2  ECA6  F02B         	call	_lcdInst
  7426                           
  7427                           ;lcd.c: 57: lcdInst(0b00000110);
  7428  0050F6  0E06               	movlw	6
  7429  0050F8  ECA6  F02B         	call	_lcdInst
  7430                           
  7431                           ;lcd.c: 58: lcdInst(0b00000001);
  7432  0050FC  0E01               	movlw	1
  7433  0050FE  ECA6  F02B         	call	_lcdInst
  7434                           
  7435                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  7436  005102  0E9C               	movlw	156
  7437  005104  0100               	movlb	0	; () banked
  7438  005106  6F83               	movwf	??_initLCD& (0+255),b
  7439  005108  0ED7               	movlw	215
  7440  00510A                     u9667:
  7441  00510A  2EE8               	decfsz	wreg,f,c
  7442  00510C  D7FE               	bra	u9667
  7443  00510E  2F83               	decfsz	??_initLCD& (0+255),f,b
  7444  005110  D7FC               	bra	u9667
  7445  005112  0012               	return		;funcret
  7446  005114                     __end_of_initLCD:
  7447                           	opt stack 0
  7448                           tblptru	equ	0xFF8
  7449                           tblptrh	equ	0xFF7
  7450                           tblptrl	equ	0xFF6
  7451                           tablat	equ	0xFF5
  7452                           prodh	equ	0xFF4
  7453                           prodl	equ	0xFF3
  7454                           intcon	equ	0xFF2
  7455                           intcon2	equ	0xFF1
  7456                           intcon3	equ	0xFF0
  7457                           postinc0	equ	0xFEE
  7458                           wreg	equ	0xFE8
  7459                           postdec1	equ	0xFE5
  7460                           fsr1l	equ	0xFE1
  7461                           indf2	equ	0xFDF
  7462                           postinc2	equ	0xFDE
  7463                           postdec2	equ	0xFDD
  7464                           fsr2h	equ	0xFDA
  7465                           fsr2l	equ	0xFD9
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _UI *****************
  7469 ;; Defined at:
  7470 ;;		line 76 in file "UI.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;		None
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;  i               1   73[BANK0 ] unsigned char 
  7475 ;;  i               1   85[BANK0 ] unsigned char 
  7476 ;;  i               1   84[BANK0 ] unsigned char 
  7477 ;;  i               1   83[BANK0 ] unsigned char 
  7478 ;;  i               1   82[BANK0 ] unsigned char 
  7479 ;;  i               1   81[BANK0 ] unsigned char 
  7480 ;;  i               1   80[BANK0 ] unsigned char 
  7481 ;;  i               1   79[BANK0 ] unsigned char 
  7482 ;;  i               1   78[BANK0 ] unsigned char 
  7483 ;;  i               1   77[BANK0 ] unsigned char 
  7484 ;;  i               1   76[BANK0 ] unsigned char 
  7485 ;;  i               1   75[BANK0 ] unsigned char 
  7486 ;;  i               1   74[BANK0 ] unsigned char 
  7487 ;;  month           4   86[BANK0 ] unsigned char [4]
  7488 ;;  i               1   72[BANK0 ] unsigned char 
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  1    wreg      void 
  7491 ;; Registers used:
  7492 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7499 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;Total ram usage:       22 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:   11
  7505 ;; This function calls:
  7506 ;;		___awdiv
  7507 ;;		___awmod
  7508 ;;		_change_state_to_menu_12
  7509 ;;		_change_state_to_menu_22
  7510 ;;		_lcdInst
  7511 ;;		_printRTC
  7512 ;;		_printf
  7513 ;;		_strcpy
  7514 ;; This function is called by:
  7515 ;;		_main
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text22
  7520  000012                     __ptext22:
  7521                           	opt stack 0
  7522  000012                     _UI:
  7523                           	opt stack 19
  7524                           
  7525                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7526                           
  7527                           ;incstack = 0
  7528  000012  0E02               	movlw	2
  7529  000014  0100               	movlb	0	; () banked
  7530  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  7531  000018  A4D8               	btfss	status,2,c
  7532  00001A  D086               	goto	l8960
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7536  00001C  0E01               	movlw	1
  7537  00001E  ECA6  F02B         	call	_lcdInst
  7538  000022  0E68               	movlw	104
  7539  000024  0100               	movlb	0	; () banked
  7540  000026  6FC4               	movwf	??_UI& (0+255),b
  7541  000028  0EE4               	movlw	228
  7542  00002A                     u9677:
  7543  00002A  2EE8               	decfsz	wreg,f,c
  7544  00002C  D7FE               	bra	u9677
  7545  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  7546  000030  D7FC               	bra	u9677
  7547  000032  F000               	nop	
  7548                           
  7549                           ;UI.c: 79: lcdInst(0b10000000);;
  7550  000034  0E80               	movlw	128
  7551  000036  ECA6  F02B         	call	_lcdInst
  7552                           
  7553                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7554  00003A  0E69               	movlw	low STR_1
  7555  00003C  0100               	movlb	0	; () banked
  7556  00003E  6F8E               	movwf	printf@f& (0+255),b
  7557  000040  0EFB               	movlw	high STR_1
  7558  000042  0100               	movlb	0	; () banked
  7559  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  7560  000046  0E01               	movlw	1
  7561  000048  0100               	movlb	0	; () banked
  7562  00004A  25FD               	addwf	_sel& (0+255),w,b
  7563  00004C  0100               	movlb	0	; () banked
  7564  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  7565  000050  0100               	movlb	0	; () banked
  7566  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  7567  000054  0E00               	movlw	0
  7568  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7569  000058  EC87  F00B         	call	_printf	;wreg free
  7570                           
  7571                           ;UI.c: 81: lcdInst(0b11000000);;
  7572  00005C  0EC0               	movlw	192
  7573  00005E  ECA6  F02B         	call	_lcdInst
  7574                           
  7575                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7576  000062  0E0E               	movlw	14
  7577  000064  0100               	movlb	0	; () banked
  7578  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7579  000068  0E10               	movlw	16
  7580  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  7581  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  7582  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7583  000074  ECF8  F023         	call	___awmod	;wreg free
  7584  000078  C080  F0C6         	movff	?___awmod,_UI$2448
  7585  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2448+1
  7586                           
  7587                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7588  000080  0E31               	movlw	low STR_2
  7589  000082  0100               	movlb	0	; () banked
  7590  000084  6F8E               	movwf	printf@f& (0+255),b
  7591  000086  0EFF               	movlw	high STR_2
  7592  000088  0100               	movlb	0	; () banked
  7593  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7594  00008C  0E0E               	movlw	14
  7595  00008E  0100               	movlb	0	; () banked
  7596  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7597  000092  0E10               	movlw	16
  7598  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  7599  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  7600  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7601  00009E  ECF8  F023         	call	___awmod	;wreg free
  7602  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  7603  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7604  0000AA  0E00               	movlw	0
  7605  0000AC  0100               	movlb	0	; () banked
  7606  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7607  0000B0  0E3C               	movlw	60
  7608  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  7609  0000B4  ECE6  F022         	call	___awdiv	;wreg free
  7610  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  7611  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  7612  0000C0  C0C6  F080         	movff	_UI$2448,___awmod@dividend
  7613  0000C4  C0C7  F081         	movff	_UI$2448+1,___awmod@dividend+1
  7614  0000C8  0E00               	movlw	0
  7615  0000CA  0100               	movlb	0	; () banked
  7616  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7617  0000CE  0E3C               	movlw	60
  7618  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  7619  0000D2  ECF8  F023         	call	___awmod	;wreg free
  7620  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  7621  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  7622  0000DE  EC87  F00B         	call	_printf	;wreg free
  7623  0000E2                     l180:
  7624  0000E2  B281               	btfsc	3969,1,c	;volatile
  7625  0000E4  D7FE               	goto	l180
  7626  0000E6                     l183:
  7627  0000E6  A281               	btfss	3969,1,c	;volatile
  7628  0000E8  D7FE               	goto	l183
  7629                           
  7630                           ;UI.c: 86: }
  7631                           ;UI.c: 87: if(cur_state == 12){
  7632  0000EA  0E0C               	movlw	12
  7633  0000EC  0100               	movlb	0	; () banked
  7634  0000EE  19EC               	xorwf	_cur_state& (0+255),w,b
  7635  0000F0  0100               	movlb	0	; () banked
  7636  0000F2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7637  0000F4  A4D8               	btfss	status,2,c
  7638  0000F6  D003               	goto	l8954
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;UI.c: 88: change_state_to_menu_12();
  7642  0000F8  ECE4  F028         	call	_change_state_to_menu_12	;wreg free
  7643                           
  7644                           ;UI.c: 89: }
  7645  0000FC  D002               	goto	l188
  7646  0000FE                     l8954:
  7647                           
  7648                           ;UI.c: 90: else{
  7649                           ;UI.c: 91: change_state_to_menu_22();
  7650  0000FE  ECC8  F028         	call	_change_state_to_menu_22	;wreg free
  7651  000102                     l188:
  7652  000102  B281               	btfsc	3969,1,c	;volatile
  7653  000104  D7FE               	goto	l188
  7654                           
  7655                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  7656  000106  0E05               	movlw	5
  7657  000108  0100               	movlb	0	; () banked
  7658  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  7659  00010C  0E0F               	movlw	15
  7660  00010E  0100               	movlb	0	; () banked
  7661  000110  6FC4               	movwf	??_UI& (0+255),b
  7662  000112  0EF1               	movlw	241
  7663  000114                     u9687:
  7664  000114  2EE8               	decfsz	wreg,f,c
  7665  000116  D7FE               	bra	u9687
  7666  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  7667  00011A  D7FC               	bra	u9687
  7668  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  7669  00011E  D7FA               	bra	u9687
  7670                           
  7671                           ;UI.c: 95: machine_state = UI_state;
  7672  000120  0E00               	movlw	0
  7673  000122  0100               	movlb	0	; () banked
  7674  000124  6FFC               	movwf	_machine_state& (0+255),b
  7675                           
  7676                           ;UI.c: 96: }
  7677  000126  D3D0               	goto	l9280
  7678  000128                     l8960:
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;UI.c: 97: else if(cur_state == 0){
  7682  000128  0100               	movlb	0	; () banked
  7683  00012A  51EC               	movf	_cur_state& (0+255),w,b
  7684  00012C  0100               	movlb	0	; () banked
  7685  00012E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7686  000130  A4D8               	btfss	status,2,c
  7687  000132  D3CA               	goto	l9280
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7691  000134  0E00               	movlw	0
  7692  000136  0100               	movlb	0	; () banked
  7693  000138  6FC8               	movwf	UI@i& (0+255),b
  7694  00013A                     l8964:
  7695                           
  7696                           ; BSR set to: 0
  7697  00013A  0E63               	movlw	99
  7698  00013C  0100               	movlb	0	; () banked
  7699  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  7700  000140  D001               	goto	l8968
  7701  000142  D00C               	goto	l8972
  7702  000144                     l8968:
  7703                           
  7704                           ; BSR set to: 0
  7705  000144  0E68               	movlw	104
  7706  000146  0100               	movlb	0	; () banked
  7707  000148  6FC4               	movwf	??_UI& (0+255),b
  7708  00014A  0EE4               	movlw	228
  7709  00014C                     u9697:
  7710  00014C  2EE8               	decfsz	wreg,f,c
  7711  00014E  D7FE               	bra	u9697
  7712  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  7713  000152  D7FC               	bra	u9697
  7714  000154  F000               	nop	
  7715  000156  0100               	movlb	0	; () banked
  7716  000158  2BC8               	incf	UI@i& (0+255),f,b
  7717  00015A  D7EF               	goto	l8964
  7718  00015C                     l8972:
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;UI.c: 99: if(cur_state == 0){
  7722  00015C  0100               	movlb	0	; () banked
  7723  00015E  51EC               	movf	_cur_state& (0+255),w,b
  7724  000160  0100               	movlb	0	; () banked
  7725  000162  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7726  000164  A4D8               	btfss	status,2,c
  7727  000166  D3B0               	goto	l9280
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;UI.c: 100: printRTC();
  7731  000168  EC9F  F014         	call	_printRTC	;wreg free
  7732                           
  7733                           ;UI.c: 101: }
  7734                           ;UI.c: 102: }
  7735                           ;UI.c: 103: while(logstate){
  7736  00016C  D3AD               	goto	l9280
  7737  00016E                     l8976:
  7738                           
  7739                           ;UI.c: 105: if(!log_completion){
  7740  00016E  5063               	movf	_log_completion,w,c
  7741  000170  1064               	iorwf	_log_completion+1,w,c
  7742  000172  A4D8               	btfss	status,2,c
  7743  000174  D041               	goto	l9006
  7744                           
  7745                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7746  000176  0E01               	movlw	1
  7747  000178  ECA6  F02B         	call	_lcdInst
  7748  00017C  0E68               	movlw	104
  7749  00017E  0100               	movlb	0	; () banked
  7750  000180  6FC4               	movwf	??_UI& (0+255),b
  7751  000182  0EE4               	movlw	228
  7752  000184                     u9707:
  7753  000184  2EE8               	decfsz	wreg,f,c
  7754  000186  D7FE               	bra	u9707
  7755  000188  2FC4               	decfsz	??_UI& (0+255),f,b
  7756  00018A  D7FC               	bra	u9707
  7757  00018C  F000               	nop	
  7758                           
  7759                           ;UI.c: 107: lcdInst(0b10000000);;
  7760  00018E  0E80               	movlw	128
  7761  000190  ECA6  F02B         	call	_lcdInst
  7762                           
  7763                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  7764  000194  0E57               	movlw	low STR_3
  7765  000196  0100               	movlb	0	; () banked
  7766  000198  6F8E               	movwf	printf@f& (0+255),b
  7767  00019A  0EFB               	movlw	high STR_3
  7768  00019C  0100               	movlb	0	; () banked
  7769  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7770  0001A0  C0F4  F090         	movff	_log,?_printf+2
  7771  0001A4  C0F5  F091         	movff	_log+1,?_printf+3
  7772  0001A8  EC87  F00B         	call	_printf	;wreg free
  7773                           
  7774                           ;UI.c: 109: lcdInst(0b11000000);;
  7775  0001AC  0EC0               	movlw	192
  7776  0001AE  ECA6  F02B         	call	_lcdInst
  7777                           
  7778                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  7779  0001B2  0E54               	movlw	low STR_4
  7780  0001B4  0100               	movlb	0	; () banked
  7781  0001B6  6F8E               	movwf	printf@f& (0+255),b
  7782  0001B8  0EFE               	movlw	high STR_4
  7783  0001BA  0100               	movlb	0	; () banked
  7784  0001BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7785  0001BE  EC87  F00B         	call	_printf	;wreg free
  7786  0001C2                     l8990:
  7787  0001C2  0E00               	movlw	0
  7788  0001C4  0100               	movlb	0	; () banked
  7789  0001C6  6FC9               	movwf	UI@i_409& (0+255),b
  7790  0001C8                     l8992:
  7791                           
  7792                           ; BSR set to: 0
  7793  0001C8  0E63               	movlw	99
  7794  0001CA  0100               	movlb	0	; () banked
  7795  0001CC  65C9               	cpfsgt	UI@i_409& (0+255),b
  7796  0001CE  D001               	goto	l8996
  7797  0001D0  D00C               	goto	l9000
  7798  0001D2                     l8996:
  7799                           
  7800                           ; BSR set to: 0
  7801  0001D2  0E68               	movlw	104
  7802  0001D4  0100               	movlb	0	; () banked
  7803  0001D6  6FC4               	movwf	??_UI& (0+255),b
  7804  0001D8  0EE4               	movlw	228
  7805  0001DA                     u9717:
  7806  0001DA  2EE8               	decfsz	wreg,f,c
  7807  0001DC  D7FE               	bra	u9717
  7808  0001DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7809  0001E0  D7FC               	bra	u9717
  7810  0001E2  F000               	nop	
  7811  0001E4  0100               	movlb	0	; () banked
  7812  0001E6  2BC9               	incf	UI@i_409& (0+255),f,b
  7813  0001E8  D7EF               	goto	l8992
  7814  0001EA                     l9000:
  7815                           
  7816                           ; BSR set to: 0
  7817  0001EA  0100               	movlb	0	; () banked
  7818  0001EC  51F8               	movf	_logstate& (0+255),w,b
  7819  0001EE  0100               	movlb	0	; () banked
  7820  0001F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7821  0001F2  B4D8               	btfsc	status,2,c
  7822  0001F4  0012               	return	
  7823  0001F6  D7E5               	goto	l8990
  7824  0001F8                     l9006:
  7825                           
  7826                           ;UI.c: 114: else{
  7827                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7828  0001F8  0E01               	movlw	1
  7829  0001FA  ECA6  F02B         	call	_lcdInst
  7830  0001FE  0E68               	movlw	104
  7831  000200  0100               	movlb	0	; () banked
  7832  000202  6FC4               	movwf	??_UI& (0+255),b
  7833  000204  0EE4               	movlw	228
  7834  000206                     u9727:
  7835  000206  2EE8               	decfsz	wreg,f,c
  7836  000208  D7FE               	bra	u9727
  7837  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  7838  00020C  D7FC               	bra	u9727
  7839  00020E  F000               	nop	
  7840                           
  7841                           ;UI.c: 116: lcdInst(0b10000000);;
  7842  000210  0E80               	movlw	128
  7843  000212  ECA6  F02B         	call	_lcdInst
  7844                           
  7845                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  7846  000216  0E57               	movlw	low STR_3
  7847  000218  0100               	movlb	0	; () banked
  7848  00021A  6F8E               	movwf	printf@f& (0+255),b
  7849  00021C  0EFB               	movlw	high STR_3
  7850  00021E  0100               	movlb	0	; () banked
  7851  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  7852  000222  C0F4  F090         	movff	_log,?_printf+2
  7853  000226  C0F5  F091         	movff	_log+1,?_printf+3
  7854  00022A  EC87  F00B         	call	_printf	;wreg free
  7855                           
  7856                           ;UI.c: 118: lcdInst(0b11000000);;
  7857  00022E  0EC0               	movlw	192
  7858  000230  ECA6  F02B         	call	_lcdInst
  7859                           
  7860                           ;UI.c: 119: printf("PAUSE < | BACK >");
  7861  000234  0EF0               	movlw	low STR_6
  7862  000236  0100               	movlb	0	; () banked
  7863  000238  6F8E               	movwf	printf@f& (0+255),b
  7864  00023A  0EFD               	movlw	high STR_6
  7865  00023C  0100               	movlb	0	; () banked
  7866  00023E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7867  000240  EC87  F00B         	call	_printf	;wreg free
  7868                           
  7869                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7870  000244  0E00               	movlw	0
  7871  000246  0100               	movlb	0	; () banked
  7872  000248  6FCA               	movwf	UI@i_412& (0+255),b
  7873  00024A                     l9020:
  7874                           
  7875                           ; BSR set to: 0
  7876  00024A  0E63               	movlw	99
  7877  00024C  0100               	movlb	0	; () banked
  7878  00024E  65CA               	cpfsgt	UI@i_412& (0+255),b
  7879  000250  D001               	goto	l9024
  7880  000252  D00C               	goto	l9028
  7881  000254                     l9024:
  7882                           
  7883                           ; BSR set to: 0
  7884  000254  0E68               	movlw	104
  7885  000256  0100               	movlb	0	; () banked
  7886  000258  6FC4               	movwf	??_UI& (0+255),b
  7887  00025A  0EE4               	movlw	228
  7888  00025C                     u9737:
  7889  00025C  2EE8               	decfsz	wreg,f,c
  7890  00025E  D7FE               	bra	u9737
  7891  000260  2FC4               	decfsz	??_UI& (0+255),f,b
  7892  000262  D7FC               	bra	u9737
  7893  000264  F000               	nop	
  7894  000266  0100               	movlb	0	; () banked
  7895  000268  2BCA               	incf	UI@i_412& (0+255),f,b
  7896  00026A  D7EF               	goto	l9020
  7897  00026C                     l9028:
  7898                           
  7899                           ; BSR set to: 0
  7900  00026C  0100               	movlb	0	; () banked
  7901  00026E  51F8               	movf	_logstate& (0+255),w,b
  7902  000270  0100               	movlb	0	; () banked
  7903  000272  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7904  000274  B4D8               	btfsc	status,2,c
  7905  000276  0012               	return	
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7909                           
  7910                           ; BSR set to: 0
  7911                           
  7912                           ; BSR set to: 0
  7913  000278  0E00               	movlw	0
  7914  00027A  0100               	movlb	0	; () banked
  7915  00027C  6FCB               	movwf	UI@i_413& (0+255),b
  7916  00027E                     l9034:
  7917                           
  7918                           ; BSR set to: 0
  7919  00027E  0E63               	movlw	99
  7920  000280  0100               	movlb	0	; () banked
  7921  000282  65CB               	cpfsgt	UI@i_413& (0+255),b
  7922  000284  D001               	goto	l9038
  7923  000286  D00C               	goto	l9042
  7924  000288                     l9038:
  7925                           
  7926                           ; BSR set to: 0
  7927  000288  0E68               	movlw	104
  7928  00028A  0100               	movlb	0	; () banked
  7929  00028C  6FC4               	movwf	??_UI& (0+255),b
  7930  00028E  0EE4               	movlw	228
  7931  000290                     u9747:
  7932  000290  2EE8               	decfsz	wreg,f,c
  7933  000292  D7FE               	bra	u9747
  7934  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  7935  000296  D7FC               	bra	u9747
  7936  000298  F000               	nop	
  7937  00029A  0100               	movlb	0	; () banked
  7938  00029C  2BCB               	incf	UI@i_413& (0+255),f,b
  7939  00029E  D7EF               	goto	l9034
  7940  0002A0                     l9042:
  7941                           
  7942                           ; BSR set to: 0
  7943  0002A0  0100               	movlb	0	; () banked
  7944  0002A2  51F8               	movf	_logstate& (0+255),w,b
  7945  0002A4  0100               	movlb	0	; () banked
  7946  0002A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7947  0002A8  B4D8               	btfsc	status,2,c
  7948  0002AA  0012               	return	
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7952                           
  7953                           ; BSR set to: 0
  7954                           
  7955                           ; BSR set to: 0
  7956  0002AC  0E01               	movlw	1
  7957  0002AE  ECA6  F02B         	call	_lcdInst
  7958  0002B2  0E68               	movlw	104
  7959  0002B4  0100               	movlb	0	; () banked
  7960  0002B6  6FC4               	movwf	??_UI& (0+255),b
  7961  0002B8  0EE4               	movlw	228
  7962  0002BA                     u9757:
  7963  0002BA  2EE8               	decfsz	wreg,f,c
  7964  0002BC  D7FE               	bra	u9757
  7965  0002BE  2FC4               	decfsz	??_UI& (0+255),f,b
  7966  0002C0  D7FC               	bra	u9757
  7967  0002C2  F000               	nop	
  7968                           
  7969                           ;UI.c: 125: lcdInst(0b10000000);;
  7970  0002C4  0E80               	movlw	128
  7971  0002C6  ECA6  F02B         	call	_lcdInst
  7972                           
  7973                           ;UI.c: 126: printf("START:");
  7974  0002CA  0EC3               	movlw	low STR_7
  7975  0002CC  0100               	movlb	0	; () banked
  7976  0002CE  6F8E               	movwf	printf@f& (0+255),b
  7977  0002D0  0EFF               	movlw	high STR_7
  7978  0002D2  0100               	movlb	0	; () banked
  7979  0002D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7980  0002D6  EC87  F00B         	call	_printf	;wreg free
  7981                           
  7982                           ;UI.c: 127: lcdInst(0b11000000);;
  7983  0002DA  0EC0               	movlw	192
  7984  0002DC  ECA6  F02B         	call	_lcdInst
  7985                           
  7986                           ;UI.c: 128: char month[] = "MMM";
  7987  0002E0  C147  F0D6         	movff	UI@F3241,UI@month
  7988  0002E4  C148  F0D7         	movff	UI@F3241+1,UI@month+1
  7989  0002E8  C149  F0D8         	movff	UI@F3241+2,UI@month+2
  7990  0002EC  C14A  F0D9         	movff	UI@F3241+3,UI@month+3
  7991                           
  7992                           ;UI.c: 129: switch(log_startTime[5]){
  7993  0002F0  D0C3               	goto	l9086
  7994  0002F2                     l9058:
  7995                           
  7996                           ;UI.c: 131: strcpy(month, "JAN");
  7997  0002F2  0ED6               	movlw	low UI@month
  7998  0002F4  0100               	movlb	0	; () banked
  7999  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  8000  0002F8  0E00               	movlw	high UI@month
  8001  0002FA  0100               	movlb	0	; () banked
  8002  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8003  0002FE  0EDA               	movlw	low STR_8
  8004  000300  0100               	movlb	0	; () banked
  8005  000302  6F82               	movwf	strcpy@from& (0+255),b
  8006  000304  0EFF               	movlw	high STR_8
  8007  000306  0100               	movlb	0	; () banked
  8008  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8009  00030A  EC00  F029         	call	_strcpy	;wreg free
  8010                           
  8011                           ;UI.c: 132: break;
  8012  00030E  D0E6               	goto	l9088
  8013  000310                     l9060:
  8014                           
  8015                           ;UI.c: 134: strcpy(month, "FEB");
  8016  000310  0ED6               	movlw	low UI@month
  8017  000312  0100               	movlb	0	; () banked
  8018  000314  6F80               	movwf	strcpy@to& (0+255),b
  8019  000316  0E00               	movlw	high UI@month
  8020  000318  0100               	movlb	0	; () banked
  8021  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8022  00031C  0ECA               	movlw	low STR_9
  8023  00031E  0100               	movlb	0	; () banked
  8024  000320  6F82               	movwf	strcpy@from& (0+255),b
  8025  000322  0EFF               	movlw	high STR_9
  8026  000324  0100               	movlb	0	; () banked
  8027  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8028  000328  EC00  F029         	call	_strcpy	;wreg free
  8029                           
  8030                           ;UI.c: 135: break;
  8031  00032C  D0D7               	goto	l9088
  8032  00032E                     l9062:
  8033                           
  8034                           ;UI.c: 137: strcpy(month, "MAR");
  8035  00032E  0ED6               	movlw	low UI@month
  8036  000330  0100               	movlb	0	; () banked
  8037  000332  6F80               	movwf	strcpy@to& (0+255),b
  8038  000334  0E00               	movlw	high UI@month
  8039  000336  0100               	movlb	0	; () banked
  8040  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8041  00033A  0EE6               	movlw	low STR_10
  8042  00033C  0100               	movlb	0	; () banked
  8043  00033E  6F82               	movwf	strcpy@from& (0+255),b
  8044  000340  0EFF               	movlw	high STR_10
  8045  000342  0100               	movlb	0	; () banked
  8046  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8047  000346  EC00  F029         	call	_strcpy	;wreg free
  8048                           
  8049                           ;UI.c: 138: break;
  8050  00034A  D0C8               	goto	l9088
  8051  00034C                     l9064:
  8052                           
  8053                           ;UI.c: 140: strcpy(month, "APR");
  8054  00034C  0ED6               	movlw	low UI@month
  8055  00034E  0100               	movlb	0	; () banked
  8056  000350  6F80               	movwf	strcpy@to& (0+255),b
  8057  000352  0E00               	movlw	high UI@month
  8058  000354  0100               	movlb	0	; () banked
  8059  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8060  000358  0EEA               	movlw	low STR_11
  8061  00035A  0100               	movlb	0	; () banked
  8062  00035C  6F82               	movwf	strcpy@from& (0+255),b
  8063  00035E  0EFF               	movlw	high STR_11
  8064  000360  0100               	movlb	0	; () banked
  8065  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8066  000364  EC00  F029         	call	_strcpy	;wreg free
  8067                           
  8068                           ;UI.c: 141: break;
  8069  000368  D0B9               	goto	l9088
  8070  00036A                     l9066:
  8071                           
  8072                           ;UI.c: 143: strcpy(month, "MAY");
  8073  00036A  0ED6               	movlw	low UI@month
  8074  00036C  0100               	movlb	0	; () banked
  8075  00036E  6F80               	movwf	strcpy@to& (0+255),b
  8076  000370  0E00               	movlw	high UI@month
  8077  000372  0100               	movlb	0	; () banked
  8078  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8079  000376  0EFA               	movlw	low STR_12
  8080  000378  0100               	movlb	0	; () banked
  8081  00037A  6F82               	movwf	strcpy@from& (0+255),b
  8082  00037C  0EFF               	movlw	high STR_12
  8083  00037E  0100               	movlb	0	; () banked
  8084  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8085  000382  EC00  F029         	call	_strcpy	;wreg free
  8086                           
  8087                           ;UI.c: 144: break;
  8088  000386  D0AA               	goto	l9088
  8089  000388                     l9068:
  8090                           
  8091                           ;UI.c: 146: strcpy(month, "JUN");
  8092  000388  0ED6               	movlw	low UI@month
  8093  00038A  0100               	movlb	0	; () banked
  8094  00038C  6F80               	movwf	strcpy@to& (0+255),b
  8095  00038E  0E00               	movlw	high UI@month
  8096  000390  0100               	movlb	0	; () banked
  8097  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8098  000394  0EDE               	movlw	low STR_13
  8099  000396  0100               	movlb	0	; () banked
  8100  000398  6F82               	movwf	strcpy@from& (0+255),b
  8101  00039A  0EFF               	movlw	high STR_13
  8102  00039C  0100               	movlb	0	; () banked
  8103  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8104  0003A0  EC00  F029         	call	_strcpy	;wreg free
  8105                           
  8106                           ;UI.c: 147: break;
  8107  0003A4  D09B               	goto	l9088
  8108  0003A6                     l9070:
  8109                           
  8110                           ;UI.c: 149: strcpy(month, "JUL");
  8111  0003A6  0ED6               	movlw	low UI@month
  8112  0003A8  0100               	movlb	0	; () banked
  8113  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  8114  0003AC  0E00               	movlw	high UI@month
  8115  0003AE  0100               	movlb	0	; () banked
  8116  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8117  0003B2  0ED6               	movlw	low STR_14
  8118  0003B4  0100               	movlb	0	; () banked
  8119  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  8120  0003B8  0EFF               	movlw	high STR_14
  8121  0003BA  0100               	movlb	0	; () banked
  8122  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8123  0003BE  EC00  F029         	call	_strcpy	;wreg free
  8124                           
  8125                           ;UI.c: 150: break;
  8126  0003C2  D08C               	goto	l9088
  8127  0003C4                     l9072:
  8128                           
  8129                           ;UI.c: 152: strcpy(month, "AUG");
  8130  0003C4  0ED6               	movlw	low UI@month
  8131  0003C6  0100               	movlb	0	; () banked
  8132  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  8133  0003CA  0E00               	movlw	high UI@month
  8134  0003CC  0100               	movlb	0	; () banked
  8135  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8136  0003D0  0ED2               	movlw	low STR_15
  8137  0003D2  0100               	movlb	0	; () banked
  8138  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  8139  0003D6  0EFF               	movlw	high STR_15
  8140  0003D8  0100               	movlb	0	; () banked
  8141  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8142  0003DC  EC00  F029         	call	_strcpy	;wreg free
  8143                           
  8144                           ;UI.c: 153: break;
  8145  0003E0  D07D               	goto	l9088
  8146  0003E2                     l9074:
  8147                           
  8148                           ;UI.c: 155: strcpy(month, "SEP");
  8149  0003E2  0ED6               	movlw	low UI@month
  8150  0003E4  0100               	movlb	0	; () banked
  8151  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  8152  0003E8  0E00               	movlw	high UI@month
  8153  0003EA  0100               	movlb	0	; () banked
  8154  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8155  0003EE  0EE2               	movlw	low STR_16
  8156  0003F0  0100               	movlb	0	; () banked
  8157  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  8158  0003F4  0EFF               	movlw	high STR_16
  8159  0003F6  0100               	movlb	0	; () banked
  8160  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8161  0003FA  EC00  F029         	call	_strcpy	;wreg free
  8162                           
  8163                           ;UI.c: 156: break;
  8164  0003FE  D06E               	goto	l9088
  8165  000400                     l9076:
  8166                           
  8167                           ;UI.c: 158: strcpy(month, "OCT");
  8168  000400  0ED6               	movlw	low UI@month
  8169  000402  0100               	movlb	0	; () banked
  8170  000404  6F80               	movwf	strcpy@to& (0+255),b
  8171  000406  0E00               	movlw	high UI@month
  8172  000408  0100               	movlb	0	; () banked
  8173  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8174  00040C  0EF2               	movlw	low STR_17
  8175  00040E  0100               	movlb	0	; () banked
  8176  000410  6F82               	movwf	strcpy@from& (0+255),b
  8177  000412  0EFF               	movlw	high STR_17
  8178  000414  0100               	movlb	0	; () banked
  8179  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8180  000418  EC00  F029         	call	_strcpy	;wreg free
  8181                           
  8182                           ;UI.c: 159: break;
  8183  00041C  D05F               	goto	l9088
  8184  00041E                     l9078:
  8185                           
  8186                           ;UI.c: 161: strcpy(month, "NOV");
  8187  00041E  0ED6               	movlw	low UI@month
  8188  000420  0100               	movlb	0	; () banked
  8189  000422  6F80               	movwf	strcpy@to& (0+255),b
  8190  000424  0E00               	movlw	high UI@month
  8191  000426  0100               	movlb	0	; () banked
  8192  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8193  00042A  0EF6               	movlw	low STR_18
  8194  00042C  0100               	movlb	0	; () banked
  8195  00042E  6F82               	movwf	strcpy@from& (0+255),b
  8196  000430  0EFF               	movlw	high STR_18
  8197  000432  0100               	movlb	0	; () banked
  8198  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8199  000436  EC00  F029         	call	_strcpy	;wreg free
  8200                           
  8201                           ;UI.c: 162: break;
  8202  00043A  D050               	goto	l9088
  8203  00043C                     l9080:
  8204                           
  8205                           ;UI.c: 164: strcpy(month, "DEC");
  8206  00043C  0ED6               	movlw	low UI@month
  8207  00043E  0100               	movlb	0	; () banked
  8208  000440  6F80               	movwf	strcpy@to& (0+255),b
  8209  000442  0E00               	movlw	high UI@month
  8210  000444  0100               	movlb	0	; () banked
  8211  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8212  000448  0ECE               	movlw	low STR_19
  8213  00044A  0100               	movlb	0	; () banked
  8214  00044C  6F82               	movwf	strcpy@from& (0+255),b
  8215  00044E  0EFF               	movlw	high STR_19
  8216  000450  0100               	movlb	0	; () banked
  8217  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8218  000454  EC00  F029         	call	_strcpy	;wreg free
  8219                           
  8220                           ;UI.c: 165: break;
  8221  000458  D041               	goto	l9088
  8222  00045A                     l9082:
  8223                           
  8224                           ;UI.c: 167: strcpy(month, "ERR");
  8225  00045A  0ED6               	movlw	low UI@month
  8226  00045C  0100               	movlb	0	; () banked
  8227  00045E  6F80               	movwf	strcpy@to& (0+255),b
  8228  000460  0E00               	movlw	high UI@month
  8229  000462  0100               	movlb	0	; () banked
  8230  000464  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8231  000466  0EEE               	movlw	low STR_20
  8232  000468  0100               	movlb	0	; () banked
  8233  00046A  6F82               	movwf	strcpy@from& (0+255),b
  8234  00046C  0EFF               	movlw	high STR_20
  8235  00046E  0100               	movlb	0	; () banked
  8236  000470  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8237  000472  EC00  F029         	call	_strcpy	;wreg free
  8238                           
  8239                           ;UI.c: 169: }
  8240                           
  8241                           ;UI.c: 168: break;
  8242  000476  D032               	goto	l9088
  8243  000478                     l9086:
  8244  000478  EE21  F00A         	lfsr	2,_log_startTime+10
  8245  00047C  CFDE F0C4          	movff	postinc2,??_UI
  8246  000480  CFDD F0C5          	movff	postdec2,??_UI+1
  8247                           
  8248                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8249                           ; Switch size 1, requested type "space"
  8250                           ; Number of cases is 1, Range of values is 0 to 0
  8251                           ; switch strategies available:
  8252                           ; Name         Instructions Cycles
  8253                           ; simple_byte            4     3 (average)
  8254                           ;	Chosen strategy is simple_byte
  8255  000484  0100               	movlb	0	; () banked
  8256  000486  51C5               	movf	(??_UI+1)& (0+255),w,b
  8257  000488  0A00               	xorlw	0	; case 0
  8258  00048A  A4D8               	btfss	status,2,c
  8259  00048C  D7E6               	goto	l9082
  8260                           
  8261                           ; BSR set to: 0
  8262                           ; Switch size 1, requested type "space"
  8263                           ; Number of cases is 12, Range of values is 1 to 12
  8264                           ; switch strategies available:
  8265                           ; Name         Instructions Cycles
  8266                           ; simple_byte           37    19 (average)
  8267                           ;	Chosen strategy is simple_byte
  8268  00048E  0100               	movlb	0	; () banked
  8269  000490  51C4               	movf	??_UI& (0+255),w,b
  8270  000492  0A01               	xorlw	1	; case 1
  8271  000494  B4D8               	btfsc	status,2,c
  8272  000496  D72D               	goto	l9058
  8273  000498  0A03               	xorlw	3	; case 2
  8274  00049A  B4D8               	btfsc	status,2,c
  8275  00049C  D739               	goto	l9060
  8276  00049E  0A01               	xorlw	1	; case 3
  8277  0004A0  B4D8               	btfsc	status,2,c
  8278  0004A2  D745               	goto	l9062
  8279  0004A4  0A07               	xorlw	7	; case 4
  8280  0004A6  B4D8               	btfsc	status,2,c
  8281  0004A8  D751               	goto	l9064
  8282  0004AA  0A01               	xorlw	1	; case 5
  8283  0004AC  B4D8               	btfsc	status,2,c
  8284  0004AE  D75D               	goto	l9066
  8285  0004B0  0A03               	xorlw	3	; case 6
  8286  0004B2  B4D8               	btfsc	status,2,c
  8287  0004B4  D769               	goto	l9068
  8288  0004B6  0A01               	xorlw	1	; case 7
  8289  0004B8  B4D8               	btfsc	status,2,c
  8290  0004BA  D775               	goto	l9070
  8291  0004BC  0A0F               	xorlw	15	; case 8
  8292  0004BE  B4D8               	btfsc	status,2,c
  8293  0004C0  D781               	goto	l9072
  8294  0004C2  0A01               	xorlw	1	; case 9
  8295  0004C4  B4D8               	btfsc	status,2,c
  8296  0004C6  D78D               	goto	l9074
  8297  0004C8  0A03               	xorlw	3	; case 10
  8298  0004CA  B4D8               	btfsc	status,2,c
  8299  0004CC  D799               	goto	l9076
  8300  0004CE  0A01               	xorlw	1	; case 11
  8301  0004D0  B4D8               	btfsc	status,2,c
  8302  0004D2  D7A5               	goto	l9078
  8303  0004D4  0A07               	xorlw	7	; case 12
  8304  0004D6  B4D8               	btfsc	status,2,c
  8305  0004D8  D7B1               	goto	l9080
  8306  0004DA  D7BF               	goto	l9082
  8307  0004DC                     l9088:
  8308                           
  8309                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8310  0004DC  0EBE               	movlw	low STR_21
  8311  0004DE  0100               	movlb	0	; () banked
  8312  0004E0  6F8E               	movwf	printf@f& (0+255),b
  8313  0004E2  0EFA               	movlw	high STR_21
  8314  0004E4  0100               	movlb	0	; () banked
  8315  0004E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8316  0004E8  C108  F090         	movff	_log_startTime+8,?_printf+2
  8317  0004EC  C109  F091         	movff	_log_startTime+9,?_printf+3
  8318  0004F0  0ED6               	movlw	low UI@month
  8319  0004F2  0100               	movlb	0	; () banked
  8320  0004F4  6F92               	movwf	(?_printf+4)& (0+255),b
  8321  0004F6  0E00               	movlw	high UI@month
  8322  0004F8  0100               	movlb	0	; () banked
  8323  0004FA  6F93               	movwf	(?_printf+5)& (0+255),b
  8324  0004FC  C104  F094         	movff	_log_startTime+4,?_printf+6
  8325  000500  C105  F095         	movff	_log_startTime+5,?_printf+7
  8326  000504  C102  F096         	movff	_log_startTime+2,?_printf+8
  8327  000508  C103  F097         	movff	_log_startTime+3,?_printf+9
  8328  00050C  C100  F098         	movff	_log_startTime,?_printf+10
  8329  000510  C101  F099         	movff	_log_startTime+1,?_printf+11
  8330  000514  EC87  F00B         	call	_printf	;wreg free
  8331                           
  8332                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8333  000518  0E00               	movlw	0
  8334  00051A  0100               	movlb	0	; () banked
  8335  00051C  6FCC               	movwf	UI@i_431& (0+255),b
  8336  00051E                     l9092:
  8337                           
  8338                           ; BSR set to: 0
  8339  00051E  0E63               	movlw	99
  8340  000520  0100               	movlb	0	; () banked
  8341  000522  65CC               	cpfsgt	UI@i_431& (0+255),b
  8342  000524  D001               	goto	l9096
  8343  000526  D00C               	goto	l9100
  8344  000528                     l9096:
  8345                           
  8346                           ; BSR set to: 0
  8347  000528  0E68               	movlw	104
  8348  00052A  0100               	movlb	0	; () banked
  8349  00052C  6FC4               	movwf	??_UI& (0+255),b
  8350  00052E  0EE4               	movlw	228
  8351  000530                     u9767:
  8352  000530  2EE8               	decfsz	wreg,f,c
  8353  000532  D7FE               	bra	u9767
  8354  000534  2FC4               	decfsz	??_UI& (0+255),f,b
  8355  000536  D7FC               	bra	u9767
  8356  000538  F000               	nop	
  8357  00053A  0100               	movlb	0	; () banked
  8358  00053C  2BCC               	incf	UI@i_431& (0+255),f,b
  8359  00053E  D7EF               	goto	l9092
  8360  000540                     l9100:
  8361                           
  8362                           ; BSR set to: 0
  8363  000540  0100               	movlb	0	; () banked
  8364  000542  51F8               	movf	_logstate& (0+255),w,b
  8365  000544  0100               	movlb	0	; () banked
  8366  000546  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8367  000548  B4D8               	btfsc	status,2,c
  8368  00054A  0012               	return	
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8372                           
  8373                           ; BSR set to: 0
  8374                           
  8375                           ; BSR set to: 0
  8376  00054C  0E00               	movlw	0
  8377  00054E  0100               	movlb	0	; () banked
  8378  000550  6FCD               	movwf	UI@i_432& (0+255),b
  8379  000552                     l9106:
  8380                           
  8381                           ; BSR set to: 0
  8382  000552  0E63               	movlw	99
  8383  000554  0100               	movlb	0	; () banked
  8384  000556  65CD               	cpfsgt	UI@i_432& (0+255),b
  8385  000558  D001               	goto	l9110
  8386  00055A  D00C               	goto	l9114
  8387  00055C                     l9110:
  8388                           
  8389                           ; BSR set to: 0
  8390  00055C  0E68               	movlw	104
  8391  00055E  0100               	movlb	0	; () banked
  8392  000560  6FC4               	movwf	??_UI& (0+255),b
  8393  000562  0EE4               	movlw	228
  8394  000564                     u9777:
  8395  000564  2EE8               	decfsz	wreg,f,c
  8396  000566  D7FE               	bra	u9777
  8397  000568  2FC4               	decfsz	??_UI& (0+255),f,b
  8398  00056A  D7FC               	bra	u9777
  8399  00056C  F000               	nop	
  8400  00056E  0100               	movlb	0	; () banked
  8401  000570  2BCD               	incf	UI@i_432& (0+255),f,b
  8402  000572  D7EF               	goto	l9106
  8403  000574                     l9114:
  8404                           
  8405                           ; BSR set to: 0
  8406  000574  0100               	movlb	0	; () banked
  8407  000576  51F8               	movf	_logstate& (0+255),w,b
  8408  000578  0100               	movlb	0	; () banked
  8409  00057A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8410  00057C  B4D8               	btfsc	status,2,c
  8411  00057E  0012               	return	
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8415                           
  8416                           ; BSR set to: 0
  8417                           
  8418                           ; BSR set to: 0
  8419  000580  0E01               	movlw	1
  8420  000582  ECA6  F02B         	call	_lcdInst
  8421  000586  0E68               	movlw	104
  8422  000588  0100               	movlb	0	; () banked
  8423  00058A  6FC4               	movwf	??_UI& (0+255),b
  8424  00058C  0EE4               	movlw	228
  8425  00058E                     u9787:
  8426  00058E  2EE8               	decfsz	wreg,f,c
  8427  000590  D7FE               	bra	u9787
  8428  000592  2FC4               	decfsz	??_UI& (0+255),f,b
  8429  000594  D7FC               	bra	u9787
  8430  000596  F000               	nop	
  8431                           
  8432                           ;UI.c: 176: lcdInst(0b10000000);;
  8433  000598  0E80               	movlw	128
  8434  00059A  ECA6  F02B         	call	_lcdInst
  8435                           
  8436                           ;UI.c: 177: printf("DURATION:");
  8437  00059E  0E9A               	movlw	low STR_22
  8438  0005A0  0100               	movlb	0	; () banked
  8439  0005A2  6F8E               	movwf	printf@f& (0+255),b
  8440  0005A4  0EFF               	movlw	high STR_22
  8441  0005A6  0100               	movlb	0	; () banked
  8442  0005A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8443  0005AA  EC87  F00B         	call	_printf	;wreg free
  8444                           
  8445                           ;UI.c: 178: lcdInst(0b11000000);;
  8446  0005AE  0EC0               	movlw	192
  8447  0005B0  ECA6  F02B         	call	_lcdInst
  8448                           
  8449                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8450  0005B4  0E0E               	movlw	14
  8451  0005B6  0100               	movlb	0	; () banked
  8452  0005B8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8453  0005BA  0E10               	movlw	16
  8454  0005BC  6F82               	movwf	___awmod@divisor& (0+255),b
  8455  0005BE  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8456  0005C2  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8457  0005C6  ECF8  F023         	call	___awmod	;wreg free
  8458  0005CA  C080  F0C6         	movff	?___awmod,_UI$2448
  8459  0005CE  C081  F0C7         	movff	?___awmod+1,_UI$2448+1
  8460                           
  8461                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8462  0005D2  0E23               	movlw	low STR_23
  8463  0005D4  0100               	movlb	0	; () banked
  8464  0005D6  6F8E               	movwf	printf@f& (0+255),b
  8465  0005D8  0EFF               	movlw	high STR_23
  8466  0005DA  0100               	movlb	0	; () banked
  8467  0005DC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8468  0005DE  0E0E               	movlw	14
  8469  0005E0  0100               	movlb	0	; () banked
  8470  0005E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8471  0005E4  0E10               	movlw	16
  8472  0005E6  6F82               	movwf	___awmod@divisor& (0+255),b
  8473  0005E8  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8474  0005EC  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8475  0005F0  ECF8  F023         	call	___awmod	;wreg free
  8476  0005F4  C080  F086         	movff	?___awmod,___awdiv@dividend
  8477  0005F8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8478  0005FC  0E00               	movlw	0
  8479  0005FE  0100               	movlb	0	; () banked
  8480  000600  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8481  000602  0E3C               	movlw	60
  8482  000604  6F88               	movwf	___awdiv@divisor& (0+255),b
  8483  000606  ECE6  F022         	call	___awdiv	;wreg free
  8484  00060A  C086  F090         	movff	?___awdiv,?_printf+2
  8485  00060E  C087  F091         	movff	?___awdiv+1,?_printf+3
  8486  000612  C0C6  F080         	movff	_UI$2448,___awmod@dividend
  8487  000616  C0C7  F081         	movff	_UI$2448+1,___awmod@dividend+1
  8488  00061A  0E00               	movlw	0
  8489  00061C  0100               	movlb	0	; () banked
  8490  00061E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8491  000620  0E3C               	movlw	60
  8492  000622  6F82               	movwf	___awmod@divisor& (0+255),b
  8493  000624  ECF8  F023         	call	___awmod	;wreg free
  8494  000628  C080  F092         	movff	?___awmod,?_printf+4
  8495  00062C  C081  F093         	movff	?___awmod+1,?_printf+5
  8496  000630  EC87  F00B         	call	_printf	;wreg free
  8497                           
  8498                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8499  000634  0E00               	movlw	0
  8500  000636  0100               	movlb	0	; () banked
  8501  000638  6FCE               	movwf	UI@i_435& (0+255),b
  8502  00063A                     l9134:
  8503                           
  8504                           ; BSR set to: 0
  8505  00063A  0E63               	movlw	99
  8506  00063C  0100               	movlb	0	; () banked
  8507  00063E  65CE               	cpfsgt	UI@i_435& (0+255),b
  8508  000640  D001               	goto	l9138
  8509  000642  D00C               	goto	l9142
  8510  000644                     l9138:
  8511                           
  8512                           ; BSR set to: 0
  8513  000644  0E68               	movlw	104
  8514  000646  0100               	movlb	0	; () banked
  8515  000648  6FC4               	movwf	??_UI& (0+255),b
  8516  00064A  0EE4               	movlw	228
  8517  00064C                     u9797:
  8518  00064C  2EE8               	decfsz	wreg,f,c
  8519  00064E  D7FE               	bra	u9797
  8520  000650  2FC4               	decfsz	??_UI& (0+255),f,b
  8521  000652  D7FC               	bra	u9797
  8522  000654  F000               	nop	
  8523  000656  0100               	movlb	0	; () banked
  8524  000658  2BCE               	incf	UI@i_435& (0+255),f,b
  8525  00065A  D7EF               	goto	l9134
  8526  00065C                     l9142:
  8527                           
  8528                           ; BSR set to: 0
  8529  00065C  0100               	movlb	0	; () banked
  8530  00065E  51F8               	movf	_logstate& (0+255),w,b
  8531  000660  0100               	movlb	0	; () banked
  8532  000662  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8533  000664  B4D8               	btfsc	status,2,c
  8534  000666  0012               	return	
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8538                           
  8539                           ; BSR set to: 0
  8540                           
  8541                           ; BSR set to: 0
  8542  000668  0E00               	movlw	0
  8543  00066A  0100               	movlb	0	; () banked
  8544  00066C  6FCF               	movwf	UI@i_436& (0+255),b
  8545  00066E                     l9148:
  8546                           
  8547                           ; BSR set to: 0
  8548  00066E  0E63               	movlw	99
  8549  000670  0100               	movlb	0	; () banked
  8550  000672  65CF               	cpfsgt	UI@i_436& (0+255),b
  8551  000674  D001               	goto	l9152
  8552  000676  D00C               	goto	l9156
  8553  000678                     l9152:
  8554                           
  8555                           ; BSR set to: 0
  8556  000678  0E68               	movlw	104
  8557  00067A  0100               	movlb	0	; () banked
  8558  00067C  6FC4               	movwf	??_UI& (0+255),b
  8559  00067E  0EE4               	movlw	228
  8560  000680                     u9807:
  8561  000680  2EE8               	decfsz	wreg,f,c
  8562  000682  D7FE               	bra	u9807
  8563  000684  2FC4               	decfsz	??_UI& (0+255),f,b
  8564  000686  D7FC               	bra	u9807
  8565  000688  F000               	nop	
  8566  00068A  0100               	movlb	0	; () banked
  8567  00068C  2BCF               	incf	UI@i_436& (0+255),f,b
  8568  00068E  D7EF               	goto	l9148
  8569  000690                     l9156:
  8570                           
  8571                           ; BSR set to: 0
  8572  000690  0100               	movlb	0	; () banked
  8573  000692  51F8               	movf	_logstate& (0+255),w,b
  8574  000694  0100               	movlb	0	; () banked
  8575  000696  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8576  000698  B4D8               	btfsc	status,2,c
  8577  00069A  0012               	return	
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8581                           
  8582                           ; BSR set to: 0
  8583                           
  8584                           ; BSR set to: 0
  8585  00069C  0E01               	movlw	1
  8586  00069E  ECA6  F02B         	call	_lcdInst
  8587  0006A2  0E68               	movlw	104
  8588  0006A4  0100               	movlb	0	; () banked
  8589  0006A6  6FC4               	movwf	??_UI& (0+255),b
  8590  0006A8  0EE4               	movlw	228
  8591  0006AA                     u9817:
  8592  0006AA  2EE8               	decfsz	wreg,f,c
  8593  0006AC  D7FE               	bra	u9817
  8594  0006AE  2FC4               	decfsz	??_UI& (0+255),f,b
  8595  0006B0  D7FC               	bra	u9817
  8596  0006B2  F000               	nop	
  8597                           
  8598                           ;UI.c: 185: lcdInst(0b10000000);;
  8599  0006B4  0E80               	movlw	128
  8600  0006B6  ECA6  F02B         	call	_lcdInst
  8601                           
  8602                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  8603  0006BA  0E46               	movlw	low STR_24
  8604  0006BC  0100               	movlb	0	; () banked
  8605  0006BE  6F8E               	movwf	printf@f& (0+255),b
  8606  0006C0  0EFD               	movlw	high STR_24
  8607  0006C2  0100               	movlb	0	; () banked
  8608  0006C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8609  0006C6  EC87  F00B         	call	_printf	;wreg free
  8610                           
  8611                           ;UI.c: 187: lcdInst(0b11000000);;
  8612  0006CA  0EC0               	movlw	192
  8613  0006CC  ECA6  F02B         	call	_lcdInst
  8614                           
  8615                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8616  0006D0  0E23               	movlw	low STR_25
  8617  0006D2  0100               	movlb	0	; () banked
  8618  0006D4  6F8E               	movwf	printf@f& (0+255),b
  8619  0006D6  0EFE               	movlw	high STR_25
  8620  0006D8  0100               	movlb	0	; () banked
  8621  0006DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8622  0006DC  C065  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8623  0006E0  C066  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8624  0006E4  C067  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8625  0006E8  C068  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8626  0006EC  EC87  F00B         	call	_printf	;wreg free
  8627                           
  8628                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8629  0006F0  0E00               	movlw	0
  8630  0006F2  0100               	movlb	0	; () banked
  8631  0006F4  6FD0               	movwf	UI@i_439& (0+255),b
  8632  0006F6                     l9174:
  8633                           
  8634                           ; BSR set to: 0
  8635  0006F6  0E63               	movlw	99
  8636  0006F8  0100               	movlb	0	; () banked
  8637  0006FA  65D0               	cpfsgt	UI@i_439& (0+255),b
  8638  0006FC  D001               	goto	l9178
  8639  0006FE  D00C               	goto	l9182
  8640  000700                     l9178:
  8641                           
  8642                           ; BSR set to: 0
  8643  000700  0E68               	movlw	104
  8644  000702  0100               	movlb	0	; () banked
  8645  000704  6FC4               	movwf	??_UI& (0+255),b
  8646  000706  0EE4               	movlw	228
  8647  000708                     u9827:
  8648  000708  2EE8               	decfsz	wreg,f,c
  8649  00070A  D7FE               	bra	u9827
  8650  00070C  2FC4               	decfsz	??_UI& (0+255),f,b
  8651  00070E  D7FC               	bra	u9827
  8652  000710  F000               	nop	
  8653  000712  0100               	movlb	0	; () banked
  8654  000714  2BD0               	incf	UI@i_439& (0+255),f,b
  8655  000716  D7EF               	goto	l9174
  8656  000718                     l9182:
  8657                           
  8658                           ; BSR set to: 0
  8659  000718  0100               	movlb	0	; () banked
  8660  00071A  51F8               	movf	_logstate& (0+255),w,b
  8661  00071C  0100               	movlb	0	; () banked
  8662  00071E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8663  000720  B4D8               	btfsc	status,2,c
  8664  000722  0012               	return	
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8668                           
  8669                           ; BSR set to: 0
  8670                           
  8671                           ; BSR set to: 0
  8672  000724  0E00               	movlw	0
  8673  000726  0100               	movlb	0	; () banked
  8674  000728  6FD1               	movwf	UI@i_440& (0+255),b
  8675  00072A                     l9188:
  8676                           
  8677                           ; BSR set to: 0
  8678  00072A  0E63               	movlw	99
  8679  00072C  0100               	movlb	0	; () banked
  8680  00072E  65D1               	cpfsgt	UI@i_440& (0+255),b
  8681  000730  D001               	goto	l9192
  8682  000732  D00C               	goto	l9196
  8683  000734                     l9192:
  8684                           
  8685                           ; BSR set to: 0
  8686  000734  0E68               	movlw	104
  8687  000736  0100               	movlb	0	; () banked
  8688  000738  6FC4               	movwf	??_UI& (0+255),b
  8689  00073A  0EE4               	movlw	228
  8690  00073C                     u9837:
  8691  00073C  2EE8               	decfsz	wreg,f,c
  8692  00073E  D7FE               	bra	u9837
  8693  000740  2FC4               	decfsz	??_UI& (0+255),f,b
  8694  000742  D7FC               	bra	u9837
  8695  000744  F000               	nop	
  8696  000746  0100               	movlb	0	; () banked
  8697  000748  2BD1               	incf	UI@i_440& (0+255),f,b
  8698  00074A  D7EF               	goto	l9188
  8699  00074C                     l9196:
  8700                           
  8701                           ; BSR set to: 0
  8702  00074C  0100               	movlb	0	; () banked
  8703  00074E  51F8               	movf	_logstate& (0+255),w,b
  8704  000750  0100               	movlb	0	; () banked
  8705  000752  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8706  000754  B4D8               	btfsc	status,2,c
  8707  000756  0012               	return	
  8708                           
  8709                           ; BSR set to: 0
  8710                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8711                           
  8712                           ; BSR set to: 0
  8713                           
  8714                           ; BSR set to: 0
  8715  000758  0E01               	movlw	1
  8716  00075A  ECA6  F02B         	call	_lcdInst
  8717  00075E  0E68               	movlw	104
  8718  000760  0100               	movlb	0	; () banked
  8719  000762  6FC4               	movwf	??_UI& (0+255),b
  8720  000764  0EE4               	movlw	228
  8721  000766                     u9847:
  8722  000766  2EE8               	decfsz	wreg,f,c
  8723  000768  D7FE               	bra	u9847
  8724  00076A  2FC4               	decfsz	??_UI& (0+255),f,b
  8725  00076C  D7FC               	bra	u9847
  8726  00076E  F000               	nop	
  8727                           
  8728                           ;UI.c: 194: lcdInst(0b10000000);;
  8729  000770  0E80               	movlw	128
  8730  000772  ECA6  F02B         	call	_lcdInst
  8731                           
  8732                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  8733  000776  0E57               	movlw	low STR_26
  8734  000778  0100               	movlb	0	; () banked
  8735  00077A  6F8E               	movwf	printf@f& (0+255),b
  8736  00077C  0EFD               	movlw	high STR_26
  8737  00077E  0100               	movlb	0	; () banked
  8738  000780  6F8F               	movwf	(printf@f+1)& (0+255),b
  8739  000782  EC87  F00B         	call	_printf	;wreg free
  8740                           
  8741                           ;UI.c: 196: lcdInst(0b11000000);;
  8742  000786  0EC0               	movlw	192
  8743  000788  ECA6  F02B         	call	_lcdInst
  8744                           
  8745                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8746  00078C  0E12               	movlw	low STR_27
  8747  00078E  0100               	movlb	0	; () banked
  8748  000790  6F8E               	movwf	printf@f& (0+255),b
  8749  000792  0EFE               	movlw	high STR_27
  8750  000794  0100               	movlb	0	; () banked
  8751  000796  6F8F               	movwf	(printf@f+1)& (0+255),b
  8752  000798  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  8753  00079C  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8754  0007A0  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  8755  0007A4  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8756  0007A8  EC87  F00B         	call	_printf	;wreg free
  8757                           
  8758                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8759  0007AC  0E00               	movlw	0
  8760  0007AE  0100               	movlb	0	; () banked
  8761  0007B0  6FD2               	movwf	UI@i_443& (0+255),b
  8762  0007B2                     l9214:
  8763                           
  8764                           ; BSR set to: 0
  8765  0007B2  0E63               	movlw	99
  8766  0007B4  0100               	movlb	0	; () banked
  8767  0007B6  65D2               	cpfsgt	UI@i_443& (0+255),b
  8768  0007B8  D001               	goto	l9218
  8769  0007BA  D00C               	goto	l9222
  8770  0007BC                     l9218:
  8771                           
  8772                           ; BSR set to: 0
  8773  0007BC  0E68               	movlw	104
  8774  0007BE  0100               	movlb	0	; () banked
  8775  0007C0  6FC4               	movwf	??_UI& (0+255),b
  8776  0007C2  0EE4               	movlw	228
  8777  0007C4                     u9857:
  8778  0007C4  2EE8               	decfsz	wreg,f,c
  8779  0007C6  D7FE               	bra	u9857
  8780  0007C8  2FC4               	decfsz	??_UI& (0+255),f,b
  8781  0007CA  D7FC               	bra	u9857
  8782  0007CC  F000               	nop	
  8783  0007CE  0100               	movlb	0	; () banked
  8784  0007D0  2BD2               	incf	UI@i_443& (0+255),f,b
  8785  0007D2  D7EF               	goto	l9214
  8786  0007D4                     l9222:
  8787                           
  8788                           ; BSR set to: 0
  8789  0007D4  0100               	movlb	0	; () banked
  8790  0007D6  51F8               	movf	_logstate& (0+255),w,b
  8791  0007D8  0100               	movlb	0	; () banked
  8792  0007DA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8793  0007DC  B4D8               	btfsc	status,2,c
  8794  0007DE  0012               	return	
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8798                           
  8799                           ; BSR set to: 0
  8800                           
  8801                           ; BSR set to: 0
  8802  0007E0  0E00               	movlw	0
  8803  0007E2  0100               	movlb	0	; () banked
  8804  0007E4  6FD3               	movwf	UI@i_444& (0+255),b
  8805  0007E6                     l9228:
  8806                           
  8807                           ; BSR set to: 0
  8808  0007E6  0E63               	movlw	99
  8809  0007E8  0100               	movlb	0	; () banked
  8810  0007EA  65D3               	cpfsgt	UI@i_444& (0+255),b
  8811  0007EC  D001               	goto	l9232
  8812  0007EE  D00C               	goto	l9236
  8813  0007F0                     l9232:
  8814                           
  8815                           ; BSR set to: 0
  8816  0007F0  0E68               	movlw	104
  8817  0007F2  0100               	movlb	0	; () banked
  8818  0007F4  6FC4               	movwf	??_UI& (0+255),b
  8819  0007F6  0EE4               	movlw	228
  8820  0007F8                     u9867:
  8821  0007F8  2EE8               	decfsz	wreg,f,c
  8822  0007FA  D7FE               	bra	u9867
  8823  0007FC  2FC4               	decfsz	??_UI& (0+255),f,b
  8824  0007FE  D7FC               	bra	u9867
  8825  000800  F000               	nop	
  8826  000802  0100               	movlb	0	; () banked
  8827  000804  2BD3               	incf	UI@i_444& (0+255),f,b
  8828  000806  D7EF               	goto	l9228
  8829  000808                     l9236:
  8830                           
  8831                           ; BSR set to: 0
  8832  000808  0100               	movlb	0	; () banked
  8833  00080A  51F8               	movf	_logstate& (0+255),w,b
  8834  00080C  0100               	movlb	0	; () banked
  8835  00080E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8836  000810  B4D8               	btfsc	status,2,c
  8837  000812  0012               	return	
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8841                           
  8842                           ; BSR set to: 0
  8843                           
  8844                           ; BSR set to: 0
  8845  000814  0E01               	movlw	1
  8846  000816  ECA6  F02B         	call	_lcdInst
  8847  00081A  0E68               	movlw	104
  8848  00081C  0100               	movlb	0	; () banked
  8849  00081E  6FC4               	movwf	??_UI& (0+255),b
  8850  000820  0EE4               	movlw	228
  8851  000822                     u9877:
  8852  000822  2EE8               	decfsz	wreg,f,c
  8853  000824  D7FE               	bra	u9877
  8854  000826  2FC4               	decfsz	??_UI& (0+255),f,b
  8855  000828  D7FC               	bra	u9877
  8856  00082A  F000               	nop	
  8857                           
  8858                           ;UI.c: 203: lcdInst(0b10000000);;
  8859  00082C  0E80               	movlw	128
  8860  00082E  ECA6  F02B         	call	_lcdInst
  8861                           
  8862                           ;UI.c: 204: printf("-- TOTAL CANS --");
  8863  000832  0E68               	movlw	low STR_28
  8864  000834  0100               	movlb	0	; () banked
  8865  000836  6F8E               	movwf	printf@f& (0+255),b
  8866  000838  0EFD               	movlw	high STR_28
  8867  00083A  0100               	movlb	0	; () banked
  8868  00083C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8869  00083E  EC87  F00B         	call	_printf	;wreg free
  8870                           
  8871                           ;UI.c: 205: lcdInst(0b11000000);;
  8872  000842  0EC0               	movlw	192
  8873  000844  ECA6  F02B         	call	_lcdInst
  8874                           
  8875                           ;UI.c: 206: printf("%d", log_count_total);
  8876  000848  0E20               	movlw	low (STR_27+14)
  8877  00084A  0100               	movlb	0	; () banked
  8878  00084C  6F8E               	movwf	printf@f& (0+255),b
  8879  00084E  0EFE               	movlw	high (STR_27+14)
  8880  000850  0100               	movlb	0	; () banked
  8881  000852  6F8F               	movwf	(printf@f+1)& (0+255),b
  8882  000854  C143  F090         	movff	_log_count_total,?_printf+2
  8883  000858  C144  F091         	movff	_log_count_total+1,?_printf+3
  8884  00085C  EC87  F00B         	call	_printf	;wreg free
  8885                           
  8886                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8887  000860  0E00               	movlw	0
  8888  000862  0100               	movlb	0	; () banked
  8889  000864  6FD4               	movwf	UI@i_447& (0+255),b
  8890  000866                     l9254:
  8891                           
  8892                           ; BSR set to: 0
  8893  000866  0E63               	movlw	99
  8894  000868  0100               	movlb	0	; () banked
  8895  00086A  65D4               	cpfsgt	UI@i_447& (0+255),b
  8896  00086C  D001               	goto	l9258
  8897  00086E  D00C               	goto	l9262
  8898  000870                     l9258:
  8899                           
  8900                           ; BSR set to: 0
  8901  000870  0E68               	movlw	104
  8902  000872  0100               	movlb	0	; () banked
  8903  000874  6FC4               	movwf	??_UI& (0+255),b
  8904  000876  0EE4               	movlw	228
  8905  000878                     u9887:
  8906  000878  2EE8               	decfsz	wreg,f,c
  8907  00087A  D7FE               	bra	u9887
  8908  00087C  2FC4               	decfsz	??_UI& (0+255),f,b
  8909  00087E  D7FC               	bra	u9887
  8910  000880  F000               	nop	
  8911  000882  0100               	movlb	0	; () banked
  8912  000884  2BD4               	incf	UI@i_447& (0+255),f,b
  8913  000886  D7EF               	goto	l9254
  8914  000888                     l9262:
  8915                           
  8916                           ; BSR set to: 0
  8917  000888  0100               	movlb	0	; () banked
  8918  00088A  51F8               	movf	_logstate& (0+255),w,b
  8919  00088C  0100               	movlb	0	; () banked
  8920  00088E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8921  000890  B4D8               	btfsc	status,2,c
  8922  000892  0012               	return	
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8926                           
  8927                           ; BSR set to: 0
  8928                           
  8929                           ; BSR set to: 0
  8930  000894  0E00               	movlw	0
  8931  000896  0100               	movlb	0	; () banked
  8932  000898  6FD5               	movwf	UI@i_448& (0+255),b
  8933  00089A                     l9268:
  8934                           
  8935                           ; BSR set to: 0
  8936  00089A  0E63               	movlw	99
  8937  00089C  0100               	movlb	0	; () banked
  8938  00089E  65D5               	cpfsgt	UI@i_448& (0+255),b
  8939  0008A0  D001               	goto	l9272
  8940  0008A2  D00C               	goto	l9276
  8941  0008A4                     l9272:
  8942                           
  8943                           ; BSR set to: 0
  8944  0008A4  0E68               	movlw	104
  8945  0008A6  0100               	movlb	0	; () banked
  8946  0008A8  6FC4               	movwf	??_UI& (0+255),b
  8947  0008AA  0EE4               	movlw	228
  8948  0008AC                     u9897:
  8949  0008AC  2EE8               	decfsz	wreg,f,c
  8950  0008AE  D7FE               	bra	u9897
  8951  0008B0  2FC4               	decfsz	??_UI& (0+255),f,b
  8952  0008B2  D7FC               	bra	u9897
  8953  0008B4  F000               	nop	
  8954  0008B6  0100               	movlb	0	; () banked
  8955  0008B8  2BD5               	incf	UI@i_448& (0+255),f,b
  8956  0008BA  D7EF               	goto	l9268
  8957  0008BC                     l9276:
  8958                           
  8959                           ; BSR set to: 0
  8960  0008BC  0100               	movlb	0	; () banked
  8961  0008BE  51F8               	movf	_logstate& (0+255),w,b
  8962  0008C0  0100               	movlb	0	; () banked
  8963  0008C2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8964  0008C4  B4D8               	btfsc	status,2,c
  8965  0008C6  0012               	return	
  8966  0008C8                     l9280:
  8967  0008C8  0100               	movlb	0	; () banked
  8968  0008CA  51F8               	movf	_logstate& (0+255),w,b
  8969  0008CC  0100               	movlb	0	; () banked
  8970  0008CE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8971  0008D0  B4D8               	btfsc	status,2,c
  8972  0008D2  0012               	return	
  8973  0008D4  D44C               	goto	l8976
  8974  0008D6                     __end_of_UI:
  8975                           	opt stack 0
  8976                           tblptru	equ	0xFF8
  8977                           tblptrh	equ	0xFF7
  8978                           tblptrl	equ	0xFF6
  8979                           tablat	equ	0xFF5
  8980                           prodh	equ	0xFF4
  8981                           prodl	equ	0xFF3
  8982                           intcon	equ	0xFF2
  8983                           intcon2	equ	0xFF1
  8984                           intcon3	equ	0xFF0
  8985                           postinc0	equ	0xFEE
  8986                           wreg	equ	0xFE8
  8987                           postdec1	equ	0xFE5
  8988                           fsr1l	equ	0xFE1
  8989                           indf2	equ	0xFDF
  8990                           postinc2	equ	0xFDE
  8991                           postdec2	equ	0xFDD
  8992                           fsr2h	equ	0xFDA
  8993                           fsr2l	equ	0xFD9
  8994                           status	equ	0xFD8
  8995                           
  8996 ;; *************** function _printRTC *****************
  8997 ;; Defined at:
  8998 ;;		line 63 in file "RTC.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;		None
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;  i               2   66[BANK0 ] int 
  9003 ;;  INT_time       14   46[BANK0 ] int [7]
  9004 ;;  month           4   62[BANK0 ] unsigned char [4]
  9005 ;;  RTC_month       2   60[BANK0 ] int 
  9006 ;; Return value:  Size  Location     Type
  9007 ;;                  1    wreg      void 
  9008 ;; Registers used:
  9009 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9010 ;; Tracked objects:
  9011 ;;		On entry : 0/0
  9012 ;;		On exit  : 0/0
  9013 ;;		Unchanged: 0/0
  9014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9016 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;Total ram usage:       25 bytes
  9020 ;; Hardware stack levels used:    1
  9021 ;; Hardware stack levels required when called:   10
  9022 ;; This function calls:
  9023 ;;		_getRTC
  9024 ;;		_lcdInst
  9025 ;;		_printf
  9026 ;;		_strcpy
  9027 ;; This function is called by:
  9028 ;;		_UI
  9029 ;;		_change_state_to_menu_start
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           	psect	text23
  9034  00293E                     __ptext23:
  9035                           	opt stack 0
  9036  00293E                     _printRTC:
  9037                           	opt stack 18
  9038                           
  9039                           ;RTC.c: 64: getRTC();
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;incstack = 0
  9043  00293E  EC8F  F024         	call	_getRTC	;wreg free
  9044                           
  9045                           ;RTC.c: 65: char month[] = "MMM";
  9046  002942  C14B  F0BE         	movff	printRTC@F3231,printRTC@month
  9047  002946  C14C  F0BF         	movff	printRTC@F3231+1,printRTC@month+1
  9048  00294A  C14D  F0C0         	movff	printRTC@F3231+2,printRTC@month+2
  9049  00294E  C14E  F0C1         	movff	printRTC@F3231+3,printRTC@month+3
  9050                           
  9051                           ;RTC.c: 66: int INT_time[7];
  9052                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  9053  002952  0E00               	movlw	0
  9054  002954  0100               	movlb	0	; () banked
  9055  002956  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  9056  002958  0E00               	movlw	0
  9057  00295A  6FC2               	movwf	printRTC@i& (0+255),b
  9058                           
  9059                           ; BSR set to: 0
  9060  00295C  0100               	movlb	0	; () banked
  9061  00295E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9062  002960  D008               	goto	l6916
  9063  002962  0100               	movlb	0	; () banked
  9064  002964  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9065  002966  E146               	bnz	l620
  9066  002968  0E07               	movlw	7
  9067  00296A  0100               	movlb	0	; () banked
  9068  00296C  5DC2               	subwf	printRTC@i& (0+255),w,b
  9069  00296E  B0D8               	btfsc	status,0,c
  9070  002970  D041               	goto	l620
  9071  002972                     l6916:
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9075  002972  0E1C               	movlw	low _time
  9076  002974  0100               	movlb	0	; () banked
  9077  002976  25C2               	addwf	printRTC@i& (0+255),w,b
  9078  002978  6ED9               	movwf	fsr2l,c
  9079  00297A  0E01               	movlw	high _time
  9080  00297C  0100               	movlb	0	; () banked
  9081  00297E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9082  002980  6EDA               	movwf	fsr2h,c
  9083  002982  50DF               	movf	indf2,w,c
  9084  002984  0100               	movlb	0	; () banked
  9085  002986  6FAB               	movwf	??_printRTC& (0+255),b
  9086  002988  0100               	movlb	0	; () banked
  9087  00298A  3BAB               	swapf	??_printRTC& (0+255),f,b
  9088  00298C  0E0F               	movlw	15
  9089  00298E  17AB               	andwf	??_printRTC& (0+255),f,b
  9090  002990  0E0F               	movlw	15
  9091  002992  0100               	movlb	0	; () banked
  9092  002994  17AB               	andwf	??_printRTC& (0+255),f,b
  9093  002996  0100               	movlb	0	; () banked
  9094  002998  51AB               	movf	??_printRTC& (0+255),w,b
  9095  00299A  0D0A               	mullw	10
  9096  00299C  0E1C               	movlw	low _time
  9097  00299E  0100               	movlb	0	; () banked
  9098  0029A0  25C2               	addwf	printRTC@i& (0+255),w,b
  9099  0029A2  6ED9               	movwf	fsr2l,c
  9100  0029A4  0E01               	movlw	high _time
  9101  0029A6  0100               	movlb	0	; () banked
  9102  0029A8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9103  0029AA  6EDA               	movwf	fsr2h,c
  9104  0029AC  50DF               	movf	indf2,w,c
  9105  0029AE  0B0F               	andlw	15
  9106  0029B0  0100               	movlb	0	; () banked
  9107  0029B2  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  9108  0029B4  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  9109  0029B6  50F3               	movf	prodl,w,c
  9110  0029B8  0100               	movlb	0	; () banked
  9111  0029BA  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  9112  0029BC  50F4               	movf	prodh,w,c
  9113  0029BE  0100               	movlb	0	; () banked
  9114  0029C0  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  9115  0029C2  90D8               	bcf	status,0,c
  9116  0029C4  0100               	movlb	0	; () banked
  9117  0029C6  35C2               	rlcf	printRTC@i& (0+255),w,b
  9118  0029C8  6ED9               	movwf	fsr2l,c
  9119  0029CA  0100               	movlb	0	; () banked
  9120  0029CC  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  9121  0029CE  6EDA               	movwf	fsr2h,c
  9122  0029D0  0EAE               	movlw	low printRTC@INT_time
  9123  0029D2  26D9               	addwf	fsr2l,f,c
  9124  0029D4  0E00               	movlw	high printRTC@INT_time
  9125  0029D6  22DA               	addwfc	fsr2h,f,c
  9126  0029D8  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  9127  0029DC  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  9128                           
  9129                           ; BSR set to: 0
  9130  0029E0  0100               	movlb	0	; () banked
  9131  0029E2  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9132  0029E4  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9133                           
  9134                           ; BSR set to: 0
  9135  0029E6  0100               	movlb	0	; () banked
  9136  0029E8  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9137  0029EA  D7C3               	goto	l6916
  9138  0029EC  0100               	movlb	0	; () banked
  9139  0029EE  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9140  0029F0  E101               	bnz	u5580
  9141  0029F2  D7BA               	goto	L11
  9142  0029F4                     u5580:
  9143  0029F4                     l620:
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;RTC.c: 69: }
  9147                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9148  0029F4  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9149  0029F8  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9150                           
  9151                           ;RTC.c: 72: switch(RTC_month){
  9152  0029FC  D0B4               	goto	l6948
  9153  0029FE                     l6922:
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;RTC.c: 74: strcpy(month, "JAN");
  9157  0029FE  0EBE               	movlw	low printRTC@month
  9158  002A00  0100               	movlb	0	; () banked
  9159  002A02  6F80               	movwf	strcpy@to& (0+255),b
  9160  002A04  0E00               	movlw	high printRTC@month
  9161  002A06  0100               	movlb	0	; () banked
  9162  002A08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9163  002A0A  0EDA               	movlw	low STR_8
  9164  002A0C  0100               	movlb	0	; () banked
  9165  002A0E  6F82               	movwf	strcpy@from& (0+255),b
  9166  002A10  0EFF               	movlw	high STR_8
  9167  002A12  0100               	movlb	0	; () banked
  9168  002A14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9169  002A16  EC00  F029         	call	_strcpy	;wreg free
  9170                           
  9171                           ;RTC.c: 75: break;
  9172  002A1A  D0D4               	goto	l6950
  9173  002A1C                     l6924:
  9174                           
  9175                           ;RTC.c: 77: strcpy(month, "FEB");
  9176  002A1C  0EBE               	movlw	low printRTC@month
  9177  002A1E  0100               	movlb	0	; () banked
  9178  002A20  6F80               	movwf	strcpy@to& (0+255),b
  9179  002A22  0E00               	movlw	high printRTC@month
  9180  002A24  0100               	movlb	0	; () banked
  9181  002A26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9182  002A28  0ECA               	movlw	low STR_9
  9183  002A2A  0100               	movlb	0	; () banked
  9184  002A2C  6F82               	movwf	strcpy@from& (0+255),b
  9185  002A2E  0EFF               	movlw	high STR_9
  9186  002A30  0100               	movlb	0	; () banked
  9187  002A32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9188  002A34  EC00  F029         	call	_strcpy	;wreg free
  9189                           
  9190                           ;RTC.c: 78: break;
  9191  002A38  D0C5               	goto	l6950
  9192  002A3A                     l6926:
  9193                           
  9194                           ;RTC.c: 80: strcpy(month, "MAR");
  9195  002A3A  0EBE               	movlw	low printRTC@month
  9196  002A3C  0100               	movlb	0	; () banked
  9197  002A3E  6F80               	movwf	strcpy@to& (0+255),b
  9198  002A40  0E00               	movlw	high printRTC@month
  9199  002A42  0100               	movlb	0	; () banked
  9200  002A44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9201  002A46  0EE6               	movlw	low STR_10
  9202  002A48  0100               	movlb	0	; () banked
  9203  002A4A  6F82               	movwf	strcpy@from& (0+255),b
  9204  002A4C  0EFF               	movlw	high STR_10
  9205  002A4E  0100               	movlb	0	; () banked
  9206  002A50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9207  002A52  EC00  F029         	call	_strcpy	;wreg free
  9208                           
  9209                           ;RTC.c: 81: break;
  9210  002A56  D0B6               	goto	l6950
  9211  002A58                     l6928:
  9212                           
  9213                           ;RTC.c: 83: strcpy(month, "APR");
  9214  002A58  0EBE               	movlw	low printRTC@month
  9215  002A5A  0100               	movlb	0	; () banked
  9216  002A5C  6F80               	movwf	strcpy@to& (0+255),b
  9217  002A5E  0E00               	movlw	high printRTC@month
  9218  002A60  0100               	movlb	0	; () banked
  9219  002A62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9220  002A64  0EEA               	movlw	low STR_11
  9221  002A66  0100               	movlb	0	; () banked
  9222  002A68  6F82               	movwf	strcpy@from& (0+255),b
  9223  002A6A  0EFF               	movlw	high STR_11
  9224  002A6C  0100               	movlb	0	; () banked
  9225  002A6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9226  002A70  EC00  F029         	call	_strcpy	;wreg free
  9227                           
  9228                           ;RTC.c: 84: break;
  9229  002A74  D0A7               	goto	l6950
  9230  002A76                     l6930:
  9231                           
  9232                           ;RTC.c: 86: strcpy(month, "MAY");
  9233  002A76  0EBE               	movlw	low printRTC@month
  9234  002A78  0100               	movlb	0	; () banked
  9235  002A7A  6F80               	movwf	strcpy@to& (0+255),b
  9236  002A7C  0E00               	movlw	high printRTC@month
  9237  002A7E  0100               	movlb	0	; () banked
  9238  002A80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9239  002A82  0EFA               	movlw	low STR_12
  9240  002A84  0100               	movlb	0	; () banked
  9241  002A86  6F82               	movwf	strcpy@from& (0+255),b
  9242  002A88  0EFF               	movlw	high STR_12
  9243  002A8A  0100               	movlb	0	; () banked
  9244  002A8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9245  002A8E  EC00  F029         	call	_strcpy	;wreg free
  9246                           
  9247                           ;RTC.c: 87: break;
  9248  002A92  D098               	goto	l6950
  9249  002A94                     l6932:
  9250                           
  9251                           ;RTC.c: 89: strcpy(month, "JUN");
  9252  002A94  0EBE               	movlw	low printRTC@month
  9253  002A96  0100               	movlb	0	; () banked
  9254  002A98  6F80               	movwf	strcpy@to& (0+255),b
  9255  002A9A  0E00               	movlw	high printRTC@month
  9256  002A9C  0100               	movlb	0	; () banked
  9257  002A9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9258  002AA0  0EDE               	movlw	low STR_13
  9259  002AA2  0100               	movlb	0	; () banked
  9260  002AA4  6F82               	movwf	strcpy@from& (0+255),b
  9261  002AA6  0EFF               	movlw	high STR_13
  9262  002AA8  0100               	movlb	0	; () banked
  9263  002AAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9264  002AAC  EC00  F029         	call	_strcpy	;wreg free
  9265                           
  9266                           ;RTC.c: 90: break;
  9267  002AB0  D089               	goto	l6950
  9268  002AB2                     l6934:
  9269                           
  9270                           ;RTC.c: 92: strcpy(month, "JUL");
  9271  002AB2  0EBE               	movlw	low printRTC@month
  9272  002AB4  0100               	movlb	0	; () banked
  9273  002AB6  6F80               	movwf	strcpy@to& (0+255),b
  9274  002AB8  0E00               	movlw	high printRTC@month
  9275  002ABA  0100               	movlb	0	; () banked
  9276  002ABC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9277  002ABE  0ED6               	movlw	low STR_14
  9278  002AC0  0100               	movlb	0	; () banked
  9279  002AC2  6F82               	movwf	strcpy@from& (0+255),b
  9280  002AC4  0EFF               	movlw	high STR_14
  9281  002AC6  0100               	movlb	0	; () banked
  9282  002AC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9283  002ACA  EC00  F029         	call	_strcpy	;wreg free
  9284                           
  9285                           ;RTC.c: 93: break;
  9286  002ACE  D07A               	goto	l6950
  9287  002AD0                     l6936:
  9288                           
  9289                           ;RTC.c: 95: strcpy(month, "AUG");
  9290  002AD0  0EBE               	movlw	low printRTC@month
  9291  002AD2  0100               	movlb	0	; () banked
  9292  002AD4  6F80               	movwf	strcpy@to& (0+255),b
  9293  002AD6  0E00               	movlw	high printRTC@month
  9294  002AD8  0100               	movlb	0	; () banked
  9295  002ADA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9296  002ADC  0ED2               	movlw	low STR_15
  9297  002ADE  0100               	movlb	0	; () banked
  9298  002AE0  6F82               	movwf	strcpy@from& (0+255),b
  9299  002AE2  0EFF               	movlw	high STR_15
  9300  002AE4  0100               	movlb	0	; () banked
  9301  002AE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9302  002AE8  EC00  F029         	call	_strcpy	;wreg free
  9303                           
  9304                           ;RTC.c: 96: break;
  9305  002AEC  D06B               	goto	l6950
  9306  002AEE                     l6938:
  9307                           
  9308                           ;RTC.c: 98: strcpy(month, "SEP");
  9309  002AEE  0EBE               	movlw	low printRTC@month
  9310  002AF0  0100               	movlb	0	; () banked
  9311  002AF2  6F80               	movwf	strcpy@to& (0+255),b
  9312  002AF4  0E00               	movlw	high printRTC@month
  9313  002AF6  0100               	movlb	0	; () banked
  9314  002AF8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9315  002AFA  0EE2               	movlw	low STR_16
  9316  002AFC  0100               	movlb	0	; () banked
  9317  002AFE  6F82               	movwf	strcpy@from& (0+255),b
  9318  002B00  0EFF               	movlw	high STR_16
  9319  002B02  0100               	movlb	0	; () banked
  9320  002B04  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9321  002B06  EC00  F029         	call	_strcpy	;wreg free
  9322                           
  9323                           ;RTC.c: 99: break;
  9324  002B0A  D05C               	goto	l6950
  9325  002B0C                     l6940:
  9326                           
  9327                           ;RTC.c: 101: strcpy(month, "OCT");
  9328  002B0C  0EBE               	movlw	low printRTC@month
  9329  002B0E  0100               	movlb	0	; () banked
  9330  002B10  6F80               	movwf	strcpy@to& (0+255),b
  9331  002B12  0E00               	movlw	high printRTC@month
  9332  002B14  0100               	movlb	0	; () banked
  9333  002B16  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9334  002B18  0EF2               	movlw	low STR_17
  9335  002B1A  0100               	movlb	0	; () banked
  9336  002B1C  6F82               	movwf	strcpy@from& (0+255),b
  9337  002B1E  0EFF               	movlw	high STR_17
  9338  002B20  0100               	movlb	0	; () banked
  9339  002B22  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9340  002B24  EC00  F029         	call	_strcpy	;wreg free
  9341                           
  9342                           ;RTC.c: 102: break;
  9343  002B28  D04D               	goto	l6950
  9344  002B2A                     l6942:
  9345                           
  9346                           ;RTC.c: 104: strcpy(month, "NOV");
  9347  002B2A  0EBE               	movlw	low printRTC@month
  9348  002B2C  0100               	movlb	0	; () banked
  9349  002B2E  6F80               	movwf	strcpy@to& (0+255),b
  9350  002B30  0E00               	movlw	high printRTC@month
  9351  002B32  0100               	movlb	0	; () banked
  9352  002B34  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9353  002B36  0EF6               	movlw	low STR_18
  9354  002B38  0100               	movlb	0	; () banked
  9355  002B3A  6F82               	movwf	strcpy@from& (0+255),b
  9356  002B3C  0EFF               	movlw	high STR_18
  9357  002B3E  0100               	movlb	0	; () banked
  9358  002B40  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9359  002B42  EC00  F029         	call	_strcpy	;wreg free
  9360                           
  9361                           ;RTC.c: 105: break;
  9362  002B46  D03E               	goto	l6950
  9363  002B48                     l6944:
  9364                           
  9365                           ;RTC.c: 107: strcpy(month, "DEC");
  9366  002B48  0EBE               	movlw	low printRTC@month
  9367  002B4A  0100               	movlb	0	; () banked
  9368  002B4C  6F80               	movwf	strcpy@to& (0+255),b
  9369  002B4E  0E00               	movlw	high printRTC@month
  9370  002B50  0100               	movlb	0	; () banked
  9371  002B52  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9372  002B54  0ECE               	movlw	low STR_19
  9373  002B56  0100               	movlb	0	; () banked
  9374  002B58  6F82               	movwf	strcpy@from& (0+255),b
  9375  002B5A  0EFF               	movlw	high STR_19
  9376  002B5C  0100               	movlb	0	; () banked
  9377  002B5E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9378  002B60  EC00  F029         	call	_strcpy	;wreg free
  9379                           
  9380                           ;RTC.c: 109: }
  9381                           
  9382                           ;RTC.c: 108: break;
  9383  002B64  D02F               	goto	l6950
  9384  002B66                     l6948:
  9385  002B66  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9386  002B6A  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9387                           
  9388                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9389                           ; Switch size 1, requested type "space"
  9390                           ; Number of cases is 1, Range of values is 0 to 0
  9391                           ; switch strategies available:
  9392                           ; Name         Instructions Cycles
  9393                           ; simple_byte            4     3 (average)
  9394                           ;	Chosen strategy is simple_byte
  9395  002B6E  0100               	movlb	0	; () banked
  9396  002B70  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9397  002B72  0A00               	xorlw	0	; case 0
  9398  002B74  A4D8               	btfss	status,2,c
  9399  002B76  D026               	goto	l6950
  9400                           
  9401                           ; BSR set to: 0
  9402                           ; Switch size 1, requested type "space"
  9403                           ; Number of cases is 12, Range of values is 1 to 12
  9404                           ; switch strategies available:
  9405                           ; Name         Instructions Cycles
  9406                           ; simple_byte           37    19 (average)
  9407                           ;	Chosen strategy is simple_byte
  9408  002B78  0100               	movlb	0	; () banked
  9409  002B7A  51AB               	movf	??_printRTC& (0+255),w,b
  9410  002B7C  0A01               	xorlw	1	; case 1
  9411  002B7E  B4D8               	btfsc	status,2,c
  9412  002B80  D73E               	goto	l6922
  9413  002B82  0A03               	xorlw	3	; case 2
  9414  002B84  B4D8               	btfsc	status,2,c
  9415  002B86  D74A               	goto	l6924
  9416  002B88  0A01               	xorlw	1	; case 3
  9417  002B8A  B4D8               	btfsc	status,2,c
  9418  002B8C  D756               	goto	l6926
  9419  002B8E  0A07               	xorlw	7	; case 4
  9420  002B90  B4D8               	btfsc	status,2,c
  9421  002B92  D762               	goto	l6928
  9422  002B94  0A01               	xorlw	1	; case 5
  9423  002B96  B4D8               	btfsc	status,2,c
  9424  002B98  D76E               	goto	l6930
  9425  002B9A  0A03               	xorlw	3	; case 6
  9426  002B9C  B4D8               	btfsc	status,2,c
  9427  002B9E  D77A               	goto	l6932
  9428  002BA0  0A01               	xorlw	1	; case 7
  9429  002BA2  B4D8               	btfsc	status,2,c
  9430  002BA4  D786               	goto	l6934
  9431  002BA6  0A0F               	xorlw	15	; case 8
  9432  002BA8  B4D8               	btfsc	status,2,c
  9433  002BAA  D792               	goto	l6936
  9434  002BAC  0A01               	xorlw	1	; case 9
  9435  002BAE  B4D8               	btfsc	status,2,c
  9436  002BB0  D79E               	goto	l6938
  9437  002BB2  0A03               	xorlw	3	; case 10
  9438  002BB4  B4D8               	btfsc	status,2,c
  9439  002BB6  D7AA               	goto	l6940
  9440  002BB8  0A01               	xorlw	1	; case 11
  9441  002BBA  B4D8               	btfsc	status,2,c
  9442  002BBC  D7B6               	goto	l6942
  9443  002BBE  0A07               	xorlw	7	; case 12
  9444  002BC0  B4D8               	btfsc	status,2,c
  9445  002BC2  D7C2               	goto	l6944
  9446  002BC4                     l6950:
  9447                           
  9448                           ;RTC.c: 110: lcdInst(0b10000000);;
  9449  002BC4  0E80               	movlw	128
  9450  002BC6  ECA6  F02B         	call	_lcdInst
  9451                           
  9452                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9453  002BCA  0EBE               	movlw	low STR_21
  9454  002BCC  0100               	movlb	0	; () banked
  9455  002BCE  6F8E               	movwf	printf@f& (0+255),b
  9456  002BD0  0EFA               	movlw	high STR_21
  9457  002BD2  0100               	movlb	0	; () banked
  9458  002BD4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9459  002BD6  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9460  002BDA  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9461  002BDE  0EBE               	movlw	low printRTC@month
  9462  002BE0  0100               	movlb	0	; () banked
  9463  002BE2  6F92               	movwf	(?_printf+4)& (0+255),b
  9464  002BE4  0E00               	movlw	high printRTC@month
  9465  002BE6  0100               	movlb	0	; () banked
  9466  002BE8  6F93               	movwf	(?_printf+5)& (0+255),b
  9467  002BEA  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9468  002BEE  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9469  002BF2  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9470  002BF6  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9471  002BFA  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9472  002BFE  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9473  002C02  EC87  F00B         	call	_printf	;wreg free
  9474  002C06  0012               	return		;funcret
  9475  002C08                     __end_of_printRTC:
  9476                           	opt stack 0
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodh	equ	0xFF4
  9482                           prodl	equ	0xFF3
  9483                           intcon	equ	0xFF2
  9484                           intcon2	equ	0xFF1
  9485                           intcon3	equ	0xFF0
  9486                           postinc0	equ	0xFEE
  9487                           wreg	equ	0xFE8
  9488                           postdec1	equ	0xFE5
  9489                           fsr1l	equ	0xFE1
  9490                           indf2	equ	0xFDF
  9491                           postinc2	equ	0xFDE
  9492                           postdec2	equ	0xFDD
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function _strcpy *****************
  9498 ;; Defined at:
  9499 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9502 ;;		 -> printRTC@month(4), UI@month(4), 
  9503 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9504 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9505 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9506 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9507 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9508 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9509 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9510 ;;		 -> STR_8(4), 
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9513 ;;		 -> printRTC@month(4), UI@month(4), 
  9514 ;; Return value:  Size  Location     Type
  9515 ;;                  2    0[BANK0 ] PTR unsigned char 
  9516 ;; Registers used:
  9517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9518 ;; Tracked objects:
  9519 ;;		On entry : 0/0
  9520 ;;		On exit  : 0/0
  9521 ;;		Unchanged: 0/0
  9522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9523 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9526 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9527 ;;Total ram usage:        6 bytes
  9528 ;; Hardware stack levels used:    1
  9529 ;; Hardware stack levels required when called:    7
  9530 ;; This function calls:
  9531 ;;		Nothing
  9532 ;; This function is called by:
  9533 ;;		_UI
  9534 ;;		_printRTC
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           	psect	text24
  9539  005200                     __ptext24:
  9540                           	opt stack 0
  9541  005200                     _strcpy:
  9542                           	opt stack 20
  9543                           
  9544                           ;incstack = 0
  9545  005200  C080  F084         	movff	strcpy@to,strcpy@cp
  9546  005204  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9547  005208  D006               	goto	l6656
  9548  00520A                     l6654:
  9549  00520A  0100               	movlb	0	; () banked
  9550  00520C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9551  00520E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9552  005210  0100               	movlb	0	; () banked
  9553  005212  4B82               	infsnz	strcpy@from& (0+255),f,b
  9554  005214  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9555  005216                     l6656:
  9556  005216  C082  FFF6         	movff	strcpy@from,tblptrl
  9557  00521A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9558  00521E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9559  00521E  6AF8               	clrf	tblptru,c
  9560  005220                     	endif
  9561  005220                     	if	0	;tblptru may be non-zero
  9562  005220                     	endif
  9563  005220  C084  FFD9         	movff	strcpy@cp,fsr2l
  9564  005224  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9565  005228  0008               	tblrd		*
  9566  00522A  CFF5 FFDF          	movff	tablat,indf2
  9567  00522E  50DF               	movf	indf2,w,c
  9568  005230  B4D8               	btfsc	status,2,c
  9569  005232  0012               	return	
  9570  005234  D7EA               	goto	l6654
  9571  005236                     __end_of_strcpy:
  9572                           	opt stack 0
  9573                           tblptru	equ	0xFF8
  9574                           tblptrh	equ	0xFF7
  9575                           tblptrl	equ	0xFF6
  9576                           tablat	equ	0xFF5
  9577                           prodh	equ	0xFF4
  9578                           prodl	equ	0xFF3
  9579                           intcon	equ	0xFF2
  9580                           intcon2	equ	0xFF1
  9581                           intcon3	equ	0xFF0
  9582                           postinc0	equ	0xFEE
  9583                           wreg	equ	0xFE8
  9584                           postdec1	equ	0xFE5
  9585                           fsr1l	equ	0xFE1
  9586                           indf2	equ	0xFDF
  9587                           postinc2	equ	0xFDE
  9588                           postdec2	equ	0xFDD
  9589                           fsr2h	equ	0xFDA
  9590                           fsr2l	equ	0xFD9
  9591                           status	equ	0xFD8
  9592                           
  9593 ;; *************** function _getRTC *****************
  9594 ;; Defined at:
  9595 ;;		line 44 in file "RTC.c"
  9596 ;; Parameters:    Size  Location     Type
  9597 ;;		None
  9598 ;; Auto vars:     Size  Location     Type
  9599 ;;  i               2    3[BANK0 ] int 
  9600 ;; Return value:  Size  Location     Type
  9601 ;;                  1    wreg      void 
  9602 ;; Registers used:
  9603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9604 ;; Tracked objects:
  9605 ;;		On entry : 0/0
  9606 ;;		On exit  : 0/0
  9607 ;;		Unchanged: 0/0
  9608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;Total ram usage:        2 bytes
  9614 ;; Hardware stack levels used:    1
  9615 ;; Hardware stack levels required when called:    9
  9616 ;; This function calls:
  9617 ;;		_I2C_Master_Read
  9618 ;;		_I2C_Master_Start
  9619 ;;		_I2C_Master_Stop
  9620 ;;		_I2C_Master_Write
  9621 ;; This function is called by:
  9622 ;;		_printRTC
  9623 ;;		_initSortTimer
  9624 ;; This function uses a non-reentrant model
  9625 ;;
  9626                           
  9627                           	psect	text25
  9628  00491E                     __ptext25:
  9629                           	opt stack 0
  9630  00491E                     _getRTC:
  9631                           	opt stack 18
  9632                           
  9633                           ;RTC.c: 48: I2C_Master_Start();
  9634                           
  9635                           ;incstack = 0
  9636  00491E  ECCC  F02B         	call	_I2C_Master_Start	;wreg free
  9637                           
  9638                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9639  004922  0E00               	movlw	0
  9640  004924  0100               	movlb	0	; () banked
  9641  004926  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9642  004928  0ED0               	movlw	208
  9643  00492A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9644  00492C  ECBA  F02B         	call	_I2C_Master_Write	;wreg free
  9645                           
  9646                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9647  004930  0E00               	movlw	0
  9648  004932  0100               	movlb	0	; () banked
  9649  004934  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9650  004936  0E00               	movlw	0
  9651  004938  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9652  00493A  ECBA  F02B         	call	_I2C_Master_Write	;wreg free
  9653                           
  9654                           ;RTC.c: 51: I2C_Master_Stop();
  9655  00493E  ECC8  F02B         	call	_I2C_Master_Stop	;wreg free
  9656                           
  9657                           ;RTC.c: 54: I2C_Master_Start();
  9658  004942  ECCC  F02B         	call	_I2C_Master_Start	;wreg free
  9659                           
  9660                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9661  004946  0E00               	movlw	0
  9662  004948  0100               	movlb	0	; () banked
  9663  00494A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9664  00494C  0ED1               	movlw	209
  9665  00494E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9666  004950  ECBA  F02B         	call	_I2C_Master_Write	;wreg free
  9667                           
  9668                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9669  004954  0E00               	movlw	0
  9670  004956  0100               	movlb	0	; () banked
  9671  004958  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9672  00495A  0E00               	movlw	0
  9673  00495C  6F83               	movwf	getRTC@i& (0+255),b
  9674  00495E                     l6662:
  9675                           
  9676                           ; BSR set to: 0
  9677  00495E  0100               	movlb	0	; () banked
  9678  004960  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9679  004962  D008               	goto	l6666
  9680  004964  0100               	movlb	0	; () banked
  9681  004966  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9682  004968  E115               	bnz	l6672
  9683  00496A  0E06               	movlw	6
  9684  00496C  0100               	movlb	0	; () banked
  9685  00496E  5D83               	subwf	getRTC@i& (0+255),w,b
  9686  004970  B0D8               	btfsc	status,0,c
  9687  004972  D010               	goto	l6672
  9688  004974                     l6666:
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9692  004974  0E1C               	movlw	low _time
  9693  004976  0100               	movlb	0	; () banked
  9694  004978  2583               	addwf	getRTC@i& (0+255),w,b
  9695  00497A  6ED9               	movwf	fsr2l,c
  9696  00497C  0E01               	movlw	high _time
  9697  00497E  0100               	movlb	0	; () banked
  9698  004980  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9699  004982  6EDA               	movwf	fsr2h,c
  9700  004984  0E01               	movlw	1
  9701  004986  EC58  F02A         	call	_I2C_Master_Read
  9702  00498A  6EDF               	movwf	indf2,c
  9703  00498C  0100               	movlb	0	; () banked
  9704  00498E  4B83               	infsnz	getRTC@i& (0+255),f,b
  9705  004990  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9706  004992  D7E5               	goto	l6662
  9707  004994                     l6672:
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;RTC.c: 58: }
  9711                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9712  004994  0E00               	movlw	0
  9713  004996  EC58  F02A         	call	_I2C_Master_Read
  9714  00499A  0101               	movlb	1	; () banked
  9715  00499C  6F22               	movwf	(_time+6)& (0+255),b
  9716                           
  9717                           ;RTC.c: 60: I2C_Master_Stop();
  9718  00499E  ECC8  F02B         	call	_I2C_Master_Stop	;wreg free
  9719  0049A2  0012               	return		;funcret
  9720  0049A4                     __end_of_getRTC:
  9721                           	opt stack 0
  9722                           tblptru	equ	0xFF8
  9723                           tblptrh	equ	0xFF7
  9724                           tblptrl	equ	0xFF6
  9725                           tablat	equ	0xFF5
  9726                           prodh	equ	0xFF4
  9727                           prodl	equ	0xFF3
  9728                           intcon	equ	0xFF2
  9729                           intcon2	equ	0xFF1
  9730                           intcon3	equ	0xFF0
  9731                           postinc0	equ	0xFEE
  9732                           wreg	equ	0xFE8
  9733                           postdec1	equ	0xFE5
  9734                           fsr1l	equ	0xFE1
  9735                           indf2	equ	0xFDF
  9736                           postinc2	equ	0xFDE
  9737                           postdec2	equ	0xFDD
  9738                           fsr2h	equ	0xFDA
  9739                           fsr2l	equ	0xFD9
  9740                           status	equ	0xFD8
  9741                           
  9742 ;; *************** function _I2C_Master_Write *****************
  9743 ;; Defined at:
  9744 ;;		line 49 in file "I2C.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;  d               2    1[BANK0 ] unsigned int 
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;		None
  9749 ;; Return value:  Size  Location     Type
  9750 ;;                  1    wreg      void 
  9751 ;; Registers used:
  9752 ;;		wreg, status,2, status,0, cstack
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9762 ;;Total ram usage:        2 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    8
  9765 ;; This function calls:
  9766 ;;		_I2C_Master_Wait
  9767 ;; This function is called by:
  9768 ;;		_loadRTC
  9769 ;;		_getRTC
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text26
  9774  005774                     __ptext26:
  9775                           	opt stack 0
  9776  005774                     _I2C_Master_Write:
  9777                           	opt stack 18
  9778                           
  9779                           ;I2C.c: 51: I2C_Master_Wait();
  9780                           
  9781                           ;incstack = 0
  9782  005774  EC8B  F02B         	call	_I2C_Master_Wait	;wreg free
  9783                           
  9784                           ;I2C.c: 52: SSPBUF = d;
  9785  005778  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9786  00577C  0012               	return		;funcret
  9787  00577E                     __end_of_I2C_Master_Write:
  9788                           	opt stack 0
  9789                           tblptru	equ	0xFF8
  9790                           tblptrh	equ	0xFF7
  9791                           tblptrl	equ	0xFF6
  9792                           tablat	equ	0xFF5
  9793                           prodh	equ	0xFF4
  9794                           prodl	equ	0xFF3
  9795                           intcon	equ	0xFF2
  9796                           intcon2	equ	0xFF1
  9797                           intcon3	equ	0xFF0
  9798                           postinc0	equ	0xFEE
  9799                           wreg	equ	0xFE8
  9800                           postdec1	equ	0xFE5
  9801                           fsr1l	equ	0xFE1
  9802                           indf2	equ	0xFDF
  9803                           postinc2	equ	0xFDE
  9804                           postdec2	equ	0xFDD
  9805                           fsr2h	equ	0xFDA
  9806                           fsr2l	equ	0xFD9
  9807                           status	equ	0xFD8
  9808                           
  9809 ;; *************** function _I2C_Master_Stop *****************
  9810 ;; Defined at:
  9811 ;;		line 43 in file "I2C.c"
  9812 ;; Parameters:    Size  Location     Type
  9813 ;;		None
  9814 ;; Auto vars:     Size  Location     Type
  9815 ;;		None
  9816 ;; Return value:  Size  Location     Type
  9817 ;;                  1    wreg      void 
  9818 ;; Registers used:
  9819 ;;		wreg, status,2, status,0, cstack
  9820 ;; Tracked objects:
  9821 ;;		On entry : 0/0
  9822 ;;		On exit  : 0/0
  9823 ;;		Unchanged: 0/0
  9824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9829 ;;Total ram usage:        0 bytes
  9830 ;; Hardware stack levels used:    1
  9831 ;; Hardware stack levels required when called:    8
  9832 ;; This function calls:
  9833 ;;		_I2C_Master_Wait
  9834 ;; This function is called by:
  9835 ;;		_loadRTC
  9836 ;;		_getRTC
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           	psect	text27
  9841  005790                     __ptext27:
  9842                           	opt stack 0
  9843  005790                     _I2C_Master_Stop:
  9844                           	opt stack 18
  9845                           
  9846                           ;I2C.c: 45: I2C_Master_Wait();
  9847                           
  9848                           ;incstack = 0
  9849  005790  EC8B  F02B         	call	_I2C_Master_Wait	;wreg free
  9850                           
  9851                           ;I2C.c: 46: PEN = 1;
  9852  005794  84C5               	bsf	4037,2,c	;volatile
  9853  005796  0012               	return		;funcret
  9854  005798                     __end_of_I2C_Master_Stop:
  9855                           	opt stack 0
  9856                           tblptru	equ	0xFF8
  9857                           tblptrh	equ	0xFF7
  9858                           tblptrl	equ	0xFF6
  9859                           tablat	equ	0xFF5
  9860                           prodh	equ	0xFF4
  9861                           prodl	equ	0xFF3
  9862                           intcon	equ	0xFF2
  9863                           intcon2	equ	0xFF1
  9864                           intcon3	equ	0xFF0
  9865                           postinc0	equ	0xFEE
  9866                           wreg	equ	0xFE8
  9867                           postdec1	equ	0xFE5
  9868                           fsr1l	equ	0xFE1
  9869                           indf2	equ	0xFDF
  9870                           postinc2	equ	0xFDE
  9871                           postdec2	equ	0xFDD
  9872                           fsr2h	equ	0xFDA
  9873                           fsr2l	equ	0xFD9
  9874                           status	equ	0xFD8
  9875                           
  9876 ;; *************** function _I2C_Master_Start *****************
  9877 ;; Defined at:
  9878 ;;		line 31 in file "I2C.c"
  9879 ;; Parameters:    Size  Location     Type
  9880 ;;		None
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;		None
  9883 ;; Return value:  Size  Location     Type
  9884 ;;                  1    wreg      void 
  9885 ;; Registers used:
  9886 ;;		wreg, status,2, status,0, cstack
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;Total ram usage:        0 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; Hardware stack levels required when called:    8
  9899 ;; This function calls:
  9900 ;;		_I2C_Master_Wait
  9901 ;; This function is called by:
  9902 ;;		_loadRTC
  9903 ;;		_getRTC
  9904 ;; This function uses a non-reentrant model
  9905 ;;
  9906                           
  9907                           	psect	text28
  9908  005798                     __ptext28:
  9909                           	opt stack 0
  9910  005798                     _I2C_Master_Start:
  9911                           	opt stack 18
  9912                           
  9913                           ;I2C.c: 33: I2C_Master_Wait();
  9914                           
  9915                           ;incstack = 0
  9916  005798  EC8B  F02B         	call	_I2C_Master_Wait	;wreg free
  9917                           
  9918                           ;I2C.c: 34: SEN = 1;
  9919  00579C  80C5               	bsf	4037,0,c	;volatile
  9920  00579E  0012               	return		;funcret
  9921  0057A0                     __end_of_I2C_Master_Start:
  9922                           	opt stack 0
  9923                           tblptru	equ	0xFF8
  9924                           tblptrh	equ	0xFF7
  9925                           tblptrl	equ	0xFF6
  9926                           tablat	equ	0xFF5
  9927                           prodh	equ	0xFF4
  9928                           prodl	equ	0xFF3
  9929                           intcon	equ	0xFF2
  9930                           intcon2	equ	0xFF1
  9931                           intcon3	equ	0xFF0
  9932                           postinc0	equ	0xFEE
  9933                           wreg	equ	0xFE8
  9934                           postdec1	equ	0xFE5
  9935                           fsr1l	equ	0xFE1
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8
  9942                           
  9943 ;; *************** function _I2C_Master_Read *****************
  9944 ;; Defined at:
  9945 ;;		line 55 in file "I2C.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;  a               1    wreg     unsigned char 
  9948 ;; Auto vars:     Size  Location     Type
  9949 ;;  a               1    1[BANK0 ] unsigned char 
  9950 ;;  temp            1    2[BANK0 ] unsigned char 
  9951 ;; Return value:  Size  Location     Type
  9952 ;;                  1    wreg      unsigned char 
  9953 ;; Registers used:
  9954 ;;		wreg, status,2, status,0, cstack
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;Total ram usage:        2 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    8
  9967 ;; This function calls:
  9968 ;;		_I2C_Master_Wait
  9969 ;; This function is called by:
  9970 ;;		_getRTC
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	text29
  9975  0054B0                     __ptext29:
  9976                           	opt stack 0
  9977  0054B0                     _I2C_Master_Read:
  9978                           	opt stack 18
  9979                           
  9980                           ;incstack = 0
  9981                           ;I2C_Master_Read@a stored from wreg
  9982  0054B0  0100               	movlb	0	; () banked
  9983  0054B2  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9984                           
  9985                           ;I2C.c: 57: unsigned char temp;
  9986                           ;I2C.c: 58: I2C_Master_Wait();
  9987  0054B4  EC8B  F02B         	call	_I2C_Master_Wait	;wreg free
  9988                           
  9989                           ;I2C.c: 59: RCEN = 1;
  9990  0054B8  86C5               	bsf	4037,3,c	;volatile
  9991                           
  9992                           ;I2C.c: 60: I2C_Master_Wait();
  9993  0054BA  EC8B  F02B         	call	_I2C_Master_Wait	;wreg free
  9994                           
  9995                           ;I2C.c: 61: temp = SSPBUF;
  9996  0054BE  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9997                           
  9998                           ;I2C.c: 62: I2C_Master_Wait();
  9999  0054C2  EC8B  F02B         	call	_I2C_Master_Wait	;wreg free
 10000                           
 10001                           ;I2C.c: 63: ACKDT = (a)?0:1;
 10002  0054C6  0100               	movlb	0	; () banked
 10003  0054C8  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 10004  0054CA  0100               	movlb	0	; () banked
 10005  0054CC  A4D8               	btfss	status,2,c
 10006  0054CE  D002               	goto	u4670
 10007  0054D0  8AC5               	bsf	4037,5,c	;volatile
 10008  0054D2  D001               	goto	l6350
 10009  0054D4                     u4670:
 10010  0054D4  9AC5               	bcf	4037,5,c	;volatile
 10011  0054D6                     l6350:
 10012                           
 10013                           ;I2C.c: 64: ACKEN = 1;
 10014  0054D6  88C5               	bsf	4037,4,c	;volatile
 10015                           
 10016                           ;I2C.c: 65: return temp;
 10017  0054D8  0100               	movlb	0	; () banked
 10018  0054DA  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 10019  0054DC  0012               	return	
 10020  0054DE                     __end_of_I2C_Master_Read:
 10021                           	opt stack 0
 10022                           tblptru	equ	0xFF8
 10023                           tblptrh	equ	0xFF7
 10024                           tblptrl	equ	0xFF6
 10025                           tablat	equ	0xFF5
 10026                           prodh	equ	0xFF4
 10027                           prodl	equ	0xFF3
 10028                           intcon	equ	0xFF2
 10029                           intcon2	equ	0xFF1
 10030                           intcon3	equ	0xFF0
 10031                           postinc0	equ	0xFEE
 10032                           wreg	equ	0xFE8
 10033                           postdec1	equ	0xFE5
 10034                           fsr1l	equ	0xFE1
 10035                           indf2	equ	0xFDF
 10036                           postinc2	equ	0xFDE
 10037                           postdec2	equ	0xFDD
 10038                           fsr2h	equ	0xFDA
 10039                           fsr2l	equ	0xFD9
 10040                           status	equ	0xFD8
 10041                           
 10042 ;; *************** function _I2C_Master_Wait *****************
 10043 ;; Defined at:
 10044 ;;		line 26 in file "I2C.c"
 10045 ;; Parameters:    Size  Location     Type
 10046 ;;		None
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;		None
 10049 ;; Return value:  Size  Location     Type
 10050 ;;                  1    wreg      void 
 10051 ;; Registers used:
 10052 ;;		wreg, status,2, status,0
 10053 ;; Tracked objects:
 10054 ;;		On entry : 0/0
 10055 ;;		On exit  : 0/0
 10056 ;;		Unchanged: 0/0
 10057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;Total ram usage:        1 bytes
 10063 ;; Hardware stack levels used:    1
 10064 ;; Hardware stack levels required when called:    7
 10065 ;; This function calls:
 10066 ;;		Nothing
 10067 ;; This function is called by:
 10068 ;;		_I2C_Master_Start
 10069 ;;		_I2C_Master_Stop
 10070 ;;		_I2C_Master_Write
 10071 ;;		_I2C_Master_Read
 10072 ;;		_I2C_Master_RepeatedStart
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           	psect	text30
 10077  005716                     __ptext30:
 10078                           	opt stack 0
 10079  005716                     _I2C_Master_Wait:
 10080                           	opt stack 18
 10081  005716                     l66:
 10082  005716  B4C7               	btfsc	4039,2,c	;volatile
 10083  005718  D7FE               	goto	l66
 10084  00571A  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 10085  00571E  0E1F               	movlw	31
 10086  005720  0100               	movlb	0	; () banked
 10087  005722  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 10088  005724  B4D8               	btfsc	status,2,c
 10089  005726  0012               	return	
 10090  005728  D7F6               	goto	l66
 10091  00572A                     __end_of_I2C_Master_Wait:
 10092                           	opt stack 0
 10093                           tblptru	equ	0xFF8
 10094                           tblptrh	equ	0xFF7
 10095                           tblptrl	equ	0xFF6
 10096                           tablat	equ	0xFF5
 10097                           prodh	equ	0xFF4
 10098                           prodl	equ	0xFF3
 10099                           intcon	equ	0xFF2
 10100                           intcon2	equ	0xFF1
 10101                           intcon3	equ	0xFF0
 10102                           postinc0	equ	0xFEE
 10103                           wreg	equ	0xFE8
 10104                           postdec1	equ	0xFE5
 10105                           fsr1l	equ	0xFE1
 10106                           indf2	equ	0xFDF
 10107                           postinc2	equ	0xFDE
 10108                           postdec2	equ	0xFDD
 10109                           fsr2h	equ	0xFDA
 10110                           fsr2l	equ	0xFD9
 10111                           status	equ	0xFD8
 10112                           
 10113 ;; *************** function _change_state_to_menu_22 *****************
 10114 ;; Defined at:
 10115 ;;		line 501 in file "UI.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;		None
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;		None
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  1    wreg      void 
 10122 ;; Registers used:
 10123 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;Total ram usage:        0 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:   10
 10136 ;; This function calls:
 10137 ;;		_lcdInst
 10138 ;;		_printf
 10139 ;; This function is called by:
 10140 ;;		_UI
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           	psect	text31
 10145  005190                     __ptext31:
 10146                           	opt stack 0
 10147  005190                     _change_state_to_menu_22:
 10148                           	opt stack 19
 10149                           
 10150                           ;UI.c: 502: cur_state = 22;
 10151                           
 10152                           ; BSR set to: 0
 10153                           ;incstack = 0
 10154  005190  0E00               	movlw	0
 10155  005192  0100               	movlb	0	; () banked
 10156  005194  6FED               	movwf	(_cur_state+1)& (0+255),b
 10157  005196  0E16               	movlw	22
 10158  005198  6FEC               	movwf	_cur_state& (0+255),b
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;UI.c: 504: lcdInst(0b10000000);;
 10162  00519A  0E80               	movlw	128
 10163  00519C  ECA6  F02B         	call	_lcdInst
 10164                           
 10165                           ;UI.c: 505: printf("2. SORT        <");
 10166  0051A0  0ECE               	movlw	low STR_34
 10167  0051A2  0100               	movlb	0	; () banked
 10168  0051A4  6F8E               	movwf	printf@f& (0+255),b
 10169  0051A6  0EFD               	movlw	high STR_34
 10170  0051A8  0100               	movlb	0	; () banked
 10171  0051AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10172  0051AC  EC87  F00B         	call	_printf	;wreg free
 10173                           
 10174                           ;UI.c: 506: lcdInst(0b11000000);;
 10175  0051B0  0EC0               	movlw	192
 10176  0051B2  ECA6  F02B         	call	_lcdInst
 10177                           
 10178                           ;UI.c: 507: printf("3. LOGS         ");
 10179  0051B6  0E13               	movlw	low STR_36
 10180  0051B8  0100               	movlb	0	; () banked
 10181  0051BA  6F8E               	movwf	printf@f& (0+255),b
 10182  0051BC  0EFD               	movlw	high STR_36
 10183  0051BE  0100               	movlb	0	; () banked
 10184  0051C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10185  0051C2  EC87  F00B         	call	_printf	;wreg free
 10186  0051C6  0012               	return		;funcret
 10187  0051C8                     __end_of_change_state_to_menu_22:
 10188                           	opt stack 0
 10189                           tblptru	equ	0xFF8
 10190                           tblptrh	equ	0xFF7
 10191                           tblptrl	equ	0xFF6
 10192                           tablat	equ	0xFF5
 10193                           prodh	equ	0xFF4
 10194                           prodl	equ	0xFF3
 10195                           intcon	equ	0xFF2
 10196                           intcon2	equ	0xFF1
 10197                           intcon3	equ	0xFF0
 10198                           postinc0	equ	0xFEE
 10199                           wreg	equ	0xFE8
 10200                           postdec1	equ	0xFE5
 10201                           fsr1l	equ	0xFE1
 10202                           indf2	equ	0xFDF
 10203                           postinc2	equ	0xFDE
 10204                           postdec2	equ	0xFDD
 10205                           fsr2h	equ	0xFDA
 10206                           fsr2l	equ	0xFD9
 10207                           status	equ	0xFD8
 10208                           
 10209 ;; *************** function _change_state_to_menu_12 *****************
 10210 ;; Defined at:
 10211 ;;		line 493 in file "UI.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;		None
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;		None
 10216 ;; Return value:  Size  Location     Type
 10217 ;;                  1    wreg      void 
 10218 ;; Registers used:
 10219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10220 ;; Tracked objects:
 10221 ;;		On entry : 0/0
 10222 ;;		On exit  : 0/0
 10223 ;;		Unchanged: 0/0
 10224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;Total ram usage:        0 bytes
 10230 ;; Hardware stack levels used:    1
 10231 ;; Hardware stack levels required when called:   10
 10232 ;; This function calls:
 10233 ;;		_lcdInst
 10234 ;;		_printf
 10235 ;; This function is called by:
 10236 ;;		_UI
 10237 ;; This function uses a non-reentrant model
 10238 ;;
 10239                           
 10240                           	psect	text32
 10241  0051C8                     __ptext32:
 10242                           	opt stack 0
 10243  0051C8                     _change_state_to_menu_12:
 10244                           	opt stack 19
 10245                           
 10246                           ;UI.c: 494: cur_state = 12;
 10247                           
 10248                           ;incstack = 0
 10249  0051C8  0E00               	movlw	0
 10250  0051CA  0100               	movlb	0	; () banked
 10251  0051CC  6FED               	movwf	(_cur_state+1)& (0+255),b
 10252  0051CE  0E0C               	movlw	12
 10253  0051D0  6FEC               	movwf	_cur_state& (0+255),b
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;UI.c: 496: lcdInst(0b10000000);;
 10257  0051D2  0E80               	movlw	128
 10258  0051D4  ECA6  F02B         	call	_lcdInst
 10259                           
 10260                           ;UI.c: 497: printf("1. DATE/TIME    ");
 10261  0051D8  0E35               	movlw	low STR_33
 10262  0051DA  0100               	movlb	0	; () banked
 10263  0051DC  6F8E               	movwf	printf@f& (0+255),b
 10264  0051DE  0EFD               	movlw	high STR_33
 10265  0051E0  0100               	movlb	0	; () banked
 10266  0051E2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10267  0051E4  EC87  F00B         	call	_printf	;wreg free
 10268                           
 10269                           ;UI.c: 498: lcdInst(0b11000000);;
 10270  0051E8  0EC0               	movlw	192
 10271  0051EA  ECA6  F02B         	call	_lcdInst
 10272                           
 10273                           ;UI.c: 499: printf("2. SORT        <");
 10274  0051EE  0ECE               	movlw	low STR_34
 10275  0051F0  0100               	movlb	0	; () banked
 10276  0051F2  6F8E               	movwf	printf@f& (0+255),b
 10277  0051F4  0EFD               	movlw	high STR_34
 10278  0051F6  0100               	movlb	0	; () banked
 10279  0051F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10280  0051FA  EC87  F00B         	call	_printf	;wreg free
 10281  0051FE  0012               	return		;funcret
 10282  005200                     __end_of_change_state_to_menu_12:
 10283                           	opt stack 0
 10284                           tblptru	equ	0xFF8
 10285                           tblptrh	equ	0xFF7
 10286                           tblptrl	equ	0xFF6
 10287                           tablat	equ	0xFF5
 10288                           prodh	equ	0xFF4
 10289                           prodl	equ	0xFF3
 10290                           intcon	equ	0xFF2
 10291                           intcon2	equ	0xFF1
 10292                           intcon3	equ	0xFF0
 10293                           postinc0	equ	0xFEE
 10294                           wreg	equ	0xFE8
 10295                           postdec1	equ	0xFE5
 10296                           fsr1l	equ	0xFE1
 10297                           indf2	equ	0xFDF
 10298                           postinc2	equ	0xFDE
 10299                           postdec2	equ	0xFDD
 10300                           fsr2h	equ	0xFDA
 10301                           fsr2l	equ	0xFD9
 10302                           status	equ	0xFD8
 10303                           
 10304 ;; *************** function ___awmod *****************
 10305 ;; Defined at:
 10306 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;  dividend        2    0[BANK0 ] int 
 10309 ;;  divisor         2    2[BANK0 ] int 
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;  sign            1    5[BANK0 ] unsigned char 
 10312 ;;  counter         1    4[BANK0 ] unsigned char 
 10313 ;; Return value:  Size  Location     Type
 10314 ;;                  2    0[BANK0 ] int 
 10315 ;; Registers used:
 10316 ;;		wreg, status,2, status,0
 10317 ;; Tracked objects:
 10318 ;;		On entry : 0/0
 10319 ;;		On exit  : 0/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10322 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10323 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10325 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10326 ;;Total ram usage:        6 bytes
 10327 ;; Hardware stack levels used:    1
 10328 ;; Hardware stack levels required when called:    7
 10329 ;; This function calls:
 10330 ;;		Nothing
 10331 ;; This function is called by:
 10332 ;;		_UI
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           	psect	text33
 10337  0047F0                     __ptext33:
 10338                           	opt stack 0
 10339  0047F0                     ___awmod:
 10340                           	opt stack 22
 10341                           
 10342                           ;incstack = 0
 10343  0047F0  0E00               	movlw	0
 10344  0047F2  0100               	movlb	0	; () banked
 10345  0047F4  6F85               	movwf	___awmod@sign& (0+255),b
 10346                           
 10347                           ; BSR set to: 0
 10348  0047F6  0100               	movlb	0	; () banked
 10349  0047F8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10350  0047FA  D008               	goto	l8862
 10351                           
 10352                           ; BSR set to: 0
 10353  0047FC  0100               	movlb	0	; () banked
 10354  0047FE  6D80               	negf	___awmod@dividend& (0+255),b
 10355  004800  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10356  004802  B0D8               	btfsc	status,0,c
 10357  004804  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10358                           
 10359                           ; BSR set to: 0
 10360  004806  0E01               	movlw	1
 10361  004808  0100               	movlb	0	; () banked
 10362  00480A  6F85               	movwf	___awmod@sign& (0+255),b
 10363  00480C                     l8862:
 10364                           
 10365                           ; BSR set to: 0
 10366  00480C  0100               	movlb	0	; () banked
 10367  00480E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10368  004810  D005               	goto	l8866
 10369                           
 10370                           ; BSR set to: 0
 10371  004812  0100               	movlb	0	; () banked
 10372  004814  6D82               	negf	___awmod@divisor& (0+255),b
 10373  004816  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10374  004818  B0D8               	btfsc	status,0,c
 10375  00481A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10376  00481C                     l8866:
 10377                           
 10378                           ; BSR set to: 0
 10379  00481C  0100               	movlb	0	; () banked
 10380  00481E  5182               	movf	___awmod@divisor& (0+255),w,b
 10381  004820  0100               	movlb	0	; () banked
 10382  004822  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10383  004824  B4D8               	btfsc	status,2,c
 10384  004826  D026               	goto	l8882
 10385                           
 10386                           ; BSR set to: 0
 10387  004828  0E01               	movlw	1
 10388  00482A  0100               	movlb	0	; () banked
 10389  00482C  6F84               	movwf	___awmod@counter& (0+255),b
 10390  00482E  D006               	goto	l8872
 10391  004830                     l8870:
 10392                           
 10393                           ; BSR set to: 0
 10394  004830  0100               	movlb	0	; () banked
 10395  004832  90D8               	bcf	status,0,c
 10396  004834  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10397  004836  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10398  004838  0100               	movlb	0	; () banked
 10399  00483A  2B84               	incf	___awmod@counter& (0+255),f,b
 10400  00483C                     l8872:
 10401                           
 10402                           ; BSR set to: 0
 10403  00483C  0100               	movlb	0	; () banked
 10404  00483E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10405  004840  D7F7               	goto	l8870
 10406  004842                     l8874:
 10407                           
 10408                           ; BSR set to: 0
 10409  004842  0100               	movlb	0	; () banked
 10410  004844  5182               	movf	___awmod@divisor& (0+255),w,b
 10411  004846  0100               	movlb	0	; () banked
 10412  004848  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10413  00484A  0100               	movlb	0	; () banked
 10414  00484C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10415  00484E  0100               	movlb	0	; () banked
 10416  004850  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10417  004852  A0D8               	btfss	status,0,c
 10418  004854  D008               	goto	l8878
 10419                           
 10420                           ; BSR set to: 0
 10421  004856  0100               	movlb	0	; () banked
 10422  004858  5182               	movf	___awmod@divisor& (0+255),w,b
 10423  00485A  0100               	movlb	0	; () banked
 10424  00485C  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10425  00485E  0100               	movlb	0	; () banked
 10426  004860  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10427  004862  0100               	movlb	0	; () banked
 10428  004864  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10429  004866                     l8878:
 10430                           
 10431                           ; BSR set to: 0
 10432  004866  0100               	movlb	0	; () banked
 10433  004868  90D8               	bcf	status,0,c
 10434  00486A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10435  00486C  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10436                           
 10437                           ; BSR set to: 0
 10438  00486E  0100               	movlb	0	; () banked
 10439  004870  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10440  004872  D7E7               	goto	l8874
 10441  004874                     l8882:
 10442                           
 10443                           ; BSR set to: 0
 10444  004874  0100               	movlb	0	; () banked
 10445  004876  5185               	movf	___awmod@sign& (0+255),w,b
 10446  004878  0100               	movlb	0	; () banked
 10447  00487A  B4D8               	btfsc	status,2,c
 10448  00487C  D005               	goto	l8886
 10449                           
 10450                           ; BSR set to: 0
 10451  00487E  0100               	movlb	0	; () banked
 10452  004880  6D80               	negf	___awmod@dividend& (0+255),b
 10453  004882  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10454  004884  B0D8               	btfsc	status,0,c
 10455  004886  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10456  004888                     l8886:
 10457                           
 10458                           ; BSR set to: 0
 10459  004888  C080  F080         	movff	___awmod@dividend,?___awmod
 10460  00488C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10461  004890  0012               	return	
 10462  004892                     __end_of___awmod:
 10463                           	opt stack 0
 10464                           tblptru	equ	0xFF8
 10465                           tblptrh	equ	0xFF7
 10466                           tblptrl	equ	0xFF6
 10467                           tablat	equ	0xFF5
 10468                           prodh	equ	0xFF4
 10469                           prodl	equ	0xFF3
 10470                           intcon	equ	0xFF2
 10471                           intcon2	equ	0xFF1
 10472                           intcon3	equ	0xFF0
 10473                           postinc0	equ	0xFEE
 10474                           wreg	equ	0xFE8
 10475                           postdec1	equ	0xFE5
 10476                           fsr1l	equ	0xFE1
 10477                           indf2	equ	0xFDF
 10478                           postinc2	equ	0xFDE
 10479                           postdec2	equ	0xFDD
 10480                           fsr2h	equ	0xFDA
 10481                           fsr2l	equ	0xFD9
 10482                           status	equ	0xFD8
 10483                           
 10484 ;; *************** function ___awdiv *****************
 10485 ;; Defined at:
 10486 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10487 ;; Parameters:    Size  Location     Type
 10488 ;;  dividend        2    6[BANK0 ] int 
 10489 ;;  divisor         2    8[BANK0 ] int 
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;  quotient        2   12[BANK0 ] int 
 10492 ;;  sign            1   11[BANK0 ] unsigned char 
 10493 ;;  counter         1   10[BANK0 ] unsigned char 
 10494 ;; Return value:  Size  Location     Type
 10495 ;;                  2    6[BANK0 ] int 
 10496 ;; Registers used:
 10497 ;;		wreg, status,2, status,0
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10503 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10507 ;;Total ram usage:        8 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; Hardware stack levels required when called:    7
 10510 ;; This function calls:
 10511 ;;		Nothing
 10512 ;; This function is called by:
 10513 ;;		_UI
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           	psect	text34
 10518  0045CC                     __ptext34:
 10519                           	opt stack 0
 10520  0045CC                     ___awdiv:
 10521                           	opt stack 22
 10522                           
 10523                           ; BSR set to: 0
 10524                           ;incstack = 0
 10525  0045CC  0E00               	movlw	0
 10526  0045CE  0100               	movlb	0	; () banked
 10527  0045D0  6F8B               	movwf	___awdiv@sign& (0+255),b
 10528                           
 10529                           ; BSR set to: 0
 10530  0045D2  0100               	movlb	0	; () banked
 10531  0045D4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10532  0045D6  D008               	goto	l8818
 10533                           
 10534                           ; BSR set to: 0
 10535  0045D8  0100               	movlb	0	; () banked
 10536  0045DA  6D88               	negf	___awdiv@divisor& (0+255),b
 10537  0045DC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10538  0045DE  B0D8               	btfsc	status,0,c
 10539  0045E0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10540                           
 10541                           ; BSR set to: 0
 10542  0045E2  0E01               	movlw	1
 10543  0045E4  0100               	movlb	0	; () banked
 10544  0045E6  6F8B               	movwf	___awdiv@sign& (0+255),b
 10545  0045E8                     l8818:
 10546                           
 10547                           ; BSR set to: 0
 10548  0045E8  0100               	movlb	0	; () banked
 10549  0045EA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10550  0045EC  D008               	goto	l8824
 10551                           
 10552                           ; BSR set to: 0
 10553  0045EE  0100               	movlb	0	; () banked
 10554  0045F0  6D86               	negf	___awdiv@dividend& (0+255),b
 10555  0045F2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10556  0045F4  B0D8               	btfsc	status,0,c
 10557  0045F6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10558                           
 10559                           ; BSR set to: 0
 10560  0045F8  0E01               	movlw	1
 10561  0045FA  0100               	movlb	0	; () banked
 10562  0045FC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10563  0045FE                     l8824:
 10564                           
 10565                           ; BSR set to: 0
 10566  0045FE  0E00               	movlw	0
 10567  004600  0100               	movlb	0	; () banked
 10568  004602  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10569  004604  0E00               	movlw	0
 10570  004606  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10571                           
 10572                           ; BSR set to: 0
 10573  004608  0100               	movlb	0	; () banked
 10574  00460A  5188               	movf	___awdiv@divisor& (0+255),w,b
 10575  00460C  0100               	movlb	0	; () banked
 10576  00460E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10577  004610  B4D8               	btfsc	status,2,c
 10578  004612  D02C               	goto	l8846
 10579                           
 10580                           ; BSR set to: 0
 10581  004614  0E01               	movlw	1
 10582  004616  0100               	movlb	0	; () banked
 10583  004618  6F8A               	movwf	___awdiv@counter& (0+255),b
 10584  00461A  D006               	goto	l8832
 10585  00461C                     l8830:
 10586                           
 10587                           ; BSR set to: 0
 10588  00461C  0100               	movlb	0	; () banked
 10589  00461E  90D8               	bcf	status,0,c
 10590  004620  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10591  004622  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10592  004624  0100               	movlb	0	; () banked
 10593  004626  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10594  004628                     l8832:
 10595                           
 10596                           ; BSR set to: 0
 10597  004628  0100               	movlb	0	; () banked
 10598  00462A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10599  00462C  D7F7               	goto	l8830
 10600  00462E                     l8834:
 10601                           
 10602                           ; BSR set to: 0
 10603  00462E  0100               	movlb	0	; () banked
 10604  004630  90D8               	bcf	status,0,c
 10605  004632  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10606  004634  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10607                           
 10608                           ; BSR set to: 0
 10609  004636  0100               	movlb	0	; () banked
 10610  004638  5188               	movf	___awdiv@divisor& (0+255),w,b
 10611  00463A  0100               	movlb	0	; () banked
 10612  00463C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10613  00463E  0100               	movlb	0	; () banked
 10614  004640  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10615  004642  0100               	movlb	0	; () banked
 10616  004644  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10617  004646  A0D8               	btfss	status,0,c
 10618  004648  D00A               	goto	l8842
 10619                           
 10620                           ; BSR set to: 0
 10621  00464A  0100               	movlb	0	; () banked
 10622  00464C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10623  00464E  0100               	movlb	0	; () banked
 10624  004650  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10625  004652  0100               	movlb	0	; () banked
 10626  004654  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10627  004656  0100               	movlb	0	; () banked
 10628  004658  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10629                           
 10630                           ; BSR set to: 0
 10631  00465A  0100               	movlb	0	; () banked
 10632  00465C  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10633  00465E                     l8842:
 10634                           
 10635                           ; BSR set to: 0
 10636  00465E  0100               	movlb	0	; () banked
 10637  004660  90D8               	bcf	status,0,c
 10638  004662  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10639  004664  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10640                           
 10641                           ; BSR set to: 0
 10642  004666  0100               	movlb	0	; () banked
 10643  004668  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10644  00466A  D7E1               	goto	l8834
 10645  00466C                     l8846:
 10646                           
 10647                           ; BSR set to: 0
 10648  00466C  0100               	movlb	0	; () banked
 10649  00466E  518B               	movf	___awdiv@sign& (0+255),w,b
 10650  004670  0100               	movlb	0	; () banked
 10651  004672  B4D8               	btfsc	status,2,c
 10652  004674  D005               	goto	l8850
 10653                           
 10654                           ; BSR set to: 0
 10655  004676  0100               	movlb	0	; () banked
 10656  004678  6D8C               	negf	___awdiv@quotient& (0+255),b
 10657  00467A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10658  00467C  B0D8               	btfsc	status,0,c
 10659  00467E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10660  004680                     l8850:
 10661                           
 10662                           ; BSR set to: 0
 10663  004680  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10664  004684  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10665  004688  0012               	return	
 10666  00468A                     __end_of___awdiv:
 10667                           	opt stack 0
 10668                           tblptru	equ	0xFF8
 10669                           tblptrh	equ	0xFF7
 10670                           tblptrl	equ	0xFF6
 10671                           tablat	equ	0xFF5
 10672                           prodh	equ	0xFF4
 10673                           prodl	equ	0xFF3
 10674                           intcon	equ	0xFF2
 10675                           intcon2	equ	0xFF1
 10676                           intcon3	equ	0xFF0
 10677                           postinc0	equ	0xFEE
 10678                           wreg	equ	0xFE8
 10679                           postdec1	equ	0xFE5
 10680                           fsr1l	equ	0xFE1
 10681                           indf2	equ	0xFDF
 10682                           postinc2	equ	0xFDE
 10683                           postdec2	equ	0xFDD
 10684                           fsr2h	equ	0xFDA
 10685                           fsr2l	equ	0xFD9
 10686                           status	equ	0xFD8
 10687                           
 10688 ;; *************** function _Test *****************
 10689 ;; Defined at:
 10690 ;;		line 31 in file "Test.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;		None
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;		None
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  1    wreg      void 
 10697 ;; Registers used:
 10698 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10708 ;;Total ram usage:        2 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:   11
 10711 ;; This function calls:
 10712 ;;		_BlockerTest
 10713 ;;		_BothServos
 10714 ;;		_PlatformTest
 10715 ;;		_PortTestDC
 10716 ;;		_PortTestPusher
 10717 ;;		_SpeedTest
 10718 ;;		_actuatorTest
 10719 ;;		_algorithmTest
 10720 ;;		_arm
 10721 ;;		_lcdInst
 10722 ;;		_printf
 10723 ;;		_sensorTest
 10724 ;; This function is called by:
 10725 ;;		_main
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729                           	psect	text35
 10730  003FA6                     __ptext35:
 10731                           	opt stack 0
 10732  003FA6                     _Test:
 10733                           	opt stack 19
 10734                           
 10735                           ;Test.c: 33: while(machine_state == Testing_state){
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;incstack = 0
 10739  003FA6  D07C               	goto	l9610
 10740  003FA8                     l9570:
 10741                           
 10742                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10743  003FA8  0E01               	movlw	1
 10744  003FAA  ECA6  F02B         	call	_lcdInst
 10745  003FAE  0E68               	movlw	104
 10746  003FB0  0100               	movlb	0	; () banked
 10747  003FB2  6FC6               	movwf	??_Test& (0+255),b
 10748  003FB4  0EE4               	movlw	228
 10749  003FB6                     u9907:
 10750  003FB6  2EE8               	decfsz	wreg,f,c
 10751  003FB8  D7FE               	bra	u9907
 10752  003FBA  2FC6               	decfsz	??_Test& (0+255),f,b
 10753  003FBC  D7FC               	bra	u9907
 10754  003FBE  F000               	nop	
 10755  003FC0  0E80               	movlw	128
 10756  003FC2  ECA6  F02B         	call	_lcdInst
 10757                           
 10758                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 10759  003FC6  0E8B               	movlw	low STR_68
 10760  003FC8  0100               	movlb	0	; () banked
 10761  003FCA  6F8E               	movwf	printf@f& (0+255),b
 10762  003FCC  0EFC               	movlw	high STR_68
 10763  003FCE  0100               	movlb	0	; () banked
 10764  003FD0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10765  003FD2  EC87  F00B         	call	_printf	;wreg free
 10766                           
 10767                           ;Test.c: 36: lcdInst(0b11000000);;
 10768  003FD6  0EC0               	movlw	192
 10769  003FD8  ECA6  F02B         	call	_lcdInst
 10770                           
 10771                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 10772  003FDC  0E9C               	movlw	low STR_69
 10773  003FDE  0100               	movlb	0	; () banked
 10774  003FE0  6F8E               	movwf	printf@f& (0+255),b
 10775  003FE2  0EFC               	movlw	high STR_69
 10776  003FE4  0100               	movlb	0	; () banked
 10777  003FE6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10778  003FE8  EC87  F00B         	call	_printf	;wreg free
 10779  003FEC                     l1200:
 10780  003FEC  A281               	btfss	3969,1,c	;volatile
 10781  003FEE  D7FE               	goto	l1200
 10782                           
 10783                           ;Test.c: 39: var = PORTB >> 4;
 10784  003FF0  CF81 F0C6          	movff	3969,??_Test	;volatile
 10785  003FF4  0100               	movlb	0	; () banked
 10786  003FF6  3BC6               	swapf	??_Test& (0+255),f,b
 10787  003FF8  0E0F               	movlw	15
 10788  003FFA  17C6               	andwf	??_Test& (0+255),f,b
 10789  003FFC  0100               	movlb	0	; () banked
 10790  003FFE  51C6               	movf	??_Test& (0+255),w,b
 10791  004000  0101               	movlb	1	; () banked
 10792  004002  6F45               	movwf	_var& (0+255),b
 10793  004004  6B46               	clrf	(_var+1)& (0+255),b
 10794                           
 10795                           ; BSR set to: 1
 10796                           ;Test.c: 40: var++;
 10797  004006  0101               	movlb	1	; () banked
 10798  004008  4B45               	infsnz	_var& (0+255),f,b
 10799  00400A  2B46               	incf	(_var+1)& (0+255),f,b
 10800  00400C                     l1203:
 10801  00400C  A281               	btfss	3969,1,c	;volatile
 10802  00400E  D01F               	goto	l9608
 10803  004010  D7FD               	goto	l1203
 10804  004012                     l9586:
 10805                           
 10806                           ;Test.c: 44: algorithmTest();
 10807  004012  ECBA  F021         	call	_algorithmTest	;wreg free
 10808                           
 10809                           ;Test.c: 45: break;
 10810  004016  D044               	goto	l9610
 10811  004018                     l9588:
 10812                           
 10813                           ;Test.c: 47: sensorTest();
 10814  004018  EC20  F013         	call	_sensorTest	;wreg free
 10815                           
 10816                           ;Test.c: 48: break;
 10817  00401C  D041               	goto	l9610
 10818  00401E                     l9590:
 10819                           
 10820                           ;Test.c: 50: actuatorTest();
 10821  00401E  EC6B  F004         	call	_actuatorTest	;wreg free
 10822                           
 10823                           ;Test.c: 51: break;
 10824  004022  D03E               	goto	l9610
 10825  004024                     l9592:
 10826                           
 10827                           ;Test.c: 53: arm();
 10828  004024  EC56  F020         	call	_arm	;wreg free
 10829                           
 10830                           ;Test.c: 54: break;
 10831  004028  D03B               	goto	l9610
 10832  00402A                     l9594:
 10833                           
 10834                           ;Test.c: 56: PortTestDC();
 10835  00402A  EC70  F027         	call	_PortTestDC	;wreg free
 10836                           
 10837                           ;Test.c: 57: break;
 10838  00402E  D038               	goto	l9610
 10839  004030                     l9596:
 10840                           
 10841                           ;Test.c: 59: SpeedTest();
 10842  004030  EC15  F025         	call	_SpeedTest	;wreg free
 10843                           
 10844                           ;Test.c: 60: break;
 10845  004034  D035               	goto	l9610
 10846  004036                     l9598:
 10847                           
 10848                           ;Test.c: 62: PortTestPusher();
 10849  004036  EC42  F027         	call	_PortTestPusher	;wreg free
 10850                           
 10851                           ;Test.c: 63: break;
 10852  00403A  D032               	goto	l9610
 10853  00403C                     l9600:
 10854                           
 10855                           ;Test.c: 65: PlatformTest();
 10856  00403C  EC9A  F00F         	call	_PlatformTest	;wreg free
 10857                           
 10858                           ;Test.c: 66: break;
 10859  004040  D02F               	goto	l9610
 10860  004042                     l9602:
 10861                           
 10862                           ;Test.c: 68: BothServos();
 10863  004042  ECA3  F00D         	call	_BothServos	;wreg free
 10864                           
 10865                           ;Test.c: 69: break;
 10866  004046  D02C               	goto	l9610
 10867  004048                     l9604:
 10868                           
 10869                           ;Test.c: 71: BlockerTest();
 10870  004048  ECDF  F01D         	call	_BlockerTest	;wreg free
 10871                           
 10872                           ;Test.c: 75: }
 10873                           
 10874                           ;Test.c: 74: break;
 10875                           
 10876                           ;Test.c: 73: default:
 10877                           
 10878                           ;Test.c: 72: break;
 10879  00404C  D029               	goto	l9610
 10880  00404E                     l9608:
 10881  00404E  C145  F0C6         	movff	_var,??_Test
 10882  004052  C146  F0C7         	movff	_var+1,??_Test+1
 10883                           
 10884                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10885                           ; Switch size 1, requested type "space"
 10886                           ; Number of cases is 1, Range of values is 0 to 0
 10887                           ; switch strategies available:
 10888                           ; Name         Instructions Cycles
 10889                           ; simple_byte            4     3 (average)
 10890                           ;	Chosen strategy is simple_byte
 10891  004056  0100               	movlb	0	; () banked
 10892  004058  51C7               	movf	(??_Test+1)& (0+255),w,b
 10893  00405A  0A00               	xorlw	0	; case 0
 10894  00405C  A4D8               	btfss	status,2,c
 10895  00405E  D020               	goto	l9610
 10896                           
 10897                           ; BSR set to: 0
 10898                           ; Switch size 1, requested type "space"
 10899                           ; Number of cases is 10, Range of values is 1 to 11
 10900                           ; switch strategies available:
 10901                           ; Name         Instructions Cycles
 10902                           ; simple_byte           31    16 (average)
 10903                           ;	Chosen strategy is simple_byte
 10904  004060  0100               	movlb	0	; () banked
 10905  004062  51C6               	movf	??_Test& (0+255),w,b
 10906  004064  0A01               	xorlw	1	; case 1
 10907  004066  B4D8               	btfsc	status,2,c
 10908  004068  D7D4               	goto	l9586
 10909  00406A  0A03               	xorlw	3	; case 2
 10910  00406C  B4D8               	btfsc	status,2,c
 10911  00406E  D7D4               	goto	l9588
 10912  004070  0A01               	xorlw	1	; case 3
 10913  004072  B4D8               	btfsc	status,2,c
 10914  004074  D7D4               	goto	l9590
 10915  004076  0A07               	xorlw	7	; case 4
 10916  004078  B4D8               	btfsc	status,2,c
 10917  00407A  D7D4               	goto	l9592
 10918  00407C  0A01               	xorlw	1	; case 5
 10919  00407E  B4D8               	btfsc	status,2,c
 10920  004080  D7D4               	goto	l9594
 10921  004082  0A03               	xorlw	3	; case 6
 10922  004084  B4D8               	btfsc	status,2,c
 10923  004086  D7D4               	goto	l9596
 10924  004088  0A01               	xorlw	1	; case 7
 10925  00408A  B4D8               	btfsc	status,2,c
 10926  00408C  D7D4               	goto	l9598
 10927  00408E  0A0F               	xorlw	15	; case 8
 10928  004090  B4D8               	btfsc	status,2,c
 10929  004092  D7D4               	goto	l9600
 10930  004094  0A02               	xorlw	2	; case 10
 10931  004096  B4D8               	btfsc	status,2,c
 10932  004098  D7D4               	goto	l9602
 10933  00409A  0A01               	xorlw	1	; case 11
 10934  00409C  B4D8               	btfsc	status,2,c
 10935  00409E  D7D4               	goto	l9604
 10936  0040A0                     l9610:
 10937  0040A0  0E03               	movlw	3
 10938  0040A2  0100               	movlb	0	; () banked
 10939  0040A4  19FC               	xorwf	_machine_state& (0+255),w,b
 10940  0040A6  A4D8               	btfss	status,2,c
 10941  0040A8  0012               	return	
 10942  0040AA  D77E               	goto	l9570
 10943  0040AC                     __end_of_Test:
 10944                           	opt stack 0
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           prodh	equ	0xFF4
 10950                           prodl	equ	0xFF3
 10951                           intcon	equ	0xFF2
 10952                           intcon2	equ	0xFF1
 10953                           intcon3	equ	0xFF0
 10954                           postinc0	equ	0xFEE
 10955                           wreg	equ	0xFE8
 10956                           postdec1	equ	0xFE5
 10957                           fsr1l	equ	0xFE1
 10958                           indf2	equ	0xFDF
 10959                           postinc2	equ	0xFDE
 10960                           postdec2	equ	0xFDD
 10961                           fsr2h	equ	0xFDA
 10962                           fsr2l	equ	0xFD9
 10963                           status	equ	0xFD8
 10964                           
 10965 ;; *************** function _sensorTest *****************
 10966 ;; Defined at:
 10967 ;;		line 123 in file "Test.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;		None
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;  res             2   45[BANK0 ] int 
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      void 
 10974 ;; Registers used:
 10975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;Total ram usage:        4 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:   10
 10988 ;; This function calls:
 10989 ;;		_lcdInst
 10990 ;;		_printf
 10991 ;;		_readADC
 10992 ;;		_readMAG
 10993 ;; This function is called by:
 10994 ;;		_Test
 10995 ;; This function uses a non-reentrant model
 10996 ;;
 10997                           
 10998                           	psect	text36
 10999  002640                     __ptext36:
 11000                           	opt stack 0
 11001  002640                     _sensorTest:
 11002                           	opt stack 19
 11003                           
 11004                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;incstack = 0
 11008  002640  0E01               	movlw	1
 11009  002642  ECA6  F02B         	call	_lcdInst
 11010  002646  0E68               	movlw	104
 11011  002648  0100               	movlb	0	; () banked
 11012  00264A  6FAB               	movwf	??_sensorTest& (0+255),b
 11013  00264C  0EE4               	movlw	228
 11014  00264E                     u9917:
 11015  00264E  2EE8               	decfsz	wreg,f,c
 11016  002650  D7FE               	bra	u9917
 11017  002652  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11018  002654  D7FC               	bra	u9917
 11019  002656  F000               	nop	
 11020  002658  0E80               	movlw	128
 11021  00265A  ECA6  F02B         	call	_lcdInst
 11022                           
 11023                           ;Test.c: 126: printf("SENSORS");
 11024  00265E  0EAD               	movlw	low STR_77
 11025  002660  0100               	movlb	0	; () banked
 11026  002662  6F8E               	movwf	printf@f& (0+255),b
 11027  002664  0EFF               	movlw	high STR_77
 11028  002666  0100               	movlb	0	; () banked
 11029  002668  6F8F               	movwf	(printf@f+1)& (0+255),b
 11030  00266A  EC87  F00B         	call	_printf	;wreg free
 11031                           
 11032                           ;Test.c: 127: lcdInst(0b11000000);;
 11033  00266E  0EC0               	movlw	192
 11034  002670  ECA6  F02B         	call	_lcdInst
 11035                           
 11036                           ;Test.c: 128: printf("PUSH TO START");
 11037  002674  0E15               	movlw	low STR_71
 11038  002676  0100               	movlb	0	; () banked
 11039  002678  6F8E               	movwf	printf@f& (0+255),b
 11040  00267A  0EFF               	movlw	high STR_71
 11041  00267C  0100               	movlb	0	; () banked
 11042  00267E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11043  002680  EC87  F00B         	call	_printf	;wreg free
 11044                           
 11045                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 11046  002684  0E05               	movlw	5
 11047  002686  0100               	movlb	0	; () banked
 11048  002688  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11049  00268A  0E0F               	movlw	15
 11050  00268C  0100               	movlb	0	; () banked
 11051  00268E  6FAB               	movwf	??_sensorTest& (0+255),b
 11052  002690  0EF1               	movlw	241
 11053  002692                     u9927:
 11054  002692  2EE8               	decfsz	wreg,f,c
 11055  002694  D7FE               	bra	u9927
 11056  002696  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11057  002698  D7FC               	bra	u9927
 11058  00269A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11059  00269C  D7FA               	bra	u9927
 11060  00269E                     l1232:
 11061  00269E  A281               	btfss	3969,1,c	;volatile
 11062  0026A0  D7FE               	goto	l1232
 11063  0026A2                     l1235:
 11064  0026A2  B281               	btfsc	3969,1,c	;volatile
 11065  0026A4  D7FE               	goto	l1235
 11066                           
 11067                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11068  0026A6  0E01               	movlw	1
 11069  0026A8  ECA6  F02B         	call	_lcdInst
 11070  0026AC  0E68               	movlw	104
 11071  0026AE  0100               	movlb	0	; () banked
 11072  0026B0  6FAB               	movwf	??_sensorTest& (0+255),b
 11073  0026B2  0EE4               	movlw	228
 11074  0026B4                     u9937:
 11075  0026B4  2EE8               	decfsz	wreg,f,c
 11076  0026B6  D7FE               	bra	u9937
 11077  0026B8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11078  0026BA  D7FC               	bra	u9937
 11079  0026BC  F000               	nop	
 11080  0026BE  0E80               	movlw	128
 11081  0026C0  ECA6  F02B         	call	_lcdInst
 11082                           
 11083                           ;Test.c: 137: printf("TST: IR SNSR");
 11084  0026C4  0E3F               	movlw	low STR_79
 11085  0026C6  0100               	movlb	0	; () banked
 11086  0026C8  6F8E               	movwf	printf@f& (0+255),b
 11087  0026CA  0EFF               	movlw	high STR_79
 11088  0026CC  0100               	movlb	0	; () banked
 11089  0026CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11090  0026D0  EC87  F00B         	call	_printf	;wreg free
 11091                           
 11092                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 11093  0026D4  0E05               	movlw	5
 11094  0026D6  0100               	movlb	0	; () banked
 11095  0026D8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11096  0026DA  0E0F               	movlw	15
 11097  0026DC  0100               	movlb	0	; () banked
 11098  0026DE  6FAB               	movwf	??_sensorTest& (0+255),b
 11099  0026E0  0EF1               	movlw	241
 11100  0026E2                     u9947:
 11101  0026E2  2EE8               	decfsz	wreg,f,c
 11102  0026E4  D7FE               	bra	u9947
 11103  0026E6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11104  0026E8  D7FC               	bra	u9947
 11105  0026EA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11106  0026EC  D7FA               	bra	u9947
 11107                           
 11108                           ;Test.c: 139: LATCbits.LATC5 = 1;
 11109  0026EE  8A8B               	bsf	3979,5,c	;volatile
 11110                           
 11111                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 11112  0026F0  D05C               	goto	l7918
 11113  0026F2                     l7900:
 11114                           
 11115                           ;Test.c: 142: readADC(0);
 11116  0026F2  0E00               	movlw	0
 11117  0026F4  EC9C  F02A         	call	_readADC
 11118                           
 11119                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 11120  0026F8  50C3               	movf	4035,w,c	;volatile
 11121  0026FA  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 11122  0026FE  0100               	movlb	0	; () banked
 11123  002700  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 11124  002702  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 11125  002706  0100               	movlb	0	; () banked
 11126  002708  6BAB               	clrf	??_sensorTest& (0+255),b
 11127  00270A  0100               	movlb	0	; () banked
 11128  00270C  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11129  00270E  0100               	movlb	0	; () banked
 11130  002710  6FAD               	movwf	sensorTest@res& (0+255),b
 11131  002712  0100               	movlb	0	; () banked
 11132  002714  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11133  002716  0100               	movlb	0	; () banked
 11134  002718  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11135                           
 11136                           ; BSR set to: 0
 11137                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 11138  00271A  0100               	movlb	0	; () banked
 11139  00271C  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11140  00271E  D00A               	goto	u6460
 11141  002720  0E21               	movlw	33
 11142  002722  0100               	movlb	0	; () banked
 11143  002724  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11144  002726  0E03               	movlw	3
 11145  002728  0100               	movlb	0	; () banked
 11146  00272A  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11147  00272C  A0D8               	btfss	status,0,c
 11148  00272E  D002               	goto	u6460
 11149  002730  0E01               	movlw	1
 11150  002732  D001               	goto	u6470
 11151  002734                     u6460:
 11152  002734  0E00               	movlw	0
 11153  002736                     u6470:
 11154  002736  0100               	movlb	0	; () banked
 11155  002738  6FE6               	movwf	_IR_signal& (0+255),b
 11156  00273A  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11157                           
 11158                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11159  00273C  0E01               	movlw	1
 11160  00273E  ECA6  F02B         	call	_lcdInst
 11161  002742  0E68               	movlw	104
 11162  002744  0100               	movlb	0	; () banked
 11163  002746  6FAB               	movwf	??_sensorTest& (0+255),b
 11164  002748  0EE4               	movlw	228
 11165  00274A                     u9957:
 11166  00274A  2EE8               	decfsz	wreg,f,c
 11167  00274C  D7FE               	bra	u9957
 11168  00274E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11169  002750  D7FC               	bra	u9957
 11170  002752  F000               	nop	
 11171  002754  0E80               	movlw	128
 11172  002756  ECA6  F02B         	call	_lcdInst
 11173                           
 11174                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 11175  00275A  0E64               	movlw	low STR_80
 11176  00275C  0100               	movlb	0	; () banked
 11177  00275E  6F8E               	movwf	printf@f& (0+255),b
 11178  002760  0EFE               	movlw	high STR_80
 11179  002762  0100               	movlb	0	; () banked
 11180  002764  6F8F               	movwf	(printf@f+1)& (0+255),b
 11181  002766  C0E6  F090         	movff	_IR_signal,?_printf+2
 11182  00276A  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11183  00276E  EC87  F00B         	call	_printf	;wreg free
 11184                           
 11185                           ;Test.c: 148: lcdInst(0b11000000);;
 11186  002772  0EC0               	movlw	192
 11187  002774  ECA6  F02B         	call	_lcdInst
 11188                           
 11189                           ;Test.c: 149: printf("%d", res);
 11190  002778  0E20               	movlw	low (STR_27+14)
 11191  00277A  0100               	movlb	0	; () banked
 11192  00277C  6F8E               	movwf	printf@f& (0+255),b
 11193  00277E  0EFE               	movlw	high (STR_27+14)
 11194  002780  0100               	movlb	0	; () banked
 11195  002782  6F8F               	movwf	(printf@f+1)& (0+255),b
 11196  002784  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11197  002788  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11198  00278C  EC87  F00B         	call	_printf	;wreg free
 11199                           
 11200                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 11201  002790  0E05               	movlw	5
 11202  002792  0100               	movlb	0	; () banked
 11203  002794  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11204  002796  0E0F               	movlw	15
 11205  002798  0100               	movlb	0	; () banked
 11206  00279A  6FAB               	movwf	??_sensorTest& (0+255),b
 11207  00279C  0EF1               	movlw	241
 11208  00279E                     u9967:
 11209  00279E  2EE8               	decfsz	wreg,f,c
 11210  0027A0  D7FE               	bra	u9967
 11211  0027A2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11212  0027A4  D7FC               	bra	u9967
 11213  0027A6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11214  0027A8  D7FA               	bra	u9967
 11215  0027AA                     l7918:
 11216  0027AA  A281               	btfss	3969,1,c	;volatile
 11217  0027AC  D7A2               	goto	l7900
 11218                           
 11219                           ;Test.c: 151: }
 11220                           ;Test.c: 152: LATCbits.LATC5 = 0;
 11221  0027AE  9A8B               	bcf	3979,5,c	;volatile
 11222                           
 11223                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11224  0027B0  0E01               	movlw	1
 11225  0027B2  ECA6  F02B         	call	_lcdInst
 11226  0027B6  0E68               	movlw	104
 11227  0027B8  0100               	movlb	0	; () banked
 11228  0027BA  6FAB               	movwf	??_sensorTest& (0+255),b
 11229  0027BC  0EE4               	movlw	228
 11230  0027BE                     u9977:
 11231  0027BE  2EE8               	decfsz	wreg,f,c
 11232  0027C0  D7FE               	bra	u9977
 11233  0027C2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11234  0027C4  D7FC               	bra	u9977
 11235  0027C6  F000               	nop	
 11236  0027C8  0E80               	movlw	128
 11237  0027CA  ECA6  F02B         	call	_lcdInst
 11238                           
 11239                           ;Test.c: 161: printf("TST: MAGNETISM");
 11240  0027CE  0E91               	movlw	low STR_82
 11241  0027D0  0100               	movlb	0	; () banked
 11242  0027D2  6F8E               	movwf	printf@f& (0+255),b
 11243  0027D4  0EFE               	movlw	high STR_82
 11244  0027D6  0100               	movlb	0	; () banked
 11245  0027D8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11246  0027DA  EC87  F00B         	call	_printf	;wreg free
 11247                           
 11248                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 11249  0027DE  0E05               	movlw	5
 11250  0027E0  0100               	movlb	0	; () banked
 11251  0027E2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11252  0027E4  0E0F               	movlw	15
 11253  0027E6  0100               	movlb	0	; () banked
 11254  0027E8  6FAB               	movwf	??_sensorTest& (0+255),b
 11255  0027EA  0EF1               	movlw	241
 11256  0027EC                     u9987:
 11257  0027EC  2EE8               	decfsz	wreg,f,c
 11258  0027EE  D7FE               	bra	u9987
 11259  0027F0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11260  0027F2  D7FC               	bra	u9987
 11261  0027F4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11262  0027F6  D7FA               	bra	u9987
 11263                           
 11264                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 11265  0027F8  D021               	goto	l7936
 11266  0027FA                     l7930:
 11267                           
 11268                           ;Test.c: 164: readMAG();
 11269  0027FA  EC41  F028         	call	_readMAG	;wreg free
 11270                           
 11271                           ;Test.c: 165: lcdInst(0b10000000);;
 11272  0027FE  0E80               	movlw	128
 11273  002800  ECA6  F02B         	call	_lcdInst
 11274                           
 11275                           ;Test.c: 166: lcdInst(0b11000000);;
 11276  002804  0EC0               	movlw	192
 11277  002806  ECA6  F02B         	call	_lcdInst
 11278                           
 11279                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 11280  00280A  0E34               	movlw	low STR_83
 11281  00280C  0100               	movlb	0	; () banked
 11282  00280E  6F8E               	movwf	printf@f& (0+255),b
 11283  002810  0EFE               	movlw	high STR_83
 11284  002812  0100               	movlb	0	; () banked
 11285  002814  6F8F               	movwf	(printf@f+1)& (0+255),b
 11286  002816  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11287  00281A  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11288  00281E  EC87  F00B         	call	_printf	;wreg free
 11289                           
 11290                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 11291  002822  0E05               	movlw	5
 11292  002824  0100               	movlb	0	; () banked
 11293  002826  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11294  002828  0E0F               	movlw	15
 11295  00282A  0100               	movlb	0	; () banked
 11296  00282C  6FAB               	movwf	??_sensorTest& (0+255),b
 11297  00282E  0EF1               	movlw	241
 11298  002830                     u9997:
 11299  002830  2EE8               	decfsz	wreg,f,c
 11300  002832  D7FE               	bra	u9997
 11301  002834  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11302  002836  D7FC               	bra	u9997
 11303  002838  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11304  00283A  D7FA               	bra	u9997
 11305  00283C                     l7936:
 11306  00283C  A281               	btfss	3969,1,c	;volatile
 11307  00283E  D7DD               	goto	l7930
 11308                           
 11309                           ;Test.c: 169: }
 11310                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11311  002840  0E01               	movlw	1
 11312  002842  ECA6  F02B         	call	_lcdInst
 11313  002846  0E68               	movlw	104
 11314  002848  0100               	movlb	0	; () banked
 11315  00284A  6FAB               	movwf	??_sensorTest& (0+255),b
 11316  00284C  0EE4               	movlw	228
 11317  00284E                     u10007:
 11318  00284E  2EE8               	decfsz	wreg,f,c
 11319  002850  D7FE               	bra	u10007
 11320  002852  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11321  002854  D7FC               	bra	u10007
 11322  002856  F000               	nop	
 11323  002858  0E80               	movlw	128
 11324  00285A  ECA6  F02B         	call	_lcdInst
 11325                           
 11326                           ;Test.c: 175: printf("TST: COND");
 11327  00285E  0E86               	movlw	low STR_84
 11328  002860  0100               	movlb	0	; () banked
 11329  002862  6F8E               	movwf	printf@f& (0+255),b
 11330  002864  0EFF               	movlw	high STR_84
 11331  002866  0100               	movlb	0	; () banked
 11332  002868  6F8F               	movwf	(printf@f+1)& (0+255),b
 11333  00286A  EC87  F00B         	call	_printf	;wreg free
 11334                           
 11335                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 11336  00286E  0E05               	movlw	5
 11337  002870  0100               	movlb	0	; () banked
 11338  002872  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11339  002874  0E0F               	movlw	15
 11340  002876  0100               	movlb	0	; () banked
 11341  002878  6FAB               	movwf	??_sensorTest& (0+255),b
 11342  00287A  0EF1               	movlw	241
 11343  00287C                     u10017:
 11344  00287C  2EE8               	decfsz	wreg,f,c
 11345  00287E  D7FE               	bra	u10017
 11346  002880  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11347  002882  D7FC               	bra	u10017
 11348  002884  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11349  002886  D7FA               	bra	u10017
 11350  002888                     l7948:
 11351                           
 11352                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11353  002888  0E01               	movlw	1
 11354  00288A  ECA6  F02B         	call	_lcdInst
 11355  00288E  0E68               	movlw	104
 11356  002890  0100               	movlb	0	; () banked
 11357  002892  6FAB               	movwf	??_sensorTest& (0+255),b
 11358  002894  0EE4               	movlw	228
 11359  002896                     u10027:
 11360  002896  2EE8               	decfsz	wreg,f,c
 11361  002898  D7FE               	bra	u10027
 11362  00289A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11363  00289C  D7FC               	bra	u10027
 11364  00289E  F000               	nop	
 11365  0028A0  0E80               	movlw	128
 11366  0028A2  ECA6  F02B         	call	_lcdInst
 11367                           
 11368                           ;Test.c: 179: printf("TST: COND");
 11369  0028A6  0E86               	movlw	low STR_84
 11370  0028A8  0100               	movlb	0	; () banked
 11371  0028AA  6F8E               	movwf	printf@f& (0+255),b
 11372  0028AC  0EFF               	movlw	high STR_84
 11373  0028AE  0100               	movlb	0	; () banked
 11374  0028B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11375  0028B2  EC87  F00B         	call	_printf	;wreg free
 11376                           
 11377                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 11378  0028B6  D01B               	goto	l7960
 11379  0028B8                     l7956:
 11380                           
 11381                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11382  0028B8  0E80               	movlw	128
 11383  0028BA  ECA6  F02B         	call	_lcdInst
 11384  0028BE  0EC0               	movlw	192
 11385  0028C0  ECA6  F02B         	call	_lcdInst
 11386                           
 11387                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 11388  0028C4  0EA4               	movlw	low STR_86
 11389  0028C6  0100               	movlb	0	; () banked
 11390  0028C8  6F8E               	movwf	printf@f& (0+255),b
 11391  0028CA  0EFF               	movlw	high STR_86
 11392  0028CC  0100               	movlb	0	; () banked
 11393  0028CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11394  0028D0  A480               	btfss	3968,2,c	;volatile
 11395  0028D2  D004               	goto	u6500
 11396  0028D4  0100               	movlb	0	; () banked
 11397  0028D6  6BAB               	clrf	??_sensorTest& (0+255),b
 11398  0028D8  2BAB               	incf	??_sensorTest& (0+255),f,b
 11399  0028DA  D002               	goto	u6508
 11400  0028DC                     u6500:
 11401  0028DC  0100               	movlb	0	; () banked
 11402  0028DE  6BAB               	clrf	??_sensorTest& (0+255),b
 11403  0028E0                     u6508:
 11404  0028E0  0100               	movlb	0	; () banked
 11405  0028E2  51AB               	movf	??_sensorTest& (0+255),w,b
 11406  0028E4  0100               	movlb	0	; () banked
 11407  0028E6  6F90               	movwf	(?_printf+2)& (0+255),b
 11408  0028E8  6B91               	clrf	(?_printf+3)& (0+255),b
 11409  0028EA  EC87  F00B         	call	_printf	;wreg free
 11410  0028EE                     l7960:
 11411  0028EE  A281               	btfss	3969,1,c	;volatile
 11412  0028F0  D7E3               	goto	l7956
 11413                           
 11414                           ;Test.c: 186: }
 11415                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 11416  0028F2  3881               	swapf	3969,w,c	;volatile
 11417  0028F4  0B0F               	andlw	15
 11418  0028F6  0A0F               	xorlw	15
 11419  0028F8  B4D8               	btfsc	status,2,c
 11420  0028FA  0012               	return	
 11421                           
 11422                           ;Test.c: 190: else{
 11423                           ;Test.c: 191: LATAbits.LATA3 = 1;
 11424                           
 11425                           ;Test.c: 189: }
 11426                           
 11427                           ;Test.c: 188: break;
 11428  0028FC  8689               	bsf	3977,3,c	;volatile
 11429                           
 11430                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 11431  0028FE  D01B               	goto	l7972
 11432  002900                     l7968:
 11433                           
 11434                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11435  002900  0E80               	movlw	128
 11436  002902  ECA6  F02B         	call	_lcdInst
 11437  002906  0EC0               	movlw	192
 11438  002908  ECA6  F02B         	call	_lcdInst
 11439                           
 11440                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 11441  00290C  0EA4               	movlw	low STR_86
 11442  00290E  0100               	movlb	0	; () banked
 11443  002910  6F8E               	movwf	printf@f& (0+255),b
 11444  002912  0EFF               	movlw	high STR_86
 11445  002914  0100               	movlb	0	; () banked
 11446  002916  6F8F               	movwf	(printf@f+1)& (0+255),b
 11447  002918  A480               	btfss	3968,2,c	;volatile
 11448  00291A  D004               	goto	u6530
 11449  00291C  0100               	movlb	0	; () banked
 11450  00291E  6BAB               	clrf	??_sensorTest& (0+255),b
 11451  002920  2BAB               	incf	??_sensorTest& (0+255),f,b
 11452  002922  D002               	goto	u6538
 11453  002924                     u6530:
 11454  002924  0100               	movlb	0	; () banked
 11455  002926  6BAB               	clrf	??_sensorTest& (0+255),b
 11456  002928                     u6538:
 11457  002928  0100               	movlb	0	; () banked
 11458  00292A  51AB               	movf	??_sensorTest& (0+255),w,b
 11459  00292C  0100               	movlb	0	; () banked
 11460  00292E  6F90               	movwf	(?_printf+2)& (0+255),b
 11461  002930  6B91               	clrf	(?_printf+3)& (0+255),b
 11462  002932  EC87  F00B         	call	_printf	;wreg free
 11463  002936                     l7972:
 11464  002936  B281               	btfsc	3969,1,c	;volatile
 11465  002938  D7E3               	goto	l7968
 11466                           
 11467                           ;Test.c: 196: }
 11468                           ;Test.c: 197: LATAbits.LATA3 = !1;
 11469  00293A  9689               	bcf	3977,3,c	;volatile
 11470  00293C  D7A5               	goto	l7948
 11471  00293E                     __end_of_sensorTest:
 11472                           	opt stack 0
 11473                           tblptru	equ	0xFF8
 11474                           tblptrh	equ	0xFF7
 11475                           tblptrl	equ	0xFF6
 11476                           tablat	equ	0xFF5
 11477                           prodh	equ	0xFF4
 11478                           prodl	equ	0xFF3
 11479                           intcon	equ	0xFF2
 11480                           intcon2	equ	0xFF1
 11481                           intcon3	equ	0xFF0
 11482                           postinc0	equ	0xFEE
 11483                           wreg	equ	0xFE8
 11484                           postdec1	equ	0xFE5
 11485                           fsr1l	equ	0xFE1
 11486                           indf2	equ	0xFDF
 11487                           postinc2	equ	0xFDE
 11488                           postdec2	equ	0xFDD
 11489                           fsr2h	equ	0xFDA
 11490                           fsr2l	equ	0xFD9
 11491                           status	equ	0xFD8
 11492                           
 11493 ;; *************** function _readMAG *****************
 11494 ;; Defined at:
 11495 ;;		line 29 in file "ADCFunctionality.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;		None
 11498 ;; Auto vars:     Size  Location     Type
 11499 ;;  res             2    4[BANK0 ] int 
 11500 ;; Return value:  Size  Location     Type
 11501 ;;                  1    wreg      void 
 11502 ;; Registers used:
 11503 ;;		wreg, status,2, status,0, cstack
 11504 ;; Tracked objects:
 11505 ;;		On entry : 0/0
 11506 ;;		On exit  : 0/0
 11507 ;;		Unchanged: 0/0
 11508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11510 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11511 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11512 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;Total ram usage:        4 bytes
 11514 ;; Hardware stack levels used:    1
 11515 ;; Hardware stack levels required when called:    8
 11516 ;; This function calls:
 11517 ;;		_readADC
 11518 ;; This function is called by:
 11519 ;;		_getMAG
 11520 ;;		_sensorTest
 11521 ;; This function uses a non-reentrant model
 11522 ;;
 11523                           
 11524                           	psect	text37
 11525  005082                     __ptext37:
 11526                           	opt stack 0
 11527  005082                     _readMAG:
 11528                           	opt stack 19
 11529                           
 11530                           ;ADCFunctionality.c: 30: readADC(1);
 11531                           
 11532                           ;incstack = 0
 11533  005082  0E01               	movlw	1
 11534  005084  EC9C  F02A         	call	_readADC
 11535                           
 11536                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11537  005088  50C3               	movf	4035,w,c	;volatile
 11538  00508A  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11539  00508E  0100               	movlb	0	; () banked
 11540  005090  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11541  005092  C082  F083         	movff	??_readMAG,??_readMAG+1
 11542  005096  0100               	movlb	0	; () banked
 11543  005098  6B82               	clrf	??_readMAG& (0+255),b
 11544  00509A  0100               	movlb	0	; () banked
 11545  00509C  1182               	iorwf	??_readMAG& (0+255),w,b
 11546  00509E  0100               	movlb	0	; () banked
 11547  0050A0  6F84               	movwf	readMAG@res& (0+255),b
 11548  0050A2  0100               	movlb	0	; () banked
 11549  0050A4  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11550  0050A6  0100               	movlb	0	; () banked
 11551  0050A8  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11552                           
 11553                           ; BSR set to: 0
 11554                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11555  0050AA  0100               	movlb	0	; () banked
 11556  0050AC  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11557  0050AE  D008               	goto	u4891
 11558  0050B0  0100               	movlb	0	; () banked
 11559  0050B2  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11560  0050B4  E107               	bnz	u4890
 11561  0050B6  0E96               	movlw	150
 11562  0050B8  0100               	movlb	0	; () banked
 11563  0050BA  5D84               	subwf	readMAG@res& (0+255),w,b
 11564  0050BC  B0D8               	btfsc	status,0,c
 11565  0050BE  D002               	goto	u4890
 11566  0050C0                     u4891:
 11567  0050C0  0E01               	movlw	1
 11568  0050C2  D001               	goto	u4900
 11569  0050C4                     u4890:
 11570  0050C4  0E00               	movlw	0
 11571  0050C6                     u4900:
 11572  0050C6  0100               	movlb	0	; () banked
 11573  0050C8  6FE8               	movwf	_MAG_signal& (0+255),b
 11574  0050CA  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11575                           
 11576                           ; BSR set to: 0
 11577  0050CC  0012               	return		;funcret
 11578  0050CE                     __end_of_readMAG:
 11579                           	opt stack 0
 11580                           tblptru	equ	0xFF8
 11581                           tblptrh	equ	0xFF7
 11582                           tblptrl	equ	0xFF6
 11583                           tablat	equ	0xFF5
 11584                           prodh	equ	0xFF4
 11585                           prodl	equ	0xFF3
 11586                           intcon	equ	0xFF2
 11587                           intcon2	equ	0xFF1
 11588                           intcon3	equ	0xFF0
 11589                           postinc0	equ	0xFEE
 11590                           wreg	equ	0xFE8
 11591                           postdec1	equ	0xFE5
 11592                           fsr1l	equ	0xFE1
 11593                           indf2	equ	0xFDF
 11594                           postinc2	equ	0xFDE
 11595                           postdec2	equ	0xFDD
 11596                           fsr2h	equ	0xFDA
 11597                           fsr2l	equ	0xFD9
 11598                           status	equ	0xFD8
 11599                           
 11600 ;; *************** function _arm *****************
 11601 ;; Defined at:
 11602 ;;		line 649 in file "Test.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;		None
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;  on              2   44[BANK0 ] int 
 11607 ;; Return value:  Size  Location     Type
 11608 ;;                  1    wreg      void 
 11609 ;; Registers used:
 11610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11611 ;; Tracked objects:
 11612 ;;		On entry : 0/0
 11613 ;;		On exit  : 0/0
 11614 ;;		Unchanged: 0/0
 11615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11617 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11618 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11619 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11620 ;;Total ram usage:        3 bytes
 11621 ;; Hardware stack levels used:    1
 11622 ;; Hardware stack levels required when called:   10
 11623 ;; This function calls:
 11624 ;;		_lcdInst
 11625 ;;		_printf
 11626 ;;		_stopSignals
 11627 ;; This function is called by:
 11628 ;;		_Test
 11629 ;; This function uses a non-reentrant model
 11630 ;;
 11631                           
 11632                           	psect	text38
 11633  0040AC                     __ptext38:
 11634                           	opt stack 0
 11635  0040AC                     _arm:
 11636                           	opt stack 19
 11637                           
 11638                           ;Test.c: 650: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;incstack = 0
 11642  0040AC  0E01               	movlw	1
 11643  0040AE  ECA6  F02B         	call	_lcdInst
 11644  0040B2  0E68               	movlw	104
 11645  0040B4  0100               	movlb	0	; () banked
 11646  0040B6  6FAB               	movwf	??_arm& (0+255),b
 11647  0040B8  0EE4               	movlw	228
 11648  0040BA                     u10037:
 11649  0040BA  2EE8               	decfsz	wreg,f,c
 11650  0040BC  D7FE               	bra	u10037
 11651  0040BE  2FAB               	decfsz	??_arm& (0+255),f,b
 11652  0040C0  D7FC               	bra	u10037
 11653  0040C2  F000               	nop	
 11654  0040C4  0E80               	movlw	128
 11655  0040C6  ECA6  F02B         	call	_lcdInst
 11656                           
 11657                           ;Test.c: 651: printf("D WILL RETURN   ");
 11658  0040CA  0EF2               	movlw	low STR_118
 11659  0040CC  0100               	movlb	0	; () banked
 11660  0040CE  6F8E               	movwf	printf@f& (0+255),b
 11661  0040D0  0EFB               	movlw	high STR_118
 11662  0040D2  0100               	movlb	0	; () banked
 11663  0040D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11664  0040D6  EC87  F00B         	call	_printf	;wreg free
 11665                           
 11666                           ;Test.c: 652: lcdInst(0b11000000);;
 11667  0040DA  0EC0               	movlw	192
 11668  0040DC  ECA6  F02B         	call	_lcdInst
 11669                           
 11670                           ;Test.c: 653: printf("ELSE TOGGLES ARM");
 11671  0040E0  0EAD               	movlw	low STR_127
 11672  0040E2  0100               	movlb	0	; () banked
 11673  0040E4  6F8E               	movwf	printf@f& (0+255),b
 11674  0040E6  0EFC               	movlw	high STR_127
 11675  0040E8  0100               	movlb	0	; () banked
 11676  0040EA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11677  0040EC  EC87  F00B         	call	_printf	;wreg free
 11678                           
 11679                           ;Test.c: 655: (INTCONbits.GIE = 1);
 11680  0040F0  8EF2               	bsf	intcon,7,c	;volatile
 11681                           
 11682                           ;Test.c: 656: machine_state = Sorting_state;
 11683  0040F2  0E01               	movlw	1
 11684  0040F4  0100               	movlb	0	; () banked
 11685  0040F6  6FFC               	movwf	_machine_state& (0+255),b
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;Test.c: 657: f_arm_position = 2;
 11689  0040F8  0E00               	movlw	0
 11690  0040FA  0100               	movlb	0	; () banked
 11691  0040FC  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11692  0040FE  0E02               	movlw	2
 11693  004100  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11694                           
 11695                           ; BSR set to: 0
 11696                           ;Test.c: 658: timer2_counter = 0;
 11697  004102  0E00               	movlw	0
 11698  004104  6E74               	movwf	_timer2_counter+1,c	;volatile
 11699  004106  0E00               	movlw	0
 11700  004108  6E73               	movwf	_timer2_counter,c	;volatile
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;Test.c: 659: LATBbits.LATB3 = 1;
 11704  00410A  868A               	bsf	3978,3,c	;volatile
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;Test.c: 660: TMR2ON = 1;
 11708  00410C  84CA               	bsf	4042,2,c	;volatile
 11709                           
 11710                           ; BSR set to: 0
 11711                           ;Test.c: 661: was_low_2 = 0;
 11712  00410E  0E00               	movlw	0
 11713  004110  6E7A               	movwf	_was_low_2+1,c	;volatile
 11714  004112  0E00               	movlw	0
 11715  004114  6E79               	movwf	_was_low_2,c	;volatile
 11716                           
 11717                           ; BSR set to: 0
 11718                           ;Test.c: 663: int on = 0;
 11719  004116  0E00               	movlw	0
 11720  004118  0100               	movlb	0	; () banked
 11721  00411A  6FAD               	movwf	(arm@on+1)& (0+255),b
 11722  00411C  0E00               	movlw	0
 11723  00411E  6FAC               	movwf	arm@on& (0+255),b
 11724  004120                     l8426:
 11725                           
 11726                           ;Test.c: 665: if(on){
 11727  004120  0100               	movlb	0	; () banked
 11728  004122  51AC               	movf	arm@on& (0+255),w,b
 11729  004124  0100               	movlb	0	; () banked
 11730  004126  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11731  004128  B4D8               	btfsc	status,2,c
 11732  00412A  D01C               	goto	l8438
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;Test.c: 666: on = !on;
 11736  00412C  0100               	movlb	0	; () banked
 11737  00412E  51AC               	movf	arm@on& (0+255),w,b
 11738  004130  0100               	movlb	0	; () banked
 11739  004132  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11740  004134  A4D8               	btfss	status,2,c
 11741  004136  D002               	goto	u7120
 11742  004138  0E01               	movlw	1
 11743  00413A  D001               	goto	u7130
 11744  00413C                     u7120:
 11745  00413C  0E00               	movlw	0
 11746  00413E                     u7130:
 11747  00413E  0100               	movlb	0	; () banked
 11748  004140  6FAC               	movwf	arm@on& (0+255),b
 11749  004142  6BAD               	clrf	(arm@on+1)& (0+255),b
 11750                           
 11751                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 11752  004144  D005               	goto	l8432
 11753  004146                     l8430:
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;Test.c: 668: f_arm_position = 0;
 11757  004146  0E00               	movlw	0
 11758  004148  0100               	movlb	0	; () banked
 11759  00414A  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11760  00414C  0E00               	movlw	0
 11761  00414E  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11762  004150                     l8432:
 11763                           
 11764                           ; BSR set to: 0
 11765  004150  A281               	btfss	3969,1,c	;volatile
 11766  004152  D7F9               	goto	l8430
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;Test.c: 669: }
 11770                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 11771                           
 11772                           ; BSR set to: 0
 11773  004154  3881               	swapf	3969,w,c	;volatile
 11774  004156  0B0F               	andlw	15
 11775  004158  0A0F               	xorlw	15
 11776  00415A  B4D8               	btfsc	status,2,c
 11777  00415C  D01F               	goto	l1435
 11778  00415E                     l1436:
 11779  00415E  A281               	btfss	3969,1,c	;volatile
 11780  004160  D7DF               	goto	l8426
 11781  004162  D7FD               	goto	l1436
 11782  004164                     l8438:
 11783                           
 11784                           ;Test.c: 675: else{
 11785                           ;Test.c: 676: on = !on;
 11786  004164  0100               	movlb	0	; () banked
 11787  004166  51AC               	movf	arm@on& (0+255),w,b
 11788  004168  0100               	movlb	0	; () banked
 11789  00416A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11790  00416C  A4D8               	btfss	status,2,c
 11791  00416E  D002               	goto	u7170
 11792  004170  0E01               	movlw	1
 11793  004172  D001               	goto	u7180
 11794  004174                     u7170:
 11795  004174  0E00               	movlw	0
 11796  004176                     u7180:
 11797  004176  0100               	movlb	0	; () banked
 11798  004178  6FAC               	movwf	arm@on& (0+255),b
 11799  00417A  6BAD               	clrf	(arm@on+1)& (0+255),b
 11800                           
 11801                           ;Test.c: 677: while(PORTBbits.RB1 == 0){
 11802  00417C  D005               	goto	l8442
 11803  00417E                     l8440:
 11804                           
 11805                           ; BSR set to: 0
 11806                           ;Test.c: 678: f_arm_position = 1;
 11807  00417E  0E00               	movlw	0
 11808  004180  0100               	movlb	0	; () banked
 11809  004182  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11810  004184  0E01               	movlw	1
 11811  004186  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11812  004188                     l8442:
 11813                           
 11814                           ; BSR set to: 0
 11815  004188  A281               	btfss	3969,1,c	;volatile
 11816  00418A  D7F9               	goto	l8440
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;Test.c: 679: }
 11820                           ;Test.c: 680: if(PORTB >> 4 == 0b1111){
 11821                           
 11822                           ; BSR set to: 0
 11823  00418C  3881               	swapf	3969,w,c	;volatile
 11824  00418E  0B0F               	andlw	15
 11825  004190  0A0F               	xorlw	15
 11826  004192  B4D8               	btfsc	status,2,c
 11827  004194  D003               	goto	l1435
 11828  004196                     l1444:
 11829  004196  A281               	btfss	3969,1,c	;volatile
 11830  004198  D7C3               	goto	l8426
 11831  00419A  D7FD               	goto	l1444
 11832  00419C                     l1435:
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;Test.c: 684: }
 11836                           ;Test.c: 685: }
 11837                           ;Test.c: 687: (INTCONbits.GIE = 0);
 11838  00419C  9EF2               	bcf	intcon,7,c	;volatile
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;Test.c: 688: stopSignals();
 11842  00419E  EC58  F02B         	call	_stopSignals	;wreg free
 11843                           
 11844                           ;Test.c: 689: machine_state = Testing_state;
 11845  0041A2  0E03               	movlw	3
 11846  0041A4  0100               	movlb	0	; () banked
 11847  0041A6  6FFC               	movwf	_machine_state& (0+255),b
 11848                           
 11849                           ; BSR set to: 0
 11850  0041A8  0012               	return		;funcret
 11851  0041AA                     __end_of_arm:
 11852                           	opt stack 0
 11853                           tblptru	equ	0xFF8
 11854                           tblptrh	equ	0xFF7
 11855                           tblptrl	equ	0xFF6
 11856                           tablat	equ	0xFF5
 11857                           prodh	equ	0xFF4
 11858                           prodl	equ	0xFF3
 11859                           intcon	equ	0xFF2
 11860                           intcon2	equ	0xFF1
 11861                           intcon3	equ	0xFF0
 11862                           postinc0	equ	0xFEE
 11863                           wreg	equ	0xFE8
 11864                           postdec1	equ	0xFE5
 11865                           fsr1l	equ	0xFE1
 11866                           indf2	equ	0xFDF
 11867                           postinc2	equ	0xFDE
 11868                           postdec2	equ	0xFDD
 11869                           fsr2h	equ	0xFDA
 11870                           fsr2l	equ	0xFD9
 11871                           status	equ	0xFD8
 11872                           
 11873 ;; *************** function _algorithmTest *****************
 11874 ;; Defined at:
 11875 ;;		line 79 in file "Test.c"
 11876 ;; Parameters:    Size  Location     Type
 11877 ;;		None
 11878 ;; Auto vars:     Size  Location     Type
 11879 ;;		None
 11880 ;; Return value:  Size  Location     Type
 11881 ;;                  1    wreg      void 
 11882 ;; Registers used:
 11883 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11884 ;; Tracked objects:
 11885 ;;		On entry : 0/0
 11886 ;;		On exit  : 0/0
 11887 ;;		Unchanged: 0/0
 11888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11891 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11893 ;;Total ram usage:        2 bytes
 11894 ;; Hardware stack levels used:    1
 11895 ;; Hardware stack levels required when called:   10
 11896 ;; This function calls:
 11897 ;;		_lcdInst
 11898 ;;		_printf
 11899 ;; This function is called by:
 11900 ;;		_Test
 11901 ;; This function uses a non-reentrant model
 11902 ;;
 11903                           
 11904                           	psect	text39
 11905  004374                     __ptext39:
 11906                           	opt stack 0
 11907  004374                     _algorithmTest:
 11908                           	opt stack 19
 11909                           
 11910                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;incstack = 0
 11914  004374  0E01               	movlw	1
 11915  004376  ECA6  F02B         	call	_lcdInst
 11916  00437A  0E68               	movlw	104
 11917  00437C  0100               	movlb	0	; () banked
 11918  00437E  6FAB               	movwf	??_algorithmTest& (0+255),b
 11919  004380  0EE4               	movlw	228
 11920  004382                     u10047:
 11921  004382  2EE8               	decfsz	wreg,f,c
 11922  004384  D7FE               	bra	u10047
 11923  004386  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11924  004388  D7FC               	bra	u10047
 11925  00438A  F000               	nop	
 11926  00438C  0E80               	movlw	128
 11927  00438E  ECA6  F02B         	call	_lcdInst
 11928                           
 11929                           ;Test.c: 82: printf("ALGORITHM TEST");
 11930  004392  0EDC               	movlw	low STR_70
 11931  004394  0100               	movlb	0	; () banked
 11932  004396  6F8E               	movwf	printf@f& (0+255),b
 11933  004398  0EFE               	movlw	high STR_70
 11934  00439A  0100               	movlb	0	; () banked
 11935  00439C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11936  00439E  EC87  F00B         	call	_printf	;wreg free
 11937                           
 11938                           ;Test.c: 83: lcdInst(0b11000000);;
 11939  0043A2  0EC0               	movlw	192
 11940  0043A4  ECA6  F02B         	call	_lcdInst
 11941                           
 11942                           ;Test.c: 84: printf("PUSH TO START");
 11943  0043A8  0E15               	movlw	low STR_71
 11944  0043AA  0100               	movlb	0	; () banked
 11945  0043AC  6F8E               	movwf	printf@f& (0+255),b
 11946  0043AE  0EFF               	movlw	high STR_71
 11947  0043B0  0100               	movlb	0	; () banked
 11948  0043B2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11949  0043B4  EC87  F00B         	call	_printf	;wreg free
 11950                           
 11951                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 11952  0043B8  0E05               	movlw	5
 11953  0043BA  0100               	movlb	0	; () banked
 11954  0043BC  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11955  0043BE  0E0F               	movlw	15
 11956  0043C0  0100               	movlb	0	; () banked
 11957  0043C2  6FAB               	movwf	??_algorithmTest& (0+255),b
 11958  0043C4  0EF1               	movlw	241
 11959  0043C6                     u10057:
 11960  0043C6  2EE8               	decfsz	wreg,f,c
 11961  0043C8  D7FE               	bra	u10057
 11962  0043CA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11963  0043CC  D7FC               	bra	u10057
 11964  0043CE  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11965  0043D0  D7FA               	bra	u10057
 11966  0043D2                     l1223:
 11967  0043D2  A281               	btfss	3969,1,c	;volatile
 11968  0043D4  D7FE               	goto	l1223
 11969  0043D6                     l1226:
 11970  0043D6  B281               	btfsc	3969,1,c	;volatile
 11971  0043D8  D7FE               	goto	l1226
 11972                           
 11973                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11974  0043DA  0E01               	movlw	1
 11975  0043DC  ECA6  F02B         	call	_lcdInst
 11976  0043E0  0E68               	movlw	104
 11977  0043E2  0100               	movlb	0	; () banked
 11978  0043E4  6FAB               	movwf	??_algorithmTest& (0+255),b
 11979  0043E6  0EE4               	movlw	228
 11980  0043E8                     u10067:
 11981  0043E8  2EE8               	decfsz	wreg,f,c
 11982  0043EA  D7FE               	bra	u10067
 11983  0043EC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11984  0043EE  D7FC               	bra	u10067
 11985  0043F0  F000               	nop	
 11986  0043F2  0E80               	movlw	128
 11987  0043F4  ECA6  F02B         	call	_lcdInst
 11988                           
 11989                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 11990  0043F8  0E58               	movlw	low STR_72
 11991  0043FA  0100               	movlb	0	; () banked
 11992  0043FC  6F8E               	movwf	printf@f& (0+255),b
 11993  0043FE  0EFC               	movlw	high STR_72
 11994  004400  0100               	movlb	0	; () banked
 11995  004402  6F8F               	movwf	(printf@f+1)& (0+255),b
 11996  004404  EC87  F00B         	call	_printf	;wreg free
 11997                           
 11998                           ;Test.c: 100: printf("ALG2: 12 CANS");
 11999  004408  0EF9               	movlw	low STR_73
 12000  00440A  0100               	movlb	0	; () banked
 12001  00440C  6F8E               	movwf	printf@f& (0+255),b
 12002  00440E  0EFE               	movlw	high STR_73
 12003  004410  0100               	movlb	0	; () banked
 12004  004412  6F8F               	movwf	(printf@f+1)& (0+255),b
 12005  004414  EC87  F00B         	call	_printf	;wreg free
 12006                           
 12007                           ;Test.c: 109: printf("ALG3: 1 CAN");
 12008  004418  0E59               	movlw	low STR_74
 12009  00441A  0100               	movlb	0	; () banked
 12010  00441C  6F8E               	movwf	printf@f& (0+255),b
 12011  00441E  0EFF               	movlw	high STR_74
 12012  004420  0100               	movlb	0	; () banked
 12013  004422  6F8F               	movwf	(printf@f+1)& (0+255),b
 12014  004424  EC87  F00B         	call	_printf	;wreg free
 12015                           
 12016                           ;Test.c: 115: printf("ALG4: ALL CANS");
 12017  004428  0EBE               	movlw	low STR_75
 12018  00442A  0100               	movlb	0	; () banked
 12019  00442C  6F8E               	movwf	printf@f& (0+255),b
 12020  00442E  0EFE               	movlw	high STR_75
 12021  004430  0100               	movlb	0	; () banked
 12022  004432  6F8F               	movwf	(printf@f+1)& (0+255),b
 12023  004434  EC87  F00B         	call	_printf	;wreg free
 12024                           
 12025                           ;Test.c: 120: printf("ALG5: NO CANS");
 12026  004438  0E07               	movlw	low STR_76
 12027  00443A  0100               	movlb	0	; () banked
 12028  00443C  6F8E               	movwf	printf@f& (0+255),b
 12029  00443E  0EFF               	movlw	high STR_76
 12030  004440  0100               	movlb	0	; () banked
 12031  004442  6F8F               	movwf	(printf@f+1)& (0+255),b
 12032  004444  EC87  F00B         	call	_printf	;wreg free
 12033  004448  0012               	return		;funcret
 12034  00444A                     __end_of_algorithmTest:
 12035                           	opt stack 0
 12036                           tblptru	equ	0xFF8
 12037                           tblptrh	equ	0xFF7
 12038                           tblptrl	equ	0xFF6
 12039                           tablat	equ	0xFF5
 12040                           prodh	equ	0xFF4
 12041                           prodl	equ	0xFF3
 12042                           intcon	equ	0xFF2
 12043                           intcon2	equ	0xFF1
 12044                           intcon3	equ	0xFF0
 12045                           postinc0	equ	0xFEE
 12046                           wreg	equ	0xFE8
 12047                           postdec1	equ	0xFE5
 12048                           fsr1l	equ	0xFE1
 12049                           indf2	equ	0xFDF
 12050                           postinc2	equ	0xFDE
 12051                           postdec2	equ	0xFDD
 12052                           fsr2h	equ	0xFDA
 12053                           fsr2l	equ	0xFD9
 12054                           status	equ	0xFD8
 12055                           
 12056 ;; *************** function _actuatorTest *****************
 12057 ;; Defined at:
 12058 ;;		line 202 in file "Test.c"
 12059 ;; Parameters:    Size  Location     Type
 12060 ;;		None
 12061 ;; Auto vars:     Size  Location     Type
 12062 ;;  i               1   45[BANK0 ] unsigned char 
 12063 ;;  i               1   67[BANK0 ] unsigned char 
 12064 ;;  i               1   66[BANK0 ] unsigned char 
 12065 ;;  i               1   65[BANK0 ] unsigned char 
 12066 ;;  i               1   64[BANK0 ] unsigned char 
 12067 ;;  i               1   63[BANK0 ] unsigned char 
 12068 ;;  i               1   62[BANK0 ] unsigned char 
 12069 ;;  i               1   61[BANK0 ] unsigned char 
 12070 ;;  i               1   60[BANK0 ] unsigned char 
 12071 ;;  i               1   59[BANK0 ] unsigned char 
 12072 ;;  i               1   58[BANK0 ] unsigned char 
 12073 ;;  i               1   57[BANK0 ] unsigned char 
 12074 ;;  i               1   56[BANK0 ] unsigned char 
 12075 ;;  i               1   55[BANK0 ] unsigned char 
 12076 ;;  i               1   54[BANK0 ] unsigned char 
 12077 ;;  i               1   53[BANK0 ] unsigned char 
 12078 ;;  i               1   52[BANK0 ] unsigned char 
 12079 ;;  i               1   51[BANK0 ] unsigned char 
 12080 ;;  i               1   50[BANK0 ] unsigned char 
 12081 ;;  i               1   49[BANK0 ] unsigned char 
 12082 ;;  i               1   48[BANK0 ] unsigned char 
 12083 ;;  i               1   47[BANK0 ] unsigned char 
 12084 ;;  i               1   46[BANK0 ] unsigned char 
 12085 ;;  i               2   68[BANK0 ] int 
 12086 ;; Return value:  Size  Location     Type
 12087 ;;                  1    wreg      void 
 12088 ;; Registers used:
 12089 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12090 ;; Tracked objects:
 12091 ;;		On entry : 0/0
 12092 ;;		On exit  : 0/0
 12093 ;;		Unchanged: 0/0
 12094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12096 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;Total ram usage:       27 bytes
 12100 ;; Hardware stack levels used:    1
 12101 ;; Hardware stack levels required when called:   10
 12102 ;; This function calls:
 12103 ;;		_lcdInst
 12104 ;;		_printf
 12105 ;;		_updateServoPosition
 12106 ;; This function is called by:
 12107 ;;		_Test
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           	psect	text40
 12112  0008D6                     __ptext40:
 12113                           	opt stack 0
 12114  0008D6                     _actuatorTest:
 12115                           	opt stack 19
 12116                           
 12117                           ;Test.c: 204: int i = 0;
 12118                           
 12119                           ;incstack = 0
 12120  0008D6  0E00               	movlw	0
 12121  0008D8  0100               	movlb	0	; () banked
 12122  0008DA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12123  0008DC  0E00               	movlw	0
 12124  0008DE  6FC4               	movwf	actuatorTest@i& (0+255),b
 12125                           
 12126                           ; BSR set to: 0
 12127                           ;Test.c: 206: (INTCONbits.GIE = 1);
 12128  0008E0  8EF2               	bsf	intcon,7,c	;volatile
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12132  0008E2  0E01               	movlw	1
 12133  0008E4  ECA6  F02B         	call	_lcdInst
 12134  0008E8  0E68               	movlw	104
 12135  0008EA  0100               	movlb	0	; () banked
 12136  0008EC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12137  0008EE  0EE4               	movlw	228
 12138  0008F0                     u10077:
 12139  0008F0  2EE8               	decfsz	wreg,f,c
 12140  0008F2  D7FE               	bra	u10077
 12141  0008F4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12142  0008F6  D7FC               	bra	u10077
 12143  0008F8  F000               	nop	
 12144  0008FA  0E80               	movlw	128
 12145  0008FC  ECA6  F02B         	call	_lcdInst
 12146                           
 12147                           ;Test.c: 208: printf("ACTUATORS");
 12148  000900  0E90               	movlw	low STR_88
 12149  000902  0100               	movlb	0	; () banked
 12150  000904  6F8E               	movwf	printf@f& (0+255),b
 12151  000906  0EFF               	movlw	high STR_88
 12152  000908  0100               	movlb	0	; () banked
 12153  00090A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12154  00090C  EC87  F00B         	call	_printf	;wreg free
 12155                           
 12156                           ;Test.c: 209: lcdInst(0b11000000);;
 12157  000910  0EC0               	movlw	192
 12158  000912  ECA6  F02B         	call	_lcdInst
 12159                           
 12160                           ;Test.c: 210: printf("PUSH TO START");
 12161  000916  0E15               	movlw	low STR_71
 12162  000918  0100               	movlb	0	; () banked
 12163  00091A  6F8E               	movwf	printf@f& (0+255),b
 12164  00091C  0EFF               	movlw	high STR_71
 12165  00091E  0100               	movlb	0	; () banked
 12166  000920  6F8F               	movwf	(printf@f+1)& (0+255),b
 12167  000922  EC87  F00B         	call	_printf	;wreg free
 12168                           
 12169                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 12170  000926  0E05               	movlw	5
 12171  000928  0100               	movlb	0	; () banked
 12172  00092A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12173  00092C  0E0F               	movlw	15
 12174  00092E  0100               	movlb	0	; () banked
 12175  000930  6FAB               	movwf	??_actuatorTest& (0+255),b
 12176  000932  0EF1               	movlw	241
 12177  000934                     u10087:
 12178  000934  2EE8               	decfsz	wreg,f,c
 12179  000936  D7FE               	bra	u10087
 12180  000938  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12181  00093A  D7FC               	bra	u10087
 12182  00093C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12183  00093E  D7FA               	bra	u10087
 12184  000940                     l1258:
 12185  000940  A281               	btfss	3969,1,c	;volatile
 12186  000942  D7FE               	goto	l1258
 12187  000944                     l1261:
 12188  000944  B281               	btfsc	3969,1,c	;volatile
 12189  000946  D7FE               	goto	l1261
 12190                           
 12191                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12192  000948  0E01               	movlw	1
 12193  00094A  ECA6  F02B         	call	_lcdInst
 12194  00094E  0E68               	movlw	104
 12195  000950  0100               	movlb	0	; () banked
 12196  000952  6FAB               	movwf	??_actuatorTest& (0+255),b
 12197  000954  0EE4               	movlw	228
 12198  000956                     u10097:
 12199  000956  2EE8               	decfsz	wreg,f,c
 12200  000958  D7FE               	bra	u10097
 12201  00095A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12202  00095C  D7FC               	bra	u10097
 12203  00095E  F000               	nop	
 12204  000960  0E80               	movlw	128
 12205  000962  ECA6  F02B         	call	_lcdInst
 12206                           
 12207                           ;Test.c: 219: printf("TST: DC MOTORS");
 12208  000966  0ECD               	movlw	low STR_90
 12209  000968  0100               	movlb	0	; () banked
 12210  00096A  6F8E               	movwf	printf@f& (0+255),b
 12211  00096C  0EFE               	movlw	high STR_90
 12212  00096E  0100               	movlb	0	; () banked
 12213  000970  6F8F               	movwf	(printf@f+1)& (0+255),b
 12214  000972  EC87  F00B         	call	_printf	;wreg free
 12215                           
 12216                           ;Test.c: 220: lcdInst(0b11000000);;
 12217  000976  0EC0               	movlw	192
 12218  000978  ECA6  F02B         	call	_lcdInst
 12219                           
 12220                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 12221  00097C  0EEB               	movlw	low STR_91
 12222  00097E  0100               	movlb	0	; () banked
 12223  000980  6F8E               	movwf	printf@f& (0+255),b
 12224  000982  0EFE               	movlw	high STR_91
 12225  000984  0100               	movlb	0	; () banked
 12226  000986  6F8F               	movwf	(printf@f+1)& (0+255),b
 12227  000988  EC87  F00B         	call	_printf	;wreg free
 12228                           
 12229                           ;Test.c: 222: LATBbits.LATB2 = 1;
 12230  00098C  848A               	bsf	3978,2,c	;volatile
 12231                           
 12232                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 12233  00098E  0E00               	movlw	0
 12234  000990  0100               	movlb	0	; () banked
 12235  000992  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12236  000994  0E00               	movlw	0
 12237  000996  6FC4               	movwf	actuatorTest@i& (0+255),b
 12238                           
 12239                           ; BSR set to: 0
 12240  000998  0100               	movlb	0	; () banked
 12241  00099A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12242  00099C  D008               	goto	l8012
 12243  00099E  0100               	movlb	0	; () banked
 12244  0009A0  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12245  0009A2  E123               	bnz	l1265
 12246  0009A4  0E05               	movlw	5
 12247  0009A6  0100               	movlb	0	; () banked
 12248  0009A8  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12249  0009AA  B0D8               	btfsc	status,0,c
 12250  0009AC  D01E               	goto	l1265
 12251  0009AE                     l8012:
 12252                           
 12253                           ; BSR set to: 0
 12254  0009AE  0E00               	movlw	0
 12255  0009B0  0100               	movlb	0	; () banked
 12256  0009B2  6FAD               	movwf	actuatorTest@i_1755& (0+255),b
 12257  0009B4                     l8014:
 12258                           
 12259                           ; BSR set to: 0
 12260  0009B4  0E63               	movlw	99
 12261  0009B6  0100               	movlb	0	; () banked
 12262  0009B8  65AD               	cpfsgt	actuatorTest@i_1755& (0+255),b
 12263  0009BA  D001               	goto	l8018
 12264  0009BC  D00C               	goto	l8022
 12265  0009BE                     l8018:
 12266                           
 12267                           ; BSR set to: 0
 12268  0009BE  0E68               	movlw	104
 12269  0009C0  0100               	movlb	0	; () banked
 12270  0009C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12271  0009C4  0EE4               	movlw	228
 12272  0009C6                     u10107:
 12273  0009C6  2EE8               	decfsz	wreg,f,c
 12274  0009C8  D7FE               	bra	u10107
 12275  0009CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12276  0009CC  D7FC               	bra	u10107
 12277  0009CE  F000               	nop	
 12278  0009D0  0100               	movlb	0	; () banked
 12279  0009D2  2BAD               	incf	actuatorTest@i_1755& (0+255),f,b
 12280  0009D4  D7EF               	goto	l8014
 12281  0009D6                     l8022:
 12282                           
 12283                           ; BSR set to: 0
 12284  0009D6  0100               	movlb	0	; () banked
 12285  0009D8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12286  0009DA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12287                           
 12288                           ; BSR set to: 0
 12289  0009DC  0100               	movlb	0	; () banked
 12290  0009DE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12291  0009E0  D7E6               	goto	l8012
 12292  0009E2  0100               	movlb	0	; () banked
 12293  0009E4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12294  0009E6  E101               	bnz	u6600
 12295  0009E8  D7DD               	goto	L12
 12296  0009EA                     u6600:
 12297  0009EA                     l1265:
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;Test.c: 224: LATBbits.LATB2 = 0;
 12301  0009EA  948A               	bcf	3978,2,c	;volatile
 12302                           
 12303                           ; BSR set to: 0
 12304                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12305  0009EC  0E01               	movlw	1
 12306  0009EE  ECA6  F02B         	call	_lcdInst
 12307  0009F2  0E68               	movlw	104
 12308  0009F4  0100               	movlb	0	; () banked
 12309  0009F6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12310  0009F8  0EE4               	movlw	228
 12311  0009FA                     u10117:
 12312  0009FA  2EE8               	decfsz	wreg,f,c
 12313  0009FC  D7FE               	bra	u10117
 12314  0009FE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12315  000A00  D7FC               	bra	u10117
 12316  000A02  F000               	nop	
 12317  000A04  0E80               	movlw	128
 12318  000A06  ECA6  F02B         	call	_lcdInst
 12319                           
 12320                           ;Test.c: 231: printf("TST: COND SOLN'D");
 12321  000A0A  0E69               	movlw	low STR_92
 12322  000A0C  0100               	movlb	0	; () banked
 12323  000A0E  6F8E               	movwf	printf@f& (0+255),b
 12324  000A10  0EFC               	movlw	high STR_92
 12325  000A12  0100               	movlb	0	; () banked
 12326  000A14  6F8F               	movwf	(printf@f+1)& (0+255),b
 12327  000A16  EC87  F00B         	call	_printf	;wreg free
 12328                           
 12329                           ;Test.c: 232: lcdInst(0b11000000);;
 12330  000A1A  0EC0               	movlw	192
 12331  000A1C  ECA6  F02B         	call	_lcdInst
 12332                           
 12333                           ;Test.c: 233: printf("PIN RA3...");
 12334  000A20  0E65               	movlw	low STR_93
 12335  000A22  0100               	movlb	0	; () banked
 12336  000A24  6F8E               	movwf	printf@f& (0+255),b
 12337  000A26  0EFF               	movlw	high STR_93
 12338  000A28  0100               	movlb	0	; () banked
 12339  000A2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12340  000A2C  EC87  F00B         	call	_printf	;wreg free
 12341                           
 12342                           ;Test.c: 234: for(i=0;i<5;i++){
 12343  000A30  0E00               	movlw	0
 12344  000A32  0100               	movlb	0	; () banked
 12345  000A34  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12346  000A36  0E00               	movlw	0
 12347  000A38  6FC4               	movwf	actuatorTest@i& (0+255),b
 12348                           
 12349                           ; BSR set to: 0
 12350  000A3A  0100               	movlb	0	; () banked
 12351  000A3C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12352  000A3E  D008               	goto	l1268
 12353  000A40  0100               	movlb	0	; () banked
 12354  000A42  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12355  000A44  E12C               	bnz	l1269
 12356  000A46  0E05               	movlw	5
 12357  000A48  0100               	movlb	0	; () banked
 12358  000A4A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12359  000A4C  B0D8               	btfsc	status,0,c
 12360  000A4E  D027               	goto	l1269
 12361  000A50                     l1268:
 12362                           
 12363                           ; BSR set to: 0
 12364                           ;Test.c: 235: LATAbits.LATA3 = 1;
 12365  000A50  8689               	bsf	3977,3,c	;volatile
 12366                           
 12367                           ; BSR set to: 0
 12368                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 12369  000A52  0E0D               	movlw	13
 12370  000A54  0100               	movlb	0	; () banked
 12371  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12372  000A58  0E2D               	movlw	45
 12373  000A5A  0100               	movlb	0	; () banked
 12374  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12375  000A5E  0ED7               	movlw	215
 12376  000A60                     u10127:
 12377  000A60  2EE8               	decfsz	wreg,f,c
 12378  000A62  D7FE               	bra	u10127
 12379  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12380  000A66  D7FC               	bra	u10127
 12381  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12382  000A6A  D7FA               	bra	u10127
 12383  000A6C  D000               	nop2	
 12384                           
 12385                           ;Test.c: 237: LATAbits.LATA3 = !1;
 12386  000A6E  9689               	bcf	3977,3,c	;volatile
 12387                           
 12388                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12389  000A70  0E1D               	movlw	29
 12390  000A72  0100               	movlb	0	; () banked
 12391  000A74  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12392  000A76  0E69               	movlw	105
 12393  000A78  0100               	movlb	0	; () banked
 12394  000A7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12395  000A7C  0EA5               	movlw	165
 12396  000A7E                     u10137:
 12397  000A7E  2EE8               	decfsz	wreg,f,c
 12398  000A80  D7FE               	bra	u10137
 12399  000A82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12400  000A84  D7FC               	bra	u10137
 12401  000A86  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12402  000A88  D7FA               	bra	u10137
 12403  000A8A  0100               	movlb	0	; () banked
 12404  000A8C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12405  000A8E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12406  000A90  0100               	movlb	0	; () banked
 12407  000A92  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12408  000A94  D7DD               	goto	l1268
 12409  000A96  0100               	movlb	0	; () banked
 12410  000A98  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12411  000A9A  E101               	bnz	u6620
 12412  000A9C  D7D4               	goto	L13
 12413  000A9E                     u6620:
 12414  000A9E                     l1269:
 12415                           
 12416                           ; BSR set to: 0
 12417                           ;Test.c: 239: }
 12418                           ;Test.c: 240: LATAbits.LATA3 = !1;
 12419  000A9E  9689               	bcf	3977,3,c	;volatile
 12420                           
 12421                           ; BSR set to: 0
 12422                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12423  000AA0  0E01               	movlw	1
 12424  000AA2  ECA6  F02B         	call	_lcdInst
 12425  000AA6  0E68               	movlw	104
 12426  000AA8  0100               	movlb	0	; () banked
 12427  000AAA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12428  000AAC  0EE4               	movlw	228
 12429  000AAE                     u10147:
 12430  000AAE  2EE8               	decfsz	wreg,f,c
 12431  000AB0  D7FE               	bra	u10147
 12432  000AB2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12433  000AB4  D7FC               	bra	u10147
 12434  000AB6  F000               	nop	
 12435  000AB8  0E80               	movlw	128
 12436  000ABA  ECA6  F02B         	call	_lcdInst
 12437                           
 12438                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 12439  000ABE  0E7A               	movlw	low STR_94
 12440  000AC0  0100               	movlb	0	; () banked
 12441  000AC2  6F8E               	movwf	printf@f& (0+255),b
 12442  000AC4  0EFC               	movlw	high STR_94
 12443  000AC6  0100               	movlb	0	; () banked
 12444  000AC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12445  000ACA  EC87  F00B         	call	_printf	;wreg free
 12446                           
 12447                           ;Test.c: 248: lcdInst(0b11000000);;
 12448  000ACE  0EC0               	movlw	192
 12449  000AD0  ECA6  F02B         	call	_lcdInst
 12450                           
 12451                           ;Test.c: 249: printf("PIN RA4...");
 12452  000AD4  0E70               	movlw	low STR_95
 12453  000AD6  0100               	movlb	0	; () banked
 12454  000AD8  6F8E               	movwf	printf@f& (0+255),b
 12455  000ADA  0EFF               	movlw	high STR_95
 12456  000ADC  0100               	movlb	0	; () banked
 12457  000ADE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12458  000AE0  EC87  F00B         	call	_printf	;wreg free
 12459                           
 12460                           ;Test.c: 250: for(i=0;i<5;i++){
 12461  000AE4  0E00               	movlw	0
 12462  000AE6  0100               	movlb	0	; () banked
 12463  000AE8  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12464  000AEA  0E00               	movlw	0
 12465  000AEC  6FC4               	movwf	actuatorTest@i& (0+255),b
 12466                           
 12467                           ; BSR set to: 0
 12468  000AEE  0100               	movlb	0	; () banked
 12469  000AF0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12470  000AF2  D008               	goto	l1270
 12471  000AF4  0100               	movlb	0	; () banked
 12472  000AF6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12473  000AF8  E12C               	bnz	l1271
 12474  000AFA  0E05               	movlw	5
 12475  000AFC  0100               	movlb	0	; () banked
 12476  000AFE  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12477  000B00  B0D8               	btfsc	status,0,c
 12478  000B02  D027               	goto	l1271
 12479  000B04                     l1270:
 12480                           
 12481                           ; BSR set to: 0
 12482                           ;Test.c: 251: LATAbits.LATA4 = 1;
 12483  000B04  8889               	bsf	3977,4,c	;volatile
 12484                           
 12485                           ; BSR set to: 0
 12486                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 12487  000B06  0E0D               	movlw	13
 12488  000B08  0100               	movlb	0	; () banked
 12489  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12490  000B0C  0E2D               	movlw	45
 12491  000B0E  0100               	movlb	0	; () banked
 12492  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 12493  000B12  0ED7               	movlw	215
 12494  000B14                     u10157:
 12495  000B14  2EE8               	decfsz	wreg,f,c
 12496  000B16  D7FE               	bra	u10157
 12497  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12498  000B1A  D7FC               	bra	u10157
 12499  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12500  000B1E  D7FA               	bra	u10157
 12501  000B20  D000               	nop2	
 12502                           
 12503                           ;Test.c: 253: LATAbits.LATA4 = !1;
 12504  000B22  9889               	bcf	3977,4,c	;volatile
 12505                           
 12506                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12507  000B24  0E1D               	movlw	29
 12508  000B26  0100               	movlb	0	; () banked
 12509  000B28  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12510  000B2A  0E69               	movlw	105
 12511  000B2C  0100               	movlb	0	; () banked
 12512  000B2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12513  000B30  0EA5               	movlw	165
 12514  000B32                     u10167:
 12515  000B32  2EE8               	decfsz	wreg,f,c
 12516  000B34  D7FE               	bra	u10167
 12517  000B36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12518  000B38  D7FC               	bra	u10167
 12519  000B3A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12520  000B3C  D7FA               	bra	u10167
 12521  000B3E  0100               	movlb	0	; () banked
 12522  000B40  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12523  000B42  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12524  000B44  0100               	movlb	0	; () banked
 12525  000B46  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12526  000B48  D7DD               	goto	l1270
 12527  000B4A  0100               	movlb	0	; () banked
 12528  000B4C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12529  000B4E  E101               	bnz	u6640
 12530  000B50  D7D4               	goto	L14
 12531  000B52                     u6640:
 12532  000B52                     l1271:
 12533                           
 12534                           ; BSR set to: 0
 12535                           ;Test.c: 255: }
 12536                           ;Test.c: 256: LATAbits.LATA4 = !1;
 12537  000B52  9889               	bcf	3977,4,c	;volatile
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12541  000B54  0E01               	movlw	1
 12542  000B56  ECA6  F02B         	call	_lcdInst
 12543  000B5A  0E68               	movlw	104
 12544  000B5C  0100               	movlb	0	; () banked
 12545  000B5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12546  000B60  0EE4               	movlw	228
 12547  000B62                     u10177:
 12548  000B62  2EE8               	decfsz	wreg,f,c
 12549  000B64  D7FE               	bra	u10177
 12550  000B66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12551  000B68  D7FC               	bra	u10177
 12552  000B6A  F000               	nop	
 12553  000B6C  0E80               	movlw	128
 12554  000B6E  ECA6  F02B         	call	_lcdInst
 12555                           
 12556                           ;Test.c: 260: machine_state = Sorting_state;
 12557  000B72  0E01               	movlw	1
 12558  000B74  0100               	movlb	0	; () banked
 12559  000B76  6FFC               	movwf	_machine_state& (0+255),b
 12560                           
 12561                           ; BSR set to: 0
 12562                           ;Test.c: 261: was_low_1 = 0;
 12563  000B78  0E00               	movlw	0
 12564  000B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 12565  000B7C  0E00               	movlw	0
 12566  000B7E  6E77               	movwf	_was_low_1,c	;volatile
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;Test.c: 262: was_low_1 = 0;
 12570  000B80  0E00               	movlw	0
 12571  000B82  6E78               	movwf	_was_low_1+1,c	;volatile
 12572  000B84  0E00               	movlw	0
 12573  000B86  6E77               	movwf	_was_low_1,c	;volatile
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;Test.c: 269: printf("TST: PAN SERVO");
 12577  000B88  0EAF               	movlw	low STR_96
 12578  000B8A  0100               	movlb	0	; () banked
 12579  000B8C  6F8E               	movwf	printf@f& (0+255),b
 12580  000B8E  0EFE               	movlw	high STR_96
 12581  000B90  0100               	movlb	0	; () banked
 12582  000B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 12583  000B94  EC87  F00B         	call	_printf	;wreg free
 12584                           
 12585                           ;Test.c: 270: lcdInst(0b11000000);;
 12586  000B98  0EC0               	movlw	192
 12587  000B9A  ECA6  F02B         	call	_lcdInst
 12588                           
 12589                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 12590  000B9E  0ED0               	movlw	low STR_97
 12591  000BA0  0100               	movlb	0	; () banked
 12592  000BA2  6F8E               	movwf	printf@f& (0+255),b
 12593  000BA4  0EFB               	movlw	high STR_97
 12594  000BA6  0100               	movlb	0	; () banked
 12595  000BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12596  000BAA  EC87  F00B         	call	_printf	;wreg free
 12597                           
 12598                           ;Test.c: 272: updateServoPosition(1200, 1);
 12599  000BAE  0E04               	movlw	4
 12600  000BB0  0100               	movlb	0	; () banked
 12601  000BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12602  000BB4  0EB0               	movlw	176
 12603  000BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12604  000BB8  0E00               	movlw	0
 12605  000BBA  0100               	movlb	0	; () banked
 12606  000BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12607  000BBE  0E01               	movlw	1
 12608  000BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12609  000BC2  ECD2  F024         	call	_updateServoPosition	;wreg free
 12610                           
 12611                           ;Test.c: 273: TMR1ON = 1;
 12612  000BC6  80CD               	bsf	4045,0,c	;volatile
 12613                           
 12614                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12615  000BC8  0E00               	movlw	0
 12616  000BCA  0100               	movlb	0	; () banked
 12617  000BCC  6FAE               	movwf	actuatorTest@i_1762& (0+255),b
 12618  000BCE                     l8098:
 12619                           
 12620                           ; BSR set to: 0
 12621  000BCE  0E63               	movlw	99
 12622  000BD0  0100               	movlb	0	; () banked
 12623  000BD2  65AE               	cpfsgt	actuatorTest@i_1762& (0+255),b
 12624  000BD4  D001               	goto	l8102
 12625  000BD6  D00C               	goto	l8106
 12626  000BD8                     l8102:
 12627                           
 12628                           ; BSR set to: 0
 12629  000BD8  0E68               	movlw	104
 12630  000BDA  0100               	movlb	0	; () banked
 12631  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12632  000BDE  0EE4               	movlw	228
 12633  000BE0                     u10187:
 12634  000BE0  2EE8               	decfsz	wreg,f,c
 12635  000BE2  D7FE               	bra	u10187
 12636  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12637  000BE6  D7FC               	bra	u10187
 12638  000BE8  F000               	nop	
 12639  000BEA  0100               	movlb	0	; () banked
 12640  000BEC  2BAE               	incf	actuatorTest@i_1762& (0+255),f,b
 12641  000BEE  D7EF               	goto	l8098
 12642  000BF0                     l8106:
 12643                           
 12644                           ; BSR set to: 0
 12645  000BF0  0E00               	movlw	0
 12646  000BF2  0100               	movlb	0	; () banked
 12647  000BF4  6FAF               	movwf	actuatorTest@i_1763& (0+255),b
 12648  000BF6                     l8108:
 12649                           
 12650                           ; BSR set to: 0
 12651  000BF6  0E63               	movlw	99
 12652  000BF8  0100               	movlb	0	; () banked
 12653  000BFA  65AF               	cpfsgt	actuatorTest@i_1763& (0+255),b
 12654  000BFC  D001               	goto	l8112
 12655  000BFE  D00C               	goto	l8116
 12656  000C00                     l8112:
 12657                           
 12658                           ; BSR set to: 0
 12659  000C00  0E68               	movlw	104
 12660  000C02  0100               	movlb	0	; () banked
 12661  000C04  6FAB               	movwf	??_actuatorTest& (0+255),b
 12662  000C06  0EE4               	movlw	228
 12663  000C08                     u10197:
 12664  000C08  2EE8               	decfsz	wreg,f,c
 12665  000C0A  D7FE               	bra	u10197
 12666  000C0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12667  000C0E  D7FC               	bra	u10197
 12668  000C10  F000               	nop	
 12669  000C12  0100               	movlb	0	; () banked
 12670  000C14  2BAF               	incf	actuatorTest@i_1763& (0+255),f,b
 12671  000C16  D7EF               	goto	l8108
 12672  000C18                     l8116:
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12676  000C18  0E80               	movlw	128
 12677  000C1A  ECA6  F02B         	call	_lcdInst
 12678  000C1E  0EC0               	movlw	192
 12679  000C20  ECA6  F02B         	call	_lcdInst
 12680                           
 12681                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 12682  000C24  0EBF               	movlw	low STR_98
 12683  000C26  0100               	movlb	0	; () banked
 12684  000C28  6F8E               	movwf	printf@f& (0+255),b
 12685  000C2A  0EFB               	movlw	high STR_98
 12686  000C2C  0100               	movlb	0	; () banked
 12687  000C2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12688  000C30  EC87  F00B         	call	_printf	;wreg free
 12689                           
 12690                           ;Test.c: 278: updateServoPosition(500, 1);
 12691  000C34  0E01               	movlw	1
 12692  000C36  0100               	movlb	0	; () banked
 12693  000C38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12694  000C3A  0EF4               	movlw	244
 12695  000C3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12696  000C3E  0E00               	movlw	0
 12697  000C40  0100               	movlb	0	; () banked
 12698  000C42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12699  000C44  0E01               	movlw	1
 12700  000C46  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12701  000C48  ECD2  F024         	call	_updateServoPosition	;wreg free
 12702                           
 12703                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12704  000C4C  0E00               	movlw	0
 12705  000C4E  0100               	movlb	0	; () banked
 12706  000C50  6FB0               	movwf	actuatorTest@i_1765& (0+255),b
 12707  000C52                     l8124:
 12708                           
 12709                           ; BSR set to: 0
 12710  000C52  0E63               	movlw	99
 12711  000C54  0100               	movlb	0	; () banked
 12712  000C56  65B0               	cpfsgt	actuatorTest@i_1765& (0+255),b
 12713  000C58  D001               	goto	l8128
 12714  000C5A  D00C               	goto	l8132
 12715  000C5C                     l8128:
 12716                           
 12717                           ; BSR set to: 0
 12718  000C5C  0E68               	movlw	104
 12719  000C5E  0100               	movlb	0	; () banked
 12720  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 12721  000C62  0EE4               	movlw	228
 12722  000C64                     u10207:
 12723  000C64  2EE8               	decfsz	wreg,f,c
 12724  000C66  D7FE               	bra	u10207
 12725  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12726  000C6A  D7FC               	bra	u10207
 12727  000C6C  F000               	nop	
 12728  000C6E  0100               	movlb	0	; () banked
 12729  000C70  2BB0               	incf	actuatorTest@i_1765& (0+255),f,b
 12730  000C72  D7EF               	goto	l8124
 12731  000C74                     l8132:
 12732                           
 12733                           ; BSR set to: 0
 12734  000C74  0E00               	movlw	0
 12735  000C76  0100               	movlb	0	; () banked
 12736  000C78  6FB1               	movwf	actuatorTest@i_1766& (0+255),b
 12737  000C7A                     l8134:
 12738                           
 12739                           ; BSR set to: 0
 12740  000C7A  0E63               	movlw	99
 12741  000C7C  0100               	movlb	0	; () banked
 12742  000C7E  65B1               	cpfsgt	actuatorTest@i_1766& (0+255),b
 12743  000C80  D001               	goto	l8138
 12744  000C82  D00C               	goto	l8142
 12745  000C84                     l8138:
 12746                           
 12747                           ; BSR set to: 0
 12748  000C84  0E68               	movlw	104
 12749  000C86  0100               	movlb	0	; () banked
 12750  000C88  6FAB               	movwf	??_actuatorTest& (0+255),b
 12751  000C8A  0EE4               	movlw	228
 12752  000C8C                     u10217:
 12753  000C8C  2EE8               	decfsz	wreg,f,c
 12754  000C8E  D7FE               	bra	u10217
 12755  000C90  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12756  000C92  D7FC               	bra	u10217
 12757  000C94  F000               	nop	
 12758  000C96  0100               	movlb	0	; () banked
 12759  000C98  2BB1               	incf	actuatorTest@i_1766& (0+255),f,b
 12760  000C9A  D7EF               	goto	l8134
 12761  000C9C                     l8142:
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12765  000C9C  0E80               	movlw	128
 12766  000C9E  ECA6  F02B         	call	_lcdInst
 12767  000CA2  0EC0               	movlw	192
 12768  000CA4  ECA6  F02B         	call	_lcdInst
 12769                           
 12770                           ;Test.c: 282: printf("LEFT -- 2s      ");
 12771  000CA8  0E9D               	movlw	low STR_99
 12772  000CAA  0100               	movlb	0	; () banked
 12773  000CAC  6F8E               	movwf	printf@f& (0+255),b
 12774  000CAE  0EFB               	movlw	high STR_99
 12775  000CB0  0100               	movlb	0	; () banked
 12776  000CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12777  000CB4  EC87  F00B         	call	_printf	;wreg free
 12778                           
 12779                           ;Test.c: 283: updateServoPosition(2400, 1);
 12780  000CB8  0E09               	movlw	9
 12781  000CBA  0100               	movlb	0	; () banked
 12782  000CBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12783  000CBE  0E60               	movlw	96
 12784  000CC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12785  000CC2  0E00               	movlw	0
 12786  000CC4  0100               	movlb	0	; () banked
 12787  000CC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12788  000CC8  0E01               	movlw	1
 12789  000CCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12790  000CCC  ECD2  F024         	call	_updateServoPosition	;wreg free
 12791                           
 12792                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12793  000CD0  0E00               	movlw	0
 12794  000CD2  0100               	movlb	0	; () banked
 12795  000CD4  6FB2               	movwf	actuatorTest@i_1768& (0+255),b
 12796  000CD6                     l8150:
 12797                           
 12798                           ; BSR set to: 0
 12799  000CD6  0E63               	movlw	99
 12800  000CD8  0100               	movlb	0	; () banked
 12801  000CDA  65B2               	cpfsgt	actuatorTest@i_1768& (0+255),b
 12802  000CDC  D001               	goto	l8154
 12803  000CDE  D00C               	goto	l8158
 12804  000CE0                     l8154:
 12805                           
 12806                           ; BSR set to: 0
 12807  000CE0  0E68               	movlw	104
 12808  000CE2  0100               	movlb	0	; () banked
 12809  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12810  000CE6  0EE4               	movlw	228
 12811  000CE8                     u10227:
 12812  000CE8  2EE8               	decfsz	wreg,f,c
 12813  000CEA  D7FE               	bra	u10227
 12814  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12815  000CEE  D7FC               	bra	u10227
 12816  000CF0  F000               	nop	
 12817  000CF2  0100               	movlb	0	; () banked
 12818  000CF4  2BB2               	incf	actuatorTest@i_1768& (0+255),f,b
 12819  000CF6  D7EF               	goto	l8150
 12820  000CF8                     l8158:
 12821                           
 12822                           ; BSR set to: 0
 12823  000CF8  0E00               	movlw	0
 12824  000CFA  0100               	movlb	0	; () banked
 12825  000CFC  6FB3               	movwf	actuatorTest@i_1769& (0+255),b
 12826  000CFE                     l8160:
 12827                           
 12828                           ; BSR set to: 0
 12829  000CFE  0E63               	movlw	99
 12830  000D00  0100               	movlb	0	; () banked
 12831  000D02  65B3               	cpfsgt	actuatorTest@i_1769& (0+255),b
 12832  000D04  D001               	goto	l8164
 12833  000D06  D00C               	goto	l8168
 12834  000D08                     l8164:
 12835                           
 12836                           ; BSR set to: 0
 12837  000D08  0E68               	movlw	104
 12838  000D0A  0100               	movlb	0	; () banked
 12839  000D0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12840  000D0E  0EE4               	movlw	228
 12841  000D10                     u10237:
 12842  000D10  2EE8               	decfsz	wreg,f,c
 12843  000D12  D7FE               	bra	u10237
 12844  000D14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12845  000D16  D7FC               	bra	u10237
 12846  000D18  F000               	nop	
 12847  000D1A  0100               	movlb	0	; () banked
 12848  000D1C  2BB3               	incf	actuatorTest@i_1769& (0+255),f,b
 12849  000D1E  D7EF               	goto	l8160
 12850  000D20                     l8168:
 12851                           
 12852                           ; BSR set to: 0
 12853                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12854  000D20  0E80               	movlw	128
 12855  000D22  ECA6  F02B         	call	_lcdInst
 12856  000D26  0EC0               	movlw	192
 12857  000D28  ECA6  F02B         	call	_lcdInst
 12858                           
 12859                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 12860  000D2C  0E25               	movlw	low STR_100
 12861  000D2E  0100               	movlb	0	; () banked
 12862  000D30  6F8E               	movwf	printf@f& (0+255),b
 12863  000D32  0EFC               	movlw	high STR_100
 12864  000D34  0100               	movlb	0	; () banked
 12865  000D36  6F8F               	movwf	(printf@f+1)& (0+255),b
 12866  000D38  EC87  F00B         	call	_printf	;wreg free
 12867                           
 12868                           ;Test.c: 288: updateServoPosition(1670, 1);
 12869  000D3C  0E06               	movlw	6
 12870  000D3E  0100               	movlb	0	; () banked
 12871  000D40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12872  000D42  0E86               	movlw	134
 12873  000D44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12874  000D46  0E00               	movlw	0
 12875  000D48  0100               	movlb	0	; () banked
 12876  000D4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12877  000D4C  0E01               	movlw	1
 12878  000D4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12879  000D50  ECD2  F024         	call	_updateServoPosition	;wreg free
 12880                           
 12881                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12882  000D54  0E00               	movlw	0
 12883  000D56  0100               	movlb	0	; () banked
 12884  000D58  6FB4               	movwf	actuatorTest@i_1771& (0+255),b
 12885  000D5A                     l8176:
 12886                           
 12887                           ; BSR set to: 0
 12888  000D5A  0E63               	movlw	99
 12889  000D5C  0100               	movlb	0	; () banked
 12890  000D5E  65B4               	cpfsgt	actuatorTest@i_1771& (0+255),b
 12891  000D60  D001               	goto	l8180
 12892  000D62  D00C               	goto	l8184
 12893  000D64                     l8180:
 12894                           
 12895                           ; BSR set to: 0
 12896  000D64  0E68               	movlw	104
 12897  000D66  0100               	movlb	0	; () banked
 12898  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 12899  000D6A  0EE4               	movlw	228
 12900  000D6C                     u10247:
 12901  000D6C  2EE8               	decfsz	wreg,f,c
 12902  000D6E  D7FE               	bra	u10247
 12903  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12904  000D72  D7FC               	bra	u10247
 12905  000D74  F000               	nop	
 12906  000D76  0100               	movlb	0	; () banked
 12907  000D78  2BB4               	incf	actuatorTest@i_1771& (0+255),f,b
 12908  000D7A  D7EF               	goto	l8176
 12909  000D7C                     l8184:
 12910                           
 12911                           ; BSR set to: 0
 12912  000D7C  0E00               	movlw	0
 12913  000D7E  0100               	movlb	0	; () banked
 12914  000D80  6FB5               	movwf	actuatorTest@i_1772& (0+255),b
 12915  000D82                     l8186:
 12916                           
 12917                           ; BSR set to: 0
 12918  000D82  0E63               	movlw	99
 12919  000D84  0100               	movlb	0	; () banked
 12920  000D86  65B5               	cpfsgt	actuatorTest@i_1772& (0+255),b
 12921  000D88  D001               	goto	l8190
 12922  000D8A  D00C               	goto	l8194
 12923  000D8C                     l8190:
 12924                           
 12925                           ; BSR set to: 0
 12926  000D8C  0E68               	movlw	104
 12927  000D8E  0100               	movlb	0	; () banked
 12928  000D90  6FAB               	movwf	??_actuatorTest& (0+255),b
 12929  000D92  0EE4               	movlw	228
 12930  000D94                     u10257:
 12931  000D94  2EE8               	decfsz	wreg,f,c
 12932  000D96  D7FE               	bra	u10257
 12933  000D98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12934  000D9A  D7FC               	bra	u10257
 12935  000D9C  F000               	nop	
 12936  000D9E  0100               	movlb	0	; () banked
 12937  000DA0  2BB5               	incf	actuatorTest@i_1772& (0+255),f,b
 12938  000DA2  D7EF               	goto	l8186
 12939  000DA4                     l8194:
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12943  000DA4  0E80               	movlw	128
 12944  000DA6  ECA6  F02B         	call	_lcdInst
 12945  000DAA  0EC0               	movlw	192
 12946  000DAC  ECA6  F02B         	call	_lcdInst
 12947                           
 12948                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 12949  000DB0  0E36               	movlw	low STR_101
 12950  000DB2  0100               	movlb	0	; () banked
 12951  000DB4  6F8E               	movwf	printf@f& (0+255),b
 12952  000DB6  0EFC               	movlw	high STR_101
 12953  000DB8  0100               	movlb	0	; () banked
 12954  000DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12955  000DBC  EC87  F00B         	call	_printf	;wreg free
 12956                           
 12957                           ;Test.c: 293: updateServoPosition(850, 1);
 12958  000DC0  0E03               	movlw	3
 12959  000DC2  0100               	movlb	0	; () banked
 12960  000DC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12961  000DC6  0E52               	movlw	82
 12962  000DC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12963  000DCA  0E00               	movlw	0
 12964  000DCC  0100               	movlb	0	; () banked
 12965  000DCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12966  000DD0  0E01               	movlw	1
 12967  000DD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12968  000DD4  ECD2  F024         	call	_updateServoPosition	;wreg free
 12969                           
 12970                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12971  000DD8  0E00               	movlw	0
 12972  000DDA  0100               	movlb	0	; () banked
 12973  000DDC  6FB6               	movwf	actuatorTest@i_1774& (0+255),b
 12974  000DDE                     l8202:
 12975                           
 12976                           ; BSR set to: 0
 12977  000DDE  0E63               	movlw	99
 12978  000DE0  0100               	movlb	0	; () banked
 12979  000DE2  65B6               	cpfsgt	actuatorTest@i_1774& (0+255),b
 12980  000DE4  D001               	goto	l8206
 12981  000DE6  D00C               	goto	l8210
 12982  000DE8                     l8206:
 12983                           
 12984                           ; BSR set to: 0
 12985  000DE8  0E68               	movlw	104
 12986  000DEA  0100               	movlb	0	; () banked
 12987  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12988  000DEE  0EE4               	movlw	228
 12989  000DF0                     u10267:
 12990  000DF0  2EE8               	decfsz	wreg,f,c
 12991  000DF2  D7FE               	bra	u10267
 12992  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12993  000DF6  D7FC               	bra	u10267
 12994  000DF8  F000               	nop	
 12995  000DFA  0100               	movlb	0	; () banked
 12996  000DFC  2BB6               	incf	actuatorTest@i_1774& (0+255),f,b
 12997  000DFE  D7EF               	goto	l8202
 12998  000E00                     l8210:
 12999                           
 13000                           ; BSR set to: 0
 13001  000E00  0E00               	movlw	0
 13002  000E02  0100               	movlb	0	; () banked
 13003  000E04  6FB7               	movwf	actuatorTest@i_1775& (0+255),b
 13004  000E06                     l8212:
 13005                           
 13006                           ; BSR set to: 0
 13007  000E06  0E63               	movlw	99
 13008  000E08  0100               	movlb	0	; () banked
 13009  000E0A  65B7               	cpfsgt	actuatorTest@i_1775& (0+255),b
 13010  000E0C  D001               	goto	l8216
 13011  000E0E  D00C               	goto	l8220
 13012  000E10                     l8216:
 13013                           
 13014                           ; BSR set to: 0
 13015  000E10  0E68               	movlw	104
 13016  000E12  0100               	movlb	0	; () banked
 13017  000E14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13018  000E16  0EE4               	movlw	228
 13019  000E18                     u10277:
 13020  000E18  2EE8               	decfsz	wreg,f,c
 13021  000E1A  D7FE               	bra	u10277
 13022  000E1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13023  000E1E  D7FC               	bra	u10277
 13024  000E20  F000               	nop	
 13025  000E22  0100               	movlb	0	; () banked
 13026  000E24  2BB7               	incf	actuatorTest@i_1775& (0+255),f,b
 13027  000E26  D7EF               	goto	l8212
 13028  000E28                     l8220:
 13029                           
 13030                           ; BSR set to: 0
 13031                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13032  000E28  0E80               	movlw	128
 13033  000E2A  ECA6  F02B         	call	_lcdInst
 13034  000E2E  0EC0               	movlw	192
 13035  000E30  ECA6  F02B         	call	_lcdInst
 13036                           
 13037                           ;Test.c: 297: printf("MID -- 2s       ");
 13038  000E34  0E7B               	movlw	low STR_102
 13039  000E36  0100               	movlb	0	; () banked
 13040  000E38  6F8E               	movwf	printf@f& (0+255),b
 13041  000E3A  0EFB               	movlw	high STR_102
 13042  000E3C  0100               	movlb	0	; () banked
 13043  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13044  000E40  EC87  F00B         	call	_printf	;wreg free
 13045                           
 13046                           ;Test.c: 298: updateServoPosition(1200, 1);
 13047  000E44  0E04               	movlw	4
 13048  000E46  0100               	movlb	0	; () banked
 13049  000E48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13050  000E4A  0EB0               	movlw	176
 13051  000E4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13052  000E4E  0E00               	movlw	0
 13053  000E50  0100               	movlb	0	; () banked
 13054  000E52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13055  000E54  0E01               	movlw	1
 13056  000E56  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13057  000E58  ECD2  F024         	call	_updateServoPosition	;wreg free
 13058                           
 13059                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13060  000E5C  0E00               	movlw	0
 13061  000E5E  0100               	movlb	0	; () banked
 13062  000E60  6FB8               	movwf	actuatorTest@i_1777& (0+255),b
 13063  000E62                     l8228:
 13064                           
 13065                           ; BSR set to: 0
 13066  000E62  0E63               	movlw	99
 13067  000E64  0100               	movlb	0	; () banked
 13068  000E66  65B8               	cpfsgt	actuatorTest@i_1777& (0+255),b
 13069  000E68  D001               	goto	l8232
 13070  000E6A  D00C               	goto	l8236
 13071  000E6C                     l8232:
 13072                           
 13073                           ; BSR set to: 0
 13074  000E6C  0E68               	movlw	104
 13075  000E6E  0100               	movlb	0	; () banked
 13076  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 13077  000E72  0EE4               	movlw	228
 13078  000E74                     u10287:
 13079  000E74  2EE8               	decfsz	wreg,f,c
 13080  000E76  D7FE               	bra	u10287
 13081  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13082  000E7A  D7FC               	bra	u10287
 13083  000E7C  F000               	nop	
 13084  000E7E  0100               	movlb	0	; () banked
 13085  000E80  2BB8               	incf	actuatorTest@i_1777& (0+255),f,b
 13086  000E82  D7EF               	goto	l8228
 13087  000E84                     l8236:
 13088                           
 13089                           ; BSR set to: 0
 13090  000E84  0E00               	movlw	0
 13091  000E86  0100               	movlb	0	; () banked
 13092  000E88  6FB9               	movwf	actuatorTest@i_1778& (0+255),b
 13093  000E8A                     l8238:
 13094                           
 13095                           ; BSR set to: 0
 13096  000E8A  0E63               	movlw	99
 13097  000E8C  0100               	movlb	0	; () banked
 13098  000E8E  65B9               	cpfsgt	actuatorTest@i_1778& (0+255),b
 13099  000E90  D001               	goto	l8242
 13100  000E92  D00C               	goto	l1295
 13101  000E94                     l8242:
 13102                           
 13103                           ; BSR set to: 0
 13104  000E94  0E68               	movlw	104
 13105  000E96  0100               	movlb	0	; () banked
 13106  000E98  6FAB               	movwf	??_actuatorTest& (0+255),b
 13107  000E9A  0EE4               	movlw	228
 13108  000E9C                     u10297:
 13109  000E9C  2EE8               	decfsz	wreg,f,c
 13110  000E9E  D7FE               	bra	u10297
 13111  000EA0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13112  000EA2  D7FC               	bra	u10297
 13113  000EA4  F000               	nop	
 13114  000EA6  0100               	movlb	0	; () banked
 13115  000EA8  2BB9               	incf	actuatorTest@i_1778& (0+255),f,b
 13116  000EAA  D7EF               	goto	l8238
 13117  000EAC                     l1295:
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;Test.c: 300: TMR1ON = 0;
 13121  000EAC  90CD               	bcf	4045,0,c	;volatile
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;Test.c: 307: printf("TST: TILT SERVO");
 13125  000EAE  0E44               	movlw	low STR_103
 13126  000EB0  0100               	movlb	0	; () banked
 13127  000EB2  6F8E               	movwf	printf@f& (0+255),b
 13128  000EB4  0EFE               	movlw	high STR_103
 13129  000EB6  0100               	movlb	0	; () banked
 13130  000EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13131  000EBA  EC87  F00B         	call	_printf	;wreg free
 13132                           
 13133                           ;Test.c: 308: lcdInst(0b11000000);;
 13134  000EBE  0EC0               	movlw	192
 13135  000EC0  ECA6  F02B         	call	_lcdInst
 13136                           
 13137                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 13138  000EC4  0EAE               	movlw	low STR_104
 13139  000EC6  0100               	movlb	0	; () banked
 13140  000EC8  6F8E               	movwf	printf@f& (0+255),b
 13141  000ECA  0EFB               	movlw	high STR_104
 13142  000ECC  0100               	movlb	0	; () banked
 13143  000ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13144  000ED0  EC87  F00B         	call	_printf	;wreg free
 13145                           
 13146                           ;Test.c: 310: updateServoPosition(1050, 3);
 13147  000ED4  0E04               	movlw	4
 13148  000ED6  0100               	movlb	0	; () banked
 13149  000ED8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13150  000EDA  0E1A               	movlw	26
 13151  000EDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13152  000EDE  0E00               	movlw	0
 13153  000EE0  0100               	movlb	0	; () banked
 13154  000EE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13155  000EE4  0E03               	movlw	3
 13156  000EE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13157  000EE8  ECD2  F024         	call	_updateServoPosition	;wreg free
 13158                           
 13159                           ;Test.c: 311: TMR3ON = 1;
 13160  000EEC  80B1               	bsf	4017,0,c	;volatile
 13161                           
 13162                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13163  000EEE  0E00               	movlw	0
 13164  000EF0  0100               	movlb	0	; () banked
 13165  000EF2  6FBA               	movwf	actuatorTest@i_1781& (0+255),b
 13166  000EF4                     l8256:
 13167                           
 13168                           ; BSR set to: 0
 13169  000EF4  0E63               	movlw	99
 13170  000EF6  0100               	movlb	0	; () banked
 13171  000EF8  65BA               	cpfsgt	actuatorTest@i_1781& (0+255),b
 13172  000EFA  D001               	goto	l8260
 13173  000EFC  D00C               	goto	l8264
 13174  000EFE                     l8260:
 13175                           
 13176                           ; BSR set to: 0
 13177  000EFE  0E68               	movlw	104
 13178  000F00  0100               	movlb	0	; () banked
 13179  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 13180  000F04  0EE4               	movlw	228
 13181  000F06                     u10307:
 13182  000F06  2EE8               	decfsz	wreg,f,c
 13183  000F08  D7FE               	bra	u10307
 13184  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13185  000F0C  D7FC               	bra	u10307
 13186  000F0E  F000               	nop	
 13187  000F10  0100               	movlb	0	; () banked
 13188  000F12  2BBA               	incf	actuatorTest@i_1781& (0+255),f,b
 13189  000F14  D7EF               	goto	l8256
 13190  000F16                     l8264:
 13191                           
 13192                           ; BSR set to: 0
 13193  000F16  0E00               	movlw	0
 13194  000F18  0100               	movlb	0	; () banked
 13195  000F1A  6FBB               	movwf	actuatorTest@i_1782& (0+255),b
 13196  000F1C                     l8266:
 13197                           
 13198                           ; BSR set to: 0
 13199  000F1C  0E63               	movlw	99
 13200  000F1E  0100               	movlb	0	; () banked
 13201  000F20  65BB               	cpfsgt	actuatorTest@i_1782& (0+255),b
 13202  000F22  D001               	goto	l8270
 13203  000F24  D00C               	goto	l8274
 13204  000F26                     l8270:
 13205                           
 13206                           ; BSR set to: 0
 13207  000F26  0E68               	movlw	104
 13208  000F28  0100               	movlb	0	; () banked
 13209  000F2A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13210  000F2C  0EE4               	movlw	228
 13211  000F2E                     u10317:
 13212  000F2E  2EE8               	decfsz	wreg,f,c
 13213  000F30  D7FE               	bra	u10317
 13214  000F32  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13215  000F34  D7FC               	bra	u10317
 13216  000F36  F000               	nop	
 13217  000F38  0100               	movlb	0	; () banked
 13218  000F3A  2BBB               	incf	actuatorTest@i_1782& (0+255),f,b
 13219  000F3C  D7EF               	goto	l8266
 13220  000F3E                     l8274:
 13221                           
 13222                           ; BSR set to: 0
 13223                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13224  000F3E  0E80               	movlw	128
 13225  000F40  ECA6  F02B         	call	_lcdInst
 13226  000F44  0EC0               	movlw	192
 13227  000F46  ECA6  F02B         	call	_lcdInst
 13228                           
 13229                           ;Test.c: 315: printf("DROP -- 2s      ");
 13230  000F4A  0E8C               	movlw	low STR_105
 13231  000F4C  0100               	movlb	0	; () banked
 13232  000F4E  6F8E               	movwf	printf@f& (0+255),b
 13233  000F50  0EFB               	movlw	high STR_105
 13234  000F52  0100               	movlb	0	; () banked
 13235  000F54  6F8F               	movwf	(printf@f+1)& (0+255),b
 13236  000F56  EC87  F00B         	call	_printf	;wreg free
 13237                           
 13238                           ;Test.c: 316: updateServoPosition(1260, 3);
 13239  000F5A  0E04               	movlw	4
 13240  000F5C  0100               	movlb	0	; () banked
 13241  000F5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13242  000F60  0EEC               	movlw	236
 13243  000F62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13244  000F64  0E00               	movlw	0
 13245  000F66  0100               	movlb	0	; () banked
 13246  000F68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13247  000F6A  0E03               	movlw	3
 13248  000F6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13249  000F6E  ECD2  F024         	call	_updateServoPosition	;wreg free
 13250                           
 13251                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13252  000F72  0E00               	movlw	0
 13253  000F74  0100               	movlb	0	; () banked
 13254  000F76  6FBC               	movwf	actuatorTest@i_1784& (0+255),b
 13255  000F78                     l8282:
 13256                           
 13257                           ; BSR set to: 0
 13258  000F78  0E63               	movlw	99
 13259  000F7A  0100               	movlb	0	; () banked
 13260  000F7C  65BC               	cpfsgt	actuatorTest@i_1784& (0+255),b
 13261  000F7E  D001               	goto	l8286
 13262  000F80  D00C               	goto	l8290
 13263  000F82                     l8286:
 13264                           
 13265                           ; BSR set to: 0
 13266  000F82  0E68               	movlw	104
 13267  000F84  0100               	movlb	0	; () banked
 13268  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 13269  000F88  0EE4               	movlw	228
 13270  000F8A                     u10327:
 13271  000F8A  2EE8               	decfsz	wreg,f,c
 13272  000F8C  D7FE               	bra	u10327
 13273  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13274  000F90  D7FC               	bra	u10327
 13275  000F92  F000               	nop	
 13276  000F94  0100               	movlb	0	; () banked
 13277  000F96  2BBC               	incf	actuatorTest@i_1784& (0+255),f,b
 13278  000F98  D7EF               	goto	l8282
 13279  000F9A                     l8290:
 13280                           
 13281                           ; BSR set to: 0
 13282  000F9A  0E00               	movlw	0
 13283  000F9C  0100               	movlb	0	; () banked
 13284  000F9E  6FBD               	movwf	actuatorTest@i_1785& (0+255),b
 13285  000FA0                     l8292:
 13286                           
 13287                           ; BSR set to: 0
 13288  000FA0  0E63               	movlw	99
 13289  000FA2  0100               	movlb	0	; () banked
 13290  000FA4  65BD               	cpfsgt	actuatorTest@i_1785& (0+255),b
 13291  000FA6  D001               	goto	l8296
 13292  000FA8  D00C               	goto	l8300
 13293  000FAA                     l8296:
 13294                           
 13295                           ; BSR set to: 0
 13296  000FAA  0E68               	movlw	104
 13297  000FAC  0100               	movlb	0	; () banked
 13298  000FAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13299  000FB0  0EE4               	movlw	228
 13300  000FB2                     u10337:
 13301  000FB2  2EE8               	decfsz	wreg,f,c
 13302  000FB4  D7FE               	bra	u10337
 13303  000FB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13304  000FB8  D7FC               	bra	u10337
 13305  000FBA  F000               	nop	
 13306  000FBC  0100               	movlb	0	; () banked
 13307  000FBE  2BBD               	incf	actuatorTest@i_1785& (0+255),f,b
 13308  000FC0  D7EF               	goto	l8292
 13309  000FC2                     l8300:
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13313  000FC2  0E80               	movlw	128
 13314  000FC4  ECA6  F02B         	call	_lcdInst
 13315  000FC8  0EC0               	movlw	192
 13316  000FCA  ECA6  F02B         	call	_lcdInst
 13317                           
 13318                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 13319  000FCE  0EAE               	movlw	low STR_104
 13320  000FD0  0100               	movlb	0	; () banked
 13321  000FD2  6F8E               	movwf	printf@f& (0+255),b
 13322  000FD4  0EFB               	movlw	high STR_104
 13323  000FD6  0100               	movlb	0	; () banked
 13324  000FD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13325  000FDA  EC87  F00B         	call	_printf	;wreg free
 13326                           
 13327                           ;Test.c: 321: updateServoPosition(1050, 3);
 13328  000FDE  0E04               	movlw	4
 13329  000FE0  0100               	movlb	0	; () banked
 13330  000FE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13331  000FE4  0E1A               	movlw	26
 13332  000FE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13333  000FE8  0E00               	movlw	0
 13334  000FEA  0100               	movlb	0	; () banked
 13335  000FEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13336  000FEE  0E03               	movlw	3
 13337  000FF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13338  000FF2  ECD2  F024         	call	_updateServoPosition	;wreg free
 13339                           
 13340                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13341  000FF6  0E00               	movlw	0
 13342  000FF8  0100               	movlb	0	; () banked
 13343  000FFA  6FBE               	movwf	actuatorTest@i_1787& (0+255),b
 13344  000FFC                     l8308:
 13345                           
 13346                           ; BSR set to: 0
 13347  000FFC  0E63               	movlw	99
 13348  000FFE  0100               	movlb	0	; () banked
 13349  001000  65BE               	cpfsgt	actuatorTest@i_1787& (0+255),b
 13350  001002  D001               	goto	l8312
 13351  001004  D00C               	goto	l8316
 13352  001006                     l8312:
 13353                           
 13354                           ; BSR set to: 0
 13355  001006  0E68               	movlw	104
 13356  001008  0100               	movlb	0	; () banked
 13357  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13358  00100C  0EE4               	movlw	228
 13359  00100E                     u10347:
 13360  00100E  2EE8               	decfsz	wreg,f,c
 13361  001010  D7FE               	bra	u10347
 13362  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13363  001014  D7FC               	bra	u10347
 13364  001016  F000               	nop	
 13365  001018  0100               	movlb	0	; () banked
 13366  00101A  2BBE               	incf	actuatorTest@i_1787& (0+255),f,b
 13367  00101C  D7EF               	goto	l8308
 13368  00101E                     l8316:
 13369                           
 13370                           ; BSR set to: 0
 13371  00101E  0E00               	movlw	0
 13372  001020  0100               	movlb	0	; () banked
 13373  001022  6FBF               	movwf	actuatorTest@i_1788& (0+255),b
 13374  001024                     l8318:
 13375                           
 13376                           ; BSR set to: 0
 13377  001024  0E63               	movlw	99
 13378  001026  0100               	movlb	0	; () banked
 13379  001028  65BF               	cpfsgt	actuatorTest@i_1788& (0+255),b
 13380  00102A  D001               	goto	l8322
 13381  00102C  D00C               	goto	l1307
 13382  00102E                     l8322:
 13383                           
 13384                           ; BSR set to: 0
 13385  00102E  0E68               	movlw	104
 13386  001030  0100               	movlb	0	; () banked
 13387  001032  6FAB               	movwf	??_actuatorTest& (0+255),b
 13388  001034  0EE4               	movlw	228
 13389  001036                     u10357:
 13390  001036  2EE8               	decfsz	wreg,f,c
 13391  001038  D7FE               	bra	u10357
 13392  00103A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13393  00103C  D7FC               	bra	u10357
 13394  00103E  F000               	nop	
 13395  001040  0100               	movlb	0	; () banked
 13396  001042  2BBF               	incf	actuatorTest@i_1788& (0+255),f,b
 13397  001044  D7EF               	goto	l8318
 13398  001046                     l1307:
 13399                           
 13400                           ; BSR set to: 0
 13401                           ;Test.c: 323: TMR3ON = 0;
 13402  001046  90B1               	bcf	4017,0,c	;volatile
 13403                           
 13404                           ;Test.c: 324: (INTCONbits.GIE = 0);
 13405  001048  9EF2               	bcf	intcon,7,c	;volatile
 13406                           
 13407                           ; BSR set to: 0
 13408                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13409  00104A  0E01               	movlw	1
 13410  00104C  ECA6  F02B         	call	_lcdInst
 13411  001050  0E68               	movlw	104
 13412  001052  0100               	movlb	0	; () banked
 13413  001054  6FAB               	movwf	??_actuatorTest& (0+255),b
 13414  001056  0EE4               	movlw	228
 13415  001058                     u10367:
 13416  001058  2EE8               	decfsz	wreg,f,c
 13417  00105A  D7FE               	bra	u10367
 13418  00105C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13419  00105E  D7FC               	bra	u10367
 13420  001060  F000               	nop	
 13421  001062  0E80               	movlw	128
 13422  001064  ECA6  F02B         	call	_lcdInst
 13423                           
 13424                           ;Test.c: 330: printf("TST: CAM SERVO");
 13425  001068  0EA0               	movlw	low STR_107
 13426  00106A  0100               	movlb	0	; () banked
 13427  00106C  6F8E               	movwf	printf@f& (0+255),b
 13428  00106E  0EFE               	movlw	high STR_107
 13429  001070  0100               	movlb	0	; () banked
 13430  001072  6F8F               	movwf	(printf@f+1)& (0+255),b
 13431  001074  EC87  F00B         	call	_printf	;wreg free
 13432                           
 13433                           ;Test.c: 331: lcdInst(0b11000000);;
 13434  001078  0EC0               	movlw	192
 13435  00107A  ECA6  F02B         	call	_lcdInst
 13436                           
 13437                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 13438  00107E  0E82               	movlw	low STR_108
 13439  001080  0100               	movlb	0	; () banked
 13440  001082  6F8E               	movwf	printf@f& (0+255),b
 13441  001084  0EFE               	movlw	high STR_108
 13442  001086  0100               	movlb	0	; () banked
 13443  001088  6F8F               	movwf	(printf@f+1)& (0+255),b
 13444  00108A  EC87  F00B         	call	_printf	;wreg free
 13445                           
 13446                           ;Test.c: 333: LATCbits.LATC0 = 1;
 13447  00108E  808B               	bsf	3979,0,c	;volatile
 13448                           
 13449                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13450  001090  0E00               	movlw	0
 13451  001092  0100               	movlb	0	; () banked
 13452  001094  6FC0               	movwf	actuatorTest@i_1791& (0+255),b
 13453  001096                     l8342:
 13454                           
 13455                           ; BSR set to: 0
 13456  001096  0E63               	movlw	99
 13457  001098  0100               	movlb	0	; () banked
 13458  00109A  65C0               	cpfsgt	actuatorTest@i_1791& (0+255),b
 13459  00109C  D001               	goto	l8346
 13460  00109E  D00C               	goto	l8350
 13461  0010A0                     l8346:
 13462                           
 13463                           ; BSR set to: 0
 13464  0010A0  0E68               	movlw	104
 13465  0010A2  0100               	movlb	0	; () banked
 13466  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 13467  0010A6  0EE4               	movlw	228
 13468  0010A8                     u10377:
 13469  0010A8  2EE8               	decfsz	wreg,f,c
 13470  0010AA  D7FE               	bra	u10377
 13471  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13472  0010AE  D7FC               	bra	u10377
 13473  0010B0  F000               	nop	
 13474  0010B2  0100               	movlb	0	; () banked
 13475  0010B4  2BC0               	incf	actuatorTest@i_1791& (0+255),f,b
 13476  0010B6  D7EF               	goto	l8342
 13477  0010B8                     l8350:
 13478                           
 13479                           ; BSR set to: 0
 13480  0010B8  0E00               	movlw	0
 13481  0010BA  0100               	movlb	0	; () banked
 13482  0010BC  6FC1               	movwf	actuatorTest@i_1792& (0+255),b
 13483  0010BE                     l8352:
 13484                           
 13485                           ; BSR set to: 0
 13486  0010BE  0E63               	movlw	99
 13487  0010C0  0100               	movlb	0	; () banked
 13488  0010C2  65C1               	cpfsgt	actuatorTest@i_1792& (0+255),b
 13489  0010C4  D001               	goto	l8356
 13490  0010C6  D00C               	goto	l8360
 13491  0010C8                     l8356:
 13492                           
 13493                           ; BSR set to: 0
 13494  0010C8  0E68               	movlw	104
 13495  0010CA  0100               	movlb	0	; () banked
 13496  0010CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13497  0010CE  0EE4               	movlw	228
 13498  0010D0                     u10387:
 13499  0010D0  2EE8               	decfsz	wreg,f,c
 13500  0010D2  D7FE               	bra	u10387
 13501  0010D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13502  0010D6  D7FC               	bra	u10387
 13503  0010D8  F000               	nop	
 13504  0010DA  0100               	movlb	0	; () banked
 13505  0010DC  2BC1               	incf	actuatorTest@i_1792& (0+255),f,b
 13506  0010DE  D7EF               	goto	l8352
 13507  0010E0                     l8360:
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13511  0010E0  0E80               	movlw	128
 13512  0010E2  ECA6  F02B         	call	_lcdInst
 13513  0010E6  0EC0               	movlw	192
 13514  0010E8  ECA6  F02B         	call	_lcdInst
 13515                           
 13516                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 13517  0010EC  0E73               	movlw	low STR_109
 13518  0010EE  0100               	movlb	0	; () banked
 13519  0010F0  6F8E               	movwf	printf@f& (0+255),b
 13520  0010F2  0EFE               	movlw	high STR_109
 13521  0010F4  0100               	movlb	0	; () banked
 13522  0010F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13523  0010F8  EC87  F00B         	call	_printf	;wreg free
 13524                           
 13525                           ;Test.c: 339: for(i=0;i<10000;i++)
 13526  0010FC  0E00               	movlw	0
 13527  0010FE  0100               	movlb	0	; () banked
 13528  001100  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13529  001102  0E00               	movlw	0
 13530  001104  6FC4               	movwf	actuatorTest@i& (0+255),b
 13531  001106                     l8366:
 13532                           
 13533                           ; BSR set to: 0
 13534  001106  0100               	movlb	0	; () banked
 13535  001108  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13536  00110A  D008               	goto	l1312
 13537  00110C  0E10               	movlw	16
 13538  00110E  0100               	movlb	0	; () banked
 13539  001110  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13540  001112  0E27               	movlw	39
 13541  001114  0100               	movlb	0	; () banked
 13542  001116  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13543  001118  B0D8               	btfsc	status,0,c
 13544  00111A  D00D               	goto	l8376
 13545  00111C                     l1312:
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;Test.c: 340: {
 13549                           ;Test.c: 341: LATCbits.LATC0 = 1;
 13550  00111C  808B               	bsf	3979,0,c	;volatile
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13554  00111E  0E1A               	movlw	26
 13555  001120                     u10397:
 13556  001120  2EE8               	decfsz	wreg,f,c
 13557  001122  D7FE               	bra	u10397
 13558  001124  D000               	nop2	
 13559                           
 13560                           ;Test.c: 343: LATCbits.LATC0 = 0;
 13561  001126  908B               	bcf	3979,0,c	;volatile
 13562                           
 13563                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13564  001128  0EF0               	movlw	240
 13565  00112A                     u10407:
 13566  00112A  2EE8               	decfsz	wreg,f,c
 13567  00112C  D7FE               	bra	u10407
 13568  00112E  0100               	movlb	0	; () banked
 13569  001130  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13570  001132  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13571  001134  D7E8               	goto	l8366
 13572  001136                     l8376:
 13573                           
 13574                           ; BSR set to: 0
 13575                           ;Test.c: 345: }
 13576                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13577  001136  0E00               	movlw	0
 13578  001138  0100               	movlb	0	; () banked
 13579  00113A  6FC2               	movwf	actuatorTest@i_1794& (0+255),b
 13580  00113C                     l8378:
 13581                           
 13582                           ; BSR set to: 0
 13583  00113C  0E63               	movlw	99
 13584  00113E  0100               	movlb	0	; () banked
 13585  001140  65C2               	cpfsgt	actuatorTest@i_1794& (0+255),b
 13586  001142  D001               	goto	l8382
 13587  001144  D00C               	goto	l8386
 13588  001146                     l8382:
 13589                           
 13590                           ; BSR set to: 0
 13591  001146  0E68               	movlw	104
 13592  001148  0100               	movlb	0	; () banked
 13593  00114A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13594  00114C  0EE4               	movlw	228
 13595  00114E                     u10417:
 13596  00114E  2EE8               	decfsz	wreg,f,c
 13597  001150  D7FE               	bra	u10417
 13598  001152  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13599  001154  D7FC               	bra	u10417
 13600  001156  F000               	nop	
 13601  001158  0100               	movlb	0	; () banked
 13602  00115A  2BC2               	incf	actuatorTest@i_1794& (0+255),f,b
 13603  00115C  D7EF               	goto	l8378
 13604  00115E                     l8386:
 13605                           
 13606                           ; BSR set to: 0
 13607  00115E  0E00               	movlw	0
 13608  001160  0100               	movlb	0	; () banked
 13609  001162  6FC3               	movwf	actuatorTest@i_1795& (0+255),b
 13610  001164                     l8388:
 13611                           
 13612                           ; BSR set to: 0
 13613  001164  0E63               	movlw	99
 13614  001166  0100               	movlb	0	; () banked
 13615  001168  65C3               	cpfsgt	actuatorTest@i_1795& (0+255),b
 13616  00116A  D001               	goto	l8392
 13617  00116C  D00C               	goto	l8396
 13618  00116E                     l8392:
 13619                           
 13620                           ; BSR set to: 0
 13621  00116E  0E68               	movlw	104
 13622  001170  0100               	movlb	0	; () banked
 13623  001172  6FAB               	movwf	??_actuatorTest& (0+255),b
 13624  001174  0EE4               	movlw	228
 13625  001176                     u10427:
 13626  001176  2EE8               	decfsz	wreg,f,c
 13627  001178  D7FE               	bra	u10427
 13628  00117A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13629  00117C  D7FC               	bra	u10427
 13630  00117E  F000               	nop	
 13631  001180  0100               	movlb	0	; () banked
 13632  001182  2BC3               	incf	actuatorTest@i_1795& (0+255),f,b
 13633  001184  D7EF               	goto	l8388
 13634  001186                     l8396:
 13635                           
 13636                           ; BSR set to: 0
 13637                           ;Test.c: 348: machine_state = Testing_state;
 13638  001186  0E03               	movlw	3
 13639  001188  0100               	movlb	0	; () banked
 13640  00118A  6FFC               	movwf	_machine_state& (0+255),b
 13641                           
 13642                           ; BSR set to: 0
 13643  00118C  0012               	return		;funcret
 13644  00118E                     __end_of_actuatorTest:
 13645                           	opt stack 0
 13646                           tblptru	equ	0xFF8
 13647                           tblptrh	equ	0xFF7
 13648                           tblptrl	equ	0xFF6
 13649                           tablat	equ	0xFF5
 13650                           prodh	equ	0xFF4
 13651                           prodl	equ	0xFF3
 13652                           intcon	equ	0xFF2
 13653                           intcon2	equ	0xFF1
 13654                           intcon3	equ	0xFF0
 13655                           postinc0	equ	0xFEE
 13656                           wreg	equ	0xFE8
 13657                           postdec1	equ	0xFE5
 13658                           fsr1l	equ	0xFE1
 13659                           indf2	equ	0xFDF
 13660                           postinc2	equ	0xFDE
 13661                           postdec2	equ	0xFDD
 13662                           fsr2h	equ	0xFDA
 13663                           fsr2l	equ	0xFD9
 13664                           status	equ	0xFD8
 13665                           
 13666 ;; *************** function _SpeedTest *****************
 13667 ;; Defined at:
 13668 ;;		line 559 in file "Test.c"
 13669 ;; Parameters:    Size  Location     Type
 13670 ;;		None
 13671 ;; Auto vars:     Size  Location     Type
 13672 ;;		None
 13673 ;; Return value:  Size  Location     Type
 13674 ;;                  1    wreg      void 
 13675 ;; Registers used:
 13676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13677 ;; Tracked objects:
 13678 ;;		On entry : 0/0
 13679 ;;		On exit  : 0/0
 13680 ;;		Unchanged: 0/0
 13681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13686 ;;Total ram usage:        1 bytes
 13687 ;; Hardware stack levels used:    1
 13688 ;; Hardware stack levels required when called:   10
 13689 ;; This function calls:
 13690 ;;		_lcdInst
 13691 ;;		_printf
 13692 ;; This function is called by:
 13693 ;;		_Test
 13694 ;; This function uses a non-reentrant model
 13695 ;;
 13696                           
 13697                           	psect	text41
 13698  004A2A                     __ptext41:
 13699                           	opt stack 0
 13700  004A2A                     _SpeedTest:
 13701                           	opt stack 19
 13702                           
 13703                           ;Test.c: 561: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13704                           
 13705                           ; BSR set to: 0
 13706                           ;incstack = 0
 13707  004A2A  0E01               	movlw	1
 13708  004A2C  ECA6  F02B         	call	_lcdInst
 13709  004A30  0E68               	movlw	104
 13710  004A32  0100               	movlb	0	; () banked
 13711  004A34  6FAB               	movwf	??_SpeedTest& (0+255),b
 13712  004A36  0EE4               	movlw	228
 13713  004A38                     u10437:
 13714  004A38  2EE8               	decfsz	wreg,f,c
 13715  004A3A  D7FE               	bra	u10437
 13716  004A3C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13717  004A3E  D7FC               	bra	u10437
 13718  004A40  F000               	nop	
 13719  004A42  0E80               	movlw	128
 13720  004A44  ECA6  F02B         	call	_lcdInst
 13721                           
 13722                           ;Test.c: 562: printf("S: D WILL RETURN ");
 13723  004A48  0E0F               	movlw	low STR_120
 13724  004A4A  0100               	movlb	0	; () banked
 13725  004A4C  6F8E               	movwf	printf@f& (0+255),b
 13726  004A4E  0EFB               	movlw	high STR_120
 13727  004A50  0100               	movlb	0	; () banked
 13728  004A52  6F8F               	movwf	(printf@f+1)& (0+255),b
 13729  004A54  EC87  F00B         	call	_printf	;wreg free
 13730                           
 13731                           ;Test.c: 563: lcdInst(0b11000000);;
 13732  004A58  0EC0               	movlw	192
 13733  004A5A  ECA6  F02B         	call	_lcdInst
 13734                           
 13735                           ;Test.c: 564: printf("OTHER SETS RA5   ");
 13736  004A5E  0EFD               	movlw	low STR_121
 13737  004A60  0100               	movlb	0	; () banked
 13738  004A62  6F8E               	movwf	printf@f& (0+255),b
 13739  004A64  0EFA               	movlw	high STR_121
 13740  004A66  0100               	movlb	0	; () banked
 13741  004A68  6F8F               	movwf	(printf@f+1)& (0+255),b
 13742  004A6A  EC87  F00B         	call	_printf	;wreg free
 13743  004A6E                     l1391:
 13744  004A6E  A281               	btfss	3969,1,c	;volatile
 13745  004A70  D7FE               	goto	l1391
 13746                           
 13747                           ;Test.c: 569: }
 13748                           ;Test.c: 570: if(PORTB >> 4 == 0b1111){
 13749  004A72  3881               	swapf	3969,w,c	;volatile
 13750  004A74  0B0F               	andlw	15
 13751  004A76  0A0F               	xorlw	15
 13752  004A78  B4D8               	btfsc	status,2,c
 13753  004A7A  0012               	return	
 13754  004A7C  D014               	goto	l8492
 13755  004A7E                     l1398:
 13756                           
 13757                           ;Test.c: 575: LATBbits.LATB2 = 1;
 13758  004A7E  848A               	bsf	3978,2,c	;volatile
 13759                           
 13760                           ;Test.c: 576: _delay((unsigned long)((5)*(32000000/4000.0)));
 13761  004A80  0E34               	movlw	52
 13762  004A82  0100               	movlb	0	; () banked
 13763  004A84  6FAB               	movwf	??_SpeedTest& (0+255),b
 13764  004A86  0EF1               	movlw	241
 13765  004A88                     u10447:
 13766  004A88  2EE8               	decfsz	wreg,f,c
 13767  004A8A  D7FE               	bra	u10447
 13768  004A8C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13769  004A8E  D7FC               	bra	u10447
 13770  004A90  D000               	nop2	
 13771                           
 13772                           ;Test.c: 577: LATBbits.LATB2 = 0;
 13773  004A92  948A               	bcf	3978,2,c	;volatile
 13774                           
 13775                           ;Test.c: 578: _delay((unsigned long)((5)*(32000000/4000.0)));
 13776  004A94  0E34               	movlw	52
 13777  004A96  0100               	movlb	0	; () banked
 13778  004A98  6FAB               	movwf	??_SpeedTest& (0+255),b
 13779  004A9A  0EF1               	movlw	241
 13780  004A9C                     u10457:
 13781  004A9C  2EE8               	decfsz	wreg,f,c
 13782  004A9E  D7FE               	bra	u10457
 13783  004AA0  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13784  004AA2  D7FC               	bra	u10457
 13785  004AA4  D000               	nop2	
 13786  004AA6                     l8492:
 13787  004AA6  B281               	btfsc	3969,1,c	;volatile
 13788  004AA8  D7EA               	goto	l1398
 13789                           
 13790                           ;Test.c: 581: }
 13791                           ;Test.c: 582: LATBbits.LATB2 = 0;
 13792  004AAA  948A               	bcf	3978,2,c	;volatile
 13793  004AAC  D7E0               	goto	l1391
 13794  004AAE                     __end_of_SpeedTest:
 13795                           	opt stack 0
 13796                           tblptru	equ	0xFF8
 13797                           tblptrh	equ	0xFF7
 13798                           tblptrl	equ	0xFF6
 13799                           tablat	equ	0xFF5
 13800                           prodh	equ	0xFF4
 13801                           prodl	equ	0xFF3
 13802                           intcon	equ	0xFF2
 13803                           intcon2	equ	0xFF1
 13804                           intcon3	equ	0xFF0
 13805                           postinc0	equ	0xFEE
 13806                           wreg	equ	0xFE8
 13807                           postdec1	equ	0xFE5
 13808                           fsr1l	equ	0xFE1
 13809                           indf2	equ	0xFDF
 13810                           postinc2	equ	0xFDE
 13811                           postdec2	equ	0xFDD
 13812                           fsr2h	equ	0xFDA
 13813                           fsr2l	equ	0xFD9
 13814                           status	equ	0xFD8
 13815                           
 13816 ;; *************** function _PortTestPusher *****************
 13817 ;; Defined at:
 13818 ;;		line 692 in file "Test.c"
 13819 ;; Parameters:    Size  Location     Type
 13820 ;;		None
 13821 ;; Auto vars:     Size  Location     Type
 13822 ;;		None
 13823 ;; Return value:  Size  Location     Type
 13824 ;;                  1    wreg      void 
 13825 ;; Registers used:
 13826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13827 ;; Tracked objects:
 13828 ;;		On entry : 0/0
 13829 ;;		On exit  : 0/0
 13830 ;;		Unchanged: 0/0
 13831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;Total ram usage:        1 bytes
 13837 ;; Hardware stack levels used:    1
 13838 ;; Hardware stack levels required when called:   10
 13839 ;; This function calls:
 13840 ;;		_lcdInst
 13841 ;;		_printf
 13842 ;; This function is called by:
 13843 ;;		_Test
 13844 ;; This function uses a non-reentrant model
 13845 ;;
 13846                           
 13847                           	psect	text42
 13848  004E84                     __ptext42:
 13849                           	opt stack 0
 13850  004E84                     _PortTestPusher:
 13851                           	opt stack 19
 13852                           
 13853                           ;Test.c: 693: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13854                           
 13855                           ;incstack = 0
 13856  004E84  0E01               	movlw	1
 13857  004E86  ECA6  F02B         	call	_lcdInst
 13858  004E8A  0E68               	movlw	104
 13859  004E8C  0100               	movlb	0	; () banked
 13860  004E8E  6FAB               	movwf	??_PortTestPusher& (0+255),b
 13861  004E90  0EE4               	movlw	228
 13862  004E92                     u10467:
 13863  004E92  2EE8               	decfsz	wreg,f,c
 13864  004E94  D7FE               	bra	u10467
 13865  004E96  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 13866  004E98  D7FC               	bra	u10467
 13867  004E9A  F000               	nop	
 13868  004E9C  0E80               	movlw	128
 13869  004E9E  ECA6  F02B         	call	_lcdInst
 13870                           
 13871                           ;Test.c: 694: printf("D WILL RETURN    ");
 13872  004EA2  0EEB               	movlw	low STR_111
 13873  004EA4  0100               	movlb	0	; () banked
 13874  004EA6  6F8E               	movwf	printf@f& (0+255),b
 13875  004EA8  0EFA               	movlw	high STR_111
 13876  004EAA  0100               	movlb	0	; () banked
 13877  004EAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13878  004EAE  EC87  F00B         	call	_printf	;wreg free
 13879                           
 13880                           ;Test.c: 695: lcdInst(0b11000000);;
 13881  004EB2  0EC0               	movlw	192
 13882  004EB4  ECA6  F02B         	call	_lcdInst
 13883                           
 13884                           ;Test.c: 696: printf("OTHER SETS PUSHER");
 13885  004EB8  0E33               	movlw	low STR_129
 13886  004EBA  0100               	movlb	0	; () banked
 13887  004EBC  6F8E               	movwf	printf@f& (0+255),b
 13888  004EBE  0EFB               	movlw	high STR_129
 13889  004EC0  0100               	movlb	0	; () banked
 13890  004EC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13891  004EC4  EC87  F00B         	call	_printf	;wreg free
 13892  004EC8                     l1452:
 13893  004EC8  A281               	btfss	3969,1,c	;volatile
 13894  004ECA  D7FE               	goto	l1452
 13895                           
 13896                           ;Test.c: 701: }
 13897                           ;Test.c: 702: if(PORTB >> 4 == 0b1111){
 13898  004ECC  3881               	swapf	3969,w,c	;volatile
 13899  004ECE  0B0F               	andlw	15
 13900  004ED0  0A0F               	xorlw	15
 13901  004ED2  B4D8               	btfsc	status,2,c
 13902  004ED4  0012               	return	
 13903                           
 13904                           ;Test.c: 705: else{
 13905                           ;Test.c: 706: LATAbits.LATA4 = 1;
 13906                           
 13907                           ;Test.c: 704: }
 13908                           
 13909                           ;Test.c: 703: break;
 13910  004ED6  8889               	bsf	3977,4,c	;volatile
 13911  004ED8                     l1458:
 13912  004ED8  B281               	btfsc	3969,1,c	;volatile
 13913  004EDA  D7FE               	goto	l1458
 13914                           
 13915                           ;Test.c: 709: }
 13916                           ;Test.c: 710: LATAbits.LATA4 = 0;
 13917  004EDC  9889               	bcf	3977,4,c	;volatile
 13918  004EDE  D7F4               	goto	l1452
 13919  004EE0                     __end_of_PortTestPusher:
 13920                           	opt stack 0
 13921                           tblptru	equ	0xFF8
 13922                           tblptrh	equ	0xFF7
 13923                           tblptrl	equ	0xFF6
 13924                           tablat	equ	0xFF5
 13925                           prodh	equ	0xFF4
 13926                           prodl	equ	0xFF3
 13927                           intcon	equ	0xFF2
 13928                           intcon2	equ	0xFF1
 13929                           intcon3	equ	0xFF0
 13930                           postinc0	equ	0xFEE
 13931                           wreg	equ	0xFE8
 13932                           postdec1	equ	0xFE5
 13933                           fsr1l	equ	0xFE1
 13934                           indf2	equ	0xFDF
 13935                           postinc2	equ	0xFDE
 13936                           postdec2	equ	0xFDD
 13937                           fsr2h	equ	0xFDA
 13938                           fsr2l	equ	0xFD9
 13939                           status	equ	0xFD8
 13940                           
 13941 ;; *************** function _PortTestDC *****************
 13942 ;; Defined at:
 13943 ;;		line 411 in file "Test.c"
 13944 ;; Parameters:    Size  Location     Type
 13945 ;;		None
 13946 ;; Auto vars:     Size  Location     Type
 13947 ;;		None
 13948 ;; Return value:  Size  Location     Type
 13949 ;;                  1    wreg      void 
 13950 ;; Registers used:
 13951 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13952 ;; Tracked objects:
 13953 ;;		On entry : 0/0
 13954 ;;		On exit  : 0/0
 13955 ;;		Unchanged: 0/0
 13956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13961 ;;Total ram usage:        1 bytes
 13962 ;; Hardware stack levels used:    1
 13963 ;; Hardware stack levels required when called:   10
 13964 ;; This function calls:
 13965 ;;		_lcdInst
 13966 ;;		_printf
 13967 ;; This function is called by:
 13968 ;;		_Test
 13969 ;; This function uses a non-reentrant model
 13970 ;;
 13971                           
 13972                           	psect	text43
 13973  004EE0                     __ptext43:
 13974                           	opt stack 0
 13975  004EE0                     _PortTestDC:
 13976                           	opt stack 19
 13977                           
 13978                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13979                           
 13980                           ;incstack = 0
 13981  004EE0  0E01               	movlw	1
 13982  004EE2  ECA6  F02B         	call	_lcdInst
 13983  004EE6  0E68               	movlw	104
 13984  004EE8  0100               	movlb	0	; () banked
 13985  004EEA  6FAB               	movwf	??_PortTestDC& (0+255),b
 13986  004EEC  0EE4               	movlw	228
 13987  004EEE                     u10477:
 13988  004EEE  2EE8               	decfsz	wreg,f,c
 13989  004EF0  D7FE               	bra	u10477
 13990  004EF2  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 13991  004EF4  D7FC               	bra	u10477
 13992  004EF6  F000               	nop	
 13993  004EF8  0E80               	movlw	128
 13994  004EFA  ECA6  F02B         	call	_lcdInst
 13995                           
 13996                           ;Test.c: 413: printf("D WILL RETURN    ");
 13997  004EFE  0EEB               	movlw	low STR_111
 13998  004F00  0100               	movlb	0	; () banked
 13999  004F02  6F8E               	movwf	printf@f& (0+255),b
 14000  004F04  0EFA               	movlw	high STR_111
 14001  004F06  0100               	movlb	0	; () banked
 14002  004F08  6F8F               	movwf	(printf@f+1)& (0+255),b
 14003  004F0A  EC87  F00B         	call	_printf	;wreg free
 14004                           
 14005                           ;Test.c: 414: lcdInst(0b11000000);;
 14006  004F0E  0EC0               	movlw	192
 14007  004F10  ECA6  F02B         	call	_lcdInst
 14008                           
 14009                           ;Test.c: 415: printf("OTHER SETS DC   ");
 14010  004F14  0EE1               	movlw	low STR_112
 14011  004F16  0100               	movlb	0	; () banked
 14012  004F18  6F8E               	movwf	printf@f& (0+255),b
 14013  004F1A  0EFB               	movlw	high STR_112
 14014  004F1C  0100               	movlb	0	; () banked
 14015  004F1E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14016  004F20  EC87  F00B         	call	_printf	;wreg free
 14017  004F24                     l1325:
 14018  004F24  A281               	btfss	3969,1,c	;volatile
 14019  004F26  D7FE               	goto	l1325
 14020                           
 14021                           ;Test.c: 420: }
 14022                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 14023  004F28  3881               	swapf	3969,w,c	;volatile
 14024  004F2A  0B0F               	andlw	15
 14025  004F2C  0A0F               	xorlw	15
 14026  004F2E  B4D8               	btfsc	status,2,c
 14027  004F30  0012               	return	
 14028                           
 14029                           ;Test.c: 424: else{
 14030                           ;Test.c: 425: LATBbits.LATB2 = 1;
 14031                           
 14032                           ;Test.c: 423: }
 14033                           
 14034                           ;Test.c: 422: break;
 14035  004F32  848A               	bsf	3978,2,c	;volatile
 14036  004F34                     l1331:
 14037  004F34  B281               	btfsc	3969,1,c	;volatile
 14038  004F36  D7FE               	goto	l1331
 14039                           
 14040                           ;Test.c: 428: }
 14041                           ;Test.c: 429: LATBbits.LATB2 = 0;
 14042  004F38  948A               	bcf	3978,2,c	;volatile
 14043  004F3A  D7F4               	goto	l1325
 14044  004F3C                     __end_of_PortTestDC:
 14045                           	opt stack 0
 14046                           tblptru	equ	0xFF8
 14047                           tblptrh	equ	0xFF7
 14048                           tblptrl	equ	0xFF6
 14049                           tablat	equ	0xFF5
 14050                           prodh	equ	0xFF4
 14051                           prodl	equ	0xFF3
 14052                           intcon	equ	0xFF2
 14053                           intcon2	equ	0xFF1
 14054                           intcon3	equ	0xFF0
 14055                           postinc0	equ	0xFEE
 14056                           wreg	equ	0xFE8
 14057                           postdec1	equ	0xFE5
 14058                           fsr1l	equ	0xFE1
 14059                           indf2	equ	0xFDF
 14060                           postinc2	equ	0xFDE
 14061                           postdec2	equ	0xFDD
 14062                           fsr2h	equ	0xFDA
 14063                           fsr2l	equ	0xFD9
 14064                           status	equ	0xFD8
 14065                           
 14066 ;; *************** function _PlatformTest *****************
 14067 ;; Defined at:
 14068 ;;		line 434 in file "Test.c"
 14069 ;; Parameters:    Size  Location     Type
 14070 ;;		None
 14071 ;; Auto vars:     Size  Location     Type
 14072 ;;  i               2   55[BANK0 ] int 
 14073 ;;  i               2   53[BANK0 ] int 
 14074 ;;  i               2   51[BANK0 ] int 
 14075 ;;  i               2   49[BANK0 ] int 
 14076 ;;  res             2   47[BANK0 ] int 
 14077 ;;  res             2   45[BANK0 ] int 
 14078 ;;  on              2   57[BANK0 ] int 
 14079 ;; Return value:  Size  Location     Type
 14080 ;;                  1    wreg      void 
 14081 ;; Registers used:
 14082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14083 ;; Tracked objects:
 14084 ;;		On entry : 0/0
 14085 ;;		On exit  : 0/0
 14086 ;;		Unchanged: 0/0
 14087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14089 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14090 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14091 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14092 ;;Total ram usage:       16 bytes
 14093 ;; Hardware stack levels used:    1
 14094 ;; Hardware stack levels required when called:   10
 14095 ;; This function calls:
 14096 ;;		_lcdInst
 14097 ;;		_printf
 14098 ;;		_readADC
 14099 ;;		_stopSignals
 14100 ;; This function is called by:
 14101 ;;		_Test
 14102 ;; This function uses a non-reentrant model
 14103 ;;
 14104                           
 14105                           	psect	text44
 14106  001F34                     __ptext44:
 14107                           	opt stack 0
 14108  001F34                     _PlatformTest:
 14109                           	opt stack 19
 14110                           
 14111                           ;Test.c: 435: LATCbits.LATC5 = 1;
 14112                           
 14113                           ;incstack = 0
 14114  001F34  8A8B               	bsf	3979,5,c	;volatile
 14115                           
 14116                           ;Test.c: 437: machine_state = Sorting_state;
 14117  001F36  0E01               	movlw	1
 14118  001F38  0100               	movlb	0	; () banked
 14119  001F3A  6FFC               	movwf	_machine_state& (0+255),b
 14120                           
 14121                           ;Test.c: 438: f_arm_position = 0;
 14122  001F3C  0E00               	movlw	0
 14123  001F3E  0100               	movlb	0	; () banked
 14124  001F40  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14125  001F42  0E00               	movlw	0
 14126  001F44  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14127                           
 14128                           ;Test.c: 439: timer2_counter = 0;
 14129  001F46  0E00               	movlw	0
 14130  001F48  6E74               	movwf	_timer2_counter+1,c	;volatile
 14131  001F4A  0E00               	movlw	0
 14132  001F4C  6E73               	movwf	_timer2_counter,c	;volatile
 14133                           
 14134                           ; BSR set to: 0
 14135                           ;Test.c: 440: LATBbits.LATB3 = 0;
 14136  001F4E  968A               	bcf	3978,3,c	;volatile
 14137                           
 14138                           ; BSR set to: 0
 14139                           ;Test.c: 441: TMR2ON = 1;
 14140  001F50  84CA               	bsf	4042,2,c	;volatile
 14141                           
 14142                           ;Test.c: 442: was_low_2 = 0;
 14143  001F52  0E00               	movlw	0
 14144  001F54  6E7A               	movwf	_was_low_2+1,c	;volatile
 14145  001F56  0E00               	movlw	0
 14146  001F58  6E79               	movwf	_was_low_2,c	;volatile
 14147                           
 14148                           ;Test.c: 444: int on = 1;
 14149  001F5A  0E00               	movlw	0
 14150  001F5C  0100               	movlb	0	; () banked
 14151  001F5E  6FBA               	movwf	(PlatformTest@on+1)& (0+255),b
 14152  001F60  0E01               	movlw	1
 14153  001F62  6FB9               	movwf	PlatformTest@on& (0+255),b
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14157  001F64  0E01               	movlw	1
 14158  001F66  ECA6  F02B         	call	_lcdInst
 14159  001F6A  0E68               	movlw	104
 14160  001F6C  0100               	movlb	0	; () banked
 14161  001F6E  6FAB               	movwf	??_PlatformTest& (0+255),b
 14162  001F70  0EE4               	movlw	228
 14163  001F72                     u10487:
 14164  001F72  2EE8               	decfsz	wreg,f,c
 14165  001F74  D7FE               	bra	u10487
 14166  001F76  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14167  001F78  D7FC               	bra	u10487
 14168  001F7A  F000               	nop	
 14169  001F7C  0E80               	movlw	128
 14170  001F7E  ECA6  F02B         	call	_lcdInst
 14171                           
 14172                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 14173  001F82  0E14               	movlw	low STR_113
 14174  001F84  0100               	movlb	0	; () banked
 14175  001F86  6F8E               	movwf	printf@f& (0+255),b
 14176  001F88  0EFC               	movlw	high STR_113
 14177  001F8A  0100               	movlb	0	; () banked
 14178  001F8C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14179  001F8E  EC87  F00B         	call	_printf	;wreg free
 14180                           
 14181                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 14182  001F92  D058               	goto	l8546
 14183  001F94                     l8528:
 14184                           
 14185                           ;Test.c: 449: readADC(0);
 14186  001F94  0E00               	movlw	0
 14187  001F96  EC9C  F02A         	call	_readADC
 14188                           
 14189                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 14190  001F9A  50C3               	movf	4035,w,c	;volatile
 14191  001F9C  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14192  001FA0  0100               	movlb	0	; () banked
 14193  001FA2  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14194  001FA4  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14195  001FA8  0100               	movlb	0	; () banked
 14196  001FAA  6BAB               	clrf	??_PlatformTest& (0+255),b
 14197  001FAC  0100               	movlb	0	; () banked
 14198  001FAE  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14199  001FB0  0100               	movlb	0	; () banked
 14200  001FB2  6FAD               	movwf	PlatformTest@res& (0+255),b
 14201  001FB4  0100               	movlb	0	; () banked
 14202  001FB6  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14203  001FB8  0100               	movlb	0	; () banked
 14204  001FBA  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 14205                           
 14206                           ; BSR set to: 0
 14207                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 14208  001FBC  0100               	movlb	0	; () banked
 14209  001FBE  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 14210  001FC0  D00A               	goto	u7310
 14211  001FC2  0E21               	movlw	33
 14212  001FC4  0100               	movlb	0	; () banked
 14213  001FC6  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 14214  001FC8  0E03               	movlw	3
 14215  001FCA  0100               	movlb	0	; () banked
 14216  001FCC  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 14217  001FCE  A0D8               	btfss	status,0,c
 14218  001FD0  D002               	goto	u7310
 14219  001FD2  0E01               	movlw	1
 14220  001FD4  D001               	goto	u7320
 14221  001FD6                     u7310:
 14222  001FD6  0E00               	movlw	0
 14223  001FD8                     u7320:
 14224  001FD8  0100               	movlb	0	; () banked
 14225  001FDA  6FE6               	movwf	_IR_signal& (0+255),b
 14226  001FDC  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14227                           
 14228                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14229  001FDE  0E01               	movlw	1
 14230  001FE0  ECA6  F02B         	call	_lcdInst
 14231  001FE4  0E68               	movlw	104
 14232  001FE6  0100               	movlb	0	; () banked
 14233  001FE8  6FAB               	movwf	??_PlatformTest& (0+255),b
 14234  001FEA  0EE4               	movlw	228
 14235  001FEC                     u10497:
 14236  001FEC  2EE8               	decfsz	wreg,f,c
 14237  001FEE  D7FE               	bra	u10497
 14238  001FF0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14239  001FF2  D7FC               	bra	u10497
 14240  001FF4  F000               	nop	
 14241  001FF6  0E80               	movlw	128
 14242  001FF8  ECA6  F02B         	call	_lcdInst
 14243                           
 14244                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 14245  001FFC  0E14               	movlw	low STR_113
 14246  001FFE  0100               	movlb	0	; () banked
 14247  002000  6F8E               	movwf	printf@f& (0+255),b
 14248  002002  0EFC               	movlw	high STR_113
 14249  002004  0100               	movlb	0	; () banked
 14250  002006  6F8F               	movwf	(printf@f+1)& (0+255),b
 14251  002008  EC87  F00B         	call	_printf	;wreg free
 14252                           
 14253                           ;Test.c: 455: lcdInst(0b11000000);;
 14254  00200C  0EC0               	movlw	192
 14255  00200E  ECA6  F02B         	call	_lcdInst
 14256                           
 14257                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 14258  002012  0E03               	movlw	low STR_115
 14259  002014  0100               	movlb	0	; () banked
 14260  002016  6F8E               	movwf	printf@f& (0+255),b
 14261  002018  0EFC               	movlw	high STR_115
 14262  00201A  0100               	movlb	0	; () banked
 14263  00201C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14264  00201E  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 14265  002022  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 14266  002026  EC87  F00B         	call	_printf	;wreg free
 14267                           
 14268                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 14269  00202A  0E05               	movlw	5
 14270  00202C  0100               	movlb	0	; () banked
 14271  00202E  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14272  002030  0E0F               	movlw	15
 14273  002032  0100               	movlb	0	; () banked
 14274  002034  6FAB               	movwf	??_PlatformTest& (0+255),b
 14275  002036  0EF1               	movlw	241
 14276  002038                     u10507:
 14277  002038  2EE8               	decfsz	wreg,f,c
 14278  00203A  D7FE               	bra	u10507
 14279  00203C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14280  00203E  D7FC               	bra	u10507
 14281  002040  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14282  002042  D7FA               	bra	u10507
 14283  002044                     l8546:
 14284  002044  B281               	btfsc	3969,1,c	;volatile
 14285  002046  D059               	goto	l8566
 14286  002048  D7A5               	goto	l8528
 14287  00204A                     l8548:
 14288                           
 14289                           ;Test.c: 462: readADC(0);
 14290  00204A  0E00               	movlw	0
 14291  00204C  EC9C  F02A         	call	_readADC
 14292                           
 14293                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 14294  002050  50C3               	movf	4035,w,c	;volatile
 14295  002052  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14296  002056  0100               	movlb	0	; () banked
 14297  002058  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14298  00205A  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14299  00205E  0100               	movlb	0	; () banked
 14300  002060  6BAB               	clrf	??_PlatformTest& (0+255),b
 14301  002062  0100               	movlb	0	; () banked
 14302  002064  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14303  002066  0100               	movlb	0	; () banked
 14304  002068  6FAF               	movwf	PlatformTest@res_1807& (0+255),b
 14305  00206A  0100               	movlb	0	; () banked
 14306  00206C  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14307  00206E  0100               	movlb	0	; () banked
 14308  002070  6FB0               	movwf	(PlatformTest@res_1807+1)& (0+255),b
 14309                           
 14310                           ; BSR set to: 0
 14311                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 14312  002072  0100               	movlb	0	; () banked
 14313  002074  BFB0               	btfsc	(PlatformTest@res_1807+1)& (0+255),7,b
 14314  002076  D00A               	goto	u7340
 14315  002078  0E21               	movlw	33
 14316  00207A  0100               	movlb	0	; () banked
 14317  00207C  5DAF               	subwf	PlatformTest@res_1807& (0+255),w,b
 14318  00207E  0E03               	movlw	3
 14319  002080  0100               	movlb	0	; () banked
 14320  002082  59B0               	subwfb	(PlatformTest@res_1807+1)& (0+255),w,b
 14321  002084  A0D8               	btfss	status,0,c
 14322  002086  D002               	goto	u7340
 14323  002088  0E01               	movlw	1
 14324  00208A  D001               	goto	u7350
 14325  00208C                     u7340:
 14326  00208C  0E00               	movlw	0
 14327  00208E                     u7350:
 14328  00208E  0100               	movlb	0	; () banked
 14329  002090  6FE6               	movwf	_IR_signal& (0+255),b
 14330  002092  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14331                           
 14332                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14333  002094  0E01               	movlw	1
 14334  002096  ECA6  F02B         	call	_lcdInst
 14335  00209A  0E68               	movlw	104
 14336  00209C  0100               	movlb	0	; () banked
 14337  00209E  6FAB               	movwf	??_PlatformTest& (0+255),b
 14338  0020A0  0EE4               	movlw	228
 14339  0020A2                     u10517:
 14340  0020A2  2EE8               	decfsz	wreg,f,c
 14341  0020A4  D7FE               	bra	u10517
 14342  0020A6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14343  0020A8  D7FC               	bra	u10517
 14344  0020AA  F000               	nop	
 14345  0020AC  0E80               	movlw	128
 14346  0020AE  ECA6  F02B         	call	_lcdInst
 14347                           
 14348                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 14349  0020B2  0E14               	movlw	low STR_113
 14350  0020B4  0100               	movlb	0	; () banked
 14351  0020B6  6F8E               	movwf	printf@f& (0+255),b
 14352  0020B8  0EFC               	movlw	high STR_113
 14353  0020BA  0100               	movlb	0	; () banked
 14354  0020BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14355  0020BE  EC87  F00B         	call	_printf	;wreg free
 14356                           
 14357                           ;Test.c: 468: lcdInst(0b11000000);;
 14358  0020C2  0EC0               	movlw	192
 14359  0020C4  ECA6  F02B         	call	_lcdInst
 14360                           
 14361                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 14362  0020C8  0E03               	movlw	low STR_115
 14363  0020CA  0100               	movlb	0	; () banked
 14364  0020CC  6F8E               	movwf	printf@f& (0+255),b
 14365  0020CE  0EFC               	movlw	high STR_115
 14366  0020D0  0100               	movlb	0	; () banked
 14367  0020D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14368  0020D4  C0AF  F090         	movff	PlatformTest@res_1807,?_printf+2
 14369  0020D8  C0B0  F091         	movff	PlatformTest@res_1807+1,?_printf+3
 14370  0020DC  EC87  F00B         	call	_printf	;wreg free
 14371                           
 14372                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 14373  0020E0  0E05               	movlw	5
 14374  0020E2  0100               	movlb	0	; () banked
 14375  0020E4  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14376  0020E6  0E0F               	movlw	15
 14377  0020E8  0100               	movlb	0	; () banked
 14378  0020EA  6FAB               	movwf	??_PlatformTest& (0+255),b
 14379  0020EC  0EF1               	movlw	241
 14380  0020EE                     u10527:
 14381  0020EE  2EE8               	decfsz	wreg,f,c
 14382  0020F0  D7FE               	bra	u10527
 14383  0020F2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14384  0020F4  D7FC               	bra	u10527
 14385  0020F6  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14386  0020F8  D7FA               	bra	u10527
 14387  0020FA                     l8566:
 14388  0020FA  A281               	btfss	3969,1,c	;volatile
 14389  0020FC  D7A6               	goto	l8548
 14390                           
 14391                           ;Test.c: 471: }
 14392                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 14393  0020FE  3881               	swapf	3969,w,c	;volatile
 14394  002100  0B0F               	andlw	15
 14395  002102  0A0F               	xorlw	15
 14396  002104  B4D8               	btfsc	status,2,c
 14397  002106  D0DE               	goto	l1346
 14398                           
 14399                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 14400                           
 14401                           ;Test.c: 474: }
 14402                           
 14403                           ;Test.c: 473: break;
 14404  002108  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 14405  00210C  0100               	movlb	0	; () banked
 14406  00210E  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 14407  002110  0E0F               	movlw	15
 14408  002112  17AB               	andwf	??_PlatformTest& (0+255),f,b
 14409  002114  A4D8               	btfss	status,2,c
 14410  002116  D012               	goto	l8578
 14411                           
 14412                           ; BSR set to: 0
 14413                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 14414  002118  B48A               	btfsc	3978,2,c	;volatile
 14415  00211A  D004               	goto	u7390
 14416  00211C  0100               	movlb	0	; () banked
 14417  00211E  6BAB               	clrf	??_PlatformTest& (0+255),b
 14418  002120  2BAB               	incf	??_PlatformTest& (0+255),f,b
 14419  002122  D002               	goto	u7408
 14420  002124                     u7390:
 14421  002124  0100               	movlb	0	; () banked
 14422  002126  6BAB               	clrf	??_PlatformTest& (0+255),b
 14423  002128                     u7408:
 14424  002128  0100               	movlb	0	; () banked
 14425  00212A  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14426  00212C  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14427  00212E  508A               	movf	3978,w,c	;volatile
 14428  002130  0100               	movlb	0	; () banked
 14429  002132  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14430  002134  0BFB               	andlw	-5
 14431  002136  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14432  002138  6E8A               	movwf	3978,c	;volatile
 14433                           
 14434                           ;Test.c: 477: }
 14435  00213A  D0C1               	goto	l1369
 14436  00213C                     l8578:
 14437                           
 14438                           ; BSR set to: 0
 14439                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 14440  00213C  3881               	swapf	3969,w,c	;volatile
 14441  00213E  0B0F               	andlw	15
 14442  002140  0A03               	xorlw	3
 14443  002142  A4D8               	btfss	status,2,c
 14444  002144  D020               	goto	l8590
 14445                           
 14446                           ; BSR set to: 0
 14447                           ;Test.c: 479: if(on){
 14448  002146  0100               	movlb	0	; () banked
 14449  002148  51B9               	movf	PlatformTest@on& (0+255),w,b
 14450  00214A  0100               	movlb	0	; () banked
 14451  00214C  11BA               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14452  00214E  B4D8               	btfsc	status,2,c
 14453  002150  D010               	goto	l8586
 14454                           
 14455                           ; BSR set to: 0
 14456                           ;Test.c: 480: f_arm_position = 1;
 14457  002152  0E00               	movlw	0
 14458  002154  0100               	movlb	0	; () banked
 14459  002156  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14460  002158  0E01               	movlw	1
 14461  00215A  D00F               	goto	L16
 14462  00215C                     l8584:
 14463                           
 14464                           ; BSR set to: 0
 14465                           ;Test.c: 481: on = !on;
 14466  00215C  0100               	movlb	0	; () banked
 14467  00215E  51B9               	movf	PlatformTest@on& (0+255),w,b
 14468  002160  0100               	movlb	0	; () banked
 14469  002162  11BA               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14470  002164  A4D8               	btfss	status,2,c
 14471  002166  D00D               	goto	u7450
 14472  002168  D00A               	goto	u7451
 14473  00216A                     u7440:
 14474  00216A  0100               	movlb	0	; () banked
 14475  00216C  6FB9               	movwf	PlatformTest@on& (0+255),b
 14476  00216E  6BBA               	clrf	(PlatformTest@on+1)& (0+255),b
 14477                           
 14478                           ;Test.c: 482: }
 14479  002170  D0A6               	goto	l1369
 14480  002172                     l8586:
 14481                           
 14482                           ; BSR set to: 0
 14483                           ;Test.c: 483: else{
 14484                           ;Test.c: 484: f_arm_position = 0;
 14485  002172  0E00               	movlw	0
 14486  002174  0100               	movlb	0	; () banked
 14487  002176  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14488  002178  0E00               	movlw	0
 14489  00217A                     L16:
 14490  00217A  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14491  00217C  D7EF               	goto	l8584
 14492  00217E                     u7451:
 14493  00217E  0E01               	movlw	1
 14494  002180  D7F4               	goto	u7440
 14495  002182                     u7450:
 14496  002182  0E00               	movlw	0
 14497  002184  D7F2               	goto	u7440
 14498  002186                     l8590:
 14499                           
 14500                           ; BSR set to: 0
 14501                           ;Test.c: 488: else if(PORTB >> 4 == 0b0100){
 14502  002186  3881               	swapf	3969,w,c	;volatile
 14503  002188  0B0F               	andlw	15
 14504  00218A  0A04               	xorlw	4
 14505  00218C  A4D8               	btfss	status,2,c
 14506  00218E  D01D               	goto	l8604
 14507                           
 14508                           ; BSR set to: 0
 14509                           ;Test.c: 490: for(int i = 0; i<3000; i++){
 14510  002190  0E00               	movlw	0
 14511  002192  0100               	movlb	0	; () banked
 14512  002194  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 14513  002196  0E00               	movlw	0
 14514  002198  6FB1               	movwf	PlatformTest@i& (0+255),b
 14515  00219A                     l8594:
 14516                           
 14517                           ; BSR set to: 0
 14518  00219A  0100               	movlb	0	; () banked
 14519  00219C  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 14520  00219E  D008               	goto	l1355
 14521  0021A0  0EB8               	movlw	184
 14522  0021A2  0100               	movlb	0	; () banked
 14523  0021A4  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 14524  0021A6  0E0B               	movlw	11
 14525  0021A8  0100               	movlb	0	; () banked
 14526  0021AA  59B2               	subwfb	(PlatformTest@i+1)& (0+255),w,b
 14527  0021AC  B0D8               	btfsc	status,0,c
 14528  0021AE  D087               	goto	l1369
 14529  0021B0                     l1355:
 14530                           
 14531                           ; BSR set to: 0
 14532                           ;Test.c: 491: LATAbits.LATA4 = 1;
 14533  0021B0  8889               	bsf	3977,4,c	;volatile
 14534                           
 14535                           ; BSR set to: 0
 14536                           ;Test.c: 492: _delay((unsigned long)((75)*(32000000/4000000.0)));
 14537  0021B2  0EC8               	movlw	200
 14538  0021B4                     u10537:
 14539  0021B4  2EE8               	decfsz	wreg,f,c
 14540  0021B6  D7FE               	bra	u10537
 14541                           
 14542                           ;Test.c: 493: LATAbits.LATA4 = 0;
 14543  0021B8  9889               	bcf	3977,4,c	;volatile
 14544                           
 14545                           ;Test.c: 494: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14546  0021BA  0E42               	movlw	66
 14547  0021BC                     u10547:
 14548  0021BC  2EE8               	decfsz	wreg,f,c
 14549  0021BE  D7FE               	bra	u10547
 14550  0021C0  D000               	nop2	
 14551  0021C2  0100               	movlb	0	; () banked
 14552  0021C4  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 14553  0021C6  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 14554  0021C8  D7E8               	goto	l8594
 14555  0021CA                     l8604:
 14556                           
 14557                           ; BSR set to: 0
 14558                           ;Test.c: 497: else if(PORTB >> 4 == 0b0101){
 14559  0021CA  3881               	swapf	3969,w,c	;volatile
 14560  0021CC  0B0F               	andlw	15
 14561  0021CE  0A05               	xorlw	5
 14562  0021D0  A4D8               	btfss	status,2,c
 14563  0021D2  D027               	goto	l8618
 14564                           
 14565                           ; BSR set to: 0
 14566                           ;Test.c: 499: for(int i = 0; i<30; i++){
 14567  0021D4  0E00               	movlw	0
 14568  0021D6  0100               	movlb	0	; () banked
 14569  0021D8  6FB4               	movwf	(PlatformTest@i_1811+1)& (0+255),b
 14570  0021DA  0E00               	movlw	0
 14571  0021DC  6FB3               	movwf	PlatformTest@i_1811& (0+255),b
 14572  0021DE                     l8608:
 14573                           
 14574                           ; BSR set to: 0
 14575  0021DE  0100               	movlb	0	; () banked
 14576  0021E0  BFB4               	btfsc	(PlatformTest@i_1811+1)& (0+255),7,b
 14577  0021E2  D008               	goto	l1359
 14578  0021E4  0100               	movlb	0	; () banked
 14579  0021E6  51B4               	movf	(PlatformTest@i_1811+1)& (0+255),w,b
 14580  0021E8  E16A               	bnz	l1369
 14581  0021EA  0E1E               	movlw	30
 14582  0021EC  0100               	movlb	0	; () banked
 14583  0021EE  5DB3               	subwf	PlatformTest@i_1811& (0+255),w,b
 14584  0021F0  B0D8               	btfsc	status,0,c
 14585  0021F2  D065               	goto	l1369
 14586  0021F4                     l1359:
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;Test.c: 500: LATAbits.LATA4 = 1;
 14590  0021F4  8889               	bsf	3977,4,c	;volatile
 14591                           
 14592                           ; BSR set to: 0
 14593                           ;Test.c: 501: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 14594  0021F6  0E4E               	movlw	78
 14595  0021F8  0100               	movlb	0	; () banked
 14596  0021FA  6FAB               	movwf	??_PlatformTest& (0+255),b
 14597  0021FC  0EEB               	movlw	235
 14598  0021FE                     u10557:
 14599  0021FE  2EE8               	decfsz	wreg,f,c
 14600  002200  D7FE               	bra	u10557
 14601  002202  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14602  002204  D7FC               	bra	u10557
 14603                           
 14604                           ;Test.c: 502: LATAbits.LATA4 = 0;
 14605  002206  9889               	bcf	3977,4,c	;volatile
 14606                           
 14607                           ;Test.c: 503: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 14608  002208  0E1A               	movlw	26
 14609  00220A  0100               	movlb	0	; () banked
 14610  00220C  6FAB               	movwf	??_PlatformTest& (0+255),b
 14611  00220E  0EF8               	movlw	248
 14612  002210                     u10567:
 14613  002210  2EE8               	decfsz	wreg,f,c
 14614  002212  D7FE               	bra	u10567
 14615  002214  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14616  002216  D7FC               	bra	u10567
 14617  002218  F000               	nop	
 14618  00221A  0100               	movlb	0	; () banked
 14619  00221C  4BB3               	infsnz	PlatformTest@i_1811& (0+255),f,b
 14620  00221E  2BB4               	incf	(PlatformTest@i_1811+1)& (0+255),f,b
 14621  002220  D7DE               	goto	l8608
 14622  002222                     l8618:
 14623                           
 14624                           ; BSR set to: 0
 14625                           ;Test.c: 506: else if (PORTB >> 4 == 0b0110){
 14626  002222  3881               	swapf	3969,w,c	;volatile
 14627  002224  0B0F               	andlw	15
 14628  002226  0A06               	xorlw	6
 14629  002228  A4D8               	btfss	status,2,c
 14630  00222A  D027               	goto	l8632
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;Test.c: 508: for(int i = 0; i<30; i++){
 14634  00222C  0E00               	movlw	0
 14635  00222E  0100               	movlb	0	; () banked
 14636  002230  6FB6               	movwf	(PlatformTest@i_1812+1)& (0+255),b
 14637  002232  0E00               	movlw	0
 14638  002234  6FB5               	movwf	PlatformTest@i_1812& (0+255),b
 14639  002236                     l8622:
 14640                           
 14641                           ; BSR set to: 0
 14642  002236  0100               	movlb	0	; () banked
 14643  002238  BFB6               	btfsc	(PlatformTest@i_1812+1)& (0+255),7,b
 14644  00223A  D008               	goto	l1363
 14645  00223C  0100               	movlb	0	; () banked
 14646  00223E  51B6               	movf	(PlatformTest@i_1812+1)& (0+255),w,b
 14647  002240  E13E               	bnz	l1369
 14648  002242  0E1E               	movlw	30
 14649  002244  0100               	movlb	0	; () banked
 14650  002246  5DB5               	subwf	PlatformTest@i_1812& (0+255),w,b
 14651  002248  B0D8               	btfsc	status,0,c
 14652  00224A  D039               	goto	l1369
 14653  00224C                     l1363:
 14654                           
 14655                           ; BSR set to: 0
 14656                           ;Test.c: 509: LATAbits.LATA4 = 1;
 14657  00224C  8889               	bsf	3977,4,c	;volatile
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;Test.c: 510: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 14661  00224E  0E3D               	movlw	61
 14662  002250  0100               	movlb	0	; () banked
 14663  002252  6FAB               	movwf	??_PlatformTest& (0+255),b
 14664  002254  0E41               	movlw	65
 14665  002256                     u10577:
 14666  002256  2EE8               	decfsz	wreg,f,c
 14667  002258  D7FE               	bra	u10577
 14668  00225A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14669  00225C  D7FC               	bra	u10577
 14670                           
 14671                           ;Test.c: 511: LATAbits.LATA4 = 0;
 14672  00225E  9889               	bcf	3977,4,c	;volatile
 14673                           
 14674                           ;Test.c: 512: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 14675  002260  0E2C               	movlw	44
 14676  002262  0100               	movlb	0	; () banked
 14677  002264  6FAB               	movwf	??_PlatformTest& (0+255),b
 14678  002266  0EA1               	movlw	161
 14679  002268                     u10587:
 14680  002268  2EE8               	decfsz	wreg,f,c
 14681  00226A  D7FE               	bra	u10587
 14682  00226C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14683  00226E  D7FC               	bra	u10587
 14684  002270  D000               	nop2	
 14685  002272  0100               	movlb	0	; () banked
 14686  002274  4BB5               	infsnz	PlatformTest@i_1812& (0+255),f,b
 14687  002276  2BB6               	incf	(PlatformTest@i_1812+1)& (0+255),f,b
 14688  002278  D7DE               	goto	l8622
 14689  00227A                     l8632:
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;Test.c: 515: else if (PORTB >> 4 == 0b1000){
 14693  00227A  3881               	swapf	3969,w,c	;volatile
 14694  00227C  0B0F               	andlw	15
 14695  00227E  0A08               	xorlw	8
 14696  002280  A4D8               	btfss	status,2,c
 14697  002282  D01D               	goto	l1369
 14698                           
 14699                           ; BSR set to: 0
 14700                           ;Test.c: 517: for(int i = 0; i<3000; i++){
 14701  002284  0E00               	movlw	0
 14702  002286  0100               	movlb	0	; () banked
 14703  002288  6FB8               	movwf	(PlatformTest@i_1813+1)& (0+255),b
 14704  00228A  0E00               	movlw	0
 14705  00228C  6FB7               	movwf	PlatformTest@i_1813& (0+255),b
 14706  00228E                     l8636:
 14707                           
 14708                           ; BSR set to: 0
 14709  00228E  0100               	movlb	0	; () banked
 14710  002290  BFB8               	btfsc	(PlatformTest@i_1813+1)& (0+255),7,b
 14711  002292  D008               	goto	l1367
 14712  002294  0EB8               	movlw	184
 14713  002296  0100               	movlb	0	; () banked
 14714  002298  5DB7               	subwf	PlatformTest@i_1813& (0+255),w,b
 14715  00229A  0E0B               	movlw	11
 14716  00229C  0100               	movlb	0	; () banked
 14717  00229E  59B8               	subwfb	(PlatformTest@i_1813+1)& (0+255),w,b
 14718  0022A0  B0D8               	btfsc	status,0,c
 14719  0022A2  D00D               	goto	l1369
 14720  0022A4                     l1367:
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;Test.c: 518: LATAbits.LATA4 = 1;
 14724  0022A4  8889               	bsf	3977,4,c	;volatile
 14725                           
 14726                           ; BSR set to: 0
 14727                           ;Test.c: 519: _delay((unsigned long)((58)*(32000000/4000000.0)));
 14728  0022A6  0E9A               	movlw	154
 14729  0022A8                     u10597:
 14730  0022A8  2EE8               	decfsz	wreg,f,c
 14731  0022AA  D7FE               	bra	u10597
 14732  0022AC  D000               	nop2	
 14733                           
 14734                           ;Test.c: 520: LATAbits.LATA4 = 0;
 14735  0022AE  9889               	bcf	3977,4,c	;volatile
 14736                           
 14737                           ;Test.c: 521: _delay((unsigned long)((42)*(32000000/4000000.0)));
 14738  0022B0  0E70               	movlw	112
 14739  0022B2                     u10607:
 14740  0022B2  2EE8               	decfsz	wreg,f,c
 14741  0022B4  D7FE               	bra	u10607
 14742  0022B6  0100               	movlb	0	; () banked
 14743  0022B8  4BB7               	infsnz	PlatformTest@i_1813& (0+255),f,b
 14744  0022BA  2BB8               	incf	(PlatformTest@i_1813+1)& (0+255),f,b
 14745  0022BC  D7E8               	goto	l8636
 14746  0022BE                     l1369:
 14747  0022BE  A281               	btfss	3969,1,c	;volatile
 14748  0022C0  D71C               	goto	l8566
 14749  0022C2  D7FD               	goto	l1369
 14750  0022C4                     l1346:
 14751                           
 14752                           ;Test.c: 526: }
 14753                           ;Test.c: 528: LATCbits.LATC5 = 0;
 14754  0022C4  9A8B               	bcf	3979,5,c	;volatile
 14755                           
 14756                           ;Test.c: 529: stopSignals();
 14757  0022C6  EC58  F02B         	call	_stopSignals	;wreg free
 14758                           
 14759                           ;Test.c: 530: machine_state = Testing_state;
 14760  0022CA  0E03               	movlw	3
 14761  0022CC  0100               	movlb	0	; () banked
 14762  0022CE  6FFC               	movwf	_machine_state& (0+255),b
 14763                           
 14764                           ; BSR set to: 0
 14765  0022D0  0012               	return		;funcret
 14766  0022D2                     __end_of_PlatformTest:
 14767                           	opt stack 0
 14768                           tblptru	equ	0xFF8
 14769                           tblptrh	equ	0xFF7
 14770                           tblptrl	equ	0xFF6
 14771                           tablat	equ	0xFF5
 14772                           prodh	equ	0xFF4
 14773                           prodl	equ	0xFF3
 14774                           intcon	equ	0xFF2
 14775                           intcon2	equ	0xFF1
 14776                           intcon3	equ	0xFF0
 14777                           postinc0	equ	0xFEE
 14778                           wreg	equ	0xFE8
 14779                           postdec1	equ	0xFE5
 14780                           fsr1l	equ	0xFE1
 14781                           indf2	equ	0xFDF
 14782                           postinc2	equ	0xFDE
 14783                           postdec2	equ	0xFDD
 14784                           fsr2h	equ	0xFDA
 14785                           fsr2l	equ	0xFD9
 14786                           status	equ	0xFD8
 14787                           
 14788 ;; *************** function _readADC *****************
 14789 ;; Defined at:
 14790 ;;		line 15 in file "ADCFunctionality.c"
 14791 ;; Parameters:    Size  Location     Type
 14792 ;;  channel         1    wreg     unsigned char 
 14793 ;; Auto vars:     Size  Location     Type
 14794 ;;  channel         1    1[BANK0 ] unsigned char 
 14795 ;; Return value:  Size  Location     Type
 14796 ;;                  1    wreg      void 
 14797 ;; Registers used:
 14798 ;;		wreg, status,2, status,0, cstack
 14799 ;; Tracked objects:
 14800 ;;		On entry : 0/0
 14801 ;;		On exit  : 0/0
 14802 ;;		Unchanged: 0/0
 14803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14808 ;;Total ram usage:        2 bytes
 14809 ;; Hardware stack levels used:    1
 14810 ;; Hardware stack levels required when called:    7
 14811 ;; This function calls:
 14812 ;;		Nothing
 14813 ;; This function is called by:
 14814 ;;		_readIR
 14815 ;;		_readMAG
 14816 ;;		_sensorTest
 14817 ;;		_PlatformTest
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           	psect	text45
 14822  005538                     __ptext45:
 14823                           	opt stack 0
 14824  005538                     _readADC:
 14825                           	opt stack 20
 14826                           
 14827                           ; BSR set to: 0
 14828                           ;incstack = 0
 14829                           ;readADC@channel stored from wreg
 14830  005538  0100               	movlb	0	; () banked
 14831  00553A  6F81               	movwf	readADC@channel& (0+255),b
 14832                           
 14833                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 14834  00553C  0100               	movlb	0	; () banked
 14835  00553E  4581               	rlncf	readADC@channel& (0+255),w,b
 14836  005540  46E8               	rlncf	wreg,f,c
 14837  005542  0BFC               	andlw	252
 14838  005544  6EC2               	movwf	4034,c	;volatile
 14839                           
 14840                           ; BSR set to: 0
 14841                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 14842  005546  80C2               	bsf	4034,0,c	;volatile
 14843                           
 14844                           ; BSR set to: 0
 14845                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 14846  005548  82C2               	bsf	4034,1,c	;volatile
 14847                           
 14848                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 14849  00554A  D009               	goto	l6328
 14850  00554C                     l6326:
 14851  00554C  0E34               	movlw	52
 14852  00554E  0100               	movlb	0	; () banked
 14853  005550  6F80               	movwf	??_readADC& (0+255),b
 14854  005552  0EF1               	movlw	241
 14855  005554                     u10617:
 14856  005554  2EE8               	decfsz	wreg,f,c
 14857  005556  D7FE               	bra	u10617
 14858  005558  2F80               	decfsz	??_readADC& (0+255),f,b
 14859  00555A  D7FC               	bra	u10617
 14860  00555C  D000               	nop2	
 14861  00555E                     l6328:
 14862  00555E  A2C2               	btfss	4034,1,c	;volatile
 14863  005560  0012               	return	
 14864  005562  D7F4               	goto	l6326
 14865  005564                     __end_of_readADC:
 14866                           	opt stack 0
 14867                           tblptru	equ	0xFF8
 14868                           tblptrh	equ	0xFF7
 14869                           tblptrl	equ	0xFF6
 14870                           tablat	equ	0xFF5
 14871                           prodh	equ	0xFF4
 14872                           prodl	equ	0xFF3
 14873                           intcon	equ	0xFF2
 14874                           intcon2	equ	0xFF1
 14875                           intcon3	equ	0xFF0
 14876                           postinc0	equ	0xFEE
 14877                           wreg	equ	0xFE8
 14878                           postdec1	equ	0xFE5
 14879                           fsr1l	equ	0xFE1
 14880                           indf2	equ	0xFDF
 14881                           postinc2	equ	0xFDE
 14882                           postdec2	equ	0xFDD
 14883                           fsr2h	equ	0xFDA
 14884                           fsr2l	equ	0xFD9
 14885                           status	equ	0xFD8
 14886                           
 14887 ;; *************** function _BothServos *****************
 14888 ;; Defined at:
 14889 ;;		line 351 in file "Test.c"
 14890 ;; Parameters:    Size  Location     Type
 14891 ;;		None
 14892 ;; Auto vars:     Size  Location     Type
 14893 ;;		None
 14894 ;; Return value:  Size  Location     Type
 14895 ;;                  1    wreg      void 
 14896 ;; Registers used:
 14897 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14898 ;; Tracked objects:
 14899 ;;		On entry : 0/0
 14900 ;;		On exit  : 0/0
 14901 ;;		Unchanged: 0/0
 14902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14905 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14906 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14907 ;;Total ram usage:        2 bytes
 14908 ;; Hardware stack levels used:    1
 14909 ;; Hardware stack levels required when called:   10
 14910 ;; This function calls:
 14911 ;;		_initServos
 14912 ;;		_lcdInst
 14913 ;;		_printf
 14914 ;;		_stopSignals
 14915 ;;		_updateServoPosition
 14916 ;; This function is called by:
 14917 ;;		_Test
 14918 ;; This function uses a non-reentrant model
 14919 ;;
 14920                           
 14921                           	psect	text46
 14922  001B46                     __ptext46:
 14923                           	opt stack 0
 14924  001B46                     _BothServos:
 14925                           	opt stack 19
 14926                           
 14927                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14928                           
 14929                           ;incstack = 0
 14930  001B46  0E01               	movlw	1
 14931  001B48  ECA6  F02B         	call	_lcdInst
 14932  001B4C  0E68               	movlw	104
 14933  001B4E  0100               	movlb	0	; () banked
 14934  001B50  6FAB               	movwf	??_BothServos& (0+255),b
 14935  001B52  0EE4               	movlw	228
 14936  001B54                     u10627:
 14937  001B54  2EE8               	decfsz	wreg,f,c
 14938  001B56  D7FE               	bra	u10627
 14939  001B58  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14940  001B5A  D7FC               	bra	u10627
 14941  001B5C  F000               	nop	
 14942  001B5E  0E80               	movlw	128
 14943  001B60  ECA6  F02B         	call	_lcdInst
 14944                           
 14945                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 14946  001B64  0EBE               	movlw	low STR_110
 14947  001B66  0100               	movlb	0	; () banked
 14948  001B68  6F8E               	movwf	printf@f& (0+255),b
 14949  001B6A  0EFC               	movlw	high STR_110
 14950  001B6C  0100               	movlb	0	; () banked
 14951  001B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14952  001B70  EC87  F00B         	call	_printf	;wreg free
 14953                           
 14954                           ;Test.c: 354: TMR1ON = 1;
 14955  001B74  80CD               	bsf	4045,0,c	;volatile
 14956                           
 14957                           ;Test.c: 355: TMR3ON = 1;
 14958  001B76  80B1               	bsf	4017,0,c	;volatile
 14959                           
 14960                           ;Test.c: 356: machine_state = Sorting_state;
 14961  001B78  0E01               	movlw	1
 14962  001B7A  0100               	movlb	0	; () banked
 14963  001B7C  6FFC               	movwf	_machine_state& (0+255),b
 14964                           
 14965                           ; BSR set to: 0
 14966                           ;Test.c: 357: was_low_1 = 0;
 14967  001B7E  0E00               	movlw	0
 14968  001B80  6E78               	movwf	_was_low_1+1,c	;volatile
 14969  001B82  0E00               	movlw	0
 14970  001B84  6E77               	movwf	_was_low_1,c	;volatile
 14971                           
 14972                           ; BSR set to: 0
 14973                           ;Test.c: 358: was_low_3 = 0;
 14974  001B86  0E00               	movlw	0
 14975  001B88  6E7C               	movwf	_was_low_3+1,c	;volatile
 14976  001B8A  0E00               	movlw	0
 14977  001B8C  6E7B               	movwf	_was_low_3,c	;volatile
 14978                           
 14979                           ; BSR set to: 0
 14980                           ;Test.c: 364: initServos();
 14981  001B8E  EC57  F025         	call	_initServos	;wreg free
 14982                           
 14983                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14984  001B92  0E3D               	movlw	61
 14985  001B94  0100               	movlb	0	; () banked
 14986  001B96  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14987  001B98  0EE1               	movlw	225
 14988  001B9A  0100               	movlb	0	; () banked
 14989  001B9C  6FAB               	movwf	??_BothServos& (0+255),b
 14990  001B9E  0E3F               	movlw	63
 14991  001BA0                     u10637:
 14992  001BA0  2EE8               	decfsz	wreg,f,c
 14993  001BA2  D7FE               	bra	u10637
 14994  001BA4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14995  001BA6  D7FC               	bra	u10637
 14996  001BA8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14997  001BAA  D7FA               	bra	u10637
 14998  001BAC  D000               	nop2	
 14999                           
 15000                           ;Test.c: 367: updateServoPosition(500, 1);
 15001  001BAE  0E01               	movlw	1
 15002  001BB0  0100               	movlb	0	; () banked
 15003  001BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15004  001BB4  0EF4               	movlw	244
 15005  001BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15006  001BB8  0E00               	movlw	0
 15007  001BBA  0100               	movlb	0	; () banked
 15008  001BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15009  001BBE  0E01               	movlw	1
 15010  001BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15011  001BC2  ECD2  F024         	call	_updateServoPosition	;wreg free
 15012                           
 15013                           ;Test.c: 368: updateServoPosition(1050, 3);
 15014  001BC6  0E04               	movlw	4
 15015  001BC8  0100               	movlb	0	; () banked
 15016  001BCA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15017  001BCC  0E1A               	movlw	26
 15018  001BCE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15019  001BD0  0E00               	movlw	0
 15020  001BD2  0100               	movlb	0	; () banked
 15021  001BD4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15022  001BD6  0E03               	movlw	3
 15023  001BD8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15024  001BDA  ECD2  F024         	call	_updateServoPosition	;wreg free
 15025                           
 15026                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15027  001BDE  0E1F               	movlw	31
 15028  001BE0  0100               	movlb	0	; () banked
 15029  001BE2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15030  001BE4  0E71               	movlw	113
 15031  001BE6  0100               	movlb	0	; () banked
 15032  001BE8  6FAB               	movwf	??_BothServos& (0+255),b
 15033  001BEA  0E1E               	movlw	30
 15034  001BEC                     u10647:
 15035  001BEC  2EE8               	decfsz	wreg,f,c
 15036  001BEE  D7FE               	bra	u10647
 15037  001BF0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15038  001BF2  D7FC               	bra	u10647
 15039  001BF4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15040  001BF6  D7FA               	bra	u10647
 15041  001BF8  F000               	nop	
 15042                           
 15043                           ;Test.c: 370: updateServoPosition(1260, 3);
 15044  001BFA  0E04               	movlw	4
 15045  001BFC  0100               	movlb	0	; () banked
 15046  001BFE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15047  001C00  0EEC               	movlw	236
 15048  001C02  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15049  001C04  0E00               	movlw	0
 15050  001C06  0100               	movlb	0	; () banked
 15051  001C08  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15052  001C0A  0E03               	movlw	3
 15053  001C0C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15054  001C0E  ECD2  F024         	call	_updateServoPosition	;wreg free
 15055                           
 15056                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15057  001C12  0E1D               	movlw	29
 15058  001C14  0100               	movlb	0	; () banked
 15059  001C16  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15060  001C18  0E69               	movlw	105
 15061  001C1A  0100               	movlb	0	; () banked
 15062  001C1C  6FAB               	movwf	??_BothServos& (0+255),b
 15063  001C1E  0EA5               	movlw	165
 15064  001C20                     u10657:
 15065  001C20  2EE8               	decfsz	wreg,f,c
 15066  001C22  D7FE               	bra	u10657
 15067  001C24  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15068  001C26  D7FC               	bra	u10657
 15069  001C28  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15070  001C2A  D7FA               	bra	u10657
 15071                           
 15072                           ;Test.c: 372: updateServoPosition(1050, 3);
 15073  001C2C  0E04               	movlw	4
 15074  001C2E  0100               	movlb	0	; () banked
 15075  001C30  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15076  001C32  0E1A               	movlw	26
 15077  001C34  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15078  001C36  0E00               	movlw	0
 15079  001C38  0100               	movlb	0	; () banked
 15080  001C3A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15081  001C3C  0E03               	movlw	3
 15082  001C3E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15083  001C40  ECD2  F024         	call	_updateServoPosition	;wreg free
 15084                           
 15085                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 15086  001C44  0E1F               	movlw	31
 15087  001C46  0100               	movlb	0	; () banked
 15088  001C48  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15089  001C4A  0E71               	movlw	113
 15090  001C4C  0100               	movlb	0	; () banked
 15091  001C4E  6FAB               	movwf	??_BothServos& (0+255),b
 15092  001C50  0E1E               	movlw	30
 15093  001C52                     u10667:
 15094  001C52  2EE8               	decfsz	wreg,f,c
 15095  001C54  D7FE               	bra	u10667
 15096  001C56  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15097  001C58  D7FC               	bra	u10667
 15098  001C5A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15099  001C5C  D7FA               	bra	u10667
 15100  001C5E  F000               	nop	
 15101                           
 15102                           ;Test.c: 375: updateServoPosition(850, 1);
 15103  001C60  0E03               	movlw	3
 15104  001C62  0100               	movlb	0	; () banked
 15105  001C64  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15106  001C66  0E52               	movlw	82
 15107  001C68  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15108  001C6A  0E00               	movlw	0
 15109  001C6C  0100               	movlb	0	; () banked
 15110  001C6E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15111  001C70  0E01               	movlw	1
 15112  001C72  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15113  001C74  ECD2  F024         	call	_updateServoPosition	;wreg free
 15114                           
 15115                           ;Test.c: 376: updateServoPosition(1050, 3);
 15116  001C78  0E04               	movlw	4
 15117  001C7A  0100               	movlb	0	; () banked
 15118  001C7C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15119  001C7E  0E1A               	movlw	26
 15120  001C80  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15121  001C82  0E00               	movlw	0
 15122  001C84  0100               	movlb	0	; () banked
 15123  001C86  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15124  001C88  0E03               	movlw	3
 15125  001C8A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15126  001C8C  ECD2  F024         	call	_updateServoPosition	;wreg free
 15127                           
 15128                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 15129  001C90  0E1F               	movlw	31
 15130  001C92  0100               	movlb	0	; () banked
 15131  001C94  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15132  001C96  0E71               	movlw	113
 15133  001C98  0100               	movlb	0	; () banked
 15134  001C9A  6FAB               	movwf	??_BothServos& (0+255),b
 15135  001C9C  0E1E               	movlw	30
 15136  001C9E                     u10677:
 15137  001C9E  2EE8               	decfsz	wreg,f,c
 15138  001CA0  D7FE               	bra	u10677
 15139  001CA2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15140  001CA4  D7FC               	bra	u10677
 15141  001CA6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15142  001CA8  D7FA               	bra	u10677
 15143  001CAA  F000               	nop	
 15144                           
 15145                           ;Test.c: 378: updateServoPosition(1260, 3);
 15146  001CAC  0E04               	movlw	4
 15147  001CAE  0100               	movlb	0	; () banked
 15148  001CB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15149  001CB2  0EEC               	movlw	236
 15150  001CB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15151  001CB6  0E00               	movlw	0
 15152  001CB8  0100               	movlb	0	; () banked
 15153  001CBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15154  001CBC  0E03               	movlw	3
 15155  001CBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15156  001CC0  ECD2  F024         	call	_updateServoPosition	;wreg free
 15157                           
 15158                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 15159  001CC4  0E1D               	movlw	29
 15160  001CC6  0100               	movlb	0	; () banked
 15161  001CC8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15162  001CCA  0E69               	movlw	105
 15163  001CCC  0100               	movlb	0	; () banked
 15164  001CCE  6FAB               	movwf	??_BothServos& (0+255),b
 15165  001CD0  0EA5               	movlw	165
 15166  001CD2                     u10687:
 15167  001CD2  2EE8               	decfsz	wreg,f,c
 15168  001CD4  D7FE               	bra	u10687
 15169  001CD6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15170  001CD8  D7FC               	bra	u10687
 15171  001CDA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15172  001CDC  D7FA               	bra	u10687
 15173                           
 15174                           ;Test.c: 380: updateServoPosition(1050, 3);
 15175  001CDE  0E04               	movlw	4
 15176  001CE0  0100               	movlb	0	; () banked
 15177  001CE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15178  001CE4  0E1A               	movlw	26
 15179  001CE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15180  001CE8  0E00               	movlw	0
 15181  001CEA  0100               	movlb	0	; () banked
 15182  001CEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15183  001CEE  0E03               	movlw	3
 15184  001CF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15185  001CF2  ECD2  F024         	call	_updateServoPosition	;wreg free
 15186                           
 15187                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 15188  001CF6  0E1F               	movlw	31
 15189  001CF8  0100               	movlb	0	; () banked
 15190  001CFA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15191  001CFC  0E71               	movlw	113
 15192  001CFE  0100               	movlb	0	; () banked
 15193  001D00  6FAB               	movwf	??_BothServos& (0+255),b
 15194  001D02  0E1E               	movlw	30
 15195  001D04                     u10697:
 15196  001D04  2EE8               	decfsz	wreg,f,c
 15197  001D06  D7FE               	bra	u10697
 15198  001D08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15199  001D0A  D7FC               	bra	u10697
 15200  001D0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15201  001D0E  D7FA               	bra	u10697
 15202  001D10  F000               	nop	
 15203                           
 15204                           ;Test.c: 383: updateServoPosition(500, 1);
 15205  001D12  0E01               	movlw	1
 15206  001D14  0100               	movlb	0	; () banked
 15207  001D16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15208  001D18  0EF4               	movlw	244
 15209  001D1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15210  001D1C  0E00               	movlw	0
 15211  001D1E  0100               	movlb	0	; () banked
 15212  001D20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15213  001D22  0E01               	movlw	1
 15214  001D24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15215  001D26  ECD2  F024         	call	_updateServoPosition	;wreg free
 15216                           
 15217                           ;Test.c: 384: updateServoPosition(1050, 3);
 15218  001D2A  0E04               	movlw	4
 15219  001D2C  0100               	movlb	0	; () banked
 15220  001D2E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15221  001D30  0E1A               	movlw	26
 15222  001D32  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15223  001D34  0E00               	movlw	0
 15224  001D36  0100               	movlb	0	; () banked
 15225  001D38  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15226  001D3A  0E03               	movlw	3
 15227  001D3C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15228  001D3E  ECD2  F024         	call	_updateServoPosition	;wreg free
 15229                           
 15230                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 15231  001D42  0E1F               	movlw	31
 15232  001D44  0100               	movlb	0	; () banked
 15233  001D46  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15234  001D48  0E71               	movlw	113
 15235  001D4A  0100               	movlb	0	; () banked
 15236  001D4C  6FAB               	movwf	??_BothServos& (0+255),b
 15237  001D4E  0E1E               	movlw	30
 15238  001D50                     u10707:
 15239  001D50  2EE8               	decfsz	wreg,f,c
 15240  001D52  D7FE               	bra	u10707
 15241  001D54  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15242  001D56  D7FC               	bra	u10707
 15243  001D58  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15244  001D5A  D7FA               	bra	u10707
 15245  001D5C  F000               	nop	
 15246                           
 15247                           ;Test.c: 386: updateServoPosition(1260, 3);
 15248  001D5E  0E04               	movlw	4
 15249  001D60  0100               	movlb	0	; () banked
 15250  001D62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15251  001D64  0EEC               	movlw	236
 15252  001D66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15253  001D68  0E00               	movlw	0
 15254  001D6A  0100               	movlb	0	; () banked
 15255  001D6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15256  001D6E  0E03               	movlw	3
 15257  001D70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15258  001D72  ECD2  F024         	call	_updateServoPosition	;wreg free
 15259                           
 15260                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 15261  001D76  0E1D               	movlw	29
 15262  001D78  0100               	movlb	0	; () banked
 15263  001D7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15264  001D7C  0E69               	movlw	105
 15265  001D7E  0100               	movlb	0	; () banked
 15266  001D80  6FAB               	movwf	??_BothServos& (0+255),b
 15267  001D82  0EA5               	movlw	165
 15268  001D84                     u10717:
 15269  001D84  2EE8               	decfsz	wreg,f,c
 15270  001D86  D7FE               	bra	u10717
 15271  001D88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15272  001D8A  D7FC               	bra	u10717
 15273  001D8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15274  001D8E  D7FA               	bra	u10717
 15275                           
 15276                           ;Test.c: 388: updateServoPosition(1050, 3);
 15277  001D90  0E04               	movlw	4
 15278  001D92  0100               	movlb	0	; () banked
 15279  001D94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15280  001D96  0E1A               	movlw	26
 15281  001D98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15282  001D9A  0E00               	movlw	0
 15283  001D9C  0100               	movlb	0	; () banked
 15284  001D9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15285  001DA0  0E03               	movlw	3
 15286  001DA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15287  001DA4  ECD2  F024         	call	_updateServoPosition	;wreg free
 15288                           
 15289                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15290  001DA8  0E3D               	movlw	61
 15291  001DAA  0100               	movlb	0	; () banked
 15292  001DAC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15293  001DAE  0EE1               	movlw	225
 15294  001DB0  0100               	movlb	0	; () banked
 15295  001DB2  6FAB               	movwf	??_BothServos& (0+255),b
 15296  001DB4  0E3F               	movlw	63
 15297  001DB6                     u10727:
 15298  001DB6  2EE8               	decfsz	wreg,f,c
 15299  001DB8  D7FE               	bra	u10727
 15300  001DBA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15301  001DBC  D7FC               	bra	u10727
 15302  001DBE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15303  001DC0  D7FA               	bra	u10727
 15304  001DC2  D000               	nop2	
 15305                           
 15306                           ;Test.c: 391: updateServoPosition(1670, 1);
 15307  001DC4  0E06               	movlw	6
 15308  001DC6  0100               	movlb	0	; () banked
 15309  001DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15310  001DCA  0E86               	movlw	134
 15311  001DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15312  001DCE  0E00               	movlw	0
 15313  001DD0  0100               	movlb	0	; () banked
 15314  001DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15315  001DD4  0E01               	movlw	1
 15316  001DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15317  001DD8  ECD2  F024         	call	_updateServoPosition	;wreg free
 15318                           
 15319                           ;Test.c: 392: updateServoPosition(1050, 3);
 15320  001DDC  0E04               	movlw	4
 15321  001DDE  0100               	movlb	0	; () banked
 15322  001DE0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15323  001DE2  0E1A               	movlw	26
 15324  001DE4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15325  001DE6  0E00               	movlw	0
 15326  001DE8  0100               	movlb	0	; () banked
 15327  001DEA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15328  001DEC  0E03               	movlw	3
 15329  001DEE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15330  001DF0  ECD2  F024         	call	_updateServoPosition	;wreg free
 15331                           
 15332                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 15333  001DF4  0E1F               	movlw	31
 15334  001DF6  0100               	movlb	0	; () banked
 15335  001DF8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15336  001DFA  0E71               	movlw	113
 15337  001DFC  0100               	movlb	0	; () banked
 15338  001DFE  6FAB               	movwf	??_BothServos& (0+255),b
 15339  001E00  0E1E               	movlw	30
 15340  001E02                     u10737:
 15341  001E02  2EE8               	decfsz	wreg,f,c
 15342  001E04  D7FE               	bra	u10737
 15343  001E06  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15344  001E08  D7FC               	bra	u10737
 15345  001E0A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15346  001E0C  D7FA               	bra	u10737
 15347  001E0E  F000               	nop	
 15348                           
 15349                           ;Test.c: 394: updateServoPosition(1390, 3);
 15350  001E10  0E05               	movlw	5
 15351  001E12  0100               	movlb	0	; () banked
 15352  001E14  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15353  001E16  0E6E               	movlw	110
 15354  001E18  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15355  001E1A  0E00               	movlw	0
 15356  001E1C  0100               	movlb	0	; () banked
 15357  001E1E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15358  001E20  0E03               	movlw	3
 15359  001E22  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15360  001E24  ECD2  F024         	call	_updateServoPosition	;wreg free
 15361                           
 15362                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 15363  001E28  0E1D               	movlw	29
 15364  001E2A  0100               	movlb	0	; () banked
 15365  001E2C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15366  001E2E  0E69               	movlw	105
 15367  001E30  0100               	movlb	0	; () banked
 15368  001E32  6FAB               	movwf	??_BothServos& (0+255),b
 15369  001E34  0EA5               	movlw	165
 15370  001E36                     u10747:
 15371  001E36  2EE8               	decfsz	wreg,f,c
 15372  001E38  D7FE               	bra	u10747
 15373  001E3A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15374  001E3C  D7FC               	bra	u10747
 15375  001E3E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15376  001E40  D7FA               	bra	u10747
 15377                           
 15378                           ;Test.c: 396: updateServoPosition(1050, 3);
 15379  001E42  0E04               	movlw	4
 15380  001E44  0100               	movlb	0	; () banked
 15381  001E46  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15382  001E48  0E1A               	movlw	26
 15383  001E4A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15384  001E4C  0E00               	movlw	0
 15385  001E4E  0100               	movlb	0	; () banked
 15386  001E50  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15387  001E52  0E03               	movlw	3
 15388  001E54  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15389  001E56  ECD2  F024         	call	_updateServoPosition	;wreg free
 15390                           
 15391                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 15392  001E5A  0E1F               	movlw	31
 15393  001E5C  0100               	movlb	0	; () banked
 15394  001E5E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15395  001E60  0E71               	movlw	113
 15396  001E62  0100               	movlb	0	; () banked
 15397  001E64  6FAB               	movwf	??_BothServos& (0+255),b
 15398  001E66  0E1E               	movlw	30
 15399  001E68                     u10757:
 15400  001E68  2EE8               	decfsz	wreg,f,c
 15401  001E6A  D7FE               	bra	u10757
 15402  001E6C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15403  001E6E  D7FC               	bra	u10757
 15404  001E70  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15405  001E72  D7FA               	bra	u10757
 15406  001E74  F000               	nop	
 15407                           
 15408                           ;Test.c: 399: updateServoPosition(2400, 1);
 15409  001E76  0E09               	movlw	9
 15410  001E78  0100               	movlb	0	; () banked
 15411  001E7A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15412  001E7C  0E60               	movlw	96
 15413  001E7E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15414  001E80  0E00               	movlw	0
 15415  001E82  0100               	movlb	0	; () banked
 15416  001E84  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15417  001E86  0E01               	movlw	1
 15418  001E88  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15419  001E8A  ECD2  F024         	call	_updateServoPosition	;wreg free
 15420                           
 15421                           ;Test.c: 400: updateServoPosition(1050, 3);
 15422  001E8E  0E04               	movlw	4
 15423  001E90  0100               	movlb	0	; () banked
 15424  001E92  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15425  001E94  0E1A               	movlw	26
 15426  001E96  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15427  001E98  0E00               	movlw	0
 15428  001E9A  0100               	movlb	0	; () banked
 15429  001E9C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15430  001E9E  0E03               	movlw	3
 15431  001EA0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15432  001EA2  ECD2  F024         	call	_updateServoPosition	;wreg free
 15433                           
 15434                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 15435  001EA6  0E1F               	movlw	31
 15436  001EA8  0100               	movlb	0	; () banked
 15437  001EAA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15438  001EAC  0E71               	movlw	113
 15439  001EAE  0100               	movlb	0	; () banked
 15440  001EB0  6FAB               	movwf	??_BothServos& (0+255),b
 15441  001EB2  0E1E               	movlw	30
 15442  001EB4                     u10767:
 15443  001EB4  2EE8               	decfsz	wreg,f,c
 15444  001EB6  D7FE               	bra	u10767
 15445  001EB8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15446  001EBA  D7FC               	bra	u10767
 15447  001EBC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15448  001EBE  D7FA               	bra	u10767
 15449  001EC0  F000               	nop	
 15450                           
 15451                           ;Test.c: 402: updateServoPosition(1390, 3);
 15452  001EC2  0E05               	movlw	5
 15453  001EC4  0100               	movlb	0	; () banked
 15454  001EC6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15455  001EC8  0E6E               	movlw	110
 15456  001ECA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15457  001ECC  0E00               	movlw	0
 15458  001ECE  0100               	movlb	0	; () banked
 15459  001ED0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15460  001ED2  0E03               	movlw	3
 15461  001ED4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15462  001ED6  ECD2  F024         	call	_updateServoPosition	;wreg free
 15463                           
 15464                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 15465  001EDA  0E1D               	movlw	29
 15466  001EDC  0100               	movlb	0	; () banked
 15467  001EDE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15468  001EE0  0E69               	movlw	105
 15469  001EE2  0100               	movlb	0	; () banked
 15470  001EE4  6FAB               	movwf	??_BothServos& (0+255),b
 15471  001EE6  0EA5               	movlw	165
 15472  001EE8                     u10777:
 15473  001EE8  2EE8               	decfsz	wreg,f,c
 15474  001EEA  D7FE               	bra	u10777
 15475  001EEC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15476  001EEE  D7FC               	bra	u10777
 15477  001EF0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15478  001EF2  D7FA               	bra	u10777
 15479                           
 15480                           ;Test.c: 404: updateServoPosition(1050, 3);
 15481  001EF4  0E04               	movlw	4
 15482  001EF6  0100               	movlb	0	; () banked
 15483  001EF8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15484  001EFA  0E1A               	movlw	26
 15485  001EFC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15486  001EFE  0E00               	movlw	0
 15487  001F00  0100               	movlb	0	; () banked
 15488  001F02  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15489  001F04  0E03               	movlw	3
 15490  001F06  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15491  001F08  ECD2  F024         	call	_updateServoPosition	;wreg free
 15492                           
 15493                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 15494  001F0C  0E1F               	movlw	31
 15495  001F0E  0100               	movlb	0	; () banked
 15496  001F10  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15497  001F12  0E71               	movlw	113
 15498  001F14  0100               	movlb	0	; () banked
 15499  001F16  6FAB               	movwf	??_BothServos& (0+255),b
 15500  001F18  0E1E               	movlw	30
 15501  001F1A                     u10787:
 15502  001F1A  2EE8               	decfsz	wreg,f,c
 15503  001F1C  D7FE               	bra	u10787
 15504  001F1E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15505  001F20  D7FC               	bra	u10787
 15506  001F22  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15507  001F24  D7FA               	bra	u10787
 15508  001F26  F000               	nop	
 15509                           
 15510                           ;Test.c: 407: stopSignals();
 15511  001F28  EC58  F02B         	call	_stopSignals	;wreg free
 15512                           
 15513                           ;Test.c: 408: machine_state = Testing_state;
 15514  001F2C  0E03               	movlw	3
 15515  001F2E  0100               	movlb	0	; () banked
 15516  001F30  6FFC               	movwf	_machine_state& (0+255),b
 15517                           
 15518                           ; BSR set to: 0
 15519  001F32  0012               	return		;funcret
 15520  001F34                     __end_of_BothServos:
 15521                           	opt stack 0
 15522                           tblptru	equ	0xFF8
 15523                           tblptrh	equ	0xFF7
 15524                           tblptrl	equ	0xFF6
 15525                           tablat	equ	0xFF5
 15526                           prodh	equ	0xFF4
 15527                           prodl	equ	0xFF3
 15528                           intcon	equ	0xFF2
 15529                           intcon2	equ	0xFF1
 15530                           intcon3	equ	0xFF0
 15531                           postinc0	equ	0xFEE
 15532                           wreg	equ	0xFE8
 15533                           postdec1	equ	0xFE5
 15534                           fsr1l	equ	0xFE1
 15535                           indf2	equ	0xFDF
 15536                           postinc2	equ	0xFDE
 15537                           postdec2	equ	0xFDD
 15538                           fsr2h	equ	0xFDA
 15539                           fsr2l	equ	0xFD9
 15540                           status	equ	0xFD8
 15541                           
 15542 ;; *************** function _stopSignals *****************
 15543 ;; Defined at:
 15544 ;;		line 70 in file "main.c"
 15545 ;; Parameters:    Size  Location     Type
 15546 ;;		None
 15547 ;; Auto vars:     Size  Location     Type
 15548 ;;		None
 15549 ;; Return value:  Size  Location     Type
 15550 ;;                  1    wreg      void 
 15551 ;; Registers used:
 15552 ;;		wreg, status,2
 15553 ;; Tracked objects:
 15554 ;;		On entry : 0/0
 15555 ;;		On exit  : 0/0
 15556 ;;		Unchanged: 0/0
 15557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15562 ;;Total ram usage:        0 bytes
 15563 ;; Hardware stack levels used:    1
 15564 ;; Hardware stack levels required when called:    7
 15565 ;; This function calls:
 15566 ;;		Nothing
 15567 ;; This function is called by:
 15568 ;;		_main
 15569 ;;		_BothServos
 15570 ;;		_PlatformTest
 15571 ;;		_arm
 15572 ;; This function uses a non-reentrant model
 15573 ;;
 15574                           
 15575                           	psect	text47
 15576  0056B0                     __ptext47:
 15577                           	opt stack 0
 15578  0056B0                     _stopSignals:
 15579                           	opt stack 23
 15580                           
 15581                           ;main.c: 71: LATA = 0x00;
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;incstack = 0
 15585  0056B0  0E00               	movlw	0
 15586  0056B2  6E89               	movwf	3977,c	;volatile
 15587                           
 15588                           ;main.c: 72: LATB = 0x00;
 15589  0056B4  0E00               	movlw	0
 15590  0056B6  6E8A               	movwf	3978,c	;volatile
 15591                           
 15592                           ;main.c: 73: LATC = 0x00;
 15593  0056B8  0E00               	movlw	0
 15594  0056BA  6E8B               	movwf	3979,c	;volatile
 15595                           
 15596                           ;main.c: 74: LATD = 0x00;
 15597  0056BC  0E00               	movlw	0
 15598  0056BE  6E8C               	movwf	3980,c	;volatile
 15599                           
 15600                           ;main.c: 75: LATE = 0x00;
 15601  0056C0  0E00               	movlw	0
 15602  0056C2  6E8D               	movwf	3981,c	;volatile
 15603                           
 15604                           ;main.c: 76: TMR1ON = 0;
 15605  0056C4  90CD               	bcf	4045,0,c	;volatile
 15606                           
 15607                           ;main.c: 77: TMR2ON = 0;
 15608  0056C6  94CA               	bcf	4042,2,c	;volatile
 15609                           
 15610                           ;main.c: 78: TMR3ON = 0;
 15611  0056C8  90B1               	bcf	4017,0,c	;volatile
 15612  0056CA  0012               	return		;funcret
 15613  0056CC                     __end_of_stopSignals:
 15614                           	opt stack 0
 15615                           tblptru	equ	0xFF8
 15616                           tblptrh	equ	0xFF7
 15617                           tblptrl	equ	0xFF6
 15618                           tablat	equ	0xFF5
 15619                           prodh	equ	0xFF4
 15620                           prodl	equ	0xFF3
 15621                           intcon	equ	0xFF2
 15622                           intcon2	equ	0xFF1
 15623                           intcon3	equ	0xFF0
 15624                           postinc0	equ	0xFEE
 15625                           wreg	equ	0xFE8
 15626                           postdec1	equ	0xFE5
 15627                           fsr1l	equ	0xFE1
 15628                           indf2	equ	0xFDF
 15629                           postinc2	equ	0xFDE
 15630                           postdec2	equ	0xFDD
 15631                           fsr2h	equ	0xFDA
 15632                           fsr2l	equ	0xFD9
 15633                           status	equ	0xFD8
 15634                           
 15635 ;; *************** function _initServos *****************
 15636 ;; Defined at:
 15637 ;;		line 438 in file "sort.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;		None
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;		None
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  1    wreg      void 
 15644 ;; Registers used:
 15645 ;;		wreg, status,2, status,0, cstack
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15653 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15654 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15655 ;;Total ram usage:        1 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; Hardware stack levels required when called:    8
 15658 ;; This function calls:
 15659 ;;		_updateServoPosition
 15660 ;; This function is called by:
 15661 ;;		_Loading
 15662 ;;		_BothServos
 15663 ;; This function uses a non-reentrant model
 15664 ;;
 15665                           
 15666                           	psect	text48
 15667  004AAE                     __ptext48:
 15668                           	opt stack 0
 15669  004AAE                     _initServos:
 15670                           	opt stack 20
 15671                           
 15672                           ;sort.c: 440: updateServoPosition(1200, 1);
 15673                           
 15674                           ;incstack = 0
 15675  004AAE  0E04               	movlw	4
 15676  004AB0  0100               	movlb	0	; () banked
 15677  004AB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15678  004AB4  0EB0               	movlw	176
 15679  004AB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15680  004AB8  0E00               	movlw	0
 15681  004ABA  0100               	movlb	0	; () banked
 15682  004ABC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15683  004ABE  0E01               	movlw	1
 15684  004AC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15685  004AC2  ECD2  F024         	call	_updateServoPosition	;wreg free
 15686                           
 15687                           ;sort.c: 441: updateServoPosition(1050, 3);
 15688  004AC6  0E04               	movlw	4
 15689  004AC8  0100               	movlb	0	; () banked
 15690  004ACA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15691  004ACC  0E1A               	movlw	26
 15692  004ACE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15693  004AD0  0E00               	movlw	0
 15694  004AD2  0100               	movlb	0	; () banked
 15695  004AD4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15696  004AD6  0E03               	movlw	3
 15697  004AD8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15698  004ADA  ECD2  F024         	call	_updateServoPosition	;wreg free
 15699                           
 15700                           ;sort.c: 442: TMR1ON = 1;
 15701  004ADE  80CD               	bsf	4045,0,c	;volatile
 15702                           
 15703                           ;sort.c: 443: was_low_1 = 0;
 15704  004AE0  0E00               	movlw	0
 15705  004AE2  6E78               	movwf	_was_low_1+1,c	;volatile
 15706  004AE4  0E00               	movlw	0
 15707  004AE6  6E77               	movwf	_was_low_1,c	;volatile
 15708                           
 15709                           ;sort.c: 445: _delay((unsigned long)((5)*(32000000/4000.0)));
 15710  004AE8  0E34               	movlw	52
 15711  004AEA  0100               	movlb	0	; () banked
 15712  004AEC  6F88               	movwf	??_initServos& (0+255),b
 15713  004AEE  0EF1               	movlw	241
 15714  004AF0                     u10797:
 15715  004AF0  2EE8               	decfsz	wreg,f,c
 15716  004AF2  D7FE               	bra	u10797
 15717  004AF4  2F88               	decfsz	??_initServos& (0+255),f,b
 15718  004AF6  D7FC               	bra	u10797
 15719  004AF8  D000               	nop2	
 15720                           
 15721                           ;sort.c: 447: TMR3ON = 1;
 15722  004AFA  80B1               	bsf	4017,0,c	;volatile
 15723                           
 15724                           ;sort.c: 448: was_low_3 = 0;
 15725  004AFC  0E00               	movlw	0
 15726  004AFE  6E7C               	movwf	_was_low_3+1,c	;volatile
 15727  004B00  0E00               	movlw	0
 15728  004B02  6E7B               	movwf	_was_low_3,c	;volatile
 15729                           
 15730                           ;sort.c: 451: _delay((unsigned long)((1)*(32000000/4000.0)));
 15731  004B04  0E0B               	movlw	11
 15732  004B06  0100               	movlb	0	; () banked
 15733  004B08  6F88               	movwf	??_initServos& (0+255),b
 15734  004B0A  0E62               	movlw	98
 15735  004B0C                     u10807:
 15736  004B0C  2EE8               	decfsz	wreg,f,c
 15737  004B0E  D7FE               	bra	u10807
 15738  004B10  2F88               	decfsz	??_initServos& (0+255),f,b
 15739  004B12  D7FC               	bra	u10807
 15740  004B14  F000               	nop	
 15741                           
 15742                           ;sort.c: 452: LATBbits.LATB3 = 0;
 15743  004B16  968A               	bcf	3978,3,c	;volatile
 15744                           
 15745                           ;sort.c: 453: TMR2ON = 1;
 15746  004B18  84CA               	bsf	4042,2,c	;volatile
 15747                           
 15748                           ;sort.c: 454: was_low_2 = 0;
 15749  004B1A  0E00               	movlw	0
 15750  004B1C  6E7A               	movwf	_was_low_2+1,c	;volatile
 15751  004B1E  0E00               	movlw	0
 15752  004B20  6E79               	movwf	_was_low_2,c	;volatile
 15753                           
 15754                           ;sort.c: 456: LATCbits.LATC0 = 1;
 15755  004B22  808B               	bsf	3979,0,c	;volatile
 15756  004B24  0012               	return		;funcret
 15757  004B26                     __end_of_initServos:
 15758                           	opt stack 0
 15759                           tblptru	equ	0xFF8
 15760                           tblptrh	equ	0xFF7
 15761                           tblptrl	equ	0xFF6
 15762                           tablat	equ	0xFF5
 15763                           prodh	equ	0xFF4
 15764                           prodl	equ	0xFF3
 15765                           intcon	equ	0xFF2
 15766                           intcon2	equ	0xFF1
 15767                           intcon3	equ	0xFF0
 15768                           postinc0	equ	0xFEE
 15769                           wreg	equ	0xFE8
 15770                           postdec1	equ	0xFE5
 15771                           fsr1l	equ	0xFE1
 15772                           indf2	equ	0xFDF
 15773                           postinc2	equ	0xFDE
 15774                           postdec2	equ	0xFDD
 15775                           fsr2h	equ	0xFDA
 15776                           fsr2l	equ	0xFD9
 15777                           status	equ	0xFD8
 15778                           
 15779 ;; *************** function _updateServoPosition *****************
 15780 ;; Defined at:
 15781 ;;		line 524 in file "sort.c"
 15782 ;; Parameters:    Size  Location     Type
 15783 ;;  time_us         2    0[BANK0 ] int 
 15784 ;;  timer           2    2[BANK0 ] int 
 15785 ;; Auto vars:     Size  Location     Type
 15786 ;;  my_time         2    6[BANK0 ] unsigned int 
 15787 ;; Return value:  Size  Location     Type
 15788 ;;                  1    wreg      void 
 15789 ;; Registers used:
 15790 ;;		wreg, status,2, status,0
 15791 ;; Tracked objects:
 15792 ;;		On entry : 0/0
 15793 ;;		On exit  : 0/0
 15794 ;;		Unchanged: 0/0
 15795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15796 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15798 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15799 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15800 ;;Total ram usage:        8 bytes
 15801 ;; Hardware stack levels used:    1
 15802 ;; Hardware stack levels required when called:    7
 15803 ;; This function calls:
 15804 ;;		Nothing
 15805 ;; This function is called by:
 15806 ;;		_Distribution
 15807 ;;		_initServos
 15808 ;;		_actuatorTest
 15809 ;;		_BothServos
 15810 ;; This function uses a non-reentrant model
 15811 ;;
 15812                           
 15813                           	psect	text49
 15814  0049A4                     __ptext49:
 15815                           	opt stack 0
 15816  0049A4                     _updateServoPosition:
 15817                           	opt stack 20
 15818                           
 15819                           ;sort.c: 525: unsigned int my_time = 65535 - time_us;
 15820                           
 15821                           ;incstack = 0
 15822  0049A4  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15823  0049A8  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15824  0049AC  0100               	movlb	0	; () banked
 15825  0049AE  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15826  0049B0  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15827  0049B2  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15828  0049B4  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15829  0049B6  0EFF               	movlw	255
 15830  0049B8  0100               	movlb	0	; () banked
 15831  0049BA  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15832  0049BC  0100               	movlb	0	; () banked
 15833  0049BE  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15834  0049C0  0EFF               	movlw	255
 15835  0049C2  0100               	movlb	0	; () banked
 15836  0049C4  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15837  0049C6  0100               	movlb	0	; () banked
 15838  0049C8  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15839                           
 15840                           ;sort.c: 526: switch(timer){
 15841  0049CA  D01D               	goto	l6696
 15842  0049CC                     l6690:
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;sort.c: 528: servoTimes[0] = my_time >> 8;
 15846  0049CC  0100               	movlb	0	; () banked
 15847  0049CE  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15848  0049D0  0100               	movlb	0	; () banked
 15849  0049D2  6FDA               	movwf	_servoTimes& (0+255),b
 15850  0049D4  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15851                           
 15852                           ;sort.c: 529: servoTimes[1] = my_time & 0xFF;
 15853  0049D6  0100               	movlb	0	; () banked
 15854  0049D8  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15855  0049DA  0100               	movlb	0	; () banked
 15856  0049DC  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15857  0049DE  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15858                           
 15859                           ; BSR set to: 0
 15860                           ;sort.c: 531: pan_servo_state = time_us;
 15861  0049E0  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15862  0049E4  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15863  0049E8                     l892:
 15864                           
 15865                           ; BSR set to: 0
 15866                           ;sort.c: 533: servoTimes[2] = my_time >> 8;
 15867  0049E8  0100               	movlb	0	; () banked
 15868  0049EA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15869  0049EC  0100               	movlb	0	; () banked
 15870  0049EE  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15871  0049F0  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15872                           
 15873                           ;sort.c: 534: servoTimes[3] = my_time & 0xFF;
 15874  0049F2  0100               	movlb	0	; () banked
 15875  0049F4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15876  0049F6  0100               	movlb	0	; () banked
 15877  0049F8  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15878  0049FA  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15879                           
 15880                           ; BSR set to: 0
 15881                           ;sort.c: 536: tilt_servo_state = time_us;
 15882  0049FC  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15883  004A00  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15884                           
 15885                           ;sort.c: 537: }
 15886  004A04  0012               	return	
 15887  004A06                     l6696:
 15888                           
 15889                           ; BSR set to: 0
 15890  004A06  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15891  004A0A  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15892                           
 15893                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15894                           ; Switch size 1, requested type "space"
 15895                           ; Number of cases is 1, Range of values is 0 to 0
 15896                           ; switch strategies available:
 15897                           ; Name         Instructions Cycles
 15898                           ; simple_byte            4     3 (average)
 15899                           ;	Chosen strategy is simple_byte
 15900  004A0E  0100               	movlb	0	; () banked
 15901  004A10  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15902  004A12  0A00               	xorlw	0	; case 0
 15903  004A14  A4D8               	btfss	status,2,c
 15904  004A16  0012               	return	
 15905                           
 15906                           ; BSR set to: 0
 15907                           ; Switch size 1, requested type "space"
 15908                           ; Number of cases is 2, Range of values is 1 to 3
 15909                           ; switch strategies available:
 15910                           ; Name         Instructions Cycles
 15911                           ; simple_byte            7     4 (average)
 15912                           ;	Chosen strategy is simple_byte
 15913  004A18  0100               	movlb	0	; () banked
 15914  004A1A  5184               	movf	??_updateServoPosition& (0+255),w,b
 15915  004A1C  0A01               	xorlw	1	; case 1
 15916  004A1E  B4D8               	btfsc	status,2,c
 15917  004A20  D7D5               	goto	l6690
 15918  004A22  0A02               	xorlw	2	; case 3
 15919  004A24  A4D8               	btfss	status,2,c
 15920  004A26  0012               	return	
 15921  004A28  D7DF               	goto	l892
 15922  004A2A                     __end_of_updateServoPosition:
 15923                           	opt stack 0
 15924                           tblptru	equ	0xFF8
 15925                           tblptrh	equ	0xFF7
 15926                           tblptrl	equ	0xFF6
 15927                           tablat	equ	0xFF5
 15928                           prodh	equ	0xFF4
 15929                           prodl	equ	0xFF3
 15930                           intcon	equ	0xFF2
 15931                           intcon2	equ	0xFF1
 15932                           intcon3	equ	0xFF0
 15933                           postinc0	equ	0xFEE
 15934                           wreg	equ	0xFE8
 15935                           postdec1	equ	0xFE5
 15936                           fsr1l	equ	0xFE1
 15937                           indf2	equ	0xFDF
 15938                           postinc2	equ	0xFDE
 15939                           postdec2	equ	0xFDD
 15940                           fsr2h	equ	0xFDA
 15941                           fsr2l	equ	0xFD9
 15942                           status	equ	0xFD8
 15943                           
 15944 ;; *************** function _BlockerTest *****************
 15945 ;; Defined at:
 15946 ;;		line 599 in file "Test.c"
 15947 ;; Parameters:    Size  Location     Type
 15948 ;;		None
 15949 ;; Auto vars:     Size  Location     Type
 15950 ;;  i               2   44[BANK0 ] int 
 15951 ;;  cond_flag       2   48[BANK0 ] int 
 15952 ;;  cam_flag        2   46[BANK0 ] int 
 15953 ;; Return value:  Size  Location     Type
 15954 ;;                  1    wreg      void 
 15955 ;; Registers used:
 15956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15957 ;; Tracked objects:
 15958 ;;		On entry : 0/0
 15959 ;;		On exit  : 0/0
 15960 ;;		Unchanged: 0/0
 15961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15963 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15965 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15966 ;;Total ram usage:        7 bytes
 15967 ;; Hardware stack levels used:    1
 15968 ;; Hardware stack levels required when called:   10
 15969 ;; This function calls:
 15970 ;;		_lcdInst
 15971 ;;		_printf
 15972 ;; This function is called by:
 15973 ;;		_Test
 15974 ;; This function uses a non-reentrant model
 15975 ;;
 15976                           
 15977                           	psect	text50
 15978  003BBE                     __ptext50:
 15979                           	opt stack 0
 15980  003BBE                     _BlockerTest:
 15981                           	opt stack 19
 15982                           
 15983                           ;Test.c: 600: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15984                           
 15985                           ; BSR set to: 0
 15986                           ;incstack = 0
 15987  003BBE  0E01               	movlw	1
 15988  003BC0  ECA6  F02B         	call	_lcdInst
 15989  003BC4  0E68               	movlw	104
 15990  003BC6  0100               	movlb	0	; () banked
 15991  003BC8  6FAB               	movwf	??_BlockerTest& (0+255),b
 15992  003BCA  0EE4               	movlw	228
 15993  003BCC                     u10817:
 15994  003BCC  2EE8               	decfsz	wreg,f,c
 15995  003BCE  D7FE               	bra	u10817
 15996  003BD0  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15997  003BD2  D7FC               	bra	u10817
 15998  003BD4  F000               	nop	
 15999  003BD6  0E80               	movlw	128
 16000  003BD8  ECA6  F02B         	call	_lcdInst
 16001                           
 16002                           ;Test.c: 601: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16003  003BDC  0E45               	movlw	low STR_122
 16004  003BDE  0100               	movlb	0	; () banked
 16005  003BE0  6F8E               	movwf	printf@f& (0+255),b
 16006  003BE2  0EFB               	movlw	high STR_122
 16007  003BE4  0100               	movlb	0	; () banked
 16008  003BE6  6F8F               	movwf	(printf@f+1)& (0+255),b
 16009  003BE8  A480               	btfss	3968,2,c	;volatile
 16010  003BEA  D004               	goto	u7600
 16011  003BEC  0100               	movlb	0	; () banked
 16012  003BEE  6BAB               	clrf	??_BlockerTest& (0+255),b
 16013  003BF0  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16014  003BF2  D002               	goto	u7608
 16015  003BF4                     u7600:
 16016  003BF4  0100               	movlb	0	; () banked
 16017  003BF6  6BAB               	clrf	??_BlockerTest& (0+255),b
 16018  003BF8                     u7608:
 16019  003BF8  0100               	movlb	0	; () banked
 16020  003BFA  51AB               	movf	??_BlockerTest& (0+255),w,b
 16021  003BFC  0100               	movlb	0	; () banked
 16022  003BFE  6F90               	movwf	(?_printf+2)& (0+255),b
 16023  003C00  6B91               	clrf	(?_printf+3)& (0+255),b
 16024  003C02  EC87  F00B         	call	_printf	;wreg free
 16025                           
 16026                           ;Test.c: 602: lcdInst(0b11000000);;
 16027  003C06  0EC0               	movlw	192
 16028  003C08  ECA6  F02B         	call	_lcdInst
 16029                           
 16030                           ;Test.c: 603: printf("OTHER: CAM TOGGLE");
 16031  003C0C  0E21               	movlw	low STR_123
 16032  003C0E  0100               	movlb	0	; () banked
 16033  003C10  6F8E               	movwf	printf@f& (0+255),b
 16034  003C12  0EFB               	movlw	high STR_123
 16035  003C14  0100               	movlb	0	; () banked
 16036  003C16  6F8F               	movwf	(printf@f+1)& (0+255),b
 16037  003C18  EC87  F00B         	call	_printf	;wreg free
 16038                           
 16039                           ;Test.c: 604: int cam_flag = 1;
 16040  003C1C  0E00               	movlw	0
 16041  003C1E  0100               	movlb	0	; () banked
 16042  003C20  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16043  003C22  0E01               	movlw	1
 16044  003C24  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 16045                           
 16046                           ; BSR set to: 0
 16047                           ;Test.c: 605: int cond_flag = 0;
 16048  003C26  0E00               	movlw	0
 16049  003C28  0100               	movlb	0	; () banked
 16050  003C2A  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16051  003C2C  0E00               	movlw	0
 16052  003C2E  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 16053                           
 16054                           ; BSR set to: 0
 16055                           ;Test.c: 607: while(PORTBbits.RB1 == 0){
 16056                           
 16057                           ;Test.c: 606: while(1){
 16058  003C30  D018               	goto	l8766
 16059  003C32                     l8762:
 16060                           
 16061                           ;Test.c: 608: lcdInst(0b10000000);;
 16062  003C32  0E80               	movlw	128
 16063  003C34  ECA6  F02B         	call	_lcdInst
 16064                           
 16065                           ;Test.c: 609: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16066  003C38  0E45               	movlw	low STR_122
 16067  003C3A  0100               	movlb	0	; () banked
 16068  003C3C  6F8E               	movwf	printf@f& (0+255),b
 16069  003C3E  0EFB               	movlw	high STR_122
 16070  003C40  0100               	movlb	0	; () banked
 16071  003C42  6F8F               	movwf	(printf@f+1)& (0+255),b
 16072  003C44  A480               	btfss	3968,2,c	;volatile
 16073  003C46  D004               	goto	u7610
 16074  003C48  0100               	movlb	0	; () banked
 16075  003C4A  6BAB               	clrf	??_BlockerTest& (0+255),b
 16076  003C4C  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16077  003C4E  D002               	goto	u7618
 16078  003C50                     u7610:
 16079  003C50  0100               	movlb	0	; () banked
 16080  003C52  6BAB               	clrf	??_BlockerTest& (0+255),b
 16081  003C54                     u7618:
 16082  003C54  0100               	movlb	0	; () banked
 16083  003C56  51AB               	movf	??_BlockerTest& (0+255),w,b
 16084  003C58  0100               	movlb	0	; () banked
 16085  003C5A  6F90               	movwf	(?_printf+2)& (0+255),b
 16086  003C5C  6B91               	clrf	(?_printf+3)& (0+255),b
 16087  003C5E  EC87  F00B         	call	_printf	;wreg free
 16088  003C62                     l8766:
 16089  003C62  A281               	btfss	3969,1,c	;volatile
 16090  003C64  D7E6               	goto	l8762
 16091                           
 16092                           ;Test.c: 610: }
 16093                           ;Test.c: 611: if(PORTB >> 4 == 0b1111){
 16094  003C66  3881               	swapf	3969,w,c	;volatile
 16095  003C68  0B0F               	andlw	15
 16096  003C6A  0A0F               	xorlw	15
 16097  003C6C  B4D8               	btfsc	status,2,c
 16098  003C6E  0012               	return	
 16099                           
 16100                           ;Test.c: 614: else if(PORTB >> 4 == 0b0001){
 16101                           
 16102                           ;Test.c: 613: }
 16103                           
 16104                           ;Test.c: 612: break;
 16105  003C70  3881               	swapf	3969,w,c	;volatile
 16106  003C72  0B0F               	andlw	15
 16107  003C74  06E8               	decf	wreg,f,c
 16108  003C76  A4D8               	btfss	status,2,c
 16109  003C78  D016               	goto	l8784
 16110                           
 16111                           ;Test.c: 615: if(cond_flag){
 16112  003C7A  0100               	movlb	0	; () banked
 16113  003C7C  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 16114  003C7E  0100               	movlb	0	; () banked
 16115  003C80  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16116  003C82  B4D8               	btfsc	status,2,c
 16117  003C84  D007               	goto	l1415
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;Test.c: 616: LATAbits.LATA3 = 1;
 16121  003C86  8689               	bsf	3977,3,c	;volatile
 16122  003C88  D006               	goto	l8782
 16123  003C8A                     u7661:
 16124  003C8A  0E01               	movlw	1
 16125  003C8C                     u7670:
 16126  003C8C  0100               	movlb	0	; () banked
 16127  003C8E  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 16128  003C90  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 16129                           
 16130                           ;Test.c: 618: }
 16131  003C92  D054               	goto	l8808
 16132  003C94                     l1415:
 16133                           
 16134                           ; BSR set to: 0
 16135                           ;Test.c: 619: else{
 16136                           ;Test.c: 620: LATAbits.LATA3 = 0;
 16137  003C94  9689               	bcf	3977,3,c	;volatile
 16138  003C96                     l8782:
 16139                           
 16140                           ; BSR set to: 0
 16141                           ;Test.c: 621: cond_flag = !cond_flag;
 16142  003C96  0100               	movlb	0	; () banked
 16143  003C98  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 16144  003C9A  0100               	movlb	0	; () banked
 16145  003C9C  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16146  003C9E  B4D8               	btfsc	status,2,c
 16147  003CA0  D7F4               	goto	u7661
 16148  003CA2  0E00               	movlw	0
 16149  003CA4  D7F3               	goto	u7670
 16150  003CA6                     l8784:
 16151                           
 16152                           ;Test.c: 624: else{
 16153                           ;Test.c: 625: if(cam_flag){
 16154  003CA6  0100               	movlb	0	; () banked
 16155  003CA8  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 16156  003CAA  0100               	movlb	0	; () banked
 16157  003CAC  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 16158  003CAE  B4D8               	btfsc	status,2,c
 16159  003CB0  D007               	goto	l8790
 16160                           
 16161                           ; BSR set to: 0
 16162                           ;Test.c: 626: LATCbits.LATC0 = 1;
 16163  003CB2  808B               	bsf	3979,0,c	;volatile
 16164  003CB4  D023               	goto	l8802
 16165  003CB6                     u7711:
 16166  003CB6  0E01               	movlw	1
 16167  003CB8                     u7720:
 16168  003CB8  0100               	movlb	0	; () banked
 16169  003CBA  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 16170  003CBC  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 16171                           
 16172                           ;Test.c: 628: }
 16173  003CBE  D03E               	goto	l8808
 16174  003CC0                     l8790:
 16175                           
 16176                           ; BSR set to: 0
 16177                           ;Test.c: 629: else{
 16178                           ;Test.c: 630: for(int i=0;i<5000;i++)
 16179  003CC0  0E00               	movlw	0
 16180  003CC2  0100               	movlb	0	; () banked
 16181  003CC4  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 16182  003CC6  0E00               	movlw	0
 16183  003CC8  6FAC               	movwf	BlockerTest@i& (0+255),b
 16184  003CCA                     l8792:
 16185                           
 16186                           ; BSR set to: 0
 16187  003CCA  0100               	movlb	0	; () banked
 16188  003CCC  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 16189  003CCE  D008               	goto	l1420
 16190  003CD0  0E88               	movlw	136
 16191  003CD2  0100               	movlb	0	; () banked
 16192  003CD4  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 16193  003CD6  0E13               	movlw	19
 16194  003CD8  0100               	movlb	0	; () banked
 16195  003CDA  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 16196  003CDC  B0D8               	btfsc	status,0,c
 16197  003CDE  D00D               	goto	l1421
 16198  003CE0                     l1420:
 16199                           
 16200                           ; BSR set to: 0
 16201                           ;Test.c: 631: {
 16202                           ;Test.c: 632: LATCbits.LATC0 = 1;
 16203  003CE0  808B               	bsf	3979,0,c	;volatile
 16204                           
 16205                           ; BSR set to: 0
 16206                           ;Test.c: 633: _delay((unsigned long)((10)*(32000000/4000000.0)));
 16207  003CE2  0E1A               	movlw	26
 16208  003CE4                     u10827:
 16209  003CE4  2EE8               	decfsz	wreg,f,c
 16210  003CE6  D7FE               	bra	u10827
 16211  003CE8  D000               	nop2	
 16212                           
 16213                           ;Test.c: 634: LATCbits.LATC0 = 0;
 16214  003CEA  908B               	bcf	3979,0,c	;volatile
 16215                           
 16216                           ;Test.c: 635: _delay((unsigned long)((90)*(32000000/4000000.0)));
 16217  003CEC  0EF0               	movlw	240
 16218  003CEE                     u10837:
 16219  003CEE  2EE8               	decfsz	wreg,f,c
 16220  003CF0  D7FE               	bra	u10837
 16221  003CF2  0100               	movlb	0	; () banked
 16222  003CF4  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 16223  003CF6  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 16224  003CF8  D7E8               	goto	l8792
 16225  003CFA                     l1421:
 16226                           
 16227                           ; BSR set to: 0
 16228                           ;Test.c: 636: }
 16229                           ;Test.c: 637: LATCbits.LATC0 = 0;
 16230  003CFA  908B               	bcf	3979,0,c	;volatile
 16231  003CFC                     l8802:
 16232                           
 16233                           ; BSR set to: 0
 16234                           ;Test.c: 638: cam_flag = !cam_flag;
 16235  003CFC  0100               	movlb	0	; () banked
 16236  003CFE  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 16237  003D00  0100               	movlb	0	; () banked
 16238  003D02  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 16239  003D04  B4D8               	btfsc	status,2,c
 16240  003D06  D7D7               	goto	u7711
 16241  003D08  0E00               	movlw	0
 16242  003D0A  D7D6               	goto	u7720
 16243  003D0C                     l8804:
 16244                           
 16245                           ;Test.c: 643: lcdInst(0b10000000);;
 16246  003D0C  0E80               	movlw	128
 16247  003D0E  ECA6  F02B         	call	_lcdInst
 16248                           
 16249                           ;Test.c: 644: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16250  003D12  0E45               	movlw	low STR_122
 16251  003D14  0100               	movlb	0	; () banked
 16252  003D16  6F8E               	movwf	printf@f& (0+255),b
 16253  003D18  0EFB               	movlw	high STR_122
 16254  003D1A  0100               	movlb	0	; () banked
 16255  003D1C  6F8F               	movwf	(printf@f+1)& (0+255),b
 16256  003D1E  A480               	btfss	3968,2,c	;volatile
 16257  003D20  D004               	goto	u7770
 16258  003D22  0100               	movlb	0	; () banked
 16259  003D24  6BAB               	clrf	??_BlockerTest& (0+255),b
 16260  003D26  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16261  003D28  D002               	goto	u7778
 16262  003D2A                     u7770:
 16263  003D2A  0100               	movlb	0	; () banked
 16264  003D2C  6BAB               	clrf	??_BlockerTest& (0+255),b
 16265  003D2E                     u7778:
 16266  003D2E  0100               	movlb	0	; () banked
 16267  003D30  51AB               	movf	??_BlockerTest& (0+255),w,b
 16268  003D32  0100               	movlb	0	; () banked
 16269  003D34  6F90               	movwf	(?_printf+2)& (0+255),b
 16270  003D36  6B91               	clrf	(?_printf+3)& (0+255),b
 16271  003D38  EC87  F00B         	call	_printf	;wreg free
 16272  003D3C                     l8808:
 16273  003D3C  A281               	btfss	3969,1,c	;volatile
 16274  003D3E  D791               	goto	l8766
 16275  003D40  D7E5               	goto	l8804
 16276  003D42                     __end_of_BlockerTest:
 16277                           	opt stack 0
 16278                           tblptru	equ	0xFF8
 16279                           tblptrh	equ	0xFF7
 16280                           tblptrl	equ	0xFF6
 16281                           tablat	equ	0xFF5
 16282                           prodh	equ	0xFF4
 16283                           prodl	equ	0xFF3
 16284                           intcon	equ	0xFF2
 16285                           intcon2	equ	0xFF1
 16286                           intcon3	equ	0xFF0
 16287                           postinc0	equ	0xFEE
 16288                           wreg	equ	0xFE8
 16289                           postdec1	equ	0xFE5
 16290                           fsr1l	equ	0xFE1
 16291                           indf2	equ	0xFDF
 16292                           postinc2	equ	0xFDE
 16293                           postdec2	equ	0xFDD
 16294                           fsr2h	equ	0xFDA
 16295                           fsr2l	equ	0xFD9
 16296                           status	equ	0xFD8
 16297                           
 16298 ;; *************** function _printf *****************
 16299 ;; Defined at:
 16300 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 16301 ;; Parameters:    Size  Location     Type
 16302 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 16303 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 16304 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 16305 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 16306 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 16307 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 16308 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 16309 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 16310 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 16311 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 16312 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 16313 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 16314 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 16315 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 16316 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 16317 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 16318 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 16319 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 16320 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 16321 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 16322 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 16323 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 16324 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 16325 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 16326 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 16327 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 16328 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 16329 ;; Auto vars:     Size  Location     Type
 16330 ;;  tmpval          4    0        struct .
 16331 ;;  width           2   41[BANK0 ] int 
 16332 ;;  val             2   37[BANK0 ] unsigned int 
 16333 ;;  len             2   35[BANK0 ] unsigned int 
 16334 ;;  ap              2   33[BANK0 ] PTR void [1]
 16335 ;;		 -> ?i2_printf(2), ?_printf(2), 
 16336 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 16337 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 16338 ;;  c               1   40[BANK0 ] char 
 16339 ;;  flag            1   39[BANK0 ] unsigned char 
 16340 ;;  prec            1   30[BANK0 ] char 
 16341 ;; Return value:  Size  Location     Type
 16342 ;;                  2   14[BANK0 ] int 
 16343 ;; Registers used:
 16344 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16345 ;; Tracked objects:
 16346 ;;		On entry : 0/0
 16347 ;;		On exit  : 0/0
 16348 ;;		Unchanged: 0/0
 16349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16350 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16351 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16352 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16353 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16354 ;;Total ram usage:       29 bytes
 16355 ;; Hardware stack levels used:    1
 16356 ;; Hardware stack levels required when called:    9
 16357 ;; This function calls:
 16358 ;;		___lwdiv
 16359 ;;		___lwmod
 16360 ;;		___wmul
 16361 ;;		_isdigit
 16362 ;;		_putch
 16363 ;; This function is called by:
 16364 ;;		_UI
 16365 ;;		_change_state_to_menu_start
 16366 ;;		_change_state_to_menu_12
 16367 ;;		_change_state_to_menu_22
 16368 ;;		_printRTC
 16369 ;;		_EEPROM_write
 16370 ;;		_Test
 16371 ;;		_algorithmTest
 16372 ;;		_sensorTest
 16373 ;;		_actuatorTest
 16374 ;;		_BothServos
 16375 ;;		_PortTestDC
 16376 ;;		_PlatformTest
 16377 ;;		_SpeedTest
 16378 ;;		_BlockerTest
 16379 ;;		_arm
 16380 ;;		_PortTestPusher
 16381 ;;		_ToggleTestA5
 16382 ;; This function uses a non-reentrant model
 16383 ;;
 16384                           
 16385                           	psect	text51
 16386  00170E                     __ptext51:
 16387                           	opt stack 0
 16388  00170E                     _printf:
 16389                           	opt stack 18
 16390                           
 16391                           ;doprnt.c: 466: va_list ap;
 16392                           ;doprnt.c: 499: signed char c;
 16393                           ;doprnt.c: 501: int width;
 16394                           ;doprnt.c: 506: signed char prec;
 16395                           ;doprnt.c: 508: unsigned char flag;
 16396                           ;doprnt.c: 523: union {
 16397                           ;doprnt.c: 524: unsigned long vd;
 16398                           ;doprnt.c: 525: double integ;
 16399                           ;doprnt.c: 526: } tmpval;
 16400                           ;doprnt.c: 528: unsigned int val;
 16401                           ;doprnt.c: 529: unsigned len;
 16402                           ;doprnt.c: 530: const char * cp;
 16403                           ;doprnt.c: 533: *ap = __va_start();
 16404                           
 16405                           ;incstack = 0
 16406  00170E  0E90               	movlw	low (?_printf+2)
 16407  001710  0100               	movlb	0	; () banked
 16408  001712  6FA1               	movwf	printf@ap& (0+255),b
 16409  001714  0E00               	movlw	high (?_printf+2)
 16410  001716  0100               	movlb	0	; () banked
 16411  001718  6FA2               	movwf	(printf@ap+1)& (0+255),b
 16412                           
 16413                           ;doprnt.c: 536: while(c = *f++) {
 16414  00171A  D205               	goto	l6650
 16415  00171C                     l6520:
 16416                           
 16417                           ; BSR set to: 0
 16418                           ;doprnt.c: 538: if(c != '%')
 16419  00171C  0E25               	movlw	37
 16420  00171E  0100               	movlb	0	; () banked
 16421  001720  19A8               	xorwf	printf@c& (0+255),w,b
 16422  001722  B4D8               	btfsc	status,2,c
 16423  001724  D005               	goto	l6524
 16424                           
 16425                           ; BSR set to: 0
 16426                           ;doprnt.c: 540: {
 16427                           ;doprnt.c: 541: (putch(c) );
 16428  001726  0100               	movlb	0	; () banked
 16429  001728  51A8               	movf	printf@c& (0+255),w,b
 16430  00172A  EC9E  F02B         	call	_putch
 16431                           
 16432                           ;doprnt.c: 542: continue;
 16433  00172E  D1FB               	goto	l6650
 16434  001730                     l6524:
 16435                           
 16436                           ;doprnt.c: 543: }
 16437                           ;doprnt.c: 546: width = 0;
 16438  001730  0E00               	movlw	0
 16439  001732  0100               	movlb	0	; () banked
 16440  001734  6FAA               	movwf	(printf@width+1)& (0+255),b
 16441  001736  0E00               	movlw	0
 16442  001738  6FA9               	movwf	printf@width& (0+255),b
 16443                           
 16444                           ;doprnt.c: 548: flag = 0;
 16445  00173A  0E00               	movlw	0
 16446  00173C  0100               	movlb	0	; () banked
 16447  00173E  6FA7               	movwf	printf@flag& (0+255),b
 16448                           
 16449                           ; BSR set to: 0
 16450                           ;doprnt.c: 551: switch(*f) {
 16451                           
 16452                           ;doprnt.c: 550: for(;;) {
 16453  001740  D005               	goto	l6530
 16454  001742                     l6526:
 16455                           
 16456                           ;doprnt.c: 580: flag |= 0x04;
 16457  001742  0100               	movlb	0	; () banked
 16458  001744  85A7               	bsf	printf@flag& (0+255),2,b
 16459                           
 16460                           ;doprnt.c: 581: f++;
 16461  001746  0100               	movlb	0	; () banked
 16462  001748  4B8E               	infsnz	printf@f& (0+255),f,b
 16463  00174A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16464  00174C                     l6530:
 16465  00174C  C08E  FFF6         	movff	printf@f,tblptrl
 16466  001750  C08F  FFF7         	movff	printf@f+1,tblptrh
 16467  001754                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16468  001754  6AF8               	clrf	tblptru,c
 16469  001756                     	endif
 16470  001756                     	if	0	;tblptru may be non-zero
 16471  001756                     	endif
 16472  001756  0008               	tblrd		*
 16473  001758  50F5               	movf	tablat,w,c
 16474                           
 16475                           ; Switch size 1, requested type "space"
 16476                           ; Number of cases is 1, Range of values is 48 to 48
 16477                           ; switch strategies available:
 16478                           ; Name         Instructions Cycles
 16479                           ; simple_byte            4     3 (average)
 16480                           ;	Chosen strategy is simple_byte
 16481  00175A  0A30               	xorlw	48	; case 48
 16482  00175C  B4D8               	btfsc	status,2,c
 16483  00175E  D7F1               	goto	l6526
 16484                           
 16485                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 16486                           
 16487                           ;doprnt.c: 586: }
 16488                           
 16489                           ;doprnt.c: 585: break;
 16490  001760  C08E  FFF6         	movff	printf@f,tblptrl
 16491  001764  C08F  FFF7         	movff	printf@f+1,tblptrh
 16492  001768                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16493  001768  6AF8               	clrf	tblptru,c
 16494  00176A                     	endif
 16495  00176A                     	if	0	;tblptru may be non-zero
 16496  00176A                     	endif
 16497  00176A  0008               	tblrd		*
 16498  00176C  50F5               	movf	tablat,w,c
 16499  00176E  ECB2  F02A         	call	_isdigit
 16500  001772  A0D8               	btfss	status,0,c
 16501  001774  D0D2               	goto	l6578
 16502                           
 16503                           ;doprnt.c: 598: width = 0;
 16504  001776  0E00               	movlw	0
 16505  001778  0100               	movlb	0	; () banked
 16506  00177A  6FAA               	movwf	(printf@width+1)& (0+255),b
 16507  00177C  0E00               	movlw	0
 16508  00177E  6FA9               	movwf	printf@width& (0+255),b
 16509  001780                     l6536:
 16510                           
 16511                           ;doprnt.c: 600: width *= 10;
 16512  001780  C0A9  F080         	movff	printf@width,___wmul@multiplier
 16513  001784  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 16514  001788  0E00               	movlw	0
 16515  00178A  0100               	movlb	0	; () banked
 16516  00178C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16517  00178E  0E0A               	movlw	10
 16518  001790  6F82               	movwf	___wmul@multiplicand& (0+255),b
 16519  001792  EC1B  F029         	call	___wmul	;wreg free
 16520  001796  C080  F0A9         	movff	?___wmul,printf@width
 16521  00179A  C081  F0AA         	movff	?___wmul+1,printf@width+1
 16522                           
 16523                           ;doprnt.c: 601: width += *f++ - '0';
 16524  00179E  0ED0               	movlw	208
 16525  0017A0  0100               	movlb	0	; () banked
 16526  0017A2  6F9A               	movwf	??_printf& (0+255),b
 16527  0017A4  0EFF               	movlw	255
 16528  0017A6  0100               	movlb	0	; () banked
 16529  0017A8  6F9B               	movwf	(??_printf+1)& (0+255),b
 16530  0017AA  C08E  FFF6         	movff	printf@f,tblptrl
 16531  0017AE  C08F  FFF7         	movff	printf@f+1,tblptrh
 16532  0017B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16533  0017B2  6AF8               	clrf	tblptru,c
 16534  0017B4                     	endif
 16535  0017B4                     	if	0	;tblptru may be non-zero
 16536  0017B4                     	endif
 16537  0017B4  0008               	tblrd		*
 16538  0017B6  50F5               	movf	tablat,w,c
 16539  0017B8  0100               	movlb	0	; () banked
 16540  0017BA  6F9C               	movwf	(??_printf+2)& (0+255),b
 16541  0017BC  6B9D               	clrf	(??_printf+3)& (0+255),b
 16542  0017BE  0100               	movlb	0	; () banked
 16543  0017C0  519A               	movf	??_printf& (0+255),w,b
 16544  0017C2  0100               	movlb	0	; () banked
 16545  0017C4  279C               	addwf	(??_printf+2)& (0+255),f,b
 16546  0017C6  0100               	movlb	0	; () banked
 16547  0017C8  519B               	movf	(??_printf+1)& (0+255),w,b
 16548  0017CA  0100               	movlb	0	; () banked
 16549  0017CC  239D               	addwfc	(??_printf+3)& (0+255),f,b
 16550  0017CE  0100               	movlb	0	; () banked
 16551  0017D0  519C               	movf	(??_printf+2)& (0+255),w,b
 16552  0017D2  0100               	movlb	0	; () banked
 16553  0017D4  27A9               	addwf	printf@width& (0+255),f,b
 16554  0017D6  0100               	movlb	0	; () banked
 16555  0017D8  519D               	movf	(??_printf+3)& (0+255),w,b
 16556  0017DA  0100               	movlb	0	; () banked
 16557  0017DC  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 16558                           
 16559                           ; BSR set to: 0
 16560  0017DE  0100               	movlb	0	; () banked
 16561  0017E0  4B8E               	infsnz	printf@f& (0+255),f,b
 16562  0017E2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16563                           
 16564                           ; BSR set to: 0
 16565                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 16566  0017E4  C08E  FFF6         	movff	printf@f,tblptrl
 16567  0017E8  C08F  FFF7         	movff	printf@f+1,tblptrh
 16568  0017EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16569  0017EC  6AF8               	clrf	tblptru,c
 16570  0017EE                     	endif
 16571  0017EE                     	if	0	;tblptru may be non-zero
 16572  0017EE                     	endif
 16573  0017EE  0008               	tblrd		*
 16574  0017F0  50F5               	movf	tablat,w,c
 16575  0017F2  ECB2  F02A         	call	_isdigit
 16576  0017F6  A0D8               	btfss	status,0,c
 16577  0017F8  D090               	goto	l6578
 16578  0017FA  D7C2               	goto	l6536
 16579  0017FC                     l6544:
 16580                           
 16581                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 16582  0017FC  C0A1  FFD9         	movff	printf@ap,fsr2l
 16583  001800  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16584  001804  CFDE F09F          	movff	postinc2,printf@cp
 16585  001808  CFDD F0A0          	movff	postdec2,printf@cp+1
 16586  00180C  0E02               	movlw	2
 16587  00180E  0100               	movlb	0	; () banked
 16588  001810  27A1               	addwf	printf@ap& (0+255),f,b
 16589  001812  0E00               	movlw	0
 16590  001814  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16591                           
 16592                           ; BSR set to: 0
 16593                           ;doprnt.c: 740: if(!cp)
 16594  001816  0100               	movlb	0	; () banked
 16595  001818  519F               	movf	printf@cp& (0+255),w,b
 16596  00181A  0100               	movlb	0	; () banked
 16597  00181C  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 16598  00181E  A4D8               	btfss	status,2,c
 16599  001820  D006               	goto	l6552
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;doprnt.c: 741: cp = "(null)";
 16603  001822  0EB5               	movlw	low STR_130
 16604  001824  0100               	movlb	0	; () banked
 16605  001826  6F9F               	movwf	printf@cp& (0+255),b
 16606  001828  0EFF               	movlw	high STR_130
 16607  00182A  0100               	movlb	0	; () banked
 16608  00182C  6FA0               	movwf	(printf@cp+1)& (0+255),b
 16609  00182E                     l6552:
 16610                           
 16611                           ; BSR set to: 0
 16612                           ;doprnt.c: 745: len = 0;
 16613  00182E  0E00               	movlw	0
 16614  001830  0100               	movlb	0	; () banked
 16615  001832  6FA4               	movwf	(printf@len+1)& (0+255),b
 16616  001834  0E00               	movlw	0
 16617  001836  6FA3               	movwf	printf@len& (0+255),b
 16618                           
 16619                           ;doprnt.c: 746: while(cp[len])
 16620  001838  D003               	goto	l6556
 16621  00183A                     l6554:
 16622                           
 16623                           ;doprnt.c: 747: len++;
 16624  00183A  0100               	movlb	0	; () banked
 16625  00183C  4BA3               	infsnz	printf@len& (0+255),f,b
 16626  00183E  2BA4               	incf	(printf@len+1)& (0+255),f,b
 16627  001840                     l6556:
 16628                           
 16629                           ; BSR set to: 0
 16630  001840  0100               	movlb	0	; () banked
 16631  001842  51A3               	movf	printf@len& (0+255),w,b
 16632  001844  0100               	movlb	0	; () banked
 16633  001846  259F               	addwf	printf@cp& (0+255),w,b
 16634  001848  0100               	movlb	0	; () banked
 16635  00184A  6F9A               	movwf	??_printf& (0+255),b
 16636  00184C  0100               	movlb	0	; () banked
 16637  00184E  51A4               	movf	(printf@len+1)& (0+255),w,b
 16638  001850  0100               	movlb	0	; () banked
 16639  001852  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 16640  001854  0100               	movlb	0	; () banked
 16641  001856  6F9B               	movwf	(??_printf+1)& (0+255),b
 16642  001858  C09A  FFF6         	movff	??_printf,tblptrl
 16643  00185C  C09B  FFF7         	movff	??_printf+1,tblptrh
 16644  001860  0E00               	movlw	low (__mediumconst shr (0+16))
 16645  001862  6EF8               	movwf	tblptru,c
 16646  001864  0E0F               	movlw	(high __ramtop+-1)
 16647  001866  64F7               	cpfsgt	tblptrh,c
 16648  001868  D003               	bra	u4957
 16649  00186A  0008               	tblrd		*
 16650  00186C  50F5               	movf	tablat,w,c
 16651  00186E  D005               	bra	u4950
 16652  001870                     u4957:
 16653  001870  CFF6 FFE9          	movff	tblptrl,fsr0l
 16654  001874  CFF7 FFEA          	movff	tblptrh,fsr0h
 16655  001878  50EF               	movf	indf0,w,c
 16656  00187A                     u4950:
 16657  00187A  0900               	iorlw	0
 16658  00187C  A4D8               	btfss	status,2,c
 16659  00187E  D7DD               	goto	l6554
 16660                           
 16661                           ;doprnt.c: 757: if(width > len)
 16662  001880  0100               	movlb	0	; () banked
 16663  001882  51A9               	movf	printf@width& (0+255),w,b
 16664  001884  0100               	movlb	0	; () banked
 16665  001886  5DA3               	subwf	printf@len& (0+255),w,b
 16666  001888  0100               	movlb	0	; () banked
 16667  00188A  51AA               	movf	(printf@width+1)& (0+255),w,b
 16668  00188C  0100               	movlb	0	; () banked
 16669  00188E  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 16670  001890  B0D8               	btfsc	status,0,c
 16671  001892  D009               	goto	l6562
 16672                           
 16673                           ; BSR set to: 0
 16674                           ;doprnt.c: 758: width -= len;
 16675  001894  0100               	movlb	0	; () banked
 16676  001896  51A3               	movf	printf@len& (0+255),w,b
 16677  001898  0100               	movlb	0	; () banked
 16678  00189A  5FA9               	subwf	printf@width& (0+255),f,b
 16679  00189C  0100               	movlb	0	; () banked
 16680  00189E  51A4               	movf	(printf@len+1)& (0+255),w,b
 16681  0018A0  0100               	movlb	0	; () banked
 16682  0018A2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16683  0018A4  D009               	goto	l6566
 16684  0018A6                     l6562:
 16685                           
 16686                           ; BSR set to: 0
 16687                           ;doprnt.c: 759: else
 16688                           ;doprnt.c: 760: width = 0;
 16689  0018A6  0E00               	movlw	0
 16690  0018A8  0100               	movlb	0	; () banked
 16691  0018AA  6FAA               	movwf	(printf@width+1)& (0+255),b
 16692  0018AC  0E00               	movlw	0
 16693  0018AE  6FA9               	movwf	printf@width& (0+255),b
 16694                           
 16695                           ; BSR set to: 0
 16696                           ;doprnt.c: 764: while(width--)
 16697  0018B0  D003               	goto	l6566
 16698  0018B2                     l6564:
 16699                           
 16700                           ; BSR set to: 0
 16701                           ;doprnt.c: 765: (putch(' ') );
 16702  0018B2  0E20               	movlw	32
 16703  0018B4  EC9E  F02B         	call	_putch
 16704  0018B8                     l6566:
 16705  0018B8  0100               	movlb	0	; () banked
 16706  0018BA  07A9               	decf	printf@width& (0+255),f,b
 16707  0018BC  A0D8               	btfss	status,0,c
 16708  0018BE  07AA               	decf	(printf@width+1)& (0+255),f,b
 16709  0018C0  0100               	movlb	0	; () banked
 16710  0018C2  29A9               	incf	printf@width& (0+255),w,b
 16711  0018C4  E1F6               	bnz	l6564
 16712  0018C6  0100               	movlb	0	; () banked
 16713  0018C8  29AA               	incf	(printf@width+1)& (0+255),w,b
 16714  0018CA  B4D8               	btfsc	status,2,c
 16715  0018CC  D017               	goto	l6572
 16716  0018CE  D7F1               	goto	l6564
 16717  0018D0                     l6568:
 16718                           
 16719                           ; BSR set to: 0
 16720                           ;doprnt.c: 768: (putch(*cp++) );
 16721  0018D0  C09F  FFF6         	movff	printf@cp,tblptrl
 16722  0018D4  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16723  0018D8  0E00               	movlw	low (__mediumconst shr (0+16))
 16724  0018DA  6EF8               	movwf	tblptru,c
 16725  0018DC  0E0F               	movlw	(high __ramtop+-1)
 16726  0018DE  64F7               	cpfsgt	tblptrh,c
 16727  0018E0  D003               	bra	u4997
 16728  0018E2  0008               	tblrd		*
 16729  0018E4  50F5               	movf	tablat,w,c
 16730  0018E6  D005               	bra	u4990
 16731  0018E8                     u4997:
 16732  0018E8  CFF6 FFE9          	movff	tblptrl,fsr0l
 16733  0018EC  CFF7 FFEA          	movff	tblptrh,fsr0h
 16734  0018F0  50EF               	movf	indf0,w,c
 16735  0018F2                     u4990:
 16736  0018F2  EC9E  F02B         	call	_putch
 16737  0018F6  0100               	movlb	0	; () banked
 16738  0018F8  4B9F               	infsnz	printf@cp& (0+255),f,b
 16739  0018FA  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16740  0018FC                     l6572:
 16741                           
 16742                           ; BSR set to: 0
 16743  0018FC  0100               	movlb	0	; () banked
 16744  0018FE  07A3               	decf	printf@len& (0+255),f,b
 16745  001900  A0D8               	btfss	status,0,c
 16746  001902  07A4               	decf	(printf@len+1)& (0+255),f,b
 16747  001904  0100               	movlb	0	; () banked
 16748  001906  29A3               	incf	printf@len& (0+255),w,b
 16749  001908  E1E3               	bnz	l6568
 16750  00190A  0100               	movlb	0	; () banked
 16751  00190C  29A4               	incf	(printf@len+1)& (0+255),w,b
 16752  00190E  B4D8               	btfsc	status,2,c
 16753  001910  D10A               	goto	l6650
 16754  001912  D7DE               	goto	l6568
 16755  001914                     l6574:
 16756                           
 16757                           ; BSR set to: 0
 16758                           ;doprnt.c: 818: flag |= 0x40;
 16759  001914  0100               	movlb	0	; () banked
 16760  001916  8DA7               	bsf	printf@flag& (0+255),6,b
 16761                           
 16762                           ; BSR set to: 0
 16763                           ;doprnt.c: 822: }
 16764                           
 16765                           ;doprnt.c: 819: break;
 16766  001918  D01D               	goto	l1492
 16767  00191A                     l6578:
 16768  00191A  C08E  FFF6         	movff	printf@f,tblptrl
 16769  00191E  C08F  FFF7         	movff	printf@f+1,tblptrh
 16770  001922  0100               	movlb	0	; () banked
 16771  001924  4B8E               	infsnz	printf@f& (0+255),f,b
 16772  001926  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16773  001928                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16774  001928  6AF8               	clrf	tblptru,c
 16775  00192A                     	endif
 16776  00192A                     	if	0	;tblptru may be non-zero
 16777  00192A                     	endif
 16778  00192A  0008               	tblrd		*
 16779  00192C  CFF5 F0A8          	movff	tablat,printf@c
 16780  001930  0100               	movlb	0	; () banked
 16781  001932  51A8               	movf	printf@c& (0+255),w,b
 16782                           
 16783                           ; Switch size 1, requested type "space"
 16784                           ; Number of cases is 5, Range of values is 0 to 117
 16785                           ; switch strategies available:
 16786                           ; Name         Instructions Cycles
 16787                           ; simple_byte           16     9 (average)
 16788                           ;	Chosen strategy is simple_byte
 16789  001934  0A00               	xorlw	0	; case 0
 16790  001936  B4D8               	btfsc	status,2,c
 16791  001938  0012               	return	
 16792  00193A  0A64               	xorlw	100	; case 100
 16793  00193C  B4D8               	btfsc	status,2,c
 16794  00193E  D00A               	goto	l1492
 16795  001940  0A0D               	xorlw	13	; case 105
 16796  001942  B4D8               	btfsc	status,2,c
 16797  001944  D007               	goto	l1492
 16798  001946  0A1A               	xorlw	26	; case 115
 16799  001948  B4D8               	btfsc	status,2,c
 16800  00194A  D758               	goto	l6544
 16801  00194C  0A06               	xorlw	6	; case 117
 16802  00194E  B4D8               	btfsc	status,2,c
 16803  001950  D7E1               	goto	l6574
 16804  001952  D0E9               	goto	l6650
 16805  001954                     l1492:
 16806                           
 16807                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16808  001954  0100               	movlb	0	; () banked
 16809  001956  BDA7               	btfsc	printf@flag& (0+255),6,b
 16810  001958  D019               	goto	l6590
 16811                           
 16812                           ; BSR set to: 0
 16813                           ;doprnt.c: 1253: {
 16814                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16815  00195A  C0A1  FFD9         	movff	printf@ap,fsr2l
 16816  00195E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16817  001962  CFDE F0A5          	movff	postinc2,printf@val
 16818  001966  CFDD F0A6          	movff	postdec2,printf@val+1
 16819                           
 16820                           ; BSR set to: 0
 16821  00196A  0E02               	movlw	2
 16822  00196C  0100               	movlb	0	; () banked
 16823  00196E  27A1               	addwf	printf@ap& (0+255),f,b
 16824  001970  0E00               	movlw	0
 16825  001972  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16826                           
 16827                           ; BSR set to: 0
 16828                           ;doprnt.c: 1261: if((int)val < 0) {
 16829  001974  0100               	movlb	0	; () banked
 16830  001976  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16831  001978  D016               	goto	l6594
 16832                           
 16833                           ; BSR set to: 0
 16834                           ;doprnt.c: 1262: flag |= 0x03;
 16835  00197A  0E03               	movlw	3
 16836  00197C  0100               	movlb	0	; () banked
 16837  00197E  13A7               	iorwf	printf@flag& (0+255),f,b
 16838                           
 16839                           ; BSR set to: 0
 16840                           ;doprnt.c: 1263: val = -val;
 16841  001980  0100               	movlb	0	; () banked
 16842  001982  6DA5               	negf	printf@val& (0+255),b
 16843  001984  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16844  001986  B0D8               	btfsc	status,0,c
 16845  001988  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16846                           
 16847                           ; BSR set to: 0
 16848                           ;doprnt.c: 1264: }
 16849                           ;doprnt.c: 1266: }
 16850  00198A  D00D               	goto	l6594
 16851  00198C                     l6590:
 16852                           
 16853                           ; BSR set to: 0
 16854                           ;doprnt.c: 1268: else
 16855                           ;doprnt.c: 1273: {
 16856                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16857  00198C  C0A1  FFD9         	movff	printf@ap,fsr2l
 16858  001990  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16859  001994  CFDE F0A5          	movff	postinc2,printf@val
 16860  001998  CFDD F0A6          	movff	postdec2,printf@val+1
 16861                           
 16862                           ; BSR set to: 0
 16863  00199C  0E02               	movlw	2
 16864  00199E  0100               	movlb	0	; () banked
 16865  0019A0  27A1               	addwf	printf@ap& (0+255),f,b
 16866  0019A2  0E00               	movlw	0
 16867  0019A4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16868  0019A6                     l6594:
 16869                           
 16870                           ; BSR set to: 0
 16871                           ;doprnt.c: 1287: }
 16872                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16873  0019A6  0E01               	movlw	1
 16874  0019A8  0100               	movlb	0	; () banked
 16875  0019AA  6FA8               	movwf	printf@c& (0+255),b
 16876  0019AC                     l6596:
 16877                           
 16878                           ; BSR set to: 0
 16879  0019AC  0E05               	movlw	5
 16880  0019AE  0100               	movlb	0	; () banked
 16881  0019B0  19A8               	xorwf	printf@c& (0+255),w,b
 16882  0019B2  B4D8               	btfsc	status,2,c
 16883  0019B4  D019               	goto	l6608
 16884                           
 16885                           ; BSR set to: 0
 16886                           ;doprnt.c: 1306: if(val < dpowers[c])
 16887                           
 16888                           ; BSR set to: 0
 16889                           
 16890                           ; BSR set to: 0
 16891  0019B6  0100               	movlb	0	; () banked
 16892  0019B8  51A8               	movf	printf@c& (0+255),w,b
 16893  0019BA  0D02               	mullw	2
 16894  0019BC  0EB4               	movlw	low _dpowers
 16895  0019BE  24F3               	addwf	prodl,w,c
 16896  0019C0  6EF6               	movwf	tblptrl,c
 16897  0019C2  0EFA               	movlw	high _dpowers
 16898  0019C4  20F4               	addwfc	prodh,w,c
 16899  0019C6  6EF7               	movwf	tblptrh,c
 16900  0019C8                     	if	1	;There are 3 active tblptr bytes
 16901  0019C8  6AF8               	clrf	tblptru,c
 16902  0019CA  0E00               	movlw	low (__mediumconst shr (0+16))
 16903  0019CC  22F8               	addwfc	tblptru,f,c
 16904  0019CE                     	endif
 16905  0019CE  0009               	tblrd		*+
 16906  0019D0  50F5               	movf	tablat,w,c
 16907  0019D2  0100               	movlb	0	; () banked
 16908  0019D4  5DA5               	subwf	printf@val& (0+255),w,b
 16909  0019D6  0009               	tblrd		*+
 16910  0019D8  50F5               	movf	tablat,w,c
 16911  0019DA  0100               	movlb	0	; () banked
 16912  0019DC  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16913  0019DE  A0D8               	btfss	status,0,c
 16914  0019E0  D003               	goto	l6608
 16915                           
 16916                           ; BSR set to: 0
 16917                           
 16918                           ; BSR set to: 0
 16919                           
 16920                           ; BSR set to: 0
 16921                           ;doprnt.c: 1307: break;
 16922  0019E2  0100               	movlb	0	; () banked
 16923  0019E4  2BA8               	incf	printf@c& (0+255),f,b
 16924  0019E6  D7E2               	goto	l6596
 16925  0019E8                     l6608:
 16926                           
 16927                           ; BSR set to: 0
 16928                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16929  0019E8  0100               	movlb	0	; () banked
 16930  0019EA  51A9               	movf	printf@width& (0+255),w,b
 16931  0019EC  0100               	movlb	0	; () banked
 16932  0019EE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16933  0019F0  B4D8               	btfsc	status,2,c
 16934  0019F2  D00B               	goto	l6614
 16935                           
 16936                           ; BSR set to: 0
 16937  0019F4  C0A7  F09A         	movff	printf@flag,??_printf
 16938  0019F8  0E03               	movlw	3
 16939  0019FA  0100               	movlb	0	; () banked
 16940  0019FC  179A               	andwf	??_printf& (0+255),f,b
 16941  0019FE  B4D8               	btfsc	status,2,c
 16942  001A00  D004               	goto	l6614
 16943                           
 16944                           ; BSR set to: 0
 16945                           ;doprnt.c: 1346: width--;
 16946  001A02  0100               	movlb	0	; () banked
 16947  001A04  07A9               	decf	printf@width& (0+255),f,b
 16948  001A06  A0D8               	btfss	status,0,c
 16949  001A08  07AA               	decf	(printf@width+1)& (0+255),f,b
 16950  001A0A                     l6614:
 16951                           
 16952                           ; BSR set to: 0
 16953                           ;doprnt.c: 1381: if(width > c)
 16954  001A0A  0E80               	movlw	128
 16955  001A0C  0100               	movlb	0	; () banked
 16956  001A0E  BFA8               	btfsc	printf@c& (0+255),7,b
 16957  001A10  0E7F               	movlw	127
 16958  001A12  0100               	movlb	0	; () banked
 16959  001A14  6F9A               	movwf	??_printf& (0+255),b
 16960  001A16  0100               	movlb	0	; () banked
 16961  001A18  51A9               	movf	printf@width& (0+255),w,b
 16962  001A1A  0100               	movlb	0	; () banked
 16963  001A1C  5DA8               	subwf	printf@c& (0+255),w,b
 16964  001A1E  0100               	movlb	0	; () banked
 16965  001A20  51AA               	movf	(printf@width+1)& (0+255),w,b
 16966  001A22  0A80               	xorlw	128
 16967  001A24  0100               	movlb	0	; () banked
 16968  001A26  599A               	subwfb	??_printf& (0+255),w,b
 16969  001A28  B0D8               	btfsc	status,0,c
 16970  001A2A  D00B               	goto	l6618
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;doprnt.c: 1382: width -= c;
 16974  001A2C  0100               	movlb	0	; () banked
 16975  001A2E  51A8               	movf	printf@c& (0+255),w,b
 16976  001A30  0100               	movlb	0	; () banked
 16977  001A32  5FA9               	subwf	printf@width& (0+255),f,b
 16978  001A34  0E00               	movlw	0
 16979  001A36  0100               	movlb	0	; () banked
 16980  001A38  BFA8               	btfsc	printf@c& (0+255),7,b
 16981  001A3A  0EFF               	movlw	255
 16982  001A3C  0100               	movlb	0	; () banked
 16983  001A3E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16984  001A40  D005               	goto	l6620
 16985  001A42                     l6618:
 16986                           
 16987                           ; BSR set to: 0
 16988                           ;doprnt.c: 1383: else
 16989                           ;doprnt.c: 1384: width = 0;
 16990  001A42  0E00               	movlw	0
 16991  001A44  0100               	movlb	0	; () banked
 16992  001A46  6FAA               	movwf	(printf@width+1)& (0+255),b
 16993  001A48  0E00               	movlw	0
 16994  001A4A  6FA9               	movwf	printf@width& (0+255),b
 16995  001A4C                     l6620:
 16996                           
 16997                           ; BSR set to: 0
 16998                           ;doprnt.c: 1387: if(flag & 0x04) {
 16999  001A4C  0100               	movlb	0	; () banked
 17000  001A4E  A5A7               	btfss	printf@flag& (0+255),2,b
 17001  001A50  D018               	goto	l6632
 17002                           
 17003                           ; BSR set to: 0
 17004                           ;doprnt.c: 1392: if(flag & 0x03)
 17005  001A52  C0A7  F09A         	movff	printf@flag,??_printf
 17006  001A56  0E03               	movlw	3
 17007  001A58  0100               	movlb	0	; () banked
 17008  001A5A  179A               	andwf	??_printf& (0+255),f,b
 17009  001A5C  B4D8               	btfsc	status,2,c
 17010  001A5E  D003               	goto	l6626
 17011                           
 17012                           ; BSR set to: 0
 17013                           ;doprnt.c: 1393: (putch('-') );
 17014  001A60  0E2D               	movlw	45
 17015  001A62  EC9E  F02B         	call	_putch
 17016  001A66                     l6626:
 17017                           
 17018                           ;doprnt.c: 1415: if(width)
 17019  001A66  0100               	movlb	0	; () banked
 17020  001A68  51A9               	movf	printf@width& (0+255),w,b
 17021  001A6A  0100               	movlb	0	; () banked
 17022  001A6C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17023  001A6E  B4D8               	btfsc	status,2,c
 17024  001A70  D025               	goto	l6642
 17025                           
 17026                           ; BSR set to: 0
 17027                           ;doprnt.c: 1417: (putch('0') );
 17028                           
 17029                           ; BSR set to: 0
 17030                           
 17031                           ;doprnt.c: 1416: do
 17032  001A72  0E30               	movlw	48
 17033  001A74  EC9E  F02B         	call	_putch
 17034                           
 17035                           ;doprnt.c: 1418: while(--width);
 17036  001A78  0100               	movlb	0	; () banked
 17037  001A7A  07A9               	decf	printf@width& (0+255),f,b
 17038  001A7C  A0D8               	btfss	status,0,c
 17039  001A7E  07AA               	decf	(printf@width+1)& (0+255),f,b
 17040  001A80  D7F2               	goto	l6626
 17041  001A82                     l6632:
 17042                           
 17043                           ; BSR set to: 0
 17044                           ;doprnt.c: 1422: {
 17045                           ;doprnt.c: 1424: if(width
 17046                           ;doprnt.c: 1428: )
 17047  001A82  0100               	movlb	0	; () banked
 17048  001A84  51A9               	movf	printf@width& (0+255),w,b
 17049  001A86  0100               	movlb	0	; () banked
 17050  001A88  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17051  001A8A  B4D8               	btfsc	status,2,c
 17052  001A8C  D00D               	goto	l6638
 17053  001A8E                     l6634:
 17054                           
 17055                           ; BSR set to: 0
 17056                           ;doprnt.c: 1430: (putch(' ') );
 17057  001A8E  0E20               	movlw	32
 17058  001A90  EC9E  F02B         	call	_putch
 17059                           
 17060                           ;doprnt.c: 1431: while(--width);
 17061  001A94  0100               	movlb	0	; () banked
 17062  001A96  07A9               	decf	printf@width& (0+255),f,b
 17063  001A98  A0D8               	btfss	status,0,c
 17064  001A9A  07AA               	decf	(printf@width+1)& (0+255),f,b
 17065  001A9C  0100               	movlb	0	; () banked
 17066  001A9E  51A9               	movf	printf@width& (0+255),w,b
 17067  001AA0  0100               	movlb	0	; () banked
 17068  001AA2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17069  001AA4  A4D8               	btfss	status,2,c
 17070  001AA6  D7F3               	goto	l6634
 17071  001AA8                     l6638:
 17072                           
 17073                           ; BSR set to: 0
 17074                           ;doprnt.c: 1438: if(flag & 0x03)
 17075  001AA8  C0A7  F09A         	movff	printf@flag,??_printf
 17076  001AAC  0E03               	movlw	3
 17077  001AAE  0100               	movlb	0	; () banked
 17078  001AB0  179A               	andwf	??_printf& (0+255),f,b
 17079  001AB2  B4D8               	btfsc	status,2,c
 17080  001AB4  D003               	goto	l6642
 17081                           
 17082                           ; BSR set to: 0
 17083                           ;doprnt.c: 1439: (putch('-') );
 17084  001AB6  0E2D               	movlw	45
 17085  001AB8  EC9E  F02B         	call	_putch
 17086  001ABC                     l6642:
 17087                           
 17088                           ;doprnt.c: 1469: }
 17089                           ;doprnt.c: 1472: prec = c;
 17090  001ABC  C0A8  F09E         	movff	printf@c,printf@prec
 17091                           
 17092                           ;doprnt.c: 1474: while(prec--) {
 17093  001AC0  D02C               	goto	l6648
 17094  001AC2                     l6644:
 17095                           
 17096                           ;doprnt.c: 1478: {
 17097                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17098  001AC2  0100               	movlb	0	; () banked
 17099  001AC4  519E               	movf	printf@prec& (0+255),w,b
 17100  001AC6  0D02               	mullw	2
 17101  001AC8  0EB4               	movlw	low _dpowers
 17102  001ACA  24F3               	addwf	prodl,w,c
 17103  001ACC  6EF6               	movwf	tblptrl,c
 17104  001ACE  0EFA               	movlw	high _dpowers
 17105  001AD0  20F4               	addwfc	prodh,w,c
 17106  001AD2  6EF7               	movwf	tblptrh,c
 17107  001AD4                     	if	1	;There are 3 active tblptr bytes
 17108  001AD4  6AF8               	clrf	tblptru,c
 17109  001AD6  0E00               	movlw	low (__mediumconst shr (0+16))
 17110  001AD8  22F8               	addwfc	tblptru,f,c
 17111  001ADA                     	endif
 17112  001ADA  0009               	tblrd		*+
 17113  001ADC  CFF5 F082          	movff	tablat,___lwdiv@divisor
 17114  001AE0  000A               	tblrd		*-
 17115  001AE2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 17116  001AE6  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 17117  001AEA  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 17118  001AEE  EC93  F025         	call	___lwdiv	;wreg free
 17119  001AF2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 17120  001AF6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 17121  001AFA  0E00               	movlw	0
 17122  001AFC  0100               	movlb	0	; () banked
 17123  001AFE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 17124  001B00  0E0A               	movlw	10
 17125  001B02  6F89               	movwf	___lwmod@divisor& (0+255),b
 17126  001B04  ECE1  F026         	call	___lwmod	;wreg free
 17127  001B08  0100               	movlb	0	; () banked
 17128  001B0A  5187               	movf	?___lwmod& (0+255),w,b
 17129  001B0C  0F30               	addlw	48
 17130  001B0E  0100               	movlb	0	; () banked
 17131  001B10  6FA8               	movwf	printf@c& (0+255),b
 17132                           
 17133                           ; BSR set to: 0
 17134                           ;doprnt.c: 1523: }
 17135                           ;doprnt.c: 1524: (putch(c) );
 17136  001B12  0100               	movlb	0	; () banked
 17137  001B14  51A8               	movf	printf@c& (0+255),w,b
 17138  001B16  EC9E  F02B         	call	_putch
 17139  001B1A                     l6648:
 17140  001B1A  0100               	movlb	0	; () banked
 17141  001B1C  079E               	decf	printf@prec& (0+255),f,b
 17142  001B1E  0100               	movlb	0	; () banked
 17143  001B20  299E               	incf	printf@prec& (0+255),w,b
 17144  001B22  A4D8               	btfss	status,2,c
 17145  001B24  D7CE               	goto	l6644
 17146  001B26                     l6650:
 17147  001B26  C08E  FFF6         	movff	printf@f,tblptrl
 17148  001B2A  C08F  FFF7         	movff	printf@f+1,tblptrh
 17149  001B2E  0100               	movlb	0	; () banked
 17150  001B30  4B8E               	infsnz	printf@f& (0+255),f,b
 17151  001B32  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17152  001B34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17153  001B34  6AF8               	clrf	tblptru,c
 17154  001B36                     	endif
 17155  001B36                     	if	0	;tblptru may be non-zero
 17156  001B36                     	endif
 17157  001B36  0008               	tblrd		*
 17158  001B38  CFF5 F0A8          	movff	tablat,printf@c
 17159  001B3C  0100               	movlb	0	; () banked
 17160  001B3E  51A8               	movf	printf@c& (0+255),w,b
 17161  001B40  B4D8               	btfsc	status,2,c
 17162  001B42  0012               	return	
 17163  001B44  D5EB               	goto	l6520
 17164  001B46                     __end_of_printf:
 17165                           	opt stack 0
 17166                           tblptru	equ	0xFF8
 17167                           tblptrh	equ	0xFF7
 17168                           tblptrl	equ	0xFF6
 17169                           tablat	equ	0xFF5
 17170                           prodh	equ	0xFF4
 17171                           prodl	equ	0xFF3
 17172                           intcon	equ	0xFF2
 17173                           intcon2	equ	0xFF1
 17174                           intcon3	equ	0xFF0
 17175                           indf0	equ	0xFEF
 17176                           postinc0	equ	0xFEE
 17177                           fsr0h	equ	0xFEA
 17178                           fsr0l	equ	0xFE9
 17179                           wreg	equ	0xFE8
 17180                           postdec1	equ	0xFE5
 17181                           fsr1l	equ	0xFE1
 17182                           indf2	equ	0xFDF
 17183                           postinc2	equ	0xFDE
 17184                           postdec2	equ	0xFDD
 17185                           fsr2h	equ	0xFDA
 17186                           fsr2l	equ	0xFD9
 17187                           status	equ	0xFD8
 17188                           
 17189 ;; *************** function _putch *****************
 17190 ;; Defined at:
 17191 ;;		line 20 in file "lcd.c"
 17192 ;; Parameters:    Size  Location     Type
 17193 ;;  data            1    wreg     unsigned char 
 17194 ;; Auto vars:     Size  Location     Type
 17195 ;;  data            1    2[BANK0 ] unsigned char 
 17196 ;; Return value:  Size  Location     Type
 17197 ;;                  1    wreg      void 
 17198 ;; Registers used:
 17199 ;;		wreg, status,2, status,0, cstack
 17200 ;; Tracked objects:
 17201 ;;		On entry : 0/0
 17202 ;;		On exit  : 0/0
 17203 ;;		Unchanged: 0/0
 17204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17209 ;;Total ram usage:        1 bytes
 17210 ;; Hardware stack levels used:    1
 17211 ;; Hardware stack levels required when called:    8
 17212 ;; This function calls:
 17213 ;;		_lcdNibble
 17214 ;; This function is called by:
 17215 ;;		_printf
 17216 ;; This function uses a non-reentrant model
 17217 ;;
 17218                           
 17219                           	psect	text52
 17220  00573C                     __ptext52:
 17221                           	opt stack 0
 17222  00573C                     _putch:
 17223                           	opt stack 18
 17224                           
 17225                           ;incstack = 0
 17226                           ;putch@data stored from wreg
 17227  00573C  0100               	movlb	0	; () banked
 17228  00573E  6F82               	movwf	putch@data& (0+255),b
 17229                           
 17230                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 17231  005740  848C               	bsf	3980,2,c	;volatile
 17232                           
 17233                           ;lcd.c: 22: lcdNibble(data);
 17234  005742  0100               	movlb	0	; () banked
 17235  005744  5182               	movf	putch@data& (0+255),w,b
 17236  005746  EC79  F026         	call	_lcdNibble
 17237  00574A  0012               	return		;funcret
 17238  00574C                     __end_of_putch:
 17239                           	opt stack 0
 17240                           tblptru	equ	0xFF8
 17241                           tblptrh	equ	0xFF7
 17242                           tblptrl	equ	0xFF6
 17243                           tablat	equ	0xFF5
 17244                           prodh	equ	0xFF4
 17245                           prodl	equ	0xFF3
 17246                           intcon	equ	0xFF2
 17247                           intcon2	equ	0xFF1
 17248                           intcon3	equ	0xFF0
 17249                           indf0	equ	0xFEF
 17250                           postinc0	equ	0xFEE
 17251                           fsr0h	equ	0xFEA
 17252                           fsr0l	equ	0xFE9
 17253                           wreg	equ	0xFE8
 17254                           postdec1	equ	0xFE5
 17255                           fsr1l	equ	0xFE1
 17256                           indf2	equ	0xFDF
 17257                           postinc2	equ	0xFDE
 17258                           postdec2	equ	0xFDD
 17259                           fsr2h	equ	0xFDA
 17260                           fsr2l	equ	0xFD9
 17261                           status	equ	0xFD8
 17262                           
 17263 ;; *************** function _isdigit *****************
 17264 ;; Defined at:
 17265 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 17266 ;; Parameters:    Size  Location     Type
 17267 ;;  c               1    wreg     unsigned char 
 17268 ;; Auto vars:     Size  Location     Type
 17269 ;;  c               1    2[BANK0 ] unsigned char 
 17270 ;; Return value:  Size  Location     Type
 17271 ;;		None               void
 17272 ;; Registers used:
 17273 ;;		wreg, status,2, status,0
 17274 ;; Tracked objects:
 17275 ;;		On entry : 0/0
 17276 ;;		On exit  : 0/0
 17277 ;;		Unchanged: 0/0
 17278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17281 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17283 ;;Total ram usage:        3 bytes
 17284 ;; Hardware stack levels used:    1
 17285 ;; Hardware stack levels required when called:    7
 17286 ;; This function calls:
 17287 ;;		Nothing
 17288 ;; This function is called by:
 17289 ;;		_printf
 17290 ;; This function uses a non-reentrant model
 17291 ;;
 17292                           
 17293                           	psect	text53
 17294  005564                     __ptext53:
 17295                           	opt stack 0
 17296  005564                     _isdigit:
 17297                           	opt stack 19
 17298                           
 17299                           ;incstack = 0
 17300                           ;isdigit@c stored from wreg
 17301  005564  0100               	movlb	0	; () banked
 17302  005566  6F82               	movwf	isdigit@c& (0+255),b
 17303  005568  0E00               	movlw	0
 17304  00556A  0100               	movlb	0	; () banked
 17305  00556C  6F81               	movwf	_isdigit$2085& (0+255),b
 17306                           
 17307                           ; BSR set to: 0
 17308  00556E  0E3A               	movlw	58
 17309  005570  0100               	movlb	0	; () banked
 17310  005572  6182               	cpfslt	isdigit@c& (0+255),b
 17311  005574  D007               	goto	l6368
 17312                           
 17313                           ; BSR set to: 0
 17314  005576  0E2F               	movlw	47
 17315  005578  0100               	movlb	0	; () banked
 17316  00557A  6582               	cpfsgt	isdigit@c& (0+255),b
 17317  00557C  D003               	goto	l6368
 17318                           
 17319                           ; BSR set to: 0
 17320  00557E  0E01               	movlw	1
 17321  005580  0100               	movlb	0	; () banked
 17322  005582  6F81               	movwf	_isdigit$2085& (0+255),b
 17323  005584                     l6368:
 17324                           
 17325                           ; BSR set to: 0
 17326  005584  C081  F080         	movff	_isdigit$2085,??_isdigit
 17327  005588  0100               	movlb	0	; () banked
 17328  00558A  3180               	rrcf	??_isdigit& (0+255),w,b
 17329  00558C  0012               	return	
 17330  00558E                     __end_of_isdigit:
 17331                           	opt stack 0
 17332                           tblptru	equ	0xFF8
 17333                           tblptrh	equ	0xFF7
 17334                           tblptrl	equ	0xFF6
 17335                           tablat	equ	0xFF5
 17336                           prodh	equ	0xFF4
 17337                           prodl	equ	0xFF3
 17338                           intcon	equ	0xFF2
 17339                           intcon2	equ	0xFF1
 17340                           intcon3	equ	0xFF0
 17341                           indf0	equ	0xFEF
 17342                           postinc0	equ	0xFEE
 17343                           fsr0h	equ	0xFEA
 17344                           fsr0l	equ	0xFE9
 17345                           wreg	equ	0xFE8
 17346                           postdec1	equ	0xFE5
 17347                           fsr1l	equ	0xFE1
 17348                           indf2	equ	0xFDF
 17349                           postinc2	equ	0xFDE
 17350                           postdec2	equ	0xFDD
 17351                           fsr2h	equ	0xFDA
 17352                           fsr2l	equ	0xFD9
 17353                           status	equ	0xFD8
 17354                           
 17355 ;; *************** function ___wmul *****************
 17356 ;; Defined at:
 17357 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 17358 ;; Parameters:    Size  Location     Type
 17359 ;;  multiplier      2    0[BANK0 ] unsigned int 
 17360 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 17361 ;; Auto vars:     Size  Location     Type
 17362 ;;  product         2    4[BANK0 ] unsigned int 
 17363 ;; Return value:  Size  Location     Type
 17364 ;;                  2    0[BANK0 ] unsigned int 
 17365 ;; Registers used:
 17366 ;;		wreg, status,2, status,0, prodl, prodh
 17367 ;; Tracked objects:
 17368 ;;		On entry : 0/0
 17369 ;;		On exit  : 0/0
 17370 ;;		Unchanged: 0/0
 17371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17372 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17373 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17375 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17376 ;;Total ram usage:        6 bytes
 17377 ;; Hardware stack levels used:    1
 17378 ;; Hardware stack levels required when called:    7
 17379 ;; This function calls:
 17380 ;;		Nothing
 17381 ;; This function is called by:
 17382 ;;		_printf
 17383 ;; This function uses a non-reentrant model
 17384 ;;
 17385                           
 17386                           	psect	text54
 17387  005236                     __ptext54:
 17388                           	opt stack 0
 17389  005236                     ___wmul:
 17390                           	opt stack 19
 17391                           
 17392                           ; BSR set to: 0
 17393                           ;incstack = 0
 17394  005236  0100               	movlb	0	; () banked
 17395  005238  5180               	movf	___wmul@multiplier& (0+255),w,b
 17396  00523A  0100               	movlb	0	; () banked
 17397  00523C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17398  00523E  CFF3 F084          	movff	prodl,___wmul@product
 17399  005242  CFF4 F085          	movff	prodh,___wmul@product+1
 17400  005246  0100               	movlb	0	; () banked
 17401  005248  5180               	movf	___wmul@multiplier& (0+255),w,b
 17402  00524A  0100               	movlb	0	; () banked
 17403  00524C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 17404  00524E  50F3               	movf	prodl,w,c
 17405  005250  0100               	movlb	0	; () banked
 17406  005252  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17407  005254  0100               	movlb	0	; () banked
 17408  005256  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 17409  005258  0100               	movlb	0	; () banked
 17410  00525A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17411  00525C  50F3               	movf	prodl,w,c
 17412  00525E  0100               	movlb	0	; () banked
 17413  005260  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17414                           
 17415                           ; BSR set to: 0
 17416  005262  C084  F080         	movff	___wmul@product,?___wmul
 17417  005266  C085  F081         	movff	___wmul@product+1,?___wmul+1
 17418  00526A  0012               	return	
 17419  00526C                     __end_of___wmul:
 17420                           	opt stack 0
 17421                           tblptru	equ	0xFF8
 17422                           tblptrh	equ	0xFF7
 17423                           tblptrl	equ	0xFF6
 17424                           tablat	equ	0xFF5
 17425                           prodh	equ	0xFF4
 17426                           prodl	equ	0xFF3
 17427                           intcon	equ	0xFF2
 17428                           intcon2	equ	0xFF1
 17429                           intcon3	equ	0xFF0
 17430                           indf0	equ	0xFEF
 17431                           postinc0	equ	0xFEE
 17432                           fsr0h	equ	0xFEA
 17433                           fsr0l	equ	0xFE9
 17434                           wreg	equ	0xFE8
 17435                           postdec1	equ	0xFE5
 17436                           fsr1l	equ	0xFE1
 17437                           indf2	equ	0xFDF
 17438                           postinc2	equ	0xFDE
 17439                           postdec2	equ	0xFDD
 17440                           fsr2h	equ	0xFDA
 17441                           fsr2l	equ	0xFD9
 17442                           status	equ	0xFD8
 17443                           
 17444 ;; *************** function ___lwmod *****************
 17445 ;; Defined at:
 17446 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 17447 ;; Parameters:    Size  Location     Type
 17448 ;;  dividend        2    7[BANK0 ] unsigned int 
 17449 ;;  divisor         2    9[BANK0 ] unsigned int 
 17450 ;; Auto vars:     Size  Location     Type
 17451 ;;  counter         1   11[BANK0 ] unsigned char 
 17452 ;; Return value:  Size  Location     Type
 17453 ;;                  2    7[BANK0 ] unsigned int 
 17454 ;; Registers used:
 17455 ;;		wreg, status,2, status,0
 17456 ;; Tracked objects:
 17457 ;;		On entry : 0/0
 17458 ;;		On exit  : 0/0
 17459 ;;		Unchanged: 0/0
 17460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17461 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17464 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17465 ;;Total ram usage:        5 bytes
 17466 ;; Hardware stack levels used:    1
 17467 ;; Hardware stack levels required when called:    7
 17468 ;; This function calls:
 17469 ;;		Nothing
 17470 ;; This function is called by:
 17471 ;;		_printf
 17472 ;; This function uses a non-reentrant model
 17473 ;;
 17474                           
 17475                           	psect	text55
 17476  004DC2                     __ptext55:
 17477                           	opt stack 0
 17478  004DC2                     ___lwmod:
 17479                           	opt stack 19
 17480                           
 17481                           ; BSR set to: 0
 17482                           ;incstack = 0
 17483  004DC2  0100               	movlb	0	; () banked
 17484  004DC4  5189               	movf	___lwmod@divisor& (0+255),w,b
 17485  004DC6  0100               	movlb	0	; () banked
 17486  004DC8  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17487  004DCA  B4D8               	btfsc	status,2,c
 17488  004DCC  D026               	goto	l1949
 17489                           
 17490                           ; BSR set to: 0
 17491  004DCE  0E01               	movlw	1
 17492  004DD0  0100               	movlb	0	; () banked
 17493  004DD2  6F8B               	movwf	___lwmod@counter& (0+255),b
 17494  004DD4  D006               	goto	l6406
 17495  004DD6                     l6404:
 17496                           
 17497                           ; BSR set to: 0
 17498  004DD6  0100               	movlb	0	; () banked
 17499  004DD8  90D8               	bcf	status,0,c
 17500  004DDA  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 17501  004DDC  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17502  004DDE  0100               	movlb	0	; () banked
 17503  004DE0  2B8B               	incf	___lwmod@counter& (0+255),f,b
 17504  004DE2                     l6406:
 17505                           
 17506                           ; BSR set to: 0
 17507  004DE2  0100               	movlb	0	; () banked
 17508  004DE4  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17509  004DE6  D7F7               	goto	l6404
 17510  004DE8                     l6408:
 17511                           
 17512                           ; BSR set to: 0
 17513  004DE8  0100               	movlb	0	; () banked
 17514  004DEA  5189               	movf	___lwmod@divisor& (0+255),w,b
 17515  004DEC  0100               	movlb	0	; () banked
 17516  004DEE  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 17517  004DF0  0100               	movlb	0	; () banked
 17518  004DF2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17519  004DF4  0100               	movlb	0	; () banked
 17520  004DF6  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17521  004DF8  A0D8               	btfss	status,0,c
 17522  004DFA  D008               	goto	l6412
 17523                           
 17524                           ; BSR set to: 0
 17525  004DFC  0100               	movlb	0	; () banked
 17526  004DFE  5189               	movf	___lwmod@divisor& (0+255),w,b
 17527  004E00  0100               	movlb	0	; () banked
 17528  004E02  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 17529  004E04  0100               	movlb	0	; () banked
 17530  004E06  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17531  004E08  0100               	movlb	0	; () banked
 17532  004E0A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17533  004E0C                     l6412:
 17534                           
 17535                           ; BSR set to: 0
 17536  004E0C  0100               	movlb	0	; () banked
 17537  004E0E  90D8               	bcf	status,0,c
 17538  004E10  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17539  004E12  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 17540                           
 17541                           ; BSR set to: 0
 17542  004E14  0100               	movlb	0	; () banked
 17543  004E16  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 17544  004E18  D7E7               	goto	l6408
 17545  004E1A                     l1949:
 17546                           
 17547                           ; BSR set to: 0
 17548  004E1A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 17549  004E1E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 17550                           
 17551                           ; BSR set to: 0
 17552  004E22  0012               	return		;funcret
 17553  004E24                     __end_of___lwmod:
 17554                           	opt stack 0
 17555                           tblptru	equ	0xFF8
 17556                           tblptrh	equ	0xFF7
 17557                           tblptrl	equ	0xFF6
 17558                           tablat	equ	0xFF5
 17559                           prodh	equ	0xFF4
 17560                           prodl	equ	0xFF3
 17561                           intcon	equ	0xFF2
 17562                           intcon2	equ	0xFF1
 17563                           intcon3	equ	0xFF0
 17564                           indf0	equ	0xFEF
 17565                           postinc0	equ	0xFEE
 17566                           fsr0h	equ	0xFEA
 17567                           fsr0l	equ	0xFE9
 17568                           wreg	equ	0xFE8
 17569                           postdec1	equ	0xFE5
 17570                           fsr1l	equ	0xFE1
 17571                           indf2	equ	0xFDF
 17572                           postinc2	equ	0xFDE
 17573                           postdec2	equ	0xFDD
 17574                           fsr2h	equ	0xFDA
 17575                           fsr2l	equ	0xFD9
 17576                           status	equ	0xFD8
 17577                           
 17578 ;; *************** function ___lwdiv *****************
 17579 ;; Defined at:
 17580 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 17581 ;; Parameters:    Size  Location     Type
 17582 ;;  dividend        2    0[BANK0 ] unsigned int 
 17583 ;;  divisor         2    2[BANK0 ] unsigned int 
 17584 ;; Auto vars:     Size  Location     Type
 17585 ;;  quotient        2    4[BANK0 ] unsigned int 
 17586 ;;  counter         1    6[BANK0 ] unsigned char 
 17587 ;; Return value:  Size  Location     Type
 17588 ;;                  2    0[BANK0 ] unsigned int 
 17589 ;; Registers used:
 17590 ;;		wreg, status,2, status,0
 17591 ;; Tracked objects:
 17592 ;;		On entry : 0/0
 17593 ;;		On exit  : 0/0
 17594 ;;		Unchanged: 0/0
 17595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17596 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17597 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17599 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17600 ;;Total ram usage:        7 bytes
 17601 ;; Hardware stack levels used:    1
 17602 ;; Hardware stack levels required when called:    7
 17603 ;; This function calls:
 17604 ;;		Nothing
 17605 ;; This function is called by:
 17606 ;;		_printf
 17607 ;; This function uses a non-reentrant model
 17608 ;;
 17609                           
 17610                           	psect	text56
 17611  004B26                     __ptext56:
 17612                           	opt stack 0
 17613  004B26                     ___lwdiv:
 17614                           	opt stack 19
 17615                           
 17616                           ; BSR set to: 0
 17617                           ;incstack = 0
 17618  004B26  0E00               	movlw	0
 17619  004B28  0100               	movlb	0	; () banked
 17620  004B2A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17621  004B2C  0E00               	movlw	0
 17622  004B2E  6F84               	movwf	___lwdiv@quotient& (0+255),b
 17623                           
 17624                           ; BSR set to: 0
 17625  004B30  0100               	movlb	0	; () banked
 17626  004B32  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17627  004B34  0100               	movlb	0	; () banked
 17628  004B36  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17629  004B38  B4D8               	btfsc	status,2,c
 17630  004B3A  D02C               	goto	l1939
 17631                           
 17632                           ; BSR set to: 0
 17633  004B3C  0E01               	movlw	1
 17634  004B3E  0100               	movlb	0	; () banked
 17635  004B40  6F86               	movwf	___lwdiv@counter& (0+255),b
 17636  004B42  D006               	goto	l6386
 17637  004B44                     l6384:
 17638                           
 17639                           ; BSR set to: 0
 17640  004B44  0100               	movlb	0	; () banked
 17641  004B46  90D8               	bcf	status,0,c
 17642  004B48  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 17643  004B4A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17644  004B4C  0100               	movlb	0	; () banked
 17645  004B4E  2B86               	incf	___lwdiv@counter& (0+255),f,b
 17646  004B50                     l6386:
 17647                           
 17648                           ; BSR set to: 0
 17649  004B50  0100               	movlb	0	; () banked
 17650  004B52  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17651  004B54  D7F7               	goto	l6384
 17652  004B56                     l6388:
 17653                           
 17654                           ; BSR set to: 0
 17655  004B56  0100               	movlb	0	; () banked
 17656  004B58  90D8               	bcf	status,0,c
 17657  004B5A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 17658  004B5C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17659                           
 17660                           ; BSR set to: 0
 17661  004B5E  0100               	movlb	0	; () banked
 17662  004B60  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17663  004B62  0100               	movlb	0	; () banked
 17664  004B64  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 17665  004B66  0100               	movlb	0	; () banked
 17666  004B68  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17667  004B6A  0100               	movlb	0	; () banked
 17668  004B6C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17669  004B6E  A0D8               	btfss	status,0,c
 17670  004B70  D00A               	goto	l6396
 17671                           
 17672                           ; BSR set to: 0
 17673  004B72  0100               	movlb	0	; () banked
 17674  004B74  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17675  004B76  0100               	movlb	0	; () banked
 17676  004B78  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17677  004B7A  0100               	movlb	0	; () banked
 17678  004B7C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17679  004B7E  0100               	movlb	0	; () banked
 17680  004B80  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17681                           
 17682                           ; BSR set to: 0
 17683  004B82  0100               	movlb	0	; () banked
 17684  004B84  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17685  004B86                     l6396:
 17686                           
 17687                           ; BSR set to: 0
 17688  004B86  0100               	movlb	0	; () banked
 17689  004B88  90D8               	bcf	status,0,c
 17690  004B8A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17691  004B8C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17692                           
 17693                           ; BSR set to: 0
 17694  004B8E  0100               	movlb	0	; () banked
 17695  004B90  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17696  004B92  D7E1               	goto	l6388
 17697  004B94                     l1939:
 17698                           
 17699                           ; BSR set to: 0
 17700  004B94  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17701  004B98  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17702                           
 17703                           ; BSR set to: 0
 17704  004B9C  0012               	return		;funcret
 17705  004B9E                     __end_of___lwdiv:
 17706                           	opt stack 0
 17707                           tblptru	equ	0xFF8
 17708                           tblptrh	equ	0xFF7
 17709                           tblptrl	equ	0xFF6
 17710                           tablat	equ	0xFF5
 17711                           prodh	equ	0xFF4
 17712                           prodl	equ	0xFF3
 17713                           intcon	equ	0xFF2
 17714                           intcon2	equ	0xFF1
 17715                           intcon3	equ	0xFF0
 17716                           indf0	equ	0xFEF
 17717                           postinc0	equ	0xFEE
 17718                           fsr0h	equ	0xFEA
 17719                           fsr0l	equ	0xFE9
 17720                           wreg	equ	0xFE8
 17721                           postdec1	equ	0xFE5
 17722                           fsr1l	equ	0xFE1
 17723                           indf2	equ	0xFDF
 17724                           postinc2	equ	0xFDE
 17725                           postdec2	equ	0xFDD
 17726                           fsr2h	equ	0xFDA
 17727                           fsr2l	equ	0xFD9
 17728                           status	equ	0xFD8
 17729                           
 17730 ;; *************** function _lcdInst *****************
 17731 ;; Defined at:
 17732 ;;		line 15 in file "lcd.c"
 17733 ;; Parameters:    Size  Location     Type
 17734 ;;  data            1    wreg     unsigned char 
 17735 ;; Auto vars:     Size  Location     Type
 17736 ;;  data            1    2[BANK0 ] unsigned char 
 17737 ;; Return value:  Size  Location     Type
 17738 ;;                  1    wreg      void 
 17739 ;; Registers used:
 17740 ;;		wreg, status,2, status,0, cstack
 17741 ;; Tracked objects:
 17742 ;;		On entry : 0/0
 17743 ;;		On exit  : 0/0
 17744 ;;		Unchanged: 0/0
 17745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17747 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17749 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17750 ;;Total ram usage:        1 bytes
 17751 ;; Hardware stack levels used:    1
 17752 ;; Hardware stack levels required when called:    8
 17753 ;; This function calls:
 17754 ;;		_lcdNibble
 17755 ;; This function is called by:
 17756 ;;		_UI
 17757 ;;		_change_state_to_menu_start
 17758 ;;		_change_state_to_menu_12
 17759 ;;		_change_state_to_menu_22
 17760 ;;		_initLCD
 17761 ;;		_printRTC
 17762 ;;		_Loading
 17763 ;;		_EEPROM_write
 17764 ;;		_Test
 17765 ;;		_algorithmTest
 17766 ;;		_sensorTest
 17767 ;;		_actuatorTest
 17768 ;;		_BothServos
 17769 ;;		_PortTestDC
 17770 ;;		_PlatformTest
 17771 ;;		_SpeedTest
 17772 ;;		_BlockerTest
 17773 ;;		_arm
 17774 ;;		_PortTestPusher
 17775 ;;		_ToggleTestA5
 17776 ;; This function uses a non-reentrant model
 17777 ;;
 17778                           
 17779                           	psect	text57
 17780  00574C                     __ptext57:
 17781                           	opt stack 0
 17782  00574C                     _lcdInst:
 17783                           	opt stack 20
 17784                           
 17785                           ; BSR set to: 0
 17786                           ;incstack = 0
 17787                           ;lcdInst@data stored from wreg
 17788  00574C  0100               	movlb	0	; () banked
 17789  00574E  6F82               	movwf	lcdInst@data& (0+255),b
 17790                           
 17791                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17792  005750  948C               	bcf	3980,2,c	;volatile
 17793                           
 17794                           ;lcd.c: 17: lcdNibble(data);
 17795  005752  0100               	movlb	0	; () banked
 17796  005754  5182               	movf	lcdInst@data& (0+255),w,b
 17797  005756  EC79  F026         	call	_lcdNibble
 17798  00575A  0012               	return		;funcret
 17799  00575C                     __end_of_lcdInst:
 17800                           	opt stack 0
 17801                           tblptru	equ	0xFF8
 17802                           tblptrh	equ	0xFF7
 17803                           tblptrl	equ	0xFF6
 17804                           tablat	equ	0xFF5
 17805                           prodh	equ	0xFF4
 17806                           prodl	equ	0xFF3
 17807                           intcon	equ	0xFF2
 17808                           intcon2	equ	0xFF1
 17809                           intcon3	equ	0xFF0
 17810                           indf0	equ	0xFEF
 17811                           postinc0	equ	0xFEE
 17812                           fsr0h	equ	0xFEA
 17813                           fsr0l	equ	0xFE9
 17814                           wreg	equ	0xFE8
 17815                           postdec1	equ	0xFE5
 17816                           fsr1l	equ	0xFE1
 17817                           indf2	equ	0xFDF
 17818                           postinc2	equ	0xFDE
 17819                           postdec2	equ	0xFDD
 17820                           fsr2h	equ	0xFDA
 17821                           fsr2l	equ	0xFD9
 17822                           status	equ	0xFD8
 17823                           
 17824 ;; *************** function _lcdNibble *****************
 17825 ;; Defined at:
 17826 ;;		line 25 in file "lcd.c"
 17827 ;; Parameters:    Size  Location     Type
 17828 ;;  data            1    wreg     unsigned char 
 17829 ;; Auto vars:     Size  Location     Type
 17830 ;;  data            1    1[BANK0 ] unsigned char 
 17831 ;;  temp            1    0[BANK0 ] unsigned char 
 17832 ;; Return value:  Size  Location     Type
 17833 ;;                  1    wreg      void 
 17834 ;; Registers used:
 17835 ;;		wreg, status,2, status,0
 17836 ;; Tracked objects:
 17837 ;;		On entry : 0/0
 17838 ;;		On exit  : 0/0
 17839 ;;		Unchanged: 0/0
 17840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17842 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17845 ;;Total ram usage:        2 bytes
 17846 ;; Hardware stack levels used:    1
 17847 ;; Hardware stack levels required when called:    7
 17848 ;; This function calls:
 17849 ;;		Nothing
 17850 ;; This function is called by:
 17851 ;;		_lcdInst
 17852 ;;		_putch
 17853 ;; This function uses a non-reentrant model
 17854 ;;
 17855                           
 17856                           	psect	text58
 17857  004CF2                     __ptext58:
 17858                           	opt stack 0
 17859  004CF2                     _lcdNibble:
 17860                           	opt stack 20
 17861                           
 17862                           ;incstack = 0
 17863                           ;lcdNibble@data stored from wreg
 17864  004CF2  0100               	movlb	0	; () banked
 17865  004CF4  6F81               	movwf	lcdNibble@data& (0+255),b
 17866                           
 17867                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 17868  004CF6  9EF2               	bcf	intcon,7,c	;volatile
 17869                           
 17870                           ;lcd.c: 28: char temp = data & 0xF0;
 17871  004CF8  0100               	movlb	0	; () banked
 17872  004CFA  5181               	movf	lcdNibble@data& (0+255),w,b
 17873  004CFC  0BF0               	andlw	240
 17874  004CFE  0100               	movlb	0	; () banked
 17875  004D00  6F80               	movwf	lcdNibble@temp& (0+255),b
 17876                           
 17877                           ;lcd.c: 29: LATD = LATD & 0x0F;
 17878  004D02  508C               	movf	3980,w,c	;volatile
 17879  004D04  0B0F               	andlw	15
 17880  004D06  6E8C               	movwf	3980,c	;volatile
 17881                           
 17882                           ;lcd.c: 30: LATD = temp | LATD;
 17883  004D08  0100               	movlb	0	; () banked
 17884  004D0A  5180               	movf	lcdNibble@temp& (0+255),w,b
 17885  004D0C  108C               	iorwf	3980,w,c	;volatile
 17886  004D0E  6E8C               	movwf	3980,c	;volatile
 17887                           
 17888                           ; BSR set to: 0
 17889                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 17890  004D10  868C               	bsf	3980,3,c	;volatile
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17894  004D12  0E42               	movlw	66
 17895  004D14                     u10847:
 17896  004D14  2EE8               	decfsz	wreg,f,c
 17897  004D16  D7FE               	bra	u10847
 17898  004D18  D000               	nop2	
 17899                           
 17900                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 17901  004D1A  968C               	bcf	3980,3,c	;volatile
 17902                           
 17903                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17904  004D1C  0E42               	movlw	66
 17905  004D1E                     u10857:
 17906  004D1E  2EE8               	decfsz	wreg,f,c
 17907  004D20  D7FE               	bra	u10857
 17908  004D22  D000               	nop2	
 17909                           
 17910                           ;lcd.c: 37: data = data << 4;
 17911  004D24  0100               	movlb	0	; () banked
 17912  004D26  3981               	swapf	lcdNibble@data& (0+255),w,b
 17913  004D28  0BF0               	andlw	240
 17914  004D2A  0100               	movlb	0	; () banked
 17915  004D2C  6F81               	movwf	lcdNibble@data& (0+255),b
 17916                           
 17917                           ;lcd.c: 39: temp = data & 0xF0;
 17918  004D2E  0100               	movlb	0	; () banked
 17919  004D30  5181               	movf	lcdNibble@data& (0+255),w,b
 17920  004D32  0BF0               	andlw	240
 17921  004D34  0100               	movlb	0	; () banked
 17922  004D36  6F80               	movwf	lcdNibble@temp& (0+255),b
 17923                           
 17924                           ;lcd.c: 40: LATD = LATD & 0x0F;
 17925  004D38  508C               	movf	3980,w,c	;volatile
 17926  004D3A  0B0F               	andlw	15
 17927  004D3C  6E8C               	movwf	3980,c	;volatile
 17928                           
 17929                           ;lcd.c: 41: LATD = temp | LATD;
 17930  004D3E  0100               	movlb	0	; () banked
 17931  004D40  5180               	movf	lcdNibble@temp& (0+255),w,b
 17932  004D42  108C               	iorwf	3980,w,c	;volatile
 17933  004D44  6E8C               	movwf	3980,c	;volatile
 17934                           
 17935                           ; BSR set to: 0
 17936                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 17937  004D46  868C               	bsf	3980,3,c	;volatile
 17938                           
 17939                           ; BSR set to: 0
 17940                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17941  004D48  0E42               	movlw	66
 17942  004D4A                     u10867:
 17943  004D4A  2EE8               	decfsz	wreg,f,c
 17944  004D4C  D7FE               	bra	u10867
 17945  004D4E  D000               	nop2	
 17946                           
 17947                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 17948  004D50  968C               	bcf	3980,3,c	;volatile
 17949                           
 17950                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17951  004D52  0E42               	movlw	66
 17952  004D54                     u10877:
 17953  004D54  2EE8               	decfsz	wreg,f,c
 17954  004D56  D7FE               	bra	u10877
 17955  004D58  D000               	nop2	
 17956                           
 17957                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 17958  004D5A  8EF2               	bsf	intcon,7,c	;volatile
 17959  004D5C  0012               	return		;funcret
 17960  004D5E                     __end_of_lcdNibble:
 17961                           	opt stack 0
 17962                           tblptru	equ	0xFF8
 17963                           tblptrh	equ	0xFF7
 17964                           tblptrl	equ	0xFF6
 17965                           tablat	equ	0xFF5
 17966                           prodh	equ	0xFF4
 17967                           prodl	equ	0xFF3
 17968                           intcon	equ	0xFF2
 17969                           intcon2	equ	0xFF1
 17970                           intcon3	equ	0xFF0
 17971                           indf0	equ	0xFEF
 17972                           postinc0	equ	0xFEE
 17973                           fsr0h	equ	0xFEA
 17974                           fsr0l	equ	0xFE9
 17975                           wreg	equ	0xFE8
 17976                           postdec1	equ	0xFE5
 17977                           fsr1l	equ	0xFE1
 17978                           indf2	equ	0xFDF
 17979                           postinc2	equ	0xFDE
 17980                           postdec2	equ	0xFDD
 17981                           fsr2h	equ	0xFDA
 17982                           fsr2l	equ	0xFD9
 17983                           status	equ	0xFD8
 17984                           
 17985 ;; *************** function _handler *****************
 17986 ;; Defined at:
 17987 ;;		line 16 in file "interruptHandler.c"
 17988 ;; Parameters:    Size  Location     Type
 17989 ;;		None
 17990 ;; Auto vars:     Size  Location     Type
 17991 ;;		None
 17992 ;; Return value:  Size  Location     Type
 17993 ;;                  1    wreg      void 
 17994 ;; Registers used:
 17995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17996 ;; Tracked objects:
 17997 ;;		On entry : 0/0
 17998 ;;		On exit  : 0/0
 17999 ;;		Unchanged: 0/0
 18000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18003 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18004 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18005 ;;Total ram usage:       16 bytes
 18006 ;; Hardware stack levels used:    1
 18007 ;; Hardware stack levels required when called:    6
 18008 ;; This function calls:
 18009 ;;		_printSortTimer
 18010 ;;		_updateArmState
 18011 ;;		_updateMenu
 18012 ;;		_updateServoStates
 18013 ;;		i2_change_state_to_menu_start
 18014 ;; This function is called by:
 18015 ;;		Interrupt level 2
 18016 ;; This function uses a non-reentrant model
 18017 ;;
 18018                           
 18019                           	psect	intcode
 18020  000008                     __pintcode:
 18021                           	opt stack 0
 18022  000008                     _handler:
 18023                           	opt stack 18
 18024                           
 18025                           ;incstack = 0
 18026  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 18027  00000A  ED0C  F01B         	call	int_func,f	;refresh shadow registers
 18028                           tblptru	equ	0xFF8
 18029                           tblptrh	equ	0xFF7
 18030                           tblptrl	equ	0xFF6
 18031                           tablat	equ	0xFF5
 18032                           prodh	equ	0xFF4
 18033                           prodl	equ	0xFF3
 18034                           intcon	equ	0xFF2
 18035                           intcon2	equ	0xFF1
 18036                           intcon3	equ	0xFF0
 18037                           indf0	equ	0xFEF
 18038                           postinc0	equ	0xFEE
 18039                           fsr0h	equ	0xFEA
 18040                           fsr0l	equ	0xFE9
 18041                           wreg	equ	0xFE8
 18042                           postdec1	equ	0xFE5
 18043                           fsr1l	equ	0xFE1
 18044                           indf2	equ	0xFDF
 18045                           postinc2	equ	0xFDE
 18046                           postdec2	equ	0xFDD
 18047                           fsr2h	equ	0xFDA
 18048                           fsr2l	equ	0xFD9
 18049                           status	equ	0xFD8
 18050                           
 18051                           	psect	intcode_body
 18052  003618                     __pintcode_body:
 18053                           	opt stack 18
 18054  003618                     int_func:
 18055                           	opt stack 18
 18056  003618  0006               	pop		; remove dummy address from shadow register refresh
 18057  00361A  CFFA F04D          	movff	pclath,??_handler+2
 18058  00361E  CFFB F04E          	movff	pclatu,??_handler+3
 18059  003622  CFE9 F04F          	movff	fsr0l,??_handler+4
 18060  003626  CFEA F050          	movff	fsr0h,??_handler+5
 18061  00362A  CFE1 F051          	movff	fsr1l,??_handler+6
 18062  00362E  CFE2 F052          	movff	fsr1h,??_handler+7
 18063  003632  CFD9 F053          	movff	fsr2l,??_handler+8
 18064  003636  CFDA F054          	movff	fsr2h,??_handler+9
 18065  00363A  CFF3 F055          	movff	prodl,??_handler+10
 18066  00363E  CFF4 F056          	movff	prodh,??_handler+11
 18067  003642  CFF6 F057          	movff	tblptrl,??_handler+12
 18068  003646  CFF7 F058          	movff	tblptrh,??_handler+13
 18069  00364A  CFF8 F059          	movff	tblptru,??_handler+14
 18070  00364E  CFF5 F05A          	movff	tablat,??_handler+15
 18071                           
 18072                           ;interruptHandler.c: 18: if(INT1IF){
 18073  003652  A0F0               	btfss	intcon3,0,c	;volatile
 18074  003654  D034               	goto	i2l9854
 18075                           
 18076                           ;interruptHandler.c: 19: INT1IF = 0;
 18077  003656  90F0               	bcf	intcon3,0,c	;volatile
 18078                           
 18079                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 18080  003658  3881               	swapf	3969,w,c	;volatile
 18081  00365A  0B0F               	andlw	15
 18082  00365C  0B0F               	andlw	15
 18083  00365E  6E4B               	movwf	??_handler& (0+255),c
 18084  003660  6A4C               	clrf	(??_handler+1)& (0+255),c
 18085  003662  0EA3               	movlw	low _keys
 18086  003664  244B               	addwf	??_handler,w,c
 18087  003666  6EF6               	movwf	tblptrl,c
 18088  003668  0EFA               	movlw	high _keys
 18089  00366A  204C               	addwfc	??_handler+1,w,c
 18090  00366C  6EF7               	movwf	tblptrh,c
 18091  00366E                     	if	1	;There are 3 active tblptr bytes
 18092  00366E  6AF8               	clrf	tblptru,c
 18093  003670  0E00               	movlw	low (__mediumconst shr (0+16))
 18094  003672  22F8               	addwfc	tblptru,f,c
 18095  003674                     	endif
 18096  003674  0008               	tblrd		*
 18097  003676  CFF5 F07D          	movff	tablat,_input	;volatile
 18098                           
 18099                           ;interruptHandler.c: 21: if(input == '*'){
 18100  00367A  0E2A               	movlw	42
 18101  00367C  187D               	xorwf	_input,w,c	;volatile
 18102  00367E  B4D8               	btfsc	status,2,c
 18103  003680  D00D               	goto	i2l9848
 18104  003682  D018               	goto	i2l9850
 18105  003684                     i2l9838:
 18106                           
 18107                           ;interruptHandler.c: 24: machine_state = Testing_state;
 18108  003684  0E03               	movlw	3
 18109  003686  D007               	goto	L17
 18110  003688                     i2l9840:
 18111                           
 18112                           ; BSR set to: 0
 18113                           ;interruptHandler.c: 27: machine_state = UI_state;
 18114  003688  0E00               	movlw	0
 18115  00368A  0100               	movlb	0	; () banked
 18116  00368C  6FFC               	movwf	_machine_state& (0+255),b
 18117                           
 18118                           ; BSR set to: 0
 18119                           ;interruptHandler.c: 28: change_state_to_menu_start();
 18120  00368E  ECDB  F02A         	call	i2_change_state_to_menu_start	;wreg free
 18121                           
 18122                           ;interruptHandler.c: 29: break;
 18123  003692  D015               	goto	i2l9854
 18124  003694                     i2l9844:
 18125                           
 18126                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 18127  003694  0E02               	movlw	2
 18128  003696                     L17:
 18129  003696  0100               	movlb	0	; () banked
 18130  003698  6FFC               	movwf	_machine_state& (0+255),b
 18131                           
 18132                           ; BSR set to: 0
 18133                           ;interruptHandler.c: 33: }
 18134                           
 18135                           ;interruptHandler.c: 32: break;
 18136  00369A  D011               	goto	i2l9854
 18137  00369C                     i2l9848:
 18138  00369C  0100               	movlb	0	; () banked
 18139  00369E  51FC               	movf	_machine_state& (0+255),w,b
 18140                           
 18141                           ; Switch size 1, requested type "space"
 18142                           ; Number of cases is 3, Range of values is 0 to 3
 18143                           ; switch strategies available:
 18144                           ; Name         Instructions Cycles
 18145                           ; simple_byte           10     6 (average)
 18146                           ;	Chosen strategy is simple_byte
 18147  0036A0  0A00               	xorlw	0	; case 0
 18148  0036A2  B4D8               	btfsc	status,2,c
 18149  0036A4  D7EF               	goto	i2l9838
 18150  0036A6  0A01               	xorlw	1	; case 1
 18151  0036A8  B4D8               	btfsc	status,2,c
 18152  0036AA  D7F4               	goto	i2l9844
 18153  0036AC  0A02               	xorlw	2	; case 3
 18154  0036AE  B4D8               	btfsc	status,2,c
 18155  0036B0  D7EB               	goto	i2l9840
 18156                           
 18157                           ; BSR set to: 0
 18158                           ;interruptHandler.c: 34: }
 18159  0036B2  D005               	goto	i2l9854
 18160  0036B4                     i2l9850:
 18161                           
 18162                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 18163  0036B4  0100               	movlb	0	; () banked
 18164  0036B6  51FC               	movf	_machine_state& (0+255),w,b
 18165  0036B8  B4D8               	btfsc	status,2,c
 18166                           
 18167                           ; BSR set to: 0
 18168                           ;interruptHandler.c: 36: updateMenu();
 18169  0036BA  EC04  F016         	call	_updateMenu	;wreg free
 18170  0036BE                     i2l9854:
 18171                           
 18172                           ;interruptHandler.c: 37: }
 18173                           ;interruptHandler.c: 38: }
 18174                           ;interruptHandler.c: 41: if(TMR0IF){
 18175  0036BE  A4F2               	btfss	intcon,2,c	;volatile
 18176  0036C0  D00C               	goto	i2l9868
 18177                           
 18178                           ;interruptHandler.c: 42: TMR0IF = 0;
 18179  0036C2  94F2               	bcf	intcon,2,c	;volatile
 18180                           
 18181                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 18182  0036C4  0100               	movlb	0	; () banked
 18183  0036C6  05FC               	decf	_machine_state& (0+255),w,b
 18184  0036C8  A4D8               	btfss	status,2,c
 18185  0036CA  D007               	goto	i2l9868
 18186                           
 18187                           ; BSR set to: 0
 18188                           ;interruptHandler.c: 44: printSortTimer();
 18189  0036CC  EC64  F017         	call	_printSortTimer	;wreg free
 18190                           
 18191                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 18192  0036D0  0E85               	movlw	133
 18193  0036D2  6ED7               	movwf	4055,c	;volatile
 18194                           
 18195                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 18196  0036D4  0EEE               	movlw	238
 18197  0036D6  6ED6               	movwf	4054,c	;volatile
 18198                           
 18199                           ;interruptHandler.c: 48: TMR0ON = 1;
 18200  0036D8  8ED5               	bsf	4053,7,c	;volatile
 18201  0036DA                     i2l9868:
 18202                           
 18203                           ;interruptHandler.c: 49: }
 18204                           ;interruptHandler.c: 50: }
 18205                           ;interruptHandler.c: 53: if(TMR1IF){
 18206  0036DA  A09E               	btfss	3998,0,c	;volatile
 18207  0036DC  D02A               	goto	i2l9896
 18208                           
 18209                           ;interruptHandler.c: 54: TMR1IF = 0;
 18210  0036DE  909E               	bcf	3998,0,c	;volatile
 18211                           
 18212                           ;interruptHandler.c: 55: TMR1ON = 0;
 18213  0036E0  90CD               	bcf	4045,0,c	;volatile
 18214                           
 18215                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 18216  0036E2  0100               	movlb	0	; () banked
 18217  0036E4  05FC               	decf	_machine_state& (0+255),w,b
 18218  0036E6  A4D8               	btfss	status,2,c
 18219  0036E8  D024               	goto	i2l9896
 18220                           
 18221                           ; BSR set to: 0
 18222                           ;interruptHandler.c: 57: if(was_low_1){
 18223  0036EA  5077               	movf	_was_low_1,w,c	;volatile
 18224  0036EC  1078               	iorwf	_was_low_1+1,w,c	;volatile
 18225  0036EE  B4D8               	btfsc	status,2,c
 18226  0036F0  D00A               	goto	i2l1011
 18227                           
 18228                           ; BSR set to: 0
 18229                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 18230  0036F2  828B               	bsf	3979,1,c	;volatile
 18231                           
 18232                           ; BSR set to: 0
 18233                           ;interruptHandler.c: 59: was_low_1 = 0;
 18234  0036F4  0E00               	movlw	0
 18235  0036F6  6E78               	movwf	_was_low_1+1,c	;volatile
 18236  0036F8  0E00               	movlw	0
 18237  0036FA  6E77               	movwf	_was_low_1,c	;volatile
 18238                           
 18239                           ; BSR set to: 0
 18240                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 18241  0036FC  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 18242                           
 18243                           ; BSR set to: 0
 18244                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 18245  003700  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 18246                           
 18247                           ;interruptHandler.c: 62: }
 18248  003704  D00F               	goto	i2l9890
 18249  003706                     i2l1011:
 18250                           
 18251                           ; BSR set to: 0
 18252                           ;interruptHandler.c: 63: else{
 18253                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 18254  003706  928B               	bcf	3979,1,c	;volatile
 18255                           
 18256                           ; BSR set to: 0
 18257                           ;interruptHandler.c: 65: was_low_1 = 1;
 18258  003708  0E00               	movlw	0
 18259  00370A  6E78               	movwf	_was_low_1+1,c	;volatile
 18260  00370C  0E01               	movlw	1
 18261  00370E  6E77               	movwf	_was_low_1,c	;volatile
 18262                           
 18263                           ; BSR set to: 0
 18264                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 18265  003710  0100               	movlb	0	; () banked
 18266  003712  51DA               	movf	_servoTimes& (0+255),w,b
 18267  003714  0800               	sublw	0
 18268  003716  0F20               	addlw	32
 18269  003718  6ECF               	movwf	4047,c	;volatile
 18270                           
 18271                           ; BSR set to: 0
 18272                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 18273  00371A  0100               	movlb	0	; () banked
 18274  00371C  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 18275  00371E  0800               	sublw	0
 18276  003720  0F20               	addlw	32
 18277  003722  6ECE               	movwf	4046,c	;volatile
 18278  003724                     i2l9890:
 18279                           
 18280                           ; BSR set to: 0
 18281                           ;interruptHandler.c: 68: }
 18282                           ;interruptHandler.c: 69: TMR1ON = 1;
 18283  003724  80CD               	bsf	4045,0,c	;volatile
 18284                           
 18285                           ; BSR set to: 0
 18286                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 18287  003726  0E0A               	movlw	10
 18288  003728  266D               	addwf	_servo_timer_counter,f,c	;volatile
 18289  00372A  0E00               	movlw	0
 18290  00372C  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 18291                           
 18292                           ; BSR set to: 0
 18293                           ;interruptHandler.c: 72: updateServoStates();
 18294  00372E  ECFB  F01C         	call	_updateServoStates	;wreg free
 18295  003732                     i2l9896:
 18296                           
 18297                           ;interruptHandler.c: 73: }
 18298                           ;interruptHandler.c: 74: }
 18299                           ;interruptHandler.c: 77: if(TMR2IF){
 18300  003732  A29E               	btfss	3998,1,c	;volatile
 18301  003734  D026               	goto	i2l9922
 18302                           
 18303                           ;interruptHandler.c: 80: TMR2IF = 0;
 18304  003736  929E               	bcf	3998,1,c	;volatile
 18305                           
 18306                           ;interruptHandler.c: 81: TMR2ON = 0;
 18307  003738  94CA               	bcf	4042,2,c	;volatile
 18308                           
 18309                           ;interruptHandler.c: 82: timer2_counter++;
 18310  00373A  4A73               	infsnz	_timer2_counter,f,c	;volatile
 18311  00373C  2A74               	incf	_timer2_counter+1,f,c	;volatile
 18312                           
 18313                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 18314  00373E  0100               	movlb	0	; () banked
 18315  003740  05FC               	decf	_machine_state& (0+255),w,b
 18316  003742  A4D8               	btfss	status,2,c
 18317  003744  D01E               	goto	i2l9922
 18318                           
 18319                           ; BSR set to: 0
 18320                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 18321  003746  5079               	movf	_was_low_2,w,c	;volatile
 18322  003748  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18323  00374A  B4D8               	btfsc	status,2,c
 18324  00374C  D00A               	goto	i2l9912
 18325                           
 18326                           ; BSR set to: 0
 18327  00374E  0E02               	movlw	2
 18328  003750  1873               	xorwf	_timer2_counter,w,c	;volatile
 18329  003752  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 18330  003754  A4D8               	btfss	status,2,c
 18331  003756  D005               	goto	i2l9912
 18332                           
 18333                           ; BSR set to: 0
 18334                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 18335  003758  868A               	bsf	3978,3,c	;volatile
 18336                           
 18337                           ; BSR set to: 0
 18338                           ;interruptHandler.c: 87: was_low_2 = 0;
 18339  00375A  0E00               	movlw	0
 18340  00375C  6E7A               	movwf	_was_low_2+1,c	;volatile
 18341  00375E  0E00               	movlw	0
 18342  003760  D008               	goto	L18
 18343  003762                     i2l9912:
 18344                           
 18345                           ; BSR set to: 0
 18346                           ;interruptHandler.c: 90: else if(!was_low_2){
 18347  003762  5079               	movf	_was_low_2,w,c	;volatile
 18348  003764  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18349  003766  A4D8               	btfss	status,2,c
 18350  003768  D009               	goto	i2l9918
 18351                           
 18352                           ; BSR set to: 0
 18353                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 18354  00376A  968A               	bcf	3978,3,c	;volatile
 18355                           
 18356                           ; BSR set to: 0
 18357                           ;interruptHandler.c: 92: was_low_2 = 1;
 18358  00376C  0E00               	movlw	0
 18359  00376E  6E7A               	movwf	_was_low_2+1,c	;volatile
 18360  003770  0E01               	movlw	1
 18361  003772                     L18:
 18362  003772  6E79               	movwf	_was_low_2,c	;volatile
 18363                           
 18364                           ;interruptHandler.c: 93: timer2_counter = 0;
 18365  003774  0E00               	movlw	0
 18366  003776  6E74               	movwf	_timer2_counter+1,c	;volatile
 18367  003778  0E00               	movlw	0
 18368  00377A  6E73               	movwf	_timer2_counter,c	;volatile
 18369  00377C                     i2l9918:
 18370                           
 18371                           ; BSR set to: 0
 18372                           ;interruptHandler.c: 94: }
 18373                           ;interruptHandler.c: 95: updateArmState();
 18374  00377C  ECAB  F028         	call	_updateArmState	;wreg free
 18375                           
 18376                           ;interruptHandler.c: 96: TMR2ON = 1;
 18377  003780  84CA               	bsf	4042,2,c	;volatile
 18378  003782                     i2l9922:
 18379                           
 18380                           ;interruptHandler.c: 97: }
 18381                           ;interruptHandler.c: 98: }
 18382                           ;interruptHandler.c: 101: if(TMR3IF){
 18383  003782  A2A1               	btfss	4001,1,c	;volatile
 18384  003784  D024               	goto	i2l1022
 18385                           
 18386                           ;interruptHandler.c: 102: TMR3IF = 0;
 18387  003786  92A1               	bcf	4001,1,c	;volatile
 18388                           
 18389                           ;interruptHandler.c: 103: TMR3ON = 0;
 18390  003788  90B1               	bcf	4017,0,c	;volatile
 18391                           
 18392                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 18393  00378A  0100               	movlb	0	; () banked
 18394  00378C  05FC               	decf	_machine_state& (0+255),w,b
 18395  00378E  A4D8               	btfss	status,2,c
 18396  003790  D01E               	goto	i2l1022
 18397                           
 18398                           ; BSR set to: 0
 18399                           ;interruptHandler.c: 105: if(was_low_3){
 18400  003792  507B               	movf	_was_low_3,w,c	;volatile
 18401  003794  107C               	iorwf	_was_low_3+1,w,c	;volatile
 18402  003796  B4D8               	btfsc	status,2,c
 18403  003798  D00A               	goto	i2l1020
 18404                           
 18405                           ; BSR set to: 0
 18406                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 18407  00379A  848B               	bsf	3979,2,c	;volatile
 18408                           
 18409                           ; BSR set to: 0
 18410                           ;interruptHandler.c: 107: was_low_3 = 0;
 18411  00379C  0E00               	movlw	0
 18412  00379E  6E7C               	movwf	_was_low_3+1,c	;volatile
 18413  0037A0  0E00               	movlw	0
 18414  0037A2  6E7B               	movwf	_was_low_3,c	;volatile
 18415                           
 18416                           ; BSR set to: 0
 18417                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 18418  0037A4  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 18419                           
 18420                           ; BSR set to: 0
 18421                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 18422  0037A8  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 18423                           
 18424                           ;interruptHandler.c: 110: }
 18425  0037AC  D00F               	goto	i2l9944
 18426  0037AE                     i2l1020:
 18427                           
 18428                           ; BSR set to: 0
 18429                           ;interruptHandler.c: 111: else{
 18430                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 18431  0037AE  948B               	bcf	3979,2,c	;volatile
 18432                           
 18433                           ; BSR set to: 0
 18434                           ;interruptHandler.c: 113: was_low_3 = 1;
 18435  0037B0  0E00               	movlw	0
 18436  0037B2  6E7C               	movwf	_was_low_3+1,c	;volatile
 18437  0037B4  0E01               	movlw	1
 18438  0037B6  6E7B               	movwf	_was_low_3,c	;volatile
 18439                           
 18440                           ; BSR set to: 0
 18441                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 18442  0037B8  0100               	movlb	0	; () banked
 18443  0037BA  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 18444  0037BC  0800               	sublw	0
 18445  0037BE  0F20               	addlw	32
 18446  0037C0  6EB3               	movwf	4019,c	;volatile
 18447                           
 18448                           ; BSR set to: 0
 18449                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 18450  0037C2  0100               	movlb	0	; () banked
 18451  0037C4  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 18452  0037C6  0800               	sublw	0
 18453  0037C8  0F20               	addlw	32
 18454  0037CA  6EB2               	movwf	4018,c	;volatile
 18455  0037CC                     i2l9944:
 18456                           
 18457                           ; BSR set to: 0
 18458                           ;interruptHandler.c: 116: }
 18459                           ;interruptHandler.c: 117: TMR3ON = 1;
 18460  0037CC  80B1               	bsf	4017,0,c	;volatile
 18461  0037CE                     i2l1022:
 18462  0037CE  C05A  FFF5         	movff	??_handler+15,tablat
 18463  0037D2  C059  FFF8         	movff	??_handler+14,tblptru
 18464  0037D6  C058  FFF7         	movff	??_handler+13,tblptrh
 18465  0037DA  C057  FFF6         	movff	??_handler+12,tblptrl
 18466  0037DE  C056  FFF4         	movff	??_handler+11,prodh
 18467  0037E2  C055  FFF3         	movff	??_handler+10,prodl
 18468  0037E6  C054  FFDA         	movff	??_handler+9,fsr2h
 18469  0037EA  C053  FFD9         	movff	??_handler+8,fsr2l
 18470  0037EE  C052  FFE2         	movff	??_handler+7,fsr1h
 18471  0037F2  C051  FFE1         	movff	??_handler+6,fsr1l
 18472  0037F6  C050  FFEA         	movff	??_handler+5,fsr0h
 18473  0037FA  C04F  FFE9         	movff	??_handler+4,fsr0l
 18474  0037FE  C04E  FFFB         	movff	??_handler+3,pclatu
 18475  003802  C04D  FFFA         	movff	??_handler+2,pclath
 18476  003806  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 18477  003808  0011               	retfie		f
 18478  00380A                     __end_of_handler:
 18479                           	opt stack 0
 18480                           pclatu	equ	0xFFB
 18481                           pclath	equ	0xFFA
 18482                           tblptru	equ	0xFF8
 18483                           tblptrh	equ	0xFF7
 18484                           tblptrl	equ	0xFF6
 18485                           tablat	equ	0xFF5
 18486                           prodh	equ	0xFF4
 18487                           prodl	equ	0xFF3
 18488                           intcon	equ	0xFF2
 18489                           intcon2	equ	0xFF1
 18490                           intcon3	equ	0xFF0
 18491                           indf0	equ	0xFEF
 18492                           postinc0	equ	0xFEE
 18493                           fsr0h	equ	0xFEA
 18494                           fsr0l	equ	0xFE9
 18495                           wreg	equ	0xFE8
 18496                           postdec1	equ	0xFE5
 18497                           fsr1h	equ	0xFE2
 18498                           fsr1l	equ	0xFE1
 18499                           indf2	equ	0xFDF
 18500                           postinc2	equ	0xFDE
 18501                           postdec2	equ	0xFDD
 18502                           fsr2h	equ	0xFDA
 18503                           fsr2l	equ	0xFD9
 18504                           status	equ	0xFD8
 18505                           
 18506 ;; *************** function _updateServoStates *****************
 18507 ;; Defined at:
 18508 ;;		line 539 in file "sort.c"
 18509 ;; Parameters:    Size  Location     Type
 18510 ;;		None
 18511 ;; Auto vars:     Size  Location     Type
 18512 ;;		None
 18513 ;; Return value:  Size  Location     Type
 18514 ;;                  1    wreg      void 
 18515 ;; Registers used:
 18516 ;;		wreg, status,2, status,0, cstack
 18517 ;; Tracked objects:
 18518 ;;		On entry : 0/0
 18519 ;;		On exit  : 0/0
 18520 ;;		Unchanged: 0/0
 18521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18524 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18525 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18526 ;;Total ram usage:        2 bytes
 18527 ;; Hardware stack levels used:    1
 18528 ;; Hardware stack levels required when called:    1
 18529 ;; This function calls:
 18530 ;;		i2_updateServoPosition
 18531 ;; This function is called by:
 18532 ;;		_handler
 18533 ;; This function uses a non-reentrant model
 18534 ;;
 18535                           
 18536                           	psect	text60
 18537  0039F6                     __ptext60:
 18538                           	opt stack 0
 18539  0039F6                     _updateServoStates:
 18540                           	opt stack 22
 18541                           
 18542                           ;sort.c: 541: if(servo_timer_counter >= servo_timer_target){
 18543                           
 18544                           ;incstack = 0
 18545  0039F6  506F               	movf	_servo_timer_target,w,c	;volatile
 18546  0039F8  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 18547  0039FA  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 18548  0039FC  0A80               	xorlw	128
 18549  0039FE  6E09               	movwf	??_updateServoStates& (0+255),c
 18550  003A00  5070               	movf	_servo_timer_target+1,w,c	;volatile
 18551  003A02  0A80               	xorlw	128
 18552  003A04  5809               	subwfb	??_updateServoStates& (0+255),w,c
 18553  003A06  A0D8               	btfss	status,0,c
 18554  003A08  0012               	return	
 18555                           
 18556                           ;sort.c: 543: if(f_panning_to_bin){
 18557  003A0A  5061               	movf	_f_panning_to_bin,w,c	;volatile
 18558  003A0C  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 18559  003A0E  A4D8               	btfss	status,2,c
 18560  003A10  D036               	goto	i2l9714
 18561  003A12  D05F               	goto	i2l9718
 18562  003A14                     i2l9688:
 18563                           
 18564                           ;sort.c: 547: updateServoPosition(1260, 3);
 18565  003A14  0E04               	movlw	4
 18566  003A16  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18567  003A18  0EEC               	movlw	236
 18568  003A1A  6E01               	movwf	i2updateServoPosition@time_us,c
 18569  003A1C  0E00               	movlw	0
 18570  003A1E  6E04               	movwf	i2updateServoPosition@timer+1,c
 18571  003A20  0E03               	movlw	3
 18572  003A22  6E03               	movwf	i2updateServoPosition@timer,c
 18573  003A24  EC41  F026         	call	i2_updateServoPosition	;wreg free
 18574  003A28  D025               	goto	i2l9708
 18575  003A2A                     i2l9692:
 18576                           
 18577                           ;sort.c: 549: servo_timer_target = 700;
 18578  003A2A  0E02               	movlw	2
 18579  003A2C  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18580  003A2E  0EBC               	movlw	188
 18581  003A30  6E6F               	movwf	_servo_timer_target,c	;volatile
 18582                           
 18583                           ;sort.c: 550: break;
 18584  003A32  D04A               	goto	i2l9716
 18585  003A34                     i2l9694:
 18586                           
 18587                           ;sort.c: 552: updateServoPosition(1260, 3);
 18588  003A34  0E04               	movlw	4
 18589  003A36  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18590  003A38  0EEC               	movlw	236
 18591  003A3A  6E01               	movwf	i2updateServoPosition@time_us,c
 18592  003A3C  0E00               	movlw	0
 18593  003A3E  6E04               	movwf	i2updateServoPosition@timer+1,c
 18594  003A40  0E03               	movlw	3
 18595  003A42  6E03               	movwf	i2updateServoPosition@timer,c
 18596  003A44  EC41  F026         	call	i2_updateServoPosition	;wreg free
 18597  003A48  D015               	goto	i2l9708
 18598  003A4A                     i2l9700:
 18599                           
 18600                           ;sort.c: 558: updateServoPosition(1390, 3);
 18601  003A4A  0E05               	movlw	5
 18602  003A4C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18603  003A4E  0E6E               	movlw	110
 18604  003A50  6E01               	movwf	i2updateServoPosition@time_us,c
 18605  003A52  0E00               	movlw	0
 18606  003A54  6E04               	movwf	i2updateServoPosition@timer+1,c
 18607  003A56  0E03               	movlw	3
 18608  003A58  6E03               	movwf	i2updateServoPosition@timer,c
 18609  003A5A  EC41  F026         	call	i2_updateServoPosition	;wreg free
 18610  003A5E  D00A               	goto	i2l9708
 18611  003A60                     i2l9706:
 18612                           
 18613                           ;sort.c: 563: updateServoPosition(1390, 3);
 18614  003A60  0E05               	movlw	5
 18615  003A62  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18616  003A64  0E6E               	movlw	110
 18617  003A66  6E01               	movwf	i2updateServoPosition@time_us,c
 18618  003A68  0E00               	movlw	0
 18619  003A6A  6E04               	movwf	i2updateServoPosition@timer+1,c
 18620  003A6C  0E03               	movlw	3
 18621  003A6E  6E03               	movwf	i2updateServoPosition@timer,c
 18622  003A70  EC41  F026         	call	i2_updateServoPosition	;wreg free
 18623  003A74                     i2l9708:
 18624                           
 18625                           ;sort.c: 564: servo_timer_counter = 0;
 18626  003A74  0E00               	movlw	0
 18627  003A76  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18628  003A78  0E00               	movlw	0
 18629  003A7A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18630  003A7C  D7D6               	goto	i2l9692
 18631  003A7E                     i2l9714:
 18632  003A7E  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 18633  003A82  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 18634                           
 18635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18636                           ; Switch size 1, requested type "space"
 18637                           ; Number of cases is 4, Range of values is 1 to 9
 18638                           ; switch strategies available:
 18639                           ; Name         Instructions Cycles
 18640                           ; simple_byte           13     7 (average)
 18641                           ;	Chosen strategy is simple_byte
 18642  003A86  500A               	movf	??_updateServoStates+1,w,c
 18643  003A88  0A01               	xorlw	1	; case 1
 18644  003A8A  B4D8               	btfsc	status,2,c
 18645  003A8C  D00A               	goto	i2l10392
 18646  003A8E  0A02               	xorlw	2	; case 3
 18647  003A90  B4D8               	btfsc	status,2,c
 18648  003A92  D00C               	goto	i2l10394
 18649  003A94  0A05               	xorlw	5	; case 6
 18650  003A96  B4D8               	btfsc	status,2,c
 18651  003A98  D00E               	goto	i2l10396
 18652  003A9A  0A0F               	xorlw	15	; case 9
 18653  003A9C  B4D8               	btfsc	status,2,c
 18654  003A9E  D010               	goto	i2l10398
 18655  003AA0  D013               	goto	i2l9716
 18656  003AA2                     i2l10392:
 18657                           
 18658                           ; Switch size 1, requested type "space"
 18659                           ; Number of cases is 1, Range of values is 244 to 244
 18660                           ; switch strategies available:
 18661                           ; Name         Instructions Cycles
 18662                           ; simple_byte            4     3 (average)
 18663                           ;	Chosen strategy is simple_byte
 18664  003AA2  5009               	movf	??_updateServoStates,w,c
 18665  003AA4  0AF4               	xorlw	244	; case 244
 18666  003AA6  B4D8               	btfsc	status,2,c
 18667  003AA8  D7B5               	goto	i2l9688
 18668  003AAA  D00E               	goto	i2l9716
 18669  003AAC                     i2l10394:
 18670                           
 18671                           ; Switch size 1, requested type "space"
 18672                           ; Number of cases is 1, Range of values is 82 to 82
 18673                           ; switch strategies available:
 18674                           ; Name         Instructions Cycles
 18675                           ; simple_byte            4     3 (average)
 18676                           ;	Chosen strategy is simple_byte
 18677  003AAC  5009               	movf	??_updateServoStates,w,c
 18678  003AAE  0A52               	xorlw	82	; case 82
 18679  003AB0  B4D8               	btfsc	status,2,c
 18680  003AB2  D7C0               	goto	i2l9694
 18681  003AB4  D009               	goto	i2l9716
 18682  003AB6                     i2l10396:
 18683                           
 18684                           ; Switch size 1, requested type "space"
 18685                           ; Number of cases is 1, Range of values is 134 to 134
 18686                           ; switch strategies available:
 18687                           ; Name         Instructions Cycles
 18688                           ; simple_byte            4     3 (average)
 18689                           ;	Chosen strategy is simple_byte
 18690  003AB6  5009               	movf	??_updateServoStates,w,c
 18691  003AB8  0A86               	xorlw	134	; case 134
 18692  003ABA  B4D8               	btfsc	status,2,c
 18693  003ABC  D7C6               	goto	i2l9700
 18694  003ABE  D004               	goto	i2l9716
 18695  003AC0                     i2l10398:
 18696                           
 18697                           ; Switch size 1, requested type "space"
 18698                           ; Number of cases is 1, Range of values is 96 to 96
 18699                           ; switch strategies available:
 18700                           ; Name         Instructions Cycles
 18701                           ; simple_byte            4     3 (average)
 18702                           ;	Chosen strategy is simple_byte
 18703  003AC0  5009               	movf	??_updateServoStates,w,c
 18704  003AC2  0A60               	xorlw	96	; case 96
 18705  003AC4  B4D8               	btfsc	status,2,c
 18706  003AC6  D7CC               	goto	i2l9706
 18707  003AC8                     i2l9716:
 18708                           
 18709                           ;sort.c: 570: f_panning_to_bin = 0;
 18710  003AC8  0E00               	movlw	0
 18711  003ACA  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 18712  003ACC  0E00               	movlw	0
 18713  003ACE  6E61               	movwf	_f_panning_to_bin,c	;volatile
 18714                           
 18715                           ;sort.c: 571: }
 18716  003AD0  0012               	return	
 18717  003AD2                     i2l9718:
 18718                           
 18719                           ;sort.c: 572: else if(pan_servo_state == 1200){
 18720  003AD2  0EB0               	movlw	176
 18721  003AD4  186B               	xorwf	_pan_servo_state,w,c	;volatile
 18722  003AD6  E15A               	bnz	i2l9748
 18723  003AD8  0E04               	movlw	4
 18724  003ADA  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 18725  003ADC  A4D8               	btfss	status,2,c
 18726  003ADE  D056               	goto	i2l9748
 18727                           
 18728                           ;sort.c: 574: servo_timer_counter = 0;
 18729  003AE0  0E00               	movlw	0
 18730  003AE2  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18731  003AE4  0E00               	movlw	0
 18732  003AE6  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18733                           
 18734                           ;sort.c: 575: }
 18735  003AE8  0012               	return	
 18736  003AEA                     i2l9722:
 18737                           
 18738                           ;sort.c: 580: updateServoPosition(1050, 3);
 18739  003AEA  0E04               	movlw	4
 18740  003AEC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18741  003AEE  0E1A               	movlw	26
 18742  003AF0  6E01               	movwf	i2updateServoPosition@time_us,c
 18743  003AF2  0E00               	movlw	0
 18744  003AF4  6E04               	movwf	i2updateServoPosition@timer+1,c
 18745  003AF6  0E03               	movlw	3
 18746  003AF8  6E03               	movwf	i2updateServoPosition@timer,c
 18747  003AFA  EC41  F026         	call	i2_updateServoPosition	;wreg free
 18748                           
 18749                           ;sort.c: 581: servo_timer_counter = 0;
 18750  003AFE  0E00               	movlw	0
 18751  003B00  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18752  003B02  0E00               	movlw	0
 18753  003B04  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18754                           
 18755                           ;sort.c: 582: servo_timer_target = 750;
 18756  003B06  0E02               	movlw	2
 18757  003B08  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18758  003B0A  0EEE               	movlw	238
 18759  003B0C  6E6F               	movwf	_servo_timer_target,c	;volatile
 18760                           
 18761                           ;sort.c: 583: break;
 18762  003B0E  0012               	return	
 18763  003B10                     i2l9728:
 18764                           
 18765                           ;sort.c: 585: updateServoPosition(1050, 3);
 18766  003B10  0E04               	movlw	4
 18767  003B12  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18768  003B14  0E1A               	movlw	26
 18769  003B16  6E01               	movwf	i2updateServoPosition@time_us,c
 18770  003B18  0E00               	movlw	0
 18771  003B1A  6E04               	movwf	i2updateServoPosition@timer+1,c
 18772  003B1C  0E03               	movlw	3
 18773  003B1E  6E03               	movwf	i2updateServoPosition@timer,c
 18774  003B20  EC41  F026         	call	i2_updateServoPosition	;wreg free
 18775                           
 18776                           ;sort.c: 586: servo_timer_counter = 0;
 18777  003B24  0E00               	movlw	0
 18778  003B26  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18779  003B28  0E00               	movlw	0
 18780  003B2A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18781                           
 18782                           ;sort.c: 587: servo_timer_target = 750;
 18783  003B2C  0E02               	movlw	2
 18784  003B2E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18785  003B30  0EEE               	movlw	238
 18786  003B32  6E6F               	movwf	_servo_timer_target,c	;volatile
 18787                           
 18788                           ;sort.c: 588: break;
 18789  003B34  0012               	return	
 18790  003B36                     i2l9734:
 18791                           
 18792                           ;sort.c: 591: updateServoPosition(1200, 1);
 18793  003B36  0E04               	movlw	4
 18794  003B38  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18795  003B3A  0EB0               	movlw	176
 18796  003B3C  6E01               	movwf	i2updateServoPosition@time_us,c
 18797  003B3E  0E00               	movlw	0
 18798  003B40  6E04               	movwf	i2updateServoPosition@timer+1,c
 18799  003B42  0E01               	movlw	1
 18800  003B44  6E03               	movwf	i2updateServoPosition@timer,c
 18801  003B46  EC41  F026         	call	i2_updateServoPosition	;wreg free
 18802                           
 18803                           ;sort.c: 592: updateServoPosition(1050, 3);
 18804  003B4A  0E04               	movlw	4
 18805  003B4C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18806  003B4E  0E1A               	movlw	26
 18807  003B50  6E01               	movwf	i2updateServoPosition@time_us,c
 18808  003B52  0E00               	movlw	0
 18809  003B54  6E04               	movwf	i2updateServoPosition@timer+1,c
 18810  003B56  0E03               	movlw	3
 18811  003B58  6E03               	movwf	i2updateServoPosition@timer,c
 18812  003B5A  EC41  F026         	call	i2_updateServoPosition	;wreg free
 18813                           
 18814                           ;sort.c: 593: servo_timer_counter = 0;
 18815  003B5E  0E00               	movlw	0
 18816  003B60  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18817  003B62  0E00               	movlw	0
 18818  003B64  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18819                           
 18820                           ;sort.c: 594: servo_timer_target = 9999;
 18821  003B66  0E27               	movlw	39
 18822  003B68  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18823  003B6A  0E0F               	movlw	15
 18824  003B6C  6E6F               	movwf	_servo_timer_target,c	;volatile
 18825                           
 18826                           ;sort.c: 596: f_can_distributed = 1;
 18827  003B6E  0E00               	movlw	0
 18828  003B70  0101               	movlb	1	; () banked
 18829  003B72  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 18830  003B74  0E01               	movlw	1
 18831  003B76  6F35               	movwf	_f_can_distributed& (0+255),b
 18832                           
 18833                           ; BSR set to: 1
 18834                           ;sort.c: 597: if(f_lastCan == 1){
 18835  003B78  0100               	movlb	0	; () banked
 18836  003B7A  05F0               	decf	_f_lastCan& (0+255),w,b
 18837  003B7C  0100               	movlb	0	; () banked
 18838  003B7E  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
 18839  003B80  A4D8               	btfss	status,2,c
 18840  003B82  0012               	return	
 18841                           
 18842                           ; BSR set to: 0
 18843                           ;sort.c: 598: machine_state = DoneSorting_state;
 18844  003B84  0E02               	movlw	2
 18845  003B86  0100               	movlb	0	; () banked
 18846  003B88  6FFC               	movwf	_machine_state& (0+255),b
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;sort.c: 604: }
 18850                           
 18851                           ; BSR set to: 0
 18852                           ;sort.c: 603: break;
 18853                           
 18854                           ;sort.c: 602: default:
 18855                           
 18856                           ; BSR set to: 0
 18857                           ;sort.c: 599: }
 18858                           ;sort.c: 600: break;
 18859  003B8A  0012               	return	
 18860  003B8C                     i2l9748:
 18861  003B8C  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 18862  003B90  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 18863                           
 18864                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18865                           ; Switch size 1, requested type "space"
 18866                           ; Number of cases is 2, Range of values is 4 to 5
 18867                           ; switch strategies available:
 18868                           ; Name         Instructions Cycles
 18869                           ; simple_byte            7     4 (average)
 18870                           ;	Chosen strategy is simple_byte
 18871  003B94  500A               	movf	??_updateServoStates+1,w,c
 18872  003B96  0A04               	xorlw	4	; case 4
 18873  003B98  B4D8               	btfsc	status,2,c
 18874  003B9A  D004               	goto	i2l10400
 18875  003B9C  0A01               	xorlw	1	; case 5
 18876  003B9E  A4D8               	btfss	status,2,c
 18877  003BA0  0012               	return	
 18878  003BA2  D008               	goto	i2l10402
 18879  003BA4                     i2l10400:
 18880                           
 18881                           ; Switch size 1, requested type "space"
 18882                           ; Number of cases is 2, Range of values is 26 to 236
 18883                           ; switch strategies available:
 18884                           ; Name         Instructions Cycles
 18885                           ; simple_byte            7     4 (average)
 18886                           ;	Chosen strategy is simple_byte
 18887  003BA4  5009               	movf	??_updateServoStates,w,c
 18888  003BA6  0A1A               	xorlw	26	; case 26
 18889  003BA8  B4D8               	btfsc	status,2,c
 18890  003BAA  D7C5               	goto	i2l9734
 18891  003BAC  0AF6               	xorlw	246	; case 236
 18892  003BAE  A4D8               	btfss	status,2,c
 18893  003BB0  0012               	return	
 18894  003BB2  D79B               	goto	i2l9722
 18895  003BB4                     i2l10402:
 18896                           
 18897                           ; Switch size 1, requested type "space"
 18898                           ; Number of cases is 1, Range of values is 110 to 110
 18899                           ; switch strategies available:
 18900                           ; Name         Instructions Cycles
 18901                           ; simple_byte            4     3 (average)
 18902                           ;	Chosen strategy is simple_byte
 18903  003BB4  5009               	movf	??_updateServoStates,w,c
 18904  003BB6  0A6E               	xorlw	110	; case 110
 18905  003BB8  A4D8               	btfss	status,2,c
 18906  003BBA  0012               	return	
 18907  003BBC  D7A9               	goto	i2l9728
 18908  003BBE                     __end_of_updateServoStates:
 18909                           	opt stack 0
 18910                           pclatu	equ	0xFFB
 18911                           pclath	equ	0xFFA
 18912                           tblptru	equ	0xFF8
 18913                           tblptrh	equ	0xFF7
 18914                           tblptrl	equ	0xFF6
 18915                           tablat	equ	0xFF5
 18916                           prodh	equ	0xFF4
 18917                           prodl	equ	0xFF3
 18918                           intcon	equ	0xFF2
 18919                           intcon2	equ	0xFF1
 18920                           intcon3	equ	0xFF0
 18921                           indf0	equ	0xFEF
 18922                           postinc0	equ	0xFEE
 18923                           fsr0h	equ	0xFEA
 18924                           fsr0l	equ	0xFE9
 18925                           wreg	equ	0xFE8
 18926                           postdec1	equ	0xFE5
 18927                           fsr1h	equ	0xFE2
 18928                           fsr1l	equ	0xFE1
 18929                           indf2	equ	0xFDF
 18930                           postinc2	equ	0xFDE
 18931                           postdec2	equ	0xFDD
 18932                           fsr2h	equ	0xFDA
 18933                           fsr2l	equ	0xFD9
 18934                           status	equ	0xFD8
 18935                           
 18936 ;; *************** function i2_updateServoPosition *****************
 18937 ;; Defined at:
 18938 ;;		line 524 in file "sort.c"
 18939 ;; Parameters:    Size  Location     Type
 18940 ;;  time_us         2    0[COMRAM] int 
 18941 ;;  timer           2    2[COMRAM] int 
 18942 ;; Auto vars:     Size  Location     Type
 18943 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18944 ;; Return value:  Size  Location     Type
 18945 ;;                  1    wreg      void 
 18946 ;; Registers used:
 18947 ;;		wreg, status,2, status,0
 18948 ;; Tracked objects:
 18949 ;;		On entry : 0/0
 18950 ;;		On exit  : 0/0
 18951 ;;		Unchanged: 0/0
 18952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18955 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18956 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18957 ;;Total ram usage:        8 bytes
 18958 ;; Hardware stack levels used:    1
 18959 ;; This function calls:
 18960 ;;		Nothing
 18961 ;; This function is called by:
 18962 ;;		_updateServoStates
 18963 ;; This function uses a non-reentrant model
 18964 ;;
 18965                           
 18966                           	psect	text61
 18967  004C82                     __ptext61:
 18968                           	opt stack 0
 18969  004C82                     i2_updateServoPosition:
 18970                           	opt stack 22
 18971                           
 18972                           ;sort.c: 525: unsigned int my_time = 65535 - time_us;
 18973                           
 18974                           ;incstack = 0
 18975  004C82  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18976  004C86  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18977  004C8A  1E05               	comf	??i2_updateServoPosition,f,c
 18978  004C8C  1E06               	comf	??i2_updateServoPosition+1,f,c
 18979  004C8E  4A05               	infsnz	??i2_updateServoPosition,f,c
 18980  004C90  2A06               	incf	??i2_updateServoPosition+1,f,c
 18981  004C92  0EFF               	movlw	255
 18982  004C94  2405               	addwf	??i2_updateServoPosition,w,c
 18983  004C96  6E07               	movwf	i2updateServoPosition@my_time,c
 18984  004C98  0EFF               	movlw	255
 18985  004C9A  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18986  004C9C  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18987                           
 18988                           ;sort.c: 526: switch(timer){
 18989  004C9E  D019               	goto	i2l8908
 18990  004CA0                     i2l8902:
 18991                           
 18992                           ;sort.c: 528: servoTimes[0] = my_time >> 8;
 18993  004CA0  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18994  004CA2  0100               	movlb	0	; () banked
 18995  004CA4  6FDA               	movwf	_servoTimes& (0+255),b
 18996  004CA6  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18997                           
 18998                           ;sort.c: 529: servoTimes[1] = my_time & 0xFF;
 18999  004CA8  5007               	movf	i2updateServoPosition@my_time,w,c
 19000  004CAA  0100               	movlb	0	; () banked
 19001  004CAC  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 19002  004CAE  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 19003                           
 19004                           ; BSR set to: 0
 19005                           ;sort.c: 531: pan_servo_state = time_us;
 19006  004CB0  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 19007  004CB4  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 19008  004CB8                     i2l892:
 19009                           
 19010                           ;sort.c: 533: servoTimes[2] = my_time >> 8;
 19011  004CB8  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19012  004CBA  0100               	movlb	0	; () banked
 19013  004CBC  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 19014  004CBE  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 19015                           
 19016                           ;sort.c: 534: servoTimes[3] = my_time & 0xFF;
 19017  004CC0  5007               	movf	i2updateServoPosition@my_time,w,c
 19018  004CC2  0100               	movlb	0	; () banked
 19019  004CC4  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 19020  004CC6  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 19021                           
 19022                           ; BSR set to: 0
 19023                           ;sort.c: 536: tilt_servo_state = time_us;
 19024  004CC8  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 19025  004CCC  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 19026                           
 19027                           ;sort.c: 537: }
 19028  004CD0  0012               	return	
 19029  004CD2                     i2l8908:
 19030  004CD2  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 19031  004CD6  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 19032                           
 19033                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19034                           ; Switch size 1, requested type "space"
 19035                           ; Number of cases is 1, Range of values is 0 to 0
 19036                           ; switch strategies available:
 19037                           ; Name         Instructions Cycles
 19038                           ; simple_byte            4     3 (average)
 19039                           ;	Chosen strategy is simple_byte
 19040  004CDA  5006               	movf	??i2_updateServoPosition+1,w,c
 19041  004CDC  0A00               	xorlw	0	; case 0
 19042  004CDE  A4D8               	btfss	status,2,c
 19043  004CE0  0012               	return	
 19044                           
 19045                           ; Switch size 1, requested type "space"
 19046                           ; Number of cases is 2, Range of values is 1 to 3
 19047                           ; switch strategies available:
 19048                           ; Name         Instructions Cycles
 19049                           ; simple_byte            7     4 (average)
 19050                           ;	Chosen strategy is simple_byte
 19051  004CE2  5005               	movf	??i2_updateServoPosition,w,c
 19052  004CE4  0A01               	xorlw	1	; case 1
 19053  004CE6  B4D8               	btfsc	status,2,c
 19054  004CE8  D7DB               	goto	i2l8902
 19055  004CEA  0A02               	xorlw	2	; case 3
 19056  004CEC  A4D8               	btfss	status,2,c
 19057  004CEE  0012               	return	
 19058  004CF0  D7E3               	goto	i2l892
 19059  004CF2                     __end_ofi2_updateServoPosition:
 19060                           	opt stack 0
 19061                           pclatu	equ	0xFFB
 19062                           pclath	equ	0xFFA
 19063                           tblptru	equ	0xFF8
 19064                           tblptrh	equ	0xFF7
 19065                           tblptrl	equ	0xFF6
 19066                           tablat	equ	0xFF5
 19067                           prodh	equ	0xFF4
 19068                           prodl	equ	0xFF3
 19069                           intcon	equ	0xFF2
 19070                           intcon2	equ	0xFF1
 19071                           intcon3	equ	0xFF0
 19072                           indf0	equ	0xFEF
 19073                           postinc0	equ	0xFEE
 19074                           fsr0h	equ	0xFEA
 19075                           fsr0l	equ	0xFE9
 19076                           wreg	equ	0xFE8
 19077                           postdec1	equ	0xFE5
 19078                           fsr1h	equ	0xFE2
 19079                           fsr1l	equ	0xFE1
 19080                           indf2	equ	0xFDF
 19081                           postinc2	equ	0xFDE
 19082                           postdec2	equ	0xFDD
 19083                           fsr2h	equ	0xFDA
 19084                           fsr2l	equ	0xFD9
 19085                           status	equ	0xFD8
 19086                           
 19087 ;; *************** function _updateMenu *****************
 19088 ;; Defined at:
 19089 ;;		line 216 in file "UI.c"
 19090 ;; Parameters:    Size  Location     Type
 19091 ;;		None
 19092 ;; Auto vars:     Size  Location     Type
 19093 ;;		None
 19094 ;; Return value:  Size  Location     Type
 19095 ;;                  1    wreg      void 
 19096 ;; Registers used:
 19097 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19098 ;; Tracked objects:
 19099 ;;		On entry : 0/0
 19100 ;;		On exit  : 0/0
 19101 ;;		Unchanged: 0/0
 19102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19106 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19107 ;;Total ram usage:        2 bytes
 19108 ;; Hardware stack levels used:    1
 19109 ;; Hardware stack levels required when called:    5
 19110 ;; This function calls:
 19111 ;;		_change_state_to_logs_11
 19112 ;;		_change_state_to_logs_12
 19113 ;;		_change_state_to_logs_22
 19114 ;;		_change_state_to_logs_23
 19115 ;;		_change_state_to_logs_33
 19116 ;;		_change_state_to_logs_34
 19117 ;;		_change_state_to_menu_11
 19118 ;;		_change_state_to_menu_23
 19119 ;;		_dispLogs
 19120 ;;		_inputHandler
 19121 ;;		i2_change_state_to_menu_12
 19122 ;;		i2_change_state_to_menu_22
 19123 ;;		i2_change_state_to_menu_start
 19124 ;; This function is called by:
 19125 ;;		_handler
 19126 ;; This function uses a non-reentrant model
 19127 ;;
 19128                           
 19129                           	psect	text62
 19130  002C08                     __ptext62:
 19131                           	opt stack 0
 19132  002C08                     _updateMenu:
 19133                           	opt stack 18
 19134                           
 19135                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 19136                           
 19137                           ;incstack = 0
 19138  002C08  0E00               	movlw	0
 19139  002C0A  6E76               	movwf	_up+1,c
 19140  002C0C  0E00               	movlw	0
 19141  002C0E  6E75               	movwf	_up,c
 19142  002C10  0E00               	movlw	0
 19143  002C12  6E5E               	movwf	_down+1,c
 19144  002C14  0E00               	movlw	0
 19145  002C16  6E5D               	movwf	_down,c
 19146  002C18  0E00               	movlw	0
 19147  002C1A  6E60               	movwf	_enter+1,c
 19148  002C1C  0E00               	movlw	0
 19149  002C1E  6E5F               	movwf	_enter,c
 19150  002C20  0E00               	movlw	0
 19151  002C22  6E5C               	movwf	_back+1,c
 19152  002C24  0E00               	movlw	0
 19153  002C26  6E5B               	movwf	_back,c
 19154                           
 19155                           ;UI.c: 218: (INTCONbits.GIE = 0);
 19156  002C28  9EF2               	bcf	intcon,7,c	;volatile
 19157                           
 19158                           ;UI.c: 220: if (inputHandler()
 19159                           ;UI.c: 223: ){
 19160  002C2A  EC05  F01C         	call	_inputHandler	;wreg free
 19161  002C2E  502A               	movf	?_inputHandler,w,c
 19162  002C30  102B               	iorwf	?_inputHandler+1,w,c
 19163  002C32  A4D8               	btfss	status,2,c
 19164  002C34  D112               	goto	i2l9442
 19165  002C36  D146               	goto	i2l263
 19166  002C38                     i2l9294:
 19167                           
 19168                           ;UI.c: 227: change_state_to_menu_11();
 19169  002C38  ECC8  F029         	call	_change_state_to_menu_11	;wreg free
 19170                           
 19171                           ;UI.c: 228: break;
 19172  002C3C  D143               	goto	i2l263
 19173  002C3E                     i2l9296:
 19174                           
 19175                           ;UI.c: 231: if(up){
 19176  002C3E  5075               	movf	_up,w,c
 19177  002C40  1076               	iorwf	_up+1,w,c
 19178  002C42  B4D8               	btfsc	status,2,c
 19179  002C44  D003               	goto	i2l9300
 19180                           
 19181                           ;UI.c: 232: change_state_to_menu_23();
 19182  002C46  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 19183                           
 19184                           ;UI.c: 233: }
 19185  002C4A  D13C               	goto	i2l263
 19186  002C4C                     i2l9300:
 19187                           
 19188                           ;UI.c: 234: else if(down){
 19189  002C4C  505D               	movf	_down,w,c
 19190  002C4E  105E               	iorwf	_down+1,w,c
 19191  002C50  B4D8               	btfsc	status,2,c
 19192  002C52  D003               	goto	i2l9304
 19193                           
 19194                           ;UI.c: 235: change_state_to_menu_12();
 19195  002C54  EC98  F029         	call	i2_change_state_to_menu_12	;wreg free
 19196                           
 19197                           ;UI.c: 236: }
 19198  002C58  D135               	goto	i2l263
 19199  002C5A                     i2l9304:
 19200                           
 19201                           ;UI.c: 237: else if(enter){
 19202  002C5A  505F               	movf	_enter,w,c
 19203  002C5C  1060               	iorwf	_enter+1,w,c
 19204  002C5E  B4D8               	btfsc	status,2,c
 19205  002C60  D131               	goto	i2l263
 19206                           
 19207                           ;UI.c: 238: change_state_to_menu_start();
 19208  002C62  ECDB  F02A         	call	i2_change_state_to_menu_start	;wreg free
 19209                           
 19210                           ;UI.c: 239: }
 19211                           ;UI.c: 240: break;
 19212  002C66  D12E               	goto	i2l263
 19213  002C68                     i2l9308:
 19214                           
 19215                           ;UI.c: 243: if(up){
 19216  002C68  5075               	movf	_up,w,c
 19217  002C6A  1076               	iorwf	_up+1,w,c
 19218  002C6C  B4D8               	btfsc	status,2,c
 19219  002C6E  D003               	goto	i2l9312
 19220                           
 19221                           ;UI.c: 244: change_state_to_menu_11();
 19222  002C70  ECC8  F029         	call	_change_state_to_menu_11	;wreg free
 19223                           
 19224                           ;UI.c: 245: }
 19225  002C74  D127               	goto	i2l263
 19226  002C76                     i2l9312:
 19227                           
 19228                           ;UI.c: 246: else if(down){
 19229  002C76  505D               	movf	_down,w,c
 19230  002C78  105E               	iorwf	_down+1,w,c
 19231  002C7A  B4D8               	btfsc	status,2,c
 19232  002C7C  D011               	goto	i2l9328
 19233                           
 19234                           ;UI.c: 247: change_state_to_menu_23();
 19235  002C7E  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 19236                           
 19237                           ;UI.c: 248: }
 19238  002C82  D120               	goto	i2l263
 19239  002C84                     i2l9320:
 19240                           
 19241                           ;UI.c: 255: if(up){
 19242  002C84  5075               	movf	_up,w,c
 19243  002C86  1076               	iorwf	_up+1,w,c
 19244  002C88  B4D8               	btfsc	status,2,c
 19245  002C8A  D003               	goto	i2l9324
 19246                           
 19247                           ;UI.c: 256: change_state_to_menu_11();
 19248  002C8C  ECC8  F029         	call	_change_state_to_menu_11	;wreg free
 19249                           
 19250                           ;UI.c: 257: }
 19251  002C90  D119               	goto	i2l263
 19252  002C92                     i2l9324:
 19253                           
 19254                           ;UI.c: 258: else if(down){
 19255  002C92  505D               	movf	_down,w,c
 19256  002C94  105E               	iorwf	_down+1,w,c
 19257  002C96  B4D8               	btfsc	status,2,c
 19258  002C98  D003               	goto	i2l9328
 19259                           
 19260                           ;UI.c: 259: change_state_to_menu_23();
 19261  002C9A  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 19262                           
 19263                           ;UI.c: 260: }
 19264  002C9E  D112               	goto	i2l263
 19265  002CA0                     i2l9328:
 19266                           
 19267                           ;UI.c: 261: else if(enter){
 19268  002CA0  505F               	movf	_enter,w,c
 19269  002CA2  1060               	iorwf	_enter+1,w,c
 19270  002CA4  B4D8               	btfsc	status,2,c
 19271  002CA6  D10E               	goto	i2l263
 19272                           
 19273                           ;UI.c: 262: machine_state = Sorting_state;
 19274  002CA8  0E01               	movlw	1
 19275  002CAA  0100               	movlb	0	; () banked
 19276  002CAC  6FFC               	movwf	_machine_state& (0+255),b
 19277                           
 19278                           ; BSR set to: 0
 19279                           ;UI.c: 263: }
 19280                           ;UI.c: 264: break;
 19281                           
 19282                           ; BSR set to: 0
 19283                           
 19284                           ; BSR set to: 0
 19285  002CAE  D10A               	goto	i2l263
 19286  002CB0                     i2l9332:
 19287                           
 19288                           ;UI.c: 267: if(up){
 19289  002CB0  5075               	movf	_up,w,c
 19290  002CB2  1076               	iorwf	_up+1,w,c
 19291  002CB4  B4D8               	btfsc	status,2,c
 19292  002CB6  D003               	goto	i2l9336
 19293                           
 19294                           ;UI.c: 268: change_state_to_menu_22();
 19295  002CB8  EC80  F029         	call	i2_change_state_to_menu_22	;wreg free
 19296                           
 19297                           ;UI.c: 269: }
 19298  002CBC  D103               	goto	i2l263
 19299  002CBE                     i2l9336:
 19300                           
 19301                           ;UI.c: 270: else if(down){
 19302  002CBE  505D               	movf	_down,w,c
 19303  002CC0  105E               	iorwf	_down+1,w,c
 19304  002CC2  B4D8               	btfsc	status,2,c
 19305  002CC4  D003               	goto	i2l9340
 19306                           
 19307                           ;UI.c: 271: change_state_to_menu_11();
 19308  002CC6  ECC8  F029         	call	_change_state_to_menu_11	;wreg free
 19309                           
 19310                           ;UI.c: 272: }
 19311  002CCA  D0FC               	goto	i2l263
 19312  002CCC                     i2l9340:
 19313                           
 19314                           ;UI.c: 273: else if(enter){
 19315  002CCC  505F               	movf	_enter,w,c
 19316  002CCE  1060               	iorwf	_enter+1,w,c
 19317  002CD0  B4D8               	btfsc	status,2,c
 19318  002CD2  D0F8               	goto	i2l263
 19319                           
 19320                           ;UI.c: 274: change_state_to_logs_11();
 19321  002CD4  EC40  F02A         	call	_change_state_to_logs_11	;wreg free
 19322                           
 19323                           ;UI.c: 275: }
 19324                           ;UI.c: 276: break;
 19325  002CD8  D0F5               	goto	i2l263
 19326  002CDA                     i2l9344:
 19327                           
 19328                           ;UI.c: 279: if(up){
 19329  002CDA  5075               	movf	_up,w,c
 19330  002CDC  1076               	iorwf	_up+1,w,c
 19331  002CDE  B4D8               	btfsc	status,2,c
 19332  002CE0  D003               	goto	i2l9348
 19333                           
 19334                           ;UI.c: 280: change_state_to_logs_34();
 19335  002CE2  ECE0  F029         	call	_change_state_to_logs_34	;wreg free
 19336                           
 19337                           ;UI.c: 281: }
 19338  002CE6  D0EE               	goto	i2l263
 19339  002CE8                     i2l9348:
 19340                           
 19341                           ;UI.c: 282: else if(down){
 19342  002CE8  505D               	movf	_down,w,c
 19343  002CEA  105E               	iorwf	_down+1,w,c
 19344  002CEC  B4D8               	btfsc	status,2,c
 19345  002CEE  D003               	goto	i2l9352
 19346                           
 19347                           ;UI.c: 283: change_state_to_logs_12();
 19348  002CF0  EC28  F02A         	call	_change_state_to_logs_12	;wreg free
 19349                           
 19350                           ;UI.c: 284: }
 19351  002CF4  D0E7               	goto	i2l263
 19352  002CF6                     i2l9352:
 19353                           
 19354                           ;UI.c: 285: else if(enter){
 19355  002CF6  505F               	movf	_enter,w,c
 19356  002CF8  1060               	iorwf	_enter+1,w,c
 19357  002CFA  B4D8               	btfsc	status,2,c
 19358  002CFC  D007               	goto	i2l9356
 19359                           
 19360                           ;UI.c: 286: dispLogs(1);
 19361  002CFE  0E00               	movlw	0
 19362  002D00  6E13               	movwf	dispLogs@myLog+1,c
 19363  002D02  0E01               	movlw	1
 19364  002D04  6E12               	movwf	dispLogs@myLog,c
 19365  002D06  EC15  F02B         	call	_dispLogs	;wreg free
 19366                           
 19367                           ;UI.c: 287: }
 19368  002D0A  D0DC               	goto	i2l263
 19369  002D0C                     i2l9356:
 19370                           
 19371                           ;UI.c: 288: else if(back){
 19372  002D0C  505B               	movf	_back,w,c
 19373  002D0E  105C               	iorwf	_back+1,w,c
 19374  002D10  B4D8               	btfsc	status,2,c
 19375  002D12  D0D8               	goto	i2l263
 19376                           
 19377                           ;UI.c: 289: change_state_to_menu_23();
 19378  002D14  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 19379                           
 19380                           ;UI.c: 290: }
 19381                           ;UI.c: 291: break;
 19382  002D18  D0D5               	goto	i2l263
 19383  002D1A                     i2l9360:
 19384                           
 19385                           ;UI.c: 294: if(up){
 19386  002D1A  5075               	movf	_up,w,c
 19387  002D1C  1076               	iorwf	_up+1,w,c
 19388  002D1E  B4D8               	btfsc	status,2,c
 19389  002D20  D003               	goto	i2l9364
 19390                           
 19391                           ;UI.c: 295: change_state_to_logs_11();
 19392  002D22  EC40  F02A         	call	_change_state_to_logs_11	;wreg free
 19393                           
 19394                           ;UI.c: 296: }
 19395  002D26  D0CE               	goto	i2l263
 19396  002D28                     i2l9364:
 19397                           
 19398                           ;UI.c: 297: else if(down){
 19399  002D28  505D               	movf	_down,w,c
 19400  002D2A  105E               	iorwf	_down+1,w,c
 19401  002D2C  B4D8               	btfsc	status,2,c
 19402  002D2E  D003               	goto	i2l9368
 19403                           
 19404                           ;UI.c: 298: change_state_to_logs_23();
 19405  002D30  EC6F  F02A         	call	_change_state_to_logs_23	;wreg free
 19406                           
 19407                           ;UI.c: 299: }
 19408  002D34  D0C7               	goto	i2l263
 19409  002D36                     i2l9368:
 19410                           
 19411                           ;UI.c: 300: else if(enter){
 19412  002D36  505F               	movf	_enter,w,c
 19413  002D38  1060               	iorwf	_enter+1,w,c
 19414  002D3A  B4D8               	btfsc	status,2,c
 19415  002D3C  D007               	goto	i2l9372
 19416                           
 19417                           ;UI.c: 301: dispLogs(2);
 19418  002D3E  0E00               	movlw	0
 19419  002D40  6E13               	movwf	dispLogs@myLog+1,c
 19420  002D42  0E02               	movlw	2
 19421  002D44  6E12               	movwf	dispLogs@myLog,c
 19422  002D46  EC15  F02B         	call	_dispLogs	;wreg free
 19423                           
 19424                           ;UI.c: 302: }
 19425  002D4A  D0BC               	goto	i2l263
 19426  002D4C                     i2l9372:
 19427                           
 19428                           ;UI.c: 303: else if(back){
 19429  002D4C  505B               	movf	_back,w,c
 19430  002D4E  105C               	iorwf	_back+1,w,c
 19431  002D50  B4D8               	btfsc	status,2,c
 19432  002D52  D0B8               	goto	i2l263
 19433                           
 19434                           ;UI.c: 304: change_state_to_menu_23();
 19435  002D54  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 19436                           
 19437                           ;UI.c: 305: }
 19438                           ;UI.c: 306: break;
 19439  002D58  D0B5               	goto	i2l263
 19440  002D5A                     i2l9376:
 19441                           
 19442                           ;UI.c: 309: if(up){
 19443  002D5A  5075               	movf	_up,w,c
 19444  002D5C  1076               	iorwf	_up+1,w,c
 19445  002D5E  B4D8               	btfsc	status,2,c
 19446  002D60  D003               	goto	i2l9380
 19447                           
 19448                           ;UI.c: 310: change_state_to_logs_11();
 19449  002D62  EC40  F02A         	call	_change_state_to_logs_11	;wreg free
 19450                           
 19451                           ;UI.c: 311: }
 19452  002D66  D0AE               	goto	i2l263
 19453  002D68                     i2l9380:
 19454                           
 19455                           ;UI.c: 312: else if(down){
 19456  002D68  505D               	movf	_down,w,c
 19457  002D6A  105E               	iorwf	_down+1,w,c
 19458  002D6C  B4D8               	btfsc	status,2,c
 19459  002D6E  D003               	goto	i2l9384
 19460                           
 19461                           ;UI.c: 313: change_state_to_logs_23();
 19462  002D70  EC6F  F02A         	call	_change_state_to_logs_23	;wreg free
 19463                           
 19464                           ;UI.c: 314: }
 19465  002D74  D0A7               	goto	i2l263
 19466  002D76                     i2l9384:
 19467                           
 19468                           ;UI.c: 315: else if(enter){
 19469  002D76  505F               	movf	_enter,w,c
 19470  002D78  1060               	iorwf	_enter+1,w,c
 19471  002D7A  B4D8               	btfsc	status,2,c
 19472  002D7C  D007               	goto	i2l9388
 19473                           
 19474                           ;UI.c: 316: dispLogs(2);
 19475  002D7E  0E00               	movlw	0
 19476  002D80  6E13               	movwf	dispLogs@myLog+1,c
 19477  002D82  0E02               	movlw	2
 19478  002D84  6E12               	movwf	dispLogs@myLog,c
 19479  002D86  EC15  F02B         	call	_dispLogs	;wreg free
 19480                           
 19481                           ;UI.c: 317: }
 19482  002D8A  D09C               	goto	i2l263
 19483  002D8C                     i2l9388:
 19484                           
 19485                           ;UI.c: 318: else if(back){
 19486  002D8C  505B               	movf	_back,w,c
 19487  002D8E  105C               	iorwf	_back+1,w,c
 19488  002D90  B4D8               	btfsc	status,2,c
 19489  002D92  D098               	goto	i2l263
 19490                           
 19491                           ;UI.c: 319: change_state_to_menu_23();
 19492  002D94  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 19493                           
 19494                           ;UI.c: 320: }
 19495                           ;UI.c: 321: break;
 19496  002D98  D095               	goto	i2l263
 19497  002D9A                     i2l9392:
 19498                           
 19499                           ;UI.c: 324: if(up){
 19500  002D9A  5075               	movf	_up,w,c
 19501  002D9C  1076               	iorwf	_up+1,w,c
 19502  002D9E  B4D8               	btfsc	status,2,c
 19503  002DA0  D003               	goto	i2l9396
 19504                           
 19505                           ;UI.c: 325: change_state_to_logs_22();
 19506  002DA2  EC10  F02A         	call	_change_state_to_logs_22	;wreg free
 19507                           
 19508                           ;UI.c: 326: }
 19509  002DA6  D08E               	goto	i2l263
 19510  002DA8                     i2l9396:
 19511                           
 19512                           ;UI.c: 327: else if(down){
 19513  002DA8  505D               	movf	_down,w,c
 19514  002DAA  105E               	iorwf	_down+1,w,c
 19515  002DAC  B4D8               	btfsc	status,2,c
 19516  002DAE  D003               	goto	i2l9400
 19517                           
 19518                           ;UI.c: 328: change_state_to_logs_34();
 19519  002DB0  ECE0  F029         	call	_change_state_to_logs_34	;wreg free
 19520                           
 19521                           ;UI.c: 329: }
 19522  002DB4  D087               	goto	i2l263
 19523  002DB6                     i2l9400:
 19524                           
 19525                           ;UI.c: 330: else if(enter){
 19526  002DB6  505F               	movf	_enter,w,c
 19527  002DB8  1060               	iorwf	_enter+1,w,c
 19528  002DBA  B4D8               	btfsc	status,2,c
 19529  002DBC  D007               	goto	i2l9404
 19530                           
 19531                           ;UI.c: 331: dispLogs(3);
 19532  002DBE  0E00               	movlw	0
 19533  002DC0  6E13               	movwf	dispLogs@myLog+1,c
 19534  002DC2  0E03               	movlw	3
 19535  002DC4  6E12               	movwf	dispLogs@myLog,c
 19536  002DC6  EC15  F02B         	call	_dispLogs	;wreg free
 19537                           
 19538                           ;UI.c: 332: }
 19539  002DCA  D07C               	goto	i2l263
 19540  002DCC                     i2l9404:
 19541                           
 19542                           ;UI.c: 333: else if(back){
 19543  002DCC  505B               	movf	_back,w,c
 19544  002DCE  105C               	iorwf	_back+1,w,c
 19545  002DD0  B4D8               	btfsc	status,2,c
 19546  002DD2  D078               	goto	i2l263
 19547                           
 19548                           ;UI.c: 334: change_state_to_menu_23();
 19549  002DD4  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 19550                           
 19551                           ;UI.c: 335: }
 19552                           ;UI.c: 336: break;
 19553  002DD8  D075               	goto	i2l263
 19554  002DDA                     i2l9408:
 19555                           
 19556                           ;UI.c: 339: if(up){
 19557  002DDA  5075               	movf	_up,w,c
 19558  002DDC  1076               	iorwf	_up+1,w,c
 19559  002DDE  B4D8               	btfsc	status,2,c
 19560  002DE0  D003               	goto	i2l9412
 19561                           
 19562                           ;UI.c: 340: change_state_to_logs_22();
 19563  002DE2  EC10  F02A         	call	_change_state_to_logs_22	;wreg free
 19564                           
 19565                           ;UI.c: 341: }
 19566  002DE6  D06E               	goto	i2l263
 19567  002DE8                     i2l9412:
 19568                           
 19569                           ;UI.c: 342: else if(down){
 19570  002DE8  505D               	movf	_down,w,c
 19571  002DEA  105E               	iorwf	_down+1,w,c
 19572  002DEC  B4D8               	btfsc	status,2,c
 19573  002DEE  D003               	goto	i2l9416
 19574                           
 19575                           ;UI.c: 343: change_state_to_logs_34();
 19576  002DF0  ECE0  F029         	call	_change_state_to_logs_34	;wreg free
 19577                           
 19578                           ;UI.c: 344: }
 19579  002DF4  D067               	goto	i2l263
 19580  002DF6                     i2l9416:
 19581                           
 19582                           ;UI.c: 345: else if(enter){
 19583  002DF6  505F               	movf	_enter,w,c
 19584  002DF8  1060               	iorwf	_enter+1,w,c
 19585  002DFA  B4D8               	btfsc	status,2,c
 19586  002DFC  D007               	goto	i2l9420
 19587                           
 19588                           ;UI.c: 346: dispLogs(3);
 19589  002DFE  0E00               	movlw	0
 19590  002E00  6E13               	movwf	dispLogs@myLog+1,c
 19591  002E02  0E03               	movlw	3
 19592  002E04  6E12               	movwf	dispLogs@myLog,c
 19593  002E06  EC15  F02B         	call	_dispLogs	;wreg free
 19594                           
 19595                           ;UI.c: 347: }
 19596  002E0A  D05C               	goto	i2l263
 19597  002E0C                     i2l9420:
 19598                           
 19599                           ;UI.c: 348: else if(back){
 19600  002E0C  505B               	movf	_back,w,c
 19601  002E0E  105C               	iorwf	_back+1,w,c
 19602  002E10  B4D8               	btfsc	status,2,c
 19603  002E12  D058               	goto	i2l263
 19604                           
 19605                           ;UI.c: 349: change_state_to_menu_23();
 19606  002E14  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 19607                           
 19608                           ;UI.c: 350: }
 19609                           ;UI.c: 351: break;
 19610  002E18  D055               	goto	i2l263
 19611  002E1A                     i2l9424:
 19612                           
 19613                           ;UI.c: 354: if(up){
 19614  002E1A  5075               	movf	_up,w,c
 19615  002E1C  1076               	iorwf	_up+1,w,c
 19616  002E1E  B4D8               	btfsc	status,2,c
 19617  002E20  D003               	goto	i2l9428
 19618                           
 19619                           ;UI.c: 355: change_state_to_logs_33();
 19620  002E22  ECF8  F029         	call	_change_state_to_logs_33	;wreg free
 19621                           
 19622                           ;UI.c: 356: }
 19623  002E26  D04E               	goto	i2l263
 19624  002E28                     i2l9428:
 19625                           
 19626                           ;UI.c: 357: else if(down){
 19627  002E28  505D               	movf	_down,w,c
 19628  002E2A  105E               	iorwf	_down+1,w,c
 19629  002E2C  B4D8               	btfsc	status,2,c
 19630  002E2E  D003               	goto	i2l9432
 19631                           
 19632                           ;UI.c: 358: change_state_to_logs_11();
 19633  002E30  EC40  F02A         	call	_change_state_to_logs_11	;wreg free
 19634                           
 19635                           ;UI.c: 359: }
 19636  002E34  D047               	goto	i2l263
 19637  002E36                     i2l9432:
 19638                           
 19639                           ;UI.c: 360: else if(enter){
 19640  002E36  505F               	movf	_enter,w,c
 19641  002E38  1060               	iorwf	_enter+1,w,c
 19642  002E3A  B4D8               	btfsc	status,2,c
 19643  002E3C  D007               	goto	i2l9436
 19644                           
 19645                           ;UI.c: 361: dispLogs(4);
 19646  002E3E  0E00               	movlw	0
 19647  002E40  6E13               	movwf	dispLogs@myLog+1,c
 19648  002E42  0E04               	movlw	4
 19649  002E44  6E12               	movwf	dispLogs@myLog,c
 19650  002E46  EC15  F02B         	call	_dispLogs	;wreg free
 19651                           
 19652                           ;UI.c: 362: }
 19653  002E4A  D03C               	goto	i2l263
 19654  002E4C                     i2l9436:
 19655                           
 19656                           ;UI.c: 363: else if(back){
 19657  002E4C  505B               	movf	_back,w,c
 19658  002E4E  105C               	iorwf	_back+1,w,c
 19659  002E50  B4D8               	btfsc	status,2,c
 19660  002E52  D038               	goto	i2l263
 19661                           
 19662                           ;UI.c: 364: change_state_to_menu_23();
 19663  002E54  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 19664                           
 19665                           ;UI.c: 370: }
 19666                           
 19667                           ;UI.c: 369: break;
 19668                           
 19669                           ;UI.c: 368: default:
 19670                           
 19671                           ;UI.c: 365: }
 19672                           ;UI.c: 366: break;
 19673  002E58  D035               	goto	i2l263
 19674  002E5A                     i2l9442:
 19675  002E5A  C0EC  F043         	movff	_cur_state,??_updateMenu
 19676  002E5E  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 19677                           
 19678                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 19679                           ; Switch size 1, requested type "space"
 19680                           ; Number of cases is 3, Range of values is 0 to 4
 19681                           ; switch strategies available:
 19682                           ; Name         Instructions Cycles
 19683                           ; simple_byte           10     6 (average)
 19684                           ;	Chosen strategy is simple_byte
 19685  002E62  5044               	movf	??_updateMenu+1,w,c
 19686  002E64  0A00               	xorlw	0	; case 0
 19687  002E66  B4D8               	btfsc	status,2,c
 19688  002E68  D007               	goto	i2l10406
 19689  002E6A  0A03               	xorlw	3	; case 3
 19690  002E6C  B4D8               	btfsc	status,2,c
 19691  002E6E  D015               	goto	i2l10408
 19692  002E70  0A07               	xorlw	7	; case 4
 19693  002E72  B4D8               	btfsc	status,2,c
 19694  002E74  D020               	goto	i2l10410
 19695  002E76  D026               	goto	i2l263
 19696  002E78                     i2l10406:
 19697                           
 19698                           ; Switch size 1, requested type "space"
 19699                           ; Number of cases is 5, Range of values is 0 to 23
 19700                           ; switch strategies available:
 19701                           ; Name         Instructions Cycles
 19702                           ; simple_byte           16     9 (average)
 19703                           ;	Chosen strategy is simple_byte
 19704  002E78  5043               	movf	??_updateMenu,w,c
 19705  002E7A  0A00               	xorlw	0	; case 0
 19706  002E7C  B4D8               	btfsc	status,2,c
 19707  002E7E  D6DC               	goto	i2l9294
 19708  002E80  0A0B               	xorlw	11	; case 11
 19709  002E82  B4D8               	btfsc	status,2,c
 19710  002E84  D6DC               	goto	i2l9296
 19711  002E86  0A07               	xorlw	7	; case 12
 19712  002E88  B4D8               	btfsc	status,2,c
 19713  002E8A  D6EE               	goto	i2l9308
 19714  002E8C  0A1A               	xorlw	26	; case 22
 19715  002E8E  B4D8               	btfsc	status,2,c
 19716  002E90  D6F9               	goto	i2l9320
 19717  002E92  0A01               	xorlw	1	; case 23
 19718  002E94  B4D8               	btfsc	status,2,c
 19719  002E96  D70C               	goto	i2l9332
 19720  002E98  D015               	goto	i2l263
 19721  002E9A                     i2l10408:
 19722                           
 19723                           ; Switch size 1, requested type "space"
 19724                           ; Number of cases is 4, Range of values is 243 to 255
 19725                           ; switch strategies available:
 19726                           ; Name         Instructions Cycles
 19727                           ; simple_byte           13     7 (average)
 19728                           ;	Chosen strategy is simple_byte
 19729  002E9A  5043               	movf	??_updateMenu,w,c
 19730  002E9C  0AF3               	xorlw	243	; case 243
 19731  002E9E  B4D8               	btfsc	status,2,c
 19732  002EA0  D71C               	goto	i2l9344
 19733  002EA2  0A07               	xorlw	7	; case 244
 19734  002EA4  B4D8               	btfsc	status,2,c
 19735  002EA6  D739               	goto	i2l9360
 19736  002EA8  0A0A               	xorlw	10	; case 254
 19737  002EAA  B4D8               	btfsc	status,2,c
 19738  002EAC  D756               	goto	i2l9376
 19739  002EAE  0A01               	xorlw	1	; case 255
 19740  002EB0  B4D8               	btfsc	status,2,c
 19741  002EB2  D773               	goto	i2l9392
 19742  002EB4  D007               	goto	i2l263
 19743  002EB6                     i2l10410:
 19744                           
 19745                           ; Switch size 1, requested type "space"
 19746                           ; Number of cases is 2, Range of values is 9 to 10
 19747                           ; switch strategies available:
 19748                           ; Name         Instructions Cycles
 19749                           ; simple_byte            7     4 (average)
 19750                           ;	Chosen strategy is simple_byte
 19751  002EB6  5043               	movf	??_updateMenu,w,c
 19752  002EB8  0A09               	xorlw	9	; case 9
 19753  002EBA  B4D8               	btfsc	status,2,c
 19754  002EBC  D78E               	goto	i2l9408
 19755  002EBE  0A03               	xorlw	3	; case 10
 19756  002EC0  B4D8               	btfsc	status,2,c
 19757  002EC2  D7AB               	goto	i2l9424
 19758  002EC4                     i2l263:
 19759                           
 19760                           ;UI.c: 371: }
 19761                           ;UI.c: 372: (INTCONbits.GIE = 1);
 19762  002EC4  8EF2               	bsf	intcon,7,c	;volatile
 19763  002EC6  0012               	return		;funcret
 19764  002EC8                     __end_of_updateMenu:
 19765                           	opt stack 0
 19766                           pclatu	equ	0xFFB
 19767                           pclath	equ	0xFFA
 19768                           tblptru	equ	0xFF8
 19769                           tblptrh	equ	0xFF7
 19770                           tblptrl	equ	0xFF6
 19771                           tablat	equ	0xFF5
 19772                           prodh	equ	0xFF4
 19773                           prodl	equ	0xFF3
 19774                           intcon	equ	0xFF2
 19775                           intcon2	equ	0xFF1
 19776                           intcon3	equ	0xFF0
 19777                           indf0	equ	0xFEF
 19778                           postinc0	equ	0xFEE
 19779                           fsr0h	equ	0xFEA
 19780                           fsr0l	equ	0xFE9
 19781                           wreg	equ	0xFE8
 19782                           postdec1	equ	0xFE5
 19783                           fsr1h	equ	0xFE2
 19784                           fsr1l	equ	0xFE1
 19785                           indf2	equ	0xFDF
 19786                           postinc2	equ	0xFDE
 19787                           postdec2	equ	0xFDD
 19788                           fsr2h	equ	0xFDA
 19789                           fsr2l	equ	0xFD9
 19790                           status	equ	0xFD8
 19791                           
 19792 ;; *************** function i2_change_state_to_menu_start *****************
 19793 ;; Defined at:
 19794 ;;		line 477 in file "UI.c"
 19795 ;; Parameters:    Size  Location     Type
 19796 ;;		None
 19797 ;; Auto vars:     Size  Location     Type
 19798 ;;		None
 19799 ;; Return value:  Size  Location     Type
 19800 ;;                  1    wreg      void 
 19801 ;; Registers used:
 19802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19803 ;; Tracked objects:
 19804 ;;		On entry : 0/0
 19805 ;;		On exit  : 0/0
 19806 ;;		Unchanged: 0/0
 19807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19812 ;;Total ram usage:        0 bytes
 19813 ;; Hardware stack levels used:    1
 19814 ;; Hardware stack levels required when called:    4
 19815 ;; This function calls:
 19816 ;;		i2_lcdInst
 19817 ;;		i2_printRTC
 19818 ;;		i2_printf
 19819 ;; This function is called by:
 19820 ;;		_updateMenu
 19821 ;;		_handler
 19822 ;; This function uses a non-reentrant model
 19823 ;;
 19824                           
 19825                           	psect	text63
 19826  0055B6                     __ptext63:
 19827                           	opt stack 0
 19828  0055B6                     i2_change_state_to_menu_start:
 19829                           	opt stack 19
 19830                           
 19831                           ;UI.c: 478: cur_state = 0;
 19832                           
 19833                           ;incstack = 0
 19834  0055B6  0E00               	movlw	0
 19835  0055B8  0100               	movlb	0	; () banked
 19836  0055BA  6FED               	movwf	(_cur_state+1)& (0+255),b
 19837  0055BC  0E00               	movlw	0
 19838  0055BE  6FEC               	movwf	_cur_state& (0+255),b
 19839                           
 19840                           ; BSR set to: 0
 19841                           ;UI.c: 480: lcdInst(0b10000000);;
 19842  0055C0  0E80               	movlw	128
 19843  0055C2  ECB4  F02B         	call	i2_lcdInst
 19844                           
 19845                           ;UI.c: 481: printRTC();
 19846  0055C6  ECF1  F019         	call	i2_printRTC	;wreg free
 19847                           
 19848                           ;UI.c: 482: lcdInst(0b11000000);;
 19849  0055CA  0EC0               	movlw	192
 19850  0055CC  ECB4  F02B         	call	i2_lcdInst
 19851                           
 19852                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 19853  0055D0  0E01               	movlw	low STR_30
 19854  0055D2  6E0D               	movwf	i2printf@f,c
 19855  0055D4  0EFE               	movlw	high STR_30
 19856  0055D6  6E0E               	movwf	i2printf@f+1,c
 19857  0055D8  EC69  F011         	call	i2_printf	;wreg free
 19858  0055DC  0012               	return		;funcret
 19859  0055DE                     __end_ofi2_change_state_to_menu_start:
 19860                           	opt stack 0
 19861                           pclatu	equ	0xFFB
 19862                           pclath	equ	0xFFA
 19863                           tblptru	equ	0xFF8
 19864                           tblptrh	equ	0xFF7
 19865                           tblptrl	equ	0xFF6
 19866                           tablat	equ	0xFF5
 19867                           prodh	equ	0xFF4
 19868                           prodl	equ	0xFF3
 19869                           intcon	equ	0xFF2
 19870                           intcon2	equ	0xFF1
 19871                           intcon3	equ	0xFF0
 19872                           indf0	equ	0xFEF
 19873                           postinc0	equ	0xFEE
 19874                           fsr0h	equ	0xFEA
 19875                           fsr0l	equ	0xFE9
 19876                           wreg	equ	0xFE8
 19877                           postdec1	equ	0xFE5
 19878                           fsr1h	equ	0xFE2
 19879                           fsr1l	equ	0xFE1
 19880                           indf2	equ	0xFDF
 19881                           postinc2	equ	0xFDE
 19882                           postdec2	equ	0xFDD
 19883                           fsr2h	equ	0xFDA
 19884                           fsr2l	equ	0xFD9
 19885                           status	equ	0xFD8
 19886                           
 19887 ;; *************** function i2_printRTC *****************
 19888 ;; Defined at:
 19889 ;;		line 63 in file "RTC.c"
 19890 ;; Parameters:    Size  Location     Type
 19891 ;;		None
 19892 ;; Auto vars:     Size  Location     Type
 19893 ;;  printRTC       14   44[COMRAM] int [7]
 19894 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19895 ;;  printRTC        2   64[COMRAM] int 
 19896 ;;  printRTC        2   58[COMRAM] int 
 19897 ;; Return value:  Size  Location     Type
 19898 ;;                  1    wreg      void 
 19899 ;; Registers used:
 19900 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19901 ;; Tracked objects:
 19902 ;;		On entry : 0/0
 19903 ;;		On exit  : 0/0
 19904 ;;		Unchanged: 0/0
 19905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19907 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19908 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19909 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;Total ram usage:       25 bytes
 19911 ;; Hardware stack levels used:    1
 19912 ;; Hardware stack levels required when called:    3
 19913 ;; This function calls:
 19914 ;;		i2_getRTC
 19915 ;;		i2_lcdInst
 19916 ;;		i2_printf
 19917 ;;		i2_strcpy
 19918 ;; This function is called by:
 19919 ;;		i2_change_state_to_menu_start
 19920 ;; This function uses a non-reentrant model
 19921 ;;
 19922                           
 19923                           	psect	text64
 19924  0033E2                     __ptext64:
 19925                           	opt stack 0
 19926  0033E2                     i2_printRTC:
 19927                           	opt stack 19
 19928                           
 19929                           ;RTC.c: 64: getRTC();
 19930                           
 19931                           ;incstack = 0
 19932  0033E2  EC08  F026         	call	i2_getRTC	;wreg free
 19933                           
 19934                           ;RTC.c: 65: char month[] = "MMM";
 19935  0033E6  C14B  F03D         	movff	printRTC@F3231,i2printRTC@month
 19936  0033EA  C14C  F03E         	movff	printRTC@F3231+1,i2printRTC@month+1
 19937  0033EE  C14D  F03F         	movff	printRTC@F3231+2,i2printRTC@month+2
 19938  0033F2  C14E  F040         	movff	printRTC@F3231+3,i2printRTC@month+3
 19939                           
 19940                           ;RTC.c: 66: int INT_time[7];
 19941                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19942  0033F6  0E00               	movlw	0
 19943  0033F8  6E42               	movwf	i2printRTC@i+1,c
 19944  0033FA  0E00               	movlw	0
 19945  0033FC  6E41               	movwf	i2printRTC@i,c
 19946  0033FE  BE42               	btfsc	i2printRTC@i+1,7,c
 19947  003400  D006               	goto	i2l7258
 19948  003402  5042               	movf	i2printRTC@i+1,w,c
 19949  003404  E135               	bnz	i2l620
 19950  003406  0E07               	movlw	7
 19951  003408  5C41               	subwf	i2printRTC@i,w,c
 19952  00340A  B0D8               	btfsc	status,0,c
 19953  00340C  D031               	goto	i2l620
 19954  00340E                     i2l7258:
 19955                           
 19956                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19957  00340E  0E1C               	movlw	low _time
 19958  003410  2441               	addwf	i2printRTC@i,w,c
 19959  003412  6ED9               	movwf	fsr2l,c
 19960  003414  0E01               	movlw	high _time
 19961  003416  2042               	addwfc	i2printRTC@i+1,w,c
 19962  003418  6EDA               	movwf	fsr2h,c
 19963  00341A  50DF               	movf	indf2,w,c
 19964  00341C  6E2A               	movwf	??i2_printRTC& (0+255),c
 19965  00341E  3A2A               	swapf	??i2_printRTC,f,c
 19966  003420  0E0F               	movlw	15
 19967  003422  162A               	andwf	??i2_printRTC,f,c
 19968  003424  0E0F               	movlw	15
 19969  003426  162A               	andwf	??i2_printRTC,f,c
 19970  003428  502A               	movf	??i2_printRTC,w,c
 19971  00342A  0D0A               	mullw	10
 19972  00342C  0E1C               	movlw	low _time
 19973  00342E  2441               	addwf	i2printRTC@i,w,c
 19974  003430  6ED9               	movwf	fsr2l,c
 19975  003432  0E01               	movlw	high _time
 19976  003434  2042               	addwfc	i2printRTC@i+1,w,c
 19977  003436  6EDA               	movwf	fsr2h,c
 19978  003438  50DF               	movf	indf2,w,c
 19979  00343A  0B0F               	andlw	15
 19980  00343C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19981  00343E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19982  003440  50F3               	movf	prodl,w,c
 19983  003442  262B               	addwf	??i2_printRTC+1,f,c
 19984  003444  50F4               	movf	prodh,w,c
 19985  003446  222C               	addwfc	??i2_printRTC+2,f,c
 19986  003448  90D8               	bcf	status,0,c
 19987  00344A  3441               	rlcf	i2printRTC@i,w,c
 19988  00344C  6ED9               	movwf	fsr2l,c
 19989  00344E  3442               	rlcf	i2printRTC@i+1,w,c
 19990  003450  6EDA               	movwf	fsr2h,c
 19991  003452  0E2D               	movlw	low i2printRTC@INT_time
 19992  003454  26D9               	addwf	fsr2l,f,c
 19993  003456  0E00               	movlw	high i2printRTC@INT_time
 19994  003458  22DA               	addwfc	fsr2h,f,c
 19995  00345A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19996  00345E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19997  003462  4A41               	infsnz	i2printRTC@i,f,c
 19998  003464  2A42               	incf	i2printRTC@i+1,f,c
 19999  003466  BE42               	btfsc	i2printRTC@i+1,7,c
 20000  003468  D7D2               	goto	i2l7258
 20001  00346A  5042               	movf	i2printRTC@i+1,w,c
 20002  00346C  E101               	bnz	i2u577_40
 20003  00346E  D7CB               	goto	L19
 20004  003470                     i2u577_40:
 20005  003470                     i2l620:
 20006                           
 20007                           ;RTC.c: 69: }
 20008                           ;RTC.c: 70: int RTC_month = INT_time[5];
 20009  003470  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 20010  003474  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 20011                           
 20012                           ;RTC.c: 72: switch(RTC_month){
 20013  003478  D084               	goto	i2l7290
 20014  00347A                     i2l7264:
 20015                           
 20016                           ;RTC.c: 74: strcpy(month, "JAN");
 20017  00347A  0E3D               	movlw	low i2printRTC@month
 20018  00347C  6E01               	movwf	i2strcpy@to,c
 20019  00347E  0E00               	movlw	high i2printRTC@month
 20020  003480  6E02               	movwf	i2strcpy@to+1,c
 20021  003482  0EDA               	movlw	low STR_8
 20022  003484  6E03               	movwf	i2strcpy@from,c
 20023  003486  0EFF               	movlw	high STR_8
 20024  003488  6E04               	movwf	i2strcpy@from+1,c
 20025  00348A  EC4F  F029         	call	i2_strcpy	;wreg free
 20026                           
 20027                           ;RTC.c: 75: break;
 20028  00348E  D0A6               	goto	i2l7292
 20029  003490                     i2l7266:
 20030                           
 20031                           ;RTC.c: 77: strcpy(month, "FEB");
 20032  003490  0E3D               	movlw	low i2printRTC@month
 20033  003492  6E01               	movwf	i2strcpy@to,c
 20034  003494  0E00               	movlw	high i2printRTC@month
 20035  003496  6E02               	movwf	i2strcpy@to+1,c
 20036  003498  0ECA               	movlw	low STR_9
 20037  00349A  6E03               	movwf	i2strcpy@from,c
 20038  00349C  0EFF               	movlw	high STR_9
 20039  00349E  6E04               	movwf	i2strcpy@from+1,c
 20040  0034A0  EC4F  F029         	call	i2_strcpy	;wreg free
 20041                           
 20042                           ;RTC.c: 78: break;
 20043  0034A4  D09B               	goto	i2l7292
 20044  0034A6                     i2l7268:
 20045                           
 20046                           ;RTC.c: 80: strcpy(month, "MAR");
 20047  0034A6  0E3D               	movlw	low i2printRTC@month
 20048  0034A8  6E01               	movwf	i2strcpy@to,c
 20049  0034AA  0E00               	movlw	high i2printRTC@month
 20050  0034AC  6E02               	movwf	i2strcpy@to+1,c
 20051  0034AE  0EE6               	movlw	low STR_10
 20052  0034B0  6E03               	movwf	i2strcpy@from,c
 20053  0034B2  0EFF               	movlw	high STR_10
 20054  0034B4  6E04               	movwf	i2strcpy@from+1,c
 20055  0034B6  EC4F  F029         	call	i2_strcpy	;wreg free
 20056                           
 20057                           ;RTC.c: 81: break;
 20058  0034BA  D090               	goto	i2l7292
 20059  0034BC                     i2l7270:
 20060                           
 20061                           ;RTC.c: 83: strcpy(month, "APR");
 20062  0034BC  0E3D               	movlw	low i2printRTC@month
 20063  0034BE  6E01               	movwf	i2strcpy@to,c
 20064  0034C0  0E00               	movlw	high i2printRTC@month
 20065  0034C2  6E02               	movwf	i2strcpy@to+1,c
 20066  0034C4  0EEA               	movlw	low STR_11
 20067  0034C6  6E03               	movwf	i2strcpy@from,c
 20068  0034C8  0EFF               	movlw	high STR_11
 20069  0034CA  6E04               	movwf	i2strcpy@from+1,c
 20070  0034CC  EC4F  F029         	call	i2_strcpy	;wreg free
 20071                           
 20072                           ;RTC.c: 84: break;
 20073  0034D0  D085               	goto	i2l7292
 20074  0034D2                     i2l7272:
 20075                           
 20076                           ;RTC.c: 86: strcpy(month, "MAY");
 20077  0034D2  0E3D               	movlw	low i2printRTC@month
 20078  0034D4  6E01               	movwf	i2strcpy@to,c
 20079  0034D6  0E00               	movlw	high i2printRTC@month
 20080  0034D8  6E02               	movwf	i2strcpy@to+1,c
 20081  0034DA  0EFA               	movlw	low STR_12
 20082  0034DC  6E03               	movwf	i2strcpy@from,c
 20083  0034DE  0EFF               	movlw	high STR_12
 20084  0034E0  6E04               	movwf	i2strcpy@from+1,c
 20085  0034E2  EC4F  F029         	call	i2_strcpy	;wreg free
 20086                           
 20087                           ;RTC.c: 87: break;
 20088  0034E6  D07A               	goto	i2l7292
 20089  0034E8                     i2l7274:
 20090                           
 20091                           ;RTC.c: 89: strcpy(month, "JUN");
 20092  0034E8  0E3D               	movlw	low i2printRTC@month
 20093  0034EA  6E01               	movwf	i2strcpy@to,c
 20094  0034EC  0E00               	movlw	high i2printRTC@month
 20095  0034EE  6E02               	movwf	i2strcpy@to+1,c
 20096  0034F0  0EDE               	movlw	low STR_13
 20097  0034F2  6E03               	movwf	i2strcpy@from,c
 20098  0034F4  0EFF               	movlw	high STR_13
 20099  0034F6  6E04               	movwf	i2strcpy@from+1,c
 20100  0034F8  EC4F  F029         	call	i2_strcpy	;wreg free
 20101                           
 20102                           ;RTC.c: 90: break;
 20103  0034FC  D06F               	goto	i2l7292
 20104  0034FE                     i2l7276:
 20105                           
 20106                           ;RTC.c: 92: strcpy(month, "JUL");
 20107  0034FE  0E3D               	movlw	low i2printRTC@month
 20108  003500  6E01               	movwf	i2strcpy@to,c
 20109  003502  0E00               	movlw	high i2printRTC@month
 20110  003504  6E02               	movwf	i2strcpy@to+1,c
 20111  003506  0ED6               	movlw	low STR_14
 20112  003508  6E03               	movwf	i2strcpy@from,c
 20113  00350A  0EFF               	movlw	high STR_14
 20114  00350C  6E04               	movwf	i2strcpy@from+1,c
 20115  00350E  EC4F  F029         	call	i2_strcpy	;wreg free
 20116                           
 20117                           ;RTC.c: 93: break;
 20118  003512  D064               	goto	i2l7292
 20119  003514                     i2l7278:
 20120                           
 20121                           ;RTC.c: 95: strcpy(month, "AUG");
 20122  003514  0E3D               	movlw	low i2printRTC@month
 20123  003516  6E01               	movwf	i2strcpy@to,c
 20124  003518  0E00               	movlw	high i2printRTC@month
 20125  00351A  6E02               	movwf	i2strcpy@to+1,c
 20126  00351C  0ED2               	movlw	low STR_15
 20127  00351E  6E03               	movwf	i2strcpy@from,c
 20128  003520  0EFF               	movlw	high STR_15
 20129  003522  6E04               	movwf	i2strcpy@from+1,c
 20130  003524  EC4F  F029         	call	i2_strcpy	;wreg free
 20131                           
 20132                           ;RTC.c: 96: break;
 20133  003528  D059               	goto	i2l7292
 20134  00352A                     i2l7280:
 20135                           
 20136                           ;RTC.c: 98: strcpy(month, "SEP");
 20137  00352A  0E3D               	movlw	low i2printRTC@month
 20138  00352C  6E01               	movwf	i2strcpy@to,c
 20139  00352E  0E00               	movlw	high i2printRTC@month
 20140  003530  6E02               	movwf	i2strcpy@to+1,c
 20141  003532  0EE2               	movlw	low STR_16
 20142  003534  6E03               	movwf	i2strcpy@from,c
 20143  003536  0EFF               	movlw	high STR_16
 20144  003538  6E04               	movwf	i2strcpy@from+1,c
 20145  00353A  EC4F  F029         	call	i2_strcpy	;wreg free
 20146                           
 20147                           ;RTC.c: 99: break;
 20148  00353E  D04E               	goto	i2l7292
 20149  003540                     i2l7282:
 20150                           
 20151                           ;RTC.c: 101: strcpy(month, "OCT");
 20152  003540  0E3D               	movlw	low i2printRTC@month
 20153  003542  6E01               	movwf	i2strcpy@to,c
 20154  003544  0E00               	movlw	high i2printRTC@month
 20155  003546  6E02               	movwf	i2strcpy@to+1,c
 20156  003548  0EF2               	movlw	low STR_17
 20157  00354A  6E03               	movwf	i2strcpy@from,c
 20158  00354C  0EFF               	movlw	high STR_17
 20159  00354E  6E04               	movwf	i2strcpy@from+1,c
 20160  003550  EC4F  F029         	call	i2_strcpy	;wreg free
 20161                           
 20162                           ;RTC.c: 102: break;
 20163  003554  D043               	goto	i2l7292
 20164  003556                     i2l7284:
 20165                           
 20166                           ;RTC.c: 104: strcpy(month, "NOV");
 20167  003556  0E3D               	movlw	low i2printRTC@month
 20168  003558  6E01               	movwf	i2strcpy@to,c
 20169  00355A  0E00               	movlw	high i2printRTC@month
 20170  00355C  6E02               	movwf	i2strcpy@to+1,c
 20171  00355E  0EF6               	movlw	low STR_18
 20172  003560  6E03               	movwf	i2strcpy@from,c
 20173  003562  0EFF               	movlw	high STR_18
 20174  003564  6E04               	movwf	i2strcpy@from+1,c
 20175  003566  EC4F  F029         	call	i2_strcpy	;wreg free
 20176                           
 20177                           ;RTC.c: 105: break;
 20178  00356A  D038               	goto	i2l7292
 20179  00356C                     i2l7286:
 20180                           
 20181                           ;RTC.c: 107: strcpy(month, "DEC");
 20182  00356C  0E3D               	movlw	low i2printRTC@month
 20183  00356E  6E01               	movwf	i2strcpy@to,c
 20184  003570  0E00               	movlw	high i2printRTC@month
 20185  003572  6E02               	movwf	i2strcpy@to+1,c
 20186  003574  0ECE               	movlw	low STR_19
 20187  003576  6E03               	movwf	i2strcpy@from,c
 20188  003578  0EFF               	movlw	high STR_19
 20189  00357A  6E04               	movwf	i2strcpy@from+1,c
 20190  00357C  EC4F  F029         	call	i2_strcpy	;wreg free
 20191                           
 20192                           ;RTC.c: 109: }
 20193                           
 20194                           ;RTC.c: 108: break;
 20195  003580  D02D               	goto	i2l7292
 20196  003582                     i2l7290:
 20197  003582  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 20198  003586  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 20199                           
 20200                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20201                           ; Switch size 1, requested type "space"
 20202                           ; Number of cases is 1, Range of values is 0 to 0
 20203                           ; switch strategies available:
 20204                           ; Name         Instructions Cycles
 20205                           ; simple_byte            4     3 (average)
 20206                           ;	Chosen strategy is simple_byte
 20207  00358A  502B               	movf	??i2_printRTC+1,w,c
 20208  00358C  0A00               	xorlw	0	; case 0
 20209  00358E  A4D8               	btfss	status,2,c
 20210  003590  D025               	goto	i2l7292
 20211                           
 20212                           ; Switch size 1, requested type "space"
 20213                           ; Number of cases is 12, Range of values is 1 to 12
 20214                           ; switch strategies available:
 20215                           ; Name         Instructions Cycles
 20216                           ; simple_byte           37    19 (average)
 20217                           ;	Chosen strategy is simple_byte
 20218  003592  502A               	movf	??i2_printRTC,w,c
 20219  003594  0A01               	xorlw	1	; case 1
 20220  003596  B4D8               	btfsc	status,2,c
 20221  003598  D770               	goto	i2l7264
 20222  00359A  0A03               	xorlw	3	; case 2
 20223  00359C  B4D8               	btfsc	status,2,c
 20224  00359E  D778               	goto	i2l7266
 20225  0035A0  0A01               	xorlw	1	; case 3
 20226  0035A2  B4D8               	btfsc	status,2,c
 20227  0035A4  D780               	goto	i2l7268
 20228  0035A6  0A07               	xorlw	7	; case 4
 20229  0035A8  B4D8               	btfsc	status,2,c
 20230  0035AA  D788               	goto	i2l7270
 20231  0035AC  0A01               	xorlw	1	; case 5
 20232  0035AE  B4D8               	btfsc	status,2,c
 20233  0035B0  D790               	goto	i2l7272
 20234  0035B2  0A03               	xorlw	3	; case 6
 20235  0035B4  B4D8               	btfsc	status,2,c
 20236  0035B6  D798               	goto	i2l7274
 20237  0035B8  0A01               	xorlw	1	; case 7
 20238  0035BA  B4D8               	btfsc	status,2,c
 20239  0035BC  D7A0               	goto	i2l7276
 20240  0035BE  0A0F               	xorlw	15	; case 8
 20241  0035C0  B4D8               	btfsc	status,2,c
 20242  0035C2  D7A8               	goto	i2l7278
 20243  0035C4  0A01               	xorlw	1	; case 9
 20244  0035C6  B4D8               	btfsc	status,2,c
 20245  0035C8  D7B0               	goto	i2l7280
 20246  0035CA  0A03               	xorlw	3	; case 10
 20247  0035CC  B4D8               	btfsc	status,2,c
 20248  0035CE  D7B8               	goto	i2l7282
 20249  0035D0  0A01               	xorlw	1	; case 11
 20250  0035D2  B4D8               	btfsc	status,2,c
 20251  0035D4  D7C0               	goto	i2l7284
 20252  0035D6  0A07               	xorlw	7	; case 12
 20253  0035D8  B4D8               	btfsc	status,2,c
 20254  0035DA  D7C8               	goto	i2l7286
 20255  0035DC                     i2l7292:
 20256                           
 20257                           ;RTC.c: 110: lcdInst(0b10000000);;
 20258  0035DC  0E80               	movlw	128
 20259  0035DE  ECB4  F02B         	call	i2_lcdInst
 20260                           
 20261                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 20262  0035E2  0EBE               	movlw	low STR_21
 20263  0035E4  6E0D               	movwf	i2printf@f,c
 20264  0035E6  0EFA               	movlw	high STR_21
 20265  0035E8  6E0E               	movwf	i2printf@f+1,c
 20266  0035EA  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 20267  0035EE  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 20268  0035F2  0E3D               	movlw	low i2printRTC@month
 20269  0035F4  6E11               	movwf	?i2_printf+4,c
 20270  0035F6  0E00               	movlw	high i2printRTC@month
 20271  0035F8  6E12               	movwf	?i2_printf+5,c
 20272  0035FA  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 20273  0035FE  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 20274  003602  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 20275  003606  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 20276  00360A  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 20277  00360E  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 20278  003612  EC69  F011         	call	i2_printf	;wreg free
 20279  003616  0012               	return		;funcret
 20280  003618                     __end_ofi2_printRTC:
 20281                           	opt stack 0
 20282                           pclatu	equ	0xFFB
 20283                           pclath	equ	0xFFA
 20284                           tblptru	equ	0xFF8
 20285                           tblptrh	equ	0xFF7
 20286                           tblptrl	equ	0xFF6
 20287                           tablat	equ	0xFF5
 20288                           prodh	equ	0xFF4
 20289                           prodl	equ	0xFF3
 20290                           intcon	equ	0xFF2
 20291                           intcon2	equ	0xFF1
 20292                           intcon3	equ	0xFF0
 20293                           indf0	equ	0xFEF
 20294                           postinc0	equ	0xFEE
 20295                           fsr0h	equ	0xFEA
 20296                           fsr0l	equ	0xFE9
 20297                           wreg	equ	0xFE8
 20298                           postdec1	equ	0xFE5
 20299                           fsr1h	equ	0xFE2
 20300                           fsr1l	equ	0xFE1
 20301                           indf2	equ	0xFDF
 20302                           postinc2	equ	0xFDE
 20303                           postdec2	equ	0xFDD
 20304                           fsr2h	equ	0xFDA
 20305                           fsr2l	equ	0xFD9
 20306                           status	equ	0xFD8
 20307                           
 20308 ;; *************** function i2_strcpy *****************
 20309 ;; Defined at:
 20310 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 20311 ;; Parameters:    Size  Location     Type
 20312 ;;  to              2    0[COMRAM] PTR unsigned char 
 20313 ;;		 -> printRTC@month(4), UI@month(4), 
 20314 ;;  from            2    2[COMRAM] PTR const unsigned char 
 20315 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 20316 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 20317 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 20318 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 20319 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 20320 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 20321 ;;		 -> STR_8(4), 
 20322 ;; Auto vars:     Size  Location     Type
 20323 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 20324 ;;		 -> printRTC@month(4), UI@month(4), 
 20325 ;; Return value:  Size  Location     Type
 20326 ;;                  2    0[COMRAM] PTR unsigned char 
 20327 ;; Registers used:
 20328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20329 ;; Tracked objects:
 20330 ;;		On entry : 0/0
 20331 ;;		On exit  : 0/0
 20332 ;;		Unchanged: 0/0
 20333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20334 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20337 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20338 ;;Total ram usage:        6 bytes
 20339 ;; Hardware stack levels used:    1
 20340 ;; This function calls:
 20341 ;;		Nothing
 20342 ;; This function is called by:
 20343 ;;		i2_printRTC
 20344 ;; This function uses a non-reentrant model
 20345 ;;
 20346                           
 20347                           	psect	text65
 20348  00529E                     __ptext65:
 20349                           	opt stack 0
 20350  00529E                     i2_strcpy:
 20351                           	opt stack 21
 20352                           
 20353                           ;incstack = 0
 20354  00529E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 20355  0052A2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 20356  0052A6  D004               	goto	i2l6896
 20357  0052A8                     i2l6894:
 20358  0052A8  4A05               	infsnz	i2strcpy@cp,f,c
 20359  0052AA  2A06               	incf	i2strcpy@cp+1,f,c
 20360  0052AC  4A03               	infsnz	i2strcpy@from,f,c
 20361  0052AE  2A04               	incf	i2strcpy@from+1,f,c
 20362  0052B0                     i2l6896:
 20363  0052B0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 20364  0052B4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 20365  0052B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20366  0052B8  6AF8               	clrf	tblptru,c
 20367  0052BA                     	endif
 20368  0052BA                     	if	0	;tblptru may be non-zero
 20369  0052BA                     	endif
 20370  0052BA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 20371  0052BE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 20372  0052C2  0008               	tblrd		*
 20373  0052C4  CFF5 FFDF          	movff	tablat,indf2
 20374  0052C8  50DF               	movf	indf2,w,c
 20375  0052CA  B4D8               	btfsc	status,2,c
 20376  0052CC  0012               	return	
 20377  0052CE  D7EC               	goto	i2l6894
 20378  0052D0                     __end_ofi2_strcpy:
 20379                           	opt stack 0
 20380                           pclatu	equ	0xFFB
 20381                           pclath	equ	0xFFA
 20382                           tblptru	equ	0xFF8
 20383                           tblptrh	equ	0xFF7
 20384                           tblptrl	equ	0xFF6
 20385                           tablat	equ	0xFF5
 20386                           prodh	equ	0xFF4
 20387                           prodl	equ	0xFF3
 20388                           intcon	equ	0xFF2
 20389                           intcon2	equ	0xFF1
 20390                           intcon3	equ	0xFF0
 20391                           indf0	equ	0xFEF
 20392                           postinc0	equ	0xFEE
 20393                           fsr0h	equ	0xFEA
 20394                           fsr0l	equ	0xFE9
 20395                           wreg	equ	0xFE8
 20396                           postdec1	equ	0xFE5
 20397                           fsr1h	equ	0xFE2
 20398                           fsr1l	equ	0xFE1
 20399                           indf2	equ	0xFDF
 20400                           postinc2	equ	0xFDE
 20401                           postdec2	equ	0xFDD
 20402                           fsr2h	equ	0xFDA
 20403                           fsr2l	equ	0xFD9
 20404                           status	equ	0xFD8
 20405                           
 20406 ;; *************** function _inputHandler *****************
 20407 ;; Defined at:
 20408 ;;		line 375 in file "UI.c"
 20409 ;; Parameters:    Size  Location     Type
 20410 ;;		None
 20411 ;; Auto vars:     Size  Location     Type
 20412 ;;		None
 20413 ;; Return value:  Size  Location     Type
 20414 ;;                  2   41[COMRAM] int 
 20415 ;; Registers used:
 20416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20417 ;; Tracked objects:
 20418 ;;		On entry : 0/0
 20419 ;;		On exit  : 0/0
 20420 ;;		Unchanged: 0/0
 20421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20422 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20424 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20425 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20426 ;;Total ram usage:        4 bytes
 20427 ;; Hardware stack levels used:    1
 20428 ;; Hardware stack levels required when called:    4
 20429 ;; This function calls:
 20430 ;;		_change_state_to_logs_11
 20431 ;;		_change_state_to_logs_12
 20432 ;;		_change_state_to_logs_22
 20433 ;;		_change_state_to_logs_23
 20434 ;;		_change_state_to_logs_33
 20435 ;;		_change_state_to_logs_34
 20436 ;;		_change_state_to_menu_11
 20437 ;;		_change_state_to_menu_23
 20438 ;;		i2_change_state_to_menu_12
 20439 ;;		i2_change_state_to_menu_22
 20440 ;; This function is called by:
 20441 ;;		_updateMenu
 20442 ;; This function uses a non-reentrant model
 20443 ;;
 20444                           
 20445                           	psect	text66
 20446  00380A                     __ptext66:
 20447                           	opt stack 0
 20448  00380A                     _inputHandler:
 20449                           	opt stack 18
 20450                           
 20451                           ;UI.c: 380: if(firstboot){
 20452                           
 20453                           ;incstack = 0
 20454  00380A  0101               	movlb	1	; () banked
 20455  00380C  513B               	movf	_firstboot& (0+255),w,b
 20456  00380E  0101               	movlb	1	; () banked
 20457  003810  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 20458  003812  B4D8               	btfsc	status,2,c
 20459  003814  D00C               	goto	i2l7360
 20460                           
 20461                           ; BSR set to: 1
 20462                           ;UI.c: 381: change_state_to_menu_11();
 20463  003816  ECC8  F029         	call	_change_state_to_menu_11	;wreg free
 20464                           
 20465                           ;UI.c: 382: firstboot = 0;
 20466  00381A  0E00               	movlw	0
 20467  00381C  0101               	movlb	1	; () banked
 20468  00381E  6F3C               	movwf	(_firstboot+1)& (0+255),b
 20469  003820  0E00               	movlw	0
 20470  003822  6F3B               	movwf	_firstboot& (0+255),b
 20471                           
 20472                           ; BSR set to: 1
 20473                           ;UI.c: 383: return 0;
 20474  003824  0E00               	movlw	0
 20475  003826  6E2B               	movwf	?_inputHandler+1,c
 20476  003828  0E00               	movlw	0
 20477  00382A  6E2A               	movwf	?_inputHandler,c
 20478                           
 20479                           ; BSR set to: 1
 20480  00382C  0012               	return	
 20481  00382E                     i2l7360:
 20482                           
 20483                           ; BSR set to: 1
 20484                           ;UI.c: 384: }
 20485                           ;UI.c: 385: if (logstate){
 20486  00382E  0100               	movlb	0	; () banked
 20487  003830  51F8               	movf	_logstate& (0+255),w,b
 20488  003832  0100               	movlb	0	; () banked
 20489  003834  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 20490  003836  B4D8               	btfsc	status,2,c
 20491  003838  D0C7               	goto	i2l7478
 20492                           
 20493                           ; BSR set to: 0
 20494                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 20495  00383A  0E43               	movlw	67
 20496  00383C  187D               	xorwf	_input,w,c	;volatile
 20497  00383E  A4D8               	btfss	status,2,c
 20498  003840  D012               	goto	i2l7378
 20499                           
 20500                           ; BSR set to: 0
 20501  003842  B281               	btfsc	3969,1,c	;volatile
 20502  003844  D009               	goto	i2l7370
 20503  003846  D00F               	goto	i2l7378
 20504  003848                     i2l7368:
 20505                           
 20506                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 20507  003848  0E68               	movlw	104
 20508  00384A  6E2C               	movwf	??_inputHandler& (0+255),c
 20509  00384C  0EE4               	movlw	228
 20510  00384E                     i2u1088_47:
 20511  00384E  2EE8               	decfsz	wreg,f,c
 20512  003850  D7FE               	bra	i2u1088_47
 20513  003852  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 20514  003854  D7FC               	bra	i2u1088_47
 20515  003856  D000               	nop2	
 20516  003858                     i2l7370:
 20517  003858  B281               	btfsc	3969,1,c	;volatile
 20518  00385A  D7F6               	goto	i2l7368
 20519  00385C                     i2l7372:
 20520                           
 20521                           ;UI.c: 390: }
 20522                           ;UI.c: 391: return 0;
 20523  00385C  0E00               	movlw	0
 20524  00385E  6E2B               	movwf	?_inputHandler+1,c
 20525  003860  0E00               	movlw	0
 20526  003862  6E2A               	movwf	?_inputHandler,c
 20527  003864  0012               	return	
 20528  003866                     i2l7378:
 20529                           
 20530                           ;UI.c: 393: else if (input == 'D'){
 20531  003866  0E44               	movlw	68
 20532  003868  187D               	xorwf	_input,w,c	;volatile
 20533  00386A  A4D8               	btfss	status,2,c
 20534  00386C  D7F7               	goto	i2l7372
 20535                           
 20536                           ;UI.c: 395: logstate = 0;
 20537  00386E  0E00               	movlw	0
 20538  003870  0100               	movlb	0	; () banked
 20539  003872  6FF9               	movwf	(_logstate+1)& (0+255),b
 20540  003874  0E00               	movlw	0
 20541  003876  6FF8               	movwf	_logstate& (0+255),b
 20542                           
 20543                           ;UI.c: 396: switch(cur_state){
 20544  003878  D012               	goto	i2l7396
 20545  00387A                     i2l7382:
 20546                           
 20547                           ;UI.c: 398: change_state_to_logs_11();
 20548  00387A  EC40  F02A         	call	_change_state_to_logs_11	;wreg free
 20549                           
 20550                           ;UI.c: 399: break;
 20551  00387E  D7EE               	goto	i2l7372
 20552  003880                     i2l7384:
 20553                           
 20554                           ;UI.c: 401: change_state_to_logs_12();
 20555  003880  EC28  F02A         	call	_change_state_to_logs_12	;wreg free
 20556                           
 20557                           ;UI.c: 402: break;
 20558  003884  D7EB               	goto	i2l7372
 20559  003886                     i2l7386:
 20560                           
 20561                           ;UI.c: 404: change_state_to_logs_22();
 20562  003886  EC10  F02A         	call	_change_state_to_logs_22	;wreg free
 20563                           
 20564                           ;UI.c: 405: break;
 20565  00388A  D7E8               	goto	i2l7372
 20566  00388C                     i2l7388:
 20567                           
 20568                           ;UI.c: 407: change_state_to_logs_23();
 20569  00388C  EC6F  F02A         	call	_change_state_to_logs_23	;wreg free
 20570                           
 20571                           ;UI.c: 408: break;
 20572  003890  D7E5               	goto	i2l7372
 20573  003892                     i2l7390:
 20574                           
 20575                           ;UI.c: 410: change_state_to_logs_33();
 20576  003892  ECF8  F029         	call	_change_state_to_logs_33	;wreg free
 20577                           
 20578                           ;UI.c: 411: break;
 20579  003896  D7E2               	goto	i2l7372
 20580  003898                     i2l7392:
 20581                           
 20582                           ;UI.c: 413: change_state_to_logs_34();
 20583  003898  ECE0  F029         	call	_change_state_to_logs_34	;wreg free
 20584                           
 20585                           ;UI.c: 415: }
 20586                           
 20587                           ;UI.c: 414: break;
 20588  00389C  D7DF               	goto	i2l7372
 20589  00389E                     i2l7396:
 20590  00389E  C0EC  F02C         	movff	_cur_state,??_inputHandler
 20591  0038A2  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 20592                           
 20593                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20594                           ; Switch size 1, requested type "space"
 20595                           ; Number of cases is 2, Range of values is 3 to 4
 20596                           ; switch strategies available:
 20597                           ; Name         Instructions Cycles
 20598                           ; simple_byte            7     4 (average)
 20599                           ;	Chosen strategy is simple_byte
 20600  0038A6  502D               	movf	??_inputHandler+1,w,c
 20601  0038A8  0A03               	xorlw	3	; case 3
 20602  0038AA  B4D8               	btfsc	status,2,c
 20603  0038AC  D004               	goto	i2l10414
 20604  0038AE  0A07               	xorlw	7	; case 4
 20605  0038B0  B4D8               	btfsc	status,2,c
 20606  0038B2  D00F               	goto	i2l10416
 20607  0038B4  D7D3               	goto	i2l7372
 20608  0038B6                     i2l10414:
 20609                           
 20610                           ; Switch size 1, requested type "space"
 20611                           ; Number of cases is 4, Range of values is 243 to 255
 20612                           ; switch strategies available:
 20613                           ; Name         Instructions Cycles
 20614                           ; simple_byte           13     7 (average)
 20615                           ;	Chosen strategy is simple_byte
 20616  0038B6  502C               	movf	??_inputHandler,w,c
 20617  0038B8  0AF3               	xorlw	243	; case 243
 20618  0038BA  B4D8               	btfsc	status,2,c
 20619  0038BC  D7DE               	goto	i2l7382
 20620  0038BE  0A07               	xorlw	7	; case 244
 20621  0038C0  B4D8               	btfsc	status,2,c
 20622  0038C2  D7DE               	goto	i2l7384
 20623  0038C4  0A0A               	xorlw	10	; case 254
 20624  0038C6  B4D8               	btfsc	status,2,c
 20625  0038C8  D7DE               	goto	i2l7386
 20626  0038CA  0A01               	xorlw	1	; case 255
 20627  0038CC  B4D8               	btfsc	status,2,c
 20628  0038CE  D7DE               	goto	i2l7388
 20629  0038D0  D7C5               	goto	i2l7372
 20630  0038D2                     i2l10416:
 20631                           
 20632                           ; Switch size 1, requested type "space"
 20633                           ; Number of cases is 2, Range of values is 9 to 10
 20634                           ; switch strategies available:
 20635                           ; Name         Instructions Cycles
 20636                           ; simple_byte            7     4 (average)
 20637                           ;	Chosen strategy is simple_byte
 20638  0038D2  502C               	movf	??_inputHandler,w,c
 20639  0038D4  0A09               	xorlw	9	; case 9
 20640  0038D6  B4D8               	btfsc	status,2,c
 20641  0038D8  D7DC               	goto	i2l7390
 20642  0038DA  0A03               	xorlw	3	; case 10
 20643  0038DC  B4D8               	btfsc	status,2,c
 20644  0038DE  D7DC               	goto	i2l7392
 20645  0038E0  D7BD               	goto	i2l7372
 20646  0038E2                     i2l7408:
 20647                           
 20648                           ;UI.c: 425: if(cur_state == 11){
 20649  0038E2  0E0B               	movlw	11
 20650  0038E4  0100               	movlb	0	; () banked
 20651  0038E6  19EC               	xorwf	_cur_state& (0+255),w,b
 20652  0038E8  0100               	movlb	0	; () banked
 20653  0038EA  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20654  0038EC  A4D8               	btfss	status,2,c
 20655  0038EE  D005               	goto	i2l7416
 20656                           
 20657                           ; BSR set to: 0
 20658                           ;UI.c: 426: return 0;
 20659  0038F0  0E00               	movlw	0
 20660  0038F2  6E2B               	movwf	?_inputHandler+1,c
 20661  0038F4  0E00               	movlw	0
 20662  0038F6  6E2A               	movwf	?_inputHandler,c
 20663                           
 20664                           ; BSR set to: 0
 20665  0038F8  0012               	return	
 20666  0038FA                     i2l7416:
 20667                           
 20668                           ; BSR set to: 0
 20669                           ;UI.c: 428: else{
 20670                           ;UI.c: 429: change_state_to_menu_11();
 20671  0038FA  ECC8  F029         	call	_change_state_to_menu_11	;wreg free
 20672                           
 20673                           ;UI.c: 430: }
 20674                           ;UI.c: 431: return 0;
 20675  0038FE  0E00               	movlw	0
 20676  003900  6E2B               	movwf	?_inputHandler+1,c
 20677  003902  0E00               	movlw	0
 20678  003904  6E2A               	movwf	?_inputHandler,c
 20679  003906  0012               	return	
 20680  003908                     i2l7422:
 20681                           
 20682                           ;UI.c: 433: if(cur_state == 22 | cur_state == 12){
 20683  003908  0E16               	movlw	22
 20684  00390A  0100               	movlb	0	; () banked
 20685  00390C  19EC               	xorwf	_cur_state& (0+255),w,b
 20686  00390E  0100               	movlb	0	; () banked
 20687  003910  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20688  003912  B4D8               	btfsc	status,2,c
 20689  003914  D007               	goto	i2l7426
 20690                           
 20691                           ; BSR set to: 0
 20692  003916  0E0C               	movlw	12
 20693  003918  0100               	movlb	0	; () banked
 20694  00391A  19EC               	xorwf	_cur_state& (0+255),w,b
 20695  00391C  0100               	movlb	0	; () banked
 20696  00391E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20697  003920  A4D8               	btfss	status,2,c
 20698  003922  D005               	goto	i2l7432
 20699  003924                     i2l7426:
 20700                           
 20701                           ; BSR set to: 0
 20702                           ;UI.c: 434: return 0;
 20703  003924  0E00               	movlw	0
 20704  003926  6E2B               	movwf	?_inputHandler+1,c
 20705  003928  0E00               	movlw	0
 20706  00392A  6E2A               	movwf	?_inputHandler,c
 20707                           
 20708                           ; BSR set to: 0
 20709  00392C  0012               	return	
 20710  00392E                     i2l7432:
 20711                           
 20712                           ; BSR set to: 0
 20713                           ;UI.c: 436: else if(cur_state == 23){
 20714  00392E  0E17               	movlw	23
 20715  003930  0100               	movlb	0	; () banked
 20716  003932  19EC               	xorwf	_cur_state& (0+255),w,b
 20717  003934  0100               	movlb	0	; () banked
 20718  003936  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20719  003938  A4D8               	btfss	status,2,c
 20720  00393A  D003               	goto	i2l7436
 20721                           
 20722                           ; BSR set to: 0
 20723                           ;UI.c: 437: change_state_to_menu_22();
 20724  00393C  EC80  F029         	call	i2_change_state_to_menu_22	;wreg free
 20725                           
 20726                           ;UI.c: 438: }
 20727  003940  D002               	goto	i2l7438
 20728  003942                     i2l7436:
 20729                           
 20730                           ;UI.c: 439: else{
 20731                           ;UI.c: 440: change_state_to_menu_12();
 20732  003942  EC98  F029         	call	i2_change_state_to_menu_12	;wreg free
 20733  003946                     i2l7438:
 20734                           
 20735                           ;UI.c: 441: }
 20736                           ;UI.c: 442: return 0;
 20737  003946  0E00               	movlw	0
 20738  003948  6E2B               	movwf	?_inputHandler+1,c
 20739  00394A  0E00               	movlw	0
 20740  00394C  6E2A               	movwf	?_inputHandler,c
 20741  00394E  0012               	return	
 20742  003950                     i2l7442:
 20743                           
 20744                           ;UI.c: 444: if(cur_state == 23){
 20745  003950  0E17               	movlw	23
 20746  003952  0100               	movlb	0	; () banked
 20747  003954  19EC               	xorwf	_cur_state& (0+255),w,b
 20748  003956  0100               	movlb	0	; () banked
 20749  003958  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20750  00395A  A4D8               	btfss	status,2,c
 20751  00395C  D005               	goto	i2l7450
 20752                           
 20753                           ; BSR set to: 0
 20754                           ;UI.c: 445: return 0;
 20755  00395E  0E00               	movlw	0
 20756  003960  6E2B               	movwf	?_inputHandler+1,c
 20757  003962  0E00               	movlw	0
 20758  003964  6E2A               	movwf	?_inputHandler,c
 20759                           
 20760                           ; BSR set to: 0
 20761  003966  0012               	return	
 20762  003968                     i2l7450:
 20763                           
 20764                           ; BSR set to: 0
 20765                           ;UI.c: 447: else{
 20766                           ;UI.c: 448: change_state_to_menu_23();
 20767  003968  ECB0  F029         	call	_change_state_to_menu_23	;wreg free
 20768                           
 20769                           ;UI.c: 449: }
 20770                           ;UI.c: 450: return 0;
 20771  00396C  0E00               	movlw	0
 20772  00396E  6E2B               	movwf	?_inputHandler+1,c
 20773  003970  0E00               	movlw	0
 20774  003972  6E2A               	movwf	?_inputHandler,c
 20775  003974  0012               	return	
 20776  003976                     i2l7456:
 20777                           
 20778                           ;UI.c: 453: up = 1;
 20779  003976  0E00               	movlw	0
 20780  003978  6E76               	movwf	_up+1,c
 20781  00397A  0E01               	movlw	1
 20782  00397C  6E75               	movwf	_up,c
 20783                           
 20784                           ;UI.c: 454: return 1;
 20785  00397E  0E00               	movlw	0
 20786  003980  6E2B               	movwf	?_inputHandler+1,c
 20787  003982  0E01               	movlw	1
 20788  003984  6E2A               	movwf	?_inputHandler,c
 20789  003986  0012               	return	
 20790  003988                     i2l7460:
 20791                           
 20792                           ;UI.c: 456: down = 1;
 20793  003988  0E00               	movlw	0
 20794  00398A  6E5E               	movwf	_down+1,c
 20795  00398C  0E01               	movlw	1
 20796  00398E  6E5D               	movwf	_down,c
 20797                           
 20798                           ;UI.c: 457: return 1;
 20799  003990  0E00               	movlw	0
 20800  003992  6E2B               	movwf	?_inputHandler+1,c
 20801  003994  0E01               	movlw	1
 20802  003996  6E2A               	movwf	?_inputHandler,c
 20803  003998  0012               	return	
 20804  00399A                     i2l7464:
 20805                           
 20806                           ;UI.c: 459: enter = 1;
 20807  00399A  0E00               	movlw	0
 20808  00399C  6E60               	movwf	_enter+1,c
 20809  00399E  0E01               	movlw	1
 20810  0039A0  6E5F               	movwf	_enter,c
 20811                           
 20812                           ;UI.c: 460: return 1;
 20813  0039A2  0E00               	movlw	0
 20814  0039A4  6E2B               	movwf	?_inputHandler+1,c
 20815  0039A6  0E01               	movlw	1
 20816  0039A8  6E2A               	movwf	?_inputHandler,c
 20817  0039AA  0012               	return	
 20818  0039AC                     i2l7468:
 20819                           
 20820                           ;UI.c: 462: back = 1;
 20821  0039AC  0E00               	movlw	0
 20822  0039AE  6E5C               	movwf	_back+1,c
 20823  0039B0  0E01               	movlw	1
 20824  0039B2  6E5B               	movwf	_back,c
 20825                           
 20826                           ;UI.c: 463: return 1;
 20827  0039B4  0E00               	movlw	0
 20828  0039B6  6E2B               	movwf	?_inputHandler+1,c
 20829  0039B8  0E01               	movlw	1
 20830  0039BA  6E2A               	movwf	?_inputHandler,c
 20831  0039BC  0012               	return	
 20832  0039BE                     i2l7472:
 20833                           
 20834                           ;UI.c: 466: return 1;
 20835  0039BE  0E00               	movlw	0
 20836  0039C0  6E2B               	movwf	?_inputHandler+1,c
 20837  0039C2  0E01               	movlw	1
 20838  0039C4  6E2A               	movwf	?_inputHandler,c
 20839                           
 20840                           ;UI.c: 467: }
 20841  0039C6  0012               	return	
 20842  0039C8                     i2l7478:
 20843  0039C8  507D               	movf	_input,w,c	;volatile
 20844                           
 20845                           ; Switch size 1, requested type "space"
 20846                           ; Number of cases is 7, Range of values is 49 to 68
 20847                           ; switch strategies available:
 20848                           ; Name         Instructions Cycles
 20849                           ; simple_byte           22    12 (average)
 20850                           ;	Chosen strategy is simple_byte
 20851  0039CA  0A31               	xorlw	49	; case 49
 20852  0039CC  B4D8               	btfsc	status,2,c
 20853  0039CE  D789               	goto	i2l7408
 20854  0039D0  0A03               	xorlw	3	; case 50
 20855  0039D2  B4D8               	btfsc	status,2,c
 20856  0039D4  D799               	goto	i2l7422
 20857  0039D6  0A01               	xorlw	1	; case 51
 20858  0039D8  B4D8               	btfsc	status,2,c
 20859  0039DA  D7BA               	goto	i2l7442
 20860  0039DC  0A72               	xorlw	114	; case 65
 20861  0039DE  B4D8               	btfsc	status,2,c
 20862  0039E0  D7CA               	goto	i2l7456
 20863  0039E2  0A03               	xorlw	3	; case 66
 20864  0039E4  B4D8               	btfsc	status,2,c
 20865  0039E6  D7D0               	goto	i2l7460
 20866  0039E8  0A01               	xorlw	1	; case 67
 20867  0039EA  B4D8               	btfsc	status,2,c
 20868  0039EC  D7D6               	goto	i2l7464
 20869  0039EE  0A07               	xorlw	7	; case 68
 20870  0039F0  B4D8               	btfsc	status,2,c
 20871  0039F2  D7DC               	goto	i2l7468
 20872  0039F4  D7E4               	goto	i2l7472
 20873  0039F6                     __end_of_inputHandler:
 20874                           	opt stack 0
 20875                           pclatu	equ	0xFFB
 20876                           pclath	equ	0xFFA
 20877                           tblptru	equ	0xFF8
 20878                           tblptrh	equ	0xFF7
 20879                           tblptrl	equ	0xFF6
 20880                           tablat	equ	0xFF5
 20881                           prodh	equ	0xFF4
 20882                           prodl	equ	0xFF3
 20883                           intcon	equ	0xFF2
 20884                           intcon2	equ	0xFF1
 20885                           intcon3	equ	0xFF0
 20886                           indf0	equ	0xFEF
 20887                           postinc0	equ	0xFEE
 20888                           fsr0h	equ	0xFEA
 20889                           fsr0l	equ	0xFE9
 20890                           wreg	equ	0xFE8
 20891                           postdec1	equ	0xFE5
 20892                           fsr1h	equ	0xFE2
 20893                           fsr1l	equ	0xFE1
 20894                           indf2	equ	0xFDF
 20895                           postinc2	equ	0xFDE
 20896                           postdec2	equ	0xFDD
 20897                           fsr2h	equ	0xFDA
 20898                           fsr2l	equ	0xFD9
 20899                           status	equ	0xFD8
 20900                           
 20901 ;; *************** function i2_change_state_to_menu_22 *****************
 20902 ;; Defined at:
 20903 ;;		line 501 in file "UI.c"
 20904 ;; Parameters:    Size  Location     Type
 20905 ;;		None
 20906 ;; Auto vars:     Size  Location     Type
 20907 ;;		None
 20908 ;; Return value:  Size  Location     Type
 20909 ;;                  1    wreg      void 
 20910 ;; Registers used:
 20911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20912 ;; Tracked objects:
 20913 ;;		On entry : 0/0
 20914 ;;		On exit  : 0/0
 20915 ;;		Unchanged: 0/0
 20916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20921 ;;Total ram usage:        0 bytes
 20922 ;; Hardware stack levels used:    1
 20923 ;; Hardware stack levels required when called:    3
 20924 ;; This function calls:
 20925 ;;		i2_lcdInst
 20926 ;;		i2_printf
 20927 ;; This function is called by:
 20928 ;;		_updateMenu
 20929 ;;		_inputHandler
 20930 ;; This function uses a non-reentrant model
 20931 ;;
 20932                           
 20933                           	psect	text67
 20934  005300                     __ptext67:
 20935                           	opt stack 0
 20936  005300                     i2_change_state_to_menu_22:
 20937                           	opt stack 19
 20938                           
 20939                           ;UI.c: 502: cur_state = 22;
 20940                           
 20941                           ;incstack = 0
 20942  005300  0E00               	movlw	0
 20943  005302  0100               	movlb	0	; () banked
 20944  005304  6FED               	movwf	(_cur_state+1)& (0+255),b
 20945  005306  0E16               	movlw	22
 20946  005308  6FEC               	movwf	_cur_state& (0+255),b
 20947                           
 20948                           ; BSR set to: 0
 20949                           ;UI.c: 504: lcdInst(0b10000000);;
 20950  00530A  0E80               	movlw	128
 20951  00530C  ECB4  F02B         	call	i2_lcdInst
 20952                           
 20953                           ;UI.c: 505: printf("2. SORT        <");
 20954  005310  0ECE               	movlw	low STR_34
 20955  005312  6E0D               	movwf	i2printf@f,c
 20956  005314  0EFD               	movlw	high STR_34
 20957  005316  6E0E               	movwf	i2printf@f+1,c
 20958  005318  EC69  F011         	call	i2_printf	;wreg free
 20959                           
 20960                           ;UI.c: 506: lcdInst(0b11000000);;
 20961  00531C  0EC0               	movlw	192
 20962  00531E  ECB4  F02B         	call	i2_lcdInst
 20963                           
 20964                           ;UI.c: 507: printf("3. LOGS         ");
 20965  005322  0E13               	movlw	low STR_36
 20966  005324  6E0D               	movwf	i2printf@f,c
 20967  005326  0EFD               	movlw	high STR_36
 20968  005328  6E0E               	movwf	i2printf@f+1,c
 20969  00532A  EC69  F011         	call	i2_printf	;wreg free
 20970  00532E  0012               	return		;funcret
 20971  005330                     __end_ofi2_change_state_to_menu_22:
 20972                           	opt stack 0
 20973                           pclatu	equ	0xFFB
 20974                           pclath	equ	0xFFA
 20975                           tblptru	equ	0xFF8
 20976                           tblptrh	equ	0xFF7
 20977                           tblptrl	equ	0xFF6
 20978                           tablat	equ	0xFF5
 20979                           prodh	equ	0xFF4
 20980                           prodl	equ	0xFF3
 20981                           intcon	equ	0xFF2
 20982                           intcon2	equ	0xFF1
 20983                           intcon3	equ	0xFF0
 20984                           indf0	equ	0xFEF
 20985                           postinc0	equ	0xFEE
 20986                           fsr0h	equ	0xFEA
 20987                           fsr0l	equ	0xFE9
 20988                           wreg	equ	0xFE8
 20989                           postdec1	equ	0xFE5
 20990                           fsr1h	equ	0xFE2
 20991                           fsr1l	equ	0xFE1
 20992                           indf2	equ	0xFDF
 20993                           postinc2	equ	0xFDE
 20994                           postdec2	equ	0xFDD
 20995                           fsr2h	equ	0xFDA
 20996                           fsr2l	equ	0xFD9
 20997                           status	equ	0xFD8
 20998                           
 20999 ;; *************** function i2_change_state_to_menu_12 *****************
 21000 ;; Defined at:
 21001 ;;		line 493 in file "UI.c"
 21002 ;; Parameters:    Size  Location     Type
 21003 ;;		None
 21004 ;; Auto vars:     Size  Location     Type
 21005 ;;		None
 21006 ;; Return value:  Size  Location     Type
 21007 ;;                  1    wreg      void 
 21008 ;; Registers used:
 21009 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21010 ;; Tracked objects:
 21011 ;;		On entry : 0/0
 21012 ;;		On exit  : 0/0
 21013 ;;		Unchanged: 0/0
 21014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21019 ;;Total ram usage:        0 bytes
 21020 ;; Hardware stack levels used:    1
 21021 ;; Hardware stack levels required when called:    3
 21022 ;; This function calls:
 21023 ;;		i2_lcdInst
 21024 ;;		i2_printf
 21025 ;; This function is called by:
 21026 ;;		_updateMenu
 21027 ;;		_inputHandler
 21028 ;; This function uses a non-reentrant model
 21029 ;;
 21030                           
 21031                           	psect	text68
 21032  005330                     __ptext68:
 21033                           	opt stack 0
 21034  005330                     i2_change_state_to_menu_12:
 21035                           	opt stack 19
 21036                           
 21037                           ;UI.c: 494: cur_state = 12;
 21038                           
 21039                           ;incstack = 0
 21040  005330  0E00               	movlw	0
 21041  005332  0100               	movlb	0	; () banked
 21042  005334  6FED               	movwf	(_cur_state+1)& (0+255),b
 21043  005336  0E0C               	movlw	12
 21044  005338  6FEC               	movwf	_cur_state& (0+255),b
 21045                           
 21046                           ; BSR set to: 0
 21047                           ;UI.c: 496: lcdInst(0b10000000);;
 21048  00533A  0E80               	movlw	128
 21049  00533C  ECB4  F02B         	call	i2_lcdInst
 21050                           
 21051                           ;UI.c: 497: printf("1. DATE/TIME    ");
 21052  005340  0E35               	movlw	low STR_33
 21053  005342  6E0D               	movwf	i2printf@f,c
 21054  005344  0EFD               	movlw	high STR_33
 21055  005346  6E0E               	movwf	i2printf@f+1,c
 21056  005348  EC69  F011         	call	i2_printf	;wreg free
 21057                           
 21058                           ;UI.c: 498: lcdInst(0b11000000);;
 21059  00534C  0EC0               	movlw	192
 21060  00534E  ECB4  F02B         	call	i2_lcdInst
 21061                           
 21062                           ;UI.c: 499: printf("2. SORT        <");
 21063  005352  0ECE               	movlw	low STR_34
 21064  005354  6E0D               	movwf	i2printf@f,c
 21065  005356  0EFD               	movlw	high STR_34
 21066  005358  6E0E               	movwf	i2printf@f+1,c
 21067  00535A  EC69  F011         	call	i2_printf	;wreg free
 21068  00535E  0012               	return		;funcret
 21069  005360                     __end_ofi2_change_state_to_menu_12:
 21070                           	opt stack 0
 21071                           pclatu	equ	0xFFB
 21072                           pclath	equ	0xFFA
 21073                           tblptru	equ	0xFF8
 21074                           tblptrh	equ	0xFF7
 21075                           tblptrl	equ	0xFF6
 21076                           tablat	equ	0xFF5
 21077                           prodh	equ	0xFF4
 21078                           prodl	equ	0xFF3
 21079                           intcon	equ	0xFF2
 21080                           intcon2	equ	0xFF1
 21081                           intcon3	equ	0xFF0
 21082                           indf0	equ	0xFEF
 21083                           postinc0	equ	0xFEE
 21084                           fsr0h	equ	0xFEA
 21085                           fsr0l	equ	0xFE9
 21086                           wreg	equ	0xFE8
 21087                           postdec1	equ	0xFE5
 21088                           fsr1h	equ	0xFE2
 21089                           fsr1l	equ	0xFE1
 21090                           indf2	equ	0xFDF
 21091                           postinc2	equ	0xFDE
 21092                           postdec2	equ	0xFDD
 21093                           fsr2h	equ	0xFDA
 21094                           fsr2l	equ	0xFD9
 21095                           status	equ	0xFD8
 21096                           
 21097 ;; *************** function _change_state_to_menu_23 *****************
 21098 ;; Defined at:
 21099 ;;		line 509 in file "UI.c"
 21100 ;; Parameters:    Size  Location     Type
 21101 ;;		None
 21102 ;; Auto vars:     Size  Location     Type
 21103 ;;		None
 21104 ;; Return value:  Size  Location     Type
 21105 ;;                  1    wreg      void 
 21106 ;; Registers used:
 21107 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21108 ;; Tracked objects:
 21109 ;;		On entry : 0/0
 21110 ;;		On exit  : 0/0
 21111 ;;		Unchanged: 0/0
 21112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21117 ;;Total ram usage:        0 bytes
 21118 ;; Hardware stack levels used:    1
 21119 ;; Hardware stack levels required when called:    3
 21120 ;; This function calls:
 21121 ;;		i2_lcdInst
 21122 ;;		i2_printf
 21123 ;; This function is called by:
 21124 ;;		_updateMenu
 21125 ;;		_inputHandler
 21126 ;; This function uses a non-reentrant model
 21127 ;;
 21128                           
 21129                           	psect	text69
 21130  005360                     __ptext69:
 21131                           	opt stack 0
 21132  005360                     _change_state_to_menu_23:
 21133                           	opt stack 18
 21134                           
 21135                           ;UI.c: 510: cur_state = 23;
 21136                           
 21137                           ;incstack = 0
 21138  005360  0E00               	movlw	0
 21139  005362  0100               	movlb	0	; () banked
 21140  005364  6FED               	movwf	(_cur_state+1)& (0+255),b
 21141  005366  0E17               	movlw	23
 21142  005368  6FEC               	movwf	_cur_state& (0+255),b
 21143                           
 21144                           ; BSR set to: 0
 21145                           ;UI.c: 512: lcdInst(0b10000000);;
 21146  00536A  0E80               	movlw	128
 21147  00536C  ECB4  F02B         	call	i2_lcdInst
 21148                           
 21149                           ;UI.c: 513: printf("2. SORT         ");
 21150  005370  0E24               	movlw	low STR_32
 21151  005372  6E0D               	movwf	i2printf@f,c
 21152  005374  0EFD               	movlw	high STR_32
 21153  005376  6E0E               	movwf	i2printf@f+1,c
 21154  005378  EC69  F011         	call	i2_printf	;wreg free
 21155                           
 21156                           ;UI.c: 514: lcdInst(0b11000000);;
 21157  00537C  0EC0               	movlw	192
 21158  00537E  ECB4  F02B         	call	i2_lcdInst
 21159                           
 21160                           ;UI.c: 515: printf("3. LOGS        <");
 21161  005382  0EBD               	movlw	low STR_38
 21162  005384  6E0D               	movwf	i2printf@f,c
 21163  005386  0EFD               	movlw	high STR_38
 21164  005388  6E0E               	movwf	i2printf@f+1,c
 21165  00538A  EC69  F011         	call	i2_printf	;wreg free
 21166  00538E  0012               	return		;funcret
 21167  005390                     __end_of_change_state_to_menu_23:
 21168                           	opt stack 0
 21169                           pclatu	equ	0xFFB
 21170                           pclath	equ	0xFFA
 21171                           tblptru	equ	0xFF8
 21172                           tblptrh	equ	0xFF7
 21173                           tblptrl	equ	0xFF6
 21174                           tablat	equ	0xFF5
 21175                           prodh	equ	0xFF4
 21176                           prodl	equ	0xFF3
 21177                           intcon	equ	0xFF2
 21178                           intcon2	equ	0xFF1
 21179                           intcon3	equ	0xFF0
 21180                           indf0	equ	0xFEF
 21181                           postinc0	equ	0xFEE
 21182                           fsr0h	equ	0xFEA
 21183                           fsr0l	equ	0xFE9
 21184                           wreg	equ	0xFE8
 21185                           postdec1	equ	0xFE5
 21186                           fsr1h	equ	0xFE2
 21187                           fsr1l	equ	0xFE1
 21188                           indf2	equ	0xFDF
 21189                           postinc2	equ	0xFDE
 21190                           postdec2	equ	0xFDD
 21191                           fsr2h	equ	0xFDA
 21192                           fsr2l	equ	0xFD9
 21193                           status	equ	0xFD8
 21194                           
 21195 ;; *************** function _change_state_to_menu_11 *****************
 21196 ;; Defined at:
 21197 ;;		line 485 in file "UI.c"
 21198 ;; Parameters:    Size  Location     Type
 21199 ;;		None
 21200 ;; Auto vars:     Size  Location     Type
 21201 ;;		None
 21202 ;; Return value:  Size  Location     Type
 21203 ;;                  1    wreg      void 
 21204 ;; Registers used:
 21205 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21206 ;; Tracked objects:
 21207 ;;		On entry : 0/0
 21208 ;;		On exit  : 0/0
 21209 ;;		Unchanged: 0/0
 21210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21215 ;;Total ram usage:        0 bytes
 21216 ;; Hardware stack levels used:    1
 21217 ;; Hardware stack levels required when called:    3
 21218 ;; This function calls:
 21219 ;;		i2_lcdInst
 21220 ;;		i2_printf
 21221 ;; This function is called by:
 21222 ;;		_updateMenu
 21223 ;;		_inputHandler
 21224 ;; This function uses a non-reentrant model
 21225 ;;
 21226                           
 21227                           	psect	text70
 21228  005390                     __ptext70:
 21229                           	opt stack 0
 21230  005390                     _change_state_to_menu_11:
 21231                           	opt stack 18
 21232                           
 21233                           ;UI.c: 486: cur_state = 11;
 21234                           
 21235                           ;incstack = 0
 21236  005390  0E00               	movlw	0
 21237  005392  0100               	movlb	0	; () banked
 21238  005394  6FED               	movwf	(_cur_state+1)& (0+255),b
 21239  005396  0E0B               	movlw	11
 21240  005398  6FEC               	movwf	_cur_state& (0+255),b
 21241                           
 21242                           ; BSR set to: 0
 21243                           ;UI.c: 488: lcdInst(0b10000000);;
 21244  00539A  0E80               	movlw	128
 21245  00539C  ECB4  F02B         	call	i2_lcdInst
 21246                           
 21247                           ;UI.c: 489: printf("1. DATE/TIME   <");
 21248  0053A0  0EDF               	movlw	low STR_31
 21249  0053A2  6E0D               	movwf	i2printf@f,c
 21250  0053A4  0EFD               	movlw	high STR_31
 21251  0053A6  6E0E               	movwf	i2printf@f+1,c
 21252  0053A8  EC69  F011         	call	i2_printf	;wreg free
 21253                           
 21254                           ;UI.c: 490: lcdInst(0b11000000);;
 21255  0053AC  0EC0               	movlw	192
 21256  0053AE  ECB4  F02B         	call	i2_lcdInst
 21257                           
 21258                           ;UI.c: 491: printf("2. SORT         ");
 21259  0053B2  0E24               	movlw	low STR_32
 21260  0053B4  6E0D               	movwf	i2printf@f,c
 21261  0053B6  0EFD               	movlw	high STR_32
 21262  0053B8  6E0E               	movwf	i2printf@f+1,c
 21263  0053BA  EC69  F011         	call	i2_printf	;wreg free
 21264  0053BE  0012               	return		;funcret
 21265  0053C0                     __end_of_change_state_to_menu_11:
 21266                           	opt stack 0
 21267                           pclatu	equ	0xFFB
 21268                           pclath	equ	0xFFA
 21269                           tblptru	equ	0xFF8
 21270                           tblptrh	equ	0xFF7
 21271                           tblptrl	equ	0xFF6
 21272                           tablat	equ	0xFF5
 21273                           prodh	equ	0xFF4
 21274                           prodl	equ	0xFF3
 21275                           intcon	equ	0xFF2
 21276                           intcon2	equ	0xFF1
 21277                           intcon3	equ	0xFF0
 21278                           indf0	equ	0xFEF
 21279                           postinc0	equ	0xFEE
 21280                           fsr0h	equ	0xFEA
 21281                           fsr0l	equ	0xFE9
 21282                           wreg	equ	0xFE8
 21283                           postdec1	equ	0xFE5
 21284                           fsr1h	equ	0xFE2
 21285                           fsr1l	equ	0xFE1
 21286                           indf2	equ	0xFDF
 21287                           postinc2	equ	0xFDE
 21288                           postdec2	equ	0xFDD
 21289                           fsr2h	equ	0xFDA
 21290                           fsr2l	equ	0xFD9
 21291                           status	equ	0xFD8
 21292                           
 21293 ;; *************** function _change_state_to_logs_34 *****************
 21294 ;; Defined at:
 21295 ;;		line 552 in file "UI.c"
 21296 ;; Parameters:    Size  Location     Type
 21297 ;;		None
 21298 ;; Auto vars:     Size  Location     Type
 21299 ;;		None
 21300 ;; Return value:  Size  Location     Type
 21301 ;;                  1    wreg      void 
 21302 ;; Registers used:
 21303 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21304 ;; Tracked objects:
 21305 ;;		On entry : 0/0
 21306 ;;		On exit  : 0/0
 21307 ;;		Unchanged: 0/0
 21308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21313 ;;Total ram usage:        0 bytes
 21314 ;; Hardware stack levels used:    1
 21315 ;; Hardware stack levels required when called:    3
 21316 ;; This function calls:
 21317 ;;		i2_lcdInst
 21318 ;;		i2_printf
 21319 ;; This function is called by:
 21320 ;;		_updateMenu
 21321 ;;		_inputHandler
 21322 ;; This function uses a non-reentrant model
 21323 ;;
 21324                           
 21325                           	psect	text71
 21326  0053C0                     __ptext71:
 21327                           	opt stack 0
 21328  0053C0                     _change_state_to_logs_34:
 21329                           	opt stack 18
 21330                           
 21331                           ;UI.c: 553: cur_state = 1034;
 21332                           
 21333                           ;incstack = 0
 21334  0053C0  0E04               	movlw	4
 21335  0053C2  0100               	movlb	0	; () banked
 21336  0053C4  6FED               	movwf	(_cur_state+1)& (0+255),b
 21337  0053C6  0E0A               	movlw	10
 21338  0053C8  6FEC               	movwf	_cur_state& (0+255),b
 21339                           
 21340                           ; BSR set to: 0
 21341                           ;UI.c: 554: lcdInst(0b10000000);;
 21342  0053CA  0E80               	movlw	128
 21343  0053CC  ECB4  F02B         	call	i2_lcdInst
 21344                           
 21345                           ;UI.c: 555: printf("LOG 3           ");
 21346  0053D0  0EF1               	movlw	low STR_44
 21347  0053D2  6E0D               	movwf	i2printf@f,c
 21348  0053D4  0EFC               	movlw	high STR_44
 21349  0053D6  6E0E               	movwf	i2printf@f+1,c
 21350  0053D8  EC69  F011         	call	i2_printf	;wreg free
 21351                           
 21352                           ;UI.c: 556: lcdInst(0b11000000);;
 21353  0053DC  0EC0               	movlw	192
 21354  0053DE  ECB4  F02B         	call	i2_lcdInst
 21355                           
 21356                           ;UI.c: 557: printf("LOG 4          <");
 21357  0053E2  0EAC               	movlw	low STR_50
 21358  0053E4  6E0D               	movwf	i2printf@f,c
 21359  0053E6  0EFD               	movlw	high STR_50
 21360  0053E8  6E0E               	movwf	i2printf@f+1,c
 21361  0053EA  EC69  F011         	call	i2_printf	;wreg free
 21362  0053EE  0012               	return		;funcret
 21363  0053F0                     __end_of_change_state_to_logs_34:
 21364                           	opt stack 0
 21365                           pclatu	equ	0xFFB
 21366                           pclath	equ	0xFFA
 21367                           tblptru	equ	0xFF8
 21368                           tblptrh	equ	0xFF7
 21369                           tblptrl	equ	0xFF6
 21370                           tablat	equ	0xFF5
 21371                           prodh	equ	0xFF4
 21372                           prodl	equ	0xFF3
 21373                           intcon	equ	0xFF2
 21374                           intcon2	equ	0xFF1
 21375                           intcon3	equ	0xFF0
 21376                           indf0	equ	0xFEF
 21377                           postinc0	equ	0xFEE
 21378                           fsr0h	equ	0xFEA
 21379                           fsr0l	equ	0xFE9
 21380                           wreg	equ	0xFE8
 21381                           postdec1	equ	0xFE5
 21382                           fsr1h	equ	0xFE2
 21383                           fsr1l	equ	0xFE1
 21384                           indf2	equ	0xFDF
 21385                           postinc2	equ	0xFDE
 21386                           postdec2	equ	0xFDD
 21387                           fsr2h	equ	0xFDA
 21388                           fsr2l	equ	0xFD9
 21389                           status	equ	0xFD8
 21390                           
 21391 ;; *************** function _change_state_to_logs_33 *****************
 21392 ;; Defined at:
 21393 ;;		line 545 in file "UI.c"
 21394 ;; Parameters:    Size  Location     Type
 21395 ;;		None
 21396 ;; Auto vars:     Size  Location     Type
 21397 ;;		None
 21398 ;; Return value:  Size  Location     Type
 21399 ;;                  1    wreg      void 
 21400 ;; Registers used:
 21401 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21402 ;; Tracked objects:
 21403 ;;		On entry : 0/0
 21404 ;;		On exit  : 0/0
 21405 ;;		Unchanged: 0/0
 21406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21411 ;;Total ram usage:        0 bytes
 21412 ;; Hardware stack levels used:    1
 21413 ;; Hardware stack levels required when called:    3
 21414 ;; This function calls:
 21415 ;;		i2_lcdInst
 21416 ;;		i2_printf
 21417 ;; This function is called by:
 21418 ;;		_updateMenu
 21419 ;;		_inputHandler
 21420 ;; This function uses a non-reentrant model
 21421 ;;
 21422                           
 21423                           	psect	text72
 21424  0053F0                     __ptext72:
 21425                           	opt stack 0
 21426  0053F0                     _change_state_to_logs_33:
 21427                           	opt stack 18
 21428                           
 21429                           ;UI.c: 546: cur_state = 1033;
 21430                           
 21431                           ;incstack = 0
 21432  0053F0  0E04               	movlw	4
 21433  0053F2  0100               	movlb	0	; () banked
 21434  0053F4  6FED               	movwf	(_cur_state+1)& (0+255),b
 21435  0053F6  0E09               	movlw	9
 21436  0053F8  6FEC               	movwf	_cur_state& (0+255),b
 21437                           
 21438                           ; BSR set to: 0
 21439                           ;UI.c: 547: lcdInst(0b10000000);;
 21440  0053FA  0E80               	movlw	128
 21441  0053FC  ECB4  F02B         	call	i2_lcdInst
 21442                           
 21443                           ;UI.c: 548: printf("LOG 3          <");
 21444  005400  0E9B               	movlw	low STR_46
 21445  005402  6E0D               	movwf	i2printf@f,c
 21446  005404  0EFD               	movlw	high STR_46
 21447  005406  6E0E               	movwf	i2printf@f+1,c
 21448  005408  EC69  F011         	call	i2_printf	;wreg free
 21449                           
 21450                           ;UI.c: 549: lcdInst(0b11000000);;
 21451  00540C  0EC0               	movlw	192
 21452  00540E  ECB4  F02B         	call	i2_lcdInst
 21453                           
 21454                           ;UI.c: 550: printf("LOG 4           ");
 21455  005412  0E02               	movlw	low STR_48
 21456  005414  6E0D               	movwf	i2printf@f,c
 21457  005416  0EFD               	movlw	high STR_48
 21458  005418  6E0E               	movwf	i2printf@f+1,c
 21459  00541A  EC69  F011         	call	i2_printf	;wreg free
 21460  00541E  0012               	return		;funcret
 21461  005420                     __end_of_change_state_to_logs_33:
 21462                           	opt stack 0
 21463                           pclatu	equ	0xFFB
 21464                           pclath	equ	0xFFA
 21465                           tblptru	equ	0xFF8
 21466                           tblptrh	equ	0xFF7
 21467                           tblptrl	equ	0xFF6
 21468                           tablat	equ	0xFF5
 21469                           prodh	equ	0xFF4
 21470                           prodl	equ	0xFF3
 21471                           intcon	equ	0xFF2
 21472                           intcon2	equ	0xFF1
 21473                           intcon3	equ	0xFF0
 21474                           indf0	equ	0xFEF
 21475                           postinc0	equ	0xFEE
 21476                           fsr0h	equ	0xFEA
 21477                           fsr0l	equ	0xFE9
 21478                           wreg	equ	0xFE8
 21479                           postdec1	equ	0xFE5
 21480                           fsr1h	equ	0xFE2
 21481                           fsr1l	equ	0xFE1
 21482                           indf2	equ	0xFDF
 21483                           postinc2	equ	0xFDE
 21484                           postdec2	equ	0xFDD
 21485                           fsr2h	equ	0xFDA
 21486                           fsr2l	equ	0xFD9
 21487                           status	equ	0xFD8
 21488                           
 21489 ;; *************** function _change_state_to_logs_23 *****************
 21490 ;; Defined at:
 21491 ;;		line 538 in file "UI.c"
 21492 ;; Parameters:    Size  Location     Type
 21493 ;;		None
 21494 ;; Auto vars:     Size  Location     Type
 21495 ;;		None
 21496 ;; Return value:  Size  Location     Type
 21497 ;;                  1    wreg      void 
 21498 ;; Registers used:
 21499 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21500 ;; Tracked objects:
 21501 ;;		On entry : 0/0
 21502 ;;		On exit  : 0/0
 21503 ;;		Unchanged: 0/0
 21504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21509 ;;Total ram usage:        0 bytes
 21510 ;; Hardware stack levels used:    1
 21511 ;; Hardware stack levels required when called:    3
 21512 ;; This function calls:
 21513 ;;		i2_lcdInst
 21514 ;;		i2_printf
 21515 ;; This function is called by:
 21516 ;;		_updateMenu
 21517 ;;		_inputHandler
 21518 ;; This function uses a non-reentrant model
 21519 ;;
 21520                           
 21521                           	psect	text73
 21522  0054DE                     __ptext73:
 21523                           	opt stack 0
 21524  0054DE                     _change_state_to_logs_23:
 21525                           	opt stack 18
 21526                           
 21527                           ;UI.c: 539: cur_state = 1023;
 21528                           
 21529                           ;incstack = 0
 21530  0054DE  0E03               	movlw	3
 21531  0054E0  0100               	movlb	0	; () banked
 21532  0054E2  6FED               	movwf	(_cur_state+1)& (0+255),b
 21533  0054E4  69EC               	setf	_cur_state& (0+255),b
 21534                           
 21535                           ; BSR set to: 0
 21536                           ;UI.c: 540: lcdInst(0b10000000);;
 21537  0054E6  0E80               	movlw	128
 21538  0054E8  ECB4  F02B         	call	i2_lcdInst
 21539                           
 21540                           ;UI.c: 541: printf("LOG 2           ");
 21541  0054EC  0EE0               	movlw	low STR_40
 21542  0054EE  6E0D               	movwf	i2printf@f,c
 21543  0054F0  0EFC               	movlw	high STR_40
 21544  0054F2  6E0E               	movwf	i2printf@f+1,c
 21545  0054F4  EC69  F011         	call	i2_printf	;wreg free
 21546                           
 21547                           ;UI.c: 542: lcdInst(0b11000000);;
 21548  0054F8  0EC0               	movlw	192
 21549  0054FA  ECB4  F02B         	call	i2_lcdInst
 21550                           
 21551                           ;UI.c: 543: printf("LOG 3          <");
 21552  0054FE  0E9B               	movlw	low STR_46
 21553  005500  6E0D               	movwf	i2printf@f,c
 21554  005502  0EFD               	movlw	high STR_46
 21555  005504  6E0E               	movwf	i2printf@f+1,c
 21556  005506  EC69  F011         	call	i2_printf	;wreg free
 21557  00550A  0012               	return		;funcret
 21558  00550C                     __end_of_change_state_to_logs_23:
 21559                           	opt stack 0
 21560                           pclatu	equ	0xFFB
 21561                           pclath	equ	0xFFA
 21562                           tblptru	equ	0xFF8
 21563                           tblptrh	equ	0xFF7
 21564                           tblptrl	equ	0xFF6
 21565                           tablat	equ	0xFF5
 21566                           prodh	equ	0xFF4
 21567                           prodl	equ	0xFF3
 21568                           intcon	equ	0xFF2
 21569                           intcon2	equ	0xFF1
 21570                           intcon3	equ	0xFF0
 21571                           indf0	equ	0xFEF
 21572                           postinc0	equ	0xFEE
 21573                           fsr0h	equ	0xFEA
 21574                           fsr0l	equ	0xFE9
 21575                           wreg	equ	0xFE8
 21576                           postdec1	equ	0xFE5
 21577                           fsr1h	equ	0xFE2
 21578                           fsr1l	equ	0xFE1
 21579                           indf2	equ	0xFDF
 21580                           postinc2	equ	0xFDE
 21581                           postdec2	equ	0xFDD
 21582                           fsr2h	equ	0xFDA
 21583                           fsr2l	equ	0xFD9
 21584                           status	equ	0xFD8
 21585                           
 21586 ;; *************** function _change_state_to_logs_22 *****************
 21587 ;; Defined at:
 21588 ;;		line 531 in file "UI.c"
 21589 ;; Parameters:    Size  Location     Type
 21590 ;;		None
 21591 ;; Auto vars:     Size  Location     Type
 21592 ;;		None
 21593 ;; Return value:  Size  Location     Type
 21594 ;;                  1    wreg      void 
 21595 ;; Registers used:
 21596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21597 ;; Tracked objects:
 21598 ;;		On entry : 0/0
 21599 ;;		On exit  : 0/0
 21600 ;;		Unchanged: 0/0
 21601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21606 ;;Total ram usage:        0 bytes
 21607 ;; Hardware stack levels used:    1
 21608 ;; Hardware stack levels required when called:    3
 21609 ;; This function calls:
 21610 ;;		i2_lcdInst
 21611 ;;		i2_printf
 21612 ;; This function is called by:
 21613 ;;		_updateMenu
 21614 ;;		_inputHandler
 21615 ;; This function uses a non-reentrant model
 21616 ;;
 21617                           
 21618                           	psect	text74
 21619  005420                     __ptext74:
 21620                           	opt stack 0
 21621  005420                     _change_state_to_logs_22:
 21622                           	opt stack 18
 21623                           
 21624                           ;UI.c: 532: cur_state = 1022;
 21625                           
 21626                           ;incstack = 0
 21627  005420  0E03               	movlw	3
 21628  005422  0100               	movlb	0	; () banked
 21629  005424  6FED               	movwf	(_cur_state+1)& (0+255),b
 21630  005426  0EFE               	movlw	254
 21631  005428  6FEC               	movwf	_cur_state& (0+255),b
 21632                           
 21633                           ; BSR set to: 0
 21634                           ;UI.c: 533: lcdInst(0b10000000);;
 21635  00542A  0E80               	movlw	128
 21636  00542C  ECB4  F02B         	call	i2_lcdInst
 21637                           
 21638                           ;UI.c: 534: printf("LOG 2          <");
 21639  005430  0E8A               	movlw	low STR_42
 21640  005432  6E0D               	movwf	i2printf@f,c
 21641  005434  0EFD               	movlw	high STR_42
 21642  005436  6E0E               	movwf	i2printf@f+1,c
 21643  005438  EC69  F011         	call	i2_printf	;wreg free
 21644                           
 21645                           ;UI.c: 535: lcdInst(0b11000000);;
 21646  00543C  0EC0               	movlw	192
 21647  00543E  ECB4  F02B         	call	i2_lcdInst
 21648                           
 21649                           ;UI.c: 536: printf("LOG 3           ");
 21650  005442  0EF1               	movlw	low STR_44
 21651  005444  6E0D               	movwf	i2printf@f,c
 21652  005446  0EFC               	movlw	high STR_44
 21653  005448  6E0E               	movwf	i2printf@f+1,c
 21654  00544A  EC69  F011         	call	i2_printf	;wreg free
 21655  00544E  0012               	return		;funcret
 21656  005450                     __end_of_change_state_to_logs_22:
 21657                           	opt stack 0
 21658                           pclatu	equ	0xFFB
 21659                           pclath	equ	0xFFA
 21660                           tblptru	equ	0xFF8
 21661                           tblptrh	equ	0xFF7
 21662                           tblptrl	equ	0xFF6
 21663                           tablat	equ	0xFF5
 21664                           prodh	equ	0xFF4
 21665                           prodl	equ	0xFF3
 21666                           intcon	equ	0xFF2
 21667                           intcon2	equ	0xFF1
 21668                           intcon3	equ	0xFF0
 21669                           indf0	equ	0xFEF
 21670                           postinc0	equ	0xFEE
 21671                           fsr0h	equ	0xFEA
 21672                           fsr0l	equ	0xFE9
 21673                           wreg	equ	0xFE8
 21674                           postdec1	equ	0xFE5
 21675                           fsr1h	equ	0xFE2
 21676                           fsr1l	equ	0xFE1
 21677                           indf2	equ	0xFDF
 21678                           postinc2	equ	0xFDE
 21679                           postdec2	equ	0xFDD
 21680                           fsr2h	equ	0xFDA
 21681                           fsr2l	equ	0xFD9
 21682                           status	equ	0xFD8
 21683                           
 21684 ;; *************** function _change_state_to_logs_12 *****************
 21685 ;; Defined at:
 21686 ;;		line 524 in file "UI.c"
 21687 ;; Parameters:    Size  Location     Type
 21688 ;;		None
 21689 ;; Auto vars:     Size  Location     Type
 21690 ;;		None
 21691 ;; Return value:  Size  Location     Type
 21692 ;;                  1    wreg      void 
 21693 ;; Registers used:
 21694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21695 ;; Tracked objects:
 21696 ;;		On entry : 0/0
 21697 ;;		On exit  : 0/0
 21698 ;;		Unchanged: 0/0
 21699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21704 ;;Total ram usage:        0 bytes
 21705 ;; Hardware stack levels used:    1
 21706 ;; Hardware stack levels required when called:    3
 21707 ;; This function calls:
 21708 ;;		i2_lcdInst
 21709 ;;		i2_printf
 21710 ;; This function is called by:
 21711 ;;		_updateMenu
 21712 ;;		_inputHandler
 21713 ;; This function uses a non-reentrant model
 21714 ;;
 21715                           
 21716                           	psect	text75
 21717  005450                     __ptext75:
 21718                           	opt stack 0
 21719  005450                     _change_state_to_logs_12:
 21720                           	opt stack 18
 21721                           
 21722                           ;UI.c: 525: cur_state = 1012;
 21723                           
 21724                           ;incstack = 0
 21725  005450  0E03               	movlw	3
 21726  005452  0100               	movlb	0	; () banked
 21727  005454  6FED               	movwf	(_cur_state+1)& (0+255),b
 21728  005456  0EF4               	movlw	244
 21729  005458  6FEC               	movwf	_cur_state& (0+255),b
 21730                           
 21731                           ; BSR set to: 0
 21732                           ;UI.c: 526: lcdInst(0b10000000);;
 21733  00545A  0E80               	movlw	128
 21734  00545C  ECB4  F02B         	call	i2_lcdInst
 21735                           
 21736                           ;UI.c: 527: printf("LOG 1           ");
 21737  005460  0ECF               	movlw	low STR_41
 21738  005462  6E0D               	movwf	i2printf@f,c
 21739  005464  0EFC               	movlw	high STR_41
 21740  005466  6E0E               	movwf	i2printf@f+1,c
 21741  005468  EC69  F011         	call	i2_printf	;wreg free
 21742                           
 21743                           ;UI.c: 528: lcdInst(0b11000000);;
 21744  00546C  0EC0               	movlw	192
 21745  00546E  ECB4  F02B         	call	i2_lcdInst
 21746                           
 21747                           ;UI.c: 529: printf("LOG 2          <");
 21748  005472  0E8A               	movlw	low STR_42
 21749  005474  6E0D               	movwf	i2printf@f,c
 21750  005476  0EFD               	movlw	high STR_42
 21751  005478  6E0E               	movwf	i2printf@f+1,c
 21752  00547A  EC69  F011         	call	i2_printf	;wreg free
 21753  00547E  0012               	return		;funcret
 21754  005480                     __end_of_change_state_to_logs_12:
 21755                           	opt stack 0
 21756                           pclatu	equ	0xFFB
 21757                           pclath	equ	0xFFA
 21758                           tblptru	equ	0xFF8
 21759                           tblptrh	equ	0xFF7
 21760                           tblptrl	equ	0xFF6
 21761                           tablat	equ	0xFF5
 21762                           prodh	equ	0xFF4
 21763                           prodl	equ	0xFF3
 21764                           intcon	equ	0xFF2
 21765                           intcon2	equ	0xFF1
 21766                           intcon3	equ	0xFF0
 21767                           indf0	equ	0xFEF
 21768                           postinc0	equ	0xFEE
 21769                           fsr0h	equ	0xFEA
 21770                           fsr0l	equ	0xFE9
 21771                           wreg	equ	0xFE8
 21772                           postdec1	equ	0xFE5
 21773                           fsr1h	equ	0xFE2
 21774                           fsr1l	equ	0xFE1
 21775                           indf2	equ	0xFDF
 21776                           postinc2	equ	0xFDE
 21777                           postdec2	equ	0xFDD
 21778                           fsr2h	equ	0xFDA
 21779                           fsr2l	equ	0xFD9
 21780                           status	equ	0xFD8
 21781                           
 21782 ;; *************** function _change_state_to_logs_11 *****************
 21783 ;; Defined at:
 21784 ;;		line 517 in file "UI.c"
 21785 ;; Parameters:    Size  Location     Type
 21786 ;;		None
 21787 ;; Auto vars:     Size  Location     Type
 21788 ;;		None
 21789 ;; Return value:  Size  Location     Type
 21790 ;;                  1    wreg      void 
 21791 ;; Registers used:
 21792 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21793 ;; Tracked objects:
 21794 ;;		On entry : 0/0
 21795 ;;		On exit  : 0/0
 21796 ;;		Unchanged: 0/0
 21797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21802 ;;Total ram usage:        0 bytes
 21803 ;; Hardware stack levels used:    1
 21804 ;; Hardware stack levels required when called:    3
 21805 ;; This function calls:
 21806 ;;		i2_lcdInst
 21807 ;;		i2_printf
 21808 ;; This function is called by:
 21809 ;;		_updateMenu
 21810 ;;		_inputHandler
 21811 ;; This function uses a non-reentrant model
 21812 ;;
 21813                           
 21814                           	psect	text76
 21815  005480                     __ptext76:
 21816                           	opt stack 0
 21817  005480                     _change_state_to_logs_11:
 21818                           	opt stack 18
 21819                           
 21820                           ;UI.c: 518: cur_state = 1011;
 21821                           
 21822                           ;incstack = 0
 21823  005480  0E03               	movlw	3
 21824  005482  0100               	movlb	0	; () banked
 21825  005484  6FED               	movwf	(_cur_state+1)& (0+255),b
 21826  005486  0EF3               	movlw	243
 21827  005488  6FEC               	movwf	_cur_state& (0+255),b
 21828                           
 21829                           ; BSR set to: 0
 21830                           ;UI.c: 519: lcdInst(0b10000000);;
 21831  00548A  0E80               	movlw	128
 21832  00548C  ECB4  F02B         	call	i2_lcdInst
 21833                           
 21834                           ;UI.c: 520: printf("LOG 1          <");
 21835  005490  0E79               	movlw	low STR_39
 21836  005492  6E0D               	movwf	i2printf@f,c
 21837  005494  0EFD               	movlw	high STR_39
 21838  005496  6E0E               	movwf	i2printf@f+1,c
 21839  005498  EC69  F011         	call	i2_printf	;wreg free
 21840                           
 21841                           ;UI.c: 521: lcdInst(0b11000000);;
 21842  00549C  0EC0               	movlw	192
 21843  00549E  ECB4  F02B         	call	i2_lcdInst
 21844                           
 21845                           ;UI.c: 522: printf("LOG 2           ");
 21846  0054A2  0EE0               	movlw	low STR_40
 21847  0054A4  6E0D               	movwf	i2printf@f,c
 21848  0054A6  0EFC               	movlw	high STR_40
 21849  0054A8  6E0E               	movwf	i2printf@f+1,c
 21850  0054AA  EC69  F011         	call	i2_printf	;wreg free
 21851  0054AE  0012               	return		;funcret
 21852  0054B0                     __end_of_change_state_to_logs_11:
 21853                           	opt stack 0
 21854                           pclatu	equ	0xFFB
 21855                           pclath	equ	0xFFA
 21856                           tblptru	equ	0xFF8
 21857                           tblptrh	equ	0xFF7
 21858                           tblptrl	equ	0xFF6
 21859                           tablat	equ	0xFF5
 21860                           prodh	equ	0xFF4
 21861                           prodl	equ	0xFF3
 21862                           intcon	equ	0xFF2
 21863                           intcon2	equ	0xFF1
 21864                           intcon3	equ	0xFF0
 21865                           indf0	equ	0xFEF
 21866                           postinc0	equ	0xFEE
 21867                           fsr0h	equ	0xFEA
 21868                           fsr0l	equ	0xFE9
 21869                           wreg	equ	0xFE8
 21870                           postdec1	equ	0xFE5
 21871                           fsr1h	equ	0xFE2
 21872                           fsr1l	equ	0xFE1
 21873                           indf2	equ	0xFDF
 21874                           postinc2	equ	0xFDE
 21875                           postdec2	equ	0xFDD
 21876                           fsr2h	equ	0xFDA
 21877                           fsr2l	equ	0xFD9
 21878                           status	equ	0xFD8
 21879                           
 21880 ;; *************** function _dispLogs *****************
 21881 ;; Defined at:
 21882 ;;		line 470 in file "UI.c"
 21883 ;; Parameters:    Size  Location     Type
 21884 ;;  myLog           2   17[COMRAM] int 
 21885 ;; Auto vars:     Size  Location     Type
 21886 ;;		None
 21887 ;; Return value:  Size  Location     Type
 21888 ;;                  1    wreg      void 
 21889 ;; Registers used:
 21890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21891 ;; Tracked objects:
 21892 ;;		On entry : 0/0
 21893 ;;		On exit  : 0/0
 21894 ;;		Unchanged: 0/0
 21895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21899 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21900 ;;Total ram usage:        2 bytes
 21901 ;; Hardware stack levels used:    1
 21902 ;; Hardware stack levels required when called:    2
 21903 ;; This function calls:
 21904 ;;		_retrieveLog
 21905 ;; This function is called by:
 21906 ;;		_updateMenu
 21907 ;; This function uses a non-reentrant model
 21908 ;;
 21909                           
 21910                           	psect	text77
 21911  00562A                     __ptext77:
 21912                           	opt stack 0
 21913  00562A                     _dispLogs:
 21914                           	opt stack 20
 21915                           
 21916                           ;UI.c: 471: logstate = 1;
 21917                           
 21918                           ;incstack = 0
 21919  00562A  0E00               	movlw	0
 21920  00562C  0100               	movlb	0	; () banked
 21921  00562E  6FF9               	movwf	(_logstate+1)& (0+255),b
 21922  005630  0E01               	movlw	1
 21923  005632  6FF8               	movwf	_logstate& (0+255),b
 21924                           
 21925                           ; BSR set to: 0
 21926                           ;UI.c: 472: log = myLog;
 21927  005634  C012  F0F4         	movff	dispLogs@myLog,_log
 21928  005638  C013  F0F5         	movff	dispLogs@myLog+1,_log+1
 21929                           
 21930                           ; BSR set to: 0
 21931                           ;UI.c: 473: retrieveLog(myLog - 1);
 21932  00563C  0EFF               	movlw	255
 21933  00563E  2412               	addwf	dispLogs@myLog,w,c
 21934  005640  6E07               	movwf	retrieveLog@logNum,c
 21935  005642  0EFF               	movlw	255
 21936  005644  2013               	addwfc	dispLogs@myLog+1,w,c
 21937  005646  6E08               	movwf	retrieveLog@logNum+1,c
 21938  005648  EC43  F01F         	call	_retrieveLog	;wreg free
 21939  00564C  0012               	return		;funcret
 21940  00564E                     __end_of_dispLogs:
 21941                           	opt stack 0
 21942                           pclatu	equ	0xFFB
 21943                           pclath	equ	0xFFA
 21944                           tblptru	equ	0xFF8
 21945                           tblptrh	equ	0xFF7
 21946                           tblptrl	equ	0xFF6
 21947                           tablat	equ	0xFF5
 21948                           prodh	equ	0xFF4
 21949                           prodl	equ	0xFF3
 21950                           intcon	equ	0xFF2
 21951                           intcon2	equ	0xFF1
 21952                           intcon3	equ	0xFF0
 21953                           indf0	equ	0xFEF
 21954                           postinc0	equ	0xFEE
 21955                           fsr0h	equ	0xFEA
 21956                           fsr0l	equ	0xFE9
 21957                           wreg	equ	0xFE8
 21958                           postdec1	equ	0xFE5
 21959                           fsr1h	equ	0xFE2
 21960                           fsr1l	equ	0xFE1
 21961                           indf2	equ	0xFDF
 21962                           postinc2	equ	0xFDE
 21963                           postdec2	equ	0xFDD
 21964                           fsr2h	equ	0xFDA
 21965                           fsr2l	equ	0xFD9
 21966                           status	equ	0xFD8
 21967                           
 21968 ;; *************** function _retrieveLog *****************
 21969 ;; Defined at:
 21970 ;;		line 134 in file "EEPROM.c"
 21971 ;; Parameters:    Size  Location     Type
 21972 ;;  logNum          2    6[COMRAM] int 
 21973 ;; Auto vars:     Size  Location     Type
 21974 ;;  i               2   13[COMRAM] int 
 21975 ;;  addr            2   15[COMRAM] unsigned short 
 21976 ;;  byte3           1   12[COMRAM] unsigned char 
 21977 ;;  byte2           1   11[COMRAM] unsigned char 
 21978 ;;  byte1           1   10[COMRAM] unsigned char 
 21979 ;; Return value:  Size  Location     Type
 21980 ;;                  1    wreg      void 
 21981 ;; Registers used:
 21982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21983 ;; Tracked objects:
 21984 ;;		On entry : 0/0
 21985 ;;		On exit  : 0/0
 21986 ;;		Unchanged: 0/0
 21987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21988 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21989 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21990 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21991 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21992 ;;Total ram usage:       11 bytes
 21993 ;; Hardware stack levels used:    1
 21994 ;; Hardware stack levels required when called:    1
 21995 ;; This function calls:
 21996 ;;		i2_EEPROM_read
 21997 ;;		i2___wmul
 21998 ;; This function is called by:
 21999 ;;		_dispLogs
 22000 ;; This function uses a non-reentrant model
 22001 ;;
 22002                           
 22003                           	psect	text78
 22004  003E86                     __ptext78:
 22005                           	opt stack 0
 22006  003E86                     _retrieveLog:
 22007                           	opt stack 20
 22008                           
 22009                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 22010                           
 22011                           ;incstack = 0
 22012  003E86  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 22013  003E8A  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 22014  003E8E  0E00               	movlw	0
 22015  003E90  6E04               	movwf	i2___wmul@multiplicand+1,c
 22016  003E92  0E0B               	movlw	11
 22017  003E94  6E03               	movwf	i2___wmul@multiplicand,c
 22018  003E96  ECEF  F02A         	call	i2___wmul	;wreg free
 22019  003E9A  0E01               	movlw	1
 22020  003E9C  2401               	addwf	?i2___wmul,w,c
 22021  003E9E  6E10               	movwf	retrieveLog@addr,c
 22022  003EA0  0E00               	movlw	0
 22023  003EA2  2002               	addwfc	?i2___wmul+1,w,c
 22024  003EA4  6E11               	movwf	retrieveLog@addr+1,c
 22025                           
 22026                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 22027  003EA6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22028  003EAA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22029  003EAE  EC80  F02B         	call	i2_EEPROM_read	;wreg free
 22030  003EB2  6E0B               	movwf	retrieveLog@byte1,c
 22031                           
 22032                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 22033  003EB4  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22034  003EB8  0E80               	movlw	128
 22035  003EBA  1609               	andwf	??_retrieveLog,f,c
 22036  003EBC  5009               	movf	??_retrieveLog,w,c
 22037  003EBE  6E63               	movwf	_log_completion,c
 22038  003EC0  6A64               	clrf	_log_completion+1,c
 22039                           
 22040                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 22041  003EC2  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22042  003EC6  0E0F               	movlw	15
 22043  003EC8  1609               	andwf	??_retrieveLog,f,c
 22044  003ECA  5009               	movf	??_retrieveLog,w,c
 22045  003ECC  0101               	movlb	1	; () banked
 22046  003ECE  6F43               	movwf	_log_count_total& (0+255),b
 22047  003ED0  6B44               	clrf	(_log_count_total+1)& (0+255),b
 22048                           
 22049                           ; BSR set to: 1
 22050                           ;EEPROM.c: 146: addr++;
 22051  003ED2  4A10               	infsnz	retrieveLog@addr,f,c
 22052  003ED4  2A11               	incf	retrieveLog@addr+1,f,c
 22053                           
 22054                           ; BSR set to: 1
 22055                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 22056  003ED6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22057  003EDA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22058  003EDE  EC80  F02B         	call	i2_EEPROM_read	;wreg free
 22059  003EE2  6E0C               	movwf	retrieveLog@byte2,c
 22060                           
 22061                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 22062  003EE4  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 22063  003EE8  3A09               	swapf	??_retrieveLog,f,c
 22064  003EEA  0E0F               	movlw	15
 22065  003EEC  1609               	andwf	??_retrieveLog,f,c
 22066  003EEE  0E0F               	movlw	15
 22067  003EF0  1609               	andwf	??_retrieveLog,f,c
 22068  003EF2  5009               	movf	??_retrieveLog,w,c
 22069  003EF4  6E65               	movwf	_log_count_pop_no_tab,c
 22070  003EF6  6A66               	clrf	_log_count_pop_no_tab+1,c
 22071                           
 22072                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 22073  003EF8  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 22074  003EFC  0E0F               	movlw	15
 22075  003EFE  1609               	andwf	??_retrieveLog,f,c
 22076  003F00  5009               	movf	??_retrieveLog,w,c
 22077  003F02  6E67               	movwf	_log_count_pop_w_tab,c
 22078  003F04  6A68               	clrf	_log_count_pop_w_tab+1,c
 22079                           
 22080                           ;EEPROM.c: 152: addr++;
 22081  003F06  4A10               	infsnz	retrieveLog@addr,f,c
 22082  003F08  2A11               	incf	retrieveLog@addr+1,f,c
 22083                           
 22084                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 22085  003F0A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22086  003F0E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22087  003F12  EC80  F02B         	call	i2_EEPROM_read	;wreg free
 22088  003F16  6E0D               	movwf	retrieveLog@byte3,c
 22089                           
 22090                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 22091  003F18  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 22092  003F1C  3A09               	swapf	??_retrieveLog,f,c
 22093  003F1E  0E0F               	movlw	15
 22094  003F20  1609               	andwf	??_retrieveLog,f,c
 22095  003F22  0E0F               	movlw	15
 22096  003F24  1609               	andwf	??_retrieveLog,f,c
 22097  003F26  5009               	movf	??_retrieveLog,w,c
 22098  003F28  0101               	movlb	1	; () banked
 22099  003F2A  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 22100  003F2C  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 22101                           
 22102                           ; BSR set to: 1
 22103                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 22104  003F2E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 22105  003F32  0E0F               	movlw	15
 22106  003F34  1609               	andwf	??_retrieveLog,f,c
 22107  003F36  5009               	movf	??_retrieveLog,w,c
 22108  003F38  0101               	movlb	1	; () banked
 22109  003F3A  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 22110  003F3C  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 22111                           
 22112                           ; BSR set to: 1
 22113                           ;EEPROM.c: 156: addr++;
 22114  003F3E  4A10               	infsnz	retrieveLog@addr,f,c
 22115  003F40  2A11               	incf	retrieveLog@addr+1,f,c
 22116                           
 22117                           ; BSR set to: 1
 22118                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 22119  003F42  0E00               	movlw	0
 22120  003F44  6E0F               	movwf	retrieveLog@i+1,c
 22121  003F46  0E00               	movlw	0
 22122  003F48  6E0E               	movwf	retrieveLog@i,c
 22123  003F4A                     i2l7066:
 22124                           
 22125                           ; BSR set to: 1
 22126  003F4A  BE0F               	btfsc	retrieveLog@i+1,7,c
 22127  003F4C  D006               	goto	i2l7070
 22128  003F4E  500F               	movf	retrieveLog@i+1,w,c
 22129  003F50  E11E               	bnz	i2l7078
 22130  003F52  0E07               	movlw	7
 22131  003F54  5C0E               	subwf	retrieveLog@i,w,c
 22132  003F56  B0D8               	btfsc	status,0,c
 22133  003F58  D01A               	goto	i2l7078
 22134  003F5A                     i2l7070:
 22135                           
 22136                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 22137  003F5A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22138  003F5E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22139  003F62  EC80  F02B         	call	i2_EEPROM_read	;wreg free
 22140  003F66  6E09               	movwf	??_retrieveLog& (0+255),c
 22141  003F68  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 22142  003F6A  90D8               	bcf	status,0,c
 22143  003F6C  340E               	rlcf	retrieveLog@i,w,c
 22144  003F6E  6ED9               	movwf	fsr2l,c
 22145  003F70  340F               	rlcf	retrieveLog@i+1,w,c
 22146  003F72  6EDA               	movwf	fsr2h,c
 22147  003F74  0E00               	movlw	low _log_startTime
 22148  003F76  26D9               	addwf	fsr2l,f,c
 22149  003F78  0E01               	movlw	high _log_startTime
 22150  003F7A  22DA               	addwfc	fsr2h,f,c
 22151  003F7C  C009  FFDE         	movff	??_retrieveLog,postinc2
 22152  003F80  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 22153                           
 22154                           ;EEPROM.c: 161: addr++;
 22155  003F84  4A10               	infsnz	retrieveLog@addr,f,c
 22156  003F86  2A11               	incf	retrieveLog@addr+1,f,c
 22157  003F88  4A0E               	infsnz	retrieveLog@i,f,c
 22158  003F8A  2A0F               	incf	retrieveLog@i+1,f,c
 22159  003F8C  D7DE               	goto	i2l7066
 22160  003F8E                     i2l7078:
 22161                           
 22162                           ;EEPROM.c: 162: }
 22163                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 22164  003F8E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22165  003F92  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22166  003F96  EC80  F02B         	call	i2_EEPROM_read	;wreg free
 22167  003F9A  6E09               	movwf	??_retrieveLog& (0+255),c
 22168  003F9C  5009               	movf	??_retrieveLog,w,c
 22169  003F9E  0100               	movlb	0	; () banked
 22170  003FA0  6FF6               	movwf	_log_total_time& (0+255),b
 22171  003FA2  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 22172                           
 22173                           ; BSR set to: 0
 22174  003FA4  0012               	return		;funcret
 22175  003FA6                     __end_of_retrieveLog:
 22176                           	opt stack 0
 22177                           pclatu	equ	0xFFB
 22178                           pclath	equ	0xFFA
 22179                           tblptru	equ	0xFF8
 22180                           tblptrh	equ	0xFF7
 22181                           tblptrl	equ	0xFF6
 22182                           tablat	equ	0xFF5
 22183                           prodh	equ	0xFF4
 22184                           prodl	equ	0xFF3
 22185                           intcon	equ	0xFF2
 22186                           intcon2	equ	0xFF1
 22187                           intcon3	equ	0xFF0
 22188                           indf0	equ	0xFEF
 22189                           postinc0	equ	0xFEE
 22190                           fsr0h	equ	0xFEA
 22191                           fsr0l	equ	0xFE9
 22192                           wreg	equ	0xFE8
 22193                           postdec1	equ	0xFE5
 22194                           fsr1h	equ	0xFE2
 22195                           fsr1l	equ	0xFE1
 22196                           indf2	equ	0xFDF
 22197                           postinc2	equ	0xFDE
 22198                           postdec2	equ	0xFDD
 22199                           fsr2h	equ	0xFDA
 22200                           fsr2l	equ	0xFD9
 22201                           status	equ	0xFD8
 22202                           
 22203 ;; *************** function i2_EEPROM_read *****************
 22204 ;; Defined at:
 22205 ;;		line 68 in file "EEPROM.c"
 22206 ;; Parameters:    Size  Location     Type
 22207 ;;  address         2    0[COMRAM] unsigned short 
 22208 ;; Auto vars:     Size  Location     Type
 22209 ;;		None
 22210 ;; Return value:  Size  Location     Type
 22211 ;;                  1    wreg      unsigned char 
 22212 ;; Registers used:
 22213 ;;		wreg, status,2
 22214 ;; Tracked objects:
 22215 ;;		On entry : 0/0
 22216 ;;		On exit  : 0/0
 22217 ;;		Unchanged: 0/0
 22218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22219 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22222 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22223 ;;Total ram usage:        2 bytes
 22224 ;; Hardware stack levels used:    1
 22225 ;; This function calls:
 22226 ;;		Nothing
 22227 ;; This function is called by:
 22228 ;;		_retrieveLog
 22229 ;; This function uses a non-reentrant model
 22230 ;;
 22231                           
 22232                           	psect	text79
 22233  005700                     __ptext79:
 22234                           	opt stack 0
 22235  005700                     i2_EEPROM_read:
 22236                           	opt stack 20
 22237                           
 22238                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 22239                           
 22240                           ; BSR set to: 0
 22241                           ;incstack = 0
 22242  005700  5002               	movf	i2EEPROM_read@address+1,w,c
 22243  005702  6EAA               	movwf	4010,c	;volatile
 22244                           
 22245                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 22246  005704  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 22247                           
 22248                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 22249  005708  9EA6               	bcf	4006,7,c	;volatile
 22250                           
 22251                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 22252  00570A  9CA6               	bcf	4006,6,c	;volatile
 22253                           
 22254                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 22255  00570C  80A6               	bsf	4006,0,c	;volatile
 22256  00570E                     i2l1098:
 22257  00570E  B0A6               	btfsc	4006,0,c	;volatile
 22258  005710  D7FE               	goto	i2l1098
 22259                           
 22260                           ;EEPROM.c: 81: return EEDATA;
 22261  005712  50A8               	movf	4008,w,c	;volatile
 22262  005714  0012               	return	
 22263  005716                     __end_ofi2_EEPROM_read:
 22264                           	opt stack 0
 22265                           pclatu	equ	0xFFB
 22266                           pclath	equ	0xFFA
 22267                           tblptru	equ	0xFF8
 22268                           tblptrh	equ	0xFF7
 22269                           tblptrl	equ	0xFF6
 22270                           tablat	equ	0xFF5
 22271                           prodh	equ	0xFF4
 22272                           prodl	equ	0xFF3
 22273                           intcon	equ	0xFF2
 22274                           intcon2	equ	0xFF1
 22275                           intcon3	equ	0xFF0
 22276                           indf0	equ	0xFEF
 22277                           postinc0	equ	0xFEE
 22278                           fsr0h	equ	0xFEA
 22279                           fsr0l	equ	0xFE9
 22280                           wreg	equ	0xFE8
 22281                           postdec1	equ	0xFE5
 22282                           fsr1h	equ	0xFE2
 22283                           fsr1l	equ	0xFE1
 22284                           indf2	equ	0xFDF
 22285                           postinc2	equ	0xFDE
 22286                           postdec2	equ	0xFDD
 22287                           fsr2h	equ	0xFDA
 22288                           fsr2l	equ	0xFD9
 22289                           status	equ	0xFD8
 22290                           
 22291 ;; *************** function _updateArmState *****************
 22292 ;; Defined at:
 22293 ;;		line 608 in file "sort.c"
 22294 ;; Parameters:    Size  Location     Type
 22295 ;;		None
 22296 ;; Auto vars:     Size  Location     Type
 22297 ;;		None
 22298 ;; Return value:  Size  Location     Type
 22299 ;;                  1    wreg      void 
 22300 ;; Registers used:
 22301 ;;		wreg, status,2, status,0
 22302 ;; Tracked objects:
 22303 ;;		On entry : 0/0
 22304 ;;		On exit  : 0/0
 22305 ;;		Unchanged: 0/0
 22306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22309 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22310 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22311 ;;Total ram usage:        2 bytes
 22312 ;; Hardware stack levels used:    1
 22313 ;; This function calls:
 22314 ;;		Nothing
 22315 ;; This function is called by:
 22316 ;;		_handler
 22317 ;; This function uses a non-reentrant model
 22318 ;;
 22319                           
 22320                           	psect	text80
 22321  005156                     __ptext80:
 22322                           	opt stack 0
 22323  005156                     _updateArmState:
 22324                           	opt stack 23
 22325                           
 22326                           ;sort.c: 615: if(!was_low_2){
 22327                           
 22328                           ;incstack = 0
 22329  005156  5079               	movf	_was_low_2,w,c	;volatile
 22330  005158  107A               	iorwf	_was_low_2+1,w,c	;volatile
 22331  00515A  B4D8               	btfsc	status,2,c
 22332  00515C  D007               	goto	i2l9784
 22333  00515E  D016               	goto	i2l919
 22334  005160                     i2l9778:
 22335                           
 22336                           ;sort.c: 620: PR2 = 0x20;
 22337  005160  0E20               	movlw	32
 22338  005162  6ECB               	movwf	4043,c	;volatile
 22339                           
 22340                           ;sort.c: 621: break;
 22341  005164  0012               	return	
 22342  005166                     i2l9780:
 22343                           
 22344                           ;sort.c: 624: PR2 = 0x40;
 22345  005166  0E40               	movlw	64
 22346  005168  6ECB               	movwf	4043,c	;volatile
 22347                           
 22348                           ;sort.c: 626: }
 22349                           
 22350                           ;sort.c: 625: break;
 22351  00516A  0012               	return	
 22352  00516C                     i2l9784:
 22353  00516C  C0EE  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 22354  005170  C0EF  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 22355                           
 22356                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22357                           ; Switch size 1, requested type "space"
 22358                           ; Number of cases is 1, Range of values is 0 to 0
 22359                           ; switch strategies available:
 22360                           ; Name         Instructions Cycles
 22361                           ; simple_byte            4     3 (average)
 22362                           ;	Chosen strategy is simple_byte
 22363  005174  5002               	movf	??_updateArmState+1,w,c
 22364  005176  0A00               	xorlw	0	; case 0
 22365  005178  A4D8               	btfss	status,2,c
 22366  00517A  0012               	return	
 22367                           
 22368                           ; Switch size 1, requested type "space"
 22369                           ; Number of cases is 2, Range of values is 0 to 1
 22370                           ; switch strategies available:
 22371                           ; Name         Instructions Cycles
 22372                           ; simple_byte            7     4 (average)
 22373                           ;	Chosen strategy is simple_byte
 22374  00517C  5001               	movf	??_updateArmState,w,c
 22375  00517E  0A00               	xorlw	0	; case 0
 22376  005180  B4D8               	btfsc	status,2,c
 22377  005182  D7EE               	goto	i2l9778
 22378  005184  0A01               	xorlw	1	; case 1
 22379  005186  A4D8               	btfss	status,2,c
 22380                           
 22381                           ;sort.c: 627: }
 22382  005188  0012               	return	
 22383  00518A  D7ED               	goto	i2l9780
 22384  00518C                     i2l919:
 22385                           
 22386                           ;sort.c: 628: else{
 22387                           ;sort.c: 630: PR2 = 0xFF;
 22388  00518C  68CB               	setf	4043,c	;volatile
 22389  00518E  0012               	return	
 22390  005190                     __end_of_updateArmState:
 22391                           	opt stack 0
 22392                           pclatu	equ	0xFFB
 22393                           pclath	equ	0xFFA
 22394                           tblptru	equ	0xFF8
 22395                           tblptrh	equ	0xFF7
 22396                           tblptrl	equ	0xFF6
 22397                           tablat	equ	0xFF5
 22398                           prodh	equ	0xFF4
 22399                           prodl	equ	0xFF3
 22400                           intcon	equ	0xFF2
 22401                           intcon2	equ	0xFF1
 22402                           intcon3	equ	0xFF0
 22403                           indf0	equ	0xFEF
 22404                           postinc0	equ	0xFEE
 22405                           fsr0h	equ	0xFEA
 22406                           fsr0l	equ	0xFE9
 22407                           wreg	equ	0xFE8
 22408                           postdec1	equ	0xFE5
 22409                           fsr1h	equ	0xFE2
 22410                           fsr1l	equ	0xFE1
 22411                           indf2	equ	0xFDF
 22412                           postinc2	equ	0xFDE
 22413                           postdec2	equ	0xFDD
 22414                           fsr2h	equ	0xFDA
 22415                           fsr2l	equ	0xFD9
 22416                           status	equ	0xFD8
 22417                           
 22418 ;; *************** function _printSortTimer *****************
 22419 ;; Defined at:
 22420 ;;		line 458 in file "sort.c"
 22421 ;; Parameters:    Size  Location     Type
 22422 ;;		None
 22423 ;; Auto vars:     Size  Location     Type
 22424 ;;  i               2   70[COMRAM] int 
 22425 ;;  i               2   72[COMRAM] int 
 22426 ;;  curTime        14   44[COMRAM] int [7]
 22427 ;;  timeDiff        2   68[COMRAM] unsigned int 
 22428 ;;  sec             2   64[COMRAM] int 
 22429 ;;  min             2   62[COMRAM] int 
 22430 ;;  cur_sec         2   60[COMRAM] unsigned int 
 22431 ;;  start_sec       2   58[COMRAM] unsigned int 
 22432 ;; Return value:  Size  Location     Type
 22433 ;;                  1    wreg      void 
 22434 ;; Registers used:
 22435 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22436 ;; Tracked objects:
 22437 ;;		On entry : 0/0
 22438 ;;		On exit  : 0/0
 22439 ;;		Unchanged: 0/0
 22440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22442 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22443 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22444 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22445 ;;Total ram usage:       33 bytes
 22446 ;; Hardware stack levels used:    1
 22447 ;; Hardware stack levels required when called:    3
 22448 ;; This function calls:
 22449 ;;		i2___lwdiv
 22450 ;;		i2___lwmod
 22451 ;;		i2___wmul
 22452 ;;		i2_delay_ms
 22453 ;;		i2_getRTC
 22454 ;;		i2_lcdInst
 22455 ;;		i2_printf
 22456 ;; This function is called by:
 22457 ;;		_handler
 22458 ;; This function uses a non-reentrant model
 22459 ;;
 22460                           
 22461                           	psect	text81
 22462  002EC8                     __ptext81:
 22463                           	opt stack 0
 22464  002EC8                     _printSortTimer:
 22465                           	opt stack 20
 22466                           
 22467                           ;sort.c: 459: getRTC();
 22468                           
 22469                           ;incstack = 0
 22470  002EC8  EC08  F026         	call	i2_getRTC	;wreg free
 22471                           
 22472                           ;sort.c: 460: int curTime[7];
 22473                           ;sort.c: 461: for(int i = 0; i < 7; i++){
 22474  002ECC  0E00               	movlw	0
 22475  002ECE  6E4A               	movwf	printSortTimer@i+1,c
 22476  002ED0  0E00               	movlw	0
 22477  002ED2  6E49               	movwf	printSortTimer@i,c
 22478  002ED4                     i2l9620:
 22479  002ED4  BE4A               	btfsc	printSortTimer@i+1,7,c
 22480  002ED6  D006               	goto	i2l9624
 22481  002ED8  504A               	movf	printSortTimer@i+1,w,c
 22482  002EDA  E131               	bnz	i2l9630
 22483  002EDC  0E07               	movlw	7
 22484  002EDE  5C49               	subwf	printSortTimer@i,w,c
 22485  002EE0  B0D8               	btfsc	status,0,c
 22486  002EE2  D02D               	goto	i2l9630
 22487  002EE4                     i2l9624:
 22488                           
 22489                           ;sort.c: 462: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 22490  002EE4  0E1C               	movlw	low _time
 22491  002EE6  2449               	addwf	printSortTimer@i,w,c
 22492  002EE8  6ED9               	movwf	fsr2l,c
 22493  002EEA  0E01               	movlw	high _time
 22494  002EEC  204A               	addwfc	printSortTimer@i+1,w,c
 22495  002EEE  6EDA               	movwf	fsr2h,c
 22496  002EF0  50DF               	movf	indf2,w,c
 22497  002EF2  6E2A               	movwf	??_printSortTimer& (0+255),c
 22498  002EF4  3A2A               	swapf	??_printSortTimer,f,c
 22499  002EF6  0E0F               	movlw	15
 22500  002EF8  162A               	andwf	??_printSortTimer,f,c
 22501  002EFA  0E0F               	movlw	15
 22502  002EFC  162A               	andwf	??_printSortTimer,f,c
 22503  002EFE  502A               	movf	??_printSortTimer,w,c
 22504  002F00  0D0A               	mullw	10
 22505  002F02  0E1C               	movlw	low _time
 22506  002F04  2449               	addwf	printSortTimer@i,w,c
 22507  002F06  6ED9               	movwf	fsr2l,c
 22508  002F08  0E01               	movlw	high _time
 22509  002F0A  204A               	addwfc	printSortTimer@i+1,w,c
 22510  002F0C  6EDA               	movwf	fsr2h,c
 22511  002F0E  50DF               	movf	indf2,w,c
 22512  002F10  0B0F               	andlw	15
 22513  002F12  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22514  002F14  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 22515  002F16  50F3               	movf	prodl,w,c
 22516  002F18  262B               	addwf	??_printSortTimer+1,f,c
 22517  002F1A  50F4               	movf	prodh,w,c
 22518  002F1C  222C               	addwfc	??_printSortTimer+2,f,c
 22519  002F1E  90D8               	bcf	status,0,c
 22520  002F20  3449               	rlcf	printSortTimer@i,w,c
 22521  002F22  6ED9               	movwf	fsr2l,c
 22522  002F24  344A               	rlcf	printSortTimer@i+1,w,c
 22523  002F26  6EDA               	movwf	fsr2h,c
 22524  002F28  0E2D               	movlw	low printSortTimer@curTime
 22525  002F2A  26D9               	addwf	fsr2l,f,c
 22526  002F2C  0E00               	movlw	high printSortTimer@curTime
 22527  002F2E  22DA               	addwfc	fsr2h,f,c
 22528  002F30  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 22529  002F34  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 22530  002F38  4A49               	infsnz	printSortTimer@i,f,c
 22531  002F3A  2A4A               	incf	printSortTimer@i+1,f,c
 22532  002F3C  D7CB               	goto	i2l9620
 22533  002F3E                     i2l9630:
 22534                           
 22535                           ;sort.c: 463: }
 22536                           ;sort.c: 464: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 22537  002F3E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 22538  002F42  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 22539  002F46  0E00               	movlw	0
 22540  002F48  6E04               	movwf	i2___wmul@multiplicand+1,c
 22541  002F4A  0E3C               	movlw	60
 22542  002F4C  6E03               	movwf	i2___wmul@multiplicand,c
 22543  002F4E  ECEF  F02A         	call	i2___wmul	;wreg free
 22544  002F52  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22545  002F56  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22546  002F5A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 22547  002F5E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 22548  002F62  0E0E               	movlw	14
 22549  002F64  6E04               	movwf	i2___wmul@multiplicand+1,c
 22550  002F66  0E10               	movlw	16
 22551  002F68  6E03               	movwf	i2___wmul@multiplicand,c
 22552  002F6A  ECEF  F02A         	call	i2___wmul	;wreg free
 22553  002F6E  5001               	movf	?i2___wmul,w,c
 22554  002F70  262A               	addwf	??_printSortTimer,f,c
 22555  002F72  5002               	movf	?i2___wmul+1,w,c
 22556  002F74  222B               	addwfc	??_printSortTimer+1,f,c
 22557  002F76  0101               	movlb	1	; () banked
 22558  002F78  510E               	movf	_startTime& (0+255),w,b
 22559  002F7A  242A               	addwf	??_printSortTimer,w,c
 22560  002F7C  6E3B               	movwf	printSortTimer@start_sec,c
 22561  002F7E  0101               	movlb	1	; () banked
 22562  002F80  510F               	movf	(_startTime+1)& (0+255),w,b
 22563  002F82  202B               	addwfc	??_printSortTimer+1,w,c
 22564  002F84  6E3C               	movwf	printSortTimer@start_sec+1,c
 22565                           
 22566                           ;sort.c: 465: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 22567  002F86  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 22568  002F8A  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 22569  002F8E  0E00               	movlw	0
 22570  002F90  6E04               	movwf	i2___wmul@multiplicand+1,c
 22571  002F92  0E3C               	movlw	60
 22572  002F94  6E03               	movwf	i2___wmul@multiplicand,c
 22573  002F96  ECEF  F02A         	call	i2___wmul	;wreg free
 22574  002F9A  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22575  002F9E  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22576  002FA2  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 22577  002FA6  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 22578  002FAA  0E0E               	movlw	14
 22579  002FAC  6E04               	movwf	i2___wmul@multiplicand+1,c
 22580  002FAE  0E10               	movlw	16
 22581  002FB0  6E03               	movwf	i2___wmul@multiplicand,c
 22582  002FB2  ECEF  F02A         	call	i2___wmul	;wreg free
 22583  002FB6  5001               	movf	?i2___wmul,w,c
 22584  002FB8  262A               	addwf	??_printSortTimer,f,c
 22585  002FBA  5002               	movf	?i2___wmul+1,w,c
 22586  002FBC  222B               	addwfc	??_printSortTimer+1,f,c
 22587  002FBE  502D               	movf	printSortTimer@curTime,w,c
 22588  002FC0  242A               	addwf	??_printSortTimer,w,c
 22589  002FC2  6E3D               	movwf	printSortTimer@cur_sec,c
 22590  002FC4  502E               	movf	printSortTimer@curTime+1,w,c
 22591  002FC6  202B               	addwfc	??_printSortTimer+1,w,c
 22592  002FC8  6E3E               	movwf	printSortTimer@cur_sec+1,c
 22593                           
 22594                           ;sort.c: 466: unsigned int timeDiff = cur_sec - start_sec;
 22595  002FCA  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 22596  002FCE  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 22597  002FD2  1E2A               	comf	??_printSortTimer,f,c
 22598  002FD4  1E2B               	comf	??_printSortTimer+1,f,c
 22599  002FD6  4A2A               	infsnz	??_printSortTimer,f,c
 22600  002FD8  2A2B               	incf	??_printSortTimer+1,f,c
 22601  002FDA  503D               	movf	printSortTimer@cur_sec,w,c
 22602  002FDC  242A               	addwf	??_printSortTimer,w,c
 22603  002FDE  6E45               	movwf	printSortTimer@timeDiff,c
 22604  002FE0  503E               	movf	printSortTimer@cur_sec+1,w,c
 22605  002FE2  202B               	addwfc	??_printSortTimer+1,w,c
 22606  002FE4  6E46               	movwf	printSortTimer@timeDiff+1,c
 22607                           
 22608                           ;sort.c: 468: total_time = timeDiff;
 22609  002FE6  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 22610  002FEA  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 22611                           
 22612                           ;sort.c: 470: if(f_most_recent_sort_time){
 22613  002FEE  0101               	movlb	1	; () banked
 22614  002FF0  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 22615  002FF2  0101               	movlb	1	; () banked
 22616  002FF4  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 22617  002FF6  B4D8               	btfsc	status,2,c
 22618  002FF8  D009               	goto	i2l9642
 22619                           
 22620                           ; BSR set to: 1
 22621                           ;sort.c: 471: most_recent_sort_time = total_time;
 22622  002FFA  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 22623  002FFE  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 22624                           
 22625                           ; BSR set to: 1
 22626                           ;sort.c: 472: f_most_recent_sort_time = 0;
 22627  003002  0E00               	movlw	0
 22628  003004  0101               	movlb	1	; () banked
 22629  003006  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 22630  003008  0E00               	movlw	0
 22631  00300A  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 22632  00300C                     i2l9642:
 22633                           
 22634                           ; BSR set to: 1
 22635                           ;sort.c: 473: }
 22636                           ;sort.c: 475: if(total_time - most_recent_sort_time == 20){
 22637  00300C  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22638  003010  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22639  003014  1E2A               	comf	??_printSortTimer,f,c
 22640  003016  1E2B               	comf	??_printSortTimer+1,f,c
 22641  003018  4A2A               	infsnz	??_printSortTimer,f,c
 22642  00301A  2A2B               	incf	??_printSortTimer+1,f,c
 22643  00301C  0100               	movlb	0	; () banked
 22644  00301E  51FA               	movf	_total_time& (0+255),w,b
 22645  003020  262A               	addwf	??_printSortTimer,f,c
 22646  003022  0100               	movlb	0	; () banked
 22647  003024  51FB               	movf	(_total_time+1)& (0+255),w,b
 22648  003026  222B               	addwfc	??_printSortTimer+1,f,c
 22649  003028  0E14               	movlw	20
 22650  00302A  182A               	xorwf	??_printSortTimer,w,c
 22651  00302C  102B               	iorwf	??_printSortTimer+1,w,c
 22652  00302E  A4D8               	btfss	status,2,c
 22653  003030  D033               	goto	i2l9662
 22654                           
 22655                           ; BSR set to: 0
 22656                           ;sort.c: 476: LATBbits.LATB2 = 0;
 22657  003032  948A               	bcf	3978,2,c	;volatile
 22658                           
 22659                           ; BSR set to: 0
 22660                           ;sort.c: 477: _delay((unsigned long)((2000)*(32000000/4000.0)));
 22661  003034  0E52               	movlw	82
 22662  003036  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22663  003038  0E2B               	movlw	43
 22664  00303A  6E2A               	movwf	??_printSortTimer& (0+255),c
 22665  00303C  0E00               	movlw	0
 22666  00303E                     i2u1089_47:
 22667  00303E  2EE8               	decfsz	wreg,f,c
 22668  003040  D7FE               	bra	i2u1089_47
 22669  003042  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 22670  003044  D7FC               	bra	i2u1089_47
 22671  003046  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 22672  003048  D7FA               	bra	i2u1089_47
 22673  00304A  D000               	nop2	
 22674                           
 22675                           ;sort.c: 478: for(int i=0; i<46; i++){
 22676  00304C  0E00               	movlw	0
 22677  00304E  6E48               	movwf	printSortTimer@i_1221+1,c
 22678  003050  0E00               	movlw	0
 22679  003052  6E47               	movwf	printSortTimer@i_1221,c
 22680  003054  BE48               	btfsc	printSortTimer@i_1221+1,7,c
 22681  003056  D006               	goto	i2l9654
 22682  003058  5048               	movf	printSortTimer@i_1221+1,w,c
 22683  00305A  E11D               	bnz	i2l871
 22684  00305C  0E2E               	movlw	46
 22685  00305E  5C47               	subwf	printSortTimer@i_1221,w,c
 22686  003060  B0D8               	btfsc	status,0,c
 22687  003062  D019               	goto	i2l871
 22688  003064                     i2l9654:
 22689                           
 22690                           ;sort.c: 479: LATBbits.LATB2 = !LATBbits.LATB2;
 22691  003064  B48A               	btfsc	3978,2,c	;volatile
 22692  003066  D003               	goto	i2u894_40
 22693  003068  6A2A               	clrf	??_printSortTimer& (0+255),c
 22694  00306A  2A2A               	incf	??_printSortTimer& (0+255),f,c
 22695  00306C  D001               	goto	i2u895_48
 22696  00306E                     i2u894_40:
 22697  00306E  6A2A               	clrf	??_printSortTimer& (0+255),c
 22698  003070                     i2u895_48:
 22699  003070  462A               	rlncf	??_printSortTimer,f,c
 22700  003072  462A               	rlncf	??_printSortTimer,f,c
 22701  003074  508A               	movf	3978,w,c	;volatile
 22702  003076  182A               	xorwf	??_printSortTimer,w,c
 22703  003078  0BFB               	andlw	-5
 22704  00307A  182A               	xorwf	??_printSortTimer,w,c
 22705  00307C  6E8A               	movwf	3978,c	;volatile
 22706                           
 22707                           ;sort.c: 480: delay_ms(45-i);
 22708  00307E  5047               	movf	printSortTimer@i_1221,w,c
 22709  003080  0800               	sublw	0
 22710  003082  0F2D               	addlw	45
 22711  003084  EC66  F02B         	call	i2_delay_ms
 22712  003088  4A47               	infsnz	printSortTimer@i_1221,f,c
 22713  00308A  2A48               	incf	printSortTimer@i_1221+1,f,c
 22714  00308C  BE48               	btfsc	printSortTimer@i_1221+1,7,c
 22715  00308E  D7EA               	goto	i2l9654
 22716  003090  5048               	movf	printSortTimer@i_1221+1,w,c
 22717  003092  E101               	bnz	i2u896_40
 22718  003094  D7E3               	goto	L20
 22719  003096                     i2u896_40:
 22720  003096                     i2l871:
 22721                           
 22722                           ;sort.c: 481: }
 22723                           ;sort.c: 482: LATBbits.LATB2 = 1;
 22724  003096  848A               	bsf	3978,2,c	;volatile
 22725  003098                     i2l9662:
 22726                           
 22727                           ;sort.c: 483: }
 22728                           ;sort.c: 485: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 22729  003098  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22730  00309C  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22731  0030A0  1E2A               	comf	??_printSortTimer,f,c
 22732  0030A2  1E2B               	comf	??_printSortTimer+1,f,c
 22733  0030A4  4A2A               	infsnz	??_printSortTimer,f,c
 22734  0030A6  2A2B               	incf	??_printSortTimer+1,f,c
 22735  0030A8  0100               	movlb	0	; () banked
 22736  0030AA  51FA               	movf	_total_time& (0+255),w,b
 22737  0030AC  262A               	addwf	??_printSortTimer,f,c
 22738  0030AE  0100               	movlb	0	; () banked
 22739  0030B0  51FB               	movf	(_total_time+1)& (0+255),w,b
 22740  0030B2  222B               	addwfc	??_printSortTimer+1,f,c
 22741  0030B4  0E2A               	movlw	42
 22742  0030B6  182A               	xorwf	??_printSortTimer,w,c
 22743  0030B8  102B               	iorwf	??_printSortTimer+1,w,c
 22744  0030BA  B4D8               	btfsc	status,2,c
 22745  0030BC  D007               	goto	i2l9666
 22746                           
 22747                           ; BSR set to: 0
 22748  0030BE  0EB3               	movlw	179
 22749  0030C0  0100               	movlb	0	; () banked
 22750  0030C2  19FA               	xorwf	_total_time& (0+255),w,b
 22751  0030C4  0100               	movlb	0	; () banked
 22752  0030C6  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 22753  0030C8  A4D8               	btfss	status,2,c
 22754  0030CA  D003               	goto	i2l9668
 22755  0030CC                     i2l9666:
 22756                           
 22757                           ; BSR set to: 0
 22758                           ;sort.c: 486: machine_state = DoneSorting_state;
 22759  0030CC  0E02               	movlw	2
 22760  0030CE  0100               	movlb	0	; () banked
 22761  0030D0  6FFC               	movwf	_machine_state& (0+255),b
 22762  0030D2                     i2l9668:
 22763                           
 22764                           ; BSR set to: 0
 22765                           ;sort.c: 488: }
 22766                           ;sort.c: 490: int min = (timeDiff % 3600) / 60;
 22767  0030D2  0E0E               	movlw	14
 22768  0030D4  6E04               	movwf	i2___lwmod@divisor+1,c
 22769  0030D6  0E10               	movlw	16
 22770  0030D8  6E03               	movwf	i2___lwmod@divisor,c
 22771  0030DA  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22772  0030DE  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22773  0030E2  EC8A  F028         	call	i2___lwmod	;wreg free
 22774  0030E6  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 22775  0030EA  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 22776  0030EE  0E00               	movlw	0
 22777  0030F0  6E09               	movwf	i2___lwdiv@divisor+1,c
 22778  0030F2  0E3C               	movlw	60
 22779  0030F4  6E08               	movwf	i2___lwdiv@divisor,c
 22780  0030F6  ECCB  F027         	call	i2___lwdiv	;wreg free
 22781  0030FA  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 22782  0030FE  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 22783                           
 22784                           ;sort.c: 491: int sec = (timeDiff % 3600) % 60;
 22785  003102  0E0E               	movlw	14
 22786  003104  6E04               	movwf	i2___lwmod@divisor+1,c
 22787  003106  0E10               	movlw	16
 22788  003108  6E03               	movwf	i2___lwmod@divisor,c
 22789  00310A  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22790  00310E  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22791  003112  EC8A  F028         	call	i2___lwmod	;wreg free
 22792  003116  C001  F043         	movff	?i2___lwmod,_printSortTimer$2580
 22793  00311A  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2580+1
 22794                           
 22795                           ;sort.c: 491: int sec = (timeDiff % 3600) % 60;
 22796  00311E  C043  F001         	movff	_printSortTimer$2580,i2___lwmod@dividend
 22797  003122  C044  F002         	movff	_printSortTimer$2580+1,i2___lwmod@dividend+1
 22798  003126  0E00               	movlw	0
 22799  003128  6E04               	movwf	i2___lwmod@divisor+1,c
 22800  00312A  0E3C               	movlw	60
 22801  00312C  6E03               	movwf	i2___lwmod@divisor,c
 22802  00312E  EC8A  F028         	call	i2___lwmod	;wreg free
 22803  003132  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 22804  003136  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 22805                           
 22806                           ;sort.c: 493: lcdInst(0b10000000);;
 22807  00313A  0E80               	movlw	128
 22808  00313C  ECB4  F02B         	call	i2_lcdInst
 22809                           
 22810                           ;sort.c: 494: printf("SORTING...");
 22811  003140  0E7B               	movlw	low STR_64
 22812  003142  6E0D               	movwf	i2printf@f,c
 22813  003144  0EFF               	movlw	high STR_64
 22814  003146  6E0E               	movwf	i2printf@f+1,c
 22815  003148  EC69  F011         	call	i2_printf	;wreg free
 22816                           
 22817                           ;sort.c: 495: lcdInst(0b11000000);;
 22818  00314C  0EC0               	movlw	192
 22819  00314E  ECB4  F02B         	call	i2_lcdInst
 22820                           
 22821                           ;sort.c: 496: printf("TIME %d:%02d", min, sec);
 22822  003152  0E4C               	movlw	low STR_65
 22823  003154  6E0D               	movwf	i2printf@f,c
 22824  003156  0EFF               	movlw	high STR_65
 22825  003158  6E0E               	movwf	i2printf@f+1,c
 22826  00315A  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 22827  00315E  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 22828  003162  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 22829  003166  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 22830  00316A  EC69  F011         	call	i2_printf	;wreg free
 22831  00316E  0012               	return		;funcret
 22832  003170                     __end_of_printSortTimer:
 22833                           	opt stack 0
 22834                           pclatu	equ	0xFFB
 22835                           pclath	equ	0xFFA
 22836                           tblptru	equ	0xFF8
 22837                           tblptrh	equ	0xFF7
 22838                           tblptrl	equ	0xFF6
 22839                           tablat	equ	0xFF5
 22840                           prodh	equ	0xFF4
 22841                           prodl	equ	0xFF3
 22842                           intcon	equ	0xFF2
 22843                           intcon2	equ	0xFF1
 22844                           intcon3	equ	0xFF0
 22845                           indf0	equ	0xFEF
 22846                           postinc0	equ	0xFEE
 22847                           fsr0h	equ	0xFEA
 22848                           fsr0l	equ	0xFE9
 22849                           wreg	equ	0xFE8
 22850                           postdec1	equ	0xFE5
 22851                           fsr1h	equ	0xFE2
 22852                           fsr1l	equ	0xFE1
 22853                           indf2	equ	0xFDF
 22854                           postinc2	equ	0xFDE
 22855                           postdec2	equ	0xFDD
 22856                           fsr2h	equ	0xFDA
 22857                           fsr2l	equ	0xFD9
 22858                           status	equ	0xFD8
 22859                           
 22860 ;; *************** function i2_printf *****************
 22861 ;; Defined at:
 22862 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 22863 ;; Parameters:    Size  Location     Type
 22864 ;;  f               2   12[COMRAM] PTR const unsigned char 
 22865 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 22866 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 22867 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 22868 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 22869 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 22870 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 22871 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 22872 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 22873 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 22874 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 22875 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 22876 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 22877 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 22878 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 22879 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 22880 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 22881 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 22882 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 22883 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 22884 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 22885 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 22886 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 22887 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 22888 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 22889 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 22890 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 22891 ;; Auto vars:     Size  Location     Type
 22892 ;;  printf          4    0        struct .
 22893 ;;  printf          2   39[COMRAM] int 
 22894 ;;  printf          2   35[COMRAM] unsigned int 
 22895 ;;  printf          2   33[COMRAM] unsigned int 
 22896 ;;  printf          2   31[COMRAM] PTR void [1]
 22897 ;;		 -> ?i2_printf(2), ?_printf(2), 
 22898 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 22899 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 22900 ;;  printf          1   38[COMRAM] char 
 22901 ;;  printf          1   37[COMRAM] unsigned char 
 22902 ;;  printf          1   28[COMRAM] char 
 22903 ;; Return value:  Size  Location     Type
 22904 ;;                  2   12[COMRAM] int 
 22905 ;; Registers used:
 22906 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22907 ;; Tracked objects:
 22908 ;;		On entry : 0/0
 22909 ;;		On exit  : 0/0
 22910 ;;		Unchanged: 0/0
 22911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22912 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22913 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22914 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22915 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22916 ;;Total ram usage:       29 bytes
 22917 ;; Hardware stack levels used:    1
 22918 ;; Hardware stack levels required when called:    2
 22919 ;; This function calls:
 22920 ;;		i2___lwdiv
 22921 ;;		i2___lwmod
 22922 ;;		i2___wmul
 22923 ;;		i2_isdigit
 22924 ;;		i2_putch
 22925 ;; This function is called by:
 22926 ;;		_change_state_to_menu_11
 22927 ;;		_change_state_to_menu_23
 22928 ;;		_change_state_to_logs_11
 22929 ;;		_change_state_to_logs_12
 22930 ;;		_change_state_to_logs_22
 22931 ;;		_change_state_to_logs_23
 22932 ;;		_change_state_to_logs_33
 22933 ;;		_change_state_to_logs_34
 22934 ;;		_printSortTimer
 22935 ;;		i2_change_state_to_menu_start
 22936 ;;		i2_change_state_to_menu_12
 22937 ;;		i2_change_state_to_menu_22
 22938 ;;		i2_printRTC
 22939 ;; This function uses a non-reentrant model
 22940 ;;
 22941                           
 22942                           	psect	text82
 22943  0022D2                     __ptext82:
 22944                           	opt stack 0
 22945  0022D2                     i2_printf:
 22946                           	opt stack 20
 22947                           
 22948                           ;doprnt.c: 466: va_list ap;
 22949                           ;doprnt.c: 499: signed char c;
 22950                           ;doprnt.c: 501: int width;
 22951                           ;doprnt.c: 506: signed char prec;
 22952                           ;doprnt.c: 508: unsigned char flag;
 22953                           ;doprnt.c: 523: union {
 22954                           ;doprnt.c: 524: unsigned long vd;
 22955                           ;doprnt.c: 525: double integ;
 22956                           ;doprnt.c: 526: } tmpval;
 22957                           ;doprnt.c: 528: unsigned int val;
 22958                           ;doprnt.c: 529: unsigned len;
 22959                           ;doprnt.c: 530: const char * cp;
 22960                           ;doprnt.c: 533: *ap = __va_start();
 22961                           
 22962                           ;incstack = 0
 22963  0022D2  0E0F               	movlw	low (?i2_printf+2)
 22964  0022D4  6E20               	movwf	i2printf@ap,c
 22965  0022D6  0E00               	movlw	high (?i2_printf+2)
 22966  0022D8  6E21               	movwf	i2printf@ap+1,c
 22967                           
 22968                           ;doprnt.c: 536: while(c = *f++) {
 22969  0022DA  D1A4               	goto	i2l6890
 22970  0022DC                     i2l6760:
 22971                           
 22972                           ;doprnt.c: 538: if(c != '%')
 22973  0022DC  0E25               	movlw	37
 22974  0022DE  1827               	xorwf	i2printf@c,w,c
 22975  0022E0  B4D8               	btfsc	status,2,c
 22976  0022E2  D004               	goto	i2l6764
 22977                           
 22978                           ;doprnt.c: 540: {
 22979                           ;doprnt.c: 541: (putch(c) );
 22980  0022E4  5027               	movf	i2printf@c,w,c
 22981  0022E6  ECAE  F02B         	call	i2_putch
 22982                           
 22983                           ;doprnt.c: 542: continue;
 22984  0022EA  D19C               	goto	i2l6890
 22985  0022EC                     i2l6764:
 22986                           
 22987                           ;doprnt.c: 543: }
 22988                           ;doprnt.c: 546: width = 0;
 22989  0022EC  0E00               	movlw	0
 22990  0022EE  6E29               	movwf	i2printf@width+1,c
 22991  0022F0  0E00               	movlw	0
 22992  0022F2  6E28               	movwf	i2printf@width,c
 22993                           
 22994                           ;doprnt.c: 548: flag = 0;
 22995  0022F4  0E00               	movlw	0
 22996  0022F6  6E26               	movwf	i2printf@flag,c
 22997                           
 22998                           ;doprnt.c: 551: switch(*f) {
 22999                           
 23000                           ;doprnt.c: 550: for(;;) {
 23001  0022F8  D003               	goto	i2l6770
 23002  0022FA                     i2l6766:
 23003                           
 23004                           ;doprnt.c: 580: flag |= 0x04;
 23005  0022FA  8426               	bsf	i2printf@flag,2,c
 23006                           
 23007                           ;doprnt.c: 581: f++;
 23008  0022FC  4A0D               	infsnz	i2printf@f,f,c
 23009  0022FE  2A0E               	incf	i2printf@f+1,f,c
 23010  002300                     i2l6770:
 23011  002300  C00D  FFF6         	movff	i2printf@f,tblptrl
 23012  002304  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23013  002308                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23014  002308  6AF8               	clrf	tblptru,c
 23015  00230A                     	endif
 23016  00230A                     	if	0	;tblptru may be non-zero
 23017  00230A                     	endif
 23018  00230A  0008               	tblrd		*
 23019  00230C  50F5               	movf	tablat,w,c
 23020                           
 23021                           ; Switch size 1, requested type "space"
 23022                           ; Number of cases is 1, Range of values is 48 to 48
 23023                           ; switch strategies available:
 23024                           ; Name         Instructions Cycles
 23025                           ; simple_byte            4     3 (average)
 23026                           ;	Chosen strategy is simple_byte
 23027  00230E  0A30               	xorlw	48	; case 48
 23028  002310  B4D8               	btfsc	status,2,c
 23029  002312  D7F3               	goto	i2l6766
 23030                           
 23031                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 23032                           
 23033                           ;doprnt.c: 586: }
 23034                           
 23035                           ;doprnt.c: 585: break;
 23036  002314  C00D  FFF6         	movff	i2printf@f,tblptrl
 23037  002318  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23038  00231C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23039  00231C  6AF8               	clrf	tblptru,c
 23040  00231E                     	endif
 23041  00231E                     	if	0	;tblptru may be non-zero
 23042  00231E                     	endif
 23043  00231E  0008               	tblrd		*
 23044  002320  50F5               	movf	tablat,w,c
 23045  002322  EC49  F02B         	call	i2_isdigit
 23046  002326  A0D8               	btfss	status,0,c
 23047  002328  D0A6               	goto	i2l6818
 23048                           
 23049                           ;doprnt.c: 598: width = 0;
 23050  00232A  0E00               	movlw	0
 23051  00232C  6E29               	movwf	i2printf@width+1,c
 23052  00232E  0E00               	movlw	0
 23053  002330  6E28               	movwf	i2printf@width,c
 23054  002332                     i2l6776:
 23055                           
 23056                           ;doprnt.c: 600: width *= 10;
 23057  002332  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 23058  002336  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 23059  00233A  0E00               	movlw	0
 23060  00233C  6E04               	movwf	i2___wmul@multiplicand+1,c
 23061  00233E  0E0A               	movlw	10
 23062  002340  6E03               	movwf	i2___wmul@multiplicand,c
 23063  002342  ECEF  F02A         	call	i2___wmul	;wreg free
 23064  002346  C001  F028         	movff	?i2___wmul,i2printf@width
 23065  00234A  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 23066                           
 23067                           ;doprnt.c: 601: width += *f++ - '0';
 23068  00234E  0ED0               	movlw	208
 23069  002350  6E19               	movwf	??i2_printf& (0+255),c
 23070  002352  0EFF               	movlw	255
 23071  002354  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 23072  002356  C00D  FFF6         	movff	i2printf@f,tblptrl
 23073  00235A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23074  00235E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23075  00235E  6AF8               	clrf	tblptru,c
 23076  002360                     	endif
 23077  002360                     	if	0	;tblptru may be non-zero
 23078  002360                     	endif
 23079  002360  0008               	tblrd		*
 23080  002362  50F5               	movf	tablat,w,c
 23081  002364  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 23082  002366  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 23083  002368  5019               	movf	??i2_printf,w,c
 23084  00236A  261B               	addwf	??i2_printf+2,f,c
 23085  00236C  501A               	movf	??i2_printf+1,w,c
 23086  00236E  221C               	addwfc	??i2_printf+3,f,c
 23087  002370  501B               	movf	??i2_printf+2,w,c
 23088  002372  2628               	addwf	i2printf@width,f,c
 23089  002374  501C               	movf	??i2_printf+3,w,c
 23090  002376  2229               	addwfc	i2printf@width+1,f,c
 23091  002378  4A0D               	infsnz	i2printf@f,f,c
 23092  00237A  2A0E               	incf	i2printf@f+1,f,c
 23093                           
 23094                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 23095  00237C  C00D  FFF6         	movff	i2printf@f,tblptrl
 23096  002380  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23097  002384                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23098  002384  6AF8               	clrf	tblptru,c
 23099  002386                     	endif
 23100  002386                     	if	0	;tblptru may be non-zero
 23101  002386                     	endif
 23102  002386  0008               	tblrd		*
 23103  002388  50F5               	movf	tablat,w,c
 23104  00238A  EC49  F02B         	call	i2_isdigit
 23105  00238E  A0D8               	btfss	status,0,c
 23106  002390  D072               	goto	i2l6818
 23107  002392  D7CF               	goto	i2l6776
 23108  002394                     i2l6784:
 23109                           
 23110                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 23111  002394  C020  FFD9         	movff	i2printf@ap,fsr2l
 23112  002398  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23113  00239C  CFDE F01E          	movff	postinc2,i2printf@cp
 23114  0023A0  CFDD F01F          	movff	postdec2,i2printf@cp+1
 23115  0023A4  0E02               	movlw	2
 23116  0023A6  2620               	addwf	i2printf@ap,f,c
 23117  0023A8  0E00               	movlw	0
 23118  0023AA  2221               	addwfc	i2printf@ap+1,f,c
 23119                           
 23120                           ;doprnt.c: 740: if(!cp)
 23121  0023AC  501E               	movf	i2printf@cp,w,c
 23122  0023AE  101F               	iorwf	i2printf@cp+1,w,c
 23123  0023B0  A4D8               	btfss	status,2,c
 23124  0023B2  D004               	goto	i2l6792
 23125                           
 23126                           ;doprnt.c: 741: cp = "(null)";
 23127  0023B4  0EB5               	movlw	low STR_130
 23128  0023B6  6E1E               	movwf	i2printf@cp,c
 23129  0023B8  0EFF               	movlw	high STR_130
 23130  0023BA  6E1F               	movwf	i2printf@cp+1,c
 23131  0023BC                     i2l6792:
 23132                           
 23133                           ;doprnt.c: 745: len = 0;
 23134  0023BC  0E00               	movlw	0
 23135  0023BE  6E23               	movwf	i2printf@len+1,c
 23136  0023C0  0E00               	movlw	0
 23137  0023C2  6E22               	movwf	i2printf@len,c
 23138                           
 23139                           ;doprnt.c: 746: while(cp[len])
 23140  0023C4  D002               	goto	i2l6796
 23141  0023C6                     i2l6794:
 23142                           
 23143                           ;doprnt.c: 747: len++;
 23144  0023C6  4A22               	infsnz	i2printf@len,f,c
 23145  0023C8  2A23               	incf	i2printf@len+1,f,c
 23146  0023CA                     i2l6796:
 23147  0023CA  5022               	movf	i2printf@len,w,c
 23148  0023CC  241E               	addwf	i2printf@cp,w,c
 23149  0023CE  6E19               	movwf	??i2_printf& (0+255),c
 23150  0023D0  5023               	movf	i2printf@len+1,w,c
 23151  0023D2  201F               	addwfc	i2printf@cp+1,w,c
 23152  0023D4  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 23153  0023D6  C019  FFF6         	movff	??i2_printf,tblptrl
 23154  0023DA  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 23155  0023DE  0E00               	movlw	low (__mediumconst shr (0+16))
 23156  0023E0  6EF8               	movwf	tblptru,c
 23157  0023E2  0E0F               	movlw	(high __ramtop+-1)
 23158  0023E4  64F7               	cpfsgt	tblptrh,c
 23159  0023E6  D003               	bra	i2u532_47
 23160  0023E8  0008               	tblrd		*
 23161  0023EA  50F5               	movf	tablat,w,c
 23162  0023EC  D005               	bra	i2u532_40
 23163  0023EE                     i2u532_47:
 23164  0023EE  CFF6 FFE9          	movff	tblptrl,fsr0l
 23165  0023F2  CFF7 FFEA          	movff	tblptrh,fsr0h
 23166  0023F6  50EF               	movf	indf0,w,c
 23167  0023F8                     i2u532_40:
 23168  0023F8  0900               	iorlw	0
 23169  0023FA  A4D8               	btfss	status,2,c
 23170  0023FC  D7E4               	goto	i2l6794
 23171                           
 23172                           ;doprnt.c: 757: if(width > len)
 23173  0023FE  5028               	movf	i2printf@width,w,c
 23174  002400  5C22               	subwf	i2printf@len,w,c
 23175  002402  5029               	movf	i2printf@width+1,w,c
 23176  002404  5823               	subwfb	i2printf@len+1,w,c
 23177  002406  B0D8               	btfsc	status,0,c
 23178  002408  D005               	goto	i2l6802
 23179                           
 23180                           ;doprnt.c: 758: width -= len;
 23181  00240A  5022               	movf	i2printf@len,w,c
 23182  00240C  5E28               	subwf	i2printf@width,f,c
 23183  00240E  5023               	movf	i2printf@len+1,w,c
 23184  002410  5A29               	subwfb	i2printf@width+1,f,c
 23185  002412  D008               	goto	i2l6806
 23186  002414                     i2l6802:
 23187                           
 23188                           ;doprnt.c: 759: else
 23189                           ;doprnt.c: 760: width = 0;
 23190  002414  0E00               	movlw	0
 23191  002416  6E29               	movwf	i2printf@width+1,c
 23192  002418  0E00               	movlw	0
 23193  00241A  6E28               	movwf	i2printf@width,c
 23194                           
 23195                           ;doprnt.c: 764: while(width--)
 23196  00241C  D003               	goto	i2l6806
 23197  00241E                     i2l6804:
 23198                           
 23199                           ;doprnt.c: 765: (putch(' ') );
 23200  00241E  0E20               	movlw	32
 23201  002420  ECAE  F02B         	call	i2_putch
 23202  002424                     i2l6806:
 23203  002424  0628               	decf	i2printf@width,f,c
 23204  002426  A0D8               	btfss	status,0,c
 23205  002428  0629               	decf	i2printf@width+1,f,c
 23206  00242A  2828               	incf	i2printf@width,w,c
 23207  00242C  E1F8               	bnz	i2l6804
 23208  00242E  2829               	incf	i2printf@width+1,w,c
 23209  002430  B4D8               	btfsc	status,2,c
 23210  002432  D016               	goto	i2l6812
 23211  002434  D7F4               	goto	i2l6804
 23212  002436                     i2l6808:
 23213                           
 23214                           ;doprnt.c: 768: (putch(*cp++) );
 23215  002436  C01E  FFF6         	movff	i2printf@cp,tblptrl
 23216  00243A  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 23217  00243E  0E00               	movlw	low (__mediumconst shr (0+16))
 23218  002440  6EF8               	movwf	tblptru,c
 23219  002442  0E0F               	movlw	(high __ramtop+-1)
 23220  002444  64F7               	cpfsgt	tblptrh,c
 23221  002446  D003               	bra	i2u536_47
 23222  002448  0008               	tblrd		*
 23223  00244A  50F5               	movf	tablat,w,c
 23224  00244C  D005               	bra	i2u536_40
 23225  00244E                     i2u536_47:
 23226  00244E  CFF6 FFE9          	movff	tblptrl,fsr0l
 23227  002452  CFF7 FFEA          	movff	tblptrh,fsr0h
 23228  002456  50EF               	movf	indf0,w,c
 23229  002458                     i2u536_40:
 23230  002458  ECAE  F02B         	call	i2_putch
 23231  00245C  4A1E               	infsnz	i2printf@cp,f,c
 23232  00245E  2A1F               	incf	i2printf@cp+1,f,c
 23233  002460                     i2l6812:
 23234  002460  0622               	decf	i2printf@len,f,c
 23235  002462  A0D8               	btfss	status,0,c
 23236  002464  0623               	decf	i2printf@len+1,f,c
 23237  002466  2822               	incf	i2printf@len,w,c
 23238  002468  E1E6               	bnz	i2l6808
 23239  00246A  2823               	incf	i2printf@len+1,w,c
 23240  00246C  B4D8               	btfsc	status,2,c
 23241  00246E  D0DA               	goto	i2l6890
 23242  002470  D7E2               	goto	i2l6808
 23243  002472                     i2l6814:
 23244                           
 23245                           ;doprnt.c: 818: flag |= 0x40;
 23246  002472  8C26               	bsf	i2printf@flag,6,c
 23247                           
 23248                           ;doprnt.c: 822: }
 23249                           
 23250                           ;doprnt.c: 819: break;
 23251  002474  D01B               	goto	i2l1492
 23252  002476                     i2l6818:
 23253  002476  C00D  FFF6         	movff	i2printf@f,tblptrl
 23254  00247A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23255  00247E  4A0D               	infsnz	i2printf@f,f,c
 23256  002480  2A0E               	incf	i2printf@f+1,f,c
 23257  002482                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23258  002482  6AF8               	clrf	tblptru,c
 23259  002484                     	endif
 23260  002484                     	if	0	;tblptru may be non-zero
 23261  002484                     	endif
 23262  002484  0008               	tblrd		*
 23263  002486  CFF5 F027          	movff	tablat,i2printf@c
 23264  00248A  5027               	movf	i2printf@c,w,c
 23265                           
 23266                           ; Switch size 1, requested type "space"
 23267                           ; Number of cases is 5, Range of values is 0 to 117
 23268                           ; switch strategies available:
 23269                           ; Name         Instructions Cycles
 23270                           ; simple_byte           16     9 (average)
 23271                           ;	Chosen strategy is simple_byte
 23272  00248C  0A00               	xorlw	0	; case 0
 23273  00248E  B4D8               	btfsc	status,2,c
 23274  002490  0012               	return	
 23275  002492  0A64               	xorlw	100	; case 100
 23276  002494  B4D8               	btfsc	status,2,c
 23277  002496  D00A               	goto	i2l1492
 23278  002498  0A0D               	xorlw	13	; case 105
 23279  00249A  B4D8               	btfsc	status,2,c
 23280  00249C  D007               	goto	i2l1492
 23281  00249E  0A1A               	xorlw	26	; case 115
 23282  0024A0  B4D8               	btfsc	status,2,c
 23283  0024A2  D778               	goto	i2l6784
 23284  0024A4  0A06               	xorlw	6	; case 117
 23285  0024A6  B4D8               	btfsc	status,2,c
 23286  0024A8  D7E4               	goto	i2l6814
 23287  0024AA  D0BC               	goto	i2l6890
 23288  0024AC                     i2l1492:
 23289                           
 23290                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 23291  0024AC  BC26               	btfsc	i2printf@flag,6,c
 23292  0024AE  D015               	goto	i2l6830
 23293                           
 23294                           ;doprnt.c: 1253: {
 23295                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 23296  0024B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 23297  0024B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23298  0024B8  CFDE F024          	movff	postinc2,i2printf@val
 23299  0024BC  CFDD F025          	movff	postdec2,i2printf@val+1
 23300  0024C0  0E02               	movlw	2
 23301  0024C2  2620               	addwf	i2printf@ap,f,c
 23302  0024C4  0E00               	movlw	0
 23303  0024C6  2221               	addwfc	i2printf@ap+1,f,c
 23304                           
 23305                           ;doprnt.c: 1261: if((int)val < 0) {
 23306  0024C8  AE25               	btfss	i2printf@val+1,7,c
 23307  0024CA  D013               	goto	i2l6834
 23308                           
 23309                           ;doprnt.c: 1262: flag |= 0x03;
 23310  0024CC  0E03               	movlw	3
 23311  0024CE  1226               	iorwf	i2printf@flag,f,c
 23312                           
 23313                           ;doprnt.c: 1263: val = -val;
 23314  0024D0  6C24               	negf	i2printf@val,c
 23315  0024D2  1E25               	comf	i2printf@val+1,f,c
 23316  0024D4  B0D8               	btfsc	status,0,c
 23317  0024D6  2A25               	incf	i2printf@val+1,f,c
 23318                           
 23319                           ;doprnt.c: 1264: }
 23320                           ;doprnt.c: 1266: }
 23321  0024D8  D00C               	goto	i2l6834
 23322  0024DA                     i2l6830:
 23323                           
 23324                           ;doprnt.c: 1268: else
 23325                           ;doprnt.c: 1273: {
 23326                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 23327  0024DA  C020  FFD9         	movff	i2printf@ap,fsr2l
 23328  0024DE  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23329  0024E2  CFDE F024          	movff	postinc2,i2printf@val
 23330  0024E6  CFDD F025          	movff	postdec2,i2printf@val+1
 23331  0024EA  0E02               	movlw	2
 23332  0024EC  2620               	addwf	i2printf@ap,f,c
 23333  0024EE  0E00               	movlw	0
 23334  0024F0  2221               	addwfc	i2printf@ap+1,f,c
 23335  0024F2                     i2l6834:
 23336                           
 23337                           ;doprnt.c: 1287: }
 23338                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 23339  0024F2  0E01               	movlw	1
 23340  0024F4  6E27               	movwf	i2printf@c,c
 23341  0024F6                     i2l6836:
 23342  0024F6  0E05               	movlw	5
 23343  0024F8  1827               	xorwf	i2printf@c,w,c
 23344  0024FA  B4D8               	btfsc	status,2,c
 23345  0024FC  D015               	goto	i2l6848
 23346                           
 23347                           ;doprnt.c: 1306: if(val < dpowers[c])
 23348  0024FE  5027               	movf	i2printf@c,w,c
 23349  002500  0D02               	mullw	2
 23350  002502  0EB4               	movlw	low _dpowers
 23351  002504  24F3               	addwf	prodl,w,c
 23352  002506  6EF6               	movwf	tblptrl,c
 23353  002508  0EFA               	movlw	high _dpowers
 23354  00250A  20F4               	addwfc	prodh,w,c
 23355  00250C  6EF7               	movwf	tblptrh,c
 23356  00250E                     	if	1	;There are 3 active tblptr bytes
 23357  00250E  6AF8               	clrf	tblptru,c
 23358  002510  0E00               	movlw	low (__mediumconst shr (0+16))
 23359  002512  22F8               	addwfc	tblptru,f,c
 23360  002514                     	endif
 23361  002514  0009               	tblrd		*+
 23362  002516  50F5               	movf	tablat,w,c
 23363  002518  5C24               	subwf	i2printf@val,w,c
 23364  00251A  0009               	tblrd		*+
 23365  00251C  50F5               	movf	tablat,w,c
 23366  00251E  5825               	subwfb	i2printf@val+1,w,c
 23367  002520  A0D8               	btfss	status,0,c
 23368  002522  D002               	goto	i2l6848
 23369                           
 23370                           ;doprnt.c: 1307: break;
 23371  002524  2A27               	incf	i2printf@c,f,c
 23372  002526  D7E7               	goto	i2l6836
 23373  002528                     i2l6848:
 23374                           
 23375                           ;doprnt.c: 1345: if(width && flag & 0x03)
 23376  002528  5028               	movf	i2printf@width,w,c
 23377  00252A  1029               	iorwf	i2printf@width+1,w,c
 23378  00252C  B4D8               	btfsc	status,2,c
 23379  00252E  D009               	goto	i2l6854
 23380  002530  C026  F019         	movff	i2printf@flag,??i2_printf
 23381  002534  0E03               	movlw	3
 23382  002536  1619               	andwf	??i2_printf,f,c
 23383  002538  B4D8               	btfsc	status,2,c
 23384  00253A  D003               	goto	i2l6854
 23385                           
 23386                           ;doprnt.c: 1346: width--;
 23387  00253C  0628               	decf	i2printf@width,f,c
 23388  00253E  A0D8               	btfss	status,0,c
 23389  002540  0629               	decf	i2printf@width+1,f,c
 23390  002542                     i2l6854:
 23391                           
 23392                           ;doprnt.c: 1381: if(width > c)
 23393  002542  0E80               	movlw	128
 23394  002544  BE27               	btfsc	i2printf@c,7,c
 23395  002546  0E7F               	movlw	127
 23396  002548  6E19               	movwf	??i2_printf& (0+255),c
 23397  00254A  5028               	movf	i2printf@width,w,c
 23398  00254C  5C27               	subwf	i2printf@c,w,c
 23399  00254E  5029               	movf	i2printf@width+1,w,c
 23400  002550  0A80               	xorlw	128
 23401  002552  5819               	subwfb	??i2_printf& (0+255),w,c
 23402  002554  B0D8               	btfsc	status,0,c
 23403  002556  D007               	goto	i2l6858
 23404                           
 23405                           ;doprnt.c: 1382: width -= c;
 23406  002558  5027               	movf	i2printf@c,w,c
 23407  00255A  5E28               	subwf	i2printf@width,f,c
 23408  00255C  0E00               	movlw	0
 23409  00255E  BE27               	btfsc	i2printf@c,7,c
 23410  002560  0EFF               	movlw	255
 23411  002562  5A29               	subwfb	i2printf@width+1,f,c
 23412  002564  D004               	goto	i2l6860
 23413  002566                     i2l6858:
 23414                           
 23415                           ;doprnt.c: 1383: else
 23416                           ;doprnt.c: 1384: width = 0;
 23417  002566  0E00               	movlw	0
 23418  002568  6E29               	movwf	i2printf@width+1,c
 23419  00256A  0E00               	movlw	0
 23420  00256C  6E28               	movwf	i2printf@width,c
 23421  00256E                     i2l6860:
 23422                           
 23423                           ;doprnt.c: 1387: if(flag & 0x04) {
 23424  00256E  A426               	btfss	i2printf@flag,2,c
 23425  002570  D014               	goto	i2l6872
 23426                           
 23427                           ;doprnt.c: 1392: if(flag & 0x03)
 23428  002572  C026  F019         	movff	i2printf@flag,??i2_printf
 23429  002576  0E03               	movlw	3
 23430  002578  1619               	andwf	??i2_printf,f,c
 23431  00257A  B4D8               	btfsc	status,2,c
 23432  00257C  D003               	goto	i2l6866
 23433                           
 23434                           ;doprnt.c: 1393: (putch('-') );
 23435  00257E  0E2D               	movlw	45
 23436  002580  ECAE  F02B         	call	i2_putch
 23437  002584                     i2l6866:
 23438                           
 23439                           ;doprnt.c: 1415: if(width)
 23440  002584  5028               	movf	i2printf@width,w,c
 23441  002586  1029               	iorwf	i2printf@width+1,w,c
 23442  002588  B4D8               	btfsc	status,2,c
 23443  00258A  D01E               	goto	i2l6882
 23444                           
 23445                           ;doprnt.c: 1417: (putch('0') );
 23446                           
 23447                           ;doprnt.c: 1416: do
 23448  00258C  0E30               	movlw	48
 23449  00258E  ECAE  F02B         	call	i2_putch
 23450                           
 23451                           ;doprnt.c: 1418: while(--width);
 23452  002592  0628               	decf	i2printf@width,f,c
 23453  002594  A0D8               	btfss	status,0,c
 23454  002596  0629               	decf	i2printf@width+1,f,c
 23455  002598  D7F5               	goto	i2l6866
 23456  00259A                     i2l6872:
 23457                           
 23458                           ;doprnt.c: 1422: {
 23459                           ;doprnt.c: 1424: if(width
 23460                           ;doprnt.c: 1428: )
 23461  00259A  5028               	movf	i2printf@width,w,c
 23462  00259C  1029               	iorwf	i2printf@width+1,w,c
 23463  00259E  B4D8               	btfsc	status,2,c
 23464  0025A0  D00A               	goto	i2l6878
 23465  0025A2                     i2l6874:
 23466                           
 23467                           ;doprnt.c: 1430: (putch(' ') );
 23468  0025A2  0E20               	movlw	32
 23469  0025A4  ECAE  F02B         	call	i2_putch
 23470                           
 23471                           ;doprnt.c: 1431: while(--width);
 23472  0025A8  0628               	decf	i2printf@width,f,c
 23473  0025AA  A0D8               	btfss	status,0,c
 23474  0025AC  0629               	decf	i2printf@width+1,f,c
 23475  0025AE  5028               	movf	i2printf@width,w,c
 23476  0025B0  1029               	iorwf	i2printf@width+1,w,c
 23477  0025B2  A4D8               	btfss	status,2,c
 23478  0025B4  D7F6               	goto	i2l6874
 23479  0025B6                     i2l6878:
 23480                           
 23481                           ;doprnt.c: 1438: if(flag & 0x03)
 23482  0025B6  C026  F019         	movff	i2printf@flag,??i2_printf
 23483  0025BA  0E03               	movlw	3
 23484  0025BC  1619               	andwf	??i2_printf,f,c
 23485  0025BE  B4D8               	btfsc	status,2,c
 23486  0025C0  D003               	goto	i2l6882
 23487                           
 23488                           ;doprnt.c: 1439: (putch('-') );
 23489  0025C2  0E2D               	movlw	45
 23490  0025C4  ECAE  F02B         	call	i2_putch
 23491  0025C8                     i2l6882:
 23492                           
 23493                           ;doprnt.c: 1469: }
 23494                           ;doprnt.c: 1472: prec = c;
 23495  0025C8  C027  F01D         	movff	i2printf@c,i2printf@prec
 23496                           
 23497                           ;doprnt.c: 1474: while(prec--) {
 23498  0025CC  D027               	goto	i2l6888
 23499  0025CE                     i2l6884:
 23500                           
 23501                           ;doprnt.c: 1478: {
 23502                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 23503  0025CE  501D               	movf	i2printf@prec,w,c
 23504  0025D0  0D02               	mullw	2
 23505  0025D2  0EB4               	movlw	low _dpowers
 23506  0025D4  24F3               	addwf	prodl,w,c
 23507  0025D6  6EF6               	movwf	tblptrl,c
 23508  0025D8  0EFA               	movlw	high _dpowers
 23509  0025DA  20F4               	addwfc	prodh,w,c
 23510  0025DC  6EF7               	movwf	tblptrh,c
 23511  0025DE                     	if	1	;There are 3 active tblptr bytes
 23512  0025DE  6AF8               	clrf	tblptru,c
 23513  0025E0  0E00               	movlw	low (__mediumconst shr (0+16))
 23514  0025E2  22F8               	addwfc	tblptru,f,c
 23515  0025E4                     	endif
 23516  0025E4  0009               	tblrd		*+
 23517  0025E6  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 23518  0025EA  000A               	tblrd		*-
 23519  0025EC  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 23520  0025F0  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 23521  0025F4  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 23522  0025F8  ECCB  F027         	call	i2___lwdiv	;wreg free
 23523  0025FC  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 23524  002600  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 23525  002604  0E00               	movlw	0
 23526  002606  6E04               	movwf	i2___lwmod@divisor+1,c
 23527  002608  0E0A               	movlw	10
 23528  00260A  6E03               	movwf	i2___lwmod@divisor,c
 23529  00260C  EC8A  F028         	call	i2___lwmod	;wreg free
 23530  002610  5001               	movf	?i2___lwmod,w,c
 23531  002612  0F30               	addlw	48
 23532  002614  6E27               	movwf	i2printf@c,c
 23533                           
 23534                           ;doprnt.c: 1523: }
 23535                           ;doprnt.c: 1524: (putch(c) );
 23536  002616  5027               	movf	i2printf@c,w,c
 23537  002618  ECAE  F02B         	call	i2_putch
 23538  00261C                     i2l6888:
 23539  00261C  061D               	decf	i2printf@prec,f,c
 23540  00261E  281D               	incf	i2printf@prec,w,c
 23541  002620  A4D8               	btfss	status,2,c
 23542  002622  D7D5               	goto	i2l6884
 23543  002624                     i2l6890:
 23544  002624  C00D  FFF6         	movff	i2printf@f,tblptrl
 23545  002628  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23546  00262C  4A0D               	infsnz	i2printf@f,f,c
 23547  00262E  2A0E               	incf	i2printf@f+1,f,c
 23548  002630                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23549  002630  6AF8               	clrf	tblptru,c
 23550  002632                     	endif
 23551  002632                     	if	0	;tblptru may be non-zero
 23552  002632                     	endif
 23553  002632  0008               	tblrd		*
 23554  002634  CFF5 F027          	movff	tablat,i2printf@c
 23555  002638  5027               	movf	i2printf@c,w,c
 23556  00263A  B4D8               	btfsc	status,2,c
 23557  00263C  0012               	return	
 23558  00263E  D64E               	goto	i2l6760
 23559  002640                     __end_ofi2_printf:
 23560                           	opt stack 0
 23561                           pclatu	equ	0xFFB
 23562                           pclath	equ	0xFFA
 23563                           tblptru	equ	0xFF8
 23564                           tblptrh	equ	0xFF7
 23565                           tblptrl	equ	0xFF6
 23566                           tablat	equ	0xFF5
 23567                           prodh	equ	0xFF4
 23568                           prodl	equ	0xFF3
 23569                           intcon	equ	0xFF2
 23570                           intcon2	equ	0xFF1
 23571                           intcon3	equ	0xFF0
 23572                           indf0	equ	0xFEF
 23573                           postinc0	equ	0xFEE
 23574                           fsr0h	equ	0xFEA
 23575                           fsr0l	equ	0xFE9
 23576                           wreg	equ	0xFE8
 23577                           postdec1	equ	0xFE5
 23578                           fsr1h	equ	0xFE2
 23579                           fsr1l	equ	0xFE1
 23580                           indf2	equ	0xFDF
 23581                           postinc2	equ	0xFDE
 23582                           postdec2	equ	0xFDD
 23583                           fsr2h	equ	0xFDA
 23584                           fsr2l	equ	0xFD9
 23585                           status	equ	0xFD8
 23586                           
 23587 ;; *************** function i2_putch *****************
 23588 ;; Defined at:
 23589 ;;		line 20 in file "lcd.c"
 23590 ;; Parameters:    Size  Location     Type
 23591 ;;  data            1    wreg     unsigned char 
 23592 ;; Auto vars:     Size  Location     Type
 23593 ;;  data            1    2[COMRAM] unsigned char 
 23594 ;; Return value:  Size  Location     Type
 23595 ;;                  1    wreg      void 
 23596 ;; Registers used:
 23597 ;;		wreg, status,2, status,0, cstack
 23598 ;; Tracked objects:
 23599 ;;		On entry : 0/0
 23600 ;;		On exit  : 0/0
 23601 ;;		Unchanged: 0/0
 23602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23606 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23607 ;;Total ram usage:        1 bytes
 23608 ;; Hardware stack levels used:    1
 23609 ;; Hardware stack levels required when called:    1
 23610 ;; This function calls:
 23611 ;;		i2_lcdNibble
 23612 ;; This function is called by:
 23613 ;;		i2_printf
 23614 ;; This function uses a non-reentrant model
 23615 ;;
 23616                           
 23617                           	psect	text83
 23618  00575C                     __ptext83:
 23619                           	opt stack 0
 23620  00575C                     i2_putch:
 23621                           	opt stack 20
 23622                           
 23623                           ;incstack = 0
 23624                           ;i2putch@data stored from wreg
 23625  00575C  6E03               	movwf	i2putch@data,c
 23626                           
 23627                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 23628  00575E  848C               	bsf	3980,2,c	;volatile
 23629                           
 23630                           ;lcd.c: 22: lcdNibble(data);
 23631  005760  5003               	movf	i2putch@data,w,c
 23632  005762  EC9E  F027         	call	i2_lcdNibble
 23633  005766  0012               	return		;funcret
 23634  005768                     __end_ofi2_putch:
 23635                           	opt stack 0
 23636                           pclatu	equ	0xFFB
 23637                           pclath	equ	0xFFA
 23638                           tblptru	equ	0xFF8
 23639                           tblptrh	equ	0xFF7
 23640                           tblptrl	equ	0xFF6
 23641                           tablat	equ	0xFF5
 23642                           prodh	equ	0xFF4
 23643                           prodl	equ	0xFF3
 23644                           intcon	equ	0xFF2
 23645                           intcon2	equ	0xFF1
 23646                           intcon3	equ	0xFF0
 23647                           indf0	equ	0xFEF
 23648                           postinc0	equ	0xFEE
 23649                           fsr0h	equ	0xFEA
 23650                           fsr0l	equ	0xFE9
 23651                           wreg	equ	0xFE8
 23652                           postdec1	equ	0xFE5
 23653                           fsr1h	equ	0xFE2
 23654                           fsr1l	equ	0xFE1
 23655                           indf2	equ	0xFDF
 23656                           postinc2	equ	0xFDE
 23657                           postdec2	equ	0xFDD
 23658                           fsr2h	equ	0xFDA
 23659                           fsr2l	equ	0xFD9
 23660                           status	equ	0xFD8
 23661                           
 23662 ;; *************** function i2_isdigit *****************
 23663 ;; Defined at:
 23664 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 23665 ;; Parameters:    Size  Location     Type
 23666 ;;  c               1    wreg     unsigned char 
 23667 ;; Auto vars:     Size  Location     Type
 23668 ;;  c               1    2[COMRAM] unsigned char 
 23669 ;; Return value:  Size  Location     Type
 23670 ;;		None               void
 23671 ;; Registers used:
 23672 ;;		wreg, status,2, status,0
 23673 ;; Tracked objects:
 23674 ;;		On entry : 0/0
 23675 ;;		On exit  : 0/0
 23676 ;;		Unchanged: 0/0
 23677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23679 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23680 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23681 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23682 ;;Total ram usage:        3 bytes
 23683 ;; Hardware stack levels used:    1
 23684 ;; This function calls:
 23685 ;;		Nothing
 23686 ;; This function is called by:
 23687 ;;		i2_printf
 23688 ;; This function uses a non-reentrant model
 23689 ;;
 23690                           
 23691                           	psect	text84
 23692  005692                     __ptext84:
 23693                           	opt stack 0
 23694  005692                     i2_isdigit:
 23695                           	opt stack 21
 23696                           
 23697                           ;incstack = 0
 23698                           ;i2isdigit@c stored from wreg
 23699  005692  6E03               	movwf	i2isdigit@c,c
 23700  005694  0E00               	movlw	0
 23701  005696  6E02               	movwf	i2_isdigit$2085,c
 23702  005698  0E3A               	movlw	58
 23703  00569A  6003               	cpfslt	i2isdigit@c,c
 23704  00569C  D005               	goto	i2l6460
 23705  00569E  0E2F               	movlw	47
 23706  0056A0  6403               	cpfsgt	i2isdigit@c,c
 23707  0056A2  D002               	goto	i2l6460
 23708  0056A4  0E01               	movlw	1
 23709  0056A6  6E02               	movwf	i2_isdigit$2085,c
 23710  0056A8                     i2l6460:
 23711  0056A8  C002  F001         	movff	i2_isdigit$2085,??i2_isdigit
 23712  0056AC  3001               	rrcf	??i2_isdigit,w,c
 23713  0056AE  0012               	return	
 23714  0056B0                     __end_ofi2_isdigit:
 23715                           	opt stack 0
 23716                           pclatu	equ	0xFFB
 23717                           pclath	equ	0xFFA
 23718                           tblptru	equ	0xFF8
 23719                           tblptrh	equ	0xFF7
 23720                           tblptrl	equ	0xFF6
 23721                           tablat	equ	0xFF5
 23722                           prodh	equ	0xFF4
 23723                           prodl	equ	0xFF3
 23724                           intcon	equ	0xFF2
 23725                           intcon2	equ	0xFF1
 23726                           intcon3	equ	0xFF0
 23727                           indf0	equ	0xFEF
 23728                           postinc0	equ	0xFEE
 23729                           fsr0h	equ	0xFEA
 23730                           fsr0l	equ	0xFE9
 23731                           wreg	equ	0xFE8
 23732                           postdec1	equ	0xFE5
 23733                           fsr1h	equ	0xFE2
 23734                           fsr1l	equ	0xFE1
 23735                           indf2	equ	0xFDF
 23736                           postinc2	equ	0xFDE
 23737                           postdec2	equ	0xFDD
 23738                           fsr2h	equ	0xFDA
 23739                           fsr2l	equ	0xFD9
 23740                           status	equ	0xFD8
 23741                           
 23742 ;; *************** function i2___wmul *****************
 23743 ;; Defined at:
 23744 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 23745 ;; Parameters:    Size  Location     Type
 23746 ;;  multiplier      2    0[COMRAM] unsigned int 
 23747 ;;  multiplicand    2    2[COMRAM] unsigned int 
 23748 ;; Auto vars:     Size  Location     Type
 23749 ;;  __wmul          2    4[COMRAM] unsigned int 
 23750 ;; Return value:  Size  Location     Type
 23751 ;;                  2    0[COMRAM] unsigned int 
 23752 ;; Registers used:
 23753 ;;		wreg, status,2, status,0, prodl, prodh
 23754 ;; Tracked objects:
 23755 ;;		On entry : 0/0
 23756 ;;		On exit  : 0/0
 23757 ;;		Unchanged: 0/0
 23758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23759 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23762 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23763 ;;Total ram usage:        6 bytes
 23764 ;; Hardware stack levels used:    1
 23765 ;; This function calls:
 23766 ;;		Nothing
 23767 ;; This function is called by:
 23768 ;;		_printSortTimer
 23769 ;;		_retrieveLog
 23770 ;;		i2_printf
 23771 ;; This function uses a non-reentrant model
 23772 ;;
 23773                           
 23774                           	psect	text85
 23775  0055DE                     __ptext85:
 23776                           	opt stack 0
 23777  0055DE                     i2___wmul:
 23778                           	opt stack 21
 23779                           
 23780                           ;incstack = 0
 23781  0055DE  5001               	movf	i2___wmul@multiplier,w,c
 23782  0055E0  0203               	mulwf	i2___wmul@multiplicand,c
 23783  0055E2  CFF3 F005          	movff	prodl,i2___wmul@product
 23784  0055E6  CFF4 F006          	movff	prodh,i2___wmul@product+1
 23785  0055EA  5001               	movf	i2___wmul@multiplier,w,c
 23786  0055EC  0204               	mulwf	i2___wmul@multiplicand+1,c
 23787  0055EE  50F3               	movf	prodl,w,c
 23788  0055F0  2606               	addwf	i2___wmul@product+1,f,c
 23789  0055F2  5002               	movf	i2___wmul@multiplier+1,w,c
 23790  0055F4  0203               	mulwf	i2___wmul@multiplicand,c
 23791  0055F6  50F3               	movf	prodl,w,c
 23792  0055F8  2606               	addwf	i2___wmul@product+1,f,c
 23793  0055FA  C005  F001         	movff	i2___wmul@product,?i2___wmul
 23794  0055FE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 23795  005602  0012               	return	
 23796  005604                     __end_ofi2___wmul:
 23797                           	opt stack 0
 23798                           pclatu	equ	0xFFB
 23799                           pclath	equ	0xFFA
 23800                           tblptru	equ	0xFF8
 23801                           tblptrh	equ	0xFF7
 23802                           tblptrl	equ	0xFF6
 23803                           tablat	equ	0xFF5
 23804                           prodh	equ	0xFF4
 23805                           prodl	equ	0xFF3
 23806                           intcon	equ	0xFF2
 23807                           intcon2	equ	0xFF1
 23808                           intcon3	equ	0xFF0
 23809                           indf0	equ	0xFEF
 23810                           postinc0	equ	0xFEE
 23811                           fsr0h	equ	0xFEA
 23812                           fsr0l	equ	0xFE9
 23813                           wreg	equ	0xFE8
 23814                           postdec1	equ	0xFE5
 23815                           fsr1h	equ	0xFE2
 23816                           fsr1l	equ	0xFE1
 23817                           indf2	equ	0xFDF
 23818                           postinc2	equ	0xFDE
 23819                           postdec2	equ	0xFDD
 23820                           fsr2h	equ	0xFDA
 23821                           fsr2l	equ	0xFD9
 23822                           status	equ	0xFD8
 23823                           
 23824 ;; *************** function i2___lwmod *****************
 23825 ;; Defined at:
 23826 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 23827 ;; Parameters:    Size  Location     Type
 23828 ;;  dividend        2    0[COMRAM] unsigned int 
 23829 ;;  divisor         2    2[COMRAM] unsigned int 
 23830 ;; Auto vars:     Size  Location     Type
 23831 ;;  __lwmod         1    4[COMRAM] unsigned char 
 23832 ;; Return value:  Size  Location     Type
 23833 ;;                  2    0[COMRAM] unsigned int 
 23834 ;; Registers used:
 23835 ;;		wreg, status,2, status,0
 23836 ;; Tracked objects:
 23837 ;;		On entry : 0/0
 23838 ;;		On exit  : 0/0
 23839 ;;		Unchanged: 0/0
 23840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23844 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23845 ;;Total ram usage:        5 bytes
 23846 ;; Hardware stack levels used:    1
 23847 ;; This function calls:
 23848 ;;		Nothing
 23849 ;; This function is called by:
 23850 ;;		_printSortTimer
 23851 ;;		i2_printf
 23852 ;; This function uses a non-reentrant model
 23853 ;;
 23854                           
 23855                           	psect	text86
 23856  005114                     __ptext86:
 23857                           	opt stack 0
 23858  005114                     i2___lwmod:
 23859                           	opt stack 21
 23860                           
 23861                           ;incstack = 0
 23862  005114  5003               	movf	i2___lwmod@divisor,w,c
 23863  005116  1004               	iorwf	i2___lwmod@divisor+1,w,c
 23864  005118  B4D8               	btfsc	status,2,c
 23865  00511A  D018               	goto	i2l1949
 23866  00511C  0E01               	movlw	1
 23867  00511E  6E05               	movwf	i2___lwmod@counter,c
 23868  005120  D004               	goto	i2l6492
 23869  005122                     i2l6490:
 23870  005122  90D8               	bcf	status,0,c
 23871  005124  3603               	rlcf	i2___lwmod@divisor,f,c
 23872  005126  3604               	rlcf	i2___lwmod@divisor+1,f,c
 23873  005128  2A05               	incf	i2___lwmod@counter,f,c
 23874  00512A                     i2l6492:
 23875  00512A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 23876  00512C  D7FA               	goto	i2l6490
 23877  00512E                     i2l6494:
 23878  00512E  5003               	movf	i2___lwmod@divisor,w,c
 23879  005130  5C01               	subwf	i2___lwmod@dividend,w,c
 23880  005132  5004               	movf	i2___lwmod@divisor+1,w,c
 23881  005134  5802               	subwfb	i2___lwmod@dividend+1,w,c
 23882  005136  A0D8               	btfss	status,0,c
 23883  005138  D004               	goto	i2l6498
 23884  00513A  5003               	movf	i2___lwmod@divisor,w,c
 23885  00513C  5E01               	subwf	i2___lwmod@dividend,f,c
 23886  00513E  5004               	movf	i2___lwmod@divisor+1,w,c
 23887  005140  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 23888  005142                     i2l6498:
 23889  005142  90D8               	bcf	status,0,c
 23890  005144  3204               	rrcf	i2___lwmod@divisor+1,f,c
 23891  005146  3203               	rrcf	i2___lwmod@divisor,f,c
 23892  005148  2E05               	decfsz	i2___lwmod@counter,f,c
 23893  00514A  D7F1               	goto	i2l6494
 23894  00514C                     i2l1949:
 23895  00514C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 23896  005150  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 23897  005154  0012               	return		;funcret
 23898  005156                     __end_ofi2___lwmod:
 23899                           	opt stack 0
 23900                           pclatu	equ	0xFFB
 23901                           pclath	equ	0xFFA
 23902                           tblptru	equ	0xFF8
 23903                           tblptrh	equ	0xFF7
 23904                           tblptrl	equ	0xFF6
 23905                           tablat	equ	0xFF5
 23906                           prodh	equ	0xFF4
 23907                           prodl	equ	0xFF3
 23908                           intcon	equ	0xFF2
 23909                           intcon2	equ	0xFF1
 23910                           intcon3	equ	0xFF0
 23911                           indf0	equ	0xFEF
 23912                           postinc0	equ	0xFEE
 23913                           fsr0h	equ	0xFEA
 23914                           fsr0l	equ	0xFE9
 23915                           wreg	equ	0xFE8
 23916                           postdec1	equ	0xFE5
 23917                           fsr1h	equ	0xFE2
 23918                           fsr1l	equ	0xFE1
 23919                           indf2	equ	0xFDF
 23920                           postinc2	equ	0xFDE
 23921                           postdec2	equ	0xFDD
 23922                           fsr2h	equ	0xFDA
 23923                           fsr2l	equ	0xFD9
 23924                           status	equ	0xFD8
 23925                           
 23926 ;; *************** function i2___lwdiv *****************
 23927 ;; Defined at:
 23928 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 23929 ;; Parameters:    Size  Location     Type
 23930 ;;  dividend        2    5[COMRAM] unsigned int 
 23931 ;;  divisor         2    7[COMRAM] unsigned int 
 23932 ;; Auto vars:     Size  Location     Type
 23933 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 23934 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 23935 ;; Return value:  Size  Location     Type
 23936 ;;                  2    5[COMRAM] unsigned int 
 23937 ;; Registers used:
 23938 ;;		wreg, status,2, status,0
 23939 ;; Tracked objects:
 23940 ;;		On entry : 0/0
 23941 ;;		On exit  : 0/0
 23942 ;;		Unchanged: 0/0
 23943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23945 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23947 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23948 ;;Total ram usage:        7 bytes
 23949 ;; Hardware stack levels used:    1
 23950 ;; This function calls:
 23951 ;;		Nothing
 23952 ;; This function is called by:
 23953 ;;		_printSortTimer
 23954 ;;		i2_printf
 23955 ;; This function uses a non-reentrant model
 23956 ;;
 23957                           
 23958                           	psect	text87
 23959  004F96                     __ptext87:
 23960                           	opt stack 0
 23961  004F96                     i2___lwdiv:
 23962                           	opt stack 21
 23963                           
 23964                           ;incstack = 0
 23965  004F96  0E00               	movlw	0
 23966  004F98  6E0B               	movwf	i2___lwdiv@quotient+1,c
 23967  004F9A  0E00               	movlw	0
 23968  004F9C  6E0A               	movwf	i2___lwdiv@quotient,c
 23969  004F9E  5008               	movf	i2___lwdiv@divisor,w,c
 23970  004FA0  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 23971  004FA2  B4D8               	btfsc	status,2,c
 23972  004FA4  D01C               	goto	i2l1939
 23973  004FA6  0E01               	movlw	1
 23974  004FA8  6E0C               	movwf	i2___lwdiv@counter,c
 23975  004FAA  D004               	goto	i2l6472
 23976  004FAC                     i2l6470:
 23977  004FAC  90D8               	bcf	status,0,c
 23978  004FAE  3608               	rlcf	i2___lwdiv@divisor,f,c
 23979  004FB0  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 23980  004FB2  2A0C               	incf	i2___lwdiv@counter,f,c
 23981  004FB4                     i2l6472:
 23982  004FB4  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 23983  004FB6  D7FA               	goto	i2l6470
 23984  004FB8                     i2l6474:
 23985  004FB8  90D8               	bcf	status,0,c
 23986  004FBA  360A               	rlcf	i2___lwdiv@quotient,f,c
 23987  004FBC  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 23988  004FBE  5008               	movf	i2___lwdiv@divisor,w,c
 23989  004FC0  5C06               	subwf	i2___lwdiv@dividend,w,c
 23990  004FC2  5009               	movf	i2___lwdiv@divisor+1,w,c
 23991  004FC4  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 23992  004FC6  A0D8               	btfss	status,0,c
 23993  004FC8  D005               	goto	i2l6482
 23994  004FCA  5008               	movf	i2___lwdiv@divisor,w,c
 23995  004FCC  5E06               	subwf	i2___lwdiv@dividend,f,c
 23996  004FCE  5009               	movf	i2___lwdiv@divisor+1,w,c
 23997  004FD0  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 23998  004FD2  800A               	bsf	i2___lwdiv@quotient,0,c
 23999  004FD4                     i2l6482:
 24000  004FD4  90D8               	bcf	status,0,c
 24001  004FD6  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 24002  004FD8  3208               	rrcf	i2___lwdiv@divisor,f,c
 24003  004FDA  2E0C               	decfsz	i2___lwdiv@counter,f,c
 24004  004FDC  D7ED               	goto	i2l6474
 24005  004FDE                     i2l1939:
 24006  004FDE  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 24007  004FE2  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 24008  004FE6  0012               	return		;funcret
 24009  004FE8                     __end_ofi2___lwdiv:
 24010                           	opt stack 0
 24011                           pclatu	equ	0xFFB
 24012                           pclath	equ	0xFFA
 24013                           tblptru	equ	0xFF8
 24014                           tblptrh	equ	0xFF7
 24015                           tblptrl	equ	0xFF6
 24016                           tablat	equ	0xFF5
 24017                           prodh	equ	0xFF4
 24018                           prodl	equ	0xFF3
 24019                           intcon	equ	0xFF2
 24020                           intcon2	equ	0xFF1
 24021                           intcon3	equ	0xFF0
 24022                           indf0	equ	0xFEF
 24023                           postinc0	equ	0xFEE
 24024                           fsr0h	equ	0xFEA
 24025                           fsr0l	equ	0xFE9
 24026                           wreg	equ	0xFE8
 24027                           postdec1	equ	0xFE5
 24028                           fsr1h	equ	0xFE2
 24029                           fsr1l	equ	0xFE1
 24030                           indf2	equ	0xFDF
 24031                           postinc2	equ	0xFDE
 24032                           postdec2	equ	0xFDD
 24033                           fsr2h	equ	0xFDA
 24034                           fsr2l	equ	0xFD9
 24035                           status	equ	0xFD8
 24036                           
 24037 ;; *************** function i2_lcdInst *****************
 24038 ;; Defined at:
 24039 ;;		line 15 in file "lcd.c"
 24040 ;; Parameters:    Size  Location     Type
 24041 ;;  data            1    wreg     unsigned char 
 24042 ;; Auto vars:     Size  Location     Type
 24043 ;;  data            1    2[COMRAM] unsigned char 
 24044 ;; Return value:  Size  Location     Type
 24045 ;;                  1    wreg      void 
 24046 ;; Registers used:
 24047 ;;		wreg, status,2, status,0, cstack
 24048 ;; Tracked objects:
 24049 ;;		On entry : 0/0
 24050 ;;		On exit  : 0/0
 24051 ;;		Unchanged: 0/0
 24052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24056 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24057 ;;Total ram usage:        1 bytes
 24058 ;; Hardware stack levels used:    1
 24059 ;; Hardware stack levels required when called:    1
 24060 ;; This function calls:
 24061 ;;		i2_lcdNibble
 24062 ;; This function is called by:
 24063 ;;		_change_state_to_menu_11
 24064 ;;		_change_state_to_menu_23
 24065 ;;		_change_state_to_logs_11
 24066 ;;		_change_state_to_logs_12
 24067 ;;		_change_state_to_logs_22
 24068 ;;		_change_state_to_logs_23
 24069 ;;		_change_state_to_logs_33
 24070 ;;		_change_state_to_logs_34
 24071 ;;		_printSortTimer
 24072 ;;		i2_change_state_to_menu_start
 24073 ;;		i2_change_state_to_menu_12
 24074 ;;		i2_change_state_to_menu_22
 24075 ;;		i2_printRTC
 24076 ;; This function uses a non-reentrant model
 24077 ;;
 24078                           
 24079                           	psect	text88
 24080  005768                     __ptext88:
 24081                           	opt stack 0
 24082  005768                     i2_lcdInst:
 24083                           	opt stack 20
 24084                           
 24085                           ;incstack = 0
 24086                           ;i2lcdInst@data stored from wreg
 24087  005768  6E03               	movwf	i2lcdInst@data,c
 24088                           
 24089                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 24090  00576A  948C               	bcf	3980,2,c	;volatile
 24091                           
 24092                           ;lcd.c: 17: lcdNibble(data);
 24093  00576C  5003               	movf	i2lcdInst@data,w,c
 24094  00576E  EC9E  F027         	call	i2_lcdNibble
 24095  005772  0012               	return		;funcret
 24096  005774                     __end_ofi2_lcdInst:
 24097                           	opt stack 0
 24098                           pclatu	equ	0xFFB
 24099                           pclath	equ	0xFFA
 24100                           tblptru	equ	0xFF8
 24101                           tblptrh	equ	0xFF7
 24102                           tblptrl	equ	0xFF6
 24103                           tablat	equ	0xFF5
 24104                           prodh	equ	0xFF4
 24105                           prodl	equ	0xFF3
 24106                           intcon	equ	0xFF2
 24107                           intcon2	equ	0xFF1
 24108                           intcon3	equ	0xFF0
 24109                           indf0	equ	0xFEF
 24110                           postinc0	equ	0xFEE
 24111                           fsr0h	equ	0xFEA
 24112                           fsr0l	equ	0xFE9
 24113                           wreg	equ	0xFE8
 24114                           postdec1	equ	0xFE5
 24115                           fsr1h	equ	0xFE2
 24116                           fsr1l	equ	0xFE1
 24117                           indf2	equ	0xFDF
 24118                           postinc2	equ	0xFDE
 24119                           postdec2	equ	0xFDD
 24120                           fsr2h	equ	0xFDA
 24121                           fsr2l	equ	0xFD9
 24122                           status	equ	0xFD8
 24123                           
 24124 ;; *************** function i2_lcdNibble *****************
 24125 ;; Defined at:
 24126 ;;		line 25 in file "lcd.c"
 24127 ;; Parameters:    Size  Location     Type
 24128 ;;  data            1    wreg     unsigned char 
 24129 ;; Auto vars:     Size  Location     Type
 24130 ;;  data            1    1[COMRAM] unsigned char 
 24131 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 24132 ;; Return value:  Size  Location     Type
 24133 ;;                  1    wreg      void 
 24134 ;; Registers used:
 24135 ;;		wreg, status,2, status,0
 24136 ;; Tracked objects:
 24137 ;;		On entry : 0/0
 24138 ;;		On exit  : 0/0
 24139 ;;		Unchanged: 0/0
 24140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24142 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24144 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24145 ;;Total ram usage:        2 bytes
 24146 ;; Hardware stack levels used:    1
 24147 ;; This function calls:
 24148 ;;		Nothing
 24149 ;; This function is called by:
 24150 ;;		i2_lcdInst
 24151 ;;		i2_putch
 24152 ;; This function uses a non-reentrant model
 24153 ;;
 24154                           
 24155                           	psect	text89
 24156  004F3C                     __ptext89:
 24157                           	opt stack 0
 24158  004F3C                     i2_lcdNibble:
 24159                           	opt stack 20
 24160                           
 24161                           ;incstack = 0
 24162                           ;i2lcdNibble@data stored from wreg
 24163  004F3C  6E02               	movwf	i2lcdNibble@data,c
 24164                           
 24165                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 24166  004F3E  9EF2               	bcf	intcon,7,c	;volatile
 24167                           
 24168                           ;lcd.c: 28: char temp = data & 0xF0;
 24169  004F40  5002               	movf	i2lcdNibble@data,w,c
 24170  004F42  0BF0               	andlw	240
 24171  004F44  6E01               	movwf	i2lcdNibble@temp,c
 24172                           
 24173                           ;lcd.c: 29: LATD = LATD & 0x0F;
 24174  004F46  508C               	movf	3980,w,c	;volatile
 24175  004F48  0B0F               	andlw	15
 24176  004F4A  6E8C               	movwf	3980,c	;volatile
 24177                           
 24178                           ;lcd.c: 30: LATD = temp | LATD;
 24179  004F4C  5001               	movf	i2lcdNibble@temp,w,c
 24180  004F4E  108C               	iorwf	3980,w,c	;volatile
 24181  004F50  6E8C               	movwf	3980,c	;volatile
 24182                           
 24183                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 24184  004F52  868C               	bsf	3980,3,c	;volatile
 24185                           
 24186                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24187  004F54  0E42               	movlw	66
 24188  004F56                     i2u1090_47:
 24189  004F56  2EE8               	decfsz	wreg,f,c
 24190  004F58  D7FE               	bra	i2u1090_47
 24191  004F5A  D000               	nop2	
 24192                           
 24193                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 24194  004F5C  968C               	bcf	3980,3,c	;volatile
 24195                           
 24196                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24197  004F5E  0E42               	movlw	66
 24198  004F60                     i2u1091_47:
 24199  004F60  2EE8               	decfsz	wreg,f,c
 24200  004F62  D7FE               	bra	i2u1091_47
 24201  004F64  D000               	nop2	
 24202                           
 24203                           ;lcd.c: 37: data = data << 4;
 24204  004F66  3802               	swapf	i2lcdNibble@data,w,c
 24205  004F68  0BF0               	andlw	240
 24206  004F6A  6E02               	movwf	i2lcdNibble@data,c
 24207                           
 24208                           ;lcd.c: 39: temp = data & 0xF0;
 24209  004F6C  5002               	movf	i2lcdNibble@data,w,c
 24210  004F6E  0BF0               	andlw	240
 24211  004F70  6E01               	movwf	i2lcdNibble@temp,c
 24212                           
 24213                           ;lcd.c: 40: LATD = LATD & 0x0F;
 24214  004F72  508C               	movf	3980,w,c	;volatile
 24215  004F74  0B0F               	andlw	15
 24216  004F76  6E8C               	movwf	3980,c	;volatile
 24217                           
 24218                           ;lcd.c: 41: LATD = temp | LATD;
 24219  004F78  5001               	movf	i2lcdNibble@temp,w,c
 24220  004F7A  108C               	iorwf	3980,w,c	;volatile
 24221  004F7C  6E8C               	movwf	3980,c	;volatile
 24222                           
 24223                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 24224  004F7E  868C               	bsf	3980,3,c	;volatile
 24225                           
 24226                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24227  004F80  0E42               	movlw	66
 24228  004F82                     i2u1092_47:
 24229  004F82  2EE8               	decfsz	wreg,f,c
 24230  004F84  D7FE               	bra	i2u1092_47
 24231  004F86  D000               	nop2	
 24232                           
 24233                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 24234  004F88  968C               	bcf	3980,3,c	;volatile
 24235                           
 24236                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24237  004F8A  0E42               	movlw	66
 24238  004F8C                     i2u1093_47:
 24239  004F8C  2EE8               	decfsz	wreg,f,c
 24240  004F8E  D7FE               	bra	i2u1093_47
 24241  004F90  D000               	nop2	
 24242                           
 24243                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 24244  004F92  8EF2               	bsf	intcon,7,c	;volatile
 24245  004F94  0012               	return		;funcret
 24246  004F96                     __end_ofi2_lcdNibble:
 24247                           	opt stack 0
 24248                           pclatu	equ	0xFFB
 24249                           pclath	equ	0xFFA
 24250                           tblptru	equ	0xFF8
 24251                           tblptrh	equ	0xFF7
 24252                           tblptrl	equ	0xFF6
 24253                           tablat	equ	0xFF5
 24254                           prodh	equ	0xFF4
 24255                           prodl	equ	0xFF3
 24256                           intcon	equ	0xFF2
 24257                           intcon2	equ	0xFF1
 24258                           intcon3	equ	0xFF0
 24259                           indf0	equ	0xFEF
 24260                           postinc0	equ	0xFEE
 24261                           fsr0h	equ	0xFEA
 24262                           fsr0l	equ	0xFE9
 24263                           wreg	equ	0xFE8
 24264                           postdec1	equ	0xFE5
 24265                           fsr1h	equ	0xFE2
 24266                           fsr1l	equ	0xFE1
 24267                           indf2	equ	0xFDF
 24268                           postinc2	equ	0xFDE
 24269                           postdec2	equ	0xFDD
 24270                           fsr2h	equ	0xFDA
 24271                           fsr2l	equ	0xFD9
 24272                           status	equ	0xFD8
 24273                           
 24274 ;; *************** function i2_getRTC *****************
 24275 ;; Defined at:
 24276 ;;		line 44 in file "RTC.c"
 24277 ;; Parameters:    Size  Location     Type
 24278 ;;		None
 24279 ;; Auto vars:     Size  Location     Type
 24280 ;;  getRTC          2    3[COMRAM] int 
 24281 ;; Return value:  Size  Location     Type
 24282 ;;                  1    wreg      void 
 24283 ;; Registers used:
 24284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24285 ;; Tracked objects:
 24286 ;;		On entry : 0/0
 24287 ;;		On exit  : 0/0
 24288 ;;		Unchanged: 0/0
 24289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24294 ;;Total ram usage:        2 bytes
 24295 ;; Hardware stack levels used:    1
 24296 ;; Hardware stack levels required when called:    2
 24297 ;; This function calls:
 24298 ;;		i2_I2C_Master_Read
 24299 ;;		i2_I2C_Master_Start
 24300 ;;		i2_I2C_Master_Stop
 24301 ;;		i2_I2C_Master_Write
 24302 ;; This function is called by:
 24303 ;;		_printSortTimer
 24304 ;;		i2_printRTC
 24305 ;; This function uses a non-reentrant model
 24306 ;;
 24307                           
 24308                           	psect	text90
 24309  004C10                     __ptext90:
 24310                           	opt stack 0
 24311  004C10                     i2_getRTC:
 24312                           	opt stack 19
 24313                           
 24314                           ;RTC.c: 48: I2C_Master_Start();
 24315                           
 24316                           ;incstack = 0
 24317  004C10  ECD4  F02B         	call	i2_I2C_Master_Start	;wreg free
 24318                           
 24319                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 24320  004C14  0E00               	movlw	0
 24321  004C16  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24322  004C18  0ED0               	movlw	208
 24323  004C1A  6E02               	movwf	i2I2C_Master_Write@d,c
 24324  004C1C  ECBF  F02B         	call	i2_I2C_Master_Write	;wreg free
 24325                           
 24326                           ;RTC.c: 50: I2C_Master_Write(0x00);
 24327  004C20  0E00               	movlw	0
 24328  004C22  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24329  004C24  0E00               	movlw	0
 24330  004C26  6E02               	movwf	i2I2C_Master_Write@d,c
 24331  004C28  ECBF  F02B         	call	i2_I2C_Master_Write	;wreg free
 24332                           
 24333                           ;RTC.c: 51: I2C_Master_Stop();
 24334  004C2C  ECD0  F02B         	call	i2_I2C_Master_Stop	;wreg free
 24335                           
 24336                           ;RTC.c: 54: I2C_Master_Start();
 24337  004C30  ECD4  F02B         	call	i2_I2C_Master_Start	;wreg free
 24338                           
 24339                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 24340  004C34  0E00               	movlw	0
 24341  004C36  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24342  004C38  0ED1               	movlw	209
 24343  004C3A  6E02               	movwf	i2I2C_Master_Write@d,c
 24344  004C3C  ECBF  F02B         	call	i2_I2C_Master_Write	;wreg free
 24345                           
 24346                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 24347  004C40  0E00               	movlw	0
 24348  004C42  6E05               	movwf	i2getRTC@i+1,c
 24349  004C44  0E00               	movlw	0
 24350  004C46  6E04               	movwf	i2getRTC@i,c
 24351  004C48                     i2l6732:
 24352  004C48  BE05               	btfsc	i2getRTC@i+1,7,c
 24353  004C4A  D006               	goto	i2l6736
 24354  004C4C  5005               	movf	i2getRTC@i+1,w,c
 24355  004C4E  E111               	bnz	i2l6742
 24356  004C50  0E06               	movlw	6
 24357  004C52  5C04               	subwf	i2getRTC@i,w,c
 24358  004C54  B0D8               	btfsc	status,0,c
 24359  004C56  D00D               	goto	i2l6742
 24360  004C58                     i2l6736:
 24361                           
 24362                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 24363  004C58  0E1C               	movlw	low _time
 24364  004C5A  2404               	addwf	i2getRTC@i,w,c
 24365  004C5C  6ED9               	movwf	fsr2l,c
 24366  004C5E  0E01               	movlw	high _time
 24367  004C60  2005               	addwfc	i2getRTC@i+1,w,c
 24368  004C62  6EDA               	movwf	fsr2h,c
 24369  004C64  0E01               	movlw	1
 24370  004C66  EC02  F02B         	call	i2_I2C_Master_Read
 24371  004C6A  6EDF               	movwf	indf2,c
 24372  004C6C  4A04               	infsnz	i2getRTC@i,f,c
 24373  004C6E  2A05               	incf	i2getRTC@i+1,f,c
 24374  004C70  D7EB               	goto	i2l6732
 24375  004C72                     i2l6742:
 24376                           
 24377                           ;RTC.c: 58: }
 24378                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 24379  004C72  0E00               	movlw	0
 24380  004C74  EC02  F02B         	call	i2_I2C_Master_Read
 24381  004C78  0101               	movlb	1	; () banked
 24382  004C7A  6F22               	movwf	(_time+6)& (0+255),b
 24383                           
 24384                           ;RTC.c: 60: I2C_Master_Stop();
 24385  004C7C  ECD0  F02B         	call	i2_I2C_Master_Stop	;wreg free
 24386  004C80  0012               	return		;funcret
 24387  004C82                     __end_ofi2_getRTC:
 24388                           	opt stack 0
 24389                           pclatu	equ	0xFFB
 24390                           pclath	equ	0xFFA
 24391                           tblptru	equ	0xFF8
 24392                           tblptrh	equ	0xFF7
 24393                           tblptrl	equ	0xFF6
 24394                           tablat	equ	0xFF5
 24395                           prodh	equ	0xFF4
 24396                           prodl	equ	0xFF3
 24397                           intcon	equ	0xFF2
 24398                           intcon2	equ	0xFF1
 24399                           intcon3	equ	0xFF0
 24400                           indf0	equ	0xFEF
 24401                           postinc0	equ	0xFEE
 24402                           fsr0h	equ	0xFEA
 24403                           fsr0l	equ	0xFE9
 24404                           wreg	equ	0xFE8
 24405                           postdec1	equ	0xFE5
 24406                           fsr1h	equ	0xFE2
 24407                           fsr1l	equ	0xFE1
 24408                           indf2	equ	0xFDF
 24409                           postinc2	equ	0xFDE
 24410                           postdec2	equ	0xFDD
 24411                           fsr2h	equ	0xFDA
 24412                           fsr2l	equ	0xFD9
 24413                           status	equ	0xFD8
 24414                           
 24415 ;; *************** function i2_I2C_Master_Write *****************
 24416 ;; Defined at:
 24417 ;;		line 49 in file "I2C.c"
 24418 ;; Parameters:    Size  Location     Type
 24419 ;;  d               2    1[COMRAM] unsigned int 
 24420 ;; Auto vars:     Size  Location     Type
 24421 ;;		None
 24422 ;; Return value:  Size  Location     Type
 24423 ;;                  1    wreg      void 
 24424 ;; Registers used:
 24425 ;;		wreg, status,2, status,0, cstack
 24426 ;; Tracked objects:
 24427 ;;		On entry : 0/0
 24428 ;;		On exit  : 0/0
 24429 ;;		Unchanged: 0/0
 24430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24431 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24435 ;;Total ram usage:        2 bytes
 24436 ;; Hardware stack levels used:    1
 24437 ;; Hardware stack levels required when called:    1
 24438 ;; This function calls:
 24439 ;;		i2_I2C_Master_Wait
 24440 ;; This function is called by:
 24441 ;;		i2_getRTC
 24442 ;; This function uses a non-reentrant model
 24443 ;;
 24444                           
 24445                           	psect	text91
 24446  00577E                     __ptext91:
 24447                           	opt stack 0
 24448  00577E                     i2_I2C_Master_Write:
 24449                           	opt stack 19
 24450                           
 24451                           ;I2C.c: 51: I2C_Master_Wait();
 24452                           
 24453                           ;incstack = 0
 24454  00577E  EC95  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24455                           
 24456                           ;I2C.c: 52: SSPBUF = d;
 24457  005782  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 24458  005786  0012               	return		;funcret
 24459  005788                     __end_ofi2_I2C_Master_Write:
 24460                           	opt stack 0
 24461                           pclatu	equ	0xFFB
 24462                           pclath	equ	0xFFA
 24463                           tblptru	equ	0xFF8
 24464                           tblptrh	equ	0xFF7
 24465                           tblptrl	equ	0xFF6
 24466                           tablat	equ	0xFF5
 24467                           prodh	equ	0xFF4
 24468                           prodl	equ	0xFF3
 24469                           intcon	equ	0xFF2
 24470                           intcon2	equ	0xFF1
 24471                           intcon3	equ	0xFF0
 24472                           indf0	equ	0xFEF
 24473                           postinc0	equ	0xFEE
 24474                           fsr0h	equ	0xFEA
 24475                           fsr0l	equ	0xFE9
 24476                           wreg	equ	0xFE8
 24477                           postdec1	equ	0xFE5
 24478                           fsr1h	equ	0xFE2
 24479                           fsr1l	equ	0xFE1
 24480                           indf2	equ	0xFDF
 24481                           postinc2	equ	0xFDE
 24482                           postdec2	equ	0xFDD
 24483                           fsr2h	equ	0xFDA
 24484                           fsr2l	equ	0xFD9
 24485                           status	equ	0xFD8
 24486                           
 24487 ;; *************** function i2_I2C_Master_Stop *****************
 24488 ;; Defined at:
 24489 ;;		line 43 in file "I2C.c"
 24490 ;; Parameters:    Size  Location     Type
 24491 ;;		None
 24492 ;; Auto vars:     Size  Location     Type
 24493 ;;		None
 24494 ;; Return value:  Size  Location     Type
 24495 ;;                  1    wreg      void 
 24496 ;; Registers used:
 24497 ;;		wreg, status,2, status,0, cstack
 24498 ;; Tracked objects:
 24499 ;;		On entry : 0/0
 24500 ;;		On exit  : 0/0
 24501 ;;		Unchanged: 0/0
 24502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24507 ;;Total ram usage:        0 bytes
 24508 ;; Hardware stack levels used:    1
 24509 ;; Hardware stack levels required when called:    1
 24510 ;; This function calls:
 24511 ;;		i2_I2C_Master_Wait
 24512 ;; This function is called by:
 24513 ;;		i2_getRTC
 24514 ;; This function uses a non-reentrant model
 24515 ;;
 24516                           
 24517                           	psect	text92
 24518  0057A0                     __ptext92:
 24519                           	opt stack 0
 24520  0057A0                     i2_I2C_Master_Stop:
 24521                           	opt stack 19
 24522                           
 24523                           ;I2C.c: 45: I2C_Master_Wait();
 24524                           
 24525                           ;incstack = 0
 24526  0057A0  EC95  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24527                           
 24528                           ;I2C.c: 46: PEN = 1;
 24529  0057A4  84C5               	bsf	4037,2,c	;volatile
 24530  0057A6  0012               	return		;funcret
 24531  0057A8                     __end_ofi2_I2C_Master_Stop:
 24532                           	opt stack 0
 24533                           pclatu	equ	0xFFB
 24534                           pclath	equ	0xFFA
 24535                           tblptru	equ	0xFF8
 24536                           tblptrh	equ	0xFF7
 24537                           tblptrl	equ	0xFF6
 24538                           tablat	equ	0xFF5
 24539                           prodh	equ	0xFF4
 24540                           prodl	equ	0xFF3
 24541                           intcon	equ	0xFF2
 24542                           intcon2	equ	0xFF1
 24543                           intcon3	equ	0xFF0
 24544                           indf0	equ	0xFEF
 24545                           postinc0	equ	0xFEE
 24546                           fsr0h	equ	0xFEA
 24547                           fsr0l	equ	0xFE9
 24548                           wreg	equ	0xFE8
 24549                           postdec1	equ	0xFE5
 24550                           fsr1h	equ	0xFE2
 24551                           fsr1l	equ	0xFE1
 24552                           indf2	equ	0xFDF
 24553                           postinc2	equ	0xFDE
 24554                           postdec2	equ	0xFDD
 24555                           fsr2h	equ	0xFDA
 24556                           fsr2l	equ	0xFD9
 24557                           status	equ	0xFD8
 24558                           
 24559 ;; *************** function i2_I2C_Master_Start *****************
 24560 ;; Defined at:
 24561 ;;		line 31 in file "I2C.c"
 24562 ;; Parameters:    Size  Location     Type
 24563 ;;		None
 24564 ;; Auto vars:     Size  Location     Type
 24565 ;;		None
 24566 ;; Return value:  Size  Location     Type
 24567 ;;                  1    wreg      void 
 24568 ;; Registers used:
 24569 ;;		wreg, status,2, status,0, cstack
 24570 ;; Tracked objects:
 24571 ;;		On entry : 0/0
 24572 ;;		On exit  : 0/0
 24573 ;;		Unchanged: 0/0
 24574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24579 ;;Total ram usage:        0 bytes
 24580 ;; Hardware stack levels used:    1
 24581 ;; Hardware stack levels required when called:    1
 24582 ;; This function calls:
 24583 ;;		i2_I2C_Master_Wait
 24584 ;; This function is called by:
 24585 ;;		i2_getRTC
 24586 ;; This function uses a non-reentrant model
 24587 ;;
 24588                           
 24589                           	psect	text93
 24590  0057A8                     __ptext93:
 24591                           	opt stack 0
 24592  0057A8                     i2_I2C_Master_Start:
 24593                           	opt stack 19
 24594                           
 24595                           ;I2C.c: 33: I2C_Master_Wait();
 24596                           
 24597                           ;incstack = 0
 24598  0057A8  EC95  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24599                           
 24600                           ;I2C.c: 34: SEN = 1;
 24601  0057AC  80C5               	bsf	4037,0,c	;volatile
 24602  0057AE  0012               	return		;funcret
 24603  0057B0                     __end_ofi2_I2C_Master_Start:
 24604                           	opt stack 0
 24605                           pclatu	equ	0xFFB
 24606                           pclath	equ	0xFFA
 24607                           tblptru	equ	0xFF8
 24608                           tblptrh	equ	0xFF7
 24609                           tblptrl	equ	0xFF6
 24610                           tablat	equ	0xFF5
 24611                           prodh	equ	0xFF4
 24612                           prodl	equ	0xFF3
 24613                           intcon	equ	0xFF2
 24614                           intcon2	equ	0xFF1
 24615                           intcon3	equ	0xFF0
 24616                           indf0	equ	0xFEF
 24617                           postinc0	equ	0xFEE
 24618                           fsr0h	equ	0xFEA
 24619                           fsr0l	equ	0xFE9
 24620                           wreg	equ	0xFE8
 24621                           postdec1	equ	0xFE5
 24622                           fsr1h	equ	0xFE2
 24623                           fsr1l	equ	0xFE1
 24624                           indf2	equ	0xFDF
 24625                           postinc2	equ	0xFDE
 24626                           postdec2	equ	0xFDD
 24627                           fsr2h	equ	0xFDA
 24628                           fsr2l	equ	0xFD9
 24629                           status	equ	0xFD8
 24630                           
 24631 ;; *************** function i2_I2C_Master_Read *****************
 24632 ;; Defined at:
 24633 ;;		line 55 in file "I2C.c"
 24634 ;; Parameters:    Size  Location     Type
 24635 ;;  a               1    wreg     unsigned char 
 24636 ;; Auto vars:     Size  Location     Type
 24637 ;;  a               1    1[COMRAM] unsigned char 
 24638 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 24639 ;; Return value:  Size  Location     Type
 24640 ;;                  1    wreg      unsigned char 
 24641 ;; Registers used:
 24642 ;;		wreg, status,2, status,0, cstack
 24643 ;; Tracked objects:
 24644 ;;		On entry : 0/0
 24645 ;;		On exit  : 0/0
 24646 ;;		Unchanged: 0/0
 24647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24649 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24651 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24652 ;;Total ram usage:        2 bytes
 24653 ;; Hardware stack levels used:    1
 24654 ;; Hardware stack levels required when called:    1
 24655 ;; This function calls:
 24656 ;;		i2_I2C_Master_Wait
 24657 ;; This function is called by:
 24658 ;;		i2_getRTC
 24659 ;; This function uses a non-reentrant model
 24660 ;;
 24661                           
 24662                           	psect	text94
 24663  005604                     __ptext94:
 24664                           	opt stack 0
 24665  005604                     i2_I2C_Master_Read:
 24666                           	opt stack 19
 24667                           
 24668                           ;incstack = 0
 24669                           ;i2I2C_Master_Read@a stored from wreg
 24670  005604  6E02               	movwf	i2I2C_Master_Read@a,c
 24671                           
 24672                           ;I2C.c: 57: unsigned char temp;
 24673                           ;I2C.c: 58: I2C_Master_Wait();
 24674  005606  EC95  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24675                           
 24676                           ;I2C.c: 59: RCEN = 1;
 24677  00560A  86C5               	bsf	4037,3,c	;volatile
 24678                           
 24679                           ;I2C.c: 60: I2C_Master_Wait();
 24680  00560C  EC95  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24681                           
 24682                           ;I2C.c: 61: temp = SSPBUF;
 24683  005610  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 24684                           
 24685                           ;I2C.c: 62: I2C_Master_Wait();
 24686  005614  EC95  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24687                           
 24688                           ;I2C.c: 63: ACKDT = (a)?0:1;
 24689  005618  5002               	movf	i2I2C_Master_Read@a,w,c
 24690  00561A  A4D8               	btfss	status,2,c
 24691  00561C  D002               	goto	i2u477_40
 24692  00561E  8AC5               	bsf	4037,5,c	;volatile
 24693  005620  D001               	goto	i2l6436
 24694  005622                     i2u477_40:
 24695  005622  9AC5               	bcf	4037,5,c	;volatile
 24696  005624                     i2l6436:
 24697                           
 24698                           ;I2C.c: 64: ACKEN = 1;
 24699  005624  88C5               	bsf	4037,4,c	;volatile
 24700                           
 24701                           ;I2C.c: 65: return temp;
 24702  005626  5003               	movf	i2I2C_Master_Read@temp,w,c
 24703  005628  0012               	return	
 24704  00562A                     __end_ofi2_I2C_Master_Read:
 24705                           	opt stack 0
 24706                           pclatu	equ	0xFFB
 24707                           pclath	equ	0xFFA
 24708                           tblptru	equ	0xFF8
 24709                           tblptrh	equ	0xFF7
 24710                           tblptrl	equ	0xFF6
 24711                           tablat	equ	0xFF5
 24712                           prodh	equ	0xFF4
 24713                           prodl	equ	0xFF3
 24714                           intcon	equ	0xFF2
 24715                           intcon2	equ	0xFF1
 24716                           intcon3	equ	0xFF0
 24717                           indf0	equ	0xFEF
 24718                           postinc0	equ	0xFEE
 24719                           fsr0h	equ	0xFEA
 24720                           fsr0l	equ	0xFE9
 24721                           wreg	equ	0xFE8
 24722                           postdec1	equ	0xFE5
 24723                           fsr1h	equ	0xFE2
 24724                           fsr1l	equ	0xFE1
 24725                           indf2	equ	0xFDF
 24726                           postinc2	equ	0xFDE
 24727                           postdec2	equ	0xFDD
 24728                           fsr2h	equ	0xFDA
 24729                           fsr2l	equ	0xFD9
 24730                           status	equ	0xFD8
 24731                           
 24732 ;; *************** function i2_I2C_Master_Wait *****************
 24733 ;; Defined at:
 24734 ;;		line 26 in file "I2C.c"
 24735 ;; Parameters:    Size  Location     Type
 24736 ;;		None
 24737 ;; Auto vars:     Size  Location     Type
 24738 ;;		None
 24739 ;; Return value:  Size  Location     Type
 24740 ;;                  1    wreg      void 
 24741 ;; Registers used:
 24742 ;;		wreg, status,2, status,0
 24743 ;; Tracked objects:
 24744 ;;		On entry : 0/0
 24745 ;;		On exit  : 0/0
 24746 ;;		Unchanged: 0/0
 24747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24750 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24751 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24752 ;;Total ram usage:        1 bytes
 24753 ;; Hardware stack levels used:    1
 24754 ;; This function calls:
 24755 ;;		Nothing
 24756 ;; This function is called by:
 24757 ;;		i2_I2C_Master_Start
 24758 ;;		i2_I2C_Master_Stop
 24759 ;;		i2_I2C_Master_Write
 24760 ;;		i2_I2C_Master_Read
 24761 ;; This function uses a non-reentrant model
 24762 ;;
 24763                           
 24764                           	psect	text95
 24765  00572A                     __ptext95:
 24766                           	opt stack 0
 24767  00572A                     i2_I2C_Master_Wait:
 24768                           	opt stack 19
 24769  00572A                     i2l66:
 24770  00572A  B4C7               	btfsc	4039,2,c	;volatile
 24771  00572C  D7FE               	goto	i2l66
 24772  00572E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 24773  005732  0E1F               	movlw	31
 24774  005734  1601               	andwf	??i2_I2C_Master_Wait,f,c
 24775  005736  B4D8               	btfsc	status,2,c
 24776  005738  0012               	return	
 24777  00573A  D7F7               	goto	i2l66
 24778  00573C                     __end_ofi2_I2C_Master_Wait:
 24779                           	opt stack 0
 24780                           pclatu	equ	0xFFB
 24781                           pclath	equ	0xFFA
 24782                           tblptru	equ	0xFF8
 24783                           tblptrh	equ	0xFF7
 24784                           tblptrl	equ	0xFF6
 24785                           tablat	equ	0xFF5
 24786                           prodh	equ	0xFF4
 24787                           prodl	equ	0xFF3
 24788                           intcon	equ	0xFF2
 24789                           intcon2	equ	0xFF1
 24790                           intcon3	equ	0xFF0
 24791                           indf0	equ	0xFEF
 24792                           postinc0	equ	0xFEE
 24793                           fsr0h	equ	0xFEA
 24794                           fsr0l	equ	0xFE9
 24795                           wreg	equ	0xFE8
 24796                           postdec1	equ	0xFE5
 24797                           fsr1h	equ	0xFE2
 24798                           fsr1l	equ	0xFE1
 24799                           indf2	equ	0xFDF
 24800                           postinc2	equ	0xFDE
 24801                           postdec2	equ	0xFDD
 24802                           fsr2h	equ	0xFDA
 24803                           fsr2l	equ	0xFD9
 24804                           status	equ	0xFD8
 24805                           
 24806 ;; *************** function i2_delay_ms *****************
 24807 ;; Defined at:
 24808 ;;		line 634 in file "sort.c"
 24809 ;; Parameters:    Size  Location     Type
 24810 ;;  milliseconds    1    wreg     unsigned char 
 24811 ;; Auto vars:     Size  Location     Type
 24812 ;;  milliseconds    1    1[COMRAM] unsigned char 
 24813 ;; Return value:  Size  Location     Type
 24814 ;;                  1    wreg      void 
 24815 ;; Registers used:
 24816 ;;		wreg, status,2, status,0, cstack
 24817 ;; Tracked objects:
 24818 ;;		On entry : 0/0
 24819 ;;		On exit  : 0/0
 24820 ;;		Unchanged: 0/0
 24821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24824 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24825 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24826 ;;Total ram usage:        2 bytes
 24827 ;; Hardware stack levels used:    1
 24828 ;; This function calls:
 24829 ;;		Nothing
 24830 ;; This function is called by:
 24831 ;;		_printSortTimer
 24832 ;; This function uses a non-reentrant model
 24833 ;;
 24834                           
 24835                           	psect	text96
 24836  0056CC                     __ptext96:
 24837                           	opt stack 0
 24838  0056CC                     i2_delay_ms:
 24839                           	opt stack 22
 24840                           
 24841                           ;incstack = 0
 24842                           ;i2delay_ms@milliseconds stored from wreg
 24843  0056CC  6E02               	movwf	i2delay_ms@milliseconds,c
 24844                           
 24845                           ;sort.c: 635: while(milliseconds > 0)
 24846  0056CE  D008               	goto	i2l8920
 24847  0056D0                     i2l8916:
 24848                           
 24849                           ;sort.c: 636: {
 24850                           ;sort.c: 637: milliseconds--;
 24851  0056D0  0602               	decf	i2delay_ms@milliseconds,f,c
 24852                           
 24853                           ;sort.c: 638: _delay((unsigned long)((990)*(32000000/4000000.0)));
 24854  0056D2  0E0B               	movlw	11
 24855  0056D4  6E01               	movwf	??i2_delay_ms& (0+255),c
 24856  0056D6  0E48               	movlw	72
 24857  0056D8                     i2u1094_47:
 24858  0056D8  2EE8               	decfsz	wreg,f,c
 24859  0056DA  D7FE               	bra	i2u1094_47
 24860  0056DC  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 24861  0056DE  D7FC               	bra	i2u1094_47
 24862  0056E0                     i2l8920:
 24863  0056E0  5002               	movf	i2delay_ms@milliseconds,w,c
 24864  0056E2  B4D8               	btfsc	status,2,c
 24865  0056E4  0012               	return	
 24866  0056E6  D7F4               	goto	i2l8916
 24867  0056E8                     __end_ofi2_delay_ms:
 24868                           	opt stack 0
 24869                           pclatu	equ	0xFFB
 24870                           pclath	equ	0xFFA
 24871                           tblptru	equ	0xFF8
 24872                           tblptrh	equ	0xFF7
 24873                           tblptrl	equ	0xFF6
 24874                           tablat	equ	0xFF5
 24875                           prodh	equ	0xFF4
 24876                           prodl	equ	0xFF3
 24877                           intcon	equ	0xFF2
 24878                           intcon2	equ	0xFF1
 24879                           intcon3	equ	0xFF0
 24880                           indf0	equ	0xFEF
 24881                           postinc0	equ	0xFEE
 24882                           fsr0h	equ	0xFEA
 24883                           fsr0l	equ	0xFE9
 24884                           wreg	equ	0xFE8
 24885                           postdec1	equ	0xFE5
 24886                           fsr1h	equ	0xFE2
 24887                           fsr1l	equ	0xFE1
 24888                           indf2	equ	0xFDF
 24889                           postinc2	equ	0xFDE
 24890                           postdec2	equ	0xFDD
 24891                           fsr2h	equ	0xFDA
 24892                           fsr2l	equ	0xFD9
 24893                           status	equ	0xFD8
 24894                           pclatu	equ	0xFFB
 24895                           pclath	equ	0xFFA
 24896                           tblptru	equ	0xFF8
 24897                           tblptrh	equ	0xFF7
 24898                           tblptrl	equ	0xFF6
 24899                           tablat	equ	0xFF5
 24900                           prodh	equ	0xFF4
 24901                           prodl	equ	0xFF3
 24902                           intcon	equ	0xFF2
 24903                           intcon2	equ	0xFF1
 24904                           intcon3	equ	0xFF0
 24905                           indf0	equ	0xFEF
 24906                           postinc0	equ	0xFEE
 24907                           fsr0h	equ	0xFEA
 24908                           fsr0l	equ	0xFE9
 24909                           wreg	equ	0xFE8
 24910                           postdec1	equ	0xFE5
 24911                           fsr1h	equ	0xFE2
 24912                           fsr1l	equ	0xFE1
 24913                           indf2	equ	0xFDF
 24914                           postinc2	equ	0xFDE
 24915                           postdec2	equ	0xFDD
 24916                           fsr2h	equ	0xFDA
 24917                           fsr2l	equ	0xFD9
 24918                           status	equ	0xFD8
 24919                           
 24920                           	psect	rparam
 24921  0000                     pclatu	equ	0xFFB
 24922                           pclath	equ	0xFFA
 24923                           tblptru	equ	0xFF8
 24924                           tblptrh	equ	0xFF7
 24925                           tblptrl	equ	0xFF6
 24926                           tablat	equ	0xFF5
 24927                           prodh	equ	0xFF4
 24928                           prodl	equ	0xFF3
 24929                           intcon	equ	0xFF2
 24930                           intcon2	equ	0xFF1
 24931                           intcon3	equ	0xFF0
 24932                           indf0	equ	0xFEF
 24933                           postinc0	equ	0xFEE
 24934                           fsr0h	equ	0xFEA
 24935                           fsr0l	equ	0xFE9
 24936                           wreg	equ	0xFE8
 24937                           postdec1	equ	0xFE5
 24938                           fsr1h	equ	0xFE2
 24939                           fsr1l	equ	0xFE1
 24940                           indf2	equ	0xFDF
 24941                           postinc2	equ	0xFDE
 24942                           postdec2	equ	0xFDD
 24943                           fsr2h	equ	0xFDA
 24944                           fsr2l	equ	0xFD9
 24945                           status	equ	0xFD8
 24946                           
 24947                           	psect	temp
 24948  00007E                     btemp:
 24949                           	opt stack 0
 24950  00007E                     	ds	1
 24951  0000                     int$flags	set	btemp
 24952                           pclatu	equ	0xFFB
 24953                           pclath	equ	0xFFA
 24954                           tblptru	equ	0xFF8
 24955                           tblptrh	equ	0xFF7
 24956                           tblptrl	equ	0xFF6
 24957                           tablat	equ	0xFF5
 24958                           prodh	equ	0xFF4
 24959                           prodl	equ	0xFF3
 24960                           intcon	equ	0xFF2
 24961                           intcon2	equ	0xFF1
 24962                           intcon3	equ	0xFF0
 24963                           indf0	equ	0xFEF
 24964                           postinc0	equ	0xFEE
 24965                           fsr0h	equ	0xFEA
 24966                           fsr0l	equ	0xFE9
 24967                           wreg	equ	0xFE8
 24968                           postdec1	equ	0xFE5
 24969                           fsr1h	equ	0xFE2
 24970                           fsr1l	equ	0xFE1
 24971                           indf2	equ	0xFDF
 24972                           postinc2	equ	0xFDE
 24973                           postdec2	equ	0xFDD
 24974                           fsr2h	equ	0xFDA
 24975                           fsr2l	equ	0xFD9
 24976                           status	equ	0xFD8


Data Sizes:
    Strings     1344
    Constant    27
    Data        8
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      79
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_130(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_129(CODE[18]), STR_128(CODE[18]), STR_127(CODE[17]), STR_126(CODE[17]), 
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), 
		 -> STR_113(CODE[17]), STR_112(CODE[17]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  224639
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23551
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17975
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11542
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10795
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23480
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22566
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46712
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13467
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118241
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9211
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9168
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9099
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15735
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        16    16      0    9464
                                             43 BANK0     16    16      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19885
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9283
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8964
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4F       7       30.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     14C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 09 22:02:16 2017

                                    _i 013D                     i2_I2C_Master_Start 57A8  
                   i2_I2C_Master_Write 577E                                     l66 5716  
                                   _ID 3170                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 5190                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 00E2  
                                  l501 44E8                                    l183 00E6  
                                  l620 29F4                                    l188 0102  
                                  l811 15B2                                    l803 16B4  
                                  l812 15DA                                    l813 1602  
                                  l814 162A                                    l815 1654  
                                  l840 33D4                                    l833 32E4  
                                  l809 158C                                    l834 32FE  
                                  l835 333C                                    l819 1700  
                                  l836 3322                                    l776 125E  
                                  l794 1424                                    l786 1328  
                                  l892 49E8                                    l797 1472  
                                  l789 1376                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3BBE                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 40AC  
                                  _log 00F4                                    _sel 00FD  
                                  _var 0145                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3D42                    _log_count_can_w_lab 0141  
                           i2_delay_ms 56CC        __end_of_change_state_to_menu_11 53C0  
      __end_of_change_state_to_menu_12 5200        __end_of_change_state_to_menu_22 51C8  
      __end_of_change_state_to_menu_23 5390           _f_can_coming_to_distribution 0133  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 54B0  
      __end_of_change_state_to_logs_12 5480        __end_of_change_state_to_logs_22 5450  
      __end_of_change_state_to_logs_23 550C        __end_of_change_state_to_logs_33 5420  
      __end_of_change_state_to_logs_34 53F0                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1200 3FEC  
                                 l1203 400C                                   l1107 3E70  
                                 l1223 43D2                                   l1312 111C  
                                 l1232 269E                                   l1226 43D6  
                                 l1331 4F34                                   l1307 1046  
                                 l1235 26A2                                   l1420 3CE0  
                                 l1421 3CFA                                   l1325 4F24  
                                 l1261 0944                                   l1085 41CC  
                                 l1270 0B04                                   l1415 3C94  
                                 l1271 0B52                                   l1265 09EA  
                                 l1346 22C4                                   l1258 0940  
                                 l1098 56F8                                   l1363 224C  
                                 l1355 21B0                                   l1435 419C  
                                 l1452 4EC8                                   l1268 0A50  
                                 l1444 4196                                   l1436 415E  
                                 l1269 0A9E                                   l1367 22A4  
                                 l1359 21F4                                   l1391 4A6E  
                                 l1295 0EAC                                   l1369 22BE  
                                 l1458 4ED8                                   l1492 1954  
                                 ?_arm 0001                                   l1398 4A7E  
                                 l1939 4B94                                   l1949 4E1A  
                                 l1886 4734                                   l7102 476A  
                                 l7202 4BC2                                   l6412 4E0C  
                                 l6404 4DD6                                   l8012 09AE  
                                 l7108 47E0                                   l6406 4DE2  
                                 l6326 554C                                   l8102 0BD8  
                                 l8022 09D6                                   l8014 09B4  
                                 l6350 54D6                                   l7310 48EA  
                                 l7214 4BEC                                   l6408 4DE8  
                                 l6520 171C                                   l6328 555E  
                                 l8112 0C00                                   l9000 01EA  
                                 l7160 427A                                   l7144 4238  
                                 l7152 425A                                   l6530 174C  
                                 l8210 0E00                                   l8202 0DDE  
                                 l8106 0BF0                                   l8018 09BE  
                                 l7306 48D4                                   l7170 55AA  
                                 l7218 4C04                                   l6620 1A4C  
                                 l6524 1730                                   l8300 0FC2  
                                 l8220 0E28                                   l8212 0E06  
                                 l8132 0C74                                   l8124 0C52  
                                 l8116 0C18                                   l8108 0BF6  
                                 l9100 0540                                   l9020 024A  
                                 l7316 4916                                   l7156 4270  
                                 l7148 4242                                   l6614 1A0A  
                                 l6526 1742                                   l8206 0DE8  
                                 l8150 0CD6                                   l8142 0C9C  
                                 l8134 0C7A                                   l9110 055C  
                                 l9006 01F8                                   l6710 46C8  
                                 l7166 5594                                   _ADIE 007CEE  
                                 l6384 4B44                                   l6368 5584  
                                 l6632 1A82                                   l6608 19E8  
                                 l6552 182E                                   l6544 17FC  
                                 l6536 1780                                   l8312 1006  
                                 l8232 0E6C                                   l8216 0E10  
                                 l8160 0CFE                                   l8128 0C5C  
                                 l9024 0254                                   l6720 4722  
                                 l6712 46CE                                   l6386 4B50  
                                 l6634 1A8E                                   l6642 1ABC  
                                 l6626 1A66                                   l6618 1A42  
                                 l6562 18A6                                   l6554 183A  
                                 l6650 1B26                                   l8322 102E  
                                 l8242 0E94                                   l8154 0CE0  
                                 l8138 0C84                                   l9114 0574  
                                 l9106 0552                                   l9042 02A0  
                                 l9034 027E                                   l7098 4754  
                                 l7522 121C                                   l6396 4B86  
                                 l6388 4B56                                   l6644 1AC2  
                                 l6572 18FC                                   l6564 18B2  
                                 l6556 1840                                   l8316 101E  
                                 l8308 0FFC                                   l8260 0EFE  
                                 l8236 0E84                                   l8228 0E62  
                                 l8180 0D64                                   l8164 0D08  
                                 l9060 0310                                   l9028 026C  
                                 l6708 46B8                                   l7532 1266  
                                 l6638 1AA8                                   l6590 198C  
                                 l6574 1914                                   l6566 18B8  
                                 l8350 10B8                                   l8342 1096  
                                 l8318 1024                                   l8270 0F26  
                                 l8238 0E8A                                   l8190 0D8C  
                                 l8158 0CF8                                   l8430 4146  
                                 l6662 495E                                   l6654 520A  
                                 l9222 07D4                                   l9214 07B2  
                                 l9142 065C                                   l9134 063A  
                                 l9070 03A6                                   l9062 032E  
                                 l9038 0288                                   l7198 4BAC  
                                 l7606 140E                                   l6648 1B1A  
                                 l6568 18D0                                   l8360 10E0  
                                 l8352 10BE                                   l8264 0F16  
                                 l8256 0EF4                                   l8184 0D7C  
                                 l8176 0D5A                                   l8168 0D20  
                                 l8440 417E                                   l8432 4150  
                                 l6672 4994                                   l6656 5216  
                                 l9232 07F0                                   l9152 0678  
                                 l9080 043C                                   l9072 03C4  
                                 l9064 034C                                   l7640 1504  
                                 l7632 14C6                                   l7616 1452  
                                 l6594 19A6                                   l6578 191A  
                                 l6690 49CC                                   l8346 10A0  
                                 l8290 0F9A                                   l8282 0F78  
                                 l8274 0F3E                                   l8266 0F1C  
                                 l8194 0DA4                                   l8186 0D82  
                                 l8098 0BCE                                   l8442 4188  
                                 l8426 4120                                   l6666 4974  
                                 l6930 2A76                                   l6922 29FE  
                                 l9218 07BC                                   l9138 0644  
                                 l9082 045A                                   l9074 03E2  
                                 l9066 036A                                   l9058 02F2  
                                 l7706 16F4                                   l7618 145C  
                                 l6596 19AC                                   l8604 21CA  
                                 l8356 10C8                                   l8292 0FA0  
                                 l7900 26F2                                   l6940 2B0C  
                                 l6932 2A94                                   l6924 2A1C  
                                 l6916 2972                                   l9236 0808  
                                 l9228 07E6                                   l9156 0690  
                                 l9148 066E                                   l9092 051E  
                                 l9076 0400                                   l9068 0388  
                                 l7820 42AA                                   l7628 14A0  
                                 l7708 1702                                   l7580 1360  
                                 l7548 12A2                                   l8622 2236  
                                 l8382 1146                                   l8366 1106  
                                 l8286 0F82                                   l8438 4164  
                                 l6942 2B2A                                   l6934 2AB2  
                                 l6926 2A3A                                   l6950 2BC4  
                                 l9262 0888                                   l9254 0866  
                                 l9182 0718                                   l9174 06F6  
                                 l9078 041E                                   l9086 0478  
                                 l7822 42C4                                   l7830 4312  
                                 l7806 3392                                   l7814 33D6  
                                 l7590 13A4                                   l6696 4A06  
                                 l8632 227A                                   l8608 21DE  
                                 l8528 1F94                                   l8392 116E  
                                 l8376 1136                                   l8296 0FAA  
                                 l9600 403C                                   l6944 2B48  
                                 l6936 2AD0                                   l6928 2A58  
                                 l9272 08A4                                   l9192 0734  
                                 l9096 0528                                   l9088 04DC  
                                 l9280 08C8                                   l7824 42DE  
                                 l7832 4340                                   l7760 32A8  
                                 l7744 3260                                   l7656 1568  
                                 l7568 1312                                   l8802 3CFC  
                                 l8618 2222                                   l8546 2044  
                                 l8386 115E                                   l8378 113C  
                                 l7930 27FA                                   l9602 4042  
                                 l9610 40A0                                   l6938 2AEE  
                                 l9258 0870                                   l9178 0700  
                                 l9530 3D8E                                   l7826 42F8  
                                 l7770 32CE                                   l7762 32AA  
                                 l7578 1356                                   l8804 3D0C  
                                 l8636 228E                                   l8548 204A  
                                 l8492 4AA6                                   l8396 1186  
                                 l8388 1164                                   l9604 4048  
                                 l6948 2B66                                   l9276 08BC  
                                 l9268 089A                                   l9196 074C  
                                 l9188 072A                                   l9532 3DA2  
                                 l7780 3302                                   l7756 3298  
                                 l7748 3270                                   l8590 2186  
                                 l8566 20FA                                   l7918 27AA  
                                 l8830 461C                                   l7782 330C  
                                 l7686 166A                                   l7694 16BC  
                                 l8808 3D3C                                   l8584 215C  
                                 l7960 28EE                                   l7936 283C  
                                 l9608 404E                                   l8832 4628  
                                 l8824 45FE                                   l7688 16A0  
                                 l8762 3C32                                   l8594 219A  
                                 l8586 2172                                   l8578 213C  
                                 l9570 3FA8                                   l8850 4680  
                                 l8842 465E                                   l8834 462E  
                                 l8818 45E8                                   l9810 44C0  
                                 l9802 4494                                   l7972 2936  
                                 l7956 28B8                                   l7948 2888  
                                 l9556 3E2A                                   l9820 44DE  
                                 l9812 44C6                                   l9804 44AA  
                                 l8790 3CC0                                   l8782 3C96  
                                 l8766 3C62                                   l9590 401E  
                                 l8846 466C                                   l8870 4830  
                                 l8862 480C                                   l9822 44E4  
                                 l8792 3CCA                                   l8784 3CA6  
                                 l7968 2900                                   l9592 4024  
                                 l8872 483C                                   l8960 0128  
                                 l9808 44BA                                   l9594 402A  
                                 l9586 4012                                   l8874 4842  
                                 l8882 4874                                   l8866 481C  
                                 l8954 00FE                                   l9826 44EA  
                                 l9596 4030                                   l9588 4018  
                                 l8972 015C                                   l8964 013A  
                                 l9598 4036                                   l8886 4888  
                                 l8878 4866                                   l8990 01C2  
                                 STR_1 FB69                                   l8992 01C8  
                                 l8976 016E                                   l8968 0144  
                                 STR_2 FF31                                   STR_3 FB57  
                                 STR_4 FE54                                   STR_5 FB57  
                                 l8996 01D2                                   STR_6 FDF0  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u6130 14E4  
                                 _PEIE 007F96                                   u7120 413C  
                                 u6400 33D4                                   u6240 31CA  
                                 u7130 413E                                   u6250 3220  
                                 u4900 50C6                                   u6500 28DC  
                                 u6180 158A                                   u6148 14E8  
                                 _RCEN 007E2B                                   u7310 1FD6  
                                 u4670 54D4                                   u7320 1FD8  
                                 u6600 09EA                                   u6248 31CE  
                                 u7170 4174                                   u6530 2924  
                                 u6258 3224                                   u7340 208C  
                                 u6620 0A9E                                   u7180 4176  
                                 u6508 28E0                                   u6460 2734  
                                 u5580 29F4                                   u6380 339E  
                                 u5565 4E54                                   u4950 187A  
                                 u7350 208E                                   u6470 2736  
                                 u4870 5078                                   u7600 3BF4  
                                 u7440 216A                                   u7408 2128  
                                 u6640 0B52                                   u4880 507A  
                                 i2l66 572A                                   u7610 3C50  
                                 u7450 2182                                   u4890 50C4  
                                 u6538 2928                                   u5930 1228  
                                 u7451 217E                                   u4891 50C0  
                                 u4957 1870                                   u4990 18F2  
                                 u7390 2124                                   u6398 33A2  
                                 u5950 125E                                   u7711 3CB6  
                                 u7720 3CB8                                   u7608 3BF8  
                                 u7618 3C54                                   u9307 13DC  
                                 u5948 122C                                   u4997 18E8  
                                 u7661 3C8A                                   u9317 142E  
                                 u9237 11AC                                   u7670 3C8C  
                                 u9407 15BC                                   u9327 1440  
                                 u9247 12D0                                   u9417 15D0  
                                 u9337 147C                                   u9257 1332  
                                 u7770 3D2A                                   u9507 528A  
                                 u9427 15E4                                   u9347 148E  
                                 u9267 1344                                   u9517 4BCA  
                                 u9437 15F8                                   u9357 14AE  
                                 u9277 1380                                   u9607 3356  
                                 u9527 318A                                   u9447 160C  
                                 u9367 151E                                   u9287 1392  
                                 u9617 55A0                                   u9537 31B0  
                                 u9457 1620                                   u9377 1556  
                                 u9297 13B2                                   u7778 3D2E  
                                 u8850 3E70                                   u9707 0184  
                                 u9627 41EE                                   u9547 31E8  
                                 u9467 1634                                   u9387 1596  
                                 u9717 01DA                                   u9637 424A  
                                 u9557 3206                                   u9477 1648  
                                 u9397 15A8                                   u9807 0680  
                                 u9727 0206                                   u9647 4282  
                                 u9567 32E8                                   u9487 165E  
                                 u9817 06AA                                   u9737 025C  
                                 u9657 50D6                                   u9577 32F2  
                                 u9497 16D6                                   u9907 3FB6  
                                 u9827 0708                                   u9747 0290  
                                 u9667 510A                                   u9587 3326  
                                 u9917 264E                                   u9837 073C  
                                 u9757 02BA                                   u9677 002A  
                                 u9597 3330                                   u9927 2692  
                                 u9847 0766                                   u9767 0530  
                                 u9687 0114                                   u9937 26B4  
                                 u9857 07C4                                   u9777 0564  
                                 u9697 014C                                   u9947 26E2  
                                 u9867 07F8                                   u9787 058E  
                                 u9957 274A                                   u9877 0822  
                                 u9797 064C                                   u9967 279E  
                                 u9887 0878                                   u9977 27BE  
                                 u9897 08AC                                   u9987 27EC  
                                 _RSEN 007E29                                   u9997 2830  
                          _stopSignals 56B0                                   _Test 3FA6  
                                 _back 005B                                   _main 444A  
                                 _down 005D                                   _keys FAA3  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 564E                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 013F                        __end_ofi2_putch 5768  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 33E2                            i2_lcdNibble 4F3C  
                      __end_of_Loading 170E                   __end_of_actuatorTest 118E  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 4292  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 468A  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FABE  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FE01                                  STR_15 FFD2  
                                STR_23 FF23                                  STR_31 FDDF  
                                STR_16 FFE2                                  STR_24 FD46  
                                STR_32 FD24                                  STR_40 FCE0  
                                STR_17 FFF2                                  STR_25 FE23  
                                STR_33 FD35                                  STR_41 FCCF  
                                STR_18 FFF6                                  STR_34 FDCE  
                                STR_50 FDAC                                  STR_42 FD8A  
                                STR_26 FD57                                  STR_43 FD8A  
                                STR_35 FDCE                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE12  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD68                                  STR_36 FD13  
                                STR_44 FCF1                        __end_of___awmod 4892  
                                STR_45 FCE0                                  STR_37 FD24  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE20                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEDC  
                                STR_38 FDBD                                  STR_46 FD9B  
                                STR_47 FD9B                                  STR_55 FFFA  
                                STR_63 FABE                                  STR_71 FF15  
                                STR_39 FD79                                  STR_56 FFDE  
                                STR_64 FF7B                                  STR_80 FE64  
                                STR_48 FD02                                  STR_72 FC58  
                                STR_49 FCF1                                  STR_57 FFD6  
                                STR_81 FE20                                  STR_65 FF4C  
                                STR_73 FEF9                                  STR_58 FFD2  
                                STR_74 FF59                                  STR_90 FECD  
                                STR_82 FE91                                  STR_66 FAD6  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FEEB                                  STR_75 FEBE  
                                STR_83 FE34                                  STR_84 FF86  
                                STR_76 FF07                                  STR_68 FC8B  
                                STR_92 FC69                                  STR_85 FF86  
                                STR_77 FFAD                                  STR_93 FF65  
                                STR_69 FC9C                                  STR_78 FF15  
                                STR_86 FFA4                                  STR_94 FC7A  
                                STR_87 FFA4                                  STR_95 FF70  
                                STR_79 FF3F                                  STR_88 FF90  
                                STR_96 FEAF                                  STR_89 FF15  
                                STR_97 FBD0                                  STR_98 FBBF  
                                STR_99 FB9D           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4746  
         i2updateServoPosition@time_us 0001                                  u10007 284E  
                                u10017 287C                                  u10107 09C6  
                                u10027 2896                                  u10117 09FA  
                                u10037 40BA                                  u10207 0C64  
                                u10127 0A60                                  u10047 4382  
                                u10217 0C8C                                  u10137 0A7E  
                                u10057 43C6                                  u10307 0F06  
                                u10227 0CE8                                  u10147 0AAE  
                                u10067 43E8                                  u10317 0F2E  
                                u10237 0D10                                  u10157 0B14  
                                u10077 08F0                                  u10407 112A  
                                u10327 0F8A                                  u10247 0D6C  
                                u10167 0B32                                  u10087 0934  
                                _T0CON 000FD5                                  u10417 114E  
                                u10337 0FB2                                  u10257 0D94  
                                u10177 0B62                                  u10097 0956  
                                u10507 2038                                  u10427 1176  
                                u10347 100E                                  u10267 0DF0  
                                u10187 0BE0                        ___awdiv@divisor 0088  
                                u10517 20A2                                  u10437 4A38  
                                u10357 1036                                  u10277 0E18  
                                u10197 0C08                                  u10607 22B2  
                                u10527 20EE                                  u10447 4A88  
                                u10367 1058                                  u10287 0E74  
                                _T1CON 000FCD                                  u10617 5554  
                                u10537 21B4                                  u10457 4A9C  
                                u10377 10A8                                  u10297 0E9C  
                                u10707 1D50                                  u10627 1B54  
                                u10547 21BC                                  u10467 4E92  
                                u10387 10D0                                  u10717 1D84  
                                u10637 1BA0                                  u10557 21FE  
                                u10477 4EEE                                  u10397 1120  
                                u10807 4B0C                                  u10727 1DB6  
                                u10647 1BEC                                  u10567 2210  
                                u10487 1F72                                  _T2CON 000FCA  
                                u10817 3BCC                                  u10737 1E02  
                                u10657 1C20                                  u10577 2256  
                                u10497 1FEC                                  u10827 3CE4  
                                u10747 1E36                                  u10667 1C52  
                                u10587 2268                                  u10837 3CEE  
                                u10757 1E68                                  u10677 1C9E  
                                u10597 22A8                                  u10847 4D14  
                                u10767 1EB4                                  u10687 1CD2  
                                _T3CON 000FB1                                  u10857 4D1E  
                                u10777 1EE8                                  u10697 1D04  
                                u10867 4D4A                                  u10787 1F1A  
                                u10877 4D54                                  u10797 4AF0  
                      __end_of___lwdiv 4B9E                        __end_of___lwmod 4E24  
                                i2l263 2EC4                                  i2l620 3470  
                                i2l871 3096                                  i2l919 518C  
                                i2l892 4CB8                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1B46                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 575C                        __end_of_handler 380A  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5564  
                      __end_of_initLCD 5114                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                                _getIR 4B9E                        __end_of_loadRTC 491E  
                      __end_of_readMAG 50CE                        __end_of_dpowers FABE  
                                _first 0139                                  _enter 005F  
                                arm@on 00AC                        __end_of_isdigit 558E  
                                _input 007D                                  _putch 573C  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5604                       __end_ofi2_getRTC 4C82  
                  _log_count_pop_w_tab 0067                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 2640                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 52D0  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1221 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4FE8                           __end_of_Test 40AC  
                   __size_ofi2_lcdInst 000C                           __end_of_main 450E  
                         __end_of_keys FAB4                           __end_of_sort 5670  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3BBE  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01C8             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC25                                 STR_101 FC36  
                               STR_110 FCBE                                 STR_102 FB7B  
                               STR_103 FE44                                 STR_111 FAEB  
                               STR_112 FBE1                                 STR_104 FBAE  
                               STR_120 FB0F                                 STR_113 FC14  
                               STR_105 FB8C                                 STR_121 FAFD  
                               STR_106 FBAE                                 STR_114 FC14  
                               STR_130 FFB5                                 STR_122 FB45  
                               _ADRESH 000FC4                                 STR_107 FEA0  
                               STR_115 FC03                                 STR_123 FB21  
                               STR_116 FC14                                 STR_124 FB45  
                               STR_108 FE82                                 _EEADRH 000FAA  
                               STR_117 FC03                                 STR_125 FB45  
                               STR_109 FE73                                 STR_126 FBF2  
                               STR_118 FBF2                                 _ADRESL 000FC3  
                               STR_127 FCAD                                 STR_119 FC47  
                               STR_128 FAEB                                 STR_129 FB33  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 5330  
            i2_change_state_to_menu_22 5300                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1011 3706                                 i2l1020 37AE  
                               i2l1022 37CE                                 i2l1098 570E  
                               i2l1492 24AC                                 i2l1939 4FDE  
                               i2l1949 514C                                 i2l7070 3F5A  
                               i2l7066 3F4A                                 i2l6436 5624  
                               i2l6460 56A8                                 i2l6470 4FAC  
                               i2l7078 3F8E                                 i2l7422 3908  
                               i2l7270 34BC                                 i2l6472 4FB4  
                               i2l7432 392E                                 i2l7416 38FA  
                               i2l7408 38E2                                 i2l7360 382E  
                               i2l7280 352A                                 i2l7272 34D2  
                               i2l7264 347A                                 i2l6482 4FD4  
                               i2l6474 4FB8                                 i2l6490 5122  
                               i2l6802 2414                                 i2l7450 3968  
                               i2l7442 3950                                 i2l7426 3924  
                               i2l7370 3858                                 i2l7282 3540  
                               i2l7274 34E8                                 i2l7266 3490  
                               i2l7290 3582                                 i2l7258 340E  
                               i2l6732 4C48                                 i2l6492 512A  
                               i2l6812 2460                                 i2l6804 241E  
                               i2l7460 3988                                 i2l7436 3942  
                               i2l7372 385C                                 i2l7284 3556  
                               i2l7276 34FE                                 i2l7268 34A6  
                               i2l7292 35DC                                 i2l9300 2C4C  
                               i2l6742 4C72                                 i2l6494 512E  
                               i2l6830 24DA                                 i2l6814 2472  
                               i2l6806 2424                                 i2l7438 3946  
                               i2l7390 3892                                 i2l7382 387A  
                               i2l7286 356C                                 i2l7278 3514  
                               i2l6736 4C58                                 i2l6808 2436  
                               i2l6760 22DC                                 i2l7472 39BE  
                               i2l7464 399A                                 i2l7456 3976  
                               i2l7392 3898                                 i2l7384 3880  
                               i2l7368 3848                                 i2l9400 2DB6  
                               i2l9320 2C84                                 i2l9312 2C76  
                               i2l9304 2C5A                                 i2l6498 5142  
                               i2l6834 24F2                                 i2l6818 2476  
                               i2l6770 2300                                 i2l7386 3886  
                               i2l7378 3866                                 i2l6860 256E  
                               i2l6836 24F6                                 i2l6764 22EC  
                               i2l7468 39AC                                 i2l7388 388C  
                               i2l7396 389E                                 i2l9420 2E0C  
                               i2l9412 2DE8                                 i2l9404 2DCC  
                               i2l9340 2CCC                                 i2l9332 2CB0  
                               i2l9324 2C92                                 i2l9308 2C68  
                               i2l6854 2542                                 i2l6766 22FA  
                               i2l7478 39C8                                 i2l6872 259A  
                               i2l6848 2528                                 i2l6792 23BC  
                               i2l6784 2394                                 i2l6776 2332  
                               i2l9432 2E36                                 i2l9424 2E1A  
                               i2l9416 2DF6                                 i2l9408 2DDA  
                               i2l9360 2D1A                                 i2l9352 2CF6  
                               i2l9344 2CDA                                 i2l9336 2CBE  
                               i2l9328 2CA0                                 i2l6874 25A2  
                               i2l6882 25C8                                 i2l6866 2584  
                               i2l6858 2566                                 i2l6794 23C6  
                               i2l6890 2624                                 i2l9442 2E5A  
                               i2l6884 25CE                                 i2l6796 23CA  
                               i2l9620 2ED4                                 i2l9436 2E4C  
                               i2l9428 2E28                                 i2l9380 2D68  
                               i2l9372 2D4C                                 i2l9364 2D28  
                               i2l9356 2D0C                                 i2l9348 2CE8  
                               i2l9700 3A4A                                 i2l6878 25B6  
                               i2l9630 2F3E                                 i2l6894 52A8  
                               i2l9294 2C38                                 i2l8902 4CA0  
                               i2l8920 56E0                                 i2l6888 261C  
                               i2l9624 2EE4                                 i2l6896 52B0  
                               i2l9392 2D9A                                 i2l9384 2D76  
                               i2l9376 2D5A                                 i2l9368 2D36  
                               i2l9296 2C3E                                 i2l9642 300C  
                               i2l9722 3AEA                                 i2l9706 3A60  
                               i2l9714 3A7E                                 i2l8916 56D0  
                               i2l9396 2DA8                                 i2l9388 2D8C  
                               i2l8908 4CD2                                 i2l9708 3A74  
                               i2l9716 3AC8                                 i2l9654 3064  
                               i2l9662 3098                                 i2l9734 3B36  
                               i2l9718 3AD2                                 i2l9728 3B10  
                               i2l9912 3762                                 i2l9840 3688  
                               i2l9666 30CC                                 i2l9922 3782  
                               i2l9850 36B4                                 i2l9668 30D2  
                               i2l9780 5166                                 i2l9748 3B8C  
                               i2l9692 3A2A                                 i2l9844 3694  
                               i2l9694 3A34                                 i2l9918 377C  
                               i2l9838 3684                                 i2l9854 36BE  
                               i2l9784 516C                                 i2l9688 3A14  
                               i2l9944 37CC                                 i2l9848 369C  
                               i2l9778 5160                                 i2l9890 3724  
                               i2l9868 36DA                                 i2l9896 3732  
              _f_most_recent_sort_time 0137                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 55B6  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 564E                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4374  
                               ___wmul 5236                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 526C  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 491E                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5692  
                               _initUI 52D0                                 _readIR 5036  
                               _logRun 3D42                                 getIR@i 0087  
                               clear_0 500E                                 clear_1 501A  
                               clear_2 5026                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 4EE0  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 170E                              ??_handler 004B  
              __size_of_initGlobalVars 00BE                           ?_retrieveLog 0007  
                               _strcpy 5200                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 55DE  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 55B6                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 4FE8  
                     __end_of_printRTC 2C08                           __mediumconst FAA2  
                    __end_ofi2___lwmod 5156                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0065                  __end_of_algorithmTest 444A  
                    __end_ofi2_lcdInst 5774                      __end_ofi2_isdigit 56B0  
                           __accesstop 0080                __end_of__initialization 502C  
                        ?_inputHandler 002A                  _most_recent_sort_time 0069  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 5700                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 5788                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 4C10                            i2printRTC@i 0041  
                        _initSortTimer 4746            __end_of_updateServoPosition 4A2A  
                        __end_of_putch 574C                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 33E2  
                           __end_of_UI 08D6                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 5538          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 550C                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08D6                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 4CF2  
                         _EEPROM_write 41AA                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3241 0147               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                      __end_of_SpeedTest 4AAE  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 03EE  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2448 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10400 3BA4                                i2l10410 2EB6  
                              i2l10402 3BB4                                i2l10414 38B6  
                              i2l10406 2E78                                i2l10416 38D2  
                              i2l10408 2E9A                                i2l10392 3AA2  
                              i2l10394 3AAC                                i2l10396 3AB6  
                              i2l10398 3AC0                              ?_delay_ms 0001  
                       PlatformTest@on 00B9                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00EA  
                              i2_putch 575C                              ?_initTime 0080  
                      _f_loadingNewCan 00F2                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4D5E                                _Loading 118E  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 45CC  
                              ___awmod 47F0                             _initServos 4AAE  
                              ___lldiv 468A                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4B26  
                              ___lwmod 4DC2                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 4FE8  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 450E                                _lcdInst 574C  
                              _handler 0008                                __ptext0 444A  
                              __ptext1 564E                                __ptext2 118E  
                              __ptext3 4746                                __ptext4 450E  
                              __ptext5 526C                                __ptext6 4B9E  
                              __ptext7 5036                                __ptext8 3170  
                              __ptext9 558E                        __size_of_printf 0438  
                              _readADC 5538                        __size_of_strcpy 0036  
                              _initLCD 50CE                                _cur_can 012B  
                              _loadRTC 4892                                _readMAG 5082  
                              _dpowers FAB4                     actuatorTest@i_1762 00AE  
                   actuatorTest@i_1771 00B4                     actuatorTest@i_1763 00AF  
                   actuatorTest@i_1755 00AD                           __size_of_arm 00FE  
                   actuatorTest@i_1772 00B5                     actuatorTest@i_1781 00BA  
                   actuatorTest@i_1765 00B0                     actuatorTest@i_1782 00BB  
                   actuatorTest@i_1774 00B6                     actuatorTest@i_1766 00B1  
                   actuatorTest@i_1791 00C0                     actuatorTest@i_1775 00B7  
                   actuatorTest@i_1792 00C1                     actuatorTest@i_1784 00BC  
                   actuatorTest@i_1768 00B2                     actuatorTest@i_1785 00BD  
                   actuatorTest@i_1777 00B8                     actuatorTest@i_1769 00B3  
                   actuatorTest@i_1794 00C2                     actuatorTest@i_1778 00B9  
                   actuatorTest@i_1795 00C3                     actuatorTest@i_1787 00BE  
                   actuatorTest@i_1788 00BF                                _isdigit 5564  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 4292  
                 PlatformTest@res_1807 00AF                         __pintcode_body 3618  
                 end_of_initialization 502C                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3618                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1090_47 4F56                              i2u1091_47 4F60  
                            i2u1092_47 4F82                              i2u1093_47 4F8C  
                            i2u1094_47 56D8                              i2u1088_47 384E  
                            i2u1089_47 303E              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 56E8                 __end_of_initGlobalVars 45CC  
                           _sensorTest 2640                             _servoTimes 00DA  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 39F6                           ??_BothServos 00AB  
                __end_of_machineConfig 4DC2                   __end_of_PlatformTest 22D2  
                           _updateMenu 2C08                      i2_I2C_Master_Read 5604  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 572A  
                    i2_I2C_Master_Stop 57A0                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 4E84  
                            i2___lwdiv 4F96                              i2___lwmod 5114  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 3618  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 5768  
                        Loading@i_1183 00B6                          Loading@i_1192 00B8  
                        Loading@i_1194 00BA                          Loading@i_1195 00BC  
                           _total_time 00FA                          Loading@i_1197 00BE  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5692  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1F34  
                  __end_of_EEPROM_read 5700                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 526C  
                       __end_of_getMAG 529E                         __end_of_getRTC 49A4  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5300                         __end_of_readIR 5082  
                       __end_of_logRun 3E86                       i2___wmul@product 0005  
                       __end_of_printf 1B46                           i2printf@flag 0026  
                       __end_of_strcpy 5236              __end_ofi2_I2C_Master_Read 562A  
            __end_ofi2_I2C_Master_Wait 573C                           i2printf@prec 001D  
                  start_initialization 4FE8              __end_ofi2_I2C_Master_Stop 57A8  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 4EE0  
                          __end_of_arm 41AA                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1463 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 4A2A                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0147                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1208 0086  
                             ID@i_1209 0088                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                   __size_of_BlockerTest 0184  
                  _printSortTimer$2580 0043                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2085 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                            _EEPROM_read 56E8  
                     _I2C_Master_Start 5798                     __end_of_PortTestDC 4F3C  
                            _f_lastCan 00F0                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5774  
                    __size_of_initTime 0022                  i2_updateServoPosition 4C82  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAA2                              _lcdNibble 4CF2  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 039E  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 4374  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0272  
                          __size_of_UI 08C4                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 57B0             __end_ofi2_I2C_Master_Write 5788  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 380A                            ??i2_isdigit 0001  
                         _PlatformTest 1F34                           BlockerTest@i 00AC  
                             _PIR2bits 000FA1                               i2u532_40 23F8  
                             i2u532_47 23EE                        PlatformTest@res 00AD  
                             i2u536_40 2458                               i2u536_47 244E  
                             i2u477_40 5622                               i2u577_40 3470  
                             i2u894_40 306E                               i2u896_40 3096  
                             i2u895_48 3070                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 55DE                          lcdNibble@data 0081  
                             i2_getRTC 4C10                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 22D2  
                             i2_strcpy 529E                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4FFC  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5716                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 0580  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 47F0                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 5390             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 51C8             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 5190                _change_state_to_menu_23 5360  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 5480  
              _change_state_to_logs_12 5450                _change_state_to_logs_22 5420  
              _change_state_to_logs_23 54DE                _change_state_to_logs_33 53F0  
              _change_state_to_logs_34 53C0                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3802  
                      _I2C_Master_Init 4E24                       __size_of_readADC 002C  
                      _I2C_Master_Read 54B0                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5716  
                      _I2C_Master_Stop 5790                       __size_of_isdigit 002A  
                             _delay_ms 558E                         _printSortTimer 2EC8  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3FA6                               __ptext10 4292  
                             __ptext11 4D5E                               __ptext20 5670  
                             __ptext12 3D42                               __ptext21 50CE  
                             __ptext13 41AA                               __ptext30 5716  
                             __ptext22 0012                               __ptext14 56E8  
                             __ptext31 5190                               __ptext23 293E  
                             __ptext15 52D0                               __ptext40 08D6  
                             __ptext32 51C8                               __ptext24 5200  
                             __ptext16 4892                               __ptext41 4A2A  
                             __ptext33 47F0                               __ptext25 491E  
                             __ptext17 4E24                               __ptext50 3BBE  
                             __ptext42 4E84                               __ptext34 45CC  
                             __ptext26 5774                               __ptext18 468A  
                             __ptext51 170E                               __ptext43 4EE0  
                             __ptext35 3FA6                               __ptext27 5790  
                             __ptext19 550C                               __ptext60 39F6  
                             __ptext52 573C                               __ptext44 1F34  
                             __ptext36 2640                               __ptext28 5798  
                             __ptext61 4C82                               __ptext53 5564  
                             __ptext45 5538                               __ptext37 5082  
                             __ptext29 54B0                               __ptext70 5390  
                             __ptext62 2C08                               __ptext54 5236  
                             __ptext46 1B46                               __ptext38 40AC  
                             __ptext71 53C0                               __ptext63 55B6  
                             __ptext55 4DC2                               __ptext47 56B0  
                             __ptext39 4374                               __ptext80 5156  
                             __ptext72 53F0                               __ptext64 33E2  
                             __ptext56 4B26                               __ptext48 4AAE  
                             __ptext81 2EC8                               __ptext73 54DE  
                             __ptext65 529E                               __ptext57 574C  
                             __ptext49 49A4                               __ptext90 4C10  
                             __ptext82 22D2                               __ptext74 5420  
                             __ptext66 380A                               __ptext58 4CF2  
                             __ptext91 577E                               __ptext83 575C  
                             __ptext75 5450                               __ptext67 5300  
                             __ptext92 57A0                               __ptext84 5692  
                             __ptext76 5480                               __ptext68 5330  
                             __ptext93 57A8                               __ptext85 55DE  
                             __ptext77 562A                               __ptext69 5360  
                             __ptext94 5604                               __ptext86 5114  
                             __ptext78 3E86                               __ptext95 572A  
                             __ptext87 4F96                               __ptext79 5700  
                             __ptext96 56CC                               __ptext88 5768  
                             __ptext89 4F3C                               _dispLogs 562A  
                        ?_actuatorTest 0001                     PlatformTest@i_1811 00B3  
                   PlatformTest@i_1812 00B5                     PlatformTest@i_1813 00B7  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2085 0002                     __end_of_initServos 4B26  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5670                          __size_of_main 00C4  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 49A4  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 293E                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 5360  
    __end_ofi2_change_state_to_menu_22 5330                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 3170  
                            putch@data 0082               __end_of_I2C_Master_Start 57A0  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 577E  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 293E  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 56CC  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2EC8                __end_of_I2C_Master_Init 4E84  
              __end_of_I2C_Master_Read 54DE                __end_of_I2C_Master_Wait 572A  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5798  
                        printRTC@F3231 014B                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 3E86  
                  __end_ofi2_lcdNibble 4F96                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 5156  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4D5E  
                      ___lwmod@counter 008B                      _updateServoStates 39F6  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00EE  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
